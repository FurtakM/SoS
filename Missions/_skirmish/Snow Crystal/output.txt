// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10637: LD_EXP 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: AND
10679: IFFALSE 10691
10681: GO 10683
10683: DISABLE
// YouLost ( peo-lose ) ;
10684: LD_STRING peo-lose
10686: PPUSH
10687: CALL_OW 104
10691: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10692: LD_EXP 1
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_INT 3
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: PUSH
10730: LD_INT 0
10732: EQUAL
10733: AND
10734: IFFALSE 10746
10736: GO 10738
10738: DISABLE
// YouLost ( peo-lose ) ;
10739: LD_STRING peo-lose
10741: PPUSH
10742: CALL_OW 104
10746: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
10747: LD_OWVAR 2
10751: PPUSH
10752: CALL 10510 0 1
10756: PUSH
10757: LD_EXP 5
10761: GREATEREQUAL
10762: IFFALSE 10848
10764: GO 10766
10766: DISABLE
10767: LD_INT 0
10769: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 255
10777: PUSH
10778: LD_OWVAR 2
10782: EQUAL
10783: IFFALSE 10826
// begin for i = 1 to 3 do
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 3
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10813
// AddMedal ( med , 1 ) ;
10801: LD_STRING med
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 101
10811: GO 10798
10813: POP
10814: POP
// GiveMedals ( MAIN ) ;
10815: LD_STRING MAIN
10817: PPUSH
10818: CALL_OW 102
// YouWin ;
10822: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 255
10833: PUSH
10834: LD_OWVAR 2
10838: NONEQUAL
10839: IFFALSE 10848
// YouLost ( source ) ;
10841: LD_STRING source
10843: PPUSH
10844: CALL_OW 104
// end ; end_of_file
10848: PPOPN 1
10850: END
// every 2 2$05 + 0 0$11 do
10851: GO 10853
10853: DISABLE
// begin enable ;
10854: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10855: LD_INT 1
10857: PPUSH
10858: LD_INT 5
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: LD_INT 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
10876: LD_INT 350
10878: PPUSH
10879: LD_INT 1295
10881: PPUSH
10882: CALL_OW 12
10886: PPUSH
10887: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
10891: LD_INT 1
10893: PPUSH
10894: LD_INT 5
10896: PPUSH
10897: CALL_OW 12
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 57
// end ;
10909: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
10910: LD_EXP 1
10914: PUSH
10915: LD_INT 2
10917: EQUAL
10918: PUSH
10919: LD_EXP 8
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: IFFALSE 11018
10930: GO 10932
10932: DISABLE
// begin enable ;
10933: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10934: LD_INT 1
10936: PPUSH
10937: LD_INT 5
10939: PPUSH
10940: CALL_OW 12
10944: PPUSH
10945: LD_INT 7
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
10955: LD_INT 350
10957: PPUSH
10958: LD_INT 1750
10960: PPUSH
10961: CALL_OW 12
10965: PPUSH
10966: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
10970: LD_EXP 6
10974: PUSH
10975: LD_INT 73500
10977: PUSH
10978: LD_INT 63000
10980: PUSH
10981: LD_INT 52500
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_EXP 2
10993: ARRAY
10994: LESSEQUAL
10995: IFFALSE 11018
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
10997: LD_INT 1
10999: PPUSH
11000: LD_INT 5
11002: PPUSH
11003: CALL_OW 12
11007: PPUSH
11008: LD_INT 12
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 55
// end ; end_of_file
11018: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL 27177 0 3
// end ;
11038: PPOPN 3
11040: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL 27081 0 1
// if un = jota_base then
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: EQUAL
11058: IFFALSE 11067
// YouLost ( jota-lose ) ;
11060: LD_STRING jota-lose
11062: PPUSH
11063: CALL_OW 104
// if game_type = 2 and depot_captured = false then
11067: LD_EXP 1
11071: PUSH
11072: LD_INT 2
11074: EQUAL
11075: PUSH
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 0
11083: EQUAL
11084: AND
11085: IFFALSE 11400
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 255
11096: PUSH
11097: LD_INT 1
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 11
11108: PPUSH
11109: LD_INT 21
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 70
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 6
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 8
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: DIFF
11191: IN
11192: AND
11193: IFFALSE 11279
// begin ai_build := ai_build ^ GetBType ( un ) ;
11195: LD_ADDR_EXP 10
11199: PUSH
11200: LD_EXP 10
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 266
11214: ADD
11215: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
11216: LD_ADDR_EXP 10
11220: PUSH
11221: LD_EXP 10
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL_OW 250
11235: ADD
11236: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
11237: LD_ADDR_EXP 10
11241: PUSH
11242: LD_EXP 10
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 251
11256: ADD
11257: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
11258: LD_ADDR_EXP 10
11262: PUSH
11263: LD_EXP 10
11267: PUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 254
11277: ADD
11278: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 255
11288: PUSH
11289: LD_INT 1
11291: EQUAL
11292: PUSH
11293: LD_VAR 0 1
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: IN
11313: AND
11314: IFFALSE 11400
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
11316: LD_ADDR_EXP 11
11320: PUSH
11321: LD_EXP 11
11325: PUSH
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 265
11335: ADD
11336: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
11337: LD_ADDR_EXP 11
11341: PUSH
11342: LD_EXP 11
11346: PUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 262
11356: ADD
11357: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
11358: LD_ADDR_EXP 11
11362: PUSH
11363: LD_EXP 11
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 263
11377: ADD
11378: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
11379: LD_ADDR_EXP 11
11383: PUSH
11384: LD_EXP 11
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 264
11398: ADD
11399: ST_TO_ADDR
// end ; end ; end ;
11400: PPOPN 1
11402: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_VAR 0 2
11412: PPUSH
11413: CALL 27201 0 2
// end ;
11417: PPOPN 2
11419: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL 27185 0 1
// end ; end_of_file end_of_file
11429: PPOPN 1
11431: END
// every 0 0$1 do
11432: GO 11434
11434: DISABLE
// begin enable ;
11435: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11436: LD_STRING updateTimer(
11438: PUSH
11439: LD_OWVAR 1
11443: STR
11444: PUSH
11445: LD_STRING );
11447: STR
11448: PPUSH
11449: CALL_OW 559
// end ;
11453: END
// export function SOS_MapStart ( ) ; begin
11454: LD_INT 0
11456: PPUSH
// if streamModeActive then
11457: LD_EXP 21
11461: IFFALSE 11470
// DefineStreamItems ( true ) ;
11463: LD_INT 1
11465: PPUSH
11466: CALL 13124 0 1
// UpdateFactoryWaypoints ( ) ;
11470: CALL 25985 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11474: CALL 26242 0 0
// end ;
11478: LD_VAR 0 1
11482: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11483: LD_INT 0
11485: PPUSH
// if p2 = 100 then
11486: LD_VAR 0 2
11490: PUSH
11491: LD_INT 100
11493: EQUAL
11494: IFFALSE 12497
// begin if not StreamModeActive then
11496: LD_EXP 21
11500: NOT
11501: IFFALSE 11511
// StreamModeActive := true ;
11503: LD_ADDR_EXP 21
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// if p3 = 0 then
11511: LD_VAR 0 3
11515: PUSH
11516: LD_INT 0
11518: EQUAL
11519: IFFALSE 11525
// InitStreamMode ;
11521: CALL 12660 0 0
// if p3 = 1 then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 1
11532: EQUAL
11533: IFFALSE 11543
// sRocket := true ;
11535: LD_ADDR_EXP 26
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// if p3 = 2 then
11543: LD_VAR 0 3
11547: PUSH
11548: LD_INT 2
11550: EQUAL
11551: IFFALSE 11561
// sSpeed := true ;
11553: LD_ADDR_EXP 25
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// if p3 = 3 then
11561: LD_VAR 0 3
11565: PUSH
11566: LD_INT 3
11568: EQUAL
11569: IFFALSE 11579
// sEngine := true ;
11571: LD_ADDR_EXP 27
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if p3 = 4 then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 4
11586: EQUAL
11587: IFFALSE 11597
// sSpec := true ;
11589: LD_ADDR_EXP 24
11593: PUSH
11594: LD_INT 1
11596: ST_TO_ADDR
// if p3 = 5 then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 5
11604: EQUAL
11605: IFFALSE 11615
// sLevel := true ;
11607: LD_ADDR_EXP 28
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 6 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 6
11622: EQUAL
11623: IFFALSE 11633
// sArmoury := true ;
11625: LD_ADDR_EXP 29
11629: PUSH
11630: LD_INT 1
11632: ST_TO_ADDR
// if p3 = 7 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 7
11640: EQUAL
11641: IFFALSE 11651
// sRadar := true ;
11643: LD_ADDR_EXP 30
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 8 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 8
11658: EQUAL
11659: IFFALSE 11669
// sBunker := true ;
11661: LD_ADDR_EXP 31
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 9 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 9
11676: EQUAL
11677: IFFALSE 11687
// sHack := true ;
11679: LD_ADDR_EXP 32
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 10 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 10
11694: EQUAL
11695: IFFALSE 11705
// sFire := true ;
11697: LD_ADDR_EXP 33
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 11 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 11
11712: EQUAL
11713: IFFALSE 11723
// sRefresh := true ;
11715: LD_ADDR_EXP 34
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 12 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 12
11730: EQUAL
11731: IFFALSE 11741
// sExp := true ;
11733: LD_ADDR_EXP 35
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 13 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 13
11748: EQUAL
11749: IFFALSE 11759
// sDepot := true ;
11751: LD_ADDR_EXP 36
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 14 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 14
11766: EQUAL
11767: IFFALSE 11777
// sFlag := true ;
11769: LD_ADDR_EXP 37
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 15 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 15
11784: EQUAL
11785: IFFALSE 11795
// sKamikadze := true ;
11787: LD_ADDR_EXP 45
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 16 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 16
11802: EQUAL
11803: IFFALSE 11813
// sTroll := true ;
11805: LD_ADDR_EXP 46
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 17 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 17
11820: EQUAL
11821: IFFALSE 11831
// sSlow := true ;
11823: LD_ADDR_EXP 47
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 18 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 18
11838: EQUAL
11839: IFFALSE 11849
// sLack := true ;
11841: LD_ADDR_EXP 48
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 19 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 19
11856: EQUAL
11857: IFFALSE 11867
// sTank := true ;
11859: LD_ADDR_EXP 50
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 20 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 20
11874: EQUAL
11875: IFFALSE 11885
// sRemote := true ;
11877: LD_ADDR_EXP 51
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 21 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 21
11892: EQUAL
11893: IFFALSE 11903
// sPowell := true ;
11895: LD_ADDR_EXP 52
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 22 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 22
11910: EQUAL
11911: IFFALSE 11921
// sTeleport := true ;
11913: LD_ADDR_EXP 55
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 23 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 23
11928: EQUAL
11929: IFFALSE 11939
// sOilTower := true ;
11931: LD_ADDR_EXP 57
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 24 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 24
11946: EQUAL
11947: IFFALSE 11957
// sShovel := true ;
11949: LD_ADDR_EXP 58
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 25 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 25
11964: EQUAL
11965: IFFALSE 11975
// sSheik := true ;
11967: LD_ADDR_EXP 59
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 26 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 26
11982: EQUAL
11983: IFFALSE 11993
// sEarthquake := true ;
11985: LD_ADDR_EXP 61
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 27 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 27
12000: EQUAL
12001: IFFALSE 12011
// sAI := true ;
12003: LD_ADDR_EXP 62
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 28 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 28
12018: EQUAL
12019: IFFALSE 12029
// sCargo := true ;
12021: LD_ADDR_EXP 65
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 29 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 29
12036: EQUAL
12037: IFFALSE 12047
// sDLaser := true ;
12039: LD_ADDR_EXP 66
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 30 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 30
12054: EQUAL
12055: IFFALSE 12065
// sExchange := true ;
12057: LD_ADDR_EXP 67
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 31 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 31
12072: EQUAL
12073: IFFALSE 12083
// sFac := true ;
12075: LD_ADDR_EXP 68
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 32 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 32
12090: EQUAL
12091: IFFALSE 12101
// sPower := true ;
12093: LD_ADDR_EXP 69
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 33 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 33
12108: EQUAL
12109: IFFALSE 12119
// sRandom := true ;
12111: LD_ADDR_EXP 70
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 34 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 34
12126: EQUAL
12127: IFFALSE 12137
// sShield := true ;
12129: LD_ADDR_EXP 71
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 35 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 35
12144: EQUAL
12145: IFFALSE 12155
// sTime := true ;
12147: LD_ADDR_EXP 72
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 36 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 36
12162: EQUAL
12163: IFFALSE 12173
// sTools := true ;
12165: LD_ADDR_EXP 73
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 101 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 101
12180: EQUAL
12181: IFFALSE 12191
// sSold := true ;
12183: LD_ADDR_EXP 38
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 102 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 102
12198: EQUAL
12199: IFFALSE 12209
// sDiff := true ;
12201: LD_ADDR_EXP 39
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 103 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 103
12216: EQUAL
12217: IFFALSE 12227
// sFog := true ;
12219: LD_ADDR_EXP 42
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 104 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 104
12234: EQUAL
12235: IFFALSE 12245
// sReset := true ;
12237: LD_ADDR_EXP 43
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 105 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 105
12252: EQUAL
12253: IFFALSE 12263
// sSun := true ;
12255: LD_ADDR_EXP 44
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 106 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 106
12270: EQUAL
12271: IFFALSE 12281
// sTiger := true ;
12273: LD_ADDR_EXP 40
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 107 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 107
12288: EQUAL
12289: IFFALSE 12299
// sBomb := true ;
12291: LD_ADDR_EXP 41
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 108 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 108
12306: EQUAL
12307: IFFALSE 12317
// sWound := true ;
12309: LD_ADDR_EXP 49
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 109 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 109
12324: EQUAL
12325: IFFALSE 12335
// sBetray := true ;
12327: LD_ADDR_EXP 53
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 110 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 110
12342: EQUAL
12343: IFFALSE 12353
// sContamin := true ;
12345: LD_ADDR_EXP 54
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 111 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 111
12360: EQUAL
12361: IFFALSE 12371
// sOil := true ;
12363: LD_ADDR_EXP 56
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 112 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 112
12378: EQUAL
12379: IFFALSE 12389
// sStu := true ;
12381: LD_ADDR_EXP 60
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 113 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 113
12396: EQUAL
12397: IFFALSE 12407
// sBazooka := true ;
12399: LD_ADDR_EXP 63
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 114 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 114
12414: EQUAL
12415: IFFALSE 12425
// sMortar := true ;
12417: LD_ADDR_EXP 64
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 115 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 115
12432: EQUAL
12433: IFFALSE 12443
// sRanger := true ;
12435: LD_ADDR_EXP 74
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 116 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 116
12450: EQUAL
12451: IFFALSE 12461
// sComputer := true ;
12453: LD_ADDR_EXP 75
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 117 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 117
12468: EQUAL
12469: IFFALSE 12479
// s30 := true ;
12471: LD_ADDR_EXP 76
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 118 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 118
12486: EQUAL
12487: IFFALSE 12497
// s60 := true ;
12489: LD_ADDR_EXP 77
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// end ; if p2 = 101 then
12497: LD_VAR 0 2
12501: PUSH
12502: LD_INT 101
12504: EQUAL
12505: IFFALSE 12633
// begin case p3 of 1 :
12507: LD_VAR 0 3
12511: PUSH
12512: LD_INT 1
12514: DOUBLE
12515: EQUAL
12516: IFTRUE 12520
12518: GO 12527
12520: POP
// hHackUnlimitedResources ; 2 :
12521: CALL 24731 0 0
12525: GO 12633
12527: LD_INT 2
12529: DOUBLE
12530: EQUAL
12531: IFTRUE 12535
12533: GO 12542
12535: POP
// hHackSetLevel10 ; 3 :
12536: CALL 24864 0 0
12540: GO 12633
12542: LD_INT 3
12544: DOUBLE
12545: EQUAL
12546: IFTRUE 12550
12548: GO 12557
12550: POP
// hHackSetLevel10YourUnits ; 4 :
12551: CALL 24949 0 0
12555: GO 12633
12557: LD_INT 4
12559: DOUBLE
12560: EQUAL
12561: IFTRUE 12565
12563: GO 12572
12565: POP
// hHackInvincible ; 5 :
12566: CALL 25397 0 0
12570: GO 12633
12572: LD_INT 5
12574: DOUBLE
12575: EQUAL
12576: IFTRUE 12580
12578: GO 12587
12580: POP
// hHackInvisible ; 6 :
12581: CALL 25508 0 0
12585: GO 12633
12587: LD_INT 6
12589: DOUBLE
12590: EQUAL
12591: IFTRUE 12595
12593: GO 12602
12595: POP
// hHackChangeYourSide ; 7 :
12596: CALL 25565 0 0
12600: GO 12633
12602: LD_INT 7
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12617
12610: POP
// hHackChangeUnitSide ; 8 :
12611: CALL 25607 0 0
12615: GO 12633
12617: LD_INT 8
12619: DOUBLE
12620: EQUAL
12621: IFTRUE 12625
12623: GO 12632
12625: POP
// hHackFog ; end ;
12626: CALL 25708 0 0
12630: GO 12633
12632: POP
// end ; end ;
12633: LD_VAR 0 7
12637: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12638: GO 12640
12640: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12641: LD_STRING initStreamRollete();
12643: PPUSH
12644: CALL_OW 559
// InitStreamMode ;
12648: CALL 12660 0 0
// DefineStreamItems ( false ) ;
12652: LD_INT 0
12654: PPUSH
12655: CALL 13124 0 1
// end ;
12659: END
// function InitStreamMode ; begin
12660: LD_INT 0
12662: PPUSH
// streamModeActive := false ;
12663: LD_ADDR_EXP 21
12667: PUSH
12668: LD_INT 0
12670: ST_TO_ADDR
// normalCounter := 36 ;
12671: LD_ADDR_EXP 22
12675: PUSH
12676: LD_INT 36
12678: ST_TO_ADDR
// hardcoreCounter := 18 ;
12679: LD_ADDR_EXP 23
12683: PUSH
12684: LD_INT 18
12686: ST_TO_ADDR
// sRocket := false ;
12687: LD_ADDR_EXP 26
12691: PUSH
12692: LD_INT 0
12694: ST_TO_ADDR
// sSpeed := false ;
12695: LD_ADDR_EXP 25
12699: PUSH
12700: LD_INT 0
12702: ST_TO_ADDR
// sEngine := false ;
12703: LD_ADDR_EXP 27
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// sSpec := false ;
12711: LD_ADDR_EXP 24
12715: PUSH
12716: LD_INT 0
12718: ST_TO_ADDR
// sLevel := false ;
12719: LD_ADDR_EXP 28
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// sArmoury := false ;
12727: LD_ADDR_EXP 29
12731: PUSH
12732: LD_INT 0
12734: ST_TO_ADDR
// sRadar := false ;
12735: LD_ADDR_EXP 30
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// sBunker := false ;
12743: LD_ADDR_EXP 31
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// sHack := false ;
12751: LD_ADDR_EXP 32
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// sFire := false ;
12759: LD_ADDR_EXP 33
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// sRefresh := false ;
12767: LD_ADDR_EXP 34
12771: PUSH
12772: LD_INT 0
12774: ST_TO_ADDR
// sExp := false ;
12775: LD_ADDR_EXP 35
12779: PUSH
12780: LD_INT 0
12782: ST_TO_ADDR
// sDepot := false ;
12783: LD_ADDR_EXP 36
12787: PUSH
12788: LD_INT 0
12790: ST_TO_ADDR
// sFlag := false ;
12791: LD_ADDR_EXP 37
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// sKamikadze := false ;
12799: LD_ADDR_EXP 45
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// sTroll := false ;
12807: LD_ADDR_EXP 46
12811: PUSH
12812: LD_INT 0
12814: ST_TO_ADDR
// sSlow := false ;
12815: LD_ADDR_EXP 47
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// sLack := false ;
12823: LD_ADDR_EXP 48
12827: PUSH
12828: LD_INT 0
12830: ST_TO_ADDR
// sTank := false ;
12831: LD_ADDR_EXP 50
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// sRemote := false ;
12839: LD_ADDR_EXP 51
12843: PUSH
12844: LD_INT 0
12846: ST_TO_ADDR
// sPowell := false ;
12847: LD_ADDR_EXP 52
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// sTeleport := false ;
12855: LD_ADDR_EXP 55
12859: PUSH
12860: LD_INT 0
12862: ST_TO_ADDR
// sOilTower := false ;
12863: LD_ADDR_EXP 57
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// sShovel := false ;
12871: LD_ADDR_EXP 58
12875: PUSH
12876: LD_INT 0
12878: ST_TO_ADDR
// sSheik := false ;
12879: LD_ADDR_EXP 59
12883: PUSH
12884: LD_INT 0
12886: ST_TO_ADDR
// sEarthquake := false ;
12887: LD_ADDR_EXP 61
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// sAI := false ;
12895: LD_ADDR_EXP 62
12899: PUSH
12900: LD_INT 0
12902: ST_TO_ADDR
// sCargo := false ;
12903: LD_ADDR_EXP 65
12907: PUSH
12908: LD_INT 0
12910: ST_TO_ADDR
// sDLaser := false ;
12911: LD_ADDR_EXP 66
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// sExchange := false ;
12919: LD_ADDR_EXP 67
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// sFac := false ;
12927: LD_ADDR_EXP 68
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// sPower := false ;
12935: LD_ADDR_EXP 69
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// sRandom := false ;
12943: LD_ADDR_EXP 70
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// sShield := false ;
12951: LD_ADDR_EXP 71
12955: PUSH
12956: LD_INT 0
12958: ST_TO_ADDR
// sTime := false ;
12959: LD_ADDR_EXP 72
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// sTools := false ;
12967: LD_ADDR_EXP 73
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// sSold := false ;
12975: LD_ADDR_EXP 38
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// sDiff := false ;
12983: LD_ADDR_EXP 39
12987: PUSH
12988: LD_INT 0
12990: ST_TO_ADDR
// sFog := false ;
12991: LD_ADDR_EXP 42
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sReset := false ;
12999: LD_ADDR_EXP 43
13003: PUSH
13004: LD_INT 0
13006: ST_TO_ADDR
// sSun := false ;
13007: LD_ADDR_EXP 44
13011: PUSH
13012: LD_INT 0
13014: ST_TO_ADDR
// sTiger := false ;
13015: LD_ADDR_EXP 40
13019: PUSH
13020: LD_INT 0
13022: ST_TO_ADDR
// sBomb := false ;
13023: LD_ADDR_EXP 41
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// sWound := false ;
13031: LD_ADDR_EXP 49
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// sBetray := false ;
13039: LD_ADDR_EXP 53
13043: PUSH
13044: LD_INT 0
13046: ST_TO_ADDR
// sContamin := false ;
13047: LD_ADDR_EXP 54
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// sOil := false ;
13055: LD_ADDR_EXP 56
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// sStu := false ;
13063: LD_ADDR_EXP 60
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// sBazooka := false ;
13071: LD_ADDR_EXP 63
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// sMortar := false ;
13079: LD_ADDR_EXP 64
13083: PUSH
13084: LD_INT 0
13086: ST_TO_ADDR
// sRanger := false ;
13087: LD_ADDR_EXP 74
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// sComputer := false ;
13095: LD_ADDR_EXP 75
13099: PUSH
13100: LD_INT 0
13102: ST_TO_ADDR
// s30 := false ;
13103: LD_ADDR_EXP 76
13107: PUSH
13108: LD_INT 0
13110: ST_TO_ADDR
// s60 := false ;
13111: LD_ADDR_EXP 77
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: LD_VAR 0 1
13123: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13124: LD_INT 0
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
// result := [ ] ;
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: EMPTY
13139: ST_TO_ADDR
// if campaign_id = 1 then
13140: LD_OWVAR 69
13144: PUSH
13145: LD_INT 1
13147: EQUAL
13148: IFFALSE 16314
// begin case mission_number of 1 :
13150: LD_OWVAR 70
13154: PUSH
13155: LD_INT 1
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13239
13163: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13164: LD_ADDR_VAR 0 2
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: LD_INT 4
13174: PUSH
13175: LD_INT 11
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: LD_INT 15
13183: PUSH
13184: LD_INT 16
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_INT 23
13192: PUSH
13193: LD_INT 26
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 101
13209: PUSH
13210: LD_INT 102
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 116
13218: PUSH
13219: LD_INT 117
13221: PUSH
13222: LD_INT 118
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: ST_TO_ADDR
13237: GO 16312
13239: LD_INT 2
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 13331
13247: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 4
13258: PUSH
13259: LD_INT 11
13261: PUSH
13262: LD_INT 12
13264: PUSH
13265: LD_INT 15
13267: PUSH
13268: LD_INT 16
13270: PUSH
13271: LD_INT 22
13273: PUSH
13274: LD_INT 23
13276: PUSH
13277: LD_INT 26
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 101
13293: PUSH
13294: LD_INT 102
13296: PUSH
13297: LD_INT 105
13299: PUSH
13300: LD_INT 106
13302: PUSH
13303: LD_INT 108
13305: PUSH
13306: LD_INT 116
13308: PUSH
13309: LD_INT 117
13311: PUSH
13312: LD_INT 118
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: ST_TO_ADDR
13329: GO 16312
13331: LD_INT 3
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13427
13339: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 4
13350: PUSH
13351: LD_INT 5
13353: PUSH
13354: LD_INT 11
13356: PUSH
13357: LD_INT 12
13359: PUSH
13360: LD_INT 15
13362: PUSH
13363: LD_INT 16
13365: PUSH
13366: LD_INT 22
13368: PUSH
13369: LD_INT 26
13371: PUSH
13372: LD_INT 36
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 101
13389: PUSH
13390: LD_INT 102
13392: PUSH
13393: LD_INT 105
13395: PUSH
13396: LD_INT 106
13398: PUSH
13399: LD_INT 108
13401: PUSH
13402: LD_INT 116
13404: PUSH
13405: LD_INT 117
13407: PUSH
13408: LD_INT 118
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: ST_TO_ADDR
13425: GO 16312
13427: LD_INT 4
13429: DOUBLE
13430: EQUAL
13431: IFTRUE 13435
13433: GO 13531
13435: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13436: LD_ADDR_VAR 0 2
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: LD_INT 5
13449: PUSH
13450: LD_INT 8
13452: PUSH
13453: LD_INT 11
13455: PUSH
13456: LD_INT 12
13458: PUSH
13459: LD_INT 15
13461: PUSH
13462: LD_INT 16
13464: PUSH
13465: LD_INT 22
13467: PUSH
13468: LD_INT 23
13470: PUSH
13471: LD_INT 26
13473: PUSH
13474: LD_INT 36
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 101
13493: PUSH
13494: LD_INT 102
13496: PUSH
13497: LD_INT 105
13499: PUSH
13500: LD_INT 106
13502: PUSH
13503: LD_INT 108
13505: PUSH
13506: LD_INT 116
13508: PUSH
13509: LD_INT 117
13511: PUSH
13512: LD_INT 118
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: ST_TO_ADDR
13529: GO 16312
13531: LD_INT 5
13533: DOUBLE
13534: EQUAL
13535: IFTRUE 13539
13537: GO 13651
13539: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: LD_INT 5
13553: PUSH
13554: LD_INT 6
13556: PUSH
13557: LD_INT 8
13559: PUSH
13560: LD_INT 11
13562: PUSH
13563: LD_INT 12
13565: PUSH
13566: LD_INT 15
13568: PUSH
13569: LD_INT 16
13571: PUSH
13572: LD_INT 22
13574: PUSH
13575: LD_INT 23
13577: PUSH
13578: LD_INT 25
13580: PUSH
13581: LD_INT 26
13583: PUSH
13584: LD_INT 36
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 101
13605: PUSH
13606: LD_INT 102
13608: PUSH
13609: LD_INT 105
13611: PUSH
13612: LD_INT 106
13614: PUSH
13615: LD_INT 108
13617: PUSH
13618: LD_INT 109
13620: PUSH
13621: LD_INT 112
13623: PUSH
13624: LD_INT 116
13626: PUSH
13627: LD_INT 117
13629: PUSH
13630: LD_INT 118
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: ST_TO_ADDR
13649: GO 16312
13651: LD_INT 6
13653: DOUBLE
13654: EQUAL
13655: IFTRUE 13659
13657: GO 13791
13659: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13660: LD_ADDR_VAR 0 2
13664: PUSH
13665: LD_INT 2
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: LD_INT 5
13673: PUSH
13674: LD_INT 6
13676: PUSH
13677: LD_INT 8
13679: PUSH
13680: LD_INT 11
13682: PUSH
13683: LD_INT 12
13685: PUSH
13686: LD_INT 15
13688: PUSH
13689: LD_INT 16
13691: PUSH
13692: LD_INT 20
13694: PUSH
13695: LD_INT 21
13697: PUSH
13698: LD_INT 22
13700: PUSH
13701: LD_INT 23
13703: PUSH
13704: LD_INT 25
13706: PUSH
13707: LD_INT 26
13709: PUSH
13710: LD_INT 30
13712: PUSH
13713: LD_INT 31
13715: PUSH
13716: LD_INT 32
13718: PUSH
13719: LD_INT 36
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 101
13745: PUSH
13746: LD_INT 102
13748: PUSH
13749: LD_INT 105
13751: PUSH
13752: LD_INT 106
13754: PUSH
13755: LD_INT 108
13757: PUSH
13758: LD_INT 109
13760: PUSH
13761: LD_INT 112
13763: PUSH
13764: LD_INT 116
13766: PUSH
13767: LD_INT 117
13769: PUSH
13770: LD_INT 118
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: ST_TO_ADDR
13789: GO 16312
13791: LD_INT 7
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 13911
13799: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13800: LD_ADDR_VAR 0 2
13804: PUSH
13805: LD_INT 2
13807: PUSH
13808: LD_INT 4
13810: PUSH
13811: LD_INT 5
13813: PUSH
13814: LD_INT 7
13816: PUSH
13817: LD_INT 11
13819: PUSH
13820: LD_INT 12
13822: PUSH
13823: LD_INT 15
13825: PUSH
13826: LD_INT 16
13828: PUSH
13829: LD_INT 20
13831: PUSH
13832: LD_INT 21
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_INT 23
13840: PUSH
13841: LD_INT 25
13843: PUSH
13844: LD_INT 26
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 101
13865: PUSH
13866: LD_INT 102
13868: PUSH
13869: LD_INT 103
13871: PUSH
13872: LD_INT 105
13874: PUSH
13875: LD_INT 106
13877: PUSH
13878: LD_INT 108
13880: PUSH
13881: LD_INT 112
13883: PUSH
13884: LD_INT 116
13886: PUSH
13887: LD_INT 117
13889: PUSH
13890: LD_INT 118
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: ST_TO_ADDR
13909: GO 16312
13911: LD_INT 8
13913: DOUBLE
13914: EQUAL
13915: IFTRUE 13919
13917: GO 14059
13919: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_INT 2
13927: PUSH
13928: LD_INT 4
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: LD_INT 6
13936: PUSH
13937: LD_INT 7
13939: PUSH
13940: LD_INT 8
13942: PUSH
13943: LD_INT 11
13945: PUSH
13946: LD_INT 12
13948: PUSH
13949: LD_INT 15
13951: PUSH
13952: LD_INT 16
13954: PUSH
13955: LD_INT 20
13957: PUSH
13958: LD_INT 21
13960: PUSH
13961: LD_INT 22
13963: PUSH
13964: LD_INT 23
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 26
13972: PUSH
13973: LD_INT 30
13975: PUSH
13976: LD_INT 31
13978: PUSH
13979: LD_INT 32
13981: PUSH
13982: LD_INT 36
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 101
14009: PUSH
14010: LD_INT 102
14012: PUSH
14013: LD_INT 103
14015: PUSH
14016: LD_INT 105
14018: PUSH
14019: LD_INT 106
14021: PUSH
14022: LD_INT 108
14024: PUSH
14025: LD_INT 109
14027: PUSH
14028: LD_INT 112
14030: PUSH
14031: LD_INT 116
14033: PUSH
14034: LD_INT 117
14036: PUSH
14037: LD_INT 118
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: ST_TO_ADDR
14057: GO 16312
14059: LD_INT 9
14061: DOUBLE
14062: EQUAL
14063: IFTRUE 14067
14065: GO 14215
14067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: LD_INT 4
14078: PUSH
14079: LD_INT 5
14081: PUSH
14082: LD_INT 6
14084: PUSH
14085: LD_INT 7
14087: PUSH
14088: LD_INT 8
14090: PUSH
14091: LD_INT 11
14093: PUSH
14094: LD_INT 12
14096: PUSH
14097: LD_INT 15
14099: PUSH
14100: LD_INT 16
14102: PUSH
14103: LD_INT 20
14105: PUSH
14106: LD_INT 21
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_INT 23
14114: PUSH
14115: LD_INT 25
14117: PUSH
14118: LD_INT 26
14120: PUSH
14121: LD_INT 28
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: LD_INT 32
14132: PUSH
14133: LD_INT 36
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 101
14161: PUSH
14162: LD_INT 102
14164: PUSH
14165: LD_INT 103
14167: PUSH
14168: LD_INT 105
14170: PUSH
14171: LD_INT 106
14173: PUSH
14174: LD_INT 108
14176: PUSH
14177: LD_INT 109
14179: PUSH
14180: LD_INT 112
14182: PUSH
14183: LD_INT 114
14185: PUSH
14186: LD_INT 116
14188: PUSH
14189: LD_INT 117
14191: PUSH
14192: LD_INT 118
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: ST_TO_ADDR
14213: GO 16312
14215: LD_INT 10
14217: DOUBLE
14218: EQUAL
14219: IFTRUE 14223
14221: GO 14419
14223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14224: LD_ADDR_VAR 0 2
14228: PUSH
14229: LD_INT 2
14231: PUSH
14232: LD_INT 4
14234: PUSH
14235: LD_INT 5
14237: PUSH
14238: LD_INT 6
14240: PUSH
14241: LD_INT 7
14243: PUSH
14244: LD_INT 8
14246: PUSH
14247: LD_INT 9
14249: PUSH
14250: LD_INT 10
14252: PUSH
14253: LD_INT 11
14255: PUSH
14256: LD_INT 12
14258: PUSH
14259: LD_INT 13
14261: PUSH
14262: LD_INT 14
14264: PUSH
14265: LD_INT 15
14267: PUSH
14268: LD_INT 16
14270: PUSH
14271: LD_INT 17
14273: PUSH
14274: LD_INT 18
14276: PUSH
14277: LD_INT 19
14279: PUSH
14280: LD_INT 20
14282: PUSH
14283: LD_INT 21
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_INT 23
14291: PUSH
14292: LD_INT 24
14294: PUSH
14295: LD_INT 25
14297: PUSH
14298: LD_INT 26
14300: PUSH
14301: LD_INT 28
14303: PUSH
14304: LD_INT 30
14306: PUSH
14307: LD_INT 31
14309: PUSH
14310: LD_INT 32
14312: PUSH
14313: LD_INT 36
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 101
14349: PUSH
14350: LD_INT 102
14352: PUSH
14353: LD_INT 103
14355: PUSH
14356: LD_INT 104
14358: PUSH
14359: LD_INT 105
14361: PUSH
14362: LD_INT 106
14364: PUSH
14365: LD_INT 107
14367: PUSH
14368: LD_INT 108
14370: PUSH
14371: LD_INT 109
14373: PUSH
14374: LD_INT 110
14376: PUSH
14377: LD_INT 111
14379: PUSH
14380: LD_INT 112
14382: PUSH
14383: LD_INT 114
14385: PUSH
14386: LD_INT 116
14388: PUSH
14389: LD_INT 117
14391: PUSH
14392: LD_INT 118
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: ST_TO_ADDR
14417: GO 16312
14419: LD_INT 11
14421: DOUBLE
14422: EQUAL
14423: IFTRUE 14427
14425: GO 14631
14427: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14428: LD_ADDR_VAR 0 2
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 3
14438: PUSH
14439: LD_INT 4
14441: PUSH
14442: LD_INT 5
14444: PUSH
14445: LD_INT 6
14447: PUSH
14448: LD_INT 7
14450: PUSH
14451: LD_INT 8
14453: PUSH
14454: LD_INT 9
14456: PUSH
14457: LD_INT 10
14459: PUSH
14460: LD_INT 11
14462: PUSH
14463: LD_INT 12
14465: PUSH
14466: LD_INT 13
14468: PUSH
14469: LD_INT 14
14471: PUSH
14472: LD_INT 15
14474: PUSH
14475: LD_INT 16
14477: PUSH
14478: LD_INT 17
14480: PUSH
14481: LD_INT 18
14483: PUSH
14484: LD_INT 19
14486: PUSH
14487: LD_INT 20
14489: PUSH
14490: LD_INT 21
14492: PUSH
14493: LD_INT 22
14495: PUSH
14496: LD_INT 23
14498: PUSH
14499: LD_INT 24
14501: PUSH
14502: LD_INT 25
14504: PUSH
14505: LD_INT 26
14507: PUSH
14508: LD_INT 28
14510: PUSH
14511: LD_INT 30
14513: PUSH
14514: LD_INT 31
14516: PUSH
14517: LD_INT 32
14519: PUSH
14520: LD_INT 34
14522: PUSH
14523: LD_INT 36
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 101
14561: PUSH
14562: LD_INT 102
14564: PUSH
14565: LD_INT 103
14567: PUSH
14568: LD_INT 104
14570: PUSH
14571: LD_INT 105
14573: PUSH
14574: LD_INT 106
14576: PUSH
14577: LD_INT 107
14579: PUSH
14580: LD_INT 108
14582: PUSH
14583: LD_INT 109
14585: PUSH
14586: LD_INT 110
14588: PUSH
14589: LD_INT 111
14591: PUSH
14592: LD_INT 112
14594: PUSH
14595: LD_INT 114
14597: PUSH
14598: LD_INT 116
14600: PUSH
14601: LD_INT 117
14603: PUSH
14604: LD_INT 118
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: ST_TO_ADDR
14629: GO 16312
14631: LD_INT 12
14633: DOUBLE
14634: EQUAL
14635: IFTRUE 14639
14637: GO 14859
14639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14640: LD_ADDR_VAR 0 2
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: LD_INT 3
14653: PUSH
14654: LD_INT 4
14656: PUSH
14657: LD_INT 5
14659: PUSH
14660: LD_INT 6
14662: PUSH
14663: LD_INT 7
14665: PUSH
14666: LD_INT 8
14668: PUSH
14669: LD_INT 9
14671: PUSH
14672: LD_INT 10
14674: PUSH
14675: LD_INT 11
14677: PUSH
14678: LD_INT 12
14680: PUSH
14681: LD_INT 13
14683: PUSH
14684: LD_INT 14
14686: PUSH
14687: LD_INT 15
14689: PUSH
14690: LD_INT 16
14692: PUSH
14693: LD_INT 17
14695: PUSH
14696: LD_INT 18
14698: PUSH
14699: LD_INT 19
14701: PUSH
14702: LD_INT 20
14704: PUSH
14705: LD_INT 21
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_INT 23
14713: PUSH
14714: LD_INT 24
14716: PUSH
14717: LD_INT 25
14719: PUSH
14720: LD_INT 26
14722: PUSH
14723: LD_INT 27
14725: PUSH
14726: LD_INT 28
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 31
14734: PUSH
14735: LD_INT 32
14737: PUSH
14738: LD_INT 33
14740: PUSH
14741: LD_INT 34
14743: PUSH
14744: LD_INT 36
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 101
14785: PUSH
14786: LD_INT 102
14788: PUSH
14789: LD_INT 103
14791: PUSH
14792: LD_INT 104
14794: PUSH
14795: LD_INT 105
14797: PUSH
14798: LD_INT 106
14800: PUSH
14801: LD_INT 107
14803: PUSH
14804: LD_INT 108
14806: PUSH
14807: LD_INT 109
14809: PUSH
14810: LD_INT 110
14812: PUSH
14813: LD_INT 111
14815: PUSH
14816: LD_INT 112
14818: PUSH
14819: LD_INT 113
14821: PUSH
14822: LD_INT 114
14824: PUSH
14825: LD_INT 116
14827: PUSH
14828: LD_INT 117
14830: PUSH
14831: LD_INT 118
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: ST_TO_ADDR
14857: GO 16312
14859: LD_INT 13
14861: DOUBLE
14862: EQUAL
14863: IFTRUE 14867
14865: GO 15075
14867: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: LD_INT 5
14887: PUSH
14888: LD_INT 8
14890: PUSH
14891: LD_INT 9
14893: PUSH
14894: LD_INT 10
14896: PUSH
14897: LD_INT 11
14899: PUSH
14900: LD_INT 12
14902: PUSH
14903: LD_INT 14
14905: PUSH
14906: LD_INT 15
14908: PUSH
14909: LD_INT 16
14911: PUSH
14912: LD_INT 17
14914: PUSH
14915: LD_INT 18
14917: PUSH
14918: LD_INT 19
14920: PUSH
14921: LD_INT 20
14923: PUSH
14924: LD_INT 21
14926: PUSH
14927: LD_INT 22
14929: PUSH
14930: LD_INT 23
14932: PUSH
14933: LD_INT 24
14935: PUSH
14936: LD_INT 25
14938: PUSH
14939: LD_INT 26
14941: PUSH
14942: LD_INT 27
14944: PUSH
14945: LD_INT 28
14947: PUSH
14948: LD_INT 30
14950: PUSH
14951: LD_INT 31
14953: PUSH
14954: LD_INT 32
14956: PUSH
14957: LD_INT 33
14959: PUSH
14960: LD_INT 34
14962: PUSH
14963: LD_INT 36
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 101
15001: PUSH
15002: LD_INT 102
15004: PUSH
15005: LD_INT 103
15007: PUSH
15008: LD_INT 104
15010: PUSH
15011: LD_INT 105
15013: PUSH
15014: LD_INT 106
15016: PUSH
15017: LD_INT 107
15019: PUSH
15020: LD_INT 108
15022: PUSH
15023: LD_INT 109
15025: PUSH
15026: LD_INT 110
15028: PUSH
15029: LD_INT 111
15031: PUSH
15032: LD_INT 112
15034: PUSH
15035: LD_INT 113
15037: PUSH
15038: LD_INT 114
15040: PUSH
15041: LD_INT 116
15043: PUSH
15044: LD_INT 117
15046: PUSH
15047: LD_INT 118
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: ST_TO_ADDR
15073: GO 16312
15075: LD_INT 14
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15307
15083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15084: LD_ADDR_VAR 0 2
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: LD_INT 5
15103: PUSH
15104: LD_INT 6
15106: PUSH
15107: LD_INT 7
15109: PUSH
15110: LD_INT 8
15112: PUSH
15113: LD_INT 9
15115: PUSH
15116: LD_INT 10
15118: PUSH
15119: LD_INT 11
15121: PUSH
15122: LD_INT 12
15124: PUSH
15125: LD_INT 13
15127: PUSH
15128: LD_INT 14
15130: PUSH
15131: LD_INT 15
15133: PUSH
15134: LD_INT 16
15136: PUSH
15137: LD_INT 17
15139: PUSH
15140: LD_INT 18
15142: PUSH
15143: LD_INT 19
15145: PUSH
15146: LD_INT 20
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 22
15154: PUSH
15155: LD_INT 23
15157: PUSH
15158: LD_INT 24
15160: PUSH
15161: LD_INT 25
15163: PUSH
15164: LD_INT 26
15166: PUSH
15167: LD_INT 27
15169: PUSH
15170: LD_INT 28
15172: PUSH
15173: LD_INT 29
15175: PUSH
15176: LD_INT 30
15178: PUSH
15179: LD_INT 31
15181: PUSH
15182: LD_INT 32
15184: PUSH
15185: LD_INT 33
15187: PUSH
15188: LD_INT 34
15190: PUSH
15191: LD_INT 36
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 101
15233: PUSH
15234: LD_INT 102
15236: PUSH
15237: LD_INT 103
15239: PUSH
15240: LD_INT 104
15242: PUSH
15243: LD_INT 105
15245: PUSH
15246: LD_INT 106
15248: PUSH
15249: LD_INT 107
15251: PUSH
15252: LD_INT 108
15254: PUSH
15255: LD_INT 109
15257: PUSH
15258: LD_INT 110
15260: PUSH
15261: LD_INT 111
15263: PUSH
15264: LD_INT 112
15266: PUSH
15267: LD_INT 113
15269: PUSH
15270: LD_INT 114
15272: PUSH
15273: LD_INT 116
15275: PUSH
15276: LD_INT 117
15278: PUSH
15279: LD_INT 118
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: ST_TO_ADDR
15305: GO 16312
15307: LD_INT 15
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15539
15315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15316: LD_ADDR_VAR 0 2
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: LD_INT 3
15329: PUSH
15330: LD_INT 4
15332: PUSH
15333: LD_INT 5
15335: PUSH
15336: LD_INT 6
15338: PUSH
15339: LD_INT 7
15341: PUSH
15342: LD_INT 8
15344: PUSH
15345: LD_INT 9
15347: PUSH
15348: LD_INT 10
15350: PUSH
15351: LD_INT 11
15353: PUSH
15354: LD_INT 12
15356: PUSH
15357: LD_INT 13
15359: PUSH
15360: LD_INT 14
15362: PUSH
15363: LD_INT 15
15365: PUSH
15366: LD_INT 16
15368: PUSH
15369: LD_INT 17
15371: PUSH
15372: LD_INT 18
15374: PUSH
15375: LD_INT 19
15377: PUSH
15378: LD_INT 20
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 22
15386: PUSH
15387: LD_INT 23
15389: PUSH
15390: LD_INT 24
15392: PUSH
15393: LD_INT 25
15395: PUSH
15396: LD_INT 26
15398: PUSH
15399: LD_INT 27
15401: PUSH
15402: LD_INT 28
15404: PUSH
15405: LD_INT 29
15407: PUSH
15408: LD_INT 30
15410: PUSH
15411: LD_INT 31
15413: PUSH
15414: LD_INT 32
15416: PUSH
15417: LD_INT 33
15419: PUSH
15420: LD_INT 34
15422: PUSH
15423: LD_INT 36
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 101
15465: PUSH
15466: LD_INT 102
15468: PUSH
15469: LD_INT 103
15471: PUSH
15472: LD_INT 104
15474: PUSH
15475: LD_INT 105
15477: PUSH
15478: LD_INT 106
15480: PUSH
15481: LD_INT 107
15483: PUSH
15484: LD_INT 108
15486: PUSH
15487: LD_INT 109
15489: PUSH
15490: LD_INT 110
15492: PUSH
15493: LD_INT 111
15495: PUSH
15496: LD_INT 112
15498: PUSH
15499: LD_INT 113
15501: PUSH
15502: LD_INT 114
15504: PUSH
15505: LD_INT 116
15507: PUSH
15508: LD_INT 117
15510: PUSH
15511: LD_INT 118
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: ST_TO_ADDR
15537: GO 16312
15539: LD_INT 16
15541: DOUBLE
15542: EQUAL
15543: IFTRUE 15547
15545: GO 15683
15547: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15548: LD_ADDR_VAR 0 2
15552: PUSH
15553: LD_INT 2
15555: PUSH
15556: LD_INT 4
15558: PUSH
15559: LD_INT 5
15561: PUSH
15562: LD_INT 7
15564: PUSH
15565: LD_INT 11
15567: PUSH
15568: LD_INT 12
15570: PUSH
15571: LD_INT 15
15573: PUSH
15574: LD_INT 16
15576: PUSH
15577: LD_INT 20
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 22
15585: PUSH
15586: LD_INT 23
15588: PUSH
15589: LD_INT 25
15591: PUSH
15592: LD_INT 26
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 31
15600: PUSH
15601: LD_INT 32
15603: PUSH
15604: LD_INT 33
15606: PUSH
15607: LD_INT 34
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 101
15633: PUSH
15634: LD_INT 102
15636: PUSH
15637: LD_INT 103
15639: PUSH
15640: LD_INT 106
15642: PUSH
15643: LD_INT 108
15645: PUSH
15646: LD_INT 112
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: LD_INT 114
15654: PUSH
15655: LD_INT 116
15657: PUSH
15658: LD_INT 117
15660: PUSH
15661: LD_INT 118
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: ST_TO_ADDR
15681: GO 16312
15683: LD_INT 17
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15915
15691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: LD_INT 3
15705: PUSH
15706: LD_INT 4
15708: PUSH
15709: LD_INT 5
15711: PUSH
15712: LD_INT 6
15714: PUSH
15715: LD_INT 7
15717: PUSH
15718: LD_INT 8
15720: PUSH
15721: LD_INT 9
15723: PUSH
15724: LD_INT 10
15726: PUSH
15727: LD_INT 11
15729: PUSH
15730: LD_INT 12
15732: PUSH
15733: LD_INT 13
15735: PUSH
15736: LD_INT 14
15738: PUSH
15739: LD_INT 15
15741: PUSH
15742: LD_INT 16
15744: PUSH
15745: LD_INT 17
15747: PUSH
15748: LD_INT 18
15750: PUSH
15751: LD_INT 19
15753: PUSH
15754: LD_INT 20
15756: PUSH
15757: LD_INT 21
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_INT 23
15765: PUSH
15766: LD_INT 24
15768: PUSH
15769: LD_INT 25
15771: PUSH
15772: LD_INT 26
15774: PUSH
15775: LD_INT 27
15777: PUSH
15778: LD_INT 28
15780: PUSH
15781: LD_INT 29
15783: PUSH
15784: LD_INT 30
15786: PUSH
15787: LD_INT 31
15789: PUSH
15790: LD_INT 32
15792: PUSH
15793: LD_INT 33
15795: PUSH
15796: LD_INT 34
15798: PUSH
15799: LD_INT 36
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 101
15841: PUSH
15842: LD_INT 102
15844: PUSH
15845: LD_INT 103
15847: PUSH
15848: LD_INT 104
15850: PUSH
15851: LD_INT 105
15853: PUSH
15854: LD_INT 106
15856: PUSH
15857: LD_INT 107
15859: PUSH
15860: LD_INT 108
15862: PUSH
15863: LD_INT 109
15865: PUSH
15866: LD_INT 110
15868: PUSH
15869: LD_INT 111
15871: PUSH
15872: LD_INT 112
15874: PUSH
15875: LD_INT 113
15877: PUSH
15878: LD_INT 114
15880: PUSH
15881: LD_INT 116
15883: PUSH
15884: LD_INT 117
15886: PUSH
15887: LD_INT 118
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: ST_TO_ADDR
15913: GO 16312
15915: LD_INT 18
15917: DOUBLE
15918: EQUAL
15919: IFTRUE 15923
15921: GO 16071
15923: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: LD_INT 2
15931: PUSH
15932: LD_INT 4
15934: PUSH
15935: LD_INT 5
15937: PUSH
15938: LD_INT 7
15940: PUSH
15941: LD_INT 11
15943: PUSH
15944: LD_INT 12
15946: PUSH
15947: LD_INT 15
15949: PUSH
15950: LD_INT 16
15952: PUSH
15953: LD_INT 20
15955: PUSH
15956: LD_INT 21
15958: PUSH
15959: LD_INT 22
15961: PUSH
15962: LD_INT 23
15964: PUSH
15965: LD_INT 25
15967: PUSH
15968: LD_INT 26
15970: PUSH
15971: LD_INT 30
15973: PUSH
15974: LD_INT 31
15976: PUSH
15977: LD_INT 32
15979: PUSH
15980: LD_INT 33
15982: PUSH
15983: LD_INT 34
15985: PUSH
15986: LD_INT 35
15988: PUSH
15989: LD_INT 36
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 101
16017: PUSH
16018: LD_INT 102
16020: PUSH
16021: LD_INT 103
16023: PUSH
16024: LD_INT 106
16026: PUSH
16027: LD_INT 108
16029: PUSH
16030: LD_INT 112
16032: PUSH
16033: LD_INT 113
16035: PUSH
16036: LD_INT 114
16038: PUSH
16039: LD_INT 115
16041: PUSH
16042: LD_INT 116
16044: PUSH
16045: LD_INT 117
16047: PUSH
16048: LD_INT 118
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: ST_TO_ADDR
16069: GO 16312
16071: LD_INT 19
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16311
16079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: LD_INT 2
16090: PUSH
16091: LD_INT 3
16093: PUSH
16094: LD_INT 4
16096: PUSH
16097: LD_INT 5
16099: PUSH
16100: LD_INT 6
16102: PUSH
16103: LD_INT 7
16105: PUSH
16106: LD_INT 8
16108: PUSH
16109: LD_INT 9
16111: PUSH
16112: LD_INT 10
16114: PUSH
16115: LD_INT 11
16117: PUSH
16118: LD_INT 12
16120: PUSH
16121: LD_INT 13
16123: PUSH
16124: LD_INT 14
16126: PUSH
16127: LD_INT 15
16129: PUSH
16130: LD_INT 16
16132: PUSH
16133: LD_INT 17
16135: PUSH
16136: LD_INT 18
16138: PUSH
16139: LD_INT 19
16141: PUSH
16142: LD_INT 20
16144: PUSH
16145: LD_INT 21
16147: PUSH
16148: LD_INT 22
16150: PUSH
16151: LD_INT 23
16153: PUSH
16154: LD_INT 24
16156: PUSH
16157: LD_INT 25
16159: PUSH
16160: LD_INT 26
16162: PUSH
16163: LD_INT 27
16165: PUSH
16166: LD_INT 28
16168: PUSH
16169: LD_INT 29
16171: PUSH
16172: LD_INT 30
16174: PUSH
16175: LD_INT 31
16177: PUSH
16178: LD_INT 32
16180: PUSH
16181: LD_INT 33
16183: PUSH
16184: LD_INT 34
16186: PUSH
16187: LD_INT 35
16189: PUSH
16190: LD_INT 36
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 101
16233: PUSH
16234: LD_INT 102
16236: PUSH
16237: LD_INT 103
16239: PUSH
16240: LD_INT 104
16242: PUSH
16243: LD_INT 105
16245: PUSH
16246: LD_INT 106
16248: PUSH
16249: LD_INT 107
16251: PUSH
16252: LD_INT 108
16254: PUSH
16255: LD_INT 109
16257: PUSH
16258: LD_INT 110
16260: PUSH
16261: LD_INT 111
16263: PUSH
16264: LD_INT 112
16266: PUSH
16267: LD_INT 113
16269: PUSH
16270: LD_INT 114
16272: PUSH
16273: LD_INT 115
16275: PUSH
16276: LD_INT 116
16278: PUSH
16279: LD_INT 117
16281: PUSH
16282: LD_INT 118
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: ST_TO_ADDR
16309: GO 16312
16311: POP
// end else
16312: GO 16543
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16314: LD_ADDR_VAR 0 2
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: LD_INT 2
16324: PUSH
16325: LD_INT 3
16327: PUSH
16328: LD_INT 4
16330: PUSH
16331: LD_INT 5
16333: PUSH
16334: LD_INT 6
16336: PUSH
16337: LD_INT 7
16339: PUSH
16340: LD_INT 8
16342: PUSH
16343: LD_INT 9
16345: PUSH
16346: LD_INT 10
16348: PUSH
16349: LD_INT 11
16351: PUSH
16352: LD_INT 12
16354: PUSH
16355: LD_INT 13
16357: PUSH
16358: LD_INT 14
16360: PUSH
16361: LD_INT 15
16363: PUSH
16364: LD_INT 16
16366: PUSH
16367: LD_INT 17
16369: PUSH
16370: LD_INT 18
16372: PUSH
16373: LD_INT 19
16375: PUSH
16376: LD_INT 20
16378: PUSH
16379: LD_INT 21
16381: PUSH
16382: LD_INT 22
16384: PUSH
16385: LD_INT 23
16387: PUSH
16388: LD_INT 24
16390: PUSH
16391: LD_INT 25
16393: PUSH
16394: LD_INT 26
16396: PUSH
16397: LD_INT 27
16399: PUSH
16400: LD_INT 28
16402: PUSH
16403: LD_INT 29
16405: PUSH
16406: LD_INT 30
16408: PUSH
16409: LD_INT 31
16411: PUSH
16412: LD_INT 32
16414: PUSH
16415: LD_INT 33
16417: PUSH
16418: LD_INT 34
16420: PUSH
16421: LD_INT 35
16423: PUSH
16424: LD_INT 36
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 101
16467: PUSH
16468: LD_INT 102
16470: PUSH
16471: LD_INT 103
16473: PUSH
16474: LD_INT 104
16476: PUSH
16477: LD_INT 105
16479: PUSH
16480: LD_INT 106
16482: PUSH
16483: LD_INT 107
16485: PUSH
16486: LD_INT 108
16488: PUSH
16489: LD_INT 109
16491: PUSH
16492: LD_INT 110
16494: PUSH
16495: LD_INT 111
16497: PUSH
16498: LD_INT 112
16500: PUSH
16501: LD_INT 113
16503: PUSH
16504: LD_INT 114
16506: PUSH
16507: LD_INT 115
16509: PUSH
16510: LD_INT 116
16512: PUSH
16513: LD_INT 117
16515: PUSH
16516: LD_INT 118
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: ST_TO_ADDR
// if result then
16543: LD_VAR 0 2
16547: IFFALSE 17333
// begin normal :=  ;
16549: LD_ADDR_VAR 0 5
16553: PUSH
16554: LD_STRING 
16556: ST_TO_ADDR
// hardcore :=  ;
16557: LD_ADDR_VAR 0 6
16561: PUSH
16562: LD_STRING 
16564: ST_TO_ADDR
// active :=  ;
16565: LD_ADDR_VAR 0 7
16569: PUSH
16570: LD_STRING 
16572: ST_TO_ADDR
// for i = 1 to normalCounter do
16573: LD_ADDR_VAR 0 8
16577: PUSH
16578: DOUBLE
16579: LD_INT 1
16581: DEC
16582: ST_TO_ADDR
16583: LD_EXP 22
16587: PUSH
16588: FOR_TO
16589: IFFALSE 16690
// begin tmp := 0 ;
16591: LD_ADDR_VAR 0 3
16595: PUSH
16596: LD_STRING 0
16598: ST_TO_ADDR
// if result [ 1 ] then
16599: LD_VAR 0 2
16603: PUSH
16604: LD_INT 1
16606: ARRAY
16607: IFFALSE 16672
// if result [ 1 ] [ 1 ] = i then
16609: LD_VAR 0 2
16613: PUSH
16614: LD_INT 1
16616: ARRAY
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PUSH
16622: LD_VAR 0 8
16626: EQUAL
16627: IFFALSE 16672
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: LD_INT 1
16641: PPUSH
16642: LD_VAR 0 2
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PPUSH
16651: LD_INT 1
16653: PPUSH
16654: CALL_OW 3
16658: PPUSH
16659: CALL_OW 1
16663: ST_TO_ADDR
// tmp := 1 ;
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_STRING 1
16671: ST_TO_ADDR
// end ; normal := normal & tmp ;
16672: LD_ADDR_VAR 0 5
16676: PUSH
16677: LD_VAR 0 5
16681: PUSH
16682: LD_VAR 0 3
16686: STR
16687: ST_TO_ADDR
// end ;
16688: GO 16588
16690: POP
16691: POP
// for i = 1 to hardcoreCounter do
16692: LD_ADDR_VAR 0 8
16696: PUSH
16697: DOUBLE
16698: LD_INT 1
16700: DEC
16701: ST_TO_ADDR
16702: LD_EXP 23
16706: PUSH
16707: FOR_TO
16708: IFFALSE 16813
// begin tmp := 0 ;
16710: LD_ADDR_VAR 0 3
16714: PUSH
16715: LD_STRING 0
16717: ST_TO_ADDR
// if result [ 2 ] then
16718: LD_VAR 0 2
16722: PUSH
16723: LD_INT 2
16725: ARRAY
16726: IFFALSE 16795
// if result [ 2 ] [ 1 ] = 100 + i then
16728: LD_VAR 0 2
16732: PUSH
16733: LD_INT 2
16735: ARRAY
16736: PUSH
16737: LD_INT 1
16739: ARRAY
16740: PUSH
16741: LD_INT 100
16743: PUSH
16744: LD_VAR 0 8
16748: PLUS
16749: EQUAL
16750: IFFALSE 16795
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_VAR 0 2
16761: PPUSH
16762: LD_INT 2
16764: PPUSH
16765: LD_VAR 0 2
16769: PUSH
16770: LD_INT 2
16772: ARRAY
16773: PPUSH
16774: LD_INT 1
16776: PPUSH
16777: CALL_OW 3
16781: PPUSH
16782: CALL_OW 1
16786: ST_TO_ADDR
// tmp := 1 ;
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_STRING 1
16794: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16795: LD_ADDR_VAR 0 6
16799: PUSH
16800: LD_VAR 0 6
16804: PUSH
16805: LD_VAR 0 3
16809: STR
16810: ST_TO_ADDR
// end ;
16811: GO 16707
16813: POP
16814: POP
// if isGameLoad then
16815: LD_VAR 0 1
16819: IFFALSE 17294
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16821: LD_ADDR_VAR 0 4
16825: PUSH
16826: LD_EXP 26
16830: PUSH
16831: LD_EXP 25
16835: PUSH
16836: LD_EXP 27
16840: PUSH
16841: LD_EXP 24
16845: PUSH
16846: LD_EXP 28
16850: PUSH
16851: LD_EXP 29
16855: PUSH
16856: LD_EXP 30
16860: PUSH
16861: LD_EXP 31
16865: PUSH
16866: LD_EXP 32
16870: PUSH
16871: LD_EXP 33
16875: PUSH
16876: LD_EXP 34
16880: PUSH
16881: LD_EXP 35
16885: PUSH
16886: LD_EXP 36
16890: PUSH
16891: LD_EXP 37
16895: PUSH
16896: LD_EXP 45
16900: PUSH
16901: LD_EXP 46
16905: PUSH
16906: LD_EXP 47
16910: PUSH
16911: LD_EXP 48
16915: PUSH
16916: LD_EXP 50
16920: PUSH
16921: LD_EXP 51
16925: PUSH
16926: LD_EXP 52
16930: PUSH
16931: LD_EXP 55
16935: PUSH
16936: LD_EXP 57
16940: PUSH
16941: LD_EXP 58
16945: PUSH
16946: LD_EXP 59
16950: PUSH
16951: LD_EXP 61
16955: PUSH
16956: LD_EXP 62
16960: PUSH
16961: LD_EXP 65
16965: PUSH
16966: LD_EXP 66
16970: PUSH
16971: LD_EXP 67
16975: PUSH
16976: LD_EXP 68
16980: PUSH
16981: LD_EXP 69
16985: PUSH
16986: LD_EXP 70
16990: PUSH
16991: LD_EXP 71
16995: PUSH
16996: LD_EXP 72
17000: PUSH
17001: LD_EXP 73
17005: PUSH
17006: LD_EXP 38
17010: PUSH
17011: LD_EXP 39
17015: PUSH
17016: LD_EXP 42
17020: PUSH
17021: LD_EXP 43
17025: PUSH
17026: LD_EXP 44
17030: PUSH
17031: LD_EXP 40
17035: PUSH
17036: LD_EXP 41
17040: PUSH
17041: LD_EXP 49
17045: PUSH
17046: LD_EXP 53
17050: PUSH
17051: LD_EXP 54
17055: PUSH
17056: LD_EXP 56
17060: PUSH
17061: LD_EXP 60
17065: PUSH
17066: LD_EXP 63
17070: PUSH
17071: LD_EXP 64
17075: PUSH
17076: LD_EXP 74
17080: PUSH
17081: LD_EXP 75
17085: PUSH
17086: LD_EXP 76
17090: PUSH
17091: LD_EXP 77
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: ST_TO_ADDR
// tmp :=  ;
17152: LD_ADDR_VAR 0 3
17156: PUSH
17157: LD_STRING 
17159: ST_TO_ADDR
// for i = 1 to normalCounter do
17160: LD_ADDR_VAR 0 8
17164: PUSH
17165: DOUBLE
17166: LD_INT 1
17168: DEC
17169: ST_TO_ADDR
17170: LD_EXP 22
17174: PUSH
17175: FOR_TO
17176: IFFALSE 17212
// begin if flags [ i ] then
17178: LD_VAR 0 4
17182: PUSH
17183: LD_VAR 0 8
17187: ARRAY
17188: IFFALSE 17210
// tmp := tmp & i & ; ;
17190: LD_ADDR_VAR 0 3
17194: PUSH
17195: LD_VAR 0 3
17199: PUSH
17200: LD_VAR 0 8
17204: STR
17205: PUSH
17206: LD_STRING ;
17208: STR
17209: ST_TO_ADDR
// end ;
17210: GO 17175
17212: POP
17213: POP
// for i = 1 to hardcoreCounter do
17214: LD_ADDR_VAR 0 8
17218: PUSH
17219: DOUBLE
17220: LD_INT 1
17222: DEC
17223: ST_TO_ADDR
17224: LD_EXP 23
17228: PUSH
17229: FOR_TO
17230: IFFALSE 17276
// begin if flags [ normalCounter + i ] then
17232: LD_VAR 0 4
17236: PUSH
17237: LD_EXP 22
17241: PUSH
17242: LD_VAR 0 8
17246: PLUS
17247: ARRAY
17248: IFFALSE 17274
// tmp := tmp & ( 100 + i ) & ; ;
17250: LD_ADDR_VAR 0 3
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_INT 100
17262: PUSH
17263: LD_VAR 0 8
17267: PLUS
17268: STR
17269: PUSH
17270: LD_STRING ;
17272: STR
17273: ST_TO_ADDR
// end ;
17274: GO 17229
17276: POP
17277: POP
// if tmp then
17278: LD_VAR 0 3
17282: IFFALSE 17294
// active := tmp ;
17284: LD_ADDR_VAR 0 7
17288: PUSH
17289: LD_VAR 0 3
17293: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17294: LD_STRING getStreamItemsFromMission("
17296: PUSH
17297: LD_VAR 0 5
17301: STR
17302: PUSH
17303: LD_STRING ","
17305: STR
17306: PUSH
17307: LD_VAR 0 6
17311: STR
17312: PUSH
17313: LD_STRING ","
17315: STR
17316: PUSH
17317: LD_VAR 0 7
17321: STR
17322: PUSH
17323: LD_STRING ")
17325: STR
17326: PPUSH
17327: CALL_OW 559
// end else
17331: GO 17340
// ToLua ( getStreamItemsFromMission("","","") ) ;
17333: LD_STRING getStreamItemsFromMission("","","")
17335: PPUSH
17336: CALL_OW 559
// end ;
17340: LD_VAR 0 2
17344: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17345: LD_EXP 21
17349: PUSH
17350: LD_EXP 26
17354: AND
17355: IFFALSE 17479
17357: GO 17359
17359: DISABLE
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
// begin enable ;
17364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: LD_OWVAR 2
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 2
17384: PUSH
17385: LD_INT 34
17387: PUSH
17388: LD_INT 7
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 34
17397: PUSH
17398: LD_INT 45
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 34
17407: PUSH
17408: LD_INT 28
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 34
17417: PUSH
17418: LD_INT 47
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if not tmp then
17441: LD_VAR 0 2
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 17479
// for i in tmp do
17450: LD_ADDR_VAR 0 1
17454: PUSH
17455: LD_VAR 0 2
17459: PUSH
17460: FOR_IN
17461: IFFALSE 17477
// begin SetLives ( i , 0 ) ;
17463: LD_VAR 0 1
17467: PPUSH
17468: LD_INT 0
17470: PPUSH
17471: CALL_OW 234
// end ;
17475: GO 17460
17477: POP
17478: POP
// end ;
17479: PPOPN 2
17481: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17482: LD_EXP 21
17486: PUSH
17487: LD_EXP 27
17491: AND
17492: IFFALSE 17576
17494: GO 17496
17496: DISABLE
17497: LD_INT 0
17499: PPUSH
17500: PPUSH
// begin enable ;
17501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: LD_OWVAR 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 32
17521: PUSH
17522: LD_INT 3
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PPUSH
17533: CALL_OW 69
17537: ST_TO_ADDR
// if not tmp then
17538: LD_VAR 0 2
17542: NOT
17543: IFFALSE 17547
// exit ;
17545: GO 17576
// for i in tmp do
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_VAR 0 2
17556: PUSH
17557: FOR_IN
17558: IFFALSE 17574
// begin SetLives ( i , 0 ) ;
17560: LD_VAR 0 1
17564: PPUSH
17565: LD_INT 0
17567: PPUSH
17568: CALL_OW 234
// end ;
17572: GO 17557
17574: POP
17575: POP
// end ;
17576: PPOPN 2
17578: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17579: LD_EXP 21
17583: PUSH
17584: LD_EXP 24
17588: AND
17589: IFFALSE 17682
17591: GO 17593
17593: DISABLE
17594: LD_INT 0
17596: PPUSH
// begin enable ;
17597: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17598: LD_ADDR_VAR 0 1
17602: PUSH
17603: LD_INT 22
17605: PUSH
17606: LD_OWVAR 2
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 25
17620: PUSH
17621: LD_INT 5
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 25
17630: PUSH
17631: LD_INT 9
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 25
17640: PUSH
17641: LD_INT 8
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: PUSH
17663: FOR_IN
17664: IFFALSE 17680
// begin SetClass ( i , 1 ) ;
17666: LD_VAR 0 1
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 336
// end ;
17678: GO 17663
17680: POP
17681: POP
// end ;
17682: PPOPN 1
17684: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17685: LD_EXP 21
17689: PUSH
17690: LD_EXP 25
17694: AND
17695: PUSH
17696: LD_OWVAR 65
17700: PUSH
17701: LD_INT 7
17703: LESS
17704: AND
17705: IFFALSE 17719
17707: GO 17709
17709: DISABLE
// begin enable ;
17710: ENABLE
// game_speed := 7 ;
17711: LD_ADDR_OWVAR 65
17715: PUSH
17716: LD_INT 7
17718: ST_TO_ADDR
// end ;
17719: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17720: LD_EXP 21
17724: PUSH
17725: LD_EXP 28
17729: AND
17730: IFFALSE 17932
17732: GO 17734
17734: DISABLE
17735: LD_INT 0
17737: PPUSH
17738: PPUSH
17739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: LD_INT 81
17747: PUSH
17748: LD_OWVAR 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 21
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 69
17775: ST_TO_ADDR
// if not tmp then
17776: LD_VAR 0 3
17780: NOT
17781: IFFALSE 17785
// exit ;
17783: GO 17932
// if tmp > 5 then
17785: LD_VAR 0 3
17789: PUSH
17790: LD_INT 5
17792: GREATER
17793: IFFALSE 17805
// k := 5 else
17795: LD_ADDR_VAR 0 2
17799: PUSH
17800: LD_INT 5
17802: ST_TO_ADDR
17803: GO 17815
// k := tmp ;
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: LD_VAR 0 3
17814: ST_TO_ADDR
// for i := 1 to k do
17815: LD_ADDR_VAR 0 1
17819: PUSH
17820: DOUBLE
17821: LD_INT 1
17823: DEC
17824: ST_TO_ADDR
17825: LD_VAR 0 2
17829: PUSH
17830: FOR_TO
17831: IFFALSE 17930
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17833: LD_VAR 0 3
17837: PUSH
17838: LD_VAR 0 1
17842: ARRAY
17843: PPUSH
17844: LD_VAR 0 1
17848: PUSH
17849: LD_INT 4
17851: MOD
17852: PUSH
17853: LD_INT 1
17855: PLUS
17856: PPUSH
17857: CALL_OW 259
17861: PUSH
17862: LD_INT 10
17864: LESS
17865: IFFALSE 17928
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17867: LD_VAR 0 3
17871: PUSH
17872: LD_VAR 0 1
17876: ARRAY
17877: PPUSH
17878: LD_VAR 0 1
17882: PUSH
17883: LD_INT 4
17885: MOD
17886: PUSH
17887: LD_INT 1
17889: PLUS
17890: PPUSH
17891: LD_VAR 0 3
17895: PUSH
17896: LD_VAR 0 1
17900: ARRAY
17901: PPUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 4
17909: MOD
17910: PUSH
17911: LD_INT 1
17913: PLUS
17914: PPUSH
17915: CALL_OW 259
17919: PUSH
17920: LD_INT 1
17922: PLUS
17923: PPUSH
17924: CALL_OW 237
17928: GO 17830
17930: POP
17931: POP
// end ;
17932: PPOPN 3
17934: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17935: LD_EXP 21
17939: PUSH
17940: LD_EXP 29
17944: AND
17945: IFFALSE 17965
17947: GO 17949
17949: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17950: LD_INT 4
17952: PPUSH
17953: LD_OWVAR 2
17957: PPUSH
17958: LD_INT 0
17960: PPUSH
17961: CALL_OW 324
17965: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17966: LD_EXP 21
17970: PUSH
17971: LD_EXP 58
17975: AND
17976: IFFALSE 17996
17978: GO 17980
17980: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17981: LD_INT 19
17983: PPUSH
17984: LD_OWVAR 2
17988: PPUSH
17989: LD_INT 0
17991: PPUSH
17992: CALL_OW 324
17996: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17997: LD_EXP 21
18001: PUSH
18002: LD_EXP 30
18006: AND
18007: IFFALSE 18109
18009: GO 18011
18011: DISABLE
18012: LD_INT 0
18014: PPUSH
18015: PPUSH
// begin enable ;
18016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_INT 22
18024: PUSH
18025: LD_OWVAR 2
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 34
18039: PUSH
18040: LD_INT 11
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 34
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: ST_TO_ADDR
// if not tmp then
18071: LD_VAR 0 2
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18109
// for i in tmp do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_VAR 0 2
18089: PUSH
18090: FOR_IN
18091: IFFALSE 18107
// begin SetLives ( i , 0 ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_INT 0
18100: PPUSH
18101: CALL_OW 234
// end ;
18105: GO 18090
18107: POP
18108: POP
// end ;
18109: PPOPN 2
18111: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18112: LD_EXP 21
18116: PUSH
18117: LD_EXP 31
18121: AND
18122: IFFALSE 18142
18124: GO 18126
18126: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18127: LD_INT 32
18129: PPUSH
18130: LD_OWVAR 2
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: CALL_OW 324
18142: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18143: LD_EXP 21
18147: PUSH
18148: LD_EXP 32
18152: AND
18153: IFFALSE 18334
18155: GO 18157
18157: DISABLE
18158: LD_INT 0
18160: PPUSH
18161: PPUSH
18162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18163: LD_ADDR_VAR 0 2
18167: PUSH
18168: LD_INT 22
18170: PUSH
18171: LD_OWVAR 2
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 33
18182: PUSH
18183: LD_INT 3
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PPUSH
18194: CALL_OW 69
18198: ST_TO_ADDR
// if not tmp then
18199: LD_VAR 0 2
18203: NOT
18204: IFFALSE 18208
// exit ;
18206: GO 18334
// side := 0 ;
18208: LD_ADDR_VAR 0 3
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// for i := 1 to 8 do
18216: LD_ADDR_VAR 0 1
18220: PUSH
18221: DOUBLE
18222: LD_INT 1
18224: DEC
18225: ST_TO_ADDR
18226: LD_INT 8
18228: PUSH
18229: FOR_TO
18230: IFFALSE 18278
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18232: LD_OWVAR 2
18236: PUSH
18237: LD_VAR 0 1
18241: NONEQUAL
18242: PUSH
18243: LD_OWVAR 2
18247: PPUSH
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 81
18257: PUSH
18258: LD_INT 2
18260: EQUAL
18261: AND
18262: IFFALSE 18276
// begin side := i ;
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: LD_VAR 0 1
18273: ST_TO_ADDR
// break ;
18274: GO 18278
// end ;
18276: GO 18229
18278: POP
18279: POP
// if not side then
18280: LD_VAR 0 3
18284: NOT
18285: IFFALSE 18289
// exit ;
18287: GO 18334
// for i := 1 to tmp do
18289: LD_ADDR_VAR 0 1
18293: PUSH
18294: DOUBLE
18295: LD_INT 1
18297: DEC
18298: ST_TO_ADDR
18299: LD_VAR 0 2
18303: PUSH
18304: FOR_TO
18305: IFFALSE 18332
// if Prob ( 60 ) then
18307: LD_INT 60
18309: PPUSH
18310: CALL_OW 13
18314: IFFALSE 18330
// SetSide ( i , side ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_VAR 0 3
18325: PPUSH
18326: CALL_OW 235
18330: GO 18304
18332: POP
18333: POP
// end ;
18334: PPOPN 3
18336: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18337: LD_EXP 21
18341: PUSH
18342: LD_EXP 34
18346: AND
18347: IFFALSE 18466
18349: GO 18351
18351: DISABLE
18352: LD_INT 0
18354: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18355: LD_ADDR_VAR 0 1
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_OWVAR 2
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 3
18384: PUSH
18385: LD_INT 23
18387: PUSH
18388: LD_INT 0
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: PPUSH
18404: CALL_OW 69
18408: PUSH
18409: FOR_IN
18410: IFFALSE 18464
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18412: LD_VAR 0 1
18416: PPUSH
18417: CALL_OW 257
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 4
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: IN
18440: IFFALSE 18462
// SetClass ( un , rand ( 1 , 4 ) ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_INT 1
18449: PPUSH
18450: LD_INT 4
18452: PPUSH
18453: CALL_OW 12
18457: PPUSH
18458: CALL_OW 336
18462: GO 18409
18464: POP
18465: POP
// end ;
18466: PPOPN 1
18468: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18469: LD_EXP 21
18473: PUSH
18474: LD_EXP 33
18478: AND
18479: IFFALSE 18558
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_OWVAR 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 21
18506: PUSH
18507: LD_INT 3
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PPUSH
18518: CALL_OW 69
18522: ST_TO_ADDR
// if not tmp then
18523: LD_VAR 0 1
18527: NOT
18528: IFFALSE 18532
// exit ;
18530: GO 18558
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18532: LD_VAR 0 1
18536: PUSH
18537: LD_INT 1
18539: PPUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 12
18549: ARRAY
18550: PPUSH
18551: LD_INT 100
18553: PPUSH
18554: CALL_OW 234
// end ;
18558: PPOPN 1
18560: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18561: LD_EXP 21
18565: PUSH
18566: LD_EXP 35
18570: AND
18571: IFFALSE 18669
18573: GO 18575
18575: DISABLE
18576: LD_INT 0
18578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18579: LD_ADDR_VAR 0 1
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_OWVAR 2
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// if not tmp then
18615: LD_VAR 0 1
18619: NOT
18620: IFFALSE 18624
// exit ;
18622: GO 18669
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18624: LD_VAR 0 1
18628: PUSH
18629: LD_INT 1
18631: PPUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 12
18641: ARRAY
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: LD_INT 4
18648: PPUSH
18649: CALL_OW 12
18653: PPUSH
18654: LD_INT 3000
18656: PPUSH
18657: LD_INT 9000
18659: PPUSH
18660: CALL_OW 12
18664: PPUSH
18665: CALL_OW 492
// end ;
18669: PPOPN 1
18671: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18672: LD_EXP 21
18676: PUSH
18677: LD_EXP 36
18681: AND
18682: IFFALSE 18702
18684: GO 18686
18686: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18687: LD_INT 1
18689: PPUSH
18690: LD_OWVAR 2
18694: PPUSH
18695: LD_INT 0
18697: PPUSH
18698: CALL_OW 324
18702: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18703: LD_EXP 21
18707: PUSH
18708: LD_EXP 37
18712: AND
18713: IFFALSE 18796
18715: GO 18717
18717: DISABLE
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18722: LD_ADDR_VAR 0 2
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_OWVAR 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 3
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PPUSH
18753: CALL_OW 69
18757: ST_TO_ADDR
// if not tmp then
18758: LD_VAR 0 2
18762: NOT
18763: IFFALSE 18767
// exit ;
18765: GO 18796
// for i in tmp do
18767: LD_ADDR_VAR 0 1
18771: PUSH
18772: LD_VAR 0 2
18776: PUSH
18777: FOR_IN
18778: IFFALSE 18794
// SetBLevel ( i , 10 ) ;
18780: LD_VAR 0 1
18784: PPUSH
18785: LD_INT 10
18787: PPUSH
18788: CALL_OW 241
18792: GO 18777
18794: POP
18795: POP
// end ;
18796: PPOPN 2
18798: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18799: LD_EXP 21
18803: PUSH
18804: LD_EXP 38
18808: AND
18809: IFFALSE 18920
18811: GO 18813
18813: DISABLE
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
18818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18819: LD_ADDR_VAR 0 3
18823: PUSH
18824: LD_INT 22
18826: PUSH
18827: LD_OWVAR 2
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 25
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 69
18854: ST_TO_ADDR
// if not tmp then
18855: LD_VAR 0 3
18859: NOT
18860: IFFALSE 18864
// exit ;
18862: GO 18920
// un := tmp [ rand ( 1 , tmp ) ] ;
18864: LD_ADDR_VAR 0 2
18868: PUSH
18869: LD_VAR 0 3
18873: PUSH
18874: LD_INT 1
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: CALL_OW 12
18886: ARRAY
18887: ST_TO_ADDR
// if Crawls ( un ) then
18888: LD_VAR 0 2
18892: PPUSH
18893: CALL_OW 318
18897: IFFALSE 18908
// ComWalk ( un ) ;
18899: LD_VAR 0 2
18903: PPUSH
18904: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18908: LD_VAR 0 2
18912: PPUSH
18913: LD_INT 5
18915: PPUSH
18916: CALL_OW 336
// end ;
18920: PPOPN 3
18922: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18923: LD_EXP 21
18927: PUSH
18928: LD_EXP 39
18932: AND
18933: PUSH
18934: LD_OWVAR 67
18938: PUSH
18939: LD_INT 4
18941: LESS
18942: AND
18943: IFFALSE 18962
18945: GO 18947
18947: DISABLE
// begin Difficulty := Difficulty + 1 ;
18948: LD_ADDR_OWVAR 67
18952: PUSH
18953: LD_OWVAR 67
18957: PUSH
18958: LD_INT 1
18960: PLUS
18961: ST_TO_ADDR
// end ;
18962: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18963: LD_EXP 21
18967: PUSH
18968: LD_EXP 40
18972: AND
18973: IFFALSE 19076
18975: GO 18977
18977: DISABLE
18978: LD_INT 0
18980: PPUSH
// begin for i := 1 to 5 do
18981: LD_ADDR_VAR 0 1
18985: PUSH
18986: DOUBLE
18987: LD_INT 1
18989: DEC
18990: ST_TO_ADDR
18991: LD_INT 5
18993: PUSH
18994: FOR_TO
18995: IFFALSE 19074
// begin uc_nation := nation_nature ;
18997: LD_ADDR_OWVAR 21
19001: PUSH
19002: LD_INT 0
19004: ST_TO_ADDR
// uc_side := 0 ;
19005: LD_ADDR_OWVAR 20
19009: PUSH
19010: LD_INT 0
19012: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19013: LD_ADDR_OWVAR 29
19017: PUSH
19018: LD_INT 12
19020: PUSH
19021: LD_INT 12
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: ST_TO_ADDR
// hc_agressivity := 20 ;
19028: LD_ADDR_OWVAR 35
19032: PUSH
19033: LD_INT 20
19035: ST_TO_ADDR
// hc_class := class_tiger ;
19036: LD_ADDR_OWVAR 28
19040: PUSH
19041: LD_INT 14
19043: ST_TO_ADDR
// hc_gallery :=  ;
19044: LD_ADDR_OWVAR 33
19048: PUSH
19049: LD_STRING 
19051: ST_TO_ADDR
// hc_name :=  ;
19052: LD_ADDR_OWVAR 26
19056: PUSH
19057: LD_STRING 
19059: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19060: CALL_OW 44
19064: PPUSH
19065: LD_INT 0
19067: PPUSH
19068: CALL_OW 51
// end ;
19072: GO 18994
19074: POP
19075: POP
// end ;
19076: PPOPN 1
19078: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19079: LD_EXP 21
19083: PUSH
19084: LD_EXP 41
19088: AND
19089: IFFALSE 19098
19091: GO 19093
19093: DISABLE
// StreamSibBomb ;
19094: CALL 19099 0 0
19098: END
// export function StreamSibBomb ; var i , x , y ; begin
19099: LD_INT 0
19101: PPUSH
19102: PPUSH
19103: PPUSH
19104: PPUSH
// result := false ;
19105: LD_ADDR_VAR 0 1
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
// for i := 1 to 16 do
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: DOUBLE
19119: LD_INT 1
19121: DEC
19122: ST_TO_ADDR
19123: LD_INT 16
19125: PUSH
19126: FOR_TO
19127: IFFALSE 19326
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19129: LD_ADDR_VAR 0 3
19133: PUSH
19134: LD_INT 10
19136: PUSH
19137: LD_INT 20
19139: PUSH
19140: LD_INT 30
19142: PUSH
19143: LD_INT 40
19145: PUSH
19146: LD_INT 50
19148: PUSH
19149: LD_INT 60
19151: PUSH
19152: LD_INT 70
19154: PUSH
19155: LD_INT 80
19157: PUSH
19158: LD_INT 90
19160: PUSH
19161: LD_INT 100
19163: PUSH
19164: LD_INT 110
19166: PUSH
19167: LD_INT 120
19169: PUSH
19170: LD_INT 130
19172: PUSH
19173: LD_INT 140
19175: PUSH
19176: LD_INT 150
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_INT 15
19201: PPUSH
19202: CALL_OW 12
19206: ARRAY
19207: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19208: LD_ADDR_VAR 0 4
19212: PUSH
19213: LD_INT 10
19215: PUSH
19216: LD_INT 20
19218: PUSH
19219: LD_INT 30
19221: PUSH
19222: LD_INT 40
19224: PUSH
19225: LD_INT 50
19227: PUSH
19228: LD_INT 60
19230: PUSH
19231: LD_INT 70
19233: PUSH
19234: LD_INT 80
19236: PUSH
19237: LD_INT 90
19239: PUSH
19240: LD_INT 100
19242: PUSH
19243: LD_INT 110
19245: PUSH
19246: LD_INT 120
19248: PUSH
19249: LD_INT 130
19251: PUSH
19252: LD_INT 140
19254: PUSH
19255: LD_INT 150
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: PPUSH
19278: LD_INT 15
19280: PPUSH
19281: CALL_OW 12
19285: ARRAY
19286: ST_TO_ADDR
// if ValidHex ( x , y ) then
19287: LD_VAR 0 3
19291: PPUSH
19292: LD_VAR 0 4
19296: PPUSH
19297: CALL_OW 488
19301: IFFALSE 19324
// begin result := [ x , y ] ;
19303: LD_ADDR_VAR 0 1
19307: PUSH
19308: LD_VAR 0 3
19312: PUSH
19313: LD_VAR 0 4
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: ST_TO_ADDR
// break ;
19322: GO 19326
// end ; end ;
19324: GO 19126
19326: POP
19327: POP
// if result then
19328: LD_VAR 0 1
19332: IFFALSE 19392
// begin ToLua ( playSibBomb() ) ;
19334: LD_STRING playSibBomb()
19336: PPUSH
19337: CALL_OW 559
// wait ( 0 0$14 ) ;
19341: LD_INT 490
19343: PPUSH
19344: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19348: LD_VAR 0 1
19352: PUSH
19353: LD_INT 1
19355: ARRAY
19356: PPUSH
19357: LD_VAR 0 1
19361: PUSH
19362: LD_INT 2
19364: ARRAY
19365: PPUSH
19366: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19370: LD_VAR 0 1
19374: PUSH
19375: LD_INT 1
19377: ARRAY
19378: PPUSH
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 2
19386: ARRAY
19387: PPUSH
19388: CALL_OW 429
// end ; end ;
19392: LD_VAR 0 1
19396: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19397: LD_EXP 21
19401: PUSH
19402: LD_EXP 43
19406: AND
19407: IFFALSE 19419
19409: GO 19411
19411: DISABLE
// YouLost (  ) ;
19412: LD_STRING 
19414: PPUSH
19415: CALL_OW 104
19419: END
// every 0 0$1 trigger StreamModeActive and sFog do
19420: LD_EXP 21
19424: PUSH
19425: LD_EXP 42
19429: AND
19430: IFFALSE 19444
19432: GO 19434
19434: DISABLE
// FogOff ( your_side ) ;
19435: LD_OWVAR 2
19439: PPUSH
19440: CALL_OW 344
19444: END
// every 0 0$1 trigger StreamModeActive and sSun do
19445: LD_EXP 21
19449: PUSH
19450: LD_EXP 44
19454: AND
19455: IFFALSE 19483
19457: GO 19459
19459: DISABLE
// begin solar_recharge_percent := 0 ;
19460: LD_ADDR_OWVAR 79
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19468: LD_INT 10500
19470: PPUSH
19471: CALL_OW 67
// solar_recharge_percent := 100 ;
19475: LD_ADDR_OWVAR 79
19479: PUSH
19480: LD_INT 100
19482: ST_TO_ADDR
// end ;
19483: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19484: LD_EXP 21
19488: PUSH
19489: LD_EXP 45
19493: AND
19494: IFFALSE 19733
19496: GO 19498
19498: DISABLE
19499: LD_INT 0
19501: PPUSH
19502: PPUSH
19503: PPUSH
// begin tmp := [ ] ;
19504: LD_ADDR_VAR 0 3
19508: PUSH
19509: EMPTY
19510: ST_TO_ADDR
// for i := 1 to 6 do
19511: LD_ADDR_VAR 0 1
19515: PUSH
19516: DOUBLE
19517: LD_INT 1
19519: DEC
19520: ST_TO_ADDR
19521: LD_INT 6
19523: PUSH
19524: FOR_TO
19525: IFFALSE 19630
// begin uc_nation := nation_nature ;
19527: LD_ADDR_OWVAR 21
19531: PUSH
19532: LD_INT 0
19534: ST_TO_ADDR
// uc_side := 0 ;
19535: LD_ADDR_OWVAR 20
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19543: LD_ADDR_OWVAR 29
19547: PUSH
19548: LD_INT 12
19550: PUSH
19551: LD_INT 12
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// hc_agressivity := 20 ;
19558: LD_ADDR_OWVAR 35
19562: PUSH
19563: LD_INT 20
19565: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19566: LD_ADDR_OWVAR 28
19570: PUSH
19571: LD_INT 17
19573: ST_TO_ADDR
// hc_gallery :=  ;
19574: LD_ADDR_OWVAR 33
19578: PUSH
19579: LD_STRING 
19581: ST_TO_ADDR
// hc_name :=  ;
19582: LD_ADDR_OWVAR 26
19586: PUSH
19587: LD_STRING 
19589: ST_TO_ADDR
// un := CreateHuman ;
19590: LD_ADDR_VAR 0 2
19594: PUSH
19595: CALL_OW 44
19599: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19600: LD_VAR 0 2
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 51
// tmp := tmp ^ un ;
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: LD_VAR 0 3
19621: PUSH
19622: LD_VAR 0 2
19626: ADD
19627: ST_TO_ADDR
// end ;
19628: GO 19524
19630: POP
19631: POP
// repeat wait ( 0 0$1 ) ;
19632: LD_INT 35
19634: PPUSH
19635: CALL_OW 67
// for un in tmp do
19639: LD_ADDR_VAR 0 2
19643: PUSH
19644: LD_VAR 0 3
19648: PUSH
19649: FOR_IN
19650: IFFALSE 19724
// begin if IsDead ( un ) then
19652: LD_VAR 0 2
19656: PPUSH
19657: CALL_OW 301
19661: IFFALSE 19681
// begin tmp := tmp diff un ;
19663: LD_ADDR_VAR 0 3
19667: PUSH
19668: LD_VAR 0 3
19672: PUSH
19673: LD_VAR 0 2
19677: DIFF
19678: ST_TO_ADDR
// continue ;
19679: GO 19649
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19681: LD_VAR 0 2
19685: PPUSH
19686: LD_INT 3
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_INT 0
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PPUSH
19703: CALL_OW 69
19707: PPUSH
19708: LD_VAR 0 2
19712: PPUSH
19713: CALL_OW 74
19717: PPUSH
19718: CALL_OW 115
// end ;
19722: GO 19649
19724: POP
19725: POP
// until not tmp ;
19726: LD_VAR 0 3
19730: NOT
19731: IFFALSE 19632
// end ;
19733: PPOPN 3
19735: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19736: LD_EXP 21
19740: PUSH
19741: LD_EXP 46
19745: AND
19746: IFFALSE 19800
19748: GO 19750
19750: DISABLE
// begin ToLua ( displayTroll(); ) ;
19751: LD_STRING displayTroll();
19753: PPUSH
19754: CALL_OW 559
// wait ( 3 3$00 ) ;
19758: LD_INT 6300
19760: PPUSH
19761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19765: LD_STRING hideTroll();
19767: PPUSH
19768: CALL_OW 559
// wait ( 1 1$00 ) ;
19772: LD_INT 2100
19774: PPUSH
19775: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19779: LD_STRING displayTroll();
19781: PPUSH
19782: CALL_OW 559
// wait ( 1 1$00 ) ;
19786: LD_INT 2100
19788: PPUSH
19789: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19793: LD_STRING hideTroll();
19795: PPUSH
19796: CALL_OW 559
// end ;
19800: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19801: LD_EXP 21
19805: PUSH
19806: LD_EXP 47
19810: AND
19811: IFFALSE 19874
19813: GO 19815
19815: DISABLE
19816: LD_INT 0
19818: PPUSH
// begin p := 0 ;
19819: LD_ADDR_VAR 0 1
19823: PUSH
19824: LD_INT 0
19826: ST_TO_ADDR
// repeat game_speed := 1 ;
19827: LD_ADDR_OWVAR 65
19831: PUSH
19832: LD_INT 1
19834: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19835: LD_INT 35
19837: PPUSH
19838: CALL_OW 67
// p := p + 1 ;
19842: LD_ADDR_VAR 0 1
19846: PUSH
19847: LD_VAR 0 1
19851: PUSH
19852: LD_INT 1
19854: PLUS
19855: ST_TO_ADDR
// until p >= 60 ;
19856: LD_VAR 0 1
19860: PUSH
19861: LD_INT 60
19863: GREATEREQUAL
19864: IFFALSE 19827
// game_speed := 4 ;
19866: LD_ADDR_OWVAR 65
19870: PUSH
19871: LD_INT 4
19873: ST_TO_ADDR
// end ;
19874: PPOPN 1
19876: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19877: LD_EXP 21
19881: PUSH
19882: LD_EXP 48
19886: AND
19887: IFFALSE 20033
19889: GO 19891
19891: DISABLE
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19896: LD_ADDR_VAR 0 1
19900: PUSH
19901: LD_INT 22
19903: PUSH
19904: LD_OWVAR 2
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 30
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 69
19949: ST_TO_ADDR
// if not depot then
19950: LD_VAR 0 1
19954: NOT
19955: IFFALSE 19959
// exit ;
19957: GO 20033
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19959: LD_ADDR_VAR 0 2
19963: PUSH
19964: LD_VAR 0 1
19968: PUSH
19969: LD_INT 1
19971: PPUSH
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL_OW 12
19981: ARRAY
19982: PPUSH
19983: CALL_OW 274
19987: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19988: LD_VAR 0 2
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: LD_INT 0
19998: PPUSH
19999: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20003: LD_VAR 0 2
20007: PPUSH
20008: LD_INT 2
20010: PPUSH
20011: LD_INT 0
20013: PPUSH
20014: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20018: LD_VAR 0 2
20022: PPUSH
20023: LD_INT 3
20025: PPUSH
20026: LD_INT 0
20028: PPUSH
20029: CALL_OW 277
// end ;
20033: PPOPN 2
20035: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20036: LD_EXP 21
20040: PUSH
20041: LD_EXP 49
20045: AND
20046: IFFALSE 20143
20048: GO 20050
20050: DISABLE
20051: LD_INT 0
20053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_OWVAR 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 21
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 3
20083: PUSH
20084: LD_INT 23
20086: PUSH
20087: LD_INT 0
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: ST_TO_ADDR
// if not tmp then
20108: LD_VAR 0 1
20112: NOT
20113: IFFALSE 20117
// exit ;
20115: GO 20143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 1
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 12
20134: ARRAY
20135: PPUSH
20136: LD_INT 200
20138: PPUSH
20139: CALL_OW 234
// end ;
20143: PPOPN 1
20145: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20146: LD_EXP 21
20150: PUSH
20151: LD_EXP 50
20155: AND
20156: IFFALSE 20235
20158: GO 20160
20160: DISABLE
20161: LD_INT 0
20163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20164: LD_ADDR_VAR 0 1
20168: PUSH
20169: LD_INT 22
20171: PUSH
20172: LD_OWVAR 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 21
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PPUSH
20195: CALL_OW 69
20199: ST_TO_ADDR
// if not tmp then
20200: LD_VAR 0 1
20204: NOT
20205: IFFALSE 20209
// exit ;
20207: GO 20235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20209: LD_VAR 0 1
20213: PUSH
20214: LD_INT 1
20216: PPUSH
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL_OW 12
20226: ARRAY
20227: PPUSH
20228: LD_INT 60
20230: PPUSH
20231: CALL_OW 234
// end ;
20235: PPOPN 1
20237: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20238: LD_EXP 21
20242: PUSH
20243: LD_EXP 51
20247: AND
20248: IFFALSE 20347
20250: GO 20252
20252: DISABLE
20253: LD_INT 0
20255: PPUSH
20256: PPUSH
// begin enable ;
20257: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20258: LD_ADDR_VAR 0 1
20262: PUSH
20263: LD_INT 22
20265: PUSH
20266: LD_OWVAR 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 61
20277: PUSH
20278: EMPTY
20279: LIST
20280: PUSH
20281: LD_INT 33
20283: PUSH
20284: LD_INT 2
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: PPUSH
20296: CALL_OW 69
20300: ST_TO_ADDR
// if not tmp then
20301: LD_VAR 0 1
20305: NOT
20306: IFFALSE 20310
// exit ;
20308: GO 20347
// for i in tmp do
20310: LD_ADDR_VAR 0 2
20314: PUSH
20315: LD_VAR 0 1
20319: PUSH
20320: FOR_IN
20321: IFFALSE 20345
// if IsControledBy ( i ) then
20323: LD_VAR 0 2
20327: PPUSH
20328: CALL_OW 312
20332: IFFALSE 20343
// ComUnlink ( i ) ;
20334: LD_VAR 0 2
20338: PPUSH
20339: CALL_OW 136
20343: GO 20320
20345: POP
20346: POP
// end ;
20347: PPOPN 2
20349: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20350: LD_EXP 21
20354: PUSH
20355: LD_EXP 52
20359: AND
20360: IFFALSE 20500
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
// begin ToLua ( displayPowell(); ) ;
20369: LD_STRING displayPowell();
20371: PPUSH
20372: CALL_OW 559
// uc_side := 0 ;
20376: LD_ADDR_OWVAR 20
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// uc_nation := 2 ;
20384: LD_ADDR_OWVAR 21
20388: PUSH
20389: LD_INT 2
20391: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20392: LD_ADDR_OWVAR 37
20396: PUSH
20397: LD_INT 14
20399: ST_TO_ADDR
// vc_engine := engine_siberite ;
20400: LD_ADDR_OWVAR 39
20404: PUSH
20405: LD_INT 3
20407: ST_TO_ADDR
// vc_control := control_apeman ;
20408: LD_ADDR_OWVAR 38
20412: PUSH
20413: LD_INT 5
20415: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20416: LD_ADDR_OWVAR 40
20420: PUSH
20421: LD_INT 29
20423: ST_TO_ADDR
// un := CreateVehicle ;
20424: LD_ADDR_VAR 0 2
20428: PUSH
20429: CALL_OW 45
20433: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20434: LD_VAR 0 2
20438: PPUSH
20439: LD_INT 1
20441: PPUSH
20442: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20446: LD_INT 35
20448: PPUSH
20449: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20453: LD_VAR 0 2
20457: PPUSH
20458: LD_INT 22
20460: PUSH
20461: LD_OWVAR 2
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PPUSH
20470: CALL_OW 69
20474: PPUSH
20475: LD_VAR 0 2
20479: PPUSH
20480: CALL_OW 74
20484: PPUSH
20485: CALL_OW 115
// until IsDead ( un ) ;
20489: LD_VAR 0 2
20493: PPUSH
20494: CALL_OW 301
20498: IFFALSE 20446
// end ;
20500: PPOPN 2
20502: END
// every 0 0$1 trigger StreamModeActive and sStu do
20503: LD_EXP 21
20507: PUSH
20508: LD_EXP 60
20512: AND
20513: IFFALSE 20529
20515: GO 20517
20517: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20518: LD_STRING displayStucuk();
20520: PPUSH
20521: CALL_OW 559
// ResetFog ;
20525: CALL_OW 335
// end ;
20529: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20530: LD_EXP 21
20534: PUSH
20535: LD_EXP 53
20539: AND
20540: IFFALSE 20681
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
20548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: LD_INT 22
20556: PUSH
20557: LD_OWVAR 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 21
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 69
20584: ST_TO_ADDR
// if not tmp then
20585: LD_VAR 0 2
20589: NOT
20590: IFFALSE 20594
// exit ;
20592: GO 20681
// un := tmp [ rand ( 1 , tmp ) ] ;
20594: LD_ADDR_VAR 0 1
20598: PUSH
20599: LD_VAR 0 2
20603: PUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_VAR 0 2
20611: PPUSH
20612: CALL_OW 12
20616: ARRAY
20617: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20618: LD_VAR 0 1
20622: PPUSH
20623: LD_INT 0
20625: PPUSH
20626: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20630: LD_VAR 0 1
20634: PPUSH
20635: LD_OWVAR 3
20639: PUSH
20640: LD_VAR 0 1
20644: DIFF
20645: PPUSH
20646: LD_VAR 0 1
20650: PPUSH
20651: CALL_OW 74
20655: PPUSH
20656: CALL_OW 115
// wait ( 0 0$20 ) ;
20660: LD_INT 700
20662: PPUSH
20663: CALL_OW 67
// SetSide ( un , your_side ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_OWVAR 2
20676: PPUSH
20677: CALL_OW 235
// end ;
20681: PPOPN 2
20683: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20684: LD_EXP 21
20688: PUSH
20689: LD_EXP 54
20693: AND
20694: IFFALSE 20800
20696: GO 20698
20698: DISABLE
20699: LD_INT 0
20701: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20702: LD_ADDR_VAR 0 1
20706: PUSH
20707: LD_INT 22
20709: PUSH
20710: LD_OWVAR 2
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 69
20755: ST_TO_ADDR
// if not depot then
20756: LD_VAR 0 1
20760: NOT
20761: IFFALSE 20765
// exit ;
20763: GO 20800
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20765: LD_VAR 0 1
20769: PUSH
20770: LD_INT 1
20772: ARRAY
20773: PPUSH
20774: CALL_OW 250
20778: PPUSH
20779: LD_VAR 0 1
20783: PUSH
20784: LD_INT 1
20786: ARRAY
20787: PPUSH
20788: CALL_OW 251
20792: PPUSH
20793: LD_INT 70
20795: PPUSH
20796: CALL_OW 495
// end ;
20800: PPOPN 1
20802: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20803: LD_EXP 21
20807: PUSH
20808: LD_EXP 55
20812: AND
20813: IFFALSE 21024
20815: GO 20817
20817: DISABLE
20818: LD_INT 0
20820: PPUSH
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20825: LD_ADDR_VAR 0 5
20829: PUSH
20830: LD_INT 22
20832: PUSH
20833: LD_OWVAR 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 21
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PPUSH
20856: CALL_OW 69
20860: ST_TO_ADDR
// if not tmp then
20861: LD_VAR 0 5
20865: NOT
20866: IFFALSE 20870
// exit ;
20868: GO 21024
// for i in tmp do
20870: LD_ADDR_VAR 0 1
20874: PUSH
20875: LD_VAR 0 5
20879: PUSH
20880: FOR_IN
20881: IFFALSE 21022
// begin d := rand ( 0 , 5 ) ;
20883: LD_ADDR_VAR 0 4
20887: PUSH
20888: LD_INT 0
20890: PPUSH
20891: LD_INT 5
20893: PPUSH
20894: CALL_OW 12
20898: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20899: LD_ADDR_VAR 0 2
20903: PUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL_OW 250
20913: PPUSH
20914: LD_VAR 0 4
20918: PPUSH
20919: LD_INT 3
20921: PPUSH
20922: LD_INT 12
20924: PPUSH
20925: CALL_OW 12
20929: PPUSH
20930: CALL_OW 272
20934: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: LD_VAR 0 1
20944: PPUSH
20945: CALL_OW 251
20949: PPUSH
20950: LD_VAR 0 4
20954: PPUSH
20955: LD_INT 3
20957: PPUSH
20958: LD_INT 12
20960: PPUSH
20961: CALL_OW 12
20965: PPUSH
20966: CALL_OW 273
20970: ST_TO_ADDR
// if ValidHex ( x , y ) then
20971: LD_VAR 0 2
20975: PPUSH
20976: LD_VAR 0 3
20980: PPUSH
20981: CALL_OW 488
20985: IFFALSE 21020
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20987: LD_VAR 0 1
20991: PPUSH
20992: LD_VAR 0 2
20996: PPUSH
20997: LD_VAR 0 3
21001: PPUSH
21002: LD_INT 3
21004: PPUSH
21005: LD_INT 6
21007: PPUSH
21008: CALL_OW 12
21012: PPUSH
21013: LD_INT 1
21015: PPUSH
21016: CALL_OW 483
// end ;
21020: GO 20880
21022: POP
21023: POP
// end ;
21024: PPOPN 5
21026: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21027: LD_EXP 21
21031: PUSH
21032: LD_EXP 56
21036: AND
21037: IFFALSE 21131
21039: GO 21041
21041: DISABLE
21042: LD_INT 0
21044: PPUSH
21045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21046: LD_ADDR_VAR 0 2
21050: PUSH
21051: LD_INT 22
21053: PUSH
21054: LD_OWVAR 2
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 32
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 21
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 69
21092: ST_TO_ADDR
// if not tmp then
21093: LD_VAR 0 2
21097: NOT
21098: IFFALSE 21102
// exit ;
21100: GO 21131
// for i in tmp do
21102: LD_ADDR_VAR 0 1
21106: PUSH
21107: LD_VAR 0 2
21111: PUSH
21112: FOR_IN
21113: IFFALSE 21129
// SetFuel ( i , 0 ) ;
21115: LD_VAR 0 1
21119: PPUSH
21120: LD_INT 0
21122: PPUSH
21123: CALL_OW 240
21127: GO 21112
21129: POP
21130: POP
// end ;
21131: PPOPN 2
21133: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21134: LD_EXP 21
21138: PUSH
21139: LD_EXP 57
21143: AND
21144: IFFALSE 21210
21146: GO 21148
21148: DISABLE
21149: LD_INT 0
21151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21152: LD_ADDR_VAR 0 1
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_OWVAR 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 30
21171: PUSH
21172: LD_INT 29
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PPUSH
21183: CALL_OW 69
21187: ST_TO_ADDR
// if not tmp then
21188: LD_VAR 0 1
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21210
// DestroyUnit ( tmp [ 1 ] ) ;
21197: LD_VAR 0 1
21201: PUSH
21202: LD_INT 1
21204: ARRAY
21205: PPUSH
21206: CALL_OW 65
// end ;
21210: PPOPN 1
21212: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21213: LD_EXP 21
21217: PUSH
21218: LD_EXP 59
21222: AND
21223: IFFALSE 21352
21225: GO 21227
21227: DISABLE
21228: LD_INT 0
21230: PPUSH
// begin uc_side := 0 ;
21231: LD_ADDR_OWVAR 20
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// uc_nation := nation_arabian ;
21239: LD_ADDR_OWVAR 21
21243: PUSH
21244: LD_INT 2
21246: ST_TO_ADDR
// hc_gallery :=  ;
21247: LD_ADDR_OWVAR 33
21251: PUSH
21252: LD_STRING 
21254: ST_TO_ADDR
// hc_name :=  ;
21255: LD_ADDR_OWVAR 26
21259: PUSH
21260: LD_STRING 
21262: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21263: LD_INT 1
21265: PPUSH
21266: LD_INT 11
21268: PPUSH
21269: LD_INT 10
21271: PPUSH
21272: CALL_OW 380
// un := CreateHuman ;
21276: LD_ADDR_VAR 0 1
21280: PUSH
21281: CALL_OW 44
21285: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21286: LD_VAR 0 1
21290: PPUSH
21291: LD_INT 1
21293: PPUSH
21294: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21298: LD_INT 35
21300: PPUSH
21301: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21305: LD_VAR 0 1
21309: PPUSH
21310: LD_INT 22
21312: PUSH
21313: LD_OWVAR 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: PPUSH
21327: LD_VAR 0 1
21331: PPUSH
21332: CALL_OW 74
21336: PPUSH
21337: CALL_OW 115
// until IsDead ( un ) ;
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 301
21350: IFFALSE 21298
// end ;
21352: PPOPN 1
21354: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21355: LD_EXP 21
21359: PUSH
21360: LD_EXP 61
21364: AND
21365: IFFALSE 21377
21367: GO 21369
21369: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21370: LD_STRING earthquake(getX(game), 0, 32)
21372: PPUSH
21373: CALL_OW 559
21377: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21378: LD_EXP 21
21382: PUSH
21383: LD_EXP 62
21387: AND
21388: IFFALSE 21479
21390: GO 21392
21392: DISABLE
21393: LD_INT 0
21395: PPUSH
// begin enable ;
21396: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21397: LD_ADDR_VAR 0 1
21401: PUSH
21402: LD_INT 22
21404: PUSH
21405: LD_OWVAR 2
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 21
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 33
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: PPUSH
21439: CALL_OW 69
21443: ST_TO_ADDR
// if not tmp then
21444: LD_VAR 0 1
21448: NOT
21449: IFFALSE 21453
// exit ;
21451: GO 21479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21453: LD_VAR 0 1
21457: PUSH
21458: LD_INT 1
21460: PPUSH
21461: LD_VAR 0 1
21465: PPUSH
21466: CALL_OW 12
21470: ARRAY
21471: PPUSH
21472: LD_INT 1
21474: PPUSH
21475: CALL_OW 234
// end ;
21479: PPOPN 1
21481: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21482: LD_EXP 21
21486: PUSH
21487: LD_EXP 63
21491: AND
21492: IFFALSE 21633
21494: GO 21496
21496: DISABLE
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
21501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21502: LD_ADDR_VAR 0 3
21506: PUSH
21507: LD_INT 22
21509: PUSH
21510: LD_OWVAR 2
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PPUSH
21533: CALL_OW 69
21537: ST_TO_ADDR
// if not tmp then
21538: LD_VAR 0 3
21542: NOT
21543: IFFALSE 21547
// exit ;
21545: GO 21633
// un := tmp [ rand ( 1 , tmp ) ] ;
21547: LD_ADDR_VAR 0 2
21551: PUSH
21552: LD_VAR 0 3
21556: PUSH
21557: LD_INT 1
21559: PPUSH
21560: LD_VAR 0 3
21564: PPUSH
21565: CALL_OW 12
21569: ARRAY
21570: ST_TO_ADDR
// if Crawls ( un ) then
21571: LD_VAR 0 2
21575: PPUSH
21576: CALL_OW 318
21580: IFFALSE 21591
// ComWalk ( un ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21591: LD_VAR 0 2
21595: PPUSH
21596: LD_INT 9
21598: PPUSH
21599: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21603: LD_INT 28
21605: PPUSH
21606: LD_OWVAR 2
21610: PPUSH
21611: LD_INT 2
21613: PPUSH
21614: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21618: LD_INT 29
21620: PPUSH
21621: LD_OWVAR 2
21625: PPUSH
21626: LD_INT 2
21628: PPUSH
21629: CALL_OW 322
// end ;
21633: PPOPN 3
21635: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21636: LD_EXP 21
21640: PUSH
21641: LD_EXP 64
21645: AND
21646: IFFALSE 21757
21648: GO 21650
21650: DISABLE
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
21655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21656: LD_ADDR_VAR 0 3
21660: PUSH
21661: LD_INT 22
21663: PUSH
21664: LD_OWVAR 2
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 25
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: ST_TO_ADDR
// if not tmp then
21692: LD_VAR 0 3
21696: NOT
21697: IFFALSE 21701
// exit ;
21699: GO 21757
// un := tmp [ rand ( 1 , tmp ) ] ;
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: LD_VAR 0 3
21710: PUSH
21711: LD_INT 1
21713: PPUSH
21714: LD_VAR 0 3
21718: PPUSH
21719: CALL_OW 12
21723: ARRAY
21724: ST_TO_ADDR
// if Crawls ( un ) then
21725: LD_VAR 0 2
21729: PPUSH
21730: CALL_OW 318
21734: IFFALSE 21745
// ComWalk ( un ) ;
21736: LD_VAR 0 2
21740: PPUSH
21741: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21745: LD_VAR 0 2
21749: PPUSH
21750: LD_INT 8
21752: PPUSH
21753: CALL_OW 336
// end ;
21757: PPOPN 3
21759: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21760: LD_EXP 21
21764: PUSH
21765: LD_EXP 65
21769: AND
21770: IFFALSE 21914
21772: GO 21774
21774: DISABLE
21775: LD_INT 0
21777: PPUSH
21778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21779: LD_ADDR_VAR 0 2
21783: PUSH
21784: LD_INT 22
21786: PUSH
21787: LD_OWVAR 2
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 21
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 34
21811: PUSH
21812: LD_INT 12
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 34
21821: PUSH
21822: LD_INT 51
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 34
21831: PUSH
21832: LD_INT 32
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: ST_TO_ADDR
// if not tmp then
21855: LD_VAR 0 2
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21914
// for i in tmp do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_VAR 0 2
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21912
// if GetCargo ( i , mat_artifact ) = 0 then
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 4
21884: PPUSH
21885: CALL_OW 289
21889: PUSH
21890: LD_INT 0
21892: EQUAL
21893: IFFALSE 21910
// SetCargo ( i , mat_siberit , 100 ) ;
21895: LD_VAR 0 1
21899: PPUSH
21900: LD_INT 3
21902: PPUSH
21903: LD_INT 100
21905: PPUSH
21906: CALL_OW 290
21910: GO 21874
21912: POP
21913: POP
// end ;
21914: PPOPN 2
21916: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21917: LD_EXP 21
21921: PUSH
21922: LD_EXP 66
21926: AND
21927: IFFALSE 22110
21929: GO 21931
21931: DISABLE
21932: LD_INT 0
21934: PPUSH
21935: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21936: LD_ADDR_VAR 0 2
21940: PUSH
21941: LD_INT 22
21943: PUSH
21944: LD_OWVAR 2
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 69
21957: ST_TO_ADDR
// if not tmp then
21958: LD_VAR 0 2
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 22110
// for i := 1 to 2 do
21967: LD_ADDR_VAR 0 1
21971: PUSH
21972: DOUBLE
21973: LD_INT 1
21975: DEC
21976: ST_TO_ADDR
21977: LD_INT 2
21979: PUSH
21980: FOR_TO
21981: IFFALSE 22108
// begin uc_side := your_side ;
21983: LD_ADDR_OWVAR 20
21987: PUSH
21988: LD_OWVAR 2
21992: ST_TO_ADDR
// uc_nation := nation_american ;
21993: LD_ADDR_OWVAR 21
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// vc_chassis := us_morphling ;
22001: LD_ADDR_OWVAR 37
22005: PUSH
22006: LD_INT 5
22008: ST_TO_ADDR
// vc_engine := engine_siberite ;
22009: LD_ADDR_OWVAR 39
22013: PUSH
22014: LD_INT 3
22016: ST_TO_ADDR
// vc_control := control_computer ;
22017: LD_ADDR_OWVAR 38
22021: PUSH
22022: LD_INT 3
22024: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22025: LD_ADDR_OWVAR 40
22029: PUSH
22030: LD_INT 10
22032: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22033: LD_VAR 0 2
22037: PUSH
22038: LD_INT 1
22040: ARRAY
22041: PPUSH
22042: CALL_OW 310
22046: NOT
22047: IFFALSE 22094
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22049: CALL_OW 45
22053: PPUSH
22054: LD_VAR 0 2
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: CALL_OW 250
22067: PPUSH
22068: LD_VAR 0 2
22072: PUSH
22073: LD_INT 1
22075: ARRAY
22076: PPUSH
22077: CALL_OW 251
22081: PPUSH
22082: LD_INT 12
22084: PPUSH
22085: LD_INT 1
22087: PPUSH
22088: CALL_OW 50
22092: GO 22106
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22094: CALL_OW 45
22098: PPUSH
22099: LD_INT 1
22101: PPUSH
22102: CALL_OW 51
// end ;
22106: GO 21980
22108: POP
22109: POP
// end ;
22110: PPOPN 2
22112: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22113: LD_EXP 21
22117: PUSH
22118: LD_EXP 67
22122: AND
22123: IFFALSE 22345
22125: GO 22127
22127: DISABLE
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22136: LD_ADDR_VAR 0 6
22140: PUSH
22141: LD_INT 22
22143: PUSH
22144: LD_OWVAR 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 21
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 3
22165: PUSH
22166: LD_INT 23
22168: PUSH
22169: LD_INT 0
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: ST_TO_ADDR
// if not tmp then
22190: LD_VAR 0 6
22194: NOT
22195: IFFALSE 22199
// exit ;
22197: GO 22345
// s1 := rand ( 1 , 4 ) ;
22199: LD_ADDR_VAR 0 2
22203: PUSH
22204: LD_INT 1
22206: PPUSH
22207: LD_INT 4
22209: PPUSH
22210: CALL_OW 12
22214: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22215: LD_ADDR_VAR 0 4
22219: PUSH
22220: LD_VAR 0 6
22224: PUSH
22225: LD_INT 1
22227: ARRAY
22228: PPUSH
22229: LD_VAR 0 2
22233: PPUSH
22234: CALL_OW 259
22238: ST_TO_ADDR
// if s1 = 1 then
22239: LD_VAR 0 2
22243: PUSH
22244: LD_INT 1
22246: EQUAL
22247: IFFALSE 22267
// s2 := rand ( 2 , 4 ) else
22249: LD_ADDR_VAR 0 3
22253: PUSH
22254: LD_INT 2
22256: PPUSH
22257: LD_INT 4
22259: PPUSH
22260: CALL_OW 12
22264: ST_TO_ADDR
22265: GO 22275
// s2 := 1 ;
22267: LD_ADDR_VAR 0 3
22271: PUSH
22272: LD_INT 1
22274: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22275: LD_ADDR_VAR 0 5
22279: PUSH
22280: LD_VAR 0 6
22284: PUSH
22285: LD_INT 1
22287: ARRAY
22288: PPUSH
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL_OW 259
22298: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22299: LD_VAR 0 6
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: PPUSH
22308: LD_VAR 0 2
22312: PPUSH
22313: LD_VAR 0 5
22317: PPUSH
22318: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22322: LD_VAR 0 6
22326: PUSH
22327: LD_INT 1
22329: ARRAY
22330: PPUSH
22331: LD_VAR 0 3
22335: PPUSH
22336: LD_VAR 0 4
22340: PPUSH
22341: CALL_OW 237
// end ;
22345: PPOPN 6
22347: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22348: LD_EXP 21
22352: PUSH
22353: LD_EXP 68
22357: AND
22358: IFFALSE 22437
22360: GO 22362
22362: DISABLE
22363: LD_INT 0
22365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22366: LD_ADDR_VAR 0 1
22370: PUSH
22371: LD_INT 22
22373: PUSH
22374: LD_OWVAR 2
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 30
22385: PUSH
22386: LD_INT 3
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PPUSH
22397: CALL_OW 69
22401: ST_TO_ADDR
// if not tmp then
22402: LD_VAR 0 1
22406: NOT
22407: IFFALSE 22411
// exit ;
22409: GO 22437
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22411: LD_VAR 0 1
22415: PUSH
22416: LD_INT 1
22418: PPUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 12
22428: ARRAY
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 234
// end ;
22437: PPOPN 1
22439: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22440: LD_EXP 21
22444: PUSH
22445: LD_EXP 69
22449: AND
22450: IFFALSE 22562
22452: GO 22454
22454: DISABLE
22455: LD_INT 0
22457: PPUSH
22458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22459: LD_ADDR_VAR 0 2
22463: PUSH
22464: LD_INT 22
22466: PUSH
22467: LD_OWVAR 2
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: PUSH
22479: LD_INT 30
22481: PUSH
22482: LD_INT 27
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 30
22491: PUSH
22492: LD_INT 26
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 28
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PPUSH
22519: CALL_OW 69
22523: ST_TO_ADDR
// if not tmp then
22524: LD_VAR 0 2
22528: NOT
22529: IFFALSE 22533
// exit ;
22531: GO 22562
// for i in tmp do
22533: LD_ADDR_VAR 0 1
22537: PUSH
22538: LD_VAR 0 2
22542: PUSH
22543: FOR_IN
22544: IFFALSE 22560
// SetLives ( i , 1 ) ;
22546: LD_VAR 0 1
22550: PPUSH
22551: LD_INT 1
22553: PPUSH
22554: CALL_OW 234
22558: GO 22543
22560: POP
22561: POP
// end ;
22562: PPOPN 2
22564: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22565: LD_EXP 21
22569: PUSH
22570: LD_EXP 70
22574: AND
22575: IFFALSE 22862
22577: GO 22579
22579: DISABLE
22580: LD_INT 0
22582: PPUSH
22583: PPUSH
22584: PPUSH
// begin i := rand ( 1 , 7 ) ;
22585: LD_ADDR_VAR 0 1
22589: PUSH
22590: LD_INT 1
22592: PPUSH
22593: LD_INT 7
22595: PPUSH
22596: CALL_OW 12
22600: ST_TO_ADDR
// case i of 1 :
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 1
22608: DOUBLE
22609: EQUAL
22610: IFTRUE 22614
22612: GO 22624
22614: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22615: LD_STRING earthquake(getX(game), 0, 32)
22617: PPUSH
22618: CALL_OW 559
22622: GO 22862
22624: LD_INT 2
22626: DOUBLE
22627: EQUAL
22628: IFTRUE 22632
22630: GO 22646
22632: POP
// begin ToLua ( displayStucuk(); ) ;
22633: LD_STRING displayStucuk();
22635: PPUSH
22636: CALL_OW 559
// ResetFog ;
22640: CALL_OW 335
// end ; 3 :
22644: GO 22862
22646: LD_INT 3
22648: DOUBLE
22649: EQUAL
22650: IFTRUE 22654
22652: GO 22758
22654: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22655: LD_ADDR_VAR 0 2
22659: PUSH
22660: LD_INT 22
22662: PUSH
22663: LD_OWVAR 2
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 25
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: CALL_OW 69
22690: ST_TO_ADDR
// if not tmp then
22691: LD_VAR 0 2
22695: NOT
22696: IFFALSE 22700
// exit ;
22698: GO 22862
// un := tmp [ rand ( 1 , tmp ) ] ;
22700: LD_ADDR_VAR 0 3
22704: PUSH
22705: LD_VAR 0 2
22709: PUSH
22710: LD_INT 1
22712: PPUSH
22713: LD_VAR 0 2
22717: PPUSH
22718: CALL_OW 12
22722: ARRAY
22723: ST_TO_ADDR
// if Crawls ( un ) then
22724: LD_VAR 0 3
22728: PPUSH
22729: CALL_OW 318
22733: IFFALSE 22744
// ComWalk ( un ) ;
22735: LD_VAR 0 3
22739: PPUSH
22740: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22744: LD_VAR 0 3
22748: PPUSH
22749: LD_INT 8
22751: PPUSH
22752: CALL_OW 336
// end ; 4 :
22756: GO 22862
22758: LD_INT 4
22760: DOUBLE
22761: EQUAL
22762: IFTRUE 22766
22764: GO 22840
22766: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22767: LD_ADDR_VAR 0 2
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_OWVAR 2
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 30
22786: PUSH
22787: LD_INT 29
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PPUSH
22798: CALL_OW 69
22802: ST_TO_ADDR
// if not tmp then
22803: LD_VAR 0 2
22807: NOT
22808: IFFALSE 22812
// exit ;
22810: GO 22862
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22812: LD_VAR 0 2
22816: PUSH
22817: LD_INT 1
22819: ARRAY
22820: PPUSH
22821: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22825: LD_VAR 0 2
22829: PUSH
22830: LD_INT 1
22832: ARRAY
22833: PPUSH
22834: CALL_OW 65
// end ; 5 .. 7 :
22838: GO 22862
22840: LD_INT 5
22842: DOUBLE
22843: GREATEREQUAL
22844: IFFALSE 22852
22846: LD_INT 7
22848: DOUBLE
22849: LESSEQUAL
22850: IFTRUE 22854
22852: GO 22861
22854: POP
// StreamSibBomb ; end ;
22855: CALL 19099 0 0
22859: GO 22862
22861: POP
// end ;
22862: PPOPN 3
22864: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22865: LD_EXP 21
22869: PUSH
22870: LD_EXP 71
22874: AND
22875: IFFALSE 23031
22877: GO 22879
22879: DISABLE
22880: LD_INT 0
22882: PPUSH
22883: PPUSH
22884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_INT 81
22892: PUSH
22893: LD_OWVAR 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: LD_INT 21
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 21
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PPUSH
22934: CALL_OW 69
22938: ST_TO_ADDR
// if not tmp then
22939: LD_VAR 0 2
22943: NOT
22944: IFFALSE 22948
// exit ;
22946: GO 23031
// p := 0 ;
22948: LD_ADDR_VAR 0 3
22952: PUSH
22953: LD_INT 0
22955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22956: LD_INT 35
22958: PPUSH
22959: CALL_OW 67
// p := p + 1 ;
22963: LD_ADDR_VAR 0 3
22967: PUSH
22968: LD_VAR 0 3
22972: PUSH
22973: LD_INT 1
22975: PLUS
22976: ST_TO_ADDR
// for i in tmp do
22977: LD_ADDR_VAR 0 1
22981: PUSH
22982: LD_VAR 0 2
22986: PUSH
22987: FOR_IN
22988: IFFALSE 23019
// if GetLives ( i ) < 1000 then
22990: LD_VAR 0 1
22994: PPUSH
22995: CALL_OW 256
22999: PUSH
23000: LD_INT 1000
23002: LESS
23003: IFFALSE 23017
// SetLives ( i , 1000 ) ;
23005: LD_VAR 0 1
23009: PPUSH
23010: LD_INT 1000
23012: PPUSH
23013: CALL_OW 234
23017: GO 22987
23019: POP
23020: POP
// until p > 20 ;
23021: LD_VAR 0 3
23025: PUSH
23026: LD_INT 20
23028: GREATER
23029: IFFALSE 22956
// end ;
23031: PPOPN 3
23033: END
// every 0 0$1 trigger StreamModeActive and sTime do
23034: LD_EXP 21
23038: PUSH
23039: LD_EXP 72
23043: AND
23044: IFFALSE 23079
23046: GO 23048
23048: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23049: LD_INT 28
23051: PPUSH
23052: LD_OWVAR 2
23056: PPUSH
23057: LD_INT 2
23059: PPUSH
23060: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23064: LD_INT 30
23066: PPUSH
23067: LD_OWVAR 2
23071: PPUSH
23072: LD_INT 2
23074: PPUSH
23075: CALL_OW 322
// end ;
23079: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23080: LD_EXP 21
23084: PUSH
23085: LD_EXP 73
23089: AND
23090: IFFALSE 23211
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23099: LD_ADDR_VAR 0 2
23103: PUSH
23104: LD_INT 22
23106: PUSH
23107: LD_OWVAR 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 21
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: LD_INT 23
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: PPUSH
23148: CALL_OW 69
23152: ST_TO_ADDR
// if not tmp then
23153: LD_VAR 0 2
23157: NOT
23158: IFFALSE 23162
// exit ;
23160: GO 23211
// for i in tmp do
23162: LD_ADDR_VAR 0 1
23166: PUSH
23167: LD_VAR 0 2
23171: PUSH
23172: FOR_IN
23173: IFFALSE 23209
// begin if Crawls ( i ) then
23175: LD_VAR 0 1
23179: PPUSH
23180: CALL_OW 318
23184: IFFALSE 23195
// ComWalk ( i ) ;
23186: LD_VAR 0 1
23190: PPUSH
23191: CALL_OW 138
// SetClass ( i , 2 ) ;
23195: LD_VAR 0 1
23199: PPUSH
23200: LD_INT 2
23202: PPUSH
23203: CALL_OW 336
// end ;
23207: GO 23172
23209: POP
23210: POP
// end ;
23211: PPOPN 2
23213: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23214: LD_EXP 21
23218: PUSH
23219: LD_EXP 74
23223: AND
23224: IFFALSE 23512
23226: GO 23228
23228: DISABLE
23229: LD_INT 0
23231: PPUSH
23232: PPUSH
23233: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23234: LD_OWVAR 2
23238: PPUSH
23239: LD_INT 9
23241: PPUSH
23242: LD_INT 1
23244: PPUSH
23245: LD_INT 1
23247: PPUSH
23248: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23252: LD_INT 9
23254: PPUSH
23255: LD_OWVAR 2
23259: PPUSH
23260: CALL_OW 343
// uc_side := 9 ;
23264: LD_ADDR_OWVAR 20
23268: PUSH
23269: LD_INT 9
23271: ST_TO_ADDR
// uc_nation := 2 ;
23272: LD_ADDR_OWVAR 21
23276: PUSH
23277: LD_INT 2
23279: ST_TO_ADDR
// hc_name := Dark Warrior ;
23280: LD_ADDR_OWVAR 26
23284: PUSH
23285: LD_STRING Dark Warrior
23287: ST_TO_ADDR
// hc_gallery :=  ;
23288: LD_ADDR_OWVAR 33
23292: PUSH
23293: LD_STRING 
23295: ST_TO_ADDR
// hc_noskilllimit := true ;
23296: LD_ADDR_OWVAR 76
23300: PUSH
23301: LD_INT 1
23303: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23304: LD_ADDR_OWVAR 31
23308: PUSH
23309: LD_INT 30
23311: PUSH
23312: LD_INT 30
23314: PUSH
23315: LD_INT 30
23317: PUSH
23318: LD_INT 30
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: ST_TO_ADDR
// un := CreateHuman ;
23327: LD_ADDR_VAR 0 3
23331: PUSH
23332: CALL_OW 44
23336: ST_TO_ADDR
// hc_noskilllimit := false ;
23337: LD_ADDR_OWVAR 76
23341: PUSH
23342: LD_INT 0
23344: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23345: LD_VAR 0 3
23349: PPUSH
23350: LD_INT 1
23352: PPUSH
23353: CALL_OW 51
// ToLua ( playRanger() ) ;
23357: LD_STRING playRanger()
23359: PPUSH
23360: CALL_OW 559
// p := 0 ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: LD_INT 0
23371: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23372: LD_INT 35
23374: PPUSH
23375: CALL_OW 67
// p := p + 1 ;
23379: LD_ADDR_VAR 0 2
23383: PUSH
23384: LD_VAR 0 2
23388: PUSH
23389: LD_INT 1
23391: PLUS
23392: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23393: LD_VAR 0 3
23397: PPUSH
23398: CALL_OW 256
23402: PUSH
23403: LD_INT 1000
23405: LESS
23406: IFFALSE 23420
// SetLives ( un , 1000 ) ;
23408: LD_VAR 0 3
23412: PPUSH
23413: LD_INT 1000
23415: PPUSH
23416: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23420: LD_VAR 0 3
23424: PPUSH
23425: LD_INT 81
23427: PUSH
23428: LD_OWVAR 2
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 91
23439: PUSH
23440: LD_VAR 0 3
23444: PUSH
23445: LD_INT 30
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PPUSH
23457: CALL_OW 69
23461: PPUSH
23462: LD_VAR 0 3
23466: PPUSH
23467: CALL_OW 74
23471: PPUSH
23472: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23476: LD_VAR 0 2
23480: PUSH
23481: LD_INT 80
23483: GREATER
23484: PUSH
23485: LD_VAR 0 3
23489: PPUSH
23490: CALL_OW 301
23494: OR
23495: IFFALSE 23372
// if un then
23497: LD_VAR 0 3
23501: IFFALSE 23512
// RemoveUnit ( un ) ;
23503: LD_VAR 0 3
23507: PPUSH
23508: CALL_OW 64
// end ;
23512: PPOPN 3
23514: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23515: LD_EXP 75
23519: IFFALSE 23635
23521: GO 23523
23523: DISABLE
23524: LD_INT 0
23526: PPUSH
23527: PPUSH
23528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23529: LD_ADDR_VAR 0 2
23533: PUSH
23534: LD_INT 81
23536: PUSH
23537: LD_OWVAR 2
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 21
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PPUSH
23560: CALL_OW 69
23564: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23565: LD_STRING playComputer()
23567: PPUSH
23568: CALL_OW 559
// if not tmp then
23572: LD_VAR 0 2
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23635
// for i in tmp do
23581: LD_ADDR_VAR 0 1
23585: PUSH
23586: LD_VAR 0 2
23590: PUSH
23591: FOR_IN
23592: IFFALSE 23633
// for j := 1 to 4 do
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: DOUBLE
23600: LD_INT 1
23602: DEC
23603: ST_TO_ADDR
23604: LD_INT 4
23606: PUSH
23607: FOR_TO
23608: IFFALSE 23629
// SetSkill ( i , j , 10 ) ;
23610: LD_VAR 0 1
23614: PPUSH
23615: LD_VAR 0 3
23619: PPUSH
23620: LD_INT 10
23622: PPUSH
23623: CALL_OW 237
23627: GO 23607
23629: POP
23630: POP
23631: GO 23591
23633: POP
23634: POP
// end ;
23635: PPOPN 3
23637: END
// every 0 0$1 trigger s30 do var i , tmp ;
23638: LD_EXP 76
23642: IFFALSE 23711
23644: GO 23646
23646: DISABLE
23647: LD_INT 0
23649: PPUSH
23650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23651: LD_ADDR_VAR 0 2
23655: PUSH
23656: LD_INT 22
23658: PUSH
23659: LD_OWVAR 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 69
23672: ST_TO_ADDR
// if not tmp then
23673: LD_VAR 0 2
23677: NOT
23678: IFFALSE 23682
// exit ;
23680: GO 23711
// for i in tmp do
23682: LD_ADDR_VAR 0 1
23686: PUSH
23687: LD_VAR 0 2
23691: PUSH
23692: FOR_IN
23693: IFFALSE 23709
// SetLives ( i , 300 ) ;
23695: LD_VAR 0 1
23699: PPUSH
23700: LD_INT 300
23702: PPUSH
23703: CALL_OW 234
23707: GO 23692
23709: POP
23710: POP
// end ;
23711: PPOPN 2
23713: END
// every 0 0$1 trigger s60 do var i , tmp ;
23714: LD_EXP 77
23718: IFFALSE 23787
23720: GO 23722
23722: DISABLE
23723: LD_INT 0
23725: PPUSH
23726: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_INT 22
23734: PUSH
23735: LD_OWVAR 2
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PPUSH
23744: CALL_OW 69
23748: ST_TO_ADDR
// if not tmp then
23749: LD_VAR 0 2
23753: NOT
23754: IFFALSE 23758
// exit ;
23756: GO 23787
// for i in tmp do
23758: LD_ADDR_VAR 0 1
23762: PUSH
23763: LD_VAR 0 2
23767: PUSH
23768: FOR_IN
23769: IFFALSE 23785
// SetLives ( i , 600 ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_INT 600
23778: PPUSH
23779: CALL_OW 234
23783: GO 23768
23785: POP
23786: POP
// end ;
23787: PPOPN 2
23789: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23790: LD_INT 0
23792: PPUSH
// case cmd of 301 :
23793: LD_VAR 0 1
23797: PUSH
23798: LD_INT 301
23800: DOUBLE
23801: EQUAL
23802: IFTRUE 23806
23804: GO 23838
23806: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23807: LD_VAR 0 6
23811: PPUSH
23812: LD_VAR 0 7
23816: PPUSH
23817: LD_VAR 0 8
23821: PPUSH
23822: LD_VAR 0 4
23826: PPUSH
23827: LD_VAR 0 5
23831: PPUSH
23832: CALL 25039 0 5
23836: GO 23959
23838: LD_INT 302
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23883
23846: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23847: LD_VAR 0 6
23851: PPUSH
23852: LD_VAR 0 7
23856: PPUSH
23857: LD_VAR 0 8
23861: PPUSH
23862: LD_VAR 0 9
23866: PPUSH
23867: LD_VAR 0 4
23871: PPUSH
23872: LD_VAR 0 5
23876: PPUSH
23877: CALL 25130 0 6
23881: GO 23959
23883: LD_INT 303
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23928
23891: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23892: LD_VAR 0 6
23896: PPUSH
23897: LD_VAR 0 7
23901: PPUSH
23902: LD_VAR 0 8
23906: PPUSH
23907: LD_VAR 0 9
23911: PPUSH
23912: LD_VAR 0 4
23916: PPUSH
23917: LD_VAR 0 5
23921: PPUSH
23922: CALL 23964 0 6
23926: GO 23959
23928: LD_INT 304
23930: DOUBLE
23931: EQUAL
23932: IFTRUE 23936
23934: GO 23958
23936: POP
// hHackTeleport ( unit , x , y ) ; end ;
23937: LD_VAR 0 2
23941: PPUSH
23942: LD_VAR 0 4
23946: PPUSH
23947: LD_VAR 0 5
23951: PPUSH
23952: CALL 25723 0 3
23956: GO 23959
23958: POP
// end ;
23959: LD_VAR 0 12
23963: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23964: LD_INT 0
23966: PPUSH
23967: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23968: LD_VAR 0 1
23972: PUSH
23973: LD_INT 1
23975: LESS
23976: PUSH
23977: LD_VAR 0 1
23981: PUSH
23982: LD_INT 3
23984: GREATER
23985: OR
23986: PUSH
23987: LD_VAR 0 5
23991: PPUSH
23992: LD_VAR 0 6
23996: PPUSH
23997: CALL_OW 428
24001: OR
24002: IFFALSE 24006
// exit ;
24004: GO 24726
// uc_side := your_side ;
24006: LD_ADDR_OWVAR 20
24010: PUSH
24011: LD_OWVAR 2
24015: ST_TO_ADDR
// uc_nation := nation ;
24016: LD_ADDR_OWVAR 21
24020: PUSH
24021: LD_VAR 0 1
24025: ST_TO_ADDR
// bc_level = 1 ;
24026: LD_ADDR_OWVAR 43
24030: PUSH
24031: LD_INT 1
24033: ST_TO_ADDR
// case btype of 1 :
24034: LD_VAR 0 2
24038: PUSH
24039: LD_INT 1
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24058
24047: POP
// bc_type := b_depot ; 2 :
24048: LD_ADDR_OWVAR 42
24052: PUSH
24053: LD_INT 0
24055: ST_TO_ADDR
24056: GO 24670
24058: LD_INT 2
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24077
24066: POP
// bc_type := b_warehouse ; 3 :
24067: LD_ADDR_OWVAR 42
24071: PUSH
24072: LD_INT 1
24074: ST_TO_ADDR
24075: GO 24670
24077: LD_INT 3
24079: DOUBLE
24080: EQUAL
24081: IFTRUE 24085
24083: GO 24096
24085: POP
// bc_type := b_lab ; 4 .. 9 :
24086: LD_ADDR_OWVAR 42
24090: PUSH
24091: LD_INT 6
24093: ST_TO_ADDR
24094: GO 24670
24096: LD_INT 4
24098: DOUBLE
24099: GREATEREQUAL
24100: IFFALSE 24108
24102: LD_INT 9
24104: DOUBLE
24105: LESSEQUAL
24106: IFTRUE 24110
24108: GO 24162
24110: POP
// begin bc_type := b_lab_half ;
24111: LD_ADDR_OWVAR 42
24115: PUSH
24116: LD_INT 7
24118: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24119: LD_ADDR_OWVAR 44
24123: PUSH
24124: LD_INT 10
24126: PUSH
24127: LD_INT 11
24129: PUSH
24130: LD_INT 12
24132: PUSH
24133: LD_INT 15
24135: PUSH
24136: LD_INT 14
24138: PUSH
24139: LD_INT 13
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: LD_VAR 0 2
24154: PUSH
24155: LD_INT 3
24157: MINUS
24158: ARRAY
24159: ST_TO_ADDR
// end ; 10 .. 13 :
24160: GO 24670
24162: LD_INT 10
24164: DOUBLE
24165: GREATEREQUAL
24166: IFFALSE 24174
24168: LD_INT 13
24170: DOUBLE
24171: LESSEQUAL
24172: IFTRUE 24176
24174: GO 24253
24176: POP
// begin bc_type := b_lab_full ;
24177: LD_ADDR_OWVAR 42
24181: PUSH
24182: LD_INT 8
24184: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24185: LD_ADDR_OWVAR 44
24189: PUSH
24190: LD_INT 10
24192: PUSH
24193: LD_INT 12
24195: PUSH
24196: LD_INT 14
24198: PUSH
24199: LD_INT 13
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: PUSH
24208: LD_VAR 0 2
24212: PUSH
24213: LD_INT 9
24215: MINUS
24216: ARRAY
24217: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24218: LD_ADDR_OWVAR 45
24222: PUSH
24223: LD_INT 11
24225: PUSH
24226: LD_INT 15
24228: PUSH
24229: LD_INT 12
24231: PUSH
24232: LD_INT 15
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: PUSH
24241: LD_VAR 0 2
24245: PUSH
24246: LD_INT 9
24248: MINUS
24249: ARRAY
24250: ST_TO_ADDR
// end ; 14 :
24251: GO 24670
24253: LD_INT 14
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24272
24261: POP
// bc_type := b_workshop ; 15 :
24262: LD_ADDR_OWVAR 42
24266: PUSH
24267: LD_INT 2
24269: ST_TO_ADDR
24270: GO 24670
24272: LD_INT 15
24274: DOUBLE
24275: EQUAL
24276: IFTRUE 24280
24278: GO 24291
24280: POP
// bc_type := b_factory ; 16 :
24281: LD_ADDR_OWVAR 42
24285: PUSH
24286: LD_INT 3
24288: ST_TO_ADDR
24289: GO 24670
24291: LD_INT 16
24293: DOUBLE
24294: EQUAL
24295: IFTRUE 24299
24297: GO 24310
24299: POP
// bc_type := b_ext_gun ; 17 :
24300: LD_ADDR_OWVAR 42
24304: PUSH
24305: LD_INT 17
24307: ST_TO_ADDR
24308: GO 24670
24310: LD_INT 17
24312: DOUBLE
24313: EQUAL
24314: IFTRUE 24318
24316: GO 24346
24318: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24319: LD_ADDR_OWVAR 42
24323: PUSH
24324: LD_INT 19
24326: PUSH
24327: LD_INT 23
24329: PUSH
24330: LD_INT 19
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: LD_VAR 0 1
24342: ARRAY
24343: ST_TO_ADDR
24344: GO 24670
24346: LD_INT 18
24348: DOUBLE
24349: EQUAL
24350: IFTRUE 24354
24352: GO 24365
24354: POP
// bc_type := b_ext_radar ; 19 :
24355: LD_ADDR_OWVAR 42
24359: PUSH
24360: LD_INT 20
24362: ST_TO_ADDR
24363: GO 24670
24365: LD_INT 19
24367: DOUBLE
24368: EQUAL
24369: IFTRUE 24373
24371: GO 24384
24373: POP
// bc_type := b_ext_radio ; 20 :
24374: LD_ADDR_OWVAR 42
24378: PUSH
24379: LD_INT 22
24381: ST_TO_ADDR
24382: GO 24670
24384: LD_INT 20
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24403
24392: POP
// bc_type := b_ext_siberium ; 21 :
24393: LD_ADDR_OWVAR 42
24397: PUSH
24398: LD_INT 21
24400: ST_TO_ADDR
24401: GO 24670
24403: LD_INT 21
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24422
24411: POP
// bc_type := b_ext_computer ; 22 :
24412: LD_ADDR_OWVAR 42
24416: PUSH
24417: LD_INT 24
24419: ST_TO_ADDR
24420: GO 24670
24422: LD_INT 22
24424: DOUBLE
24425: EQUAL
24426: IFTRUE 24430
24428: GO 24441
24430: POP
// bc_type := b_ext_track ; 23 :
24431: LD_ADDR_OWVAR 42
24435: PUSH
24436: LD_INT 16
24438: ST_TO_ADDR
24439: GO 24670
24441: LD_INT 23
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24460
24449: POP
// bc_type := b_ext_laser ; 24 :
24450: LD_ADDR_OWVAR 42
24454: PUSH
24455: LD_INT 25
24457: ST_TO_ADDR
24458: GO 24670
24460: LD_INT 24
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24479
24468: POP
// bc_type := b_control_tower ; 25 :
24469: LD_ADDR_OWVAR 42
24473: PUSH
24474: LD_INT 36
24476: ST_TO_ADDR
24477: GO 24670
24479: LD_INT 25
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24487
24485: GO 24498
24487: POP
// bc_type := b_breastwork ; 26 :
24488: LD_ADDR_OWVAR 42
24492: PUSH
24493: LD_INT 31
24495: ST_TO_ADDR
24496: GO 24670
24498: LD_INT 26
24500: DOUBLE
24501: EQUAL
24502: IFTRUE 24506
24504: GO 24517
24506: POP
// bc_type := b_bunker ; 27 :
24507: LD_ADDR_OWVAR 42
24511: PUSH
24512: LD_INT 32
24514: ST_TO_ADDR
24515: GO 24670
24517: LD_INT 27
24519: DOUBLE
24520: EQUAL
24521: IFTRUE 24525
24523: GO 24536
24525: POP
// bc_type := b_turret ; 28 :
24526: LD_ADDR_OWVAR 42
24530: PUSH
24531: LD_INT 33
24533: ST_TO_ADDR
24534: GO 24670
24536: LD_INT 28
24538: DOUBLE
24539: EQUAL
24540: IFTRUE 24544
24542: GO 24555
24544: POP
// bc_type := b_armoury ; 29 :
24545: LD_ADDR_OWVAR 42
24549: PUSH
24550: LD_INT 4
24552: ST_TO_ADDR
24553: GO 24670
24555: LD_INT 29
24557: DOUBLE
24558: EQUAL
24559: IFTRUE 24563
24561: GO 24574
24563: POP
// bc_type := b_barracks ; 30 :
24564: LD_ADDR_OWVAR 42
24568: PUSH
24569: LD_INT 5
24571: ST_TO_ADDR
24572: GO 24670
24574: LD_INT 30
24576: DOUBLE
24577: EQUAL
24578: IFTRUE 24582
24580: GO 24593
24582: POP
// bc_type := b_solar_power ; 31 :
24583: LD_ADDR_OWVAR 42
24587: PUSH
24588: LD_INT 27
24590: ST_TO_ADDR
24591: GO 24670
24593: LD_INT 31
24595: DOUBLE
24596: EQUAL
24597: IFTRUE 24601
24599: GO 24612
24601: POP
// bc_type := b_oil_power ; 32 :
24602: LD_ADDR_OWVAR 42
24606: PUSH
24607: LD_INT 26
24609: ST_TO_ADDR
24610: GO 24670
24612: LD_INT 32
24614: DOUBLE
24615: EQUAL
24616: IFTRUE 24620
24618: GO 24631
24620: POP
// bc_type := b_siberite_power ; 33 :
24621: LD_ADDR_OWVAR 42
24625: PUSH
24626: LD_INT 28
24628: ST_TO_ADDR
24629: GO 24670
24631: LD_INT 33
24633: DOUBLE
24634: EQUAL
24635: IFTRUE 24639
24637: GO 24650
24639: POP
// bc_type := b_oil_mine ; 34 :
24640: LD_ADDR_OWVAR 42
24644: PUSH
24645: LD_INT 29
24647: ST_TO_ADDR
24648: GO 24670
24650: LD_INT 34
24652: DOUBLE
24653: EQUAL
24654: IFTRUE 24658
24656: GO 24669
24658: POP
// bc_type := b_siberite_mine ; end ;
24659: LD_ADDR_OWVAR 42
24663: PUSH
24664: LD_INT 30
24666: ST_TO_ADDR
24667: GO 24670
24669: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24670: LD_ADDR_VAR 0 8
24674: PUSH
24675: LD_VAR 0 5
24679: PPUSH
24680: LD_VAR 0 6
24684: PPUSH
24685: LD_VAR 0 3
24689: PPUSH
24690: CALL_OW 47
24694: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24695: LD_OWVAR 42
24699: PUSH
24700: LD_INT 32
24702: PUSH
24703: LD_INT 33
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: IN
24710: IFFALSE 24726
// PlaceWeaponTurret ( b , weapon ) ;
24712: LD_VAR 0 8
24716: PPUSH
24717: LD_VAR 0 4
24721: PPUSH
24722: CALL_OW 431
// end ;
24726: LD_VAR 0 7
24730: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24731: LD_INT 0
24733: PPUSH
24734: PPUSH
24735: PPUSH
24736: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24737: LD_ADDR_VAR 0 4
24741: PUSH
24742: LD_INT 22
24744: PUSH
24745: LD_OWVAR 2
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 30
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 30
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PPUSH
24786: CALL_OW 69
24790: ST_TO_ADDR
// if not tmp then
24791: LD_VAR 0 4
24795: NOT
24796: IFFALSE 24800
// exit ;
24798: GO 24859
// for i in tmp do
24800: LD_ADDR_VAR 0 2
24804: PUSH
24805: LD_VAR 0 4
24809: PUSH
24810: FOR_IN
24811: IFFALSE 24857
// for j = 1 to 3 do
24813: LD_ADDR_VAR 0 3
24817: PUSH
24818: DOUBLE
24819: LD_INT 1
24821: DEC
24822: ST_TO_ADDR
24823: LD_INT 3
24825: PUSH
24826: FOR_TO
24827: IFFALSE 24853
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24829: LD_VAR 0 2
24833: PPUSH
24834: CALL_OW 274
24838: PPUSH
24839: LD_VAR 0 3
24843: PPUSH
24844: LD_INT 99999
24846: PPUSH
24847: CALL_OW 277
24851: GO 24826
24853: POP
24854: POP
24855: GO 24810
24857: POP
24858: POP
// end ;
24859: LD_VAR 0 1
24863: RET
// export function hHackSetLevel10 ; var i , j ; begin
24864: LD_INT 0
24866: PPUSH
24867: PPUSH
24868: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24869: LD_ADDR_VAR 0 2
24873: PUSH
24874: LD_INT 21
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PPUSH
24884: CALL_OW 69
24888: PUSH
24889: FOR_IN
24890: IFFALSE 24942
// if IsSelected ( i ) then
24892: LD_VAR 0 2
24896: PPUSH
24897: CALL_OW 306
24901: IFFALSE 24940
// begin for j := 1 to 4 do
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: DOUBLE
24909: LD_INT 1
24911: DEC
24912: ST_TO_ADDR
24913: LD_INT 4
24915: PUSH
24916: FOR_TO
24917: IFFALSE 24938
// SetSkill ( i , j , 10 ) ;
24919: LD_VAR 0 2
24923: PPUSH
24924: LD_VAR 0 3
24928: PPUSH
24929: LD_INT 10
24931: PPUSH
24932: CALL_OW 237
24936: GO 24916
24938: POP
24939: POP
// end ;
24940: GO 24889
24942: POP
24943: POP
// end ;
24944: LD_VAR 0 1
24948: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24949: LD_INT 0
24951: PPUSH
24952: PPUSH
24953: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24954: LD_ADDR_VAR 0 2
24958: PUSH
24959: LD_INT 22
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 21
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PPUSH
24985: CALL_OW 69
24989: PUSH
24990: FOR_IN
24991: IFFALSE 25032
// begin for j := 1 to 4 do
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: DOUBLE
24999: LD_INT 1
25001: DEC
25002: ST_TO_ADDR
25003: LD_INT 4
25005: PUSH
25006: FOR_TO
25007: IFFALSE 25028
// SetSkill ( i , j , 10 ) ;
25009: LD_VAR 0 2
25013: PPUSH
25014: LD_VAR 0 3
25018: PPUSH
25019: LD_INT 10
25021: PPUSH
25022: CALL_OW 237
25026: GO 25006
25028: POP
25029: POP
// end ;
25030: GO 24990
25032: POP
25033: POP
// end ;
25034: LD_VAR 0 1
25038: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25039: LD_INT 0
25041: PPUSH
// uc_side := your_side ;
25042: LD_ADDR_OWVAR 20
25046: PUSH
25047: LD_OWVAR 2
25051: ST_TO_ADDR
// uc_nation := nation ;
25052: LD_ADDR_OWVAR 21
25056: PUSH
25057: LD_VAR 0 1
25061: ST_TO_ADDR
// InitHc ;
25062: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25066: LD_INT 0
25068: PPUSH
25069: LD_VAR 0 2
25073: PPUSH
25074: LD_VAR 0 3
25078: PPUSH
25079: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25083: LD_VAR 0 4
25087: PPUSH
25088: LD_VAR 0 5
25092: PPUSH
25093: CALL_OW 428
25097: PUSH
25098: LD_INT 0
25100: EQUAL
25101: IFFALSE 25125
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25103: CALL_OW 44
25107: PPUSH
25108: LD_VAR 0 4
25112: PPUSH
25113: LD_VAR 0 5
25117: PPUSH
25118: LD_INT 1
25120: PPUSH
25121: CALL_OW 48
// end ;
25125: LD_VAR 0 6
25129: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25130: LD_INT 0
25132: PPUSH
25133: PPUSH
// uc_side := your_side ;
25134: LD_ADDR_OWVAR 20
25138: PUSH
25139: LD_OWVAR 2
25143: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25144: LD_VAR 0 1
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: LD_INT 4
25160: PUSH
25161: LD_INT 5
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: IN
25171: IFFALSE 25183
// uc_nation := nation_american else
25173: LD_ADDR_OWVAR 21
25177: PUSH
25178: LD_INT 1
25180: ST_TO_ADDR
25181: GO 25226
// if chassis in [ 11 , 12 , 13 , 14 ] then
25183: LD_VAR 0 1
25187: PUSH
25188: LD_INT 11
25190: PUSH
25191: LD_INT 12
25193: PUSH
25194: LD_INT 13
25196: PUSH
25197: LD_INT 14
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: IN
25206: IFFALSE 25218
// uc_nation := nation_arabian else
25208: LD_ADDR_OWVAR 21
25212: PUSH
25213: LD_INT 2
25215: ST_TO_ADDR
25216: GO 25226
// uc_nation := nation_russian ;
25218: LD_ADDR_OWVAR 21
25222: PUSH
25223: LD_INT 3
25225: ST_TO_ADDR
// vc_chassis := chassis ;
25226: LD_ADDR_OWVAR 37
25230: PUSH
25231: LD_VAR 0 1
25235: ST_TO_ADDR
// vc_engine := engine ;
25236: LD_ADDR_OWVAR 39
25240: PUSH
25241: LD_VAR 0 2
25245: ST_TO_ADDR
// vc_control := control ;
25246: LD_ADDR_OWVAR 38
25250: PUSH
25251: LD_VAR 0 3
25255: ST_TO_ADDR
// vc_weapon := weapon ;
25256: LD_ADDR_OWVAR 40
25260: PUSH
25261: LD_VAR 0 4
25265: ST_TO_ADDR
// un := CreateVehicle ;
25266: LD_ADDR_VAR 0 8
25270: PUSH
25271: CALL_OW 45
25275: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25276: LD_VAR 0 8
25280: PPUSH
25281: LD_INT 0
25283: PPUSH
25284: LD_INT 5
25286: PPUSH
25287: CALL_OW 12
25291: PPUSH
25292: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25296: LD_VAR 0 8
25300: PPUSH
25301: LD_VAR 0 5
25305: PPUSH
25306: LD_VAR 0 6
25310: PPUSH
25311: LD_INT 1
25313: PPUSH
25314: CALL_OW 48
// end ;
25318: LD_VAR 0 7
25322: RET
// export hInvincible ; every 1 do
25323: GO 25325
25325: DISABLE
// hInvincible := [ ] ;
25326: LD_ADDR_EXP 78
25330: PUSH
25331: EMPTY
25332: ST_TO_ADDR
25333: END
// every 10 do var i ;
25334: GO 25336
25336: DISABLE
25337: LD_INT 0
25339: PPUSH
// begin enable ;
25340: ENABLE
// if not hInvincible then
25341: LD_EXP 78
25345: NOT
25346: IFFALSE 25350
// exit ;
25348: GO 25394
// for i in hInvincible do
25350: LD_ADDR_VAR 0 1
25354: PUSH
25355: LD_EXP 78
25359: PUSH
25360: FOR_IN
25361: IFFALSE 25392
// if GetLives ( i ) < 1000 then
25363: LD_VAR 0 1
25367: PPUSH
25368: CALL_OW 256
25372: PUSH
25373: LD_INT 1000
25375: LESS
25376: IFFALSE 25390
// SetLives ( i , 1000 ) ;
25378: LD_VAR 0 1
25382: PPUSH
25383: LD_INT 1000
25385: PPUSH
25386: CALL_OW 234
25390: GO 25360
25392: POP
25393: POP
// end ;
25394: PPOPN 1
25396: END
// export function hHackInvincible ; var i ; begin
25397: LD_INT 0
25399: PPUSH
25400: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25401: LD_ADDR_VAR 0 2
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: LD_INT 21
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 21
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 69
25438: PUSH
25439: FOR_IN
25440: IFFALSE 25501
// if IsSelected ( i ) then
25442: LD_VAR 0 2
25446: PPUSH
25447: CALL_OW 306
25451: IFFALSE 25499
// begin if i in hInvincible then
25453: LD_VAR 0 2
25457: PUSH
25458: LD_EXP 78
25462: IN
25463: IFFALSE 25483
// hInvincible := hInvincible diff i else
25465: LD_ADDR_EXP 78
25469: PUSH
25470: LD_EXP 78
25474: PUSH
25475: LD_VAR 0 2
25479: DIFF
25480: ST_TO_ADDR
25481: GO 25499
// hInvincible := hInvincible union i ;
25483: LD_ADDR_EXP 78
25487: PUSH
25488: LD_EXP 78
25492: PUSH
25493: LD_VAR 0 2
25497: UNION
25498: ST_TO_ADDR
// end ;
25499: GO 25439
25501: POP
25502: POP
// end ;
25503: LD_VAR 0 1
25507: RET
// export function hHackInvisible ; var i , j ; begin
25508: LD_INT 0
25510: PPUSH
25511: PPUSH
25512: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25513: LD_ADDR_VAR 0 2
25517: PUSH
25518: LD_INT 21
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PPUSH
25528: CALL_OW 69
25532: PUSH
25533: FOR_IN
25534: IFFALSE 25558
// if IsSelected ( i ) then
25536: LD_VAR 0 2
25540: PPUSH
25541: CALL_OW 306
25545: IFFALSE 25556
// ComForceInvisible ( i ) ;
25547: LD_VAR 0 2
25551: PPUSH
25552: CALL_OW 496
25556: GO 25533
25558: POP
25559: POP
// end ;
25560: LD_VAR 0 1
25564: RET
// export function hHackChangeYourSide ; begin
25565: LD_INT 0
25567: PPUSH
// if your_side = 8 then
25568: LD_OWVAR 2
25572: PUSH
25573: LD_INT 8
25575: EQUAL
25576: IFFALSE 25588
// your_side := 0 else
25578: LD_ADDR_OWVAR 2
25582: PUSH
25583: LD_INT 0
25585: ST_TO_ADDR
25586: GO 25602
// your_side := your_side + 1 ;
25588: LD_ADDR_OWVAR 2
25592: PUSH
25593: LD_OWVAR 2
25597: PUSH
25598: LD_INT 1
25600: PLUS
25601: ST_TO_ADDR
// end ;
25602: LD_VAR 0 1
25606: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25607: LD_INT 0
25609: PPUSH
25610: PPUSH
25611: PPUSH
// for i in all_units do
25612: LD_ADDR_VAR 0 2
25616: PUSH
25617: LD_OWVAR 3
25621: PUSH
25622: FOR_IN
25623: IFFALSE 25701
// if IsSelected ( i ) then
25625: LD_VAR 0 2
25629: PPUSH
25630: CALL_OW 306
25634: IFFALSE 25699
// begin j := GetSide ( i ) ;
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_VAR 0 2
25645: PPUSH
25646: CALL_OW 255
25650: ST_TO_ADDR
// if j = 8 then
25651: LD_VAR 0 3
25655: PUSH
25656: LD_INT 8
25658: EQUAL
25659: IFFALSE 25671
// j := 0 else
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_INT 0
25668: ST_TO_ADDR
25669: GO 25685
// j := j + 1 ;
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_VAR 0 3
25680: PUSH
25681: LD_INT 1
25683: PLUS
25684: ST_TO_ADDR
// SetSide ( i , j ) ;
25685: LD_VAR 0 2
25689: PPUSH
25690: LD_VAR 0 3
25694: PPUSH
25695: CALL_OW 235
// end ;
25699: GO 25622
25701: POP
25702: POP
// end ;
25703: LD_VAR 0 1
25707: RET
// export function hHackFog ; begin
25708: LD_INT 0
25710: PPUSH
// FogOff ( true ) ;
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 344
// end ;
25718: LD_VAR 0 1
25722: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25723: LD_INT 0
25725: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25726: LD_VAR 0 1
25730: PPUSH
25731: LD_VAR 0 2
25735: PPUSH
25736: LD_VAR 0 3
25740: PPUSH
25741: LD_INT 1
25743: PPUSH
25744: LD_INT 1
25746: PPUSH
25747: CALL_OW 483
// CenterOnXY ( x , y ) ;
25751: LD_VAR 0 2
25755: PPUSH
25756: LD_VAR 0 3
25760: PPUSH
25761: CALL_OW 84
// end ;
25765: LD_VAR 0 4
25769: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25770: LD_INT 0
25772: PPUSH
25773: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25774: LD_VAR 0 1
25778: NOT
25779: PUSH
25780: LD_VAR 0 2
25784: PPUSH
25785: LD_VAR 0 3
25789: PPUSH
25790: CALL_OW 488
25794: NOT
25795: OR
25796: PUSH
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 266
25806: PUSH
25807: LD_INT 3
25809: NONEQUAL
25810: PUSH
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 247
25820: PUSH
25821: LD_INT 1
25823: EQUAL
25824: NOT
25825: AND
25826: OR
25827: IFFALSE 25831
// exit ;
25829: GO 25980
// if GetType ( factory ) = unit_human then
25831: LD_VAR 0 1
25835: PPUSH
25836: CALL_OW 247
25840: PUSH
25841: LD_INT 1
25843: EQUAL
25844: IFFALSE 25861
// factory := IsInUnit ( factory ) ;
25846: LD_ADDR_VAR 0 1
25850: PUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: CALL_OW 310
25860: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 266
25870: PUSH
25871: LD_INT 3
25873: NONEQUAL
25874: IFFALSE 25878
// exit ;
25876: GO 25980
// if HexInfo ( x , y ) = factory then
25878: LD_VAR 0 2
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: CALL_OW 428
25892: PUSH
25893: LD_VAR 0 1
25897: EQUAL
25898: IFFALSE 25925
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25900: LD_ADDR_EXP 79
25904: PUSH
25905: LD_EXP 79
25909: PPUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: LD_INT 0
25917: PPUSH
25918: CALL_OW 1
25922: ST_TO_ADDR
25923: GO 25976
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25925: LD_ADDR_EXP 79
25929: PUSH
25930: LD_EXP 79
25934: PPUSH
25935: LD_VAR 0 1
25939: PPUSH
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL_OW 255
25949: PUSH
25950: LD_VAR 0 1
25954: PUSH
25955: LD_VAR 0 2
25959: PUSH
25960: LD_VAR 0 3
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 1
25975: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25976: CALL 25985 0 0
// end ;
25980: LD_VAR 0 4
25984: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25990: LD_STRING resetFactoryWaypoint();
25992: PPUSH
25993: CALL_OW 559
// if factoryWaypoints then
25997: LD_EXP 79
26001: IFFALSE 26127
// begin list := PrepareArray ( factoryWaypoints ) ;
26003: LD_ADDR_VAR 0 3
26007: PUSH
26008: LD_EXP 79
26012: PPUSH
26013: CALL 72504 0 1
26017: ST_TO_ADDR
// for i := 1 to list do
26018: LD_ADDR_VAR 0 2
26022: PUSH
26023: DOUBLE
26024: LD_INT 1
26026: DEC
26027: ST_TO_ADDR
26028: LD_VAR 0 3
26032: PUSH
26033: FOR_TO
26034: IFFALSE 26125
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26036: LD_STRING setFactoryWaypointXY(
26038: PUSH
26039: LD_VAR 0 3
26043: PUSH
26044: LD_VAR 0 2
26048: ARRAY
26049: PUSH
26050: LD_INT 1
26052: ARRAY
26053: STR
26054: PUSH
26055: LD_STRING ,
26057: STR
26058: PUSH
26059: LD_VAR 0 3
26063: PUSH
26064: LD_VAR 0 2
26068: ARRAY
26069: PUSH
26070: LD_INT 2
26072: ARRAY
26073: STR
26074: PUSH
26075: LD_STRING ,
26077: STR
26078: PUSH
26079: LD_VAR 0 3
26083: PUSH
26084: LD_VAR 0 2
26088: ARRAY
26089: PUSH
26090: LD_INT 3
26092: ARRAY
26093: STR
26094: PUSH
26095: LD_STRING ,
26097: STR
26098: PUSH
26099: LD_VAR 0 3
26103: PUSH
26104: LD_VAR 0 2
26108: ARRAY
26109: PUSH
26110: LD_INT 4
26112: ARRAY
26113: STR
26114: PUSH
26115: LD_STRING )
26117: STR
26118: PPUSH
26119: CALL_OW 559
26123: GO 26033
26125: POP
26126: POP
// end ; end ;
26127: LD_VAR 0 1
26131: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26132: LD_INT 0
26134: PPUSH
// if HexInfo ( x , y ) = warehouse then
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_VAR 0 3
26144: PPUSH
26145: CALL_OW 428
26149: PUSH
26150: LD_VAR 0 1
26154: EQUAL
26155: IFFALSE 26182
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26157: LD_ADDR_EXP 80
26161: PUSH
26162: LD_EXP 80
26166: PPUSH
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_INT 0
26174: PPUSH
26175: CALL_OW 1
26179: ST_TO_ADDR
26180: GO 26233
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26182: LD_ADDR_EXP 80
26186: PUSH
26187: LD_EXP 80
26191: PPUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: LD_VAR 0 1
26201: PPUSH
26202: CALL_OW 255
26206: PUSH
26207: LD_VAR 0 1
26211: PUSH
26212: LD_VAR 0 2
26216: PUSH
26217: LD_VAR 0 3
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL_OW 1
26232: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26233: CALL 26242 0 0
// end ;
26237: LD_VAR 0 4
26241: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26242: LD_INT 0
26244: PPUSH
26245: PPUSH
26246: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26247: LD_STRING resetWarehouseGatheringPoints();
26249: PPUSH
26250: CALL_OW 559
// if warehouseGatheringPoints then
26254: LD_EXP 80
26258: IFFALSE 26384
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26260: LD_ADDR_VAR 0 3
26264: PUSH
26265: LD_EXP 80
26269: PPUSH
26270: CALL 72504 0 1
26274: ST_TO_ADDR
// for i := 1 to list do
26275: LD_ADDR_VAR 0 2
26279: PUSH
26280: DOUBLE
26281: LD_INT 1
26283: DEC
26284: ST_TO_ADDR
26285: LD_VAR 0 3
26289: PUSH
26290: FOR_TO
26291: IFFALSE 26382
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26293: LD_STRING setWarehouseGatheringPointXY(
26295: PUSH
26296: LD_VAR 0 3
26300: PUSH
26301: LD_VAR 0 2
26305: ARRAY
26306: PUSH
26307: LD_INT 1
26309: ARRAY
26310: STR
26311: PUSH
26312: LD_STRING ,
26314: STR
26315: PUSH
26316: LD_VAR 0 3
26320: PUSH
26321: LD_VAR 0 2
26325: ARRAY
26326: PUSH
26327: LD_INT 2
26329: ARRAY
26330: STR
26331: PUSH
26332: LD_STRING ,
26334: STR
26335: PUSH
26336: LD_VAR 0 3
26340: PUSH
26341: LD_VAR 0 2
26345: ARRAY
26346: PUSH
26347: LD_INT 3
26349: ARRAY
26350: STR
26351: PUSH
26352: LD_STRING ,
26354: STR
26355: PUSH
26356: LD_VAR 0 3
26360: PUSH
26361: LD_VAR 0 2
26365: ARRAY
26366: PUSH
26367: LD_INT 4
26369: ARRAY
26370: STR
26371: PUSH
26372: LD_STRING )
26374: STR
26375: PPUSH
26376: CALL_OW 559
26380: GO 26290
26382: POP
26383: POP
// end ; end ;
26384: LD_VAR 0 1
26388: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26389: LD_EXP 80
26393: IFFALSE 27078
26395: GO 26397
26397: DISABLE
26398: LD_INT 0
26400: PPUSH
26401: PPUSH
26402: PPUSH
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
26407: PPUSH
26408: PPUSH
// begin enable ;
26409: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: LD_EXP 80
26419: PPUSH
26420: CALL 72504 0 1
26424: ST_TO_ADDR
// if not list then
26425: LD_VAR 0 3
26429: NOT
26430: IFFALSE 26434
// exit ;
26432: GO 27078
// for i := 1 to list do
26434: LD_ADDR_VAR 0 1
26438: PUSH
26439: DOUBLE
26440: LD_INT 1
26442: DEC
26443: ST_TO_ADDR
26444: LD_VAR 0 3
26448: PUSH
26449: FOR_TO
26450: IFFALSE 27076
// begin depot := list [ i ] [ 2 ] ;
26452: LD_ADDR_VAR 0 8
26456: PUSH
26457: LD_VAR 0 3
26461: PUSH
26462: LD_VAR 0 1
26466: ARRAY
26467: PUSH
26468: LD_INT 2
26470: ARRAY
26471: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26472: LD_ADDR_VAR 0 5
26476: PUSH
26477: LD_VAR 0 3
26481: PUSH
26482: LD_VAR 0 1
26486: ARRAY
26487: PUSH
26488: LD_INT 1
26490: ARRAY
26491: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26492: LD_VAR 0 8
26496: PPUSH
26497: CALL_OW 301
26501: PUSH
26502: LD_VAR 0 5
26506: PUSH
26507: LD_VAR 0 8
26511: PPUSH
26512: CALL_OW 255
26516: NONEQUAL
26517: OR
26518: IFFALSE 26547
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26520: LD_ADDR_EXP 80
26524: PUSH
26525: LD_EXP 80
26529: PPUSH
26530: LD_VAR 0 8
26534: PPUSH
26535: LD_INT 0
26537: PPUSH
26538: CALL_OW 1
26542: ST_TO_ADDR
// exit ;
26543: POP
26544: POP
26545: GO 27078
// end ; x := list [ i ] [ 3 ] ;
26547: LD_ADDR_VAR 0 6
26551: PUSH
26552: LD_VAR 0 3
26556: PUSH
26557: LD_VAR 0 1
26561: ARRAY
26562: PUSH
26563: LD_INT 3
26565: ARRAY
26566: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26567: LD_ADDR_VAR 0 7
26571: PUSH
26572: LD_VAR 0 3
26576: PUSH
26577: LD_VAR 0 1
26581: ARRAY
26582: PUSH
26583: LD_INT 4
26585: ARRAY
26586: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26587: LD_ADDR_VAR 0 9
26591: PUSH
26592: LD_VAR 0 6
26596: PPUSH
26597: LD_VAR 0 7
26601: PPUSH
26602: LD_INT 16
26604: PPUSH
26605: CALL 71092 0 3
26609: ST_TO_ADDR
// if not cratesNearbyPoint then
26610: LD_VAR 0 9
26614: NOT
26615: IFFALSE 26621
// exit ;
26617: POP
26618: POP
26619: GO 27078
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26621: LD_ADDR_VAR 0 4
26625: PUSH
26626: LD_INT 22
26628: PUSH
26629: LD_VAR 0 5
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: LD_INT 60
26643: PUSH
26644: EMPTY
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 91
26653: PUSH
26654: LD_VAR 0 8
26658: PUSH
26659: LD_INT 6
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 25
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 25
26682: PUSH
26683: LD_INT 16
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: PPUSH
26701: CALL_OW 69
26705: PUSH
26706: LD_VAR 0 8
26710: PPUSH
26711: CALL_OW 313
26715: PPUSH
26716: LD_INT 3
26718: PUSH
26719: LD_INT 60
26721: PUSH
26722: EMPTY
26723: LIST
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 25
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 25
26744: PUSH
26745: LD_INT 16
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PPUSH
26761: CALL_OW 72
26765: UNION
26766: ST_TO_ADDR
// if tmp then
26767: LD_VAR 0 4
26771: IFFALSE 26851
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26773: LD_ADDR_VAR 0 4
26777: PUSH
26778: LD_VAR 0 4
26782: PPUSH
26783: LD_INT 3
26785: PPUSH
26786: CALL 69061 0 2
26790: ST_TO_ADDR
// for j in tmp do
26791: LD_ADDR_VAR 0 2
26795: PUSH
26796: LD_VAR 0 4
26800: PUSH
26801: FOR_IN
26802: IFFALSE 26845
// begin if IsInUnit ( j ) then
26804: LD_VAR 0 2
26808: PPUSH
26809: CALL_OW 310
26813: IFFALSE 26824
// ComExit ( j ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: CALL 69144 0 1
// AddComCollect ( j , x , y ) ;
26824: LD_VAR 0 2
26828: PPUSH
26829: LD_VAR 0 6
26833: PPUSH
26834: LD_VAR 0 7
26838: PPUSH
26839: CALL_OW 177
// end ;
26843: GO 26801
26845: POP
26846: POP
// exit ;
26847: POP
26848: POP
26849: GO 27078
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26851: LD_ADDR_VAR 0 4
26855: PUSH
26856: LD_INT 22
26858: PUSH
26859: LD_VAR 0 5
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 91
26870: PUSH
26871: LD_VAR 0 8
26875: PUSH
26876: LD_INT 8
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: LD_INT 34
26889: PUSH
26890: LD_INT 12
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 34
26899: PUSH
26900: LD_INT 51
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 34
26909: PUSH
26910: LD_INT 32
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 34
26919: PUSH
26920: LD_INT 89
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: PPUSH
26939: CALL_OW 69
26943: ST_TO_ADDR
// if tmp then
26944: LD_VAR 0 4
26948: IFFALSE 27074
// begin for j in tmp do
26950: LD_ADDR_VAR 0 2
26954: PUSH
26955: LD_VAR 0 4
26959: PUSH
26960: FOR_IN
26961: IFFALSE 27072
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26963: LD_VAR 0 2
26967: PPUSH
26968: CALL_OW 262
26972: PUSH
26973: LD_INT 3
26975: EQUAL
26976: PUSH
26977: LD_VAR 0 2
26981: PPUSH
26982: CALL_OW 261
26986: PUSH
26987: LD_INT 20
26989: GREATER
26990: OR
26991: PUSH
26992: LD_VAR 0 2
26996: PPUSH
26997: CALL_OW 314
27001: NOT
27002: AND
27003: PUSH
27004: LD_VAR 0 2
27008: PPUSH
27009: CALL_OW 263
27013: PUSH
27014: LD_INT 1
27016: NONEQUAL
27017: PUSH
27018: LD_VAR 0 2
27022: PPUSH
27023: CALL_OW 311
27027: OR
27028: AND
27029: IFFALSE 27070
// begin ComCollect ( j , x , y ) ;
27031: LD_VAR 0 2
27035: PPUSH
27036: LD_VAR 0 6
27040: PPUSH
27041: LD_VAR 0 7
27045: PPUSH
27046: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27050: LD_VAR 0 2
27054: PPUSH
27055: LD_VAR 0 8
27059: PPUSH
27060: CALL_OW 172
// exit ;
27064: POP
27065: POP
27066: POP
27067: POP
27068: GO 27078
// end ;
27070: GO 26960
27072: POP
27073: POP
// end ; end ;
27074: GO 26449
27076: POP
27077: POP
// end ; end_of_file
27078: PPOPN 9
27080: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27081: LD_INT 0
27083: PPUSH
27084: PPUSH
27085: PPUSH
27086: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 264
27096: PUSH
27097: LD_INT 91
27099: EQUAL
27100: IFFALSE 27172
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27102: LD_INT 68
27104: PPUSH
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 255
27114: PPUSH
27115: CALL_OW 321
27119: PUSH
27120: LD_INT 2
27122: EQUAL
27123: IFFALSE 27135
// eff := 70 else
27125: LD_ADDR_VAR 0 4
27129: PUSH
27130: LD_INT 70
27132: ST_TO_ADDR
27133: GO 27143
// eff := 30 ;
27135: LD_ADDR_VAR 0 4
27139: PUSH
27140: LD_INT 30
27142: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL_OW 250
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 251
27162: PPUSH
27163: LD_VAR 0 4
27167: PPUSH
27168: CALL_OW 495
// end ; end ;
27172: LD_VAR 0 2
27176: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27177: LD_INT 0
27179: PPUSH
// end ;
27180: LD_VAR 0 4
27184: RET
// export function SOS_Command ( cmd ) ; begin
27185: LD_INT 0
27187: PPUSH
// end ;
27188: LD_VAR 0 2
27192: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27193: LD_INT 0
27195: PPUSH
// end ;
27196: LD_VAR 0 6
27200: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27201: LD_INT 0
27203: PPUSH
27204: PPUSH
// if not vehicle or not factory then
27205: LD_VAR 0 1
27209: NOT
27210: PUSH
27211: LD_VAR 0 2
27215: NOT
27216: OR
27217: IFFALSE 27221
// exit ;
27219: GO 27452
// if factoryWaypoints >= factory then
27221: LD_EXP 79
27225: PUSH
27226: LD_VAR 0 2
27230: GREATEREQUAL
27231: IFFALSE 27452
// if factoryWaypoints [ factory ] then
27233: LD_EXP 79
27237: PUSH
27238: LD_VAR 0 2
27242: ARRAY
27243: IFFALSE 27452
// begin if GetControl ( vehicle ) = control_manual then
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 263
27254: PUSH
27255: LD_INT 1
27257: EQUAL
27258: IFFALSE 27339
// begin driver := IsDrivenBy ( vehicle ) ;
27260: LD_ADDR_VAR 0 4
27264: PUSH
27265: LD_VAR 0 1
27269: PPUSH
27270: CALL_OW 311
27274: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27275: LD_VAR 0 4
27279: PPUSH
27280: LD_EXP 79
27284: PUSH
27285: LD_VAR 0 2
27289: ARRAY
27290: PUSH
27291: LD_INT 3
27293: ARRAY
27294: PPUSH
27295: LD_EXP 79
27299: PUSH
27300: LD_VAR 0 2
27304: ARRAY
27305: PUSH
27306: LD_INT 4
27308: ARRAY
27309: PPUSH
27310: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27314: LD_VAR 0 4
27318: PPUSH
27319: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27323: LD_VAR 0 4
27327: PPUSH
27328: LD_VAR 0 2
27332: PPUSH
27333: CALL_OW 180
// end else
27337: GO 27452
// if GetControl ( vehicle ) = control_remote then
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 263
27348: PUSH
27349: LD_INT 2
27351: EQUAL
27352: IFFALSE 27413
// begin wait ( 0 0$2 ) ;
27354: LD_INT 70
27356: PPUSH
27357: CALL_OW 67
// if Connect ( vehicle ) then
27361: LD_VAR 0 1
27365: PPUSH
27366: CALL 39476 0 1
27370: IFFALSE 27411
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27372: LD_VAR 0 1
27376: PPUSH
27377: LD_EXP 79
27381: PUSH
27382: LD_VAR 0 2
27386: ARRAY
27387: PUSH
27388: LD_INT 3
27390: ARRAY
27391: PPUSH
27392: LD_EXP 79
27396: PUSH
27397: LD_VAR 0 2
27401: ARRAY
27402: PUSH
27403: LD_INT 4
27405: ARRAY
27406: PPUSH
27407: CALL_OW 171
// end else
27411: GO 27452
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_EXP 79
27422: PUSH
27423: LD_VAR 0 2
27427: ARRAY
27428: PUSH
27429: LD_INT 3
27431: ARRAY
27432: PPUSH
27433: LD_EXP 79
27437: PUSH
27438: LD_VAR 0 2
27442: ARRAY
27443: PUSH
27444: LD_INT 4
27446: ARRAY
27447: PPUSH
27448: CALL_OW 171
// end ; end ;
27452: LD_VAR 0 3
27456: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27457: LD_INT 0
27459: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27460: LD_VAR 0 1
27464: PUSH
27465: LD_INT 250
27467: EQUAL
27468: PUSH
27469: LD_VAR 0 2
27473: PPUSH
27474: CALL_OW 264
27478: PUSH
27479: LD_INT 81
27481: EQUAL
27482: AND
27483: IFFALSE 27504
// MinerPlaceMine ( unit , x , y ) ;
27485: LD_VAR 0 2
27489: PPUSH
27490: LD_VAR 0 4
27494: PPUSH
27495: LD_VAR 0 5
27499: PPUSH
27500: CALL 29889 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27504: LD_VAR 0 1
27508: PUSH
27509: LD_INT 251
27511: EQUAL
27512: PUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: CALL_OW 264
27522: PUSH
27523: LD_INT 81
27525: EQUAL
27526: AND
27527: IFFALSE 27548
// MinerDetonateMine ( unit , x , y ) ;
27529: LD_VAR 0 2
27533: PPUSH
27534: LD_VAR 0 4
27538: PPUSH
27539: LD_VAR 0 5
27543: PPUSH
27544: CALL 30164 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 252
27555: EQUAL
27556: PUSH
27557: LD_VAR 0 2
27561: PPUSH
27562: CALL_OW 264
27566: PUSH
27567: LD_INT 81
27569: EQUAL
27570: AND
27571: IFFALSE 27592
// MinerCreateMinefield ( unit , x , y ) ;
27573: LD_VAR 0 2
27577: PPUSH
27578: LD_VAR 0 4
27582: PPUSH
27583: LD_VAR 0 5
27587: PPUSH
27588: CALL 30581 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 253
27599: EQUAL
27600: PUSH
27601: LD_VAR 0 2
27605: PPUSH
27606: CALL_OW 257
27610: PUSH
27611: LD_INT 5
27613: EQUAL
27614: AND
27615: IFFALSE 27636
// ComBinocular ( unit , x , y ) ;
27617: LD_VAR 0 2
27621: PPUSH
27622: LD_VAR 0 4
27626: PPUSH
27627: LD_VAR 0 5
27631: PPUSH
27632: CALL 30950 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27636: LD_VAR 0 1
27640: PUSH
27641: LD_INT 254
27643: EQUAL
27644: PUSH
27645: LD_VAR 0 2
27649: PPUSH
27650: CALL_OW 264
27654: PUSH
27655: LD_INT 99
27657: EQUAL
27658: AND
27659: PUSH
27660: LD_VAR 0 3
27664: PPUSH
27665: CALL_OW 263
27669: PUSH
27670: LD_INT 3
27672: EQUAL
27673: AND
27674: IFFALSE 27690
// HackDestroyVehicle ( unit , selectedUnit ) ;
27676: LD_VAR 0 2
27680: PPUSH
27681: LD_VAR 0 3
27685: PPUSH
27686: CALL 29253 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27690: LD_VAR 0 1
27694: PUSH
27695: LD_INT 255
27697: EQUAL
27698: PUSH
27699: LD_VAR 0 2
27703: PPUSH
27704: CALL_OW 264
27708: PUSH
27709: LD_INT 14
27711: PUSH
27712: LD_INT 53
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: IN
27719: AND
27720: PUSH
27721: LD_VAR 0 4
27725: PPUSH
27726: LD_VAR 0 5
27730: PPUSH
27731: CALL_OW 488
27735: AND
27736: IFFALSE 27760
// CutTreeXYR ( unit , x , y , 12 ) ;
27738: LD_VAR 0 2
27742: PPUSH
27743: LD_VAR 0 4
27747: PPUSH
27748: LD_VAR 0 5
27752: PPUSH
27753: LD_INT 12
27755: PPUSH
27756: CALL 27823 0 4
// if cmd = 256 then
27760: LD_VAR 0 1
27764: PUSH
27765: LD_INT 256
27767: EQUAL
27768: IFFALSE 27789
// SetFactoryWaypoint ( unit , x , y ) ;
27770: LD_VAR 0 2
27774: PPUSH
27775: LD_VAR 0 4
27779: PPUSH
27780: LD_VAR 0 5
27784: PPUSH
27785: CALL 25770 0 3
// if cmd = 257 then
27789: LD_VAR 0 1
27793: PUSH
27794: LD_INT 257
27796: EQUAL
27797: IFFALSE 27818
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_VAR 0 4
27808: PPUSH
27809: LD_VAR 0 5
27813: PPUSH
27814: CALL 26132 0 3
// end ;
27818: LD_VAR 0 6
27822: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
27827: PPUSH
27828: PPUSH
27829: PPUSH
27830: PPUSH
27831: PPUSH
27832: PPUSH
27833: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27834: LD_VAR 0 1
27838: NOT
27839: PUSH
27840: LD_VAR 0 2
27844: PPUSH
27845: LD_VAR 0 3
27849: PPUSH
27850: CALL_OW 488
27854: NOT
27855: OR
27856: PUSH
27857: LD_VAR 0 4
27861: NOT
27862: OR
27863: IFFALSE 27867
// exit ;
27865: GO 28207
// list := [ ] ;
27867: LD_ADDR_VAR 0 13
27871: PUSH
27872: EMPTY
27873: ST_TO_ADDR
// if x - r < 0 then
27874: LD_VAR 0 2
27878: PUSH
27879: LD_VAR 0 4
27883: MINUS
27884: PUSH
27885: LD_INT 0
27887: LESS
27888: IFFALSE 27900
// min_x := 0 else
27890: LD_ADDR_VAR 0 7
27894: PUSH
27895: LD_INT 0
27897: ST_TO_ADDR
27898: GO 27916
// min_x := x - r ;
27900: LD_ADDR_VAR 0 7
27904: PUSH
27905: LD_VAR 0 2
27909: PUSH
27910: LD_VAR 0 4
27914: MINUS
27915: ST_TO_ADDR
// if y - r < 0 then
27916: LD_VAR 0 3
27920: PUSH
27921: LD_VAR 0 4
27925: MINUS
27926: PUSH
27927: LD_INT 0
27929: LESS
27930: IFFALSE 27942
// min_y := 0 else
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: LD_INT 0
27939: ST_TO_ADDR
27940: GO 27958
// min_y := y - r ;
27942: LD_ADDR_VAR 0 8
27946: PUSH
27947: LD_VAR 0 3
27951: PUSH
27952: LD_VAR 0 4
27956: MINUS
27957: ST_TO_ADDR
// max_x := x + r ;
27958: LD_ADDR_VAR 0 9
27962: PUSH
27963: LD_VAR 0 2
27967: PUSH
27968: LD_VAR 0 4
27972: PLUS
27973: ST_TO_ADDR
// max_y := y + r ;
27974: LD_ADDR_VAR 0 10
27978: PUSH
27979: LD_VAR 0 3
27983: PUSH
27984: LD_VAR 0 4
27988: PLUS
27989: ST_TO_ADDR
// for _x = min_x to max_x do
27990: LD_ADDR_VAR 0 11
27994: PUSH
27995: DOUBLE
27996: LD_VAR 0 7
28000: DEC
28001: ST_TO_ADDR
28002: LD_VAR 0 9
28006: PUSH
28007: FOR_TO
28008: IFFALSE 28125
// for _y = min_y to max_y do
28010: LD_ADDR_VAR 0 12
28014: PUSH
28015: DOUBLE
28016: LD_VAR 0 8
28020: DEC
28021: ST_TO_ADDR
28022: LD_VAR 0 10
28026: PUSH
28027: FOR_TO
28028: IFFALSE 28121
// begin if not ValidHex ( _x , _y ) then
28030: LD_VAR 0 11
28034: PPUSH
28035: LD_VAR 0 12
28039: PPUSH
28040: CALL_OW 488
28044: NOT
28045: IFFALSE 28049
// continue ;
28047: GO 28027
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28049: LD_VAR 0 11
28053: PPUSH
28054: LD_VAR 0 12
28058: PPUSH
28059: CALL_OW 351
28063: PUSH
28064: LD_VAR 0 11
28068: PPUSH
28069: LD_VAR 0 12
28073: PPUSH
28074: CALL_OW 554
28078: AND
28079: IFFALSE 28119
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28081: LD_ADDR_VAR 0 13
28085: PUSH
28086: LD_VAR 0 13
28090: PPUSH
28091: LD_VAR 0 13
28095: PUSH
28096: LD_INT 1
28098: PLUS
28099: PPUSH
28100: LD_VAR 0 11
28104: PUSH
28105: LD_VAR 0 12
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PPUSH
28114: CALL_OW 2
28118: ST_TO_ADDR
// end ;
28119: GO 28027
28121: POP
28122: POP
28123: GO 28007
28125: POP
28126: POP
// if not list then
28127: LD_VAR 0 13
28131: NOT
28132: IFFALSE 28136
// exit ;
28134: GO 28207
// for i in list do
28136: LD_ADDR_VAR 0 6
28140: PUSH
28141: LD_VAR 0 13
28145: PUSH
28146: FOR_IN
28147: IFFALSE 28205
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_STRING M
28156: PUSH
28157: LD_VAR 0 6
28161: PUSH
28162: LD_INT 1
28164: ARRAY
28165: PUSH
28166: LD_VAR 0 6
28170: PUSH
28171: LD_INT 2
28173: ARRAY
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: PPUSH
28199: CALL_OW 447
28203: GO 28146
28205: POP
28206: POP
// end ;
28207: LD_VAR 0 5
28211: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28212: LD_EXP 82
28216: NOT
28217: IFFALSE 28267
28219: GO 28221
28221: DISABLE
// begin initHack := true ;
28222: LD_ADDR_EXP 82
28226: PUSH
28227: LD_INT 1
28229: ST_TO_ADDR
// hackTanks := [ ] ;
28230: LD_ADDR_EXP 83
28234: PUSH
28235: EMPTY
28236: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28237: LD_ADDR_EXP 84
28241: PUSH
28242: EMPTY
28243: ST_TO_ADDR
// hackLimit := 3 ;
28244: LD_ADDR_EXP 85
28248: PUSH
28249: LD_INT 3
28251: ST_TO_ADDR
// hackDist := 12 ;
28252: LD_ADDR_EXP 86
28256: PUSH
28257: LD_INT 12
28259: ST_TO_ADDR
// hackCounter := [ ] ;
28260: LD_ADDR_EXP 87
28264: PUSH
28265: EMPTY
28266: ST_TO_ADDR
// end ;
28267: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28268: LD_EXP 82
28272: PUSH
28273: LD_INT 34
28275: PUSH
28276: LD_INT 99
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PPUSH
28283: CALL_OW 69
28287: AND
28288: IFFALSE 28541
28290: GO 28292
28292: DISABLE
28293: LD_INT 0
28295: PPUSH
28296: PPUSH
// begin enable ;
28297: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28298: LD_ADDR_VAR 0 1
28302: PUSH
28303: LD_INT 34
28305: PUSH
28306: LD_INT 99
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PPUSH
28313: CALL_OW 69
28317: PUSH
28318: FOR_IN
28319: IFFALSE 28539
// begin if not i in hackTanks then
28321: LD_VAR 0 1
28325: PUSH
28326: LD_EXP 83
28330: IN
28331: NOT
28332: IFFALSE 28415
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28334: LD_ADDR_EXP 83
28338: PUSH
28339: LD_EXP 83
28343: PPUSH
28344: LD_EXP 83
28348: PUSH
28349: LD_INT 1
28351: PLUS
28352: PPUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 1
28362: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28363: LD_ADDR_EXP 84
28367: PUSH
28368: LD_EXP 84
28372: PPUSH
28373: LD_EXP 84
28377: PUSH
28378: LD_INT 1
28380: PLUS
28381: PPUSH
28382: EMPTY
28383: PPUSH
28384: CALL_OW 1
28388: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28389: LD_ADDR_EXP 87
28393: PUSH
28394: LD_EXP 87
28398: PPUSH
28399: LD_EXP 87
28403: PUSH
28404: LD_INT 1
28406: PLUS
28407: PPUSH
28408: EMPTY
28409: PPUSH
28410: CALL_OW 1
28414: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 302
28424: NOT
28425: IFFALSE 28438
// begin HackUnlinkAll ( i ) ;
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL 28544 0 1
// continue ;
28436: GO 28318
// end ; HackCheckCapturedStatus ( i ) ;
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL 28987 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28447: LD_ADDR_VAR 0 2
28451: PUSH
28452: LD_INT 81
28454: PUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL_OW 255
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 33
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 91
28481: PUSH
28482: LD_VAR 0 1
28486: PUSH
28487: LD_EXP 86
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 50
28499: PUSH
28500: EMPTY
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: PPUSH
28509: CALL_OW 69
28513: ST_TO_ADDR
// if not tmp then
28514: LD_VAR 0 2
28518: NOT
28519: IFFALSE 28523
// continue ;
28521: GO 28318
// HackLink ( i , tmp ) ;
28523: LD_VAR 0 1
28527: PPUSH
28528: LD_VAR 0 2
28532: PPUSH
28533: CALL 28680 0 2
// end ;
28537: GO 28318
28539: POP
28540: POP
// end ;
28541: PPOPN 2
28543: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28544: LD_INT 0
28546: PPUSH
28547: PPUSH
28548: PPUSH
// if not hack in hackTanks then
28549: LD_VAR 0 1
28553: PUSH
28554: LD_EXP 83
28558: IN
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28675
// index := GetElementIndex ( hackTanks , hack ) ;
28564: LD_ADDR_VAR 0 4
28568: PUSH
28569: LD_EXP 83
28573: PPUSH
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL 36292 0 2
28583: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28584: LD_EXP 84
28588: PUSH
28589: LD_VAR 0 4
28593: ARRAY
28594: IFFALSE 28675
// begin for i in hackTanksCaptured [ index ] do
28596: LD_ADDR_VAR 0 3
28600: PUSH
28601: LD_EXP 84
28605: PUSH
28606: LD_VAR 0 4
28610: ARRAY
28611: PUSH
28612: FOR_IN
28613: IFFALSE 28639
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28615: LD_VAR 0 3
28619: PUSH
28620: LD_INT 1
28622: ARRAY
28623: PPUSH
28624: LD_VAR 0 3
28628: PUSH
28629: LD_INT 2
28631: ARRAY
28632: PPUSH
28633: CALL_OW 235
28637: GO 28612
28639: POP
28640: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28641: LD_ADDR_EXP 84
28645: PUSH
28646: LD_EXP 84
28650: PPUSH
28651: LD_VAR 0 4
28655: PPUSH
28656: EMPTY
28657: PPUSH
28658: CALL_OW 1
28662: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28663: LD_VAR 0 1
28667: PPUSH
28668: LD_INT 0
28670: PPUSH
28671: CALL_OW 505
// end ; end ;
28675: LD_VAR 0 2
28679: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28680: LD_INT 0
28682: PPUSH
28683: PPUSH
28684: PPUSH
// if not hack in hackTanks or not vehicles then
28685: LD_VAR 0 1
28689: PUSH
28690: LD_EXP 83
28694: IN
28695: NOT
28696: PUSH
28697: LD_VAR 0 2
28701: NOT
28702: OR
28703: IFFALSE 28707
// exit ;
28705: GO 28982
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28707: LD_ADDR_VAR 0 2
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: LD_VAR 0 2
28721: PPUSH
28722: LD_INT 1
28724: PPUSH
28725: LD_INT 1
28727: PPUSH
28728: CALL 36942 0 4
28732: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_EXP 83
28742: PPUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL 36292 0 2
28752: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28753: LD_EXP 84
28757: PUSH
28758: LD_VAR 0 5
28762: ARRAY
28763: PUSH
28764: LD_EXP 85
28768: LESS
28769: IFFALSE 28958
// begin for i := 1 to vehicles do
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: DOUBLE
28777: LD_INT 1
28779: DEC
28780: ST_TO_ADDR
28781: LD_VAR 0 2
28785: PUSH
28786: FOR_TO
28787: IFFALSE 28956
// begin if hackTanksCaptured [ index ] = hackLimit then
28789: LD_EXP 84
28793: PUSH
28794: LD_VAR 0 5
28798: ARRAY
28799: PUSH
28800: LD_EXP 85
28804: EQUAL
28805: IFFALSE 28809
// break ;
28807: GO 28956
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28809: LD_ADDR_EXP 87
28813: PUSH
28814: LD_EXP 87
28818: PPUSH
28819: LD_VAR 0 5
28823: PPUSH
28824: LD_EXP 87
28828: PUSH
28829: LD_VAR 0 5
28833: ARRAY
28834: PUSH
28835: LD_INT 1
28837: PLUS
28838: PPUSH
28839: CALL_OW 1
28843: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28844: LD_ADDR_EXP 84
28848: PUSH
28849: LD_EXP 84
28853: PPUSH
28854: LD_VAR 0 5
28858: PUSH
28859: LD_EXP 84
28863: PUSH
28864: LD_VAR 0 5
28868: ARRAY
28869: PUSH
28870: LD_INT 1
28872: PLUS
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: LD_VAR 0 2
28882: PUSH
28883: LD_VAR 0 4
28887: ARRAY
28888: PUSH
28889: LD_VAR 0 2
28893: PUSH
28894: LD_VAR 0 4
28898: ARRAY
28899: PPUSH
28900: CALL_OW 255
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PPUSH
28909: CALL 36507 0 3
28913: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28914: LD_VAR 0 2
28918: PUSH
28919: LD_VAR 0 4
28923: ARRAY
28924: PPUSH
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 255
28934: PPUSH
28935: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28939: LD_VAR 0 2
28943: PUSH
28944: LD_VAR 0 4
28948: ARRAY
28949: PPUSH
28950: CALL_OW 141
// end ;
28954: GO 28786
28956: POP
28957: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_EXP 84
28967: PUSH
28968: LD_VAR 0 5
28972: ARRAY
28973: PUSH
28974: LD_INT 0
28976: PLUS
28977: PPUSH
28978: CALL_OW 505
// end ;
28982: LD_VAR 0 3
28986: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
// if not hack in hackTanks then
28993: LD_VAR 0 1
28997: PUSH
28998: LD_EXP 83
29002: IN
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29248
// index := GetElementIndex ( hackTanks , hack ) ;
29008: LD_ADDR_VAR 0 4
29012: PUSH
29013: LD_EXP 83
29017: PPUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: CALL 36292 0 2
29027: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: DOUBLE
29034: LD_EXP 84
29038: PUSH
29039: LD_VAR 0 4
29043: ARRAY
29044: INC
29045: ST_TO_ADDR
29046: LD_INT 1
29048: PUSH
29049: FOR_DOWNTO
29050: IFFALSE 29222
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29052: LD_ADDR_VAR 0 5
29056: PUSH
29057: LD_EXP 84
29061: PUSH
29062: LD_VAR 0 4
29066: ARRAY
29067: PUSH
29068: LD_VAR 0 3
29072: ARRAY
29073: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29074: LD_VAR 0 5
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: PPUSH
29083: CALL_OW 302
29087: NOT
29088: PUSH
29089: LD_VAR 0 5
29093: PUSH
29094: LD_INT 1
29096: ARRAY
29097: PPUSH
29098: CALL_OW 255
29102: PUSH
29103: LD_VAR 0 1
29107: PPUSH
29108: CALL_OW 255
29112: NONEQUAL
29113: OR
29114: IFFALSE 29220
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29116: LD_VAR 0 5
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: PPUSH
29125: CALL_OW 305
29129: PUSH
29130: LD_VAR 0 5
29134: PUSH
29135: LD_INT 1
29137: ARRAY
29138: PPUSH
29139: CALL_OW 255
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: CALL_OW 255
29153: EQUAL
29154: AND
29155: IFFALSE 29179
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29157: LD_VAR 0 5
29161: PUSH
29162: LD_INT 1
29164: ARRAY
29165: PPUSH
29166: LD_VAR 0 5
29170: PUSH
29171: LD_INT 2
29173: ARRAY
29174: PPUSH
29175: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29179: LD_ADDR_EXP 84
29183: PUSH
29184: LD_EXP 84
29188: PPUSH
29189: LD_VAR 0 4
29193: PPUSH
29194: LD_EXP 84
29198: PUSH
29199: LD_VAR 0 4
29203: ARRAY
29204: PPUSH
29205: LD_VAR 0 3
29209: PPUSH
29210: CALL_OW 3
29214: PPUSH
29215: CALL_OW 1
29219: ST_TO_ADDR
// end ; end ;
29220: GO 29049
29222: POP
29223: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_EXP 84
29233: PUSH
29234: LD_VAR 0 4
29238: ARRAY
29239: PUSH
29240: LD_INT 0
29242: PLUS
29243: PPUSH
29244: CALL_OW 505
// end ;
29248: LD_VAR 0 2
29252: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29253: LD_INT 0
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
// if not hack in hackTanks then
29259: LD_VAR 0 1
29263: PUSH
29264: LD_EXP 83
29268: IN
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29359
// index := GetElementIndex ( hackTanks , hack ) ;
29274: LD_ADDR_VAR 0 5
29278: PUSH
29279: LD_EXP 83
29283: PPUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL 36292 0 2
29293: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29294: LD_ADDR_VAR 0 4
29298: PUSH
29299: DOUBLE
29300: LD_INT 1
29302: DEC
29303: ST_TO_ADDR
29304: LD_EXP 84
29308: PUSH
29309: LD_VAR 0 5
29313: ARRAY
29314: PUSH
29315: FOR_TO
29316: IFFALSE 29357
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29318: LD_EXP 84
29322: PUSH
29323: LD_VAR 0 5
29327: ARRAY
29328: PUSH
29329: LD_VAR 0 4
29333: ARRAY
29334: PUSH
29335: LD_INT 1
29337: ARRAY
29338: PUSH
29339: LD_VAR 0 2
29343: EQUAL
29344: IFFALSE 29355
// KillUnit ( vehicle ) ;
29346: LD_VAR 0 2
29350: PPUSH
29351: CALL_OW 66
29355: GO 29315
29357: POP
29358: POP
// end ;
29359: LD_VAR 0 3
29363: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29364: LD_EXP 88
29368: NOT
29369: IFFALSE 29404
29371: GO 29373
29373: DISABLE
// begin initMiner := true ;
29374: LD_ADDR_EXP 88
29378: PUSH
29379: LD_INT 1
29381: ST_TO_ADDR
// minersList := [ ] ;
29382: LD_ADDR_EXP 89
29386: PUSH
29387: EMPTY
29388: ST_TO_ADDR
// minerMinesList := [ ] ;
29389: LD_ADDR_EXP 90
29393: PUSH
29394: EMPTY
29395: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29396: LD_ADDR_EXP 91
29400: PUSH
29401: LD_INT 5
29403: ST_TO_ADDR
// end ;
29404: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29405: LD_EXP 88
29409: PUSH
29410: LD_INT 34
29412: PUSH
29413: LD_INT 81
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PPUSH
29420: CALL_OW 69
29424: AND
29425: IFFALSE 29886
29427: GO 29429
29429: DISABLE
29430: LD_INT 0
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
// begin enable ;
29436: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29437: LD_ADDR_VAR 0 1
29441: PUSH
29442: LD_INT 34
29444: PUSH
29445: LD_INT 81
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PPUSH
29452: CALL_OW 69
29456: PUSH
29457: FOR_IN
29458: IFFALSE 29530
// begin if not i in minersList then
29460: LD_VAR 0 1
29464: PUSH
29465: LD_EXP 89
29469: IN
29470: NOT
29471: IFFALSE 29528
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29473: LD_ADDR_EXP 89
29477: PUSH
29478: LD_EXP 89
29482: PPUSH
29483: LD_EXP 89
29487: PUSH
29488: LD_INT 1
29490: PLUS
29491: PPUSH
29492: LD_VAR 0 1
29496: PPUSH
29497: CALL_OW 1
29501: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29502: LD_ADDR_EXP 90
29506: PUSH
29507: LD_EXP 90
29511: PPUSH
29512: LD_EXP 90
29516: PUSH
29517: LD_INT 1
29519: PLUS
29520: PPUSH
29521: EMPTY
29522: PPUSH
29523: CALL_OW 1
29527: ST_TO_ADDR
// end end ;
29528: GO 29457
29530: POP
29531: POP
// for i := minerMinesList downto 1 do
29532: LD_ADDR_VAR 0 1
29536: PUSH
29537: DOUBLE
29538: LD_EXP 90
29542: INC
29543: ST_TO_ADDR
29544: LD_INT 1
29546: PUSH
29547: FOR_DOWNTO
29548: IFFALSE 29884
// begin if IsLive ( minersList [ i ] ) then
29550: LD_EXP 89
29554: PUSH
29555: LD_VAR 0 1
29559: ARRAY
29560: PPUSH
29561: CALL_OW 300
29565: IFFALSE 29593
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29567: LD_EXP 89
29571: PUSH
29572: LD_VAR 0 1
29576: ARRAY
29577: PPUSH
29578: LD_EXP 90
29582: PUSH
29583: LD_VAR 0 1
29587: ARRAY
29588: PPUSH
29589: CALL_OW 505
// if not minerMinesList [ i ] then
29593: LD_EXP 90
29597: PUSH
29598: LD_VAR 0 1
29602: ARRAY
29603: NOT
29604: IFFALSE 29608
// continue ;
29606: GO 29547
// for j := minerMinesList [ i ] downto 1 do
29608: LD_ADDR_VAR 0 2
29612: PUSH
29613: DOUBLE
29614: LD_EXP 90
29618: PUSH
29619: LD_VAR 0 1
29623: ARRAY
29624: INC
29625: ST_TO_ADDR
29626: LD_INT 1
29628: PUSH
29629: FOR_DOWNTO
29630: IFFALSE 29880
// begin side := GetSide ( minersList [ i ] ) ;
29632: LD_ADDR_VAR 0 3
29636: PUSH
29637: LD_EXP 89
29641: PUSH
29642: LD_VAR 0 1
29646: ARRAY
29647: PPUSH
29648: CALL_OW 255
29652: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29653: LD_ADDR_VAR 0 4
29657: PUSH
29658: LD_EXP 90
29662: PUSH
29663: LD_VAR 0 1
29667: ARRAY
29668: PUSH
29669: LD_VAR 0 2
29673: ARRAY
29674: PUSH
29675: LD_INT 1
29677: ARRAY
29678: PPUSH
29679: LD_EXP 90
29683: PUSH
29684: LD_VAR 0 1
29688: ARRAY
29689: PUSH
29690: LD_VAR 0 2
29694: ARRAY
29695: PUSH
29696: LD_INT 2
29698: ARRAY
29699: PPUSH
29700: CALL_OW 428
29704: ST_TO_ADDR
// if not tmp then
29705: LD_VAR 0 4
29709: NOT
29710: IFFALSE 29714
// continue ;
29712: GO 29629
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29714: LD_VAR 0 4
29718: PUSH
29719: LD_INT 81
29721: PUSH
29722: LD_VAR 0 3
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: IN
29736: PUSH
29737: LD_EXP 90
29741: PUSH
29742: LD_VAR 0 1
29746: ARRAY
29747: PUSH
29748: LD_VAR 0 2
29752: ARRAY
29753: PUSH
29754: LD_INT 1
29756: ARRAY
29757: PPUSH
29758: LD_EXP 90
29762: PUSH
29763: LD_VAR 0 1
29767: ARRAY
29768: PUSH
29769: LD_VAR 0 2
29773: ARRAY
29774: PUSH
29775: LD_INT 2
29777: ARRAY
29778: PPUSH
29779: CALL_OW 458
29783: AND
29784: IFFALSE 29878
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29786: LD_EXP 90
29790: PUSH
29791: LD_VAR 0 1
29795: ARRAY
29796: PUSH
29797: LD_VAR 0 2
29801: ARRAY
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: PPUSH
29807: LD_EXP 90
29811: PUSH
29812: LD_VAR 0 1
29816: ARRAY
29817: PUSH
29818: LD_VAR 0 2
29822: ARRAY
29823: PUSH
29824: LD_INT 2
29826: ARRAY
29827: PPUSH
29828: LD_VAR 0 3
29832: PPUSH
29833: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29837: LD_ADDR_EXP 90
29841: PUSH
29842: LD_EXP 90
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: LD_EXP 90
29856: PUSH
29857: LD_VAR 0 1
29861: ARRAY
29862: PPUSH
29863: LD_VAR 0 2
29867: PPUSH
29868: CALL_OW 3
29872: PPUSH
29873: CALL_OW 1
29877: ST_TO_ADDR
// end ; end ;
29878: GO 29629
29880: POP
29881: POP
// end ;
29882: GO 29547
29884: POP
29885: POP
// end ;
29886: PPOPN 4
29888: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29889: LD_INT 0
29891: PPUSH
29892: PPUSH
// result := false ;
29893: LD_ADDR_VAR 0 4
29897: PUSH
29898: LD_INT 0
29900: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29901: LD_VAR 0 1
29905: PPUSH
29906: CALL_OW 264
29910: PUSH
29911: LD_INT 81
29913: EQUAL
29914: NOT
29915: IFFALSE 29919
// exit ;
29917: GO 30159
// index := GetElementIndex ( minersList , unit ) ;
29919: LD_ADDR_VAR 0 5
29923: PUSH
29924: LD_EXP 89
29928: PPUSH
29929: LD_VAR 0 1
29933: PPUSH
29934: CALL 36292 0 2
29938: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29939: LD_EXP 90
29943: PUSH
29944: LD_VAR 0 5
29948: ARRAY
29949: PUSH
29950: LD_EXP 91
29954: GREATEREQUAL
29955: IFFALSE 29959
// exit ;
29957: GO 30159
// ComMoveXY ( unit , x , y ) ;
29959: LD_VAR 0 1
29963: PPUSH
29964: LD_VAR 0 2
29968: PPUSH
29969: LD_VAR 0 3
29973: PPUSH
29974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29978: LD_INT 35
29980: PPUSH
29981: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29985: LD_VAR 0 1
29989: PPUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: LD_VAR 0 3
29999: PPUSH
30000: CALL 67555 0 3
30004: NOT
30005: PUSH
30006: LD_VAR 0 1
30010: PPUSH
30011: CALL_OW 314
30015: AND
30016: IFFALSE 30020
// exit ;
30018: GO 30159
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_VAR 0 3
30029: PPUSH
30030: CALL_OW 428
30034: PUSH
30035: LD_VAR 0 1
30039: EQUAL
30040: PUSH
30041: LD_VAR 0 1
30045: PPUSH
30046: CALL_OW 314
30050: NOT
30051: AND
30052: IFFALSE 29978
// PlaySoundXY ( x , y , PlantMine ) ;
30054: LD_VAR 0 2
30058: PPUSH
30059: LD_VAR 0 3
30063: PPUSH
30064: LD_STRING PlantMine
30066: PPUSH
30067: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30071: LD_VAR 0 2
30075: PPUSH
30076: LD_VAR 0 3
30080: PPUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 255
30090: PPUSH
30091: LD_INT 0
30093: PPUSH
30094: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30098: LD_ADDR_EXP 90
30102: PUSH
30103: LD_EXP 90
30107: PPUSH
30108: LD_VAR 0 5
30112: PUSH
30113: LD_EXP 90
30117: PUSH
30118: LD_VAR 0 5
30122: ARRAY
30123: PUSH
30124: LD_INT 1
30126: PLUS
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: LD_VAR 0 2
30136: PUSH
30137: LD_VAR 0 3
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PPUSH
30146: CALL 36507 0 3
30150: ST_TO_ADDR
// result := true ;
30151: LD_ADDR_VAR 0 4
30155: PUSH
30156: LD_INT 1
30158: ST_TO_ADDR
// end ;
30159: LD_VAR 0 4
30163: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
30168: PPUSH
// if not unit in minersList then
30169: LD_VAR 0 1
30173: PUSH
30174: LD_EXP 89
30178: IN
30179: NOT
30180: IFFALSE 30184
// exit ;
30182: GO 30576
// index := GetElementIndex ( minersList , unit ) ;
30184: LD_ADDR_VAR 0 6
30188: PUSH
30189: LD_EXP 89
30193: PPUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL 36292 0 2
30203: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30204: LD_ADDR_VAR 0 5
30208: PUSH
30209: DOUBLE
30210: LD_EXP 90
30214: PUSH
30215: LD_VAR 0 6
30219: ARRAY
30220: INC
30221: ST_TO_ADDR
30222: LD_INT 1
30224: PUSH
30225: FOR_DOWNTO
30226: IFFALSE 30387
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30228: LD_EXP 90
30232: PUSH
30233: LD_VAR 0 6
30237: ARRAY
30238: PUSH
30239: LD_VAR 0 5
30243: ARRAY
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: PUSH
30249: LD_VAR 0 2
30253: EQUAL
30254: PUSH
30255: LD_EXP 90
30259: PUSH
30260: LD_VAR 0 6
30264: ARRAY
30265: PUSH
30266: LD_VAR 0 5
30270: ARRAY
30271: PUSH
30272: LD_INT 2
30274: ARRAY
30275: PUSH
30276: LD_VAR 0 3
30280: EQUAL
30281: AND
30282: IFFALSE 30385
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30284: LD_EXP 90
30288: PUSH
30289: LD_VAR 0 6
30293: ARRAY
30294: PUSH
30295: LD_VAR 0 5
30299: ARRAY
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_EXP 90
30309: PUSH
30310: LD_VAR 0 6
30314: ARRAY
30315: PUSH
30316: LD_VAR 0 5
30320: ARRAY
30321: PUSH
30322: LD_INT 2
30324: ARRAY
30325: PPUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 255
30335: PPUSH
30336: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30340: LD_ADDR_EXP 90
30344: PUSH
30345: LD_EXP 90
30349: PPUSH
30350: LD_VAR 0 6
30354: PPUSH
30355: LD_EXP 90
30359: PUSH
30360: LD_VAR 0 6
30364: ARRAY
30365: PPUSH
30366: LD_VAR 0 5
30370: PPUSH
30371: CALL_OW 3
30375: PPUSH
30376: CALL_OW 1
30380: ST_TO_ADDR
// exit ;
30381: POP
30382: POP
30383: GO 30576
// end ; end ;
30385: GO 30225
30387: POP
30388: POP
// for i := minerMinesList [ index ] downto 1 do
30389: LD_ADDR_VAR 0 5
30393: PUSH
30394: DOUBLE
30395: LD_EXP 90
30399: PUSH
30400: LD_VAR 0 6
30404: ARRAY
30405: INC
30406: ST_TO_ADDR
30407: LD_INT 1
30409: PUSH
30410: FOR_DOWNTO
30411: IFFALSE 30574
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30413: LD_EXP 90
30417: PUSH
30418: LD_VAR 0 6
30422: ARRAY
30423: PUSH
30424: LD_VAR 0 5
30428: ARRAY
30429: PUSH
30430: LD_INT 1
30432: ARRAY
30433: PPUSH
30434: LD_EXP 90
30438: PUSH
30439: LD_VAR 0 6
30443: ARRAY
30444: PUSH
30445: LD_VAR 0 5
30449: ARRAY
30450: PUSH
30451: LD_INT 2
30453: ARRAY
30454: PPUSH
30455: LD_VAR 0 2
30459: PPUSH
30460: LD_VAR 0 3
30464: PPUSH
30465: CALL_OW 298
30469: PUSH
30470: LD_INT 6
30472: LESS
30473: IFFALSE 30572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30475: LD_EXP 90
30479: PUSH
30480: LD_VAR 0 6
30484: ARRAY
30485: PUSH
30486: LD_VAR 0 5
30490: ARRAY
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: LD_EXP 90
30500: PUSH
30501: LD_VAR 0 6
30505: ARRAY
30506: PUSH
30507: LD_VAR 0 5
30511: ARRAY
30512: PUSH
30513: LD_INT 2
30515: ARRAY
30516: PPUSH
30517: LD_VAR 0 1
30521: PPUSH
30522: CALL_OW 255
30526: PPUSH
30527: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30531: LD_ADDR_EXP 90
30535: PUSH
30536: LD_EXP 90
30540: PPUSH
30541: LD_VAR 0 6
30545: PPUSH
30546: LD_EXP 90
30550: PUSH
30551: LD_VAR 0 6
30555: ARRAY
30556: PPUSH
30557: LD_VAR 0 5
30561: PPUSH
30562: CALL_OW 3
30566: PPUSH
30567: CALL_OW 1
30571: ST_TO_ADDR
// end ; end ;
30572: GO 30410
30574: POP
30575: POP
// end ;
30576: LD_VAR 0 4
30580: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
30587: PPUSH
30588: PPUSH
30589: PPUSH
30590: PPUSH
30591: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30592: LD_VAR 0 1
30596: PPUSH
30597: CALL_OW 264
30601: PUSH
30602: LD_INT 81
30604: EQUAL
30605: NOT
30606: PUSH
30607: LD_VAR 0 1
30611: PUSH
30612: LD_EXP 89
30616: IN
30617: NOT
30618: OR
30619: IFFALSE 30623
// exit ;
30621: GO 30945
// index := GetElementIndex ( minersList , unit ) ;
30623: LD_ADDR_VAR 0 6
30627: PUSH
30628: LD_EXP 89
30632: PPUSH
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL 36292 0 2
30642: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30643: LD_ADDR_VAR 0 8
30647: PUSH
30648: LD_EXP 91
30652: PUSH
30653: LD_EXP 90
30657: PUSH
30658: LD_VAR 0 6
30662: ARRAY
30663: MINUS
30664: ST_TO_ADDR
// if not minesFreeAmount then
30665: LD_VAR 0 8
30669: NOT
30670: IFFALSE 30674
// exit ;
30672: GO 30945
// tmp := [ ] ;
30674: LD_ADDR_VAR 0 7
30678: PUSH
30679: EMPTY
30680: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30681: LD_ADDR_VAR 0 5
30685: PUSH
30686: DOUBLE
30687: LD_INT 1
30689: DEC
30690: ST_TO_ADDR
30691: LD_VAR 0 8
30695: PUSH
30696: FOR_TO
30697: IFFALSE 30892
// begin _d := rand ( 0 , 5 ) ;
30699: LD_ADDR_VAR 0 11
30703: PUSH
30704: LD_INT 0
30706: PPUSH
30707: LD_INT 5
30709: PPUSH
30710: CALL_OW 12
30714: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30715: LD_ADDR_VAR 0 12
30719: PUSH
30720: LD_INT 2
30722: PPUSH
30723: LD_INT 6
30725: PPUSH
30726: CALL_OW 12
30730: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30731: LD_ADDR_VAR 0 9
30735: PUSH
30736: LD_VAR 0 2
30740: PPUSH
30741: LD_VAR 0 11
30745: PPUSH
30746: LD_VAR 0 12
30750: PPUSH
30751: CALL_OW 272
30755: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30756: LD_ADDR_VAR 0 10
30760: PUSH
30761: LD_VAR 0 3
30765: PPUSH
30766: LD_VAR 0 11
30770: PPUSH
30771: LD_VAR 0 12
30775: PPUSH
30776: CALL_OW 273
30780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30781: LD_VAR 0 9
30785: PPUSH
30786: LD_VAR 0 10
30790: PPUSH
30791: CALL_OW 488
30795: PUSH
30796: LD_VAR 0 9
30800: PUSH
30801: LD_VAR 0 10
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_VAR 0 7
30814: IN
30815: NOT
30816: AND
30817: PUSH
30818: LD_VAR 0 9
30822: PPUSH
30823: LD_VAR 0 10
30827: PPUSH
30828: CALL_OW 458
30832: NOT
30833: AND
30834: IFFALSE 30876
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30836: LD_ADDR_VAR 0 7
30840: PUSH
30841: LD_VAR 0 7
30845: PPUSH
30846: LD_VAR 0 7
30850: PUSH
30851: LD_INT 1
30853: PLUS
30854: PPUSH
30855: LD_VAR 0 9
30859: PUSH
30860: LD_VAR 0 10
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PPUSH
30869: CALL_OW 1
30873: ST_TO_ADDR
30874: GO 30890
// i := i - 1 ;
30876: LD_ADDR_VAR 0 5
30880: PUSH
30881: LD_VAR 0 5
30885: PUSH
30886: LD_INT 1
30888: MINUS
30889: ST_TO_ADDR
// end ;
30890: GO 30696
30892: POP
30893: POP
// for i in tmp do
30894: LD_ADDR_VAR 0 5
30898: PUSH
30899: LD_VAR 0 7
30903: PUSH
30904: FOR_IN
30905: IFFALSE 30943
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30907: LD_VAR 0 1
30911: PPUSH
30912: LD_VAR 0 5
30916: PUSH
30917: LD_INT 1
30919: ARRAY
30920: PPUSH
30921: LD_VAR 0 5
30925: PUSH
30926: LD_INT 2
30928: ARRAY
30929: PPUSH
30930: CALL 29889 0 3
30934: NOT
30935: IFFALSE 30941
// exit ;
30937: POP
30938: POP
30939: GO 30945
30941: GO 30904
30943: POP
30944: POP
// end ;
30945: LD_VAR 0 4
30949: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30950: LD_INT 0
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
// if not GetClass ( unit ) = class_sniper then
30959: LD_VAR 0 1
30963: PPUSH
30964: CALL_OW 257
30968: PUSH
30969: LD_INT 5
30971: EQUAL
30972: NOT
30973: IFFALSE 30977
// exit ;
30975: GO 31365
// dist := 8 ;
30977: LD_ADDR_VAR 0 5
30981: PUSH
30982: LD_INT 8
30984: ST_TO_ADDR
// viewRange := 12 ;
30985: LD_ADDR_VAR 0 7
30989: PUSH
30990: LD_INT 12
30992: ST_TO_ADDR
// side := GetSide ( unit ) ;
30993: LD_ADDR_VAR 0 6
30997: PUSH
30998: LD_VAR 0 1
31002: PPUSH
31003: CALL_OW 255
31007: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31008: LD_INT 61
31010: PPUSH
31011: LD_VAR 0 6
31015: PPUSH
31016: CALL_OW 321
31020: PUSH
31021: LD_INT 2
31023: EQUAL
31024: IFFALSE 31034
// viewRange := 16 ;
31026: LD_ADDR_VAR 0 7
31030: PUSH
31031: LD_INT 16
31033: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_VAR 0 2
31043: PPUSH
31044: LD_VAR 0 3
31048: PPUSH
31049: CALL_OW 297
31053: PUSH
31054: LD_VAR 0 5
31058: GREATER
31059: IFFALSE 31138
// begin ComMoveXY ( unit , x , y ) ;
31061: LD_VAR 0 1
31065: PPUSH
31066: LD_VAR 0 2
31070: PPUSH
31071: LD_VAR 0 3
31075: PPUSH
31076: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31080: LD_INT 35
31082: PPUSH
31083: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31087: LD_VAR 0 1
31091: PPUSH
31092: LD_VAR 0 2
31096: PPUSH
31097: LD_VAR 0 3
31101: PPUSH
31102: CALL 67555 0 3
31106: NOT
31107: IFFALSE 31111
// exit ;
31109: GO 31365
// until GetDistUnitXY ( unit , x , y ) < dist ;
31111: LD_VAR 0 1
31115: PPUSH
31116: LD_VAR 0 2
31120: PPUSH
31121: LD_VAR 0 3
31125: PPUSH
31126: CALL_OW 297
31130: PUSH
31131: LD_VAR 0 5
31135: LESS
31136: IFFALSE 31080
// end ; ComTurnXY ( unit , x , y ) ;
31138: LD_VAR 0 1
31142: PPUSH
31143: LD_VAR 0 2
31147: PPUSH
31148: LD_VAR 0 3
31152: PPUSH
31153: CALL_OW 118
// wait ( 5 ) ;
31157: LD_INT 5
31159: PPUSH
31160: CALL_OW 67
// _d := GetDir ( unit ) ;
31164: LD_ADDR_VAR 0 10
31168: PUSH
31169: LD_VAR 0 1
31173: PPUSH
31174: CALL_OW 254
31178: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31179: LD_ADDR_VAR 0 8
31183: PUSH
31184: LD_VAR 0 1
31188: PPUSH
31189: CALL_OW 250
31193: PPUSH
31194: LD_VAR 0 10
31198: PPUSH
31199: LD_VAR 0 5
31203: PPUSH
31204: CALL_OW 272
31208: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31209: LD_ADDR_VAR 0 9
31213: PUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 251
31223: PPUSH
31224: LD_VAR 0 10
31228: PPUSH
31229: LD_VAR 0 5
31233: PPUSH
31234: CALL_OW 273
31238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31239: LD_VAR 0 8
31243: PPUSH
31244: LD_VAR 0 9
31248: PPUSH
31249: CALL_OW 488
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31365
// ComAnimCustom ( unit , 1 ) ;
31258: LD_VAR 0 1
31262: PPUSH
31263: LD_INT 1
31265: PPUSH
31266: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31270: LD_VAR 0 8
31274: PPUSH
31275: LD_VAR 0 9
31279: PPUSH
31280: LD_VAR 0 6
31284: PPUSH
31285: LD_VAR 0 7
31289: PPUSH
31290: CALL_OW 330
// repeat wait ( 1 ) ;
31294: LD_INT 1
31296: PPUSH
31297: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 316
31310: PUSH
31311: LD_VAR 0 1
31315: PPUSH
31316: CALL_OW 314
31320: OR
31321: PUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL_OW 302
31331: NOT
31332: OR
31333: PUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 301
31343: OR
31344: IFFALSE 31294
// RemoveSeeing ( _x , _y , side ) ;
31346: LD_VAR 0 8
31350: PPUSH
31351: LD_VAR 0 9
31355: PPUSH
31356: LD_VAR 0 6
31360: PPUSH
31361: CALL_OW 331
// end ; end_of_file
31365: LD_VAR 0 4
31369: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
// if exist_mode then
31374: LD_VAR 0 2
31378: IFFALSE 31403
// unit := CreateCharacter ( prefix & ident ) else
31380: LD_ADDR_VAR 0 5
31384: PUSH
31385: LD_VAR 0 3
31389: PUSH
31390: LD_VAR 0 1
31394: STR
31395: PPUSH
31396: CALL_OW 34
31400: ST_TO_ADDR
31401: GO 31418
// unit := NewCharacter ( ident ) ;
31403: LD_ADDR_VAR 0 5
31407: PUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: CALL_OW 25
31417: ST_TO_ADDR
// result := unit ;
31418: LD_ADDR_VAR 0 4
31422: PUSH
31423: LD_VAR 0 5
31427: ST_TO_ADDR
// end ;
31428: LD_VAR 0 4
31432: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31433: LD_INT 0
31435: PPUSH
31436: PPUSH
// if not side or not nation then
31437: LD_VAR 0 1
31441: NOT
31442: PUSH
31443: LD_VAR 0 2
31447: NOT
31448: OR
31449: IFFALSE 31453
// exit ;
31451: GO 32221
// case nation of nation_american :
31453: LD_VAR 0 2
31457: PUSH
31458: LD_INT 1
31460: DOUBLE
31461: EQUAL
31462: IFTRUE 31466
31464: GO 31680
31466: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31467: LD_ADDR_VAR 0 4
31471: PUSH
31472: LD_INT 35
31474: PUSH
31475: LD_INT 45
31477: PUSH
31478: LD_INT 46
31480: PUSH
31481: LD_INT 47
31483: PUSH
31484: LD_INT 82
31486: PUSH
31487: LD_INT 83
31489: PUSH
31490: LD_INT 84
31492: PUSH
31493: LD_INT 85
31495: PUSH
31496: LD_INT 86
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: LD_INT 6
31507: PUSH
31508: LD_INT 15
31510: PUSH
31511: LD_INT 16
31513: PUSH
31514: LD_INT 7
31516: PUSH
31517: LD_INT 12
31519: PUSH
31520: LD_INT 13
31522: PUSH
31523: LD_INT 10
31525: PUSH
31526: LD_INT 14
31528: PUSH
31529: LD_INT 20
31531: PUSH
31532: LD_INT 21
31534: PUSH
31535: LD_INT 22
31537: PUSH
31538: LD_INT 25
31540: PUSH
31541: LD_INT 32
31543: PUSH
31544: LD_INT 27
31546: PUSH
31547: LD_INT 36
31549: PUSH
31550: LD_INT 69
31552: PUSH
31553: LD_INT 39
31555: PUSH
31556: LD_INT 34
31558: PUSH
31559: LD_INT 40
31561: PUSH
31562: LD_INT 48
31564: PUSH
31565: LD_INT 49
31567: PUSH
31568: LD_INT 50
31570: PUSH
31571: LD_INT 51
31573: PUSH
31574: LD_INT 52
31576: PUSH
31577: LD_INT 53
31579: PUSH
31580: LD_INT 54
31582: PUSH
31583: LD_INT 55
31585: PUSH
31586: LD_INT 56
31588: PUSH
31589: LD_INT 57
31591: PUSH
31592: LD_INT 58
31594: PUSH
31595: LD_INT 59
31597: PUSH
31598: LD_INT 60
31600: PUSH
31601: LD_INT 61
31603: PUSH
31604: LD_INT 62
31606: PUSH
31607: LD_INT 80
31609: PUSH
31610: LD_INT 82
31612: PUSH
31613: LD_INT 83
31615: PUSH
31616: LD_INT 84
31618: PUSH
31619: LD_INT 85
31621: PUSH
31622: LD_INT 86
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: ST_TO_ADDR
31678: GO 32145
31680: LD_INT 2
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31688
31686: GO 31914
31688: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31689: LD_ADDR_VAR 0 4
31693: PUSH
31694: LD_INT 35
31696: PUSH
31697: LD_INT 45
31699: PUSH
31700: LD_INT 46
31702: PUSH
31703: LD_INT 47
31705: PUSH
31706: LD_INT 82
31708: PUSH
31709: LD_INT 83
31711: PUSH
31712: LD_INT 84
31714: PUSH
31715: LD_INT 85
31717: PUSH
31718: LD_INT 87
31720: PUSH
31721: LD_INT 70
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: LD_INT 11
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 4
31735: PUSH
31736: LD_INT 5
31738: PUSH
31739: LD_INT 6
31741: PUSH
31742: LD_INT 15
31744: PUSH
31745: LD_INT 18
31747: PUSH
31748: LD_INT 7
31750: PUSH
31751: LD_INT 17
31753: PUSH
31754: LD_INT 8
31756: PUSH
31757: LD_INT 20
31759: PUSH
31760: LD_INT 21
31762: PUSH
31763: LD_INT 22
31765: PUSH
31766: LD_INT 72
31768: PUSH
31769: LD_INT 26
31771: PUSH
31772: LD_INT 69
31774: PUSH
31775: LD_INT 39
31777: PUSH
31778: LD_INT 40
31780: PUSH
31781: LD_INT 41
31783: PUSH
31784: LD_INT 42
31786: PUSH
31787: LD_INT 43
31789: PUSH
31790: LD_INT 48
31792: PUSH
31793: LD_INT 49
31795: PUSH
31796: LD_INT 50
31798: PUSH
31799: LD_INT 51
31801: PUSH
31802: LD_INT 52
31804: PUSH
31805: LD_INT 53
31807: PUSH
31808: LD_INT 54
31810: PUSH
31811: LD_INT 55
31813: PUSH
31814: LD_INT 56
31816: PUSH
31817: LD_INT 60
31819: PUSH
31820: LD_INT 61
31822: PUSH
31823: LD_INT 62
31825: PUSH
31826: LD_INT 66
31828: PUSH
31829: LD_INT 67
31831: PUSH
31832: LD_INT 68
31834: PUSH
31835: LD_INT 81
31837: PUSH
31838: LD_INT 82
31840: PUSH
31841: LD_INT 83
31843: PUSH
31844: LD_INT 84
31846: PUSH
31847: LD_INT 85
31849: PUSH
31850: LD_INT 87
31852: PUSH
31853: LD_INT 88
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: ST_TO_ADDR
31912: GO 32145
31914: LD_INT 3
31916: DOUBLE
31917: EQUAL
31918: IFTRUE 31922
31920: GO 32144
31922: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31923: LD_ADDR_VAR 0 4
31927: PUSH
31928: LD_INT 46
31930: PUSH
31931: LD_INT 47
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 82
31942: PUSH
31943: LD_INT 83
31945: PUSH
31946: LD_INT 84
31948: PUSH
31949: LD_INT 85
31951: PUSH
31952: LD_INT 86
31954: PUSH
31955: LD_INT 11
31957: PUSH
31958: LD_INT 9
31960: PUSH
31961: LD_INT 20
31963: PUSH
31964: LD_INT 19
31966: PUSH
31967: LD_INT 21
31969: PUSH
31970: LD_INT 24
31972: PUSH
31973: LD_INT 22
31975: PUSH
31976: LD_INT 25
31978: PUSH
31979: LD_INT 28
31981: PUSH
31982: LD_INT 29
31984: PUSH
31985: LD_INT 30
31987: PUSH
31988: LD_INT 31
31990: PUSH
31991: LD_INT 37
31993: PUSH
31994: LD_INT 38
31996: PUSH
31997: LD_INT 32
31999: PUSH
32000: LD_INT 27
32002: PUSH
32003: LD_INT 33
32005: PUSH
32006: LD_INT 69
32008: PUSH
32009: LD_INT 39
32011: PUSH
32012: LD_INT 34
32014: PUSH
32015: LD_INT 40
32017: PUSH
32018: LD_INT 71
32020: PUSH
32021: LD_INT 23
32023: PUSH
32024: LD_INT 44
32026: PUSH
32027: LD_INT 48
32029: PUSH
32030: LD_INT 49
32032: PUSH
32033: LD_INT 50
32035: PUSH
32036: LD_INT 51
32038: PUSH
32039: LD_INT 52
32041: PUSH
32042: LD_INT 53
32044: PUSH
32045: LD_INT 54
32047: PUSH
32048: LD_INT 55
32050: PUSH
32051: LD_INT 56
32053: PUSH
32054: LD_INT 57
32056: PUSH
32057: LD_INT 58
32059: PUSH
32060: LD_INT 59
32062: PUSH
32063: LD_INT 63
32065: PUSH
32066: LD_INT 64
32068: PUSH
32069: LD_INT 65
32071: PUSH
32072: LD_INT 82
32074: PUSH
32075: LD_INT 83
32077: PUSH
32078: LD_INT 84
32080: PUSH
32081: LD_INT 85
32083: PUSH
32084: LD_INT 86
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: ST_TO_ADDR
32142: GO 32145
32144: POP
// if state > - 1 and state < 3 then
32145: LD_VAR 0 3
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: GREATER
32154: PUSH
32155: LD_VAR 0 3
32159: PUSH
32160: LD_INT 3
32162: LESS
32163: AND
32164: IFFALSE 32221
// for i in result do
32166: LD_ADDR_VAR 0 5
32170: PUSH
32171: LD_VAR 0 4
32175: PUSH
32176: FOR_IN
32177: IFFALSE 32219
// if GetTech ( i , side ) <> state then
32179: LD_VAR 0 5
32183: PPUSH
32184: LD_VAR 0 1
32188: PPUSH
32189: CALL_OW 321
32193: PUSH
32194: LD_VAR 0 3
32198: NONEQUAL
32199: IFFALSE 32217
// result := result diff i ;
32201: LD_ADDR_VAR 0 4
32205: PUSH
32206: LD_VAR 0 4
32210: PUSH
32211: LD_VAR 0 5
32215: DIFF
32216: ST_TO_ADDR
32217: GO 32176
32219: POP
32220: POP
// end ;
32221: LD_VAR 0 4
32225: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32226: LD_INT 0
32228: PPUSH
32229: PPUSH
32230: PPUSH
// result := true ;
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: LD_INT 1
32238: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32239: LD_ADDR_VAR 0 5
32243: PUSH
32244: LD_VAR 0 2
32248: PPUSH
32249: CALL_OW 480
32253: ST_TO_ADDR
// if not tmp then
32254: LD_VAR 0 5
32258: NOT
32259: IFFALSE 32263
// exit ;
32261: GO 32312
// for i in tmp do
32263: LD_ADDR_VAR 0 4
32267: PUSH
32268: LD_VAR 0 5
32272: PUSH
32273: FOR_IN
32274: IFFALSE 32310
// if GetTech ( i , side ) <> state_researched then
32276: LD_VAR 0 4
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: CALL_OW 321
32290: PUSH
32291: LD_INT 2
32293: NONEQUAL
32294: IFFALSE 32308
// begin result := false ;
32296: LD_ADDR_VAR 0 3
32300: PUSH
32301: LD_INT 0
32303: ST_TO_ADDR
// exit ;
32304: POP
32305: POP
32306: GO 32312
// end ;
32308: GO 32273
32310: POP
32311: POP
// end ;
32312: LD_VAR 0 3
32316: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32317: LD_INT 0
32319: PPUSH
32320: PPUSH
32321: PPUSH
32322: PPUSH
32323: PPUSH
32324: PPUSH
32325: PPUSH
32326: PPUSH
32327: PPUSH
32328: PPUSH
32329: PPUSH
32330: PPUSH
32331: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32332: LD_VAR 0 1
32336: NOT
32337: PUSH
32338: LD_VAR 0 1
32342: PPUSH
32343: CALL_OW 257
32347: PUSH
32348: LD_INT 9
32350: NONEQUAL
32351: OR
32352: IFFALSE 32356
// exit ;
32354: GO 32929
// side := GetSide ( unit ) ;
32356: LD_ADDR_VAR 0 9
32360: PUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 255
32370: ST_TO_ADDR
// tech_space := tech_spacanom ;
32371: LD_ADDR_VAR 0 12
32375: PUSH
32376: LD_INT 29
32378: ST_TO_ADDR
// tech_time := tech_taurad ;
32379: LD_ADDR_VAR 0 13
32383: PUSH
32384: LD_INT 28
32386: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32387: LD_ADDR_VAR 0 11
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 310
32401: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32402: LD_VAR 0 11
32406: PPUSH
32407: CALL_OW 247
32411: PUSH
32412: LD_INT 2
32414: EQUAL
32415: IFFALSE 32419
// exit ;
32417: GO 32929
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32419: LD_ADDR_VAR 0 8
32423: PUSH
32424: LD_INT 81
32426: PUSH
32427: LD_VAR 0 9
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 21
32441: PUSH
32442: LD_INT 3
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 69
32461: ST_TO_ADDR
// if not tmp then
32462: LD_VAR 0 8
32466: NOT
32467: IFFALSE 32471
// exit ;
32469: GO 32929
// if in_unit then
32471: LD_VAR 0 11
32475: IFFALSE 32499
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32477: LD_ADDR_VAR 0 10
32481: PUSH
32482: LD_VAR 0 8
32486: PPUSH
32487: LD_VAR 0 11
32491: PPUSH
32492: CALL_OW 74
32496: ST_TO_ADDR
32497: GO 32519
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32499: LD_ADDR_VAR 0 10
32503: PUSH
32504: LD_VAR 0 8
32508: PPUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 74
32518: ST_TO_ADDR
// if not enemy then
32519: LD_VAR 0 10
32523: NOT
32524: IFFALSE 32528
// exit ;
32526: GO 32929
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32528: LD_VAR 0 11
32532: PUSH
32533: LD_VAR 0 11
32537: PPUSH
32538: LD_VAR 0 10
32542: PPUSH
32543: CALL_OW 296
32547: PUSH
32548: LD_INT 13
32550: GREATER
32551: AND
32552: PUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: LD_VAR 0 10
32562: PPUSH
32563: CALL_OW 296
32567: PUSH
32568: LD_INT 12
32570: GREATER
32571: OR
32572: IFFALSE 32576
// exit ;
32574: GO 32929
// missile := [ 1 ] ;
32576: LD_ADDR_VAR 0 14
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32587: LD_VAR 0 9
32591: PPUSH
32592: LD_VAR 0 12
32596: PPUSH
32597: CALL_OW 325
32601: IFFALSE 32630
// missile := Replace ( missile , missile + 1 , 2 ) ;
32603: LD_ADDR_VAR 0 14
32607: PUSH
32608: LD_VAR 0 14
32612: PPUSH
32613: LD_VAR 0 14
32617: PUSH
32618: LD_INT 1
32620: PLUS
32621: PPUSH
32622: LD_INT 2
32624: PPUSH
32625: CALL_OW 1
32629: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32630: LD_VAR 0 9
32634: PPUSH
32635: LD_VAR 0 13
32639: PPUSH
32640: CALL_OW 325
32644: PUSH
32645: LD_VAR 0 10
32649: PPUSH
32650: CALL_OW 255
32654: PPUSH
32655: LD_VAR 0 13
32659: PPUSH
32660: CALL_OW 325
32664: NOT
32665: AND
32666: IFFALSE 32695
// missile := Replace ( missile , missile + 1 , 3 ) ;
32668: LD_ADDR_VAR 0 14
32672: PUSH
32673: LD_VAR 0 14
32677: PPUSH
32678: LD_VAR 0 14
32682: PUSH
32683: LD_INT 1
32685: PLUS
32686: PPUSH
32687: LD_INT 3
32689: PPUSH
32690: CALL_OW 1
32694: ST_TO_ADDR
// if missile < 2 then
32695: LD_VAR 0 14
32699: PUSH
32700: LD_INT 2
32702: LESS
32703: IFFALSE 32707
// exit ;
32705: GO 32929
// x := GetX ( enemy ) ;
32707: LD_ADDR_VAR 0 4
32711: PUSH
32712: LD_VAR 0 10
32716: PPUSH
32717: CALL_OW 250
32721: ST_TO_ADDR
// y := GetY ( enemy ) ;
32722: LD_ADDR_VAR 0 5
32726: PUSH
32727: LD_VAR 0 10
32731: PPUSH
32732: CALL_OW 251
32736: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32737: LD_ADDR_VAR 0 6
32741: PUSH
32742: LD_VAR 0 4
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PPUSH
32751: LD_INT 1
32753: PPUSH
32754: CALL_OW 12
32758: PLUS
32759: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32760: LD_ADDR_VAR 0 7
32764: PUSH
32765: LD_VAR 0 5
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PPUSH
32774: LD_INT 1
32776: PPUSH
32777: CALL_OW 12
32781: PLUS
32782: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32783: LD_VAR 0 6
32787: PPUSH
32788: LD_VAR 0 7
32792: PPUSH
32793: CALL_OW 488
32797: NOT
32798: IFFALSE 32820
// begin _x := x ;
32800: LD_ADDR_VAR 0 6
32804: PUSH
32805: LD_VAR 0 4
32809: ST_TO_ADDR
// _y := y ;
32810: LD_ADDR_VAR 0 7
32814: PUSH
32815: LD_VAR 0 5
32819: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32820: LD_ADDR_VAR 0 3
32824: PUSH
32825: LD_INT 1
32827: PPUSH
32828: LD_VAR 0 14
32832: PPUSH
32833: CALL_OW 12
32837: ST_TO_ADDR
// case i of 1 :
32838: LD_VAR 0 3
32842: PUSH
32843: LD_INT 1
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32868
32851: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_VAR 0 10
32861: PPUSH
32862: CALL_OW 115
32866: GO 32929
32868: LD_INT 2
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32898
32876: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32877: LD_VAR 0 1
32881: PPUSH
32882: LD_VAR 0 6
32886: PPUSH
32887: LD_VAR 0 7
32891: PPUSH
32892: CALL_OW 153
32896: GO 32929
32898: LD_INT 3
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32928
32906: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32907: LD_VAR 0 1
32911: PPUSH
32912: LD_VAR 0 6
32916: PPUSH
32917: LD_VAR 0 7
32921: PPUSH
32922: CALL_OW 154
32926: GO 32929
32928: POP
// end ;
32929: LD_VAR 0 2
32933: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
// if not unit or not building then
32942: LD_VAR 0 1
32946: NOT
32947: PUSH
32948: LD_VAR 0 2
32952: NOT
32953: OR
32954: IFFALSE 32958
// exit ;
32956: GO 33116
// x := GetX ( building ) ;
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: LD_VAR 0 2
32967: PPUSH
32968: CALL_OW 250
32972: ST_TO_ADDR
// y := GetY ( building ) ;
32973: LD_ADDR_VAR 0 6
32977: PUSH
32978: LD_VAR 0 2
32982: PPUSH
32983: CALL_OW 251
32987: ST_TO_ADDR
// for i = 0 to 5 do
32988: LD_ADDR_VAR 0 4
32992: PUSH
32993: DOUBLE
32994: LD_INT 0
32996: DEC
32997: ST_TO_ADDR
32998: LD_INT 5
33000: PUSH
33001: FOR_TO
33002: IFFALSE 33114
// begin _x := ShiftX ( x , i , 3 ) ;
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: LD_VAR 0 5
33013: PPUSH
33014: LD_VAR 0 4
33018: PPUSH
33019: LD_INT 3
33021: PPUSH
33022: CALL_OW 272
33026: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33027: LD_ADDR_VAR 0 8
33031: PUSH
33032: LD_VAR 0 6
33036: PPUSH
33037: LD_VAR 0 4
33041: PPUSH
33042: LD_INT 3
33044: PPUSH
33045: CALL_OW 273
33049: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33050: LD_VAR 0 7
33054: PPUSH
33055: LD_VAR 0 8
33059: PPUSH
33060: CALL_OW 488
33064: NOT
33065: IFFALSE 33069
// continue ;
33067: GO 33001
// if HexInfo ( _x , _y ) = 0 then
33069: LD_VAR 0 7
33073: PPUSH
33074: LD_VAR 0 8
33078: PPUSH
33079: CALL_OW 428
33083: PUSH
33084: LD_INT 0
33086: EQUAL
33087: IFFALSE 33112
// begin ComMoveXY ( unit , _x , _y ) ;
33089: LD_VAR 0 1
33093: PPUSH
33094: LD_VAR 0 7
33098: PPUSH
33099: LD_VAR 0 8
33103: PPUSH
33104: CALL_OW 111
// exit ;
33108: POP
33109: POP
33110: GO 33116
// end ; end ;
33112: GO 33001
33114: POP
33115: POP
// end ;
33116: LD_VAR 0 3
33120: RET
// export function ScanBase ( side , base_area ) ; begin
33121: LD_INT 0
33123: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33124: LD_ADDR_VAR 0 3
33128: PUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_INT 81
33136: PUSH
33137: LD_VAR 0 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PPUSH
33146: CALL_OW 70
33150: ST_TO_ADDR
// end ;
33151: LD_VAR 0 3
33155: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33156: LD_INT 0
33158: PPUSH
33159: PPUSH
33160: PPUSH
33161: PPUSH
// result := false ;
33162: LD_ADDR_VAR 0 2
33166: PUSH
33167: LD_INT 0
33169: ST_TO_ADDR
// side := GetSide ( unit ) ;
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 255
33184: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33185: LD_ADDR_VAR 0 4
33189: PUSH
33190: LD_VAR 0 1
33194: PPUSH
33195: CALL_OW 248
33199: ST_TO_ADDR
// case nat of 1 :
33200: LD_VAR 0 4
33204: PUSH
33205: LD_INT 1
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33213
33211: GO 33224
33213: POP
// tech := tech_lassight ; 2 :
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: LD_INT 12
33221: ST_TO_ADDR
33222: GO 33263
33224: LD_INT 2
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 33243
33232: POP
// tech := tech_mortar ; 3 :
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: LD_INT 41
33240: ST_TO_ADDR
33241: GO 33263
33243: LD_INT 3
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33262
33251: POP
// tech := tech_bazooka ; end ;
33252: LD_ADDR_VAR 0 5
33256: PUSH
33257: LD_INT 44
33259: ST_TO_ADDR
33260: GO 33263
33262: POP
// if Researched ( side , tech ) then
33263: LD_VAR 0 3
33267: PPUSH
33268: LD_VAR 0 5
33272: PPUSH
33273: CALL_OW 325
33277: IFFALSE 33304
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33279: LD_ADDR_VAR 0 2
33283: PUSH
33284: LD_INT 5
33286: PUSH
33287: LD_INT 8
33289: PUSH
33290: LD_INT 9
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: PUSH
33298: LD_VAR 0 4
33302: ARRAY
33303: ST_TO_ADDR
// end ;
33304: LD_VAR 0 2
33308: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33309: LD_INT 0
33311: PPUSH
33312: PPUSH
33313: PPUSH
// if not mines then
33314: LD_VAR 0 2
33318: NOT
33319: IFFALSE 33323
// exit ;
33321: GO 33467
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33323: LD_ADDR_VAR 0 5
33327: PUSH
33328: LD_INT 81
33330: PUSH
33331: LD_VAR 0 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 3
33342: PUSH
33343: LD_INT 21
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PPUSH
33361: CALL_OW 69
33365: ST_TO_ADDR
// for i in mines do
33366: LD_ADDR_VAR 0 4
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: FOR_IN
33377: IFFALSE 33465
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33379: LD_VAR 0 4
33383: PUSH
33384: LD_INT 1
33386: ARRAY
33387: PPUSH
33388: LD_VAR 0 4
33392: PUSH
33393: LD_INT 2
33395: ARRAY
33396: PPUSH
33397: CALL_OW 458
33401: NOT
33402: IFFALSE 33406
// continue ;
33404: GO 33376
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33406: LD_VAR 0 4
33410: PUSH
33411: LD_INT 1
33413: ARRAY
33414: PPUSH
33415: LD_VAR 0 4
33419: PUSH
33420: LD_INT 2
33422: ARRAY
33423: PPUSH
33424: CALL_OW 428
33428: PUSH
33429: LD_VAR 0 5
33433: IN
33434: IFFALSE 33463
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33436: LD_VAR 0 4
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: PPUSH
33445: LD_VAR 0 4
33449: PUSH
33450: LD_INT 2
33452: ARRAY
33453: PPUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 456
// end ;
33463: GO 33376
33465: POP
33466: POP
// end ;
33467: LD_VAR 0 3
33471: RET
// export function Count ( array ) ; var i ; begin
33472: LD_INT 0
33474: PPUSH
33475: PPUSH
// result := 0 ;
33476: LD_ADDR_VAR 0 2
33480: PUSH
33481: LD_INT 0
33483: ST_TO_ADDR
// for i in array do
33484: LD_ADDR_VAR 0 3
33488: PUSH
33489: LD_VAR 0 1
33493: PUSH
33494: FOR_IN
33495: IFFALSE 33519
// if i then
33497: LD_VAR 0 3
33501: IFFALSE 33517
// result := result + 1 ;
33503: LD_ADDR_VAR 0 2
33507: PUSH
33508: LD_VAR 0 2
33512: PUSH
33513: LD_INT 1
33515: PLUS
33516: ST_TO_ADDR
33517: GO 33494
33519: POP
33520: POP
// end ;
33521: LD_VAR 0 2
33525: RET
// export function IsEmpty ( building ) ; begin
33526: LD_INT 0
33528: PPUSH
// if not building then
33529: LD_VAR 0 1
33533: NOT
33534: IFFALSE 33538
// exit ;
33536: GO 33581
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33538: LD_ADDR_VAR 0 2
33542: PUSH
33543: LD_VAR 0 1
33547: PUSH
33548: LD_INT 22
33550: PUSH
33551: LD_VAR 0 1
33555: PPUSH
33556: CALL_OW 255
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 58
33567: PUSH
33568: EMPTY
33569: LIST
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PPUSH
33575: CALL_OW 69
33579: IN
33580: ST_TO_ADDR
// end ;
33581: LD_VAR 0 2
33585: RET
// export function IsNotFull ( building ) ; var places ; begin
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
// if not building then
33590: LD_VAR 0 1
33594: NOT
33595: IFFALSE 33599
// exit ;
33597: GO 33770
// result := false ;
33599: LD_ADDR_VAR 0 2
33603: PUSH
33604: LD_INT 0
33606: ST_TO_ADDR
// places := 0 ;
33607: LD_ADDR_VAR 0 3
33611: PUSH
33612: LD_INT 0
33614: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 266
33624: PUSH
33625: LD_INT 0
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33687
33631: LD_INT 1
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33687
33637: LD_INT 6
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33687
33643: LD_INT 7
33645: DOUBLE
33646: EQUAL
33647: IFTRUE 33687
33649: LD_INT 8
33651: DOUBLE
33652: EQUAL
33653: IFTRUE 33687
33655: LD_INT 4
33657: DOUBLE
33658: EQUAL
33659: IFTRUE 33687
33661: LD_INT 5
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33687
33667: LD_INT 2
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33687
33673: LD_INT 3
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33687
33679: LD_INT 35
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33698
33687: POP
// places := 6 ; b_bunker , b_breastwork :
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 6
33695: ST_TO_ADDR
33696: GO 33743
33698: LD_INT 32
33700: DOUBLE
33701: EQUAL
33702: IFTRUE 33712
33704: LD_INT 31
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33712
33710: GO 33723
33712: POP
// places := 1 ; b_control_tower :
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_INT 1
33720: ST_TO_ADDR
33721: GO 33743
33723: LD_INT 36
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33731
33729: GO 33742
33731: POP
// places := 3 ; end ;
33732: LD_ADDR_VAR 0 3
33736: PUSH
33737: LD_INT 3
33739: ST_TO_ADDR
33740: GO 33743
33742: POP
// if places then
33743: LD_VAR 0 3
33747: IFFALSE 33770
// result := UnitsInside ( building ) < places ;
33749: LD_ADDR_VAR 0 2
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 313
33763: PUSH
33764: LD_VAR 0 3
33768: LESS
33769: ST_TO_ADDR
// end ;
33770: LD_VAR 0 2
33774: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33775: LD_INT 0
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
// tmp := [ ] ;
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: EMPTY
33787: ST_TO_ADDR
// list := [ ] ;
33788: LD_ADDR_VAR 0 5
33792: PUSH
33793: EMPTY
33794: ST_TO_ADDR
// for i = 16 to 25 do
33795: LD_ADDR_VAR 0 4
33799: PUSH
33800: DOUBLE
33801: LD_INT 16
33803: DEC
33804: ST_TO_ADDR
33805: LD_INT 25
33807: PUSH
33808: FOR_TO
33809: IFFALSE 33882
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: LD_VAR 0 3
33820: PUSH
33821: LD_INT 22
33823: PUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: CALL_OW 255
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 91
33840: PUSH
33841: LD_VAR 0 1
33845: PUSH
33846: LD_INT 6
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 30
33856: PUSH
33857: LD_VAR 0 4
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: PPUSH
33874: CALL_OW 69
33878: ADD
33879: ST_TO_ADDR
33880: GO 33808
33882: POP
33883: POP
// for i = 1 to tmp do
33884: LD_ADDR_VAR 0 4
33888: PUSH
33889: DOUBLE
33890: LD_INT 1
33892: DEC
33893: ST_TO_ADDR
33894: LD_VAR 0 3
33898: PUSH
33899: FOR_TO
33900: IFFALSE 33988
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33902: LD_ADDR_VAR 0 5
33906: PUSH
33907: LD_VAR 0 5
33911: PUSH
33912: LD_VAR 0 3
33916: PUSH
33917: LD_VAR 0 4
33921: ARRAY
33922: PPUSH
33923: CALL_OW 266
33927: PUSH
33928: LD_VAR 0 3
33932: PUSH
33933: LD_VAR 0 4
33937: ARRAY
33938: PPUSH
33939: CALL_OW 250
33943: PUSH
33944: LD_VAR 0 3
33948: PUSH
33949: LD_VAR 0 4
33953: ARRAY
33954: PPUSH
33955: CALL_OW 251
33959: PUSH
33960: LD_VAR 0 3
33964: PUSH
33965: LD_VAR 0 4
33969: ARRAY
33970: PPUSH
33971: CALL_OW 254
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: PUSH
33982: EMPTY
33983: LIST
33984: ADD
33985: ST_TO_ADDR
33986: GO 33899
33988: POP
33989: POP
// result := list ;
33990: LD_ADDR_VAR 0 2
33994: PUSH
33995: LD_VAR 0 5
33999: ST_TO_ADDR
// end ;
34000: LD_VAR 0 2
34004: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34005: LD_INT 0
34007: PPUSH
34008: PPUSH
34009: PPUSH
34010: PPUSH
34011: PPUSH
34012: PPUSH
34013: PPUSH
// if not factory then
34014: LD_VAR 0 1
34018: NOT
34019: IFFALSE 34023
// exit ;
34021: GO 34616
// if control = control_apeman then
34023: LD_VAR 0 4
34027: PUSH
34028: LD_INT 5
34030: EQUAL
34031: IFFALSE 34140
// begin tmp := UnitsInside ( factory ) ;
34033: LD_ADDR_VAR 0 8
34037: PUSH
34038: LD_VAR 0 1
34042: PPUSH
34043: CALL_OW 313
34047: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34048: LD_VAR 0 8
34052: PPUSH
34053: LD_INT 25
34055: PUSH
34056: LD_INT 12
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PPUSH
34063: CALL_OW 72
34067: NOT
34068: IFFALSE 34078
// control := control_manual ;
34070: LD_ADDR_VAR 0 4
34074: PUSH
34075: LD_INT 1
34077: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34078: LD_ADDR_VAR 0 8
34082: PUSH
34083: LD_VAR 0 1
34087: PPUSH
34088: CALL 33775 0 1
34092: ST_TO_ADDR
// if tmp then
34093: LD_VAR 0 8
34097: IFFALSE 34140
// begin for i in tmp do
34099: LD_ADDR_VAR 0 7
34103: PUSH
34104: LD_VAR 0 8
34108: PUSH
34109: FOR_IN
34110: IFFALSE 34138
// if i [ 1 ] = b_ext_radio then
34112: LD_VAR 0 7
34116: PUSH
34117: LD_INT 1
34119: ARRAY
34120: PUSH
34121: LD_INT 22
34123: EQUAL
34124: IFFALSE 34136
// begin control := control_remote ;
34126: LD_ADDR_VAR 0 4
34130: PUSH
34131: LD_INT 2
34133: ST_TO_ADDR
// break ;
34134: GO 34138
// end ;
34136: GO 34109
34138: POP
34139: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34140: LD_VAR 0 1
34144: PPUSH
34145: LD_VAR 0 2
34149: PPUSH
34150: LD_VAR 0 3
34154: PPUSH
34155: LD_VAR 0 4
34159: PPUSH
34160: LD_VAR 0 5
34164: PPUSH
34165: CALL_OW 448
34169: IFFALSE 34204
// begin result := [ chassis , engine , control , weapon ] ;
34171: LD_ADDR_VAR 0 6
34175: PUSH
34176: LD_VAR 0 2
34180: PUSH
34181: LD_VAR 0 3
34185: PUSH
34186: LD_VAR 0 4
34190: PUSH
34191: LD_VAR 0 5
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// exit ;
34202: GO 34616
// end ; _chassis := AvailableChassisList ( factory ) ;
34204: LD_ADDR_VAR 0 9
34208: PUSH
34209: LD_VAR 0 1
34213: PPUSH
34214: CALL_OW 475
34218: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34219: LD_ADDR_VAR 0 11
34223: PUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 476
34233: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34234: LD_ADDR_VAR 0 12
34238: PUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 477
34248: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34249: LD_ADDR_VAR 0 10
34253: PUSH
34254: LD_VAR 0 1
34258: PPUSH
34259: CALL_OW 478
34263: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34264: LD_VAR 0 9
34268: NOT
34269: PUSH
34270: LD_VAR 0 11
34274: NOT
34275: OR
34276: PUSH
34277: LD_VAR 0 12
34281: NOT
34282: OR
34283: PUSH
34284: LD_VAR 0 10
34288: NOT
34289: OR
34290: IFFALSE 34325
// begin result := [ chassis , engine , control , weapon ] ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 2
34301: PUSH
34302: LD_VAR 0 3
34306: PUSH
34307: LD_VAR 0 4
34311: PUSH
34312: LD_VAR 0 5
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// exit ;
34323: GO 34616
// end ; if not chassis in _chassis then
34325: LD_VAR 0 2
34329: PUSH
34330: LD_VAR 0 9
34334: IN
34335: NOT
34336: IFFALSE 34362
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34338: LD_ADDR_VAR 0 2
34342: PUSH
34343: LD_VAR 0 9
34347: PUSH
34348: LD_INT 1
34350: PPUSH
34351: LD_VAR 0 9
34355: PPUSH
34356: CALL_OW 12
34360: ARRAY
34361: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34362: LD_VAR 0 2
34366: PPUSH
34367: LD_VAR 0 3
34371: PPUSH
34372: CALL 34621 0 2
34376: NOT
34377: IFFALSE 34436
// repeat engine := _engine [ 1 ] ;
34379: LD_ADDR_VAR 0 3
34383: PUSH
34384: LD_VAR 0 11
34388: PUSH
34389: LD_INT 1
34391: ARRAY
34392: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34393: LD_ADDR_VAR 0 11
34397: PUSH
34398: LD_VAR 0 11
34402: PPUSH
34403: LD_INT 1
34405: PPUSH
34406: CALL_OW 3
34410: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34411: LD_VAR 0 2
34415: PPUSH
34416: LD_VAR 0 3
34420: PPUSH
34421: CALL 34621 0 2
34425: PUSH
34426: LD_VAR 0 11
34430: PUSH
34431: EMPTY
34432: EQUAL
34433: OR
34434: IFFALSE 34379
// if not control in _control then
34436: LD_VAR 0 4
34440: PUSH
34441: LD_VAR 0 12
34445: IN
34446: NOT
34447: IFFALSE 34473
// control := _control [ rand ( 1 , _control ) ] ;
34449: LD_ADDR_VAR 0 4
34453: PUSH
34454: LD_VAR 0 12
34458: PUSH
34459: LD_INT 1
34461: PPUSH
34462: LD_VAR 0 12
34466: PPUSH
34467: CALL_OW 12
34471: ARRAY
34472: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34473: LD_VAR 0 2
34477: PPUSH
34478: LD_VAR 0 5
34482: PPUSH
34483: CALL 34841 0 2
34487: NOT
34488: IFFALSE 34547
// repeat weapon := _weapon [ 1 ] ;
34490: LD_ADDR_VAR 0 5
34494: PUSH
34495: LD_VAR 0 10
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34504: LD_ADDR_VAR 0 10
34508: PUSH
34509: LD_VAR 0 10
34513: PPUSH
34514: LD_INT 1
34516: PPUSH
34517: CALL_OW 3
34521: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34522: LD_VAR 0 2
34526: PPUSH
34527: LD_VAR 0 5
34531: PPUSH
34532: CALL 34841 0 2
34536: PUSH
34537: LD_VAR 0 10
34541: PUSH
34542: EMPTY
34543: EQUAL
34544: OR
34545: IFFALSE 34490
// result := [ ] ;
34547: LD_ADDR_VAR 0 6
34551: PUSH
34552: EMPTY
34553: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34554: LD_VAR 0 1
34558: PPUSH
34559: LD_VAR 0 2
34563: PPUSH
34564: LD_VAR 0 3
34568: PPUSH
34569: LD_VAR 0 4
34573: PPUSH
34574: LD_VAR 0 5
34578: PPUSH
34579: CALL_OW 448
34583: IFFALSE 34616
// result := [ chassis , engine , control , weapon ] ;
34585: LD_ADDR_VAR 0 6
34589: PUSH
34590: LD_VAR 0 2
34594: PUSH
34595: LD_VAR 0 3
34599: PUSH
34600: LD_VAR 0 4
34604: PUSH
34605: LD_VAR 0 5
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: ST_TO_ADDR
// end ;
34616: LD_VAR 0 6
34620: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34621: LD_INT 0
34623: PPUSH
// if not chassis or not engine then
34624: LD_VAR 0 1
34628: NOT
34629: PUSH
34630: LD_VAR 0 2
34634: NOT
34635: OR
34636: IFFALSE 34640
// exit ;
34638: GO 34836
// case engine of engine_solar :
34640: LD_VAR 0 2
34644: PUSH
34645: LD_INT 2
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34691
34653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 11
34661: PUSH
34662: LD_INT 12
34664: PUSH
34665: LD_INT 13
34667: PUSH
34668: LD_INT 14
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: ST_TO_ADDR
34689: GO 34820
34691: LD_INT 1
34693: DOUBLE
34694: EQUAL
34695: IFTRUE 34699
34697: GO 34761
34699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34700: LD_ADDR_VAR 0 3
34704: PUSH
34705: LD_INT 11
34707: PUSH
34708: LD_INT 12
34710: PUSH
34711: LD_INT 13
34713: PUSH
34714: LD_INT 14
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: LD_INT 4
34728: PUSH
34729: LD_INT 5
34731: PUSH
34732: LD_INT 21
34734: PUSH
34735: LD_INT 23
34737: PUSH
34738: LD_INT 22
34740: PUSH
34741: LD_INT 24
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
34759: GO 34820
34761: LD_INT 3
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34819
34769: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 13
34777: PUSH
34778: LD_INT 14
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: LD_INT 3
34786: PUSH
34787: LD_INT 4
34789: PUSH
34790: LD_INT 5
34792: PUSH
34793: LD_INT 21
34795: PUSH
34796: LD_INT 22
34798: PUSH
34799: LD_INT 23
34801: PUSH
34802: LD_INT 24
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
34817: GO 34820
34819: POP
// result := ( chassis in result ) ;
34820: LD_ADDR_VAR 0 3
34824: PUSH
34825: LD_VAR 0 1
34829: PUSH
34830: LD_VAR 0 3
34834: IN
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 3
34840: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34841: LD_INT 0
34843: PPUSH
// if not chassis or not weapon then
34844: LD_VAR 0 1
34848: NOT
34849: PUSH
34850: LD_VAR 0 2
34854: NOT
34855: OR
34856: IFFALSE 34860
// exit ;
34858: GO 35920
// case weapon of us_machine_gun :
34860: LD_VAR 0 2
34864: PUSH
34865: LD_INT 2
34867: DOUBLE
34868: EQUAL
34869: IFTRUE 34873
34871: GO 34903
34873: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34874: LD_ADDR_VAR 0 3
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 4
34890: PUSH
34891: LD_INT 5
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
34901: GO 35904
34903: LD_INT 3
34905: DOUBLE
34906: EQUAL
34907: IFTRUE 34911
34909: GO 34941
34911: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34912: LD_ADDR_VAR 0 3
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: LD_INT 4
34928: PUSH
34929: LD_INT 5
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: ST_TO_ADDR
34939: GO 35904
34941: LD_INT 11
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 34979
34949: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: LD_INT 5
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: ST_TO_ADDR
34977: GO 35904
34979: LD_INT 4
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 35013
34987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: LD_INT 3
34998: PUSH
34999: LD_INT 4
35001: PUSH
35002: LD_INT 5
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
35011: GO 35904
35013: LD_INT 5
35015: DOUBLE
35016: EQUAL
35017: IFTRUE 35021
35019: GO 35047
35021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
35045: GO 35904
35047: LD_INT 9
35049: DOUBLE
35050: EQUAL
35051: IFTRUE 35055
35053: GO 35081
35055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35056: LD_ADDR_VAR 0 3
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 3
35066: PUSH
35067: LD_INT 4
35069: PUSH
35070: LD_INT 5
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: ST_TO_ADDR
35079: GO 35904
35081: LD_INT 7
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 35115
35089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 3
35100: PUSH
35101: LD_INT 4
35103: PUSH
35104: LD_INT 5
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
35113: GO 35904
35115: LD_INT 12
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35123
35121: GO 35149
35123: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35124: LD_ADDR_VAR 0 3
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: LD_INT 4
35137: PUSH
35138: LD_INT 5
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
35147: GO 35904
35149: LD_INT 13
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35183
35157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35158: LD_ADDR_VAR 0 3
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: LD_INT 4
35171: PUSH
35172: LD_INT 5
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: ST_TO_ADDR
35181: GO 35904
35183: LD_INT 14
35185: DOUBLE
35186: EQUAL
35187: IFTRUE 35191
35189: GO 35209
35191: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_INT 4
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: ST_TO_ADDR
35207: GO 35904
35209: LD_INT 6
35211: DOUBLE
35212: EQUAL
35213: IFTRUE 35217
35215: GO 35235
35217: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35218: LD_ADDR_VAR 0 3
35222: PUSH
35223: LD_INT 4
35225: PUSH
35226: LD_INT 5
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: ST_TO_ADDR
35233: GO 35904
35235: LD_INT 10
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 35261
35243: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_INT 4
35251: PUSH
35252: LD_INT 5
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: ST_TO_ADDR
35259: GO 35904
35261: LD_INT 22
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35295
35269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_INT 11
35277: PUSH
35278: LD_INT 12
35280: PUSH
35281: LD_INT 13
35283: PUSH
35284: LD_INT 14
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
35293: GO 35904
35295: LD_INT 23
35297: DOUBLE
35298: EQUAL
35299: IFTRUE 35303
35301: GO 35329
35303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35304: LD_ADDR_VAR 0 3
35308: PUSH
35309: LD_INT 11
35311: PUSH
35312: LD_INT 12
35314: PUSH
35315: LD_INT 13
35317: PUSH
35318: LD_INT 14
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: ST_TO_ADDR
35327: GO 35904
35329: LD_INT 24
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35363
35337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: LD_INT 11
35345: PUSH
35346: LD_INT 12
35348: PUSH
35349: LD_INT 13
35351: PUSH
35352: LD_INT 14
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
35361: GO 35904
35363: LD_INT 30
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35397
35371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35372: LD_ADDR_VAR 0 3
35376: PUSH
35377: LD_INT 11
35379: PUSH
35380: LD_INT 12
35382: PUSH
35383: LD_INT 13
35385: PUSH
35386: LD_INT 14
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: ST_TO_ADDR
35395: GO 35904
35397: LD_INT 25
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35405
35403: GO 35423
35405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: LD_INT 13
35413: PUSH
35414: LD_INT 14
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: ST_TO_ADDR
35421: GO 35904
35423: LD_INT 27
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35431
35429: GO 35449
35431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35432: LD_ADDR_VAR 0 3
35436: PUSH
35437: LD_INT 13
35439: PUSH
35440: LD_INT 14
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: ST_TO_ADDR
35447: GO 35904
35449: LD_INT 92
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35483
35457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_INT 11
35465: PUSH
35466: LD_INT 12
35468: PUSH
35469: LD_INT 13
35471: PUSH
35472: LD_INT 14
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: ST_TO_ADDR
35481: GO 35904
35483: LD_INT 28
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35509
35491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_INT 13
35499: PUSH
35500: LD_INT 14
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: ST_TO_ADDR
35507: GO 35904
35509: LD_INT 29
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35517
35515: GO 35535
35517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35518: LD_ADDR_VAR 0 3
35522: PUSH
35523: LD_INT 13
35525: PUSH
35526: LD_INT 14
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: ST_TO_ADDR
35533: GO 35904
35535: LD_INT 31
35537: DOUBLE
35538: EQUAL
35539: IFTRUE 35543
35541: GO 35561
35543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35544: LD_ADDR_VAR 0 3
35548: PUSH
35549: LD_INT 13
35551: PUSH
35552: LD_INT 14
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: ST_TO_ADDR
35559: GO 35904
35561: LD_INT 26
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35587
35569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 13
35577: PUSH
35578: LD_INT 14
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 35904
35587: LD_INT 42
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35621
35595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 21
35603: PUSH
35604: LD_INT 22
35606: PUSH
35607: LD_INT 23
35609: PUSH
35610: LD_INT 24
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 35904
35621: LD_INT 43
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35655
35629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_INT 21
35637: PUSH
35638: LD_INT 22
35640: PUSH
35641: LD_INT 23
35643: PUSH
35644: LD_INT 24
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
35653: GO 35904
35655: LD_INT 44
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 35689
35663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_INT 21
35671: PUSH
35672: LD_INT 22
35674: PUSH
35675: LD_INT 23
35677: PUSH
35678: LD_INT 24
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
35687: GO 35904
35689: LD_INT 45
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35697
35695: GO 35723
35697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35698: LD_ADDR_VAR 0 3
35702: PUSH
35703: LD_INT 21
35705: PUSH
35706: LD_INT 22
35708: PUSH
35709: LD_INT 23
35711: PUSH
35712: LD_INT 24
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
35721: GO 35904
35723: LD_INT 49
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35731
35729: GO 35757
35731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_INT 21
35739: PUSH
35740: LD_INT 22
35742: PUSH
35743: LD_INT 23
35745: PUSH
35746: LD_INT 24
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
35755: GO 35904
35757: LD_INT 51
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35765
35763: GO 35791
35765: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_INT 21
35773: PUSH
35774: LD_INT 22
35776: PUSH
35777: LD_INT 23
35779: PUSH
35780: LD_INT 24
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: ST_TO_ADDR
35789: GO 35904
35791: LD_INT 52
35793: DOUBLE
35794: EQUAL
35795: IFTRUE 35799
35797: GO 35825
35799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35800: LD_ADDR_VAR 0 3
35804: PUSH
35805: LD_INT 21
35807: PUSH
35808: LD_INT 22
35810: PUSH
35811: LD_INT 23
35813: PUSH
35814: LD_INT 24
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
35823: GO 35904
35825: LD_INT 53
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35833
35831: GO 35851
35833: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35834: LD_ADDR_VAR 0 3
35838: PUSH
35839: LD_INT 23
35841: PUSH
35842: LD_INT 24
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: ST_TO_ADDR
35849: GO 35904
35851: LD_INT 46
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35859
35857: GO 35877
35859: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35860: LD_ADDR_VAR 0 3
35864: PUSH
35865: LD_INT 23
35867: PUSH
35868: LD_INT 24
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: ST_TO_ADDR
35875: GO 35904
35877: LD_INT 47
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35885
35883: GO 35903
35885: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_INT 23
35893: PUSH
35894: LD_INT 24
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: ST_TO_ADDR
35901: GO 35904
35903: POP
// result := ( chassis in result ) ;
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_VAR 0 1
35913: PUSH
35914: LD_VAR 0 3
35918: IN
35919: ST_TO_ADDR
// end ;
35920: LD_VAR 0 3
35924: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35925: LD_INT 0
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
// result := array ;
35934: LD_ADDR_VAR 0 5
35938: PUSH
35939: LD_VAR 0 1
35943: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35944: LD_VAR 0 1
35948: NOT
35949: PUSH
35950: LD_VAR 0 2
35954: NOT
35955: OR
35956: PUSH
35957: LD_VAR 0 3
35961: NOT
35962: OR
35963: PUSH
35964: LD_VAR 0 2
35968: PUSH
35969: LD_VAR 0 1
35973: GREATER
35974: OR
35975: PUSH
35976: LD_VAR 0 3
35980: PUSH
35981: LD_VAR 0 1
35985: GREATER
35986: OR
35987: IFFALSE 35991
// exit ;
35989: GO 36287
// if direction then
35991: LD_VAR 0 4
35995: IFFALSE 36059
// begin d := 1 ;
35997: LD_ADDR_VAR 0 9
36001: PUSH
36002: LD_INT 1
36004: ST_TO_ADDR
// if i_from > i_to then
36005: LD_VAR 0 2
36009: PUSH
36010: LD_VAR 0 3
36014: GREATER
36015: IFFALSE 36041
// length := ( array - i_from ) + i_to else
36017: LD_ADDR_VAR 0 11
36021: PUSH
36022: LD_VAR 0 1
36026: PUSH
36027: LD_VAR 0 2
36031: MINUS
36032: PUSH
36033: LD_VAR 0 3
36037: PLUS
36038: ST_TO_ADDR
36039: GO 36057
// length := i_to - i_from ;
36041: LD_ADDR_VAR 0 11
36045: PUSH
36046: LD_VAR 0 3
36050: PUSH
36051: LD_VAR 0 2
36055: MINUS
36056: ST_TO_ADDR
// end else
36057: GO 36120
// begin d := - 1 ;
36059: LD_ADDR_VAR 0 9
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: ST_TO_ADDR
// if i_from > i_to then
36068: LD_VAR 0 2
36072: PUSH
36073: LD_VAR 0 3
36077: GREATER
36078: IFFALSE 36098
// length := i_from - i_to else
36080: LD_ADDR_VAR 0 11
36084: PUSH
36085: LD_VAR 0 2
36089: PUSH
36090: LD_VAR 0 3
36094: MINUS
36095: ST_TO_ADDR
36096: GO 36120
// length := ( array - i_to ) + i_from ;
36098: LD_ADDR_VAR 0 11
36102: PUSH
36103: LD_VAR 0 1
36107: PUSH
36108: LD_VAR 0 3
36112: MINUS
36113: PUSH
36114: LD_VAR 0 2
36118: PLUS
36119: ST_TO_ADDR
// end ; if not length then
36120: LD_VAR 0 11
36124: NOT
36125: IFFALSE 36129
// exit ;
36127: GO 36287
// tmp := array ;
36129: LD_ADDR_VAR 0 10
36133: PUSH
36134: LD_VAR 0 1
36138: ST_TO_ADDR
// for i = 1 to length do
36139: LD_ADDR_VAR 0 6
36143: PUSH
36144: DOUBLE
36145: LD_INT 1
36147: DEC
36148: ST_TO_ADDR
36149: LD_VAR 0 11
36153: PUSH
36154: FOR_TO
36155: IFFALSE 36275
// begin for j = 1 to array do
36157: LD_ADDR_VAR 0 7
36161: PUSH
36162: DOUBLE
36163: LD_INT 1
36165: DEC
36166: ST_TO_ADDR
36167: LD_VAR 0 1
36171: PUSH
36172: FOR_TO
36173: IFFALSE 36261
// begin k := j + d ;
36175: LD_ADDR_VAR 0 8
36179: PUSH
36180: LD_VAR 0 7
36184: PUSH
36185: LD_VAR 0 9
36189: PLUS
36190: ST_TO_ADDR
// if k > array then
36191: LD_VAR 0 8
36195: PUSH
36196: LD_VAR 0 1
36200: GREATER
36201: IFFALSE 36211
// k := 1 ;
36203: LD_ADDR_VAR 0 8
36207: PUSH
36208: LD_INT 1
36210: ST_TO_ADDR
// if not k then
36211: LD_VAR 0 8
36215: NOT
36216: IFFALSE 36228
// k := array ;
36218: LD_ADDR_VAR 0 8
36222: PUSH
36223: LD_VAR 0 1
36227: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36228: LD_ADDR_VAR 0 10
36232: PUSH
36233: LD_VAR 0 10
36237: PPUSH
36238: LD_VAR 0 8
36242: PPUSH
36243: LD_VAR 0 1
36247: PUSH
36248: LD_VAR 0 7
36252: ARRAY
36253: PPUSH
36254: CALL_OW 1
36258: ST_TO_ADDR
// end ;
36259: GO 36172
36261: POP
36262: POP
// array := tmp ;
36263: LD_ADDR_VAR 0 1
36267: PUSH
36268: LD_VAR 0 10
36272: ST_TO_ADDR
// end ;
36273: GO 36154
36275: POP
36276: POP
// result := array ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_VAR 0 1
36286: ST_TO_ADDR
// end ;
36287: LD_VAR 0 5
36291: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36292: LD_INT 0
36294: PPUSH
36295: PPUSH
// result := 0 ;
36296: LD_ADDR_VAR 0 3
36300: PUSH
36301: LD_INT 0
36303: ST_TO_ADDR
// if not array or not value in array then
36304: LD_VAR 0 1
36308: NOT
36309: PUSH
36310: LD_VAR 0 2
36314: PUSH
36315: LD_VAR 0 1
36319: IN
36320: NOT
36321: OR
36322: IFFALSE 36326
// exit ;
36324: GO 36380
// for i = 1 to array do
36326: LD_ADDR_VAR 0 4
36330: PUSH
36331: DOUBLE
36332: LD_INT 1
36334: DEC
36335: ST_TO_ADDR
36336: LD_VAR 0 1
36340: PUSH
36341: FOR_TO
36342: IFFALSE 36378
// if value = array [ i ] then
36344: LD_VAR 0 2
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: LD_VAR 0 4
36358: ARRAY
36359: EQUAL
36360: IFFALSE 36376
// begin result := i ;
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_VAR 0 4
36371: ST_TO_ADDR
// exit ;
36372: POP
36373: POP
36374: GO 36380
// end ;
36376: GO 36341
36378: POP
36379: POP
// end ;
36380: LD_VAR 0 3
36384: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36385: LD_INT 0
36387: PPUSH
// vc_chassis := chassis ;
36388: LD_ADDR_OWVAR 37
36392: PUSH
36393: LD_VAR 0 1
36397: ST_TO_ADDR
// vc_engine := engine ;
36398: LD_ADDR_OWVAR 39
36402: PUSH
36403: LD_VAR 0 2
36407: ST_TO_ADDR
// vc_control := control ;
36408: LD_ADDR_OWVAR 38
36412: PUSH
36413: LD_VAR 0 3
36417: ST_TO_ADDR
// vc_weapon := weapon ;
36418: LD_ADDR_OWVAR 40
36422: PUSH
36423: LD_VAR 0 4
36427: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36428: LD_ADDR_OWVAR 41
36432: PUSH
36433: LD_VAR 0 5
36437: ST_TO_ADDR
// end ;
36438: LD_VAR 0 6
36442: RET
// export function WantPlant ( unit ) ; var task ; begin
36443: LD_INT 0
36445: PPUSH
36446: PPUSH
// result := false ;
36447: LD_ADDR_VAR 0 2
36451: PUSH
36452: LD_INT 0
36454: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36455: LD_ADDR_VAR 0 3
36459: PUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 437
36469: ST_TO_ADDR
// if task then
36470: LD_VAR 0 3
36474: IFFALSE 36502
// if task [ 1 ] [ 1 ] = p then
36476: LD_VAR 0 3
36480: PUSH
36481: LD_INT 1
36483: ARRAY
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: PUSH
36489: LD_STRING p
36491: EQUAL
36492: IFFALSE 36502
// result := true ;
36494: LD_ADDR_VAR 0 2
36498: PUSH
36499: LD_INT 1
36501: ST_TO_ADDR
// end ;
36502: LD_VAR 0 2
36506: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36507: LD_INT 0
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
// if pos < 1 then
36513: LD_VAR 0 2
36517: PUSH
36518: LD_INT 1
36520: LESS
36521: IFFALSE 36525
// exit ;
36523: GO 36828
// if pos = 1 then
36525: LD_VAR 0 2
36529: PUSH
36530: LD_INT 1
36532: EQUAL
36533: IFFALSE 36566
// result := Replace ( arr , pos [ 1 ] , value ) else
36535: LD_ADDR_VAR 0 4
36539: PUSH
36540: LD_VAR 0 1
36544: PPUSH
36545: LD_VAR 0 2
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PPUSH
36554: LD_VAR 0 3
36558: PPUSH
36559: CALL_OW 1
36563: ST_TO_ADDR
36564: GO 36828
// begin tmp := arr ;
36566: LD_ADDR_VAR 0 6
36570: PUSH
36571: LD_VAR 0 1
36575: ST_TO_ADDR
// s_arr := [ tmp ] ;
36576: LD_ADDR_VAR 0 7
36580: PUSH
36581: LD_VAR 0 6
36585: PUSH
36586: EMPTY
36587: LIST
36588: ST_TO_ADDR
// for i = 1 to pos - 1 do
36589: LD_ADDR_VAR 0 5
36593: PUSH
36594: DOUBLE
36595: LD_INT 1
36597: DEC
36598: ST_TO_ADDR
36599: LD_VAR 0 2
36603: PUSH
36604: LD_INT 1
36606: MINUS
36607: PUSH
36608: FOR_TO
36609: IFFALSE 36654
// begin tmp := tmp [ pos [ i ] ] ;
36611: LD_ADDR_VAR 0 6
36615: PUSH
36616: LD_VAR 0 6
36620: PUSH
36621: LD_VAR 0 2
36625: PUSH
36626: LD_VAR 0 5
36630: ARRAY
36631: ARRAY
36632: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36633: LD_ADDR_VAR 0 7
36637: PUSH
36638: LD_VAR 0 7
36642: PUSH
36643: LD_VAR 0 6
36647: PUSH
36648: EMPTY
36649: LIST
36650: ADD
36651: ST_TO_ADDR
// end ;
36652: GO 36608
36654: POP
36655: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36656: LD_ADDR_VAR 0 6
36660: PUSH
36661: LD_VAR 0 6
36665: PPUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_VAR 0 2
36675: ARRAY
36676: PPUSH
36677: LD_VAR 0 3
36681: PPUSH
36682: CALL_OW 1
36686: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36687: LD_ADDR_VAR 0 7
36691: PUSH
36692: LD_VAR 0 7
36696: PPUSH
36697: LD_VAR 0 7
36701: PPUSH
36702: LD_VAR 0 6
36706: PPUSH
36707: CALL_OW 1
36711: ST_TO_ADDR
// for i = s_arr downto 2 do
36712: LD_ADDR_VAR 0 5
36716: PUSH
36717: DOUBLE
36718: LD_VAR 0 7
36722: INC
36723: ST_TO_ADDR
36724: LD_INT 2
36726: PUSH
36727: FOR_DOWNTO
36728: IFFALSE 36812
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36730: LD_ADDR_VAR 0 6
36734: PUSH
36735: LD_VAR 0 7
36739: PUSH
36740: LD_VAR 0 5
36744: PUSH
36745: LD_INT 1
36747: MINUS
36748: ARRAY
36749: PPUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_VAR 0 5
36759: PUSH
36760: LD_INT 1
36762: MINUS
36763: ARRAY
36764: PPUSH
36765: LD_VAR 0 7
36769: PUSH
36770: LD_VAR 0 5
36774: ARRAY
36775: PPUSH
36776: CALL_OW 1
36780: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36781: LD_ADDR_VAR 0 7
36785: PUSH
36786: LD_VAR 0 7
36790: PPUSH
36791: LD_VAR 0 5
36795: PUSH
36796: LD_INT 1
36798: MINUS
36799: PPUSH
36800: LD_VAR 0 6
36804: PPUSH
36805: CALL_OW 1
36809: ST_TO_ADDR
// end ;
36810: GO 36727
36812: POP
36813: POP
// result := s_arr [ 1 ] ;
36814: LD_ADDR_VAR 0 4
36818: PUSH
36819: LD_VAR 0 7
36823: PUSH
36824: LD_INT 1
36826: ARRAY
36827: ST_TO_ADDR
// end ; end ;
36828: LD_VAR 0 4
36832: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36833: LD_INT 0
36835: PPUSH
36836: PPUSH
// if not list then
36837: LD_VAR 0 1
36841: NOT
36842: IFFALSE 36846
// exit ;
36844: GO 36937
// i := list [ pos1 ] ;
36846: LD_ADDR_VAR 0 5
36850: PUSH
36851: LD_VAR 0 1
36855: PUSH
36856: LD_VAR 0 2
36860: ARRAY
36861: ST_TO_ADDR
// if not i then
36862: LD_VAR 0 5
36866: NOT
36867: IFFALSE 36871
// exit ;
36869: GO 36937
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36871: LD_ADDR_VAR 0 1
36875: PUSH
36876: LD_VAR 0 1
36880: PPUSH
36881: LD_VAR 0 2
36885: PPUSH
36886: LD_VAR 0 1
36890: PUSH
36891: LD_VAR 0 3
36895: ARRAY
36896: PPUSH
36897: CALL_OW 1
36901: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36902: LD_ADDR_VAR 0 1
36906: PUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: LD_VAR 0 3
36916: PPUSH
36917: LD_VAR 0 5
36921: PPUSH
36922: CALL_OW 1
36926: ST_TO_ADDR
// result := list ;
36927: LD_ADDR_VAR 0 4
36931: PUSH
36932: LD_VAR 0 1
36936: ST_TO_ADDR
// end ;
36937: LD_VAR 0 4
36941: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36942: LD_INT 0
36944: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 250
36959: PPUSH
36960: LD_VAR 0 1
36964: PPUSH
36965: CALL_OW 251
36969: PPUSH
36970: LD_VAR 0 2
36974: PPUSH
36975: LD_VAR 0 3
36979: PPUSH
36980: LD_VAR 0 4
36984: PPUSH
36985: CALL 36995 0 5
36989: ST_TO_ADDR
// end ;
36990: LD_VAR 0 5
36994: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36995: LD_INT 0
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
// if not list then
37001: LD_VAR 0 3
37005: NOT
37006: IFFALSE 37010
// exit ;
37008: GO 37398
// result := [ ] ;
37010: LD_ADDR_VAR 0 6
37014: PUSH
37015: EMPTY
37016: ST_TO_ADDR
// for i in list do
37017: LD_ADDR_VAR 0 7
37021: PUSH
37022: LD_VAR 0 3
37026: PUSH
37027: FOR_IN
37028: IFFALSE 37230
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37030: LD_ADDR_VAR 0 9
37034: PUSH
37035: LD_VAR 0 7
37039: PPUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: LD_VAR 0 2
37049: PPUSH
37050: CALL_OW 297
37054: ST_TO_ADDR
// if not result then
37055: LD_VAR 0 6
37059: NOT
37060: IFFALSE 37086
// result := [ [ i , tmp ] ] else
37062: LD_ADDR_VAR 0 6
37066: PUSH
37067: LD_VAR 0 7
37071: PUSH
37072: LD_VAR 0 9
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: ST_TO_ADDR
37084: GO 37228
// begin if result [ result ] [ 2 ] < tmp then
37086: LD_VAR 0 6
37090: PUSH
37091: LD_VAR 0 6
37095: ARRAY
37096: PUSH
37097: LD_INT 2
37099: ARRAY
37100: PUSH
37101: LD_VAR 0 9
37105: LESS
37106: IFFALSE 37148
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37108: LD_ADDR_VAR 0 6
37112: PUSH
37113: LD_VAR 0 6
37117: PPUSH
37118: LD_VAR 0 6
37122: PUSH
37123: LD_INT 1
37125: PLUS
37126: PPUSH
37127: LD_VAR 0 7
37131: PUSH
37132: LD_VAR 0 9
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PPUSH
37141: CALL_OW 2
37145: ST_TO_ADDR
37146: GO 37228
// for j = 1 to result do
37148: LD_ADDR_VAR 0 8
37152: PUSH
37153: DOUBLE
37154: LD_INT 1
37156: DEC
37157: ST_TO_ADDR
37158: LD_VAR 0 6
37162: PUSH
37163: FOR_TO
37164: IFFALSE 37226
// begin if tmp < result [ j ] [ 2 ] then
37166: LD_VAR 0 9
37170: PUSH
37171: LD_VAR 0 6
37175: PUSH
37176: LD_VAR 0 8
37180: ARRAY
37181: PUSH
37182: LD_INT 2
37184: ARRAY
37185: LESS
37186: IFFALSE 37224
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37188: LD_ADDR_VAR 0 6
37192: PUSH
37193: LD_VAR 0 6
37197: PPUSH
37198: LD_VAR 0 8
37202: PPUSH
37203: LD_VAR 0 7
37207: PUSH
37208: LD_VAR 0 9
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PPUSH
37217: CALL_OW 2
37221: ST_TO_ADDR
// break ;
37222: GO 37226
// end ; end ;
37224: GO 37163
37226: POP
37227: POP
// end ; end ;
37228: GO 37027
37230: POP
37231: POP
// if result and not asc then
37232: LD_VAR 0 6
37236: PUSH
37237: LD_VAR 0 4
37241: NOT
37242: AND
37243: IFFALSE 37318
// begin tmp := result ;
37245: LD_ADDR_VAR 0 9
37249: PUSH
37250: LD_VAR 0 6
37254: ST_TO_ADDR
// for i = tmp downto 1 do
37255: LD_ADDR_VAR 0 7
37259: PUSH
37260: DOUBLE
37261: LD_VAR 0 9
37265: INC
37266: ST_TO_ADDR
37267: LD_INT 1
37269: PUSH
37270: FOR_DOWNTO
37271: IFFALSE 37316
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37273: LD_ADDR_VAR 0 6
37277: PUSH
37278: LD_VAR 0 6
37282: PPUSH
37283: LD_VAR 0 9
37287: PUSH
37288: LD_VAR 0 7
37292: MINUS
37293: PUSH
37294: LD_INT 1
37296: PLUS
37297: PPUSH
37298: LD_VAR 0 9
37302: PUSH
37303: LD_VAR 0 7
37307: ARRAY
37308: PPUSH
37309: CALL_OW 1
37313: ST_TO_ADDR
37314: GO 37270
37316: POP
37317: POP
// end ; tmp := [ ] ;
37318: LD_ADDR_VAR 0 9
37322: PUSH
37323: EMPTY
37324: ST_TO_ADDR
// if mode then
37325: LD_VAR 0 5
37329: IFFALSE 37398
// begin for i = 1 to result do
37331: LD_ADDR_VAR 0 7
37335: PUSH
37336: DOUBLE
37337: LD_INT 1
37339: DEC
37340: ST_TO_ADDR
37341: LD_VAR 0 6
37345: PUSH
37346: FOR_TO
37347: IFFALSE 37386
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37349: LD_ADDR_VAR 0 9
37353: PUSH
37354: LD_VAR 0 9
37358: PPUSH
37359: LD_VAR 0 7
37363: PPUSH
37364: LD_VAR 0 6
37368: PUSH
37369: LD_VAR 0 7
37373: ARRAY
37374: PUSH
37375: LD_INT 1
37377: ARRAY
37378: PPUSH
37379: CALL_OW 1
37383: ST_TO_ADDR
37384: GO 37346
37386: POP
37387: POP
// result := tmp ;
37388: LD_ADDR_VAR 0 6
37392: PUSH
37393: LD_VAR 0 9
37397: ST_TO_ADDR
// end ; end ;
37398: LD_VAR 0 6
37402: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37403: LD_INT 0
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37411: LD_ADDR_VAR 0 5
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: ST_TO_ADDR
// if not x or not y then
37433: LD_VAR 0 2
37437: NOT
37438: PUSH
37439: LD_VAR 0 3
37443: NOT
37444: OR
37445: IFFALSE 37449
// exit ;
37447: GO 39099
// if not range then
37449: LD_VAR 0 4
37453: NOT
37454: IFFALSE 37464
// range := 10 ;
37456: LD_ADDR_VAR 0 4
37460: PUSH
37461: LD_INT 10
37463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37464: LD_ADDR_VAR 0 8
37468: PUSH
37469: LD_INT 81
37471: PUSH
37472: LD_VAR 0 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 92
37483: PUSH
37484: LD_VAR 0 2
37488: PUSH
37489: LD_VAR 0 3
37493: PUSH
37494: LD_VAR 0 4
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 21
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: PPUSH
37527: CALL_OW 69
37531: ST_TO_ADDR
// if not tmp then
37532: LD_VAR 0 8
37536: NOT
37537: IFFALSE 37541
// exit ;
37539: GO 39099
// for i in tmp do
37541: LD_ADDR_VAR 0 6
37545: PUSH
37546: LD_VAR 0 8
37550: PUSH
37551: FOR_IN
37552: IFFALSE 39074
// begin points := [ 0 , 0 , 0 ] ;
37554: LD_ADDR_VAR 0 9
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: ST_TO_ADDR
// bpoints := 1 ;
37573: LD_ADDR_VAR 0 10
37577: PUSH
37578: LD_INT 1
37580: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37581: LD_VAR 0 6
37585: PPUSH
37586: CALL_OW 247
37590: PUSH
37591: LD_INT 1
37593: DOUBLE
37594: EQUAL
37595: IFTRUE 37599
37597: GO 38177
37599: POP
// begin if GetClass ( i ) = 1 then
37600: LD_VAR 0 6
37604: PPUSH
37605: CALL_OW 257
37609: PUSH
37610: LD_INT 1
37612: EQUAL
37613: IFFALSE 37634
// points := [ 10 , 5 , 3 ] ;
37615: LD_ADDR_VAR 0 9
37619: PUSH
37620: LD_INT 10
37622: PUSH
37623: LD_INT 5
37625: PUSH
37626: LD_INT 3
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37634: LD_VAR 0 6
37638: PPUSH
37639: CALL_OW 257
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: LD_INT 4
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: IN
37658: IFFALSE 37679
// points := [ 3 , 2 , 1 ] ;
37660: LD_ADDR_VAR 0 9
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37679: LD_VAR 0 6
37683: PPUSH
37684: CALL_OW 257
37688: PUSH
37689: LD_INT 5
37691: EQUAL
37692: IFFALSE 37713
// points := [ 130 , 5 , 2 ] ;
37694: LD_ADDR_VAR 0 9
37698: PUSH
37699: LD_INT 130
37701: PUSH
37702: LD_INT 5
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37713: LD_VAR 0 6
37717: PPUSH
37718: CALL_OW 257
37722: PUSH
37723: LD_INT 8
37725: EQUAL
37726: IFFALSE 37747
// points := [ 35 , 35 , 30 ] ;
37728: LD_ADDR_VAR 0 9
37732: PUSH
37733: LD_INT 35
37735: PUSH
37736: LD_INT 35
37738: PUSH
37739: LD_INT 30
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37747: LD_VAR 0 6
37751: PPUSH
37752: CALL_OW 257
37756: PUSH
37757: LD_INT 9
37759: EQUAL
37760: IFFALSE 37781
// points := [ 20 , 55 , 40 ] ;
37762: LD_ADDR_VAR 0 9
37766: PUSH
37767: LD_INT 20
37769: PUSH
37770: LD_INT 55
37772: PUSH
37773: LD_INT 40
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37781: LD_VAR 0 6
37785: PPUSH
37786: CALL_OW 257
37790: PUSH
37791: LD_INT 12
37793: PUSH
37794: LD_INT 16
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: IN
37801: IFFALSE 37822
// points := [ 5 , 3 , 2 ] ;
37803: LD_ADDR_VAR 0 9
37807: PUSH
37808: LD_INT 5
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37822: LD_VAR 0 6
37826: PPUSH
37827: CALL_OW 257
37831: PUSH
37832: LD_INT 17
37834: EQUAL
37835: IFFALSE 37856
// points := [ 100 , 50 , 75 ] ;
37837: LD_ADDR_VAR 0 9
37841: PUSH
37842: LD_INT 100
37844: PUSH
37845: LD_INT 50
37847: PUSH
37848: LD_INT 75
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37856: LD_VAR 0 6
37860: PPUSH
37861: CALL_OW 257
37865: PUSH
37866: LD_INT 15
37868: EQUAL
37869: IFFALSE 37890
// points := [ 10 , 5 , 3 ] ;
37871: LD_ADDR_VAR 0 9
37875: PUSH
37876: LD_INT 10
37878: PUSH
37879: LD_INT 5
37881: PUSH
37882: LD_INT 3
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37890: LD_VAR 0 6
37894: PPUSH
37895: CALL_OW 257
37899: PUSH
37900: LD_INT 14
37902: EQUAL
37903: IFFALSE 37924
// points := [ 10 , 0 , 0 ] ;
37905: LD_ADDR_VAR 0 9
37909: PUSH
37910: LD_INT 10
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: LIST
37923: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37924: LD_VAR 0 6
37928: PPUSH
37929: CALL_OW 257
37933: PUSH
37934: LD_INT 11
37936: EQUAL
37937: IFFALSE 37958
// points := [ 30 , 10 , 5 ] ;
37939: LD_ADDR_VAR 0 9
37943: PUSH
37944: LD_INT 30
37946: PUSH
37947: LD_INT 10
37949: PUSH
37950: LD_INT 5
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37958: LD_VAR 0 1
37962: PPUSH
37963: LD_INT 5
37965: PPUSH
37966: CALL_OW 321
37970: PUSH
37971: LD_INT 2
37973: EQUAL
37974: IFFALSE 37991
// bpoints := bpoints * 1.8 ;
37976: LD_ADDR_VAR 0 10
37980: PUSH
37981: LD_VAR 0 10
37985: PUSH
37986: LD_REAL  1.80000000000000E+0000
37989: MUL
37990: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37991: LD_VAR 0 6
37995: PPUSH
37996: CALL_OW 257
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: LD_INT 3
38009: PUSH
38010: LD_INT 4
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: IN
38019: PUSH
38020: LD_VAR 0 1
38024: PPUSH
38025: LD_INT 51
38027: PPUSH
38028: CALL_OW 321
38032: PUSH
38033: LD_INT 2
38035: EQUAL
38036: AND
38037: IFFALSE 38054
// bpoints := bpoints * 1.2 ;
38039: LD_ADDR_VAR 0 10
38043: PUSH
38044: LD_VAR 0 10
38048: PUSH
38049: LD_REAL  1.20000000000000E+0000
38052: MUL
38053: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38054: LD_VAR 0 6
38058: PPUSH
38059: CALL_OW 257
38063: PUSH
38064: LD_INT 5
38066: PUSH
38067: LD_INT 7
38069: PUSH
38070: LD_INT 9
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: IN
38078: PUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: LD_INT 52
38086: PPUSH
38087: CALL_OW 321
38091: PUSH
38092: LD_INT 2
38094: EQUAL
38095: AND
38096: IFFALSE 38113
// bpoints := bpoints * 1.5 ;
38098: LD_ADDR_VAR 0 10
38102: PUSH
38103: LD_VAR 0 10
38107: PUSH
38108: LD_REAL  1.50000000000000E+0000
38111: MUL
38112: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_INT 66
38120: PPUSH
38121: CALL_OW 321
38125: PUSH
38126: LD_INT 2
38128: EQUAL
38129: IFFALSE 38146
// bpoints := bpoints * 1.1 ;
38131: LD_ADDR_VAR 0 10
38135: PUSH
38136: LD_VAR 0 10
38140: PUSH
38141: LD_REAL  1.10000000000000E+0000
38144: MUL
38145: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38146: LD_ADDR_VAR 0 10
38150: PUSH
38151: LD_VAR 0 10
38155: PUSH
38156: LD_VAR 0 6
38160: PPUSH
38161: LD_INT 1
38163: PPUSH
38164: CALL_OW 259
38168: PUSH
38169: LD_REAL  1.15000000000000E+0000
38172: MUL
38173: MUL
38174: ST_TO_ADDR
// end ; unit_vehicle :
38175: GO 39003
38177: LD_INT 2
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38991
38185: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38186: LD_VAR 0 6
38190: PPUSH
38191: CALL_OW 264
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: LD_INT 42
38201: PUSH
38202: LD_INT 24
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: IN
38210: IFFALSE 38231
// points := [ 25 , 5 , 3 ] ;
38212: LD_ADDR_VAR 0 9
38216: PUSH
38217: LD_INT 25
38219: PUSH
38220: LD_INT 5
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38231: LD_VAR 0 6
38235: PPUSH
38236: CALL_OW 264
38240: PUSH
38241: LD_INT 4
38243: PUSH
38244: LD_INT 43
38246: PUSH
38247: LD_INT 25
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: IN
38255: IFFALSE 38276
// points := [ 40 , 15 , 5 ] ;
38257: LD_ADDR_VAR 0 9
38261: PUSH
38262: LD_INT 40
38264: PUSH
38265: LD_INT 15
38267: PUSH
38268: LD_INT 5
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38276: LD_VAR 0 6
38280: PPUSH
38281: CALL_OW 264
38285: PUSH
38286: LD_INT 3
38288: PUSH
38289: LD_INT 23
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: IN
38296: IFFALSE 38317
// points := [ 7 , 25 , 8 ] ;
38298: LD_ADDR_VAR 0 9
38302: PUSH
38303: LD_INT 7
38305: PUSH
38306: LD_INT 25
38308: PUSH
38309: LD_INT 8
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38317: LD_VAR 0 6
38321: PPUSH
38322: CALL_OW 264
38326: PUSH
38327: LD_INT 5
38329: PUSH
38330: LD_INT 27
38332: PUSH
38333: LD_INT 44
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: IN
38341: IFFALSE 38362
// points := [ 14 , 50 , 16 ] ;
38343: LD_ADDR_VAR 0 9
38347: PUSH
38348: LD_INT 14
38350: PUSH
38351: LD_INT 50
38353: PUSH
38354: LD_INT 16
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38362: LD_VAR 0 6
38366: PPUSH
38367: CALL_OW 264
38371: PUSH
38372: LD_INT 6
38374: PUSH
38375: LD_INT 46
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: IN
38382: IFFALSE 38403
// points := [ 32 , 120 , 70 ] ;
38384: LD_ADDR_VAR 0 9
38388: PUSH
38389: LD_INT 32
38391: PUSH
38392: LD_INT 120
38394: PUSH
38395: LD_INT 70
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38403: LD_VAR 0 6
38407: PPUSH
38408: CALL_OW 264
38412: PUSH
38413: LD_INT 7
38415: PUSH
38416: LD_INT 28
38418: PUSH
38419: LD_INT 45
38421: PUSH
38422: LD_INT 92
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: IN
38431: IFFALSE 38452
// points := [ 35 , 20 , 45 ] ;
38433: LD_ADDR_VAR 0 9
38437: PUSH
38438: LD_INT 35
38440: PUSH
38441: LD_INT 20
38443: PUSH
38444: LD_INT 45
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38452: LD_VAR 0 6
38456: PPUSH
38457: CALL_OW 264
38461: PUSH
38462: LD_INT 47
38464: PUSH
38465: EMPTY
38466: LIST
38467: IN
38468: IFFALSE 38489
// points := [ 67 , 45 , 75 ] ;
38470: LD_ADDR_VAR 0 9
38474: PUSH
38475: LD_INT 67
38477: PUSH
38478: LD_INT 45
38480: PUSH
38481: LD_INT 75
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38489: LD_VAR 0 6
38493: PPUSH
38494: CALL_OW 264
38498: PUSH
38499: LD_INT 26
38501: PUSH
38502: EMPTY
38503: LIST
38504: IN
38505: IFFALSE 38526
// points := [ 120 , 30 , 80 ] ;
38507: LD_ADDR_VAR 0 9
38511: PUSH
38512: LD_INT 120
38514: PUSH
38515: LD_INT 30
38517: PUSH
38518: LD_INT 80
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38526: LD_VAR 0 6
38530: PPUSH
38531: CALL_OW 264
38535: PUSH
38536: LD_INT 22
38538: PUSH
38539: EMPTY
38540: LIST
38541: IN
38542: IFFALSE 38563
// points := [ 40 , 1 , 1 ] ;
38544: LD_ADDR_VAR 0 9
38548: PUSH
38549: LD_INT 40
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38563: LD_VAR 0 6
38567: PPUSH
38568: CALL_OW 264
38572: PUSH
38573: LD_INT 29
38575: PUSH
38576: EMPTY
38577: LIST
38578: IN
38579: IFFALSE 38600
// points := [ 70 , 200 , 400 ] ;
38581: LD_ADDR_VAR 0 9
38585: PUSH
38586: LD_INT 70
38588: PUSH
38589: LD_INT 200
38591: PUSH
38592: LD_INT 400
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38600: LD_VAR 0 6
38604: PPUSH
38605: CALL_OW 264
38609: PUSH
38610: LD_INT 14
38612: PUSH
38613: LD_INT 53
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: IN
38620: IFFALSE 38641
// points := [ 40 , 10 , 20 ] ;
38622: LD_ADDR_VAR 0 9
38626: PUSH
38627: LD_INT 40
38629: PUSH
38630: LD_INT 10
38632: PUSH
38633: LD_INT 20
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38641: LD_VAR 0 6
38645: PPUSH
38646: CALL_OW 264
38650: PUSH
38651: LD_INT 9
38653: PUSH
38654: EMPTY
38655: LIST
38656: IN
38657: IFFALSE 38678
// points := [ 5 , 70 , 20 ] ;
38659: LD_ADDR_VAR 0 9
38663: PUSH
38664: LD_INT 5
38666: PUSH
38667: LD_INT 70
38669: PUSH
38670: LD_INT 20
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38678: LD_VAR 0 6
38682: PPUSH
38683: CALL_OW 264
38687: PUSH
38688: LD_INT 10
38690: PUSH
38691: EMPTY
38692: LIST
38693: IN
38694: IFFALSE 38715
// points := [ 35 , 110 , 70 ] ;
38696: LD_ADDR_VAR 0 9
38700: PUSH
38701: LD_INT 35
38703: PUSH
38704: LD_INT 110
38706: PUSH
38707: LD_INT 70
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38715: LD_VAR 0 6
38719: PPUSH
38720: CALL_OW 265
38724: PUSH
38725: LD_INT 25
38727: EQUAL
38728: IFFALSE 38749
// points := [ 80 , 65 , 100 ] ;
38730: LD_ADDR_VAR 0 9
38734: PUSH
38735: LD_INT 80
38737: PUSH
38738: LD_INT 65
38740: PUSH
38741: LD_INT 100
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38749: LD_VAR 0 6
38753: PPUSH
38754: CALL_OW 263
38758: PUSH
38759: LD_INT 1
38761: EQUAL
38762: IFFALSE 38797
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38764: LD_ADDR_VAR 0 10
38768: PUSH
38769: LD_VAR 0 10
38773: PUSH
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 311
38783: PPUSH
38784: LD_INT 3
38786: PPUSH
38787: CALL_OW 259
38791: PUSH
38792: LD_INT 4
38794: MUL
38795: MUL
38796: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38797: LD_VAR 0 6
38801: PPUSH
38802: CALL_OW 263
38806: PUSH
38807: LD_INT 2
38809: EQUAL
38810: IFFALSE 38861
// begin j := IsControledBy ( i ) ;
38812: LD_ADDR_VAR 0 7
38816: PUSH
38817: LD_VAR 0 6
38821: PPUSH
38822: CALL_OW 312
38826: ST_TO_ADDR
// if j then
38827: LD_VAR 0 7
38831: IFFALSE 38861
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38833: LD_ADDR_VAR 0 10
38837: PUSH
38838: LD_VAR 0 10
38842: PUSH
38843: LD_VAR 0 7
38847: PPUSH
38848: LD_INT 3
38850: PPUSH
38851: CALL_OW 259
38855: PUSH
38856: LD_INT 3
38858: MUL
38859: MUL
38860: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38861: LD_VAR 0 6
38865: PPUSH
38866: CALL_OW 264
38870: PUSH
38871: LD_INT 5
38873: PUSH
38874: LD_INT 6
38876: PUSH
38877: LD_INT 46
38879: PUSH
38880: LD_INT 44
38882: PUSH
38883: LD_INT 47
38885: PUSH
38886: LD_INT 45
38888: PUSH
38889: LD_INT 28
38891: PUSH
38892: LD_INT 7
38894: PUSH
38895: LD_INT 27
38897: PUSH
38898: LD_INT 29
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: IN
38913: PUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: LD_INT 52
38921: PPUSH
38922: CALL_OW 321
38926: PUSH
38927: LD_INT 2
38929: EQUAL
38930: AND
38931: IFFALSE 38948
// bpoints := bpoints * 1.2 ;
38933: LD_ADDR_VAR 0 10
38937: PUSH
38938: LD_VAR 0 10
38942: PUSH
38943: LD_REAL  1.20000000000000E+0000
38946: MUL
38947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38948: LD_VAR 0 6
38952: PPUSH
38953: CALL_OW 264
38957: PUSH
38958: LD_INT 6
38960: PUSH
38961: LD_INT 46
38963: PUSH
38964: LD_INT 47
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: IN
38972: IFFALSE 38989
// bpoints := bpoints * 1.2 ;
38974: LD_ADDR_VAR 0 10
38978: PUSH
38979: LD_VAR 0 10
38983: PUSH
38984: LD_REAL  1.20000000000000E+0000
38987: MUL
38988: ST_TO_ADDR
// end ; unit_building :
38989: GO 39003
38991: LD_INT 3
38993: DOUBLE
38994: EQUAL
38995: IFTRUE 38999
38997: GO 39002
38999: POP
// ; end ;
39000: GO 39003
39002: POP
// for j = 1 to 3 do
39003: LD_ADDR_VAR 0 7
39007: PUSH
39008: DOUBLE
39009: LD_INT 1
39011: DEC
39012: ST_TO_ADDR
39013: LD_INT 3
39015: PUSH
39016: FOR_TO
39017: IFFALSE 39070
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39019: LD_ADDR_VAR 0 5
39023: PUSH
39024: LD_VAR 0 5
39028: PPUSH
39029: LD_VAR 0 7
39033: PPUSH
39034: LD_VAR 0 5
39038: PUSH
39039: LD_VAR 0 7
39043: ARRAY
39044: PUSH
39045: LD_VAR 0 9
39049: PUSH
39050: LD_VAR 0 7
39054: ARRAY
39055: PUSH
39056: LD_VAR 0 10
39060: MUL
39061: PLUS
39062: PPUSH
39063: CALL_OW 1
39067: ST_TO_ADDR
39068: GO 39016
39070: POP
39071: POP
// end ;
39072: GO 37551
39074: POP
39075: POP
// result := Replace ( result , 4 , tmp ) ;
39076: LD_ADDR_VAR 0 5
39080: PUSH
39081: LD_VAR 0 5
39085: PPUSH
39086: LD_INT 4
39088: PPUSH
39089: LD_VAR 0 8
39093: PPUSH
39094: CALL_OW 1
39098: ST_TO_ADDR
// end ;
39099: LD_VAR 0 5
39103: RET
// export function DangerAtRange ( unit , range ) ; begin
39104: LD_INT 0
39106: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39107: LD_ADDR_VAR 0 3
39111: PUSH
39112: LD_VAR 0 1
39116: PPUSH
39117: CALL_OW 255
39121: PPUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 250
39131: PPUSH
39132: LD_VAR 0 1
39136: PPUSH
39137: CALL_OW 251
39141: PPUSH
39142: LD_VAR 0 2
39146: PPUSH
39147: CALL 37403 0 4
39151: ST_TO_ADDR
// end ;
39152: LD_VAR 0 3
39156: RET
// export function DangerInArea ( side , area ) ; begin
39157: LD_INT 0
39159: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39160: LD_ADDR_VAR 0 3
39164: PUSH
39165: LD_VAR 0 2
39169: PPUSH
39170: LD_INT 81
39172: PUSH
39173: LD_VAR 0 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PPUSH
39182: CALL_OW 70
39186: ST_TO_ADDR
// end ;
39187: LD_VAR 0 3
39191: RET
// export function IsExtension ( b ) ; begin
39192: LD_INT 0
39194: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39195: LD_ADDR_VAR 0 2
39199: PUSH
39200: LD_VAR 0 1
39204: PUSH
39205: LD_INT 23
39207: PUSH
39208: LD_INT 20
39210: PUSH
39211: LD_INT 22
39213: PUSH
39214: LD_INT 17
39216: PUSH
39217: LD_INT 24
39219: PUSH
39220: LD_INT 21
39222: PUSH
39223: LD_INT 19
39225: PUSH
39226: LD_INT 16
39228: PUSH
39229: LD_INT 25
39231: PUSH
39232: LD_INT 18
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: IN
39247: ST_TO_ADDR
// end ;
39248: LD_VAR 0 2
39252: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39253: LD_INT 0
39255: PPUSH
39256: PPUSH
39257: PPUSH
// result := [ ] ;
39258: LD_ADDR_VAR 0 4
39262: PUSH
39263: EMPTY
39264: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: LD_INT 21
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PPUSH
39285: CALL_OW 70
39289: ST_TO_ADDR
// if not tmp then
39290: LD_VAR 0 5
39294: NOT
39295: IFFALSE 39299
// exit ;
39297: GO 39363
// if checkLink then
39299: LD_VAR 0 3
39303: IFFALSE 39353
// begin for i in tmp do
39305: LD_ADDR_VAR 0 6
39309: PUSH
39310: LD_VAR 0 5
39314: PUSH
39315: FOR_IN
39316: IFFALSE 39351
// if GetBase ( i ) <> base then
39318: LD_VAR 0 6
39322: PPUSH
39323: CALL_OW 274
39327: PUSH
39328: LD_VAR 0 1
39332: NONEQUAL
39333: IFFALSE 39349
// ComLinkToBase ( base , i ) ;
39335: LD_VAR 0 1
39339: PPUSH
39340: LD_VAR 0 6
39344: PPUSH
39345: CALL_OW 169
39349: GO 39315
39351: POP
39352: POP
// end ; result := tmp ;
39353: LD_ADDR_VAR 0 4
39357: PUSH
39358: LD_VAR 0 5
39362: ST_TO_ADDR
// end ;
39363: LD_VAR 0 4
39367: RET
// export function ComComplete ( units , b ) ; var i ; begin
39368: LD_INT 0
39370: PPUSH
39371: PPUSH
// if not units then
39372: LD_VAR 0 1
39376: NOT
39377: IFFALSE 39381
// exit ;
39379: GO 39471
// for i in units do
39381: LD_ADDR_VAR 0 4
39385: PUSH
39386: LD_VAR 0 1
39390: PUSH
39391: FOR_IN
39392: IFFALSE 39469
// if BuildingStatus ( b ) = bs_build then
39394: LD_VAR 0 2
39398: PPUSH
39399: CALL_OW 461
39403: PUSH
39404: LD_INT 1
39406: EQUAL
39407: IFFALSE 39467
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39409: LD_VAR 0 4
39413: PPUSH
39414: LD_STRING h
39416: PUSH
39417: LD_VAR 0 2
39421: PPUSH
39422: CALL_OW 250
39426: PUSH
39427: LD_VAR 0 2
39431: PPUSH
39432: CALL_OW 251
39436: PUSH
39437: LD_VAR 0 2
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: PPUSH
39463: CALL_OW 446
39467: GO 39391
39469: POP
39470: POP
// end ;
39471: LD_VAR 0 3
39475: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39476: LD_INT 0
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39484: LD_VAR 0 1
39488: NOT
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 263
39499: PUSH
39500: LD_INT 2
39502: NONEQUAL
39503: OR
39504: IFFALSE 39508
// exit ;
39506: GO 39824
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39508: LD_ADDR_VAR 0 6
39512: PUSH
39513: LD_INT 22
39515: PUSH
39516: LD_VAR 0 1
39520: PPUSH
39521: CALL_OW 255
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 30
39535: PUSH
39536: LD_INT 36
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 34
39545: PUSH
39546: LD_INT 31
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PPUSH
39562: CALL_OW 69
39566: ST_TO_ADDR
// if not tmp then
39567: LD_VAR 0 6
39571: NOT
39572: IFFALSE 39576
// exit ;
39574: GO 39824
// result := [ ] ;
39576: LD_ADDR_VAR 0 2
39580: PUSH
39581: EMPTY
39582: ST_TO_ADDR
// for i in tmp do
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_VAR 0 6
39592: PUSH
39593: FOR_IN
39594: IFFALSE 39665
// begin t := UnitsInside ( i ) ;
39596: LD_ADDR_VAR 0 4
39600: PUSH
39601: LD_VAR 0 3
39605: PPUSH
39606: CALL_OW 313
39610: ST_TO_ADDR
// if t then
39611: LD_VAR 0 4
39615: IFFALSE 39663
// for j in t do
39617: LD_ADDR_VAR 0 7
39621: PUSH
39622: LD_VAR 0 4
39626: PUSH
39627: FOR_IN
39628: IFFALSE 39661
// result := Replace ( result , result + 1 , j ) ;
39630: LD_ADDR_VAR 0 2
39634: PUSH
39635: LD_VAR 0 2
39639: PPUSH
39640: LD_VAR 0 2
39644: PUSH
39645: LD_INT 1
39647: PLUS
39648: PPUSH
39649: LD_VAR 0 7
39653: PPUSH
39654: CALL_OW 1
39658: ST_TO_ADDR
39659: GO 39627
39661: POP
39662: POP
// end ;
39663: GO 39593
39665: POP
39666: POP
// if not result then
39667: LD_VAR 0 2
39671: NOT
39672: IFFALSE 39676
// exit ;
39674: GO 39824
// mech := result [ 1 ] ;
39676: LD_ADDR_VAR 0 5
39680: PUSH
39681: LD_VAR 0 2
39685: PUSH
39686: LD_INT 1
39688: ARRAY
39689: ST_TO_ADDR
// if result > 1 then
39690: LD_VAR 0 2
39694: PUSH
39695: LD_INT 1
39697: GREATER
39698: IFFALSE 39810
// begin for i = 2 to result do
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: DOUBLE
39706: LD_INT 2
39708: DEC
39709: ST_TO_ADDR
39710: LD_VAR 0 2
39714: PUSH
39715: FOR_TO
39716: IFFALSE 39808
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39718: LD_ADDR_VAR 0 4
39722: PUSH
39723: LD_VAR 0 2
39727: PUSH
39728: LD_VAR 0 3
39732: ARRAY
39733: PPUSH
39734: LD_INT 3
39736: PPUSH
39737: CALL_OW 259
39741: PUSH
39742: LD_VAR 0 2
39746: PUSH
39747: LD_VAR 0 3
39751: ARRAY
39752: PPUSH
39753: CALL_OW 432
39757: MINUS
39758: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39759: LD_VAR 0 4
39763: PUSH
39764: LD_VAR 0 5
39768: PPUSH
39769: LD_INT 3
39771: PPUSH
39772: CALL_OW 259
39776: PUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: CALL_OW 432
39786: MINUS
39787: GREATEREQUAL
39788: IFFALSE 39806
// mech := result [ i ] ;
39790: LD_ADDR_VAR 0 5
39794: PUSH
39795: LD_VAR 0 2
39799: PUSH
39800: LD_VAR 0 3
39804: ARRAY
39805: ST_TO_ADDR
// end ;
39806: GO 39715
39808: POP
39809: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39810: LD_VAR 0 1
39814: PPUSH
39815: LD_VAR 0 5
39819: PPUSH
39820: CALL_OW 135
// end ;
39824: LD_VAR 0 2
39828: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39829: LD_INT 0
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
// result := [ ] ;
39844: LD_ADDR_VAR 0 7
39848: PUSH
39849: EMPTY
39850: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39851: LD_VAR 0 1
39855: PPUSH
39856: CALL_OW 266
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: IN
39871: NOT
39872: IFFALSE 39876
// exit ;
39874: GO 41510
// if name then
39876: LD_VAR 0 3
39880: IFFALSE 39896
// SetBName ( base_dep , name ) ;
39882: LD_VAR 0 1
39886: PPUSH
39887: LD_VAR 0 3
39891: PPUSH
39892: CALL_OW 500
// base := GetBase ( base_dep ) ;
39896: LD_ADDR_VAR 0 15
39900: PUSH
39901: LD_VAR 0 1
39905: PPUSH
39906: CALL_OW 274
39910: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39911: LD_ADDR_VAR 0 16
39915: PUSH
39916: LD_VAR 0 1
39920: PPUSH
39921: CALL_OW 255
39925: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39926: LD_ADDR_VAR 0 17
39930: PUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL_OW 248
39940: ST_TO_ADDR
// if sources then
39941: LD_VAR 0 5
39945: IFFALSE 39992
// for i = 1 to 3 do
39947: LD_ADDR_VAR 0 8
39951: PUSH
39952: DOUBLE
39953: LD_INT 1
39955: DEC
39956: ST_TO_ADDR
39957: LD_INT 3
39959: PUSH
39960: FOR_TO
39961: IFFALSE 39990
// AddResourceType ( base , i , sources [ i ] ) ;
39963: LD_VAR 0 15
39967: PPUSH
39968: LD_VAR 0 8
39972: PPUSH
39973: LD_VAR 0 5
39977: PUSH
39978: LD_VAR 0 8
39982: ARRAY
39983: PPUSH
39984: CALL_OW 276
39988: GO 39960
39990: POP
39991: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39992: LD_ADDR_VAR 0 18
39996: PUSH
39997: LD_VAR 0 15
40001: PPUSH
40002: LD_VAR 0 2
40006: PPUSH
40007: LD_INT 1
40009: PPUSH
40010: CALL 39253 0 3
40014: ST_TO_ADDR
// InitHc ;
40015: CALL_OW 19
// InitUc ;
40019: CALL_OW 18
// uc_side := side ;
40023: LD_ADDR_OWVAR 20
40027: PUSH
40028: LD_VAR 0 16
40032: ST_TO_ADDR
// uc_nation := nation ;
40033: LD_ADDR_OWVAR 21
40037: PUSH
40038: LD_VAR 0 17
40042: ST_TO_ADDR
// if buildings then
40043: LD_VAR 0 18
40047: IFFALSE 41369
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40049: LD_ADDR_VAR 0 19
40053: PUSH
40054: LD_VAR 0 18
40058: PPUSH
40059: LD_INT 2
40061: PUSH
40062: LD_INT 30
40064: PUSH
40065: LD_INT 29
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: LD_INT 30
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: PPUSH
40087: CALL_OW 72
40091: ST_TO_ADDR
// if tmp then
40092: LD_VAR 0 19
40096: IFFALSE 40144
// for i in tmp do
40098: LD_ADDR_VAR 0 8
40102: PUSH
40103: LD_VAR 0 19
40107: PUSH
40108: FOR_IN
40109: IFFALSE 40142
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40111: LD_VAR 0 8
40115: PPUSH
40116: CALL_OW 250
40120: PPUSH
40121: LD_VAR 0 8
40125: PPUSH
40126: CALL_OW 251
40130: PPUSH
40131: LD_VAR 0 16
40135: PPUSH
40136: CALL_OW 441
40140: GO 40108
40142: POP
40143: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40144: LD_VAR 0 18
40148: PPUSH
40149: LD_INT 2
40151: PUSH
40152: LD_INT 30
40154: PUSH
40155: LD_INT 32
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 30
40164: PUSH
40165: LD_INT 33
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: PPUSH
40177: CALL_OW 72
40181: IFFALSE 40269
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40183: LD_ADDR_VAR 0 8
40187: PUSH
40188: LD_VAR 0 18
40192: PPUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 30
40198: PUSH
40199: LD_INT 32
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 30
40208: PUSH
40209: LD_INT 33
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: PPUSH
40221: CALL_OW 72
40225: PUSH
40226: FOR_IN
40227: IFFALSE 40267
// begin if not GetBWeapon ( i ) then
40229: LD_VAR 0 8
40233: PPUSH
40234: CALL_OW 269
40238: NOT
40239: IFFALSE 40265
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40241: LD_VAR 0 8
40245: PPUSH
40246: LD_VAR 0 8
40250: PPUSH
40251: LD_VAR 0 2
40255: PPUSH
40256: CALL 41515 0 2
40260: PPUSH
40261: CALL_OW 431
// end ;
40265: GO 40226
40267: POP
40268: POP
// end ; for i = 1 to personel do
40269: LD_ADDR_VAR 0 8
40273: PUSH
40274: DOUBLE
40275: LD_INT 1
40277: DEC
40278: ST_TO_ADDR
40279: LD_VAR 0 6
40283: PUSH
40284: FOR_TO
40285: IFFALSE 41349
// begin if i > 4 then
40287: LD_VAR 0 8
40291: PUSH
40292: LD_INT 4
40294: GREATER
40295: IFFALSE 40299
// break ;
40297: GO 41349
// case i of 1 :
40299: LD_VAR 0 8
40303: PUSH
40304: LD_INT 1
40306: DOUBLE
40307: EQUAL
40308: IFTRUE 40312
40310: GO 40392
40312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40313: LD_ADDR_VAR 0 12
40317: PUSH
40318: LD_VAR 0 18
40322: PPUSH
40323: LD_INT 22
40325: PUSH
40326: LD_VAR 0 16
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 58
40337: PUSH
40338: EMPTY
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: LD_INT 30
40346: PUSH
40347: LD_INT 32
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 30
40356: PUSH
40357: LD_INT 4
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 30
40366: PUSH
40367: LD_INT 5
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: LIST
40384: PPUSH
40385: CALL_OW 72
40389: ST_TO_ADDR
40390: GO 40614
40392: LD_INT 2
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40462
40400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40401: LD_ADDR_VAR 0 12
40405: PUSH
40406: LD_VAR 0 18
40410: PPUSH
40411: LD_INT 22
40413: PUSH
40414: LD_VAR 0 16
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 30
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 30
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PPUSH
40455: CALL_OW 72
40459: ST_TO_ADDR
40460: GO 40614
40462: LD_INT 3
40464: DOUBLE
40465: EQUAL
40466: IFTRUE 40470
40468: GO 40532
40470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40471: LD_ADDR_VAR 0 12
40475: PUSH
40476: LD_VAR 0 18
40480: PPUSH
40481: LD_INT 22
40483: PUSH
40484: LD_VAR 0 16
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: LD_INT 30
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 30
40508: PUSH
40509: LD_INT 3
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PPUSH
40525: CALL_OW 72
40529: ST_TO_ADDR
40530: GO 40614
40532: LD_INT 4
40534: DOUBLE
40535: EQUAL
40536: IFTRUE 40540
40538: GO 40613
40540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40541: LD_ADDR_VAR 0 12
40545: PUSH
40546: LD_VAR 0 18
40550: PPUSH
40551: LD_INT 22
40553: PUSH
40554: LD_VAR 0 16
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 30
40568: PUSH
40569: LD_INT 6
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 30
40578: PUSH
40579: LD_INT 7
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 30
40588: PUSH
40589: LD_INT 8
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PPUSH
40606: CALL_OW 72
40610: ST_TO_ADDR
40611: GO 40614
40613: POP
// if i = 1 then
40614: LD_VAR 0 8
40618: PUSH
40619: LD_INT 1
40621: EQUAL
40622: IFFALSE 40733
// begin tmp := [ ] ;
40624: LD_ADDR_VAR 0 19
40628: PUSH
40629: EMPTY
40630: ST_TO_ADDR
// for j in f do
40631: LD_ADDR_VAR 0 9
40635: PUSH
40636: LD_VAR 0 12
40640: PUSH
40641: FOR_IN
40642: IFFALSE 40715
// if GetBType ( j ) = b_bunker then
40644: LD_VAR 0 9
40648: PPUSH
40649: CALL_OW 266
40653: PUSH
40654: LD_INT 32
40656: EQUAL
40657: IFFALSE 40684
// tmp := Insert ( tmp , 1 , j ) else
40659: LD_ADDR_VAR 0 19
40663: PUSH
40664: LD_VAR 0 19
40668: PPUSH
40669: LD_INT 1
40671: PPUSH
40672: LD_VAR 0 9
40676: PPUSH
40677: CALL_OW 2
40681: ST_TO_ADDR
40682: GO 40713
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40684: LD_ADDR_VAR 0 19
40688: PUSH
40689: LD_VAR 0 19
40693: PPUSH
40694: LD_VAR 0 19
40698: PUSH
40699: LD_INT 1
40701: PLUS
40702: PPUSH
40703: LD_VAR 0 9
40707: PPUSH
40708: CALL_OW 2
40712: ST_TO_ADDR
40713: GO 40641
40715: POP
40716: POP
// if tmp then
40717: LD_VAR 0 19
40721: IFFALSE 40733
// f := tmp ;
40723: LD_ADDR_VAR 0 12
40727: PUSH
40728: LD_VAR 0 19
40732: ST_TO_ADDR
// end ; x := personel [ i ] ;
40733: LD_ADDR_VAR 0 13
40737: PUSH
40738: LD_VAR 0 6
40742: PUSH
40743: LD_VAR 0 8
40747: ARRAY
40748: ST_TO_ADDR
// if x = - 1 then
40749: LD_VAR 0 13
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: EQUAL
40758: IFFALSE 40967
// begin for j in f do
40760: LD_ADDR_VAR 0 9
40764: PUSH
40765: LD_VAR 0 12
40769: PUSH
40770: FOR_IN
40771: IFFALSE 40963
// repeat InitHc ;
40773: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40777: LD_VAR 0 9
40781: PPUSH
40782: CALL_OW 266
40786: PUSH
40787: LD_INT 5
40789: EQUAL
40790: IFFALSE 40860
// begin if UnitsInside ( j ) < 3 then
40792: LD_VAR 0 9
40796: PPUSH
40797: CALL_OW 313
40801: PUSH
40802: LD_INT 3
40804: LESS
40805: IFFALSE 40841
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40807: LD_INT 0
40809: PPUSH
40810: LD_INT 5
40812: PUSH
40813: LD_INT 8
40815: PUSH
40816: LD_INT 9
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: PUSH
40824: LD_VAR 0 17
40828: ARRAY
40829: PPUSH
40830: LD_VAR 0 4
40834: PPUSH
40835: CALL_OW 380
40839: GO 40858
// PrepareHuman ( false , i , skill ) ;
40841: LD_INT 0
40843: PPUSH
40844: LD_VAR 0 8
40848: PPUSH
40849: LD_VAR 0 4
40853: PPUSH
40854: CALL_OW 380
// end else
40858: GO 40877
// PrepareHuman ( false , i , skill ) ;
40860: LD_INT 0
40862: PPUSH
40863: LD_VAR 0 8
40867: PPUSH
40868: LD_VAR 0 4
40872: PPUSH
40873: CALL_OW 380
// un := CreateHuman ;
40877: LD_ADDR_VAR 0 14
40881: PUSH
40882: CALL_OW 44
40886: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40887: LD_ADDR_VAR 0 7
40891: PUSH
40892: LD_VAR 0 7
40896: PPUSH
40897: LD_INT 1
40899: PPUSH
40900: LD_VAR 0 14
40904: PPUSH
40905: CALL_OW 2
40909: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40910: LD_VAR 0 14
40914: PPUSH
40915: LD_VAR 0 9
40919: PPUSH
40920: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40924: LD_VAR 0 9
40928: PPUSH
40929: CALL_OW 313
40933: PUSH
40934: LD_INT 6
40936: EQUAL
40937: PUSH
40938: LD_VAR 0 9
40942: PPUSH
40943: CALL_OW 266
40947: PUSH
40948: LD_INT 32
40950: PUSH
40951: LD_INT 31
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: IN
40958: OR
40959: IFFALSE 40773
40961: GO 40770
40963: POP
40964: POP
// end else
40965: GO 41347
// for j = 1 to x do
40967: LD_ADDR_VAR 0 9
40971: PUSH
40972: DOUBLE
40973: LD_INT 1
40975: DEC
40976: ST_TO_ADDR
40977: LD_VAR 0 13
40981: PUSH
40982: FOR_TO
40983: IFFALSE 41345
// begin InitHc ;
40985: CALL_OW 19
// if not f then
40989: LD_VAR 0 12
40993: NOT
40994: IFFALSE 41083
// begin PrepareHuman ( false , i , skill ) ;
40996: LD_INT 0
40998: PPUSH
40999: LD_VAR 0 8
41003: PPUSH
41004: LD_VAR 0 4
41008: PPUSH
41009: CALL_OW 380
// un := CreateHuman ;
41013: LD_ADDR_VAR 0 14
41017: PUSH
41018: CALL_OW 44
41022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41023: LD_ADDR_VAR 0 7
41027: PUSH
41028: LD_VAR 0 7
41032: PPUSH
41033: LD_INT 1
41035: PPUSH
41036: LD_VAR 0 14
41040: PPUSH
41041: CALL_OW 2
41045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41046: LD_VAR 0 14
41050: PPUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 250
41060: PPUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 251
41070: PPUSH
41071: LD_INT 10
41073: PPUSH
41074: LD_INT 0
41076: PPUSH
41077: CALL_OW 50
// continue ;
41081: GO 40982
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41083: LD_VAR 0 12
41087: PUSH
41088: LD_INT 1
41090: ARRAY
41091: PPUSH
41092: CALL_OW 313
41096: PUSH
41097: LD_VAR 0 12
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PPUSH
41106: CALL_OW 266
41110: PUSH
41111: LD_INT 32
41113: PUSH
41114: LD_INT 31
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: IN
41121: AND
41122: PUSH
41123: LD_VAR 0 12
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PPUSH
41132: CALL_OW 313
41136: PUSH
41137: LD_INT 6
41139: EQUAL
41140: OR
41141: IFFALSE 41161
// f := Delete ( f , 1 ) ;
41143: LD_ADDR_VAR 0 12
41147: PUSH
41148: LD_VAR 0 12
41152: PPUSH
41153: LD_INT 1
41155: PPUSH
41156: CALL_OW 3
41160: ST_TO_ADDR
// if not f then
41161: LD_VAR 0 12
41165: NOT
41166: IFFALSE 41184
// begin x := x + 2 ;
41168: LD_ADDR_VAR 0 13
41172: PUSH
41173: LD_VAR 0 13
41177: PUSH
41178: LD_INT 2
41180: PLUS
41181: ST_TO_ADDR
// continue ;
41182: GO 40982
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41184: LD_VAR 0 12
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: PPUSH
41193: CALL_OW 266
41197: PUSH
41198: LD_INT 5
41200: EQUAL
41201: IFFALSE 41275
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41203: LD_VAR 0 12
41207: PUSH
41208: LD_INT 1
41210: ARRAY
41211: PPUSH
41212: CALL_OW 313
41216: PUSH
41217: LD_INT 3
41219: LESS
41220: IFFALSE 41256
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41222: LD_INT 0
41224: PPUSH
41225: LD_INT 5
41227: PUSH
41228: LD_INT 8
41230: PUSH
41231: LD_INT 9
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: PUSH
41239: LD_VAR 0 17
41243: ARRAY
41244: PPUSH
41245: LD_VAR 0 4
41249: PPUSH
41250: CALL_OW 380
41254: GO 41273
// PrepareHuman ( false , i , skill ) ;
41256: LD_INT 0
41258: PPUSH
41259: LD_VAR 0 8
41263: PPUSH
41264: LD_VAR 0 4
41268: PPUSH
41269: CALL_OW 380
// end else
41273: GO 41292
// PrepareHuman ( false , i , skill ) ;
41275: LD_INT 0
41277: PPUSH
41278: LD_VAR 0 8
41282: PPUSH
41283: LD_VAR 0 4
41287: PPUSH
41288: CALL_OW 380
// un := CreateHuman ;
41292: LD_ADDR_VAR 0 14
41296: PUSH
41297: CALL_OW 44
41301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41302: LD_ADDR_VAR 0 7
41306: PUSH
41307: LD_VAR 0 7
41311: PPUSH
41312: LD_INT 1
41314: PPUSH
41315: LD_VAR 0 14
41319: PPUSH
41320: CALL_OW 2
41324: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41325: LD_VAR 0 14
41329: PPUSH
41330: LD_VAR 0 12
41334: PUSH
41335: LD_INT 1
41337: ARRAY
41338: PPUSH
41339: CALL_OW 52
// end ;
41343: GO 40982
41345: POP
41346: POP
// end ;
41347: GO 40284
41349: POP
41350: POP
// result := result ^ buildings ;
41351: LD_ADDR_VAR 0 7
41355: PUSH
41356: LD_VAR 0 7
41360: PUSH
41361: LD_VAR 0 18
41365: ADD
41366: ST_TO_ADDR
// end else
41367: GO 41510
// begin for i = 1 to personel do
41369: LD_ADDR_VAR 0 8
41373: PUSH
41374: DOUBLE
41375: LD_INT 1
41377: DEC
41378: ST_TO_ADDR
41379: LD_VAR 0 6
41383: PUSH
41384: FOR_TO
41385: IFFALSE 41508
// begin if i > 4 then
41387: LD_VAR 0 8
41391: PUSH
41392: LD_INT 4
41394: GREATER
41395: IFFALSE 41399
// break ;
41397: GO 41508
// x := personel [ i ] ;
41399: LD_ADDR_VAR 0 13
41403: PUSH
41404: LD_VAR 0 6
41408: PUSH
41409: LD_VAR 0 8
41413: ARRAY
41414: ST_TO_ADDR
// if x = - 1 then
41415: LD_VAR 0 13
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: EQUAL
41424: IFFALSE 41428
// continue ;
41426: GO 41384
// PrepareHuman ( false , i , skill ) ;
41428: LD_INT 0
41430: PPUSH
41431: LD_VAR 0 8
41435: PPUSH
41436: LD_VAR 0 4
41440: PPUSH
41441: CALL_OW 380
// un := CreateHuman ;
41445: LD_ADDR_VAR 0 14
41449: PUSH
41450: CALL_OW 44
41454: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41455: LD_VAR 0 14
41459: PPUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 250
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: CALL_OW 251
41479: PPUSH
41480: LD_INT 10
41482: PPUSH
41483: LD_INT 0
41485: PPUSH
41486: CALL_OW 50
// result := result ^ un ;
41490: LD_ADDR_VAR 0 7
41494: PUSH
41495: LD_VAR 0 7
41499: PUSH
41500: LD_VAR 0 14
41504: ADD
41505: ST_TO_ADDR
// end ;
41506: GO 41384
41508: POP
41509: POP
// end ; end ;
41510: LD_VAR 0 7
41514: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41515: LD_INT 0
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
// result := false ;
41533: LD_ADDR_VAR 0 3
41537: PUSH
41538: LD_INT 0
41540: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41541: LD_VAR 0 1
41545: NOT
41546: PUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 266
41556: PUSH
41557: LD_INT 32
41559: PUSH
41560: LD_INT 33
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: IN
41567: NOT
41568: OR
41569: IFFALSE 41573
// exit ;
41571: GO 42682
// nat := GetNation ( tower ) ;
41573: LD_ADDR_VAR 0 12
41577: PUSH
41578: LD_VAR 0 1
41582: PPUSH
41583: CALL_OW 248
41587: ST_TO_ADDR
// side := GetSide ( tower ) ;
41588: LD_ADDR_VAR 0 16
41592: PUSH
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 255
41602: ST_TO_ADDR
// x := GetX ( tower ) ;
41603: LD_ADDR_VAR 0 10
41607: PUSH
41608: LD_VAR 0 1
41612: PPUSH
41613: CALL_OW 250
41617: ST_TO_ADDR
// y := GetY ( tower ) ;
41618: LD_ADDR_VAR 0 11
41622: PUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 251
41632: ST_TO_ADDR
// if not x or not y then
41633: LD_VAR 0 10
41637: NOT
41638: PUSH
41639: LD_VAR 0 11
41643: NOT
41644: OR
41645: IFFALSE 41649
// exit ;
41647: GO 42682
// weapon := 0 ;
41649: LD_ADDR_VAR 0 18
41653: PUSH
41654: LD_INT 0
41656: ST_TO_ADDR
// fac_list := [ ] ;
41657: LD_ADDR_VAR 0 17
41661: PUSH
41662: EMPTY
41663: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41664: LD_ADDR_VAR 0 6
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 274
41678: PPUSH
41679: LD_VAR 0 2
41683: PPUSH
41684: LD_INT 0
41686: PPUSH
41687: CALL 39253 0 3
41691: PPUSH
41692: LD_INT 30
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PPUSH
41702: CALL_OW 72
41706: ST_TO_ADDR
// if not factories then
41707: LD_VAR 0 6
41711: NOT
41712: IFFALSE 41716
// exit ;
41714: GO 42682
// for i in factories do
41716: LD_ADDR_VAR 0 8
41720: PUSH
41721: LD_VAR 0 6
41725: PUSH
41726: FOR_IN
41727: IFFALSE 41752
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41729: LD_ADDR_VAR 0 17
41733: PUSH
41734: LD_VAR 0 17
41738: PUSH
41739: LD_VAR 0 8
41743: PPUSH
41744: CALL_OW 478
41748: UNION
41749: ST_TO_ADDR
41750: GO 41726
41752: POP
41753: POP
// if not fac_list then
41754: LD_VAR 0 17
41758: NOT
41759: IFFALSE 41763
// exit ;
41761: GO 42682
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41763: LD_ADDR_VAR 0 5
41767: PUSH
41768: LD_INT 4
41770: PUSH
41771: LD_INT 5
41773: PUSH
41774: LD_INT 9
41776: PUSH
41777: LD_INT 10
41779: PUSH
41780: LD_INT 6
41782: PUSH
41783: LD_INT 7
41785: PUSH
41786: LD_INT 11
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 27
41800: PUSH
41801: LD_INT 28
41803: PUSH
41804: LD_INT 26
41806: PUSH
41807: LD_INT 30
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 43
41818: PUSH
41819: LD_INT 44
41821: PUSH
41822: LD_INT 46
41824: PUSH
41825: LD_INT 45
41827: PUSH
41828: LD_INT 47
41830: PUSH
41831: LD_INT 49
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: PUSH
41847: LD_VAR 0 12
41851: ARRAY
41852: ST_TO_ADDR
// list := list isect fac_list ;
41853: LD_ADDR_VAR 0 5
41857: PUSH
41858: LD_VAR 0 5
41862: PUSH
41863: LD_VAR 0 17
41867: ISECT
41868: ST_TO_ADDR
// if not list then
41869: LD_VAR 0 5
41873: NOT
41874: IFFALSE 41878
// exit ;
41876: GO 42682
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41878: LD_VAR 0 12
41882: PUSH
41883: LD_INT 3
41885: EQUAL
41886: PUSH
41887: LD_INT 49
41889: PUSH
41890: LD_VAR 0 5
41894: IN
41895: AND
41896: PUSH
41897: LD_INT 31
41899: PPUSH
41900: LD_VAR 0 16
41904: PPUSH
41905: CALL_OW 321
41909: PUSH
41910: LD_INT 2
41912: EQUAL
41913: AND
41914: IFFALSE 41974
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41916: LD_INT 22
41918: PUSH
41919: LD_VAR 0 16
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 35
41930: PUSH
41931: LD_INT 49
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 91
41940: PUSH
41941: LD_VAR 0 1
41945: PUSH
41946: LD_INT 10
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: PPUSH
41959: CALL_OW 69
41963: NOT
41964: IFFALSE 41974
// weapon := ru_time_lapser ;
41966: LD_ADDR_VAR 0 18
41970: PUSH
41971: LD_INT 49
41973: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41974: LD_VAR 0 12
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: IN
41989: PUSH
41990: LD_INT 11
41992: PUSH
41993: LD_VAR 0 5
41997: IN
41998: PUSH
41999: LD_INT 30
42001: PUSH
42002: LD_VAR 0 5
42006: IN
42007: OR
42008: AND
42009: PUSH
42010: LD_INT 6
42012: PPUSH
42013: LD_VAR 0 16
42017: PPUSH
42018: CALL_OW 321
42022: PUSH
42023: LD_INT 2
42025: EQUAL
42026: AND
42027: IFFALSE 42192
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42029: LD_INT 22
42031: PUSH
42032: LD_VAR 0 16
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 35
42046: PUSH
42047: LD_INT 11
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 35
42056: PUSH
42057: LD_INT 30
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 91
42071: PUSH
42072: LD_VAR 0 1
42076: PUSH
42077: LD_INT 18
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: PPUSH
42090: CALL_OW 69
42094: NOT
42095: PUSH
42096: LD_INT 22
42098: PUSH
42099: LD_VAR 0 16
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 30
42113: PUSH
42114: LD_INT 32
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 30
42123: PUSH
42124: LD_INT 33
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 91
42138: PUSH
42139: LD_VAR 0 1
42143: PUSH
42144: LD_INT 12
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: PUSH
42157: EMPTY
42158: LIST
42159: PPUSH
42160: CALL_OW 69
42164: PUSH
42165: LD_INT 2
42167: GREATER
42168: AND
42169: IFFALSE 42192
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42171: LD_ADDR_VAR 0 18
42175: PUSH
42176: LD_INT 11
42178: PUSH
42179: LD_INT 30
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_VAR 0 12
42190: ARRAY
42191: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42192: LD_VAR 0 18
42196: NOT
42197: PUSH
42198: LD_INT 40
42200: PPUSH
42201: LD_VAR 0 16
42205: PPUSH
42206: CALL_OW 321
42210: PUSH
42211: LD_INT 2
42213: EQUAL
42214: AND
42215: PUSH
42216: LD_INT 7
42218: PUSH
42219: LD_VAR 0 5
42223: IN
42224: PUSH
42225: LD_INT 28
42227: PUSH
42228: LD_VAR 0 5
42232: IN
42233: OR
42234: PUSH
42235: LD_INT 45
42237: PUSH
42238: LD_VAR 0 5
42242: IN
42243: OR
42244: AND
42245: IFFALSE 42499
// begin hex := GetHexInfo ( x , y ) ;
42247: LD_ADDR_VAR 0 4
42251: PUSH
42252: LD_VAR 0 10
42256: PPUSH
42257: LD_VAR 0 11
42261: PPUSH
42262: CALL_OW 546
42266: ST_TO_ADDR
// if hex [ 1 ] then
42267: LD_VAR 0 4
42271: PUSH
42272: LD_INT 1
42274: ARRAY
42275: IFFALSE 42279
// exit ;
42277: GO 42682
// height := hex [ 2 ] ;
42279: LD_ADDR_VAR 0 15
42283: PUSH
42284: LD_VAR 0 4
42288: PUSH
42289: LD_INT 2
42291: ARRAY
42292: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42293: LD_ADDR_VAR 0 14
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 3
42306: PUSH
42307: LD_INT 5
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: ST_TO_ADDR
// for i in tmp do
42316: LD_ADDR_VAR 0 8
42320: PUSH
42321: LD_VAR 0 14
42325: PUSH
42326: FOR_IN
42327: IFFALSE 42497
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42329: LD_ADDR_VAR 0 9
42333: PUSH
42334: LD_VAR 0 10
42338: PPUSH
42339: LD_VAR 0 8
42343: PPUSH
42344: LD_INT 5
42346: PPUSH
42347: CALL_OW 272
42351: PUSH
42352: LD_VAR 0 11
42356: PPUSH
42357: LD_VAR 0 8
42361: PPUSH
42362: LD_INT 5
42364: PPUSH
42365: CALL_OW 273
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42374: LD_VAR 0 9
42378: PUSH
42379: LD_INT 1
42381: ARRAY
42382: PPUSH
42383: LD_VAR 0 9
42387: PUSH
42388: LD_INT 2
42390: ARRAY
42391: PPUSH
42392: CALL_OW 488
42396: IFFALSE 42495
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42398: LD_ADDR_VAR 0 4
42402: PUSH
42403: LD_VAR 0 9
42407: PUSH
42408: LD_INT 1
42410: ARRAY
42411: PPUSH
42412: LD_VAR 0 9
42416: PUSH
42417: LD_INT 2
42419: ARRAY
42420: PPUSH
42421: CALL_OW 546
42425: ST_TO_ADDR
// if hex [ 1 ] then
42426: LD_VAR 0 4
42430: PUSH
42431: LD_INT 1
42433: ARRAY
42434: IFFALSE 42438
// continue ;
42436: GO 42326
// h := hex [ 2 ] ;
42438: LD_ADDR_VAR 0 13
42442: PUSH
42443: LD_VAR 0 4
42447: PUSH
42448: LD_INT 2
42450: ARRAY
42451: ST_TO_ADDR
// if h + 7 < height then
42452: LD_VAR 0 13
42456: PUSH
42457: LD_INT 7
42459: PLUS
42460: PUSH
42461: LD_VAR 0 15
42465: LESS
42466: IFFALSE 42495
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42468: LD_ADDR_VAR 0 18
42472: PUSH
42473: LD_INT 7
42475: PUSH
42476: LD_INT 28
42478: PUSH
42479: LD_INT 45
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: PUSH
42487: LD_VAR 0 12
42491: ARRAY
42492: ST_TO_ADDR
// break ;
42493: GO 42497
// end ; end ; end ;
42495: GO 42326
42497: POP
42498: POP
// end ; if not weapon then
42499: LD_VAR 0 18
42503: NOT
42504: IFFALSE 42564
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42506: LD_ADDR_VAR 0 5
42510: PUSH
42511: LD_VAR 0 5
42515: PUSH
42516: LD_INT 11
42518: PUSH
42519: LD_INT 30
42521: PUSH
42522: LD_INT 49
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: DIFF
42530: ST_TO_ADDR
// if not list then
42531: LD_VAR 0 5
42535: NOT
42536: IFFALSE 42540
// exit ;
42538: GO 42682
// weapon := list [ rand ( 1 , list ) ] ;
42540: LD_ADDR_VAR 0 18
42544: PUSH
42545: LD_VAR 0 5
42549: PUSH
42550: LD_INT 1
42552: PPUSH
42553: LD_VAR 0 5
42557: PPUSH
42558: CALL_OW 12
42562: ARRAY
42563: ST_TO_ADDR
// end ; if weapon then
42564: LD_VAR 0 18
42568: IFFALSE 42682
// begin tmp := CostOfWeapon ( weapon ) ;
42570: LD_ADDR_VAR 0 14
42574: PUSH
42575: LD_VAR 0 18
42579: PPUSH
42580: CALL_OW 451
42584: ST_TO_ADDR
// j := GetBase ( tower ) ;
42585: LD_ADDR_VAR 0 9
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: CALL_OW 274
42599: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42600: LD_VAR 0 9
42604: PPUSH
42605: LD_INT 1
42607: PPUSH
42608: CALL_OW 275
42612: PUSH
42613: LD_VAR 0 14
42617: PUSH
42618: LD_INT 1
42620: ARRAY
42621: GREATEREQUAL
42622: PUSH
42623: LD_VAR 0 9
42627: PPUSH
42628: LD_INT 2
42630: PPUSH
42631: CALL_OW 275
42635: PUSH
42636: LD_VAR 0 14
42640: PUSH
42641: LD_INT 2
42643: ARRAY
42644: GREATEREQUAL
42645: AND
42646: PUSH
42647: LD_VAR 0 9
42651: PPUSH
42652: LD_INT 3
42654: PPUSH
42655: CALL_OW 275
42659: PUSH
42660: LD_VAR 0 14
42664: PUSH
42665: LD_INT 3
42667: ARRAY
42668: GREATEREQUAL
42669: AND
42670: IFFALSE 42682
// result := weapon ;
42672: LD_ADDR_VAR 0 3
42676: PUSH
42677: LD_VAR 0 18
42681: ST_TO_ADDR
// end ; end ;
42682: LD_VAR 0 3
42686: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42687: LD_INT 0
42689: PPUSH
42690: PPUSH
// result := true ;
42691: LD_ADDR_VAR 0 3
42695: PUSH
42696: LD_INT 1
42698: ST_TO_ADDR
// if array1 = array2 then
42699: LD_VAR 0 1
42703: PUSH
42704: LD_VAR 0 2
42708: EQUAL
42709: IFFALSE 42769
// begin for i = 1 to array1 do
42711: LD_ADDR_VAR 0 4
42715: PUSH
42716: DOUBLE
42717: LD_INT 1
42719: DEC
42720: ST_TO_ADDR
42721: LD_VAR 0 1
42725: PUSH
42726: FOR_TO
42727: IFFALSE 42765
// if array1 [ i ] <> array2 [ i ] then
42729: LD_VAR 0 1
42733: PUSH
42734: LD_VAR 0 4
42738: ARRAY
42739: PUSH
42740: LD_VAR 0 2
42744: PUSH
42745: LD_VAR 0 4
42749: ARRAY
42750: NONEQUAL
42751: IFFALSE 42763
// begin result := false ;
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_INT 0
42760: ST_TO_ADDR
// break ;
42761: GO 42765
// end ;
42763: GO 42726
42765: POP
42766: POP
// end else
42767: GO 42777
// result := false ;
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_INT 0
42776: ST_TO_ADDR
// end ;
42777: LD_VAR 0 3
42781: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42782: LD_INT 0
42784: PPUSH
42785: PPUSH
// if not array1 or not array2 then
42786: LD_VAR 0 1
42790: NOT
42791: PUSH
42792: LD_VAR 0 2
42796: NOT
42797: OR
42798: IFFALSE 42802
// exit ;
42800: GO 42866
// result := true ;
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_INT 1
42809: ST_TO_ADDR
// for i = 1 to array1 do
42810: LD_ADDR_VAR 0 4
42814: PUSH
42815: DOUBLE
42816: LD_INT 1
42818: DEC
42819: ST_TO_ADDR
42820: LD_VAR 0 1
42824: PUSH
42825: FOR_TO
42826: IFFALSE 42864
// if array1 [ i ] <> array2 [ i ] then
42828: LD_VAR 0 1
42832: PUSH
42833: LD_VAR 0 4
42837: ARRAY
42838: PUSH
42839: LD_VAR 0 2
42843: PUSH
42844: LD_VAR 0 4
42848: ARRAY
42849: NONEQUAL
42850: IFFALSE 42862
// begin result := false ;
42852: LD_ADDR_VAR 0 3
42856: PUSH
42857: LD_INT 0
42859: ST_TO_ADDR
// break ;
42860: GO 42864
// end ;
42862: GO 42825
42864: POP
42865: POP
// end ;
42866: LD_VAR 0 3
42870: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42871: LD_INT 0
42873: PPUSH
42874: PPUSH
42875: PPUSH
// pom := GetBase ( fac ) ;
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: LD_VAR 0 1
42885: PPUSH
42886: CALL_OW 274
42890: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42891: LD_ADDR_VAR 0 4
42895: PUSH
42896: LD_VAR 0 2
42900: PUSH
42901: LD_INT 1
42903: ARRAY
42904: PPUSH
42905: LD_VAR 0 2
42909: PUSH
42910: LD_INT 2
42912: ARRAY
42913: PPUSH
42914: LD_VAR 0 2
42918: PUSH
42919: LD_INT 3
42921: ARRAY
42922: PPUSH
42923: LD_VAR 0 2
42927: PUSH
42928: LD_INT 4
42930: ARRAY
42931: PPUSH
42932: CALL_OW 449
42936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42937: LD_ADDR_VAR 0 3
42941: PUSH
42942: LD_VAR 0 5
42946: PPUSH
42947: LD_INT 1
42949: PPUSH
42950: CALL_OW 275
42954: PUSH
42955: LD_VAR 0 4
42959: PUSH
42960: LD_INT 1
42962: ARRAY
42963: GREATEREQUAL
42964: PUSH
42965: LD_VAR 0 5
42969: PPUSH
42970: LD_INT 2
42972: PPUSH
42973: CALL_OW 275
42977: PUSH
42978: LD_VAR 0 4
42982: PUSH
42983: LD_INT 2
42985: ARRAY
42986: GREATEREQUAL
42987: AND
42988: PUSH
42989: LD_VAR 0 5
42993: PPUSH
42994: LD_INT 3
42996: PPUSH
42997: CALL_OW 275
43001: PUSH
43002: LD_VAR 0 4
43006: PUSH
43007: LD_INT 3
43009: ARRAY
43010: GREATEREQUAL
43011: AND
43012: ST_TO_ADDR
// end ;
43013: LD_VAR 0 3
43017: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43018: LD_INT 0
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
// pom := GetBase ( building ) ;
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 274
43038: ST_TO_ADDR
// if not pom then
43039: LD_VAR 0 3
43043: NOT
43044: IFFALSE 43048
// exit ;
43046: GO 43218
// btype := GetBType ( building ) ;
43048: LD_ADDR_VAR 0 5
43052: PUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: CALL_OW 266
43062: ST_TO_ADDR
// if btype = b_armoury then
43063: LD_VAR 0 5
43067: PUSH
43068: LD_INT 4
43070: EQUAL
43071: IFFALSE 43081
// btype := b_barracks ;
43073: LD_ADDR_VAR 0 5
43077: PUSH
43078: LD_INT 5
43080: ST_TO_ADDR
// if btype = b_depot then
43081: LD_VAR 0 5
43085: PUSH
43086: LD_INT 0
43088: EQUAL
43089: IFFALSE 43099
// btype := b_warehouse ;
43091: LD_ADDR_VAR 0 5
43095: PUSH
43096: LD_INT 1
43098: ST_TO_ADDR
// if btype = b_workshop then
43099: LD_VAR 0 5
43103: PUSH
43104: LD_INT 2
43106: EQUAL
43107: IFFALSE 43117
// btype := b_factory ;
43109: LD_ADDR_VAR 0 5
43113: PUSH
43114: LD_INT 3
43116: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43117: LD_ADDR_VAR 0 4
43121: PUSH
43122: LD_VAR 0 5
43126: PPUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 248
43136: PPUSH
43137: CALL_OW 450
43141: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43142: LD_ADDR_VAR 0 2
43146: PUSH
43147: LD_VAR 0 3
43151: PPUSH
43152: LD_INT 1
43154: PPUSH
43155: CALL_OW 275
43159: PUSH
43160: LD_VAR 0 4
43164: PUSH
43165: LD_INT 1
43167: ARRAY
43168: GREATEREQUAL
43169: PUSH
43170: LD_VAR 0 3
43174: PPUSH
43175: LD_INT 2
43177: PPUSH
43178: CALL_OW 275
43182: PUSH
43183: LD_VAR 0 4
43187: PUSH
43188: LD_INT 2
43190: ARRAY
43191: GREATEREQUAL
43192: AND
43193: PUSH
43194: LD_VAR 0 3
43198: PPUSH
43199: LD_INT 3
43201: PPUSH
43202: CALL_OW 275
43206: PUSH
43207: LD_VAR 0 4
43211: PUSH
43212: LD_INT 3
43214: ARRAY
43215: GREATEREQUAL
43216: AND
43217: ST_TO_ADDR
// end ;
43218: LD_VAR 0 2
43222: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43223: LD_INT 0
43225: PPUSH
43226: PPUSH
43227: PPUSH
// pom := GetBase ( building ) ;
43228: LD_ADDR_VAR 0 4
43232: PUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 274
43242: ST_TO_ADDR
// if not pom then
43243: LD_VAR 0 4
43247: NOT
43248: IFFALSE 43252
// exit ;
43250: GO 43353
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43252: LD_ADDR_VAR 0 5
43256: PUSH
43257: LD_VAR 0 2
43261: PPUSH
43262: LD_VAR 0 1
43266: PPUSH
43267: CALL_OW 248
43271: PPUSH
43272: CALL_OW 450
43276: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: LD_VAR 0 4
43286: PPUSH
43287: LD_INT 1
43289: PPUSH
43290: CALL_OW 275
43294: PUSH
43295: LD_VAR 0 5
43299: PUSH
43300: LD_INT 1
43302: ARRAY
43303: GREATEREQUAL
43304: PUSH
43305: LD_VAR 0 4
43309: PPUSH
43310: LD_INT 2
43312: PPUSH
43313: CALL_OW 275
43317: PUSH
43318: LD_VAR 0 5
43322: PUSH
43323: LD_INT 2
43325: ARRAY
43326: GREATEREQUAL
43327: AND
43328: PUSH
43329: LD_VAR 0 4
43333: PPUSH
43334: LD_INT 3
43336: PPUSH
43337: CALL_OW 275
43341: PUSH
43342: LD_VAR 0 5
43346: PUSH
43347: LD_INT 3
43349: ARRAY
43350: GREATEREQUAL
43351: AND
43352: ST_TO_ADDR
// end ;
43353: LD_VAR 0 3
43357: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43358: LD_INT 0
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
// result := false ;
43371: LD_ADDR_VAR 0 8
43375: PUSH
43376: LD_INT 0
43378: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43379: LD_VAR 0 5
43383: NOT
43384: PUSH
43385: LD_VAR 0 1
43389: NOT
43390: OR
43391: PUSH
43392: LD_VAR 0 2
43396: NOT
43397: OR
43398: PUSH
43399: LD_VAR 0 3
43403: NOT
43404: OR
43405: IFFALSE 43409
// exit ;
43407: GO 44223
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43409: LD_ADDR_VAR 0 14
43413: PUSH
43414: LD_VAR 0 1
43418: PPUSH
43419: LD_VAR 0 2
43423: PPUSH
43424: LD_VAR 0 3
43428: PPUSH
43429: LD_VAR 0 4
43433: PPUSH
43434: LD_VAR 0 5
43438: PUSH
43439: LD_INT 1
43441: ARRAY
43442: PPUSH
43443: CALL_OW 248
43447: PPUSH
43448: LD_INT 0
43450: PPUSH
43451: CALL 45456 0 6
43455: ST_TO_ADDR
// if not hexes then
43456: LD_VAR 0 14
43460: NOT
43461: IFFALSE 43465
// exit ;
43463: GO 44223
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43465: LD_ADDR_VAR 0 17
43469: PUSH
43470: LD_VAR 0 5
43474: PPUSH
43475: LD_INT 22
43477: PUSH
43478: LD_VAR 0 13
43482: PPUSH
43483: CALL_OW 255
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: LD_INT 30
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 30
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PPUSH
43524: CALL_OW 72
43528: ST_TO_ADDR
// for i = 1 to hexes do
43529: LD_ADDR_VAR 0 9
43533: PUSH
43534: DOUBLE
43535: LD_INT 1
43537: DEC
43538: ST_TO_ADDR
43539: LD_VAR 0 14
43543: PUSH
43544: FOR_TO
43545: IFFALSE 44221
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43547: LD_ADDR_VAR 0 13
43551: PUSH
43552: LD_VAR 0 14
43556: PUSH
43557: LD_VAR 0 9
43561: ARRAY
43562: PUSH
43563: LD_INT 1
43565: ARRAY
43566: PPUSH
43567: LD_VAR 0 14
43571: PUSH
43572: LD_VAR 0 9
43576: ARRAY
43577: PUSH
43578: LD_INT 2
43580: ARRAY
43581: PPUSH
43582: CALL_OW 428
43586: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43587: LD_VAR 0 14
43591: PUSH
43592: LD_VAR 0 9
43596: ARRAY
43597: PUSH
43598: LD_INT 1
43600: ARRAY
43601: PPUSH
43602: LD_VAR 0 14
43606: PUSH
43607: LD_VAR 0 9
43611: ARRAY
43612: PUSH
43613: LD_INT 2
43615: ARRAY
43616: PPUSH
43617: CALL_OW 351
43621: PUSH
43622: LD_VAR 0 14
43626: PUSH
43627: LD_VAR 0 9
43631: ARRAY
43632: PUSH
43633: LD_INT 1
43635: ARRAY
43636: PPUSH
43637: LD_VAR 0 14
43641: PUSH
43642: LD_VAR 0 9
43646: ARRAY
43647: PUSH
43648: LD_INT 2
43650: ARRAY
43651: PPUSH
43652: CALL_OW 488
43656: NOT
43657: OR
43658: PUSH
43659: LD_VAR 0 13
43663: PPUSH
43664: CALL_OW 247
43668: PUSH
43669: LD_INT 3
43671: EQUAL
43672: OR
43673: IFFALSE 43679
// exit ;
43675: POP
43676: POP
43677: GO 44223
// if not tmp then
43679: LD_VAR 0 13
43683: NOT
43684: IFFALSE 43688
// continue ;
43686: GO 43544
// result := true ;
43688: LD_ADDR_VAR 0 8
43692: PUSH
43693: LD_INT 1
43695: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43696: LD_VAR 0 6
43700: PUSH
43701: LD_VAR 0 13
43705: PPUSH
43706: CALL_OW 247
43710: PUSH
43711: LD_INT 2
43713: EQUAL
43714: AND
43715: PUSH
43716: LD_VAR 0 13
43720: PPUSH
43721: CALL_OW 263
43725: PUSH
43726: LD_INT 1
43728: EQUAL
43729: AND
43730: IFFALSE 43894
// begin if IsDrivenBy ( tmp ) then
43732: LD_VAR 0 13
43736: PPUSH
43737: CALL_OW 311
43741: IFFALSE 43745
// continue ;
43743: GO 43544
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43745: LD_VAR 0 6
43749: PPUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 60
43755: PUSH
43756: EMPTY
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 55
43768: PUSH
43769: EMPTY
43770: LIST
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PPUSH
43780: CALL_OW 72
43784: IFFALSE 43892
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43786: LD_ADDR_VAR 0 18
43790: PUSH
43791: LD_VAR 0 6
43795: PPUSH
43796: LD_INT 3
43798: PUSH
43799: LD_INT 60
43801: PUSH
43802: EMPTY
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 55
43814: PUSH
43815: EMPTY
43816: LIST
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PPUSH
43826: CALL_OW 72
43830: PUSH
43831: LD_INT 1
43833: ARRAY
43834: ST_TO_ADDR
// if IsInUnit ( driver ) then
43835: LD_VAR 0 18
43839: PPUSH
43840: CALL_OW 310
43844: IFFALSE 43855
// ComExit ( driver ) ;
43846: LD_VAR 0 18
43850: PPUSH
43851: CALL 69144 0 1
// AddComEnterUnit ( driver , tmp ) ;
43855: LD_VAR 0 18
43859: PPUSH
43860: LD_VAR 0 13
43864: PPUSH
43865: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43869: LD_VAR 0 18
43873: PPUSH
43874: LD_VAR 0 7
43878: PPUSH
43879: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43883: LD_VAR 0 18
43887: PPUSH
43888: CALL_OW 181
// end ; continue ;
43892: GO 43544
// end ; if not cleaners or not tmp in cleaners then
43894: LD_VAR 0 6
43898: NOT
43899: PUSH
43900: LD_VAR 0 13
43904: PUSH
43905: LD_VAR 0 6
43909: IN
43910: NOT
43911: OR
43912: IFFALSE 44219
// begin if dep then
43914: LD_VAR 0 17
43918: IFFALSE 44054
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43920: LD_ADDR_VAR 0 16
43924: PUSH
43925: LD_VAR 0 17
43929: PUSH
43930: LD_INT 1
43932: ARRAY
43933: PPUSH
43934: CALL_OW 250
43938: PPUSH
43939: LD_VAR 0 17
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: PPUSH
43948: CALL_OW 254
43952: PPUSH
43953: LD_INT 5
43955: PPUSH
43956: CALL_OW 272
43960: PUSH
43961: LD_VAR 0 17
43965: PUSH
43966: LD_INT 1
43968: ARRAY
43969: PPUSH
43970: CALL_OW 251
43974: PPUSH
43975: LD_VAR 0 17
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PPUSH
43984: CALL_OW 254
43988: PPUSH
43989: LD_INT 5
43991: PPUSH
43992: CALL_OW 273
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44001: LD_VAR 0 16
44005: PUSH
44006: LD_INT 1
44008: ARRAY
44009: PPUSH
44010: LD_VAR 0 16
44014: PUSH
44015: LD_INT 2
44017: ARRAY
44018: PPUSH
44019: CALL_OW 488
44023: IFFALSE 44054
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44025: LD_VAR 0 13
44029: PPUSH
44030: LD_VAR 0 16
44034: PUSH
44035: LD_INT 1
44037: ARRAY
44038: PPUSH
44039: LD_VAR 0 16
44043: PUSH
44044: LD_INT 2
44046: ARRAY
44047: PPUSH
44048: CALL_OW 111
// continue ;
44052: GO 43544
// end ; end ; r := GetDir ( tmp ) ;
44054: LD_ADDR_VAR 0 15
44058: PUSH
44059: LD_VAR 0 13
44063: PPUSH
44064: CALL_OW 254
44068: ST_TO_ADDR
// if r = 5 then
44069: LD_VAR 0 15
44073: PUSH
44074: LD_INT 5
44076: EQUAL
44077: IFFALSE 44087
// r := 0 ;
44079: LD_ADDR_VAR 0 15
44083: PUSH
44084: LD_INT 0
44086: ST_TO_ADDR
// for j = r to 5 do
44087: LD_ADDR_VAR 0 10
44091: PUSH
44092: DOUBLE
44093: LD_VAR 0 15
44097: DEC
44098: ST_TO_ADDR
44099: LD_INT 5
44101: PUSH
44102: FOR_TO
44103: IFFALSE 44217
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44105: LD_ADDR_VAR 0 11
44109: PUSH
44110: LD_VAR 0 13
44114: PPUSH
44115: CALL_OW 250
44119: PPUSH
44120: LD_VAR 0 10
44124: PPUSH
44125: LD_INT 2
44127: PPUSH
44128: CALL_OW 272
44132: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44133: LD_ADDR_VAR 0 12
44137: PUSH
44138: LD_VAR 0 13
44142: PPUSH
44143: CALL_OW 251
44147: PPUSH
44148: LD_VAR 0 10
44152: PPUSH
44153: LD_INT 2
44155: PPUSH
44156: CALL_OW 273
44160: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44161: LD_VAR 0 11
44165: PPUSH
44166: LD_VAR 0 12
44170: PPUSH
44171: CALL_OW 488
44175: PUSH
44176: LD_VAR 0 11
44180: PPUSH
44181: LD_VAR 0 12
44185: PPUSH
44186: CALL_OW 428
44190: NOT
44191: AND
44192: IFFALSE 44215
// begin ComMoveXY ( tmp , _x , _y ) ;
44194: LD_VAR 0 13
44198: PPUSH
44199: LD_VAR 0 11
44203: PPUSH
44204: LD_VAR 0 12
44208: PPUSH
44209: CALL_OW 111
// break ;
44213: GO 44217
// end ; end ;
44215: GO 44102
44217: POP
44218: POP
// end ; end ;
44219: GO 43544
44221: POP
44222: POP
// end ;
44223: LD_VAR 0 8
44227: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44228: LD_INT 0
44230: PPUSH
// result := true ;
44231: LD_ADDR_VAR 0 3
44235: PUSH
44236: LD_INT 1
44238: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44239: LD_VAR 0 2
44243: PUSH
44244: LD_INT 24
44246: DOUBLE
44247: EQUAL
44248: IFTRUE 44258
44250: LD_INT 33
44252: DOUBLE
44253: EQUAL
44254: IFTRUE 44258
44256: GO 44283
44258: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44259: LD_ADDR_VAR 0 3
44263: PUSH
44264: LD_INT 32
44266: PPUSH
44267: LD_VAR 0 1
44271: PPUSH
44272: CALL_OW 321
44276: PUSH
44277: LD_INT 2
44279: EQUAL
44280: ST_TO_ADDR
44281: GO 44599
44283: LD_INT 20
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44316
44291: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 6
44299: PPUSH
44300: LD_VAR 0 1
44304: PPUSH
44305: CALL_OW 321
44309: PUSH
44310: LD_INT 2
44312: EQUAL
44313: ST_TO_ADDR
44314: GO 44599
44316: LD_INT 22
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44330
44322: LD_INT 36
44324: DOUBLE
44325: EQUAL
44326: IFTRUE 44330
44328: GO 44355
44330: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44331: LD_ADDR_VAR 0 3
44335: PUSH
44336: LD_INT 15
44338: PPUSH
44339: LD_VAR 0 1
44343: PPUSH
44344: CALL_OW 321
44348: PUSH
44349: LD_INT 2
44351: EQUAL
44352: ST_TO_ADDR
44353: GO 44599
44355: LD_INT 30
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44363
44361: GO 44388
44363: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44364: LD_ADDR_VAR 0 3
44368: PUSH
44369: LD_INT 20
44371: PPUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 321
44381: PUSH
44382: LD_INT 2
44384: EQUAL
44385: ST_TO_ADDR
44386: GO 44599
44388: LD_INT 28
44390: DOUBLE
44391: EQUAL
44392: IFTRUE 44402
44394: LD_INT 21
44396: DOUBLE
44397: EQUAL
44398: IFTRUE 44402
44400: GO 44427
44402: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44403: LD_ADDR_VAR 0 3
44407: PUSH
44408: LD_INT 21
44410: PPUSH
44411: LD_VAR 0 1
44415: PPUSH
44416: CALL_OW 321
44420: PUSH
44421: LD_INT 2
44423: EQUAL
44424: ST_TO_ADDR
44425: GO 44599
44427: LD_INT 16
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44435
44433: GO 44460
44435: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_INT 84
44443: PPUSH
44444: LD_VAR 0 1
44448: PPUSH
44449: CALL_OW 321
44453: PUSH
44454: LD_INT 2
44456: EQUAL
44457: ST_TO_ADDR
44458: GO 44599
44460: LD_INT 19
44462: DOUBLE
44463: EQUAL
44464: IFTRUE 44474
44466: LD_INT 23
44468: DOUBLE
44469: EQUAL
44470: IFTRUE 44474
44472: GO 44499
44474: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44475: LD_ADDR_VAR 0 3
44479: PUSH
44480: LD_INT 83
44482: PPUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 321
44492: PUSH
44493: LD_INT 2
44495: EQUAL
44496: ST_TO_ADDR
44497: GO 44599
44499: LD_INT 17
44501: DOUBLE
44502: EQUAL
44503: IFTRUE 44507
44505: GO 44532
44507: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44508: LD_ADDR_VAR 0 3
44512: PUSH
44513: LD_INT 39
44515: PPUSH
44516: LD_VAR 0 1
44520: PPUSH
44521: CALL_OW 321
44525: PUSH
44526: LD_INT 2
44528: EQUAL
44529: ST_TO_ADDR
44530: GO 44599
44532: LD_INT 18
44534: DOUBLE
44535: EQUAL
44536: IFTRUE 44540
44538: GO 44565
44540: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44541: LD_ADDR_VAR 0 3
44545: PUSH
44546: LD_INT 40
44548: PPUSH
44549: LD_VAR 0 1
44553: PPUSH
44554: CALL_OW 321
44558: PUSH
44559: LD_INT 2
44561: EQUAL
44562: ST_TO_ADDR
44563: GO 44599
44565: LD_INT 27
44567: DOUBLE
44568: EQUAL
44569: IFTRUE 44573
44571: GO 44598
44573: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44574: LD_ADDR_VAR 0 3
44578: PUSH
44579: LD_INT 35
44581: PPUSH
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 321
44591: PUSH
44592: LD_INT 2
44594: EQUAL
44595: ST_TO_ADDR
44596: GO 44599
44598: POP
// end ;
44599: LD_VAR 0 3
44603: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44604: LD_INT 0
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
// result := false ;
44617: LD_ADDR_VAR 0 6
44621: PUSH
44622: LD_INT 0
44624: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44625: LD_VAR 0 1
44629: NOT
44630: PUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: CALL_OW 266
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: IN
44651: NOT
44652: OR
44653: PUSH
44654: LD_VAR 0 2
44658: NOT
44659: OR
44660: PUSH
44661: LD_VAR 0 5
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: LD_INT 4
44680: PUSH
44681: LD_INT 5
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: IN
44692: NOT
44693: OR
44694: PUSH
44695: LD_VAR 0 3
44699: PPUSH
44700: LD_VAR 0 4
44704: PPUSH
44705: CALL_OW 488
44709: NOT
44710: OR
44711: IFFALSE 44715
// exit ;
44713: GO 45451
// side := GetSide ( depot ) ;
44715: LD_ADDR_VAR 0 9
44719: PUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 255
44729: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44730: LD_VAR 0 9
44734: PPUSH
44735: LD_VAR 0 2
44739: PPUSH
44740: CALL 44228 0 2
44744: NOT
44745: IFFALSE 44749
// exit ;
44747: GO 45451
// pom := GetBase ( depot ) ;
44749: LD_ADDR_VAR 0 10
44753: PUSH
44754: LD_VAR 0 1
44758: PPUSH
44759: CALL_OW 274
44763: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44764: LD_ADDR_VAR 0 11
44768: PUSH
44769: LD_VAR 0 2
44773: PPUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: CALL_OW 248
44783: PPUSH
44784: CALL_OW 450
44788: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44789: LD_VAR 0 10
44793: PPUSH
44794: LD_INT 1
44796: PPUSH
44797: CALL_OW 275
44801: PUSH
44802: LD_VAR 0 11
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: GREATEREQUAL
44811: PUSH
44812: LD_VAR 0 10
44816: PPUSH
44817: LD_INT 2
44819: PPUSH
44820: CALL_OW 275
44824: PUSH
44825: LD_VAR 0 11
44829: PUSH
44830: LD_INT 2
44832: ARRAY
44833: GREATEREQUAL
44834: AND
44835: PUSH
44836: LD_VAR 0 10
44840: PPUSH
44841: LD_INT 3
44843: PPUSH
44844: CALL_OW 275
44848: PUSH
44849: LD_VAR 0 11
44853: PUSH
44854: LD_INT 3
44856: ARRAY
44857: GREATEREQUAL
44858: AND
44859: NOT
44860: IFFALSE 44864
// exit ;
44862: GO 45451
// if GetBType ( depot ) = b_depot then
44864: LD_VAR 0 1
44868: PPUSH
44869: CALL_OW 266
44873: PUSH
44874: LD_INT 0
44876: EQUAL
44877: IFFALSE 44889
// dist := 28 else
44879: LD_ADDR_VAR 0 14
44883: PUSH
44884: LD_INT 28
44886: ST_TO_ADDR
44887: GO 44897
// dist := 36 ;
44889: LD_ADDR_VAR 0 14
44893: PUSH
44894: LD_INT 36
44896: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44897: LD_VAR 0 1
44901: PPUSH
44902: LD_VAR 0 3
44906: PPUSH
44907: LD_VAR 0 4
44911: PPUSH
44912: CALL_OW 297
44916: PUSH
44917: LD_VAR 0 14
44921: GREATER
44922: IFFALSE 44926
// exit ;
44924: GO 45451
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44926: LD_ADDR_VAR 0 12
44930: PUSH
44931: LD_VAR 0 2
44935: PPUSH
44936: LD_VAR 0 3
44940: PPUSH
44941: LD_VAR 0 4
44945: PPUSH
44946: LD_VAR 0 5
44950: PPUSH
44951: LD_VAR 0 1
44955: PPUSH
44956: CALL_OW 248
44960: PPUSH
44961: LD_INT 0
44963: PPUSH
44964: CALL 45456 0 6
44968: ST_TO_ADDR
// if not hexes then
44969: LD_VAR 0 12
44973: NOT
44974: IFFALSE 44978
// exit ;
44976: GO 45451
// hex := GetHexInfo ( x , y ) ;
44978: LD_ADDR_VAR 0 15
44982: PUSH
44983: LD_VAR 0 3
44987: PPUSH
44988: LD_VAR 0 4
44992: PPUSH
44993: CALL_OW 546
44997: ST_TO_ADDR
// if hex [ 1 ] then
44998: LD_VAR 0 15
45002: PUSH
45003: LD_INT 1
45005: ARRAY
45006: IFFALSE 45010
// exit ;
45008: GO 45451
// height := hex [ 2 ] ;
45010: LD_ADDR_VAR 0 13
45014: PUSH
45015: LD_VAR 0 15
45019: PUSH
45020: LD_INT 2
45022: ARRAY
45023: ST_TO_ADDR
// for i = 1 to hexes do
45024: LD_ADDR_VAR 0 7
45028: PUSH
45029: DOUBLE
45030: LD_INT 1
45032: DEC
45033: ST_TO_ADDR
45034: LD_VAR 0 12
45038: PUSH
45039: FOR_TO
45040: IFFALSE 45370
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45042: LD_VAR 0 12
45046: PUSH
45047: LD_VAR 0 7
45051: ARRAY
45052: PUSH
45053: LD_INT 1
45055: ARRAY
45056: PPUSH
45057: LD_VAR 0 12
45061: PUSH
45062: LD_VAR 0 7
45066: ARRAY
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: PPUSH
45072: CALL_OW 488
45076: NOT
45077: PUSH
45078: LD_VAR 0 12
45082: PUSH
45083: LD_VAR 0 7
45087: ARRAY
45088: PUSH
45089: LD_INT 1
45091: ARRAY
45092: PPUSH
45093: LD_VAR 0 12
45097: PUSH
45098: LD_VAR 0 7
45102: ARRAY
45103: PUSH
45104: LD_INT 2
45106: ARRAY
45107: PPUSH
45108: CALL_OW 428
45112: PUSH
45113: LD_INT 0
45115: GREATER
45116: OR
45117: PUSH
45118: LD_VAR 0 12
45122: PUSH
45123: LD_VAR 0 7
45127: ARRAY
45128: PUSH
45129: LD_INT 1
45131: ARRAY
45132: PPUSH
45133: LD_VAR 0 12
45137: PUSH
45138: LD_VAR 0 7
45142: ARRAY
45143: PUSH
45144: LD_INT 2
45146: ARRAY
45147: PPUSH
45148: CALL_OW 351
45152: OR
45153: IFFALSE 45159
// exit ;
45155: POP
45156: POP
45157: GO 45451
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45159: LD_ADDR_VAR 0 8
45163: PUSH
45164: LD_VAR 0 12
45168: PUSH
45169: LD_VAR 0 7
45173: ARRAY
45174: PUSH
45175: LD_INT 1
45177: ARRAY
45178: PPUSH
45179: LD_VAR 0 12
45183: PUSH
45184: LD_VAR 0 7
45188: ARRAY
45189: PUSH
45190: LD_INT 2
45192: ARRAY
45193: PPUSH
45194: CALL_OW 546
45198: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45199: LD_VAR 0 8
45203: PUSH
45204: LD_INT 1
45206: ARRAY
45207: PUSH
45208: LD_VAR 0 8
45212: PUSH
45213: LD_INT 2
45215: ARRAY
45216: PUSH
45217: LD_VAR 0 13
45221: PUSH
45222: LD_INT 2
45224: PLUS
45225: GREATER
45226: OR
45227: PUSH
45228: LD_VAR 0 8
45232: PUSH
45233: LD_INT 2
45235: ARRAY
45236: PUSH
45237: LD_VAR 0 13
45241: PUSH
45242: LD_INT 2
45244: MINUS
45245: LESS
45246: OR
45247: PUSH
45248: LD_VAR 0 8
45252: PUSH
45253: LD_INT 3
45255: ARRAY
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 8
45262: PUSH
45263: LD_INT 9
45265: PUSH
45266: LD_INT 10
45268: PUSH
45269: LD_INT 11
45271: PUSH
45272: LD_INT 12
45274: PUSH
45275: LD_INT 13
45277: PUSH
45278: LD_INT 16
45280: PUSH
45281: LD_INT 17
45283: PUSH
45284: LD_INT 18
45286: PUSH
45287: LD_INT 19
45289: PUSH
45290: LD_INT 20
45292: PUSH
45293: LD_INT 21
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: IN
45311: NOT
45312: OR
45313: PUSH
45314: LD_VAR 0 8
45318: PUSH
45319: LD_INT 5
45321: ARRAY
45322: NOT
45323: OR
45324: PUSH
45325: LD_VAR 0 8
45329: PUSH
45330: LD_INT 6
45332: ARRAY
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 7
45342: PUSH
45343: LD_INT 9
45345: PUSH
45346: LD_INT 10
45348: PUSH
45349: LD_INT 11
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: IN
45360: NOT
45361: OR
45362: IFFALSE 45368
// exit ;
45364: POP
45365: POP
45366: GO 45451
// end ;
45368: GO 45039
45370: POP
45371: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45372: LD_VAR 0 9
45376: PPUSH
45377: LD_VAR 0 3
45381: PPUSH
45382: LD_VAR 0 4
45386: PPUSH
45387: LD_INT 20
45389: PPUSH
45390: CALL 37403 0 4
45394: PUSH
45395: LD_INT 4
45397: ARRAY
45398: IFFALSE 45402
// exit ;
45400: GO 45451
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45402: LD_VAR 0 2
45406: PUSH
45407: LD_INT 29
45409: PUSH
45410: LD_INT 30
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: IN
45417: PUSH
45418: LD_VAR 0 3
45422: PPUSH
45423: LD_VAR 0 4
45427: PPUSH
45428: LD_VAR 0 9
45432: PPUSH
45433: CALL_OW 440
45437: NOT
45438: AND
45439: IFFALSE 45443
// exit ;
45441: GO 45451
// result := true ;
45443: LD_ADDR_VAR 0 6
45447: PUSH
45448: LD_INT 1
45450: ST_TO_ADDR
// end ;
45451: LD_VAR 0 6
45455: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45456: LD_INT 0
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
// result = [ ] ;
45516: LD_ADDR_VAR 0 7
45520: PUSH
45521: EMPTY
45522: ST_TO_ADDR
// temp_list = [ ] ;
45523: LD_ADDR_VAR 0 9
45527: PUSH
45528: EMPTY
45529: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45530: LD_VAR 0 4
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: LD_INT 3
45546: PUSH
45547: LD_INT 4
45549: PUSH
45550: LD_INT 5
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: IN
45561: NOT
45562: PUSH
45563: LD_VAR 0 1
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: IN
45578: PUSH
45579: LD_VAR 0 5
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: IN
45598: NOT
45599: AND
45600: OR
45601: IFFALSE 45605
// exit ;
45603: GO 63996
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45605: LD_VAR 0 1
45609: PUSH
45610: LD_INT 6
45612: PUSH
45613: LD_INT 7
45615: PUSH
45616: LD_INT 8
45618: PUSH
45619: LD_INT 13
45621: PUSH
45622: LD_INT 12
45624: PUSH
45625: LD_INT 15
45627: PUSH
45628: LD_INT 11
45630: PUSH
45631: LD_INT 14
45633: PUSH
45634: LD_INT 10
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: IN
45648: IFFALSE 45658
// btype = b_lab ;
45650: LD_ADDR_VAR 0 1
45654: PUSH
45655: LD_INT 6
45657: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45658: LD_VAR 0 6
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: IN
45677: NOT
45678: PUSH
45679: LD_VAR 0 1
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: LD_INT 3
45695: PUSH
45696: LD_INT 6
45698: PUSH
45699: LD_INT 36
45701: PUSH
45702: LD_INT 4
45704: PUSH
45705: LD_INT 5
45707: PUSH
45708: LD_INT 31
45710: PUSH
45711: LD_INT 32
45713: PUSH
45714: LD_INT 33
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: IN
45730: NOT
45731: PUSH
45732: LD_VAR 0 6
45736: PUSH
45737: LD_INT 1
45739: EQUAL
45740: AND
45741: OR
45742: PUSH
45743: LD_VAR 0 1
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: IN
45758: NOT
45759: PUSH
45760: LD_VAR 0 6
45764: PUSH
45765: LD_INT 2
45767: EQUAL
45768: AND
45769: OR
45770: IFFALSE 45780
// mode = 0 ;
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: LD_INT 0
45779: ST_TO_ADDR
// case mode of 0 :
45780: LD_VAR 0 6
45784: PUSH
45785: LD_INT 0
45787: DOUBLE
45788: EQUAL
45789: IFTRUE 45793
45791: GO 57246
45793: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45794: LD_ADDR_VAR 0 11
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 3
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45987: LD_ADDR_VAR 0 12
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 3
46144: NEG
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46183: LD_ADDR_VAR 0 13
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46382: LD_ADDR_VAR 0 14
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46578: LD_ADDR_VAR 0 15
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46771: LD_ADDR_VAR 0 16
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: LD_INT 3
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46964: LD_ADDR_VAR 0 17
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47194: LD_ADDR_VAR 0 18
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47424: LD_ADDR_VAR 0 19
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47654: LD_ADDR_VAR 0 20
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47884: LD_ADDR_VAR 0 21
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48114: LD_ADDR_VAR 0 22
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48344: LD_ADDR_VAR 0 23
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48624: LD_ADDR_VAR 0 24
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48900: LD_ADDR_VAR 0 25
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49174: LD_ADDR_VAR 0 26
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49450: LD_ADDR_VAR 0 27
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 3
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49730: LD_ADDR_VAR 0 28
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50012: LD_ADDR_VAR 0 29
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50291: LD_ADDR_VAR 0 30
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50569: LD_ADDR_VAR 0 31
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50847: LD_ADDR_VAR 0 32
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51125: LD_ADDR_VAR 0 33
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51404: LD_ADDR_VAR 0 34
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51684: LD_ADDR_VAR 0 35
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51796: LD_ADDR_VAR 0 36
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51908: LD_ADDR_VAR 0 37
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52020: LD_ADDR_VAR 0 38
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52132: LD_ADDR_VAR 0 39
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52244: LD_ADDR_VAR 0 40
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52356: LD_ADDR_VAR 0 41
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: NEG
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52706: LD_ADDR_VAR 0 42
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 3
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 3
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 3
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53056: LD_ADDR_VAR 0 43
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53404: LD_ADDR_VAR 0 44
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 3
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53754: LD_ADDR_VAR 0 45
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: NEG
54064: PUSH
54065: LD_INT 3
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54104: LD_ADDR_VAR 0 46
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 3
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54452: LD_ADDR_VAR 0 47
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54603: LD_ADDR_VAR 0 48
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54750: LD_ADDR_VAR 0 49
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54894: LD_ADDR_VAR 0 50
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55038: LD_ADDR_VAR 0 51
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55185: LD_ADDR_VAR 0 52
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55336: LD_ADDR_VAR 0 53
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55566: LD_ADDR_VAR 0 54
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55796: LD_ADDR_VAR 0 55
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56026: LD_ADDR_VAR 0 56
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56256: LD_ADDR_VAR 0 57
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56486: LD_ADDR_VAR 0 58
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56716: LD_ADDR_VAR 0 59
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56804: LD_ADDR_VAR 0 60
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56892: LD_ADDR_VAR 0 61
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56980: LD_ADDR_VAR 0 62
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57068: LD_ADDR_VAR 0 63
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57156: LD_ADDR_VAR 0 64
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: ST_TO_ADDR
// end ; 1 :
57244: GO 63141
57246: LD_INT 1
57248: DOUBLE
57249: EQUAL
57250: IFTRUE 57254
57252: GO 59877
57254: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57255: LD_ADDR_VAR 0 11
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57299: LD_ADDR_VAR 0 12
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57340: LD_ADDR_VAR 0 13
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57380: LD_ADDR_VAR 0 14
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57421: LD_ADDR_VAR 0 15
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57465: LD_ADDR_VAR 0 16
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57511: LD_ADDR_VAR 0 17
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57555: LD_ADDR_VAR 0 18
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: LIST
57595: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57596: LD_ADDR_VAR 0 19
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57636: LD_ADDR_VAR 0 20
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57677: LD_ADDR_VAR 0 21
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57721: LD_ADDR_VAR 0 22
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57767: LD_ADDR_VAR 0 23
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 4
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57811: LD_ADDR_VAR 0 24
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: LIST
57851: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57852: LD_ADDR_VAR 0 25
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57892: LD_ADDR_VAR 0 26
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 3
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57933: LD_ADDR_VAR 0 27
57937: PUSH
57938: LD_INT 3
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 4
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57977: LD_ADDR_VAR 0 28
57981: PUSH
57982: LD_INT 3
57984: NEG
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: NEG
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58023: LD_ADDR_VAR 0 29
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 5
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 5
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 4
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 6
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 6
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 5
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58178: LD_ADDR_VAR 0 30
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 5
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 5
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 5
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 6
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 6
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58321: LD_ADDR_VAR 0 31
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 4
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 4
58368: PUSH
58369: LD_INT 4
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 3
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 5
58388: PUSH
58389: LD_INT 4
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 5
58398: PUSH
58399: LD_INT 5
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: PUSH
58409: LD_INT 5
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 6
58418: PUSH
58419: LD_INT 5
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 6
58428: PUSH
58429: LD_INT 6
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 5
58438: PUSH
58439: LD_INT 6
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58460: LD_ADDR_VAR 0 32
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 4
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 4
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 5
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 5
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 6
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 6
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58603: LD_ADDR_VAR 0 33
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 3
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 3
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 4
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 4
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: NEG
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 5
58689: NEG
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 5
58700: NEG
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 5
58712: NEG
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 6
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 6
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58758: LD_ADDR_VAR 0 34
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: NEG
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: LD_INT 5
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 5
58849: NEG
58850: PUSH
58851: LD_INT 4
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 5
58861: NEG
58862: PUSH
58863: LD_INT 5
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 5
58873: NEG
58874: PUSH
58875: LD_INT 6
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 6
58885: NEG
58886: PUSH
58887: LD_INT 5
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 6
58897: NEG
58898: PUSH
58899: LD_INT 6
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58921: LD_ADDR_VAR 0 41
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58965: LD_ADDR_VAR 0 42
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59006: LD_ADDR_VAR 0 43
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59046: LD_ADDR_VAR 0 44
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59087: LD_ADDR_VAR 0 45
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59131: LD_ADDR_VAR 0 46
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: LD_INT 3
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59177: LD_ADDR_VAR 0 47
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59210: LD_ADDR_VAR 0 48
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59241: LD_ADDR_VAR 0 49
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59270: LD_ADDR_VAR 0 50
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59299: LD_ADDR_VAR 0 51
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59330: LD_ADDR_VAR 0 52
59334: PUSH
59335: LD_INT 3
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59363: LD_ADDR_VAR 0 53
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59407: LD_ADDR_VAR 0 54
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59448: LD_ADDR_VAR 0 55
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59488: LD_ADDR_VAR 0 56
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59529: LD_ADDR_VAR 0 57
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59573: LD_ADDR_VAR 0 58
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: LD_INT 3
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59619: LD_ADDR_VAR 0 59
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59663: LD_ADDR_VAR 0 60
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59704: LD_ADDR_VAR 0 61
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59744: LD_ADDR_VAR 0 62
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59785: LD_ADDR_VAR 0 63
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59829: LD_ADDR_VAR 0 64
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// end ; 2 :
59875: GO 63141
59877: LD_INT 2
59879: DOUBLE
59880: EQUAL
59881: IFTRUE 59885
59883: GO 63140
59885: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59886: LD_ADDR_VAR 0 29
59890: PUSH
59891: LD_INT 4
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 4
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 4
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 5
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: LD_INT 4
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 4
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 4
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 4
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 5
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 5
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: LD_INT 5
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 4
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 4
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 5
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: LD_INT 4
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 3
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 4
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 5
60331: NEG
60332: PUSH
60333: LD_INT 4
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: LD_INT 5
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 5
60367: NEG
60368: PUSH
60369: LD_INT 3
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60424: LD_ADDR_VAR 0 30
60428: PUSH
60429: LD_INT 4
60431: PUSH
60432: LD_INT 4
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 5
60451: PUSH
60452: LD_INT 4
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 5
60461: PUSH
60462: LD_INT 5
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 4
60471: PUSH
60472: LD_INT 5
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: LD_INT 4
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 5
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 5
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: LD_INT 4
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 4
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 4
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 5
60670: NEG
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 5
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: NEG
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 3
60705: NEG
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 3
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 4
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 4
60788: NEG
60789: PUSH
60790: LD_INT 4
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: LD_INT 4
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 4
60812: NEG
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 4
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 5
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 4
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 3
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 4
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 5
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 5
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60971: LD_ADDR_VAR 0 31
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 4
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 5
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 5
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 4
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 5
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 4
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 4
61173: NEG
61174: PUSH
61175: LD_INT 4
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: LD_INT 5
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: LD_INT 4
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 4
61221: NEG
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 5
61233: NEG
61234: PUSH
61235: LD_INT 4
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 5
61245: NEG
61246: PUSH
61247: LD_INT 5
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: LD_INT 5
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 5
61269: NEG
61270: PUSH
61271: LD_INT 3
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 4
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: LD_INT 4
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 4
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 5
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 4
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 5
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61521: LD_ADDR_VAR 0 32
61525: PUSH
61526: LD_INT 4
61528: NEG
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 4
61539: NEG
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: NEG
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 4
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 5
61584: NEG
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 5
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 5
61607: NEG
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: LD_INT 4
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 3
61678: NEG
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: NEG
61691: PUSH
61692: LD_INT 3
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 4
61702: NEG
61703: PUSH
61704: LD_INT 4
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 4
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 4
61726: NEG
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 5
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 4
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: LD_INT 3
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 4
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 5
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: LD_INT 5
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 4
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 4
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 4
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 5
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: LD_INT 5
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: LD_INT 5
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 3
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 5
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: LD_INT 5
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62068: LD_ADDR_VAR 0 33
62072: PUSH
62073: LD_INT 4
62075: NEG
62076: PUSH
62077: LD_INT 4
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: LD_INT 5
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: NEG
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 4
62123: NEG
62124: PUSH
62125: LD_INT 3
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 5
62135: NEG
62136: PUSH
62137: LD_INT 4
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 5
62147: NEG
62148: PUSH
62149: LD_INT 5
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 5
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 5
62171: NEG
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 4
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 4
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: LD_INT 4
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 4
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 5
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 5
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 4
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 3
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 5
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 3
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 4
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 4
62408: PUSH
62409: LD_INT 4
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: LD_INT 4
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 4
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: LD_INT 5
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62606: LD_ADDR_VAR 0 34
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 4
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 5
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: LD_INT 4
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 3
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 4
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 5
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 3
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: LD_INT 5
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 3
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 4
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 4
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 4
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 4
62808: PUSH
62809: LD_INT 4
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 4
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 5
62828: PUSH
62829: LD_INT 4
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 5
62838: PUSH
62839: LD_INT 5
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 4
62848: PUSH
62849: LD_INT 5
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: LD_INT 4
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 5
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 3
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 4
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: LD_INT 4
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 4
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 4
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 4
63036: NEG
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 5
63047: NEG
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 5
63058: NEG
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 5
63070: NEG
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: ST_TO_ADDR
// end ; end ;
63138: GO 63141
63140: POP
// case btype of b_depot , b_warehouse :
63141: LD_VAR 0 1
63145: PUSH
63146: LD_INT 0
63148: DOUBLE
63149: EQUAL
63150: IFTRUE 63160
63152: LD_INT 1
63154: DOUBLE
63155: EQUAL
63156: IFTRUE 63160
63158: GO 63361
63160: POP
// case nation of nation_american :
63161: LD_VAR 0 5
63165: PUSH
63166: LD_INT 1
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63174
63172: GO 63230
63174: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63175: LD_ADDR_VAR 0 9
63179: PUSH
63180: LD_VAR 0 11
63184: PUSH
63185: LD_VAR 0 12
63189: PUSH
63190: LD_VAR 0 13
63194: PUSH
63195: LD_VAR 0 14
63199: PUSH
63200: LD_VAR 0 15
63204: PUSH
63205: LD_VAR 0 16
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: PUSH
63218: LD_VAR 0 4
63222: PUSH
63223: LD_INT 1
63225: PLUS
63226: ARRAY
63227: ST_TO_ADDR
63228: GO 63359
63230: LD_INT 2
63232: DOUBLE
63233: EQUAL
63234: IFTRUE 63238
63236: GO 63294
63238: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63239: LD_ADDR_VAR 0 9
63243: PUSH
63244: LD_VAR 0 17
63248: PUSH
63249: LD_VAR 0 18
63253: PUSH
63254: LD_VAR 0 19
63258: PUSH
63259: LD_VAR 0 20
63263: PUSH
63264: LD_VAR 0 21
63268: PUSH
63269: LD_VAR 0 22
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: PUSH
63282: LD_VAR 0 4
63286: PUSH
63287: LD_INT 1
63289: PLUS
63290: ARRAY
63291: ST_TO_ADDR
63292: GO 63359
63294: LD_INT 3
63296: DOUBLE
63297: EQUAL
63298: IFTRUE 63302
63300: GO 63358
63302: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63303: LD_ADDR_VAR 0 9
63307: PUSH
63308: LD_VAR 0 23
63312: PUSH
63313: LD_VAR 0 24
63317: PUSH
63318: LD_VAR 0 25
63322: PUSH
63323: LD_VAR 0 26
63327: PUSH
63328: LD_VAR 0 27
63332: PUSH
63333: LD_VAR 0 28
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: PUSH
63346: LD_VAR 0 4
63350: PUSH
63351: LD_INT 1
63353: PLUS
63354: ARRAY
63355: ST_TO_ADDR
63356: GO 63359
63358: POP
63359: GO 63914
63361: LD_INT 2
63363: DOUBLE
63364: EQUAL
63365: IFTRUE 63375
63367: LD_INT 3
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63375
63373: GO 63431
63375: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63376: LD_ADDR_VAR 0 9
63380: PUSH
63381: LD_VAR 0 29
63385: PUSH
63386: LD_VAR 0 30
63390: PUSH
63391: LD_VAR 0 31
63395: PUSH
63396: LD_VAR 0 32
63400: PUSH
63401: LD_VAR 0 33
63405: PUSH
63406: LD_VAR 0 34
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: PUSH
63419: LD_VAR 0 4
63423: PUSH
63424: LD_INT 1
63426: PLUS
63427: ARRAY
63428: ST_TO_ADDR
63429: GO 63914
63431: LD_INT 16
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63493
63437: LD_INT 17
63439: DOUBLE
63440: EQUAL
63441: IFTRUE 63493
63443: LD_INT 18
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63493
63449: LD_INT 19
63451: DOUBLE
63452: EQUAL
63453: IFTRUE 63493
63455: LD_INT 22
63457: DOUBLE
63458: EQUAL
63459: IFTRUE 63493
63461: LD_INT 20
63463: DOUBLE
63464: EQUAL
63465: IFTRUE 63493
63467: LD_INT 21
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63493
63473: LD_INT 23
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63493
63479: LD_INT 24
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63493
63485: LD_INT 25
63487: DOUBLE
63488: EQUAL
63489: IFTRUE 63493
63491: GO 63549
63493: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63494: LD_ADDR_VAR 0 9
63498: PUSH
63499: LD_VAR 0 35
63503: PUSH
63504: LD_VAR 0 36
63508: PUSH
63509: LD_VAR 0 37
63513: PUSH
63514: LD_VAR 0 38
63518: PUSH
63519: LD_VAR 0 39
63523: PUSH
63524: LD_VAR 0 40
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: PUSH
63537: LD_VAR 0 4
63541: PUSH
63542: LD_INT 1
63544: PLUS
63545: ARRAY
63546: ST_TO_ADDR
63547: GO 63914
63549: LD_INT 6
63551: DOUBLE
63552: EQUAL
63553: IFTRUE 63605
63555: LD_INT 7
63557: DOUBLE
63558: EQUAL
63559: IFTRUE 63605
63561: LD_INT 8
63563: DOUBLE
63564: EQUAL
63565: IFTRUE 63605
63567: LD_INT 13
63569: DOUBLE
63570: EQUAL
63571: IFTRUE 63605
63573: LD_INT 12
63575: DOUBLE
63576: EQUAL
63577: IFTRUE 63605
63579: LD_INT 15
63581: DOUBLE
63582: EQUAL
63583: IFTRUE 63605
63585: LD_INT 11
63587: DOUBLE
63588: EQUAL
63589: IFTRUE 63605
63591: LD_INT 14
63593: DOUBLE
63594: EQUAL
63595: IFTRUE 63605
63597: LD_INT 10
63599: DOUBLE
63600: EQUAL
63601: IFTRUE 63605
63603: GO 63661
63605: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63606: LD_ADDR_VAR 0 9
63610: PUSH
63611: LD_VAR 0 41
63615: PUSH
63616: LD_VAR 0 42
63620: PUSH
63621: LD_VAR 0 43
63625: PUSH
63626: LD_VAR 0 44
63630: PUSH
63631: LD_VAR 0 45
63635: PUSH
63636: LD_VAR 0 46
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: PUSH
63649: LD_VAR 0 4
63653: PUSH
63654: LD_INT 1
63656: PLUS
63657: ARRAY
63658: ST_TO_ADDR
63659: GO 63914
63661: LD_INT 36
63663: DOUBLE
63664: EQUAL
63665: IFTRUE 63669
63667: GO 63725
63669: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63670: LD_ADDR_VAR 0 9
63674: PUSH
63675: LD_VAR 0 47
63679: PUSH
63680: LD_VAR 0 48
63684: PUSH
63685: LD_VAR 0 49
63689: PUSH
63690: LD_VAR 0 50
63694: PUSH
63695: LD_VAR 0 51
63699: PUSH
63700: LD_VAR 0 52
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: PUSH
63713: LD_VAR 0 4
63717: PUSH
63718: LD_INT 1
63720: PLUS
63721: ARRAY
63722: ST_TO_ADDR
63723: GO 63914
63725: LD_INT 4
63727: DOUBLE
63728: EQUAL
63729: IFTRUE 63751
63731: LD_INT 5
63733: DOUBLE
63734: EQUAL
63735: IFTRUE 63751
63737: LD_INT 34
63739: DOUBLE
63740: EQUAL
63741: IFTRUE 63751
63743: LD_INT 37
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63751
63749: GO 63807
63751: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63752: LD_ADDR_VAR 0 9
63756: PUSH
63757: LD_VAR 0 53
63761: PUSH
63762: LD_VAR 0 54
63766: PUSH
63767: LD_VAR 0 55
63771: PUSH
63772: LD_VAR 0 56
63776: PUSH
63777: LD_VAR 0 57
63781: PUSH
63782: LD_VAR 0 58
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: PUSH
63795: LD_VAR 0 4
63799: PUSH
63800: LD_INT 1
63802: PLUS
63803: ARRAY
63804: ST_TO_ADDR
63805: GO 63914
63807: LD_INT 31
63809: DOUBLE
63810: EQUAL
63811: IFTRUE 63857
63813: LD_INT 32
63815: DOUBLE
63816: EQUAL
63817: IFTRUE 63857
63819: LD_INT 33
63821: DOUBLE
63822: EQUAL
63823: IFTRUE 63857
63825: LD_INT 27
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63857
63831: LD_INT 26
63833: DOUBLE
63834: EQUAL
63835: IFTRUE 63857
63837: LD_INT 28
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63857
63843: LD_INT 29
63845: DOUBLE
63846: EQUAL
63847: IFTRUE 63857
63849: LD_INT 30
63851: DOUBLE
63852: EQUAL
63853: IFTRUE 63857
63855: GO 63913
63857: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63858: LD_ADDR_VAR 0 9
63862: PUSH
63863: LD_VAR 0 59
63867: PUSH
63868: LD_VAR 0 60
63872: PUSH
63873: LD_VAR 0 61
63877: PUSH
63878: LD_VAR 0 62
63882: PUSH
63883: LD_VAR 0 63
63887: PUSH
63888: LD_VAR 0 64
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: PUSH
63901: LD_VAR 0 4
63905: PUSH
63906: LD_INT 1
63908: PLUS
63909: ARRAY
63910: ST_TO_ADDR
63911: GO 63914
63913: POP
// temp_list2 = [ ] ;
63914: LD_ADDR_VAR 0 10
63918: PUSH
63919: EMPTY
63920: ST_TO_ADDR
// for i in temp_list do
63921: LD_ADDR_VAR 0 8
63925: PUSH
63926: LD_VAR 0 9
63930: PUSH
63931: FOR_IN
63932: IFFALSE 63984
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63934: LD_ADDR_VAR 0 10
63938: PUSH
63939: LD_VAR 0 10
63943: PUSH
63944: LD_VAR 0 8
63948: PUSH
63949: LD_INT 1
63951: ARRAY
63952: PUSH
63953: LD_VAR 0 2
63957: PLUS
63958: PUSH
63959: LD_VAR 0 8
63963: PUSH
63964: LD_INT 2
63966: ARRAY
63967: PUSH
63968: LD_VAR 0 3
63972: PLUS
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: ADD
63981: ST_TO_ADDR
63982: GO 63931
63984: POP
63985: POP
// result = temp_list2 ;
63986: LD_ADDR_VAR 0 7
63990: PUSH
63991: LD_VAR 0 10
63995: ST_TO_ADDR
// end ;
63996: LD_VAR 0 7
64000: RET
// export function EnemyInRange ( unit , dist ) ; begin
64001: LD_INT 0
64003: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64004: LD_ADDR_VAR 0 3
64008: PUSH
64009: LD_VAR 0 1
64013: PPUSH
64014: CALL_OW 255
64018: PPUSH
64019: LD_VAR 0 1
64023: PPUSH
64024: CALL_OW 250
64028: PPUSH
64029: LD_VAR 0 1
64033: PPUSH
64034: CALL_OW 251
64038: PPUSH
64039: LD_VAR 0 2
64043: PPUSH
64044: CALL 37403 0 4
64048: PUSH
64049: LD_INT 4
64051: ARRAY
64052: ST_TO_ADDR
// end ;
64053: LD_VAR 0 3
64057: RET
// export function PlayerSeeMe ( unit ) ; begin
64058: LD_INT 0
64060: PPUSH
// result := See ( your_side , unit ) ;
64061: LD_ADDR_VAR 0 2
64065: PUSH
64066: LD_OWVAR 2
64070: PPUSH
64071: LD_VAR 0 1
64075: PPUSH
64076: CALL_OW 292
64080: ST_TO_ADDR
// end ;
64081: LD_VAR 0 2
64085: RET
// export function ReverseDir ( unit ) ; begin
64086: LD_INT 0
64088: PPUSH
// if not unit then
64089: LD_VAR 0 1
64093: NOT
64094: IFFALSE 64098
// exit ;
64096: GO 64121
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64098: LD_ADDR_VAR 0 2
64102: PUSH
64103: LD_VAR 0 1
64107: PPUSH
64108: CALL_OW 254
64112: PUSH
64113: LD_INT 3
64115: PLUS
64116: PUSH
64117: LD_INT 6
64119: MOD
64120: ST_TO_ADDR
// end ;
64121: LD_VAR 0 2
64125: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64126: LD_INT 0
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
64132: PPUSH
64133: PPUSH
// if not unit or not hexes then
64134: LD_VAR 0 1
64138: NOT
64139: PUSH
64140: LD_VAR 0 2
64144: NOT
64145: OR
64146: IFFALSE 64150
// exit ;
64148: GO 64273
// dist := 9999 ;
64150: LD_ADDR_VAR 0 5
64154: PUSH
64155: LD_INT 9999
64157: ST_TO_ADDR
// for i = 1 to hexes do
64158: LD_ADDR_VAR 0 4
64162: PUSH
64163: DOUBLE
64164: LD_INT 1
64166: DEC
64167: ST_TO_ADDR
64168: LD_VAR 0 2
64172: PUSH
64173: FOR_TO
64174: IFFALSE 64261
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64176: LD_ADDR_VAR 0 6
64180: PUSH
64181: LD_VAR 0 1
64185: PPUSH
64186: LD_VAR 0 2
64190: PUSH
64191: LD_VAR 0 4
64195: ARRAY
64196: PUSH
64197: LD_INT 1
64199: ARRAY
64200: PPUSH
64201: LD_VAR 0 2
64205: PUSH
64206: LD_VAR 0 4
64210: ARRAY
64211: PUSH
64212: LD_INT 2
64214: ARRAY
64215: PPUSH
64216: CALL_OW 297
64220: ST_TO_ADDR
// if tdist < dist then
64221: LD_VAR 0 6
64225: PUSH
64226: LD_VAR 0 5
64230: LESS
64231: IFFALSE 64259
// begin hex := hexes [ i ] ;
64233: LD_ADDR_VAR 0 8
64237: PUSH
64238: LD_VAR 0 2
64242: PUSH
64243: LD_VAR 0 4
64247: ARRAY
64248: ST_TO_ADDR
// dist := tdist ;
64249: LD_ADDR_VAR 0 5
64253: PUSH
64254: LD_VAR 0 6
64258: ST_TO_ADDR
// end ; end ;
64259: GO 64173
64261: POP
64262: POP
// result := hex ;
64263: LD_ADDR_VAR 0 3
64267: PUSH
64268: LD_VAR 0 8
64272: ST_TO_ADDR
// end ;
64273: LD_VAR 0 3
64277: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64278: LD_INT 0
64280: PPUSH
64281: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64282: LD_VAR 0 1
64286: NOT
64287: PUSH
64288: LD_VAR 0 1
64292: PUSH
64293: LD_INT 21
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 23
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PPUSH
64317: CALL_OW 69
64321: IN
64322: NOT
64323: OR
64324: IFFALSE 64328
// exit ;
64326: GO 64375
// for i = 1 to 3 do
64328: LD_ADDR_VAR 0 3
64332: PUSH
64333: DOUBLE
64334: LD_INT 1
64336: DEC
64337: ST_TO_ADDR
64338: LD_INT 3
64340: PUSH
64341: FOR_TO
64342: IFFALSE 64373
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 250
64353: PPUSH
64354: LD_VAR 0 1
64358: PPUSH
64359: CALL_OW 251
64363: PPUSH
64364: LD_INT 1
64366: PPUSH
64367: CALL_OW 453
64371: GO 64341
64373: POP
64374: POP
// end ;
64375: LD_VAR 0 2
64379: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64380: LD_INT 0
64382: PPUSH
64383: PPUSH
64384: PPUSH
64385: PPUSH
64386: PPUSH
64387: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64388: LD_VAR 0 1
64392: NOT
64393: PUSH
64394: LD_VAR 0 2
64398: NOT
64399: OR
64400: PUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL_OW 314
64410: OR
64411: IFFALSE 64415
// exit ;
64413: GO 64856
// x := GetX ( enemy_unit ) ;
64415: LD_ADDR_VAR 0 7
64419: PUSH
64420: LD_VAR 0 2
64424: PPUSH
64425: CALL_OW 250
64429: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64430: LD_ADDR_VAR 0 8
64434: PUSH
64435: LD_VAR 0 2
64439: PPUSH
64440: CALL_OW 251
64444: ST_TO_ADDR
// if not x or not y then
64445: LD_VAR 0 7
64449: NOT
64450: PUSH
64451: LD_VAR 0 8
64455: NOT
64456: OR
64457: IFFALSE 64461
// exit ;
64459: GO 64856
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64461: LD_ADDR_VAR 0 6
64465: PUSH
64466: LD_VAR 0 7
64470: PPUSH
64471: LD_INT 0
64473: PPUSH
64474: LD_INT 4
64476: PPUSH
64477: CALL_OW 272
64481: PUSH
64482: LD_VAR 0 8
64486: PPUSH
64487: LD_INT 0
64489: PPUSH
64490: LD_INT 4
64492: PPUSH
64493: CALL_OW 273
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_VAR 0 7
64506: PPUSH
64507: LD_INT 1
64509: PPUSH
64510: LD_INT 4
64512: PPUSH
64513: CALL_OW 272
64517: PUSH
64518: LD_VAR 0 8
64522: PPUSH
64523: LD_INT 1
64525: PPUSH
64526: LD_INT 4
64528: PPUSH
64529: CALL_OW 273
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_VAR 0 7
64542: PPUSH
64543: LD_INT 2
64545: PPUSH
64546: LD_INT 4
64548: PPUSH
64549: CALL_OW 272
64553: PUSH
64554: LD_VAR 0 8
64558: PPUSH
64559: LD_INT 2
64561: PPUSH
64562: LD_INT 4
64564: PPUSH
64565: CALL_OW 273
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_VAR 0 7
64578: PPUSH
64579: LD_INT 3
64581: PPUSH
64582: LD_INT 4
64584: PPUSH
64585: CALL_OW 272
64589: PUSH
64590: LD_VAR 0 8
64594: PPUSH
64595: LD_INT 3
64597: PPUSH
64598: LD_INT 4
64600: PPUSH
64601: CALL_OW 273
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_VAR 0 7
64614: PPUSH
64615: LD_INT 4
64617: PPUSH
64618: LD_INT 4
64620: PPUSH
64621: CALL_OW 272
64625: PUSH
64626: LD_VAR 0 8
64630: PPUSH
64631: LD_INT 4
64633: PPUSH
64634: LD_INT 4
64636: PPUSH
64637: CALL_OW 273
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_VAR 0 7
64650: PPUSH
64651: LD_INT 5
64653: PPUSH
64654: LD_INT 4
64656: PPUSH
64657: CALL_OW 272
64661: PUSH
64662: LD_VAR 0 8
64666: PPUSH
64667: LD_INT 5
64669: PPUSH
64670: LD_INT 4
64672: PPUSH
64673: CALL_OW 273
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// for i = tmp downto 1 do
64690: LD_ADDR_VAR 0 4
64694: PUSH
64695: DOUBLE
64696: LD_VAR 0 6
64700: INC
64701: ST_TO_ADDR
64702: LD_INT 1
64704: PUSH
64705: FOR_DOWNTO
64706: IFFALSE 64807
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64708: LD_VAR 0 6
64712: PUSH
64713: LD_VAR 0 4
64717: ARRAY
64718: PUSH
64719: LD_INT 1
64721: ARRAY
64722: PPUSH
64723: LD_VAR 0 6
64727: PUSH
64728: LD_VAR 0 4
64732: ARRAY
64733: PUSH
64734: LD_INT 2
64736: ARRAY
64737: PPUSH
64738: CALL_OW 488
64742: NOT
64743: PUSH
64744: LD_VAR 0 6
64748: PUSH
64749: LD_VAR 0 4
64753: ARRAY
64754: PUSH
64755: LD_INT 1
64757: ARRAY
64758: PPUSH
64759: LD_VAR 0 6
64763: PUSH
64764: LD_VAR 0 4
64768: ARRAY
64769: PUSH
64770: LD_INT 2
64772: ARRAY
64773: PPUSH
64774: CALL_OW 428
64778: PUSH
64779: LD_INT 0
64781: NONEQUAL
64782: OR
64783: IFFALSE 64805
// tmp := Delete ( tmp , i ) ;
64785: LD_ADDR_VAR 0 6
64789: PUSH
64790: LD_VAR 0 6
64794: PPUSH
64795: LD_VAR 0 4
64799: PPUSH
64800: CALL_OW 3
64804: ST_TO_ADDR
64805: GO 64705
64807: POP
64808: POP
// j := GetClosestHex ( unit , tmp ) ;
64809: LD_ADDR_VAR 0 5
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 6
64823: PPUSH
64824: CALL 64126 0 2
64828: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64829: LD_VAR 0 1
64833: PPUSH
64834: LD_VAR 0 5
64838: PUSH
64839: LD_INT 1
64841: ARRAY
64842: PPUSH
64843: LD_VAR 0 5
64847: PUSH
64848: LD_INT 2
64850: ARRAY
64851: PPUSH
64852: CALL_OW 111
// end ;
64856: LD_VAR 0 3
64860: RET
// export function PrepareApemanSoldier ( ) ; begin
64861: LD_INT 0
64863: PPUSH
// uc_nation := 0 ;
64864: LD_ADDR_OWVAR 21
64868: PUSH
64869: LD_INT 0
64871: ST_TO_ADDR
// hc_sex := sex_male ;
64872: LD_ADDR_OWVAR 27
64876: PUSH
64877: LD_INT 1
64879: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64880: LD_ADDR_OWVAR 28
64884: PUSH
64885: LD_INT 15
64887: ST_TO_ADDR
// hc_gallery :=  ;
64888: LD_ADDR_OWVAR 33
64892: PUSH
64893: LD_STRING 
64895: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64896: LD_ADDR_OWVAR 31
64900: PUSH
64901: LD_INT 0
64903: PPUSH
64904: LD_INT 3
64906: PPUSH
64907: CALL_OW 12
64911: PUSH
64912: LD_INT 0
64914: PPUSH
64915: LD_INT 3
64917: PPUSH
64918: CALL_OW 12
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: ST_TO_ADDR
// end ;
64935: LD_VAR 0 1
64939: RET
// export function PrepareApemanEngineer ( ) ; begin
64940: LD_INT 0
64942: PPUSH
// uc_nation := 0 ;
64943: LD_ADDR_OWVAR 21
64947: PUSH
64948: LD_INT 0
64950: ST_TO_ADDR
// hc_sex := sex_male ;
64951: LD_ADDR_OWVAR 27
64955: PUSH
64956: LD_INT 1
64958: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64959: LD_ADDR_OWVAR 28
64963: PUSH
64964: LD_INT 16
64966: ST_TO_ADDR
// hc_gallery :=  ;
64967: LD_ADDR_OWVAR 33
64971: PUSH
64972: LD_STRING 
64974: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64975: LD_ADDR_OWVAR 31
64979: PUSH
64980: LD_INT 0
64982: PPUSH
64983: LD_INT 3
64985: PPUSH
64986: CALL_OW 12
64990: PUSH
64991: LD_INT 0
64993: PPUSH
64994: LD_INT 3
64996: PPUSH
64997: CALL_OW 12
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// end ;
65014: LD_VAR 0 1
65018: RET
// export function PrepareApeman ( agressivity ) ; begin
65019: LD_INT 0
65021: PPUSH
// uc_side := 0 ;
65022: LD_ADDR_OWVAR 20
65026: PUSH
65027: LD_INT 0
65029: ST_TO_ADDR
// uc_nation := 0 ;
65030: LD_ADDR_OWVAR 21
65034: PUSH
65035: LD_INT 0
65037: ST_TO_ADDR
// hc_sex := sex_male ;
65038: LD_ADDR_OWVAR 27
65042: PUSH
65043: LD_INT 1
65045: ST_TO_ADDR
// hc_class := class_apeman ;
65046: LD_ADDR_OWVAR 28
65050: PUSH
65051: LD_INT 12
65053: ST_TO_ADDR
// hc_gallery :=  ;
65054: LD_ADDR_OWVAR 33
65058: PUSH
65059: LD_STRING 
65061: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65062: LD_ADDR_OWVAR 35
65066: PUSH
65067: LD_VAR 0 1
65071: NEG
65072: PPUSH
65073: LD_VAR 0 1
65077: PPUSH
65078: CALL_OW 12
65082: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65083: LD_ADDR_OWVAR 31
65087: PUSH
65088: LD_INT 0
65090: PPUSH
65091: LD_INT 3
65093: PPUSH
65094: CALL_OW 12
65098: PUSH
65099: LD_INT 0
65101: PPUSH
65102: LD_INT 3
65104: PPUSH
65105: CALL_OW 12
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: ST_TO_ADDR
// end ;
65122: LD_VAR 0 2
65126: RET
// export function PrepareTiger ( agressivity ) ; begin
65127: LD_INT 0
65129: PPUSH
// uc_side := 0 ;
65130: LD_ADDR_OWVAR 20
65134: PUSH
65135: LD_INT 0
65137: ST_TO_ADDR
// uc_nation := 0 ;
65138: LD_ADDR_OWVAR 21
65142: PUSH
65143: LD_INT 0
65145: ST_TO_ADDR
// hc_class := class_tiger ;
65146: LD_ADDR_OWVAR 28
65150: PUSH
65151: LD_INT 14
65153: ST_TO_ADDR
// hc_gallery :=  ;
65154: LD_ADDR_OWVAR 33
65158: PUSH
65159: LD_STRING 
65161: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65162: LD_ADDR_OWVAR 35
65166: PUSH
65167: LD_VAR 0 1
65171: NEG
65172: PPUSH
65173: LD_VAR 0 1
65177: PPUSH
65178: CALL_OW 12
65182: ST_TO_ADDR
// end ;
65183: LD_VAR 0 2
65187: RET
// export function PrepareEnchidna ( ) ; begin
65188: LD_INT 0
65190: PPUSH
// uc_side := 0 ;
65191: LD_ADDR_OWVAR 20
65195: PUSH
65196: LD_INT 0
65198: ST_TO_ADDR
// uc_nation := 0 ;
65199: LD_ADDR_OWVAR 21
65203: PUSH
65204: LD_INT 0
65206: ST_TO_ADDR
// hc_class := class_baggie ;
65207: LD_ADDR_OWVAR 28
65211: PUSH
65212: LD_INT 13
65214: ST_TO_ADDR
// hc_gallery :=  ;
65215: LD_ADDR_OWVAR 33
65219: PUSH
65220: LD_STRING 
65222: ST_TO_ADDR
// end ;
65223: LD_VAR 0 1
65227: RET
// export function PrepareFrog ( ) ; begin
65228: LD_INT 0
65230: PPUSH
// uc_side := 0 ;
65231: LD_ADDR_OWVAR 20
65235: PUSH
65236: LD_INT 0
65238: ST_TO_ADDR
// uc_nation := 0 ;
65239: LD_ADDR_OWVAR 21
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// hc_class := class_frog ;
65247: LD_ADDR_OWVAR 28
65251: PUSH
65252: LD_INT 19
65254: ST_TO_ADDR
// hc_gallery :=  ;
65255: LD_ADDR_OWVAR 33
65259: PUSH
65260: LD_STRING 
65262: ST_TO_ADDR
// end ;
65263: LD_VAR 0 1
65267: RET
// export function PrepareFish ( ) ; begin
65268: LD_INT 0
65270: PPUSH
// uc_side := 0 ;
65271: LD_ADDR_OWVAR 20
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// uc_nation := 0 ;
65279: LD_ADDR_OWVAR 21
65283: PUSH
65284: LD_INT 0
65286: ST_TO_ADDR
// hc_class := class_fish ;
65287: LD_ADDR_OWVAR 28
65291: PUSH
65292: LD_INT 20
65294: ST_TO_ADDR
// hc_gallery :=  ;
65295: LD_ADDR_OWVAR 33
65299: PUSH
65300: LD_STRING 
65302: ST_TO_ADDR
// end ;
65303: LD_VAR 0 1
65307: RET
// export function PrepareBird ( ) ; begin
65308: LD_INT 0
65310: PPUSH
// uc_side := 0 ;
65311: LD_ADDR_OWVAR 20
65315: PUSH
65316: LD_INT 0
65318: ST_TO_ADDR
// uc_nation := 0 ;
65319: LD_ADDR_OWVAR 21
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// hc_class := class_phororhacos ;
65327: LD_ADDR_OWVAR 28
65331: PUSH
65332: LD_INT 18
65334: ST_TO_ADDR
// hc_gallery :=  ;
65335: LD_ADDR_OWVAR 33
65339: PUSH
65340: LD_STRING 
65342: ST_TO_ADDR
// end ;
65343: LD_VAR 0 1
65347: RET
// export function PrepareHorse ( ) ; begin
65348: LD_INT 0
65350: PPUSH
// uc_side := 0 ;
65351: LD_ADDR_OWVAR 20
65355: PUSH
65356: LD_INT 0
65358: ST_TO_ADDR
// uc_nation := 0 ;
65359: LD_ADDR_OWVAR 21
65363: PUSH
65364: LD_INT 0
65366: ST_TO_ADDR
// hc_class := class_horse ;
65367: LD_ADDR_OWVAR 28
65371: PUSH
65372: LD_INT 21
65374: ST_TO_ADDR
// hc_gallery :=  ;
65375: LD_ADDR_OWVAR 33
65379: PUSH
65380: LD_STRING 
65382: ST_TO_ADDR
// end ;
65383: LD_VAR 0 1
65387: RET
// export function PrepareMastodont ( ) ; begin
65388: LD_INT 0
65390: PPUSH
// uc_side := 0 ;
65391: LD_ADDR_OWVAR 20
65395: PUSH
65396: LD_INT 0
65398: ST_TO_ADDR
// uc_nation := 0 ;
65399: LD_ADDR_OWVAR 21
65403: PUSH
65404: LD_INT 0
65406: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65407: LD_ADDR_OWVAR 37
65411: PUSH
65412: LD_INT 31
65414: ST_TO_ADDR
// vc_control := control_rider ;
65415: LD_ADDR_OWVAR 38
65419: PUSH
65420: LD_INT 4
65422: ST_TO_ADDR
// end ;
65423: LD_VAR 0 1
65427: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65428: LD_INT 0
65430: PPUSH
65431: PPUSH
65432: PPUSH
// uc_side = 0 ;
65433: LD_ADDR_OWVAR 20
65437: PUSH
65438: LD_INT 0
65440: ST_TO_ADDR
// uc_nation = 0 ;
65441: LD_ADDR_OWVAR 21
65445: PUSH
65446: LD_INT 0
65448: ST_TO_ADDR
// InitHc_All ( ) ;
65449: CALL_OW 584
// InitVc ;
65453: CALL_OW 20
// if mastodonts then
65457: LD_VAR 0 6
65461: IFFALSE 65528
// for i = 1 to mastodonts do
65463: LD_ADDR_VAR 0 11
65467: PUSH
65468: DOUBLE
65469: LD_INT 1
65471: DEC
65472: ST_TO_ADDR
65473: LD_VAR 0 6
65477: PUSH
65478: FOR_TO
65479: IFFALSE 65526
// begin vc_chassis := 31 ;
65481: LD_ADDR_OWVAR 37
65485: PUSH
65486: LD_INT 31
65488: ST_TO_ADDR
// vc_control := control_rider ;
65489: LD_ADDR_OWVAR 38
65493: PUSH
65494: LD_INT 4
65496: ST_TO_ADDR
// animal := CreateVehicle ;
65497: LD_ADDR_VAR 0 12
65501: PUSH
65502: CALL_OW 45
65506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65507: LD_VAR 0 12
65511: PPUSH
65512: LD_VAR 0 8
65516: PPUSH
65517: LD_INT 0
65519: PPUSH
65520: CALL 67663 0 3
// end ;
65524: GO 65478
65526: POP
65527: POP
// if horses then
65528: LD_VAR 0 5
65532: IFFALSE 65599
// for i = 1 to horses do
65534: LD_ADDR_VAR 0 11
65538: PUSH
65539: DOUBLE
65540: LD_INT 1
65542: DEC
65543: ST_TO_ADDR
65544: LD_VAR 0 5
65548: PUSH
65549: FOR_TO
65550: IFFALSE 65597
// begin hc_class := 21 ;
65552: LD_ADDR_OWVAR 28
65556: PUSH
65557: LD_INT 21
65559: ST_TO_ADDR
// hc_gallery :=  ;
65560: LD_ADDR_OWVAR 33
65564: PUSH
65565: LD_STRING 
65567: ST_TO_ADDR
// animal := CreateHuman ;
65568: LD_ADDR_VAR 0 12
65572: PUSH
65573: CALL_OW 44
65577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65578: LD_VAR 0 12
65582: PPUSH
65583: LD_VAR 0 8
65587: PPUSH
65588: LD_INT 0
65590: PPUSH
65591: CALL 67663 0 3
// end ;
65595: GO 65549
65597: POP
65598: POP
// if birds then
65599: LD_VAR 0 1
65603: IFFALSE 65670
// for i = 1 to birds do
65605: LD_ADDR_VAR 0 11
65609: PUSH
65610: DOUBLE
65611: LD_INT 1
65613: DEC
65614: ST_TO_ADDR
65615: LD_VAR 0 1
65619: PUSH
65620: FOR_TO
65621: IFFALSE 65668
// begin hc_class = 18 ;
65623: LD_ADDR_OWVAR 28
65627: PUSH
65628: LD_INT 18
65630: ST_TO_ADDR
// hc_gallery =  ;
65631: LD_ADDR_OWVAR 33
65635: PUSH
65636: LD_STRING 
65638: ST_TO_ADDR
// animal := CreateHuman ;
65639: LD_ADDR_VAR 0 12
65643: PUSH
65644: CALL_OW 44
65648: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65649: LD_VAR 0 12
65653: PPUSH
65654: LD_VAR 0 8
65658: PPUSH
65659: LD_INT 0
65661: PPUSH
65662: CALL 67663 0 3
// end ;
65666: GO 65620
65668: POP
65669: POP
// if tigers then
65670: LD_VAR 0 2
65674: IFFALSE 65758
// for i = 1 to tigers do
65676: LD_ADDR_VAR 0 11
65680: PUSH
65681: DOUBLE
65682: LD_INT 1
65684: DEC
65685: ST_TO_ADDR
65686: LD_VAR 0 2
65690: PUSH
65691: FOR_TO
65692: IFFALSE 65756
// begin hc_class = class_tiger ;
65694: LD_ADDR_OWVAR 28
65698: PUSH
65699: LD_INT 14
65701: ST_TO_ADDR
// hc_gallery =  ;
65702: LD_ADDR_OWVAR 33
65706: PUSH
65707: LD_STRING 
65709: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65710: LD_ADDR_OWVAR 35
65714: PUSH
65715: LD_INT 7
65717: NEG
65718: PPUSH
65719: LD_INT 7
65721: PPUSH
65722: CALL_OW 12
65726: ST_TO_ADDR
// animal := CreateHuman ;
65727: LD_ADDR_VAR 0 12
65731: PUSH
65732: CALL_OW 44
65736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65737: LD_VAR 0 12
65741: PPUSH
65742: LD_VAR 0 8
65746: PPUSH
65747: LD_INT 0
65749: PPUSH
65750: CALL 67663 0 3
// end ;
65754: GO 65691
65756: POP
65757: POP
// if apemans then
65758: LD_VAR 0 3
65762: IFFALSE 65885
// for i = 1 to apemans do
65764: LD_ADDR_VAR 0 11
65768: PUSH
65769: DOUBLE
65770: LD_INT 1
65772: DEC
65773: ST_TO_ADDR
65774: LD_VAR 0 3
65778: PUSH
65779: FOR_TO
65780: IFFALSE 65883
// begin hc_class = class_apeman ;
65782: LD_ADDR_OWVAR 28
65786: PUSH
65787: LD_INT 12
65789: ST_TO_ADDR
// hc_gallery =  ;
65790: LD_ADDR_OWVAR 33
65794: PUSH
65795: LD_STRING 
65797: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65798: LD_ADDR_OWVAR 35
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PPUSH
65807: LD_INT 2
65809: PPUSH
65810: CALL_OW 12
65814: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65815: LD_ADDR_OWVAR 31
65819: PUSH
65820: LD_INT 1
65822: PPUSH
65823: LD_INT 3
65825: PPUSH
65826: CALL_OW 12
65830: PUSH
65831: LD_INT 1
65833: PPUSH
65834: LD_INT 3
65836: PPUSH
65837: CALL_OW 12
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: ST_TO_ADDR
// animal := CreateHuman ;
65854: LD_ADDR_VAR 0 12
65858: PUSH
65859: CALL_OW 44
65863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65864: LD_VAR 0 12
65868: PPUSH
65869: LD_VAR 0 8
65873: PPUSH
65874: LD_INT 0
65876: PPUSH
65877: CALL 67663 0 3
// end ;
65881: GO 65779
65883: POP
65884: POP
// if enchidnas then
65885: LD_VAR 0 4
65889: IFFALSE 65956
// for i = 1 to enchidnas do
65891: LD_ADDR_VAR 0 11
65895: PUSH
65896: DOUBLE
65897: LD_INT 1
65899: DEC
65900: ST_TO_ADDR
65901: LD_VAR 0 4
65905: PUSH
65906: FOR_TO
65907: IFFALSE 65954
// begin hc_class = 13 ;
65909: LD_ADDR_OWVAR 28
65913: PUSH
65914: LD_INT 13
65916: ST_TO_ADDR
// hc_gallery =  ;
65917: LD_ADDR_OWVAR 33
65921: PUSH
65922: LD_STRING 
65924: ST_TO_ADDR
// animal := CreateHuman ;
65925: LD_ADDR_VAR 0 12
65929: PUSH
65930: CALL_OW 44
65934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65935: LD_VAR 0 12
65939: PPUSH
65940: LD_VAR 0 8
65944: PPUSH
65945: LD_INT 0
65947: PPUSH
65948: CALL 67663 0 3
// end ;
65952: GO 65906
65954: POP
65955: POP
// if fishes then
65956: LD_VAR 0 7
65960: IFFALSE 66027
// for i = 1 to fishes do
65962: LD_ADDR_VAR 0 11
65966: PUSH
65967: DOUBLE
65968: LD_INT 1
65970: DEC
65971: ST_TO_ADDR
65972: LD_VAR 0 7
65976: PUSH
65977: FOR_TO
65978: IFFALSE 66025
// begin hc_class = 20 ;
65980: LD_ADDR_OWVAR 28
65984: PUSH
65985: LD_INT 20
65987: ST_TO_ADDR
// hc_gallery =  ;
65988: LD_ADDR_OWVAR 33
65992: PUSH
65993: LD_STRING 
65995: ST_TO_ADDR
// animal := CreateHuman ;
65996: LD_ADDR_VAR 0 12
66000: PUSH
66001: CALL_OW 44
66005: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66006: LD_VAR 0 12
66010: PPUSH
66011: LD_VAR 0 9
66015: PPUSH
66016: LD_INT 0
66018: PPUSH
66019: CALL 67663 0 3
// end ;
66023: GO 65977
66025: POP
66026: POP
// end ;
66027: LD_VAR 0 10
66031: RET
// export function WantHeal ( sci , unit ) ; begin
66032: LD_INT 0
66034: PPUSH
// if GetTaskList ( sci ) > 0 then
66035: LD_VAR 0 1
66039: PPUSH
66040: CALL_OW 437
66044: PUSH
66045: LD_INT 0
66047: GREATER
66048: IFFALSE 66118
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66050: LD_VAR 0 1
66054: PPUSH
66055: CALL_OW 437
66059: PUSH
66060: LD_INT 1
66062: ARRAY
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: PUSH
66068: LD_STRING l
66070: EQUAL
66071: PUSH
66072: LD_VAR 0 1
66076: PPUSH
66077: CALL_OW 437
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PUSH
66086: LD_INT 4
66088: ARRAY
66089: PUSH
66090: LD_VAR 0 2
66094: EQUAL
66095: AND
66096: IFFALSE 66108
// result := true else
66098: LD_ADDR_VAR 0 3
66102: PUSH
66103: LD_INT 1
66105: ST_TO_ADDR
66106: GO 66116
// result := false ;
66108: LD_ADDR_VAR 0 3
66112: PUSH
66113: LD_INT 0
66115: ST_TO_ADDR
// end else
66116: GO 66126
// result := false ;
66118: LD_ADDR_VAR 0 3
66122: PUSH
66123: LD_INT 0
66125: ST_TO_ADDR
// end ;
66126: LD_VAR 0 3
66130: RET
// export function HealTarget ( sci ) ; begin
66131: LD_INT 0
66133: PPUSH
// if not sci then
66134: LD_VAR 0 1
66138: NOT
66139: IFFALSE 66143
// exit ;
66141: GO 66208
// result := 0 ;
66143: LD_ADDR_VAR 0 2
66147: PUSH
66148: LD_INT 0
66150: ST_TO_ADDR
// if GetTaskList ( sci ) then
66151: LD_VAR 0 1
66155: PPUSH
66156: CALL_OW 437
66160: IFFALSE 66208
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66162: LD_VAR 0 1
66166: PPUSH
66167: CALL_OW 437
66171: PUSH
66172: LD_INT 1
66174: ARRAY
66175: PUSH
66176: LD_INT 1
66178: ARRAY
66179: PUSH
66180: LD_STRING l
66182: EQUAL
66183: IFFALSE 66208
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66185: LD_ADDR_VAR 0 2
66189: PUSH
66190: LD_VAR 0 1
66194: PPUSH
66195: CALL_OW 437
66199: PUSH
66200: LD_INT 1
66202: ARRAY
66203: PUSH
66204: LD_INT 4
66206: ARRAY
66207: ST_TO_ADDR
// end ;
66208: LD_VAR 0 2
66212: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66213: LD_INT 0
66215: PPUSH
66216: PPUSH
66217: PPUSH
66218: PPUSH
// if not base_units then
66219: LD_VAR 0 1
66223: NOT
66224: IFFALSE 66228
// exit ;
66226: GO 66315
// result := false ;
66228: LD_ADDR_VAR 0 2
66232: PUSH
66233: LD_INT 0
66235: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66236: LD_ADDR_VAR 0 5
66240: PUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: LD_INT 21
66248: PUSH
66249: LD_INT 3
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PPUSH
66256: CALL_OW 72
66260: ST_TO_ADDR
// if not tmp then
66261: LD_VAR 0 5
66265: NOT
66266: IFFALSE 66270
// exit ;
66268: GO 66315
// for i in tmp do
66270: LD_ADDR_VAR 0 3
66274: PUSH
66275: LD_VAR 0 5
66279: PUSH
66280: FOR_IN
66281: IFFALSE 66313
// begin result := EnemyInRange ( i , 22 ) ;
66283: LD_ADDR_VAR 0 2
66287: PUSH
66288: LD_VAR 0 3
66292: PPUSH
66293: LD_INT 22
66295: PPUSH
66296: CALL 64001 0 2
66300: ST_TO_ADDR
// if result then
66301: LD_VAR 0 2
66305: IFFALSE 66311
// exit ;
66307: POP
66308: POP
66309: GO 66315
// end ;
66311: GO 66280
66313: POP
66314: POP
// end ;
66315: LD_VAR 0 2
66319: RET
// export function FilterByTag ( units , tag ) ; begin
66320: LD_INT 0
66322: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66323: LD_ADDR_VAR 0 3
66327: PUSH
66328: LD_VAR 0 1
66332: PPUSH
66333: LD_INT 120
66335: PUSH
66336: LD_VAR 0 2
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PPUSH
66345: CALL_OW 72
66349: ST_TO_ADDR
// end ;
66350: LD_VAR 0 3
66354: RET
// export function IsDriver ( un ) ; begin
66355: LD_INT 0
66357: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66358: LD_ADDR_VAR 0 2
66362: PUSH
66363: LD_VAR 0 1
66367: PUSH
66368: LD_INT 55
66370: PUSH
66371: EMPTY
66372: LIST
66373: PPUSH
66374: CALL_OW 69
66378: IN
66379: ST_TO_ADDR
// end ;
66380: LD_VAR 0 2
66384: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66385: LD_INT 0
66387: PPUSH
66388: PPUSH
// list := [ ] ;
66389: LD_ADDR_VAR 0 5
66393: PUSH
66394: EMPTY
66395: ST_TO_ADDR
// case d of 0 :
66396: LD_VAR 0 3
66400: PUSH
66401: LD_INT 0
66403: DOUBLE
66404: EQUAL
66405: IFTRUE 66409
66407: GO 66542
66409: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66410: LD_ADDR_VAR 0 5
66414: PUSH
66415: LD_VAR 0 1
66419: PUSH
66420: LD_INT 4
66422: MINUS
66423: PUSH
66424: LD_VAR 0 2
66428: PUSH
66429: LD_INT 4
66431: MINUS
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: LIST
66440: PUSH
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 3
66448: MINUS
66449: PUSH
66450: LD_VAR 0 2
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: PUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_INT 4
66470: PLUS
66471: PUSH
66472: LD_VAR 0 2
66476: PUSH
66477: LD_INT 4
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: LIST
66484: PUSH
66485: LD_VAR 0 1
66489: PUSH
66490: LD_INT 3
66492: PLUS
66493: PUSH
66494: LD_VAR 0 2
66498: PUSH
66499: LD_INT 3
66501: PLUS
66502: PUSH
66503: LD_INT 5
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: PUSH
66511: LD_VAR 0 1
66515: PUSH
66516: LD_VAR 0 2
66520: PUSH
66521: LD_INT 4
66523: PLUS
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: ST_TO_ADDR
// end ; 1 :
66540: GO 67240
66542: LD_INT 1
66544: DOUBLE
66545: EQUAL
66546: IFTRUE 66550
66548: GO 66683
66550: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66551: LD_ADDR_VAR 0 5
66555: PUSH
66556: LD_VAR 0 1
66560: PUSH
66561: LD_VAR 0 2
66565: PUSH
66566: LD_INT 4
66568: MINUS
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: PUSH
66578: LD_VAR 0 1
66582: PUSH
66583: LD_INT 3
66585: MINUS
66586: PUSH
66587: LD_VAR 0 2
66591: PUSH
66592: LD_INT 3
66594: MINUS
66595: PUSH
66596: LD_INT 2
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: PUSH
66604: LD_VAR 0 1
66608: PUSH
66609: LD_INT 4
66611: MINUS
66612: PUSH
66613: LD_VAR 0 2
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: PUSH
66626: LD_VAR 0 1
66630: PUSH
66631: LD_VAR 0 2
66635: PUSH
66636: LD_INT 3
66638: PLUS
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: PUSH
66648: LD_VAR 0 1
66652: PUSH
66653: LD_INT 4
66655: PLUS
66656: PUSH
66657: LD_VAR 0 2
66661: PUSH
66662: LD_INT 4
66664: PLUS
66665: PUSH
66666: LD_INT 5
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: ST_TO_ADDR
// end ; 2 :
66681: GO 67240
66683: LD_INT 2
66685: DOUBLE
66686: EQUAL
66687: IFTRUE 66691
66689: GO 66820
66691: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66692: LD_ADDR_VAR 0 5
66696: PUSH
66697: LD_VAR 0 1
66701: PUSH
66702: LD_VAR 0 2
66706: PUSH
66707: LD_INT 3
66709: MINUS
66710: PUSH
66711: LD_INT 3
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: PUSH
66719: LD_VAR 0 1
66723: PUSH
66724: LD_INT 4
66726: PLUS
66727: PUSH
66728: LD_VAR 0 2
66732: PUSH
66733: LD_INT 4
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: PUSH
66741: LD_VAR 0 1
66745: PUSH
66746: LD_VAR 0 2
66750: PUSH
66751: LD_INT 4
66753: PLUS
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: PUSH
66763: LD_VAR 0 1
66767: PUSH
66768: LD_INT 3
66770: MINUS
66771: PUSH
66772: LD_VAR 0 2
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: PUSH
66785: LD_VAR 0 1
66789: PUSH
66790: LD_INT 4
66792: MINUS
66793: PUSH
66794: LD_VAR 0 2
66798: PUSH
66799: LD_INT 4
66801: MINUS
66802: PUSH
66803: LD_INT 2
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: LIST
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: ST_TO_ADDR
// end ; 3 :
66818: GO 67240
66820: LD_INT 3
66822: DOUBLE
66823: EQUAL
66824: IFTRUE 66828
66826: GO 66961
66828: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66829: LD_ADDR_VAR 0 5
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: LD_INT 3
66841: PLUS
66842: PUSH
66843: LD_VAR 0 2
66847: PUSH
66848: LD_INT 4
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 4
66863: PLUS
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 4
66872: PLUS
66873: PUSH
66874: LD_INT 5
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: PUSH
66882: LD_VAR 0 1
66886: PUSH
66887: LD_INT 4
66889: MINUS
66890: PUSH
66891: LD_VAR 0 2
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: PUSH
66904: LD_VAR 0 1
66908: PUSH
66909: LD_VAR 0 2
66913: PUSH
66914: LD_INT 4
66916: MINUS
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: PUSH
66926: LD_VAR 0 1
66930: PUSH
66931: LD_INT 3
66933: MINUS
66934: PUSH
66935: LD_VAR 0 2
66939: PUSH
66940: LD_INT 3
66942: MINUS
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: ST_TO_ADDR
// end ; 4 :
66959: GO 67240
66961: LD_INT 4
66963: DOUBLE
66964: EQUAL
66965: IFTRUE 66969
66967: GO 67102
66969: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66970: LD_ADDR_VAR 0 5
66974: PUSH
66975: LD_VAR 0 1
66979: PUSH
66980: LD_VAR 0 2
66984: PUSH
66985: LD_INT 4
66987: PLUS
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: PUSH
66997: LD_VAR 0 1
67001: PUSH
67002: LD_INT 3
67004: PLUS
67005: PUSH
67006: LD_VAR 0 2
67010: PUSH
67011: LD_INT 3
67013: PLUS
67014: PUSH
67015: LD_INT 5
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: LIST
67022: PUSH
67023: LD_VAR 0 1
67027: PUSH
67028: LD_INT 4
67030: PLUS
67031: PUSH
67032: LD_VAR 0 2
67036: PUSH
67037: LD_INT 4
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: PUSH
67045: LD_VAR 0 1
67049: PUSH
67050: LD_VAR 0 2
67054: PUSH
67055: LD_INT 3
67057: MINUS
67058: PUSH
67059: LD_INT 3
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: LIST
67066: PUSH
67067: LD_VAR 0 1
67071: PUSH
67072: LD_INT 4
67074: MINUS
67075: PUSH
67076: LD_VAR 0 2
67080: PUSH
67081: LD_INT 4
67083: MINUS
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: ST_TO_ADDR
// end ; 5 :
67100: GO 67240
67102: LD_INT 5
67104: DOUBLE
67105: EQUAL
67106: IFTRUE 67110
67108: GO 67239
67110: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67111: LD_ADDR_VAR 0 5
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: LD_INT 4
67123: MINUS
67124: PUSH
67125: LD_VAR 0 2
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: PUSH
67138: LD_VAR 0 1
67142: PUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_INT 4
67150: MINUS
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: LIST
67159: PUSH
67160: LD_VAR 0 1
67164: PUSH
67165: LD_INT 4
67167: PLUS
67168: PUSH
67169: LD_VAR 0 2
67173: PUSH
67174: LD_INT 4
67176: PLUS
67177: PUSH
67178: LD_INT 5
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: PUSH
67186: LD_VAR 0 1
67190: PUSH
67191: LD_INT 3
67193: PLUS
67194: PUSH
67195: LD_VAR 0 2
67199: PUSH
67200: LD_INT 4
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: PUSH
67208: LD_VAR 0 1
67212: PUSH
67213: LD_VAR 0 2
67217: PUSH
67218: LD_INT 3
67220: PLUS
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: ST_TO_ADDR
// end ; end ;
67237: GO 67240
67239: POP
// result := list ;
67240: LD_ADDR_VAR 0 4
67244: PUSH
67245: LD_VAR 0 5
67249: ST_TO_ADDR
// end ;
67250: LD_VAR 0 4
67254: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
67259: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67260: LD_VAR 0 1
67264: NOT
67265: PUSH
67266: LD_VAR 0 2
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: LD_INT 2
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: LD_INT 4
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: IN
67289: NOT
67290: OR
67291: IFFALSE 67295
// exit ;
67293: GO 67387
// tmp := [ ] ;
67295: LD_ADDR_VAR 0 5
67299: PUSH
67300: EMPTY
67301: ST_TO_ADDR
// for i in units do
67302: LD_ADDR_VAR 0 4
67306: PUSH
67307: LD_VAR 0 1
67311: PUSH
67312: FOR_IN
67313: IFFALSE 67356
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67315: LD_ADDR_VAR 0 5
67319: PUSH
67320: LD_VAR 0 5
67324: PPUSH
67325: LD_VAR 0 5
67329: PUSH
67330: LD_INT 1
67332: PLUS
67333: PPUSH
67334: LD_VAR 0 4
67338: PPUSH
67339: LD_VAR 0 2
67343: PPUSH
67344: CALL_OW 259
67348: PPUSH
67349: CALL_OW 2
67353: ST_TO_ADDR
67354: GO 67312
67356: POP
67357: POP
// if not tmp then
67358: LD_VAR 0 5
67362: NOT
67363: IFFALSE 67367
// exit ;
67365: GO 67387
// result := SortListByListDesc ( units , tmp ) ;
67367: LD_ADDR_VAR 0 3
67371: PUSH
67372: LD_VAR 0 1
67376: PPUSH
67377: LD_VAR 0 5
67381: PPUSH
67382: CALL_OW 77
67386: ST_TO_ADDR
// end ;
67387: LD_VAR 0 3
67391: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67392: LD_INT 0
67394: PPUSH
67395: PPUSH
67396: PPUSH
// result := false ;
67397: LD_ADDR_VAR 0 3
67401: PUSH
67402: LD_INT 0
67404: ST_TO_ADDR
// x := GetX ( building ) ;
67405: LD_ADDR_VAR 0 4
67409: PUSH
67410: LD_VAR 0 2
67414: PPUSH
67415: CALL_OW 250
67419: ST_TO_ADDR
// y := GetY ( building ) ;
67420: LD_ADDR_VAR 0 5
67424: PUSH
67425: LD_VAR 0 2
67429: PPUSH
67430: CALL_OW 251
67434: ST_TO_ADDR
// if not building or not x or not y then
67435: LD_VAR 0 2
67439: NOT
67440: PUSH
67441: LD_VAR 0 4
67445: NOT
67446: OR
67447: PUSH
67448: LD_VAR 0 5
67452: NOT
67453: OR
67454: IFFALSE 67458
// exit ;
67456: GO 67550
// if GetTaskList ( unit ) then
67458: LD_VAR 0 1
67462: PPUSH
67463: CALL_OW 437
67467: IFFALSE 67550
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67469: LD_STRING e
67471: PUSH
67472: LD_VAR 0 1
67476: PPUSH
67477: CALL_OW 437
67481: PUSH
67482: LD_INT 1
67484: ARRAY
67485: PUSH
67486: LD_INT 1
67488: ARRAY
67489: EQUAL
67490: PUSH
67491: LD_VAR 0 4
67495: PUSH
67496: LD_VAR 0 1
67500: PPUSH
67501: CALL_OW 437
67505: PUSH
67506: LD_INT 1
67508: ARRAY
67509: PUSH
67510: LD_INT 2
67512: ARRAY
67513: EQUAL
67514: AND
67515: PUSH
67516: LD_VAR 0 5
67520: PUSH
67521: LD_VAR 0 1
67525: PPUSH
67526: CALL_OW 437
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PUSH
67535: LD_INT 3
67537: ARRAY
67538: EQUAL
67539: AND
67540: IFFALSE 67550
// result := true end ;
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: LD_INT 1
67549: ST_TO_ADDR
// end ;
67550: LD_VAR 0 3
67554: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67555: LD_INT 0
67557: PPUSH
// result := false ;
67558: LD_ADDR_VAR 0 4
67562: PUSH
67563: LD_INT 0
67565: ST_TO_ADDR
// if GetTaskList ( unit ) then
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 437
67575: IFFALSE 67658
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67577: LD_STRING M
67579: PUSH
67580: LD_VAR 0 1
67584: PPUSH
67585: CALL_OW 437
67589: PUSH
67590: LD_INT 1
67592: ARRAY
67593: PUSH
67594: LD_INT 1
67596: ARRAY
67597: EQUAL
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: LD_VAR 0 1
67608: PPUSH
67609: CALL_OW 437
67613: PUSH
67614: LD_INT 1
67616: ARRAY
67617: PUSH
67618: LD_INT 2
67620: ARRAY
67621: EQUAL
67622: AND
67623: PUSH
67624: LD_VAR 0 3
67628: PUSH
67629: LD_VAR 0 1
67633: PPUSH
67634: CALL_OW 437
67638: PUSH
67639: LD_INT 1
67641: ARRAY
67642: PUSH
67643: LD_INT 3
67645: ARRAY
67646: EQUAL
67647: AND
67648: IFFALSE 67658
// result := true ;
67650: LD_ADDR_VAR 0 4
67654: PUSH
67655: LD_INT 1
67657: ST_TO_ADDR
// end ; end ;
67658: LD_VAR 0 4
67662: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67663: LD_INT 0
67665: PPUSH
67666: PPUSH
67667: PPUSH
67668: PPUSH
// if not unit or not area then
67669: LD_VAR 0 1
67673: NOT
67674: PUSH
67675: LD_VAR 0 2
67679: NOT
67680: OR
67681: IFFALSE 67685
// exit ;
67683: GO 67849
// tmp := AreaToList ( area , i ) ;
67685: LD_ADDR_VAR 0 6
67689: PUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: LD_VAR 0 5
67699: PPUSH
67700: CALL_OW 517
67704: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67705: LD_ADDR_VAR 0 5
67709: PUSH
67710: DOUBLE
67711: LD_INT 1
67713: DEC
67714: ST_TO_ADDR
67715: LD_VAR 0 6
67719: PUSH
67720: LD_INT 1
67722: ARRAY
67723: PUSH
67724: FOR_TO
67725: IFFALSE 67847
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67727: LD_ADDR_VAR 0 7
67731: PUSH
67732: LD_VAR 0 6
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: LD_VAR 0 5
67745: ARRAY
67746: PUSH
67747: LD_VAR 0 6
67751: PUSH
67752: LD_INT 2
67754: ARRAY
67755: PUSH
67756: LD_VAR 0 5
67760: ARRAY
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67766: LD_VAR 0 7
67770: PUSH
67771: LD_INT 1
67773: ARRAY
67774: PPUSH
67775: LD_VAR 0 7
67779: PUSH
67780: LD_INT 2
67782: ARRAY
67783: PPUSH
67784: CALL_OW 428
67788: PUSH
67789: LD_INT 0
67791: EQUAL
67792: IFFALSE 67845
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67794: LD_VAR 0 1
67798: PPUSH
67799: LD_VAR 0 7
67803: PUSH
67804: LD_INT 1
67806: ARRAY
67807: PPUSH
67808: LD_VAR 0 7
67812: PUSH
67813: LD_INT 2
67815: ARRAY
67816: PPUSH
67817: LD_VAR 0 3
67821: PPUSH
67822: CALL_OW 48
// result := IsPlaced ( unit ) ;
67826: LD_ADDR_VAR 0 4
67830: PUSH
67831: LD_VAR 0 1
67835: PPUSH
67836: CALL_OW 305
67840: ST_TO_ADDR
// exit ;
67841: POP
67842: POP
67843: GO 67849
// end ; end ;
67845: GO 67724
67847: POP
67848: POP
// end ;
67849: LD_VAR 0 4
67853: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67854: LD_INT 0
67856: PPUSH
67857: PPUSH
67858: PPUSH
// if not side or side > 8 then
67859: LD_VAR 0 1
67863: NOT
67864: PUSH
67865: LD_VAR 0 1
67869: PUSH
67870: LD_INT 8
67872: GREATER
67873: OR
67874: IFFALSE 67878
// exit ;
67876: GO 68065
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67878: LD_ADDR_VAR 0 4
67882: PUSH
67883: LD_INT 22
67885: PUSH
67886: LD_VAR 0 1
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 21
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PPUSH
67909: CALL_OW 69
67913: ST_TO_ADDR
// if not tmp then
67914: LD_VAR 0 4
67918: NOT
67919: IFFALSE 67923
// exit ;
67921: GO 68065
// enable_addtolog := true ;
67923: LD_ADDR_OWVAR 81
67927: PUSH
67928: LD_INT 1
67930: ST_TO_ADDR
// AddToLog ( [ ) ;
67931: LD_STRING [
67933: PPUSH
67934: CALL_OW 561
// for i in tmp do
67938: LD_ADDR_VAR 0 3
67942: PUSH
67943: LD_VAR 0 4
67947: PUSH
67948: FOR_IN
67949: IFFALSE 68056
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67951: LD_STRING [
67953: PUSH
67954: LD_VAR 0 3
67958: PPUSH
67959: CALL_OW 266
67963: STR
67964: PUSH
67965: LD_STRING , 
67967: STR
67968: PUSH
67969: LD_VAR 0 3
67973: PPUSH
67974: CALL_OW 250
67978: STR
67979: PUSH
67980: LD_STRING , 
67982: STR
67983: PUSH
67984: LD_VAR 0 3
67988: PPUSH
67989: CALL_OW 251
67993: STR
67994: PUSH
67995: LD_STRING , 
67997: STR
67998: PUSH
67999: LD_VAR 0 3
68003: PPUSH
68004: CALL_OW 254
68008: STR
68009: PUSH
68010: LD_STRING , 
68012: STR
68013: PUSH
68014: LD_VAR 0 3
68018: PPUSH
68019: LD_INT 1
68021: PPUSH
68022: CALL_OW 268
68026: STR
68027: PUSH
68028: LD_STRING , 
68030: STR
68031: PUSH
68032: LD_VAR 0 3
68036: PPUSH
68037: LD_INT 2
68039: PPUSH
68040: CALL_OW 268
68044: STR
68045: PUSH
68046: LD_STRING ],
68048: STR
68049: PPUSH
68050: CALL_OW 561
// end ;
68054: GO 67948
68056: POP
68057: POP
// AddToLog ( ]; ) ;
68058: LD_STRING ];
68060: PPUSH
68061: CALL_OW 561
// end ;
68065: LD_VAR 0 2
68069: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68070: LD_INT 0
68072: PPUSH
68073: PPUSH
68074: PPUSH
68075: PPUSH
68076: PPUSH
// if not area or not rate or not max then
68077: LD_VAR 0 1
68081: NOT
68082: PUSH
68083: LD_VAR 0 2
68087: NOT
68088: OR
68089: PUSH
68090: LD_VAR 0 4
68094: NOT
68095: OR
68096: IFFALSE 68100
// exit ;
68098: GO 68289
// while 1 do
68100: LD_INT 1
68102: IFFALSE 68289
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68104: LD_ADDR_VAR 0 9
68108: PUSH
68109: LD_VAR 0 1
68113: PPUSH
68114: LD_INT 1
68116: PPUSH
68117: CALL_OW 287
68121: PUSH
68122: LD_INT 10
68124: MUL
68125: ST_TO_ADDR
// r := rate / 10 ;
68126: LD_ADDR_VAR 0 7
68130: PUSH
68131: LD_VAR 0 2
68135: PUSH
68136: LD_INT 10
68138: DIVREAL
68139: ST_TO_ADDR
// time := 1 1$00 ;
68140: LD_ADDR_VAR 0 8
68144: PUSH
68145: LD_INT 2100
68147: ST_TO_ADDR
// if amount < min then
68148: LD_VAR 0 9
68152: PUSH
68153: LD_VAR 0 3
68157: LESS
68158: IFFALSE 68176
// r := r * 2 else
68160: LD_ADDR_VAR 0 7
68164: PUSH
68165: LD_VAR 0 7
68169: PUSH
68170: LD_INT 2
68172: MUL
68173: ST_TO_ADDR
68174: GO 68202
// if amount > max then
68176: LD_VAR 0 9
68180: PUSH
68181: LD_VAR 0 4
68185: GREATER
68186: IFFALSE 68202
// r := r / 2 ;
68188: LD_ADDR_VAR 0 7
68192: PUSH
68193: LD_VAR 0 7
68197: PUSH
68198: LD_INT 2
68200: DIVREAL
68201: ST_TO_ADDR
// time := time / r ;
68202: LD_ADDR_VAR 0 8
68206: PUSH
68207: LD_VAR 0 8
68211: PUSH
68212: LD_VAR 0 7
68216: DIVREAL
68217: ST_TO_ADDR
// if time < 0 then
68218: LD_VAR 0 8
68222: PUSH
68223: LD_INT 0
68225: LESS
68226: IFFALSE 68243
// time := time * - 1 ;
68228: LD_ADDR_VAR 0 8
68232: PUSH
68233: LD_VAR 0 8
68237: PUSH
68238: LD_INT 1
68240: NEG
68241: MUL
68242: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68243: LD_VAR 0 8
68247: PUSH
68248: LD_INT 35
68250: PPUSH
68251: LD_INT 875
68253: PPUSH
68254: CALL_OW 12
68258: PLUS
68259: PPUSH
68260: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68264: LD_INT 1
68266: PPUSH
68267: LD_INT 5
68269: PPUSH
68270: CALL_OW 12
68274: PPUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_INT 1
68282: PPUSH
68283: CALL_OW 55
// end ;
68287: GO 68100
// end ;
68289: LD_VAR 0 5
68293: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68294: LD_INT 0
68296: PPUSH
68297: PPUSH
68298: PPUSH
68299: PPUSH
68300: PPUSH
68301: PPUSH
68302: PPUSH
68303: PPUSH
// if not turrets or not factories then
68304: LD_VAR 0 1
68308: NOT
68309: PUSH
68310: LD_VAR 0 2
68314: NOT
68315: OR
68316: IFFALSE 68320
// exit ;
68318: GO 68627
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68320: LD_ADDR_VAR 0 10
68324: PUSH
68325: LD_INT 5
68327: PUSH
68328: LD_INT 6
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: LD_INT 4
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: LD_INT 5
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 24
68362: PUSH
68363: LD_INT 25
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 23
68372: PUSH
68373: LD_INT 27
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 42
68386: PUSH
68387: LD_INT 43
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 44
68396: PUSH
68397: LD_INT 46
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 45
68406: PUSH
68407: LD_INT 47
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: ST_TO_ADDR
// result := [ ] ;
68424: LD_ADDR_VAR 0 3
68428: PUSH
68429: EMPTY
68430: ST_TO_ADDR
// for i in turrets do
68431: LD_ADDR_VAR 0 4
68435: PUSH
68436: LD_VAR 0 1
68440: PUSH
68441: FOR_IN
68442: IFFALSE 68625
// begin nat := GetNation ( i ) ;
68444: LD_ADDR_VAR 0 7
68448: PUSH
68449: LD_VAR 0 4
68453: PPUSH
68454: CALL_OW 248
68458: ST_TO_ADDR
// weapon := 0 ;
68459: LD_ADDR_VAR 0 8
68463: PUSH
68464: LD_INT 0
68466: ST_TO_ADDR
// if not nat then
68467: LD_VAR 0 7
68471: NOT
68472: IFFALSE 68476
// continue ;
68474: GO 68441
// for j in list [ nat ] do
68476: LD_ADDR_VAR 0 5
68480: PUSH
68481: LD_VAR 0 10
68485: PUSH
68486: LD_VAR 0 7
68490: ARRAY
68491: PUSH
68492: FOR_IN
68493: IFFALSE 68534
// if GetBWeapon ( i ) = j [ 1 ] then
68495: LD_VAR 0 4
68499: PPUSH
68500: CALL_OW 269
68504: PUSH
68505: LD_VAR 0 5
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: EQUAL
68514: IFFALSE 68532
// begin weapon := j [ 2 ] ;
68516: LD_ADDR_VAR 0 8
68520: PUSH
68521: LD_VAR 0 5
68525: PUSH
68526: LD_INT 2
68528: ARRAY
68529: ST_TO_ADDR
// break ;
68530: GO 68534
// end ;
68532: GO 68492
68534: POP
68535: POP
// if not weapon then
68536: LD_VAR 0 8
68540: NOT
68541: IFFALSE 68545
// continue ;
68543: GO 68441
// for k in factories do
68545: LD_ADDR_VAR 0 6
68549: PUSH
68550: LD_VAR 0 2
68554: PUSH
68555: FOR_IN
68556: IFFALSE 68621
// begin weapons := AvailableWeaponList ( k ) ;
68558: LD_ADDR_VAR 0 9
68562: PUSH
68563: LD_VAR 0 6
68567: PPUSH
68568: CALL_OW 478
68572: ST_TO_ADDR
// if not weapons then
68573: LD_VAR 0 9
68577: NOT
68578: IFFALSE 68582
// continue ;
68580: GO 68555
// if weapon in weapons then
68582: LD_VAR 0 8
68586: PUSH
68587: LD_VAR 0 9
68591: IN
68592: IFFALSE 68619
// begin result := [ i , weapon ] ;
68594: LD_ADDR_VAR 0 3
68598: PUSH
68599: LD_VAR 0 4
68603: PUSH
68604: LD_VAR 0 8
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: ST_TO_ADDR
// exit ;
68613: POP
68614: POP
68615: POP
68616: POP
68617: GO 68627
// end ; end ;
68619: GO 68555
68621: POP
68622: POP
// end ;
68623: GO 68441
68625: POP
68626: POP
// end ;
68627: LD_VAR 0 3
68631: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68632: LD_INT 0
68634: PPUSH
// if not side or side > 8 then
68635: LD_VAR 0 3
68639: NOT
68640: PUSH
68641: LD_VAR 0 3
68645: PUSH
68646: LD_INT 8
68648: GREATER
68649: OR
68650: IFFALSE 68654
// exit ;
68652: GO 68713
// if not range then
68654: LD_VAR 0 4
68658: NOT
68659: IFFALSE 68670
// range := - 12 ;
68661: LD_ADDR_VAR 0 4
68665: PUSH
68666: LD_INT 12
68668: NEG
68669: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68670: LD_VAR 0 1
68674: PPUSH
68675: LD_VAR 0 2
68679: PPUSH
68680: LD_VAR 0 3
68684: PPUSH
68685: LD_VAR 0 4
68689: PPUSH
68690: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68694: LD_VAR 0 1
68698: PPUSH
68699: LD_VAR 0 2
68703: PPUSH
68704: LD_VAR 0 3
68708: PPUSH
68709: CALL_OW 331
// end ;
68713: LD_VAR 0 5
68717: RET
// export function Video ( mode ) ; begin
68718: LD_INT 0
68720: PPUSH
// ingame_video = mode ;
68721: LD_ADDR_OWVAR 52
68725: PUSH
68726: LD_VAR 0 1
68730: ST_TO_ADDR
// interface_hidden = mode ;
68731: LD_ADDR_OWVAR 54
68735: PUSH
68736: LD_VAR 0 1
68740: ST_TO_ADDR
// end ;
68741: LD_VAR 0 2
68745: RET
// export function Join ( array , element ) ; begin
68746: LD_INT 0
68748: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68749: LD_ADDR_VAR 0 3
68753: PUSH
68754: LD_VAR 0 1
68758: PPUSH
68759: LD_VAR 0 1
68763: PUSH
68764: LD_INT 1
68766: PLUS
68767: PPUSH
68768: LD_VAR 0 2
68772: PPUSH
68773: CALL_OW 1
68777: ST_TO_ADDR
// end ;
68778: LD_VAR 0 3
68782: RET
// export function JoinUnion ( array , element ) ; begin
68783: LD_INT 0
68785: PPUSH
// result := array union element ;
68786: LD_ADDR_VAR 0 3
68790: PUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_VAR 0 2
68800: UNION
68801: ST_TO_ADDR
// end ;
68802: LD_VAR 0 3
68806: RET
// export function GetBehemoths ( side ) ; begin
68807: LD_INT 0
68809: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_INT 22
68817: PUSH
68818: LD_VAR 0 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 31
68829: PUSH
68830: LD_INT 25
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PPUSH
68841: CALL_OW 69
68845: ST_TO_ADDR
// end ;
68846: LD_VAR 0 2
68850: RET
// export function Shuffle ( array ) ; var i , index ; begin
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
68855: PPUSH
// result := [ ] ;
68856: LD_ADDR_VAR 0 2
68860: PUSH
68861: EMPTY
68862: ST_TO_ADDR
// if not array then
68863: LD_VAR 0 1
68867: NOT
68868: IFFALSE 68872
// exit ;
68870: GO 68971
// Randomize ;
68872: CALL_OW 10
// for i = array downto 1 do
68876: LD_ADDR_VAR 0 3
68880: PUSH
68881: DOUBLE
68882: LD_VAR 0 1
68886: INC
68887: ST_TO_ADDR
68888: LD_INT 1
68890: PUSH
68891: FOR_DOWNTO
68892: IFFALSE 68969
// begin index := rand ( 1 , array ) ;
68894: LD_ADDR_VAR 0 4
68898: PUSH
68899: LD_INT 1
68901: PPUSH
68902: LD_VAR 0 1
68906: PPUSH
68907: CALL_OW 12
68911: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68912: LD_ADDR_VAR 0 2
68916: PUSH
68917: LD_VAR 0 2
68921: PPUSH
68922: LD_VAR 0 2
68926: PUSH
68927: LD_INT 1
68929: PLUS
68930: PPUSH
68931: LD_VAR 0 1
68935: PUSH
68936: LD_VAR 0 4
68940: ARRAY
68941: PPUSH
68942: CALL_OW 2
68946: ST_TO_ADDR
// array := Delete ( array , index ) ;
68947: LD_ADDR_VAR 0 1
68951: PUSH
68952: LD_VAR 0 1
68956: PPUSH
68957: LD_VAR 0 4
68961: PPUSH
68962: CALL_OW 3
68966: ST_TO_ADDR
// end ;
68967: GO 68891
68969: POP
68970: POP
// end ;
68971: LD_VAR 0 2
68975: RET
// export function GetBaseMaterials ( base ) ; begin
68976: LD_INT 0
68978: PPUSH
// result := [ 0 , 0 , 0 ] ;
68979: LD_ADDR_VAR 0 2
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: LIST
68997: ST_TO_ADDR
// if not base then
68998: LD_VAR 0 1
69002: NOT
69003: IFFALSE 69007
// exit ;
69005: GO 69056
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69007: LD_ADDR_VAR 0 2
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: LD_INT 1
69019: PPUSH
69020: CALL_OW 275
69024: PUSH
69025: LD_VAR 0 1
69029: PPUSH
69030: LD_INT 2
69032: PPUSH
69033: CALL_OW 275
69037: PUSH
69038: LD_VAR 0 1
69042: PPUSH
69043: LD_INT 3
69045: PPUSH
69046: CALL_OW 275
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: ST_TO_ADDR
// end ;
69056: LD_VAR 0 2
69060: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69061: LD_INT 0
69063: PPUSH
69064: PPUSH
// result := array ;
69065: LD_ADDR_VAR 0 3
69069: PUSH
69070: LD_VAR 0 1
69074: ST_TO_ADDR
// if size >= result then
69075: LD_VAR 0 2
69079: PUSH
69080: LD_VAR 0 3
69084: GREATEREQUAL
69085: IFFALSE 69089
// exit ;
69087: GO 69139
// if size then
69089: LD_VAR 0 2
69093: IFFALSE 69139
// for i := array downto size do
69095: LD_ADDR_VAR 0 4
69099: PUSH
69100: DOUBLE
69101: LD_VAR 0 1
69105: INC
69106: ST_TO_ADDR
69107: LD_VAR 0 2
69111: PUSH
69112: FOR_DOWNTO
69113: IFFALSE 69137
// result := Delete ( result , result ) ;
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_VAR 0 3
69124: PPUSH
69125: LD_VAR 0 3
69129: PPUSH
69130: CALL_OW 3
69134: ST_TO_ADDR
69135: GO 69112
69137: POP
69138: POP
// end ;
69139: LD_VAR 0 3
69143: RET
// export function ComExit ( unit ) ; var tmp ; begin
69144: LD_INT 0
69146: PPUSH
69147: PPUSH
// if not IsInUnit ( unit ) then
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 310
69157: NOT
69158: IFFALSE 69162
// exit ;
69160: GO 69222
// tmp := IsInUnit ( unit ) ;
69162: LD_ADDR_VAR 0 3
69166: PUSH
69167: LD_VAR 0 1
69171: PPUSH
69172: CALL_OW 310
69176: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69177: LD_VAR 0 3
69181: PPUSH
69182: CALL_OW 247
69186: PUSH
69187: LD_INT 2
69189: EQUAL
69190: IFFALSE 69203
// ComExitVehicle ( unit ) else
69192: LD_VAR 0 1
69196: PPUSH
69197: CALL_OW 121
69201: GO 69212
// ComExitBuilding ( unit ) ;
69203: LD_VAR 0 1
69207: PPUSH
69208: CALL_OW 122
// result := tmp ;
69212: LD_ADDR_VAR 0 2
69216: PUSH
69217: LD_VAR 0 3
69221: ST_TO_ADDR
// end ;
69222: LD_VAR 0 2
69226: RET
// export function ComExitAll ( units ) ; var i ; begin
69227: LD_INT 0
69229: PPUSH
69230: PPUSH
// if not units then
69231: LD_VAR 0 1
69235: NOT
69236: IFFALSE 69240
// exit ;
69238: GO 69266
// for i in units do
69240: LD_ADDR_VAR 0 3
69244: PUSH
69245: LD_VAR 0 1
69249: PUSH
69250: FOR_IN
69251: IFFALSE 69264
// ComExit ( i ) ;
69253: LD_VAR 0 3
69257: PPUSH
69258: CALL 69144 0 1
69262: GO 69250
69264: POP
69265: POP
// end ;
69266: LD_VAR 0 2
69270: RET
// export function ResetHc ; begin
69271: LD_INT 0
69273: PPUSH
// InitHc ;
69274: CALL_OW 19
// hc_importance := 0 ;
69278: LD_ADDR_OWVAR 32
69282: PUSH
69283: LD_INT 0
69285: ST_TO_ADDR
// end ;
69286: LD_VAR 0 1
69290: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69291: LD_INT 0
69293: PPUSH
69294: PPUSH
69295: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69296: LD_ADDR_VAR 0 6
69300: PUSH
69301: LD_VAR 0 1
69305: PUSH
69306: LD_VAR 0 3
69310: PLUS
69311: PUSH
69312: LD_INT 2
69314: DIV
69315: ST_TO_ADDR
// if _x < 0 then
69316: LD_VAR 0 6
69320: PUSH
69321: LD_INT 0
69323: LESS
69324: IFFALSE 69341
// _x := _x * - 1 ;
69326: LD_ADDR_VAR 0 6
69330: PUSH
69331: LD_VAR 0 6
69335: PUSH
69336: LD_INT 1
69338: NEG
69339: MUL
69340: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69341: LD_ADDR_VAR 0 7
69345: PUSH
69346: LD_VAR 0 2
69350: PUSH
69351: LD_VAR 0 4
69355: PLUS
69356: PUSH
69357: LD_INT 2
69359: DIV
69360: ST_TO_ADDR
// if _y < 0 then
69361: LD_VAR 0 7
69365: PUSH
69366: LD_INT 0
69368: LESS
69369: IFFALSE 69386
// _y := _y * - 1 ;
69371: LD_ADDR_VAR 0 7
69375: PUSH
69376: LD_VAR 0 7
69380: PUSH
69381: LD_INT 1
69383: NEG
69384: MUL
69385: ST_TO_ADDR
// result := [ _x , _y ] ;
69386: LD_ADDR_VAR 0 5
69390: PUSH
69391: LD_VAR 0 6
69395: PUSH
69396: LD_VAR 0 7
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// end ;
69405: LD_VAR 0 5
69409: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69410: LD_INT 0
69412: PPUSH
69413: PPUSH
69414: PPUSH
69415: PPUSH
// task := GetTaskList ( unit ) ;
69416: LD_ADDR_VAR 0 7
69420: PUSH
69421: LD_VAR 0 1
69425: PPUSH
69426: CALL_OW 437
69430: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69431: LD_VAR 0 7
69435: NOT
69436: PUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: LD_VAR 0 2
69446: PPUSH
69447: CALL_OW 308
69451: NOT
69452: AND
69453: IFFALSE 69457
// exit ;
69455: GO 69575
// if IsInArea ( unit , area ) then
69457: LD_VAR 0 1
69461: PPUSH
69462: LD_VAR 0 2
69466: PPUSH
69467: CALL_OW 308
69471: IFFALSE 69489
// begin ComMoveToArea ( unit , goAway ) ;
69473: LD_VAR 0 1
69477: PPUSH
69478: LD_VAR 0 3
69482: PPUSH
69483: CALL_OW 113
// exit ;
69487: GO 69575
// end ; if task [ 1 ] [ 1 ] <> M then
69489: LD_VAR 0 7
69493: PUSH
69494: LD_INT 1
69496: ARRAY
69497: PUSH
69498: LD_INT 1
69500: ARRAY
69501: PUSH
69502: LD_STRING M
69504: NONEQUAL
69505: IFFALSE 69509
// exit ;
69507: GO 69575
// x := task [ 1 ] [ 2 ] ;
69509: LD_ADDR_VAR 0 5
69513: PUSH
69514: LD_VAR 0 7
69518: PUSH
69519: LD_INT 1
69521: ARRAY
69522: PUSH
69523: LD_INT 2
69525: ARRAY
69526: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69527: LD_ADDR_VAR 0 6
69531: PUSH
69532: LD_VAR 0 7
69536: PUSH
69537: LD_INT 1
69539: ARRAY
69540: PUSH
69541: LD_INT 3
69543: ARRAY
69544: ST_TO_ADDR
// if InArea ( x , y , area ) then
69545: LD_VAR 0 5
69549: PPUSH
69550: LD_VAR 0 6
69554: PPUSH
69555: LD_VAR 0 2
69559: PPUSH
69560: CALL_OW 309
69564: IFFALSE 69575
// ComStop ( unit ) ;
69566: LD_VAR 0 1
69570: PPUSH
69571: CALL_OW 141
// end ;
69575: LD_VAR 0 4
69579: RET
// export function Abs ( value ) ; begin
69580: LD_INT 0
69582: PPUSH
// result := value ;
69583: LD_ADDR_VAR 0 2
69587: PUSH
69588: LD_VAR 0 1
69592: ST_TO_ADDR
// if value < 0 then
69593: LD_VAR 0 1
69597: PUSH
69598: LD_INT 0
69600: LESS
69601: IFFALSE 69618
// result := value * - 1 ;
69603: LD_ADDR_VAR 0 2
69607: PUSH
69608: LD_VAR 0 1
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: MUL
69617: ST_TO_ADDR
// end ;
69618: LD_VAR 0 2
69622: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69623: LD_INT 0
69625: PPUSH
69626: PPUSH
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
// if not unit or not building then
69633: LD_VAR 0 1
69637: NOT
69638: PUSH
69639: LD_VAR 0 2
69643: NOT
69644: OR
69645: IFFALSE 69649
// exit ;
69647: GO 69875
// x := GetX ( building ) ;
69649: LD_ADDR_VAR 0 4
69653: PUSH
69654: LD_VAR 0 2
69658: PPUSH
69659: CALL_OW 250
69663: ST_TO_ADDR
// y := GetY ( building ) ;
69664: LD_ADDR_VAR 0 6
69668: PUSH
69669: LD_VAR 0 2
69673: PPUSH
69674: CALL_OW 251
69678: ST_TO_ADDR
// d := GetDir ( building ) ;
69679: LD_ADDR_VAR 0 8
69683: PUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: CALL_OW 254
69693: ST_TO_ADDR
// r := 4 ;
69694: LD_ADDR_VAR 0 9
69698: PUSH
69699: LD_INT 4
69701: ST_TO_ADDR
// for i := 1 to 5 do
69702: LD_ADDR_VAR 0 10
69706: PUSH
69707: DOUBLE
69708: LD_INT 1
69710: DEC
69711: ST_TO_ADDR
69712: LD_INT 5
69714: PUSH
69715: FOR_TO
69716: IFFALSE 69873
// begin _x := ShiftX ( x , d , r + i ) ;
69718: LD_ADDR_VAR 0 5
69722: PUSH
69723: LD_VAR 0 4
69727: PPUSH
69728: LD_VAR 0 8
69732: PPUSH
69733: LD_VAR 0 9
69737: PUSH
69738: LD_VAR 0 10
69742: PLUS
69743: PPUSH
69744: CALL_OW 272
69748: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69749: LD_ADDR_VAR 0 7
69753: PUSH
69754: LD_VAR 0 6
69758: PPUSH
69759: LD_VAR 0 8
69763: PPUSH
69764: LD_VAR 0 9
69768: PUSH
69769: LD_VAR 0 10
69773: PLUS
69774: PPUSH
69775: CALL_OW 273
69779: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69780: LD_VAR 0 5
69784: PPUSH
69785: LD_VAR 0 7
69789: PPUSH
69790: CALL_OW 488
69794: PUSH
69795: LD_VAR 0 5
69799: PPUSH
69800: LD_VAR 0 7
69804: PPUSH
69805: CALL_OW 428
69809: PPUSH
69810: CALL_OW 247
69814: PUSH
69815: LD_INT 3
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: IN
69825: NOT
69826: AND
69827: IFFALSE 69871
// begin ComMoveXY ( unit , _x , _y ) ;
69829: LD_VAR 0 1
69833: PPUSH
69834: LD_VAR 0 5
69838: PPUSH
69839: LD_VAR 0 7
69843: PPUSH
69844: CALL_OW 111
// result := [ _x , _y ] ;
69848: LD_ADDR_VAR 0 3
69852: PUSH
69853: LD_VAR 0 5
69857: PUSH
69858: LD_VAR 0 7
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: ST_TO_ADDR
// exit ;
69867: POP
69868: POP
69869: GO 69875
// end ; end ;
69871: GO 69715
69873: POP
69874: POP
// end ;
69875: LD_VAR 0 3
69879: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69880: LD_INT 0
69882: PPUSH
69883: PPUSH
69884: PPUSH
// result := 0 ;
69885: LD_ADDR_VAR 0 3
69889: PUSH
69890: LD_INT 0
69892: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69893: LD_VAR 0 1
69897: PUSH
69898: LD_INT 0
69900: LESS
69901: PUSH
69902: LD_VAR 0 1
69906: PUSH
69907: LD_INT 8
69909: GREATER
69910: OR
69911: PUSH
69912: LD_VAR 0 2
69916: PUSH
69917: LD_INT 0
69919: LESS
69920: OR
69921: PUSH
69922: LD_VAR 0 2
69926: PUSH
69927: LD_INT 8
69929: GREATER
69930: OR
69931: IFFALSE 69935
// exit ;
69933: GO 70010
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69935: LD_ADDR_VAR 0 4
69939: PUSH
69940: LD_INT 22
69942: PUSH
69943: LD_VAR 0 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PPUSH
69952: CALL_OW 69
69956: PUSH
69957: FOR_IN
69958: IFFALSE 70008
// begin un := UnitShoot ( i ) ;
69960: LD_ADDR_VAR 0 5
69964: PUSH
69965: LD_VAR 0 4
69969: PPUSH
69970: CALL_OW 504
69974: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69975: LD_VAR 0 5
69979: PPUSH
69980: CALL_OW 255
69984: PUSH
69985: LD_VAR 0 1
69989: EQUAL
69990: IFFALSE 70006
// begin result := un ;
69992: LD_ADDR_VAR 0 3
69996: PUSH
69997: LD_VAR 0 5
70001: ST_TO_ADDR
// exit ;
70002: POP
70003: POP
70004: GO 70010
// end ; end ;
70006: GO 69957
70008: POP
70009: POP
// end ;
70010: LD_VAR 0 3
70014: RET
// export function GetCargoBay ( units ) ; begin
70015: LD_INT 0
70017: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70018: LD_ADDR_VAR 0 2
70022: PUSH
70023: LD_VAR 0 1
70027: PPUSH
70028: LD_INT 2
70030: PUSH
70031: LD_INT 34
70033: PUSH
70034: LD_INT 12
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 34
70043: PUSH
70044: LD_INT 51
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 34
70053: PUSH
70054: LD_INT 32
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 34
70063: PUSH
70064: LD_INT 89
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: PPUSH
70078: CALL_OW 72
70082: ST_TO_ADDR
// end ;
70083: LD_VAR 0 2
70087: RET
// export function Negate ( value ) ; begin
70088: LD_INT 0
70090: PPUSH
// result := not value ;
70091: LD_ADDR_VAR 0 2
70095: PUSH
70096: LD_VAR 0 1
70100: NOT
70101: ST_TO_ADDR
// end ;
70102: LD_VAR 0 2
70106: RET
// export function Inc ( value ) ; begin
70107: LD_INT 0
70109: PPUSH
// result := value + 1 ;
70110: LD_ADDR_VAR 0 2
70114: PUSH
70115: LD_VAR 0 1
70119: PUSH
70120: LD_INT 1
70122: PLUS
70123: ST_TO_ADDR
// end ;
70124: LD_VAR 0 2
70128: RET
// export function Dec ( value ) ; begin
70129: LD_INT 0
70131: PPUSH
// result := value - 1 ;
70132: LD_ADDR_VAR 0 2
70136: PUSH
70137: LD_VAR 0 1
70141: PUSH
70142: LD_INT 1
70144: MINUS
70145: ST_TO_ADDR
// end ;
70146: LD_VAR 0 2
70150: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70151: LD_INT 0
70153: PPUSH
70154: PPUSH
70155: PPUSH
70156: PPUSH
70157: PPUSH
70158: PPUSH
70159: PPUSH
70160: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70161: LD_VAR 0 1
70165: PPUSH
70166: LD_VAR 0 2
70170: PPUSH
70171: CALL_OW 488
70175: NOT
70176: PUSH
70177: LD_VAR 0 3
70181: PPUSH
70182: LD_VAR 0 4
70186: PPUSH
70187: CALL_OW 488
70191: NOT
70192: OR
70193: IFFALSE 70206
// begin result := - 1 ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: ST_TO_ADDR
// exit ;
70204: GO 70441
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70206: LD_ADDR_VAR 0 12
70210: PUSH
70211: LD_VAR 0 1
70215: PPUSH
70216: LD_VAR 0 2
70220: PPUSH
70221: LD_VAR 0 3
70225: PPUSH
70226: LD_VAR 0 4
70230: PPUSH
70231: CALL 69291 0 4
70235: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70236: LD_ADDR_VAR 0 11
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 2
70250: PPUSH
70251: LD_VAR 0 12
70255: PUSH
70256: LD_INT 1
70258: ARRAY
70259: PPUSH
70260: LD_VAR 0 12
70264: PUSH
70265: LD_INT 2
70267: ARRAY
70268: PPUSH
70269: CALL_OW 298
70273: ST_TO_ADDR
// distance := 9999 ;
70274: LD_ADDR_VAR 0 10
70278: PUSH
70279: LD_INT 9999
70281: ST_TO_ADDR
// for i := 0 to 5 do
70282: LD_ADDR_VAR 0 6
70286: PUSH
70287: DOUBLE
70288: LD_INT 0
70290: DEC
70291: ST_TO_ADDR
70292: LD_INT 5
70294: PUSH
70295: FOR_TO
70296: IFFALSE 70439
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70298: LD_ADDR_VAR 0 7
70302: PUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: LD_VAR 0 6
70312: PPUSH
70313: LD_VAR 0 11
70317: PPUSH
70318: CALL_OW 272
70322: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70323: LD_ADDR_VAR 0 8
70327: PUSH
70328: LD_VAR 0 2
70332: PPUSH
70333: LD_VAR 0 6
70337: PPUSH
70338: LD_VAR 0 11
70342: PPUSH
70343: CALL_OW 273
70347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70348: LD_VAR 0 7
70352: PPUSH
70353: LD_VAR 0 8
70357: PPUSH
70358: CALL_OW 488
70362: NOT
70363: IFFALSE 70367
// continue ;
70365: GO 70295
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70367: LD_ADDR_VAR 0 9
70371: PUSH
70372: LD_VAR 0 12
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PPUSH
70381: LD_VAR 0 12
70385: PUSH
70386: LD_INT 2
70388: ARRAY
70389: PPUSH
70390: LD_VAR 0 7
70394: PPUSH
70395: LD_VAR 0 8
70399: PPUSH
70400: CALL_OW 298
70404: ST_TO_ADDR
// if tmp < distance then
70405: LD_VAR 0 9
70409: PUSH
70410: LD_VAR 0 10
70414: LESS
70415: IFFALSE 70437
// begin result := i ;
70417: LD_ADDR_VAR 0 5
70421: PUSH
70422: LD_VAR 0 6
70426: ST_TO_ADDR
// distance := tmp ;
70427: LD_ADDR_VAR 0 10
70431: PUSH
70432: LD_VAR 0 9
70436: ST_TO_ADDR
// end ; end ;
70437: GO 70295
70439: POP
70440: POP
// end ;
70441: LD_VAR 0 5
70445: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70446: LD_INT 0
70448: PPUSH
70449: PPUSH
// if not driver or not IsInUnit ( driver ) then
70450: LD_VAR 0 1
70454: NOT
70455: PUSH
70456: LD_VAR 0 1
70460: PPUSH
70461: CALL_OW 310
70465: NOT
70466: OR
70467: IFFALSE 70471
// exit ;
70469: GO 70561
// vehicle := IsInUnit ( driver ) ;
70471: LD_ADDR_VAR 0 3
70475: PUSH
70476: LD_VAR 0 1
70480: PPUSH
70481: CALL_OW 310
70485: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70486: LD_VAR 0 1
70490: PPUSH
70491: LD_STRING \
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: LD_INT 0
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: PUSH
70521: LD_STRING E
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: LD_VAR 0 3
70534: PUSH
70535: LD_INT 0
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 0
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PPUSH
70557: CALL_OW 446
// end ;
70561: LD_VAR 0 2
70565: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70566: LD_INT 0
70568: PPUSH
70569: PPUSH
// if not driver or not IsInUnit ( driver ) then
70570: LD_VAR 0 1
70574: NOT
70575: PUSH
70576: LD_VAR 0 1
70580: PPUSH
70581: CALL_OW 310
70585: NOT
70586: OR
70587: IFFALSE 70591
// exit ;
70589: GO 70681
// vehicle := IsInUnit ( driver ) ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: CALL_OW 310
70605: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70606: LD_VAR 0 1
70610: PPUSH
70611: LD_STRING \
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: LD_STRING E
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_VAR 0 3
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PPUSH
70677: CALL_OW 447
// end ;
70681: LD_VAR 0 2
70685: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70686: LD_INT 0
70688: PPUSH
70689: PPUSH
70690: PPUSH
// tmp := [ ] ;
70691: LD_ADDR_VAR 0 5
70695: PUSH
70696: EMPTY
70697: ST_TO_ADDR
// for i in units do
70698: LD_ADDR_VAR 0 4
70702: PUSH
70703: LD_VAR 0 1
70707: PUSH
70708: FOR_IN
70709: IFFALSE 70747
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70711: LD_ADDR_VAR 0 5
70715: PUSH
70716: LD_VAR 0 5
70720: PPUSH
70721: LD_VAR 0 5
70725: PUSH
70726: LD_INT 1
70728: PLUS
70729: PPUSH
70730: LD_VAR 0 4
70734: PPUSH
70735: CALL_OW 256
70739: PPUSH
70740: CALL_OW 2
70744: ST_TO_ADDR
70745: GO 70708
70747: POP
70748: POP
// if not tmp then
70749: LD_VAR 0 5
70753: NOT
70754: IFFALSE 70758
// exit ;
70756: GO 70806
// if asc then
70758: LD_VAR 0 2
70762: IFFALSE 70786
// result := SortListByListAsc ( units , tmp ) else
70764: LD_ADDR_VAR 0 3
70768: PUSH
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_VAR 0 5
70778: PPUSH
70779: CALL_OW 76
70783: ST_TO_ADDR
70784: GO 70806
// result := SortListByListDesc ( units , tmp ) ;
70786: LD_ADDR_VAR 0 3
70790: PUSH
70791: LD_VAR 0 1
70795: PPUSH
70796: LD_VAR 0 5
70800: PPUSH
70801: CALL_OW 77
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 3
70810: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70811: LD_INT 0
70813: PPUSH
70814: PPUSH
// task := GetTaskList ( mech ) ;
70815: LD_ADDR_VAR 0 4
70819: PUSH
70820: LD_VAR 0 1
70824: PPUSH
70825: CALL_OW 437
70829: ST_TO_ADDR
// if not task then
70830: LD_VAR 0 4
70834: NOT
70835: IFFALSE 70839
// exit ;
70837: GO 70881
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70839: LD_ADDR_VAR 0 3
70843: PUSH
70844: LD_VAR 0 4
70848: PUSH
70849: LD_INT 1
70851: ARRAY
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PUSH
70857: LD_STRING r
70859: EQUAL
70860: PUSH
70861: LD_VAR 0 4
70865: PUSH
70866: LD_INT 1
70868: ARRAY
70869: PUSH
70870: LD_INT 4
70872: ARRAY
70873: PUSH
70874: LD_VAR 0 2
70878: EQUAL
70879: AND
70880: ST_TO_ADDR
// end ;
70881: LD_VAR 0 3
70885: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70886: LD_INT 0
70888: PPUSH
// SetDir ( unit , d ) ;
70889: LD_VAR 0 1
70893: PPUSH
70894: LD_VAR 0 4
70898: PPUSH
70899: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70903: LD_VAR 0 1
70907: PPUSH
70908: LD_VAR 0 2
70912: PPUSH
70913: LD_VAR 0 3
70917: PPUSH
70918: LD_VAR 0 5
70922: PPUSH
70923: CALL_OW 48
// end ;
70927: LD_VAR 0 6
70931: RET
// export function ToNaturalNumber ( number ) ; begin
70932: LD_INT 0
70934: PPUSH
// result := number div 1 ;
70935: LD_ADDR_VAR 0 2
70939: PUSH
70940: LD_VAR 0 1
70944: PUSH
70945: LD_INT 1
70947: DIV
70948: ST_TO_ADDR
// if number < 0 then
70949: LD_VAR 0 1
70953: PUSH
70954: LD_INT 0
70956: LESS
70957: IFFALSE 70967
// result := 0 ;
70959: LD_ADDR_VAR 0 2
70963: PUSH
70964: LD_INT 0
70966: ST_TO_ADDR
// end ;
70967: LD_VAR 0 2
70971: RET
// export function SortByClass ( units , class ) ; var un ; begin
70972: LD_INT 0
70974: PPUSH
70975: PPUSH
// if not units or not class then
70976: LD_VAR 0 1
70980: NOT
70981: PUSH
70982: LD_VAR 0 2
70986: NOT
70987: OR
70988: IFFALSE 70992
// exit ;
70990: GO 71087
// result := [ ] ;
70992: LD_ADDR_VAR 0 3
70996: PUSH
70997: EMPTY
70998: ST_TO_ADDR
// for un in units do
70999: LD_ADDR_VAR 0 4
71003: PUSH
71004: LD_VAR 0 1
71008: PUSH
71009: FOR_IN
71010: IFFALSE 71085
// if GetClass ( un ) = class then
71012: LD_VAR 0 4
71016: PPUSH
71017: CALL_OW 257
71021: PUSH
71022: LD_VAR 0 2
71026: EQUAL
71027: IFFALSE 71054
// result := Insert ( result , 1 , un ) else
71029: LD_ADDR_VAR 0 3
71033: PUSH
71034: LD_VAR 0 3
71038: PPUSH
71039: LD_INT 1
71041: PPUSH
71042: LD_VAR 0 4
71046: PPUSH
71047: CALL_OW 2
71051: ST_TO_ADDR
71052: GO 71083
// result := Replace ( result , result + 1 , un ) ;
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_VAR 0 3
71063: PPUSH
71064: LD_VAR 0 3
71068: PUSH
71069: LD_INT 1
71071: PLUS
71072: PPUSH
71073: LD_VAR 0 4
71077: PPUSH
71078: CALL_OW 1
71082: ST_TO_ADDR
71083: GO 71009
71085: POP
71086: POP
// end ;
71087: LD_VAR 0 3
71091: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71092: LD_INT 0
71094: PPUSH
71095: PPUSH
71096: PPUSH
71097: PPUSH
71098: PPUSH
71099: PPUSH
71100: PPUSH
// result := [ ] ;
71101: LD_ADDR_VAR 0 4
71105: PUSH
71106: EMPTY
71107: ST_TO_ADDR
// if x - r < 0 then
71108: LD_VAR 0 1
71112: PUSH
71113: LD_VAR 0 3
71117: MINUS
71118: PUSH
71119: LD_INT 0
71121: LESS
71122: IFFALSE 71134
// min_x := 0 else
71124: LD_ADDR_VAR 0 8
71128: PUSH
71129: LD_INT 0
71131: ST_TO_ADDR
71132: GO 71150
// min_x := x - r ;
71134: LD_ADDR_VAR 0 8
71138: PUSH
71139: LD_VAR 0 1
71143: PUSH
71144: LD_VAR 0 3
71148: MINUS
71149: ST_TO_ADDR
// if y - r < 0 then
71150: LD_VAR 0 2
71154: PUSH
71155: LD_VAR 0 3
71159: MINUS
71160: PUSH
71161: LD_INT 0
71163: LESS
71164: IFFALSE 71176
// min_y := 0 else
71166: LD_ADDR_VAR 0 7
71170: PUSH
71171: LD_INT 0
71173: ST_TO_ADDR
71174: GO 71192
// min_y := y - r ;
71176: LD_ADDR_VAR 0 7
71180: PUSH
71181: LD_VAR 0 2
71185: PUSH
71186: LD_VAR 0 3
71190: MINUS
71191: ST_TO_ADDR
// max_x := x + r ;
71192: LD_ADDR_VAR 0 9
71196: PUSH
71197: LD_VAR 0 1
71201: PUSH
71202: LD_VAR 0 3
71206: PLUS
71207: ST_TO_ADDR
// max_y := y + r ;
71208: LD_ADDR_VAR 0 10
71212: PUSH
71213: LD_VAR 0 2
71217: PUSH
71218: LD_VAR 0 3
71222: PLUS
71223: ST_TO_ADDR
// for _x = min_x to max_x do
71224: LD_ADDR_VAR 0 5
71228: PUSH
71229: DOUBLE
71230: LD_VAR 0 8
71234: DEC
71235: ST_TO_ADDR
71236: LD_VAR 0 9
71240: PUSH
71241: FOR_TO
71242: IFFALSE 71343
// for _y = min_y to max_y do
71244: LD_ADDR_VAR 0 6
71248: PUSH
71249: DOUBLE
71250: LD_VAR 0 7
71254: DEC
71255: ST_TO_ADDR
71256: LD_VAR 0 10
71260: PUSH
71261: FOR_TO
71262: IFFALSE 71339
// begin if not ValidHex ( _x , _y ) then
71264: LD_VAR 0 5
71268: PPUSH
71269: LD_VAR 0 6
71273: PPUSH
71274: CALL_OW 488
71278: NOT
71279: IFFALSE 71283
// continue ;
71281: GO 71261
// if GetResourceTypeXY ( _x , _y ) then
71283: LD_VAR 0 5
71287: PPUSH
71288: LD_VAR 0 6
71292: PPUSH
71293: CALL_OW 283
71297: IFFALSE 71337
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71299: LD_ADDR_VAR 0 4
71303: PUSH
71304: LD_VAR 0 4
71308: PPUSH
71309: LD_VAR 0 4
71313: PUSH
71314: LD_INT 1
71316: PLUS
71317: PPUSH
71318: LD_VAR 0 5
71322: PUSH
71323: LD_VAR 0 6
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PPUSH
71332: CALL_OW 1
71336: ST_TO_ADDR
// end ;
71337: GO 71261
71339: POP
71340: POP
71341: GO 71241
71343: POP
71344: POP
// end ;
71345: LD_VAR 0 4
71349: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71350: LD_INT 0
71352: PPUSH
71353: PPUSH
71354: PPUSH
71355: PPUSH
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
// if not units then
71360: LD_VAR 0 1
71364: NOT
71365: IFFALSE 71369
// exit ;
71367: GO 71893
// result := UnitFilter ( units , [ f_ok ] ) ;
71369: LD_ADDR_VAR 0 3
71373: PUSH
71374: LD_VAR 0 1
71378: PPUSH
71379: LD_INT 50
71381: PUSH
71382: EMPTY
71383: LIST
71384: PPUSH
71385: CALL_OW 72
71389: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71390: LD_ADDR_VAR 0 8
71394: PUSH
71395: LD_VAR 0 1
71399: PUSH
71400: LD_INT 1
71402: ARRAY
71403: PPUSH
71404: CALL_OW 255
71408: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71409: LD_ADDR_VAR 0 10
71413: PUSH
71414: LD_INT 29
71416: PUSH
71417: LD_INT 91
71419: PUSH
71420: LD_INT 49
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: LIST
71427: ST_TO_ADDR
// if not result then
71428: LD_VAR 0 3
71432: NOT
71433: IFFALSE 71437
// exit ;
71435: GO 71893
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71437: LD_ADDR_VAR 0 5
71441: PUSH
71442: LD_INT 81
71444: PUSH
71445: LD_VAR 0 8
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PPUSH
71454: CALL_OW 69
71458: ST_TO_ADDR
// for i in result do
71459: LD_ADDR_VAR 0 4
71463: PUSH
71464: LD_VAR 0 3
71468: PUSH
71469: FOR_IN
71470: IFFALSE 71891
// begin tag := GetTag ( i ) + 1 ;
71472: LD_ADDR_VAR 0 9
71476: PUSH
71477: LD_VAR 0 4
71481: PPUSH
71482: CALL_OW 110
71486: PUSH
71487: LD_INT 1
71489: PLUS
71490: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71491: LD_ADDR_VAR 0 7
71495: PUSH
71496: LD_VAR 0 4
71500: PPUSH
71501: CALL_OW 250
71505: PPUSH
71506: LD_VAR 0 4
71510: PPUSH
71511: CALL_OW 251
71515: PPUSH
71516: LD_INT 6
71518: PPUSH
71519: CALL 71092 0 3
71523: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71524: LD_VAR 0 4
71528: PPUSH
71529: CALL_OW 247
71533: PUSH
71534: LD_INT 2
71536: EQUAL
71537: PUSH
71538: LD_VAR 0 7
71542: AND
71543: PUSH
71544: LD_VAR 0 4
71548: PPUSH
71549: CALL_OW 264
71553: PUSH
71554: LD_VAR 0 10
71558: IN
71559: NOT
71560: AND
71561: IFFALSE 71600
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71563: LD_VAR 0 4
71567: PPUSH
71568: LD_VAR 0 7
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PUSH
71577: LD_INT 1
71579: ARRAY
71580: PPUSH
71581: LD_VAR 0 7
71585: PUSH
71586: LD_INT 1
71588: ARRAY
71589: PUSH
71590: LD_INT 2
71592: ARRAY
71593: PPUSH
71594: CALL_OW 116
71598: GO 71889
// if path > tag then
71600: LD_VAR 0 2
71604: PUSH
71605: LD_VAR 0 9
71609: GREATER
71610: IFFALSE 71818
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71612: LD_ADDR_VAR 0 6
71616: PUSH
71617: LD_VAR 0 5
71621: PPUSH
71622: LD_INT 91
71624: PUSH
71625: LD_VAR 0 4
71629: PUSH
71630: LD_INT 8
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: LIST
71637: PPUSH
71638: CALL_OW 72
71642: ST_TO_ADDR
// if nearEnemy then
71643: LD_VAR 0 6
71647: IFFALSE 71716
// begin if GetWeapon ( i ) = ru_time_lapser then
71649: LD_VAR 0 4
71653: PPUSH
71654: CALL_OW 264
71658: PUSH
71659: LD_INT 49
71661: EQUAL
71662: IFFALSE 71690
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71664: LD_VAR 0 4
71668: PPUSH
71669: LD_VAR 0 6
71673: PPUSH
71674: LD_VAR 0 4
71678: PPUSH
71679: CALL_OW 74
71683: PPUSH
71684: CALL_OW 112
71688: GO 71714
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71690: LD_VAR 0 4
71694: PPUSH
71695: LD_VAR 0 6
71699: PPUSH
71700: LD_VAR 0 4
71704: PPUSH
71705: CALL_OW 74
71709: PPUSH
71710: CALL_OW 115
// end else
71714: GO 71816
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71716: LD_VAR 0 4
71720: PPUSH
71721: LD_VAR 0 2
71725: PUSH
71726: LD_VAR 0 9
71730: ARRAY
71731: PUSH
71732: LD_INT 1
71734: ARRAY
71735: PPUSH
71736: LD_VAR 0 2
71740: PUSH
71741: LD_VAR 0 9
71745: ARRAY
71746: PUSH
71747: LD_INT 2
71749: ARRAY
71750: PPUSH
71751: CALL_OW 297
71755: PUSH
71756: LD_INT 6
71758: GREATER
71759: IFFALSE 71802
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71761: LD_VAR 0 4
71765: PPUSH
71766: LD_VAR 0 2
71770: PUSH
71771: LD_VAR 0 9
71775: ARRAY
71776: PUSH
71777: LD_INT 1
71779: ARRAY
71780: PPUSH
71781: LD_VAR 0 2
71785: PUSH
71786: LD_VAR 0 9
71790: ARRAY
71791: PUSH
71792: LD_INT 2
71794: ARRAY
71795: PPUSH
71796: CALL_OW 114
71800: GO 71816
// SetTag ( i , tag ) ;
71802: LD_VAR 0 4
71806: PPUSH
71807: LD_VAR 0 9
71811: PPUSH
71812: CALL_OW 109
// end else
71816: GO 71889
// if enemy then
71818: LD_VAR 0 5
71822: IFFALSE 71889
// begin if GetWeapon ( i ) = ru_time_lapser then
71824: LD_VAR 0 4
71828: PPUSH
71829: CALL_OW 264
71833: PUSH
71834: LD_INT 49
71836: EQUAL
71837: IFFALSE 71865
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71839: LD_VAR 0 4
71843: PPUSH
71844: LD_VAR 0 5
71848: PPUSH
71849: LD_VAR 0 4
71853: PPUSH
71854: CALL_OW 74
71858: PPUSH
71859: CALL_OW 112
71863: GO 71889
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71865: LD_VAR 0 4
71869: PPUSH
71870: LD_VAR 0 5
71874: PPUSH
71875: LD_VAR 0 4
71879: PPUSH
71880: CALL_OW 74
71884: PPUSH
71885: CALL_OW 115
// end ; end ;
71889: GO 71469
71891: POP
71892: POP
// end ;
71893: LD_VAR 0 3
71897: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71898: LD_INT 0
71900: PPUSH
71901: PPUSH
71902: PPUSH
// if not unit or IsInUnit ( unit ) then
71903: LD_VAR 0 1
71907: NOT
71908: PUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 310
71918: OR
71919: IFFALSE 71923
// exit ;
71921: GO 72014
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71923: LD_ADDR_VAR 0 4
71927: PUSH
71928: LD_VAR 0 1
71932: PPUSH
71933: CALL_OW 250
71937: PPUSH
71938: LD_VAR 0 2
71942: PPUSH
71943: LD_INT 1
71945: PPUSH
71946: CALL_OW 272
71950: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 1
71960: PPUSH
71961: CALL_OW 251
71965: PPUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: LD_INT 1
71973: PPUSH
71974: CALL_OW 273
71978: ST_TO_ADDR
// if ValidHex ( x , y ) then
71979: LD_VAR 0 4
71983: PPUSH
71984: LD_VAR 0 5
71988: PPUSH
71989: CALL_OW 488
71993: IFFALSE 72014
// ComTurnXY ( unit , x , y ) ;
71995: LD_VAR 0 1
71999: PPUSH
72000: LD_VAR 0 4
72004: PPUSH
72005: LD_VAR 0 5
72009: PPUSH
72010: CALL_OW 118
// end ;
72014: LD_VAR 0 3
72018: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72019: LD_INT 0
72021: PPUSH
72022: PPUSH
// result := false ;
72023: LD_ADDR_VAR 0 3
72027: PUSH
72028: LD_INT 0
72030: ST_TO_ADDR
// if not units then
72031: LD_VAR 0 2
72035: NOT
72036: IFFALSE 72040
// exit ;
72038: GO 72085
// for i in units do
72040: LD_ADDR_VAR 0 4
72044: PUSH
72045: LD_VAR 0 2
72049: PUSH
72050: FOR_IN
72051: IFFALSE 72083
// if See ( side , i ) then
72053: LD_VAR 0 1
72057: PPUSH
72058: LD_VAR 0 4
72062: PPUSH
72063: CALL_OW 292
72067: IFFALSE 72081
// begin result := true ;
72069: LD_ADDR_VAR 0 3
72073: PUSH
72074: LD_INT 1
72076: ST_TO_ADDR
// exit ;
72077: POP
72078: POP
72079: GO 72085
// end ;
72081: GO 72050
72083: POP
72084: POP
// end ;
72085: LD_VAR 0 3
72089: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72090: LD_INT 0
72092: PPUSH
72093: PPUSH
72094: PPUSH
72095: PPUSH
// if not unit or not points then
72096: LD_VAR 0 1
72100: NOT
72101: PUSH
72102: LD_VAR 0 2
72106: NOT
72107: OR
72108: IFFALSE 72112
// exit ;
72110: GO 72202
// dist := 99999 ;
72112: LD_ADDR_VAR 0 5
72116: PUSH
72117: LD_INT 99999
72119: ST_TO_ADDR
// for i in points do
72120: LD_ADDR_VAR 0 4
72124: PUSH
72125: LD_VAR 0 2
72129: PUSH
72130: FOR_IN
72131: IFFALSE 72200
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72133: LD_ADDR_VAR 0 6
72137: PUSH
72138: LD_VAR 0 1
72142: PPUSH
72143: LD_VAR 0 4
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: PPUSH
72152: LD_VAR 0 4
72156: PUSH
72157: LD_INT 2
72159: ARRAY
72160: PPUSH
72161: CALL_OW 297
72165: ST_TO_ADDR
// if tmpDist < dist then
72166: LD_VAR 0 6
72170: PUSH
72171: LD_VAR 0 5
72175: LESS
72176: IFFALSE 72198
// begin result := i ;
72178: LD_ADDR_VAR 0 3
72182: PUSH
72183: LD_VAR 0 4
72187: ST_TO_ADDR
// dist := tmpDist ;
72188: LD_ADDR_VAR 0 5
72192: PUSH
72193: LD_VAR 0 6
72197: ST_TO_ADDR
// end ; end ;
72198: GO 72130
72200: POP
72201: POP
// end ;
72202: LD_VAR 0 3
72206: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72207: LD_INT 0
72209: PPUSH
// uc_side := side ;
72210: LD_ADDR_OWVAR 20
72214: PUSH
72215: LD_VAR 0 1
72219: ST_TO_ADDR
// uc_nation := 3 ;
72220: LD_ADDR_OWVAR 21
72224: PUSH
72225: LD_INT 3
72227: ST_TO_ADDR
// vc_chassis := 25 ;
72228: LD_ADDR_OWVAR 37
72232: PUSH
72233: LD_INT 25
72235: ST_TO_ADDR
// vc_engine := engine_siberite ;
72236: LD_ADDR_OWVAR 39
72240: PUSH
72241: LD_INT 3
72243: ST_TO_ADDR
// vc_control := control_computer ;
72244: LD_ADDR_OWVAR 38
72248: PUSH
72249: LD_INT 3
72251: ST_TO_ADDR
// vc_weapon := 59 ;
72252: LD_ADDR_OWVAR 40
72256: PUSH
72257: LD_INT 59
72259: ST_TO_ADDR
// result := CreateVehicle ;
72260: LD_ADDR_VAR 0 5
72264: PUSH
72265: CALL_OW 45
72269: ST_TO_ADDR
// SetDir ( result , d ) ;
72270: LD_VAR 0 5
72274: PPUSH
72275: LD_VAR 0 4
72279: PPUSH
72280: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72284: LD_VAR 0 5
72288: PPUSH
72289: LD_VAR 0 2
72293: PPUSH
72294: LD_VAR 0 3
72298: PPUSH
72299: LD_INT 0
72301: PPUSH
72302: CALL_OW 48
// end ;
72306: LD_VAR 0 5
72310: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72311: LD_INT 0
72313: PPUSH
72314: PPUSH
72315: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72316: LD_ADDR_VAR 0 2
72320: PUSH
72321: LD_INT 0
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: LD_INT 0
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72339: LD_VAR 0 1
72343: NOT
72344: PUSH
72345: LD_VAR 0 1
72349: PPUSH
72350: CALL_OW 264
72354: PUSH
72355: LD_INT 12
72357: PUSH
72358: LD_INT 51
72360: PUSH
72361: LD_INT 32
72363: PUSH
72364: LD_INT 89
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: IN
72373: NOT
72374: OR
72375: IFFALSE 72379
// exit ;
72377: GO 72477
// for i := 1 to 3 do
72379: LD_ADDR_VAR 0 3
72383: PUSH
72384: DOUBLE
72385: LD_INT 1
72387: DEC
72388: ST_TO_ADDR
72389: LD_INT 3
72391: PUSH
72392: FOR_TO
72393: IFFALSE 72475
// begin tmp := GetCargo ( cargo , i ) ;
72395: LD_ADDR_VAR 0 4
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: LD_VAR 0 3
72409: PPUSH
72410: CALL_OW 289
72414: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72415: LD_ADDR_VAR 0 2
72419: PUSH
72420: LD_VAR 0 2
72424: PPUSH
72425: LD_VAR 0 3
72429: PPUSH
72430: LD_VAR 0 4
72434: PPUSH
72435: CALL_OW 1
72439: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72440: LD_ADDR_VAR 0 2
72444: PUSH
72445: LD_VAR 0 2
72449: PPUSH
72450: LD_INT 4
72452: PPUSH
72453: LD_VAR 0 2
72457: PUSH
72458: LD_INT 4
72460: ARRAY
72461: PUSH
72462: LD_VAR 0 4
72466: PLUS
72467: PPUSH
72468: CALL_OW 1
72472: ST_TO_ADDR
// end ;
72473: GO 72392
72475: POP
72476: POP
// end ;
72477: LD_VAR 0 2
72481: RET
// export function Length ( array ) ; begin
72482: LD_INT 0
72484: PPUSH
// result := array + 0 ;
72485: LD_ADDR_VAR 0 2
72489: PUSH
72490: LD_VAR 0 1
72494: PUSH
72495: LD_INT 0
72497: PLUS
72498: ST_TO_ADDR
// end ;
72499: LD_VAR 0 2
72503: RET
// export function PrepareArray ( array ) ; begin
72504: LD_INT 0
72506: PPUSH
// result := array diff 0 ;
72507: LD_ADDR_VAR 0 2
72511: PUSH
72512: LD_VAR 0 1
72516: PUSH
72517: LD_INT 0
72519: DIFF
72520: ST_TO_ADDR
// if not result [ 1 ] then
72521: LD_VAR 0 2
72525: PUSH
72526: LD_INT 1
72528: ARRAY
72529: NOT
72530: IFFALSE 72550
// result := Delete ( result , 1 ) ;
72532: LD_ADDR_VAR 0 2
72536: PUSH
72537: LD_VAR 0 2
72541: PPUSH
72542: LD_INT 1
72544: PPUSH
72545: CALL_OW 3
72549: ST_TO_ADDR
// end ; end_of_file
72550: LD_VAR 0 2
72554: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72555: LD_VAR 0 1
72559: PUSH
72560: LD_INT 200
72562: DOUBLE
72563: GREATEREQUAL
72564: IFFALSE 72572
72566: LD_INT 299
72568: DOUBLE
72569: LESSEQUAL
72570: IFTRUE 72574
72572: GO 72606
72574: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72575: LD_VAR 0 1
72579: PPUSH
72580: LD_VAR 0 2
72584: PPUSH
72585: LD_VAR 0 3
72589: PPUSH
72590: LD_VAR 0 4
72594: PPUSH
72595: LD_VAR 0 5
72599: PPUSH
72600: CALL 27457 0 5
72604: GO 72683
72606: LD_INT 300
72608: DOUBLE
72609: GREATEREQUAL
72610: IFFALSE 72618
72612: LD_INT 399
72614: DOUBLE
72615: LESSEQUAL
72616: IFTRUE 72620
72618: GO 72682
72620: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72621: LD_VAR 0 1
72625: PPUSH
72626: LD_VAR 0 2
72630: PPUSH
72631: LD_VAR 0 3
72635: PPUSH
72636: LD_VAR 0 4
72640: PPUSH
72641: LD_VAR 0 5
72645: PPUSH
72646: LD_VAR 0 6
72650: PPUSH
72651: LD_VAR 0 7
72655: PPUSH
72656: LD_VAR 0 8
72660: PPUSH
72661: LD_VAR 0 9
72665: PPUSH
72666: LD_VAR 0 10
72670: PPUSH
72671: LD_VAR 0 11
72675: PPUSH
72676: CALL 23790 0 11
72680: GO 72683
72682: POP
// end ;
72683: PPOPN 11
72685: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72686: LD_VAR 0 1
72690: PPUSH
72691: LD_VAR 0 2
72695: PPUSH
72696: LD_VAR 0 3
72700: PPUSH
72701: LD_VAR 0 4
72705: PPUSH
72706: LD_VAR 0 5
72710: PPUSH
72711: CALL 27193 0 5
// end ; end_of_file
72715: PPOPN 5
72717: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72718: LD_VAR 0 1
72722: PPUSH
72723: LD_VAR 0 2
72727: PPUSH
72728: LD_VAR 0 3
72732: PPUSH
72733: LD_VAR 0 4
72737: PPUSH
72738: LD_VAR 0 5
72742: PPUSH
72743: LD_VAR 0 6
72747: PPUSH
72748: CALL 11483 0 6
// end ;
72752: PPOPN 6
72754: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72755: LD_INT 0
72757: PPUSH
// begin if not units then
72758: LD_VAR 0 1
72762: NOT
72763: IFFALSE 72767
// exit ;
72765: GO 72767
// end ;
72767: PPOPN 7
72769: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72770: CALL 11454 0 0
// end ;
72774: PPOPN 1
72776: END
