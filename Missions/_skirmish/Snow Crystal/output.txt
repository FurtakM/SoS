// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// SetWeather ( 2 , 300 , 30 ) ;
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 300
  19: PPUSH
  20: LD_INT 30
  22: PPUSH
  23: CALL_OW 550
// AnimateTrees ( true ) ;
  27: LD_INT 1
  29: PPUSH
  30: CALL_OW 573
// GameType ;
  34: CALL 280 0 0
// PrepareAmerican ;
  38: CALL 713 0 0
// if game_type = 2 then
  42: LD_EXP 1
  46: PUSH
  47: LD_INT 2
  49: EQUAL
  50: IFFALSE 56
// PrepareRussian ;
  52: CALL 6900 0 0
// GameStarted ;
  56: CALL 530 0 0
// end ;
  60: END
// every 0 0$01 do var sib ;
  61: GO 63
  63: DISABLE
  64: LD_INT 0
  66: PPUSH
// begin enable ;
  67: ENABLE
// sib := GetResourceType ( GetBase ( jota_base ) , mat_siberit ) ;
  68: LD_ADDR_VAR 0 1
  72: PUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL_OW 274
  80: PPUSH
  81: LD_INT 3
  83: PPUSH
  84: CALL_OW 275
  88: ST_TO_ADDR
// Display_Strings := [ #tick , timer , #sib , sib , need_to_win ] ;
  89: LD_ADDR_OWVAR 47
  93: PUSH
  94: LD_STRING #tick
  96: PUSH
  97: LD_EXP 6
 101: PUSH
 102: LD_STRING #sib
 104: PUSH
 105: LD_VAR 0 1
 109: PUSH
 110: LD_EXP 5
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 122: LD_ADDR_EXP 6
 126: PUSH
 127: LD_EXP 6
 131: PUSH
 132: LD_INT 35
 134: PLUS
 135: ST_TO_ADDR
// end ;
 136: PPOPN 1
 138: END
// every 1 do
 139: GO 141
 141: DISABLE
// begin while ( true ) do
 142: LD_INT 1
 144: IFFALSE 279
// begin music_nat := 1 ;
 146: LD_ADDR_OWVAR 71
 150: PUSH
 151: LD_INT 1
 153: ST_TO_ADDR
// music_class := 5 ;
 154: LD_ADDR_OWVAR 72
 158: PUSH
 159: LD_INT 5
 161: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 162: LD_INT 7350
 164: PPUSH
 165: LD_INT 10500
 167: PPUSH
 168: CALL_OW 12
 172: PPUSH
 173: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 177: LD_ADDR_OWVAR 71
 181: PUSH
 182: LD_INT 1
 184: PUSH
 185: LD_INT 3
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 1
 194: PPUSH
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 12
 202: ARRAY
 203: ST_TO_ADDR
// music_class := 0 ;
 204: LD_ADDR_OWVAR 72
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 212: LD_INT 7350
 214: PPUSH
 215: LD_INT 10500
 217: PPUSH
 218: CALL_OW 12
 222: PPUSH
 223: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 227: LD_ADDR_OWVAR 71
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 2
 247: PPUSH
 248: CALL_OW 12
 252: ARRAY
 253: ST_TO_ADDR
// music_class := 0 ;
 254: LD_ADDR_OWVAR 72
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 262: LD_INT 7350
 264: PPUSH
 265: LD_INT 10500
 267: PPUSH
 268: CALL_OW 12
 272: PPUSH
 273: CALL_OW 67
// end ;
 277: GO 142
// end ; end_of_file
 279: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 280: LD_INT 0
 282: PPUSH
// case Query ( GameTyp ) of 1 :
 283: LD_STRING GameTyp
 285: PPUSH
 286: CALL_OW 97
 290: PUSH
 291: LD_INT 1
 293: DOUBLE
 294: EQUAL
 295: IFTRUE 299
 297: GO 310
 299: POP
// game_type := 1 ; 2 :
 300: LD_ADDR_EXP 1
 304: PUSH
 305: LD_INT 1
 307: ST_TO_ADDR
 308: GO 349
 310: LD_INT 2
 312: DOUBLE
 313: EQUAL
 314: IFTRUE 318
 316: GO 329
 318: POP
// game_type := 2 ; 3 :
 319: LD_ADDR_EXP 1
 323: PUSH
 324: LD_INT 2
 326: ST_TO_ADDR
 327: GO 349
 329: LD_INT 3
 331: DOUBLE
 332: EQUAL
 333: IFTRUE 337
 335: GO 348
 337: POP
// game_type := 0 ; end ;
 338: LD_ADDR_EXP 1
 342: PUSH
 343: LD_INT 0
 345: ST_TO_ADDR
 346: GO 349
 348: POP
// case Query ( GameDiff ) of 1 :
 349: LD_STRING GameDiff
 351: PPUSH
 352: CALL_OW 97
 356: PUSH
 357: LD_INT 1
 359: DOUBLE
 360: EQUAL
 361: IFTRUE 365
 363: GO 376
 365: POP
// game_diff := 1 ; 2 :
 366: LD_ADDR_EXP 2
 370: PUSH
 371: LD_INT 1
 373: ST_TO_ADDR
 374: GO 415
 376: LD_INT 2
 378: DOUBLE
 379: EQUAL
 380: IFTRUE 384
 382: GO 395
 384: POP
// game_diff := 2 ; 3 :
 385: LD_ADDR_EXP 2
 389: PUSH
 390: LD_INT 2
 392: ST_TO_ADDR
 393: GO 415
 395: LD_INT 3
 397: DOUBLE
 398: EQUAL
 399: IFTRUE 403
 401: GO 414
 403: POP
// game_diff := 3 ; end ;
 404: LD_ADDR_EXP 2
 408: PUSH
 409: LD_INT 3
 411: ST_TO_ADDR
 412: GO 415
 414: POP
// if game_type = 1 then
 415: LD_EXP 1
 419: PUSH
 420: LD_INT 1
 422: EQUAL
 423: IFFALSE 445
// case Query ( GameRulesAm ) of 1 :
 425: LD_STRING GameRulesAm
 427: PPUSH
 428: CALL_OW 97
 432: PUSH
 433: LD_INT 1
 435: DOUBLE
 436: EQUAL
 437: IFTRUE 441
 439: GO 444
 441: POP
// ; end ;
 442: GO 445
 444: POP
// if game_type = 2 then
 445: LD_EXP 1
 449: PUSH
 450: LD_INT 2
 452: EQUAL
 453: IFFALSE 475
// case Query ( GameRulesRu ) of 1 :
 455: LD_STRING GameRulesRu
 457: PPUSH
 458: CALL_OW 97
 462: PUSH
 463: LD_INT 1
 465: DOUBLE
 466: EQUAL
 467: IFTRUE 471
 469: GO 474
 471: POP
// ; end ;
 472: GO 475
 474: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 475: LD_ADDR_EXP 3
 479: PUSH
 480: LD_INT 6
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_EXP 2
 498: ARRAY
 499: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: LD_INT 4
 507: PUSH
 508: LD_INT 5
 510: PUSH
 511: LD_INT 6
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: PUSH
 519: LD_EXP 2
 523: ARRAY
 524: ST_TO_ADDR
// end ;
 525: LD_VAR 0 1
 529: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 530: LD_INT 0
 532: PPUSH
// if game_type = 1 then
 533: LD_EXP 1
 537: PUSH
 538: LD_INT 1
 540: EQUAL
 541: IFFALSE 610
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 543: LD_ADDR_EXP 5
 547: PUSH
 548: LD_INT 350
 550: PUSH
 551: LD_INT 375
 553: PUSH
 554: LD_INT 400
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_EXP 2
 566: ARRAY
 567: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 568: LD_ADDR_EXP 7
 572: PUSH
 573: LD_INT 95
 575: PUSH
 576: LD_INT 100
 578: PUSH
 579: LD_INT 105
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: PUSH
 587: LD_EXP 2
 591: ARRAY
 592: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 593: LD_INT 84
 595: PPUSH
 596: LD_INT 45
 598: PPUSH
 599: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 603: LD_STRING GType1
 605: PPUSH
 606: CALL_OW 337
// end ; if game_type = 2 then
 610: LD_EXP 1
 614: PUSH
 615: LD_INT 2
 617: EQUAL
 618: IFFALSE 700
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 620: LD_ADDR_EXP 5
 624: PUSH
 625: LD_INT 300
 627: PUSH
 628: LD_INT 350
 630: PUSH
 631: LD_INT 400
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_EXP 2
 643: ARRAY
 644: ST_TO_ADDR
// depot_captured := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 653: LD_EXP 18
 657: PPUSH
 658: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 662: LD_STRING GType2
 664: PPUSH
 665: CALL_OW 337
// Wait ( 0 0$03 ) ;
 669: LD_INT 105
 671: PPUSH
 672: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 676: LD_EXP 19
 680: PPUSH
 681: LD_STRING D-gorky1
 683: PPUSH
 684: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 688: LD_EXP 18
 692: PPUSH
 693: LD_STRING D-rudow1
 695: PPUSH
 696: CALL_OW 88
// end ; timer := 0 0$00 ;
 700: LD_ADDR_EXP 6
 704: PUSH
 705: LD_INT 0
 707: ST_TO_ADDR
// end ; end_of_file
 708: LD_VAR 0 1
 712: RET
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 713: LD_INT 0
 715: PPUSH
 716: PPUSH
 717: PPUSH
 718: PPUSH
 719: PPUSH
 720: PPUSH
// SetBName ( jota_base , jota ) ;
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING jota
 726: PPUSH
 727: CALL_OW 500
// if game_type = 1 then
 731: LD_EXP 1
 735: PUSH
 736: LD_INT 1
 738: EQUAL
 739: IFFALSE 1171
// begin list := [ west_bun1 , east_bun , am_gun ] ;
 741: LD_ADDR_VAR 0 5
 745: PUSH
 746: LD_INT 29
 748: PUSH
 749: LD_INT 35
 751: PUSH
 752: LD_INT 21
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: ST_TO_ADDR
// if game_diff = 1 then
 760: LD_EXP 2
 764: PUSH
 765: LD_INT 1
 767: EQUAL
 768: IFFALSE 783
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 770: LD_INT 57
 772: PPUSH
 773: LD_INT 3
 775: PPUSH
 776: LD_INT 2
 778: PPUSH
 779: CALL_OW 322
// if game_diff = 2 then
 783: LD_EXP 2
 787: PUSH
 788: LD_INT 2
 790: EQUAL
 791: IFFALSE 806
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 793: LD_INT 58
 795: PPUSH
 796: LD_INT 3
 798: PPUSH
 799: LD_INT 2
 801: PPUSH
 802: CALL_OW 322
// if game_diff = 3 then
 806: LD_EXP 2
 810: PUSH
 811: LD_INT 3
 813: EQUAL
 814: IFFALSE 829
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 816: LD_INT 59
 818: PPUSH
 819: LD_INT 3
 821: PPUSH
 822: LD_INT 2
 824: PPUSH
 825: CALL_OW 322
// for i = 1 to list do
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: DOUBLE
 835: LD_INT 1
 837: DEC
 838: ST_TO_ADDR
 839: LD_VAR 0 5
 843: PUSH
 844: FOR_TO
 845: IFFALSE 864
// RemoveUnit ( list [ i ] ) ;
 847: LD_VAR 0 5
 851: PUSH
 852: LD_VAR 0 2
 856: ARRAY
 857: PPUSH
 858: CALL_OW 64
 862: GO 844
 864: POP
 865: POP
// ResetFog ;
 866: CALL_OW 335
// uc_side := 1 ;
 870: LD_ADDR_OWVAR 20
 874: PUSH
 875: LD_INT 1
 877: ST_TO_ADDR
// uc_nation := 1 ;
 878: LD_ADDR_OWVAR 21
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 886: LD_ADDR_VAR 0 2
 890: PUSH
 891: DOUBLE
 892: LD_INT 1
 894: DEC
 895: ST_TO_ADDR
 896: LD_INT 4
 898: PUSH
 899: LD_EXP 2
 903: MINUS
 904: PUSH
 905: FOR_TO
 906: IFFALSE 943
// begin un := CreateHumanWithClass ( 1 , game_skill ) ;
 908: LD_ADDR_VAR 0 3
 912: PUSH
 913: LD_INT 1
 915: PPUSH
 916: LD_EXP 3
 920: PPUSH
 921: CALL 9174 0 2
 925: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 926: LD_VAR 0 3
 930: PPUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL_OW 49
// end ;
 941: GO 905
 943: POP
 944: POP
// for i = 1 to 5 - ( game_diff ) do
 945: LD_ADDR_VAR 0 2
 949: PUSH
 950: DOUBLE
 951: LD_INT 1
 953: DEC
 954: ST_TO_ADDR
 955: LD_INT 5
 957: PUSH
 958: LD_EXP 2
 962: MINUS
 963: PUSH
 964: FOR_TO
 965: IFFALSE 1002
// begin un := CreateHumanWithClass ( 2 , game_skill ) ;
 967: LD_ADDR_VAR 0 3
 971: PUSH
 972: LD_INT 2
 974: PPUSH
 975: LD_EXP 3
 979: PPUSH
 980: CALL 9174 0 2
 984: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: LD_INT 0
 995: PPUSH
 996: CALL_OW 49
// end ;
1000: GO 964
1002: POP
1003: POP
// for i = 1 to 5 - ( game_diff ) do
1004: LD_ADDR_VAR 0 2
1008: PUSH
1009: DOUBLE
1010: LD_INT 1
1012: DEC
1013: ST_TO_ADDR
1014: LD_INT 5
1016: PUSH
1017: LD_EXP 2
1021: MINUS
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1061
// begin un := CreateHumanWithClass ( 3 , game_skill ) ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_INT 3
1033: PPUSH
1034: LD_EXP 3
1038: PPUSH
1039: CALL 9174 0 2
1043: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1044: LD_VAR 0 3
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL_OW 49
// end ;
1059: GO 1023
1061: POP
1062: POP
// for i = 1 to 5 - ( game_diff ) do
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: DOUBLE
1069: LD_INT 1
1071: DEC
1072: ST_TO_ADDR
1073: LD_INT 5
1075: PUSH
1076: LD_EXP 2
1080: MINUS
1081: PUSH
1082: FOR_TO
1083: IFFALSE 1120
// begin un := CreateHumanWithClass ( 4 , game_skill ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_INT 4
1092: PPUSH
1093: LD_EXP 3
1097: PPUSH
1098: CALL 9174 0 2
1102: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1103: LD_VAR 0 3
1107: PPUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// end ;
1118: GO 1082
1120: POP
1121: POP
// hc_importance := 100 ;
1122: LD_ADDR_OWVAR 32
1126: PUSH
1127: LD_INT 100
1129: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1130: LD_ADDR_EXP 9
1134: PUSH
1135: LD_INT 1
1137: PPUSH
1138: LD_EXP 3
1142: PPUSH
1143: CALL 9174 0 2
1147: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: LD_INT 0
1158: PPUSH
1159: CALL_OW 49
// hc_importance := 0 ;
1163: LD_ADDR_OWVAR 32
1167: PUSH
1168: LD_INT 0
1170: ST_TO_ADDR
// end ; if game_type = 2 then
1171: LD_EXP 1
1175: PUSH
1176: LD_INT 2
1178: EQUAL
1179: IFFALSE 2344
// begin uc_side := 1 ;
1181: LD_ADDR_OWVAR 20
1185: PUSH
1186: LD_INT 1
1188: ST_TO_ADDR
// uc_nation := 1 ;
1189: LD_ADDR_OWVAR 21
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1197: LD_INT 1
1199: PPUSH
1200: CALL_OW 274
1204: PPUSH
1205: LD_INT 1
1207: PPUSH
1208: LD_INT 1000
1210: PPUSH
1211: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1215: LD_INT 20
1217: PPUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_INT 2
1223: PPUSH
1224: CALL_OW 322
// for i = 1 to 4 do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_INT 4
1240: PUSH
1241: FOR_TO
1242: IFFALSE 1301
// begin for p = 1 to 5 do
1244: LD_ADDR_VAR 0 6
1248: PUSH
1249: DOUBLE
1250: LD_INT 1
1252: DEC
1253: ST_TO_ADDR
1254: LD_INT 5
1256: PUSH
1257: FOR_TO
1258: IFFALSE 1297
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1260: LD_ADDR_VAR 0 3
1264: PUSH
1265: LD_VAR 0 2
1269: PPUSH
1270: LD_EXP 4
1274: PPUSH
1275: CALL 9174 0 2
1279: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1280: LD_VAR 0 3
1284: PPUSH
1285: LD_INT 1
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// end ;
1295: GO 1257
1297: POP
1298: POP
// end ;
1299: GO 1241
1301: POP
1302: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1303: LD_ADDR_VAR 0 3
1307: PUSH
1308: LD_INT 5
1310: PPUSH
1311: LD_EXP 4
1315: PPUSH
1316: CALL 9174 0 2
1320: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1321: LD_VAR 0 3
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: LD_INT 0
1331: PPUSH
1332: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1336: LD_VAR 0 3
1340: PPUSH
1341: LD_INT 29
1343: PPUSH
1344: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1348: LD_ADDR_VAR 0 3
1352: PUSH
1353: LD_INT 5
1355: PPUSH
1356: LD_EXP 4
1360: PPUSH
1361: CALL 9174 0 2
1365: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1366: LD_VAR 0 3
1370: PPUSH
1371: LD_INT 4
1373: PPUSH
1374: LD_INT 0
1376: PPUSH
1377: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1381: LD_VAR 0 3
1385: PPUSH
1386: LD_INT 20
1388: PPUSH
1389: CALL_OW 120
// if game_diff > 1 then
1393: LD_EXP 2
1397: PUSH
1398: LD_INT 1
1400: GREATER
1401: IFFALSE 1545
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: LD_INT 5
1410: PPUSH
1411: LD_EXP 4
1415: PPUSH
1416: CALL 9174 0 2
1420: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1421: LD_VAR 0 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: LD_INT 0
1431: PPUSH
1432: CALL_OW 49
// for i = 1 to 2 do
1436: LD_ADDR_VAR 0 2
1440: PUSH
1441: DOUBLE
1442: LD_INT 1
1444: DEC
1445: ST_TO_ADDR
1446: LD_INT 2
1448: PUSH
1449: FOR_TO
1450: IFFALSE 1543
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1452: LD_ADDR_VAR 0 3
1456: PUSH
1457: LD_INT 5
1459: PPUSH
1460: LD_EXP 4
1464: PPUSH
1465: CALL 9174 0 2
1469: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1470: LD_VAR 0 3
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1485: LD_VAR 0 3
1489: PPUSH
1490: LD_INT 22
1492: PUSH
1493: LD_INT 1
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 30
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 24
1512: PUSH
1513: LD_INT 251
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: PPUSH
1528: CALL_OW 69
1532: PUSH
1533: LD_INT 1
1535: ARRAY
1536: PPUSH
1537: CALL_OW 120
// end ;
1541: GO 1449
1543: POP
1544: POP
// end ; if game_diff > 1 then
1545: LD_EXP 2
1549: PUSH
1550: LD_INT 1
1552: GREATER
1553: IFFALSE 1591
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1555: LD_ADDR_VAR 0 3
1559: PUSH
1560: LD_INT 5
1562: PPUSH
1563: LD_EXP 4
1567: PPUSH
1568: CALL 9174 0 2
1572: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1573: LD_VAR 0 3
1577: PPUSH
1578: LD_INT 37
1580: PPUSH
1581: LD_INT 44
1583: PPUSH
1584: LD_INT 0
1586: PPUSH
1587: CALL_OW 48
// end ; if game_diff > 2 then
1591: LD_EXP 2
1595: PUSH
1596: LD_INT 2
1598: GREATER
1599: IFFALSE 1649
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1601: LD_ADDR_VAR 0 3
1605: PUSH
1606: LD_INT 5
1608: PPUSH
1609: LD_EXP 4
1613: PPUSH
1614: CALL 9174 0 2
1618: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1619: LD_VAR 0 3
1623: PPUSH
1624: LD_INT 106
1626: PPUSH
1627: LD_INT 45
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1637: LD_VAR 0 3
1641: PPUSH
1642: LD_INT 35
1644: PPUSH
1645: CALL_OW 120
// end ; if game_diff < 3 then
1649: LD_EXP 2
1653: PUSH
1654: LD_INT 3
1656: LESS
1657: IFFALSE 1666
// RemoveUnit ( east_bun ) ;
1659: LD_INT 35
1661: PPUSH
1662: CALL_OW 64
// if game_diff > 1 then
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 1
1673: GREATER
1674: IFFALSE 1689
// SetTech ( tech_rocket , 1 , state_researched ) ;
1676: LD_INT 40
1678: PPUSH
1679: LD_INT 1
1681: PPUSH
1682: LD_INT 2
1684: PPUSH
1685: CALL_OW 322
// case game_diff of 1 :
1689: LD_EXP 2
1693: PUSH
1694: LD_INT 1
1696: DOUBLE
1697: EQUAL
1698: IFTRUE 1702
1700: GO 1776
1702: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1703: LD_ADDR_EXP 10
1707: PUSH
1708: LD_INT 26
1710: PUSH
1711: LD_INT 78
1713: PUSH
1714: LD_INT 52
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 26
1722: PUSH
1723: LD_INT 96
1725: PUSH
1726: LD_INT 58
1728: PUSH
1729: LD_INT 0
1731: PUSH
1732: LD_INT 32
1734: PUSH
1735: LD_INT 72
1737: PUSH
1738: LD_INT 34
1740: PUSH
1741: LD_INT 3
1743: PUSH
1744: LD_INT 32
1746: PUSH
1747: LD_INT 83
1749: PUSH
1750: LD_INT 54
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: ST_TO_ADDR
// end ; 2 :
1774: GO 2053
1776: LD_INT 2
1778: DOUBLE
1779: EQUAL
1780: IFTRUE 1784
1782: GO 1906
1784: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1785: LD_ADDR_EXP 10
1789: PUSH
1790: LD_INT 18
1792: PUSH
1793: LD_INT 73
1795: PUSH
1796: LD_INT 42
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: LD_INT 78
1807: PUSH
1808: LD_INT 52
1810: PUSH
1811: LD_INT 3
1813: PUSH
1814: LD_INT 26
1816: PUSH
1817: LD_INT 96
1819: PUSH
1820: LD_INT 58
1822: PUSH
1823: LD_INT 0
1825: PUSH
1826: LD_INT 32
1828: PUSH
1829: LD_INT 72
1831: PUSH
1832: LD_INT 34
1834: PUSH
1835: LD_INT 3
1837: PUSH
1838: LD_INT 32
1840: PUSH
1841: LD_INT 83
1843: PUSH
1844: LD_INT 54
1846: PUSH
1847: LD_INT 0
1849: PUSH
1850: LD_INT 32
1852: PUSH
1853: LD_INT 82
1855: PUSH
1856: LD_INT 38
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 26
1864: PUSH
1865: LD_INT 69
1867: PUSH
1868: LD_INT 39
1870: PUSH
1871: LD_INT 3
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: ST_TO_ADDR
// end ; 3 :
1904: GO 2053
1906: LD_INT 3
1908: DOUBLE
1909: EQUAL
1910: IFTRUE 1914
1912: GO 2052
1914: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1915: LD_ADDR_EXP 10
1919: PUSH
1920: LD_INT 18
1922: PUSH
1923: LD_INT 73
1925: PUSH
1926: LD_INT 42
1928: PUSH
1929: LD_INT 2
1931: PUSH
1932: LD_INT 26
1934: PUSH
1935: LD_INT 78
1937: PUSH
1938: LD_INT 52
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: LD_INT 26
1946: PUSH
1947: LD_INT 96
1949: PUSH
1950: LD_INT 58
1952: PUSH
1953: LD_INT 0
1955: PUSH
1956: LD_INT 32
1958: PUSH
1959: LD_INT 72
1961: PUSH
1962: LD_INT 34
1964: PUSH
1965: LD_INT 3
1967: PUSH
1968: LD_INT 32
1970: PUSH
1971: LD_INT 83
1973: PUSH
1974: LD_INT 54
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: LD_INT 32
1982: PUSH
1983: LD_INT 82
1985: PUSH
1986: LD_INT 38
1988: PUSH
1989: LD_INT 2
1991: PUSH
1992: LD_INT 32
1994: PUSH
1995: LD_INT 103
1997: PUSH
1998: LD_INT 59
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: LD_INT 26
2006: PUSH
2007: LD_INT 69
2009: PUSH
2010: LD_INT 39
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: ST_TO_ADDR
// end ; end ;
2050: GO 2053
2052: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2053: LD_ADDR_EXP 12
2057: PUSH
2058: LD_INT 48
2060: PUSH
2061: LD_INT 47
2063: PUSH
2064: LD_INT 49
2066: PUSH
2067: LD_INT 51
2069: PUSH
2070: LD_INT 69
2072: PUSH
2073: LD_INT 52
2075: PUSH
2076: LD_INT 39
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: ST_TO_ADDR
// case game_diff of 1 :
2092: LD_EXP 2
2096: PUSH
2097: LD_INT 1
2099: DOUBLE
2100: EQUAL
2101: IFTRUE 2105
2103: GO 2179
2105: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2106: LD_ADDR_EXP 11
2110: PUSH
2111: LD_INT 3
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 12
2122: PUSH
2123: LD_INT 4
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 4
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: LD_INT 1
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: LD_INT 5
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 1
2152: PUSH
2153: LD_INT 1
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: ST_TO_ADDR
// end ; 2 :
2177: GO 2344
2179: LD_INT 2
2181: DOUBLE
2182: EQUAL
2183: IFTRUE 2187
2185: GO 2261
2187: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2188: LD_ADDR_EXP 11
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 12
2204: PUSH
2205: LD_INT 4
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: LD_INT 7
2216: PUSH
2217: LD_INT 4
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 5
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 1
2234: PUSH
2235: LD_INT 1
2237: PUSH
2238: LD_INT 7
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: ST_TO_ADDR
// end ; 3 :
2259: GO 2344
2261: LD_INT 3
2263: DOUBLE
2264: EQUAL
2265: IFTRUE 2269
2267: GO 2343
2269: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2270: LD_ADDR_EXP 11
2274: PUSH
2275: LD_INT 3
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: LD_INT 12
2286: PUSH
2287: LD_INT 4
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: LD_INT 7
2298: PUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: LD_INT 1
2307: PUSH
2308: LD_INT 7
2310: PUSH
2311: LD_INT 4
2313: PUSH
2314: LD_INT 1
2316: PUSH
2317: LD_INT 1
2319: PUSH
2320: LD_INT 7
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: ST_TO_ADDR
// end ; end ;
2341: GO 2344
2343: POP
// end ; end ;
2344: LD_VAR 0 1
2348: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2349: GO 2351
2351: DISABLE
// begin sold_ocp := [ ] ;
2352: LD_ADDR_EXP 13
2356: PUSH
2357: EMPTY
2358: ST_TO_ADDR
// tower_list := [ ] ;
2359: LD_ADDR_EXP 14
2363: PUSH
2364: EMPTY
2365: ST_TO_ADDR
// end ;
2366: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2367: LD_EXP 1
2371: PUSH
2372: LD_INT 2
2374: EQUAL
2375: PUSH
2376: LD_EXP 8
2380: PUSH
2381: LD_INT 0
2383: EQUAL
2384: AND
2385: IFFALSE 4062
2387: GO 2389
2389: DISABLE
2390: LD_INT 0
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
2398: PPUSH
2399: PPUSH
2400: PPUSH
2401: PPUSH
2402: PPUSH
2403: PPUSH
2404: PPUSH
// begin enable ;
2405: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2406: LD_ADDR_VAR 0 3
2410: PUSH
2411: LD_INT 22
2413: PUSH
2414: LD_INT 1
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 25
2423: PUSH
2424: LD_INT 1
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: LD_INT 24
2433: PUSH
2434: LD_INT 650
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: PPUSH
2449: CALL_OW 69
2453: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2454: LD_ADDR_VAR 0 6
2458: PUSH
2459: LD_INT 22
2461: PUSH
2462: LD_INT 1
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 25
2471: PUSH
2472: LD_INT 2
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 24
2481: PUSH
2482: LD_INT 650
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: PUSH
2494: EMPTY
2495: LIST
2496: PPUSH
2497: CALL_OW 69
2501: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2502: LD_ADDR_VAR 0 7
2506: PUSH
2507: LD_INT 22
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: LD_INT 25
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 24
2529: PUSH
2530: LD_INT 650
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: PPUSH
2545: CALL_OW 69
2549: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 22
2557: PUSH
2558: LD_INT 1
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 25
2567: PUSH
2568: LD_INT 4
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 24
2577: PUSH
2578: LD_INT 650
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: PPUSH
2593: CALL_OW 69
2597: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2598: LD_ADDR_VAR 0 9
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 1
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 30
2615: PUSH
2616: LD_INT 32
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 58
2625: PUSH
2626: EMPTY
2627: LIST
2628: PUSH
2629: LD_INT 24
2631: PUSH
2632: LD_INT 251
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: CALL_OW 69
2649: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2650: LD_ADDR_VAR 0 10
2654: PUSH
2655: LD_INT 22
2657: PUSH
2658: LD_INT 1
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_INT 32
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 2
2677: PUSH
2678: LD_INT 35
2680: PUSH
2681: LD_INT 7
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 35
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 24
2705: PUSH
2706: LD_INT 251
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: EMPTY
2720: LIST
2721: PPUSH
2722: CALL_OW 69
2726: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2727: LD_ADDR_VAR 0 11
2731: PUSH
2732: LD_INT 22
2734: PUSH
2735: LD_INT 1
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 21
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 24
2757: PUSH
2758: LD_INT 650
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: PPUSH
2777: CALL_OW 69
2781: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2782: LD_ADDR_VAR 0 12
2786: PUSH
2787: LD_INT 11
2789: PPUSH
2790: LD_INT 22
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 24
2815: PUSH
2816: LD_INT 1000
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: PPUSH
2835: CALL_OW 70
2839: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2840: LD_ADDR_VAR 0 13
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 21
2857: PUSH
2858: LD_INT 2
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 3
2867: PUSH
2868: LD_INT 24
2870: PUSH
2871: LD_INT 650
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: PPUSH
2890: CALL_OW 69
2894: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2895: LD_INT 1
2897: PPUSH
2898: CALL_OW 274
2902: PPUSH
2903: LD_INT 2
2905: PPUSH
2906: CALL_OW 275
2910: PUSH
2911: LD_INT 30
2913: LESSEQUAL
2914: IFFALSE 2934
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2916: LD_INT 1
2918: PPUSH
2919: CALL_OW 274
2923: PPUSH
2924: LD_INT 2
2926: PPUSH
2927: LD_INT 100
2929: PPUSH
2930: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
2934: LD_ADDR_VAR 0 5
2938: PUSH
2939: LD_VAR 0 3
2943: PUSH
2944: LD_EXP 13
2948: DIFF
2949: ST_TO_ADDR
// if sold > 0 then
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 0
2957: GREATER
2958: IFFALSE 3080
// for i = 1 to sold_em do
2960: LD_ADDR_VAR 0 1
2964: PUSH
2965: DOUBLE
2966: LD_INT 1
2968: DEC
2969: ST_TO_ADDR
2970: LD_VAR 0 5
2974: PUSH
2975: FOR_TO
2976: IFFALSE 3078
// if empty_towers > 0 then
2978: LD_VAR 0 9
2982: PUSH
2983: LD_INT 0
2985: GREATER
2986: IFFALSE 3014
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
2988: LD_VAR 0 5
2992: PUSH
2993: LD_VAR 0 1
2997: ARRAY
2998: PPUSH
2999: LD_VAR 0 9
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: CALL_OW 120
3012: GO 3076
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3014: LD_VAR 0 5
3018: PUSH
3019: LD_VAR 0 1
3023: ARRAY
3024: PPUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 1
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 30
3037: PUSH
3038: LD_INT 4
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 24
3047: PUSH
3048: LD_INT 251
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: EMPTY
3061: LIST
3062: PPUSH
3063: CALL_OW 69
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: CALL_OW 120
3076: GO 2975
3078: POP
3079: POP
// if mechs > 0 then
3080: LD_VAR 0 7
3084: PUSH
3085: LD_INT 0
3087: GREATER
3088: IFFALSE 3166
// for i = 1 to mechs do
3090: LD_ADDR_VAR 0 1
3094: PUSH
3095: DOUBLE
3096: LD_INT 1
3098: DEC
3099: ST_TO_ADDR
3100: LD_VAR 0 7
3104: PUSH
3105: FOR_TO
3106: IFFALSE 3164
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3108: LD_VAR 0 7
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 310
3123: NOT
3124: PUSH
3125: LD_VAR 0 7
3129: PUSH
3130: LD_VAR 0 1
3134: ARRAY
3135: PPUSH
3136: CALL_OW 314
3140: NOT
3141: AND
3142: IFFALSE 3162
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3144: LD_VAR 0 7
3148: PUSH
3149: LD_VAR 0 1
3153: ARRAY
3154: PPUSH
3155: LD_INT 14
3157: PPUSH
3158: CALL_OW 120
3162: GO 3105
3164: POP
3165: POP
// if sci > 0 then
3166: LD_VAR 0 8
3170: PUSH
3171: LD_INT 0
3173: GREATER
3174: IFFALSE 3244
// for i = 1 to sci do
3176: LD_ADDR_VAR 0 1
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_VAR 0 8
3190: PUSH
3191: FOR_TO
3192: IFFALSE 3242
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: PUSH
3203: LD_VAR 0 8
3207: PUSH
3208: LD_VAR 0 1
3212: ARRAY
3213: PPUSH
3214: CALL_OW 314
3218: NOT
3219: AND
3220: IFFALSE 3240
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3222: LD_VAR 0 8
3226: PUSH
3227: LD_VAR 0 1
3231: ARRAY
3232: PPUSH
3233: LD_INT 9
3235: PPUSH
3236: CALL_OW 120
3240: GO 3191
3242: POP
3243: POP
// if damage_build > 0 then
3244: LD_VAR 0 12
3248: PUSH
3249: LD_INT 0
3251: GREATER
3252: IFFALSE 3300
// for i = 1 to engs do
3254: LD_ADDR_VAR 0 1
3258: PUSH
3259: DOUBLE
3260: LD_INT 1
3262: DEC
3263: ST_TO_ADDR
3264: LD_VAR 0 6
3268: PUSH
3269: FOR_TO
3270: IFFALSE 3298
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3272: LD_VAR 0 6
3276: PUSH
3277: LD_VAR 0 1
3281: ARRAY
3282: PPUSH
3283: LD_VAR 0 12
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: PPUSH
3292: CALL_OW 130
3296: GO 3269
3298: POP
3299: POP
// if ai_build > 0 then
3300: LD_EXP 10
3304: PUSH
3305: LD_INT 0
3307: GREATER
3308: IFFALSE 3401
// for i = 1 to engs do
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_VAR 0 6
3324: PUSH
3325: FOR_TO
3326: IFFALSE 3399
// if not HasTask ( engs [ i ] ) then
3328: LD_VAR 0 6
3332: PUSH
3333: LD_VAR 0 1
3337: ARRAY
3338: PPUSH
3339: CALL_OW 314
3343: NOT
3344: IFFALSE 3397
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3346: LD_VAR 0 6
3350: PUSH
3351: LD_VAR 0 1
3355: ARRAY
3356: PPUSH
3357: LD_EXP 10
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: PPUSH
3366: LD_EXP 10
3370: PUSH
3371: LD_INT 2
3373: ARRAY
3374: PPUSH
3375: LD_EXP 10
3379: PUSH
3380: LD_INT 3
3382: ARRAY
3383: PPUSH
3384: LD_EXP 10
3388: PUSH
3389: LD_INT 4
3391: ARRAY
3392: PPUSH
3393: CALL_OW 145
3397: GO 3325
3399: POP
3400: POP
// if damage_pep > 0 and sci > 0 then
3401: LD_VAR 0 11
3405: PUSH
3406: LD_INT 0
3408: GREATER
3409: PUSH
3410: LD_VAR 0 8
3414: PUSH
3415: LD_INT 0
3417: GREATER
3418: AND
3419: IFFALSE 3605
// begin for i = 1 to sci do
3421: LD_ADDR_VAR 0 1
3425: PUSH
3426: DOUBLE
3427: LD_INT 1
3429: DEC
3430: ST_TO_ADDR
3431: LD_VAR 0 8
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3456
// ComExitBuilding ( sci [ i ] ) ;
3439: LD_VAR 0 8
3443: PUSH
3444: LD_VAR 0 1
3448: ARRAY
3449: PPUSH
3450: CALL_OW 122
3454: GO 3436
3456: POP
3457: POP
// for i = 1 to damage_pep do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: DOUBLE
3464: LD_INT 1
3466: DEC
3467: ST_TO_ADDR
3468: LD_VAR 0 11
3472: PUSH
3473: FOR_TO
3474: IFFALSE 3553
// begin if not IsInUnit ( damage_pep [ i ] ) then
3476: LD_VAR 0 11
3480: PUSH
3481: LD_VAR 0 1
3485: ARRAY
3486: PPUSH
3487: CALL_OW 310
3491: NOT
3492: IFFALSE 3509
// ComExitBuilding ( damage_pep [ i ] ) ;
3494: LD_VAR 0 11
3498: PUSH
3499: LD_VAR 0 1
3503: ARRAY
3504: PPUSH
3505: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3509: LD_VAR 0 11
3513: PUSH
3514: LD_VAR 0 1
3518: ARRAY
3519: PPUSH
3520: LD_INT 9
3522: PPUSH
3523: CALL_OW 308
3527: NOT
3528: IFFALSE 3551
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3530: LD_VAR 0 11
3534: PUSH
3535: LD_VAR 0 1
3539: ARRAY
3540: PPUSH
3541: LD_INT 96
3543: PPUSH
3544: LD_INT 52
3546: PPUSH
3547: CALL_OW 111
// end ;
3551: GO 3473
3553: POP
3554: POP
// if damage_pep = 0 then
3555: LD_VAR 0 11
3559: PUSH
3560: LD_INT 0
3562: EQUAL
3563: IFFALSE 3605
// for i = 1 to sci do
3565: LD_ADDR_VAR 0 1
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_VAR 0 8
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3603
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3583: LD_VAR 0 8
3587: PUSH
3588: LD_VAR 0 1
3592: ARRAY
3593: PPUSH
3594: LD_INT 9
3596: PPUSH
3597: CALL_OW 120
3601: GO 3580
3603: POP
3604: POP
// end ; if ai_tech > 0 then
3605: LD_EXP 12
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3631
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3615: LD_INT 9
3617: PPUSH
3618: LD_EXP 12
3622: PUSH
3623: LD_INT 1
3625: ARRAY
3626: PPUSH
3627: CALL_OW 124
// if ai_vehs > 0 then
3631: LD_EXP 11
3635: PUSH
3636: LD_INT 0
3638: GREATER
3639: IFFALSE 3767
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3641: LD_INT 14
3643: PPUSH
3644: LD_EXP 11
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: PPUSH
3653: LD_EXP 11
3657: PUSH
3658: LD_INT 2
3660: ARRAY
3661: PPUSH
3662: LD_EXP 11
3666: PUSH
3667: LD_INT 3
3669: ARRAY
3670: PPUSH
3671: LD_EXP 11
3675: PUSH
3676: LD_INT 4
3678: ARRAY
3679: PPUSH
3680: CALL_OW 448
3684: IFFALSE 3767
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3686: LD_INT 14
3688: PPUSH
3689: LD_EXP 11
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: LD_EXP 11
3702: PUSH
3703: LD_INT 2
3705: ARRAY
3706: PPUSH
3707: LD_EXP 11
3711: PUSH
3712: LD_INT 3
3714: ARRAY
3715: PPUSH
3716: LD_EXP 11
3720: PUSH
3721: LD_INT 4
3723: ARRAY
3724: PPUSH
3725: CALL_OW 125
// for i = 1 to 4 do
3729: LD_ADDR_VAR 0 1
3733: PUSH
3734: DOUBLE
3735: LD_INT 1
3737: DEC
3738: ST_TO_ADDR
3739: LD_INT 4
3741: PUSH
3742: FOR_TO
3743: IFFALSE 3765
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3745: LD_ADDR_EXP 11
3749: PUSH
3750: LD_EXP 11
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: CALL_OW 3
3762: ST_TO_ADDR
3763: GO 3742
3765: POP
3766: POP
// end ; if tower_list > 0 then
3767: LD_EXP 14
3771: PUSH
3772: LD_INT 0
3774: GREATER
3775: IFFALSE 3879
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3777: LD_INT 40
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: CALL_OW 321
3787: PUSH
3788: LD_INT 2
3790: EQUAL
3791: IFFALSE 3829
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3793: LD_EXP 14
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: PPUSH
3802: LD_INT 7
3804: PPUSH
3805: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3809: LD_ADDR_EXP 14
3813: PUSH
3814: LD_EXP 14
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 3
3826: ST_TO_ADDR
// end else
3827: GO 3879
// if GetTech ( tech_gatling , 1 ) = state_researched then
3829: LD_INT 69
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: CALL_OW 321
3839: PUSH
3840: LD_INT 2
3842: EQUAL
3843: IFFALSE 3879
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3845: LD_EXP 14
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PPUSH
3854: LD_INT 4
3856: PPUSH
3857: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3861: LD_ADDR_EXP 14
3865: PUSH
3866: LD_EXP 14
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: CALL_OW 3
3878: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3879: LD_VAR 0 13
3883: PUSH
3884: LD_INT 0
3886: GREATER
3887: IFFALSE 4062
// begin for i = 1 to damage_vehs do
3889: LD_ADDR_VAR 0 1
3893: PUSH
3894: DOUBLE
3895: LD_INT 1
3897: DEC
3898: ST_TO_ADDR
3899: LD_VAR 0 13
3903: PUSH
3904: FOR_TO
3905: IFFALSE 4060
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3907: LD_ADDR_VAR 0 2
3911: PUSH
3912: LD_VAR 0 13
3916: PUSH
3917: LD_VAR 0 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 311
3927: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
3928: LD_VAR 0 13
3932: PUSH
3933: LD_VAR 0 1
3937: ARRAY
3938: PPUSH
3939: LD_INT 10
3941: PPUSH
3942: CALL_OW 308
3946: NOT
3947: IFFALSE 3963
// ComMoveToArea ( un , repair_area ) else
3949: LD_VAR 0 2
3953: PPUSH
3954: LD_INT 10
3956: PPUSH
3957: CALL_OW 113
3961: GO 4058
// begin if IsInUnit ( un ) then
3963: LD_VAR 0 2
3967: PPUSH
3968: CALL_OW 310
3972: IFFALSE 3983
// ComExitVehicle ( un ) ;
3974: LD_VAR 0 2
3978: PPUSH
3979: CALL_OW 121
// Wait ( 0 0$01 ) ;
3983: LD_INT 35
3985: PPUSH
3986: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
3990: LD_VAR 0 2
3994: PPUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 129
// Wait ( 0 0$01 ) ;
4010: LD_INT 35
4012: PPUSH
4013: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4017: LD_VAR 0 13
4021: PUSH
4022: LD_VAR 0 1
4026: ARRAY
4027: PPUSH
4028: CALL_OW 256
4032: PUSH
4033: LD_INT 1000
4035: EQUAL
4036: IFFALSE 3990
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_VAR 0 13
4047: PUSH
4048: LD_VAR 0 1
4052: ARRAY
4053: PPUSH
4054: CALL_OW 120
// end ; end ;
4058: GO 3904
4060: POP
4061: POP
// end ; end ;
4062: PPOPN 13
4064: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4065: LD_EXP 1
4069: PUSH
4070: LD_INT 2
4072: EQUAL
4073: PUSH
4074: LD_EXP 8
4078: PUSH
4079: LD_INT 0
4081: EQUAL
4082: AND
4083: IFFALSE 4262
4085: GO 4087
4087: DISABLE
4088: LD_INT 0
4090: PPUSH
4091: PPUSH
4092: PPUSH
4093: PPUSH
// begin enable ;
4094: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4095: LD_ADDR_VAR 0 3
4099: PUSH
4100: LD_INT 22
4102: PUSH
4103: LD_INT 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 21
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 24
4122: PUSH
4123: LD_INT 650
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 34
4135: PUSH
4136: LD_INT 12
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: PUSH
4153: EMPTY
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4161: LD_ADDR_VAR 0 4
4165: PUSH
4166: LD_INT 11
4168: PPUSH
4169: LD_INT 22
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// if filter > 0 then
4184: LD_VAR 0 3
4188: PUSH
4189: LD_INT 0
4191: GREATER
4192: IFFALSE 4262
// for i = 1 to filter do
4194: LD_ADDR_VAR 0 1
4198: PUSH
4199: DOUBLE
4200: LD_INT 1
4202: DEC
4203: ST_TO_ADDR
4204: LD_VAR 0 3
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4260
// if enemy > 0 then
4212: LD_VAR 0 4
4216: PUSH
4217: LD_INT 0
4219: GREATER
4220: IFFALSE 4258
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4222: LD_VAR 0 3
4226: PUSH
4227: LD_VAR 0 1
4231: ARRAY
4232: PPUSH
4233: LD_VAR 0 4
4237: PPUSH
4238: LD_VAR 0 3
4242: PUSH
4243: LD_VAR 0 1
4247: ARRAY
4248: PPUSH
4249: CALL_OW 74
4253: PPUSH
4254: CALL_OW 115
4258: GO 4209
4260: POP
4261: POP
// end ;
4262: PPOPN 4
4264: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4265: LD_EXP 1
4269: PUSH
4270: LD_INT 2
4272: EQUAL
4273: PUSH
4274: LD_EXP 8
4278: PUSH
4279: LD_INT 0
4281: EQUAL
4282: AND
4283: IFFALSE 4730
4285: GO 4287
4287: DISABLE
4288: LD_INT 0
4290: PPUSH
4291: PPUSH
4292: PPUSH
4293: PPUSH
4294: PPUSH
4295: PPUSH
4296: PPUSH
// begin enable ;
4297: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4298: LD_ADDR_VAR 0 5
4302: PUSH
4303: LD_INT 50
4305: PUSH
4306: EMPTY
4307: LIST
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 2
4321: PUSH
4322: LD_INT 25
4324: PUSH
4325: LD_INT 2
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 25
4334: PUSH
4335: LD_INT 16
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 69
4356: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4357: LD_ADDR_VAR 0 6
4361: PUSH
4362: LD_INT 22
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: LD_INT 34
4374: PUSH
4375: LD_INT 12
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 24
4384: PUSH
4385: LD_INT 650
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: PPUSH
4397: CALL_OW 69
4401: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4402: LD_ADDR_VAR 0 7
4406: PUSH
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 2
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 1
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PPUSH
4449: CALL_OW 69
4453: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4454: LD_ADDR_VAR 0 4
4458: PUSH
4459: LD_INT 7
4461: PPUSH
4462: CALL_OW 435
4466: ST_TO_ADDR
// c = 1 ;
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if cargo > 0 then
4475: LD_VAR 0 6
4479: PUSH
4480: LD_INT 0
4482: GREATER
4483: IFFALSE 4730
// while c < skr do
4485: LD_VAR 0 2
4489: PUSH
4490: LD_VAR 0 4
4494: LESS
4495: IFFALSE 4730
// begin if cargo > 0 then
4497: LD_VAR 0 6
4501: PUSH
4502: LD_INT 0
4504: GREATER
4505: IFFALSE 4728
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4507: LD_VAR 0 6
4511: PUSH
4512: LD_INT 1
4514: ARRAY
4515: PPUSH
4516: CALL_OW 261
4520: PUSH
4521: LD_INT 40
4523: GREATER
4524: IFFALSE 4622
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4526: LD_VAR 0 4
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: LD_VAR 0 4
4541: PUSH
4542: LD_VAR 0 2
4546: PUSH
4547: LD_INT 1
4549: PLUS
4550: ARRAY
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: CALL 10337 0 3
4559: PUSH
4560: LD_INT 15
4562: GREATER
4563: PUSH
4564: LD_VAR 0 6
4568: PUSH
4569: LD_INT 1
4571: ARRAY
4572: PPUSH
4573: CALL_OW 314
4577: NOT
4578: AND
4579: IFFALSE 4620
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4581: LD_VAR 0 6
4585: PUSH
4586: LD_INT 1
4588: ARRAY
4589: PPUSH
4590: LD_VAR 0 4
4594: PUSH
4595: LD_VAR 0 2
4599: ARRAY
4600: PPUSH
4601: LD_VAR 0 4
4605: PUSH
4606: LD_VAR 0 2
4610: PUSH
4611: LD_INT 1
4613: PLUS
4614: ARRAY
4615: PPUSH
4616: CALL_OW 117
// end else
4620: GO 4714
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4622: LD_VAR 0 6
4626: PUSH
4627: LD_INT 1
4629: ARRAY
4630: PPUSH
4631: LD_VAR 0 7
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: CALL_OW 250
4644: PPUSH
4645: LD_VAR 0 7
4649: PUSH
4650: LD_INT 1
4652: ARRAY
4653: PPUSH
4654: CALL_OW 251
4658: PPUSH
4659: CALL_OW 111
// Wait ( 0 0$01 ) ;
4663: LD_INT 35
4665: PPUSH
4666: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4670: LD_VAR 0 6
4674: PUSH
4675: LD_INT 1
4677: ARRAY
4678: PPUSH
4679: LD_VAR 0 7
4683: PUSH
4684: LD_INT 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 7
4695: LESS
4696: IFFALSE 4622
// SetFuel ( cargo [ 1 ] , 100 ) ;
4698: LD_VAR 0 6
4702: PUSH
4703: LD_INT 1
4705: ARRAY
4706: PPUSH
4707: LD_INT 100
4709: PPUSH
4710: CALL_OW 240
// end ; c = c + 2 ;
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: LD_VAR 0 2
4723: PUSH
4724: LD_INT 2
4726: PLUS
4727: ST_TO_ADDR
// end ; end ;
4728: GO 4485
// end ;
4730: PPOPN 7
4732: END
// on EnterBuilding ( b , un ) do var i , filter ;
4733: LD_INT 0
4735: PPUSH
4736: PPUSH
// begin if game_type = 2 and depot_captured = false then
4737: LD_EXP 1
4741: PUSH
4742: LD_INT 2
4744: EQUAL
4745: PUSH
4746: LD_EXP 8
4750: PUSH
4751: LD_INT 0
4753: EQUAL
4754: AND
4755: IFFALSE 4809
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4757: LD_VAR 0 1
4761: PUSH
4762: LD_INT 22
4764: PUSH
4765: LD_INT 1
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 30
4774: PUSH
4775: LD_INT 32
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PPUSH
4786: CALL_OW 69
4790: IN
4791: IFFALSE 4809
// sold_ocp := sold_ocp ^ un ;
4793: LD_ADDR_EXP 13
4797: PUSH
4798: LD_EXP 13
4802: PUSH
4803: LD_VAR 0 2
4807: ADD
4808: ST_TO_ADDR
// end ; end ;
4809: PPOPN 4
4811: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4812: LD_INT 0
4814: PPUSH
4815: PPUSH
// begin if un in sold_ocp then
4816: LD_VAR 0 2
4820: PUSH
4821: LD_EXP 13
4825: IN
4826: IFFALSE 4848
// sold_ocp := Delete ( sold_ocp , un ) ;
4828: LD_ADDR_EXP 13
4832: PUSH
4833: LD_EXP 13
4837: PPUSH
4838: LD_VAR 0 2
4842: PPUSH
4843: CALL_OW 3
4847: ST_TO_ADDR
// end ;
4848: PPOPN 4
4850: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4851: LD_INT 0
4853: PPUSH
4854: PPUSH
4855: PPUSH
// begin if game_type = 2 then
4856: LD_EXP 1
4860: PUSH
4861: LD_INT 2
4863: EQUAL
4864: IFFALSE 4911
// begin if GetSide ( lab ) = 1 then
4866: LD_VAR 0 2
4870: PPUSH
4871: CALL_OW 255
4875: PUSH
4876: LD_INT 1
4878: EQUAL
4879: IFFALSE 4911
// if tech in ai_tech then
4881: LD_VAR 0 1
4885: PUSH
4886: LD_EXP 12
4890: IN
4891: IFFALSE 4911
// ai_tech := Delete ( ai_tech , 1 ) ;
4893: LD_ADDR_EXP 12
4897: PUSH
4898: LD_EXP 12
4902: PPUSH
4903: LD_INT 1
4905: PPUSH
4906: CALL_OW 3
4910: ST_TO_ADDR
// end ; end ;
4911: PPOPN 5
4913: END
// on BuildingComplete ( b ) do var i , side , un ;
4914: LD_INT 0
4916: PPUSH
4917: PPUSH
4918: PPUSH
// begin if game_type = 2 and depot_captured = false then
4919: LD_EXP 1
4923: PUSH
4924: LD_INT 2
4926: EQUAL
4927: PUSH
4928: LD_EXP 8
4932: PUSH
4933: LD_INT 0
4935: EQUAL
4936: AND
4937: IFFALSE 5044
// begin if GetSide ( b ) = 1 then
4939: LD_VAR 0 1
4943: PPUSH
4944: CALL_OW 255
4948: PUSH
4949: LD_INT 1
4951: EQUAL
4952: IFFALSE 4992
// for i = 1 to 4 do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_INT 4
4966: PUSH
4967: FOR_TO
4968: IFFALSE 4990
// ai_build := Delete ( ai_build , 1 ) ;
4970: LD_ADDR_EXP 10
4974: PUSH
4975: LD_EXP 10
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 3
4987: ST_TO_ADDR
4988: GO 4967
4990: POP
4991: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4992: LD_VAR 0 1
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 1
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 32
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: IN
5026: IFFALSE 5044
// tower_list := tower_list ^ b ;
5028: LD_ADDR_EXP 14
5032: PUSH
5033: LD_EXP 14
5037: PUSH
5038: LD_VAR 0 1
5042: ADD
5043: ST_TO_ADDR
// end ; end ;
5044: PPOPN 4
5046: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5047: LD_EXP 1
5051: PUSH
5052: LD_INT 1
5054: EQUAL
5055: IFFALSE 5253
5057: GO 5059
5059: DISABLE
// begin enable ;
5060: ENABLE
// if timer <= 20 20$00 then
5061: LD_EXP 6
5065: PUSH
5066: LD_INT 42000
5068: LESSEQUAL
5069: IFFALSE 5104
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5071: LD_ADDR_EXP 15
5075: PUSH
5076: LD_INT 5
5078: PUSH
5079: LD_INT 6
5081: PUSH
5082: LD_INT 7
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: PUSH
5090: LD_EXP 2
5094: ARRAY
5095: ST_TO_ADDR
// enemy_typ := 1 ;
5096: LD_ADDR_EXP 16
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5104: LD_EXP 6
5108: PUSH
5109: LD_INT 42000
5111: GREATER
5112: PUSH
5113: LD_EXP 6
5117: PUSH
5118: LD_INT 84000
5120: LESSEQUAL
5121: AND
5122: IFFALSE 5157
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5124: LD_ADDR_EXP 15
5128: PUSH
5129: LD_INT 6
5131: PUSH
5132: LD_INT 8
5134: PUSH
5135: LD_INT 9
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: LIST
5142: PUSH
5143: LD_EXP 2
5147: ARRAY
5148: ST_TO_ADDR
// enemy_typ := 2 ;
5149: LD_ADDR_EXP 16
5153: PUSH
5154: LD_INT 2
5156: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5157: LD_EXP 6
5161: PUSH
5162: LD_INT 84000
5164: GREATER
5165: PUSH
5166: LD_EXP 6
5170: PUSH
5171: LD_INT 126000
5173: LESSEQUAL
5174: AND
5175: IFFALSE 5210
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5177: LD_ADDR_EXP 15
5181: PUSH
5182: LD_INT 8
5184: PUSH
5185: LD_INT 9
5187: PUSH
5188: LD_INT 10
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: PUSH
5196: LD_EXP 2
5200: ARRAY
5201: ST_TO_ADDR
// enemy_typ := 3 ;
5202: LD_ADDR_EXP 16
5206: PUSH
5207: LD_INT 3
5209: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5210: LD_EXP 6
5214: PUSH
5215: LD_INT 126000
5217: GREATER
5218: IFFALSE 5253
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5220: LD_ADDR_EXP 15
5224: PUSH
5225: LD_INT 10
5227: PUSH
5228: LD_INT 12
5230: PUSH
5231: LD_INT 14
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: PUSH
5239: LD_EXP 2
5243: ARRAY
5244: ST_TO_ADDR
// enemy_typ := 3 ;
5245: LD_ADDR_EXP 16
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// end ; end ;
5253: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5254: LD_EXP 6
5258: PUSH
5259: LD_INT 16800
5261: PUSH
5262: LD_INT 17850
5264: PUSH
5265: LD_INT 18900
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 2
5277: ARRAY
5278: GREATEREQUAL
5279: PUSH
5280: LD_EXP 1
5284: PUSH
5285: LD_INT 1
5287: EQUAL
5288: AND
5289: IFFALSE 5493
5291: GO 5293
5293: DISABLE
5294: LD_INT 0
5296: PPUSH
// begin uc_nation := 1 ;
5297: LD_ADDR_OWVAR 21
5301: PUSH
5302: LD_INT 1
5304: ST_TO_ADDR
// uc_side := 4 ;
5305: LD_ADDR_OWVAR 20
5309: PUSH
5310: LD_INT 4
5312: ST_TO_ADDR
// hc_sex := sex_male ;
5313: LD_ADDR_OWVAR 27
5317: PUSH
5318: LD_INT 1
5320: ST_TO_ADDR
// hc_class := 1 ;
5321: LD_ADDR_OWVAR 28
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// hc_gallery :=  ;
5329: LD_ADDR_OWVAR 33
5333: PUSH
5334: LD_STRING 
5336: ST_TO_ADDR
// hc_name :=  ;
5337: LD_ADDR_OWVAR 26
5341: PUSH
5342: LD_STRING 
5344: ST_TO_ADDR
// am_com2 := CreateHuman ;
5345: LD_ADDR_EXP 17
5349: PUSH
5350: CALL_OW 44
5354: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5355: LD_EXP 17
5359: PPUSH
5360: LD_STRING D-rus
5362: PPUSH
5363: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5367: LD_ADDR_VAR 0 1
5371: PUSH
5372: LD_INT 6
5374: PUSH
5375: LD_INT 5
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: ST_TO_ADDR
// while ( true ) do
5382: LD_INT 1
5384: IFFALSE 5493
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5386: LD_INT 13650
5388: PPUSH
5389: LD_INT 17920
5391: PPUSH
5392: CALL_OW 12
5396: PPUSH
5397: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5401: LD_INT 3
5403: PPUSH
5404: LD_EXP 15
5408: PPUSH
5409: LD_EXP 16
5413: PPUSH
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL 7919 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5423: LD_EXP 6
5427: PUSH
5428: LD_INT 115500
5430: PUSH
5431: LD_INT 94500
5433: PUSH
5434: LD_INT 73500
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: LIST
5441: PUSH
5442: LD_OWVAR 67
5446: ARRAY
5447: GREATER
5448: IFFALSE 5491
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5450: LD_INT 1050
5452: PPUSH
5453: LD_INT 3150
5455: PPUSH
5456: CALL_OW 12
5460: PPUSH
5461: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5465: LD_INT 3
5467: PPUSH
5468: LD_EXP 15
5472: PUSH
5473: LD_INT 2
5475: DIVREAL
5476: PPUSH
5477: LD_EXP 16
5481: PPUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL 7919 0 4
// end ; end ;
5491: GO 5382
// end ;
5493: PPOPN 1
5495: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5496: LD_INT 1
5498: PPUSH
5499: CALL_OW 274
5503: PPUSH
5504: LD_INT 3
5506: PPUSH
5507: CALL_OW 275
5511: PUSH
5512: LD_EXP 7
5516: EQUAL
5517: IFFALSE 5799
5519: GO 5521
5521: DISABLE
5522: LD_INT 0
5524: PPUSH
5525: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5526: LD_EXP 17
5530: PPUSH
5531: LD_STRING D-help
5533: PPUSH
5534: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5538: LD_INT 7035
5540: PPUSH
5541: LD_INT 16065
5543: PPUSH
5544: CALL_OW 12
5548: PPUSH
5549: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5553: LD_INT 35
5555: PPUSH
5556: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5560: LD_INT 22
5562: PUSH
5563: LD_INT 3
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PPUSH
5570: CALL_OW 69
5574: PUSH
5575: LD_INT 0
5577: EQUAL
5578: IFFALSE 5553
// uc_side := 1 ;
5580: LD_ADDR_OWVAR 20
5584: PUSH
5585: LD_INT 1
5587: ST_TO_ADDR
// uc_nation := 1 ;
5588: LD_ADDR_OWVAR 21
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5596: LD_ADDR_VAR 0 1
5600: PUSH
5601: DOUBLE
5602: LD_INT 1
5604: DEC
5605: ST_TO_ADDR
5606: LD_INT 3
5608: PUSH
5609: LD_EXP 2
5613: PLUS
5614: PUSH
5615: FOR_TO
5616: IFFALSE 5661
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5618: LD_ADDR_VAR 0 2
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_INT 4
5628: PPUSH
5629: CALL_OW 12
5633: PPUSH
5634: LD_EXP 3
5638: PPUSH
5639: CALL 9174 0 2
5643: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5644: LD_VAR 0 2
5648: PPUSH
5649: LD_INT 5
5651: PPUSH
5652: LD_INT 0
5654: PPUSH
5655: CALL_OW 49
// end ;
5659: GO 5615
5661: POP
5662: POP
// case game_diff of 1 :
5663: LD_EXP 2
5667: PUSH
5668: LD_INT 1
5670: DOUBLE
5671: EQUAL
5672: IFTRUE 5676
5674: GO 5703
5676: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5677: LD_INT 4
5679: PPUSH
5680: LD_INT 1
5682: PPUSH
5683: LD_INT 5
5685: PPUSH
5686: LD_INT 5
5688: PPUSH
5689: LD_INT 0
5691: PPUSH
5692: LD_EXP 3
5696: PPUSH
5697: CALL 9713 0 6
5701: GO 5774
5703: LD_INT 2
5705: DOUBLE
5706: EQUAL
5707: IFTRUE 5711
5709: GO 5738
5711: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5712: LD_INT 3
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: LD_INT 5
5720: PPUSH
5721: LD_INT 5
5723: PPUSH
5724: LD_INT 0
5726: PPUSH
5727: LD_EXP 3
5731: PPUSH
5732: CALL 9713 0 6
5736: GO 5774
5738: LD_INT 3
5740: DOUBLE
5741: EQUAL
5742: IFTRUE 5746
5744: GO 5773
5746: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5747: LD_INT 3
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 5
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: LD_EXP 3
5766: PPUSH
5767: CALL 9713 0 6
5771: GO 5774
5773: POP
// DialogueOn ;
5774: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5778: LD_INT 91
5780: PPUSH
5781: LD_INT 115
5783: PPUSH
5784: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5788: LD_INT 10
5790: PPUSH
5791: CALL_OW 67
// DialogueOff ;
5795: CALL_OW 7
// end ;
5799: PPOPN 2
5801: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
5809: PPUSH
5810: PPUSH
5811: PPUSH
// uc_side := side ;
5812: LD_ADDR_OWVAR 20
5816: PUSH
5817: LD_VAR 0 1
5821: ST_TO_ADDR
// uc_nation := nation_american ;
5822: LD_ADDR_OWVAR 21
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5830: LD_ADDR_VAR 0 10
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5845: LD_ADDR_VAR 0 11
5849: PUSH
5850: LD_INT 2
5852: PUSH
5853: LD_INT 4
5855: PUSH
5856: LD_INT 5
5858: PUSH
5859: LD_INT 6
5861: PUSH
5862: LD_INT 7
5864: PUSH
5865: LD_INT 97
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: ST_TO_ADDR
// case typ of 1 :
5876: LD_VAR 0 3
5880: PUSH
5881: LD_INT 1
5883: DOUBLE
5884: EQUAL
5885: IFTRUE 5889
5887: GO 6083
5889: POP
// begin for i = 1 to num do
5890: LD_ADDR_VAR 0 6
5894: PUSH
5895: DOUBLE
5896: LD_INT 1
5898: DEC
5899: ST_TO_ADDR
5900: LD_VAR 0 2
5904: PUSH
5905: FOR_TO
5906: IFFALSE 6079
// begin vc_chassis := chassis [ 1 ] ;
5908: LD_ADDR_OWVAR 37
5912: PUSH
5913: LD_VAR 0 10
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: ST_TO_ADDR
// vc_engine := engine_combustion ;
5922: LD_ADDR_OWVAR 39
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// vc_control := control_manual ;
5930: LD_ADDR_OWVAR 38
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
5938: LD_ADDR_OWVAR 40
5942: PUSH
5943: LD_VAR 0 11
5947: PUSH
5948: LD_INT 1
5950: PPUSH
5951: LD_INT 3
5953: PPUSH
5954: CALL_OW 12
5958: ARRAY
5959: ST_TO_ADDR
// veh := CreateVehicle ;
5960: LD_ADDR_VAR 0 9
5964: PUSH
5965: CALL_OW 45
5969: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
5970: LD_ADDR_VAR 0 12
5974: PUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 2
5980: PPUSH
5981: CALL_OW 12
5985: ST_TO_ADDR
// if f = 1 then
5986: LD_VAR 0 12
5990: PUSH
5991: LD_INT 1
5993: EQUAL
5994: IFFALSE 6010
// SetDir ( veh , 3 ) else
5996: LD_VAR 0 9
6000: PPUSH
6001: LD_INT 3
6003: PPUSH
6004: CALL_OW 233
6008: GO 6022
// SetDir ( veh , 1 ) ;
6010: LD_VAR 0 9
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6022: LD_VAR 0 9
6026: PPUSH
6027: LD_VAR 0 4
6031: PUSH
6032: LD_VAR 0 12
6036: ARRAY
6037: PPUSH
6038: LD_INT 0
6040: PPUSH
6041: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: LD_INT 1
6052: PPUSH
6053: LD_EXP 4
6057: PPUSH
6058: CALL 9174 0 2
6062: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6063: LD_VAR 0 7
6067: PPUSH
6068: LD_VAR 0 9
6072: PPUSH
6073: CALL_OW 52
// end ;
6077: GO 5905
6079: POP
6080: POP
// end ; 2 :
6081: GO 6557
6083: LD_INT 2
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6354
6091: POP
// begin for i = 1 to num do
6092: LD_ADDR_VAR 0 6
6096: PUSH
6097: DOUBLE
6098: LD_INT 1
6100: DEC
6101: ST_TO_ADDR
6102: LD_VAR 0 2
6106: PUSH
6107: FOR_TO
6108: IFFALSE 6289
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6110: LD_ADDR_OWVAR 37
6114: PUSH
6115: LD_VAR 0 10
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 2
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// vc_engine := engine_combustion ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// vc_control := control_manual ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 1
6147: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_VAR 0 11
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 3
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// veh := CreateVehicle ;
6170: LD_ADDR_VAR 0 9
6174: PUSH
6175: CALL_OW 45
6179: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6180: LD_ADDR_VAR 0 12
6184: PUSH
6185: LD_INT 1
6187: PPUSH
6188: LD_INT 2
6190: PPUSH
6191: CALL_OW 12
6195: ST_TO_ADDR
// if f = 1 then
6196: LD_VAR 0 12
6200: PUSH
6201: LD_INT 1
6203: EQUAL
6204: IFFALSE 6220
// SetDir ( veh , 3 ) else
6206: LD_VAR 0 9
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: CALL_OW 233
6218: GO 6232
// SetDir ( veh , 1 ) ;
6220: LD_VAR 0 9
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6232: LD_VAR 0 9
6236: PPUSH
6237: LD_VAR 0 4
6241: PUSH
6242: LD_VAR 0 12
6246: ARRAY
6247: PPUSH
6248: LD_INT 0
6250: PPUSH
6251: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6255: LD_ADDR_VAR 0 7
6259: PUSH
6260: LD_INT 1
6262: PPUSH
6263: LD_EXP 4
6267: PPUSH
6268: CALL 9174 0 2
6272: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6273: LD_VAR 0 7
6277: PPUSH
6278: LD_VAR 0 9
6282: PPUSH
6283: CALL_OW 52
// end ;
6287: GO 6107
6289: POP
6290: POP
// for i = 1 to 3 do
6291: LD_ADDR_VAR 0 6
6295: PUSH
6296: DOUBLE
6297: LD_INT 1
6299: DEC
6300: ST_TO_ADDR
6301: LD_INT 3
6303: PUSH
6304: FOR_TO
6305: IFFALSE 6350
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6307: LD_ADDR_VAR 0 7
6311: PUSH
6312: LD_INT 5
6314: PPUSH
6315: LD_EXP 4
6319: PPUSH
6320: CALL 9174 0 2
6324: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6325: LD_VAR 0 7
6329: PPUSH
6330: LD_VAR 0 4
6334: PUSH
6335: LD_VAR 0 12
6339: ARRAY
6340: PPUSH
6341: LD_INT 0
6343: PPUSH
6344: CALL_OW 49
// end ;
6348: GO 6304
6350: POP
6351: POP
// end ; 3 :
6352: GO 6557
6354: LD_INT 3
6356: DOUBLE
6357: EQUAL
6358: IFTRUE 6362
6360: GO 6556
6362: POP
// begin for i = 1 to num do
6363: LD_ADDR_VAR 0 6
6367: PUSH
6368: DOUBLE
6369: LD_INT 1
6371: DEC
6372: ST_TO_ADDR
6373: LD_VAR 0 2
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6552
// begin vc_chassis := chassis [ 2 ] ;
6381: LD_ADDR_OWVAR 37
6385: PUSH
6386: LD_VAR 0 10
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: ST_TO_ADDR
// vc_engine := engine_combustion ;
6395: LD_ADDR_OWVAR 39
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// vc_control := control_manual ;
6403: LD_ADDR_OWVAR 38
6407: PUSH
6408: LD_INT 1
6410: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6411: LD_ADDR_OWVAR 40
6415: PUSH
6416: LD_VAR 0 11
6420: PUSH
6421: LD_INT 3
6423: PPUSH
6424: LD_INT 6
6426: PPUSH
6427: CALL_OW 12
6431: ARRAY
6432: ST_TO_ADDR
// veh := CreateVehicle ;
6433: LD_ADDR_VAR 0 9
6437: PUSH
6438: CALL_OW 45
6442: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6443: LD_ADDR_VAR 0 12
6447: PUSH
6448: LD_INT 1
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 12
6458: ST_TO_ADDR
// if f = 1 then
6459: LD_VAR 0 12
6463: PUSH
6464: LD_INT 1
6466: EQUAL
6467: IFFALSE 6483
// SetDir ( veh , 3 ) else
6469: LD_VAR 0 9
6473: PPUSH
6474: LD_INT 3
6476: PPUSH
6477: CALL_OW 233
6481: GO 6495
// SetDir ( veh , 1 ) ;
6483: LD_VAR 0 9
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6495: LD_VAR 0 9
6499: PPUSH
6500: LD_VAR 0 4
6504: PUSH
6505: LD_VAR 0 12
6509: ARRAY
6510: PPUSH
6511: LD_INT 0
6513: PPUSH
6514: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6518: LD_ADDR_VAR 0 7
6522: PUSH
6523: LD_INT 1
6525: PPUSH
6526: LD_EXP 4
6530: PPUSH
6531: CALL 9174 0 2
6535: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6536: LD_VAR 0 7
6540: PPUSH
6541: LD_VAR 0 9
6545: PPUSH
6546: CALL_OW 52
// end ;
6550: GO 6378
6552: POP
6553: POP
// end ; end ;
6554: GO 6557
6556: POP
// end ;
6557: LD_VAR 0 5
6561: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6562: LD_EXP 1
6566: PUSH
6567: LD_INT 2
6569: EQUAL
6570: PUSH
6571: LD_EXP 8
6575: AND
6576: IFFALSE 6731
6578: GO 6580
6580: DISABLE
6581: LD_INT 0
6583: PPUSH
6584: PPUSH
6585: PPUSH
// begin enable ;
6586: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6587: LD_ADDR_VAR 0 1
6591: PUSH
6592: LD_INT 22
6594: PUSH
6595: LD_INT 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 22
6627: PUSH
6628: LD_INT 6
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: PPUSH
6640: CALL_OW 69
6644: ST_TO_ADDR
// if filter > 0 then
6645: LD_VAR 0 1
6649: PUSH
6650: LD_INT 0
6652: GREATER
6653: IFFALSE 6731
// for i = 1 to filter do
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: DOUBLE
6661: LD_INT 1
6663: DEC
6664: ST_TO_ADDR
6665: LD_VAR 0 1
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6729
// if not HasTask ( filter [ i ] ) then
6673: LD_VAR 0 1
6677: PUSH
6678: LD_VAR 0 3
6682: ARRAY
6683: PPUSH
6684: CALL_OW 314
6688: NOT
6689: IFFALSE 6727
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6691: LD_VAR 0 1
6695: PUSH
6696: LD_VAR 0 3
6700: ARRAY
6701: PPUSH
6702: LD_VAR 0 2
6706: PPUSH
6707: LD_VAR 0 1
6711: PUSH
6712: LD_VAR 0 3
6716: ARRAY
6717: PPUSH
6718: CALL_OW 74
6722: PPUSH
6723: CALL_OW 115
6727: GO 6670
6729: POP
6730: POP
// end ;
6731: PPOPN 3
6733: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6734: LD_EXP 1
6738: PUSH
6739: LD_INT 2
6741: EQUAL
6742: IFFALSE 6897
6744: GO 6746
6746: DISABLE
6747: LD_INT 0
6749: PPUSH
6750: PPUSH
6751: PPUSH
// begin enable ;
6752: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6753: LD_ADDR_VAR 0 1
6757: PUSH
6758: LD_INT 22
6760: PUSH
6761: LD_INT 8
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PPUSH
6768: CALL_OW 69
6772: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6773: LD_ADDR_VAR 0 2
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 22
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: PPUSH
6806: CALL_OW 69
6810: ST_TO_ADDR
// if filter > 0 then
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 0
6818: GREATER
6819: IFFALSE 6897
// for i = 1 to filter do
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: DOUBLE
6827: LD_INT 1
6829: DEC
6830: ST_TO_ADDR
6831: LD_VAR 0 1
6835: PUSH
6836: FOR_TO
6837: IFFALSE 6895
// if not HasTask ( filter [ i ] ) then
6839: LD_VAR 0 1
6843: PUSH
6844: LD_VAR 0 3
6848: ARRAY
6849: PPUSH
6850: CALL_OW 314
6854: NOT
6855: IFFALSE 6893
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6857: LD_VAR 0 1
6861: PUSH
6862: LD_VAR 0 3
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PPUSH
6873: LD_VAR 0 1
6877: PUSH
6878: LD_VAR 0 3
6882: ARRAY
6883: PPUSH
6884: CALL_OW 74
6888: PPUSH
6889: CALL_OW 115
6893: GO 6836
6895: POP
6896: POP
// end ; end_of_file
6897: PPOPN 3
6899: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6900: LD_INT 0
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
// Your_Side := 3 ;
6907: LD_ADDR_OWVAR 2
6911: PUSH
6912: LD_INT 3
6914: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 3
6920: PPUSH
6921: CALL_OW 343
// ResetFog ;
6925: CALL_OW 335
// uc_side := 6 ;
6929: LD_ADDR_OWVAR 20
6933: PUSH
6934: LD_INT 6
6936: ST_TO_ADDR
// uc_nation := 3 ;
6937: LD_ADDR_OWVAR 21
6941: PUSH
6942: LD_INT 3
6944: ST_TO_ADDR
// hc_gallery := ru ;
6945: LD_ADDR_OWVAR 33
6949: PUSH
6950: LD_STRING ru
6952: ST_TO_ADDR
// hc_face_number := 1 ;
6953: LD_ADDR_OWVAR 34
6957: PUSH
6958: LD_INT 1
6960: ST_TO_ADDR
// hc_name := J. I. Gorki ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING J. I. Gorki
6968: ST_TO_ADDR
// hc_class := 3 ;
6969: LD_ADDR_OWVAR 28
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_sex := sex_male ;
6977: LD_ADDR_OWVAR 27
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// gorki := CreateHuman ;
6985: LD_ADDR_EXP 19
6989: PUSH
6990: CALL_OW 44
6994: ST_TO_ADDR
// uc_side := 3 ;
6995: LD_ADDR_OWVAR 20
6999: PUSH
7000: LD_INT 3
7002: ST_TO_ADDR
// uc_nation := 3 ;
7003: LD_ADDR_OWVAR 21
7007: PUSH
7008: LD_INT 3
7010: ST_TO_ADDR
// hc_importance := 100 ;
7011: LD_ADDR_OWVAR 32
7015: PUSH
7016: LD_INT 100
7018: ST_TO_ADDR
// hc_name :=  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery :=  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7035: LD_INT 1
7037: PPUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_EXP 3
7045: PUSH
7046: LD_INT 3
7048: PLUS
7049: PPUSH
7050: CALL_OW 380
// ru_dow := CreateHuman ;
7054: LD_ADDR_EXP 18
7058: PUSH
7059: CALL_OW 44
7063: ST_TO_ADDR
// hc_importance := 0 ;
7064: LD_ADDR_OWVAR 32
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// for i = 1 to 20 do
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_INT 20
7084: PUSH
7085: FOR_TO
7086: IFFALSE 7132
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_INT 1
7095: PPUSH
7096: LD_INT 4
7098: PPUSH
7099: CALL_OW 12
7103: PPUSH
7104: LD_EXP 3
7108: PPUSH
7109: CALL 9174 0 2
7113: ST_TO_ADDR
// filter := filter ^ un ;
7114: LD_ADDR_VAR 0 4
7118: PUSH
7119: LD_VAR 0 4
7123: PUSH
7124: LD_VAR 0 2
7128: ADD
7129: ST_TO_ADDR
// end ;
7130: GO 7085
7132: POP
7133: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7134: LD_ADDR_VAR 0 5
7138: PUSH
7139: LD_STRING text
7141: PPUSH
7142: LD_INT 9
7144: PUSH
7145: LD_INT 8
7147: PUSH
7148: LD_INT 7
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: PUSH
7156: LD_EXP 2
7160: ARRAY
7161: PPUSH
7162: LD_INT 9
7164: PUSH
7165: LD_INT 8
7167: PUSH
7168: LD_INT 7
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_EXP 2
7180: ARRAY
7181: PPUSH
7182: LD_INT -5
7184: PUSH
7185: LD_EXP 18
7189: PUSH
7190: LD_INT -3
7192: PUSH
7193: LD_INT -2
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: PUSH
7202: LD_VAR 0 4
7206: ADD
7207: PPUSH
7208: LD_INT 1
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 2
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 4
7226: PUSH
7227: LD_INT 1
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 9
7236: PUSH
7237: LD_INT 0
7239: PUSH
7240: LD_INT 6
7242: PUSH
7243: LD_INT 4
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: LD_EXP 2
7258: ARRAY
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: PPUSH
7272: CALL_OW 42
7276: ST_TO_ADDR
// team := team ^ ru_dow ;
7277: LD_ADDR_VAR 0 5
7281: PUSH
7282: LD_VAR 0 5
7286: PUSH
7287: LD_EXP 18
7291: ADD
7292: ST_TO_ADDR
// for i = 1 to team do
7293: LD_ADDR_VAR 0 3
7297: PUSH
7298: DOUBLE
7299: LD_INT 1
7301: DEC
7302: ST_TO_ADDR
7303: LD_VAR 0 5
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7334
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7311: LD_VAR 0 5
7315: PUSH
7316: LD_VAR 0 3
7320: ARRAY
7321: PPUSH
7322: LD_INT 5
7324: PPUSH
7325: LD_INT 0
7327: PPUSH
7328: CALL_OW 49
7332: GO 7308
7334: POP
7335: POP
// end ;
7336: LD_VAR 0 1
7340: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7341: LD_INT 1
7343: PPUSH
7344: CALL_OW 255
7348: PUSH
7349: LD_INT 3
7351: EQUAL
7352: IFFALSE 7462
7354: GO 7356
7356: DISABLE
7357: LD_INT 0
7359: PPUSH
// begin depot_captured := true ;
7360: LD_ADDR_EXP 8
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7368: LD_STRING GType2b
7370: PPUSH
7371: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7375: LD_EXP 18
7379: PPUSH
7380: LD_STRING D-rudow2
7382: PPUSH
7383: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7387: LD_EXP 19
7391: PPUSH
7392: LD_STRING D-gorky2
7394: PPUSH
7395: CALL_OW 94
// while ( true ) do
7399: LD_INT 1
7401: IFFALSE 7462
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7403: LD_INT 13300
7405: PPUSH
7406: LD_INT 19985
7408: PPUSH
7409: CALL_OW 12
7413: PPUSH
7414: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7418: LD_ADDR_VAR 0 1
7422: PUSH
7423: LD_INT 6
7425: PUSH
7426: LD_INT 5
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7433: LD_INT 1
7435: PPUSH
7436: LD_EXP 15
7440: PPUSH
7441: LD_EXP 16
7445: PPUSH
7446: LD_INT 6
7448: PUSH
7449: LD_INT 5
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL 5802 0 4
// end ;
7460: GO 7399
// end ;
7462: PPOPN 1
7464: END
// every 1 1$30 trigger game_type = 2 do
7465: LD_EXP 1
7469: PUSH
7470: LD_INT 2
7472: EQUAL
7473: IFFALSE 7618
7475: GO 7477
7477: DISABLE
// begin enable ;
7478: ENABLE
// if timer <= 45 45$00 then
7479: LD_EXP 6
7483: PUSH
7484: LD_INT 94500
7486: LESSEQUAL
7487: IFFALSE 7522
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7489: LD_ADDR_EXP 15
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: LD_INT 6
7499: PUSH
7500: LD_INT 7
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: PUSH
7508: LD_EXP 2
7512: ARRAY
7513: ST_TO_ADDR
// enemy_typ := 1 ;
7514: LD_ADDR_EXP 16
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7522: LD_EXP 6
7526: PUSH
7527: LD_INT 126000
7529: GREATER
7530: PUSH
7531: LD_EXP 6
7535: PUSH
7536: LD_INT 168000
7538: LESSEQUAL
7539: AND
7540: IFFALSE 7575
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7542: LD_ADDR_EXP 15
7546: PUSH
7547: LD_INT 6
7549: PUSH
7550: LD_INT 8
7552: PUSH
7553: LD_INT 9
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: PUSH
7561: LD_EXP 2
7565: ARRAY
7566: ST_TO_ADDR
// enemy_typ := 2 ;
7567: LD_ADDR_EXP 16
7571: PUSH
7572: LD_INT 2
7574: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7575: LD_EXP 6
7579: PUSH
7580: LD_INT 168000
7582: GREATER
7583: IFFALSE 7618
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7585: LD_ADDR_EXP 15
7589: PUSH
7590: LD_INT 8
7592: PUSH
7593: LD_INT 9
7595: PUSH
7596: LD_INT 10
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_EXP 2
7608: ARRAY
7609: ST_TO_ADDR
// enemy_typ := 3 ;
7610: LD_ADDR_EXP 16
7614: PUSH
7615: LD_INT 3
7617: ST_TO_ADDR
// end ; end ;
7618: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7619: LD_EXP 1
7623: PUSH
7624: LD_INT 2
7626: EQUAL
7627: IFFALSE 7752
7629: GO 7631
7631: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7632: LD_INT 8
7634: PPUSH
7635: LD_EXP 15
7639: PPUSH
7640: LD_INT 1
7642: PPUSH
7643: LD_INT 6
7645: PPUSH
7646: CALL 9823 0 4
// Wait ( 20 20$00 ) ;
7650: LD_INT 42000
7652: PPUSH
7653: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7657: LD_INT 8
7659: PPUSH
7660: LD_EXP 15
7664: PPUSH
7665: LD_INT 2
7667: PPUSH
7668: LD_INT 6
7670: PPUSH
7671: CALL 9823 0 4
// Wait ( 4 4$00 ) ;
7675: LD_INT 8400
7677: PPUSH
7678: CALL_OW 67
// uc_side := 8 ;
7682: LD_ADDR_OWVAR 20
7686: PUSH
7687: LD_INT 8
7689: ST_TO_ADDR
// uc_nation := 2 ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_INT 2
7697: ST_TO_ADDR
// hc_class := 1 ;
7698: LD_ADDR_OWVAR 28
7702: PUSH
7703: LD_INT 1
7705: ST_TO_ADDR
// hc_gallery := sandar ;
7706: LD_ADDR_OWVAR 33
7710: PUSH
7711: LD_STRING sandar
7713: ST_TO_ADDR
// hc_face_number := 4 ;
7714: LD_ADDR_OWVAR 34
7718: PUSH
7719: LD_INT 4
7721: ST_TO_ADDR
// hc_sex := sex_male ;
7722: LD_ADDR_OWVAR 27
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// farmer := CreateHuman ;
7730: LD_ADDR_EXP 20
7734: PUSH
7735: CALL_OW 44
7739: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7740: LD_EXP 20
7744: PPUSH
7745: LD_STRING D-farmer
7747: PPUSH
7748: CALL_OW 94
// end ;
7752: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7753: LD_EXP 1
7757: PUSH
7758: LD_INT 1
7760: EQUAL
7761: IFFALSE 7916
7763: GO 7765
7765: DISABLE
7766: LD_INT 0
7768: PPUSH
7769: PPUSH
7770: PPUSH
// begin enable ;
7771: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7772: LD_ADDR_VAR 0 1
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: LD_INT 22
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 6
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7810: LD_ADDR_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 22
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 22
7830: PUSH
7831: LD_INT 2
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 69
7847: ST_TO_ADDR
// if filter > 0 then
7848: LD_VAR 0 1
7852: PUSH
7853: LD_INT 0
7855: GREATER
7856: IFFALSE 7916
// for i = 1 to filter do
7858: LD_ADDR_VAR 0 3
7862: PUSH
7863: DOUBLE
7864: LD_INT 1
7866: DEC
7867: ST_TO_ADDR
7868: LD_VAR 0 1
7872: PUSH
7873: FOR_TO
7874: IFFALSE 7914
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7876: LD_VAR 0 1
7880: PUSH
7881: LD_VAR 0 3
7885: ARRAY
7886: PPUSH
7887: LD_VAR 0 2
7891: PPUSH
7892: LD_VAR 0 1
7896: PUSH
7897: LD_VAR 0 3
7901: ARRAY
7902: PPUSH
7903: CALL_OW 74
7907: PPUSH
7908: CALL_OW 115
7912: GO 7873
7914: POP
7915: POP
// end ;
7916: PPOPN 3
7918: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
7919: LD_INT 0
7921: PPUSH
7922: PPUSH
7923: PPUSH
7924: PPUSH
7925: PPUSH
7926: PPUSH
7927: PPUSH
7928: PPUSH
// Randomize ;
7929: CALL_OW 10
// uc_side := side ;
7933: LD_ADDR_OWVAR 20
7937: PUSH
7938: LD_VAR 0 1
7942: ST_TO_ADDR
// uc_nation := nation_russian ;
7943: LD_ADDR_OWVAR 21
7947: PUSH
7948: LD_INT 3
7950: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
7951: LD_ADDR_VAR 0 10
7955: PUSH
7956: LD_INT 22
7958: PUSH
7959: LD_INT 24
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
7966: LD_ADDR_VAR 0 11
7970: PUSH
7971: LD_INT 42
7973: PUSH
7974: LD_INT 43
7976: PUSH
7977: LD_INT 44
7979: PUSH
7980: LD_INT 46
7982: PUSH
7983: LD_INT 45
7985: PUSH
7986: LD_INT 47
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: ST_TO_ADDR
// case typ of 1 :
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 1
8004: DOUBLE
8005: EQUAL
8006: IFTRUE 8010
8008: GO 8204
8010: POP
// begin for i = 1 to num do
8011: LD_ADDR_VAR 0 6
8015: PUSH
8016: DOUBLE
8017: LD_INT 1
8019: DEC
8020: ST_TO_ADDR
8021: LD_VAR 0 2
8025: PUSH
8026: FOR_TO
8027: IFFALSE 8200
// begin vc_chassis := chassis [ 1 ] ;
8029: LD_ADDR_OWVAR 37
8033: PUSH
8034: LD_VAR 0 10
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: ST_TO_ADDR
// vc_engine := engine_combustion ;
8043: LD_ADDR_OWVAR 39
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// vc_control := control_manual ;
8051: LD_ADDR_OWVAR 38
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8059: LD_ADDR_OWVAR 40
8063: PUSH
8064: LD_VAR 0 11
8068: PUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 3
8074: PPUSH
8075: CALL_OW 12
8079: ARRAY
8080: ST_TO_ADDR
// veh := CreateVehicle ;
8081: LD_ADDR_VAR 0 9
8085: PUSH
8086: CALL_OW 45
8090: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8091: LD_ADDR_VAR 0 12
8095: PUSH
8096: LD_INT 1
8098: PPUSH
8099: LD_INT 2
8101: PPUSH
8102: CALL_OW 12
8106: ST_TO_ADDR
// if f = 1 then
8107: LD_VAR 0 12
8111: PUSH
8112: LD_INT 1
8114: EQUAL
8115: IFFALSE 8131
// SetDir ( veh , 3 ) else
8117: LD_VAR 0 9
8121: PPUSH
8122: LD_INT 3
8124: PPUSH
8125: CALL_OW 233
8129: GO 8143
// SetDir ( veh , 1 ) ;
8131: LD_VAR 0 9
8135: PPUSH
8136: LD_INT 1
8138: PPUSH
8139: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8143: LD_VAR 0 9
8147: PPUSH
8148: LD_VAR 0 4
8152: PUSH
8153: LD_VAR 0 12
8157: ARRAY
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8166: LD_ADDR_VAR 0 7
8170: PUSH
8171: LD_INT 1
8173: PPUSH
8174: LD_EXP 4
8178: PPUSH
8179: CALL 9174 0 2
8183: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8184: LD_VAR 0 7
8188: PPUSH
8189: LD_VAR 0 9
8193: PPUSH
8194: CALL_OW 52
// end ;
8198: GO 8026
8200: POP
8201: POP
// end ; 2 :
8202: GO 8746
8204: LD_INT 2
8206: DOUBLE
8207: EQUAL
8208: IFTRUE 8212
8210: GO 8509
8212: POP
// begin for i = 1 to num do
8213: LD_ADDR_VAR 0 6
8217: PUSH
8218: DOUBLE
8219: LD_INT 1
8221: DEC
8222: ST_TO_ADDR
8223: LD_VAR 0 2
8227: PUSH
8228: FOR_TO
8229: IFFALSE 8444
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8231: LD_ADDR_OWVAR 37
8235: PUSH
8236: LD_VAR 0 10
8240: PUSH
8241: LD_INT 1
8243: PPUSH
8244: LD_INT 2
8246: PPUSH
8247: CALL_OW 12
8251: ARRAY
8252: ST_TO_ADDR
// vc_engine := engine_combustion ;
8253: LD_ADDR_OWVAR 39
8257: PUSH
8258: LD_INT 1
8260: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8261: LD_ADDR_OWVAR 38
8265: PUSH
8266: LD_INT 1
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 1
8278: PPUSH
8279: LD_INT 2
8281: PPUSH
8282: CALL_OW 12
8286: ARRAY
8287: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8288: LD_ADDR_OWVAR 40
8292: PUSH
8293: LD_VAR 0 11
8297: PUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_INT 3
8303: PPUSH
8304: CALL_OW 12
8308: ARRAY
8309: ST_TO_ADDR
// veh := CreateVehicle ;
8310: LD_ADDR_VAR 0 9
8314: PUSH
8315: CALL_OW 45
8319: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8320: LD_ADDR_VAR 0 12
8324: PUSH
8325: LD_INT 1
8327: PPUSH
8328: LD_INT 2
8330: PPUSH
8331: CALL_OW 12
8335: ST_TO_ADDR
// if f = 1 then
8336: LD_VAR 0 12
8340: PUSH
8341: LD_INT 1
8343: EQUAL
8344: IFFALSE 8360
// SetDir ( veh , 3 ) else
8346: LD_VAR 0 9
8350: PPUSH
8351: LD_INT 3
8353: PPUSH
8354: CALL_OW 233
8358: GO 8372
// SetDir ( veh , 1 ) ;
8360: LD_VAR 0 9
8364: PPUSH
8365: LD_INT 1
8367: PPUSH
8368: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8372: LD_VAR 0 9
8376: PPUSH
8377: LD_VAR 0 4
8381: PUSH
8382: LD_VAR 0 12
8386: ARRAY
8387: PPUSH
8388: LD_INT 0
8390: PPUSH
8391: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8395: LD_VAR 0 9
8399: PPUSH
8400: CALL_OW 263
8404: PUSH
8405: LD_INT 1
8407: EQUAL
8408: IFFALSE 8442
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8410: LD_ADDR_VAR 0 7
8414: PUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_EXP 4
8422: PPUSH
8423: CALL 9174 0 2
8427: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8428: LD_VAR 0 7
8432: PPUSH
8433: LD_VAR 0 9
8437: PPUSH
8438: CALL_OW 52
// end ; end ;
8442: GO 8228
8444: POP
8445: POP
// for i = 1 to 2 do
8446: LD_ADDR_VAR 0 6
8450: PUSH
8451: DOUBLE
8452: LD_INT 1
8454: DEC
8455: ST_TO_ADDR
8456: LD_INT 2
8458: PUSH
8459: FOR_TO
8460: IFFALSE 8505
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8462: LD_ADDR_VAR 0 7
8466: PUSH
8467: LD_INT 9
8469: PPUSH
8470: LD_EXP 4
8474: PPUSH
8475: CALL 9174 0 2
8479: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8480: LD_VAR 0 7
8484: PPUSH
8485: LD_VAR 0 4
8489: PUSH
8490: LD_VAR 0 12
8494: ARRAY
8495: PPUSH
8496: LD_INT 0
8498: PPUSH
8499: CALL_OW 49
// end ;
8503: GO 8459
8505: POP
8506: POP
// end ; 3 :
8507: GO 8746
8509: LD_INT 3
8511: DOUBLE
8512: EQUAL
8513: IFTRUE 8517
8515: GO 8745
8517: POP
// begin for i = 1 to num do
8518: LD_ADDR_VAR 0 6
8522: PUSH
8523: DOUBLE
8524: LD_INT 1
8526: DEC
8527: ST_TO_ADDR
8528: LD_VAR 0 2
8532: PUSH
8533: FOR_TO
8534: IFFALSE 8741
// begin vc_chassis := chassis [ 2 ] ;
8536: LD_ADDR_OWVAR 37
8540: PUSH
8541: LD_VAR 0 10
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: ST_TO_ADDR
// vc_engine := engine_combustion ;
8550: LD_ADDR_OWVAR 39
8554: PUSH
8555: LD_INT 1
8557: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8558: LD_ADDR_OWVAR 38
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: LD_INT 1
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PUSH
8573: LD_INT 1
8575: PPUSH
8576: LD_INT 2
8578: PPUSH
8579: CALL_OW 12
8583: ARRAY
8584: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8585: LD_ADDR_OWVAR 40
8589: PUSH
8590: LD_VAR 0 11
8594: PUSH
8595: LD_INT 3
8597: PPUSH
8598: LD_INT 6
8600: PPUSH
8601: CALL_OW 12
8605: ARRAY
8606: ST_TO_ADDR
// veh := CreateVehicle ;
8607: LD_ADDR_VAR 0 9
8611: PUSH
8612: CALL_OW 45
8616: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8617: LD_ADDR_VAR 0 12
8621: PUSH
8622: LD_INT 1
8624: PPUSH
8625: LD_INT 2
8627: PPUSH
8628: CALL_OW 12
8632: ST_TO_ADDR
// if f = 1 then
8633: LD_VAR 0 12
8637: PUSH
8638: LD_INT 1
8640: EQUAL
8641: IFFALSE 8657
// SetDir ( veh , 3 ) else
8643: LD_VAR 0 9
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: CALL_OW 233
8655: GO 8669
// SetDir ( veh , 1 ) ;
8657: LD_VAR 0 9
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8669: LD_VAR 0 9
8673: PPUSH
8674: LD_VAR 0 4
8678: PUSH
8679: LD_VAR 0 12
8683: ARRAY
8684: PPUSH
8685: LD_INT 0
8687: PPUSH
8688: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8692: LD_VAR 0 9
8696: PPUSH
8697: CALL_OW 263
8701: PUSH
8702: LD_INT 1
8704: EQUAL
8705: IFFALSE 8739
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8707: LD_ADDR_VAR 0 7
8711: PUSH
8712: LD_INT 1
8714: PPUSH
8715: LD_EXP 4
8719: PPUSH
8720: CALL 9174 0 2
8724: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8725: LD_VAR 0 7
8729: PPUSH
8730: LD_VAR 0 9
8734: PPUSH
8735: CALL_OW 52
// end ; end ;
8739: GO 8533
8741: POP
8742: POP
// end ; end ;
8743: GO 8746
8745: POP
// end ; end_of_file
8746: LD_VAR 0 5
8750: RET
// every 0 0$01 do
8751: GO 8753
8753: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8754: LD_INT 6
8756: PUSH
8757: LD_EXP 2
8761: PLUS
8762: PPUSH
8763: LD_INT 5
8765: PPUSH
8766: LD_INT 4
8768: PPUSH
8769: LD_INT 8
8771: PPUSH
8772: CALL 8777 0 4
8776: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8777: LD_INT 0
8779: PPUSH
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
// uc_nation = nation_nature ;
8784: LD_ADDR_OWVAR 21
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// uc_side = 0 ;
8792: LD_ADDR_OWVAR 20
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// l = 0 ;
8800: LD_ADDR_VAR 0 6
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8808: LD_ADDR_OWVAR 24
8812: PUSH
8813: LD_INT 0
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: CALL_OW 12
8823: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8824: LD_ADDR_OWVAR 35
8828: PUSH
8829: LD_INT 5
8831: NEG
8832: PPUSH
8833: LD_INT 5
8835: PPUSH
8836: CALL_OW 12
8840: ST_TO_ADDR
// hc_gallery =  ;
8841: LD_ADDR_OWVAR 33
8845: PUSH
8846: LD_STRING 
8848: ST_TO_ADDR
// hc_class = class_apeman ;
8849: LD_ADDR_OWVAR 28
8853: PUSH
8854: LD_INT 12
8856: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8857: LD_ADDR_OWVAR 29
8861: PUSH
8862: LD_INT 11
8864: PPUSH
8865: LD_INT 13
8867: PPUSH
8868: CALL_OW 12
8872: PUSH
8873: LD_INT 10
8875: PPUSH
8876: LD_INT 11
8878: PPUSH
8879: CALL_OW 12
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: ST_TO_ADDR
// hc_sex = sex_male ;
8888: LD_ADDR_OWVAR 27
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8896: LD_ADDR_OWVAR 31
8900: PUSH
8901: LD_INT 0
8903: PPUSH
8904: LD_INT 2
8906: PPUSH
8907: CALL_OW 12
8911: PUSH
8912: LD_INT 0
8914: PUSH
8915: LD_INT 0
8917: PUSH
8918: LD_INT 0
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: ST_TO_ADDR
// apeman = CreateHuman ;
8927: LD_ADDR_VAR 0 7
8931: PUSH
8932: CALL_OW 44
8936: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8937: LD_VAR 0 7
8941: PPUSH
8942: LD_VAR 0 4
8946: PPUSH
8947: LD_INT 0
8949: PPUSH
8950: CALL_OW 49
// l = l + 1 ;
8954: LD_ADDR_VAR 0 6
8958: PUSH
8959: LD_VAR 0 6
8963: PUSH
8964: LD_INT 1
8966: PLUS
8967: ST_TO_ADDR
// end until l = num1 ;
8968: LD_VAR 0 6
8972: PUSH
8973: LD_VAR 0 1
8977: EQUAL
8978: IFFALSE 8808
// l = 0 ;
8980: LD_ADDR_VAR 0 6
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8988: LD_ADDR_OWVAR 35
8992: PUSH
8993: LD_INT 0
8995: PPUSH
8996: LD_INT 25
8998: PPUSH
8999: CALL_OW 12
9003: ST_TO_ADDR
// hc_class = class_tiger ;
9004: LD_ADDR_OWVAR 28
9008: PUSH
9009: LD_INT 14
9011: ST_TO_ADDR
// hc_sex = sex_male ;
9012: LD_ADDR_OWVAR 27
9016: PUSH
9017: LD_INT 1
9019: ST_TO_ADDR
// hc_gallery = sandnature ;
9020: LD_ADDR_OWVAR 33
9024: PUSH
9025: LD_STRING sandnature
9027: ST_TO_ADDR
// hc_face_number = 3 ;
9028: LD_ADDR_OWVAR 34
9032: PUSH
9033: LD_INT 3
9035: ST_TO_ADDR
// tiger = CreateHuman ;
9036: LD_ADDR_VAR 0 8
9040: PUSH
9041: CALL_OW 44
9045: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9046: LD_VAR 0 8
9050: PPUSH
9051: LD_VAR 0 4
9055: PPUSH
9056: LD_INT 0
9058: PPUSH
9059: CALL_OW 49
// l = l + 1 ;
9063: LD_ADDR_VAR 0 6
9067: PUSH
9068: LD_VAR 0 6
9072: PUSH
9073: LD_INT 1
9075: PLUS
9076: ST_TO_ADDR
// end until l = num2 ;
9077: LD_VAR 0 6
9081: PUSH
9082: LD_VAR 0 2
9086: EQUAL
9087: IFFALSE 8988
// l = 0 ;
9089: LD_ADDR_VAR 0 6
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9097: LD_ADDR_OWVAR 28
9101: PUSH
9102: LD_INT 18
9104: ST_TO_ADDR
// hc_gallery = sandnature ;
9105: LD_ADDR_OWVAR 33
9109: PUSH
9110: LD_STRING sandnature
9112: ST_TO_ADDR
// hc_face_number = 1 ;
9113: LD_ADDR_OWVAR 34
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// bird = CreateHuman ;
9121: LD_ADDR_VAR 0 9
9125: PUSH
9126: CALL_OW 44
9130: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9131: LD_VAR 0 9
9135: PPUSH
9136: LD_INT 0
9138: PPUSH
9139: CALL_OW 51
// l = l + 1 ;
9143: LD_ADDR_VAR 0 6
9147: PUSH
9148: LD_VAR 0 6
9152: PUSH
9153: LD_INT 1
9155: PLUS
9156: ST_TO_ADDR
// end until l = num3 ;
9157: LD_VAR 0 6
9161: PUSH
9162: LD_VAR 0 3
9166: EQUAL
9167: IFFALSE 9097
// end ;
9169: LD_VAR 0 5
9173: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hc_class := clas ;
9182: LD_ADDR_OWVAR 28
9186: PUSH
9187: LD_VAR 0 1
9191: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9192: LD_ADDR_VAR 0 4
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: LD_INT 1
9204: NEG
9205: PPUSH
9206: LD_INT 1
9208: PPUSH
9209: CALL_OW 12
9213: PLUS
9214: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9215: LD_ADDR_VAR 0 5
9219: PUSH
9220: LD_VAR 0 2
9224: PUSH
9225: LD_INT 1
9227: NEG
9228: PPUSH
9229: LD_INT 1
9231: PPUSH
9232: CALL_OW 12
9236: PLUS
9237: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9238: LD_ADDR_VAR 0 6
9242: PUSH
9243: LD_VAR 0 2
9247: PUSH
9248: LD_INT 1
9250: NEG
9251: PPUSH
9252: LD_INT 1
9254: PPUSH
9255: CALL_OW 12
9259: PLUS
9260: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 2
9270: PUSH
9271: LD_INT 1
9273: NEG
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 12
9282: PLUS
9283: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9284: LD_VAR 0 1
9288: PUSH
9289: LD_INT 1
9291: EQUAL
9292: PUSH
9293: LD_VAR 0 1
9297: PUSH
9298: LD_INT 9
9300: EQUAL
9301: OR
9302: PUSH
9303: LD_VAR 0 1
9307: PUSH
9308: LD_INT 5
9310: EQUAL
9311: OR
9312: PUSH
9313: LD_VAR 0 1
9317: PUSH
9318: LD_INT 8
9320: EQUAL
9321: OR
9322: IFFALSE 9347
// bonus := [ 2 , 0 , 0 , 0 ] ;
9324: LD_ADDR_VAR 0 8
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: LD_INT 0
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: LD_INT 0
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: ST_TO_ADDR
// if clas = 2 then
9347: LD_VAR 0 1
9351: PUSH
9352: LD_INT 2
9354: EQUAL
9355: IFFALSE 9380
// bonus := [ 0 , 2 , 0 , 0 ] ;
9357: LD_ADDR_VAR 0 8
9361: PUSH
9362: LD_INT 0
9364: PUSH
9365: LD_INT 2
9367: PUSH
9368: LD_INT 0
9370: PUSH
9371: LD_INT 0
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: ST_TO_ADDR
// if clas = 3 then
9380: LD_VAR 0 1
9384: PUSH
9385: LD_INT 3
9387: EQUAL
9388: IFFALSE 9413
// bonus := [ 0 , 0 , 2 , 0 ] ;
9390: LD_ADDR_VAR 0 8
9394: PUSH
9395: LD_INT 0
9397: PUSH
9398: LD_INT 0
9400: PUSH
9401: LD_INT 2
9403: PUSH
9404: LD_INT 0
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: ST_TO_ADDR
// if clas = 4 then
9413: LD_VAR 0 1
9417: PUSH
9418: LD_INT 4
9420: EQUAL
9421: IFFALSE 9446
// bonus := [ 0 , 0 , 0 , 2 ] ;
9423: LD_ADDR_VAR 0 8
9427: PUSH
9428: LD_INT 0
9430: PUSH
9431: LD_INT 0
9433: PUSH
9434: LD_INT 0
9436: PUSH
9437: LD_INT 2
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 4
9453: GREATER
9454: PUSH
9455: LD_VAR 0 1
9459: PUSH
9460: LD_INT 9
9462: NONEQUAL
9463: AND
9464: PUSH
9465: LD_VAR 0 1
9469: PUSH
9470: LD_INT 5
9472: NONEQUAL
9473: AND
9474: PUSH
9475: LD_VAR 0 1
9479: PUSH
9480: LD_INT 8
9482: NONEQUAL
9483: AND
9484: IFFALSE 9509
// bonus := [ 0 , 0 , 0 , 0 ] ;
9486: LD_ADDR_VAR 0 8
9490: PUSH
9491: LD_INT 0
9493: PUSH
9494: LD_INT 0
9496: PUSH
9497: LD_INT 0
9499: PUSH
9500: LD_INT 0
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9509: LD_ADDR_OWVAR 30
9513: PUSH
9514: LD_INT 0
9516: PPUSH
9517: LD_INT 2
9519: PPUSH
9520: CALL_OW 12
9524: PUSH
9525: LD_INT 0
9527: PPUSH
9528: LD_INT 2
9530: PPUSH
9531: CALL_OW 12
9535: PUSH
9536: LD_INT 0
9538: PPUSH
9539: LD_INT 2
9541: PPUSH
9542: CALL_OW 12
9546: PUSH
9547: LD_INT 0
9549: PPUSH
9550: LD_INT 2
9552: PPUSH
9553: CALL_OW 12
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9564: LD_ADDR_OWVAR 31
9568: PUSH
9569: LD_VAR 0 4
9573: PUSH
9574: LD_VAR 0 8
9578: PUSH
9579: LD_INT 1
9581: ARRAY
9582: PLUS
9583: PUSH
9584: LD_VAR 0 5
9588: PUSH
9589: LD_VAR 0 8
9593: PUSH
9594: LD_INT 2
9596: ARRAY
9597: PLUS
9598: PUSH
9599: LD_VAR 0 6
9603: PUSH
9604: LD_VAR 0 8
9608: PUSH
9609: LD_INT 3
9611: ARRAY
9612: PLUS
9613: PUSH
9614: LD_VAR 0 7
9618: PUSH
9619: LD_VAR 0 8
9623: PUSH
9624: LD_INT 4
9626: ARRAY
9627: PLUS
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9635: LD_ADDR_OWVAR 27
9639: PUSH
9640: LD_INT 1
9642: PPUSH
9643: LD_INT 2
9645: PPUSH
9646: CALL_OW 12
9650: ST_TO_ADDR
// hc_gallery :=  ;
9651: LD_ADDR_OWVAR 33
9655: PUSH
9656: LD_STRING 
9658: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9659: LD_ADDR_OWVAR 29
9663: PUSH
9664: LD_INT 8
9666: PPUSH
9667: LD_INT 12
9669: PPUSH
9670: CALL_OW 12
9674: PUSH
9675: LD_INT 9
9677: PPUSH
9678: LD_INT 11
9680: PPUSH
9681: CALL_OW 12
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: ST_TO_ADDR
// hc_name :=  ;
9690: LD_ADDR_OWVAR 26
9694: PUSH
9695: LD_STRING 
9697: ST_TO_ADDR
// result := CreateHuman ;
9698: LD_ADDR_VAR 0 3
9702: PUSH
9703: CALL_OW 44
9707: ST_TO_ADDR
// end ;
9708: LD_VAR 0 3
9712: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9713: LD_INT 0
9715: PPUSH
9716: PPUSH
// vc_chassis := chassis ;
9717: LD_ADDR_OWVAR 37
9721: PUSH
9722: LD_VAR 0 1
9726: ST_TO_ADDR
// vc_engine := engine ;
9727: LD_ADDR_OWVAR 39
9731: PUSH
9732: LD_VAR 0 2
9736: ST_TO_ADDR
// vc_weapon := weapon ;
9737: LD_ADDR_OWVAR 40
9741: PUSH
9742: LD_VAR 0 3
9746: ST_TO_ADDR
// vc_control := control_manual ;
9747: LD_ADDR_OWVAR 38
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// veh := CreateVehicle ;
9755: LD_ADDR_VAR 0 8
9759: PUSH
9760: CALL_OW 45
9764: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9765: LD_VAR 0 8
9769: PPUSH
9770: LD_VAR 0 5
9774: PPUSH
9775: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9779: LD_VAR 0 8
9783: PPUSH
9784: LD_VAR 0 4
9788: PPUSH
9789: LD_INT 0
9791: PPUSH
9792: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9796: LD_INT 3
9798: PPUSH
9799: LD_VAR 0 6
9803: PPUSH
9804: CALL 9174 0 2
9808: PPUSH
9809: LD_VAR 0 8
9813: PPUSH
9814: CALL_OW 52
// end ;
9818: LD_VAR 0 7
9822: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
// uc_side := side ;
9832: LD_ADDR_OWVAR 20
9836: PUSH
9837: LD_VAR 0 1
9841: ST_TO_ADDR
// uc_nation := nation_arabian ;
9842: LD_ADDR_OWVAR 21
9846: PUSH
9847: LD_INT 2
9849: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9850: LD_ADDR_VAR 0 10
9854: PUSH
9855: LD_INT 14
9857: PUSH
9858: EMPTY
9859: LIST
9860: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9861: LD_ADDR_VAR 0 11
9865: PUSH
9866: LD_INT 24
9868: PUSH
9869: LD_INT 25
9871: PUSH
9872: LD_INT 27
9874: PUSH
9875: LD_INT 28
9877: PUSH
9878: LD_INT 29
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: ST_TO_ADDR
// case typ of 1 :
9888: LD_VAR 0 3
9892: PUSH
9893: LD_INT 1
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9901
9899: GO 10073
9901: POP
// begin for i = 1 to num do
9902: LD_ADDR_VAR 0 6
9906: PUSH
9907: DOUBLE
9908: LD_INT 1
9910: DEC
9911: ST_TO_ADDR
9912: LD_VAR 0 2
9916: PUSH
9917: FOR_TO
9918: IFFALSE 10069
// begin vc_chassis := chassis [ 1 ] ;
9920: LD_ADDR_OWVAR 37
9924: PUSH
9925: LD_VAR 0 10
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: ST_TO_ADDR
// vc_engine := engine_combustion ;
9934: LD_ADDR_OWVAR 39
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// vc_control := control_manual ;
9942: LD_ADDR_OWVAR 38
9946: PUSH
9947: LD_INT 1
9949: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
9950: LD_ADDR_OWVAR 40
9954: PUSH
9955: LD_VAR 0 11
9959: PUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_INT 3
9965: PPUSH
9966: CALL_OW 12
9970: ARRAY
9971: ST_TO_ADDR
// veh := CreateVehicle ;
9972: LD_ADDR_VAR 0 9
9976: PUSH
9977: CALL_OW 45
9981: ST_TO_ADDR
// if area = north_spawn then
9982: LD_VAR 0 4
9986: PUSH
9987: LD_INT 6
9989: EQUAL
9990: IFFALSE 10006
// SetDir ( veh , 3 ) else
9992: LD_VAR 0 9
9996: PPUSH
9997: LD_INT 3
9999: PPUSH
10000: CALL_OW 233
10004: GO 10018
// SetDir ( veh , 1 ) ;
10006: LD_VAR 0 9
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10018: LD_VAR 0 9
10022: PPUSH
10023: LD_VAR 0 4
10027: PPUSH
10028: LD_INT 0
10030: PPUSH
10031: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10035: LD_ADDR_VAR 0 7
10039: PUSH
10040: LD_INT 1
10042: PPUSH
10043: LD_EXP 4
10047: PPUSH
10048: CALL 9174 0 2
10052: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10053: LD_VAR 0 7
10057: PPUSH
10058: LD_VAR 0 9
10062: PPUSH
10063: CALL_OW 52
// end ;
10067: GO 9917
10069: POP
10070: POP
// end ; 2 :
10071: GO 10332
10073: LD_INT 2
10075: DOUBLE
10076: EQUAL
10077: IFTRUE 10081
10079: GO 10331
10081: POP
// begin for i = 1 to num do
10082: LD_ADDR_VAR 0 6
10086: PUSH
10087: DOUBLE
10088: LD_INT 1
10090: DEC
10091: ST_TO_ADDR
10092: LD_VAR 0 2
10096: PUSH
10097: FOR_TO
10098: IFFALSE 10249
// begin vc_chassis := chassis [ 1 ] ;
10100: LD_ADDR_OWVAR 37
10104: PUSH
10105: LD_VAR 0 10
10109: PUSH
10110: LD_INT 1
10112: ARRAY
10113: ST_TO_ADDR
// vc_engine := engine_combustion ;
10114: LD_ADDR_OWVAR 39
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// vc_control := control_manual ;
10122: LD_ADDR_OWVAR 38
10126: PUSH
10127: LD_INT 1
10129: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10130: LD_ADDR_OWVAR 40
10134: PUSH
10135: LD_VAR 0 11
10139: PUSH
10140: LD_INT 3
10142: PPUSH
10143: LD_INT 5
10145: PPUSH
10146: CALL_OW 12
10150: ARRAY
10151: ST_TO_ADDR
// veh := CreateVehicle ;
10152: LD_ADDR_VAR 0 9
10156: PUSH
10157: CALL_OW 45
10161: ST_TO_ADDR
// if area = north_spawn then
10162: LD_VAR 0 4
10166: PUSH
10167: LD_INT 6
10169: EQUAL
10170: IFFALSE 10186
// SetDir ( veh , 3 ) else
10172: LD_VAR 0 9
10176: PPUSH
10177: LD_INT 3
10179: PPUSH
10180: CALL_OW 233
10184: GO 10198
// SetDir ( veh , 1 ) ;
10186: LD_VAR 0 9
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10198: LD_VAR 0 9
10202: PPUSH
10203: LD_VAR 0 4
10207: PPUSH
10208: LD_INT 0
10210: PPUSH
10211: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10215: LD_ADDR_VAR 0 7
10219: PUSH
10220: LD_INT 1
10222: PPUSH
10223: LD_EXP 4
10227: PPUSH
10228: CALL 9174 0 2
10232: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10233: LD_VAR 0 7
10237: PPUSH
10238: LD_VAR 0 9
10242: PPUSH
10243: CALL_OW 52
// end ;
10247: GO 10097
10249: POP
10250: POP
// for i = 1 to 4 do
10251: LD_ADDR_VAR 0 6
10255: PUSH
10256: DOUBLE
10257: LD_INT 1
10259: DEC
10260: ST_TO_ADDR
10261: LD_INT 4
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10327
// begin uc_nation := 0 ;
10267: LD_ADDR_OWVAR 21
10271: PUSH
10272: LD_INT 0
10274: ST_TO_ADDR
// hc_class := 17 ;
10275: LD_ADDR_OWVAR 28
10279: PUSH
10280: LD_INT 17
10282: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10283: LD_ADDR_OWVAR 29
10287: PUSH
10288: LD_INT 11
10290: PUSH
10291: LD_INT 13
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: ST_TO_ADDR
// un := CreateHuman ;
10298: LD_ADDR_VAR 0 7
10302: PUSH
10303: CALL_OW 44
10307: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10308: LD_VAR 0 7
10312: PPUSH
10313: LD_VAR 0 4
10317: PPUSH
10318: LD_INT 0
10320: PPUSH
10321: CALL_OW 49
// end ;
10325: GO 10264
10327: POP
10328: POP
// end ; end ;
10329: GO 10332
10331: POP
// end ;
10332: LD_VAR 0 5
10336: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
10341: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10342: LD_ADDR_VAR 0 5
10346: PUSH
10347: LD_INT 22
10349: PUSH
10350: LD_VAR 0 3
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PPUSH
10364: LD_VAR 0 1
10368: PPUSH
10369: LD_VAR 0 2
10373: PPUSH
10374: CALL_OW 73
10378: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10379: LD_ADDR_VAR 0 6
10383: PUSH
10384: LD_VAR 0 5
10388: PPUSH
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_VAR 0 2
10398: PPUSH
10399: CALL_OW 297
10403: ST_TO_ADDR
// result := dist ;
10404: LD_ADDR_VAR 0 4
10408: PUSH
10409: LD_VAR 0 6
10413: ST_TO_ADDR
// end ; end_of_file
10414: LD_VAR 0 4
10418: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10419: LD_VAR 0 1
10423: PUSH
10424: LD_INT 1
10426: EQUAL
10427: IFFALSE 10436
// YouLost ( jota-lose ) ;
10429: LD_STRING jota-lose
10431: PPUSH
10432: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10436: LD_EXP 1
10440: PUSH
10441: LD_INT 2
10443: EQUAL
10444: PUSH
10445: LD_EXP 8
10449: PUSH
10450: LD_INT 0
10452: EQUAL
10453: AND
10454: IFFALSE 10769
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 255
10465: PUSH
10466: LD_INT 1
10468: EQUAL
10469: PUSH
10470: LD_VAR 0 1
10474: PUSH
10475: LD_INT 11
10477: PPUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 3
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 70
10492: PUSH
10493: LD_INT 2
10495: PUSH
10496: LD_INT 30
10498: PUSH
10499: LD_INT 6
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 30
10508: PUSH
10509: LD_INT 10
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: LD_INT 30
10518: PUSH
10519: LD_INT 7
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 30
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: DIFF
10560: IN
10561: AND
10562: IFFALSE 10648
// begin ai_build := ai_build ^ GetBType ( un ) ;
10564: LD_ADDR_EXP 10
10568: PUSH
10569: LD_EXP 10
10573: PUSH
10574: LD_VAR 0 1
10578: PPUSH
10579: CALL_OW 266
10583: ADD
10584: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10585: LD_ADDR_EXP 10
10589: PUSH
10590: LD_EXP 10
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 250
10604: ADD
10605: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10606: LD_ADDR_EXP 10
10610: PUSH
10611: LD_EXP 10
10615: PUSH
10616: LD_VAR 0 1
10620: PPUSH
10621: CALL_OW 251
10625: ADD
10626: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10627: LD_ADDR_EXP 10
10631: PUSH
10632: LD_EXP 10
10636: PUSH
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL_OW 254
10646: ADD
10647: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10648: LD_VAR 0 1
10652: PPUSH
10653: CALL_OW 255
10657: PUSH
10658: LD_INT 1
10660: EQUAL
10661: PUSH
10662: LD_VAR 0 1
10666: PUSH
10667: LD_INT 21
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 69
10681: IN
10682: AND
10683: IFFALSE 10769
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10685: LD_ADDR_EXP 11
10689: PUSH
10690: LD_EXP 11
10694: PUSH
10695: LD_VAR 0 1
10699: PPUSH
10700: CALL_OW 265
10704: ADD
10705: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10706: LD_ADDR_EXP 11
10710: PUSH
10711: LD_EXP 11
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: CALL_OW 262
10725: ADD
10726: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10727: LD_ADDR_EXP 11
10731: PUSH
10732: LD_EXP 11
10736: PUSH
10737: LD_VAR 0 1
10741: PPUSH
10742: CALL_OW 263
10746: ADD
10747: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10748: LD_ADDR_EXP 11
10752: PUSH
10753: LD_EXP 11
10757: PUSH
10758: LD_VAR 0 1
10762: PPUSH
10763: CALL_OW 264
10767: ADD
10768: ST_TO_ADDR
// end ; end ; end ;
10769: PPOPN 1
10771: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10772: LD_EXP 1
10776: PUSH
10777: LD_INT 1
10779: EQUAL
10780: PUSH
10781: LD_INT 22
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 21
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: PUSH
10810: LD_INT 0
10812: EQUAL
10813: AND
10814: IFFALSE 10826
10816: GO 10818
10818: DISABLE
// YouLost ( peo-lose ) ;
10819: LD_STRING peo-lose
10821: PPUSH
10822: CALL_OW 104
10826: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10827: LD_EXP 1
10831: PUSH
10832: LD_INT 2
10834: EQUAL
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_INT 3
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 21
10848: PUSH
10849: LD_INT 1
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PPUSH
10860: CALL_OW 69
10864: PUSH
10865: LD_INT 0
10867: EQUAL
10868: AND
10869: IFFALSE 10881
10871: GO 10873
10873: DISABLE
// YouLost ( peo-lose ) ;
10874: LD_STRING peo-lose
10876: PPUSH
10877: CALL_OW 104
10881: END
// every 0 0$03 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = need_to_win do var i ;
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 274
10889: PPUSH
10890: LD_INT 3
10892: PPUSH
10893: CALL_OW 275
10897: PUSH
10898: LD_EXP 5
10902: EQUAL
10903: IFFALSE 10989
10905: GO 10907
10907: DISABLE
10908: LD_INT 0
10910: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10911: LD_INT 1
10913: PPUSH
10914: CALL_OW 255
10918: PUSH
10919: LD_OWVAR 2
10923: EQUAL
10924: IFFALSE 10967
// begin for i = 1 to 3 do
10926: LD_ADDR_VAR 0 1
10930: PUSH
10931: DOUBLE
10932: LD_INT 1
10934: DEC
10935: ST_TO_ADDR
10936: LD_INT 3
10938: PUSH
10939: FOR_TO
10940: IFFALSE 10954
// AddMedal ( med , 1 ) ;
10942: LD_STRING med
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 101
10952: GO 10939
10954: POP
10955: POP
// GiveMedals ( MAIN ) ;
10956: LD_STRING MAIN
10958: PPUSH
10959: CALL_OW 102
// YouWin ;
10963: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 255
10974: PUSH
10975: LD_OWVAR 2
10979: NONEQUAL
10980: IFFALSE 10989
// YouLost ( source ) ;
10982: LD_STRING source
10984: PPUSH
10985: CALL_OW 104
// end ; end_of_file
10989: PPOPN 1
10991: END
// every 2 2$05 + 0 0$11 do
10992: GO 10994
10994: DISABLE
// begin enable ;
10995: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10996: LD_INT 1
10998: PPUSH
10999: LD_INT 5
11001: PPUSH
11002: CALL_OW 12
11006: PPUSH
11007: LD_INT 7
11009: PPUSH
11010: LD_INT 1
11012: PPUSH
11013: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11017: LD_INT 350
11019: PPUSH
11020: LD_INT 1295
11022: PPUSH
11023: CALL_OW 12
11027: PPUSH
11028: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 5
11037: PPUSH
11038: CALL_OW 12
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 57
// end ;
11050: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11051: LD_EXP 1
11055: PUSH
11056: LD_INT 2
11058: EQUAL
11059: PUSH
11060: LD_EXP 8
11064: PUSH
11065: LD_INT 0
11067: EQUAL
11068: AND
11069: IFFALSE 11159
11071: GO 11073
11073: DISABLE
// begin enable ;
11074: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11075: LD_INT 1
11077: PPUSH
11078: LD_INT 5
11080: PPUSH
11081: CALL_OW 12
11085: PPUSH
11086: LD_INT 7
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11096: LD_INT 350
11098: PPUSH
11099: LD_INT 1750
11101: PPUSH
11102: CALL_OW 12
11106: PPUSH
11107: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11111: LD_EXP 6
11115: PUSH
11116: LD_INT 73500
11118: PUSH
11119: LD_INT 63000
11121: PUSH
11122: LD_INT 52500
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: PUSH
11130: LD_EXP 2
11134: ARRAY
11135: LESSEQUAL
11136: IFFALSE 11159
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11138: LD_INT 1
11140: PPUSH
11141: LD_INT 5
11143: PPUSH
11144: CALL_OW 12
11148: PPUSH
11149: LD_INT 12
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 55
// end ;
11159: END
