// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// SetWeather ( 2 , 300 , 30 ) ;
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 300
  19: PPUSH
  20: LD_INT 30
  22: PPUSH
  23: CALL_OW 550
// AnimateTrees ( true ) ;
  27: LD_INT 1
  29: PPUSH
  30: CALL_OW 573
// GameType ;
  34: CALL 280 0 0
// PrepareAmerican ;
  38: CALL 607 0 0
// if game_type = 2 then
  42: LD_EXP 1
  46: PUSH
  47: LD_INT 2
  49: EQUAL
  50: IFFALSE 56
// PrepareRussian ;
  52: CALL 6874 0 0
// GameStarted ;
  56: CALL 424 0 0
// end ;
  60: END
// every 0 0$01 do var sib ;
  61: GO 63
  63: DISABLE
  64: LD_INT 0
  66: PPUSH
// begin enable ;
  67: ENABLE
// sib := GetResourceType ( GetBase ( jota_base ) , mat_siberit ) ;
  68: LD_ADDR_VAR 0 1
  72: PUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL_OW 274
  80: PPUSH
  81: LD_INT 3
  83: PPUSH
  84: CALL_OW 275
  88: ST_TO_ADDR
// Display_Strings := [ #tick , timer , #sib , sib , need_to_win ] ;
  89: LD_ADDR_OWVAR 47
  93: PUSH
  94: LD_STRING #tick
  96: PUSH
  97: LD_EXP 6
 101: PUSH
 102: LD_STRING #sib
 104: PUSH
 105: LD_VAR 0 1
 109: PUSH
 110: LD_EXP 5
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 122: LD_ADDR_EXP 6
 126: PUSH
 127: LD_EXP 6
 131: PUSH
 132: LD_INT 35
 134: PLUS
 135: ST_TO_ADDR
// end ;
 136: PPOPN 1
 138: END
// every 1 do
 139: GO 141
 141: DISABLE
// begin while ( true ) do
 142: LD_INT 1
 144: IFFALSE 279
// begin music_nat := 1 ;
 146: LD_ADDR_OWVAR 71
 150: PUSH
 151: LD_INT 1
 153: ST_TO_ADDR
// music_class := 5 ;
 154: LD_ADDR_OWVAR 72
 158: PUSH
 159: LD_INT 5
 161: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 162: LD_INT 7350
 164: PPUSH
 165: LD_INT 10500
 167: PPUSH
 168: CALL_OW 12
 172: PPUSH
 173: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 177: LD_ADDR_OWVAR 71
 181: PUSH
 182: LD_INT 1
 184: PUSH
 185: LD_INT 3
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 1
 194: PPUSH
 195: LD_INT 2
 197: PPUSH
 198: CALL_OW 12
 202: ARRAY
 203: ST_TO_ADDR
// music_class := 0 ;
 204: LD_ADDR_OWVAR 72
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 212: LD_INT 7350
 214: PPUSH
 215: LD_INT 10500
 217: PPUSH
 218: CALL_OW 12
 222: PPUSH
 223: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 227: LD_ADDR_OWVAR 71
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 2
 247: PPUSH
 248: CALL_OW 12
 252: ARRAY
 253: ST_TO_ADDR
// music_class := 0 ;
 254: LD_ADDR_OWVAR 72
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 262: LD_INT 7350
 264: PPUSH
 265: LD_INT 10500
 267: PPUSH
 268: CALL_OW 12
 272: PPUSH
 273: CALL_OW 67
// end ;
 277: GO 142
// end ; end_of_file
 279: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 280: LD_INT 0
 282: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 283: LD_ADDR_EXP 2
 287: PUSH
 288: LD_INT 0
 290: PPUSH
 291: CALL_OW 426
 295: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 296: LD_ADDR_EXP 1
 300: PUSH
 301: LD_INT 1
 303: PPUSH
 304: CALL_OW 426
 308: ST_TO_ADDR
// if game_type = 1 then
 309: LD_EXP 1
 313: PUSH
 314: LD_INT 1
 316: EQUAL
 317: IFFALSE 339
// case Query ( GameRulesAm ) of 1 :
 319: LD_STRING GameRulesAm
 321: PPUSH
 322: CALL_OW 97
 326: PUSH
 327: LD_INT 1
 329: DOUBLE
 330: EQUAL
 331: IFTRUE 335
 333: GO 338
 335: POP
// ; end ;
 336: GO 339
 338: POP
// if game_type = 2 then
 339: LD_EXP 1
 343: PUSH
 344: LD_INT 2
 346: EQUAL
 347: IFFALSE 369
// case Query ( GameRulesRu ) of 1 :
 349: LD_STRING GameRulesRu
 351: PPUSH
 352: CALL_OW 97
 356: PUSH
 357: LD_INT 1
 359: DOUBLE
 360: EQUAL
 361: IFTRUE 365
 363: GO 368
 365: POP
// ; end ;
 366: GO 369
 368: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 369: LD_ADDR_EXP 3
 373: PUSH
 374: LD_INT 6
 376: PUSH
 377: LD_INT 4
 379: PUSH
 380: LD_INT 2
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_EXP 2
 392: ARRAY
 393: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 394: LD_ADDR_EXP 4
 398: PUSH
 399: LD_INT 4
 401: PUSH
 402: LD_INT 5
 404: PUSH
 405: LD_INT 6
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: LD_EXP 2
 417: ARRAY
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 1
 423: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 424: LD_INT 0
 426: PPUSH
// if game_type = 1 then
 427: LD_EXP 1
 431: PUSH
 432: LD_INT 1
 434: EQUAL
 435: IFFALSE 504
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 437: LD_ADDR_EXP 5
 441: PUSH
 442: LD_INT 350
 444: PUSH
 445: LD_INT 375
 447: PUSH
 448: LD_INT 400
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_EXP 2
 460: ARRAY
 461: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 462: LD_ADDR_EXP 7
 466: PUSH
 467: LD_INT 95
 469: PUSH
 470: LD_INT 100
 472: PUSH
 473: LD_INT 105
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_EXP 2
 485: ARRAY
 486: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 487: LD_INT 84
 489: PPUSH
 490: LD_INT 45
 492: PPUSH
 493: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 497: LD_STRING GType1
 499: PPUSH
 500: CALL_OW 337
// end ; if game_type = 2 then
 504: LD_EXP 1
 508: PUSH
 509: LD_INT 2
 511: EQUAL
 512: IFFALSE 594
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 514: LD_ADDR_EXP 5
 518: PUSH
 519: LD_INT 300
 521: PUSH
 522: LD_INT 350
 524: PUSH
 525: LD_INT 400
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_EXP 2
 537: ARRAY
 538: ST_TO_ADDR
// depot_captured := false ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 547: LD_EXP 18
 551: PPUSH
 552: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 556: LD_STRING GType2
 558: PPUSH
 559: CALL_OW 337
// Wait ( 0 0$03 ) ;
 563: LD_INT 105
 565: PPUSH
 566: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 570: LD_EXP 19
 574: PPUSH
 575: LD_STRING D-gorky1
 577: PPUSH
 578: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 582: LD_EXP 18
 586: PPUSH
 587: LD_STRING D-rudow1
 589: PPUSH
 590: CALL_OW 88
// end ; timer := 0 0$00 ;
 594: LD_ADDR_EXP 6
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// end ; end_of_file
 602: LD_VAR 0 1
 606: RET
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
 611: PPUSH
 612: PPUSH
 613: PPUSH
 614: PPUSH
// SetBName ( jota_base , jota ) ;
 615: LD_INT 1
 617: PPUSH
 618: LD_STRING jota
 620: PPUSH
 621: CALL_OW 500
// if game_type = 1 then
 625: LD_EXP 1
 629: PUSH
 630: LD_INT 1
 632: EQUAL
 633: IFFALSE 1145
// begin list := [ west_bun1 , east_bun , am_gun ] ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_INT 29
 642: PUSH
 643: LD_INT 35
 645: PUSH
 646: LD_INT 21
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: ST_TO_ADDR
// if game_diff = 1 then
 654: LD_EXP 2
 658: PUSH
 659: LD_INT 1
 661: EQUAL
 662: IFFALSE 677
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 664: LD_INT 57
 666: PPUSH
 667: LD_INT 3
 669: PPUSH
 670: LD_INT 2
 672: PPUSH
 673: CALL_OW 322
// if game_diff = 2 then
 677: LD_EXP 2
 681: PUSH
 682: LD_INT 2
 684: EQUAL
 685: IFFALSE 700
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 687: LD_INT 58
 689: PPUSH
 690: LD_INT 3
 692: PPUSH
 693: LD_INT 2
 695: PPUSH
 696: CALL_OW 322
// if game_diff = 3 then
 700: LD_EXP 2
 704: PUSH
 705: LD_INT 3
 707: EQUAL
 708: IFFALSE 723
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 710: LD_INT 59
 712: PPUSH
 713: LD_INT 3
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: CALL_OW 322
// for i = 1 to list do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_VAR 0 5
 737: PUSH
 738: FOR_TO
 739: IFFALSE 758
// RemoveUnit ( list [ i ] ) ;
 741: LD_VAR 0 5
 745: PUSH
 746: LD_VAR 0 2
 750: ARRAY
 751: PPUSH
 752: CALL_OW 64
 756: GO 738
 758: POP
 759: POP
// ResetFog ;
 760: CALL_OW 335
// uc_side := 1 ;
 764: LD_ADDR_OWVAR 20
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// uc_nation := 1 ;
 772: LD_ADDR_OWVAR 21
 776: PUSH
 777: LD_INT 1
 779: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 4
 792: PUSH
 793: LD_EXP 2
 797: MINUS
 798: PUSH
 799: FOR_TO
 800: IFFALSE 853
// begin uc_side := 1 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// uc_nation := 1 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 1
 817: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 818: LD_ADDR_VAR 0 3
 822: PUSH
 823: LD_INT 1
 825: PPUSH
 826: LD_EXP 3
 830: PPUSH
 831: CALL 9164 0 2
 835: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 836: LD_VAR 0 3
 840: PPUSH
 841: LD_INT 1
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 49
// end ;
 851: GO 799
 853: POP
 854: POP
// for i = 1 to 5 - ( game_diff ) do
 855: LD_ADDR_VAR 0 2
 859: PUSH
 860: DOUBLE
 861: LD_INT 1
 863: DEC
 864: ST_TO_ADDR
 865: LD_INT 5
 867: PUSH
 868: LD_EXP 2
 872: MINUS
 873: PUSH
 874: FOR_TO
 875: IFFALSE 928
// begin uc_side := 1 ;
 877: LD_ADDR_OWVAR 20
 881: PUSH
 882: LD_INT 1
 884: ST_TO_ADDR
// uc_nation := 1 ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
 893: LD_ADDR_VAR 0 3
 897: PUSH
 898: LD_INT 2
 900: PPUSH
 901: LD_EXP 3
 905: PPUSH
 906: CALL 9164 0 2
 910: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 911: LD_VAR 0 3
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 0
 921: PPUSH
 922: CALL_OW 49
// end ;
 926: GO 874
 928: POP
 929: POP
// for i = 1 to 5 - ( game_diff ) do
 930: LD_ADDR_VAR 0 2
 934: PUSH
 935: DOUBLE
 936: LD_INT 1
 938: DEC
 939: ST_TO_ADDR
 940: LD_INT 5
 942: PUSH
 943: LD_EXP 2
 947: MINUS
 948: PUSH
 949: FOR_TO
 950: IFFALSE 1003
// begin uc_side := 1 ;
 952: LD_ADDR_OWVAR 20
 956: PUSH
 957: LD_INT 1
 959: ST_TO_ADDR
// uc_nation := 1 ;
 960: LD_ADDR_OWVAR 21
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
 968: LD_ADDR_VAR 0 3
 972: PUSH
 973: LD_INT 3
 975: PPUSH
 976: LD_EXP 3
 980: PPUSH
 981: CALL 9164 0 2
 985: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 986: LD_VAR 0 3
 990: PPUSH
 991: LD_INT 1
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL_OW 49
// end ;
1001: GO 949
1003: POP
1004: POP
// for i = 1 to 5 - ( game_diff ) do
1005: LD_ADDR_VAR 0 2
1009: PUSH
1010: DOUBLE
1011: LD_INT 1
1013: DEC
1014: ST_TO_ADDR
1015: LD_INT 5
1017: PUSH
1018: LD_EXP 2
1022: MINUS
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1078
// begin uc_side := 1 ;
1027: LD_ADDR_OWVAR 20
1031: PUSH
1032: LD_INT 1
1034: ST_TO_ADDR
// uc_nation := 1 ;
1035: LD_ADDR_OWVAR 21
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1043: LD_ADDR_VAR 0 3
1047: PUSH
1048: LD_INT 4
1050: PPUSH
1051: LD_EXP 3
1055: PPUSH
1056: CALL 9164 0 2
1060: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1061: LD_VAR 0 3
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 49
// end ;
1076: GO 1024
1078: POP
1079: POP
// hc_importance := 100 ;
1080: LD_ADDR_OWVAR 32
1084: PUSH
1085: LD_INT 100
1087: ST_TO_ADDR
// uc_side := 1 ;
1088: LD_ADDR_OWVAR 20
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// uc_nation := 1 ;
1096: LD_ADDR_OWVAR 21
1100: PUSH
1101: LD_INT 1
1103: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1104: LD_ADDR_EXP 9
1108: PUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_EXP 3
1116: PPUSH
1117: CALL 9164 0 2
1121: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1122: LD_EXP 9
1126: PPUSH
1127: LD_INT 1
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// hc_importance := 0 ;
1137: LD_ADDR_OWVAR 32
1141: PUSH
1142: LD_INT 0
1144: ST_TO_ADDR
// end ; if game_type = 2 then
1145: LD_EXP 1
1149: PUSH
1150: LD_INT 2
1152: EQUAL
1153: IFFALSE 2318
// begin uc_side := 1 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// uc_nation := 1 ;
1163: LD_ADDR_OWVAR 21
1167: PUSH
1168: LD_INT 1
1170: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1171: LD_INT 1
1173: PPUSH
1174: CALL_OW 274
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 1000
1184: PPUSH
1185: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1189: LD_INT 20
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 2
1197: PPUSH
1198: CALL_OW 322
// for i = 1 to 4 do
1202: LD_ADDR_VAR 0 2
1206: PUSH
1207: DOUBLE
1208: LD_INT 1
1210: DEC
1211: ST_TO_ADDR
1212: LD_INT 4
1214: PUSH
1215: FOR_TO
1216: IFFALSE 1275
// begin for p = 1 to 5 do
1218: LD_ADDR_VAR 0 6
1222: PUSH
1223: DOUBLE
1224: LD_INT 1
1226: DEC
1227: ST_TO_ADDR
1228: LD_INT 5
1230: PUSH
1231: FOR_TO
1232: IFFALSE 1271
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1234: LD_ADDR_VAR 0 3
1238: PUSH
1239: LD_VAR 0 2
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 9164 0 2
1253: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1254: LD_VAR 0 3
1258: PPUSH
1259: LD_INT 1
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL_OW 49
// end ;
1269: GO 1231
1271: POP
1272: POP
// end ;
1273: GO 1215
1275: POP
1276: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: LD_INT 5
1284: PPUSH
1285: LD_EXP 4
1289: PPUSH
1290: CALL 9164 0 2
1294: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1295: LD_VAR 0 3
1299: PPUSH
1300: LD_INT 2
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 29
1317: PPUSH
1318: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1322: LD_ADDR_VAR 0 3
1326: PUSH
1327: LD_INT 5
1329: PPUSH
1330: LD_EXP 4
1334: PPUSH
1335: CALL 9164 0 2
1339: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1340: LD_VAR 0 3
1344: PPUSH
1345: LD_INT 4
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 20
1362: PPUSH
1363: CALL_OW 120
// if game_diff > 1 then
1367: LD_EXP 2
1371: PUSH
1372: LD_INT 1
1374: GREATER
1375: IFFALSE 1519
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1377: LD_ADDR_VAR 0 3
1381: PUSH
1382: LD_INT 5
1384: PPUSH
1385: LD_EXP 4
1389: PPUSH
1390: CALL 9164 0 2
1394: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1395: LD_VAR 0 3
1399: PPUSH
1400: LD_INT 3
1402: PPUSH
1403: LD_INT 0
1405: PPUSH
1406: CALL_OW 49
// for i = 1 to 2 do
1410: LD_ADDR_VAR 0 2
1414: PUSH
1415: DOUBLE
1416: LD_INT 1
1418: DEC
1419: ST_TO_ADDR
1420: LD_INT 2
1422: PUSH
1423: FOR_TO
1424: IFFALSE 1517
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: LD_INT 5
1433: PPUSH
1434: LD_EXP 4
1438: PPUSH
1439: CALL 9164 0 2
1443: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1444: LD_VAR 0 3
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1459: LD_VAR 0 3
1463: PPUSH
1464: LD_INT 22
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 30
1476: PUSH
1477: LD_INT 4
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 24
1486: PUSH
1487: LD_INT 251
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: EMPTY
1500: LIST
1501: PPUSH
1502: CALL_OW 69
1506: PUSH
1507: LD_INT 1
1509: ARRAY
1510: PPUSH
1511: CALL_OW 120
// end ;
1515: GO 1423
1517: POP
1518: POP
// end ; if game_diff > 1 then
1519: LD_EXP 2
1523: PUSH
1524: LD_INT 1
1526: GREATER
1527: IFFALSE 1565
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1529: LD_ADDR_VAR 0 3
1533: PUSH
1534: LD_INT 5
1536: PPUSH
1537: LD_EXP 4
1541: PPUSH
1542: CALL 9164 0 2
1546: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1547: LD_VAR 0 3
1551: PPUSH
1552: LD_INT 37
1554: PPUSH
1555: LD_INT 44
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL_OW 48
// end ; if game_diff > 2 then
1565: LD_EXP 2
1569: PUSH
1570: LD_INT 2
1572: GREATER
1573: IFFALSE 1623
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1575: LD_ADDR_VAR 0 3
1579: PUSH
1580: LD_INT 5
1582: PPUSH
1583: LD_EXP 4
1587: PPUSH
1588: CALL 9164 0 2
1592: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1593: LD_VAR 0 3
1597: PPUSH
1598: LD_INT 106
1600: PPUSH
1601: LD_INT 45
1603: PPUSH
1604: LD_INT 0
1606: PPUSH
1607: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1611: LD_VAR 0 3
1615: PPUSH
1616: LD_INT 35
1618: PPUSH
1619: CALL_OW 120
// end ; if game_diff < 3 then
1623: LD_EXP 2
1627: PUSH
1628: LD_INT 3
1630: LESS
1631: IFFALSE 1640
// RemoveUnit ( east_bun ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 64
// if game_diff > 1 then
1640: LD_EXP 2
1644: PUSH
1645: LD_INT 1
1647: GREATER
1648: IFFALSE 1663
// SetTech ( tech_rocket , 1 , state_researched ) ;
1650: LD_INT 40
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: LD_INT 2
1658: PPUSH
1659: CALL_OW 322
// case game_diff of 1 :
1663: LD_EXP 2
1667: PUSH
1668: LD_INT 1
1670: DOUBLE
1671: EQUAL
1672: IFTRUE 1676
1674: GO 1750
1676: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1677: LD_ADDR_EXP 10
1681: PUSH
1682: LD_INT 26
1684: PUSH
1685: LD_INT 78
1687: PUSH
1688: LD_INT 52
1690: PUSH
1691: LD_INT 3
1693: PUSH
1694: LD_INT 26
1696: PUSH
1697: LD_INT 96
1699: PUSH
1700: LD_INT 58
1702: PUSH
1703: LD_INT 0
1705: PUSH
1706: LD_INT 32
1708: PUSH
1709: LD_INT 72
1711: PUSH
1712: LD_INT 34
1714: PUSH
1715: LD_INT 3
1717: PUSH
1718: LD_INT 32
1720: PUSH
1721: LD_INT 83
1723: PUSH
1724: LD_INT 54
1726: PUSH
1727: LD_INT 0
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: ST_TO_ADDR
// end ; 2 :
1748: GO 2027
1750: LD_INT 2
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1880
1758: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1759: LD_ADDR_EXP 10
1763: PUSH
1764: LD_INT 18
1766: PUSH
1767: LD_INT 73
1769: PUSH
1770: LD_INT 42
1772: PUSH
1773: LD_INT 2
1775: PUSH
1776: LD_INT 26
1778: PUSH
1779: LD_INT 78
1781: PUSH
1782: LD_INT 52
1784: PUSH
1785: LD_INT 3
1787: PUSH
1788: LD_INT 26
1790: PUSH
1791: LD_INT 96
1793: PUSH
1794: LD_INT 58
1796: PUSH
1797: LD_INT 0
1799: PUSH
1800: LD_INT 32
1802: PUSH
1803: LD_INT 72
1805: PUSH
1806: LD_INT 34
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: LD_INT 32
1814: PUSH
1815: LD_INT 83
1817: PUSH
1818: LD_INT 54
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 32
1826: PUSH
1827: LD_INT 82
1829: PUSH
1830: LD_INT 38
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: LD_INT 26
1838: PUSH
1839: LD_INT 69
1841: PUSH
1842: LD_INT 39
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: ST_TO_ADDR
// end ; 3 :
1878: GO 2027
1880: LD_INT 3
1882: DOUBLE
1883: EQUAL
1884: IFTRUE 1888
1886: GO 2026
1888: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1889: LD_ADDR_EXP 10
1893: PUSH
1894: LD_INT 18
1896: PUSH
1897: LD_INT 73
1899: PUSH
1900: LD_INT 42
1902: PUSH
1903: LD_INT 2
1905: PUSH
1906: LD_INT 26
1908: PUSH
1909: LD_INT 78
1911: PUSH
1912: LD_INT 52
1914: PUSH
1915: LD_INT 3
1917: PUSH
1918: LD_INT 26
1920: PUSH
1921: LD_INT 96
1923: PUSH
1924: LD_INT 58
1926: PUSH
1927: LD_INT 0
1929: PUSH
1930: LD_INT 32
1932: PUSH
1933: LD_INT 72
1935: PUSH
1936: LD_INT 34
1938: PUSH
1939: LD_INT 3
1941: PUSH
1942: LD_INT 32
1944: PUSH
1945: LD_INT 83
1947: PUSH
1948: LD_INT 54
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: LD_INT 32
1956: PUSH
1957: LD_INT 82
1959: PUSH
1960: LD_INT 38
1962: PUSH
1963: LD_INT 2
1965: PUSH
1966: LD_INT 32
1968: PUSH
1969: LD_INT 103
1971: PUSH
1972: LD_INT 59
1974: PUSH
1975: LD_INT 3
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 69
1983: PUSH
1984: LD_INT 39
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: ST_TO_ADDR
// end ; end ;
2024: GO 2027
2026: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2027: LD_ADDR_EXP 12
2031: PUSH
2032: LD_INT 48
2034: PUSH
2035: LD_INT 47
2037: PUSH
2038: LD_INT 49
2040: PUSH
2041: LD_INT 51
2043: PUSH
2044: LD_INT 69
2046: PUSH
2047: LD_INT 52
2049: PUSH
2050: LD_INT 39
2052: PUSH
2053: LD_INT 50
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: ST_TO_ADDR
// case game_diff of 1 :
2066: LD_EXP 2
2070: PUSH
2071: LD_INT 1
2073: DOUBLE
2074: EQUAL
2075: IFTRUE 2079
2077: GO 2153
2079: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2080: LD_ADDR_EXP 11
2084: PUSH
2085: LD_INT 3
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: LD_INT 12
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 4
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 1
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: LD_INT 5
2120: PUSH
2121: LD_INT 4
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 4
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: ST_TO_ADDR
// end ; 2 :
2151: GO 2318
2153: LD_INT 2
2155: DOUBLE
2156: EQUAL
2157: IFTRUE 2161
2159: GO 2235
2161: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2162: LD_ADDR_EXP 11
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 1
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 12
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: LD_INT 1
2184: PUSH
2185: LD_INT 1
2187: PUSH
2188: LD_INT 7
2190: PUSH
2191: LD_INT 4
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 5
2202: PUSH
2203: LD_INT 4
2205: PUSH
2206: LD_INT 1
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 7
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: ST_TO_ADDR
// end ; 3 :
2233: GO 2318
2235: LD_INT 3
2237: DOUBLE
2238: EQUAL
2239: IFTRUE 2243
2241: GO 2317
2243: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2244: LD_ADDR_EXP 11
2248: PUSH
2249: LD_INT 3
2251: PUSH
2252: LD_INT 1
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 12
2260: PUSH
2261: LD_INT 4
2263: PUSH
2264: LD_INT 1
2266: PUSH
2267: LD_INT 1
2269: PUSH
2270: LD_INT 7
2272: PUSH
2273: LD_INT 4
2275: PUSH
2276: LD_INT 1
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 7
2284: PUSH
2285: LD_INT 4
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 7
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// end ; end ;
2315: GO 2318
2317: POP
// end ; end ;
2318: LD_VAR 0 1
2322: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2323: GO 2325
2325: DISABLE
// begin sold_ocp := [ ] ;
2326: LD_ADDR_EXP 13
2330: PUSH
2331: EMPTY
2332: ST_TO_ADDR
// tower_list := [ ] ;
2333: LD_ADDR_EXP 14
2337: PUSH
2338: EMPTY
2339: ST_TO_ADDR
// end ;
2340: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2341: LD_EXP 1
2345: PUSH
2346: LD_INT 2
2348: EQUAL
2349: PUSH
2350: LD_EXP 8
2354: PUSH
2355: LD_INT 0
2357: EQUAL
2358: AND
2359: IFFALSE 4036
2361: GO 2363
2363: DISABLE
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
// begin enable ;
2379: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2380: LD_ADDR_VAR 0 3
2384: PUSH
2385: LD_INT 22
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 25
2397: PUSH
2398: LD_INT 1
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: LD_INT 24
2407: PUSH
2408: LD_INT 650
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: PUSH
2420: EMPTY
2421: LIST
2422: PPUSH
2423: CALL_OW 69
2427: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2428: LD_ADDR_VAR 0 6
2432: PUSH
2433: LD_INT 22
2435: PUSH
2436: LD_INT 1
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 2
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 24
2455: PUSH
2456: LD_INT 650
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: PPUSH
2471: CALL_OW 69
2475: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2476: LD_ADDR_VAR 0 7
2480: PUSH
2481: LD_INT 22
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 3
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 24
2503: PUSH
2504: LD_INT 650
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: PPUSH
2519: CALL_OW 69
2523: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2524: LD_ADDR_VAR 0 8
2528: PUSH
2529: LD_INT 22
2531: PUSH
2532: LD_INT 1
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 25
2541: PUSH
2542: LD_INT 4
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 24
2551: PUSH
2552: LD_INT 650
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: PPUSH
2567: CALL_OW 69
2571: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2572: LD_ADDR_VAR 0 9
2576: PUSH
2577: LD_INT 22
2579: PUSH
2580: LD_INT 1
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 30
2589: PUSH
2590: LD_INT 32
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 58
2599: PUSH
2600: EMPTY
2601: LIST
2602: PUSH
2603: LD_INT 24
2605: PUSH
2606: LD_INT 251
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2624: LD_ADDR_VAR 0 10
2628: PUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 1
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: LD_INT 30
2641: PUSH
2642: LD_INT 32
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: LD_INT 35
2654: PUSH
2655: LD_INT 7
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 35
2664: PUSH
2665: LD_INT 4
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 24
2679: PUSH
2680: LD_INT 251
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: LIST
2691: LIST
2692: PUSH
2693: EMPTY
2694: LIST
2695: PPUSH
2696: CALL_OW 69
2700: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2701: LD_ADDR_VAR 0 11
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 1
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 21
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 3
2728: PUSH
2729: LD_INT 24
2731: PUSH
2732: LD_INT 650
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2756: LD_ADDR_VAR 0 12
2760: PUSH
2761: LD_INT 11
2763: PPUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 24
2789: PUSH
2790: LD_INT 1000
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: PPUSH
2809: CALL_OW 70
2813: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2814: LD_ADDR_VAR 0 13
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 21
2831: PUSH
2832: LD_INT 2
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 24
2844: PUSH
2845: LD_INT 650
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 274
2876: PPUSH
2877: LD_INT 2
2879: PPUSH
2880: CALL_OW 275
2884: PUSH
2885: LD_INT 30
2887: LESSEQUAL
2888: IFFALSE 2908
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 274
2897: PPUSH
2898: LD_INT 2
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
2908: LD_ADDR_VAR 0 5
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_EXP 13
2922: DIFF
2923: ST_TO_ADDR
// if sold > 0 then
2924: LD_VAR 0 3
2928: PUSH
2929: LD_INT 0
2931: GREATER
2932: IFFALSE 3054
// for i = 1 to sold_em do
2934: LD_ADDR_VAR 0 1
2938: PUSH
2939: DOUBLE
2940: LD_INT 1
2942: DEC
2943: ST_TO_ADDR
2944: LD_VAR 0 5
2948: PUSH
2949: FOR_TO
2950: IFFALSE 3052
// if empty_towers > 0 then
2952: LD_VAR 0 9
2956: PUSH
2957: LD_INT 0
2959: GREATER
2960: IFFALSE 2988
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
2962: LD_VAR 0 5
2966: PUSH
2967: LD_VAR 0 1
2971: ARRAY
2972: PPUSH
2973: LD_VAR 0 9
2977: PUSH
2978: LD_INT 1
2980: ARRAY
2981: PPUSH
2982: CALL_OW 120
2986: GO 3050
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
2988: LD_VAR 0 5
2992: PUSH
2993: LD_VAR 0 1
2997: ARRAY
2998: PPUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 1
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 30
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 24
3021: PUSH
3022: LD_INT 251
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: PUSH
3042: LD_INT 1
3044: ARRAY
3045: PPUSH
3046: CALL_OW 120
3050: GO 2949
3052: POP
3053: POP
// if mechs > 0 then
3054: LD_VAR 0 7
3058: PUSH
3059: LD_INT 0
3061: GREATER
3062: IFFALSE 3140
// for i = 1 to mechs do
3064: LD_ADDR_VAR 0 1
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_VAR 0 7
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3138
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3082: LD_VAR 0 7
3086: PUSH
3087: LD_VAR 0 1
3091: ARRAY
3092: PPUSH
3093: CALL_OW 310
3097: NOT
3098: PUSH
3099: LD_VAR 0 7
3103: PUSH
3104: LD_VAR 0 1
3108: ARRAY
3109: PPUSH
3110: CALL_OW 314
3114: NOT
3115: AND
3116: IFFALSE 3136
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3118: LD_VAR 0 7
3122: PUSH
3123: LD_VAR 0 1
3127: ARRAY
3128: PPUSH
3129: LD_INT 14
3131: PPUSH
3132: CALL_OW 120
3136: GO 3079
3138: POP
3139: POP
// if sci > 0 then
3140: LD_VAR 0 8
3144: PUSH
3145: LD_INT 0
3147: GREATER
3148: IFFALSE 3218
// for i = 1 to sci do
3150: LD_ADDR_VAR 0 1
3154: PUSH
3155: DOUBLE
3156: LD_INT 1
3158: DEC
3159: ST_TO_ADDR
3160: LD_VAR 0 8
3164: PUSH
3165: FOR_TO
3166: IFFALSE 3216
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3168: LD_VAR 0 11
3172: PUSH
3173: LD_INT 0
3175: EQUAL
3176: PUSH
3177: LD_VAR 0 8
3181: PUSH
3182: LD_VAR 0 1
3186: ARRAY
3187: PPUSH
3188: CALL_OW 314
3192: NOT
3193: AND
3194: IFFALSE 3214
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3196: LD_VAR 0 8
3200: PUSH
3201: LD_VAR 0 1
3205: ARRAY
3206: PPUSH
3207: LD_INT 9
3209: PPUSH
3210: CALL_OW 120
3214: GO 3165
3216: POP
3217: POP
// if damage_build > 0 then
3218: LD_VAR 0 12
3222: PUSH
3223: LD_INT 0
3225: GREATER
3226: IFFALSE 3274
// for i = 1 to engs do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_VAR 0 6
3242: PUSH
3243: FOR_TO
3244: IFFALSE 3272
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3246: LD_VAR 0 6
3250: PUSH
3251: LD_VAR 0 1
3255: ARRAY
3256: PPUSH
3257: LD_VAR 0 12
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: CALL_OW 130
3270: GO 3243
3272: POP
3273: POP
// if ai_build > 0 then
3274: LD_EXP 10
3278: PUSH
3279: LD_INT 0
3281: GREATER
3282: IFFALSE 3375
// for i = 1 to engs do
3284: LD_ADDR_VAR 0 1
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_VAR 0 6
3298: PUSH
3299: FOR_TO
3300: IFFALSE 3373
// if not HasTask ( engs [ i ] ) then
3302: LD_VAR 0 6
3306: PUSH
3307: LD_VAR 0 1
3311: ARRAY
3312: PPUSH
3313: CALL_OW 314
3317: NOT
3318: IFFALSE 3371
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3320: LD_VAR 0 6
3324: PUSH
3325: LD_VAR 0 1
3329: ARRAY
3330: PPUSH
3331: LD_EXP 10
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_EXP 10
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: PPUSH
3349: LD_EXP 10
3353: PUSH
3354: LD_INT 3
3356: ARRAY
3357: PPUSH
3358: LD_EXP 10
3362: PUSH
3363: LD_INT 4
3365: ARRAY
3366: PPUSH
3367: CALL_OW 145
3371: GO 3299
3373: POP
3374: POP
// if damage_pep > 0 and sci > 0 then
3375: LD_VAR 0 11
3379: PUSH
3380: LD_INT 0
3382: GREATER
3383: PUSH
3384: LD_VAR 0 8
3388: PUSH
3389: LD_INT 0
3391: GREATER
3392: AND
3393: IFFALSE 3579
// begin for i = 1 to sci do
3395: LD_ADDR_VAR 0 1
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_VAR 0 8
3409: PUSH
3410: FOR_TO
3411: IFFALSE 3430
// ComExitBuilding ( sci [ i ] ) ;
3413: LD_VAR 0 8
3417: PUSH
3418: LD_VAR 0 1
3422: ARRAY
3423: PPUSH
3424: CALL_OW 122
3428: GO 3410
3430: POP
3431: POP
// for i = 1 to damage_pep do
3432: LD_ADDR_VAR 0 1
3436: PUSH
3437: DOUBLE
3438: LD_INT 1
3440: DEC
3441: ST_TO_ADDR
3442: LD_VAR 0 11
3446: PUSH
3447: FOR_TO
3448: IFFALSE 3527
// begin if not IsInUnit ( damage_pep [ i ] ) then
3450: LD_VAR 0 11
3454: PUSH
3455: LD_VAR 0 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 310
3465: NOT
3466: IFFALSE 3483
// ComExitBuilding ( damage_pep [ i ] ) ;
3468: LD_VAR 0 11
3472: PUSH
3473: LD_VAR 0 1
3477: ARRAY
3478: PPUSH
3479: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3483: LD_VAR 0 11
3487: PUSH
3488: LD_VAR 0 1
3492: ARRAY
3493: PPUSH
3494: LD_INT 9
3496: PPUSH
3497: CALL_OW 308
3501: NOT
3502: IFFALSE 3525
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3504: LD_VAR 0 11
3508: PUSH
3509: LD_VAR 0 1
3513: ARRAY
3514: PPUSH
3515: LD_INT 96
3517: PPUSH
3518: LD_INT 52
3520: PPUSH
3521: CALL_OW 111
// end ;
3525: GO 3447
3527: POP
3528: POP
// if damage_pep = 0 then
3529: LD_VAR 0 11
3533: PUSH
3534: LD_INT 0
3536: EQUAL
3537: IFFALSE 3579
// for i = 1 to sci do
3539: LD_ADDR_VAR 0 1
3543: PUSH
3544: DOUBLE
3545: LD_INT 1
3547: DEC
3548: ST_TO_ADDR
3549: LD_VAR 0 8
3553: PUSH
3554: FOR_TO
3555: IFFALSE 3577
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3557: LD_VAR 0 8
3561: PUSH
3562: LD_VAR 0 1
3566: ARRAY
3567: PPUSH
3568: LD_INT 9
3570: PPUSH
3571: CALL_OW 120
3575: GO 3554
3577: POP
3578: POP
// end ; if ai_tech > 0 then
3579: LD_EXP 12
3583: PUSH
3584: LD_INT 0
3586: GREATER
3587: IFFALSE 3605
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3589: LD_INT 9
3591: PPUSH
3592: LD_EXP 12
3596: PUSH
3597: LD_INT 1
3599: ARRAY
3600: PPUSH
3601: CALL_OW 124
// if ai_vehs > 0 then
3605: LD_EXP 11
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3741
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3615: LD_INT 14
3617: PPUSH
3618: LD_EXP 11
3622: PUSH
3623: LD_INT 1
3625: ARRAY
3626: PPUSH
3627: LD_EXP 11
3631: PUSH
3632: LD_INT 2
3634: ARRAY
3635: PPUSH
3636: LD_EXP 11
3640: PUSH
3641: LD_INT 3
3643: ARRAY
3644: PPUSH
3645: LD_EXP 11
3649: PUSH
3650: LD_INT 4
3652: ARRAY
3653: PPUSH
3654: CALL_OW 448
3658: IFFALSE 3741
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3660: LD_INT 14
3662: PPUSH
3663: LD_EXP 11
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PPUSH
3672: LD_EXP 11
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: PPUSH
3681: LD_EXP 11
3685: PUSH
3686: LD_INT 3
3688: ARRAY
3689: PPUSH
3690: LD_EXP 11
3694: PUSH
3695: LD_INT 4
3697: ARRAY
3698: PPUSH
3699: CALL_OW 125
// for i = 1 to 4 do
3703: LD_ADDR_VAR 0 1
3707: PUSH
3708: DOUBLE
3709: LD_INT 1
3711: DEC
3712: ST_TO_ADDR
3713: LD_INT 4
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3739
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3719: LD_ADDR_EXP 11
3723: PUSH
3724: LD_EXP 11
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 3
3736: ST_TO_ADDR
3737: GO 3716
3739: POP
3740: POP
// end ; if tower_list > 0 then
3741: LD_EXP 14
3745: PUSH
3746: LD_INT 0
3748: GREATER
3749: IFFALSE 3853
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3751: LD_INT 40
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 321
3761: PUSH
3762: LD_INT 2
3764: EQUAL
3765: IFFALSE 3803
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3767: LD_EXP 14
3771: PUSH
3772: LD_INT 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 7
3778: PPUSH
3779: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3783: LD_ADDR_EXP 14
3787: PUSH
3788: LD_EXP 14
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: CALL_OW 3
3800: ST_TO_ADDR
// end else
3801: GO 3853
// if GetTech ( tech_gatling , 1 ) = state_researched then
3803: LD_INT 69
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: CALL_OW 321
3813: PUSH
3814: LD_INT 2
3816: EQUAL
3817: IFFALSE 3853
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3819: LD_EXP 14
3823: PUSH
3824: LD_INT 1
3826: ARRAY
3827: PPUSH
3828: LD_INT 4
3830: PPUSH
3831: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3835: LD_ADDR_EXP 14
3839: PUSH
3840: LD_EXP 14
3844: PPUSH
3845: LD_INT 1
3847: PPUSH
3848: CALL_OW 3
3852: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3853: LD_VAR 0 13
3857: PUSH
3858: LD_INT 0
3860: GREATER
3861: IFFALSE 4036
// begin for i = 1 to damage_vehs do
3863: LD_ADDR_VAR 0 1
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_VAR 0 13
3877: PUSH
3878: FOR_TO
3879: IFFALSE 4034
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: LD_VAR 0 13
3890: PUSH
3891: LD_VAR 0 1
3895: ARRAY
3896: PPUSH
3897: CALL_OW 311
3901: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
3902: LD_VAR 0 13
3906: PUSH
3907: LD_VAR 0 1
3911: ARRAY
3912: PPUSH
3913: LD_INT 10
3915: PPUSH
3916: CALL_OW 308
3920: NOT
3921: IFFALSE 3937
// ComMoveToArea ( un , repair_area ) else
3923: LD_VAR 0 2
3927: PPUSH
3928: LD_INT 10
3930: PPUSH
3931: CALL_OW 113
3935: GO 4032
// begin if IsInUnit ( un ) then
3937: LD_VAR 0 2
3941: PPUSH
3942: CALL_OW 310
3946: IFFALSE 3957
// ComExitVehicle ( un ) ;
3948: LD_VAR 0 2
3952: PPUSH
3953: CALL_OW 121
// Wait ( 0 0$01 ) ;
3957: LD_INT 35
3959: PPUSH
3960: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
3964: LD_VAR 0 2
3968: PPUSH
3969: LD_VAR 0 13
3973: PUSH
3974: LD_VAR 0 1
3978: ARRAY
3979: PPUSH
3980: CALL_OW 129
// Wait ( 0 0$01 ) ;
3984: LD_INT 35
3986: PPUSH
3987: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
3991: LD_VAR 0 13
3995: PUSH
3996: LD_VAR 0 1
4000: ARRAY
4001: PPUSH
4002: CALL_OW 256
4006: PUSH
4007: LD_INT 1000
4009: EQUAL
4010: IFFALSE 3964
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_VAR 0 13
4021: PUSH
4022: LD_VAR 0 1
4026: ARRAY
4027: PPUSH
4028: CALL_OW 120
// end ; end ;
4032: GO 3878
4034: POP
4035: POP
// end ; end ;
4036: PPOPN 13
4038: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4039: LD_EXP 1
4043: PUSH
4044: LD_INT 2
4046: EQUAL
4047: PUSH
4048: LD_EXP 8
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: IFFALSE 4236
4059: GO 4061
4061: DISABLE
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
// begin enable ;
4068: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4069: LD_ADDR_VAR 0 3
4073: PUSH
4074: LD_INT 22
4076: PUSH
4077: LD_INT 1
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 21
4086: PUSH
4087: LD_INT 2
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 24
4096: PUSH
4097: LD_INT 650
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 34
4109: PUSH
4110: LD_INT 12
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: PPUSH
4130: CALL_OW 69
4134: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4135: LD_ADDR_VAR 0 4
4139: PUSH
4140: LD_INT 11
4142: PPUSH
4143: LD_INT 22
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PPUSH
4153: CALL_OW 70
4157: ST_TO_ADDR
// if filter > 0 then
4158: LD_VAR 0 3
4162: PUSH
4163: LD_INT 0
4165: GREATER
4166: IFFALSE 4236
// for i = 1 to filter do
4168: LD_ADDR_VAR 0 1
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_VAR 0 3
4182: PUSH
4183: FOR_TO
4184: IFFALSE 4234
// if enemy > 0 then
4186: LD_VAR 0 4
4190: PUSH
4191: LD_INT 0
4193: GREATER
4194: IFFALSE 4232
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4196: LD_VAR 0 3
4200: PUSH
4201: LD_VAR 0 1
4205: ARRAY
4206: PPUSH
4207: LD_VAR 0 4
4211: PPUSH
4212: LD_VAR 0 3
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 74
4227: PPUSH
4228: CALL_OW 115
4232: GO 4183
4234: POP
4235: POP
// end ;
4236: PPOPN 4
4238: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4239: LD_EXP 1
4243: PUSH
4244: LD_INT 2
4246: EQUAL
4247: PUSH
4248: LD_EXP 8
4252: PUSH
4253: LD_INT 0
4255: EQUAL
4256: AND
4257: IFFALSE 4704
4259: GO 4261
4261: DISABLE
4262: LD_INT 0
4264: PPUSH
4265: PPUSH
4266: PPUSH
4267: PPUSH
4268: PPUSH
4269: PPUSH
4270: PPUSH
// begin enable ;
4271: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4272: LD_ADDR_VAR 0 5
4276: PUSH
4277: LD_INT 50
4279: PUSH
4280: EMPTY
4281: LIST
4282: PUSH
4283: LD_INT 22
4285: PUSH
4286: LD_INT 1
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 2
4295: PUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 25
4308: PUSH
4309: LD_INT 16
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PPUSH
4326: CALL_OW 69
4330: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4331: LD_ADDR_VAR 0 6
4335: PUSH
4336: LD_INT 22
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: LD_INT 34
4348: PUSH
4349: LD_INT 12
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PUSH
4356: LD_INT 24
4358: PUSH
4359: LD_INT 650
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4376: LD_ADDR_VAR 0 7
4380: PUSH
4381: LD_INT 22
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: LD_INT 30
4396: PUSH
4397: LD_INT 0
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PUSH
4404: LD_INT 30
4406: PUSH
4407: LD_INT 1
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4428: LD_ADDR_VAR 0 4
4432: PUSH
4433: LD_INT 7
4435: PPUSH
4436: CALL_OW 435
4440: ST_TO_ADDR
// c = 1 ;
4441: LD_ADDR_VAR 0 2
4445: PUSH
4446: LD_INT 1
4448: ST_TO_ADDR
// if cargo > 0 then
4449: LD_VAR 0 6
4453: PUSH
4454: LD_INT 0
4456: GREATER
4457: IFFALSE 4704
// while c < skr do
4459: LD_VAR 0 2
4463: PUSH
4464: LD_VAR 0 4
4468: LESS
4469: IFFALSE 4704
// begin if cargo > 0 then
4471: LD_VAR 0 6
4475: PUSH
4476: LD_INT 0
4478: GREATER
4479: IFFALSE 4702
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4481: LD_VAR 0 6
4485: PUSH
4486: LD_INT 1
4488: ARRAY
4489: PPUSH
4490: CALL_OW 261
4494: PUSH
4495: LD_INT 40
4497: GREATER
4498: IFFALSE 4596
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4500: LD_VAR 0 4
4504: PUSH
4505: LD_VAR 0 2
4509: ARRAY
4510: PPUSH
4511: LD_VAR 0 4
4515: PUSH
4516: LD_VAR 0 2
4520: PUSH
4521: LD_INT 1
4523: PLUS
4524: ARRAY
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: CALL 10327 0 3
4533: PUSH
4534: LD_INT 15
4536: GREATER
4537: PUSH
4538: LD_VAR 0 6
4542: PUSH
4543: LD_INT 1
4545: ARRAY
4546: PPUSH
4547: CALL_OW 314
4551: NOT
4552: AND
4553: IFFALSE 4594
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4555: LD_VAR 0 6
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: PPUSH
4564: LD_VAR 0 4
4568: PUSH
4569: LD_VAR 0 2
4573: ARRAY
4574: PPUSH
4575: LD_VAR 0 4
4579: PUSH
4580: LD_VAR 0 2
4584: PUSH
4585: LD_INT 1
4587: PLUS
4588: ARRAY
4589: PPUSH
4590: CALL_OW 117
// end else
4594: GO 4688
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4596: LD_VAR 0 6
4600: PUSH
4601: LD_INT 1
4603: ARRAY
4604: PPUSH
4605: LD_VAR 0 7
4609: PUSH
4610: LD_INT 1
4612: ARRAY
4613: PPUSH
4614: CALL_OW 250
4618: PPUSH
4619: LD_VAR 0 7
4623: PUSH
4624: LD_INT 1
4626: ARRAY
4627: PPUSH
4628: CALL_OW 251
4632: PPUSH
4633: CALL_OW 111
// Wait ( 0 0$01 ) ;
4637: LD_INT 35
4639: PPUSH
4640: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4644: LD_VAR 0 6
4648: PUSH
4649: LD_INT 1
4651: ARRAY
4652: PPUSH
4653: LD_VAR 0 7
4657: PUSH
4658: LD_INT 1
4660: ARRAY
4661: PPUSH
4662: CALL_OW 296
4666: PUSH
4667: LD_INT 7
4669: LESS
4670: IFFALSE 4596
// SetFuel ( cargo [ 1 ] , 100 ) ;
4672: LD_VAR 0 6
4676: PUSH
4677: LD_INT 1
4679: ARRAY
4680: PPUSH
4681: LD_INT 100
4683: PPUSH
4684: CALL_OW 240
// end ; c = c + 2 ;
4688: LD_ADDR_VAR 0 2
4692: PUSH
4693: LD_VAR 0 2
4697: PUSH
4698: LD_INT 2
4700: PLUS
4701: ST_TO_ADDR
// end ; end ;
4702: GO 4459
// end ;
4704: PPOPN 7
4706: END
// on EnterBuilding ( b , un ) do var i , filter ;
4707: LD_INT 0
4709: PPUSH
4710: PPUSH
// begin if game_type = 2 and depot_captured = false then
4711: LD_EXP 1
4715: PUSH
4716: LD_INT 2
4718: EQUAL
4719: PUSH
4720: LD_EXP 8
4724: PUSH
4725: LD_INT 0
4727: EQUAL
4728: AND
4729: IFFALSE 4783
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4731: LD_VAR 0 1
4735: PUSH
4736: LD_INT 22
4738: PUSH
4739: LD_INT 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 32
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PPUSH
4760: CALL_OW 69
4764: IN
4765: IFFALSE 4783
// sold_ocp := sold_ocp ^ un ;
4767: LD_ADDR_EXP 13
4771: PUSH
4772: LD_EXP 13
4776: PUSH
4777: LD_VAR 0 2
4781: ADD
4782: ST_TO_ADDR
// end ; end ;
4783: PPOPN 4
4785: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4786: LD_INT 0
4788: PPUSH
4789: PPUSH
// begin if un in sold_ocp then
4790: LD_VAR 0 2
4794: PUSH
4795: LD_EXP 13
4799: IN
4800: IFFALSE 4822
// sold_ocp := Delete ( sold_ocp , un ) ;
4802: LD_ADDR_EXP 13
4806: PUSH
4807: LD_EXP 13
4811: PPUSH
4812: LD_VAR 0 2
4816: PPUSH
4817: CALL_OW 3
4821: ST_TO_ADDR
// end ;
4822: PPOPN 4
4824: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4825: LD_INT 0
4827: PPUSH
4828: PPUSH
4829: PPUSH
// begin if game_type = 2 then
4830: LD_EXP 1
4834: PUSH
4835: LD_INT 2
4837: EQUAL
4838: IFFALSE 4885
// begin if GetSide ( lab ) = 1 then
4840: LD_VAR 0 2
4844: PPUSH
4845: CALL_OW 255
4849: PUSH
4850: LD_INT 1
4852: EQUAL
4853: IFFALSE 4885
// if tech in ai_tech then
4855: LD_VAR 0 1
4859: PUSH
4860: LD_EXP 12
4864: IN
4865: IFFALSE 4885
// ai_tech := Delete ( ai_tech , 1 ) ;
4867: LD_ADDR_EXP 12
4871: PUSH
4872: LD_EXP 12
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 3
4884: ST_TO_ADDR
// end ; end ;
4885: PPOPN 5
4887: END
// on BuildingComplete ( b ) do var i , side , un ;
4888: LD_INT 0
4890: PPUSH
4891: PPUSH
4892: PPUSH
// begin if game_type = 2 and depot_captured = false then
4893: LD_EXP 1
4897: PUSH
4898: LD_INT 2
4900: EQUAL
4901: PUSH
4902: LD_EXP 8
4906: PUSH
4907: LD_INT 0
4909: EQUAL
4910: AND
4911: IFFALSE 5018
// begin if GetSide ( b ) = 1 then
4913: LD_VAR 0 1
4917: PPUSH
4918: CALL_OW 255
4922: PUSH
4923: LD_INT 1
4925: EQUAL
4926: IFFALSE 4966
// for i = 1 to 4 do
4928: LD_ADDR_VAR 0 2
4932: PUSH
4933: DOUBLE
4934: LD_INT 1
4936: DEC
4937: ST_TO_ADDR
4938: LD_INT 4
4940: PUSH
4941: FOR_TO
4942: IFFALSE 4964
// ai_build := Delete ( ai_build , 1 ) ;
4944: LD_ADDR_EXP 10
4948: PUSH
4949: LD_EXP 10
4953: PPUSH
4954: LD_INT 1
4956: PPUSH
4957: CALL_OW 3
4961: ST_TO_ADDR
4962: GO 4941
4964: POP
4965: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4966: LD_VAR 0 1
4970: PUSH
4971: LD_INT 22
4973: PUSH
4974: LD_INT 1
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 30
4983: PUSH
4984: LD_INT 32
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 69
4999: IN
5000: IFFALSE 5018
// tower_list := tower_list ^ b ;
5002: LD_ADDR_EXP 14
5006: PUSH
5007: LD_EXP 14
5011: PUSH
5012: LD_VAR 0 1
5016: ADD
5017: ST_TO_ADDR
// end ; end ;
5018: PPOPN 4
5020: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5021: LD_EXP 1
5025: PUSH
5026: LD_INT 1
5028: EQUAL
5029: IFFALSE 5227
5031: GO 5033
5033: DISABLE
// begin enable ;
5034: ENABLE
// if timer <= 20 20$00 then
5035: LD_EXP 6
5039: PUSH
5040: LD_INT 42000
5042: LESSEQUAL
5043: IFFALSE 5078
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5045: LD_ADDR_EXP 15
5049: PUSH
5050: LD_INT 5
5052: PUSH
5053: LD_INT 6
5055: PUSH
5056: LD_INT 7
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PUSH
5064: LD_EXP 2
5068: ARRAY
5069: ST_TO_ADDR
// enemy_typ := 1 ;
5070: LD_ADDR_EXP 16
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5078: LD_EXP 6
5082: PUSH
5083: LD_INT 42000
5085: GREATER
5086: PUSH
5087: LD_EXP 6
5091: PUSH
5092: LD_INT 84000
5094: LESSEQUAL
5095: AND
5096: IFFALSE 5131
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5098: LD_ADDR_EXP 15
5102: PUSH
5103: LD_INT 6
5105: PUSH
5106: LD_INT 8
5108: PUSH
5109: LD_INT 9
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: LD_EXP 2
5121: ARRAY
5122: ST_TO_ADDR
// enemy_typ := 2 ;
5123: LD_ADDR_EXP 16
5127: PUSH
5128: LD_INT 2
5130: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5131: LD_EXP 6
5135: PUSH
5136: LD_INT 84000
5138: GREATER
5139: PUSH
5140: LD_EXP 6
5144: PUSH
5145: LD_INT 126000
5147: LESSEQUAL
5148: AND
5149: IFFALSE 5184
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5151: LD_ADDR_EXP 15
5155: PUSH
5156: LD_INT 8
5158: PUSH
5159: LD_INT 9
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_EXP 2
5174: ARRAY
5175: ST_TO_ADDR
// enemy_typ := 3 ;
5176: LD_ADDR_EXP 16
5180: PUSH
5181: LD_INT 3
5183: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5184: LD_EXP 6
5188: PUSH
5189: LD_INT 126000
5191: GREATER
5192: IFFALSE 5227
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5194: LD_ADDR_EXP 15
5198: PUSH
5199: LD_INT 10
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 14
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: PUSH
5213: LD_EXP 2
5217: ARRAY
5218: ST_TO_ADDR
// enemy_typ := 3 ;
5219: LD_ADDR_EXP 16
5223: PUSH
5224: LD_INT 3
5226: ST_TO_ADDR
// end ; end ;
5227: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5228: LD_EXP 6
5232: PUSH
5233: LD_INT 16800
5235: PUSH
5236: LD_INT 17850
5238: PUSH
5239: LD_INT 18900
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PUSH
5247: LD_EXP 2
5251: ARRAY
5252: GREATEREQUAL
5253: PUSH
5254: LD_EXP 1
5258: PUSH
5259: LD_INT 1
5261: EQUAL
5262: AND
5263: IFFALSE 5467
5265: GO 5267
5267: DISABLE
5268: LD_INT 0
5270: PPUSH
// begin uc_nation := 1 ;
5271: LD_ADDR_OWVAR 21
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// uc_side := 4 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 4
5286: ST_TO_ADDR
// hc_sex := sex_male ;
5287: LD_ADDR_OWVAR 27
5291: PUSH
5292: LD_INT 1
5294: ST_TO_ADDR
// hc_class := 1 ;
5295: LD_ADDR_OWVAR 28
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// hc_gallery :=  ;
5303: LD_ADDR_OWVAR 33
5307: PUSH
5308: LD_STRING 
5310: ST_TO_ADDR
// hc_name :=  ;
5311: LD_ADDR_OWVAR 26
5315: PUSH
5316: LD_STRING 
5318: ST_TO_ADDR
// am_com2 := CreateHuman ;
5319: LD_ADDR_EXP 17
5323: PUSH
5324: CALL_OW 44
5328: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5329: LD_EXP 17
5333: PPUSH
5334: LD_STRING D-rus
5336: PPUSH
5337: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 6
5348: PUSH
5349: LD_INT 5
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: ST_TO_ADDR
// while ( true ) do
5356: LD_INT 1
5358: IFFALSE 5467
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5360: LD_INT 13650
5362: PPUSH
5363: LD_INT 17920
5365: PPUSH
5366: CALL_OW 12
5370: PPUSH
5371: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5375: LD_INT 3
5377: PPUSH
5378: LD_EXP 15
5382: PPUSH
5383: LD_EXP 16
5387: PPUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL 7909 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5397: LD_EXP 6
5401: PUSH
5402: LD_INT 115500
5404: PUSH
5405: LD_INT 94500
5407: PUSH
5408: LD_INT 73500
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: PUSH
5416: LD_OWVAR 67
5420: ARRAY
5421: GREATER
5422: IFFALSE 5465
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5424: LD_INT 1050
5426: PPUSH
5427: LD_INT 3150
5429: PPUSH
5430: CALL_OW 12
5434: PPUSH
5435: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5439: LD_INT 3
5441: PPUSH
5442: LD_EXP 15
5446: PUSH
5447: LD_INT 2
5449: DIVREAL
5450: PPUSH
5451: LD_EXP 16
5455: PPUSH
5456: LD_VAR 0 1
5460: PPUSH
5461: CALL 7909 0 4
// end ; end ;
5465: GO 5356
// end ;
5467: PPOPN 1
5469: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 274
5477: PPUSH
5478: LD_INT 3
5480: PPUSH
5481: CALL_OW 275
5485: PUSH
5486: LD_EXP 7
5490: EQUAL
5491: IFFALSE 5773
5493: GO 5495
5495: DISABLE
5496: LD_INT 0
5498: PPUSH
5499: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5500: LD_EXP 17
5504: PPUSH
5505: LD_STRING D-help
5507: PPUSH
5508: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5512: LD_INT 7035
5514: PPUSH
5515: LD_INT 16065
5517: PPUSH
5518: CALL_OW 12
5522: PPUSH
5523: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5527: LD_INT 35
5529: PPUSH
5530: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5534: LD_INT 22
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: PUSH
5549: LD_INT 0
5551: EQUAL
5552: IFFALSE 5527
// uc_side := 1 ;
5554: LD_ADDR_OWVAR 20
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// uc_nation := 1 ;
5562: LD_ADDR_OWVAR 21
5566: PUSH
5567: LD_INT 1
5569: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5570: LD_ADDR_VAR 0 1
5574: PUSH
5575: DOUBLE
5576: LD_INT 1
5578: DEC
5579: ST_TO_ADDR
5580: LD_INT 3
5582: PUSH
5583: LD_EXP 2
5587: PLUS
5588: PUSH
5589: FOR_TO
5590: IFFALSE 5635
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_INT 1
5599: PPUSH
5600: LD_INT 4
5602: PPUSH
5603: CALL_OW 12
5607: PPUSH
5608: LD_EXP 3
5612: PPUSH
5613: CALL 9164 0 2
5617: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5618: LD_VAR 0 2
5622: PPUSH
5623: LD_INT 5
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 49
// end ;
5633: GO 5589
5635: POP
5636: POP
// case game_diff of 1 :
5637: LD_EXP 2
5641: PUSH
5642: LD_INT 1
5644: DOUBLE
5645: EQUAL
5646: IFTRUE 5650
5648: GO 5677
5650: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5651: LD_INT 4
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 5
5659: PPUSH
5660: LD_INT 5
5662: PPUSH
5663: LD_INT 0
5665: PPUSH
5666: LD_EXP 3
5670: PPUSH
5671: CALL 9703 0 6
5675: GO 5748
5677: LD_INT 2
5679: DOUBLE
5680: EQUAL
5681: IFTRUE 5685
5683: GO 5712
5685: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5686: LD_INT 3
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 5
5694: PPUSH
5695: LD_INT 5
5697: PPUSH
5698: LD_INT 0
5700: PPUSH
5701: LD_EXP 3
5705: PPUSH
5706: CALL 9703 0 6
5710: GO 5748
5712: LD_INT 3
5714: DOUBLE
5715: EQUAL
5716: IFTRUE 5720
5718: GO 5747
5720: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5721: LD_INT 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 3
5729: PPUSH
5730: LD_INT 5
5732: PPUSH
5733: LD_INT 0
5735: PPUSH
5736: LD_EXP 3
5740: PPUSH
5741: CALL 9703 0 6
5745: GO 5748
5747: POP
// DialogueOn ;
5748: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5752: LD_INT 91
5754: PPUSH
5755: LD_INT 115
5757: PPUSH
5758: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5762: LD_INT 10
5764: PPUSH
5765: CALL_OW 67
// DialogueOff ;
5769: CALL_OW 7
// end ;
5773: PPOPN 2
5775: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5776: LD_INT 0
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
// uc_side := side ;
5786: LD_ADDR_OWVAR 20
5790: PUSH
5791: LD_VAR 0 1
5795: ST_TO_ADDR
// uc_nation := nation_american ;
5796: LD_ADDR_OWVAR 21
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5804: LD_ADDR_VAR 0 10
5808: PUSH
5809: LD_INT 3
5811: PUSH
5812: LD_INT 4
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5819: LD_ADDR_VAR 0 11
5823: PUSH
5824: LD_INT 2
5826: PUSH
5827: LD_INT 4
5829: PUSH
5830: LD_INT 5
5832: PUSH
5833: LD_INT 6
5835: PUSH
5836: LD_INT 7
5838: PUSH
5839: LD_INT 97
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: ST_TO_ADDR
// case typ of 1 :
5850: LD_VAR 0 3
5854: PUSH
5855: LD_INT 1
5857: DOUBLE
5858: EQUAL
5859: IFTRUE 5863
5861: GO 6057
5863: POP
// begin for i = 1 to num do
5864: LD_ADDR_VAR 0 6
5868: PUSH
5869: DOUBLE
5870: LD_INT 1
5872: DEC
5873: ST_TO_ADDR
5874: LD_VAR 0 2
5878: PUSH
5879: FOR_TO
5880: IFFALSE 6053
// begin vc_chassis := chassis [ 1 ] ;
5882: LD_ADDR_OWVAR 37
5886: PUSH
5887: LD_VAR 0 10
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: ST_TO_ADDR
// vc_engine := engine_combustion ;
5896: LD_ADDR_OWVAR 39
5900: PUSH
5901: LD_INT 1
5903: ST_TO_ADDR
// vc_control := control_manual ;
5904: LD_ADDR_OWVAR 38
5908: PUSH
5909: LD_INT 1
5911: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
5912: LD_ADDR_OWVAR 40
5916: PUSH
5917: LD_VAR 0 11
5921: PUSH
5922: LD_INT 1
5924: PPUSH
5925: LD_INT 3
5927: PPUSH
5928: CALL_OW 12
5932: ARRAY
5933: ST_TO_ADDR
// veh := CreateVehicle ;
5934: LD_ADDR_VAR 0 9
5938: PUSH
5939: CALL_OW 45
5943: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
5944: LD_ADDR_VAR 0 12
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_INT 2
5954: PPUSH
5955: CALL_OW 12
5959: ST_TO_ADDR
// if f = 1 then
5960: LD_VAR 0 12
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5984
// SetDir ( veh , 3 ) else
5970: LD_VAR 0 9
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: CALL_OW 233
5982: GO 5996
// SetDir ( veh , 1 ) ;
5984: LD_VAR 0 9
5988: PPUSH
5989: LD_INT 1
5991: PPUSH
5992: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
5996: LD_VAR 0 9
6000: PPUSH
6001: LD_VAR 0 4
6005: PUSH
6006: LD_VAR 0 12
6010: ARRAY
6011: PPUSH
6012: LD_INT 0
6014: PPUSH
6015: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6019: LD_ADDR_VAR 0 7
6023: PUSH
6024: LD_INT 1
6026: PPUSH
6027: LD_EXP 4
6031: PPUSH
6032: CALL 9164 0 2
6036: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6037: LD_VAR 0 7
6041: PPUSH
6042: LD_VAR 0 9
6046: PPUSH
6047: CALL_OW 52
// end ;
6051: GO 5879
6053: POP
6054: POP
// end ; 2 :
6055: GO 6531
6057: LD_INT 2
6059: DOUBLE
6060: EQUAL
6061: IFTRUE 6065
6063: GO 6328
6065: POP
// begin for i = 1 to num do
6066: LD_ADDR_VAR 0 6
6070: PUSH
6071: DOUBLE
6072: LD_INT 1
6074: DEC
6075: ST_TO_ADDR
6076: LD_VAR 0 2
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6263
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6084: LD_ADDR_OWVAR 37
6088: PUSH
6089: LD_VAR 0 10
6093: PUSH
6094: LD_INT 1
6096: PPUSH
6097: LD_INT 2
6099: PPUSH
6100: CALL_OW 12
6104: ARRAY
6105: ST_TO_ADDR
// vc_engine := engine_combustion ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// vc_control := control_manual ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6122: LD_ADDR_OWVAR 40
6126: PUSH
6127: LD_VAR 0 11
6131: PUSH
6132: LD_INT 1
6134: PPUSH
6135: LD_INT 3
6137: PPUSH
6138: CALL_OW 12
6142: ARRAY
6143: ST_TO_ADDR
// veh := CreateVehicle ;
6144: LD_ADDR_VAR 0 9
6148: PUSH
6149: CALL_OW 45
6153: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6154: LD_ADDR_VAR 0 12
6158: PUSH
6159: LD_INT 1
6161: PPUSH
6162: LD_INT 2
6164: PPUSH
6165: CALL_OW 12
6169: ST_TO_ADDR
// if f = 1 then
6170: LD_VAR 0 12
6174: PUSH
6175: LD_INT 1
6177: EQUAL
6178: IFFALSE 6194
// SetDir ( veh , 3 ) else
6180: LD_VAR 0 9
6184: PPUSH
6185: LD_INT 3
6187: PPUSH
6188: CALL_OW 233
6192: GO 6206
// SetDir ( veh , 1 ) ;
6194: LD_VAR 0 9
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6206: LD_VAR 0 9
6210: PPUSH
6211: LD_VAR 0 4
6215: PUSH
6216: LD_VAR 0 12
6220: ARRAY
6221: PPUSH
6222: LD_INT 0
6224: PPUSH
6225: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_INT 1
6236: PPUSH
6237: LD_EXP 4
6241: PPUSH
6242: CALL 9164 0 2
6246: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6247: LD_VAR 0 7
6251: PPUSH
6252: LD_VAR 0 9
6256: PPUSH
6257: CALL_OW 52
// end ;
6261: GO 6081
6263: POP
6264: POP
// for i = 1 to 3 do
6265: LD_ADDR_VAR 0 6
6269: PUSH
6270: DOUBLE
6271: LD_INT 1
6273: DEC
6274: ST_TO_ADDR
6275: LD_INT 3
6277: PUSH
6278: FOR_TO
6279: IFFALSE 6324
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6281: LD_ADDR_VAR 0 7
6285: PUSH
6286: LD_INT 5
6288: PPUSH
6289: LD_EXP 4
6293: PPUSH
6294: CALL 9164 0 2
6298: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6299: LD_VAR 0 7
6303: PPUSH
6304: LD_VAR 0 4
6308: PUSH
6309: LD_VAR 0 12
6313: ARRAY
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6278
6324: POP
6325: POP
// end ; 3 :
6326: GO 6531
6328: LD_INT 3
6330: DOUBLE
6331: EQUAL
6332: IFTRUE 6336
6334: GO 6530
6336: POP
// begin for i = 1 to num do
6337: LD_ADDR_VAR 0 6
6341: PUSH
6342: DOUBLE
6343: LD_INT 1
6345: DEC
6346: ST_TO_ADDR
6347: LD_VAR 0 2
6351: PUSH
6352: FOR_TO
6353: IFFALSE 6526
// begin vc_chassis := chassis [ 2 ] ;
6355: LD_ADDR_OWVAR 37
6359: PUSH
6360: LD_VAR 0 10
6364: PUSH
6365: LD_INT 2
6367: ARRAY
6368: ST_TO_ADDR
// vc_engine := engine_combustion ;
6369: LD_ADDR_OWVAR 39
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// vc_control := control_manual ;
6377: LD_ADDR_OWVAR 38
6381: PUSH
6382: LD_INT 1
6384: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6385: LD_ADDR_OWVAR 40
6389: PUSH
6390: LD_VAR 0 11
6394: PUSH
6395: LD_INT 3
6397: PPUSH
6398: LD_INT 6
6400: PPUSH
6401: CALL_OW 12
6405: ARRAY
6406: ST_TO_ADDR
// veh := CreateVehicle ;
6407: LD_ADDR_VAR 0 9
6411: PUSH
6412: CALL_OW 45
6416: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6417: LD_ADDR_VAR 0 12
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: LD_INT 2
6427: PPUSH
6428: CALL_OW 12
6432: ST_TO_ADDR
// if f = 1 then
6433: LD_VAR 0 12
6437: PUSH
6438: LD_INT 1
6440: EQUAL
6441: IFFALSE 6457
// SetDir ( veh , 3 ) else
6443: LD_VAR 0 9
6447: PPUSH
6448: LD_INT 3
6450: PPUSH
6451: CALL_OW 233
6455: GO 6469
// SetDir ( veh , 1 ) ;
6457: LD_VAR 0 9
6461: PPUSH
6462: LD_INT 1
6464: PPUSH
6465: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6469: LD_VAR 0 9
6473: PPUSH
6474: LD_VAR 0 4
6478: PUSH
6479: LD_VAR 0 12
6483: ARRAY
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6492: LD_ADDR_VAR 0 7
6496: PUSH
6497: LD_INT 1
6499: PPUSH
6500: LD_EXP 4
6504: PPUSH
6505: CALL 9164 0 2
6509: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6510: LD_VAR 0 7
6514: PPUSH
6515: LD_VAR 0 9
6519: PPUSH
6520: CALL_OW 52
// end ;
6524: GO 6352
6526: POP
6527: POP
// end ; end ;
6528: GO 6531
6530: POP
// end ;
6531: LD_VAR 0 5
6535: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6536: LD_EXP 1
6540: PUSH
6541: LD_INT 2
6543: EQUAL
6544: PUSH
6545: LD_EXP 8
6549: AND
6550: IFFALSE 6705
6552: GO 6554
6554: DISABLE
6555: LD_INT 0
6557: PPUSH
6558: PPUSH
6559: PPUSH
// begin enable ;
6560: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6561: LD_ADDR_VAR 0 1
6565: PUSH
6566: LD_INT 22
6568: PUSH
6569: LD_INT 1
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PPUSH
6576: CALL_OW 69
6580: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6581: LD_ADDR_VAR 0 2
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 22
6601: PUSH
6602: LD_INT 6
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: ST_TO_ADDR
// if filter > 0 then
6619: LD_VAR 0 1
6623: PUSH
6624: LD_INT 0
6626: GREATER
6627: IFFALSE 6705
// for i = 1 to filter do
6629: LD_ADDR_VAR 0 3
6633: PUSH
6634: DOUBLE
6635: LD_INT 1
6637: DEC
6638: ST_TO_ADDR
6639: LD_VAR 0 1
6643: PUSH
6644: FOR_TO
6645: IFFALSE 6703
// if not HasTask ( filter [ i ] ) then
6647: LD_VAR 0 1
6651: PUSH
6652: LD_VAR 0 3
6656: ARRAY
6657: PPUSH
6658: CALL_OW 314
6662: NOT
6663: IFFALSE 6701
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6665: LD_VAR 0 1
6669: PUSH
6670: LD_VAR 0 3
6674: ARRAY
6675: PPUSH
6676: LD_VAR 0 2
6680: PPUSH
6681: LD_VAR 0 1
6685: PUSH
6686: LD_VAR 0 3
6690: ARRAY
6691: PPUSH
6692: CALL_OW 74
6696: PPUSH
6697: CALL_OW 115
6701: GO 6644
6703: POP
6704: POP
// end ;
6705: PPOPN 3
6707: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6708: LD_EXP 1
6712: PUSH
6713: LD_INT 2
6715: EQUAL
6716: IFFALSE 6871
6718: GO 6720
6720: DISABLE
6721: LD_INT 0
6723: PPUSH
6724: PPUSH
6725: PPUSH
// begin enable ;
6726: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_INT 22
6734: PUSH
6735: LD_INT 8
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PPUSH
6742: CALL_OW 69
6746: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_INT 2
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 3
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 22
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: ST_TO_ADDR
// if filter > 0 then
6785: LD_VAR 0 1
6789: PUSH
6790: LD_INT 0
6792: GREATER
6793: IFFALSE 6871
// for i = 1 to filter do
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: DOUBLE
6801: LD_INT 1
6803: DEC
6804: ST_TO_ADDR
6805: LD_VAR 0 1
6809: PUSH
6810: FOR_TO
6811: IFFALSE 6869
// if not HasTask ( filter [ i ] ) then
6813: LD_VAR 0 1
6817: PUSH
6818: LD_VAR 0 3
6822: ARRAY
6823: PPUSH
6824: CALL_OW 314
6828: NOT
6829: IFFALSE 6867
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6831: LD_VAR 0 1
6835: PUSH
6836: LD_VAR 0 3
6840: ARRAY
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_VAR 0 1
6851: PUSH
6852: LD_VAR 0 3
6856: ARRAY
6857: PPUSH
6858: CALL_OW 74
6862: PPUSH
6863: CALL_OW 115
6867: GO 6810
6869: POP
6870: POP
// end ; end_of_file
6871: PPOPN 3
6873: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
// Your_Side := 3 ;
6881: LD_ADDR_OWVAR 2
6885: PUSH
6886: LD_INT 3
6888: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 3
6894: PPUSH
6895: CALL_OW 343
// ResetFog ;
6899: CALL_OW 335
// uc_side := 6 ;
6903: LD_ADDR_OWVAR 20
6907: PUSH
6908: LD_INT 6
6910: ST_TO_ADDR
// uc_nation := 3 ;
6911: LD_ADDR_OWVAR 21
6915: PUSH
6916: LD_INT 3
6918: ST_TO_ADDR
// hc_gallery := ru ;
6919: LD_ADDR_OWVAR 33
6923: PUSH
6924: LD_STRING ru
6926: ST_TO_ADDR
// hc_face_number := 1 ;
6927: LD_ADDR_OWVAR 34
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// hc_name := J. I. Gorki ;
6935: LD_ADDR_OWVAR 26
6939: PUSH
6940: LD_STRING J. I. Gorki
6942: ST_TO_ADDR
// hc_class := 3 ;
6943: LD_ADDR_OWVAR 28
6947: PUSH
6948: LD_INT 3
6950: ST_TO_ADDR
// hc_sex := sex_male ;
6951: LD_ADDR_OWVAR 27
6955: PUSH
6956: LD_INT 1
6958: ST_TO_ADDR
// gorki := CreateHuman ;
6959: LD_ADDR_EXP 19
6963: PUSH
6964: CALL_OW 44
6968: ST_TO_ADDR
// uc_side := 3 ;
6969: LD_ADDR_OWVAR 20
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// uc_nation := 3 ;
6977: LD_ADDR_OWVAR 21
6981: PUSH
6982: LD_INT 3
6984: ST_TO_ADDR
// hc_importance := 100 ;
6985: LD_ADDR_OWVAR 32
6989: PUSH
6990: LD_INT 100
6992: ST_TO_ADDR
// hc_name :=  ;
6993: LD_ADDR_OWVAR 26
6997: PUSH
6998: LD_STRING 
7000: ST_TO_ADDR
// hc_gallery :=  ;
7001: LD_ADDR_OWVAR 33
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 1
7014: PPUSH
7015: LD_EXP 3
7019: PUSH
7020: LD_INT 3
7022: PLUS
7023: PPUSH
7024: CALL_OW 380
// ru_dow := CreateHuman ;
7028: LD_ADDR_EXP 18
7032: PUSH
7033: CALL_OW 44
7037: ST_TO_ADDR
// hc_importance := 0 ;
7038: LD_ADDR_OWVAR 32
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// for i = 1 to 20 do
7046: LD_ADDR_VAR 0 3
7050: PUSH
7051: DOUBLE
7052: LD_INT 1
7054: DEC
7055: ST_TO_ADDR
7056: LD_INT 20
7058: PUSH
7059: FOR_TO
7060: IFFALSE 7122
// begin uc_side := 3 ;
7062: LD_ADDR_OWVAR 20
7066: PUSH
7067: LD_INT 3
7069: ST_TO_ADDR
// uc_nation := 3 ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_INT 3
7077: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 4
7088: PPUSH
7089: CALL_OW 12
7093: PPUSH
7094: LD_EXP 3
7098: PPUSH
7099: CALL 9164 0 2
7103: ST_TO_ADDR
// filter := filter ^ un ;
7104: LD_ADDR_VAR 0 4
7108: PUSH
7109: LD_VAR 0 4
7113: PUSH
7114: LD_VAR 0 2
7118: ADD
7119: ST_TO_ADDR
// end ;
7120: GO 7059
7122: POP
7123: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7124: LD_ADDR_VAR 0 5
7128: PUSH
7129: LD_STRING text
7131: PPUSH
7132: LD_INT 9
7134: PUSH
7135: LD_INT 8
7137: PUSH
7138: LD_INT 7
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_EXP 2
7150: ARRAY
7151: PPUSH
7152: LD_INT 9
7154: PUSH
7155: LD_INT 8
7157: PUSH
7158: LD_INT 7
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: LD_EXP 2
7170: ARRAY
7171: PPUSH
7172: LD_INT -5
7174: PUSH
7175: LD_EXP 18
7179: PUSH
7180: LD_INT -3
7182: PUSH
7183: LD_INT -2
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: LD_VAR 0 4
7196: ADD
7197: PPUSH
7198: LD_INT 1
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 9
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: LD_INT 6
7232: PUSH
7233: LD_INT 4
7235: PUSH
7236: LD_INT 3
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_EXP 2
7248: ARRAY
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: PPUSH
7262: CALL_OW 42
7266: ST_TO_ADDR
// team := team ^ ru_dow ;
7267: LD_ADDR_VAR 0 5
7271: PUSH
7272: LD_VAR 0 5
7276: PUSH
7277: LD_EXP 18
7281: ADD
7282: ST_TO_ADDR
// for i = 1 to team do
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: DOUBLE
7289: LD_INT 1
7291: DEC
7292: ST_TO_ADDR
7293: LD_VAR 0 5
7297: PUSH
7298: FOR_TO
7299: IFFALSE 7324
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7301: LD_VAR 0 5
7305: PUSH
7306: LD_VAR 0 3
7310: ARRAY
7311: PPUSH
7312: LD_INT 5
7314: PPUSH
7315: LD_INT 0
7317: PPUSH
7318: CALL_OW 49
7322: GO 7298
7324: POP
7325: POP
// end ;
7326: LD_VAR 0 1
7330: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7331: LD_INT 1
7333: PPUSH
7334: CALL_OW 255
7338: PUSH
7339: LD_INT 3
7341: EQUAL
7342: IFFALSE 7452
7344: GO 7346
7346: DISABLE
7347: LD_INT 0
7349: PPUSH
// begin depot_captured := true ;
7350: LD_ADDR_EXP 8
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7358: LD_STRING GType2b
7360: PPUSH
7361: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7365: LD_EXP 18
7369: PPUSH
7370: LD_STRING D-rudow2
7372: PPUSH
7373: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7377: LD_EXP 19
7381: PPUSH
7382: LD_STRING D-gorky2
7384: PPUSH
7385: CALL_OW 94
// while ( true ) do
7389: LD_INT 1
7391: IFFALSE 7452
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7393: LD_INT 13300
7395: PPUSH
7396: LD_INT 19985
7398: PPUSH
7399: CALL_OW 12
7403: PPUSH
7404: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7408: LD_ADDR_VAR 0 1
7412: PUSH
7413: LD_INT 6
7415: PUSH
7416: LD_INT 5
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7423: LD_INT 1
7425: PPUSH
7426: LD_EXP 15
7430: PPUSH
7431: LD_EXP 16
7435: PPUSH
7436: LD_INT 6
7438: PUSH
7439: LD_INT 5
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL 5776 0 4
// end ;
7450: GO 7389
// end ;
7452: PPOPN 1
7454: END
// every 1 1$30 trigger game_type = 2 do
7455: LD_EXP 1
7459: PUSH
7460: LD_INT 2
7462: EQUAL
7463: IFFALSE 7608
7465: GO 7467
7467: DISABLE
// begin enable ;
7468: ENABLE
// if timer <= 45 45$00 then
7469: LD_EXP 6
7473: PUSH
7474: LD_INT 94500
7476: LESSEQUAL
7477: IFFALSE 7512
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7479: LD_ADDR_EXP 15
7483: PUSH
7484: LD_INT 5
7486: PUSH
7487: LD_INT 6
7489: PUSH
7490: LD_INT 7
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: LD_EXP 2
7502: ARRAY
7503: ST_TO_ADDR
// enemy_typ := 1 ;
7504: LD_ADDR_EXP 16
7508: PUSH
7509: LD_INT 1
7511: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7512: LD_EXP 6
7516: PUSH
7517: LD_INT 126000
7519: GREATER
7520: PUSH
7521: LD_EXP 6
7525: PUSH
7526: LD_INT 168000
7528: LESSEQUAL
7529: AND
7530: IFFALSE 7565
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7532: LD_ADDR_EXP 15
7536: PUSH
7537: LD_INT 6
7539: PUSH
7540: LD_INT 8
7542: PUSH
7543: LD_INT 9
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: PUSH
7551: LD_EXP 2
7555: ARRAY
7556: ST_TO_ADDR
// enemy_typ := 2 ;
7557: LD_ADDR_EXP 16
7561: PUSH
7562: LD_INT 2
7564: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7565: LD_EXP 6
7569: PUSH
7570: LD_INT 168000
7572: GREATER
7573: IFFALSE 7608
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7575: LD_ADDR_EXP 15
7579: PUSH
7580: LD_INT 8
7582: PUSH
7583: LD_INT 9
7585: PUSH
7586: LD_INT 10
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_EXP 2
7598: ARRAY
7599: ST_TO_ADDR
// enemy_typ := 3 ;
7600: LD_ADDR_EXP 16
7604: PUSH
7605: LD_INT 3
7607: ST_TO_ADDR
// end ; end ;
7608: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7609: LD_EXP 1
7613: PUSH
7614: LD_INT 2
7616: EQUAL
7617: IFFALSE 7742
7619: GO 7621
7621: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7622: LD_INT 8
7624: PPUSH
7625: LD_EXP 15
7629: PPUSH
7630: LD_INT 1
7632: PPUSH
7633: LD_INT 6
7635: PPUSH
7636: CALL 9813 0 4
// Wait ( 20 20$00 ) ;
7640: LD_INT 42000
7642: PPUSH
7643: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7647: LD_INT 8
7649: PPUSH
7650: LD_EXP 15
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: LD_INT 6
7660: PPUSH
7661: CALL 9813 0 4
// Wait ( 4 4$00 ) ;
7665: LD_INT 8400
7667: PPUSH
7668: CALL_OW 67
// uc_side := 8 ;
7672: LD_ADDR_OWVAR 20
7676: PUSH
7677: LD_INT 8
7679: ST_TO_ADDR
// uc_nation := 2 ;
7680: LD_ADDR_OWVAR 21
7684: PUSH
7685: LD_INT 2
7687: ST_TO_ADDR
// hc_class := 1 ;
7688: LD_ADDR_OWVAR 28
7692: PUSH
7693: LD_INT 1
7695: ST_TO_ADDR
// hc_gallery := sandar ;
7696: LD_ADDR_OWVAR 33
7700: PUSH
7701: LD_STRING sandar
7703: ST_TO_ADDR
// hc_face_number := 4 ;
7704: LD_ADDR_OWVAR 34
7708: PUSH
7709: LD_INT 4
7711: ST_TO_ADDR
// hc_sex := sex_male ;
7712: LD_ADDR_OWVAR 27
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// farmer := CreateHuman ;
7720: LD_ADDR_EXP 20
7724: PUSH
7725: CALL_OW 44
7729: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7730: LD_EXP 20
7734: PPUSH
7735: LD_STRING D-farmer
7737: PPUSH
7738: CALL_OW 94
// end ;
7742: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7743: LD_EXP 1
7747: PUSH
7748: LD_INT 1
7750: EQUAL
7751: IFFALSE 7906
7753: GO 7755
7755: DISABLE
7756: LD_INT 0
7758: PPUSH
7759: PPUSH
7760: PPUSH
// begin enable ;
7761: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7762: LD_ADDR_VAR 0 1
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 22
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 22
7782: PUSH
7783: LD_INT 6
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: PPUSH
7795: CALL_OW 69
7799: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 22
7810: PUSH
7811: LD_INT 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 22
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 69
7837: ST_TO_ADDR
// if filter > 0 then
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 0
7845: GREATER
7846: IFFALSE 7906
// for i = 1 to filter do
7848: LD_ADDR_VAR 0 3
7852: PUSH
7853: DOUBLE
7854: LD_INT 1
7856: DEC
7857: ST_TO_ADDR
7858: LD_VAR 0 1
7862: PUSH
7863: FOR_TO
7864: IFFALSE 7904
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7866: LD_VAR 0 1
7870: PUSH
7871: LD_VAR 0 3
7875: ARRAY
7876: PPUSH
7877: LD_VAR 0 2
7881: PPUSH
7882: LD_VAR 0 1
7886: PUSH
7887: LD_VAR 0 3
7891: ARRAY
7892: PPUSH
7893: CALL_OW 74
7897: PPUSH
7898: CALL_OW 115
7902: GO 7863
7904: POP
7905: POP
// end ;
7906: PPOPN 3
7908: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
7909: LD_INT 0
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
7918: PPUSH
// Randomize ;
7919: CALL_OW 10
// uc_side := side ;
7923: LD_ADDR_OWVAR 20
7927: PUSH
7928: LD_VAR 0 1
7932: ST_TO_ADDR
// uc_nation := nation_russian ;
7933: LD_ADDR_OWVAR 21
7937: PUSH
7938: LD_INT 3
7940: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
7941: LD_ADDR_VAR 0 10
7945: PUSH
7946: LD_INT 22
7948: PUSH
7949: LD_INT 24
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
7956: LD_ADDR_VAR 0 11
7960: PUSH
7961: LD_INT 42
7963: PUSH
7964: LD_INT 43
7966: PUSH
7967: LD_INT 44
7969: PUSH
7970: LD_INT 46
7972: PUSH
7973: LD_INT 45
7975: PUSH
7976: LD_INT 47
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: ST_TO_ADDR
// case typ of 1 :
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 1
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8194
8000: POP
// begin for i = 1 to num do
8001: LD_ADDR_VAR 0 6
8005: PUSH
8006: DOUBLE
8007: LD_INT 1
8009: DEC
8010: ST_TO_ADDR
8011: LD_VAR 0 2
8015: PUSH
8016: FOR_TO
8017: IFFALSE 8190
// begin vc_chassis := chassis [ 1 ] ;
8019: LD_ADDR_OWVAR 37
8023: PUSH
8024: LD_VAR 0 10
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: ST_TO_ADDR
// vc_engine := engine_combustion ;
8033: LD_ADDR_OWVAR 39
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// vc_control := control_manual ;
8041: LD_ADDR_OWVAR 38
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8049: LD_ADDR_OWVAR 40
8053: PUSH
8054: LD_VAR 0 11
8058: PUSH
8059: LD_INT 1
8061: PPUSH
8062: LD_INT 3
8064: PPUSH
8065: CALL_OW 12
8069: ARRAY
8070: ST_TO_ADDR
// veh := CreateVehicle ;
8071: LD_ADDR_VAR 0 9
8075: PUSH
8076: CALL_OW 45
8080: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8081: LD_ADDR_VAR 0 12
8085: PUSH
8086: LD_INT 1
8088: PPUSH
8089: LD_INT 2
8091: PPUSH
8092: CALL_OW 12
8096: ST_TO_ADDR
// if f = 1 then
8097: LD_VAR 0 12
8101: PUSH
8102: LD_INT 1
8104: EQUAL
8105: IFFALSE 8121
// SetDir ( veh , 3 ) else
8107: LD_VAR 0 9
8111: PPUSH
8112: LD_INT 3
8114: PPUSH
8115: CALL_OW 233
8119: GO 8133
// SetDir ( veh , 1 ) ;
8121: LD_VAR 0 9
8125: PPUSH
8126: LD_INT 1
8128: PPUSH
8129: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8133: LD_VAR 0 9
8137: PPUSH
8138: LD_VAR 0 4
8142: PUSH
8143: LD_VAR 0 12
8147: ARRAY
8148: PPUSH
8149: LD_INT 0
8151: PPUSH
8152: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8156: LD_ADDR_VAR 0 7
8160: PUSH
8161: LD_INT 1
8163: PPUSH
8164: LD_EXP 4
8168: PPUSH
8169: CALL 9164 0 2
8173: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8174: LD_VAR 0 7
8178: PPUSH
8179: LD_VAR 0 9
8183: PPUSH
8184: CALL_OW 52
// end ;
8188: GO 8016
8190: POP
8191: POP
// end ; 2 :
8192: GO 8736
8194: LD_INT 2
8196: DOUBLE
8197: EQUAL
8198: IFTRUE 8202
8200: GO 8499
8202: POP
// begin for i = 1 to num do
8203: LD_ADDR_VAR 0 6
8207: PUSH
8208: DOUBLE
8209: LD_INT 1
8211: DEC
8212: ST_TO_ADDR
8213: LD_VAR 0 2
8217: PUSH
8218: FOR_TO
8219: IFFALSE 8434
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8221: LD_ADDR_OWVAR 37
8225: PUSH
8226: LD_VAR 0 10
8230: PUSH
8231: LD_INT 1
8233: PPUSH
8234: LD_INT 2
8236: PPUSH
8237: CALL_OW 12
8241: ARRAY
8242: ST_TO_ADDR
// vc_engine := engine_combustion ;
8243: LD_ADDR_OWVAR 39
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8251: LD_ADDR_OWVAR 38
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: LD_INT 3
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 1
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: CALL_OW 12
8276: ARRAY
8277: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8278: LD_ADDR_OWVAR 40
8282: PUSH
8283: LD_VAR 0 11
8287: PUSH
8288: LD_INT 1
8290: PPUSH
8291: LD_INT 3
8293: PPUSH
8294: CALL_OW 12
8298: ARRAY
8299: ST_TO_ADDR
// veh := CreateVehicle ;
8300: LD_ADDR_VAR 0 9
8304: PUSH
8305: CALL_OW 45
8309: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8310: LD_ADDR_VAR 0 12
8314: PUSH
8315: LD_INT 1
8317: PPUSH
8318: LD_INT 2
8320: PPUSH
8321: CALL_OW 12
8325: ST_TO_ADDR
// if f = 1 then
8326: LD_VAR 0 12
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: IFFALSE 8350
// SetDir ( veh , 3 ) else
8336: LD_VAR 0 9
8340: PPUSH
8341: LD_INT 3
8343: PPUSH
8344: CALL_OW 233
8348: GO 8362
// SetDir ( veh , 1 ) ;
8350: LD_VAR 0 9
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8362: LD_VAR 0 9
8366: PPUSH
8367: LD_VAR 0 4
8371: PUSH
8372: LD_VAR 0 12
8376: ARRAY
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8385: LD_VAR 0 9
8389: PPUSH
8390: CALL_OW 263
8394: PUSH
8395: LD_INT 1
8397: EQUAL
8398: IFFALSE 8432
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8400: LD_ADDR_VAR 0 7
8404: PUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_EXP 4
8412: PPUSH
8413: CALL 9164 0 2
8417: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8418: LD_VAR 0 7
8422: PPUSH
8423: LD_VAR 0 9
8427: PPUSH
8428: CALL_OW 52
// end ; end ;
8432: GO 8218
8434: POP
8435: POP
// for i = 1 to 2 do
8436: LD_ADDR_VAR 0 6
8440: PUSH
8441: DOUBLE
8442: LD_INT 1
8444: DEC
8445: ST_TO_ADDR
8446: LD_INT 2
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8495
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8452: LD_ADDR_VAR 0 7
8456: PUSH
8457: LD_INT 9
8459: PPUSH
8460: LD_EXP 4
8464: PPUSH
8465: CALL 9164 0 2
8469: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8470: LD_VAR 0 7
8474: PPUSH
8475: LD_VAR 0 4
8479: PUSH
8480: LD_VAR 0 12
8484: ARRAY
8485: PPUSH
8486: LD_INT 0
8488: PPUSH
8489: CALL_OW 49
// end ;
8493: GO 8449
8495: POP
8496: POP
// end ; 3 :
8497: GO 8736
8499: LD_INT 3
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8735
8507: POP
// begin for i = 1 to num do
8508: LD_ADDR_VAR 0 6
8512: PUSH
8513: DOUBLE
8514: LD_INT 1
8516: DEC
8517: ST_TO_ADDR
8518: LD_VAR 0 2
8522: PUSH
8523: FOR_TO
8524: IFFALSE 8731
// begin vc_chassis := chassis [ 2 ] ;
8526: LD_ADDR_OWVAR 37
8530: PUSH
8531: LD_VAR 0 10
8535: PUSH
8536: LD_INT 2
8538: ARRAY
8539: ST_TO_ADDR
// vc_engine := engine_combustion ;
8540: LD_ADDR_OWVAR 39
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8548: LD_ADDR_OWVAR 38
8552: PUSH
8553: LD_INT 3
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8575: LD_ADDR_OWVAR 40
8579: PUSH
8580: LD_VAR 0 11
8584: PUSH
8585: LD_INT 3
8587: PPUSH
8588: LD_INT 6
8590: PPUSH
8591: CALL_OW 12
8595: ARRAY
8596: ST_TO_ADDR
// veh := CreateVehicle ;
8597: LD_ADDR_VAR 0 9
8601: PUSH
8602: CALL_OW 45
8606: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8607: LD_ADDR_VAR 0 12
8611: PUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_INT 2
8617: PPUSH
8618: CALL_OW 12
8622: ST_TO_ADDR
// if f = 1 then
8623: LD_VAR 0 12
8627: PUSH
8628: LD_INT 1
8630: EQUAL
8631: IFFALSE 8647
// SetDir ( veh , 3 ) else
8633: LD_VAR 0 9
8637: PPUSH
8638: LD_INT 3
8640: PPUSH
8641: CALL_OW 233
8645: GO 8659
// SetDir ( veh , 1 ) ;
8647: LD_VAR 0 9
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8659: LD_VAR 0 9
8663: PPUSH
8664: LD_VAR 0 4
8668: PUSH
8669: LD_VAR 0 12
8673: ARRAY
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8682: LD_VAR 0 9
8686: PPUSH
8687: CALL_OW 263
8691: PUSH
8692: LD_INT 1
8694: EQUAL
8695: IFFALSE 8729
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8697: LD_ADDR_VAR 0 7
8701: PUSH
8702: LD_INT 1
8704: PPUSH
8705: LD_EXP 4
8709: PPUSH
8710: CALL 9164 0 2
8714: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8715: LD_VAR 0 7
8719: PPUSH
8720: LD_VAR 0 9
8724: PPUSH
8725: CALL_OW 52
// end ; end ;
8729: GO 8523
8731: POP
8732: POP
// end ; end ;
8733: GO 8736
8735: POP
// end ; end_of_file
8736: LD_VAR 0 5
8740: RET
// every 0 0$01 do
8741: GO 8743
8743: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8744: LD_INT 6
8746: PUSH
8747: LD_EXP 2
8751: PLUS
8752: PPUSH
8753: LD_INT 5
8755: PPUSH
8756: LD_INT 4
8758: PPUSH
8759: LD_INT 8
8761: PPUSH
8762: CALL 8767 0 4
8766: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8767: LD_INT 0
8769: PPUSH
8770: PPUSH
8771: PPUSH
8772: PPUSH
8773: PPUSH
// uc_nation = nation_nature ;
8774: LD_ADDR_OWVAR 21
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// uc_side = 0 ;
8782: LD_ADDR_OWVAR 20
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// l = 0 ;
8790: LD_ADDR_VAR 0 6
8794: PUSH
8795: LD_INT 0
8797: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8798: LD_ADDR_OWVAR 24
8802: PUSH
8803: LD_INT 0
8805: PPUSH
8806: LD_INT 5
8808: PPUSH
8809: CALL_OW 12
8813: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8814: LD_ADDR_OWVAR 35
8818: PUSH
8819: LD_INT 5
8821: NEG
8822: PPUSH
8823: LD_INT 5
8825: PPUSH
8826: CALL_OW 12
8830: ST_TO_ADDR
// hc_gallery =  ;
8831: LD_ADDR_OWVAR 33
8835: PUSH
8836: LD_STRING 
8838: ST_TO_ADDR
// hc_class = class_apeman ;
8839: LD_ADDR_OWVAR 28
8843: PUSH
8844: LD_INT 12
8846: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8847: LD_ADDR_OWVAR 29
8851: PUSH
8852: LD_INT 11
8854: PPUSH
8855: LD_INT 13
8857: PPUSH
8858: CALL_OW 12
8862: PUSH
8863: LD_INT 10
8865: PPUSH
8866: LD_INT 11
8868: PPUSH
8869: CALL_OW 12
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: ST_TO_ADDR
// hc_sex = sex_male ;
8878: LD_ADDR_OWVAR 27
8882: PUSH
8883: LD_INT 1
8885: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8886: LD_ADDR_OWVAR 31
8890: PUSH
8891: LD_INT 0
8893: PPUSH
8894: LD_INT 2
8896: PPUSH
8897: CALL_OW 12
8901: PUSH
8902: LD_INT 0
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: LD_INT 0
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: ST_TO_ADDR
// apeman = CreateHuman ;
8917: LD_ADDR_VAR 0 7
8921: PUSH
8922: CALL_OW 44
8926: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8927: LD_VAR 0 7
8931: PPUSH
8932: LD_VAR 0 4
8936: PPUSH
8937: LD_INT 0
8939: PPUSH
8940: CALL_OW 49
// l = l + 1 ;
8944: LD_ADDR_VAR 0 6
8948: PUSH
8949: LD_VAR 0 6
8953: PUSH
8954: LD_INT 1
8956: PLUS
8957: ST_TO_ADDR
// end until l = num1 ;
8958: LD_VAR 0 6
8962: PUSH
8963: LD_VAR 0 1
8967: EQUAL
8968: IFFALSE 8798
// l = 0 ;
8970: LD_ADDR_VAR 0 6
8974: PUSH
8975: LD_INT 0
8977: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8978: LD_ADDR_OWVAR 35
8982: PUSH
8983: LD_INT 0
8985: PPUSH
8986: LD_INT 25
8988: PPUSH
8989: CALL_OW 12
8993: ST_TO_ADDR
// hc_class = class_tiger ;
8994: LD_ADDR_OWVAR 28
8998: PUSH
8999: LD_INT 14
9001: ST_TO_ADDR
// hc_sex = sex_male ;
9002: LD_ADDR_OWVAR 27
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// hc_gallery = sandnature ;
9010: LD_ADDR_OWVAR 33
9014: PUSH
9015: LD_STRING sandnature
9017: ST_TO_ADDR
// hc_face_number = 3 ;
9018: LD_ADDR_OWVAR 34
9022: PUSH
9023: LD_INT 3
9025: ST_TO_ADDR
// tiger = CreateHuman ;
9026: LD_ADDR_VAR 0 8
9030: PUSH
9031: CALL_OW 44
9035: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9036: LD_VAR 0 8
9040: PPUSH
9041: LD_VAR 0 4
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 49
// l = l + 1 ;
9053: LD_ADDR_VAR 0 6
9057: PUSH
9058: LD_VAR 0 6
9062: PUSH
9063: LD_INT 1
9065: PLUS
9066: ST_TO_ADDR
// end until l = num2 ;
9067: LD_VAR 0 6
9071: PUSH
9072: LD_VAR 0 2
9076: EQUAL
9077: IFFALSE 8978
// l = 0 ;
9079: LD_ADDR_VAR 0 6
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9087: LD_ADDR_OWVAR 28
9091: PUSH
9092: LD_INT 18
9094: ST_TO_ADDR
// hc_gallery = sandnature ;
9095: LD_ADDR_OWVAR 33
9099: PUSH
9100: LD_STRING sandnature
9102: ST_TO_ADDR
// hc_face_number = 1 ;
9103: LD_ADDR_OWVAR 34
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// bird = CreateHuman ;
9111: LD_ADDR_VAR 0 9
9115: PUSH
9116: CALL_OW 44
9120: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9121: LD_VAR 0 9
9125: PPUSH
9126: LD_INT 0
9128: PPUSH
9129: CALL_OW 51
// l = l + 1 ;
9133: LD_ADDR_VAR 0 6
9137: PUSH
9138: LD_VAR 0 6
9142: PUSH
9143: LD_INT 1
9145: PLUS
9146: ST_TO_ADDR
// end until l = num3 ;
9147: LD_VAR 0 6
9151: PUSH
9152: LD_VAR 0 3
9156: EQUAL
9157: IFFALSE 9087
// end ;
9159: LD_VAR 0 5
9163: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
// hc_class := clas ;
9172: LD_ADDR_OWVAR 28
9176: PUSH
9177: LD_VAR 0 1
9181: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_VAR 0 2
9191: PUSH
9192: LD_INT 1
9194: NEG
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 12
9203: PLUS
9204: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9205: LD_ADDR_VAR 0 5
9209: PUSH
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: NEG
9218: PPUSH
9219: LD_INT 1
9221: PPUSH
9222: CALL_OW 12
9226: PLUS
9227: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9228: LD_ADDR_VAR 0 6
9232: PUSH
9233: LD_VAR 0 2
9237: PUSH
9238: LD_INT 1
9240: NEG
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 12
9249: PLUS
9250: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9251: LD_ADDR_VAR 0 7
9255: PUSH
9256: LD_VAR 0 2
9260: PUSH
9261: LD_INT 1
9263: NEG
9264: PPUSH
9265: LD_INT 1
9267: PPUSH
9268: CALL_OW 12
9272: PLUS
9273: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9274: LD_VAR 0 1
9278: PUSH
9279: LD_INT 1
9281: EQUAL
9282: PUSH
9283: LD_VAR 0 1
9287: PUSH
9288: LD_INT 9
9290: EQUAL
9291: OR
9292: PUSH
9293: LD_VAR 0 1
9297: PUSH
9298: LD_INT 5
9300: EQUAL
9301: OR
9302: PUSH
9303: LD_VAR 0 1
9307: PUSH
9308: LD_INT 8
9310: EQUAL
9311: OR
9312: IFFALSE 9337
// bonus := [ 2 , 0 , 0 , 0 ] ;
9314: LD_ADDR_VAR 0 8
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: LD_INT 0
9324: PUSH
9325: LD_INT 0
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: ST_TO_ADDR
// if clas = 2 then
9337: LD_VAR 0 1
9341: PUSH
9342: LD_INT 2
9344: EQUAL
9345: IFFALSE 9370
// bonus := [ 0 , 2 , 0 , 0 ] ;
9347: LD_ADDR_VAR 0 8
9351: PUSH
9352: LD_INT 0
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: LD_INT 0
9360: PUSH
9361: LD_INT 0
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: ST_TO_ADDR
// if clas = 3 then
9370: LD_VAR 0 1
9374: PUSH
9375: LD_INT 3
9377: EQUAL
9378: IFFALSE 9403
// bonus := [ 0 , 0 , 2 , 0 ] ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_INT 0
9387: PUSH
9388: LD_INT 0
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: LD_INT 0
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: ST_TO_ADDR
// if clas = 4 then
9403: LD_VAR 0 1
9407: PUSH
9408: LD_INT 4
9410: EQUAL
9411: IFFALSE 9436
// bonus := [ 0 , 0 , 0 , 2 ] ;
9413: LD_ADDR_VAR 0 8
9417: PUSH
9418: LD_INT 0
9420: PUSH
9421: LD_INT 0
9423: PUSH
9424: LD_INT 0
9426: PUSH
9427: LD_INT 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9436: LD_VAR 0 1
9440: PUSH
9441: LD_INT 4
9443: GREATER
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: LD_INT 9
9452: NONEQUAL
9453: AND
9454: PUSH
9455: LD_VAR 0 1
9459: PUSH
9460: LD_INT 5
9462: NONEQUAL
9463: AND
9464: PUSH
9465: LD_VAR 0 1
9469: PUSH
9470: LD_INT 8
9472: NONEQUAL
9473: AND
9474: IFFALSE 9499
// bonus := [ 0 , 0 , 0 , 0 ] ;
9476: LD_ADDR_VAR 0 8
9480: PUSH
9481: LD_INT 0
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: LD_INT 0
9489: PUSH
9490: LD_INT 0
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9499: LD_ADDR_OWVAR 30
9503: PUSH
9504: LD_INT 0
9506: PPUSH
9507: LD_INT 2
9509: PPUSH
9510: CALL_OW 12
9514: PUSH
9515: LD_INT 0
9517: PPUSH
9518: LD_INT 2
9520: PPUSH
9521: CALL_OW 12
9525: PUSH
9526: LD_INT 0
9528: PPUSH
9529: LD_INT 2
9531: PPUSH
9532: CALL_OW 12
9536: PUSH
9537: LD_INT 0
9539: PPUSH
9540: LD_INT 2
9542: PPUSH
9543: CALL_OW 12
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9554: LD_ADDR_OWVAR 31
9558: PUSH
9559: LD_VAR 0 4
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: LD_INT 1
9571: ARRAY
9572: PLUS
9573: PUSH
9574: LD_VAR 0 5
9578: PUSH
9579: LD_VAR 0 8
9583: PUSH
9584: LD_INT 2
9586: ARRAY
9587: PLUS
9588: PUSH
9589: LD_VAR 0 6
9593: PUSH
9594: LD_VAR 0 8
9598: PUSH
9599: LD_INT 3
9601: ARRAY
9602: PLUS
9603: PUSH
9604: LD_VAR 0 7
9608: PUSH
9609: LD_VAR 0 8
9613: PUSH
9614: LD_INT 4
9616: ARRAY
9617: PLUS
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9625: LD_ADDR_OWVAR 27
9629: PUSH
9630: LD_INT 1
9632: PPUSH
9633: LD_INT 2
9635: PPUSH
9636: CALL_OW 12
9640: ST_TO_ADDR
// hc_gallery :=  ;
9641: LD_ADDR_OWVAR 33
9645: PUSH
9646: LD_STRING 
9648: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9649: LD_ADDR_OWVAR 29
9653: PUSH
9654: LD_INT 8
9656: PPUSH
9657: LD_INT 12
9659: PPUSH
9660: CALL_OW 12
9664: PUSH
9665: LD_INT 9
9667: PPUSH
9668: LD_INT 11
9670: PPUSH
9671: CALL_OW 12
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: ST_TO_ADDR
// hc_name :=  ;
9680: LD_ADDR_OWVAR 26
9684: PUSH
9685: LD_STRING 
9687: ST_TO_ADDR
// result := CreateHuman ;
9688: LD_ADDR_VAR 0 3
9692: PUSH
9693: CALL_OW 44
9697: ST_TO_ADDR
// end ;
9698: LD_VAR 0 3
9702: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9703: LD_INT 0
9705: PPUSH
9706: PPUSH
// vc_chassis := chassis ;
9707: LD_ADDR_OWVAR 37
9711: PUSH
9712: LD_VAR 0 1
9716: ST_TO_ADDR
// vc_engine := engine ;
9717: LD_ADDR_OWVAR 39
9721: PUSH
9722: LD_VAR 0 2
9726: ST_TO_ADDR
// vc_weapon := weapon ;
9727: LD_ADDR_OWVAR 40
9731: PUSH
9732: LD_VAR 0 3
9736: ST_TO_ADDR
// vc_control := control_manual ;
9737: LD_ADDR_OWVAR 38
9741: PUSH
9742: LD_INT 1
9744: ST_TO_ADDR
// veh := CreateVehicle ;
9745: LD_ADDR_VAR 0 8
9749: PUSH
9750: CALL_OW 45
9754: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9755: LD_VAR 0 8
9759: PPUSH
9760: LD_VAR 0 5
9764: PPUSH
9765: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9769: LD_VAR 0 8
9773: PPUSH
9774: LD_VAR 0 4
9778: PPUSH
9779: LD_INT 0
9781: PPUSH
9782: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9786: LD_INT 3
9788: PPUSH
9789: LD_VAR 0 6
9793: PPUSH
9794: CALL 9164 0 2
9798: PPUSH
9799: LD_VAR 0 8
9803: PPUSH
9804: CALL_OW 52
// end ;
9808: LD_VAR 0 7
9812: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
9819: PPUSH
9820: PPUSH
9821: PPUSH
// uc_side := side ;
9822: LD_ADDR_OWVAR 20
9826: PUSH
9827: LD_VAR 0 1
9831: ST_TO_ADDR
// uc_nation := nation_arabian ;
9832: LD_ADDR_OWVAR 21
9836: PUSH
9837: LD_INT 2
9839: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9840: LD_ADDR_VAR 0 10
9844: PUSH
9845: LD_INT 14
9847: PUSH
9848: EMPTY
9849: LIST
9850: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9851: LD_ADDR_VAR 0 11
9855: PUSH
9856: LD_INT 24
9858: PUSH
9859: LD_INT 25
9861: PUSH
9862: LD_INT 27
9864: PUSH
9865: LD_INT 28
9867: PUSH
9868: LD_INT 29
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: ST_TO_ADDR
// case typ of 1 :
9878: LD_VAR 0 3
9882: PUSH
9883: LD_INT 1
9885: DOUBLE
9886: EQUAL
9887: IFTRUE 9891
9889: GO 10063
9891: POP
// begin for i = 1 to num do
9892: LD_ADDR_VAR 0 6
9896: PUSH
9897: DOUBLE
9898: LD_INT 1
9900: DEC
9901: ST_TO_ADDR
9902: LD_VAR 0 2
9906: PUSH
9907: FOR_TO
9908: IFFALSE 10059
// begin vc_chassis := chassis [ 1 ] ;
9910: LD_ADDR_OWVAR 37
9914: PUSH
9915: LD_VAR 0 10
9919: PUSH
9920: LD_INT 1
9922: ARRAY
9923: ST_TO_ADDR
// vc_engine := engine_combustion ;
9924: LD_ADDR_OWVAR 39
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// vc_control := control_manual ;
9932: LD_ADDR_OWVAR 38
9936: PUSH
9937: LD_INT 1
9939: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
9940: LD_ADDR_OWVAR 40
9944: PUSH
9945: LD_VAR 0 11
9949: PUSH
9950: LD_INT 1
9952: PPUSH
9953: LD_INT 3
9955: PPUSH
9956: CALL_OW 12
9960: ARRAY
9961: ST_TO_ADDR
// veh := CreateVehicle ;
9962: LD_ADDR_VAR 0 9
9966: PUSH
9967: CALL_OW 45
9971: ST_TO_ADDR
// if area = north_spawn then
9972: LD_VAR 0 4
9976: PUSH
9977: LD_INT 6
9979: EQUAL
9980: IFFALSE 9996
// SetDir ( veh , 3 ) else
9982: LD_VAR 0 9
9986: PPUSH
9987: LD_INT 3
9989: PPUSH
9990: CALL_OW 233
9994: GO 10008
// SetDir ( veh , 1 ) ;
9996: LD_VAR 0 9
10000: PPUSH
10001: LD_INT 1
10003: PPUSH
10004: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10008: LD_VAR 0 9
10012: PPUSH
10013: LD_VAR 0 4
10017: PPUSH
10018: LD_INT 0
10020: PPUSH
10021: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_EXP 4
10037: PPUSH
10038: CALL 9164 0 2
10042: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10043: LD_VAR 0 7
10047: PPUSH
10048: LD_VAR 0 9
10052: PPUSH
10053: CALL_OW 52
// end ;
10057: GO 9907
10059: POP
10060: POP
// end ; 2 :
10061: GO 10322
10063: LD_INT 2
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10321
10071: POP
// begin for i = 1 to num do
10072: LD_ADDR_VAR 0 6
10076: PUSH
10077: DOUBLE
10078: LD_INT 1
10080: DEC
10081: ST_TO_ADDR
10082: LD_VAR 0 2
10086: PUSH
10087: FOR_TO
10088: IFFALSE 10239
// begin vc_chassis := chassis [ 1 ] ;
10090: LD_ADDR_OWVAR 37
10094: PUSH
10095: LD_VAR 0 10
10099: PUSH
10100: LD_INT 1
10102: ARRAY
10103: ST_TO_ADDR
// vc_engine := engine_combustion ;
10104: LD_ADDR_OWVAR 39
10108: PUSH
10109: LD_INT 1
10111: ST_TO_ADDR
// vc_control := control_manual ;
10112: LD_ADDR_OWVAR 38
10116: PUSH
10117: LD_INT 1
10119: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10120: LD_ADDR_OWVAR 40
10124: PUSH
10125: LD_VAR 0 11
10129: PUSH
10130: LD_INT 3
10132: PPUSH
10133: LD_INT 5
10135: PPUSH
10136: CALL_OW 12
10140: ARRAY
10141: ST_TO_ADDR
// veh := CreateVehicle ;
10142: LD_ADDR_VAR 0 9
10146: PUSH
10147: CALL_OW 45
10151: ST_TO_ADDR
// if area = north_spawn then
10152: LD_VAR 0 4
10156: PUSH
10157: LD_INT 6
10159: EQUAL
10160: IFFALSE 10176
// SetDir ( veh , 3 ) else
10162: LD_VAR 0 9
10166: PPUSH
10167: LD_INT 3
10169: PPUSH
10170: CALL_OW 233
10174: GO 10188
// SetDir ( veh , 1 ) ;
10176: LD_VAR 0 9
10180: PPUSH
10181: LD_INT 1
10183: PPUSH
10184: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10188: LD_VAR 0 9
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: LD_INT 0
10200: PPUSH
10201: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10205: LD_ADDR_VAR 0 7
10209: PUSH
10210: LD_INT 1
10212: PPUSH
10213: LD_EXP 4
10217: PPUSH
10218: CALL 9164 0 2
10222: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10223: LD_VAR 0 7
10227: PPUSH
10228: LD_VAR 0 9
10232: PPUSH
10233: CALL_OW 52
// end ;
10237: GO 10087
10239: POP
10240: POP
// for i = 1 to 4 do
10241: LD_ADDR_VAR 0 6
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 4
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10317
// begin uc_nation := 0 ;
10257: LD_ADDR_OWVAR 21
10261: PUSH
10262: LD_INT 0
10264: ST_TO_ADDR
// hc_class := 17 ;
10265: LD_ADDR_OWVAR 28
10269: PUSH
10270: LD_INT 17
10272: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10273: LD_ADDR_OWVAR 29
10277: PUSH
10278: LD_INT 11
10280: PUSH
10281: LD_INT 13
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: ST_TO_ADDR
// un := CreateHuman ;
10288: LD_ADDR_VAR 0 7
10292: PUSH
10293: CALL_OW 44
10297: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10298: LD_VAR 0 7
10302: PPUSH
10303: LD_VAR 0 4
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 49
// end ;
10315: GO 10254
10317: POP
10318: POP
// end ; end ;
10319: GO 10322
10321: POP
// end ;
10322: LD_VAR 0 5
10326: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10327: LD_INT 0
10329: PPUSH
10330: PPUSH
10331: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10332: LD_ADDR_VAR 0 5
10336: PUSH
10337: LD_INT 22
10339: PUSH
10340: LD_VAR 0 3
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: PPUSH
10354: LD_VAR 0 1
10358: PPUSH
10359: LD_VAR 0 2
10363: PPUSH
10364: CALL_OW 73
10368: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10369: LD_ADDR_VAR 0 6
10373: PUSH
10374: LD_VAR 0 5
10378: PPUSH
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: CALL_OW 297
10393: ST_TO_ADDR
// result := dist ;
10394: LD_ADDR_VAR 0 4
10398: PUSH
10399: LD_VAR 0 6
10403: ST_TO_ADDR
// end ; end_of_file
10404: LD_VAR 0 4
10408: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10409: LD_VAR 0 1
10413: PUSH
10414: LD_INT 1
10416: EQUAL
10417: IFFALSE 10426
// YouLost ( jota-lose ) ;
10419: LD_STRING jota-lose
10421: PPUSH
10422: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10426: LD_EXP 1
10430: PUSH
10431: LD_INT 2
10433: EQUAL
10434: PUSH
10435: LD_EXP 8
10439: PUSH
10440: LD_INT 0
10442: EQUAL
10443: AND
10444: IFFALSE 10759
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10446: LD_VAR 0 1
10450: PPUSH
10451: CALL_OW 255
10455: PUSH
10456: LD_INT 1
10458: EQUAL
10459: PUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 11
10467: PPUSH
10468: LD_INT 21
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 70
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: LD_INT 30
10488: PUSH
10489: LD_INT 6
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 30
10498: PUSH
10499: LD_INT 10
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 30
10508: PUSH
10509: LD_INT 7
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: LD_INT 30
10518: PUSH
10519: LD_INT 8
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: PPUSH
10545: CALL_OW 69
10549: DIFF
10550: IN
10551: AND
10552: IFFALSE 10638
// begin ai_build := ai_build ^ GetBType ( un ) ;
10554: LD_ADDR_EXP 10
10558: PUSH
10559: LD_EXP 10
10563: PUSH
10564: LD_VAR 0 1
10568: PPUSH
10569: CALL_OW 266
10573: ADD
10574: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10575: LD_ADDR_EXP 10
10579: PUSH
10580: LD_EXP 10
10584: PUSH
10585: LD_VAR 0 1
10589: PPUSH
10590: CALL_OW 250
10594: ADD
10595: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10596: LD_ADDR_EXP 10
10600: PUSH
10601: LD_EXP 10
10605: PUSH
10606: LD_VAR 0 1
10610: PPUSH
10611: CALL_OW 251
10615: ADD
10616: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10617: LD_ADDR_EXP 10
10621: PUSH
10622: LD_EXP 10
10626: PUSH
10627: LD_VAR 0 1
10631: PPUSH
10632: CALL_OW 254
10636: ADD
10637: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10638: LD_VAR 0 1
10642: PPUSH
10643: CALL_OW 255
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: PUSH
10652: LD_VAR 0 1
10656: PUSH
10657: LD_INT 21
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PPUSH
10667: CALL_OW 69
10671: IN
10672: AND
10673: IFFALSE 10759
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10675: LD_ADDR_EXP 11
10679: PUSH
10680: LD_EXP 11
10684: PUSH
10685: LD_VAR 0 1
10689: PPUSH
10690: CALL_OW 265
10694: ADD
10695: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10696: LD_ADDR_EXP 11
10700: PUSH
10701: LD_EXP 11
10705: PUSH
10706: LD_VAR 0 1
10710: PPUSH
10711: CALL_OW 262
10715: ADD
10716: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10717: LD_ADDR_EXP 11
10721: PUSH
10722: LD_EXP 11
10726: PUSH
10727: LD_VAR 0 1
10731: PPUSH
10732: CALL_OW 263
10736: ADD
10737: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10738: LD_ADDR_EXP 11
10742: PUSH
10743: LD_EXP 11
10747: PUSH
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 264
10757: ADD
10758: ST_TO_ADDR
// end ; end ; end ;
10759: PPOPN 1
10761: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10762: LD_EXP 1
10766: PUSH
10767: LD_INT 1
10769: EQUAL
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 21
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: PUSH
10800: LD_INT 0
10802: EQUAL
10803: AND
10804: IFFALSE 10816
10806: GO 10808
10808: DISABLE
// YouLost ( peo-lose ) ;
10809: LD_STRING peo-lose
10811: PPUSH
10812: CALL_OW 104
10816: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
10817: LD_EXP 1
10821: PUSH
10822: LD_INT 2
10824: EQUAL
10825: PUSH
10826: LD_INT 22
10828: PUSH
10829: LD_INT 3
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 21
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 69
10854: PUSH
10855: LD_INT 0
10857: EQUAL
10858: AND
10859: IFFALSE 10871
10861: GO 10863
10863: DISABLE
// YouLost ( peo-lose ) ;
10864: LD_STRING peo-lose
10866: PPUSH
10867: CALL_OW 104
10871: END
// every 0 0$03 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = need_to_win do var i ;
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 274
10879: PPUSH
10880: LD_INT 3
10882: PPUSH
10883: CALL_OW 275
10887: PUSH
10888: LD_EXP 5
10892: EQUAL
10893: IFFALSE 10979
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
// begin if GetSide ( jota_base ) = your_side then
10901: LD_INT 1
10903: PPUSH
10904: CALL_OW 255
10908: PUSH
10909: LD_OWVAR 2
10913: EQUAL
10914: IFFALSE 10957
// begin for i = 1 to 3 do
10916: LD_ADDR_VAR 0 1
10920: PUSH
10921: DOUBLE
10922: LD_INT 1
10924: DEC
10925: ST_TO_ADDR
10926: LD_INT 3
10928: PUSH
10929: FOR_TO
10930: IFFALSE 10944
// AddMedal ( med , 1 ) ;
10932: LD_STRING med
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: CALL_OW 101
10942: GO 10929
10944: POP
10945: POP
// GiveMedals ( MAIN ) ;
10946: LD_STRING MAIN
10948: PPUSH
10949: CALL_OW 102
// YouWin ;
10953: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 255
10964: PUSH
10965: LD_OWVAR 2
10969: NONEQUAL
10970: IFFALSE 10979
// YouLost ( source ) ;
10972: LD_STRING source
10974: PPUSH
10975: CALL_OW 104
// end ; end_of_file
10979: PPOPN 1
10981: END
// every 2 2$05 + 0 0$11 do
10982: GO 10984
10984: DISABLE
// begin enable ;
10985: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
10986: LD_INT 1
10988: PPUSH
10989: LD_INT 5
10991: PPUSH
10992: CALL_OW 12
10996: PPUSH
10997: LD_INT 7
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11007: LD_INT 350
11009: PPUSH
11010: LD_INT 1295
11012: PPUSH
11013: CALL_OW 12
11017: PPUSH
11018: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11022: LD_INT 1
11024: PPUSH
11025: LD_INT 5
11027: PPUSH
11028: CALL_OW 12
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 57
// end ;
11040: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11041: LD_EXP 1
11045: PUSH
11046: LD_INT 2
11048: EQUAL
11049: PUSH
11050: LD_EXP 8
11054: PUSH
11055: LD_INT 0
11057: EQUAL
11058: AND
11059: IFFALSE 11149
11061: GO 11063
11063: DISABLE
// begin enable ;
11064: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11065: LD_INT 1
11067: PPUSH
11068: LD_INT 5
11070: PPUSH
11071: CALL_OW 12
11075: PPUSH
11076: LD_INT 7
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11086: LD_INT 350
11088: PPUSH
11089: LD_INT 1750
11091: PPUSH
11092: CALL_OW 12
11096: PPUSH
11097: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11101: LD_EXP 6
11105: PUSH
11106: LD_INT 73500
11108: PUSH
11109: LD_INT 63000
11111: PUSH
11112: LD_INT 52500
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: PUSH
11120: LD_EXP 2
11124: ARRAY
11125: LESSEQUAL
11126: IFFALSE 11149
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 5
11133: PPUSH
11134: CALL_OW 12
11138: PPUSH
11139: LD_INT 12
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 55
// end ;
11149: END
