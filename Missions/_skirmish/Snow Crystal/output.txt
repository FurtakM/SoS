// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 61 , 121 ) ;
   4: LD_INT 61
   6: PPUSH
   7: LD_INT 121
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// GameType ;
  21: CALL 314 0 0
// PrepareAmerican ;
  25: CALL 708 0 0
// if game_type = 2 then
  29: LD_EXP 1
  33: PUSH
  34: LD_INT 2
  36: EQUAL
  37: IFFALSE 43
// PrepareRussian ;
  39: CALL 6983 0 0
// GameStarted ;
  43: CALL 488 0 0
// end ;
  47: END
// every 0 0$01 trigger game_type do var sib , side ;
  48: LD_EXP 1
  52: IFFALSE 170
  54: GO 56
  56: DISABLE
  57: LD_INT 0
  59: PPUSH
  60: PPUSH
// begin enable ;
  61: ENABLE
// if game_type = 1 then
  62: LD_EXP 1
  66: PUSH
  67: LD_INT 1
  69: EQUAL
  70: IFFALSE 82
// side := 1 else
  72: LD_ADDR_VAR 0 2
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
  80: GO 90
// side := 3 ;
  82: LD_ADDR_VAR 0 2
  86: PUSH
  87: LD_INT 3
  89: ST_TO_ADDR
// sib := GetSibAmount ( side ) ;
  90: LD_ADDR_VAR 0 1
  94: PUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL 10510 0 1
 104: ST_TO_ADDR
// if sib < 0 then
 105: LD_VAR 0 1
 109: PUSH
 110: LD_INT 0
 112: LESS
 113: IFFALSE 123
// sib := 0 ;
 115: LD_ADDR_VAR 0 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// display_strings := [ #tick , timer , #sib , sib , need_to_win ] ;
 123: LD_ADDR_OWVAR 47
 127: PUSH
 128: LD_STRING #tick
 130: PUSH
 131: LD_EXP 6
 135: PUSH
 136: LD_STRING #sib
 138: PUSH
 139: LD_VAR 0 1
 143: PUSH
 144: LD_EXP 5
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// timer := timer + 0 0$01 ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_EXP 6
 165: PUSH
 166: LD_INT 35
 168: PLUS
 169: ST_TO_ADDR
// end ;
 170: PPOPN 2
 172: END
// every 1 do
 173: GO 175
 175: DISABLE
// begin while ( true ) do
 176: LD_INT 1
 178: IFFALSE 313
// begin music_nat := 1 ;
 180: LD_ADDR_OWVAR 71
 184: PUSH
 185: LD_INT 1
 187: ST_TO_ADDR
// music_class := 5 ;
 188: LD_ADDR_OWVAR 72
 192: PUSH
 193: LD_INT 5
 195: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 196: LD_INT 7350
 198: PPUSH
 199: LD_INT 10500
 201: PPUSH
 202: CALL_OW 12
 206: PPUSH
 207: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 211: LD_ADDR_OWVAR 71
 215: PUSH
 216: LD_INT 1
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 2
 231: PPUSH
 232: CALL_OW 12
 236: ARRAY
 237: ST_TO_ADDR
// music_class := 0 ;
 238: LD_ADDR_OWVAR 72
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 246: LD_INT 7350
 248: PPUSH
 249: LD_INT 10500
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: CALL_OW 67
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 261: LD_ADDR_OWVAR 71
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: LD_INT 1
 278: PPUSH
 279: LD_INT 2
 281: PPUSH
 282: CALL_OW 12
 286: ARRAY
 287: ST_TO_ADDR
// music_class := 0 ;
 288: LD_ADDR_OWVAR 72
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// Wait ( Rand ( 3 3$30 , 5 5$00 ) ) ;
 296: LD_INT 7350
 298: PPUSH
 299: LD_INT 10500
 301: PPUSH
 302: CALL_OW 12
 306: PPUSH
 307: CALL_OW 67
// end ;
 311: GO 176
// end ; end_of_file
 313: END
// export game_type , game_diff , game_skill , game_eskill ; export function GameType ; begin
 314: LD_INT 0
 316: PPUSH
// game_diff := GetMultiplayerSetting ( 0 ) ;
 317: LD_ADDR_EXP 2
 321: PUSH
 322: LD_INT 0
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// game_type := GetMultiplayerSetting ( 1 ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_INT 1
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// if not game_diff then
 343: LD_EXP 2
 347: NOT
 348: IFFALSE 358
// game_diff := 2 ;
 350: LD_ADDR_EXP 2
 354: PUSH
 355: LD_INT 2
 357: ST_TO_ADDR
// if not game_type then
 358: LD_EXP 1
 362: NOT
 363: IFFALSE 373
// game_type := 2 ;
 365: LD_ADDR_EXP 1
 369: PUSH
 370: LD_INT 2
 372: ST_TO_ADDR
// if game_type = 1 then
 373: LD_EXP 1
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 403
// case Query ( GameRulesAm ) of 1 :
 383: LD_STRING GameRulesAm
 385: PPUSH
 386: CALL_OW 97
 390: PUSH
 391: LD_INT 1
 393: DOUBLE
 394: EQUAL
 395: IFTRUE 399
 397: GO 402
 399: POP
// ; end ;
 400: GO 403
 402: POP
// if game_type = 2 then
 403: LD_EXP 1
 407: PUSH
 408: LD_INT 2
 410: EQUAL
 411: IFFALSE 433
// case Query ( GameRulesRu ) of 1 :
 413: LD_STRING GameRulesRu
 415: PPUSH
 416: CALL_OW 97
 420: PUSH
 421: LD_INT 1
 423: DOUBLE
 424: EQUAL
 425: IFTRUE 429
 427: GO 432
 429: POP
// ; end ;
 430: GO 433
 432: POP
// game_skill := [ 6 , 4 , 2 ] [ game_diff ] ;
 433: LD_ADDR_EXP 3
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 4
 443: PUSH
 444: LD_INT 2
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: PUSH
 452: LD_EXP 2
 456: ARRAY
 457: ST_TO_ADDR
// game_eskill := [ 4 , 5 , 6 ] [ game_diff ] ;
 458: LD_ADDR_EXP 4
 462: PUSH
 463: LD_INT 4
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_EXP 2
 481: ARRAY
 482: ST_TO_ADDR
// end ;
 483: LD_VAR 0 1
 487: RET
// export need_to_win , timer , force_timer , depot_captured ; export function GameStarted ; begin
 488: LD_INT 0
 490: PPUSH
// if game_type = 1 then
 491: LD_EXP 1
 495: PUSH
 496: LD_INT 1
 498: EQUAL
 499: IFFALSE 568
// begin need_to_win := [ 350 , 375 , 400 ] [ game_diff ] ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_INT 350
 508: PUSH
 509: LD_INT 375
 511: PUSH
 512: LD_INT 400
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_EXP 2
 524: ARRAY
 525: ST_TO_ADDR
// force_timer := [ 95 , 100 , 105 ] [ game_diff ] ;
 526: LD_ADDR_EXP 7
 530: PUSH
 531: LD_INT 95
 533: PUSH
 534: LD_INT 100
 536: PUSH
 537: LD_INT 105
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_EXP 2
 549: ARRAY
 550: ST_TO_ADDR
// CenterNowOnXY ( 84 , 45 ) ;
 551: LD_INT 84
 553: PPUSH
 554: LD_INT 45
 556: PPUSH
 557: CALL_OW 86
// ChangeMissionObjectives ( GType1 ) ;
 561: LD_STRING GType1
 563: PPUSH
 564: CALL_OW 337
// end ; if game_type = 2 then
 568: LD_EXP 1
 572: PUSH
 573: LD_INT 2
 575: EQUAL
 576: IFFALSE 658
// begin need_to_win := [ 300 , 350 , 400 ] [ game_diff ] ;
 578: LD_ADDR_EXP 5
 582: PUSH
 583: LD_INT 300
 585: PUSH
 586: LD_INT 350
 588: PUSH
 589: LD_INT 400
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PUSH
 597: LD_EXP 2
 601: ARRAY
 602: ST_TO_ADDR
// depot_captured := false ;
 603: LD_ADDR_EXP 8
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// CenterNowOnUnits ( ru_dow ) ;
 611: LD_EXP 18
 615: PPUSH
 616: CALL_OW 87
// ChangeMissionObjectives ( GType2 ) ;
 620: LD_STRING GType2
 622: PPUSH
 623: CALL_OW 337
// Wait ( 0 0$03 ) ;
 627: LD_INT 105
 629: PPUSH
 630: CALL_OW 67
// SayRadio ( gorki , D-gorky1 ) ;
 634: LD_EXP 19
 638: PPUSH
 639: LD_STRING D-gorky1
 641: PPUSH
 642: CALL_OW 94
// Say ( ru_dow , D-rudow1 ) ;
 646: LD_EXP 18
 650: PPUSH
 651: LD_STRING D-rudow1
 653: PPUSH
 654: CALL_OW 88
// end ; timer := 0 0$00 ;
 658: LD_ADDR_EXP 6
 662: PUSH
 663: LD_INT 0
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 1
 670: RET
// every 3 3$00 do
 671: GO 673
 673: DISABLE
// begin enable ;
 674: ENABLE
// SetWeather ( [ 0 , 2 ] [ rand ( 1 , 2 ) ] , 570 , 350 ) ;
 675: LD_INT 0
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_INT 2
 690: PPUSH
 691: CALL_OW 12
 695: ARRAY
 696: PPUSH
 697: LD_INT 570
 699: PPUSH
 700: LD_INT 350
 702: PPUSH
 703: CALL_OW 550
// end ; end_of_file
 707: END
// export am_comander ; export ai_build , ai_vehs , ai_tech ; export function PrepareAmerican ; var i , un , filter , list , p ; begin
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// SetBName ( jota_base , jota ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING jota
 721: PPUSH
 722: CALL_OW 500
// if game_type = 1 then
 726: LD_EXP 1
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 1254
// begin your_side := 1 ;
 736: LD_ADDR_OWVAR 2
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// list := [ west_bun1 , east_bun , am_gun ] ;
 744: LD_ADDR_VAR 0 5
 748: PUSH
 749: LD_INT 29
 751: PUSH
 752: LD_INT 35
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: LIST
 762: ST_TO_ADDR
// if game_diff = 1 then
 763: LD_EXP 2
 767: PUSH
 768: LD_INT 1
 770: EQUAL
 771: IFFALSE 786
// SetTech ( tech_comp1 , 3 , state_researched ) ;
 773: LD_INT 57
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: CALL_OW 322
// if game_diff = 2 then
 786: LD_EXP 2
 790: PUSH
 791: LD_INT 2
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_comp2 , 3 , state_researched ) ;
 796: LD_INT 58
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 2
 804: PPUSH
 805: CALL_OW 322
// if game_diff = 3 then
 809: LD_EXP 2
 813: PUSH
 814: LD_INT 3
 816: EQUAL
 817: IFFALSE 832
// SetTech ( tech_comp3 , 3 , state_researched ) ;
 819: LD_INT 59
 821: PPUSH
 822: LD_INT 3
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 322
// for i = 1 to list do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 5
 846: PUSH
 847: FOR_TO
 848: IFFALSE 867
// RemoveUnit ( list [ i ] ) ;
 850: LD_VAR 0 5
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 64
 865: GO 847
 867: POP
 868: POP
// ResetFog ;
 869: CALL_OW 335
// uc_side := 1 ;
 873: LD_ADDR_OWVAR 20
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// uc_nation := 1 ;
 881: LD_ADDR_OWVAR 21
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// for i = 1 to 4 - ( game_diff ) do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_INT 4
 901: PUSH
 902: LD_EXP 2
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 962
// begin uc_side := 1 ;
 911: LD_ADDR_OWVAR 20
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// uc_nation := 1 ;
 919: LD_ADDR_OWVAR 21
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// un := CreateHumanWithClass ( 1 , game_skill ) ;
 927: LD_ADDR_VAR 0 3
 931: PUSH
 932: LD_INT 1
 934: PPUSH
 935: LD_EXP 3
 939: PPUSH
 940: CALL 9265 0 2
 944: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
 945: LD_VAR 0 3
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 908
 962: POP
 963: POP
// for i = 1 to 5 - ( game_diff ) do
 964: LD_ADDR_VAR 0 2
 968: PUSH
 969: DOUBLE
 970: LD_INT 1
 972: DEC
 973: ST_TO_ADDR
 974: LD_INT 5
 976: PUSH
 977: LD_EXP 2
 981: MINUS
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1037
// begin uc_side := 1 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// uc_nation := 1 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// un := CreateHumanWithClass ( 2 , game_skill ) ;
1002: LD_ADDR_VAR 0 3
1006: PUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_EXP 3
1014: PPUSH
1015: CALL 9265 0 2
1019: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 983
1037: POP
1038: POP
// for i = 1 to 5 - ( game_diff ) do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 5
1051: PUSH
1052: LD_EXP 2
1056: MINUS
1057: PUSH
1058: FOR_TO
1059: IFFALSE 1112
// begin uc_side := 1 ;
1061: LD_ADDR_OWVAR 20
1065: PUSH
1066: LD_INT 1
1068: ST_TO_ADDR
// uc_nation := 1 ;
1069: LD_ADDR_OWVAR 21
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , game_skill ) ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_INT 3
1084: PPUSH
1085: LD_EXP 3
1089: PPUSH
1090: CALL 9265 0 2
1094: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1095: LD_VAR 0 3
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 49
// end ;
1110: GO 1058
1112: POP
1113: POP
// for i = 1 to 5 - ( game_diff ) do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: LD_EXP 2
1131: MINUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1187
// begin uc_side := 1 ;
1136: LD_ADDR_OWVAR 20
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// uc_nation := 1 ;
1144: LD_ADDR_OWVAR 21
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// un := CreateHumanWithClass ( 4 , game_skill ) ;
1152: LD_ADDR_VAR 0 3
1156: PUSH
1157: LD_INT 4
1159: PPUSH
1160: LD_EXP 3
1164: PPUSH
1165: CALL 9265 0 2
1169: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// end ;
1185: GO 1133
1187: POP
1188: POP
// hc_importance := 100 ;
1189: LD_ADDR_OWVAR 32
1193: PUSH
1194: LD_INT 100
1196: ST_TO_ADDR
// uc_side := 1 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// am_comander := CreateHumanWithClass ( 1 , game_skill ) ;
1213: LD_ADDR_EXP 9
1217: PUSH
1218: LD_INT 1
1220: PPUSH
1221: LD_EXP 3
1225: PPUSH
1226: CALL 9265 0 2
1230: ST_TO_ADDR
// PlaceUnitArea ( am_comander , am_base , false ) ;
1231: LD_EXP 9
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// hc_importance := 0 ;
1246: LD_ADDR_OWVAR 32
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ; if game_type = 2 then
1254: LD_EXP 1
1258: PUSH
1259: LD_INT 2
1261: EQUAL
1262: IFFALSE 2427
// begin uc_side := 1 ;
1264: LD_ADDR_OWVAR 20
1268: PUSH
1269: LD_INT 1
1271: ST_TO_ADDR
// uc_nation := 1 ;
1272: LD_ADDR_OWVAR 21
1276: PUSH
1277: LD_INT 1
1279: ST_TO_ADDR
// SetResourceType ( GetBase ( jota_base ) , mat_cans , 1000 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 274
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: LD_INT 1000
1293: PPUSH
1294: CALL_OW 277
// SetTech ( tech_sibdet , 1 , state_researched ) ;
1298: LD_INT 20
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL_OW 322
// for i = 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1384
// begin for p = 1 to 5 do
1327: LD_ADDR_VAR 0 6
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_INT 5
1339: PUSH
1340: FOR_TO
1341: IFFALSE 1380
// begin un := CreateHumanWithClass ( i , game_eskill ) ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: LD_EXP 4
1357: PPUSH
1358: CALL 9265 0 2
1362: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 1
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// end ;
1378: GO 1340
1380: POP
1381: POP
// end ;
1382: GO 1324
1384: POP
1385: POP
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1386: LD_ADDR_VAR 0 3
1390: PUSH
1391: LD_INT 5
1393: PPUSH
1394: LD_EXP 4
1398: PPUSH
1399: CALL 9265 0 2
1403: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_1 , false ) ;
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_INT 2
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// ComEnterUnit ( un , west_bun1 ) ;
1419: LD_VAR 0 3
1423: PPUSH
1424: LD_INT 29
1426: PPUSH
1427: CALL_OW 120
// un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1431: LD_ADDR_VAR 0 3
1435: PUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_EXP 4
1443: PPUSH
1444: CALL 9265 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_3 , false ) ;
1449: LD_VAR 0 3
1453: PPUSH
1454: LD_INT 4
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// ComEnterUnit ( un , base_bun ) ;
1464: LD_VAR 0 3
1468: PPUSH
1469: LD_INT 20
1471: PPUSH
1472: CALL_OW 120
// if game_diff > 1 then
1476: LD_EXP 2
1480: PUSH
1481: LD_INT 1
1483: GREATER
1484: IFFALSE 1628
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1486: LD_ADDR_VAR 0 3
1490: PUSH
1491: LD_INT 5
1493: PPUSH
1494: LD_EXP 4
1498: PPUSH
1499: CALL 9265 0 2
1503: ST_TO_ADDR
// PlaceUnitArea ( un , am_sniper_2 , false ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 49
// for i = 1 to 2 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_INT 2
1531: PUSH
1532: FOR_TO
1533: IFFALSE 1626
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 5
1542: PPUSH
1543: LD_EXP 4
1547: PPUSH
1548: CALL 9265 0 2
1552: ST_TO_ADDR
// PlaceUnitArea ( un , am_base , false ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_INT 0
1563: PPUSH
1564: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
1568: LD_VAR 0 3
1572: PPUSH
1573: LD_INT 22
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 30
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 24
1595: PUSH
1596: LD_INT 251
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: EMPTY
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 120
// end ;
1624: GO 1532
1626: POP
1627: POP
// end ; if game_diff > 1 then
1628: LD_EXP 2
1632: PUSH
1633: LD_INT 1
1635: GREATER
1636: IFFALSE 1674
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1638: LD_ADDR_VAR 0 3
1642: PUSH
1643: LD_INT 5
1645: PPUSH
1646: LD_EXP 4
1650: PPUSH
1651: CALL 9265 0 2
1655: ST_TO_ADDR
// PlaceUnitXY ( un , 37 , 44 , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_INT 37
1663: PPUSH
1664: LD_INT 44
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 48
// end ; if game_diff > 2 then
1674: LD_EXP 2
1678: PUSH
1679: LD_INT 2
1681: GREATER
1682: IFFALSE 1732
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
1684: LD_ADDR_VAR 0 3
1688: PUSH
1689: LD_INT 5
1691: PPUSH
1692: LD_EXP 4
1696: PPUSH
1697: CALL 9265 0 2
1701: ST_TO_ADDR
// PlaceUnitXY ( un , 106 , 45 , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 106
1709: PPUSH
1710: LD_INT 45
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 48
// ComEnterUnit ( un , east_bun ) ;
1720: LD_VAR 0 3
1724: PPUSH
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 120
// end ; if game_diff < 3 then
1732: LD_EXP 2
1736: PUSH
1737: LD_INT 3
1739: LESS
1740: IFFALSE 1749
// RemoveUnit ( east_bun ) ;
1742: LD_INT 35
1744: PPUSH
1745: CALL_OW 64
// if game_diff > 1 then
1749: LD_EXP 2
1753: PUSH
1754: LD_INT 1
1756: GREATER
1757: IFFALSE 1772
// SetTech ( tech_rocket , 1 , state_researched ) ;
1759: LD_INT 40
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL_OW 322
// case game_diff of 1 :
1772: LD_EXP 2
1776: PUSH
1777: LD_INT 1
1779: DOUBLE
1780: EQUAL
1781: IFTRUE 1785
1783: GO 1859
1785: POP
// begin ai_build := [ b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 ] ;
1786: LD_ADDR_EXP 10
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 78
1796: PUSH
1797: LD_INT 52
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: LD_INT 26
1805: PUSH
1806: LD_INT 96
1808: PUSH
1809: LD_INT 58
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 32
1817: PUSH
1818: LD_INT 72
1820: PUSH
1821: LD_INT 34
1823: PUSH
1824: LD_INT 3
1826: PUSH
1827: LD_INT 32
1829: PUSH
1830: LD_INT 83
1832: PUSH
1833: LD_INT 54
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// end ; 2 :
1857: GO 2136
1859: LD_INT 2
1861: DOUBLE
1862: EQUAL
1863: IFTRUE 1867
1865: GO 1989
1867: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_oil_power , 69 , 39 , 3 ] ;
1868: LD_ADDR_EXP 10
1872: PUSH
1873: LD_INT 18
1875: PUSH
1876: LD_INT 73
1878: PUSH
1879: LD_INT 42
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 26
1887: PUSH
1888: LD_INT 78
1890: PUSH
1891: LD_INT 52
1893: PUSH
1894: LD_INT 3
1896: PUSH
1897: LD_INT 26
1899: PUSH
1900: LD_INT 96
1902: PUSH
1903: LD_INT 58
1905: PUSH
1906: LD_INT 0
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: LD_INT 72
1914: PUSH
1915: LD_INT 34
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: LD_INT 83
1926: PUSH
1927: LD_INT 54
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 32
1935: PUSH
1936: LD_INT 82
1938: PUSH
1939: LD_INT 38
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 69
1950: PUSH
1951: LD_INT 39
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// end ; 3 :
1987: GO 2136
1989: LD_INT 3
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2135
1997: POP
// begin ai_build := [ b_ext_rocket , 73 , 42 , 2 , b_oil_power , 78 , 52 , 3 , b_oil_power , 96 , 58 , 0 , b_bunker , 72 , 34 , 3 , b_bunker , 83 , 54 , 0 , b_bunker , 82 , 38 , 2 , b_bunker , 103 , 59 , 3 , b_oil_power , 69 , 39 , 3 ] ;
1998: LD_ADDR_EXP 10
2002: PUSH
2003: LD_INT 18
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 42
2011: PUSH
2012: LD_INT 2
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 78
2020: PUSH
2021: LD_INT 52
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: LD_INT 26
2029: PUSH
2030: LD_INT 96
2032: PUSH
2033: LD_INT 58
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 72
2044: PUSH
2045: LD_INT 34
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: LD_INT 83
2056: PUSH
2057: LD_INT 54
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: LD_INT 32
2065: PUSH
2066: LD_INT 82
2068: PUSH
2069: LD_INT 38
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 103
2080: PUSH
2081: LD_INT 59
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: LD_INT 26
2089: PUSH
2090: LD_INT 69
2092: PUSH
2093: LD_INT 39
2095: PUSH
2096: LD_INT 3
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// end ; end ;
2133: GO 2136
2135: POP
// ai_tech := [ tech_tech1 , tech_oileng , tech_tech2 , tech_weap1 , tech_gatling , tech_weap2 , tech_gun , tech_tech3 ] ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 48
2143: PUSH
2144: LD_INT 47
2146: PUSH
2147: LD_INT 49
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 69
2155: PUSH
2156: LD_INT 52
2158: PUSH
2159: LD_INT 39
2161: PUSH
2162: LD_INT 50
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// case game_diff of 1 :
2175: LD_EXP 2
2179: PUSH
2180: LD_INT 1
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2262
2188: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
2189: LD_ADDR_EXP 11
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 12
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 1
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 4
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: ST_TO_ADDR
// end ; 2 :
2260: GO 2427
2262: LD_INT 2
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2344
2270: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_double_gun , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2271: LD_ADDR_EXP 11
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 7
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: LD_INT 1
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 1
2317: PUSH
2318: LD_INT 1
2320: PUSH
2321: LD_INT 7
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// end ; 3 :
2342: GO 2427
2344: LD_INT 3
2346: DOUBLE
2347: EQUAL
2348: IFTRUE 2352
2350: GO 2426
2352: POP
// begin ai_vehs := [ us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher , us_heavy_tracked , engine_combustion , control_manual , us_rocket_launcher ] ;
2353: LD_ADDR_EXP 11
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 12
2369: PUSH
2370: LD_INT 4
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 7
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 1
2390: PUSH
2391: LD_INT 7
2393: PUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 7
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// end ; end ;
2424: GO 2427
2426: POP
// end ; end ;
2427: LD_VAR 0 1
2431: RET
// export sold_ocp ; export tower_list ; every 0 0$01 do
2432: GO 2434
2434: DISABLE
// begin sold_ocp := [ ] ;
2435: LD_ADDR_EXP 13
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// tower_list := [ ] ;
2442: LD_ADDR_EXP 14
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// end ;
2449: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , sold , filter , sold_em , engs , mechs , sci , empty_towers , towers , damage_pep , damage_build , damage_vehs ;
2450: LD_EXP 1
2454: PUSH
2455: LD_INT 2
2457: EQUAL
2458: PUSH
2459: LD_EXP 8
2463: PUSH
2464: LD_INT 0
2466: EQUAL
2467: AND
2468: IFFALSE 4145
2470: GO 2472
2472: DISABLE
2473: LD_INT 0
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// begin enable ;
2488: ENABLE
// sold := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_lives , 650 ] ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 24
2516: PUSH
2517: LD_INT 650
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: PPUSH
2532: CALL_OW 69
2536: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 650 ] ] ] ) ;
2537: LD_ADDR_VAR 0 6
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 25
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 24
2564: PUSH
2565: LD_INT 650
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: ST_TO_ADDR
// mechs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_lives , 650 ] ] ] ) ;
2585: LD_ADDR_VAR 0 7
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 25
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 24
2612: PUSH
2613: LD_INT 650
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_lives , 650 ] ] ] ) ;
2633: LD_ADDR_VAR 0 8
2637: PUSH
2638: LD_INT 22
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 4
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 650
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: ST_TO_ADDR
// empty_towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
2681: LD_ADDR_VAR 0 9
2685: PUSH
2686: LD_INT 22
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 32
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 58
2708: PUSH
2709: EMPTY
2710: LIST
2711: PUSH
2712: LD_INT 24
2714: PUSH
2715: LD_INT 251
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_bunker ] , [ f_or , [ f_bweapon , us_rocket_launcher ] , [ f_bweapon , us_gatling_gun ] ] , [ f_lives , 251 ] ] ] ) ;
2733: LD_ADDR_VAR 0 10
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 32
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: LD_INT 35
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 35
2773: PUSH
2774: LD_INT 4
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: LD_INT 24
2788: PUSH
2789: LD_INT 251
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: ST_TO_ADDR
// damage_pep := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2810: LD_ADDR_VAR 0 11
2814: PUSH
2815: LD_INT 22
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 21
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 3
2837: PUSH
2838: LD_INT 24
2840: PUSH
2841: LD_INT 650
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// damage_build := FilterUnitsInArea ( def_area , [ [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2865: LD_ADDR_VAR 0 12
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 22
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 21
2885: PUSH
2886: LD_INT 3
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: LD_INT 24
2898: PUSH
2899: LD_INT 1000
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: EMPTY
2916: LIST
2917: PPUSH
2918: CALL_OW 70
2922: ST_TO_ADDR
// damage_vehs := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ] ) ;
2923: LD_ADDR_VAR 0 13
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 24
2953: PUSH
2954: LD_INT 650
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: PPUSH
2973: CALL_OW 69
2977: ST_TO_ADDR
// if GetResourceType ( GetBase ( jota_base ) , mat_oil ) <= 30 then
2978: LD_INT 1
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 275
2993: PUSH
2994: LD_INT 30
2996: LESSEQUAL
2997: IFFALSE 3017
// SetResourceType ( GetBase ( jota_base ) , mat_oil , 100 ) ;
2999: LD_INT 1
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 2
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL_OW 277
// sold_em := ( sold diff sold_ocp ) ;
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_EXP 13
3031: DIFF
3032: ST_TO_ADDR
// if sold > 0 then
3033: LD_VAR 0 3
3037: PUSH
3038: LD_INT 0
3040: GREATER
3041: IFFALSE 3163
// for i = 1 to sold_em do
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_VAR 0 5
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3161
// if empty_towers > 0 then
3061: LD_VAR 0 9
3065: PUSH
3066: LD_INT 0
3068: GREATER
3069: IFFALSE 3097
// ComEnterUnit ( sold_em [ i ] , empty_towers [ 1 ] ) else
3071: LD_VAR 0 5
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: LD_VAR 0 9
3086: PUSH
3087: LD_INT 1
3089: ARRAY
3090: PPUSH
3091: CALL_OW 120
3095: GO 3159
// ComEnterUnit ( sold_em [ i ] , FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_lives , 251 ] ] ] ) [ 1 ] ) ;
3097: LD_VAR 0 5
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 24
3130: PUSH
3131: LD_INT 251
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: CALL_OW 120
3159: GO 3058
3161: POP
3162: POP
// if mechs > 0 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 0
3170: GREATER
3171: IFFALSE 3249
// for i = 1 to mechs do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: DOUBLE
3179: LD_INT 1
3181: DEC
3182: ST_TO_ADDR
3183: LD_VAR 0 7
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3247
// if not IsInUnit ( mechs [ i ] ) and not HasTask ( mechs [ i ] ) then
3191: LD_VAR 0 7
3195: PUSH
3196: LD_VAR 0 1
3200: ARRAY
3201: PPUSH
3202: CALL_OW 310
3206: NOT
3207: PUSH
3208: LD_VAR 0 7
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 314
3223: NOT
3224: AND
3225: IFFALSE 3245
// ComEnterUnit ( mechs [ i ] , am_fac ) ;
3227: LD_VAR 0 7
3231: PUSH
3232: LD_VAR 0 1
3236: ARRAY
3237: PPUSH
3238: LD_INT 14
3240: PPUSH
3241: CALL_OW 120
3245: GO 3188
3247: POP
3248: POP
// if sci > 0 then
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 0
3256: GREATER
3257: IFFALSE 3327
// for i = 1 to sci do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 8
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3325
// if damage_pep = 0 and not HasTask ( sci [ i ] ) then
3277: LD_VAR 0 11
3281: PUSH
3282: LD_INT 0
3284: EQUAL
3285: PUSH
3286: LD_VAR 0 8
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 314
3301: NOT
3302: AND
3303: IFFALSE 3323
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3305: LD_VAR 0 8
3309: PUSH
3310: LD_VAR 0 1
3314: ARRAY
3315: PPUSH
3316: LD_INT 9
3318: PPUSH
3319: CALL_OW 120
3323: GO 3274
3325: POP
3326: POP
// if damage_build > 0 then
3327: LD_VAR 0 12
3331: PUSH
3332: LD_INT 0
3334: GREATER
3335: IFFALSE 3383
// for i = 1 to engs do
3337: LD_ADDR_VAR 0 1
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 6
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3381
// ComRepairBuilding ( engs [ i ] , damage_build [ 1 ] ) ;
3355: LD_VAR 0 6
3359: PUSH
3360: LD_VAR 0 1
3364: ARRAY
3365: PPUSH
3366: LD_VAR 0 12
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 130
3379: GO 3352
3381: POP
3382: POP
// if ai_build > 0 then
3383: LD_EXP 10
3387: PUSH
3388: LD_INT 0
3390: GREATER
3391: IFFALSE 3484
// for i = 1 to engs do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_VAR 0 6
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3482
// if not HasTask ( engs [ i ] ) then
3411: LD_VAR 0 6
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 314
3426: NOT
3427: IFFALSE 3480
// ComBuild ( engs [ i ] , ai_build [ 1 ] , ai_build [ 2 ] , ai_build [ 3 ] , ai_build [ 4 ] ) ;
3429: LD_VAR 0 6
3433: PUSH
3434: LD_VAR 0 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 10
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_EXP 10
3462: PUSH
3463: LD_INT 3
3465: ARRAY
3466: PPUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_INT 4
3474: ARRAY
3475: PPUSH
3476: CALL_OW 145
3480: GO 3408
3482: POP
3483: POP
// if damage_pep > 0 and sci > 0 then
3484: LD_VAR 0 11
3488: PUSH
3489: LD_INT 0
3491: GREATER
3492: PUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 0
3500: GREATER
3501: AND
3502: IFFALSE 3688
// begin for i = 1 to sci do
3504: LD_ADDR_VAR 0 1
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_VAR 0 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3539
// ComExitBuilding ( sci [ i ] ) ;
3522: LD_VAR 0 8
3526: PUSH
3527: LD_VAR 0 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 122
3537: GO 3519
3539: POP
3540: POP
// for i = 1 to damage_pep do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 11
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3636
// begin if not IsInUnit ( damage_pep [ i ] ) then
3559: LD_VAR 0 11
3563: PUSH
3564: LD_VAR 0 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 310
3574: NOT
3575: IFFALSE 3592
// ComExitBuilding ( damage_pep [ i ] ) ;
3577: LD_VAR 0 11
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL_OW 122
// if not IsInArea ( damage_pep [ i ] , heal_area ) then
3592: LD_VAR 0 11
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PPUSH
3603: LD_INT 9
3605: PPUSH
3606: CALL_OW 308
3610: NOT
3611: IFFALSE 3634
// ComMoveXY ( damage_pep [ i ] , 96 , 52 ) ;
3613: LD_VAR 0 11
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_INT 96
3626: PPUSH
3627: LD_INT 52
3629: PPUSH
3630: CALL_OW 111
// end ;
3634: GO 3556
3636: POP
3637: POP
// if damage_pep = 0 then
3638: LD_VAR 0 11
3642: PUSH
3643: LD_INT 0
3645: EQUAL
3646: IFFALSE 3688
// for i = 1 to sci do
3648: LD_ADDR_VAR 0 1
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 8
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3686
// ComEnterUnit ( sci [ i ] , am_lab ) ;
3666: LD_VAR 0 8
3670: PUSH
3671: LD_VAR 0 1
3675: ARRAY
3676: PPUSH
3677: LD_INT 9
3679: PPUSH
3680: CALL_OW 120
3684: GO 3663
3686: POP
3687: POP
// end ; if ai_tech > 0 then
3688: LD_EXP 12
3692: PUSH
3693: LD_INT 0
3695: GREATER
3696: IFFALSE 3714
// ComResearch ( am_lab , ai_tech [ 1 ] ) ;
3698: LD_INT 9
3700: PPUSH
3701: LD_EXP 12
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: CALL_OW 124
// if ai_vehs > 0 then
3714: LD_EXP 11
3718: PUSH
3719: LD_INT 0
3721: GREATER
3722: IFFALSE 3850
// if CanBeConstructed ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) then
3724: LD_INT 14
3726: PPUSH
3727: LD_EXP 11
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_EXP 11
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: PPUSH
3745: LD_EXP 11
3749: PUSH
3750: LD_INT 3
3752: ARRAY
3753: PPUSH
3754: LD_EXP 11
3758: PUSH
3759: LD_INT 4
3761: ARRAY
3762: PPUSH
3763: CALL_OW 448
3767: IFFALSE 3850
// begin ComConstruct ( am_fac , ai_vehs [ 1 ] , ai_vehs [ 2 ] , ai_vehs [ 3 ] , ai_vehs [ 4 ] ) ;
3769: LD_INT 14
3771: PPUSH
3772: LD_EXP 11
3776: PUSH
3777: LD_INT 1
3779: ARRAY
3780: PPUSH
3781: LD_EXP 11
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_EXP 11
3794: PUSH
3795: LD_INT 3
3797: ARRAY
3798: PPUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_INT 4
3806: ARRAY
3807: PPUSH
3808: CALL_OW 125
// for i = 1 to 4 do
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: DOUBLE
3818: LD_INT 1
3820: DEC
3821: ST_TO_ADDR
3822: LD_INT 4
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3848
// ai_vehs := Delete ( ai_vehs , 1 ) ;
3828: LD_ADDR_EXP 11
3832: PUSH
3833: LD_EXP 11
3837: PPUSH
3838: LD_INT 1
3840: PPUSH
3841: CALL_OW 3
3845: ST_TO_ADDR
3846: GO 3825
3848: POP
3849: POP
// end ; if tower_list > 0 then
3850: LD_EXP 14
3854: PUSH
3855: LD_INT 0
3857: GREATER
3858: IFFALSE 3962
// begin if GetTech ( tech_rocket , 1 ) = state_researched then
3860: LD_INT 40
3862: PPUSH
3863: LD_INT 1
3865: PPUSH
3866: CALL_OW 321
3870: PUSH
3871: LD_INT 2
3873: EQUAL
3874: IFFALSE 3912
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_rocket_launcher ) ;
3876: LD_EXP 14
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: PPUSH
3885: LD_INT 7
3887: PPUSH
3888: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3892: LD_ADDR_EXP 14
3896: PUSH
3897: LD_EXP 14
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 3
3909: ST_TO_ADDR
// end else
3910: GO 3962
// if GetTech ( tech_gatling , 1 ) = state_researched then
3912: LD_INT 69
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: IFFALSE 3962
// begin ComPlaceWeapon ( tower_list [ 1 ] , us_gatling_gun ) ;
3928: LD_EXP 14
3932: PUSH
3933: LD_INT 1
3935: ARRAY
3936: PPUSH
3937: LD_INT 4
3939: PPUSH
3940: CALL_OW 148
// tower_list := Delete ( tower_list , 1 ) ;
3944: LD_ADDR_EXP 14
3948: PUSH
3949: LD_EXP 14
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 3
3961: ST_TO_ADDR
// end ; end ; if damage_vehs > 0 then
3962: LD_VAR 0 13
3966: PUSH
3967: LD_INT 0
3969: GREATER
3970: IFFALSE 4145
// begin for i = 1 to damage_vehs do
3972: LD_ADDR_VAR 0 1
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_VAR 0 13
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4143
// begin un := IsDrivenBy ( damage_vehs [ i ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_VAR 0 13
3999: PUSH
4000: LD_VAR 0 1
4004: ARRAY
4005: PPUSH
4006: CALL_OW 311
4010: ST_TO_ADDR
// if not IsInArea ( damage_vehs [ i ] , repair_area ) then
4011: LD_VAR 0 13
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4046
// ComMoveToArea ( un , repair_area ) else
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 113
4044: GO 4141
// begin if IsInUnit ( un ) then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 310
4055: IFFALSE 4066
// ComExitVehicle ( un ) ;
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 121
// Wait ( 0 0$01 ) ;
4066: LD_INT 35
4068: PPUSH
4069: CALL_OW 67
// repeat begin ComRepairVehicle ( un , damage_vehs [ i ] ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 13
4082: PUSH
4083: LD_VAR 0 1
4087: ARRAY
4088: PPUSH
4089: CALL_OW 129
// Wait ( 0 0$01 ) ;
4093: LD_INT 35
4095: PPUSH
4096: CALL_OW 67
// end ; until GetLives ( damage_vehs [ i ] ) = 1000 ;
4100: LD_VAR 0 13
4104: PUSH
4105: LD_VAR 0 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 1000
4118: EQUAL
4119: IFFALSE 4073
// ComEnterUnit ( un , damage_vehs [ i ] ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: CALL_OW 120
// end ; end ;
4141: GO 3987
4143: POP
4144: POP
// end ; end ;
4145: PPOPN 13
4147: END
// every 0 0$01 trigger game_type = 2 and depot_captured = false do var i , un , filter , enemy ;
4148: LD_EXP 1
4152: PUSH
4153: LD_INT 2
4155: EQUAL
4156: PUSH
4157: LD_EXP 8
4161: PUSH
4162: LD_INT 0
4164: EQUAL
4165: AND
4166: IFFALSE 4345
4168: GO 4170
4170: DISABLE
4171: LD_INT 0
4173: PPUSH
4174: PPUSH
4175: PPUSH
4176: PPUSH
// begin enable ;
4177: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] ] ] ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 22
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 24
4205: PUSH
4206: LD_INT 650
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 3
4215: PUSH
4216: LD_INT 34
4218: PUSH
4219: LD_INT 12
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: ST_TO_ADDR
// enemy := FilterUnitsInArea ( def_area , [ f_side , 3 ] ) ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 11
4251: PPUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 70
4266: ST_TO_ADDR
// if filter > 0 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 0
4274: GREATER
4275: IFFALSE 4345
// for i = 1 to filter do
4277: LD_ADDR_VAR 0 1
4281: PUSH
4282: DOUBLE
4283: LD_INT 1
4285: DEC
4286: ST_TO_ADDR
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4343
// if enemy > 0 then
4295: LD_VAR 0 4
4299: PUSH
4300: LD_INT 0
4302: GREATER
4303: IFFALSE 4341
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
4305: LD_VAR 0 3
4309: PUSH
4310: LD_VAR 0 1
4314: ARRAY
4315: PPUSH
4316: LD_VAR 0 4
4320: PPUSH
4321: LD_VAR 0 3
4325: PUSH
4326: LD_VAR 0 1
4330: ARRAY
4331: PPUSH
4332: CALL_OW 74
4336: PPUSH
4337: CALL_OW 115
4341: GO 4292
4343: POP
4344: POP
// end ;
4345: PPOPN 4
4347: END
// every 0 0$03 trigger game_type = 2 and depot_captured = false do var i , c , p , skr , filter , cargo , dep ;
4348: LD_EXP 1
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: PUSH
4357: LD_EXP 8
4361: PUSH
4362: LD_INT 0
4364: EQUAL
4365: AND
4366: IFFALSE 4813
4368: GO 4370
4370: DISABLE
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// begin enable ;
4380: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_INT 50
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: LD_INT 22
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 25
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 25
4417: PUSH
4418: LD_INT 16
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PPUSH
4435: CALL_OW 69
4439: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] , [ f_lives , 650 ] ] ) ;
4440: LD_ADDR_VAR 0 6
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 24
4467: PUSH
4468: LD_INT 650
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4485: LD_ADDR_VAR 0 7
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: LD_INT 1
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_spawn ) ;
4537: LD_ADDR_VAR 0 4
4541: PUSH
4542: LD_INT 7
4544: PPUSH
4545: CALL_OW 435
4549: ST_TO_ADDR
// c = 1 ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if cargo > 0 then
4558: LD_VAR 0 6
4562: PUSH
4563: LD_INT 0
4565: GREATER
4566: IFFALSE 4813
// while c < skr do
4568: LD_VAR 0 2
4572: PUSH
4573: LD_VAR 0 4
4577: LESS
4578: IFFALSE 4813
// begin if cargo > 0 then
4580: LD_VAR 0 6
4584: PUSH
4585: LD_INT 0
4587: GREATER
4588: IFFALSE 4811
// begin if GetFuel ( cargo [ 1 ] ) > 40 then
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: CALL_OW 261
4603: PUSH
4604: LD_INT 40
4606: GREATER
4607: IFFALSE 4705
// begin if GetDistXYToSide ( skr [ c ] , skr [ c + 1 ] , 3 ) > 15 and not HasTask ( cargo [ 1 ] ) then
4609: LD_VAR 0 4
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_VAR 0 2
4629: PUSH
4630: LD_INT 1
4632: PLUS
4633: ARRAY
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: CALL 10428 0 3
4642: PUSH
4643: LD_INT 15
4645: GREATER
4646: PUSH
4647: LD_VAR 0 6
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 314
4660: NOT
4661: AND
4662: IFFALSE 4703
// ComCollect ( cargo [ 1 ] , skr [ c ] , skr [ c + 1 ] ) ;
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 2
4682: ARRAY
4683: PPUSH
4684: LD_VAR 0 4
4688: PUSH
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: PLUS
4697: ARRAY
4698: PPUSH
4699: CALL_OW 117
// end else
4703: GO 4797
// begin repeat begin ComMoveXY ( cargo [ 1 ] , GetX ( dep [ 1 ] ) , GetY ( dep [ 1 ] ) ) ;
4705: LD_VAR 0 6
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 250
4727: PPUSH
4728: LD_VAR 0 7
4732: PUSH
4733: LD_INT 1
4735: ARRAY
4736: PPUSH
4737: CALL_OW 251
4741: PPUSH
4742: CALL_OW 111
// Wait ( 0 0$01 ) ;
4746: LD_INT 35
4748: PPUSH
4749: CALL_OW 67
// end until GetDistUnits ( cargo [ 1 ] , dep [ 1 ] ) < 7 ;
4753: LD_VAR 0 6
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: LD_VAR 0 7
4766: PUSH
4767: LD_INT 1
4769: ARRAY
4770: PPUSH
4771: CALL_OW 296
4775: PUSH
4776: LD_INT 7
4778: LESS
4779: IFFALSE 4705
// SetFuel ( cargo [ 1 ] , 100 ) ;
4781: LD_VAR 0 6
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_INT 100
4792: PPUSH
4793: CALL_OW 240
// end ; c = c + 2 ;
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 2
4809: PLUS
4810: ST_TO_ADDR
// end ; end ;
4811: GO 4568
// end ;
4813: PPOPN 7
4815: END
// on EnterBuilding ( b , un ) do var i , filter ;
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// begin if game_type = 2 and depot_captured = false then
4820: LD_EXP 1
4824: PUSH
4825: LD_INT 2
4827: EQUAL
4828: PUSH
4829: LD_EXP 8
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: AND
4838: IFFALSE 4892
// begin if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 22
4847: PUSH
4848: LD_INT 1
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 32
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 69
4873: IN
4874: IFFALSE 4892
// sold_ocp := sold_ocp ^ un ;
4876: LD_ADDR_EXP 13
4880: PUSH
4881: LD_EXP 13
4885: PUSH
4886: LD_VAR 0 2
4890: ADD
4891: ST_TO_ADDR
// end ; end ;
4892: PPOPN 4
4894: END
// on LeaveBuilding ( b , un ) do var i , filter ;
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin if un in sold_ocp then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_EXP 13
4908: IN
4909: IFFALSE 4931
// sold_ocp := Delete ( sold_ocp , un ) ;
4911: LD_ADDR_EXP 13
4915: PUSH
4916: LD_EXP 13
4920: PPUSH
4921: LD_VAR 0 2
4925: PPUSH
4926: CALL_OW 3
4930: ST_TO_ADDR
// end ;
4931: PPOPN 4
4933: END
// on ResearchComplete ( tech , lab ) do var i , filter , un ;
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
// begin if game_type = 2 then
4939: LD_EXP 1
4943: PUSH
4944: LD_INT 2
4946: EQUAL
4947: IFFALSE 4994
// begin if GetSide ( lab ) = 1 then
4949: LD_VAR 0 2
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 1
4961: EQUAL
4962: IFFALSE 4994
// if tech in ai_tech then
4964: LD_VAR 0 1
4968: PUSH
4969: LD_EXP 12
4973: IN
4974: IFFALSE 4994
// ai_tech := Delete ( ai_tech , 1 ) ;
4976: LD_ADDR_EXP 12
4980: PUSH
4981: LD_EXP 12
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 3
4993: ST_TO_ADDR
// end ; end ;
4994: PPOPN 5
4996: END
// on BuildingComplete ( b ) do var i , side , un ;
4997: LD_INT 0
4999: PPUSH
5000: PPUSH
5001: PPUSH
// begin if game_type = 2 and depot_captured = false then
5002: LD_EXP 1
5006: PUSH
5007: LD_INT 2
5009: EQUAL
5010: PUSH
5011: LD_EXP 8
5015: PUSH
5016: LD_INT 0
5018: EQUAL
5019: AND
5020: IFFALSE 5127
// begin if GetSide ( b ) = 1 then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 255
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: IFFALSE 5075
// for i = 1 to 4 do
5037: LD_ADDR_VAR 0 2
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 4
5049: PUSH
5050: FOR_TO
5051: IFFALSE 5073
// ai_build := Delete ( ai_build , 1 ) ;
5053: LD_ADDR_EXP 10
5057: PUSH
5058: LD_EXP 10
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 3
5070: ST_TO_ADDR
5071: GO 5050
5073: POP
5074: POP
// if b in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) then
5075: LD_VAR 0 1
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 1
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 30
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PPUSH
5104: CALL_OW 69
5108: IN
5109: IFFALSE 5127
// tower_list := tower_list ^ b ;
5111: LD_ADDR_EXP 14
5115: PUSH
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 1
5125: ADD
5126: ST_TO_ADDR
// end ; end ;
5127: PPOPN 4
5129: END
// export enemy_count , enemy_typ ; every 1 1$30 trigger game_type = 1 do
5130: LD_EXP 1
5134: PUSH
5135: LD_INT 1
5137: EQUAL
5138: IFFALSE 5336
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if timer <= 20 20$00 then
5144: LD_EXP 6
5148: PUSH
5149: LD_INT 42000
5151: LESSEQUAL
5152: IFFALSE 5187
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
5154: LD_ADDR_EXP 15
5158: PUSH
5159: LD_INT 5
5161: PUSH
5162: LD_INT 6
5164: PUSH
5165: LD_INT 7
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_EXP 2
5177: ARRAY
5178: ST_TO_ADDR
// enemy_typ := 1 ;
5179: LD_ADDR_EXP 16
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ; if timer > 20 20$00 and timer <= 40 40$00 then
5187: LD_EXP 6
5191: PUSH
5192: LD_INT 42000
5194: GREATER
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 84000
5203: LESSEQUAL
5204: AND
5205: IFFALSE 5240
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
5207: LD_ADDR_EXP 15
5211: PUSH
5212: LD_INT 6
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_EXP 2
5230: ARRAY
5231: ST_TO_ADDR
// enemy_typ := 2 ;
5232: LD_ADDR_EXP 16
5236: PUSH
5237: LD_INT 2
5239: ST_TO_ADDR
// end ; if timer > 40 40$00 and timer <= 60 60$00 then
5240: LD_EXP 6
5244: PUSH
5245: LD_INT 84000
5247: GREATER
5248: PUSH
5249: LD_EXP 6
5253: PUSH
5254: LD_INT 126000
5256: LESSEQUAL
5257: AND
5258: IFFALSE 5293
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
5260: LD_ADDR_EXP 15
5264: PUSH
5265: LD_INT 8
5267: PUSH
5268: LD_INT 9
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: PUSH
5279: LD_EXP 2
5283: ARRAY
5284: ST_TO_ADDR
// enemy_typ := 3 ;
5285: LD_ADDR_EXP 16
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; if timer > 60 60$00 then
5293: LD_EXP 6
5297: PUSH
5298: LD_INT 126000
5300: GREATER
5301: IFFALSE 5336
// begin enemy_count := [ 10 , 12 , 14 ] [ game_diff ] ;
5303: LD_ADDR_EXP 15
5307: PUSH
5308: LD_INT 10
5310: PUSH
5311: LD_INT 12
5313: PUSH
5314: LD_INT 14
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_EXP 2
5326: ARRAY
5327: ST_TO_ADDR
// enemy_typ := 3 ;
5328: LD_ADDR_EXP 16
5332: PUSH
5333: LD_INT 3
5335: ST_TO_ADDR
// end ; end ;
5336: END
// export am_com2 ; every 0 0$01 trigger timer >= [ 8 8$00 , 8 8$30 , 9 9$00 ] [ game_diff ] and game_type = 1 do var area ;
5337: LD_EXP 6
5341: PUSH
5342: LD_INT 16800
5344: PUSH
5345: LD_INT 17850
5347: PUSH
5348: LD_INT 18900
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_EXP 2
5360: ARRAY
5361: GREATEREQUAL
5362: PUSH
5363: LD_EXP 1
5367: PUSH
5368: LD_INT 1
5370: EQUAL
5371: AND
5372: IFFALSE 5576
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// uc_side := 4 ;
5388: LD_ADDR_OWVAR 20
5392: PUSH
5393: LD_INT 4
5395: ST_TO_ADDR
// hc_sex := sex_male ;
5396: LD_ADDR_OWVAR 27
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// hc_class := 1 ;
5404: LD_ADDR_OWVAR 28
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// hc_gallery :=  ;
5412: LD_ADDR_OWVAR 33
5416: PUSH
5417: LD_STRING 
5419: ST_TO_ADDR
// hc_name :=  ;
5420: LD_ADDR_OWVAR 26
5424: PUSH
5425: LD_STRING 
5427: ST_TO_ADDR
// am_com2 := CreateHuman ;
5428: LD_ADDR_EXP 17
5432: PUSH
5433: CALL_OW 44
5437: ST_TO_ADDR
// SayRadio ( am_com2 , D-rus ) ;
5438: LD_EXP 17
5442: PPUSH
5443: LD_STRING D-rus
5445: PPUSH
5446: CALL_OW 94
// area := [ north_spawn , south_spawn ] ;
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 6
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// while ( true ) do
5465: LD_INT 1
5467: IFFALSE 5576
// begin Wait ( Rand ( 6 6$30 , 8 8$32 ) ) ;
5469: LD_INT 13650
5471: PPUSH
5472: LD_INT 17920
5474: PPUSH
5475: CALL_OW 12
5479: PPUSH
5480: CALL_OW 67
// RussianAttack ( 3 , enemy_count , enemy_typ , area ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_EXP 15
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL 8010 0 4
// if ( timer > [ 55 55$00 , 45 45$00 , 35 35$00 ] [ Difficulty ] ) then
5506: LD_EXP 6
5510: PUSH
5511: LD_INT 115500
5513: PUSH
5514: LD_INT 94500
5516: PUSH
5517: LD_INT 73500
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: LD_OWVAR 67
5529: ARRAY
5530: GREATER
5531: IFFALSE 5574
// begin Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5533: LD_INT 1050
5535: PPUSH
5536: LD_INT 3150
5538: PPUSH
5539: CALL_OW 12
5543: PPUSH
5544: CALL_OW 67
// RussianAttack ( 3 , enemy_count / 2 , enemy_typ , area ) ;
5548: LD_INT 3
5550: PPUSH
5551: LD_EXP 15
5555: PUSH
5556: LD_INT 2
5558: DIVREAL
5559: PPUSH
5560: LD_EXP 16
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL 8010 0 4
// end ; end ;
5574: GO 5465
// end ;
5576: PPOPN 1
5578: END
// every 0 0$01 trigger GetResourceType ( GetBase ( jota_base ) , mat_siberit ) = force_timer do var i , un ;
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 274
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 275
5594: PUSH
5595: LD_EXP 7
5599: EQUAL
5600: IFFALSE 5882
5602: GO 5604
5604: DISABLE
5605: LD_INT 0
5607: PPUSH
5608: PPUSH
// begin SayRadio ( am_com2 , D-help ) ;
5609: LD_EXP 17
5613: PPUSH
5614: LD_STRING D-help
5616: PPUSH
5617: CALL_OW 94
// Wait ( Rand ( 3 3$21 , 7 7$39 ) ) ;
5621: LD_INT 7035
5623: PPUSH
5624: LD_INT 16065
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5636: LD_INT 35
5638: PPUSH
5639: CALL_OW 67
// until FilterAllUnits ( [ f_side , 3 ] ) = 0 ;
5643: LD_INT 22
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 69
5657: PUSH
5658: LD_INT 0
5660: EQUAL
5661: IFFALSE 5636
// uc_side := 1 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// uc_nation := 1 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// for i = 1 to ( 3 + game_diff ) do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_EXP 2
5696: PLUS
5697: PUSH
5698: FOR_TO
5699: IFFALSE 5744
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 1
5708: PPUSH
5709: LD_INT 4
5711: PPUSH
5712: CALL_OW 12
5716: PPUSH
5717: LD_EXP 3
5721: PPUSH
5722: CALL 9265 0 2
5726: ST_TO_ADDR
// PlaceUnitArea ( un , south_spawn , false ) ;
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
// end ;
5742: GO 5698
5744: POP
5745: POP
// case game_diff of 1 :
5746: LD_EXP 2
5750: PUSH
5751: LD_INT 1
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5786
5759: POP
// CreateVehicleWithDriver ( us_heavy_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 2 :
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: LD_EXP 3
5779: PPUSH
5780: CALL 9804 0 6
5784: GO 5857
5786: LD_INT 2
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5821
5794: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_double_gun , south_spawn , 0 , game_skill ) ; 3 :
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 5
5803: PPUSH
5804: LD_INT 5
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_EXP 3
5814: PPUSH
5815: CALL 9804 0 6
5819: GO 5857
5821: LD_INT 3
5823: DOUBLE
5824: EQUAL
5825: IFTRUE 5829
5827: GO 5856
5829: POP
// CreateVehicleWithDriver ( us_medium_tracked , engine_combustion , us_light_gun , south_spawn , 0 , game_skill ) ; end ;
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 5
5841: PPUSH
5842: LD_INT 0
5844: PPUSH
5845: LD_EXP 3
5849: PPUSH
5850: CALL 9804 0 6
5854: GO 5857
5856: POP
// DialogueOn ;
5857: CALL_OW 6
// CenterOnXY ( 91 , 115 ) ;
5861: LD_INT 91
5863: PPUSH
5864: LD_INT 115
5866: PPUSH
5867: CALL_OW 84
// Wait ( 0 0$0.3 ) ;
5871: LD_INT 10
5873: PPUSH
5874: CALL_OW 67
// DialogueOff ;
5878: CALL_OW 7
// end ;
5882: PPOPN 2
5884: END
// export function AmericanAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// uc_side := side ;
5895: LD_ADDR_OWVAR 20
5899: PUSH
5900: LD_VAR 0 1
5904: ST_TO_ADDR
// uc_nation := nation_american ;
5905: LD_ADDR_OWVAR 21
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
// chassis := [ us_medium_tracked , us_heavy_tracked ] ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_heavy_gun , us_rocket_launcher , 97 ] ;
5928: LD_ADDR_VAR 0 11
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 5
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 7
5947: PUSH
5948: LD_INT 97
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// case typ of 1 :
5959: LD_VAR 0 3
5963: PUSH
5964: LD_INT 1
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6166
5972: POP
// begin for i = 1 to num do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 2
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6162
// begin vc_chassis := chassis [ 1 ] ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: ST_TO_ADDR
// vc_engine := engine_combustion ;
6005: LD_ADDR_OWVAR 39
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control := control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6021: LD_ADDR_OWVAR 40
6025: PUSH
6026: LD_VAR 0 11
6030: PUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_INT 3
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// veh := CreateVehicle ;
6043: LD_ADDR_VAR 0 9
6047: PUSH
6048: CALL_OW 45
6052: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6053: LD_ADDR_VAR 0 12
6057: PUSH
6058: LD_INT 1
6060: PPUSH
6061: LD_INT 2
6063: PPUSH
6064: CALL_OW 12
6068: ST_TO_ADDR
// if f = 1 then
6069: LD_VAR 0 12
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: IFFALSE 6093
// SetDir ( veh , 3 ) else
6079: LD_VAR 0 9
6083: PPUSH
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 233
6091: GO 6105
// SetDir ( veh , 1 ) ;
6093: LD_VAR 0 9
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6105: LD_VAR 0 9
6109: PPUSH
6110: LD_VAR 0 4
6114: PUSH
6115: LD_VAR 0 12
6119: ARRAY
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_EXP 4
6140: PPUSH
6141: CALL 9265 0 2
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 9
6155: PPUSH
6156: CALL_OW 52
// end ;
6160: GO 5988
6162: POP
6163: POP
// end ; 2 :
6164: GO 6640
6166: LD_INT 2
6168: DOUBLE
6169: EQUAL
6170: IFTRUE 6174
6172: GO 6437
6174: POP
// begin for i = 1 to num do
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_VAR 0 2
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6372
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
6193: LD_ADDR_OWVAR 37
6197: PUSH
6198: LD_VAR 0 10
6202: PUSH
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 2
6208: PPUSH
6209: CALL_OW 12
6213: ARRAY
6214: ST_TO_ADDR
// vc_engine := engine_combustion ;
6215: LD_ADDR_OWVAR 39
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// vc_control := control_manual ;
6223: LD_ADDR_OWVAR 38
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
6231: LD_ADDR_OWVAR 40
6235: PUSH
6236: LD_VAR 0 11
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 3
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// veh := CreateVehicle ;
6253: LD_ADDR_VAR 0 9
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6263: LD_ADDR_VAR 0 12
6267: PUSH
6268: LD_INT 1
6270: PPUSH
6271: LD_INT 2
6273: PPUSH
6274: CALL_OW 12
6278: ST_TO_ADDR
// if f = 1 then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6303
// SetDir ( veh , 3 ) else
6289: LD_VAR 0 9
6293: PPUSH
6294: LD_INT 3
6296: PPUSH
6297: CALL_OW 233
6301: GO 6315
// SetDir ( veh , 1 ) ;
6303: LD_VAR 0 9
6307: PPUSH
6308: LD_INT 1
6310: PPUSH
6311: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6315: LD_VAR 0 9
6319: PPUSH
6320: LD_VAR 0 4
6324: PUSH
6325: LD_VAR 0 12
6329: ARRAY
6330: PPUSH
6331: LD_INT 0
6333: PPUSH
6334: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6338: LD_ADDR_VAR 0 7
6342: PUSH
6343: LD_INT 1
6345: PPUSH
6346: LD_EXP 4
6350: PPUSH
6351: CALL 9265 0 2
6355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: CALL_OW 52
// end ;
6370: GO 6190
6372: POP
6373: POP
// for i = 1 to 3 do
6374: LD_ADDR_VAR 0 6
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_INT 3
6386: PUSH
6387: FOR_TO
6388: IFFALSE 6433
// begin un := CreateHumanWithClass ( class_sniper , game_eskill ) ;
6390: LD_ADDR_VAR 0 7
6394: PUSH
6395: LD_INT 5
6397: PPUSH
6398: LD_EXP 4
6402: PPUSH
6403: CALL 9265 0 2
6407: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
6408: LD_VAR 0 7
6412: PPUSH
6413: LD_VAR 0 4
6417: PUSH
6418: LD_VAR 0 12
6422: ARRAY
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 49
// end ;
6431: GO 6387
6433: POP
6434: POP
// end ; 3 :
6435: GO 6640
6437: LD_INT 3
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 6639
6445: POP
// begin for i = 1 to num do
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 2
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6635
// begin vc_chassis := chassis [ 2 ] ;
6464: LD_ADDR_OWVAR 37
6468: PUSH
6469: LD_VAR 0 10
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// vc_engine := engine_combustion ;
6478: LD_ADDR_OWVAR 39
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// vc_control := control_manual ;
6486: LD_ADDR_OWVAR 38
6490: PUSH
6491: LD_INT 1
6493: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
6494: LD_ADDR_OWVAR 40
6498: PUSH
6499: LD_VAR 0 11
6503: PUSH
6504: LD_INT 3
6506: PPUSH
6507: LD_INT 6
6509: PPUSH
6510: CALL_OW 12
6514: ARRAY
6515: ST_TO_ADDR
// veh := CreateVehicle ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: CALL_OW 45
6525: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 12
6541: ST_TO_ADDR
// if f = 1 then
6542: LD_VAR 0 12
6546: PUSH
6547: LD_INT 1
6549: EQUAL
6550: IFFALSE 6566
// SetDir ( veh , 3 ) else
6552: LD_VAR 0 9
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 233
6564: GO 6578
// SetDir ( veh , 1 ) ;
6566: LD_VAR 0 9
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
6578: LD_VAR 0 9
6582: PPUSH
6583: LD_VAR 0 4
6587: PUSH
6588: LD_VAR 0 12
6592: ARRAY
6593: PPUSH
6594: LD_INT 0
6596: PPUSH
6597: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
6601: LD_ADDR_VAR 0 7
6605: PUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_EXP 4
6613: PPUSH
6614: CALL 9265 0 2
6618: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6619: LD_VAR 0 7
6623: PPUSH
6624: LD_VAR 0 9
6628: PPUSH
6629: CALL_OW 52
// end ;
6633: GO 6461
6635: POP
6636: POP
// end ; end ;
6637: GO 6640
6639: POP
// end ;
6640: LD_VAR 0 5
6644: RET
// every 0 0$01 trigger game_type = 2 and depot_captured do var filter , enemy , i ;
6645: LD_EXP 1
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: PUSH
6654: LD_EXP 8
6658: AND
6659: IFFALSE 6814
6661: GO 6663
6663: DISABLE
6664: LD_INT 0
6666: PPUSH
6667: PPUSH
6668: PPUSH
// begin enable ;
6669: ENABLE
// filter := FilterAllUnits ( [ f_side , 1 ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 22
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6690: LD_ADDR_VAR 0 2
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 6
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: ST_TO_ADDR
// if filter > 0 then
6728: LD_VAR 0 1
6732: PUSH
6733: LD_INT 0
6735: GREATER
6736: IFFALSE 6814
// for i = 1 to filter do
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_VAR 0 1
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6812
// if not HasTask ( filter [ i ] ) then
6756: LD_VAR 0 1
6760: PUSH
6761: LD_VAR 0 3
6765: ARRAY
6766: PPUSH
6767: CALL_OW 314
6771: NOT
6772: IFFALSE 6810
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 3
6783: ARRAY
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_VAR 0 3
6799: ARRAY
6800: PPUSH
6801: CALL_OW 74
6805: PPUSH
6806: CALL_OW 115
6810: GO 6753
6812: POP
6813: POP
// end ;
6814: PPOPN 3
6816: END
// every 0 0$01 trigger game_type = 2 do var filter , enemy , i ;
6817: LD_EXP 1
6821: PUSH
6822: LD_INT 2
6824: EQUAL
6825: IFFALSE 6980
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
6834: PPUSH
// begin enable ;
6835: ENABLE
// filter := FilterAllUnits ( [ f_side , 8 ] ) ;
6836: LD_ADDR_VAR 0 1
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_INT 8
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 6
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: ST_TO_ADDR
// if filter > 0 then
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 0
6901: GREATER
6902: IFFALSE 6980
// for i = 1 to filter do
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: DOUBLE
6910: LD_INT 1
6912: DEC
6913: ST_TO_ADDR
6914: LD_VAR 0 1
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6978
// if not HasTask ( filter [ i ] ) then
6922: LD_VAR 0 1
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PPUSH
6933: CALL_OW 314
6937: NOT
6938: IFFALSE 6976
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
6940: LD_VAR 0 1
6944: PUSH
6945: LD_VAR 0 3
6949: ARRAY
6950: PPUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 74
6971: PPUSH
6972: CALL_OW 115
6976: GO 6919
6978: POP
6979: POP
// end ; end_of_file
6980: PPOPN 3
6982: END
// export ru_dow , gorki ; export function PrepareRussian ; var un , i , filter , team ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
// Your_Side := 3 ;
6990: LD_ADDR_OWVAR 2
6994: PUSH
6995: LD_INT 3
6997: ST_TO_ADDR
// ChangeSideFog ( 3 , 3 ) ;
6998: LD_INT 3
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 343
// ResetFog ;
7008: CALL_OW 335
// uc_side := 6 ;
7012: LD_ADDR_OWVAR 20
7016: PUSH
7017: LD_INT 6
7019: ST_TO_ADDR
// uc_nation := 3 ;
7020: LD_ADDR_OWVAR 21
7024: PUSH
7025: LD_INT 3
7027: ST_TO_ADDR
// hc_gallery := ru ;
7028: LD_ADDR_OWVAR 33
7032: PUSH
7033: LD_STRING ru
7035: ST_TO_ADDR
// hc_face_number := 1 ;
7036: LD_ADDR_OWVAR 34
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// hc_name := J. I. Gorki ;
7044: LD_ADDR_OWVAR 26
7048: PUSH
7049: LD_STRING J. I. Gorki
7051: ST_TO_ADDR
// hc_class := 3 ;
7052: LD_ADDR_OWVAR 28
7056: PUSH
7057: LD_INT 3
7059: ST_TO_ADDR
// hc_sex := sex_male ;
7060: LD_ADDR_OWVAR 27
7064: PUSH
7065: LD_INT 1
7067: ST_TO_ADDR
// gorki := CreateHuman ;
7068: LD_ADDR_EXP 19
7072: PUSH
7073: CALL_OW 44
7077: ST_TO_ADDR
// uc_side := 3 ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_INT 3
7085: ST_TO_ADDR
// uc_nation := 3 ;
7086: LD_ADDR_OWVAR 21
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// hc_importance := 100 ;
7094: LD_ADDR_OWVAR 32
7098: PUSH
7099: LD_INT 100
7101: ST_TO_ADDR
// hc_name :=  ;
7102: LD_ADDR_OWVAR 26
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// hc_gallery :=  ;
7110: LD_ADDR_OWVAR 33
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , game_skill + 3 ) ;
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: LD_EXP 3
7128: PUSH
7129: LD_INT 3
7131: PLUS
7132: PPUSH
7133: CALL_OW 380
// ru_dow := CreateHuman ;
7137: LD_ADDR_EXP 18
7141: PUSH
7142: CALL_OW 44
7146: ST_TO_ADDR
// hc_importance := 0 ;
7147: LD_ADDR_OWVAR 32
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// for i = 1 to 20 do
7155: LD_ADDR_VAR 0 3
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_INT 20
7167: PUSH
7168: FOR_TO
7169: IFFALSE 7231
// begin uc_side := 3 ;
7171: LD_ADDR_OWVAR 20
7175: PUSH
7176: LD_INT 3
7178: ST_TO_ADDR
// uc_nation := 3 ;
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 3
7186: ST_TO_ADDR
// un := CreateHumanWithClass ( Rand ( 1 , 4 ) , game_skill ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: LD_EXP 3
7207: PPUSH
7208: CALL 9265 0 2
7212: ST_TO_ADDR
// filter := filter ^ un ;
7213: LD_ADDR_VAR 0 4
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: LD_VAR 0 2
7227: ADD
7228: ST_TO_ADDR
// end ;
7229: GO 7168
7231: POP
7232: POP
// team := CharacterSelection ( text , [ 9 , 8 , 7 ] [ game_diff ] , [ 9 , 8 , 7 ] [ game_diff ] , [ sel_change_class , ru_dow , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_bazooker , 0 , [ 6 , 4 , 3 ] [ game_diff ] ] ] ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_STRING text
7240: PPUSH
7241: LD_INT 9
7243: PUSH
7244: LD_INT 8
7246: PUSH
7247: LD_INT 7
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_EXP 2
7259: ARRAY
7260: PPUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_EXP 2
7279: ARRAY
7280: PPUSH
7281: LD_INT -5
7283: PUSH
7284: LD_EXP 18
7288: PUSH
7289: LD_INT -3
7291: PUSH
7292: LD_INT -2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: PUSH
7301: LD_VAR 0 4
7305: ADD
7306: PPUSH
7307: LD_INT 1
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 4
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 9
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 6
7341: PUSH
7342: LD_INT 4
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_EXP 2
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 42
7375: ST_TO_ADDR
// team := team ^ ru_dow ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_VAR 0 5
7385: PUSH
7386: LD_EXP 18
7390: ADD
7391: ST_TO_ADDR
// for i = 1 to team do
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: DOUBLE
7398: LD_INT 1
7400: DEC
7401: ST_TO_ADDR
7402: LD_VAR 0 5
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7433
// PlaceUnitArea ( team [ i ] , south_spawn , false ) ;
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 3
7419: ARRAY
7420: PPUSH
7421: LD_INT 5
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: CALL_OW 49
7431: GO 7407
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// every 0 0$01 trigger GetSide ( jota_base ) = 3 do var area ;
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 255
7447: PUSH
7448: LD_INT 3
7450: EQUAL
7451: IFFALSE 7561
7453: GO 7455
7455: DISABLE
7456: LD_INT 0
7458: PPUSH
// begin depot_captured := true ;
7459: LD_ADDR_EXP 8
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// ChangeMissionObjectives ( GType2b ) ;
7467: LD_STRING GType2b
7469: PPUSH
7470: CALL_OW 337
// Say ( ru_dow , D-rudow2 ) ;
7474: LD_EXP 18
7478: PPUSH
7479: LD_STRING D-rudow2
7481: PPUSH
7482: CALL_OW 88
// SayRadio ( gorki , D-gorky2 ) ;
7486: LD_EXP 19
7490: PPUSH
7491: LD_STRING D-gorky2
7493: PPUSH
7494: CALL_OW 94
// while ( true ) do
7498: LD_INT 1
7500: IFFALSE 7561
// begin Wait ( Rand ( 6 6$20 , 9 9$31 ) ) ;
7502: LD_INT 13300
7504: PPUSH
7505: LD_INT 19985
7507: PPUSH
7508: CALL_OW 12
7512: PPUSH
7513: CALL_OW 67
// area := [ north_spawn , south_spawn ] ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// AmericanAttack ( 1 , enemy_count , enemy_typ , [ north_spawn , south_spawn ] ) ;
7532: LD_INT 1
7534: PPUSH
7535: LD_EXP 15
7539: PPUSH
7540: LD_EXP 16
7544: PPUSH
7545: LD_INT 6
7547: PUSH
7548: LD_INT 5
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL 5885 0 4
// end ;
7559: GO 7498
// end ;
7561: PPOPN 1
7563: END
// every 1 1$30 trigger game_type = 2 do
7564: LD_EXP 1
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7717
7574: GO 7576
7576: DISABLE
// begin enable ;
7577: ENABLE
// if timer <= 45 45$00 then
7578: LD_EXP 6
7582: PUSH
7583: LD_INT 94500
7585: LESSEQUAL
7586: IFFALSE 7621
// begin enemy_count := [ 5 , 6 , 7 ] [ game_diff ] ;
7588: LD_ADDR_EXP 15
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: LD_INT 6
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_EXP 2
7611: ARRAY
7612: ST_TO_ADDR
// enemy_typ := 1 ;
7613: LD_ADDR_EXP 16
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// end ; if timer > 60 60$00 and timer <= 80 80$00 then
7621: LD_EXP 6
7625: PUSH
7626: LD_INT 126000
7628: GREATER
7629: PUSH
7630: LD_EXP 6
7634: PUSH
7635: LD_INT 168000
7637: LESSEQUAL
7638: AND
7639: IFFALSE 7674
// begin enemy_count := [ 6 , 8 , 9 ] [ game_diff ] ;
7641: LD_ADDR_EXP 15
7645: PUSH
7646: LD_INT 6
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: LD_INT 9
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 2
7664: ARRAY
7665: ST_TO_ADDR
// enemy_typ := 2 ;
7666: LD_ADDR_EXP 16
7670: PUSH
7671: LD_INT 2
7673: ST_TO_ADDR
// end ; if timer > 80 80$00 then
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 168000
7681: GREATER
7682: IFFALSE 7717
// begin enemy_count := [ 8 , 9 , 10 ] [ game_diff ] ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 8
7691: PUSH
7692: LD_INT 9
7694: PUSH
7695: LD_INT 10
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 2
7707: ARRAY
7708: ST_TO_ADDR
// enemy_typ := 3 ;
7709: LD_ADDR_EXP 16
7713: PUSH
7714: LD_INT 3
7716: ST_TO_ADDR
// end ; end ;
7717: END
// export farmer ; every 20 20$00 trigger game_type = 2 do
7718: LD_EXP 1
7722: PUSH
7723: LD_INT 2
7725: EQUAL
7726: IFFALSE 7843
7728: GO 7730
7730: DISABLE
// begin LegionAttack ( 8 , enemy_count , 1 , north_spawn ) ;
7731: LD_INT 8
7733: PPUSH
7734: LD_EXP 15
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: LD_INT 6
7744: PPUSH
7745: CALL 9914 0 4
// Wait ( 20 20$00 ) ;
7749: LD_INT 42000
7751: PPUSH
7752: CALL_OW 67
// LegionAttack ( 8 , enemy_count , 2 , north_spawn ) ;
7756: LD_INT 8
7758: PPUSH
7759: LD_EXP 15
7763: PPUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_INT 6
7769: PPUSH
7770: CALL 9914 0 4
// Wait ( 4 4$00 ) ;
7774: LD_INT 8400
7776: PPUSH
7777: CALL_OW 67
// uc_side := 8 ;
7781: LD_ADDR_OWVAR 20
7785: PUSH
7786: LD_INT 8
7788: ST_TO_ADDR
// uc_nation := 2 ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 2
7796: ST_TO_ADDR
// hc_class := 1 ;
7797: LD_ADDR_OWVAR 28
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// hc_gallery :=  ;
7805: LD_ADDR_OWVAR 33
7809: PUSH
7810: LD_STRING 
7812: ST_TO_ADDR
// hc_sex := sex_male ;
7813: LD_ADDR_OWVAR 27
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// farmer := CreateHuman ;
7821: LD_ADDR_EXP 20
7825: PUSH
7826: CALL_OW 44
7830: ST_TO_ADDR
// SayRadio ( farmer , D-farmer ) ;
7831: LD_EXP 20
7835: PPUSH
7836: LD_STRING D-farmer
7838: PPUSH
7839: CALL_OW 94
// end ;
7843: END
// every 0 0$01 trigger game_type = 1 do var filter , enemy , i ;
7844: LD_EXP 1
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 8007
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
// begin enable ;
7862: ENABLE
// filter := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_INT 2
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 22
7883: PUSH
7884: LD_INT 6
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 69
7900: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 69
7938: ST_TO_ADDR
// if filter > 0 then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_INT 0
7946: GREATER
7947: IFFALSE 8007
// for i = 1 to filter do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 1
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8005
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
7967: LD_VAR 0 1
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PUSH
7988: LD_VAR 0 3
7992: ARRAY
7993: PPUSH
7994: CALL_OW 74
7998: PPUSH
7999: CALL_OW 115
8003: GO 7964
8005: POP
8006: POP
// end ;
8007: PPOPN 3
8009: END
// export function RussianAttack ( side , num , typ , list ) ; var i , un , filter , veh , chassis , weapon , f ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// Randomize ;
8020: CALL_OW 10
// uc_side := side ;
8024: LD_ADDR_OWVAR 20
8028: PUSH
8029: LD_VAR 0 1
8033: ST_TO_ADDR
// uc_nation := nation_russian ;
8034: LD_ADDR_OWVAR 21
8038: PUSH
8039: LD_INT 3
8041: ST_TO_ADDR
// chassis := [ ru_medium_tracked , ru_heavy_tracked ] ;
8042: LD_ADDR_VAR 0 10
8046: PUSH
8047: LD_INT 22
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
8057: LD_ADDR_VAR 0 11
8061: PUSH
8062: LD_INT 42
8064: PUSH
8065: LD_INT 43
8067: PUSH
8068: LD_INT 44
8070: PUSH
8071: LD_INT 46
8073: PUSH
8074: LD_INT 45
8076: PUSH
8077: LD_INT 47
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// case typ of 1 :
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8295
8101: POP
// begin for i = 1 to num do
8102: LD_ADDR_VAR 0 6
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 2
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8291
// begin vc_chassis := chassis [ 1 ] ;
8120: LD_ADDR_OWVAR 37
8124: PUSH
8125: LD_VAR 0 10
8129: PUSH
8130: LD_INT 1
8132: ARRAY
8133: ST_TO_ADDR
// vc_engine := engine_combustion ;
8134: LD_ADDR_OWVAR 39
8138: PUSH
8139: LD_INT 1
8141: ST_TO_ADDR
// vc_control := control_manual ;
8142: LD_ADDR_OWVAR 38
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8150: LD_ADDR_OWVAR 40
8154: PUSH
8155: LD_VAR 0 11
8159: PUSH
8160: LD_INT 1
8162: PPUSH
8163: LD_INT 3
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// veh := CreateVehicle ;
8172: LD_ADDR_VAR 0 9
8176: PUSH
8177: CALL_OW 45
8181: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8182: LD_ADDR_VAR 0 12
8186: PUSH
8187: LD_INT 1
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: CALL_OW 12
8197: ST_TO_ADDR
// if f = 1 then
8198: LD_VAR 0 12
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: IFFALSE 8222
// SetDir ( veh , 3 ) else
8208: LD_VAR 0 9
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: CALL_OW 233
8220: GO 8234
// SetDir ( veh , 1 ) ;
8222: LD_VAR 0 9
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8234: LD_VAR 0 9
8238: PPUSH
8239: LD_VAR 0 4
8243: PUSH
8244: LD_VAR 0 12
8248: ARRAY
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
8257: LD_ADDR_VAR 0 7
8261: PUSH
8262: LD_INT 1
8264: PPUSH
8265: LD_EXP 4
8269: PPUSH
8270: CALL 9265 0 2
8274: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_VAR 0 9
8284: PPUSH
8285: CALL_OW 52
// end ;
8289: GO 8117
8291: POP
8292: POP
// end ; 2 :
8293: GO 8837
8295: LD_INT 2
8297: DOUBLE
8298: EQUAL
8299: IFTRUE 8303
8301: GO 8600
8303: POP
// begin for i = 1 to num do
8304: LD_ADDR_VAR 0 6
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_VAR 0 2
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8535
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 10
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 12
8342: ARRAY
8343: ST_TO_ADDR
// vc_engine := engine_combustion ;
8344: LD_ADDR_OWVAR 39
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ Rand ( 1 , 2 ) ] ;
8352: LD_ADDR_OWVAR 38
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 12
8377: ARRAY
8378: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
8379: LD_ADDR_OWVAR 40
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// veh := CreateVehicle ;
8401: LD_ADDR_VAR 0 9
8405: PUSH
8406: CALL_OW 45
8410: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8411: LD_ADDR_VAR 0 12
8415: PUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 2
8421: PPUSH
8422: CALL_OW 12
8426: ST_TO_ADDR
// if f = 1 then
8427: LD_VAR 0 12
8431: PUSH
8432: LD_INT 1
8434: EQUAL
8435: IFFALSE 8451
// SetDir ( veh , 3 ) else
8437: LD_VAR 0 9
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: CALL_OW 233
8449: GO 8463
// SetDir ( veh , 1 ) ;
8451: LD_VAR 0 9
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8463: LD_VAR 0 9
8467: PPUSH
8468: LD_VAR 0 4
8472: PUSH
8473: LD_VAR 0 12
8477: ARRAY
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8486: LD_VAR 0 9
8490: PPUSH
8491: CALL_OW 263
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: IFFALSE 8533
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8501: LD_ADDR_VAR 0 7
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_EXP 4
8513: PPUSH
8514: CALL 9265 0 2
8518: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8519: LD_VAR 0 7
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL_OW 52
// end ; end ;
8533: GO 8319
8535: POP
8536: POP
// for i = 1 to 2 do
8537: LD_ADDR_VAR 0 6
8541: PUSH
8542: DOUBLE
8543: LD_INT 1
8545: DEC
8546: ST_TO_ADDR
8547: LD_INT 2
8549: PUSH
8550: FOR_TO
8551: IFFALSE 8596
// begin un := CreateHumanWithClass ( class_bazooker , game_eskill ) ;
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_INT 9
8560: PPUSH
8561: LD_EXP 4
8565: PPUSH
8566: CALL 9265 0 2
8570: ST_TO_ADDR
// PlaceUnitArea ( un , list [ f ] , false ) ;
8571: LD_VAR 0 7
8575: PPUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 12
8585: ARRAY
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 49
// end ;
8594: GO 8550
8596: POP
8597: POP
// end ; 3 :
8598: GO 8837
8600: LD_INT 3
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8836
8608: POP
// begin for i = 1 to num do
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: DOUBLE
8615: LD_INT 1
8617: DEC
8618: ST_TO_ADDR
8619: LD_VAR 0 2
8623: PUSH
8624: FOR_TO
8625: IFFALSE 8832
// begin vc_chassis := chassis [ 2 ] ;
8627: LD_ADDR_OWVAR 37
8631: PUSH
8632: LD_VAR 0 10
8636: PUSH
8637: LD_INT 2
8639: ARRAY
8640: ST_TO_ADDR
// vc_engine := engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_control := [ control_computer , control_manual ] [ Rand ( 1 , 2 ) ] ;
8649: LD_ADDR_OWVAR 38
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 1
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: CALL_OW 12
8674: ARRAY
8675: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 6 ) ] ;
8676: LD_ADDR_OWVAR 40
8680: PUSH
8681: LD_VAR 0 11
8685: PUSH
8686: LD_INT 3
8688: PPUSH
8689: LD_INT 6
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// veh := CreateVehicle ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: CALL_OW 45
8707: ST_TO_ADDR
// f := Rand ( 1 , 2 ) ;
8708: LD_ADDR_VAR 0 12
8712: PUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 12
8723: ST_TO_ADDR
// if f = 1 then
8724: LD_VAR 0 12
8728: PUSH
8729: LD_INT 1
8731: EQUAL
8732: IFFALSE 8748
// SetDir ( veh , 3 ) else
8734: LD_VAR 0 9
8738: PPUSH
8739: LD_INT 3
8741: PPUSH
8742: CALL_OW 233
8746: GO 8760
// SetDir ( veh , 1 ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: CALL_OW 233
// PlaceUnitArea ( veh , list [ f ] , false ) ;
8760: LD_VAR 0 9
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_VAR 0 12
8774: ARRAY
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 49
// if GetControl ( veh ) = control_manual then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 263
8792: PUSH
8793: LD_INT 1
8795: EQUAL
8796: IFFALSE 8830
// begin un := CreateHumanWithClass ( 1 , game_eskill ) ;
8798: LD_ADDR_VAR 0 7
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_EXP 4
8810: PPUSH
8811: CALL 9265 0 2
8815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8816: LD_VAR 0 7
8820: PPUSH
8821: LD_VAR 0 9
8825: PPUSH
8826: CALL_OW 52
// end ; end ;
8830: GO 8624
8832: POP
8833: POP
// end ; end ;
8834: GO 8837
8836: POP
// end ; end_of_file
8837: LD_VAR 0 5
8841: RET
// every 0 0$01 do
8842: GO 8844
8844: DISABLE
// PrepareAnimals ( 6 + game_diff , 5 , 4 , nature_area ) ; end_of_file
8845: LD_INT 6
8847: PUSH
8848: LD_EXP 2
8852: PLUS
8853: PPUSH
8854: LD_INT 5
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: CALL 8868 0 4
8867: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
// uc_nation = nation_nature ;
8875: LD_ADDR_OWVAR 21
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// uc_side = 0 ;
8883: LD_ADDR_OWVAR 20
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// l = 0 ;
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8899: LD_ADDR_OWVAR 24
8903: PUSH
8904: LD_INT 0
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL_OW 12
8914: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8915: LD_ADDR_OWVAR 35
8919: PUSH
8920: LD_INT 5
8922: NEG
8923: PPUSH
8924: LD_INT 5
8926: PPUSH
8927: CALL_OW 12
8931: ST_TO_ADDR
// hc_gallery =  ;
8932: LD_ADDR_OWVAR 33
8936: PUSH
8937: LD_STRING 
8939: ST_TO_ADDR
// hc_class = class_apeman ;
8940: LD_ADDR_OWVAR 28
8944: PUSH
8945: LD_INT 12
8947: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 11
8955: PPUSH
8956: LD_INT 13
8958: PPUSH
8959: CALL_OW 12
8963: PUSH
8964: LD_INT 10
8966: PPUSH
8967: LD_INT 11
8969: PPUSH
8970: CALL_OW 12
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: ST_TO_ADDR
// hc_sex = sex_male ;
8979: LD_ADDR_OWVAR 27
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8987: LD_ADDR_OWVAR 31
8991: PUSH
8992: LD_INT 0
8994: PPUSH
8995: LD_INT 2
8997: PPUSH
8998: CALL_OW 12
9002: PUSH
9003: LD_INT 0
9005: PUSH
9006: LD_INT 0
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// apeman = CreateHuman ;
9018: LD_ADDR_VAR 0 7
9022: PUSH
9023: CALL_OW 44
9027: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
9028: LD_VAR 0 7
9032: PPUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// l = l + 1 ;
9045: LD_ADDR_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end until l = num1 ;
9059: LD_VAR 0 6
9063: PUSH
9064: LD_VAR 0 1
9068: EQUAL
9069: IFFALSE 8899
// l = 0 ;
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
9079: LD_ADDR_OWVAR 35
9083: PUSH
9084: LD_INT 0
9086: PPUSH
9087: LD_INT 25
9089: PPUSH
9090: CALL_OW 12
9094: ST_TO_ADDR
// hc_class = class_tiger ;
9095: LD_ADDR_OWVAR 28
9099: PUSH
9100: LD_INT 14
9102: ST_TO_ADDR
// hc_sex = sex_male ;
9103: LD_ADDR_OWVAR 27
9107: PUSH
9108: LD_INT 1
9110: ST_TO_ADDR
// hc_gallery = sandnature ;
9111: LD_ADDR_OWVAR 33
9115: PUSH
9116: LD_STRING sandnature
9118: ST_TO_ADDR
// hc_face_number = 3 ;
9119: LD_ADDR_OWVAR 34
9123: PUSH
9124: LD_INT 3
9126: ST_TO_ADDR
// tiger = CreateHuman ;
9127: LD_ADDR_VAR 0 8
9131: PUSH
9132: CALL_OW 44
9136: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 4
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 49
// l = l + 1 ;
9154: LD_ADDR_VAR 0 6
9158: PUSH
9159: LD_VAR 0 6
9163: PUSH
9164: LD_INT 1
9166: PLUS
9167: ST_TO_ADDR
// end until l = num2 ;
9168: LD_VAR 0 6
9172: PUSH
9173: LD_VAR 0 2
9177: EQUAL
9178: IFFALSE 9079
// l = 0 ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
9188: LD_ADDR_OWVAR 28
9192: PUSH
9193: LD_INT 18
9195: ST_TO_ADDR
// hc_gallery = sandnature ;
9196: LD_ADDR_OWVAR 33
9200: PUSH
9201: LD_STRING sandnature
9203: ST_TO_ADDR
// hc_face_number = 1 ;
9204: LD_ADDR_OWVAR 34
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// bird = CreateHuman ;
9212: LD_ADDR_VAR 0 9
9216: PUSH
9217: CALL_OW 44
9221: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
9222: LD_VAR 0 9
9226: PPUSH
9227: LD_INT 0
9229: PPUSH
9230: CALL_OW 51
// l = l + 1 ;
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 1
9246: PLUS
9247: ST_TO_ADDR
// end until l = num3 ;
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 3
9257: EQUAL
9258: IFFALSE 9188
// end ;
9260: LD_VAR 0 5
9264: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// hc_class := clas ;
9273: LD_ADDR_OWVAR 28
9277: PUSH
9278: LD_VAR 0 1
9282: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: NEG
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 12
9304: PLUS
9305: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: LD_INT 1
9318: NEG
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 12
9327: PLUS
9328: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
9329: LD_ADDR_VAR 0 6
9333: PUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 1
9341: NEG
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 12
9350: PLUS
9351: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
9352: LD_ADDR_VAR 0 7
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_INT 1
9364: NEG
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 12
9373: PLUS
9374: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
9375: LD_VAR 0 1
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: LD_INT 9
9391: EQUAL
9392: OR
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: LD_INT 5
9401: EQUAL
9402: OR
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: LD_INT 8
9411: EQUAL
9412: OR
9413: IFFALSE 9438
// bonus := [ 2 , 0 , 0 , 0 ] ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// if clas = 2 then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: EQUAL
9446: IFFALSE 9471
// bonus := [ 0 , 2 , 0 , 0 ] ;
9448: LD_ADDR_VAR 0 8
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// if clas = 3 then
9471: LD_VAR 0 1
9475: PUSH
9476: LD_INT 3
9478: EQUAL
9479: IFFALSE 9504
// bonus := [ 0 , 0 , 2 , 0 ] ;
9481: LD_ADDR_VAR 0 8
9485: PUSH
9486: LD_INT 0
9488: PUSH
9489: LD_INT 0
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// if clas = 4 then
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 4
9511: EQUAL
9512: IFFALSE 9537
// bonus := [ 0 , 0 , 0 , 2 ] ;
9514: LD_ADDR_VAR 0 8
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: LD_INT 0
9527: PUSH
9528: LD_INT 2
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
9537: LD_VAR 0 1
9541: PUSH
9542: LD_INT 4
9544: GREATER
9545: PUSH
9546: LD_VAR 0 1
9550: PUSH
9551: LD_INT 9
9553: NONEQUAL
9554: AND
9555: PUSH
9556: LD_VAR 0 1
9560: PUSH
9561: LD_INT 5
9563: NONEQUAL
9564: AND
9565: PUSH
9566: LD_VAR 0 1
9570: PUSH
9571: LD_INT 8
9573: NONEQUAL
9574: AND
9575: IFFALSE 9600
// bonus := [ 0 , 0 , 0 , 0 ] ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
9600: LD_ADDR_OWVAR 30
9604: PUSH
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 12
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 2
9621: PPUSH
9622: CALL_OW 12
9626: PUSH
9627: LD_INT 0
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 12
9637: PUSH
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 2
9643: PPUSH
9644: CALL_OW 12
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
9655: LD_ADDR_OWVAR 31
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PLUS
9674: PUSH
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 8
9684: PUSH
9685: LD_INT 2
9687: ARRAY
9688: PLUS
9689: PUSH
9690: LD_VAR 0 6
9694: PUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_INT 3
9702: ARRAY
9703: PLUS
9704: PUSH
9705: LD_VAR 0 7
9709: PUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_INT 4
9717: ARRAY
9718: PLUS
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
9726: LD_ADDR_OWVAR 27
9730: PUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_INT 2
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// hc_gallery :=  ;
9742: LD_ADDR_OWVAR 33
9746: PUSH
9747: LD_STRING 
9749: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9750: LD_ADDR_OWVAR 29
9754: PUSH
9755: LD_INT 8
9757: PPUSH
9758: LD_INT 12
9760: PPUSH
9761: CALL_OW 12
9765: PUSH
9766: LD_INT 9
9768: PPUSH
9769: LD_INT 11
9771: PPUSH
9772: CALL_OW 12
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
// hc_name :=  ;
9781: LD_ADDR_OWVAR 26
9785: PUSH
9786: LD_STRING 
9788: ST_TO_ADDR
// result := CreateHuman ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: CALL_OW 44
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 3
9803: RET
// export function CreateVehicleWithDriver ( chassis , engine , weapon , area , dir , lvl ) ; var veh ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// vc_chassis := chassis ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 1
9817: ST_TO_ADDR
// vc_engine := engine ;
9818: LD_ADDR_OWVAR 39
9822: PUSH
9823: LD_VAR 0 2
9827: ST_TO_ADDR
// vc_weapon := weapon ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 3
9837: ST_TO_ADDR
// vc_control := control_manual ;
9838: LD_ADDR_OWVAR 38
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// veh := CreateVehicle ;
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: CALL_OW 45
9855: ST_TO_ADDR
// SetDir ( veh , dir ) ;
9856: LD_VAR 0 8
9860: PPUSH
9861: LD_VAR 0 5
9865: PPUSH
9866: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , lvl ) , veh ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 6
9894: PPUSH
9895: CALL 9265 0 2
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 52
// end ;
9909: LD_VAR 0 7
9913: RET
// export function LegionAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// uc_side := side ;
9923: LD_ADDR_OWVAR 20
9927: PUSH
9928: LD_VAR 0 1
9932: ST_TO_ADDR
// uc_nation := nation_arabian ;
9933: LD_ADDR_OWVAR 21
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// chassis := [ ar_half_tracked ] ;
9941: LD_ADDR_VAR 0 10
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: EMPTY
9950: LIST
9951: ST_TO_ADDR
// weapon := [ ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
9952: LD_ADDR_VAR 0 11
9956: PUSH
9957: LD_INT 24
9959: PUSH
9960: LD_INT 25
9962: PUSH
9963: LD_INT 27
9965: PUSH
9966: LD_INT 28
9968: PUSH
9969: LD_INT 29
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
// case typ of 1 :
9979: LD_VAR 0 3
9983: PUSH
9984: LD_INT 1
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10164
9992: POP
// begin for i = 1 to num do
9993: LD_ADDR_VAR 0 6
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 2
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10160
// begin vc_chassis := chassis [ 1 ] ;
10011: LD_ADDR_OWVAR 37
10015: PUSH
10016: LD_VAR 0 10
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: ST_TO_ADDR
// vc_engine := engine_combustion ;
10025: LD_ADDR_OWVAR 39
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// vc_control := control_manual ;
10033: LD_ADDR_OWVAR 38
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 3 ) ] ;
10041: LD_ADDR_OWVAR 40
10045: PUSH
10046: LD_VAR 0 11
10050: PUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 3
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: ST_TO_ADDR
// veh := CreateVehicle ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: CALL_OW 45
10072: ST_TO_ADDR
// if area = north_spawn then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 6
10080: EQUAL
10081: IFFALSE 10097
// SetDir ( veh , 3 ) else
10083: LD_VAR 0 9
10087: PPUSH
10088: LD_INT 3
10090: PPUSH
10091: CALL_OW 233
10095: GO 10109
// SetDir ( veh , 1 ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10109: LD_VAR 0 9
10113: PPUSH
10114: LD_VAR 0 4
10118: PPUSH
10119: LD_INT 0
10121: PPUSH
10122: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10126: LD_ADDR_VAR 0 7
10130: PUSH
10131: LD_INT 1
10133: PPUSH
10134: LD_EXP 4
10138: PPUSH
10139: CALL 9265 0 2
10143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10144: LD_VAR 0 7
10148: PPUSH
10149: LD_VAR 0 9
10153: PPUSH
10154: CALL_OW 52
// end ;
10158: GO 10008
10160: POP
10161: POP
// end ; 2 :
10162: GO 10423
10164: LD_INT 2
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10422
10172: POP
// begin for i = 1 to num do
10173: LD_ADDR_VAR 0 6
10177: PUSH
10178: DOUBLE
10179: LD_INT 1
10181: DEC
10182: ST_TO_ADDR
10183: LD_VAR 0 2
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10340
// begin vc_chassis := chassis [ 1 ] ;
10191: LD_ADDR_OWVAR 37
10195: PUSH
10196: LD_VAR 0 10
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: ST_TO_ADDR
// vc_engine := engine_combustion ;
10205: LD_ADDR_OWVAR 39
10209: PUSH
10210: LD_INT 1
10212: ST_TO_ADDR
// vc_control := control_manual ;
10213: LD_ADDR_OWVAR 38
10217: PUSH
10218: LD_INT 1
10220: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
10221: LD_ADDR_OWVAR 40
10225: PUSH
10226: LD_VAR 0 11
10230: PUSH
10231: LD_INT 3
10233: PPUSH
10234: LD_INT 5
10236: PPUSH
10237: CALL_OW 12
10241: ARRAY
10242: ST_TO_ADDR
// veh := CreateVehicle ;
10243: LD_ADDR_VAR 0 9
10247: PUSH
10248: CALL_OW 45
10252: ST_TO_ADDR
// if area = north_spawn then
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 6
10260: EQUAL
10261: IFFALSE 10277
// SetDir ( veh , 3 ) else
10263: LD_VAR 0 9
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: CALL_OW 233
10275: GO 10289
// SetDir ( veh , 1 ) ;
10277: LD_VAR 0 9
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 9
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// un := CreateHumanWithClass ( 1 , game_eskill ) ;
10306: LD_ADDR_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_EXP 4
10318: PPUSH
10319: CALL 9265 0 2
10323: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_VAR 0 9
10333: PPUSH
10334: CALL_OW 52
// end ;
10338: GO 10188
10340: POP
10341: POP
// for i = 1 to 4 do
10342: LD_ADDR_VAR 0 6
10346: PUSH
10347: DOUBLE
10348: LD_INT 1
10350: DEC
10351: ST_TO_ADDR
10352: LD_INT 4
10354: PUSH
10355: FOR_TO
10356: IFFALSE 10418
// begin uc_nation := 0 ;
10358: LD_ADDR_OWVAR 21
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// hc_class := 17 ;
10366: LD_ADDR_OWVAR 28
10370: PUSH
10371: LD_INT 17
10373: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
10374: LD_ADDR_OWVAR 29
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 13
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
10399: LD_VAR 0 7
10403: PPUSH
10404: LD_VAR 0 4
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 49
// end ;
10416: GO 10355
10418: POP
10419: POP
// end ; end ;
10420: GO 10423
10422: POP
// end ;
10423: LD_VAR 0 5
10427: RET
// export function GetDistXYToSide ( x , y , side ) ; var tmp , dist ; begin
10428: LD_INT 0
10430: PPUSH
10431: PPUSH
10432: PPUSH
// tmp := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 73
10469: ST_TO_ADDR
// dist := GetDistUnitXY ( tmp , x , y ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 5
10479: PPUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 297
10494: ST_TO_ADDR
// result := dist ;
10495: LD_ADDR_VAR 0 4
10499: PUSH
10500: LD_VAR 0 6
10504: ST_TO_ADDR
// end ;
10505: LD_VAR 0 4
10509: RET
// export function GetSibAmount ( side ) ; var i , bases ; begin
10510: LD_INT 0
10512: PPUSH
10513: PPUSH
10514: PPUSH
// result := 0 ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 0
10522: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 30
10545: PUSH
10546: LD_INT 0
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 30
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 69
10576: ST_TO_ADDR
// if not bases then
10577: LD_VAR 0 4
10581: NOT
10582: IFFALSE 10586
// exit ;
10584: GO 10632
// for i in bases do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_VAR 0 4
10595: PUSH
10596: FOR_IN
10597: IFFALSE 10630
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 2
10608: PUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 274
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 275
10626: PLUS
10627: ST_TO_ADDR
10628: GO 10596
10630: POP
10631: POP
// end ; end_of_file
10632: LD_VAR 0 2
10636: RET
// on UnitDestroyed ( un ) do begin if un = jota_base then
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10654
// YouLost ( jota-lose ) ;
10647: LD_STRING jota-lose
10649: PPUSH
10650: CALL_OW 104
// if game_type = 2 and depot_captured = false then
10654: LD_EXP 1
10658: PUSH
10659: LD_INT 2
10661: EQUAL
10662: PUSH
10663: LD_EXP 8
10667: PUSH
10668: LD_INT 0
10670: EQUAL
10671: AND
10672: IFFALSE 10987
// begin if GetSide ( un ) = 1 and un in FilterUnitsInArea ( def_area , [ f_type , unit_building ] ) diff FilterAllUnits ( [ [ [ [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_weapon ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ] ] ] ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: CALL_OW 255
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: PUSH
10688: LD_VAR 0 1
10692: PUSH
10693: LD_INT 11
10695: PPUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 70
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 10
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: DIFF
10778: IN
10779: AND
10780: IFFALSE 10866
// begin ai_build := ai_build ^ GetBType ( un ) ;
10782: LD_ADDR_EXP 10
10786: PUSH
10787: LD_EXP 10
10791: PUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 266
10801: ADD
10802: ST_TO_ADDR
// ai_build := ai_build ^ GetX ( un ) ;
10803: LD_ADDR_EXP 10
10807: PUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 250
10822: ADD
10823: ST_TO_ADDR
// ai_build := ai_build ^ GetY ( un ) ;
10824: LD_ADDR_EXP 10
10828: PUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 251
10843: ADD
10844: ST_TO_ADDR
// ai_build := ai_build ^ GetDir ( un ) ;
10845: LD_ADDR_EXP 10
10849: PUSH
10850: LD_EXP 10
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 254
10864: ADD
10865: ST_TO_ADDR
// end ; if GetSide ( un ) = 1 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 255
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: PUSH
10880: LD_VAR 0 1
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: IN
10900: AND
10901: IFFALSE 10987
// begin ai_vehs := ai_vehs ^ GetChassis ( un ) ;
10903: LD_ADDR_EXP 11
10907: PUSH
10908: LD_EXP 11
10912: PUSH
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 265
10922: ADD
10923: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetEngine ( un ) ;
10924: LD_ADDR_EXP 11
10928: PUSH
10929: LD_EXP 11
10933: PUSH
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 262
10943: ADD
10944: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetControl ( un ) ;
10945: LD_ADDR_EXP 11
10949: PUSH
10950: LD_EXP 11
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 263
10964: ADD
10965: ST_TO_ADDR
// ai_vehs := ai_vehs ^ GetWeapon ( un ) ;
10966: LD_ADDR_EXP 11
10970: PUSH
10971: LD_EXP 11
10975: PUSH
10976: LD_VAR 0 1
10980: PPUSH
10981: CALL_OW 264
10985: ADD
10986: ST_TO_ADDR
// end ; end ; end ;
10987: PPOPN 1
10989: END
// every 0 0$03 trigger game_type = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
10990: LD_EXP 1
10994: PUSH
10995: LD_INT 1
10997: EQUAL
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_INT 0
11030: EQUAL
11031: AND
11032: IFFALSE 11044
11034: GO 11036
11036: DISABLE
// YouLost ( peo-lose ) ;
11037: LD_STRING peo-lose
11039: PPUSH
11040: CALL_OW 104
11044: END
// every 0 0$03 trigger game_type = 2 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11045: LD_EXP 1
11049: PUSH
11050: LD_INT 2
11052: EQUAL
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: AND
11087: IFFALSE 11099
11089: GO 11091
11091: DISABLE
// YouLost ( peo-lose ) ;
11092: LD_STRING peo-lose
11094: PPUSH
11095: CALL_OW 104
11099: END
// every 0 0$03 trigger GetSibAmount ( your_side ) >= need_to_win do var i ;
11100: LD_OWVAR 2
11104: PPUSH
11105: CALL 10510 0 1
11109: PUSH
11110: LD_EXP 5
11114: GREATEREQUAL
11115: IFFALSE 11201
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin if GetSide ( jota_base ) = your_side then
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 255
11130: PUSH
11131: LD_OWVAR 2
11135: EQUAL
11136: IFFALSE 11179
// begin for i = 1 to 3 do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_INT 3
11150: PUSH
11151: FOR_TO
11152: IFFALSE 11166
// AddMedal ( med , 1 ) ;
11154: LD_STRING med
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 101
11164: GO 11151
11166: POP
11167: POP
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// YouWin ;
11175: CALL_OW 103
// end ; if GetSide ( jota_base ) <> your_side then
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 255
11186: PUSH
11187: LD_OWVAR 2
11191: NONEQUAL
11192: IFFALSE 11201
// YouLost ( source ) ;
11194: LD_STRING source
11196: PPUSH
11197: CALL_OW 104
// end ; end_of_file
11201: PPOPN 1
11203: END
// every 2 2$05 + 0 0$11 do
11204: GO 11206
11206: DISABLE
// begin enable ;
11207: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11208: LD_INT 1
11210: PPUSH
11211: LD_INT 5
11213: PPUSH
11214: CALL_OW 12
11218: PPUSH
11219: LD_INT 7
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$37 ) ) ;
11229: LD_INT 350
11231: PPUSH
11232: LD_INT 1295
11234: PPUSH
11235: CALL_OW 12
11239: PPUSH
11240: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 5
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 57
// end ;
11262: END
// every 1 1$09 trigger game_type = 2 and depot_captured = false do
11263: LD_EXP 1
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: PUSH
11272: LD_EXP 8
11276: PUSH
11277: LD_INT 0
11279: EQUAL
11280: AND
11281: IFFALSE 11371
11283: GO 11285
11285: DISABLE
// begin enable ;
11286: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 7
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 0 0$50 ) ) ;
11308: LD_INT 350
11310: PPUSH
11311: LD_INT 1750
11313: PPUSH
11314: CALL_OW 12
11318: PPUSH
11319: CALL_OW 67
// if timer <= [ 35 35$00 , 30 30$00 , 25 25$00 ] [ game_diff ] then
11323: LD_EXP 6
11327: PUSH
11328: LD_INT 73500
11330: PUSH
11331: LD_INT 63000
11333: PUSH
11334: LD_INT 52500
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: LD_EXP 2
11346: ARRAY
11347: LESSEQUAL
11348: IFFALSE 11371
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crate , true ) ;
11350: LD_INT 1
11352: PPUSH
11353: LD_INT 5
11355: PPUSH
11356: CALL_OW 12
11360: PPUSH
11361: LD_INT 12
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 55
// end ; end_of_file
11371: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: CALL 24836 0 3
// end ;
11391: PPOPN 3
11393: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL 24844 0 1
// end ; end_of_file
11403: PPOPN 1
11405: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11406: LD_INT 0
11408: PPUSH
// ar_miner := 81 ;
11409: LD_ADDR_EXP 28
11413: PUSH
11414: LD_INT 81
11416: ST_TO_ADDR
// ar_crane := 88 ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 88
11424: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11425: LD_ADDR_EXP 22
11429: PUSH
11430: LD_INT 89
11432: ST_TO_ADDR
// us_hack := 99 ;
11433: LD_ADDR_EXP 23
11437: PUSH
11438: LD_INT 99
11440: ST_TO_ADDR
// us_artillery := 97 ;
11441: LD_ADDR_EXP 24
11445: PUSH
11446: LD_INT 97
11448: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11449: LD_ADDR_EXP 25
11453: PUSH
11454: LD_INT 91
11456: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11457: LD_ADDR_EXP 26
11461: PUSH
11462: LD_INT 92
11464: ST_TO_ADDR
// ru_radar := 98 ;
11465: LD_ADDR_EXP 21
11469: PUSH
11470: LD_INT 98
11472: ST_TO_ADDR
// tech_Artillery := 80 ;
11473: LD_ADDR_EXP 29
11477: PUSH
11478: LD_INT 80
11480: ST_TO_ADDR
// tech_RadMat := 81 ;
11481: LD_ADDR_EXP 30
11485: PUSH
11486: LD_INT 81
11488: ST_TO_ADDR
// tech_BasicTools := 82 ;
11489: LD_ADDR_EXP 31
11493: PUSH
11494: LD_INT 82
11496: ST_TO_ADDR
// tech_Cargo := 83 ;
11497: LD_ADDR_EXP 32
11501: PUSH
11502: LD_INT 83
11504: ST_TO_ADDR
// tech_Track := 84 ;
11505: LD_ADDR_EXP 33
11509: PUSH
11510: LD_INT 84
11512: ST_TO_ADDR
// tech_Crane := 85 ;
11513: LD_ADDR_EXP 34
11517: PUSH
11518: LD_INT 85
11520: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11521: LD_ADDR_EXP 35
11525: PUSH
11526: LD_INT 86
11528: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11529: LD_ADDR_EXP 36
11533: PUSH
11534: LD_INT 87
11536: ST_TO_ADDR
// class_mastodont := 31 ;
11537: LD_ADDR_EXP 37
11541: PUSH
11542: LD_INT 31
11544: ST_TO_ADDR
// class_horse := 21 ;
11545: LD_ADDR_EXP 38
11549: PUSH
11550: LD_INT 21
11552: ST_TO_ADDR
// end ;
11553: LD_VAR 0 1
11557: RET
// every 1 do
11558: GO 11560
11560: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11561: CALL 11406 0 0
11565: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11566: LD_INT 0
11568: PPUSH
// if p2 = 100 then
11569: LD_VAR 0 2
11573: PUSH
11574: LD_INT 100
11576: EQUAL
11577: IFFALSE 12526
// begin if not StreamModeActive then
11579: LD_EXP 39
11583: NOT
11584: IFFALSE 11594
// StreamModeActive := true ;
11586: LD_ADDR_EXP 39
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 0 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 0
11601: EQUAL
11602: IFFALSE 11608
// InitStreamMode ;
11604: CALL 12686 0 0
// if p3 = 1 then
11608: LD_VAR 0 3
11612: PUSH
11613: LD_INT 1
11615: EQUAL
11616: IFFALSE 11626
// sRocket := true ;
11618: LD_ADDR_EXP 44
11622: PUSH
11623: LD_INT 1
11625: ST_TO_ADDR
// if p3 = 2 then
11626: LD_VAR 0 3
11630: PUSH
11631: LD_INT 2
11633: EQUAL
11634: IFFALSE 11644
// sSpeed := true ;
11636: LD_ADDR_EXP 43
11640: PUSH
11641: LD_INT 1
11643: ST_TO_ADDR
// if p3 = 3 then
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 3
11651: EQUAL
11652: IFFALSE 11662
// sEngine := true ;
11654: LD_ADDR_EXP 45
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// if p3 = 4 then
11662: LD_VAR 0 3
11666: PUSH
11667: LD_INT 4
11669: EQUAL
11670: IFFALSE 11680
// sSpec := true ;
11672: LD_ADDR_EXP 42
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if p3 = 5 then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_INT 5
11687: EQUAL
11688: IFFALSE 11698
// sLevel := true ;
11690: LD_ADDR_EXP 46
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// if p3 = 6 then
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 6
11705: EQUAL
11706: IFFALSE 11716
// sArmoury := true ;
11708: LD_ADDR_EXP 47
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// if p3 = 7 then
11716: LD_VAR 0 3
11720: PUSH
11721: LD_INT 7
11723: EQUAL
11724: IFFALSE 11734
// sRadar := true ;
11726: LD_ADDR_EXP 48
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// if p3 = 8 then
11734: LD_VAR 0 3
11738: PUSH
11739: LD_INT 8
11741: EQUAL
11742: IFFALSE 11752
// sBunker := true ;
11744: LD_ADDR_EXP 49
11748: PUSH
11749: LD_INT 1
11751: ST_TO_ADDR
// if p3 = 9 then
11752: LD_VAR 0 3
11756: PUSH
11757: LD_INT 9
11759: EQUAL
11760: IFFALSE 11770
// sHack := true ;
11762: LD_ADDR_EXP 50
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// if p3 = 10 then
11770: LD_VAR 0 3
11774: PUSH
11775: LD_INT 10
11777: EQUAL
11778: IFFALSE 11788
// sFire := true ;
11780: LD_ADDR_EXP 51
11784: PUSH
11785: LD_INT 1
11787: ST_TO_ADDR
// if p3 = 11 then
11788: LD_VAR 0 3
11792: PUSH
11793: LD_INT 11
11795: EQUAL
11796: IFFALSE 11806
// sRefresh := true ;
11798: LD_ADDR_EXP 52
11802: PUSH
11803: LD_INT 1
11805: ST_TO_ADDR
// if p3 = 12 then
11806: LD_VAR 0 3
11810: PUSH
11811: LD_INT 12
11813: EQUAL
11814: IFFALSE 11824
// sExp := true ;
11816: LD_ADDR_EXP 53
11820: PUSH
11821: LD_INT 1
11823: ST_TO_ADDR
// if p3 = 13 then
11824: LD_VAR 0 3
11828: PUSH
11829: LD_INT 13
11831: EQUAL
11832: IFFALSE 11842
// sDepot := true ;
11834: LD_ADDR_EXP 54
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// if p3 = 14 then
11842: LD_VAR 0 3
11846: PUSH
11847: LD_INT 14
11849: EQUAL
11850: IFFALSE 11860
// sFlag := true ;
11852: LD_ADDR_EXP 55
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// if p3 = 15 then
11860: LD_VAR 0 3
11864: PUSH
11865: LD_INT 15
11867: EQUAL
11868: IFFALSE 11878
// sKamikadze := true ;
11870: LD_ADDR_EXP 63
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// if p3 = 16 then
11878: LD_VAR 0 3
11882: PUSH
11883: LD_INT 16
11885: EQUAL
11886: IFFALSE 11896
// sTroll := true ;
11888: LD_ADDR_EXP 64
11892: PUSH
11893: LD_INT 1
11895: ST_TO_ADDR
// if p3 = 17 then
11896: LD_VAR 0 3
11900: PUSH
11901: LD_INT 17
11903: EQUAL
11904: IFFALSE 11914
// sSlow := true ;
11906: LD_ADDR_EXP 65
11910: PUSH
11911: LD_INT 1
11913: ST_TO_ADDR
// if p3 = 18 then
11914: LD_VAR 0 3
11918: PUSH
11919: LD_INT 18
11921: EQUAL
11922: IFFALSE 11932
// sLack := true ;
11924: LD_ADDR_EXP 66
11928: PUSH
11929: LD_INT 1
11931: ST_TO_ADDR
// if p3 = 19 then
11932: LD_VAR 0 3
11936: PUSH
11937: LD_INT 19
11939: EQUAL
11940: IFFALSE 11950
// sTank := true ;
11942: LD_ADDR_EXP 68
11946: PUSH
11947: LD_INT 1
11949: ST_TO_ADDR
// if p3 = 20 then
11950: LD_VAR 0 3
11954: PUSH
11955: LD_INT 20
11957: EQUAL
11958: IFFALSE 11968
// sRemote := true ;
11960: LD_ADDR_EXP 69
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// if p3 = 21 then
11968: LD_VAR 0 3
11972: PUSH
11973: LD_INT 21
11975: EQUAL
11976: IFFALSE 11986
// sPowell := true ;
11978: LD_ADDR_EXP 70
11982: PUSH
11983: LD_INT 1
11985: ST_TO_ADDR
// if p3 = 22 then
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 22
11993: EQUAL
11994: IFFALSE 12004
// sTeleport := true ;
11996: LD_ADDR_EXP 73
12000: PUSH
12001: LD_INT 1
12003: ST_TO_ADDR
// if p3 = 23 then
12004: LD_VAR 0 3
12008: PUSH
12009: LD_INT 23
12011: EQUAL
12012: IFFALSE 12022
// sOilTower := true ;
12014: LD_ADDR_EXP 75
12018: PUSH
12019: LD_INT 1
12021: ST_TO_ADDR
// if p3 = 24 then
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 24
12029: EQUAL
12030: IFFALSE 12040
// sShovel := true ;
12032: LD_ADDR_EXP 76
12036: PUSH
12037: LD_INT 1
12039: ST_TO_ADDR
// if p3 = 25 then
12040: LD_VAR 0 3
12044: PUSH
12045: LD_INT 25
12047: EQUAL
12048: IFFALSE 12058
// sSheik := true ;
12050: LD_ADDR_EXP 77
12054: PUSH
12055: LD_INT 1
12057: ST_TO_ADDR
// if p3 = 26 then
12058: LD_VAR 0 3
12062: PUSH
12063: LD_INT 26
12065: EQUAL
12066: IFFALSE 12076
// sEarthquake := true ;
12068: LD_ADDR_EXP 79
12072: PUSH
12073: LD_INT 1
12075: ST_TO_ADDR
// if p3 = 27 then
12076: LD_VAR 0 3
12080: PUSH
12081: LD_INT 27
12083: EQUAL
12084: IFFALSE 12094
// sAI := true ;
12086: LD_ADDR_EXP 80
12090: PUSH
12091: LD_INT 1
12093: ST_TO_ADDR
// if p3 = 28 then
12094: LD_VAR 0 3
12098: PUSH
12099: LD_INT 28
12101: EQUAL
12102: IFFALSE 12112
// sCargo := true ;
12104: LD_ADDR_EXP 83
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
// if p3 = 29 then
12112: LD_VAR 0 3
12116: PUSH
12117: LD_INT 29
12119: EQUAL
12120: IFFALSE 12130
// sDLaser := true ;
12122: LD_ADDR_EXP 84
12126: PUSH
12127: LD_INT 1
12129: ST_TO_ADDR
// if p3 = 30 then
12130: LD_VAR 0 3
12134: PUSH
12135: LD_INT 30
12137: EQUAL
12138: IFFALSE 12148
// sExchange := true ;
12140: LD_ADDR_EXP 85
12144: PUSH
12145: LD_INT 1
12147: ST_TO_ADDR
// if p3 = 31 then
12148: LD_VAR 0 3
12152: PUSH
12153: LD_INT 31
12155: EQUAL
12156: IFFALSE 12166
// sFac := true ;
12158: LD_ADDR_EXP 86
12162: PUSH
12163: LD_INT 1
12165: ST_TO_ADDR
// if p3 = 32 then
12166: LD_VAR 0 3
12170: PUSH
12171: LD_INT 32
12173: EQUAL
12174: IFFALSE 12184
// sPower := true ;
12176: LD_ADDR_EXP 87
12180: PUSH
12181: LD_INT 1
12183: ST_TO_ADDR
// if p3 = 33 then
12184: LD_VAR 0 3
12188: PUSH
12189: LD_INT 33
12191: EQUAL
12192: IFFALSE 12202
// sRandom := true ;
12194: LD_ADDR_EXP 88
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// if p3 = 34 then
12202: LD_VAR 0 3
12206: PUSH
12207: LD_INT 34
12209: EQUAL
12210: IFFALSE 12220
// sShield := true ;
12212: LD_ADDR_EXP 89
12216: PUSH
12217: LD_INT 1
12219: ST_TO_ADDR
// if p3 = 35 then
12220: LD_VAR 0 3
12224: PUSH
12225: LD_INT 35
12227: EQUAL
12228: IFFALSE 12238
// sTime := true ;
12230: LD_ADDR_EXP 90
12234: PUSH
12235: LD_INT 1
12237: ST_TO_ADDR
// if p3 = 36 then
12238: LD_VAR 0 3
12242: PUSH
12243: LD_INT 36
12245: EQUAL
12246: IFFALSE 12256
// sTools := true ;
12248: LD_ADDR_EXP 91
12252: PUSH
12253: LD_INT 1
12255: ST_TO_ADDR
// if p3 = 101 then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_INT 101
12263: EQUAL
12264: IFFALSE 12274
// sSold := true ;
12266: LD_ADDR_EXP 56
12270: PUSH
12271: LD_INT 1
12273: ST_TO_ADDR
// if p3 = 102 then
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 102
12281: EQUAL
12282: IFFALSE 12292
// sDiff := true ;
12284: LD_ADDR_EXP 57
12288: PUSH
12289: LD_INT 1
12291: ST_TO_ADDR
// if p3 = 103 then
12292: LD_VAR 0 3
12296: PUSH
12297: LD_INT 103
12299: EQUAL
12300: IFFALSE 12310
// sFog := true ;
12302: LD_ADDR_EXP 60
12306: PUSH
12307: LD_INT 1
12309: ST_TO_ADDR
// if p3 = 104 then
12310: LD_VAR 0 3
12314: PUSH
12315: LD_INT 104
12317: EQUAL
12318: IFFALSE 12328
// sReset := true ;
12320: LD_ADDR_EXP 61
12324: PUSH
12325: LD_INT 1
12327: ST_TO_ADDR
// if p3 = 105 then
12328: LD_VAR 0 3
12332: PUSH
12333: LD_INT 105
12335: EQUAL
12336: IFFALSE 12346
// sSun := true ;
12338: LD_ADDR_EXP 62
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// if p3 = 106 then
12346: LD_VAR 0 3
12350: PUSH
12351: LD_INT 106
12353: EQUAL
12354: IFFALSE 12364
// sTiger := true ;
12356: LD_ADDR_EXP 58
12360: PUSH
12361: LD_INT 1
12363: ST_TO_ADDR
// if p3 = 107 then
12364: LD_VAR 0 3
12368: PUSH
12369: LD_INT 107
12371: EQUAL
12372: IFFALSE 12382
// sBomb := true ;
12374: LD_ADDR_EXP 59
12378: PUSH
12379: LD_INT 1
12381: ST_TO_ADDR
// if p3 = 108 then
12382: LD_VAR 0 3
12386: PUSH
12387: LD_INT 108
12389: EQUAL
12390: IFFALSE 12400
// sWound := true ;
12392: LD_ADDR_EXP 67
12396: PUSH
12397: LD_INT 1
12399: ST_TO_ADDR
// if p3 = 109 then
12400: LD_VAR 0 3
12404: PUSH
12405: LD_INT 109
12407: EQUAL
12408: IFFALSE 12418
// sBetray := true ;
12410: LD_ADDR_EXP 71
12414: PUSH
12415: LD_INT 1
12417: ST_TO_ADDR
// if p3 = 110 then
12418: LD_VAR 0 3
12422: PUSH
12423: LD_INT 110
12425: EQUAL
12426: IFFALSE 12436
// sContamin := true ;
12428: LD_ADDR_EXP 72
12432: PUSH
12433: LD_INT 1
12435: ST_TO_ADDR
// if p3 = 111 then
12436: LD_VAR 0 3
12440: PUSH
12441: LD_INT 111
12443: EQUAL
12444: IFFALSE 12454
// sOil := true ;
12446: LD_ADDR_EXP 74
12450: PUSH
12451: LD_INT 1
12453: ST_TO_ADDR
// if p3 = 112 then
12454: LD_VAR 0 3
12458: PUSH
12459: LD_INT 112
12461: EQUAL
12462: IFFALSE 12472
// sStu := true ;
12464: LD_ADDR_EXP 78
12468: PUSH
12469: LD_INT 1
12471: ST_TO_ADDR
// if p3 = 113 then
12472: LD_VAR 0 3
12476: PUSH
12477: LD_INT 113
12479: EQUAL
12480: IFFALSE 12490
// sBazooka := true ;
12482: LD_ADDR_EXP 81
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// if p3 = 114 then
12490: LD_VAR 0 3
12494: PUSH
12495: LD_INT 114
12497: EQUAL
12498: IFFALSE 12508
// sMortar := true ;
12500: LD_ADDR_EXP 82
12504: PUSH
12505: LD_INT 1
12507: ST_TO_ADDR
// if p3 = 115 then
12508: LD_VAR 0 3
12512: PUSH
12513: LD_INT 115
12515: EQUAL
12516: IFFALSE 12526
// sRanger := true ;
12518: LD_ADDR_EXP 92
12522: PUSH
12523: LD_INT 1
12525: ST_TO_ADDR
// end ; if p2 = 101 then
12526: LD_VAR 0 2
12530: PUSH
12531: LD_INT 101
12533: EQUAL
12534: IFFALSE 12662
// begin case p3 of 1 :
12536: LD_VAR 0 3
12540: PUSH
12541: LD_INT 1
12543: DOUBLE
12544: EQUAL
12545: IFTRUE 12549
12547: GO 12556
12549: POP
// hHackUnlimitedResources ; 2 :
12550: CALL 23699 0 0
12554: GO 12662
12556: LD_INT 2
12558: DOUBLE
12559: EQUAL
12560: IFTRUE 12564
12562: GO 12571
12564: POP
// hHackSetLevel10 ; 3 :
12565: CALL 23832 0 0
12569: GO 12662
12571: LD_INT 3
12573: DOUBLE
12574: EQUAL
12575: IFTRUE 12579
12577: GO 12586
12579: POP
// hHackSetLevel10YourUnits ; 4 :
12580: CALL 23917 0 0
12584: GO 12662
12586: LD_INT 4
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12601
12594: POP
// hHackInvincible ; 5 :
12595: CALL 24365 0 0
12599: GO 12662
12601: LD_INT 5
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12616
12609: POP
// hHackInvisible ; 6 :
12610: CALL 24476 0 0
12614: GO 12662
12616: LD_INT 6
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 12631
12624: POP
// hHackChangeYourSide ; 7 :
12625: CALL 24533 0 0
12629: GO 12662
12631: LD_INT 7
12633: DOUBLE
12634: EQUAL
12635: IFTRUE 12639
12637: GO 12646
12639: POP
// hHackChangeUnitSide ; 8 :
12640: CALL 24575 0 0
12644: GO 12662
12646: LD_INT 8
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12661
12654: POP
// hHackFog ; end ;
12655: CALL 24676 0 0
12659: GO 12662
12661: POP
// end ; end ;
12662: LD_VAR 0 7
12666: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12667: GO 12669
12669: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12670: LD_STRING initStreamRollete();
12672: PPUSH
12673: CALL_OW 559
// InitStreamMode ;
12677: CALL 12686 0 0
// DefineStreamItems ( ) ;
12681: CALL 13126 0 0
// end ;
12685: END
// function InitStreamMode ; begin
12686: LD_INT 0
12688: PPUSH
// streamModeActive := false ;
12689: LD_ADDR_EXP 39
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// normalCounter := 36 ;
12697: LD_ADDR_EXP 40
12701: PUSH
12702: LD_INT 36
12704: ST_TO_ADDR
// hardcoreCounter := 16 ;
12705: LD_ADDR_EXP 41
12709: PUSH
12710: LD_INT 16
12712: ST_TO_ADDR
// sRocket := false ;
12713: LD_ADDR_EXP 44
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// sSpeed := false ;
12721: LD_ADDR_EXP 43
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// sEngine := false ;
12729: LD_ADDR_EXP 45
12733: PUSH
12734: LD_INT 0
12736: ST_TO_ADDR
// sSpec := false ;
12737: LD_ADDR_EXP 42
12741: PUSH
12742: LD_INT 0
12744: ST_TO_ADDR
// sLevel := false ;
12745: LD_ADDR_EXP 46
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// sArmoury := false ;
12753: LD_ADDR_EXP 47
12757: PUSH
12758: LD_INT 0
12760: ST_TO_ADDR
// sRadar := false ;
12761: LD_ADDR_EXP 48
12765: PUSH
12766: LD_INT 0
12768: ST_TO_ADDR
// sBunker := false ;
12769: LD_ADDR_EXP 49
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// sHack := false ;
12777: LD_ADDR_EXP 50
12781: PUSH
12782: LD_INT 0
12784: ST_TO_ADDR
// sFire := false ;
12785: LD_ADDR_EXP 51
12789: PUSH
12790: LD_INT 0
12792: ST_TO_ADDR
// sRefresh := false ;
12793: LD_ADDR_EXP 52
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// sExp := false ;
12801: LD_ADDR_EXP 53
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// sDepot := false ;
12809: LD_ADDR_EXP 54
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// sFlag := false ;
12817: LD_ADDR_EXP 55
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// sKamikadze := false ;
12825: LD_ADDR_EXP 63
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// sTroll := false ;
12833: LD_ADDR_EXP 64
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// sSlow := false ;
12841: LD_ADDR_EXP 65
12845: PUSH
12846: LD_INT 0
12848: ST_TO_ADDR
// sLack := false ;
12849: LD_ADDR_EXP 66
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// sTank := false ;
12857: LD_ADDR_EXP 68
12861: PUSH
12862: LD_INT 0
12864: ST_TO_ADDR
// sRemote := false ;
12865: LD_ADDR_EXP 69
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// sPowell := false ;
12873: LD_ADDR_EXP 70
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// sTeleport := false ;
12881: LD_ADDR_EXP 73
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// sOilTower := false ;
12889: LD_ADDR_EXP 75
12893: PUSH
12894: LD_INT 0
12896: ST_TO_ADDR
// sShovel := false ;
12897: LD_ADDR_EXP 76
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// sSheik := false ;
12905: LD_ADDR_EXP 77
12909: PUSH
12910: LD_INT 0
12912: ST_TO_ADDR
// sEarthquake := false ;
12913: LD_ADDR_EXP 79
12917: PUSH
12918: LD_INT 0
12920: ST_TO_ADDR
// sAI := false ;
12921: LD_ADDR_EXP 80
12925: PUSH
12926: LD_INT 0
12928: ST_TO_ADDR
// sCargo := false ;
12929: LD_ADDR_EXP 83
12933: PUSH
12934: LD_INT 0
12936: ST_TO_ADDR
// sDLaser := false ;
12937: LD_ADDR_EXP 84
12941: PUSH
12942: LD_INT 0
12944: ST_TO_ADDR
// sExchange := false ;
12945: LD_ADDR_EXP 85
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// sFac := false ;
12953: LD_ADDR_EXP 86
12957: PUSH
12958: LD_INT 0
12960: ST_TO_ADDR
// sPower := false ;
12961: LD_ADDR_EXP 87
12965: PUSH
12966: LD_INT 0
12968: ST_TO_ADDR
// sRandom := false ;
12969: LD_ADDR_EXP 88
12973: PUSH
12974: LD_INT 0
12976: ST_TO_ADDR
// sShield := false ;
12977: LD_ADDR_EXP 89
12981: PUSH
12982: LD_INT 0
12984: ST_TO_ADDR
// sTime := false ;
12985: LD_ADDR_EXP 90
12989: PUSH
12990: LD_INT 0
12992: ST_TO_ADDR
// sTools := false ;
12993: LD_ADDR_EXP 91
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// sSold := false ;
13001: LD_ADDR_EXP 56
13005: PUSH
13006: LD_INT 0
13008: ST_TO_ADDR
// sDiff := false ;
13009: LD_ADDR_EXP 57
13013: PUSH
13014: LD_INT 0
13016: ST_TO_ADDR
// sFog := false ;
13017: LD_ADDR_EXP 60
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// sReset := false ;
13025: LD_ADDR_EXP 61
13029: PUSH
13030: LD_INT 0
13032: ST_TO_ADDR
// sSun := false ;
13033: LD_ADDR_EXP 62
13037: PUSH
13038: LD_INT 0
13040: ST_TO_ADDR
// sTiger := false ;
13041: LD_ADDR_EXP 58
13045: PUSH
13046: LD_INT 0
13048: ST_TO_ADDR
// sBomb := false ;
13049: LD_ADDR_EXP 59
13053: PUSH
13054: LD_INT 0
13056: ST_TO_ADDR
// sWound := false ;
13057: LD_ADDR_EXP 67
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// sBetray := false ;
13065: LD_ADDR_EXP 71
13069: PUSH
13070: LD_INT 0
13072: ST_TO_ADDR
// sContamin := false ;
13073: LD_ADDR_EXP 72
13077: PUSH
13078: LD_INT 0
13080: ST_TO_ADDR
// sOil := false ;
13081: LD_ADDR_EXP 74
13085: PUSH
13086: LD_INT 0
13088: ST_TO_ADDR
// sStu := false ;
13089: LD_ADDR_EXP 78
13093: PUSH
13094: LD_INT 0
13096: ST_TO_ADDR
// sBazooka := false ;
13097: LD_ADDR_EXP 81
13101: PUSH
13102: LD_INT 0
13104: ST_TO_ADDR
// sMortar := false ;
13105: LD_ADDR_EXP 82
13109: PUSH
13110: LD_INT 0
13112: ST_TO_ADDR
// sRanger := false ;
13113: LD_ADDR_EXP 92
13117: PUSH
13118: LD_INT 0
13120: ST_TO_ADDR
// end ;
13121: LD_VAR 0 1
13125: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13126: LD_INT 0
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
// result := [ ] ;
13133: LD_ADDR_VAR 0 1
13137: PUSH
13138: EMPTY
13139: ST_TO_ADDR
// if campaign_id = 1 then
13140: LD_OWVAR 69
13144: PUSH
13145: LD_INT 1
13147: EQUAL
13148: IFFALSE 16086
// begin case mission_number of 1 :
13150: LD_OWVAR 70
13154: PUSH
13155: LD_INT 1
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13227
13163: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: LD_INT 4
13174: PUSH
13175: LD_INT 11
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: LD_INT 15
13183: PUSH
13184: LD_INT 16
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_INT 23
13192: PUSH
13193: LD_INT 26
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 101
13209: PUSH
13210: LD_INT 102
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: ST_TO_ADDR
13225: GO 16084
13227: LD_INT 2
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 13307
13235: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13236: LD_ADDR_VAR 0 1
13240: PUSH
13241: LD_INT 2
13243: PUSH
13244: LD_INT 4
13246: PUSH
13247: LD_INT 11
13249: PUSH
13250: LD_INT 12
13252: PUSH
13253: LD_INT 15
13255: PUSH
13256: LD_INT 16
13258: PUSH
13259: LD_INT 22
13261: PUSH
13262: LD_INT 23
13264: PUSH
13265: LD_INT 26
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 101
13281: PUSH
13282: LD_INT 102
13284: PUSH
13285: LD_INT 105
13287: PUSH
13288: LD_INT 106
13290: PUSH
13291: LD_INT 108
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: ST_TO_ADDR
13305: GO 16084
13307: LD_INT 3
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13391
13315: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13316: LD_ADDR_VAR 0 1
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: LD_INT 4
13326: PUSH
13327: LD_INT 5
13329: PUSH
13330: LD_INT 11
13332: PUSH
13333: LD_INT 12
13335: PUSH
13336: LD_INT 15
13338: PUSH
13339: LD_INT 16
13341: PUSH
13342: LD_INT 22
13344: PUSH
13345: LD_INT 26
13347: PUSH
13348: LD_INT 36
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 101
13365: PUSH
13366: LD_INT 102
13368: PUSH
13369: LD_INT 105
13371: PUSH
13372: LD_INT 106
13374: PUSH
13375: LD_INT 108
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: ST_TO_ADDR
13389: GO 16084
13391: LD_INT 4
13393: DOUBLE
13394: EQUAL
13395: IFTRUE 13399
13397: GO 13483
13399: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13400: LD_ADDR_VAR 0 1
13404: PUSH
13405: LD_INT 2
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: LD_INT 8
13416: PUSH
13417: LD_INT 11
13419: PUSH
13420: LD_INT 12
13422: PUSH
13423: LD_INT 15
13425: PUSH
13426: LD_INT 16
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 23
13434: PUSH
13435: LD_INT 26
13437: PUSH
13438: LD_INT 36
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 101
13457: PUSH
13458: LD_INT 102
13460: PUSH
13461: LD_INT 105
13463: PUSH
13464: LD_INT 106
13466: PUSH
13467: LD_INT 108
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: ST_TO_ADDR
13481: GO 16084
13483: LD_INT 5
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13591
13491: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13492: LD_ADDR_VAR 0 1
13496: PUSH
13497: LD_INT 2
13499: PUSH
13500: LD_INT 4
13502: PUSH
13503: LD_INT 5
13505: PUSH
13506: LD_INT 6
13508: PUSH
13509: LD_INT 8
13511: PUSH
13512: LD_INT 11
13514: PUSH
13515: LD_INT 12
13517: PUSH
13518: LD_INT 15
13520: PUSH
13521: LD_INT 16
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_INT 23
13529: PUSH
13530: LD_INT 25
13532: PUSH
13533: LD_INT 26
13535: PUSH
13536: LD_INT 36
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 101
13557: PUSH
13558: LD_INT 102
13560: PUSH
13561: LD_INT 105
13563: PUSH
13564: LD_INT 106
13566: PUSH
13567: LD_INT 108
13569: PUSH
13570: LD_INT 109
13572: PUSH
13573: LD_INT 112
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 16084
13591: LD_INT 6
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13719
13599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 4
13610: PUSH
13611: LD_INT 5
13613: PUSH
13614: LD_INT 6
13616: PUSH
13617: LD_INT 8
13619: PUSH
13620: LD_INT 11
13622: PUSH
13623: LD_INT 12
13625: PUSH
13626: LD_INT 15
13628: PUSH
13629: LD_INT 16
13631: PUSH
13632: LD_INT 20
13634: PUSH
13635: LD_INT 21
13637: PUSH
13638: LD_INT 22
13640: PUSH
13641: LD_INT 23
13643: PUSH
13644: LD_INT 25
13646: PUSH
13647: LD_INT 26
13649: PUSH
13650: LD_INT 30
13652: PUSH
13653: LD_INT 31
13655: PUSH
13656: LD_INT 32
13658: PUSH
13659: LD_INT 36
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 101
13685: PUSH
13686: LD_INT 102
13688: PUSH
13689: LD_INT 105
13691: PUSH
13692: LD_INT 106
13694: PUSH
13695: LD_INT 108
13697: PUSH
13698: LD_INT 109
13700: PUSH
13701: LD_INT 112
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: ST_TO_ADDR
13717: GO 16084
13719: LD_INT 7
13721: DOUBLE
13722: EQUAL
13723: IFTRUE 13727
13725: GO 13827
13727: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: LD_INT 5
13741: PUSH
13742: LD_INT 7
13744: PUSH
13745: LD_INT 11
13747: PUSH
13748: LD_INT 12
13750: PUSH
13751: LD_INT 15
13753: PUSH
13754: LD_INT 16
13756: PUSH
13757: LD_INT 20
13759: PUSH
13760: LD_INT 21
13762: PUSH
13763: LD_INT 22
13765: PUSH
13766: LD_INT 23
13768: PUSH
13769: LD_INT 25
13771: PUSH
13772: LD_INT 26
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 101
13793: PUSH
13794: LD_INT 102
13796: PUSH
13797: LD_INT 103
13799: PUSH
13800: LD_INT 105
13802: PUSH
13803: LD_INT 106
13805: PUSH
13806: LD_INT 108
13808: PUSH
13809: LD_INT 112
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: ST_TO_ADDR
13825: GO 16084
13827: LD_INT 8
13829: DOUBLE
13830: EQUAL
13831: IFTRUE 13835
13833: GO 13963
13835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: LD_INT 4
13846: PUSH
13847: LD_INT 5
13849: PUSH
13850: LD_INT 6
13852: PUSH
13853: LD_INT 7
13855: PUSH
13856: LD_INT 8
13858: PUSH
13859: LD_INT 11
13861: PUSH
13862: LD_INT 12
13864: PUSH
13865: LD_INT 15
13867: PUSH
13868: LD_INT 16
13870: PUSH
13871: LD_INT 20
13873: PUSH
13874: LD_INT 21
13876: PUSH
13877: LD_INT 22
13879: PUSH
13880: LD_INT 23
13882: PUSH
13883: LD_INT 25
13885: PUSH
13886: LD_INT 26
13888: PUSH
13889: LD_INT 30
13891: PUSH
13892: LD_INT 31
13894: PUSH
13895: LD_INT 32
13897: PUSH
13898: LD_INT 36
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 101
13925: PUSH
13926: LD_INT 102
13928: PUSH
13929: LD_INT 103
13931: PUSH
13932: LD_INT 105
13934: PUSH
13935: LD_INT 106
13937: PUSH
13938: LD_INT 108
13940: PUSH
13941: LD_INT 109
13943: PUSH
13944: LD_INT 112
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: ST_TO_ADDR
13961: GO 16084
13963: LD_INT 9
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 14107
13971: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13972: LD_ADDR_VAR 0 1
13976: PUSH
13977: LD_INT 2
13979: PUSH
13980: LD_INT 4
13982: PUSH
13983: LD_INT 5
13985: PUSH
13986: LD_INT 6
13988: PUSH
13989: LD_INT 7
13991: PUSH
13992: LD_INT 8
13994: PUSH
13995: LD_INT 11
13997: PUSH
13998: LD_INT 12
14000: PUSH
14001: LD_INT 15
14003: PUSH
14004: LD_INT 16
14006: PUSH
14007: LD_INT 20
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_INT 23
14018: PUSH
14019: LD_INT 25
14021: PUSH
14022: LD_INT 26
14024: PUSH
14025: LD_INT 28
14027: PUSH
14028: LD_INT 30
14030: PUSH
14031: LD_INT 31
14033: PUSH
14034: LD_INT 32
14036: PUSH
14037: LD_INT 36
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 101
14065: PUSH
14066: LD_INT 102
14068: PUSH
14069: LD_INT 103
14071: PUSH
14072: LD_INT 105
14074: PUSH
14075: LD_INT 106
14077: PUSH
14078: LD_INT 108
14080: PUSH
14081: LD_INT 109
14083: PUSH
14084: LD_INT 112
14086: PUSH
14087: LD_INT 114
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: ST_TO_ADDR
14105: GO 16084
14107: LD_INT 10
14109: DOUBLE
14110: EQUAL
14111: IFTRUE 14115
14113: GO 14299
14115: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 4
14126: PUSH
14127: LD_INT 5
14129: PUSH
14130: LD_INT 6
14132: PUSH
14133: LD_INT 7
14135: PUSH
14136: LD_INT 8
14138: PUSH
14139: LD_INT 9
14141: PUSH
14142: LD_INT 10
14144: PUSH
14145: LD_INT 11
14147: PUSH
14148: LD_INT 12
14150: PUSH
14151: LD_INT 13
14153: PUSH
14154: LD_INT 14
14156: PUSH
14157: LD_INT 15
14159: PUSH
14160: LD_INT 16
14162: PUSH
14163: LD_INT 17
14165: PUSH
14166: LD_INT 18
14168: PUSH
14169: LD_INT 19
14171: PUSH
14172: LD_INT 20
14174: PUSH
14175: LD_INT 21
14177: PUSH
14178: LD_INT 22
14180: PUSH
14181: LD_INT 23
14183: PUSH
14184: LD_INT 24
14186: PUSH
14187: LD_INT 25
14189: PUSH
14190: LD_INT 26
14192: PUSH
14193: LD_INT 28
14195: PUSH
14196: LD_INT 30
14198: PUSH
14199: LD_INT 31
14201: PUSH
14202: LD_INT 32
14204: PUSH
14205: LD_INT 36
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 101
14241: PUSH
14242: LD_INT 102
14244: PUSH
14245: LD_INT 103
14247: PUSH
14248: LD_INT 104
14250: PUSH
14251: LD_INT 105
14253: PUSH
14254: LD_INT 106
14256: PUSH
14257: LD_INT 107
14259: PUSH
14260: LD_INT 108
14262: PUSH
14263: LD_INT 109
14265: PUSH
14266: LD_INT 110
14268: PUSH
14269: LD_INT 111
14271: PUSH
14272: LD_INT 112
14274: PUSH
14275: LD_INT 114
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: ST_TO_ADDR
14297: GO 16084
14299: LD_INT 11
14301: DOUBLE
14302: EQUAL
14303: IFTRUE 14307
14305: GO 14499
14307: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_INT 2
14315: PUSH
14316: LD_INT 3
14318: PUSH
14319: LD_INT 4
14321: PUSH
14322: LD_INT 5
14324: PUSH
14325: LD_INT 6
14327: PUSH
14328: LD_INT 7
14330: PUSH
14331: LD_INT 8
14333: PUSH
14334: LD_INT 9
14336: PUSH
14337: LD_INT 10
14339: PUSH
14340: LD_INT 11
14342: PUSH
14343: LD_INT 12
14345: PUSH
14346: LD_INT 13
14348: PUSH
14349: LD_INT 14
14351: PUSH
14352: LD_INT 15
14354: PUSH
14355: LD_INT 16
14357: PUSH
14358: LD_INT 17
14360: PUSH
14361: LD_INT 18
14363: PUSH
14364: LD_INT 19
14366: PUSH
14367: LD_INT 20
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 22
14375: PUSH
14376: LD_INT 23
14378: PUSH
14379: LD_INT 24
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 26
14387: PUSH
14388: LD_INT 28
14390: PUSH
14391: LD_INT 30
14393: PUSH
14394: LD_INT 31
14396: PUSH
14397: LD_INT 32
14399: PUSH
14400: LD_INT 34
14402: PUSH
14403: LD_INT 36
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 101
14441: PUSH
14442: LD_INT 102
14444: PUSH
14445: LD_INT 103
14447: PUSH
14448: LD_INT 104
14450: PUSH
14451: LD_INT 105
14453: PUSH
14454: LD_INT 106
14456: PUSH
14457: LD_INT 107
14459: PUSH
14460: LD_INT 108
14462: PUSH
14463: LD_INT 109
14465: PUSH
14466: LD_INT 110
14468: PUSH
14469: LD_INT 111
14471: PUSH
14472: LD_INT 112
14474: PUSH
14475: LD_INT 114
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: ST_TO_ADDR
14497: GO 16084
14499: LD_INT 12
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14715
14507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14508: LD_ADDR_VAR 0 1
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 3
14521: PUSH
14522: LD_INT 4
14524: PUSH
14525: LD_INT 5
14527: PUSH
14528: LD_INT 6
14530: PUSH
14531: LD_INT 7
14533: PUSH
14534: LD_INT 8
14536: PUSH
14537: LD_INT 9
14539: PUSH
14540: LD_INT 10
14542: PUSH
14543: LD_INT 11
14545: PUSH
14546: LD_INT 12
14548: PUSH
14549: LD_INT 13
14551: PUSH
14552: LD_INT 14
14554: PUSH
14555: LD_INT 15
14557: PUSH
14558: LD_INT 16
14560: PUSH
14561: LD_INT 17
14563: PUSH
14564: LD_INT 18
14566: PUSH
14567: LD_INT 19
14569: PUSH
14570: LD_INT 20
14572: PUSH
14573: LD_INT 21
14575: PUSH
14576: LD_INT 22
14578: PUSH
14579: LD_INT 23
14581: PUSH
14582: LD_INT 24
14584: PUSH
14585: LD_INT 25
14587: PUSH
14588: LD_INT 26
14590: PUSH
14591: LD_INT 27
14593: PUSH
14594: LD_INT 28
14596: PUSH
14597: LD_INT 30
14599: PUSH
14600: LD_INT 31
14602: PUSH
14603: LD_INT 32
14605: PUSH
14606: LD_INT 33
14608: PUSH
14609: LD_INT 34
14611: PUSH
14612: LD_INT 36
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 101
14653: PUSH
14654: LD_INT 102
14656: PUSH
14657: LD_INT 103
14659: PUSH
14660: LD_INT 104
14662: PUSH
14663: LD_INT 105
14665: PUSH
14666: LD_INT 106
14668: PUSH
14669: LD_INT 107
14671: PUSH
14672: LD_INT 108
14674: PUSH
14675: LD_INT 109
14677: PUSH
14678: LD_INT 110
14680: PUSH
14681: LD_INT 111
14683: PUSH
14684: LD_INT 112
14686: PUSH
14687: LD_INT 113
14689: PUSH
14690: LD_INT 114
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: ST_TO_ADDR
14713: GO 16084
14715: LD_INT 13
14717: DOUBLE
14718: EQUAL
14719: IFTRUE 14723
14721: GO 14919
14723: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: LD_INT 1
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 4
14740: PUSH
14741: LD_INT 5
14743: PUSH
14744: LD_INT 8
14746: PUSH
14747: LD_INT 9
14749: PUSH
14750: LD_INT 10
14752: PUSH
14753: LD_INT 11
14755: PUSH
14756: LD_INT 12
14758: PUSH
14759: LD_INT 14
14761: PUSH
14762: LD_INT 15
14764: PUSH
14765: LD_INT 16
14767: PUSH
14768: LD_INT 17
14770: PUSH
14771: LD_INT 18
14773: PUSH
14774: LD_INT 19
14776: PUSH
14777: LD_INT 20
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 24
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 26
14797: PUSH
14798: LD_INT 27
14800: PUSH
14801: LD_INT 28
14803: PUSH
14804: LD_INT 30
14806: PUSH
14807: LD_INT 31
14809: PUSH
14810: LD_INT 32
14812: PUSH
14813: LD_INT 33
14815: PUSH
14816: LD_INT 34
14818: PUSH
14819: LD_INT 36
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 101
14857: PUSH
14858: LD_INT 102
14860: PUSH
14861: LD_INT 103
14863: PUSH
14864: LD_INT 104
14866: PUSH
14867: LD_INT 105
14869: PUSH
14870: LD_INT 106
14872: PUSH
14873: LD_INT 107
14875: PUSH
14876: LD_INT 108
14878: PUSH
14879: LD_INT 109
14881: PUSH
14882: LD_INT 110
14884: PUSH
14885: LD_INT 111
14887: PUSH
14888: LD_INT 112
14890: PUSH
14891: LD_INT 113
14893: PUSH
14894: LD_INT 114
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: ST_TO_ADDR
14917: GO 16084
14919: LD_INT 14
14921: DOUBLE
14922: EQUAL
14923: IFTRUE 14927
14925: GO 15139
14927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: LD_INT 2
14938: PUSH
14939: LD_INT 3
14941: PUSH
14942: LD_INT 4
14944: PUSH
14945: LD_INT 5
14947: PUSH
14948: LD_INT 6
14950: PUSH
14951: LD_INT 7
14953: PUSH
14954: LD_INT 8
14956: PUSH
14957: LD_INT 9
14959: PUSH
14960: LD_INT 10
14962: PUSH
14963: LD_INT 11
14965: PUSH
14966: LD_INT 12
14968: PUSH
14969: LD_INT 13
14971: PUSH
14972: LD_INT 14
14974: PUSH
14975: LD_INT 15
14977: PUSH
14978: LD_INT 16
14980: PUSH
14981: LD_INT 17
14983: PUSH
14984: LD_INT 18
14986: PUSH
14987: LD_INT 19
14989: PUSH
14990: LD_INT 20
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_INT 23
15001: PUSH
15002: LD_INT 24
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 26
15010: PUSH
15011: LD_INT 27
15013: PUSH
15014: LD_INT 28
15016: PUSH
15017: LD_INT 29
15019: PUSH
15020: LD_INT 30
15022: PUSH
15023: LD_INT 31
15025: PUSH
15026: LD_INT 32
15028: PUSH
15029: LD_INT 33
15031: PUSH
15032: LD_INT 34
15034: PUSH
15035: LD_INT 36
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 101
15077: PUSH
15078: LD_INT 102
15080: PUSH
15081: LD_INT 103
15083: PUSH
15084: LD_INT 104
15086: PUSH
15087: LD_INT 105
15089: PUSH
15090: LD_INT 106
15092: PUSH
15093: LD_INT 107
15095: PUSH
15096: LD_INT 108
15098: PUSH
15099: LD_INT 109
15101: PUSH
15102: LD_INT 110
15104: PUSH
15105: LD_INT 111
15107: PUSH
15108: LD_INT 112
15110: PUSH
15111: LD_INT 113
15113: PUSH
15114: LD_INT 114
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: ST_TO_ADDR
15137: GO 16084
15139: LD_INT 15
15141: DOUBLE
15142: EQUAL
15143: IFTRUE 15147
15145: GO 15359
15147: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15148: LD_ADDR_VAR 0 1
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: LD_INT 3
15161: PUSH
15162: LD_INT 4
15164: PUSH
15165: LD_INT 5
15167: PUSH
15168: LD_INT 6
15170: PUSH
15171: LD_INT 7
15173: PUSH
15174: LD_INT 8
15176: PUSH
15177: LD_INT 9
15179: PUSH
15180: LD_INT 10
15182: PUSH
15183: LD_INT 11
15185: PUSH
15186: LD_INT 12
15188: PUSH
15189: LD_INT 13
15191: PUSH
15192: LD_INT 14
15194: PUSH
15195: LD_INT 15
15197: PUSH
15198: LD_INT 16
15200: PUSH
15201: LD_INT 17
15203: PUSH
15204: LD_INT 18
15206: PUSH
15207: LD_INT 19
15209: PUSH
15210: LD_INT 20
15212: PUSH
15213: LD_INT 21
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_INT 23
15221: PUSH
15222: LD_INT 24
15224: PUSH
15225: LD_INT 25
15227: PUSH
15228: LD_INT 26
15230: PUSH
15231: LD_INT 27
15233: PUSH
15234: LD_INT 28
15236: PUSH
15237: LD_INT 29
15239: PUSH
15240: LD_INT 30
15242: PUSH
15243: LD_INT 31
15245: PUSH
15246: LD_INT 32
15248: PUSH
15249: LD_INT 33
15251: PUSH
15252: LD_INT 34
15254: PUSH
15255: LD_INT 36
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 101
15297: PUSH
15298: LD_INT 102
15300: PUSH
15301: LD_INT 103
15303: PUSH
15304: LD_INT 104
15306: PUSH
15307: LD_INT 105
15309: PUSH
15310: LD_INT 106
15312: PUSH
15313: LD_INT 107
15315: PUSH
15316: LD_INT 108
15318: PUSH
15319: LD_INT 109
15321: PUSH
15322: LD_INT 110
15324: PUSH
15325: LD_INT 111
15327: PUSH
15328: LD_INT 112
15330: PUSH
15331: LD_INT 113
15333: PUSH
15334: LD_INT 114
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: ST_TO_ADDR
15357: GO 16084
15359: LD_INT 16
15361: DOUBLE
15362: EQUAL
15363: IFTRUE 15367
15365: GO 15491
15367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_INT 2
15375: PUSH
15376: LD_INT 4
15378: PUSH
15379: LD_INT 5
15381: PUSH
15382: LD_INT 7
15384: PUSH
15385: LD_INT 11
15387: PUSH
15388: LD_INT 12
15390: PUSH
15391: LD_INT 15
15393: PUSH
15394: LD_INT 16
15396: PUSH
15397: LD_INT 20
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 23
15408: PUSH
15409: LD_INT 25
15411: PUSH
15412: LD_INT 26
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 31
15420: PUSH
15421: LD_INT 32
15423: PUSH
15424: LD_INT 33
15426: PUSH
15427: LD_INT 34
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 101
15453: PUSH
15454: LD_INT 102
15456: PUSH
15457: LD_INT 103
15459: PUSH
15460: LD_INT 106
15462: PUSH
15463: LD_INT 108
15465: PUSH
15466: LD_INT 112
15468: PUSH
15469: LD_INT 113
15471: PUSH
15472: LD_INT 114
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: ST_TO_ADDR
15489: GO 16084
15491: LD_INT 17
15493: DOUBLE
15494: EQUAL
15495: IFTRUE 15499
15497: GO 15711
15499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15500: LD_ADDR_VAR 0 1
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: LD_INT 2
15510: PUSH
15511: LD_INT 3
15513: PUSH
15514: LD_INT 4
15516: PUSH
15517: LD_INT 5
15519: PUSH
15520: LD_INT 6
15522: PUSH
15523: LD_INT 7
15525: PUSH
15526: LD_INT 8
15528: PUSH
15529: LD_INT 9
15531: PUSH
15532: LD_INT 10
15534: PUSH
15535: LD_INT 11
15537: PUSH
15538: LD_INT 12
15540: PUSH
15541: LD_INT 13
15543: PUSH
15544: LD_INT 14
15546: PUSH
15547: LD_INT 15
15549: PUSH
15550: LD_INT 16
15552: PUSH
15553: LD_INT 17
15555: PUSH
15556: LD_INT 18
15558: PUSH
15559: LD_INT 19
15561: PUSH
15562: LD_INT 20
15564: PUSH
15565: LD_INT 21
15567: PUSH
15568: LD_INT 22
15570: PUSH
15571: LD_INT 23
15573: PUSH
15574: LD_INT 24
15576: PUSH
15577: LD_INT 25
15579: PUSH
15580: LD_INT 26
15582: PUSH
15583: LD_INT 27
15585: PUSH
15586: LD_INT 28
15588: PUSH
15589: LD_INT 29
15591: PUSH
15592: LD_INT 30
15594: PUSH
15595: LD_INT 31
15597: PUSH
15598: LD_INT 32
15600: PUSH
15601: LD_INT 33
15603: PUSH
15604: LD_INT 34
15606: PUSH
15607: LD_INT 36
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 101
15649: PUSH
15650: LD_INT 102
15652: PUSH
15653: LD_INT 103
15655: PUSH
15656: LD_INT 104
15658: PUSH
15659: LD_INT 105
15661: PUSH
15662: LD_INT 106
15664: PUSH
15665: LD_INT 107
15667: PUSH
15668: LD_INT 108
15670: PUSH
15671: LD_INT 109
15673: PUSH
15674: LD_INT 110
15676: PUSH
15677: LD_INT 111
15679: PUSH
15680: LD_INT 112
15682: PUSH
15683: LD_INT 113
15685: PUSH
15686: LD_INT 114
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: ST_TO_ADDR
15709: GO 16084
15711: LD_INT 18
15713: DOUBLE
15714: EQUAL
15715: IFTRUE 15719
15717: GO 15855
15719: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15720: LD_ADDR_VAR 0 1
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 4
15730: PUSH
15731: LD_INT 5
15733: PUSH
15734: LD_INT 7
15736: PUSH
15737: LD_INT 11
15739: PUSH
15740: LD_INT 12
15742: PUSH
15743: LD_INT 15
15745: PUSH
15746: LD_INT 16
15748: PUSH
15749: LD_INT 20
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 22
15757: PUSH
15758: LD_INT 23
15760: PUSH
15761: LD_INT 25
15763: PUSH
15764: LD_INT 26
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 31
15772: PUSH
15773: LD_INT 32
15775: PUSH
15776: LD_INT 33
15778: PUSH
15779: LD_INT 34
15781: PUSH
15782: LD_INT 35
15784: PUSH
15785: LD_INT 36
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 101
15813: PUSH
15814: LD_INT 102
15816: PUSH
15817: LD_INT 103
15819: PUSH
15820: LD_INT 106
15822: PUSH
15823: LD_INT 108
15825: PUSH
15826: LD_INT 112
15828: PUSH
15829: LD_INT 113
15831: PUSH
15832: LD_INT 114
15834: PUSH
15835: LD_INT 115
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: ST_TO_ADDR
15853: GO 16084
15855: LD_INT 19
15857: DOUBLE
15858: EQUAL
15859: IFTRUE 15863
15861: GO 16083
15863: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: LD_INT 3
15877: PUSH
15878: LD_INT 4
15880: PUSH
15881: LD_INT 5
15883: PUSH
15884: LD_INT 6
15886: PUSH
15887: LD_INT 7
15889: PUSH
15890: LD_INT 8
15892: PUSH
15893: LD_INT 9
15895: PUSH
15896: LD_INT 10
15898: PUSH
15899: LD_INT 11
15901: PUSH
15902: LD_INT 12
15904: PUSH
15905: LD_INT 13
15907: PUSH
15908: LD_INT 14
15910: PUSH
15911: LD_INT 15
15913: PUSH
15914: LD_INT 16
15916: PUSH
15917: LD_INT 17
15919: PUSH
15920: LD_INT 18
15922: PUSH
15923: LD_INT 19
15925: PUSH
15926: LD_INT 20
15928: PUSH
15929: LD_INT 21
15931: PUSH
15932: LD_INT 22
15934: PUSH
15935: LD_INT 23
15937: PUSH
15938: LD_INT 24
15940: PUSH
15941: LD_INT 25
15943: PUSH
15944: LD_INT 26
15946: PUSH
15947: LD_INT 27
15949: PUSH
15950: LD_INT 28
15952: PUSH
15953: LD_INT 29
15955: PUSH
15956: LD_INT 30
15958: PUSH
15959: LD_INT 31
15961: PUSH
15962: LD_INT 32
15964: PUSH
15965: LD_INT 33
15967: PUSH
15968: LD_INT 34
15970: PUSH
15971: LD_INT 35
15973: PUSH
15974: LD_INT 36
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 101
16017: PUSH
16018: LD_INT 102
16020: PUSH
16021: LD_INT 103
16023: PUSH
16024: LD_INT 104
16026: PUSH
16027: LD_INT 105
16029: PUSH
16030: LD_INT 106
16032: PUSH
16033: LD_INT 107
16035: PUSH
16036: LD_INT 108
16038: PUSH
16039: LD_INT 109
16041: PUSH
16042: LD_INT 110
16044: PUSH
16045: LD_INT 111
16047: PUSH
16048: LD_INT 112
16050: PUSH
16051: LD_INT 113
16053: PUSH
16054: LD_INT 114
16056: PUSH
16057: LD_INT 115
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: ST_TO_ADDR
16081: GO 16084
16083: POP
// end else
16084: GO 16303
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: LD_INT 2
16096: PUSH
16097: LD_INT 3
16099: PUSH
16100: LD_INT 4
16102: PUSH
16103: LD_INT 5
16105: PUSH
16106: LD_INT 6
16108: PUSH
16109: LD_INT 7
16111: PUSH
16112: LD_INT 8
16114: PUSH
16115: LD_INT 9
16117: PUSH
16118: LD_INT 10
16120: PUSH
16121: LD_INT 11
16123: PUSH
16124: LD_INT 12
16126: PUSH
16127: LD_INT 13
16129: PUSH
16130: LD_INT 14
16132: PUSH
16133: LD_INT 15
16135: PUSH
16136: LD_INT 16
16138: PUSH
16139: LD_INT 17
16141: PUSH
16142: LD_INT 18
16144: PUSH
16145: LD_INT 19
16147: PUSH
16148: LD_INT 20
16150: PUSH
16151: LD_INT 21
16153: PUSH
16154: LD_INT 22
16156: PUSH
16157: LD_INT 23
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: LD_INT 25
16165: PUSH
16166: LD_INT 26
16168: PUSH
16169: LD_INT 27
16171: PUSH
16172: LD_INT 28
16174: PUSH
16175: LD_INT 29
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 31
16183: PUSH
16184: LD_INT 32
16186: PUSH
16187: LD_INT 33
16189: PUSH
16190: LD_INT 34
16192: PUSH
16193: LD_INT 35
16195: PUSH
16196: LD_INT 36
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 101
16239: PUSH
16240: LD_INT 102
16242: PUSH
16243: LD_INT 103
16245: PUSH
16246: LD_INT 104
16248: PUSH
16249: LD_INT 105
16251: PUSH
16252: LD_INT 106
16254: PUSH
16255: LD_INT 107
16257: PUSH
16258: LD_INT 108
16260: PUSH
16261: LD_INT 109
16263: PUSH
16264: LD_INT 110
16266: PUSH
16267: LD_INT 111
16269: PUSH
16270: LD_INT 112
16272: PUSH
16273: LD_INT 113
16275: PUSH
16276: LD_INT 114
16278: PUSH
16279: LD_INT 115
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: ST_TO_ADDR
// if result then
16303: LD_VAR 0 1
16307: IFFALSE 16596
// begin normal :=  ;
16309: LD_ADDR_VAR 0 3
16313: PUSH
16314: LD_STRING 
16316: ST_TO_ADDR
// hardcore :=  ;
16317: LD_ADDR_VAR 0 4
16321: PUSH
16322: LD_STRING 
16324: ST_TO_ADDR
// for i = 1 to normalCounter do
16325: LD_ADDR_VAR 0 5
16329: PUSH
16330: DOUBLE
16331: LD_INT 1
16333: DEC
16334: ST_TO_ADDR
16335: LD_EXP 40
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16442
// begin tmp := 0 ;
16343: LD_ADDR_VAR 0 2
16347: PUSH
16348: LD_STRING 0
16350: ST_TO_ADDR
// if result [ 1 ] then
16351: LD_VAR 0 1
16355: PUSH
16356: LD_INT 1
16358: ARRAY
16359: IFFALSE 16424
// if result [ 1 ] [ 1 ] = i then
16361: LD_VAR 0 1
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PUSH
16374: LD_VAR 0 5
16378: EQUAL
16379: IFFALSE 16424
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16381: LD_ADDR_VAR 0 1
16385: PUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_INT 1
16393: PPUSH
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL_OW 3
16410: PPUSH
16411: CALL_OW 1
16415: ST_TO_ADDR
// tmp := 1 ;
16416: LD_ADDR_VAR 0 2
16420: PUSH
16421: LD_STRING 1
16423: ST_TO_ADDR
// end ; normal := normal & tmp ;
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_VAR 0 3
16433: PUSH
16434: LD_VAR 0 2
16438: STR
16439: ST_TO_ADDR
// end ;
16440: GO 16340
16442: POP
16443: POP
// for i = 1 to hardcoreCounter do
16444: LD_ADDR_VAR 0 5
16448: PUSH
16449: DOUBLE
16450: LD_INT 1
16452: DEC
16453: ST_TO_ADDR
16454: LD_EXP 41
16458: PUSH
16459: FOR_TO
16460: IFFALSE 16565
// begin tmp := 0 ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_STRING 0
16469: ST_TO_ADDR
// if result [ 2 ] then
16470: LD_VAR 0 1
16474: PUSH
16475: LD_INT 2
16477: ARRAY
16478: IFFALSE 16547
// if result [ 2 ] [ 1 ] = 100 + i then
16480: LD_VAR 0 1
16484: PUSH
16485: LD_INT 2
16487: ARRAY
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PUSH
16493: LD_INT 100
16495: PUSH
16496: LD_VAR 0 5
16500: PLUS
16501: EQUAL
16502: IFFALSE 16547
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16504: LD_ADDR_VAR 0 1
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_INT 2
16516: PPUSH
16517: LD_VAR 0 1
16521: PUSH
16522: LD_INT 2
16524: ARRAY
16525: PPUSH
16526: LD_INT 1
16528: PPUSH
16529: CALL_OW 3
16533: PPUSH
16534: CALL_OW 1
16538: ST_TO_ADDR
// tmp := 1 ;
16539: LD_ADDR_VAR 0 2
16543: PUSH
16544: LD_STRING 1
16546: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_VAR 0 4
16556: PUSH
16557: LD_VAR 0 2
16561: STR
16562: ST_TO_ADDR
// end ;
16563: GO 16459
16565: POP
16566: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16567: LD_STRING getStreamItemsFromMission("
16569: PUSH
16570: LD_VAR 0 3
16574: STR
16575: PUSH
16576: LD_STRING ","
16578: STR
16579: PUSH
16580: LD_VAR 0 4
16584: STR
16585: PUSH
16586: LD_STRING ")
16588: STR
16589: PPUSH
16590: CALL_OW 559
// end else
16594: GO 16603
// ToLua ( getStreamItemsFromMission("","") ) ;
16596: LD_STRING getStreamItemsFromMission("","")
16598: PPUSH
16599: CALL_OW 559
// end ;
16603: LD_VAR 0 1
16607: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16608: LD_EXP 39
16612: PUSH
16613: LD_EXP 44
16617: AND
16618: IFFALSE 16742
16620: GO 16622
16622: DISABLE
16623: LD_INT 0
16625: PPUSH
16626: PPUSH
// begin enable ;
16627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: LD_INT 22
16635: PUSH
16636: LD_OWVAR 2
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: LD_INT 34
16650: PUSH
16651: LD_INT 7
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 34
16660: PUSH
16661: LD_INT 45
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 34
16670: PUSH
16671: LD_INT 28
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 34
16680: PUSH
16681: LD_INT 47
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PPUSH
16699: CALL_OW 69
16703: ST_TO_ADDR
// if not tmp then
16704: LD_VAR 0 2
16708: NOT
16709: IFFALSE 16713
// exit ;
16711: GO 16742
// for i in tmp do
16713: LD_ADDR_VAR 0 1
16717: PUSH
16718: LD_VAR 0 2
16722: PUSH
16723: FOR_IN
16724: IFFALSE 16740
// begin SetLives ( i , 0 ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 0
16733: PPUSH
16734: CALL_OW 234
// end ;
16738: GO 16723
16740: POP
16741: POP
// end ;
16742: PPOPN 2
16744: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16745: LD_EXP 39
16749: PUSH
16750: LD_EXP 45
16754: AND
16755: IFFALSE 16839
16757: GO 16759
16759: DISABLE
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
// begin enable ;
16764: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16765: LD_ADDR_VAR 0 2
16769: PUSH
16770: LD_INT 22
16772: PUSH
16773: LD_OWVAR 2
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 32
16784: PUSH
16785: LD_INT 3
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PPUSH
16796: CALL_OW 69
16800: ST_TO_ADDR
// if not tmp then
16801: LD_VAR 0 2
16805: NOT
16806: IFFALSE 16810
// exit ;
16808: GO 16839
// for i in tmp do
16810: LD_ADDR_VAR 0 1
16814: PUSH
16815: LD_VAR 0 2
16819: PUSH
16820: FOR_IN
16821: IFFALSE 16837
// begin SetLives ( i , 0 ) ;
16823: LD_VAR 0 1
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 234
// end ;
16835: GO 16820
16837: POP
16838: POP
// end ;
16839: PPOPN 2
16841: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16842: LD_EXP 39
16846: PUSH
16847: LD_EXP 42
16851: AND
16852: IFFALSE 16945
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
// begin enable ;
16860: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16861: LD_ADDR_VAR 0 1
16865: PUSH
16866: LD_INT 22
16868: PUSH
16869: LD_OWVAR 2
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 25
16883: PUSH
16884: LD_INT 5
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 25
16893: PUSH
16894: LD_INT 9
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 25
16903: PUSH
16904: LD_INT 8
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 69
16925: PUSH
16926: FOR_IN
16927: IFFALSE 16943
// begin SetClass ( i , 1 ) ;
16929: LD_VAR 0 1
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 336
// end ;
16941: GO 16926
16943: POP
16944: POP
// end ;
16945: PPOPN 1
16947: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16948: LD_EXP 39
16952: PUSH
16953: LD_EXP 43
16957: AND
16958: PUSH
16959: LD_OWVAR 65
16963: PUSH
16964: LD_INT 7
16966: LESS
16967: AND
16968: IFFALSE 16982
16970: GO 16972
16972: DISABLE
// begin enable ;
16973: ENABLE
// game_speed := 7 ;
16974: LD_ADDR_OWVAR 65
16978: PUSH
16979: LD_INT 7
16981: ST_TO_ADDR
// end ;
16982: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16983: LD_EXP 39
16987: PUSH
16988: LD_EXP 46
16992: AND
16993: IFFALSE 17195
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
17002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_INT 81
17010: PUSH
17011: LD_OWVAR 2
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 21
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PPUSH
17034: CALL_OW 69
17038: ST_TO_ADDR
// if not tmp then
17039: LD_VAR 0 3
17043: NOT
17044: IFFALSE 17048
// exit ;
17046: GO 17195
// if tmp > 5 then
17048: LD_VAR 0 3
17052: PUSH
17053: LD_INT 5
17055: GREATER
17056: IFFALSE 17068
// k := 5 else
17058: LD_ADDR_VAR 0 2
17062: PUSH
17063: LD_INT 5
17065: ST_TO_ADDR
17066: GO 17078
// k := tmp ;
17068: LD_ADDR_VAR 0 2
17072: PUSH
17073: LD_VAR 0 3
17077: ST_TO_ADDR
// for i := 1 to k do
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: DOUBLE
17084: LD_INT 1
17086: DEC
17087: ST_TO_ADDR
17088: LD_VAR 0 2
17092: PUSH
17093: FOR_TO
17094: IFFALSE 17193
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17096: LD_VAR 0 3
17100: PUSH
17101: LD_VAR 0 1
17105: ARRAY
17106: PPUSH
17107: LD_VAR 0 1
17111: PUSH
17112: LD_INT 4
17114: MOD
17115: PUSH
17116: LD_INT 1
17118: PLUS
17119: PPUSH
17120: CALL_OW 259
17124: PUSH
17125: LD_INT 10
17127: LESS
17128: IFFALSE 17191
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17130: LD_VAR 0 3
17134: PUSH
17135: LD_VAR 0 1
17139: ARRAY
17140: PPUSH
17141: LD_VAR 0 1
17145: PUSH
17146: LD_INT 4
17148: MOD
17149: PUSH
17150: LD_INT 1
17152: PLUS
17153: PPUSH
17154: LD_VAR 0 3
17158: PUSH
17159: LD_VAR 0 1
17163: ARRAY
17164: PPUSH
17165: LD_VAR 0 1
17169: PUSH
17170: LD_INT 4
17172: MOD
17173: PUSH
17174: LD_INT 1
17176: PLUS
17177: PPUSH
17178: CALL_OW 259
17182: PUSH
17183: LD_INT 1
17185: PLUS
17186: PPUSH
17187: CALL_OW 237
17191: GO 17093
17193: POP
17194: POP
// end ;
17195: PPOPN 3
17197: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17198: LD_EXP 39
17202: PUSH
17203: LD_EXP 47
17207: AND
17208: IFFALSE 17228
17210: GO 17212
17212: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17213: LD_INT 4
17215: PPUSH
17216: LD_OWVAR 2
17220: PPUSH
17221: LD_INT 0
17223: PPUSH
17224: CALL_OW 324
17228: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17229: LD_EXP 39
17233: PUSH
17234: LD_EXP 76
17238: AND
17239: IFFALSE 17259
17241: GO 17243
17243: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17244: LD_INT 19
17246: PPUSH
17247: LD_OWVAR 2
17251: PPUSH
17252: LD_INT 0
17254: PPUSH
17255: CALL_OW 324
17259: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17260: LD_EXP 39
17264: PUSH
17265: LD_EXP 48
17269: AND
17270: IFFALSE 17372
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
// begin enable ;
17279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_OWVAR 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 34
17302: PUSH
17303: LD_INT 11
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 34
17312: PUSH
17313: LD_INT 30
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: ST_TO_ADDR
// if not tmp then
17334: LD_VAR 0 2
17338: NOT
17339: IFFALSE 17343
// exit ;
17341: GO 17372
// for i in tmp do
17343: LD_ADDR_VAR 0 1
17347: PUSH
17348: LD_VAR 0 2
17352: PUSH
17353: FOR_IN
17354: IFFALSE 17370
// begin SetLives ( i , 0 ) ;
17356: LD_VAR 0 1
17360: PPUSH
17361: LD_INT 0
17363: PPUSH
17364: CALL_OW 234
// end ;
17368: GO 17353
17370: POP
17371: POP
// end ;
17372: PPOPN 2
17374: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17375: LD_EXP 39
17379: PUSH
17380: LD_EXP 49
17384: AND
17385: IFFALSE 17405
17387: GO 17389
17389: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17390: LD_INT 32
17392: PPUSH
17393: LD_OWVAR 2
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 324
17405: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17406: LD_EXP 39
17410: PUSH
17411: LD_EXP 50
17415: AND
17416: IFFALSE 17597
17418: GO 17420
17420: DISABLE
17421: LD_INT 0
17423: PPUSH
17424: PPUSH
17425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17426: LD_ADDR_VAR 0 2
17430: PUSH
17431: LD_INT 22
17433: PUSH
17434: LD_OWVAR 2
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 33
17445: PUSH
17446: LD_INT 3
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: ST_TO_ADDR
// if not tmp then
17462: LD_VAR 0 2
17466: NOT
17467: IFFALSE 17471
// exit ;
17469: GO 17597
// side := 0 ;
17471: LD_ADDR_VAR 0 3
17475: PUSH
17476: LD_INT 0
17478: ST_TO_ADDR
// for i := 1 to 8 do
17479: LD_ADDR_VAR 0 1
17483: PUSH
17484: DOUBLE
17485: LD_INT 1
17487: DEC
17488: ST_TO_ADDR
17489: LD_INT 8
17491: PUSH
17492: FOR_TO
17493: IFFALSE 17541
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17495: LD_OWVAR 2
17499: PUSH
17500: LD_VAR 0 1
17504: NONEQUAL
17505: PUSH
17506: LD_OWVAR 2
17510: PPUSH
17511: LD_VAR 0 1
17515: PPUSH
17516: CALL_OW 81
17520: PUSH
17521: LD_INT 2
17523: EQUAL
17524: AND
17525: IFFALSE 17539
// begin side := i ;
17527: LD_ADDR_VAR 0 3
17531: PUSH
17532: LD_VAR 0 1
17536: ST_TO_ADDR
// break ;
17537: GO 17541
// end ;
17539: GO 17492
17541: POP
17542: POP
// if not side then
17543: LD_VAR 0 3
17547: NOT
17548: IFFALSE 17552
// exit ;
17550: GO 17597
// for i := 1 to tmp do
17552: LD_ADDR_VAR 0 1
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 2
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17595
// if Prob ( 60 ) then
17570: LD_INT 60
17572: PPUSH
17573: CALL_OW 13
17577: IFFALSE 17593
// SetSide ( i , side ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_VAR 0 3
17588: PPUSH
17589: CALL_OW 235
17593: GO 17567
17595: POP
17596: POP
// end ;
17597: PPOPN 3
17599: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17600: LD_EXP 39
17604: PUSH
17605: LD_EXP 52
17609: AND
17610: IFFALSE 17729
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17618: LD_ADDR_VAR 0 1
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_OWVAR 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 21
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 3
17647: PUSH
17648: LD_INT 23
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: PUSH
17672: FOR_IN
17673: IFFALSE 17727
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17675: LD_VAR 0 1
17679: PPUSH
17680: CALL_OW 257
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 3
17693: PUSH
17694: LD_INT 4
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: IN
17703: IFFALSE 17725
// SetClass ( un , rand ( 1 , 4 ) ) ;
17705: LD_VAR 0 1
17709: PPUSH
17710: LD_INT 1
17712: PPUSH
17713: LD_INT 4
17715: PPUSH
17716: CALL_OW 12
17720: PPUSH
17721: CALL_OW 336
17725: GO 17672
17727: POP
17728: POP
// end ;
17729: PPOPN 1
17731: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17732: LD_EXP 39
17736: PUSH
17737: LD_EXP 51
17741: AND
17742: IFFALSE 17821
17744: GO 17746
17746: DISABLE
17747: LD_INT 0
17749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17750: LD_ADDR_VAR 0 1
17754: PUSH
17755: LD_INT 22
17757: PUSH
17758: LD_OWVAR 2
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 21
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: CALL_OW 69
17785: ST_TO_ADDR
// if not tmp then
17786: LD_VAR 0 1
17790: NOT
17791: IFFALSE 17795
// exit ;
17793: GO 17821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17795: LD_VAR 0 1
17799: PUSH
17800: LD_INT 1
17802: PPUSH
17803: LD_VAR 0 1
17807: PPUSH
17808: CALL_OW 12
17812: ARRAY
17813: PPUSH
17814: LD_INT 100
17816: PPUSH
17817: CALL_OW 234
// end ;
17821: PPOPN 1
17823: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17824: LD_EXP 39
17828: PUSH
17829: LD_EXP 53
17833: AND
17834: IFFALSE 17932
17836: GO 17838
17838: DISABLE
17839: LD_INT 0
17841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17842: LD_ADDR_VAR 0 1
17846: PUSH
17847: LD_INT 22
17849: PUSH
17850: LD_OWVAR 2
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 21
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// if not tmp then
17878: LD_VAR 0 1
17882: NOT
17883: IFFALSE 17887
// exit ;
17885: GO 17932
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17887: LD_VAR 0 1
17891: PUSH
17892: LD_INT 1
17894: PPUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 12
17904: ARRAY
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 4
17911: PPUSH
17912: CALL_OW 12
17916: PPUSH
17917: LD_INT 3000
17919: PPUSH
17920: LD_INT 9000
17922: PPUSH
17923: CALL_OW 12
17927: PPUSH
17928: CALL_OW 492
// end ;
17932: PPOPN 1
17934: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17935: LD_EXP 39
17939: PUSH
17940: LD_EXP 54
17944: AND
17945: IFFALSE 17965
17947: GO 17949
17949: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17950: LD_INT 1
17952: PPUSH
17953: LD_OWVAR 2
17957: PPUSH
17958: LD_INT 0
17960: PPUSH
17961: CALL_OW 324
17965: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17966: LD_EXP 39
17970: PUSH
17971: LD_EXP 55
17975: AND
17976: IFFALSE 18059
17978: GO 17980
17980: DISABLE
17981: LD_INT 0
17983: PPUSH
17984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17985: LD_ADDR_VAR 0 2
17989: PUSH
17990: LD_INT 22
17992: PUSH
17993: LD_OWVAR 2
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PPUSH
18016: CALL_OW 69
18020: ST_TO_ADDR
// if not tmp then
18021: LD_VAR 0 2
18025: NOT
18026: IFFALSE 18030
// exit ;
18028: GO 18059
// for i in tmp do
18030: LD_ADDR_VAR 0 1
18034: PUSH
18035: LD_VAR 0 2
18039: PUSH
18040: FOR_IN
18041: IFFALSE 18057
// SetBLevel ( i , 10 ) ;
18043: LD_VAR 0 1
18047: PPUSH
18048: LD_INT 10
18050: PPUSH
18051: CALL_OW 241
18055: GO 18040
18057: POP
18058: POP
// end ;
18059: PPOPN 2
18061: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18062: LD_EXP 39
18066: PUSH
18067: LD_EXP 56
18071: AND
18072: IFFALSE 18183
18074: GO 18076
18076: DISABLE
18077: LD_INT 0
18079: PPUSH
18080: PPUSH
18081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18082: LD_ADDR_VAR 0 3
18086: PUSH
18087: LD_INT 22
18089: PUSH
18090: LD_OWVAR 2
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 25
18101: PUSH
18102: LD_INT 1
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PPUSH
18113: CALL_OW 69
18117: ST_TO_ADDR
// if not tmp then
18118: LD_VAR 0 3
18122: NOT
18123: IFFALSE 18127
// exit ;
18125: GO 18183
// un := tmp [ rand ( 1 , tmp ) ] ;
18127: LD_ADDR_VAR 0 2
18131: PUSH
18132: LD_VAR 0 3
18136: PUSH
18137: LD_INT 1
18139: PPUSH
18140: LD_VAR 0 3
18144: PPUSH
18145: CALL_OW 12
18149: ARRAY
18150: ST_TO_ADDR
// if Crawls ( un ) then
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 318
18160: IFFALSE 18171
// ComWalk ( un ) ;
18162: LD_VAR 0 2
18166: PPUSH
18167: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18171: LD_VAR 0 2
18175: PPUSH
18176: LD_INT 5
18178: PPUSH
18179: CALL_OW 336
// end ;
18183: PPOPN 3
18185: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18186: LD_EXP 39
18190: PUSH
18191: LD_EXP 57
18195: AND
18196: PUSH
18197: LD_OWVAR 67
18201: PUSH
18202: LD_INT 3
18204: LESS
18205: AND
18206: IFFALSE 18225
18208: GO 18210
18210: DISABLE
// Difficulty := Difficulty + 1 ;
18211: LD_ADDR_OWVAR 67
18215: PUSH
18216: LD_OWVAR 67
18220: PUSH
18221: LD_INT 1
18223: PLUS
18224: ST_TO_ADDR
18225: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18226: LD_EXP 39
18230: PUSH
18231: LD_EXP 58
18235: AND
18236: IFFALSE 18339
18238: GO 18240
18240: DISABLE
18241: LD_INT 0
18243: PPUSH
// begin for i := 1 to 5 do
18244: LD_ADDR_VAR 0 1
18248: PUSH
18249: DOUBLE
18250: LD_INT 1
18252: DEC
18253: ST_TO_ADDR
18254: LD_INT 5
18256: PUSH
18257: FOR_TO
18258: IFFALSE 18337
// begin uc_nation := nation_nature ;
18260: LD_ADDR_OWVAR 21
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// uc_side := 0 ;
18268: LD_ADDR_OWVAR 20
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18276: LD_ADDR_OWVAR 29
18280: PUSH
18281: LD_INT 12
18283: PUSH
18284: LD_INT 12
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: ST_TO_ADDR
// hc_agressivity := 20 ;
18291: LD_ADDR_OWVAR 35
18295: PUSH
18296: LD_INT 20
18298: ST_TO_ADDR
// hc_class := class_tiger ;
18299: LD_ADDR_OWVAR 28
18303: PUSH
18304: LD_INT 14
18306: ST_TO_ADDR
// hc_gallery :=  ;
18307: LD_ADDR_OWVAR 33
18311: PUSH
18312: LD_STRING 
18314: ST_TO_ADDR
// hc_name :=  ;
18315: LD_ADDR_OWVAR 26
18319: PUSH
18320: LD_STRING 
18322: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18323: CALL_OW 44
18327: PPUSH
18328: LD_INT 0
18330: PPUSH
18331: CALL_OW 51
// end ;
18335: GO 18257
18337: POP
18338: POP
// end ;
18339: PPOPN 1
18341: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18342: LD_EXP 39
18346: PUSH
18347: LD_EXP 59
18351: AND
18352: IFFALSE 18361
18354: GO 18356
18356: DISABLE
// StreamSibBomb ;
18357: CALL 18362 0 0
18361: END
// export function StreamSibBomb ; var i , x , y ; begin
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
18366: PPUSH
18367: PPUSH
// result := false ;
18368: LD_ADDR_VAR 0 1
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// for i := 1 to 16 do
18376: LD_ADDR_VAR 0 2
18380: PUSH
18381: DOUBLE
18382: LD_INT 1
18384: DEC
18385: ST_TO_ADDR
18386: LD_INT 16
18388: PUSH
18389: FOR_TO
18390: IFFALSE 18589
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18392: LD_ADDR_VAR 0 3
18396: PUSH
18397: LD_INT 10
18399: PUSH
18400: LD_INT 20
18402: PUSH
18403: LD_INT 30
18405: PUSH
18406: LD_INT 40
18408: PUSH
18409: LD_INT 50
18411: PUSH
18412: LD_INT 60
18414: PUSH
18415: LD_INT 70
18417: PUSH
18418: LD_INT 80
18420: PUSH
18421: LD_INT 90
18423: PUSH
18424: LD_INT 100
18426: PUSH
18427: LD_INT 110
18429: PUSH
18430: LD_INT 120
18432: PUSH
18433: LD_INT 130
18435: PUSH
18436: LD_INT 140
18438: PUSH
18439: LD_INT 150
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PPUSH
18462: LD_INT 15
18464: PPUSH
18465: CALL_OW 12
18469: ARRAY
18470: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18471: LD_ADDR_VAR 0 4
18475: PUSH
18476: LD_INT 10
18478: PUSH
18479: LD_INT 20
18481: PUSH
18482: LD_INT 30
18484: PUSH
18485: LD_INT 40
18487: PUSH
18488: LD_INT 50
18490: PUSH
18491: LD_INT 60
18493: PUSH
18494: LD_INT 70
18496: PUSH
18497: LD_INT 80
18499: PUSH
18500: LD_INT 90
18502: PUSH
18503: LD_INT 100
18505: PUSH
18506: LD_INT 110
18508: PUSH
18509: LD_INT 120
18511: PUSH
18512: LD_INT 130
18514: PUSH
18515: LD_INT 140
18517: PUSH
18518: LD_INT 150
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: PPUSH
18541: LD_INT 15
18543: PPUSH
18544: CALL_OW 12
18548: ARRAY
18549: ST_TO_ADDR
// if ValidHex ( x , y ) then
18550: LD_VAR 0 3
18554: PPUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: CALL_OW 488
18564: IFFALSE 18587
// begin result := [ x , y ] ;
18566: LD_ADDR_VAR 0 1
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 4
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: ST_TO_ADDR
// break ;
18585: GO 18589
// end ; end ;
18587: GO 18389
18589: POP
18590: POP
// if result then
18591: LD_VAR 0 1
18595: IFFALSE 18655
// begin ToLua ( playSibBomb() ) ;
18597: LD_STRING playSibBomb()
18599: PPUSH
18600: CALL_OW 559
// wait ( 0 0$14 ) ;
18604: LD_INT 490
18606: PPUSH
18607: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18611: LD_VAR 0 1
18615: PUSH
18616: LD_INT 1
18618: ARRAY
18619: PPUSH
18620: LD_VAR 0 1
18624: PUSH
18625: LD_INT 2
18627: ARRAY
18628: PPUSH
18629: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18633: LD_VAR 0 1
18637: PUSH
18638: LD_INT 1
18640: ARRAY
18641: PPUSH
18642: LD_VAR 0 1
18646: PUSH
18647: LD_INT 2
18649: ARRAY
18650: PPUSH
18651: CALL_OW 429
// end ; end ;
18655: LD_VAR 0 1
18659: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18660: LD_EXP 39
18664: PUSH
18665: LD_EXP 61
18669: AND
18670: IFFALSE 18682
18672: GO 18674
18674: DISABLE
// YouLost (  ) ;
18675: LD_STRING 
18677: PPUSH
18678: CALL_OW 104
18682: END
// every 0 0$1 trigger StreamModeActive and sFog do
18683: LD_EXP 39
18687: PUSH
18688: LD_EXP 60
18692: AND
18693: IFFALSE 18707
18695: GO 18697
18697: DISABLE
// FogOff ( your_side ) ;
18698: LD_OWVAR 2
18702: PPUSH
18703: CALL_OW 344
18707: END
// every 0 0$1 trigger StreamModeActive and sSun do
18708: LD_EXP 39
18712: PUSH
18713: LD_EXP 62
18717: AND
18718: IFFALSE 18746
18720: GO 18722
18722: DISABLE
// begin solar_recharge_percent := 0 ;
18723: LD_ADDR_OWVAR 79
18727: PUSH
18728: LD_INT 0
18730: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18731: LD_INT 10500
18733: PPUSH
18734: CALL_OW 67
// solar_recharge_percent := 100 ;
18738: LD_ADDR_OWVAR 79
18742: PUSH
18743: LD_INT 100
18745: ST_TO_ADDR
// end ;
18746: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18747: LD_EXP 39
18751: PUSH
18752: LD_EXP 63
18756: AND
18757: IFFALSE 18996
18759: GO 18761
18761: DISABLE
18762: LD_INT 0
18764: PPUSH
18765: PPUSH
18766: PPUSH
// begin tmp := [ ] ;
18767: LD_ADDR_VAR 0 3
18771: PUSH
18772: EMPTY
18773: ST_TO_ADDR
// for i := 1 to 6 do
18774: LD_ADDR_VAR 0 1
18778: PUSH
18779: DOUBLE
18780: LD_INT 1
18782: DEC
18783: ST_TO_ADDR
18784: LD_INT 6
18786: PUSH
18787: FOR_TO
18788: IFFALSE 18893
// begin uc_nation := nation_nature ;
18790: LD_ADDR_OWVAR 21
18794: PUSH
18795: LD_INT 0
18797: ST_TO_ADDR
// uc_side := 0 ;
18798: LD_ADDR_OWVAR 20
18802: PUSH
18803: LD_INT 0
18805: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18806: LD_ADDR_OWVAR 29
18810: PUSH
18811: LD_INT 12
18813: PUSH
18814: LD_INT 12
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: ST_TO_ADDR
// hc_agressivity := 20 ;
18821: LD_ADDR_OWVAR 35
18825: PUSH
18826: LD_INT 20
18828: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18829: LD_ADDR_OWVAR 28
18833: PUSH
18834: LD_INT 17
18836: ST_TO_ADDR
// hc_gallery :=  ;
18837: LD_ADDR_OWVAR 33
18841: PUSH
18842: LD_STRING 
18844: ST_TO_ADDR
// hc_name :=  ;
18845: LD_ADDR_OWVAR 26
18849: PUSH
18850: LD_STRING 
18852: ST_TO_ADDR
// un := CreateHuman ;
18853: LD_ADDR_VAR 0 2
18857: PUSH
18858: CALL_OW 44
18862: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL_OW 51
// tmp := tmp ^ un ;
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 2
18889: ADD
18890: ST_TO_ADDR
// end ;
18891: GO 18787
18893: POP
18894: POP
// repeat wait ( 0 0$1 ) ;
18895: LD_INT 35
18897: PPUSH
18898: CALL_OW 67
// for un in tmp do
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_VAR 0 3
18911: PUSH
18912: FOR_IN
18913: IFFALSE 18987
// begin if IsDead ( un ) then
18915: LD_VAR 0 2
18919: PPUSH
18920: CALL_OW 301
18924: IFFALSE 18944
// begin tmp := tmp diff un ;
18926: LD_ADDR_VAR 0 3
18930: PUSH
18931: LD_VAR 0 3
18935: PUSH
18936: LD_VAR 0 2
18940: DIFF
18941: ST_TO_ADDR
// continue ;
18942: GO 18912
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18944: LD_VAR 0 2
18948: PPUSH
18949: LD_INT 3
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PPUSH
18971: LD_VAR 0 2
18975: PPUSH
18976: CALL_OW 74
18980: PPUSH
18981: CALL_OW 115
// end ;
18985: GO 18912
18987: POP
18988: POP
// until not tmp ;
18989: LD_VAR 0 3
18993: NOT
18994: IFFALSE 18895
// end ;
18996: PPOPN 3
18998: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18999: LD_EXP 39
19003: PUSH
19004: LD_EXP 64
19008: AND
19009: IFFALSE 19063
19011: GO 19013
19013: DISABLE
// begin ToLua ( displayTroll(); ) ;
19014: LD_STRING displayTroll();
19016: PPUSH
19017: CALL_OW 559
// wait ( 3 3$00 ) ;
19021: LD_INT 6300
19023: PPUSH
19024: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19028: LD_STRING hideTroll();
19030: PPUSH
19031: CALL_OW 559
// wait ( 1 1$00 ) ;
19035: LD_INT 2100
19037: PPUSH
19038: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19042: LD_STRING displayTroll();
19044: PPUSH
19045: CALL_OW 559
// wait ( 1 1$00 ) ;
19049: LD_INT 2100
19051: PPUSH
19052: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19056: LD_STRING hideTroll();
19058: PPUSH
19059: CALL_OW 559
// end ;
19063: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19064: LD_EXP 39
19068: PUSH
19069: LD_EXP 65
19073: AND
19074: IFFALSE 19137
19076: GO 19078
19078: DISABLE
19079: LD_INT 0
19081: PPUSH
// begin p := 0 ;
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: LD_INT 0
19089: ST_TO_ADDR
// repeat game_speed := 1 ;
19090: LD_ADDR_OWVAR 65
19094: PUSH
19095: LD_INT 1
19097: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19098: LD_INT 35
19100: PPUSH
19101: CALL_OW 67
// p := p + 1 ;
19105: LD_ADDR_VAR 0 1
19109: PUSH
19110: LD_VAR 0 1
19114: PUSH
19115: LD_INT 1
19117: PLUS
19118: ST_TO_ADDR
// until p >= 60 ;
19119: LD_VAR 0 1
19123: PUSH
19124: LD_INT 60
19126: GREATEREQUAL
19127: IFFALSE 19090
// game_speed := 4 ;
19129: LD_ADDR_OWVAR 65
19133: PUSH
19134: LD_INT 4
19136: ST_TO_ADDR
// end ;
19137: PPOPN 1
19139: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19140: LD_EXP 39
19144: PUSH
19145: LD_EXP 66
19149: AND
19150: IFFALSE 19296
19152: GO 19154
19154: DISABLE
19155: LD_INT 0
19157: PPUSH
19158: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19159: LD_ADDR_VAR 0 1
19163: PUSH
19164: LD_INT 22
19166: PUSH
19167: LD_OWVAR 2
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: PUSH
19179: LD_INT 30
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 30
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: ST_TO_ADDR
// if not depot then
19213: LD_VAR 0 1
19217: NOT
19218: IFFALSE 19222
// exit ;
19220: GO 19296
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19222: LD_ADDR_VAR 0 2
19226: PUSH
19227: LD_VAR 0 1
19231: PUSH
19232: LD_INT 1
19234: PPUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 12
19244: ARRAY
19245: PPUSH
19246: CALL_OW 274
19250: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_INT 1
19258: PPUSH
19259: LD_INT 0
19261: PPUSH
19262: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19266: LD_VAR 0 2
19270: PPUSH
19271: LD_INT 2
19273: PPUSH
19274: LD_INT 0
19276: PPUSH
19277: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19281: LD_VAR 0 2
19285: PPUSH
19286: LD_INT 3
19288: PPUSH
19289: LD_INT 0
19291: PPUSH
19292: CALL_OW 277
// end ;
19296: PPOPN 2
19298: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19299: LD_EXP 39
19303: PUSH
19304: LD_EXP 67
19308: AND
19309: IFFALSE 19406
19311: GO 19313
19313: DISABLE
19314: LD_INT 0
19316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19317: LD_ADDR_VAR 0 1
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_OWVAR 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 3
19346: PUSH
19347: LD_INT 23
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PPUSH
19366: CALL_OW 69
19370: ST_TO_ADDR
// if not tmp then
19371: LD_VAR 0 1
19375: NOT
19376: IFFALSE 19380
// exit ;
19378: GO 19406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19380: LD_VAR 0 1
19384: PUSH
19385: LD_INT 1
19387: PPUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL_OW 12
19397: ARRAY
19398: PPUSH
19399: LD_INT 200
19401: PPUSH
19402: CALL_OW 234
// end ;
19406: PPOPN 1
19408: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19409: LD_EXP 39
19413: PUSH
19414: LD_EXP 68
19418: AND
19419: IFFALSE 19498
19421: GO 19423
19423: DISABLE
19424: LD_INT 0
19426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19427: LD_ADDR_VAR 0 1
19431: PUSH
19432: LD_INT 22
19434: PUSH
19435: LD_OWVAR 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 21
19446: PUSH
19447: LD_INT 2
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PPUSH
19458: CALL_OW 69
19462: ST_TO_ADDR
// if not tmp then
19463: LD_VAR 0 1
19467: NOT
19468: IFFALSE 19472
// exit ;
19470: GO 19498
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19472: LD_VAR 0 1
19476: PUSH
19477: LD_INT 1
19479: PPUSH
19480: LD_VAR 0 1
19484: PPUSH
19485: CALL_OW 12
19489: ARRAY
19490: PPUSH
19491: LD_INT 60
19493: PPUSH
19494: CALL_OW 234
// end ;
19498: PPOPN 1
19500: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19501: LD_EXP 39
19505: PUSH
19506: LD_EXP 69
19510: AND
19511: IFFALSE 19610
19513: GO 19515
19515: DISABLE
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
// begin enable ;
19520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19521: LD_ADDR_VAR 0 1
19525: PUSH
19526: LD_INT 22
19528: PUSH
19529: LD_OWVAR 2
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 61
19540: PUSH
19541: EMPTY
19542: LIST
19543: PUSH
19544: LD_INT 33
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: LIST
19558: PPUSH
19559: CALL_OW 69
19563: ST_TO_ADDR
// if not tmp then
19564: LD_VAR 0 1
19568: NOT
19569: IFFALSE 19573
// exit ;
19571: GO 19610
// for i in tmp do
19573: LD_ADDR_VAR 0 2
19577: PUSH
19578: LD_VAR 0 1
19582: PUSH
19583: FOR_IN
19584: IFFALSE 19608
// if IsControledBy ( i ) then
19586: LD_VAR 0 2
19590: PPUSH
19591: CALL_OW 312
19595: IFFALSE 19606
// ComUnlink ( i ) ;
19597: LD_VAR 0 2
19601: PPUSH
19602: CALL_OW 136
19606: GO 19583
19608: POP
19609: POP
// end ;
19610: PPOPN 2
19612: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19613: LD_EXP 39
19617: PUSH
19618: LD_EXP 70
19622: AND
19623: IFFALSE 19763
19625: GO 19627
19627: DISABLE
19628: LD_INT 0
19630: PPUSH
19631: PPUSH
// begin ToLua ( displayPowell(); ) ;
19632: LD_STRING displayPowell();
19634: PPUSH
19635: CALL_OW 559
// uc_side := 0 ;
19639: LD_ADDR_OWVAR 20
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// uc_nation := 2 ;
19647: LD_ADDR_OWVAR 21
19651: PUSH
19652: LD_INT 2
19654: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19655: LD_ADDR_OWVAR 37
19659: PUSH
19660: LD_INT 14
19662: ST_TO_ADDR
// vc_engine := engine_siberite ;
19663: LD_ADDR_OWVAR 39
19667: PUSH
19668: LD_INT 3
19670: ST_TO_ADDR
// vc_control := control_apeman ;
19671: LD_ADDR_OWVAR 38
19675: PUSH
19676: LD_INT 5
19678: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19679: LD_ADDR_OWVAR 40
19683: PUSH
19684: LD_INT 29
19686: ST_TO_ADDR
// un := CreateVehicle ;
19687: LD_ADDR_VAR 0 2
19691: PUSH
19692: CALL_OW 45
19696: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19697: LD_VAR 0 2
19701: PPUSH
19702: LD_INT 1
19704: PPUSH
19705: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19709: LD_INT 35
19711: PPUSH
19712: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19716: LD_VAR 0 2
19720: PPUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: PPUSH
19738: LD_VAR 0 2
19742: PPUSH
19743: CALL_OW 74
19747: PPUSH
19748: CALL_OW 115
// until IsDead ( un ) ;
19752: LD_VAR 0 2
19756: PPUSH
19757: CALL_OW 301
19761: IFFALSE 19709
// end ;
19763: PPOPN 2
19765: END
// every 0 0$1 trigger StreamModeActive and sStu do
19766: LD_EXP 39
19770: PUSH
19771: LD_EXP 78
19775: AND
19776: IFFALSE 19792
19778: GO 19780
19780: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19781: LD_STRING displayStucuk();
19783: PPUSH
19784: CALL_OW 559
// ResetFog ;
19788: CALL_OW 335
// end ;
19792: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19793: LD_EXP 39
19797: PUSH
19798: LD_EXP 71
19802: AND
19803: IFFALSE 19944
19805: GO 19807
19807: DISABLE
19808: LD_INT 0
19810: PPUSH
19811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19812: LD_ADDR_VAR 0 2
19816: PUSH
19817: LD_INT 22
19819: PUSH
19820: LD_OWVAR 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PPUSH
19843: CALL_OW 69
19847: ST_TO_ADDR
// if not tmp then
19848: LD_VAR 0 2
19852: NOT
19853: IFFALSE 19857
// exit ;
19855: GO 19944
// un := tmp [ rand ( 1 , tmp ) ] ;
19857: LD_ADDR_VAR 0 1
19861: PUSH
19862: LD_VAR 0 2
19866: PUSH
19867: LD_INT 1
19869: PPUSH
19870: LD_VAR 0 2
19874: PPUSH
19875: CALL_OW 12
19879: ARRAY
19880: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19881: LD_VAR 0 1
19885: PPUSH
19886: LD_INT 0
19888: PPUSH
19889: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19893: LD_VAR 0 1
19897: PPUSH
19898: LD_OWVAR 3
19902: PUSH
19903: LD_VAR 0 1
19907: DIFF
19908: PPUSH
19909: LD_VAR 0 1
19913: PPUSH
19914: CALL_OW 74
19918: PPUSH
19919: CALL_OW 115
// wait ( 0 0$20 ) ;
19923: LD_INT 700
19925: PPUSH
19926: CALL_OW 67
// SetSide ( un , your_side ) ;
19930: LD_VAR 0 1
19934: PPUSH
19935: LD_OWVAR 2
19939: PPUSH
19940: CALL_OW 235
// end ;
19944: PPOPN 2
19946: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19947: LD_EXP 39
19951: PUSH
19952: LD_EXP 72
19956: AND
19957: IFFALSE 20063
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 30
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 30
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: ST_TO_ADDR
// if not depot then
20019: LD_VAR 0 1
20023: NOT
20024: IFFALSE 20028
// exit ;
20026: GO 20063
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20028: LD_VAR 0 1
20032: PUSH
20033: LD_INT 1
20035: ARRAY
20036: PPUSH
20037: CALL_OW 250
20041: PPUSH
20042: LD_VAR 0 1
20046: PUSH
20047: LD_INT 1
20049: ARRAY
20050: PPUSH
20051: CALL_OW 251
20055: PPUSH
20056: LD_INT 70
20058: PPUSH
20059: CALL_OW 495
// end ;
20063: PPOPN 1
20065: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20066: LD_EXP 39
20070: PUSH
20071: LD_EXP 73
20075: AND
20076: IFFALSE 20287
20078: GO 20080
20080: DISABLE
20081: LD_INT 0
20083: PPUSH
20084: PPUSH
20085: PPUSH
20086: PPUSH
20087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20088: LD_ADDR_VAR 0 5
20092: PUSH
20093: LD_INT 22
20095: PUSH
20096: LD_OWVAR 2
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 21
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: ST_TO_ADDR
// if not tmp then
20124: LD_VAR 0 5
20128: NOT
20129: IFFALSE 20133
// exit ;
20131: GO 20287
// for i in tmp do
20133: LD_ADDR_VAR 0 1
20137: PUSH
20138: LD_VAR 0 5
20142: PUSH
20143: FOR_IN
20144: IFFALSE 20285
// begin d := rand ( 0 , 5 ) ;
20146: LD_ADDR_VAR 0 4
20150: PUSH
20151: LD_INT 0
20153: PPUSH
20154: LD_INT 5
20156: PPUSH
20157: CALL_OW 12
20161: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20162: LD_ADDR_VAR 0 2
20166: PUSH
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 250
20176: PPUSH
20177: LD_VAR 0 4
20181: PPUSH
20182: LD_INT 3
20184: PPUSH
20185: LD_INT 12
20187: PPUSH
20188: CALL_OW 12
20192: PPUSH
20193: CALL_OW 272
20197: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20198: LD_ADDR_VAR 0 3
20202: PUSH
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 251
20212: PPUSH
20213: LD_VAR 0 4
20217: PPUSH
20218: LD_INT 3
20220: PPUSH
20221: LD_INT 12
20223: PPUSH
20224: CALL_OW 12
20228: PPUSH
20229: CALL_OW 273
20233: ST_TO_ADDR
// if ValidHex ( x , y ) then
20234: LD_VAR 0 2
20238: PPUSH
20239: LD_VAR 0 3
20243: PPUSH
20244: CALL_OW 488
20248: IFFALSE 20283
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_VAR 0 2
20259: PPUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_INT 3
20267: PPUSH
20268: LD_INT 6
20270: PPUSH
20271: CALL_OW 12
20275: PPUSH
20276: LD_INT 1
20278: PPUSH
20279: CALL_OW 483
// end ;
20283: GO 20143
20285: POP
20286: POP
// end ;
20287: PPOPN 5
20289: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20290: LD_EXP 39
20294: PUSH
20295: LD_EXP 74
20299: AND
20300: IFFALSE 20394
20302: GO 20304
20304: DISABLE
20305: LD_INT 0
20307: PPUSH
20308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20309: LD_ADDR_VAR 0 2
20313: PUSH
20314: LD_INT 22
20316: PUSH
20317: LD_OWVAR 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 32
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 21
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: PPUSH
20351: CALL_OW 69
20355: ST_TO_ADDR
// if not tmp then
20356: LD_VAR 0 2
20360: NOT
20361: IFFALSE 20365
// exit ;
20363: GO 20394
// for i in tmp do
20365: LD_ADDR_VAR 0 1
20369: PUSH
20370: LD_VAR 0 2
20374: PUSH
20375: FOR_IN
20376: IFFALSE 20392
// SetFuel ( i , 0 ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: LD_INT 0
20385: PPUSH
20386: CALL_OW 240
20390: GO 20375
20392: POP
20393: POP
// end ;
20394: PPOPN 2
20396: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20397: LD_EXP 39
20401: PUSH
20402: LD_EXP 75
20406: AND
20407: IFFALSE 20473
20409: GO 20411
20411: DISABLE
20412: LD_INT 0
20414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: LD_INT 22
20422: PUSH
20423: LD_OWVAR 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 30
20434: PUSH
20435: LD_INT 29
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PPUSH
20446: CALL_OW 69
20450: ST_TO_ADDR
// if not tmp then
20451: LD_VAR 0 1
20455: NOT
20456: IFFALSE 20460
// exit ;
20458: GO 20473
// DestroyUnit ( tmp [ 1 ] ) ;
20460: LD_VAR 0 1
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: PPUSH
20469: CALL_OW 65
// end ;
20473: PPOPN 1
20475: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20476: LD_EXP 39
20480: PUSH
20481: LD_EXP 77
20485: AND
20486: IFFALSE 20615
20488: GO 20490
20490: DISABLE
20491: LD_INT 0
20493: PPUSH
// begin uc_side := 0 ;
20494: LD_ADDR_OWVAR 20
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// uc_nation := nation_arabian ;
20502: LD_ADDR_OWVAR 21
20506: PUSH
20507: LD_INT 2
20509: ST_TO_ADDR
// hc_gallery :=  ;
20510: LD_ADDR_OWVAR 33
20514: PUSH
20515: LD_STRING 
20517: ST_TO_ADDR
// hc_name :=  ;
20518: LD_ADDR_OWVAR 26
20522: PUSH
20523: LD_STRING 
20525: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20526: LD_INT 1
20528: PPUSH
20529: LD_INT 11
20531: PPUSH
20532: LD_INT 10
20534: PPUSH
20535: CALL_OW 380
// un := CreateHuman ;
20539: LD_ADDR_VAR 0 1
20543: PUSH
20544: CALL_OW 44
20548: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_INT 1
20556: PPUSH
20557: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20561: LD_INT 35
20563: PPUSH
20564: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20568: LD_VAR 0 1
20572: PPUSH
20573: LD_INT 22
20575: PUSH
20576: LD_OWVAR 2
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PPUSH
20585: CALL_OW 69
20589: PPUSH
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 74
20599: PPUSH
20600: CALL_OW 115
// until IsDead ( un ) ;
20604: LD_VAR 0 1
20608: PPUSH
20609: CALL_OW 301
20613: IFFALSE 20561
// end ;
20615: PPOPN 1
20617: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20618: LD_EXP 39
20622: PUSH
20623: LD_EXP 79
20627: AND
20628: IFFALSE 20640
20630: GO 20632
20632: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20633: LD_STRING earthquake(getX(game), 0, 32)
20635: PPUSH
20636: CALL_OW 559
20640: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20641: LD_EXP 39
20645: PUSH
20646: LD_EXP 80
20650: AND
20651: IFFALSE 20742
20653: GO 20655
20655: DISABLE
20656: LD_INT 0
20658: PPUSH
// begin enable ;
20659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20660: LD_ADDR_VAR 0 1
20664: PUSH
20665: LD_INT 22
20667: PUSH
20668: LD_OWVAR 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 21
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 33
20689: PUSH
20690: LD_INT 3
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 69
20706: ST_TO_ADDR
// if not tmp then
20707: LD_VAR 0 1
20711: NOT
20712: IFFALSE 20716
// exit ;
20714: GO 20742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20716: LD_VAR 0 1
20720: PUSH
20721: LD_INT 1
20723: PPUSH
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 12
20733: ARRAY
20734: PPUSH
20735: LD_INT 1
20737: PPUSH
20738: CALL_OW 234
// end ;
20742: PPOPN 1
20744: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20745: LD_EXP 39
20749: PUSH
20750: LD_EXP 81
20754: AND
20755: IFFALSE 20896
20757: GO 20759
20759: DISABLE
20760: LD_INT 0
20762: PPUSH
20763: PPUSH
20764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20765: LD_ADDR_VAR 0 3
20769: PUSH
20770: LD_INT 22
20772: PUSH
20773: LD_OWVAR 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 25
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PPUSH
20796: CALL_OW 69
20800: ST_TO_ADDR
// if not tmp then
20801: LD_VAR 0 3
20805: NOT
20806: IFFALSE 20810
// exit ;
20808: GO 20896
// un := tmp [ rand ( 1 , tmp ) ] ;
20810: LD_ADDR_VAR 0 2
20814: PUSH
20815: LD_VAR 0 3
20819: PUSH
20820: LD_INT 1
20822: PPUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: CALL_OW 12
20832: ARRAY
20833: ST_TO_ADDR
// if Crawls ( un ) then
20834: LD_VAR 0 2
20838: PPUSH
20839: CALL_OW 318
20843: IFFALSE 20854
// ComWalk ( un ) ;
20845: LD_VAR 0 2
20849: PPUSH
20850: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20854: LD_VAR 0 2
20858: PPUSH
20859: LD_INT 9
20861: PPUSH
20862: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20866: LD_INT 28
20868: PPUSH
20869: LD_OWVAR 2
20873: PPUSH
20874: LD_INT 2
20876: PPUSH
20877: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20881: LD_INT 29
20883: PPUSH
20884: LD_OWVAR 2
20888: PPUSH
20889: LD_INT 2
20891: PPUSH
20892: CALL_OW 322
// end ;
20896: PPOPN 3
20898: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20899: LD_EXP 39
20903: PUSH
20904: LD_EXP 82
20908: AND
20909: IFFALSE 21020
20911: GO 20913
20913: DISABLE
20914: LD_INT 0
20916: PPUSH
20917: PPUSH
20918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20919: LD_ADDR_VAR 0 3
20923: PUSH
20924: LD_INT 22
20926: PUSH
20927: LD_OWVAR 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 25
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: ST_TO_ADDR
// if not tmp then
20955: LD_VAR 0 3
20959: NOT
20960: IFFALSE 20964
// exit ;
20962: GO 21020
// un := tmp [ rand ( 1 , tmp ) ] ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_VAR 0 3
20973: PUSH
20974: LD_INT 1
20976: PPUSH
20977: LD_VAR 0 3
20981: PPUSH
20982: CALL_OW 12
20986: ARRAY
20987: ST_TO_ADDR
// if Crawls ( un ) then
20988: LD_VAR 0 2
20992: PPUSH
20993: CALL_OW 318
20997: IFFALSE 21008
// ComWalk ( un ) ;
20999: LD_VAR 0 2
21003: PPUSH
21004: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21008: LD_VAR 0 2
21012: PPUSH
21013: LD_INT 8
21015: PPUSH
21016: CALL_OW 336
// end ;
21020: PPOPN 3
21022: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21023: LD_EXP 39
21027: PUSH
21028: LD_EXP 83
21032: AND
21033: IFFALSE 21177
21035: GO 21037
21037: DISABLE
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21042: LD_ADDR_VAR 0 2
21046: PUSH
21047: LD_INT 22
21049: PUSH
21050: LD_OWVAR 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 21
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: LD_INT 34
21074: PUSH
21075: LD_INT 12
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 34
21084: PUSH
21085: LD_INT 51
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 34
21094: PUSH
21095: LD_INT 32
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: PPUSH
21113: CALL_OW 69
21117: ST_TO_ADDR
// if not tmp then
21118: LD_VAR 0 2
21122: NOT
21123: IFFALSE 21127
// exit ;
21125: GO 21177
// for i in tmp do
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_VAR 0 2
21136: PUSH
21137: FOR_IN
21138: IFFALSE 21175
// if GetCargo ( i , mat_artifact ) = 0 then
21140: LD_VAR 0 1
21144: PPUSH
21145: LD_INT 4
21147: PPUSH
21148: CALL_OW 289
21152: PUSH
21153: LD_INT 0
21155: EQUAL
21156: IFFALSE 21173
// SetCargo ( i , mat_siberit , 100 ) ;
21158: LD_VAR 0 1
21162: PPUSH
21163: LD_INT 3
21165: PPUSH
21166: LD_INT 100
21168: PPUSH
21169: CALL_OW 290
21173: GO 21137
21175: POP
21176: POP
// end ;
21177: PPOPN 2
21179: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21180: LD_EXP 39
21184: PUSH
21185: LD_EXP 84
21189: AND
21190: IFFALSE 21373
21192: GO 21194
21194: DISABLE
21195: LD_INT 0
21197: PPUSH
21198: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21199: LD_ADDR_VAR 0 2
21203: PUSH
21204: LD_INT 22
21206: PUSH
21207: LD_OWVAR 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 2
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21373
// for i := 1 to 2 do
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: DOUBLE
21236: LD_INT 1
21238: DEC
21239: ST_TO_ADDR
21240: LD_INT 2
21242: PUSH
21243: FOR_TO
21244: IFFALSE 21371
// begin uc_side := your_side ;
21246: LD_ADDR_OWVAR 20
21250: PUSH
21251: LD_OWVAR 2
21255: ST_TO_ADDR
// uc_nation := nation_american ;
21256: LD_ADDR_OWVAR 21
21260: PUSH
21261: LD_INT 1
21263: ST_TO_ADDR
// vc_chassis := us_morphling ;
21264: LD_ADDR_OWVAR 37
21268: PUSH
21269: LD_INT 5
21271: ST_TO_ADDR
// vc_engine := engine_siberite ;
21272: LD_ADDR_OWVAR 39
21276: PUSH
21277: LD_INT 3
21279: ST_TO_ADDR
// vc_control := control_computer ;
21280: LD_ADDR_OWVAR 38
21284: PUSH
21285: LD_INT 3
21287: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21288: LD_ADDR_OWVAR 40
21292: PUSH
21293: LD_INT 10
21295: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21296: LD_VAR 0 2
21300: PUSH
21301: LD_INT 1
21303: ARRAY
21304: PPUSH
21305: CALL_OW 310
21309: NOT
21310: IFFALSE 21357
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21312: CALL_OW 45
21316: PPUSH
21317: LD_VAR 0 2
21321: PUSH
21322: LD_INT 1
21324: ARRAY
21325: PPUSH
21326: CALL_OW 250
21330: PPUSH
21331: LD_VAR 0 2
21335: PUSH
21336: LD_INT 1
21338: ARRAY
21339: PPUSH
21340: CALL_OW 251
21344: PPUSH
21345: LD_INT 12
21347: PPUSH
21348: LD_INT 1
21350: PPUSH
21351: CALL_OW 50
21355: GO 21369
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21357: CALL_OW 45
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: CALL_OW 51
// end ;
21369: GO 21243
21371: POP
21372: POP
// end ;
21373: PPOPN 2
21375: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21376: LD_EXP 39
21380: PUSH
21381: LD_EXP 85
21385: AND
21386: IFFALSE 21608
21388: GO 21390
21390: DISABLE
21391: LD_INT 0
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
21397: PPUSH
21398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21399: LD_ADDR_VAR 0 6
21403: PUSH
21404: LD_INT 22
21406: PUSH
21407: LD_OWVAR 2
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: LD_INT 23
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: PPUSH
21448: CALL_OW 69
21452: ST_TO_ADDR
// if not tmp then
21453: LD_VAR 0 6
21457: NOT
21458: IFFALSE 21462
// exit ;
21460: GO 21608
// s1 := rand ( 1 , 4 ) ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_INT 1
21469: PPUSH
21470: LD_INT 4
21472: PPUSH
21473: CALL_OW 12
21477: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21478: LD_ADDR_VAR 0 4
21482: PUSH
21483: LD_VAR 0 6
21487: PUSH
21488: LD_INT 1
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 2
21496: PPUSH
21497: CALL_OW 259
21501: ST_TO_ADDR
// if s1 = 1 then
21502: LD_VAR 0 2
21506: PUSH
21507: LD_INT 1
21509: EQUAL
21510: IFFALSE 21530
// s2 := rand ( 2 , 4 ) else
21512: LD_ADDR_VAR 0 3
21516: PUSH
21517: LD_INT 2
21519: PPUSH
21520: LD_INT 4
21522: PPUSH
21523: CALL_OW 12
21527: ST_TO_ADDR
21528: GO 21538
// s2 := 1 ;
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_INT 1
21537: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21538: LD_ADDR_VAR 0 5
21542: PUSH
21543: LD_VAR 0 6
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: PPUSH
21552: LD_VAR 0 3
21556: PPUSH
21557: CALL_OW 259
21561: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21562: LD_VAR 0 6
21566: PUSH
21567: LD_INT 1
21569: ARRAY
21570: PPUSH
21571: LD_VAR 0 2
21575: PPUSH
21576: LD_VAR 0 5
21580: PPUSH
21581: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21585: LD_VAR 0 6
21589: PUSH
21590: LD_INT 1
21592: ARRAY
21593: PPUSH
21594: LD_VAR 0 3
21598: PPUSH
21599: LD_VAR 0 4
21603: PPUSH
21604: CALL_OW 237
// end ;
21608: PPOPN 6
21610: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21611: LD_EXP 39
21615: PUSH
21616: LD_EXP 86
21620: AND
21621: IFFALSE 21700
21623: GO 21625
21625: DISABLE
21626: LD_INT 0
21628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21629: LD_ADDR_VAR 0 1
21633: PUSH
21634: LD_INT 22
21636: PUSH
21637: LD_OWVAR 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 30
21648: PUSH
21649: LD_INT 3
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: ST_TO_ADDR
// if not tmp then
21665: LD_VAR 0 1
21669: NOT
21670: IFFALSE 21674
// exit ;
21672: GO 21700
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21674: LD_VAR 0 1
21678: PUSH
21679: LD_INT 1
21681: PPUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 12
21691: ARRAY
21692: PPUSH
21693: LD_INT 1
21695: PPUSH
21696: CALL_OW 234
// end ;
21700: PPOPN 1
21702: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21703: LD_EXP 39
21707: PUSH
21708: LD_EXP 87
21712: AND
21713: IFFALSE 21825
21715: GO 21717
21717: DISABLE
21718: LD_INT 0
21720: PPUSH
21721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21722: LD_ADDR_VAR 0 2
21726: PUSH
21727: LD_INT 22
21729: PUSH
21730: LD_OWVAR 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 30
21744: PUSH
21745: LD_INT 27
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 30
21754: PUSH
21755: LD_INT 26
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 28
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not tmp then
21787: LD_VAR 0 2
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21825
// for i in tmp do
21796: LD_ADDR_VAR 0 1
21800: PUSH
21801: LD_VAR 0 2
21805: PUSH
21806: FOR_IN
21807: IFFALSE 21823
// SetLives ( i , 1 ) ;
21809: LD_VAR 0 1
21813: PPUSH
21814: LD_INT 1
21816: PPUSH
21817: CALL_OW 234
21821: GO 21806
21823: POP
21824: POP
// end ;
21825: PPOPN 2
21827: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21828: LD_EXP 39
21832: PUSH
21833: LD_EXP 88
21837: AND
21838: IFFALSE 22112
21840: GO 21842
21842: DISABLE
21843: LD_INT 0
21845: PPUSH
21846: PPUSH
21847: PPUSH
// begin i := rand ( 1 , 7 ) ;
21848: LD_ADDR_VAR 0 1
21852: PUSH
21853: LD_INT 1
21855: PPUSH
21856: LD_INT 7
21858: PPUSH
21859: CALL_OW 12
21863: ST_TO_ADDR
// case i of 1 :
21864: LD_VAR 0 1
21868: PUSH
21869: LD_INT 1
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 21887
21877: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21878: LD_STRING earthquake(getX(game), 0, 32)
21880: PPUSH
21881: CALL_OW 559
21885: GO 22112
21887: LD_INT 2
21889: DOUBLE
21890: EQUAL
21891: IFTRUE 21895
21893: GO 21909
21895: POP
// begin ToLua ( displayStucuk(); ) ;
21896: LD_STRING displayStucuk();
21898: PPUSH
21899: CALL_OW 559
// ResetFog ;
21903: CALL_OW 335
// end ; 3 :
21907: GO 22112
21909: LD_INT 3
21911: DOUBLE
21912: EQUAL
21913: IFTRUE 21917
21915: GO 22021
21917: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21918: LD_ADDR_VAR 0 2
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_OWVAR 2
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 25
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 69
21953: ST_TO_ADDR
// if not tmp then
21954: LD_VAR 0 2
21958: NOT
21959: IFFALSE 21963
// exit ;
21961: GO 22112
// un := tmp [ rand ( 1 , tmp ) ] ;
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_VAR 0 2
21972: PUSH
21973: LD_INT 1
21975: PPUSH
21976: LD_VAR 0 2
21980: PPUSH
21981: CALL_OW 12
21985: ARRAY
21986: ST_TO_ADDR
// if Crawls ( un ) then
21987: LD_VAR 0 3
21991: PPUSH
21992: CALL_OW 318
21996: IFFALSE 22007
// ComWalk ( un ) ;
21998: LD_VAR 0 3
22002: PPUSH
22003: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22007: LD_VAR 0 3
22011: PPUSH
22012: LD_INT 8
22014: PPUSH
22015: CALL_OW 336
// end ; 4 :
22019: GO 22112
22021: LD_INT 4
22023: DOUBLE
22024: EQUAL
22025: IFTRUE 22029
22027: GO 22090
22029: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22030: LD_ADDR_VAR 0 2
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_OWVAR 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 30
22049: PUSH
22050: LD_INT 29
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PPUSH
22061: CALL_OW 69
22065: ST_TO_ADDR
// if not tmp then
22066: LD_VAR 0 2
22070: NOT
22071: IFFALSE 22075
// exit ;
22073: GO 22112
// DestroyUnit ( tmp [ 1 ] ) ;
22075: LD_VAR 0 2
22079: PUSH
22080: LD_INT 1
22082: ARRAY
22083: PPUSH
22084: CALL_OW 65
// end ; 5 .. 7 :
22088: GO 22112
22090: LD_INT 5
22092: DOUBLE
22093: GREATEREQUAL
22094: IFFALSE 22102
22096: LD_INT 7
22098: DOUBLE
22099: LESSEQUAL
22100: IFTRUE 22104
22102: GO 22111
22104: POP
// StreamSibBomb ; end ;
22105: CALL 18362 0 0
22109: GO 22112
22111: POP
// end ;
22112: PPOPN 3
22114: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22115: LD_EXP 39
22119: PUSH
22120: LD_EXP 89
22124: AND
22125: IFFALSE 22281
22127: GO 22129
22129: DISABLE
22130: LD_INT 0
22132: PPUSH
22133: PPUSH
22134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_INT 81
22142: PUSH
22143: LD_OWVAR 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: LD_INT 21
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 21
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PPUSH
22184: CALL_OW 69
22188: ST_TO_ADDR
// if not tmp then
22189: LD_VAR 0 2
22193: NOT
22194: IFFALSE 22198
// exit ;
22196: GO 22281
// p := 0 ;
22198: LD_ADDR_VAR 0 3
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22206: LD_INT 35
22208: PPUSH
22209: CALL_OW 67
// p := p + 1 ;
22213: LD_ADDR_VAR 0 3
22217: PUSH
22218: LD_VAR 0 3
22222: PUSH
22223: LD_INT 1
22225: PLUS
22226: ST_TO_ADDR
// for i in tmp do
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: LD_VAR 0 2
22236: PUSH
22237: FOR_IN
22238: IFFALSE 22269
// if GetLives ( i ) < 1000 then
22240: LD_VAR 0 1
22244: PPUSH
22245: CALL_OW 256
22249: PUSH
22250: LD_INT 1000
22252: LESS
22253: IFFALSE 22267
// SetLives ( i , 1000 ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_INT 1000
22262: PPUSH
22263: CALL_OW 234
22267: GO 22237
22269: POP
22270: POP
// until p > 20 ;
22271: LD_VAR 0 3
22275: PUSH
22276: LD_INT 20
22278: GREATER
22279: IFFALSE 22206
// end ;
22281: PPOPN 3
22283: END
// every 0 0$1 trigger StreamModeActive and sTime do
22284: LD_EXP 39
22288: PUSH
22289: LD_EXP 90
22293: AND
22294: IFFALSE 22329
22296: GO 22298
22298: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22299: LD_INT 28
22301: PPUSH
22302: LD_OWVAR 2
22306: PPUSH
22307: LD_INT 2
22309: PPUSH
22310: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22314: LD_INT 30
22316: PPUSH
22317: LD_OWVAR 2
22321: PPUSH
22322: LD_INT 2
22324: PPUSH
22325: CALL_OW 322
// end ;
22329: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22330: LD_EXP 39
22334: PUSH
22335: LD_EXP 91
22339: AND
22340: IFFALSE 22461
22342: GO 22344
22344: DISABLE
22345: LD_INT 0
22347: PPUSH
22348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_INT 22
22356: PUSH
22357: LD_OWVAR 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 21
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: LD_INT 23
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: PPUSH
22398: CALL_OW 69
22402: ST_TO_ADDR
// if not tmp then
22403: LD_VAR 0 2
22407: NOT
22408: IFFALSE 22412
// exit ;
22410: GO 22461
// for i in tmp do
22412: LD_ADDR_VAR 0 1
22416: PUSH
22417: LD_VAR 0 2
22421: PUSH
22422: FOR_IN
22423: IFFALSE 22459
// begin if Crawls ( i ) then
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 318
22434: IFFALSE 22445
// ComWalk ( i ) ;
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 138
// SetClass ( i , 2 ) ;
22445: LD_VAR 0 1
22449: PPUSH
22450: LD_INT 2
22452: PPUSH
22453: CALL_OW 336
// end ;
22457: GO 22422
22459: POP
22460: POP
// end ;
22461: PPOPN 2
22463: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22464: LD_EXP 39
22468: PUSH
22469: LD_EXP 92
22473: AND
22474: IFFALSE 22755
22476: GO 22478
22478: DISABLE
22479: LD_INT 0
22481: PPUSH
22482: PPUSH
22483: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22484: LD_OWVAR 2
22488: PPUSH
22489: LD_INT 9
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: LD_INT 1
22497: PPUSH
22498: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22502: LD_INT 9
22504: PPUSH
22505: LD_OWVAR 2
22509: PPUSH
22510: CALL_OW 343
// uc_side := 9 ;
22514: LD_ADDR_OWVAR 20
22518: PUSH
22519: LD_INT 9
22521: ST_TO_ADDR
// uc_nation := 2 ;
22522: LD_ADDR_OWVAR 21
22526: PUSH
22527: LD_INT 2
22529: ST_TO_ADDR
// hc_name := Dark Warrior ;
22530: LD_ADDR_OWVAR 26
22534: PUSH
22535: LD_STRING Dark Warrior
22537: ST_TO_ADDR
// hc_gallery :=  ;
22538: LD_ADDR_OWVAR 33
22542: PUSH
22543: LD_STRING 
22545: ST_TO_ADDR
// hc_noskilllimit := true ;
22546: LD_ADDR_OWVAR 76
22550: PUSH
22551: LD_INT 1
22553: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22554: LD_ADDR_OWVAR 31
22558: PUSH
22559: LD_INT 30
22561: PUSH
22562: LD_INT 30
22564: PUSH
22565: LD_INT 30
22567: PUSH
22568: LD_INT 30
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: ST_TO_ADDR
// un := CreateHuman ;
22577: LD_ADDR_VAR 0 3
22581: PUSH
22582: CALL_OW 44
22586: ST_TO_ADDR
// hc_noskilllimit := false ;
22587: LD_ADDR_OWVAR 76
22591: PUSH
22592: LD_INT 0
22594: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22595: LD_VAR 0 3
22599: PPUSH
22600: LD_INT 1
22602: PPUSH
22603: CALL_OW 51
// p := 0 ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_INT 0
22614: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22615: LD_INT 35
22617: PPUSH
22618: CALL_OW 67
// p := p + 1 ;
22622: LD_ADDR_VAR 0 2
22626: PUSH
22627: LD_VAR 0 2
22631: PUSH
22632: LD_INT 1
22634: PLUS
22635: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22636: LD_VAR 0 3
22640: PPUSH
22641: CALL_OW 256
22645: PUSH
22646: LD_INT 1000
22648: LESS
22649: IFFALSE 22663
// SetLives ( un , 1000 ) ;
22651: LD_VAR 0 3
22655: PPUSH
22656: LD_INT 1000
22658: PPUSH
22659: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 81
22670: PUSH
22671: LD_OWVAR 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 91
22682: PUSH
22683: LD_VAR 0 3
22687: PUSH
22688: LD_INT 30
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PPUSH
22700: CALL_OW 69
22704: PPUSH
22705: LD_VAR 0 3
22709: PPUSH
22710: CALL_OW 74
22714: PPUSH
22715: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22719: LD_VAR 0 2
22723: PUSH
22724: LD_INT 60
22726: GREATER
22727: PUSH
22728: LD_VAR 0 3
22732: PPUSH
22733: CALL_OW 301
22737: OR
22738: IFFALSE 22615
// if un then
22740: LD_VAR 0 3
22744: IFFALSE 22755
// RemoveUnit ( un ) ;
22746: LD_VAR 0 3
22750: PPUSH
22751: CALL_OW 64
// end ;
22755: PPOPN 3
22757: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22758: LD_INT 0
22760: PPUSH
// case cmd of 301 :
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 301
22768: DOUBLE
22769: EQUAL
22770: IFTRUE 22774
22772: GO 22806
22774: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22775: LD_VAR 0 6
22779: PPUSH
22780: LD_VAR 0 7
22784: PPUSH
22785: LD_VAR 0 8
22789: PPUSH
22790: LD_VAR 0 4
22794: PPUSH
22795: LD_VAR 0 5
22799: PPUSH
22800: CALL 24007 0 5
22804: GO 22927
22806: LD_INT 302
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 22851
22814: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22815: LD_VAR 0 6
22819: PPUSH
22820: LD_VAR 0 7
22824: PPUSH
22825: LD_VAR 0 8
22829: PPUSH
22830: LD_VAR 0 9
22834: PPUSH
22835: LD_VAR 0 4
22839: PPUSH
22840: LD_VAR 0 5
22844: PPUSH
22845: CALL 24098 0 6
22849: GO 22927
22851: LD_INT 303
22853: DOUBLE
22854: EQUAL
22855: IFTRUE 22859
22857: GO 22896
22859: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22860: LD_VAR 0 6
22864: PPUSH
22865: LD_VAR 0 7
22869: PPUSH
22870: LD_VAR 0 8
22874: PPUSH
22875: LD_VAR 0 9
22879: PPUSH
22880: LD_VAR 0 4
22884: PPUSH
22885: LD_VAR 0 5
22889: PPUSH
22890: CALL 22932 0 6
22894: GO 22927
22896: LD_INT 304
22898: DOUBLE
22899: EQUAL
22900: IFTRUE 22904
22902: GO 22926
22904: POP
// hHackTeleport ( unit , x , y ) ; end ;
22905: LD_VAR 0 2
22909: PPUSH
22910: LD_VAR 0 4
22914: PPUSH
22915: LD_VAR 0 5
22919: PPUSH
22920: CALL 24691 0 3
22924: GO 22927
22926: POP
// end ;
22927: LD_VAR 0 12
22931: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22932: LD_INT 0
22934: PPUSH
22935: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22936: LD_VAR 0 1
22940: PUSH
22941: LD_INT 1
22943: LESS
22944: PUSH
22945: LD_VAR 0 1
22949: PUSH
22950: LD_INT 3
22952: GREATER
22953: OR
22954: PUSH
22955: LD_VAR 0 5
22959: PPUSH
22960: LD_VAR 0 6
22964: PPUSH
22965: CALL_OW 428
22969: OR
22970: IFFALSE 22974
// exit ;
22972: GO 23694
// uc_side := your_side ;
22974: LD_ADDR_OWVAR 20
22978: PUSH
22979: LD_OWVAR 2
22983: ST_TO_ADDR
// uc_nation := nation ;
22984: LD_ADDR_OWVAR 21
22988: PUSH
22989: LD_VAR 0 1
22993: ST_TO_ADDR
// bc_level = 1 ;
22994: LD_ADDR_OWVAR 43
22998: PUSH
22999: LD_INT 1
23001: ST_TO_ADDR
// case btype of 1 :
23002: LD_VAR 0 2
23006: PUSH
23007: LD_INT 1
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23026
23015: POP
// bc_type := b_depot ; 2 :
23016: LD_ADDR_OWVAR 42
23020: PUSH
23021: LD_INT 0
23023: ST_TO_ADDR
23024: GO 23638
23026: LD_INT 2
23028: DOUBLE
23029: EQUAL
23030: IFTRUE 23034
23032: GO 23045
23034: POP
// bc_type := b_warehouse ; 3 :
23035: LD_ADDR_OWVAR 42
23039: PUSH
23040: LD_INT 1
23042: ST_TO_ADDR
23043: GO 23638
23045: LD_INT 3
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23064
23053: POP
// bc_type := b_lab ; 4 .. 9 :
23054: LD_ADDR_OWVAR 42
23058: PUSH
23059: LD_INT 6
23061: ST_TO_ADDR
23062: GO 23638
23064: LD_INT 4
23066: DOUBLE
23067: GREATEREQUAL
23068: IFFALSE 23076
23070: LD_INT 9
23072: DOUBLE
23073: LESSEQUAL
23074: IFTRUE 23078
23076: GO 23130
23078: POP
// begin bc_type := b_lab_half ;
23079: LD_ADDR_OWVAR 42
23083: PUSH
23084: LD_INT 7
23086: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23087: LD_ADDR_OWVAR 44
23091: PUSH
23092: LD_INT 10
23094: PUSH
23095: LD_INT 11
23097: PUSH
23098: LD_INT 12
23100: PUSH
23101: LD_INT 15
23103: PUSH
23104: LD_INT 14
23106: PUSH
23107: LD_INT 13
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: LD_VAR 0 2
23122: PUSH
23123: LD_INT 3
23125: MINUS
23126: ARRAY
23127: ST_TO_ADDR
// end ; 10 .. 13 :
23128: GO 23638
23130: LD_INT 10
23132: DOUBLE
23133: GREATEREQUAL
23134: IFFALSE 23142
23136: LD_INT 13
23138: DOUBLE
23139: LESSEQUAL
23140: IFTRUE 23144
23142: GO 23221
23144: POP
// begin bc_type := b_lab_full ;
23145: LD_ADDR_OWVAR 42
23149: PUSH
23150: LD_INT 8
23152: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23153: LD_ADDR_OWVAR 44
23157: PUSH
23158: LD_INT 10
23160: PUSH
23161: LD_INT 12
23163: PUSH
23164: LD_INT 14
23166: PUSH
23167: LD_INT 13
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: LD_VAR 0 2
23180: PUSH
23181: LD_INT 9
23183: MINUS
23184: ARRAY
23185: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23186: LD_ADDR_OWVAR 45
23190: PUSH
23191: LD_INT 11
23193: PUSH
23194: LD_INT 15
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 15
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: LD_VAR 0 2
23213: PUSH
23214: LD_INT 9
23216: MINUS
23217: ARRAY
23218: ST_TO_ADDR
// end ; 14 :
23219: GO 23638
23221: LD_INT 14
23223: DOUBLE
23224: EQUAL
23225: IFTRUE 23229
23227: GO 23240
23229: POP
// bc_type := b_workshop ; 15 :
23230: LD_ADDR_OWVAR 42
23234: PUSH
23235: LD_INT 2
23237: ST_TO_ADDR
23238: GO 23638
23240: LD_INT 15
23242: DOUBLE
23243: EQUAL
23244: IFTRUE 23248
23246: GO 23259
23248: POP
// bc_type := b_factory ; 16 :
23249: LD_ADDR_OWVAR 42
23253: PUSH
23254: LD_INT 3
23256: ST_TO_ADDR
23257: GO 23638
23259: LD_INT 16
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23278
23267: POP
// bc_type := b_ext_gun ; 17 :
23268: LD_ADDR_OWVAR 42
23272: PUSH
23273: LD_INT 17
23275: ST_TO_ADDR
23276: GO 23638
23278: LD_INT 17
23280: DOUBLE
23281: EQUAL
23282: IFTRUE 23286
23284: GO 23314
23286: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23287: LD_ADDR_OWVAR 42
23291: PUSH
23292: LD_INT 19
23294: PUSH
23295: LD_INT 23
23297: PUSH
23298: LD_INT 19
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: PUSH
23306: LD_VAR 0 1
23310: ARRAY
23311: ST_TO_ADDR
23312: GO 23638
23314: LD_INT 18
23316: DOUBLE
23317: EQUAL
23318: IFTRUE 23322
23320: GO 23333
23322: POP
// bc_type := b_ext_radar ; 19 :
23323: LD_ADDR_OWVAR 42
23327: PUSH
23328: LD_INT 20
23330: ST_TO_ADDR
23331: GO 23638
23333: LD_INT 19
23335: DOUBLE
23336: EQUAL
23337: IFTRUE 23341
23339: GO 23352
23341: POP
// bc_type := b_ext_radio ; 20 :
23342: LD_ADDR_OWVAR 42
23346: PUSH
23347: LD_INT 22
23349: ST_TO_ADDR
23350: GO 23638
23352: LD_INT 20
23354: DOUBLE
23355: EQUAL
23356: IFTRUE 23360
23358: GO 23371
23360: POP
// bc_type := b_ext_siberium ; 21 :
23361: LD_ADDR_OWVAR 42
23365: PUSH
23366: LD_INT 21
23368: ST_TO_ADDR
23369: GO 23638
23371: LD_INT 21
23373: DOUBLE
23374: EQUAL
23375: IFTRUE 23379
23377: GO 23390
23379: POP
// bc_type := b_ext_computer ; 22 :
23380: LD_ADDR_OWVAR 42
23384: PUSH
23385: LD_INT 24
23387: ST_TO_ADDR
23388: GO 23638
23390: LD_INT 22
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23409
23398: POP
// bc_type := b_ext_track ; 23 :
23399: LD_ADDR_OWVAR 42
23403: PUSH
23404: LD_INT 16
23406: ST_TO_ADDR
23407: GO 23638
23409: LD_INT 23
23411: DOUBLE
23412: EQUAL
23413: IFTRUE 23417
23415: GO 23428
23417: POP
// bc_type := b_ext_laser ; 24 :
23418: LD_ADDR_OWVAR 42
23422: PUSH
23423: LD_INT 25
23425: ST_TO_ADDR
23426: GO 23638
23428: LD_INT 24
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23447
23436: POP
// bc_type := b_control_tower ; 25 :
23437: LD_ADDR_OWVAR 42
23441: PUSH
23442: LD_INT 36
23444: ST_TO_ADDR
23445: GO 23638
23447: LD_INT 25
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23466
23455: POP
// bc_type := b_breastwork ; 26 :
23456: LD_ADDR_OWVAR 42
23460: PUSH
23461: LD_INT 31
23463: ST_TO_ADDR
23464: GO 23638
23466: LD_INT 26
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23485
23474: POP
// bc_type := b_bunker ; 27 :
23475: LD_ADDR_OWVAR 42
23479: PUSH
23480: LD_INT 32
23482: ST_TO_ADDR
23483: GO 23638
23485: LD_INT 27
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 23504
23493: POP
// bc_type := b_turret ; 28 :
23494: LD_ADDR_OWVAR 42
23498: PUSH
23499: LD_INT 33
23501: ST_TO_ADDR
23502: GO 23638
23504: LD_INT 28
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23523
23512: POP
// bc_type := b_armoury ; 29 :
23513: LD_ADDR_OWVAR 42
23517: PUSH
23518: LD_INT 4
23520: ST_TO_ADDR
23521: GO 23638
23523: LD_INT 29
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 23542
23531: POP
// bc_type := b_barracks ; 30 :
23532: LD_ADDR_OWVAR 42
23536: PUSH
23537: LD_INT 5
23539: ST_TO_ADDR
23540: GO 23638
23542: LD_INT 30
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23561
23550: POP
// bc_type := b_solar_power ; 31 :
23551: LD_ADDR_OWVAR 42
23555: PUSH
23556: LD_INT 27
23558: ST_TO_ADDR
23559: GO 23638
23561: LD_INT 31
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23580
23569: POP
// bc_type := b_oil_power ; 32 :
23570: LD_ADDR_OWVAR 42
23574: PUSH
23575: LD_INT 26
23577: ST_TO_ADDR
23578: GO 23638
23580: LD_INT 32
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23599
23588: POP
// bc_type := b_siberite_power ; 33 :
23589: LD_ADDR_OWVAR 42
23593: PUSH
23594: LD_INT 28
23596: ST_TO_ADDR
23597: GO 23638
23599: LD_INT 33
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 23618
23607: POP
// bc_type := b_oil_mine ; 34 :
23608: LD_ADDR_OWVAR 42
23612: PUSH
23613: LD_INT 29
23615: ST_TO_ADDR
23616: GO 23638
23618: LD_INT 34
23620: DOUBLE
23621: EQUAL
23622: IFTRUE 23626
23624: GO 23637
23626: POP
// bc_type := b_siberite_mine ; end ;
23627: LD_ADDR_OWVAR 42
23631: PUSH
23632: LD_INT 30
23634: ST_TO_ADDR
23635: GO 23638
23637: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23638: LD_ADDR_VAR 0 8
23642: PUSH
23643: LD_VAR 0 5
23647: PPUSH
23648: LD_VAR 0 6
23652: PPUSH
23653: LD_VAR 0 3
23657: PPUSH
23658: CALL_OW 47
23662: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23663: LD_OWVAR 42
23667: PUSH
23668: LD_INT 32
23670: PUSH
23671: LD_INT 33
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: IN
23678: IFFALSE 23694
// PlaceWeaponTurret ( b , weapon ) ;
23680: LD_VAR 0 8
23684: PPUSH
23685: LD_VAR 0 4
23689: PPUSH
23690: CALL_OW 431
// end ;
23694: LD_VAR 0 7
23698: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23699: LD_INT 0
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23705: LD_ADDR_VAR 0 4
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_OWVAR 2
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 30
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 30
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PPUSH
23754: CALL_OW 69
23758: ST_TO_ADDR
// if not tmp then
23759: LD_VAR 0 4
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 23827
// for i in tmp do
23768: LD_ADDR_VAR 0 2
23772: PUSH
23773: LD_VAR 0 4
23777: PUSH
23778: FOR_IN
23779: IFFALSE 23825
// for j = 1 to 3 do
23781: LD_ADDR_VAR 0 3
23785: PUSH
23786: DOUBLE
23787: LD_INT 1
23789: DEC
23790: ST_TO_ADDR
23791: LD_INT 3
23793: PUSH
23794: FOR_TO
23795: IFFALSE 23821
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23797: LD_VAR 0 2
23801: PPUSH
23802: CALL_OW 274
23806: PPUSH
23807: LD_VAR 0 3
23811: PPUSH
23812: LD_INT 99999
23814: PPUSH
23815: CALL_OW 277
23819: GO 23794
23821: POP
23822: POP
23823: GO 23778
23825: POP
23826: POP
// end ;
23827: LD_VAR 0 1
23831: RET
// export function hHackSetLevel10 ; var i , j ; begin
23832: LD_INT 0
23834: PPUSH
23835: PPUSH
23836: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23837: LD_ADDR_VAR 0 2
23841: PUSH
23842: LD_INT 21
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PPUSH
23852: CALL_OW 69
23856: PUSH
23857: FOR_IN
23858: IFFALSE 23910
// if IsSelected ( i ) then
23860: LD_VAR 0 2
23864: PPUSH
23865: CALL_OW 306
23869: IFFALSE 23908
// begin for j := 1 to 4 do
23871: LD_ADDR_VAR 0 3
23875: PUSH
23876: DOUBLE
23877: LD_INT 1
23879: DEC
23880: ST_TO_ADDR
23881: LD_INT 4
23883: PUSH
23884: FOR_TO
23885: IFFALSE 23906
// SetSkill ( i , j , 10 ) ;
23887: LD_VAR 0 2
23891: PPUSH
23892: LD_VAR 0 3
23896: PPUSH
23897: LD_INT 10
23899: PPUSH
23900: CALL_OW 237
23904: GO 23884
23906: POP
23907: POP
// end ;
23908: GO 23857
23910: POP
23911: POP
// end ;
23912: LD_VAR 0 1
23916: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23917: LD_INT 0
23919: PPUSH
23920: PPUSH
23921: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23922: LD_ADDR_VAR 0 2
23926: PUSH
23927: LD_INT 22
23929: PUSH
23930: LD_OWVAR 2
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 21
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PPUSH
23953: CALL_OW 69
23957: PUSH
23958: FOR_IN
23959: IFFALSE 24000
// begin for j := 1 to 4 do
23961: LD_ADDR_VAR 0 3
23965: PUSH
23966: DOUBLE
23967: LD_INT 1
23969: DEC
23970: ST_TO_ADDR
23971: LD_INT 4
23973: PUSH
23974: FOR_TO
23975: IFFALSE 23996
// SetSkill ( i , j , 10 ) ;
23977: LD_VAR 0 2
23981: PPUSH
23982: LD_VAR 0 3
23986: PPUSH
23987: LD_INT 10
23989: PPUSH
23990: CALL_OW 237
23994: GO 23974
23996: POP
23997: POP
// end ;
23998: GO 23958
24000: POP
24001: POP
// end ;
24002: LD_VAR 0 1
24006: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24007: LD_INT 0
24009: PPUSH
// uc_side := your_side ;
24010: LD_ADDR_OWVAR 20
24014: PUSH
24015: LD_OWVAR 2
24019: ST_TO_ADDR
// uc_nation := nation ;
24020: LD_ADDR_OWVAR 21
24024: PUSH
24025: LD_VAR 0 1
24029: ST_TO_ADDR
// InitHc ;
24030: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24034: LD_INT 0
24036: PPUSH
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_VAR 0 3
24046: PPUSH
24047: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24051: LD_VAR 0 4
24055: PPUSH
24056: LD_VAR 0 5
24060: PPUSH
24061: CALL_OW 428
24065: PUSH
24066: LD_INT 0
24068: EQUAL
24069: IFFALSE 24093
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24071: CALL_OW 44
24075: PPUSH
24076: LD_VAR 0 4
24080: PPUSH
24081: LD_VAR 0 5
24085: PPUSH
24086: LD_INT 1
24088: PPUSH
24089: CALL_OW 48
// end ;
24093: LD_VAR 0 6
24097: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24098: LD_INT 0
24100: PPUSH
24101: PPUSH
// uc_side := your_side ;
24102: LD_ADDR_OWVAR 20
24106: PUSH
24107: LD_OWVAR 2
24111: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24112: LD_VAR 0 1
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: LD_INT 4
24128: PUSH
24129: LD_INT 5
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: IN
24139: IFFALSE 24151
// uc_nation := nation_american else
24141: LD_ADDR_OWVAR 21
24145: PUSH
24146: LD_INT 1
24148: ST_TO_ADDR
24149: GO 24194
// if chassis in [ 11 , 12 , 13 , 14 ] then
24151: LD_VAR 0 1
24155: PUSH
24156: LD_INT 11
24158: PUSH
24159: LD_INT 12
24161: PUSH
24162: LD_INT 13
24164: PUSH
24165: LD_INT 14
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: IN
24174: IFFALSE 24186
// uc_nation := nation_arabian else
24176: LD_ADDR_OWVAR 21
24180: PUSH
24181: LD_INT 2
24183: ST_TO_ADDR
24184: GO 24194
// uc_nation := nation_russian ;
24186: LD_ADDR_OWVAR 21
24190: PUSH
24191: LD_INT 3
24193: ST_TO_ADDR
// vc_chassis := chassis ;
24194: LD_ADDR_OWVAR 37
24198: PUSH
24199: LD_VAR 0 1
24203: ST_TO_ADDR
// vc_engine := engine ;
24204: LD_ADDR_OWVAR 39
24208: PUSH
24209: LD_VAR 0 2
24213: ST_TO_ADDR
// vc_control := control ;
24214: LD_ADDR_OWVAR 38
24218: PUSH
24219: LD_VAR 0 3
24223: ST_TO_ADDR
// vc_weapon := weapon ;
24224: LD_ADDR_OWVAR 40
24228: PUSH
24229: LD_VAR 0 4
24233: ST_TO_ADDR
// un := CreateVehicle ;
24234: LD_ADDR_VAR 0 8
24238: PUSH
24239: CALL_OW 45
24243: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24244: LD_VAR 0 8
24248: PPUSH
24249: LD_INT 0
24251: PPUSH
24252: LD_INT 5
24254: PPUSH
24255: CALL_OW 12
24259: PPUSH
24260: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24264: LD_VAR 0 8
24268: PPUSH
24269: LD_VAR 0 5
24273: PPUSH
24274: LD_VAR 0 6
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: CALL_OW 48
// end ;
24286: LD_VAR 0 7
24290: RET
// export hInvincible ; every 1 do
24291: GO 24293
24293: DISABLE
// hInvincible := [ ] ;
24294: LD_ADDR_EXP 93
24298: PUSH
24299: EMPTY
24300: ST_TO_ADDR
24301: END
// every 10 do var i ;
24302: GO 24304
24304: DISABLE
24305: LD_INT 0
24307: PPUSH
// begin enable ;
24308: ENABLE
// if not hInvincible then
24309: LD_EXP 93
24313: NOT
24314: IFFALSE 24318
// exit ;
24316: GO 24362
// for i in hInvincible do
24318: LD_ADDR_VAR 0 1
24322: PUSH
24323: LD_EXP 93
24327: PUSH
24328: FOR_IN
24329: IFFALSE 24360
// if GetLives ( i ) < 1000 then
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 256
24340: PUSH
24341: LD_INT 1000
24343: LESS
24344: IFFALSE 24358
// SetLives ( i , 1000 ) ;
24346: LD_VAR 0 1
24350: PPUSH
24351: LD_INT 1000
24353: PPUSH
24354: CALL_OW 234
24358: GO 24328
24360: POP
24361: POP
// end ;
24362: PPOPN 1
24364: END
// export function hHackInvincible ; var i ; begin
24365: LD_INT 0
24367: PPUSH
24368: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 21
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 21
24389: PUSH
24390: LD_INT 2
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: PPUSH
24402: CALL_OW 69
24406: PUSH
24407: FOR_IN
24408: IFFALSE 24469
// if IsSelected ( i ) then
24410: LD_VAR 0 2
24414: PPUSH
24415: CALL_OW 306
24419: IFFALSE 24467
// begin if i in hInvincible then
24421: LD_VAR 0 2
24425: PUSH
24426: LD_EXP 93
24430: IN
24431: IFFALSE 24451
// hInvincible := hInvincible diff i else
24433: LD_ADDR_EXP 93
24437: PUSH
24438: LD_EXP 93
24442: PUSH
24443: LD_VAR 0 2
24447: DIFF
24448: ST_TO_ADDR
24449: GO 24467
// hInvincible := hInvincible union i ;
24451: LD_ADDR_EXP 93
24455: PUSH
24456: LD_EXP 93
24460: PUSH
24461: LD_VAR 0 2
24465: UNION
24466: ST_TO_ADDR
// end ;
24467: GO 24407
24469: POP
24470: POP
// end ;
24471: LD_VAR 0 1
24475: RET
// export function hHackInvisible ; var i , j ; begin
24476: LD_INT 0
24478: PPUSH
24479: PPUSH
24480: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24481: LD_ADDR_VAR 0 2
24485: PUSH
24486: LD_INT 21
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PPUSH
24496: CALL_OW 69
24500: PUSH
24501: FOR_IN
24502: IFFALSE 24526
// if IsSelected ( i ) then
24504: LD_VAR 0 2
24508: PPUSH
24509: CALL_OW 306
24513: IFFALSE 24524
// ComForceInvisible ( i ) ;
24515: LD_VAR 0 2
24519: PPUSH
24520: CALL_OW 496
24524: GO 24501
24526: POP
24527: POP
// end ;
24528: LD_VAR 0 1
24532: RET
// export function hHackChangeYourSide ; begin
24533: LD_INT 0
24535: PPUSH
// if your_side = 8 then
24536: LD_OWVAR 2
24540: PUSH
24541: LD_INT 8
24543: EQUAL
24544: IFFALSE 24556
// your_side := 0 else
24546: LD_ADDR_OWVAR 2
24550: PUSH
24551: LD_INT 0
24553: ST_TO_ADDR
24554: GO 24570
// your_side := your_side + 1 ;
24556: LD_ADDR_OWVAR 2
24560: PUSH
24561: LD_OWVAR 2
24565: PUSH
24566: LD_INT 1
24568: PLUS
24569: ST_TO_ADDR
// end ;
24570: LD_VAR 0 1
24574: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24575: LD_INT 0
24577: PPUSH
24578: PPUSH
24579: PPUSH
// for i in all_units do
24580: LD_ADDR_VAR 0 2
24584: PUSH
24585: LD_OWVAR 3
24589: PUSH
24590: FOR_IN
24591: IFFALSE 24669
// if IsSelected ( i ) then
24593: LD_VAR 0 2
24597: PPUSH
24598: CALL_OW 306
24602: IFFALSE 24667
// begin j := GetSide ( i ) ;
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_VAR 0 2
24613: PPUSH
24614: CALL_OW 255
24618: ST_TO_ADDR
// if j = 8 then
24619: LD_VAR 0 3
24623: PUSH
24624: LD_INT 8
24626: EQUAL
24627: IFFALSE 24639
// j := 0 else
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_INT 0
24636: ST_TO_ADDR
24637: GO 24653
// j := j + 1 ;
24639: LD_ADDR_VAR 0 3
24643: PUSH
24644: LD_VAR 0 3
24648: PUSH
24649: LD_INT 1
24651: PLUS
24652: ST_TO_ADDR
// SetSide ( i , j ) ;
24653: LD_VAR 0 2
24657: PPUSH
24658: LD_VAR 0 3
24662: PPUSH
24663: CALL_OW 235
// end ;
24667: GO 24590
24669: POP
24670: POP
// end ;
24671: LD_VAR 0 1
24675: RET
// export function hHackFog ; begin
24676: LD_INT 0
24678: PPUSH
// FogOff ( true ) ;
24679: LD_INT 1
24681: PPUSH
24682: CALL_OW 344
// end ;
24686: LD_VAR 0 1
24690: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24691: LD_INT 0
24693: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24694: LD_VAR 0 1
24698: PPUSH
24699: LD_VAR 0 2
24703: PPUSH
24704: LD_VAR 0 3
24708: PPUSH
24709: LD_INT 1
24711: PPUSH
24712: LD_INT 1
24714: PPUSH
24715: CALL_OW 483
// CenterOnXY ( x , y ) ;
24719: LD_VAR 0 2
24723: PPUSH
24724: LD_VAR 0 3
24728: PPUSH
24729: CALL_OW 84
// end ; end_of_file
24733: LD_VAR 0 4
24737: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24738: LD_INT 0
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 264
24753: PUSH
24754: LD_EXP 25
24758: EQUAL
24759: IFFALSE 24831
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24761: LD_INT 68
24763: PPUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL_OW 255
24773: PPUSH
24774: CALL_OW 321
24778: PUSH
24779: LD_INT 2
24781: EQUAL
24782: IFFALSE 24794
// eff := 70 else
24784: LD_ADDR_VAR 0 4
24788: PUSH
24789: LD_INT 70
24791: ST_TO_ADDR
24792: GO 24802
// eff := 30 ;
24794: LD_ADDR_VAR 0 4
24798: PUSH
24799: LD_INT 30
24801: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 250
24811: PPUSH
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL_OW 251
24821: PPUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: CALL_OW 495
// end ; end ;
24831: LD_VAR 0 2
24835: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24836: LD_INT 0
24838: PPUSH
// end ;
24839: LD_VAR 0 4
24843: RET
// export function SOS_Command ( cmd ) ; begin
24844: LD_INT 0
24846: PPUSH
// end ;
24847: LD_VAR 0 2
24851: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24852: LD_INT 0
24854: PPUSH
// if cmd = 121 then
24855: LD_VAR 0 1
24859: PUSH
24860: LD_INT 121
24862: EQUAL
24863: IFFALSE 24865
// end ;
24865: LD_VAR 0 6
24869: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24870: LD_INT 0
24872: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24873: LD_VAR 0 1
24877: PUSH
24878: LD_INT 250
24880: EQUAL
24881: PUSH
24882: LD_VAR 0 2
24886: PPUSH
24887: CALL_OW 264
24891: PUSH
24892: LD_EXP 28
24896: EQUAL
24897: AND
24898: IFFALSE 24919
// MinerPlaceMine ( unit , x , y ) ;
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_VAR 0 4
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL 27268 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24919: LD_VAR 0 1
24923: PUSH
24924: LD_INT 251
24926: EQUAL
24927: PUSH
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL_OW 264
24937: PUSH
24938: LD_EXP 28
24942: EQUAL
24943: AND
24944: IFFALSE 24965
// MinerDetonateMine ( unit , x , y ) ;
24946: LD_VAR 0 2
24950: PPUSH
24951: LD_VAR 0 4
24955: PPUSH
24956: LD_VAR 0 5
24960: PPUSH
24961: CALL 27545 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24965: LD_VAR 0 1
24969: PUSH
24970: LD_INT 252
24972: EQUAL
24973: PUSH
24974: LD_VAR 0 2
24978: PPUSH
24979: CALL_OW 264
24983: PUSH
24984: LD_EXP 28
24988: EQUAL
24989: AND
24990: IFFALSE 25011
// MinerCreateMinefield ( unit , x , y ) ;
24992: LD_VAR 0 2
24996: PPUSH
24997: LD_VAR 0 4
25001: PPUSH
25002: LD_VAR 0 5
25006: PPUSH
25007: CALL 27962 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25011: LD_VAR 0 1
25015: PUSH
25016: LD_INT 253
25018: EQUAL
25019: PUSH
25020: LD_VAR 0 2
25024: PPUSH
25025: CALL_OW 257
25029: PUSH
25030: LD_INT 5
25032: EQUAL
25033: AND
25034: IFFALSE 25055
// ComBinocular ( unit , x , y ) ;
25036: LD_VAR 0 2
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: LD_VAR 0 5
25050: PPUSH
25051: CALL 28333 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 254
25062: EQUAL
25063: PUSH
25064: LD_VAR 0 2
25068: PPUSH
25069: CALL_OW 264
25073: PUSH
25074: LD_EXP 23
25078: EQUAL
25079: AND
25080: PUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: CALL_OW 263
25090: PUSH
25091: LD_INT 3
25093: EQUAL
25094: AND
25095: IFFALSE 25111
// HackDestroyVehicle ( unit , selectedUnit ) ;
25097: LD_VAR 0 2
25101: PPUSH
25102: LD_VAR 0 3
25106: PPUSH
25107: CALL 26628 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25111: LD_VAR 0 1
25115: PUSH
25116: LD_INT 255
25118: EQUAL
25119: PUSH
25120: LD_VAR 0 2
25124: PPUSH
25125: CALL_OW 264
25129: PUSH
25130: LD_INT 14
25132: PUSH
25133: LD_INT 53
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: IN
25140: AND
25141: PUSH
25142: LD_VAR 0 4
25146: PPUSH
25147: LD_VAR 0 5
25151: PPUSH
25152: CALL_OW 488
25156: AND
25157: IFFALSE 25181
// CutTreeXYR ( unit , x , y , 12 ) ;
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_VAR 0 4
25168: PPUSH
25169: LD_VAR 0 5
25173: PPUSH
25174: LD_INT 12
25176: PPUSH
25177: CALL 25194 0 4
// end ;
25181: LD_VAR 0 6
25185: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25186: LD_INT 0
25188: PPUSH
// end ;
25189: LD_VAR 0 4
25193: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25205: LD_VAR 0 1
25209: NOT
25210: PUSH
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_VAR 0 3
25220: PPUSH
25221: CALL_OW 488
25225: NOT
25226: OR
25227: PUSH
25228: LD_VAR 0 4
25232: NOT
25233: OR
25234: IFFALSE 25238
// exit ;
25236: GO 25578
// list := [ ] ;
25238: LD_ADDR_VAR 0 13
25242: PUSH
25243: EMPTY
25244: ST_TO_ADDR
// if x - r < 0 then
25245: LD_VAR 0 2
25249: PUSH
25250: LD_VAR 0 4
25254: MINUS
25255: PUSH
25256: LD_INT 0
25258: LESS
25259: IFFALSE 25271
// min_x := 0 else
25261: LD_ADDR_VAR 0 7
25265: PUSH
25266: LD_INT 0
25268: ST_TO_ADDR
25269: GO 25287
// min_x := x - r ;
25271: LD_ADDR_VAR 0 7
25275: PUSH
25276: LD_VAR 0 2
25280: PUSH
25281: LD_VAR 0 4
25285: MINUS
25286: ST_TO_ADDR
// if y - r < 0 then
25287: LD_VAR 0 3
25291: PUSH
25292: LD_VAR 0 4
25296: MINUS
25297: PUSH
25298: LD_INT 0
25300: LESS
25301: IFFALSE 25313
// min_y := 0 else
25303: LD_ADDR_VAR 0 8
25307: PUSH
25308: LD_INT 0
25310: ST_TO_ADDR
25311: GO 25329
// min_y := y - r ;
25313: LD_ADDR_VAR 0 8
25317: PUSH
25318: LD_VAR 0 3
25322: PUSH
25323: LD_VAR 0 4
25327: MINUS
25328: ST_TO_ADDR
// max_x := x + r ;
25329: LD_ADDR_VAR 0 9
25333: PUSH
25334: LD_VAR 0 2
25338: PUSH
25339: LD_VAR 0 4
25343: PLUS
25344: ST_TO_ADDR
// max_y := y + r ;
25345: LD_ADDR_VAR 0 10
25349: PUSH
25350: LD_VAR 0 3
25354: PUSH
25355: LD_VAR 0 4
25359: PLUS
25360: ST_TO_ADDR
// for _x = min_x to max_x do
25361: LD_ADDR_VAR 0 11
25365: PUSH
25366: DOUBLE
25367: LD_VAR 0 7
25371: DEC
25372: ST_TO_ADDR
25373: LD_VAR 0 9
25377: PUSH
25378: FOR_TO
25379: IFFALSE 25496
// for _y = min_y to max_y do
25381: LD_ADDR_VAR 0 12
25385: PUSH
25386: DOUBLE
25387: LD_VAR 0 8
25391: DEC
25392: ST_TO_ADDR
25393: LD_VAR 0 10
25397: PUSH
25398: FOR_TO
25399: IFFALSE 25492
// begin if not ValidHex ( _x , _y ) then
25401: LD_VAR 0 11
25405: PPUSH
25406: LD_VAR 0 12
25410: PPUSH
25411: CALL_OW 488
25415: NOT
25416: IFFALSE 25420
// continue ;
25418: GO 25398
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25420: LD_VAR 0 11
25424: PPUSH
25425: LD_VAR 0 12
25429: PPUSH
25430: CALL_OW 351
25434: PUSH
25435: LD_VAR 0 11
25439: PPUSH
25440: LD_VAR 0 12
25444: PPUSH
25445: CALL_OW 554
25449: AND
25450: IFFALSE 25490
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25452: LD_ADDR_VAR 0 13
25456: PUSH
25457: LD_VAR 0 13
25461: PPUSH
25462: LD_VAR 0 13
25466: PUSH
25467: LD_INT 1
25469: PLUS
25470: PPUSH
25471: LD_VAR 0 11
25475: PUSH
25476: LD_VAR 0 12
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PPUSH
25485: CALL_OW 2
25489: ST_TO_ADDR
// end ;
25490: GO 25398
25492: POP
25493: POP
25494: GO 25378
25496: POP
25497: POP
// if not list then
25498: LD_VAR 0 13
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25578
// for i in list do
25507: LD_ADDR_VAR 0 6
25511: PUSH
25512: LD_VAR 0 13
25516: PUSH
25517: FOR_IN
25518: IFFALSE 25576
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25520: LD_VAR 0 1
25524: PPUSH
25525: LD_STRING M
25527: PUSH
25528: LD_VAR 0 6
25532: PUSH
25533: LD_INT 1
25535: ARRAY
25536: PUSH
25537: LD_VAR 0 6
25541: PUSH
25542: LD_INT 2
25544: ARRAY
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: PPUSH
25570: CALL_OW 447
25574: GO 25517
25576: POP
25577: POP
// end ;
25578: LD_VAR 0 5
25582: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25583: LD_EXP 96
25587: NOT
25588: IFFALSE 25638
25590: GO 25592
25592: DISABLE
// begin initHack := true ;
25593: LD_ADDR_EXP 96
25597: PUSH
25598: LD_INT 1
25600: ST_TO_ADDR
// hackTanks := [ ] ;
25601: LD_ADDR_EXP 97
25605: PUSH
25606: EMPTY
25607: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25608: LD_ADDR_EXP 98
25612: PUSH
25613: EMPTY
25614: ST_TO_ADDR
// hackLimit := 3 ;
25615: LD_ADDR_EXP 99
25619: PUSH
25620: LD_INT 3
25622: ST_TO_ADDR
// hackDist := 12 ;
25623: LD_ADDR_EXP 100
25627: PUSH
25628: LD_INT 12
25630: ST_TO_ADDR
// hackCounter := [ ] ;
25631: LD_ADDR_EXP 101
25635: PUSH
25636: EMPTY
25637: ST_TO_ADDR
// end ;
25638: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25639: LD_EXP 96
25643: PUSH
25644: LD_INT 34
25646: PUSH
25647: LD_EXP 23
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PPUSH
25656: CALL_OW 69
25660: AND
25661: IFFALSE 25916
25663: GO 25665
25665: DISABLE
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
// begin enable ;
25670: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25671: LD_ADDR_VAR 0 1
25675: PUSH
25676: LD_INT 34
25678: PUSH
25679: LD_EXP 23
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PPUSH
25688: CALL_OW 69
25692: PUSH
25693: FOR_IN
25694: IFFALSE 25914
// begin if not i in hackTanks then
25696: LD_VAR 0 1
25700: PUSH
25701: LD_EXP 97
25705: IN
25706: NOT
25707: IFFALSE 25790
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25709: LD_ADDR_EXP 97
25713: PUSH
25714: LD_EXP 97
25718: PPUSH
25719: LD_EXP 97
25723: PUSH
25724: LD_INT 1
25726: PLUS
25727: PPUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL_OW 1
25737: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25738: LD_ADDR_EXP 98
25742: PUSH
25743: LD_EXP 98
25747: PPUSH
25748: LD_EXP 98
25752: PUSH
25753: LD_INT 1
25755: PLUS
25756: PPUSH
25757: EMPTY
25758: PPUSH
25759: CALL_OW 1
25763: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25764: LD_ADDR_EXP 101
25768: PUSH
25769: LD_EXP 101
25773: PPUSH
25774: LD_EXP 101
25778: PUSH
25779: LD_INT 1
25781: PLUS
25782: PPUSH
25783: EMPTY
25784: PPUSH
25785: CALL_OW 1
25789: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 302
25799: NOT
25800: IFFALSE 25813
// begin HackUnlinkAll ( i ) ;
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL 25919 0 1
// continue ;
25811: GO 25693
// end ; HackCheckCapturedStatus ( i ) ;
25813: LD_VAR 0 1
25817: PPUSH
25818: CALL 26362 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25822: LD_ADDR_VAR 0 2
25826: PUSH
25827: LD_INT 81
25829: PUSH
25830: LD_VAR 0 1
25834: PPUSH
25835: CALL_OW 255
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 33
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 91
25856: PUSH
25857: LD_VAR 0 1
25861: PUSH
25862: LD_EXP 100
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 50
25874: PUSH
25875: EMPTY
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 69
25888: ST_TO_ADDR
// if not tmp then
25889: LD_VAR 0 2
25893: NOT
25894: IFFALSE 25898
// continue ;
25896: GO 25693
// HackLink ( i , tmp ) ;
25898: LD_VAR 0 1
25902: PPUSH
25903: LD_VAR 0 2
25907: PPUSH
25908: CALL 26055 0 2
// end ;
25912: GO 25693
25914: POP
25915: POP
// end ;
25916: PPOPN 2
25918: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25919: LD_INT 0
25921: PPUSH
25922: PPUSH
25923: PPUSH
// if not hack in hackTanks then
25924: LD_VAR 0 1
25928: PUSH
25929: LD_EXP 97
25933: IN
25934: NOT
25935: IFFALSE 25939
// exit ;
25937: GO 26050
// index := GetElementIndex ( hackTanks , hack ) ;
25939: LD_ADDR_VAR 0 4
25943: PUSH
25944: LD_EXP 97
25948: PPUSH
25949: LD_VAR 0 1
25953: PPUSH
25954: CALL 33484 0 2
25958: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25959: LD_EXP 98
25963: PUSH
25964: LD_VAR 0 4
25968: ARRAY
25969: IFFALSE 26050
// begin for i in hackTanksCaptured [ index ] do
25971: LD_ADDR_VAR 0 3
25975: PUSH
25976: LD_EXP 98
25980: PUSH
25981: LD_VAR 0 4
25985: ARRAY
25986: PUSH
25987: FOR_IN
25988: IFFALSE 26014
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25990: LD_VAR 0 3
25994: PUSH
25995: LD_INT 1
25997: ARRAY
25998: PPUSH
25999: LD_VAR 0 3
26003: PUSH
26004: LD_INT 2
26006: ARRAY
26007: PPUSH
26008: CALL_OW 235
26012: GO 25987
26014: POP
26015: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26016: LD_ADDR_EXP 98
26020: PUSH
26021: LD_EXP 98
26025: PPUSH
26026: LD_VAR 0 4
26030: PPUSH
26031: EMPTY
26032: PPUSH
26033: CALL_OW 1
26037: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26038: LD_VAR 0 1
26042: PPUSH
26043: LD_INT 0
26045: PPUSH
26046: CALL_OW 505
// end ; end ;
26050: LD_VAR 0 2
26054: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26055: LD_INT 0
26057: PPUSH
26058: PPUSH
26059: PPUSH
// if not hack in hackTanks or not vehicles then
26060: LD_VAR 0 1
26064: PUSH
26065: LD_EXP 97
26069: IN
26070: NOT
26071: PUSH
26072: LD_VAR 0 2
26076: NOT
26077: OR
26078: IFFALSE 26082
// exit ;
26080: GO 26357
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26082: LD_ADDR_VAR 0 2
26086: PUSH
26087: LD_VAR 0 1
26091: PPUSH
26092: LD_VAR 0 2
26096: PPUSH
26097: LD_INT 1
26099: PPUSH
26100: LD_INT 1
26102: PPUSH
26103: CALL 34134 0 4
26107: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26108: LD_ADDR_VAR 0 5
26112: PUSH
26113: LD_EXP 97
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL 33484 0 2
26127: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26128: LD_EXP 98
26132: PUSH
26133: LD_VAR 0 5
26137: ARRAY
26138: PUSH
26139: LD_EXP 99
26143: LESS
26144: IFFALSE 26333
// begin for i := 1 to vehicles do
26146: LD_ADDR_VAR 0 4
26150: PUSH
26151: DOUBLE
26152: LD_INT 1
26154: DEC
26155: ST_TO_ADDR
26156: LD_VAR 0 2
26160: PUSH
26161: FOR_TO
26162: IFFALSE 26331
// begin if hackTanksCaptured [ index ] = hackLimit then
26164: LD_EXP 98
26168: PUSH
26169: LD_VAR 0 5
26173: ARRAY
26174: PUSH
26175: LD_EXP 99
26179: EQUAL
26180: IFFALSE 26184
// break ;
26182: GO 26331
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26184: LD_ADDR_EXP 101
26188: PUSH
26189: LD_EXP 101
26193: PPUSH
26194: LD_VAR 0 5
26198: PPUSH
26199: LD_EXP 101
26203: PUSH
26204: LD_VAR 0 5
26208: ARRAY
26209: PUSH
26210: LD_INT 1
26212: PLUS
26213: PPUSH
26214: CALL_OW 1
26218: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26219: LD_ADDR_EXP 98
26223: PUSH
26224: LD_EXP 98
26228: PPUSH
26229: LD_VAR 0 5
26233: PUSH
26234: LD_EXP 98
26238: PUSH
26239: LD_VAR 0 5
26243: ARRAY
26244: PUSH
26245: LD_INT 1
26247: PLUS
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: LD_VAR 0 2
26257: PUSH
26258: LD_VAR 0 4
26262: ARRAY
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: LD_VAR 0 4
26273: ARRAY
26274: PPUSH
26275: CALL_OW 255
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL 33699 0 3
26288: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26289: LD_VAR 0 2
26293: PUSH
26294: LD_VAR 0 4
26298: ARRAY
26299: PPUSH
26300: LD_VAR 0 1
26304: PPUSH
26305: CALL_OW 255
26309: PPUSH
26310: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26314: LD_VAR 0 2
26318: PUSH
26319: LD_VAR 0 4
26323: ARRAY
26324: PPUSH
26325: CALL_OW 141
// end ;
26329: GO 26161
26331: POP
26332: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26333: LD_VAR 0 1
26337: PPUSH
26338: LD_EXP 98
26342: PUSH
26343: LD_VAR 0 5
26347: ARRAY
26348: PUSH
26349: LD_INT 0
26351: PLUS
26352: PPUSH
26353: CALL_OW 505
// end ;
26357: LD_VAR 0 3
26361: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26362: LD_INT 0
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
// if not hack in hackTanks then
26368: LD_VAR 0 1
26372: PUSH
26373: LD_EXP 97
26377: IN
26378: NOT
26379: IFFALSE 26383
// exit ;
26381: GO 26623
// index := GetElementIndex ( hackTanks , hack ) ;
26383: LD_ADDR_VAR 0 4
26387: PUSH
26388: LD_EXP 97
26392: PPUSH
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL 33484 0 2
26402: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26403: LD_ADDR_VAR 0 3
26407: PUSH
26408: DOUBLE
26409: LD_EXP 98
26413: PUSH
26414: LD_VAR 0 4
26418: ARRAY
26419: INC
26420: ST_TO_ADDR
26421: LD_INT 1
26423: PUSH
26424: FOR_DOWNTO
26425: IFFALSE 26597
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26427: LD_ADDR_VAR 0 5
26431: PUSH
26432: LD_EXP 98
26436: PUSH
26437: LD_VAR 0 4
26441: ARRAY
26442: PUSH
26443: LD_VAR 0 3
26447: ARRAY
26448: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26449: LD_VAR 0 5
26453: PUSH
26454: LD_INT 1
26456: ARRAY
26457: PPUSH
26458: CALL_OW 302
26462: NOT
26463: PUSH
26464: LD_VAR 0 5
26468: PUSH
26469: LD_INT 1
26471: ARRAY
26472: PPUSH
26473: CALL_OW 255
26477: PUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 255
26487: NONEQUAL
26488: OR
26489: IFFALSE 26595
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26491: LD_VAR 0 5
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: PPUSH
26500: CALL_OW 305
26504: PUSH
26505: LD_VAR 0 5
26509: PUSH
26510: LD_INT 1
26512: ARRAY
26513: PPUSH
26514: CALL_OW 255
26518: PUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL_OW 255
26528: EQUAL
26529: AND
26530: IFFALSE 26554
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26532: LD_VAR 0 5
26536: PUSH
26537: LD_INT 1
26539: ARRAY
26540: PPUSH
26541: LD_VAR 0 5
26545: PUSH
26546: LD_INT 2
26548: ARRAY
26549: PPUSH
26550: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26554: LD_ADDR_EXP 98
26558: PUSH
26559: LD_EXP 98
26563: PPUSH
26564: LD_VAR 0 4
26568: PPUSH
26569: LD_EXP 98
26573: PUSH
26574: LD_VAR 0 4
26578: ARRAY
26579: PPUSH
26580: LD_VAR 0 3
26584: PPUSH
26585: CALL_OW 3
26589: PPUSH
26590: CALL_OW 1
26594: ST_TO_ADDR
// end ; end ;
26595: GO 26424
26597: POP
26598: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26599: LD_VAR 0 1
26603: PPUSH
26604: LD_EXP 98
26608: PUSH
26609: LD_VAR 0 4
26613: ARRAY
26614: PUSH
26615: LD_INT 0
26617: PLUS
26618: PPUSH
26619: CALL_OW 505
// end ;
26623: LD_VAR 0 2
26627: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26628: LD_INT 0
26630: PPUSH
26631: PPUSH
26632: PPUSH
26633: PPUSH
// if not hack in hackTanks then
26634: LD_VAR 0 1
26638: PUSH
26639: LD_EXP 97
26643: IN
26644: NOT
26645: IFFALSE 26649
// exit ;
26647: GO 26734
// index := GetElementIndex ( hackTanks , hack ) ;
26649: LD_ADDR_VAR 0 5
26653: PUSH
26654: LD_EXP 97
26658: PPUSH
26659: LD_VAR 0 1
26663: PPUSH
26664: CALL 33484 0 2
26668: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26669: LD_ADDR_VAR 0 4
26673: PUSH
26674: DOUBLE
26675: LD_INT 1
26677: DEC
26678: ST_TO_ADDR
26679: LD_EXP 98
26683: PUSH
26684: LD_VAR 0 5
26688: ARRAY
26689: PUSH
26690: FOR_TO
26691: IFFALSE 26732
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26693: LD_EXP 98
26697: PUSH
26698: LD_VAR 0 5
26702: ARRAY
26703: PUSH
26704: LD_VAR 0 4
26708: ARRAY
26709: PUSH
26710: LD_INT 1
26712: ARRAY
26713: PUSH
26714: LD_VAR 0 2
26718: EQUAL
26719: IFFALSE 26730
// KillUnit ( vehicle ) ;
26721: LD_VAR 0 2
26725: PPUSH
26726: CALL_OW 66
26730: GO 26690
26732: POP
26733: POP
// end ;
26734: LD_VAR 0 3
26738: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26739: LD_EXP 102
26743: NOT
26744: IFFALSE 26779
26746: GO 26748
26748: DISABLE
// begin initMiner := true ;
26749: LD_ADDR_EXP 102
26753: PUSH
26754: LD_INT 1
26756: ST_TO_ADDR
// minersList := [ ] ;
26757: LD_ADDR_EXP 103
26761: PUSH
26762: EMPTY
26763: ST_TO_ADDR
// minerMinesList := [ ] ;
26764: LD_ADDR_EXP 104
26768: PUSH
26769: EMPTY
26770: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26771: LD_ADDR_EXP 105
26775: PUSH
26776: LD_INT 5
26778: ST_TO_ADDR
// end ;
26779: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26780: LD_EXP 102
26784: PUSH
26785: LD_INT 34
26787: PUSH
26788: LD_EXP 28
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PPUSH
26797: CALL_OW 69
26801: AND
26802: IFFALSE 27265
26804: GO 26806
26806: DISABLE
26807: LD_INT 0
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
// begin enable ;
26813: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26814: LD_ADDR_VAR 0 1
26818: PUSH
26819: LD_INT 34
26821: PUSH
26822: LD_EXP 28
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: PUSH
26836: FOR_IN
26837: IFFALSE 26909
// begin if not i in minersList then
26839: LD_VAR 0 1
26843: PUSH
26844: LD_EXP 103
26848: IN
26849: NOT
26850: IFFALSE 26907
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26852: LD_ADDR_EXP 103
26856: PUSH
26857: LD_EXP 103
26861: PPUSH
26862: LD_EXP 103
26866: PUSH
26867: LD_INT 1
26869: PLUS
26870: PPUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 1
26880: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26881: LD_ADDR_EXP 104
26885: PUSH
26886: LD_EXP 104
26890: PPUSH
26891: LD_EXP 104
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: PPUSH
26900: EMPTY
26901: PPUSH
26902: CALL_OW 1
26906: ST_TO_ADDR
// end end ;
26907: GO 26836
26909: POP
26910: POP
// for i := minerMinesList downto 1 do
26911: LD_ADDR_VAR 0 1
26915: PUSH
26916: DOUBLE
26917: LD_EXP 104
26921: INC
26922: ST_TO_ADDR
26923: LD_INT 1
26925: PUSH
26926: FOR_DOWNTO
26927: IFFALSE 27263
// begin if IsLive ( minersList [ i ] ) then
26929: LD_EXP 103
26933: PUSH
26934: LD_VAR 0 1
26938: ARRAY
26939: PPUSH
26940: CALL_OW 300
26944: IFFALSE 26972
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26946: LD_EXP 103
26950: PUSH
26951: LD_VAR 0 1
26955: ARRAY
26956: PPUSH
26957: LD_EXP 104
26961: PUSH
26962: LD_VAR 0 1
26966: ARRAY
26967: PPUSH
26968: CALL_OW 505
// if not minerMinesList [ i ] then
26972: LD_EXP 104
26976: PUSH
26977: LD_VAR 0 1
26981: ARRAY
26982: NOT
26983: IFFALSE 26987
// continue ;
26985: GO 26926
// for j := minerMinesList [ i ] downto 1 do
26987: LD_ADDR_VAR 0 2
26991: PUSH
26992: DOUBLE
26993: LD_EXP 104
26997: PUSH
26998: LD_VAR 0 1
27002: ARRAY
27003: INC
27004: ST_TO_ADDR
27005: LD_INT 1
27007: PUSH
27008: FOR_DOWNTO
27009: IFFALSE 27259
// begin side := GetSide ( minersList [ i ] ) ;
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_EXP 103
27020: PUSH
27021: LD_VAR 0 1
27025: ARRAY
27026: PPUSH
27027: CALL_OW 255
27031: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27032: LD_ADDR_VAR 0 4
27036: PUSH
27037: LD_EXP 104
27041: PUSH
27042: LD_VAR 0 1
27046: ARRAY
27047: PUSH
27048: LD_VAR 0 2
27052: ARRAY
27053: PUSH
27054: LD_INT 1
27056: ARRAY
27057: PPUSH
27058: LD_EXP 104
27062: PUSH
27063: LD_VAR 0 1
27067: ARRAY
27068: PUSH
27069: LD_VAR 0 2
27073: ARRAY
27074: PUSH
27075: LD_INT 2
27077: ARRAY
27078: PPUSH
27079: CALL_OW 428
27083: ST_TO_ADDR
// if not tmp then
27084: LD_VAR 0 4
27088: NOT
27089: IFFALSE 27093
// continue ;
27091: GO 27008
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27093: LD_VAR 0 4
27097: PUSH
27098: LD_INT 81
27100: PUSH
27101: LD_VAR 0 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PPUSH
27110: CALL_OW 69
27114: IN
27115: PUSH
27116: LD_EXP 104
27120: PUSH
27121: LD_VAR 0 1
27125: ARRAY
27126: PUSH
27127: LD_VAR 0 2
27131: ARRAY
27132: PUSH
27133: LD_INT 1
27135: ARRAY
27136: PPUSH
27137: LD_EXP 104
27141: PUSH
27142: LD_VAR 0 1
27146: ARRAY
27147: PUSH
27148: LD_VAR 0 2
27152: ARRAY
27153: PUSH
27154: LD_INT 2
27156: ARRAY
27157: PPUSH
27158: CALL_OW 458
27162: AND
27163: IFFALSE 27257
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27165: LD_EXP 104
27169: PUSH
27170: LD_VAR 0 1
27174: ARRAY
27175: PUSH
27176: LD_VAR 0 2
27180: ARRAY
27181: PUSH
27182: LD_INT 1
27184: ARRAY
27185: PPUSH
27186: LD_EXP 104
27190: PUSH
27191: LD_VAR 0 1
27195: ARRAY
27196: PUSH
27197: LD_VAR 0 2
27201: ARRAY
27202: PUSH
27203: LD_INT 2
27205: ARRAY
27206: PPUSH
27207: LD_VAR 0 3
27211: PPUSH
27212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27216: LD_ADDR_EXP 104
27220: PUSH
27221: LD_EXP 104
27225: PPUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_EXP 104
27235: PUSH
27236: LD_VAR 0 1
27240: ARRAY
27241: PPUSH
27242: LD_VAR 0 2
27246: PPUSH
27247: CALL_OW 3
27251: PPUSH
27252: CALL_OW 1
27256: ST_TO_ADDR
// end ; end ;
27257: GO 27008
27259: POP
27260: POP
// end ;
27261: GO 26926
27263: POP
27264: POP
// end ;
27265: PPOPN 4
27267: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27268: LD_INT 0
27270: PPUSH
27271: PPUSH
// result := false ;
27272: LD_ADDR_VAR 0 4
27276: PUSH
27277: LD_INT 0
27279: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27280: LD_VAR 0 1
27284: PPUSH
27285: CALL_OW 264
27289: PUSH
27290: LD_EXP 28
27294: EQUAL
27295: NOT
27296: IFFALSE 27300
// exit ;
27298: GO 27540
// index := GetElementIndex ( minersList , unit ) ;
27300: LD_ADDR_VAR 0 5
27304: PUSH
27305: LD_EXP 103
27309: PPUSH
27310: LD_VAR 0 1
27314: PPUSH
27315: CALL 33484 0 2
27319: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27320: LD_EXP 104
27324: PUSH
27325: LD_VAR 0 5
27329: ARRAY
27330: PUSH
27331: LD_EXP 105
27335: GREATEREQUAL
27336: IFFALSE 27340
// exit ;
27338: GO 27540
// ComMoveXY ( unit , x , y ) ;
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_VAR 0 2
27349: PPUSH
27350: LD_VAR 0 3
27354: PPUSH
27355: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27359: LD_INT 35
27361: PPUSH
27362: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27366: LD_VAR 0 1
27370: PPUSH
27371: LD_VAR 0 2
27375: PPUSH
27376: LD_VAR 0 3
27380: PPUSH
27381: CALL 63881 0 3
27385: NOT
27386: PUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 314
27396: AND
27397: IFFALSE 27401
// exit ;
27399: GO 27540
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: LD_VAR 0 3
27410: PPUSH
27411: CALL_OW 428
27415: PUSH
27416: LD_VAR 0 1
27420: EQUAL
27421: PUSH
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 314
27431: NOT
27432: AND
27433: IFFALSE 27359
// PlaySoundXY ( x , y , PlantMine ) ;
27435: LD_VAR 0 2
27439: PPUSH
27440: LD_VAR 0 3
27444: PPUSH
27445: LD_STRING PlantMine
27447: PPUSH
27448: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27452: LD_VAR 0 2
27456: PPUSH
27457: LD_VAR 0 3
27461: PPUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 255
27471: PPUSH
27472: LD_INT 0
27474: PPUSH
27475: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27479: LD_ADDR_EXP 104
27483: PUSH
27484: LD_EXP 104
27488: PPUSH
27489: LD_VAR 0 5
27493: PUSH
27494: LD_EXP 104
27498: PUSH
27499: LD_VAR 0 5
27503: ARRAY
27504: PUSH
27505: LD_INT 1
27507: PLUS
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PPUSH
27513: LD_VAR 0 2
27517: PUSH
27518: LD_VAR 0 3
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PPUSH
27527: CALL 33699 0 3
27531: ST_TO_ADDR
// result := true ;
27532: LD_ADDR_VAR 0 4
27536: PUSH
27537: LD_INT 1
27539: ST_TO_ADDR
// end ;
27540: LD_VAR 0 4
27544: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27545: LD_INT 0
27547: PPUSH
27548: PPUSH
27549: PPUSH
// if not unit in minersList then
27550: LD_VAR 0 1
27554: PUSH
27555: LD_EXP 103
27559: IN
27560: NOT
27561: IFFALSE 27565
// exit ;
27563: GO 27957
// index := GetElementIndex ( minersList , unit ) ;
27565: LD_ADDR_VAR 0 6
27569: PUSH
27570: LD_EXP 103
27574: PPUSH
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL 33484 0 2
27584: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27585: LD_ADDR_VAR 0 5
27589: PUSH
27590: DOUBLE
27591: LD_EXP 104
27595: PUSH
27596: LD_VAR 0 6
27600: ARRAY
27601: INC
27602: ST_TO_ADDR
27603: LD_INT 1
27605: PUSH
27606: FOR_DOWNTO
27607: IFFALSE 27768
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27609: LD_EXP 104
27613: PUSH
27614: LD_VAR 0 6
27618: ARRAY
27619: PUSH
27620: LD_VAR 0 5
27624: ARRAY
27625: PUSH
27626: LD_INT 1
27628: ARRAY
27629: PUSH
27630: LD_VAR 0 2
27634: EQUAL
27635: PUSH
27636: LD_EXP 104
27640: PUSH
27641: LD_VAR 0 6
27645: ARRAY
27646: PUSH
27647: LD_VAR 0 5
27651: ARRAY
27652: PUSH
27653: LD_INT 2
27655: ARRAY
27656: PUSH
27657: LD_VAR 0 3
27661: EQUAL
27662: AND
27663: IFFALSE 27766
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27665: LD_EXP 104
27669: PUSH
27670: LD_VAR 0 6
27674: ARRAY
27675: PUSH
27676: LD_VAR 0 5
27680: ARRAY
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_EXP 104
27690: PUSH
27691: LD_VAR 0 6
27695: ARRAY
27696: PUSH
27697: LD_VAR 0 5
27701: ARRAY
27702: PUSH
27703: LD_INT 2
27705: ARRAY
27706: PPUSH
27707: LD_VAR 0 1
27711: PPUSH
27712: CALL_OW 255
27716: PPUSH
27717: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27721: LD_ADDR_EXP 104
27725: PUSH
27726: LD_EXP 104
27730: PPUSH
27731: LD_VAR 0 6
27735: PPUSH
27736: LD_EXP 104
27740: PUSH
27741: LD_VAR 0 6
27745: ARRAY
27746: PPUSH
27747: LD_VAR 0 5
27751: PPUSH
27752: CALL_OW 3
27756: PPUSH
27757: CALL_OW 1
27761: ST_TO_ADDR
// exit ;
27762: POP
27763: POP
27764: GO 27957
// end ; end ;
27766: GO 27606
27768: POP
27769: POP
// for i := minerMinesList [ index ] downto 1 do
27770: LD_ADDR_VAR 0 5
27774: PUSH
27775: DOUBLE
27776: LD_EXP 104
27780: PUSH
27781: LD_VAR 0 6
27785: ARRAY
27786: INC
27787: ST_TO_ADDR
27788: LD_INT 1
27790: PUSH
27791: FOR_DOWNTO
27792: IFFALSE 27955
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27794: LD_EXP 104
27798: PUSH
27799: LD_VAR 0 6
27803: ARRAY
27804: PUSH
27805: LD_VAR 0 5
27809: ARRAY
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: PPUSH
27815: LD_EXP 104
27819: PUSH
27820: LD_VAR 0 6
27824: ARRAY
27825: PUSH
27826: LD_VAR 0 5
27830: ARRAY
27831: PUSH
27832: LD_INT 2
27834: ARRAY
27835: PPUSH
27836: LD_VAR 0 2
27840: PPUSH
27841: LD_VAR 0 3
27845: PPUSH
27846: CALL_OW 298
27850: PUSH
27851: LD_INT 6
27853: LESS
27854: IFFALSE 27953
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27856: LD_EXP 104
27860: PUSH
27861: LD_VAR 0 6
27865: ARRAY
27866: PUSH
27867: LD_VAR 0 5
27871: ARRAY
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: LD_EXP 104
27881: PUSH
27882: LD_VAR 0 6
27886: ARRAY
27887: PUSH
27888: LD_VAR 0 5
27892: ARRAY
27893: PUSH
27894: LD_INT 2
27896: ARRAY
27897: PPUSH
27898: LD_VAR 0 1
27902: PPUSH
27903: CALL_OW 255
27907: PPUSH
27908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27912: LD_ADDR_EXP 104
27916: PUSH
27917: LD_EXP 104
27921: PPUSH
27922: LD_VAR 0 6
27926: PPUSH
27927: LD_EXP 104
27931: PUSH
27932: LD_VAR 0 6
27936: ARRAY
27937: PPUSH
27938: LD_VAR 0 5
27942: PPUSH
27943: CALL_OW 3
27947: PPUSH
27948: CALL_OW 1
27952: ST_TO_ADDR
// end ; end ;
27953: GO 27791
27955: POP
27956: POP
// end ;
27957: LD_VAR 0 4
27961: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27962: LD_INT 0
27964: PPUSH
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27973: LD_VAR 0 1
27977: PPUSH
27978: CALL_OW 264
27982: PUSH
27983: LD_EXP 28
27987: EQUAL
27988: NOT
27989: PUSH
27990: LD_VAR 0 1
27994: PUSH
27995: LD_EXP 103
27999: IN
28000: NOT
28001: OR
28002: IFFALSE 28006
// exit ;
28004: GO 28328
// index := GetElementIndex ( minersList , unit ) ;
28006: LD_ADDR_VAR 0 6
28010: PUSH
28011: LD_EXP 103
28015: PPUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL 33484 0 2
28025: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28026: LD_ADDR_VAR 0 8
28030: PUSH
28031: LD_EXP 105
28035: PUSH
28036: LD_EXP 104
28040: PUSH
28041: LD_VAR 0 6
28045: ARRAY
28046: MINUS
28047: ST_TO_ADDR
// if not minesFreeAmount then
28048: LD_VAR 0 8
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28328
// tmp := [ ] ;
28057: LD_ADDR_VAR 0 7
28061: PUSH
28062: EMPTY
28063: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28064: LD_ADDR_VAR 0 5
28068: PUSH
28069: DOUBLE
28070: LD_INT 1
28072: DEC
28073: ST_TO_ADDR
28074: LD_VAR 0 8
28078: PUSH
28079: FOR_TO
28080: IFFALSE 28275
// begin _d := rand ( 0 , 5 ) ;
28082: LD_ADDR_VAR 0 11
28086: PUSH
28087: LD_INT 0
28089: PPUSH
28090: LD_INT 5
28092: PPUSH
28093: CALL_OW 12
28097: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28098: LD_ADDR_VAR 0 12
28102: PUSH
28103: LD_INT 2
28105: PPUSH
28106: LD_INT 6
28108: PPUSH
28109: CALL_OW 12
28113: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28114: LD_ADDR_VAR 0 9
28118: PUSH
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_VAR 0 11
28128: PPUSH
28129: LD_VAR 0 12
28133: PPUSH
28134: CALL_OW 272
28138: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28139: LD_ADDR_VAR 0 10
28143: PUSH
28144: LD_VAR 0 3
28148: PPUSH
28149: LD_VAR 0 11
28153: PPUSH
28154: LD_VAR 0 12
28158: PPUSH
28159: CALL_OW 273
28163: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28164: LD_VAR 0 9
28168: PPUSH
28169: LD_VAR 0 10
28173: PPUSH
28174: CALL_OW 488
28178: PUSH
28179: LD_VAR 0 9
28183: PUSH
28184: LD_VAR 0 10
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_VAR 0 7
28197: IN
28198: NOT
28199: AND
28200: PUSH
28201: LD_VAR 0 9
28205: PPUSH
28206: LD_VAR 0 10
28210: PPUSH
28211: CALL_OW 458
28215: NOT
28216: AND
28217: IFFALSE 28259
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28219: LD_ADDR_VAR 0 7
28223: PUSH
28224: LD_VAR 0 7
28228: PPUSH
28229: LD_VAR 0 7
28233: PUSH
28234: LD_INT 1
28236: PLUS
28237: PPUSH
28238: LD_VAR 0 9
28242: PUSH
28243: LD_VAR 0 10
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PPUSH
28252: CALL_OW 1
28256: ST_TO_ADDR
28257: GO 28273
// i := i - 1 ;
28259: LD_ADDR_VAR 0 5
28263: PUSH
28264: LD_VAR 0 5
28268: PUSH
28269: LD_INT 1
28271: MINUS
28272: ST_TO_ADDR
// end ;
28273: GO 28079
28275: POP
28276: POP
// for i in tmp do
28277: LD_ADDR_VAR 0 5
28281: PUSH
28282: LD_VAR 0 7
28286: PUSH
28287: FOR_IN
28288: IFFALSE 28326
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28290: LD_VAR 0 1
28294: PPUSH
28295: LD_VAR 0 5
28299: PUSH
28300: LD_INT 1
28302: ARRAY
28303: PPUSH
28304: LD_VAR 0 5
28308: PUSH
28309: LD_INT 2
28311: ARRAY
28312: PPUSH
28313: CALL 27268 0 3
28317: NOT
28318: IFFALSE 28324
// exit ;
28320: POP
28321: POP
28322: GO 28328
28324: GO 28287
28326: POP
28327: POP
// end ;
28328: LD_VAR 0 4
28332: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
// if not GetClass ( unit ) = class_sniper then
28342: LD_VAR 0 1
28346: PPUSH
28347: CALL_OW 257
28351: PUSH
28352: LD_INT 5
28354: EQUAL
28355: NOT
28356: IFFALSE 28360
// exit ;
28358: GO 28748
// dist := 8 ;
28360: LD_ADDR_VAR 0 5
28364: PUSH
28365: LD_INT 8
28367: ST_TO_ADDR
// viewRange := 12 ;
28368: LD_ADDR_VAR 0 7
28372: PUSH
28373: LD_INT 12
28375: ST_TO_ADDR
// side := GetSide ( unit ) ;
28376: LD_ADDR_VAR 0 6
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: CALL_OW 255
28390: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28391: LD_INT 61
28393: PPUSH
28394: LD_VAR 0 6
28398: PPUSH
28399: CALL_OW 321
28403: PUSH
28404: LD_INT 2
28406: EQUAL
28407: IFFALSE 28417
// viewRange := 16 ;
28409: LD_ADDR_VAR 0 7
28413: PUSH
28414: LD_INT 16
28416: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28417: LD_VAR 0 1
28421: PPUSH
28422: LD_VAR 0 2
28426: PPUSH
28427: LD_VAR 0 3
28431: PPUSH
28432: CALL_OW 297
28436: PUSH
28437: LD_VAR 0 5
28441: GREATER
28442: IFFALSE 28521
// begin ComMoveXY ( unit , x , y ) ;
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_VAR 0 2
28453: PPUSH
28454: LD_VAR 0 3
28458: PPUSH
28459: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28463: LD_INT 35
28465: PPUSH
28466: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 2
28479: PPUSH
28480: LD_VAR 0 3
28484: PPUSH
28485: CALL 63881 0 3
28489: NOT
28490: IFFALSE 28494
// exit ;
28492: GO 28748
// until GetDistUnitXY ( unit , x , y ) < dist ;
28494: LD_VAR 0 1
28498: PPUSH
28499: LD_VAR 0 2
28503: PPUSH
28504: LD_VAR 0 3
28508: PPUSH
28509: CALL_OW 297
28513: PUSH
28514: LD_VAR 0 5
28518: LESS
28519: IFFALSE 28463
// end ; ComTurnXY ( unit , x , y ) ;
28521: LD_VAR 0 1
28525: PPUSH
28526: LD_VAR 0 2
28530: PPUSH
28531: LD_VAR 0 3
28535: PPUSH
28536: CALL_OW 118
// wait ( 5 ) ;
28540: LD_INT 5
28542: PPUSH
28543: CALL_OW 67
// _d := GetDir ( unit ) ;
28547: LD_ADDR_VAR 0 10
28551: PUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 254
28561: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28562: LD_ADDR_VAR 0 8
28566: PUSH
28567: LD_VAR 0 1
28571: PPUSH
28572: CALL_OW 250
28576: PPUSH
28577: LD_VAR 0 10
28581: PPUSH
28582: LD_VAR 0 5
28586: PPUSH
28587: CALL_OW 272
28591: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28592: LD_ADDR_VAR 0 9
28596: PUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 251
28606: PPUSH
28607: LD_VAR 0 10
28611: PPUSH
28612: LD_VAR 0 5
28616: PPUSH
28617: CALL_OW 273
28621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28622: LD_VAR 0 8
28626: PPUSH
28627: LD_VAR 0 9
28631: PPUSH
28632: CALL_OW 488
28636: NOT
28637: IFFALSE 28641
// exit ;
28639: GO 28748
// ComAnimCustom ( unit , 1 ) ;
28641: LD_VAR 0 1
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28653: LD_VAR 0 8
28657: PPUSH
28658: LD_VAR 0 9
28662: PPUSH
28663: LD_VAR 0 6
28667: PPUSH
28668: LD_VAR 0 7
28672: PPUSH
28673: CALL_OW 330
// repeat wait ( 1 ) ;
28677: LD_INT 1
28679: PPUSH
28680: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 316
28693: PUSH
28694: LD_VAR 0 1
28698: PPUSH
28699: CALL_OW 314
28703: OR
28704: PUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL_OW 302
28714: NOT
28715: OR
28716: PUSH
28717: LD_VAR 0 1
28721: PPUSH
28722: CALL_OW 301
28726: OR
28727: IFFALSE 28677
// RemoveSeeing ( _x , _y , side ) ;
28729: LD_VAR 0 8
28733: PPUSH
28734: LD_VAR 0 9
28738: PPUSH
28739: LD_VAR 0 6
28743: PPUSH
28744: CALL_OW 331
// end ; end_of_file
28748: LD_VAR 0 4
28752: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28753: LD_INT 0
28755: PPUSH
28756: PPUSH
// if exist_mode then
28757: LD_VAR 0 2
28761: IFFALSE 28786
// unit := CreateCharacter ( prefix & ident ) else
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_VAR 0 3
28772: PUSH
28773: LD_VAR 0 1
28777: STR
28778: PPUSH
28779: CALL_OW 34
28783: ST_TO_ADDR
28784: GO 28801
// unit := NewCharacter ( ident ) ;
28786: LD_ADDR_VAR 0 5
28790: PUSH
28791: LD_VAR 0 1
28795: PPUSH
28796: CALL_OW 25
28800: ST_TO_ADDR
// result := unit ;
28801: LD_ADDR_VAR 0 4
28805: PUSH
28806: LD_VAR 0 5
28810: ST_TO_ADDR
// end ;
28811: LD_VAR 0 4
28815: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
// if not side or not nation then
28820: LD_VAR 0 1
28824: NOT
28825: PUSH
28826: LD_VAR 0 2
28830: NOT
28831: OR
28832: IFFALSE 28836
// exit ;
28834: GO 29600
// case nation of nation_american :
28836: LD_VAR 0 2
28840: PUSH
28841: LD_INT 1
28843: DOUBLE
28844: EQUAL
28845: IFTRUE 28849
28847: GO 29063
28849: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28850: LD_ADDR_VAR 0 4
28854: PUSH
28855: LD_INT 35
28857: PUSH
28858: LD_INT 45
28860: PUSH
28861: LD_INT 46
28863: PUSH
28864: LD_INT 47
28866: PUSH
28867: LD_INT 82
28869: PUSH
28870: LD_INT 83
28872: PUSH
28873: LD_INT 84
28875: PUSH
28876: LD_INT 85
28878: PUSH
28879: LD_INT 86
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 6
28890: PUSH
28891: LD_INT 15
28893: PUSH
28894: LD_INT 16
28896: PUSH
28897: LD_INT 7
28899: PUSH
28900: LD_INT 12
28902: PUSH
28903: LD_INT 13
28905: PUSH
28906: LD_INT 10
28908: PUSH
28909: LD_INT 14
28911: PUSH
28912: LD_INT 20
28914: PUSH
28915: LD_INT 21
28917: PUSH
28918: LD_INT 22
28920: PUSH
28921: LD_INT 25
28923: PUSH
28924: LD_INT 32
28926: PUSH
28927: LD_INT 27
28929: PUSH
28930: LD_INT 36
28932: PUSH
28933: LD_INT 69
28935: PUSH
28936: LD_INT 39
28938: PUSH
28939: LD_INT 34
28941: PUSH
28942: LD_INT 40
28944: PUSH
28945: LD_INT 48
28947: PUSH
28948: LD_INT 49
28950: PUSH
28951: LD_INT 50
28953: PUSH
28954: LD_INT 51
28956: PUSH
28957: LD_INT 52
28959: PUSH
28960: LD_INT 53
28962: PUSH
28963: LD_INT 54
28965: PUSH
28966: LD_INT 55
28968: PUSH
28969: LD_INT 56
28971: PUSH
28972: LD_INT 57
28974: PUSH
28975: LD_INT 58
28977: PUSH
28978: LD_INT 59
28980: PUSH
28981: LD_INT 60
28983: PUSH
28984: LD_INT 61
28986: PUSH
28987: LD_INT 62
28989: PUSH
28990: LD_INT 80
28992: PUSH
28993: LD_INT 82
28995: PUSH
28996: LD_INT 83
28998: PUSH
28999: LD_INT 84
29001: PUSH
29002: LD_INT 85
29004: PUSH
29005: LD_INT 86
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: ST_TO_ADDR
29061: GO 29524
29063: LD_INT 2
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29293
29071: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29072: LD_ADDR_VAR 0 4
29076: PUSH
29077: LD_INT 35
29079: PUSH
29080: LD_INT 45
29082: PUSH
29083: LD_INT 46
29085: PUSH
29086: LD_INT 47
29088: PUSH
29089: LD_INT 82
29091: PUSH
29092: LD_INT 83
29094: PUSH
29095: LD_INT 84
29097: PUSH
29098: LD_INT 85
29100: PUSH
29101: LD_INT 87
29103: PUSH
29104: LD_INT 70
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 11
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 4
29118: PUSH
29119: LD_INT 5
29121: PUSH
29122: LD_INT 6
29124: PUSH
29125: LD_INT 15
29127: PUSH
29128: LD_INT 18
29130: PUSH
29131: LD_INT 7
29133: PUSH
29134: LD_INT 17
29136: PUSH
29137: LD_INT 8
29139: PUSH
29140: LD_INT 20
29142: PUSH
29143: LD_INT 21
29145: PUSH
29146: LD_INT 22
29148: PUSH
29149: LD_INT 72
29151: PUSH
29152: LD_INT 26
29154: PUSH
29155: LD_INT 69
29157: PUSH
29158: LD_INT 39
29160: PUSH
29161: LD_INT 40
29163: PUSH
29164: LD_INT 41
29166: PUSH
29167: LD_INT 42
29169: PUSH
29170: LD_INT 43
29172: PUSH
29173: LD_INT 48
29175: PUSH
29176: LD_INT 49
29178: PUSH
29179: LD_INT 50
29181: PUSH
29182: LD_INT 51
29184: PUSH
29185: LD_INT 52
29187: PUSH
29188: LD_INT 53
29190: PUSH
29191: LD_INT 54
29193: PUSH
29194: LD_INT 55
29196: PUSH
29197: LD_INT 56
29199: PUSH
29200: LD_INT 60
29202: PUSH
29203: LD_INT 61
29205: PUSH
29206: LD_INT 62
29208: PUSH
29209: LD_INT 66
29211: PUSH
29212: LD_INT 67
29214: PUSH
29215: LD_INT 68
29217: PUSH
29218: LD_INT 81
29220: PUSH
29221: LD_INT 82
29223: PUSH
29224: LD_INT 83
29226: PUSH
29227: LD_INT 84
29229: PUSH
29230: LD_INT 85
29232: PUSH
29233: LD_INT 87
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: ST_TO_ADDR
29291: GO 29524
29293: LD_INT 3
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29523
29301: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29302: LD_ADDR_VAR 0 4
29306: PUSH
29307: LD_INT 46
29309: PUSH
29310: LD_INT 47
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 82
29321: PUSH
29322: LD_INT 83
29324: PUSH
29325: LD_INT 84
29327: PUSH
29328: LD_INT 85
29330: PUSH
29331: LD_INT 86
29333: PUSH
29334: LD_INT 11
29336: PUSH
29337: LD_INT 9
29339: PUSH
29340: LD_INT 20
29342: PUSH
29343: LD_INT 19
29345: PUSH
29346: LD_INT 21
29348: PUSH
29349: LD_INT 24
29351: PUSH
29352: LD_INT 22
29354: PUSH
29355: LD_INT 25
29357: PUSH
29358: LD_INT 28
29360: PUSH
29361: LD_INT 29
29363: PUSH
29364: LD_INT 30
29366: PUSH
29367: LD_INT 31
29369: PUSH
29370: LD_INT 37
29372: PUSH
29373: LD_INT 38
29375: PUSH
29376: LD_INT 32
29378: PUSH
29379: LD_INT 27
29381: PUSH
29382: LD_INT 33
29384: PUSH
29385: LD_INT 69
29387: PUSH
29388: LD_INT 39
29390: PUSH
29391: LD_INT 34
29393: PUSH
29394: LD_INT 40
29396: PUSH
29397: LD_INT 71
29399: PUSH
29400: LD_INT 23
29402: PUSH
29403: LD_INT 44
29405: PUSH
29406: LD_INT 48
29408: PUSH
29409: LD_INT 49
29411: PUSH
29412: LD_INT 50
29414: PUSH
29415: LD_INT 51
29417: PUSH
29418: LD_INT 52
29420: PUSH
29421: LD_INT 53
29423: PUSH
29424: LD_INT 54
29426: PUSH
29427: LD_INT 55
29429: PUSH
29430: LD_INT 56
29432: PUSH
29433: LD_INT 57
29435: PUSH
29436: LD_INT 58
29438: PUSH
29439: LD_INT 59
29441: PUSH
29442: LD_INT 63
29444: PUSH
29445: LD_INT 64
29447: PUSH
29448: LD_INT 65
29450: PUSH
29451: LD_INT 82
29453: PUSH
29454: LD_INT 83
29456: PUSH
29457: LD_INT 84
29459: PUSH
29460: LD_INT 85
29462: PUSH
29463: LD_INT 86
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
29521: GO 29524
29523: POP
// if state > - 1 and state < 3 then
29524: LD_VAR 0 3
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: GREATER
29533: PUSH
29534: LD_VAR 0 3
29538: PUSH
29539: LD_INT 3
29541: LESS
29542: AND
29543: IFFALSE 29600
// for i in result do
29545: LD_ADDR_VAR 0 5
29549: PUSH
29550: LD_VAR 0 4
29554: PUSH
29555: FOR_IN
29556: IFFALSE 29598
// if GetTech ( i , side ) <> state then
29558: LD_VAR 0 5
29562: PPUSH
29563: LD_VAR 0 1
29567: PPUSH
29568: CALL_OW 321
29572: PUSH
29573: LD_VAR 0 3
29577: NONEQUAL
29578: IFFALSE 29596
// result := result diff i ;
29580: LD_ADDR_VAR 0 4
29584: PUSH
29585: LD_VAR 0 4
29589: PUSH
29590: LD_VAR 0 5
29594: DIFF
29595: ST_TO_ADDR
29596: GO 29555
29598: POP
29599: POP
// end ;
29600: LD_VAR 0 4
29604: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29605: LD_INT 0
29607: PPUSH
29608: PPUSH
29609: PPUSH
// result := true ;
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_INT 1
29617: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29618: LD_ADDR_VAR 0 5
29622: PUSH
29623: LD_VAR 0 2
29627: PPUSH
29628: CALL_OW 480
29632: ST_TO_ADDR
// if not tmp then
29633: LD_VAR 0 5
29637: NOT
29638: IFFALSE 29642
// exit ;
29640: GO 29691
// for i in tmp do
29642: LD_ADDR_VAR 0 4
29646: PUSH
29647: LD_VAR 0 5
29651: PUSH
29652: FOR_IN
29653: IFFALSE 29689
// if GetTech ( i , side ) <> state_researched then
29655: LD_VAR 0 4
29659: PPUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 321
29669: PUSH
29670: LD_INT 2
29672: NONEQUAL
29673: IFFALSE 29687
// begin result := false ;
29675: LD_ADDR_VAR 0 3
29679: PUSH
29680: LD_INT 0
29682: ST_TO_ADDR
// exit ;
29683: POP
29684: POP
29685: GO 29691
// end ;
29687: GO 29652
29689: POP
29690: POP
// end ;
29691: LD_VAR 0 3
29695: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29696: LD_INT 0
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
29707: PPUSH
29708: PPUSH
29709: PPUSH
29710: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29711: LD_VAR 0 1
29715: NOT
29716: PUSH
29717: LD_VAR 0 1
29721: PPUSH
29722: CALL_OW 257
29726: PUSH
29727: LD_INT 9
29729: NONEQUAL
29730: OR
29731: IFFALSE 29735
// exit ;
29733: GO 30308
// side := GetSide ( unit ) ;
29735: LD_ADDR_VAR 0 9
29739: PUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 255
29749: ST_TO_ADDR
// tech_space := tech_spacanom ;
29750: LD_ADDR_VAR 0 12
29754: PUSH
29755: LD_INT 29
29757: ST_TO_ADDR
// tech_time := tech_taurad ;
29758: LD_ADDR_VAR 0 13
29762: PUSH
29763: LD_INT 28
29765: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29766: LD_ADDR_VAR 0 11
29770: PUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 310
29780: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29781: LD_VAR 0 11
29785: PPUSH
29786: CALL_OW 247
29790: PUSH
29791: LD_INT 2
29793: EQUAL
29794: IFFALSE 29798
// exit ;
29796: GO 30308
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29798: LD_ADDR_VAR 0 8
29802: PUSH
29803: LD_INT 81
29805: PUSH
29806: LD_VAR 0 9
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 3
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PPUSH
29836: CALL_OW 69
29840: ST_TO_ADDR
// if not tmp then
29841: LD_VAR 0 8
29845: NOT
29846: IFFALSE 29850
// exit ;
29848: GO 30308
// if in_unit then
29850: LD_VAR 0 11
29854: IFFALSE 29878
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29856: LD_ADDR_VAR 0 10
29860: PUSH
29861: LD_VAR 0 8
29865: PPUSH
29866: LD_VAR 0 11
29870: PPUSH
29871: CALL_OW 74
29875: ST_TO_ADDR
29876: GO 29898
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29878: LD_ADDR_VAR 0 10
29882: PUSH
29883: LD_VAR 0 8
29887: PPUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 74
29897: ST_TO_ADDR
// if not enemy then
29898: LD_VAR 0 10
29902: NOT
29903: IFFALSE 29907
// exit ;
29905: GO 30308
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29907: LD_VAR 0 11
29911: PUSH
29912: LD_VAR 0 11
29916: PPUSH
29917: LD_VAR 0 10
29921: PPUSH
29922: CALL_OW 296
29926: PUSH
29927: LD_INT 13
29929: GREATER
29930: AND
29931: PUSH
29932: LD_VAR 0 1
29936: PPUSH
29937: LD_VAR 0 10
29941: PPUSH
29942: CALL_OW 296
29946: PUSH
29947: LD_INT 12
29949: GREATER
29950: OR
29951: IFFALSE 29955
// exit ;
29953: GO 30308
// missile := [ 1 ] ;
29955: LD_ADDR_VAR 0 14
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29966: LD_VAR 0 9
29970: PPUSH
29971: LD_VAR 0 12
29975: PPUSH
29976: CALL_OW 325
29980: IFFALSE 30009
// missile := Insert ( missile , missile + 1 , 2 ) ;
29982: LD_ADDR_VAR 0 14
29986: PUSH
29987: LD_VAR 0 14
29991: PPUSH
29992: LD_VAR 0 14
29996: PUSH
29997: LD_INT 1
29999: PLUS
30000: PPUSH
30001: LD_INT 2
30003: PPUSH
30004: CALL_OW 2
30008: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30009: LD_VAR 0 9
30013: PPUSH
30014: LD_VAR 0 13
30018: PPUSH
30019: CALL_OW 325
30023: PUSH
30024: LD_VAR 0 10
30028: PPUSH
30029: CALL_OW 255
30033: PPUSH
30034: LD_VAR 0 13
30038: PPUSH
30039: CALL_OW 325
30043: NOT
30044: AND
30045: IFFALSE 30074
// missile := Insert ( missile , missile + 1 , 3 ) ;
30047: LD_ADDR_VAR 0 14
30051: PUSH
30052: LD_VAR 0 14
30056: PPUSH
30057: LD_VAR 0 14
30061: PUSH
30062: LD_INT 1
30064: PLUS
30065: PPUSH
30066: LD_INT 3
30068: PPUSH
30069: CALL_OW 2
30073: ST_TO_ADDR
// if missile < 2 then
30074: LD_VAR 0 14
30078: PUSH
30079: LD_INT 2
30081: LESS
30082: IFFALSE 30086
// exit ;
30084: GO 30308
// x := GetX ( enemy ) ;
30086: LD_ADDR_VAR 0 4
30090: PUSH
30091: LD_VAR 0 10
30095: PPUSH
30096: CALL_OW 250
30100: ST_TO_ADDR
// y := GetY ( enemy ) ;
30101: LD_ADDR_VAR 0 5
30105: PUSH
30106: LD_VAR 0 10
30110: PPUSH
30111: CALL_OW 251
30115: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30116: LD_ADDR_VAR 0 6
30120: PUSH
30121: LD_VAR 0 4
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PPUSH
30130: LD_INT 1
30132: PPUSH
30133: CALL_OW 12
30137: PLUS
30138: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30139: LD_ADDR_VAR 0 7
30143: PUSH
30144: LD_VAR 0 5
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PPUSH
30153: LD_INT 1
30155: PPUSH
30156: CALL_OW 12
30160: PLUS
30161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30162: LD_VAR 0 6
30166: PPUSH
30167: LD_VAR 0 7
30171: PPUSH
30172: CALL_OW 488
30176: NOT
30177: IFFALSE 30199
// begin _x := x ;
30179: LD_ADDR_VAR 0 6
30183: PUSH
30184: LD_VAR 0 4
30188: ST_TO_ADDR
// _y := y ;
30189: LD_ADDR_VAR 0 7
30193: PUSH
30194: LD_VAR 0 5
30198: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30199: LD_ADDR_VAR 0 3
30203: PUSH
30204: LD_INT 1
30206: PPUSH
30207: LD_VAR 0 14
30211: PPUSH
30212: CALL_OW 12
30216: ST_TO_ADDR
// case i of 1 :
30217: LD_VAR 0 3
30221: PUSH
30222: LD_INT 1
30224: DOUBLE
30225: EQUAL
30226: IFTRUE 30230
30228: GO 30247
30230: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_VAR 0 10
30240: PPUSH
30241: CALL_OW 115
30245: GO 30308
30247: LD_INT 2
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30277
30255: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30256: LD_VAR 0 1
30260: PPUSH
30261: LD_VAR 0 6
30265: PPUSH
30266: LD_VAR 0 7
30270: PPUSH
30271: CALL_OW 153
30275: GO 30308
30277: LD_INT 3
30279: DOUBLE
30280: EQUAL
30281: IFTRUE 30285
30283: GO 30307
30285: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_VAR 0 6
30295: PPUSH
30296: LD_VAR 0 7
30300: PPUSH
30301: CALL_OW 154
30305: GO 30308
30307: POP
// end ;
30308: LD_VAR 0 2
30312: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30313: LD_INT 0
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
// if not unit or not building then
30321: LD_VAR 0 1
30325: NOT
30326: PUSH
30327: LD_VAR 0 2
30331: NOT
30332: OR
30333: IFFALSE 30337
// exit ;
30335: GO 30495
// x := GetX ( building ) ;
30337: LD_ADDR_VAR 0 5
30341: PUSH
30342: LD_VAR 0 2
30346: PPUSH
30347: CALL_OW 250
30351: ST_TO_ADDR
// y := GetY ( building ) ;
30352: LD_ADDR_VAR 0 6
30356: PUSH
30357: LD_VAR 0 2
30361: PPUSH
30362: CALL_OW 251
30366: ST_TO_ADDR
// for i = 0 to 5 do
30367: LD_ADDR_VAR 0 4
30371: PUSH
30372: DOUBLE
30373: LD_INT 0
30375: DEC
30376: ST_TO_ADDR
30377: LD_INT 5
30379: PUSH
30380: FOR_TO
30381: IFFALSE 30493
// begin _x := ShiftX ( x , i , 3 ) ;
30383: LD_ADDR_VAR 0 7
30387: PUSH
30388: LD_VAR 0 5
30392: PPUSH
30393: LD_VAR 0 4
30397: PPUSH
30398: LD_INT 3
30400: PPUSH
30401: CALL_OW 272
30405: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30406: LD_ADDR_VAR 0 8
30410: PUSH
30411: LD_VAR 0 6
30415: PPUSH
30416: LD_VAR 0 4
30420: PPUSH
30421: LD_INT 3
30423: PPUSH
30424: CALL_OW 273
30428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30429: LD_VAR 0 7
30433: PPUSH
30434: LD_VAR 0 8
30438: PPUSH
30439: CALL_OW 488
30443: NOT
30444: IFFALSE 30448
// continue ;
30446: GO 30380
// if HexInfo ( _x , _y ) = 0 then
30448: LD_VAR 0 7
30452: PPUSH
30453: LD_VAR 0 8
30457: PPUSH
30458: CALL_OW 428
30462: PUSH
30463: LD_INT 0
30465: EQUAL
30466: IFFALSE 30491
// begin ComMoveXY ( unit , _x , _y ) ;
30468: LD_VAR 0 1
30472: PPUSH
30473: LD_VAR 0 7
30477: PPUSH
30478: LD_VAR 0 8
30482: PPUSH
30483: CALL_OW 111
// exit ;
30487: POP
30488: POP
30489: GO 30495
// end ; end ;
30491: GO 30380
30493: POP
30494: POP
// end ;
30495: LD_VAR 0 3
30499: RET
// export function ScanBase ( side , base_area ) ; begin
30500: LD_INT 0
30502: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30503: LD_ADDR_VAR 0 3
30507: PUSH
30508: LD_VAR 0 2
30512: PPUSH
30513: LD_INT 81
30515: PUSH
30516: LD_VAR 0 1
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 70
30529: ST_TO_ADDR
// end ;
30530: LD_VAR 0 3
30534: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
// result := false ;
30541: LD_ADDR_VAR 0 2
30545: PUSH
30546: LD_INT 0
30548: ST_TO_ADDR
// side := GetSide ( unit ) ;
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_VAR 0 1
30558: PPUSH
30559: CALL_OW 255
30563: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30564: LD_ADDR_VAR 0 4
30568: PUSH
30569: LD_VAR 0 1
30573: PPUSH
30574: CALL_OW 248
30578: ST_TO_ADDR
// case nat of 1 :
30579: LD_VAR 0 4
30583: PUSH
30584: LD_INT 1
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30592
30590: GO 30603
30592: POP
// tech := tech_lassight ; 2 :
30593: LD_ADDR_VAR 0 5
30597: PUSH
30598: LD_INT 12
30600: ST_TO_ADDR
30601: GO 30642
30603: LD_INT 2
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30622
30611: POP
// tech := tech_mortar ; 3 :
30612: LD_ADDR_VAR 0 5
30616: PUSH
30617: LD_INT 41
30619: ST_TO_ADDR
30620: GO 30642
30622: LD_INT 3
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30641
30630: POP
// tech := tech_bazooka ; end ;
30631: LD_ADDR_VAR 0 5
30635: PUSH
30636: LD_INT 44
30638: ST_TO_ADDR
30639: GO 30642
30641: POP
// if Researched ( side , tech ) then
30642: LD_VAR 0 3
30646: PPUSH
30647: LD_VAR 0 5
30651: PPUSH
30652: CALL_OW 325
30656: IFFALSE 30683
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30658: LD_ADDR_VAR 0 2
30662: PUSH
30663: LD_INT 5
30665: PUSH
30666: LD_INT 8
30668: PUSH
30669: LD_INT 9
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: PUSH
30677: LD_VAR 0 4
30681: ARRAY
30682: ST_TO_ADDR
// end ;
30683: LD_VAR 0 2
30687: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30688: LD_INT 0
30690: PPUSH
30691: PPUSH
30692: PPUSH
// if not mines then
30693: LD_VAR 0 2
30697: NOT
30698: IFFALSE 30702
// exit ;
30700: GO 30846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30702: LD_ADDR_VAR 0 5
30706: PUSH
30707: LD_INT 81
30709: PUSH
30710: LD_VAR 0 1
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: LD_INT 21
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PPUSH
30740: CALL_OW 69
30744: ST_TO_ADDR
// for i in mines do
30745: LD_ADDR_VAR 0 4
30749: PUSH
30750: LD_VAR 0 2
30754: PUSH
30755: FOR_IN
30756: IFFALSE 30844
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30758: LD_VAR 0 4
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: PPUSH
30767: LD_VAR 0 4
30771: PUSH
30772: LD_INT 2
30774: ARRAY
30775: PPUSH
30776: CALL_OW 458
30780: NOT
30781: IFFALSE 30785
// continue ;
30783: GO 30755
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30785: LD_VAR 0 4
30789: PUSH
30790: LD_INT 1
30792: ARRAY
30793: PPUSH
30794: LD_VAR 0 4
30798: PUSH
30799: LD_INT 2
30801: ARRAY
30802: PPUSH
30803: CALL_OW 428
30807: PUSH
30808: LD_VAR 0 5
30812: IN
30813: IFFALSE 30842
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30815: LD_VAR 0 4
30819: PUSH
30820: LD_INT 1
30822: ARRAY
30823: PPUSH
30824: LD_VAR 0 4
30828: PUSH
30829: LD_INT 2
30831: ARRAY
30832: PPUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 456
// end ;
30842: GO 30755
30844: POP
30845: POP
// end ;
30846: LD_VAR 0 3
30850: RET
// export function Count ( array ) ; var i ; begin
30851: LD_INT 0
30853: PPUSH
30854: PPUSH
// result := 0 ;
30855: LD_ADDR_VAR 0 2
30859: PUSH
30860: LD_INT 0
30862: ST_TO_ADDR
// for i in array do
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_VAR 0 1
30872: PUSH
30873: FOR_IN
30874: IFFALSE 30898
// if i then
30876: LD_VAR 0 3
30880: IFFALSE 30896
// result := result + 1 ;
30882: LD_ADDR_VAR 0 2
30886: PUSH
30887: LD_VAR 0 2
30891: PUSH
30892: LD_INT 1
30894: PLUS
30895: ST_TO_ADDR
30896: GO 30873
30898: POP
30899: POP
// end ;
30900: LD_VAR 0 2
30904: RET
// export function IsEmpty ( building ) ; begin
30905: LD_INT 0
30907: PPUSH
// if not building then
30908: LD_VAR 0 1
30912: NOT
30913: IFFALSE 30917
// exit ;
30915: GO 30960
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30917: LD_ADDR_VAR 0 2
30921: PUSH
30922: LD_VAR 0 1
30926: PUSH
30927: LD_INT 22
30929: PUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 255
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 58
30946: PUSH
30947: EMPTY
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: IN
30959: ST_TO_ADDR
// end ;
30960: LD_VAR 0 2
30964: RET
// export function IsNotFull ( building ) ; begin
30965: LD_INT 0
30967: PPUSH
// if not building then
30968: LD_VAR 0 1
30972: NOT
30973: IFFALSE 30977
// exit ;
30975: GO 30996
// result := UnitsInside ( building ) < 6 ;
30977: LD_ADDR_VAR 0 2
30981: PUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 313
30991: PUSH
30992: LD_INT 6
30994: LESS
30995: ST_TO_ADDR
// end ;
30996: LD_VAR 0 2
31000: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
// tmp := [ ] ;
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: EMPTY
31013: ST_TO_ADDR
// list := [ ] ;
31014: LD_ADDR_VAR 0 5
31018: PUSH
31019: EMPTY
31020: ST_TO_ADDR
// for i = 16 to 25 do
31021: LD_ADDR_VAR 0 4
31025: PUSH
31026: DOUBLE
31027: LD_INT 16
31029: DEC
31030: ST_TO_ADDR
31031: LD_INT 25
31033: PUSH
31034: FOR_TO
31035: IFFALSE 31108
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_VAR 0 3
31046: PUSH
31047: LD_INT 22
31049: PUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 255
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 91
31066: PUSH
31067: LD_VAR 0 1
31071: PUSH
31072: LD_INT 6
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 30
31082: PUSH
31083: LD_VAR 0 4
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: PUSH
31097: EMPTY
31098: LIST
31099: PPUSH
31100: CALL_OW 69
31104: ADD
31105: ST_TO_ADDR
31106: GO 31034
31108: POP
31109: POP
// for i = 1 to tmp do
31110: LD_ADDR_VAR 0 4
31114: PUSH
31115: DOUBLE
31116: LD_INT 1
31118: DEC
31119: ST_TO_ADDR
31120: LD_VAR 0 3
31124: PUSH
31125: FOR_TO
31126: IFFALSE 31214
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31128: LD_ADDR_VAR 0 5
31132: PUSH
31133: LD_VAR 0 5
31137: PUSH
31138: LD_VAR 0 3
31142: PUSH
31143: LD_VAR 0 4
31147: ARRAY
31148: PPUSH
31149: CALL_OW 266
31153: PUSH
31154: LD_VAR 0 3
31158: PUSH
31159: LD_VAR 0 4
31163: ARRAY
31164: PPUSH
31165: CALL_OW 250
31169: PUSH
31170: LD_VAR 0 3
31174: PUSH
31175: LD_VAR 0 4
31179: ARRAY
31180: PPUSH
31181: CALL_OW 251
31185: PUSH
31186: LD_VAR 0 3
31190: PUSH
31191: LD_VAR 0 4
31195: ARRAY
31196: PPUSH
31197: CALL_OW 254
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: ADD
31211: ST_TO_ADDR
31212: GO 31125
31214: POP
31215: POP
// result := list ;
31216: LD_ADDR_VAR 0 2
31220: PUSH
31221: LD_VAR 0 5
31225: ST_TO_ADDR
// end ;
31226: LD_VAR 0 2
31230: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31231: LD_INT 0
31233: PPUSH
31234: PPUSH
31235: PPUSH
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
// if not factory then
31240: LD_VAR 0 1
31244: NOT
31245: IFFALSE 31249
// exit ;
31247: GO 31842
// if control = control_apeman then
31249: LD_VAR 0 4
31253: PUSH
31254: LD_INT 5
31256: EQUAL
31257: IFFALSE 31366
// begin tmp := UnitsInside ( factory ) ;
31259: LD_ADDR_VAR 0 8
31263: PUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: CALL_OW 313
31273: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31274: LD_VAR 0 8
31278: PPUSH
31279: LD_INT 25
31281: PUSH
31282: LD_INT 12
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PPUSH
31289: CALL_OW 72
31293: NOT
31294: IFFALSE 31304
// control := control_manual ;
31296: LD_ADDR_VAR 0 4
31300: PUSH
31301: LD_INT 1
31303: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31304: LD_ADDR_VAR 0 8
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL 31001 0 1
31318: ST_TO_ADDR
// if tmp then
31319: LD_VAR 0 8
31323: IFFALSE 31366
// begin for i in tmp do
31325: LD_ADDR_VAR 0 7
31329: PUSH
31330: LD_VAR 0 8
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31364
// if i [ 1 ] = b_ext_radio then
31338: LD_VAR 0 7
31342: PUSH
31343: LD_INT 1
31345: ARRAY
31346: PUSH
31347: LD_INT 22
31349: EQUAL
31350: IFFALSE 31362
// begin control := control_remote ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_INT 2
31359: ST_TO_ADDR
// break ;
31360: GO 31364
// end ;
31362: GO 31335
31364: POP
31365: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31366: LD_VAR 0 1
31370: PPUSH
31371: LD_VAR 0 2
31375: PPUSH
31376: LD_VAR 0 3
31380: PPUSH
31381: LD_VAR 0 4
31385: PPUSH
31386: LD_VAR 0 5
31390: PPUSH
31391: CALL_OW 448
31395: IFFALSE 31430
// begin result := [ chassis , engine , control , weapon ] ;
31397: LD_ADDR_VAR 0 6
31401: PUSH
31402: LD_VAR 0 2
31406: PUSH
31407: LD_VAR 0 3
31411: PUSH
31412: LD_VAR 0 4
31416: PUSH
31417: LD_VAR 0 5
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// exit ;
31428: GO 31842
// end ; _chassis := AvailableChassisList ( factory ) ;
31430: LD_ADDR_VAR 0 9
31434: PUSH
31435: LD_VAR 0 1
31439: PPUSH
31440: CALL_OW 475
31444: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31445: LD_ADDR_VAR 0 11
31449: PUSH
31450: LD_VAR 0 1
31454: PPUSH
31455: CALL_OW 476
31459: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31460: LD_ADDR_VAR 0 12
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 477
31474: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31475: LD_ADDR_VAR 0 10
31479: PUSH
31480: LD_VAR 0 1
31484: PPUSH
31485: CALL_OW 478
31489: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31490: LD_VAR 0 9
31494: NOT
31495: PUSH
31496: LD_VAR 0 11
31500: NOT
31501: OR
31502: PUSH
31503: LD_VAR 0 12
31507: NOT
31508: OR
31509: PUSH
31510: LD_VAR 0 10
31514: NOT
31515: OR
31516: IFFALSE 31551
// begin result := [ chassis , engine , control , weapon ] ;
31518: LD_ADDR_VAR 0 6
31522: PUSH
31523: LD_VAR 0 2
31527: PUSH
31528: LD_VAR 0 3
31532: PUSH
31533: LD_VAR 0 4
31537: PUSH
31538: LD_VAR 0 5
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
// exit ;
31549: GO 31842
// end ; if not chassis in _chassis then
31551: LD_VAR 0 2
31555: PUSH
31556: LD_VAR 0 9
31560: IN
31561: NOT
31562: IFFALSE 31588
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31564: LD_ADDR_VAR 0 2
31568: PUSH
31569: LD_VAR 0 9
31573: PUSH
31574: LD_INT 1
31576: PPUSH
31577: LD_VAR 0 9
31581: PPUSH
31582: CALL_OW 12
31586: ARRAY
31587: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31588: LD_VAR 0 2
31592: PPUSH
31593: LD_VAR 0 3
31597: PPUSH
31598: CALL 31847 0 2
31602: NOT
31603: IFFALSE 31662
// repeat engine := _engine [ 1 ] ;
31605: LD_ADDR_VAR 0 3
31609: PUSH
31610: LD_VAR 0 11
31614: PUSH
31615: LD_INT 1
31617: ARRAY
31618: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31619: LD_ADDR_VAR 0 11
31623: PUSH
31624: LD_VAR 0 11
31628: PPUSH
31629: LD_INT 1
31631: PPUSH
31632: CALL_OW 3
31636: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31637: LD_VAR 0 2
31641: PPUSH
31642: LD_VAR 0 3
31646: PPUSH
31647: CALL 31847 0 2
31651: PUSH
31652: LD_VAR 0 11
31656: PUSH
31657: EMPTY
31658: EQUAL
31659: OR
31660: IFFALSE 31605
// if not control in _control then
31662: LD_VAR 0 4
31666: PUSH
31667: LD_VAR 0 12
31671: IN
31672: NOT
31673: IFFALSE 31699
// control := _control [ rand ( 1 , _control ) ] ;
31675: LD_ADDR_VAR 0 4
31679: PUSH
31680: LD_VAR 0 12
31684: PUSH
31685: LD_INT 1
31687: PPUSH
31688: LD_VAR 0 12
31692: PPUSH
31693: CALL_OW 12
31697: ARRAY
31698: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31699: LD_VAR 0 2
31703: PPUSH
31704: LD_VAR 0 5
31708: PPUSH
31709: CALL 32067 0 2
31713: NOT
31714: IFFALSE 31773
// repeat weapon := _weapon [ 1 ] ;
31716: LD_ADDR_VAR 0 5
31720: PUSH
31721: LD_VAR 0 10
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31730: LD_ADDR_VAR 0 10
31734: PUSH
31735: LD_VAR 0 10
31739: PPUSH
31740: LD_INT 1
31742: PPUSH
31743: CALL_OW 3
31747: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31748: LD_VAR 0 2
31752: PPUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: CALL 32067 0 2
31762: PUSH
31763: LD_VAR 0 10
31767: PUSH
31768: EMPTY
31769: EQUAL
31770: OR
31771: IFFALSE 31716
// result := [ ] ;
31773: LD_ADDR_VAR 0 6
31777: PUSH
31778: EMPTY
31779: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31780: LD_VAR 0 1
31784: PPUSH
31785: LD_VAR 0 2
31789: PPUSH
31790: LD_VAR 0 3
31794: PPUSH
31795: LD_VAR 0 4
31799: PPUSH
31800: LD_VAR 0 5
31804: PPUSH
31805: CALL_OW 448
31809: IFFALSE 31842
// result := [ chassis , engine , control , weapon ] ;
31811: LD_ADDR_VAR 0 6
31815: PUSH
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 3
31825: PUSH
31826: LD_VAR 0 4
31830: PUSH
31831: LD_VAR 0 5
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// end ;
31842: LD_VAR 0 6
31846: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31847: LD_INT 0
31849: PPUSH
// if not chassis or not engine then
31850: LD_VAR 0 1
31854: NOT
31855: PUSH
31856: LD_VAR 0 2
31860: NOT
31861: OR
31862: IFFALSE 31866
// exit ;
31864: GO 32062
// case engine of engine_solar :
31866: LD_VAR 0 2
31870: PUSH
31871: LD_INT 2
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31917
31879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31880: LD_ADDR_VAR 0 3
31884: PUSH
31885: LD_INT 11
31887: PUSH
31888: LD_INT 12
31890: PUSH
31891: LD_INT 13
31893: PUSH
31894: LD_INT 14
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: LD_INT 3
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: ST_TO_ADDR
31915: GO 32046
31917: LD_INT 1
31919: DOUBLE
31920: EQUAL
31921: IFTRUE 31925
31923: GO 31987
31925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31926: LD_ADDR_VAR 0 3
31930: PUSH
31931: LD_INT 11
31933: PUSH
31934: LD_INT 12
31936: PUSH
31937: LD_INT 13
31939: PUSH
31940: LD_INT 14
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: LD_INT 5
31957: PUSH
31958: LD_INT 21
31960: PUSH
31961: LD_INT 23
31963: PUSH
31964: LD_INT 22
31966: PUSH
31967: LD_INT 24
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
31985: GO 32046
31987: LD_INT 3
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32045
31995: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: LD_INT 13
32003: PUSH
32004: LD_INT 14
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: LD_INT 5
32018: PUSH
32019: LD_INT 21
32021: PUSH
32022: LD_INT 22
32024: PUSH
32025: LD_INT 23
32027: PUSH
32028: LD_INT 24
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
32043: GO 32046
32045: POP
// result := ( chassis in result ) ;
32046: LD_ADDR_VAR 0 3
32050: PUSH
32051: LD_VAR 0 1
32055: PUSH
32056: LD_VAR 0 3
32060: IN
32061: ST_TO_ADDR
// end ;
32062: LD_VAR 0 3
32066: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32067: LD_INT 0
32069: PPUSH
// if not chassis or not weapon then
32070: LD_VAR 0 1
32074: NOT
32075: PUSH
32076: LD_VAR 0 2
32080: NOT
32081: OR
32082: IFFALSE 32086
// exit ;
32084: GO 33112
// case weapon of us_machine_gun :
32086: LD_VAR 0 2
32090: PUSH
32091: LD_INT 2
32093: DOUBLE
32094: EQUAL
32095: IFTRUE 32099
32097: GO 32129
32099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32100: LD_ADDR_VAR 0 3
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: LD_INT 3
32113: PUSH
32114: LD_INT 4
32116: PUSH
32117: LD_INT 5
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: ST_TO_ADDR
32127: GO 33096
32129: LD_INT 3
32131: DOUBLE
32132: EQUAL
32133: IFTRUE 32137
32135: GO 32167
32137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32138: LD_ADDR_VAR 0 3
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 4
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 33096
32167: LD_INT 11
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32205
32175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 4
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: ST_TO_ADDR
32203: GO 33096
32205: LD_INT 4
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32239
32213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32214: LD_ADDR_VAR 0 3
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: LD_INT 4
32227: PUSH
32228: LD_INT 5
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: ST_TO_ADDR
32237: GO 33096
32239: LD_INT 5
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32273
32247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: ST_TO_ADDR
32271: GO 33096
32273: LD_INT 9
32275: DOUBLE
32276: EQUAL
32277: IFTRUE 32281
32279: GO 32307
32281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32282: LD_ADDR_VAR 0 3
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 4
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: ST_TO_ADDR
32305: GO 33096
32307: LD_INT 7
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32315
32313: GO 32341
32315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32316: LD_ADDR_VAR 0 3
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: LD_INT 4
32329: PUSH
32330: LD_INT 5
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
32339: GO 33096
32341: LD_INT 12
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32375
32349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32350: LD_ADDR_VAR 0 3
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: ST_TO_ADDR
32373: GO 33096
32375: LD_INT 13
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32383
32381: GO 32409
32383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 2
32391: PUSH
32392: LD_INT 3
32394: PUSH
32395: LD_INT 4
32397: PUSH
32398: LD_INT 5
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: ST_TO_ADDR
32407: GO 33096
32409: LD_INT 14
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32417
32415: GO 32435
32417: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32418: LD_ADDR_VAR 0 3
32422: PUSH
32423: LD_INT 4
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: ST_TO_ADDR
32433: GO 33096
32435: LD_INT 6
32437: DOUBLE
32438: EQUAL
32439: IFTRUE 32443
32441: GO 32461
32443: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32444: LD_ADDR_VAR 0 3
32448: PUSH
32449: LD_INT 4
32451: PUSH
32452: LD_INT 5
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: ST_TO_ADDR
32459: GO 33096
32461: LD_INT 10
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32469
32467: GO 32487
32469: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: LD_INT 4
32477: PUSH
32478: LD_INT 5
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 33096
32487: LD_INT 22
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32521
32495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 11
32503: PUSH
32504: LD_INT 12
32506: PUSH
32507: LD_INT 13
32509: PUSH
32510: LD_INT 14
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
32519: GO 33096
32521: LD_INT 23
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32555
32529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: LD_INT 11
32537: PUSH
32538: LD_INT 12
32540: PUSH
32541: LD_INT 13
32543: PUSH
32544: LD_INT 14
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 33096
32555: LD_INT 24
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32589
32563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 11
32571: PUSH
32572: LD_INT 12
32574: PUSH
32575: LD_INT 13
32577: PUSH
32578: LD_INT 14
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
32587: GO 33096
32589: LD_INT 30
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32623
32597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_INT 11
32605: PUSH
32606: LD_INT 12
32608: PUSH
32609: LD_INT 13
32611: PUSH
32612: LD_INT 14
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: ST_TO_ADDR
32621: GO 33096
32623: LD_INT 25
32625: DOUBLE
32626: EQUAL
32627: IFTRUE 32631
32629: GO 32649
32631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: LD_INT 13
32639: PUSH
32640: LD_INT 14
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: ST_TO_ADDR
32647: GO 33096
32649: LD_INT 27
32651: DOUBLE
32652: EQUAL
32653: IFTRUE 32657
32655: GO 32675
32657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32658: LD_ADDR_VAR 0 3
32662: PUSH
32663: LD_INT 13
32665: PUSH
32666: LD_INT 14
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: ST_TO_ADDR
32673: GO 33096
32675: LD_INT 28
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32701
32683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 13
32691: PUSH
32692: LD_INT 14
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: ST_TO_ADDR
32699: GO 33096
32701: LD_INT 29
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32727
32709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32710: LD_ADDR_VAR 0 3
32714: PUSH
32715: LD_INT 13
32717: PUSH
32718: LD_INT 14
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: ST_TO_ADDR
32725: GO 33096
32727: LD_INT 31
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32735
32733: GO 32753
32735: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32736: LD_ADDR_VAR 0 3
32740: PUSH
32741: LD_INT 13
32743: PUSH
32744: LD_INT 14
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: ST_TO_ADDR
32751: GO 33096
32753: LD_INT 26
32755: DOUBLE
32756: EQUAL
32757: IFTRUE 32761
32759: GO 32779
32761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32762: LD_ADDR_VAR 0 3
32766: PUSH
32767: LD_INT 13
32769: PUSH
32770: LD_INT 14
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: ST_TO_ADDR
32777: GO 33096
32779: LD_INT 42
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32813
32787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 22
32798: PUSH
32799: LD_INT 23
32801: PUSH
32802: LD_INT 24
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
32811: GO 33096
32813: LD_INT 43
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32847
32821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32822: LD_ADDR_VAR 0 3
32826: PUSH
32827: LD_INT 21
32829: PUSH
32830: LD_INT 22
32832: PUSH
32833: LD_INT 23
32835: PUSH
32836: LD_INT 24
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
32845: GO 33096
32847: LD_INT 44
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32881
32855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_INT 21
32863: PUSH
32864: LD_INT 22
32866: PUSH
32867: LD_INT 23
32869: PUSH
32870: LD_INT 24
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
32879: GO 33096
32881: LD_INT 45
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32915
32889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: LD_INT 21
32897: PUSH
32898: LD_INT 22
32900: PUSH
32901: LD_INT 23
32903: PUSH
32904: LD_INT 24
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
32913: GO 33096
32915: LD_INT 49
32917: DOUBLE
32918: EQUAL
32919: IFTRUE 32923
32921: GO 32949
32923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_INT 21
32931: PUSH
32932: LD_INT 22
32934: PUSH
32935: LD_INT 23
32937: PUSH
32938: LD_INT 24
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: ST_TO_ADDR
32947: GO 33096
32949: LD_INT 51
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32983
32957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32958: LD_ADDR_VAR 0 3
32962: PUSH
32963: LD_INT 21
32965: PUSH
32966: LD_INT 22
32968: PUSH
32969: LD_INT 23
32971: PUSH
32972: LD_INT 24
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: ST_TO_ADDR
32981: GO 33096
32983: LD_INT 52
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 32991
32989: GO 33017
32991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32992: LD_ADDR_VAR 0 3
32996: PUSH
32997: LD_INT 21
32999: PUSH
33000: LD_INT 22
33002: PUSH
33003: LD_INT 23
33005: PUSH
33006: LD_INT 24
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: ST_TO_ADDR
33015: GO 33096
33017: LD_INT 53
33019: DOUBLE
33020: EQUAL
33021: IFTRUE 33025
33023: GO 33043
33025: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_INT 23
33033: PUSH
33034: LD_INT 24
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: ST_TO_ADDR
33041: GO 33096
33043: LD_INT 46
33045: DOUBLE
33046: EQUAL
33047: IFTRUE 33051
33049: GO 33069
33051: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: LD_INT 23
33059: PUSH
33060: LD_INT 24
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: ST_TO_ADDR
33067: GO 33096
33069: LD_INT 47
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33095
33077: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33078: LD_ADDR_VAR 0 3
33082: PUSH
33083: LD_INT 23
33085: PUSH
33086: LD_INT 24
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: ST_TO_ADDR
33093: GO 33096
33095: POP
// result := ( chassis in result ) ;
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_VAR 0 1
33105: PUSH
33106: LD_VAR 0 3
33110: IN
33111: ST_TO_ADDR
// end ;
33112: LD_VAR 0 3
33116: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33117: LD_INT 0
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
// result := array ;
33126: LD_ADDR_VAR 0 5
33130: PUSH
33131: LD_VAR 0 1
33135: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33136: LD_VAR 0 1
33140: NOT
33141: PUSH
33142: LD_VAR 0 2
33146: NOT
33147: OR
33148: PUSH
33149: LD_VAR 0 3
33153: NOT
33154: OR
33155: PUSH
33156: LD_VAR 0 2
33160: PUSH
33161: LD_VAR 0 1
33165: GREATER
33166: OR
33167: PUSH
33168: LD_VAR 0 3
33172: PUSH
33173: LD_VAR 0 1
33177: GREATER
33178: OR
33179: IFFALSE 33183
// exit ;
33181: GO 33479
// if direction then
33183: LD_VAR 0 4
33187: IFFALSE 33251
// begin d := 1 ;
33189: LD_ADDR_VAR 0 9
33193: PUSH
33194: LD_INT 1
33196: ST_TO_ADDR
// if i_from > i_to then
33197: LD_VAR 0 2
33201: PUSH
33202: LD_VAR 0 3
33206: GREATER
33207: IFFALSE 33233
// length := ( array - i_from ) + i_to else
33209: LD_ADDR_VAR 0 11
33213: PUSH
33214: LD_VAR 0 1
33218: PUSH
33219: LD_VAR 0 2
33223: MINUS
33224: PUSH
33225: LD_VAR 0 3
33229: PLUS
33230: ST_TO_ADDR
33231: GO 33249
// length := i_to - i_from ;
33233: LD_ADDR_VAR 0 11
33237: PUSH
33238: LD_VAR 0 3
33242: PUSH
33243: LD_VAR 0 2
33247: MINUS
33248: ST_TO_ADDR
// end else
33249: GO 33312
// begin d := - 1 ;
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: ST_TO_ADDR
// if i_from > i_to then
33260: LD_VAR 0 2
33264: PUSH
33265: LD_VAR 0 3
33269: GREATER
33270: IFFALSE 33290
// length := i_from - i_to else
33272: LD_ADDR_VAR 0 11
33276: PUSH
33277: LD_VAR 0 2
33281: PUSH
33282: LD_VAR 0 3
33286: MINUS
33287: ST_TO_ADDR
33288: GO 33312
// length := ( array - i_to ) + i_from ;
33290: LD_ADDR_VAR 0 11
33294: PUSH
33295: LD_VAR 0 1
33299: PUSH
33300: LD_VAR 0 3
33304: MINUS
33305: PUSH
33306: LD_VAR 0 2
33310: PLUS
33311: ST_TO_ADDR
// end ; if not length then
33312: LD_VAR 0 11
33316: NOT
33317: IFFALSE 33321
// exit ;
33319: GO 33479
// tmp := array ;
33321: LD_ADDR_VAR 0 10
33325: PUSH
33326: LD_VAR 0 1
33330: ST_TO_ADDR
// for i = 1 to length do
33331: LD_ADDR_VAR 0 6
33335: PUSH
33336: DOUBLE
33337: LD_INT 1
33339: DEC
33340: ST_TO_ADDR
33341: LD_VAR 0 11
33345: PUSH
33346: FOR_TO
33347: IFFALSE 33467
// begin for j = 1 to array do
33349: LD_ADDR_VAR 0 7
33353: PUSH
33354: DOUBLE
33355: LD_INT 1
33357: DEC
33358: ST_TO_ADDR
33359: LD_VAR 0 1
33363: PUSH
33364: FOR_TO
33365: IFFALSE 33453
// begin k := j + d ;
33367: LD_ADDR_VAR 0 8
33371: PUSH
33372: LD_VAR 0 7
33376: PUSH
33377: LD_VAR 0 9
33381: PLUS
33382: ST_TO_ADDR
// if k > array then
33383: LD_VAR 0 8
33387: PUSH
33388: LD_VAR 0 1
33392: GREATER
33393: IFFALSE 33403
// k := 1 ;
33395: LD_ADDR_VAR 0 8
33399: PUSH
33400: LD_INT 1
33402: ST_TO_ADDR
// if not k then
33403: LD_VAR 0 8
33407: NOT
33408: IFFALSE 33420
// k := array ;
33410: LD_ADDR_VAR 0 8
33414: PUSH
33415: LD_VAR 0 1
33419: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33420: LD_ADDR_VAR 0 10
33424: PUSH
33425: LD_VAR 0 10
33429: PPUSH
33430: LD_VAR 0 8
33434: PPUSH
33435: LD_VAR 0 1
33439: PUSH
33440: LD_VAR 0 7
33444: ARRAY
33445: PPUSH
33446: CALL_OW 1
33450: ST_TO_ADDR
// end ;
33451: GO 33364
33453: POP
33454: POP
// array := tmp ;
33455: LD_ADDR_VAR 0 1
33459: PUSH
33460: LD_VAR 0 10
33464: ST_TO_ADDR
// end ;
33465: GO 33346
33467: POP
33468: POP
// result := array ;
33469: LD_ADDR_VAR 0 5
33473: PUSH
33474: LD_VAR 0 1
33478: ST_TO_ADDR
// end ;
33479: LD_VAR 0 5
33483: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33484: LD_INT 0
33486: PPUSH
33487: PPUSH
// result := 0 ;
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 0
33495: ST_TO_ADDR
// if not array or not value in array then
33496: LD_VAR 0 1
33500: NOT
33501: PUSH
33502: LD_VAR 0 2
33506: PUSH
33507: LD_VAR 0 1
33511: IN
33512: NOT
33513: OR
33514: IFFALSE 33518
// exit ;
33516: GO 33572
// for i = 1 to array do
33518: LD_ADDR_VAR 0 4
33522: PUSH
33523: DOUBLE
33524: LD_INT 1
33526: DEC
33527: ST_TO_ADDR
33528: LD_VAR 0 1
33532: PUSH
33533: FOR_TO
33534: IFFALSE 33570
// if value = array [ i ] then
33536: LD_VAR 0 2
33540: PUSH
33541: LD_VAR 0 1
33545: PUSH
33546: LD_VAR 0 4
33550: ARRAY
33551: EQUAL
33552: IFFALSE 33568
// begin result := i ;
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_VAR 0 4
33563: ST_TO_ADDR
// exit ;
33564: POP
33565: POP
33566: GO 33572
// end ;
33568: GO 33533
33570: POP
33571: POP
// end ;
33572: LD_VAR 0 3
33576: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33577: LD_INT 0
33579: PPUSH
// vc_chassis := chassis ;
33580: LD_ADDR_OWVAR 37
33584: PUSH
33585: LD_VAR 0 1
33589: ST_TO_ADDR
// vc_engine := engine ;
33590: LD_ADDR_OWVAR 39
33594: PUSH
33595: LD_VAR 0 2
33599: ST_TO_ADDR
// vc_control := control ;
33600: LD_ADDR_OWVAR 38
33604: PUSH
33605: LD_VAR 0 3
33609: ST_TO_ADDR
// vc_weapon := weapon ;
33610: LD_ADDR_OWVAR 40
33614: PUSH
33615: LD_VAR 0 4
33619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33620: LD_ADDR_OWVAR 41
33624: PUSH
33625: LD_VAR 0 5
33629: ST_TO_ADDR
// end ;
33630: LD_VAR 0 6
33634: RET
// export function WantPlant ( unit ) ; var task ; begin
33635: LD_INT 0
33637: PPUSH
33638: PPUSH
// result := false ;
33639: LD_ADDR_VAR 0 2
33643: PUSH
33644: LD_INT 0
33646: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_VAR 0 1
33656: PPUSH
33657: CALL_OW 437
33661: ST_TO_ADDR
// if task then
33662: LD_VAR 0 3
33666: IFFALSE 33694
// if task [ 1 ] [ 1 ] = p then
33668: LD_VAR 0 3
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PUSH
33677: LD_INT 1
33679: ARRAY
33680: PUSH
33681: LD_STRING p
33683: EQUAL
33684: IFFALSE 33694
// result := true ;
33686: LD_ADDR_VAR 0 2
33690: PUSH
33691: LD_INT 1
33693: ST_TO_ADDR
// end ;
33694: LD_VAR 0 2
33698: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
// if pos < 1 then
33705: LD_VAR 0 2
33709: PUSH
33710: LD_INT 1
33712: LESS
33713: IFFALSE 33717
// exit ;
33715: GO 34020
// if pos = 1 then
33717: LD_VAR 0 2
33721: PUSH
33722: LD_INT 1
33724: EQUAL
33725: IFFALSE 33758
// result := Replace ( arr , pos [ 1 ] , value ) else
33727: LD_ADDR_VAR 0 4
33731: PUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: LD_VAR 0 2
33741: PUSH
33742: LD_INT 1
33744: ARRAY
33745: PPUSH
33746: LD_VAR 0 3
33750: PPUSH
33751: CALL_OW 1
33755: ST_TO_ADDR
33756: GO 34020
// begin tmp := arr ;
33758: LD_ADDR_VAR 0 6
33762: PUSH
33763: LD_VAR 0 1
33767: ST_TO_ADDR
// s_arr := [ tmp ] ;
33768: LD_ADDR_VAR 0 7
33772: PUSH
33773: LD_VAR 0 6
33777: PUSH
33778: EMPTY
33779: LIST
33780: ST_TO_ADDR
// for i = 1 to pos - 1 do
33781: LD_ADDR_VAR 0 5
33785: PUSH
33786: DOUBLE
33787: LD_INT 1
33789: DEC
33790: ST_TO_ADDR
33791: LD_VAR 0 2
33795: PUSH
33796: LD_INT 1
33798: MINUS
33799: PUSH
33800: FOR_TO
33801: IFFALSE 33846
// begin tmp := tmp [ pos [ i ] ] ;
33803: LD_ADDR_VAR 0 6
33807: PUSH
33808: LD_VAR 0 6
33812: PUSH
33813: LD_VAR 0 2
33817: PUSH
33818: LD_VAR 0 5
33822: ARRAY
33823: ARRAY
33824: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33825: LD_ADDR_VAR 0 7
33829: PUSH
33830: LD_VAR 0 7
33834: PUSH
33835: LD_VAR 0 6
33839: PUSH
33840: EMPTY
33841: LIST
33842: ADD
33843: ST_TO_ADDR
// end ;
33844: GO 33800
33846: POP
33847: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33848: LD_ADDR_VAR 0 6
33852: PUSH
33853: LD_VAR 0 6
33857: PPUSH
33858: LD_VAR 0 2
33862: PUSH
33863: LD_VAR 0 2
33867: ARRAY
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: CALL_OW 1
33878: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33879: LD_ADDR_VAR 0 7
33883: PUSH
33884: LD_VAR 0 7
33888: PPUSH
33889: LD_VAR 0 7
33893: PPUSH
33894: LD_VAR 0 6
33898: PPUSH
33899: CALL_OW 1
33903: ST_TO_ADDR
// for i = s_arr downto 2 do
33904: LD_ADDR_VAR 0 5
33908: PUSH
33909: DOUBLE
33910: LD_VAR 0 7
33914: INC
33915: ST_TO_ADDR
33916: LD_INT 2
33918: PUSH
33919: FOR_DOWNTO
33920: IFFALSE 34004
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33922: LD_ADDR_VAR 0 6
33926: PUSH
33927: LD_VAR 0 7
33931: PUSH
33932: LD_VAR 0 5
33936: PUSH
33937: LD_INT 1
33939: MINUS
33940: ARRAY
33941: PPUSH
33942: LD_VAR 0 2
33946: PUSH
33947: LD_VAR 0 5
33951: PUSH
33952: LD_INT 1
33954: MINUS
33955: ARRAY
33956: PPUSH
33957: LD_VAR 0 7
33961: PUSH
33962: LD_VAR 0 5
33966: ARRAY
33967: PPUSH
33968: CALL_OW 1
33972: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33973: LD_ADDR_VAR 0 7
33977: PUSH
33978: LD_VAR 0 7
33982: PPUSH
33983: LD_VAR 0 5
33987: PUSH
33988: LD_INT 1
33990: MINUS
33991: PPUSH
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 1
34001: ST_TO_ADDR
// end ;
34002: GO 33919
34004: POP
34005: POP
// result := s_arr [ 1 ] ;
34006: LD_ADDR_VAR 0 4
34010: PUSH
34011: LD_VAR 0 7
34015: PUSH
34016: LD_INT 1
34018: ARRAY
34019: ST_TO_ADDR
// end ; end ;
34020: LD_VAR 0 4
34024: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34025: LD_INT 0
34027: PPUSH
34028: PPUSH
// if not list then
34029: LD_VAR 0 1
34033: NOT
34034: IFFALSE 34038
// exit ;
34036: GO 34129
// i := list [ pos1 ] ;
34038: LD_ADDR_VAR 0 5
34042: PUSH
34043: LD_VAR 0 1
34047: PUSH
34048: LD_VAR 0 2
34052: ARRAY
34053: ST_TO_ADDR
// if not i then
34054: LD_VAR 0 5
34058: NOT
34059: IFFALSE 34063
// exit ;
34061: GO 34129
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34063: LD_ADDR_VAR 0 1
34067: PUSH
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_VAR 0 2
34077: PPUSH
34078: LD_VAR 0 1
34082: PUSH
34083: LD_VAR 0 3
34087: ARRAY
34088: PPUSH
34089: CALL_OW 1
34093: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34094: LD_ADDR_VAR 0 1
34098: PUSH
34099: LD_VAR 0 1
34103: PPUSH
34104: LD_VAR 0 3
34108: PPUSH
34109: LD_VAR 0 5
34113: PPUSH
34114: CALL_OW 1
34118: ST_TO_ADDR
// result := list ;
34119: LD_ADDR_VAR 0 4
34123: PUSH
34124: LD_VAR 0 1
34128: ST_TO_ADDR
// end ;
34129: LD_VAR 0 4
34133: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34134: LD_INT 0
34136: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34137: LD_ADDR_VAR 0 5
34141: PUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL_OW 250
34151: PPUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: CALL_OW 251
34161: PPUSH
34162: LD_VAR 0 2
34166: PPUSH
34167: LD_VAR 0 3
34171: PPUSH
34172: LD_VAR 0 4
34176: PPUSH
34177: CALL 34187 0 5
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 5
34186: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
// if not list then
34193: LD_VAR 0 3
34197: NOT
34198: IFFALSE 34202
// exit ;
34200: GO 34590
// result := [ ] ;
34202: LD_ADDR_VAR 0 6
34206: PUSH
34207: EMPTY
34208: ST_TO_ADDR
// for i in list do
34209: LD_ADDR_VAR 0 7
34213: PUSH
34214: LD_VAR 0 3
34218: PUSH
34219: FOR_IN
34220: IFFALSE 34422
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34222: LD_ADDR_VAR 0 9
34226: PUSH
34227: LD_VAR 0 7
34231: PPUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: LD_VAR 0 2
34241: PPUSH
34242: CALL_OW 297
34246: ST_TO_ADDR
// if not result then
34247: LD_VAR 0 6
34251: NOT
34252: IFFALSE 34278
// result := [ [ i , tmp ] ] else
34254: LD_ADDR_VAR 0 6
34258: PUSH
34259: LD_VAR 0 7
34263: PUSH
34264: LD_VAR 0 9
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: ST_TO_ADDR
34276: GO 34420
// begin if result [ result ] [ 2 ] < tmp then
34278: LD_VAR 0 6
34282: PUSH
34283: LD_VAR 0 6
34287: ARRAY
34288: PUSH
34289: LD_INT 2
34291: ARRAY
34292: PUSH
34293: LD_VAR 0 9
34297: LESS
34298: IFFALSE 34340
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34300: LD_ADDR_VAR 0 6
34304: PUSH
34305: LD_VAR 0 6
34309: PPUSH
34310: LD_VAR 0 6
34314: PUSH
34315: LD_INT 1
34317: PLUS
34318: PPUSH
34319: LD_VAR 0 7
34323: PUSH
34324: LD_VAR 0 9
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PPUSH
34333: CALL_OW 2
34337: ST_TO_ADDR
34338: GO 34420
// for j = 1 to result do
34340: LD_ADDR_VAR 0 8
34344: PUSH
34345: DOUBLE
34346: LD_INT 1
34348: DEC
34349: ST_TO_ADDR
34350: LD_VAR 0 6
34354: PUSH
34355: FOR_TO
34356: IFFALSE 34418
// begin if tmp < result [ j ] [ 2 ] then
34358: LD_VAR 0 9
34362: PUSH
34363: LD_VAR 0 6
34367: PUSH
34368: LD_VAR 0 8
34372: ARRAY
34373: PUSH
34374: LD_INT 2
34376: ARRAY
34377: LESS
34378: IFFALSE 34416
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34380: LD_ADDR_VAR 0 6
34384: PUSH
34385: LD_VAR 0 6
34389: PPUSH
34390: LD_VAR 0 8
34394: PPUSH
34395: LD_VAR 0 7
34399: PUSH
34400: LD_VAR 0 9
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 2
34413: ST_TO_ADDR
// break ;
34414: GO 34418
// end ; end ;
34416: GO 34355
34418: POP
34419: POP
// end ; end ;
34420: GO 34219
34422: POP
34423: POP
// if result and not asc then
34424: LD_VAR 0 6
34428: PUSH
34429: LD_VAR 0 4
34433: NOT
34434: AND
34435: IFFALSE 34510
// begin tmp := result ;
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_VAR 0 6
34446: ST_TO_ADDR
// for i = tmp downto 1 do
34447: LD_ADDR_VAR 0 7
34451: PUSH
34452: DOUBLE
34453: LD_VAR 0 9
34457: INC
34458: ST_TO_ADDR
34459: LD_INT 1
34461: PUSH
34462: FOR_DOWNTO
34463: IFFALSE 34508
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34465: LD_ADDR_VAR 0 6
34469: PUSH
34470: LD_VAR 0 6
34474: PPUSH
34475: LD_VAR 0 9
34479: PUSH
34480: LD_VAR 0 7
34484: MINUS
34485: PUSH
34486: LD_INT 1
34488: PLUS
34489: PPUSH
34490: LD_VAR 0 9
34494: PUSH
34495: LD_VAR 0 7
34499: ARRAY
34500: PPUSH
34501: CALL_OW 1
34505: ST_TO_ADDR
34506: GO 34462
34508: POP
34509: POP
// end ; tmp := [ ] ;
34510: LD_ADDR_VAR 0 9
34514: PUSH
34515: EMPTY
34516: ST_TO_ADDR
// if mode then
34517: LD_VAR 0 5
34521: IFFALSE 34590
// begin for i = 1 to result do
34523: LD_ADDR_VAR 0 7
34527: PUSH
34528: DOUBLE
34529: LD_INT 1
34531: DEC
34532: ST_TO_ADDR
34533: LD_VAR 0 6
34537: PUSH
34538: FOR_TO
34539: IFFALSE 34578
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34541: LD_ADDR_VAR 0 9
34545: PUSH
34546: LD_VAR 0 9
34550: PPUSH
34551: LD_VAR 0 7
34555: PPUSH
34556: LD_VAR 0 6
34560: PUSH
34561: LD_VAR 0 7
34565: ARRAY
34566: PUSH
34567: LD_INT 1
34569: ARRAY
34570: PPUSH
34571: CALL_OW 1
34575: ST_TO_ADDR
34576: GO 34538
34578: POP
34579: POP
// result := tmp ;
34580: LD_ADDR_VAR 0 6
34584: PUSH
34585: LD_VAR 0 9
34589: ST_TO_ADDR
// end ; end ;
34590: LD_VAR 0 6
34594: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34595: LD_INT 0
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34603: LD_ADDR_VAR 0 5
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: EMPTY
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: ST_TO_ADDR
// if not x or not y then
34625: LD_VAR 0 2
34629: NOT
34630: PUSH
34631: LD_VAR 0 3
34635: NOT
34636: OR
34637: IFFALSE 34641
// exit ;
34639: GO 36287
// if not range then
34641: LD_VAR 0 4
34645: NOT
34646: IFFALSE 34656
// range := 10 ;
34648: LD_ADDR_VAR 0 4
34652: PUSH
34653: LD_INT 10
34655: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34656: LD_ADDR_VAR 0 8
34660: PUSH
34661: LD_INT 81
34663: PUSH
34664: LD_VAR 0 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 92
34675: PUSH
34676: LD_VAR 0 2
34680: PUSH
34681: LD_VAR 0 3
34685: PUSH
34686: LD_VAR 0 4
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: LD_INT 21
34702: PUSH
34703: LD_INT 3
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: PPUSH
34719: CALL_OW 69
34723: ST_TO_ADDR
// if not tmp then
34724: LD_VAR 0 8
34728: NOT
34729: IFFALSE 34733
// exit ;
34731: GO 36287
// for i in tmp do
34733: LD_ADDR_VAR 0 6
34737: PUSH
34738: LD_VAR 0 8
34742: PUSH
34743: FOR_IN
34744: IFFALSE 36262
// begin points := [ 0 , 0 , 0 ] ;
34746: LD_ADDR_VAR 0 9
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
// bpoints := 1 ;
34765: LD_ADDR_VAR 0 10
34769: PUSH
34770: LD_INT 1
34772: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34773: LD_VAR 0 6
34777: PPUSH
34778: CALL_OW 247
34782: PUSH
34783: LD_INT 1
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 35369
34791: POP
// begin if GetClass ( i ) = 1 then
34792: LD_VAR 0 6
34796: PPUSH
34797: CALL_OW 257
34801: PUSH
34802: LD_INT 1
34804: EQUAL
34805: IFFALSE 34826
// points := [ 10 , 5 , 3 ] ;
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_INT 10
34814: PUSH
34815: LD_INT 5
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34826: LD_VAR 0 6
34830: PPUSH
34831: CALL_OW 257
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: IN
34850: IFFALSE 34871
// points := [ 3 , 2 , 1 ] ;
34852: LD_ADDR_VAR 0 9
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34871: LD_VAR 0 6
34875: PPUSH
34876: CALL_OW 257
34880: PUSH
34881: LD_INT 5
34883: EQUAL
34884: IFFALSE 34905
// points := [ 130 , 5 , 2 ] ;
34886: LD_ADDR_VAR 0 9
34890: PUSH
34891: LD_INT 130
34893: PUSH
34894: LD_INT 5
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: LIST
34904: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34905: LD_VAR 0 6
34909: PPUSH
34910: CALL_OW 257
34914: PUSH
34915: LD_INT 8
34917: EQUAL
34918: IFFALSE 34939
// points := [ 35 , 35 , 30 ] ;
34920: LD_ADDR_VAR 0 9
34924: PUSH
34925: LD_INT 35
34927: PUSH
34928: LD_INT 35
34930: PUSH
34931: LD_INT 30
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34939: LD_VAR 0 6
34943: PPUSH
34944: CALL_OW 257
34948: PUSH
34949: LD_INT 9
34951: EQUAL
34952: IFFALSE 34973
// points := [ 20 , 55 , 40 ] ;
34954: LD_ADDR_VAR 0 9
34958: PUSH
34959: LD_INT 20
34961: PUSH
34962: LD_INT 55
34964: PUSH
34965: LD_INT 40
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34973: LD_VAR 0 6
34977: PPUSH
34978: CALL_OW 257
34982: PUSH
34983: LD_INT 12
34985: PUSH
34986: LD_INT 16
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: IN
34993: IFFALSE 35014
// points := [ 5 , 3 , 2 ] ;
34995: LD_ADDR_VAR 0 9
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35014: LD_VAR 0 6
35018: PPUSH
35019: CALL_OW 257
35023: PUSH
35024: LD_INT 17
35026: EQUAL
35027: IFFALSE 35048
// points := [ 100 , 50 , 75 ] ;
35029: LD_ADDR_VAR 0 9
35033: PUSH
35034: LD_INT 100
35036: PUSH
35037: LD_INT 50
35039: PUSH
35040: LD_INT 75
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35048: LD_VAR 0 6
35052: PPUSH
35053: CALL_OW 257
35057: PUSH
35058: LD_INT 15
35060: EQUAL
35061: IFFALSE 35082
// points := [ 10 , 5 , 3 ] ;
35063: LD_ADDR_VAR 0 9
35067: PUSH
35068: LD_INT 10
35070: PUSH
35071: LD_INT 5
35073: PUSH
35074: LD_INT 3
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35082: LD_VAR 0 6
35086: PPUSH
35087: CALL_OW 257
35091: PUSH
35092: LD_INT 14
35094: EQUAL
35095: IFFALSE 35116
// points := [ 10 , 0 , 0 ] ;
35097: LD_ADDR_VAR 0 9
35101: PUSH
35102: LD_INT 10
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35116: LD_VAR 0 6
35120: PPUSH
35121: CALL_OW 257
35125: PUSH
35126: LD_INT 11
35128: EQUAL
35129: IFFALSE 35150
// points := [ 30 , 10 , 5 ] ;
35131: LD_ADDR_VAR 0 9
35135: PUSH
35136: LD_INT 30
35138: PUSH
35139: LD_INT 10
35141: PUSH
35142: LD_INT 5
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35150: LD_VAR 0 1
35154: PPUSH
35155: LD_INT 5
35157: PPUSH
35158: CALL_OW 321
35162: PUSH
35163: LD_INT 2
35165: EQUAL
35166: IFFALSE 35183
// bpoints := bpoints * 1.8 ;
35168: LD_ADDR_VAR 0 10
35172: PUSH
35173: LD_VAR 0 10
35177: PUSH
35178: LD_REAL  1.80000000000000E+0000
35181: MUL
35182: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35183: LD_VAR 0 6
35187: PPUSH
35188: CALL_OW 257
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: LD_INT 2
35198: PUSH
35199: LD_INT 3
35201: PUSH
35202: LD_INT 4
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: IN
35211: PUSH
35212: LD_VAR 0 1
35216: PPUSH
35217: LD_INT 51
35219: PPUSH
35220: CALL_OW 321
35224: PUSH
35225: LD_INT 2
35227: EQUAL
35228: AND
35229: IFFALSE 35246
// bpoints := bpoints * 1.2 ;
35231: LD_ADDR_VAR 0 10
35235: PUSH
35236: LD_VAR 0 10
35240: PUSH
35241: LD_REAL  1.20000000000000E+0000
35244: MUL
35245: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35246: LD_VAR 0 6
35250: PPUSH
35251: CALL_OW 257
35255: PUSH
35256: LD_INT 5
35258: PUSH
35259: LD_INT 7
35261: PUSH
35262: LD_INT 9
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: IN
35270: PUSH
35271: LD_VAR 0 1
35275: PPUSH
35276: LD_INT 52
35278: PPUSH
35279: CALL_OW 321
35283: PUSH
35284: LD_INT 2
35286: EQUAL
35287: AND
35288: IFFALSE 35305
// bpoints := bpoints * 1.5 ;
35290: LD_ADDR_VAR 0 10
35294: PUSH
35295: LD_VAR 0 10
35299: PUSH
35300: LD_REAL  1.50000000000000E+0000
35303: MUL
35304: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35305: LD_VAR 0 1
35309: PPUSH
35310: LD_INT 66
35312: PPUSH
35313: CALL_OW 321
35317: PUSH
35318: LD_INT 2
35320: EQUAL
35321: IFFALSE 35338
// bpoints := bpoints * 1.1 ;
35323: LD_ADDR_VAR 0 10
35327: PUSH
35328: LD_VAR 0 10
35332: PUSH
35333: LD_REAL  1.10000000000000E+0000
35336: MUL
35337: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35338: LD_ADDR_VAR 0 10
35342: PUSH
35343: LD_VAR 0 10
35347: PUSH
35348: LD_VAR 0 6
35352: PPUSH
35353: LD_INT 1
35355: PPUSH
35356: CALL_OW 259
35360: PUSH
35361: LD_REAL  1.15000000000000E+0000
35364: MUL
35365: MUL
35366: ST_TO_ADDR
// end ; unit_vehicle :
35367: GO 36191
35369: LD_INT 2
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35377
35375: GO 36179
35377: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35378: LD_VAR 0 6
35382: PPUSH
35383: CALL_OW 264
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: LD_INT 42
35393: PUSH
35394: LD_INT 24
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: IN
35402: IFFALSE 35423
// points := [ 25 , 5 , 3 ] ;
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_INT 25
35411: PUSH
35412: LD_INT 5
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35423: LD_VAR 0 6
35427: PPUSH
35428: CALL_OW 264
35432: PUSH
35433: LD_INT 4
35435: PUSH
35436: LD_INT 43
35438: PUSH
35439: LD_INT 25
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: IN
35447: IFFALSE 35468
// points := [ 40 , 15 , 5 ] ;
35449: LD_ADDR_VAR 0 9
35453: PUSH
35454: LD_INT 40
35456: PUSH
35457: LD_INT 15
35459: PUSH
35460: LD_INT 5
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35468: LD_VAR 0 6
35472: PPUSH
35473: CALL_OW 264
35477: PUSH
35478: LD_INT 3
35480: PUSH
35481: LD_INT 23
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: IN
35488: IFFALSE 35509
// points := [ 7 , 25 , 8 ] ;
35490: LD_ADDR_VAR 0 9
35494: PUSH
35495: LD_INT 7
35497: PUSH
35498: LD_INT 25
35500: PUSH
35501: LD_INT 8
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35509: LD_VAR 0 6
35513: PPUSH
35514: CALL_OW 264
35518: PUSH
35519: LD_INT 5
35521: PUSH
35522: LD_INT 27
35524: PUSH
35525: LD_INT 44
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: IN
35533: IFFALSE 35554
// points := [ 14 , 50 , 16 ] ;
35535: LD_ADDR_VAR 0 9
35539: PUSH
35540: LD_INT 14
35542: PUSH
35543: LD_INT 50
35545: PUSH
35546: LD_INT 16
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35554: LD_VAR 0 6
35558: PPUSH
35559: CALL_OW 264
35563: PUSH
35564: LD_INT 6
35566: PUSH
35567: LD_INT 46
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: IN
35574: IFFALSE 35595
// points := [ 32 , 120 , 70 ] ;
35576: LD_ADDR_VAR 0 9
35580: PUSH
35581: LD_INT 32
35583: PUSH
35584: LD_INT 120
35586: PUSH
35587: LD_INT 70
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35595: LD_VAR 0 6
35599: PPUSH
35600: CALL_OW 264
35604: PUSH
35605: LD_INT 7
35607: PUSH
35608: LD_INT 28
35610: PUSH
35611: LD_INT 45
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: IN
35619: IFFALSE 35640
// points := [ 35 , 20 , 45 ] ;
35621: LD_ADDR_VAR 0 9
35625: PUSH
35626: LD_INT 35
35628: PUSH
35629: LD_INT 20
35631: PUSH
35632: LD_INT 45
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35640: LD_VAR 0 6
35644: PPUSH
35645: CALL_OW 264
35649: PUSH
35650: LD_INT 47
35652: PUSH
35653: EMPTY
35654: LIST
35655: IN
35656: IFFALSE 35677
// points := [ 67 , 45 , 75 ] ;
35658: LD_ADDR_VAR 0 9
35662: PUSH
35663: LD_INT 67
35665: PUSH
35666: LD_INT 45
35668: PUSH
35669: LD_INT 75
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35677: LD_VAR 0 6
35681: PPUSH
35682: CALL_OW 264
35686: PUSH
35687: LD_INT 26
35689: PUSH
35690: EMPTY
35691: LIST
35692: IN
35693: IFFALSE 35714
// points := [ 120 , 30 , 80 ] ;
35695: LD_ADDR_VAR 0 9
35699: PUSH
35700: LD_INT 120
35702: PUSH
35703: LD_INT 30
35705: PUSH
35706: LD_INT 80
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35714: LD_VAR 0 6
35718: PPUSH
35719: CALL_OW 264
35723: PUSH
35724: LD_INT 22
35726: PUSH
35727: EMPTY
35728: LIST
35729: IN
35730: IFFALSE 35751
// points := [ 40 , 1 , 1 ] ;
35732: LD_ADDR_VAR 0 9
35736: PUSH
35737: LD_INT 40
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35751: LD_VAR 0 6
35755: PPUSH
35756: CALL_OW 264
35760: PUSH
35761: LD_INT 29
35763: PUSH
35764: EMPTY
35765: LIST
35766: IN
35767: IFFALSE 35788
// points := [ 70 , 200 , 400 ] ;
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: LD_INT 70
35776: PUSH
35777: LD_INT 200
35779: PUSH
35780: LD_INT 400
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35788: LD_VAR 0 6
35792: PPUSH
35793: CALL_OW 264
35797: PUSH
35798: LD_INT 14
35800: PUSH
35801: LD_INT 53
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: IN
35808: IFFALSE 35829
// points := [ 40 , 10 , 20 ] ;
35810: LD_ADDR_VAR 0 9
35814: PUSH
35815: LD_INT 40
35817: PUSH
35818: LD_INT 10
35820: PUSH
35821: LD_INT 20
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35829: LD_VAR 0 6
35833: PPUSH
35834: CALL_OW 264
35838: PUSH
35839: LD_INT 9
35841: PUSH
35842: EMPTY
35843: LIST
35844: IN
35845: IFFALSE 35866
// points := [ 5 , 70 , 20 ] ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: LD_INT 5
35854: PUSH
35855: LD_INT 70
35857: PUSH
35858: LD_INT 20
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35866: LD_VAR 0 6
35870: PPUSH
35871: CALL_OW 264
35875: PUSH
35876: LD_INT 10
35878: PUSH
35879: EMPTY
35880: LIST
35881: IN
35882: IFFALSE 35903
// points := [ 35 , 110 , 70 ] ;
35884: LD_ADDR_VAR 0 9
35888: PUSH
35889: LD_INT 35
35891: PUSH
35892: LD_INT 110
35894: PUSH
35895: LD_INT 70
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35903: LD_VAR 0 6
35907: PPUSH
35908: CALL_OW 265
35912: PUSH
35913: LD_INT 25
35915: EQUAL
35916: IFFALSE 35937
// points := [ 80 , 65 , 100 ] ;
35918: LD_ADDR_VAR 0 9
35922: PUSH
35923: LD_INT 80
35925: PUSH
35926: LD_INT 65
35928: PUSH
35929: LD_INT 100
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35937: LD_VAR 0 6
35941: PPUSH
35942: CALL_OW 263
35946: PUSH
35947: LD_INT 1
35949: EQUAL
35950: IFFALSE 35985
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35952: LD_ADDR_VAR 0 10
35956: PUSH
35957: LD_VAR 0 10
35961: PUSH
35962: LD_VAR 0 6
35966: PPUSH
35967: CALL_OW 311
35971: PPUSH
35972: LD_INT 3
35974: PPUSH
35975: CALL_OW 259
35979: PUSH
35980: LD_INT 4
35982: MUL
35983: MUL
35984: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35985: LD_VAR 0 6
35989: PPUSH
35990: CALL_OW 263
35994: PUSH
35995: LD_INT 2
35997: EQUAL
35998: IFFALSE 36049
// begin j := IsControledBy ( i ) ;
36000: LD_ADDR_VAR 0 7
36004: PUSH
36005: LD_VAR 0 6
36009: PPUSH
36010: CALL_OW 312
36014: ST_TO_ADDR
// if j then
36015: LD_VAR 0 7
36019: IFFALSE 36049
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36021: LD_ADDR_VAR 0 10
36025: PUSH
36026: LD_VAR 0 10
36030: PUSH
36031: LD_VAR 0 7
36035: PPUSH
36036: LD_INT 3
36038: PPUSH
36039: CALL_OW 259
36043: PUSH
36044: LD_INT 3
36046: MUL
36047: MUL
36048: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36049: LD_VAR 0 6
36053: PPUSH
36054: CALL_OW 264
36058: PUSH
36059: LD_INT 5
36061: PUSH
36062: LD_INT 6
36064: PUSH
36065: LD_INT 46
36067: PUSH
36068: LD_INT 44
36070: PUSH
36071: LD_INT 47
36073: PUSH
36074: LD_INT 45
36076: PUSH
36077: LD_INT 28
36079: PUSH
36080: LD_INT 7
36082: PUSH
36083: LD_INT 27
36085: PUSH
36086: LD_INT 29
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: IN
36101: PUSH
36102: LD_VAR 0 1
36106: PPUSH
36107: LD_INT 52
36109: PPUSH
36110: CALL_OW 321
36114: PUSH
36115: LD_INT 2
36117: EQUAL
36118: AND
36119: IFFALSE 36136
// bpoints := bpoints * 1.2 ;
36121: LD_ADDR_VAR 0 10
36125: PUSH
36126: LD_VAR 0 10
36130: PUSH
36131: LD_REAL  1.20000000000000E+0000
36134: MUL
36135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36136: LD_VAR 0 6
36140: PPUSH
36141: CALL_OW 264
36145: PUSH
36146: LD_INT 6
36148: PUSH
36149: LD_INT 46
36151: PUSH
36152: LD_INT 47
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: IN
36160: IFFALSE 36177
// bpoints := bpoints * 1.2 ;
36162: LD_ADDR_VAR 0 10
36166: PUSH
36167: LD_VAR 0 10
36171: PUSH
36172: LD_REAL  1.20000000000000E+0000
36175: MUL
36176: ST_TO_ADDR
// end ; unit_building :
36177: GO 36191
36179: LD_INT 3
36181: DOUBLE
36182: EQUAL
36183: IFTRUE 36187
36185: GO 36190
36187: POP
// ; end ;
36188: GO 36191
36190: POP
// for j = 1 to 3 do
36191: LD_ADDR_VAR 0 7
36195: PUSH
36196: DOUBLE
36197: LD_INT 1
36199: DEC
36200: ST_TO_ADDR
36201: LD_INT 3
36203: PUSH
36204: FOR_TO
36205: IFFALSE 36258
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36207: LD_ADDR_VAR 0 5
36211: PUSH
36212: LD_VAR 0 5
36216: PPUSH
36217: LD_VAR 0 7
36221: PPUSH
36222: LD_VAR 0 5
36226: PUSH
36227: LD_VAR 0 7
36231: ARRAY
36232: PUSH
36233: LD_VAR 0 9
36237: PUSH
36238: LD_VAR 0 7
36242: ARRAY
36243: PUSH
36244: LD_VAR 0 10
36248: MUL
36249: PLUS
36250: PPUSH
36251: CALL_OW 1
36255: ST_TO_ADDR
36256: GO 36204
36258: POP
36259: POP
// end ;
36260: GO 34743
36262: POP
36263: POP
// result := Replace ( result , 4 , tmp ) ;
36264: LD_ADDR_VAR 0 5
36268: PUSH
36269: LD_VAR 0 5
36273: PPUSH
36274: LD_INT 4
36276: PPUSH
36277: LD_VAR 0 8
36281: PPUSH
36282: CALL_OW 1
36286: ST_TO_ADDR
// end ;
36287: LD_VAR 0 5
36291: RET
// export function DangerAtRange ( unit , range ) ; begin
36292: LD_INT 0
36294: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36295: LD_ADDR_VAR 0 3
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 255
36309: PPUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 250
36319: PPUSH
36320: LD_VAR 0 1
36324: PPUSH
36325: CALL_OW 251
36329: PPUSH
36330: LD_VAR 0 2
36334: PPUSH
36335: CALL 34595 0 4
36339: ST_TO_ADDR
// end ;
36340: LD_VAR 0 3
36344: RET
// export function DangerInArea ( side , area ) ; begin
36345: LD_INT 0
36347: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_VAR 0 2
36357: PPUSH
36358: LD_INT 81
36360: PUSH
36361: LD_VAR 0 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PPUSH
36370: CALL_OW 70
36374: ST_TO_ADDR
// end ;
36375: LD_VAR 0 3
36379: RET
// export function IsExtension ( b ) ; begin
36380: LD_INT 0
36382: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36383: LD_ADDR_VAR 0 2
36387: PUSH
36388: LD_VAR 0 1
36392: PUSH
36393: LD_INT 23
36395: PUSH
36396: LD_INT 20
36398: PUSH
36399: LD_INT 22
36401: PUSH
36402: LD_INT 17
36404: PUSH
36405: LD_INT 24
36407: PUSH
36408: LD_INT 21
36410: PUSH
36411: LD_INT 19
36413: PUSH
36414: LD_INT 16
36416: PUSH
36417: LD_INT 25
36419: PUSH
36420: LD_INT 18
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: IN
36435: ST_TO_ADDR
// end ;
36436: LD_VAR 0 2
36440: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36441: LD_INT 0
36443: PPUSH
36444: PPUSH
36445: PPUSH
// result := [ ] ;
36446: LD_ADDR_VAR 0 4
36450: PUSH
36451: EMPTY
36452: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36453: LD_ADDR_VAR 0 5
36457: PUSH
36458: LD_VAR 0 2
36462: PPUSH
36463: LD_INT 21
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PPUSH
36473: CALL_OW 70
36477: ST_TO_ADDR
// if not tmp then
36478: LD_VAR 0 5
36482: NOT
36483: IFFALSE 36487
// exit ;
36485: GO 36551
// if checkLink then
36487: LD_VAR 0 3
36491: IFFALSE 36541
// begin for i in tmp do
36493: LD_ADDR_VAR 0 6
36497: PUSH
36498: LD_VAR 0 5
36502: PUSH
36503: FOR_IN
36504: IFFALSE 36539
// if GetBase ( i ) <> base then
36506: LD_VAR 0 6
36510: PPUSH
36511: CALL_OW 274
36515: PUSH
36516: LD_VAR 0 1
36520: NONEQUAL
36521: IFFALSE 36537
// ComLinkToBase ( base , i ) ;
36523: LD_VAR 0 1
36527: PPUSH
36528: LD_VAR 0 6
36532: PPUSH
36533: CALL_OW 169
36537: GO 36503
36539: POP
36540: POP
// end ; result := tmp ;
36541: LD_ADDR_VAR 0 4
36545: PUSH
36546: LD_VAR 0 5
36550: ST_TO_ADDR
// end ;
36551: LD_VAR 0 4
36555: RET
// export function ComComplete ( units , b ) ; var i ; begin
36556: LD_INT 0
36558: PPUSH
36559: PPUSH
// if not units then
36560: LD_VAR 0 1
36564: NOT
36565: IFFALSE 36569
// exit ;
36567: GO 36659
// for i in units do
36569: LD_ADDR_VAR 0 4
36573: PUSH
36574: LD_VAR 0 1
36578: PUSH
36579: FOR_IN
36580: IFFALSE 36657
// if BuildingStatus ( b ) = bs_build then
36582: LD_VAR 0 2
36586: PPUSH
36587: CALL_OW 461
36591: PUSH
36592: LD_INT 1
36594: EQUAL
36595: IFFALSE 36655
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36597: LD_VAR 0 4
36601: PPUSH
36602: LD_STRING h
36604: PUSH
36605: LD_VAR 0 2
36609: PPUSH
36610: CALL_OW 250
36614: PUSH
36615: LD_VAR 0 2
36619: PPUSH
36620: CALL_OW 251
36624: PUSH
36625: LD_VAR 0 2
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: PUSH
36648: EMPTY
36649: LIST
36650: PPUSH
36651: CALL_OW 446
36655: GO 36579
36657: POP
36658: POP
// end ;
36659: LD_VAR 0 3
36663: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36664: LD_INT 0
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
36670: PPUSH
36671: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36672: LD_VAR 0 1
36676: NOT
36677: PUSH
36678: LD_VAR 0 1
36682: PPUSH
36683: CALL_OW 263
36687: PUSH
36688: LD_INT 2
36690: EQUAL
36691: NOT
36692: OR
36693: IFFALSE 36697
// exit ;
36695: GO 37013
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36697: LD_ADDR_VAR 0 6
36701: PUSH
36702: LD_INT 22
36704: PUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 255
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 30
36724: PUSH
36725: LD_INT 36
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 34
36734: PUSH
36735: LD_INT 31
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PPUSH
36751: CALL_OW 69
36755: ST_TO_ADDR
// if not tmp then
36756: LD_VAR 0 6
36760: NOT
36761: IFFALSE 36765
// exit ;
36763: GO 37013
// result := [ ] ;
36765: LD_ADDR_VAR 0 2
36769: PUSH
36770: EMPTY
36771: ST_TO_ADDR
// for i in tmp do
36772: LD_ADDR_VAR 0 3
36776: PUSH
36777: LD_VAR 0 6
36781: PUSH
36782: FOR_IN
36783: IFFALSE 36854
// begin t := UnitsInside ( i ) ;
36785: LD_ADDR_VAR 0 4
36789: PUSH
36790: LD_VAR 0 3
36794: PPUSH
36795: CALL_OW 313
36799: ST_TO_ADDR
// if t then
36800: LD_VAR 0 4
36804: IFFALSE 36852
// for j in t do
36806: LD_ADDR_VAR 0 7
36810: PUSH
36811: LD_VAR 0 4
36815: PUSH
36816: FOR_IN
36817: IFFALSE 36850
// result := Insert ( result , result + 1 , j ) ;
36819: LD_ADDR_VAR 0 2
36823: PUSH
36824: LD_VAR 0 2
36828: PPUSH
36829: LD_VAR 0 2
36833: PUSH
36834: LD_INT 1
36836: PLUS
36837: PPUSH
36838: LD_VAR 0 7
36842: PPUSH
36843: CALL_OW 2
36847: ST_TO_ADDR
36848: GO 36816
36850: POP
36851: POP
// end ;
36852: GO 36782
36854: POP
36855: POP
// if not result then
36856: LD_VAR 0 2
36860: NOT
36861: IFFALSE 36865
// exit ;
36863: GO 37013
// mech := result [ 1 ] ;
36865: LD_ADDR_VAR 0 5
36869: PUSH
36870: LD_VAR 0 2
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: ST_TO_ADDR
// if result > 1 then
36879: LD_VAR 0 2
36883: PUSH
36884: LD_INT 1
36886: GREATER
36887: IFFALSE 36999
// for i = 2 to result do
36889: LD_ADDR_VAR 0 3
36893: PUSH
36894: DOUBLE
36895: LD_INT 2
36897: DEC
36898: ST_TO_ADDR
36899: LD_VAR 0 2
36903: PUSH
36904: FOR_TO
36905: IFFALSE 36997
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36907: LD_ADDR_VAR 0 4
36911: PUSH
36912: LD_VAR 0 2
36916: PUSH
36917: LD_VAR 0 3
36921: ARRAY
36922: PPUSH
36923: LD_INT 3
36925: PPUSH
36926: CALL_OW 259
36930: PUSH
36931: LD_VAR 0 2
36935: PUSH
36936: LD_VAR 0 3
36940: ARRAY
36941: PPUSH
36942: CALL_OW 432
36946: MINUS
36947: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36948: LD_VAR 0 4
36952: PUSH
36953: LD_VAR 0 5
36957: PPUSH
36958: LD_INT 3
36960: PPUSH
36961: CALL_OW 259
36965: PUSH
36966: LD_VAR 0 5
36970: PPUSH
36971: CALL_OW 432
36975: MINUS
36976: GREATEREQUAL
36977: IFFALSE 36995
// mech := result [ i ] ;
36979: LD_ADDR_VAR 0 5
36983: PUSH
36984: LD_VAR 0 2
36988: PUSH
36989: LD_VAR 0 3
36993: ARRAY
36994: ST_TO_ADDR
// end ;
36995: GO 36904
36997: POP
36998: POP
// ComLinkTo ( vehicle , mech ) ;
36999: LD_VAR 0 1
37003: PPUSH
37004: LD_VAR 0 5
37008: PPUSH
37009: CALL_OW 135
// end ;
37013: LD_VAR 0 2
37017: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37018: LD_INT 0
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
37031: PPUSH
37032: PPUSH
// result := [ ] ;
37033: LD_ADDR_VAR 0 7
37037: PUSH
37038: EMPTY
37039: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 266
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: IN
37060: NOT
37061: IFFALSE 37065
// exit ;
37063: GO 38699
// if name then
37065: LD_VAR 0 3
37069: IFFALSE 37085
// SetBName ( base_dep , name ) ;
37071: LD_VAR 0 1
37075: PPUSH
37076: LD_VAR 0 3
37080: PPUSH
37081: CALL_OW 500
// base := GetBase ( base_dep ) ;
37085: LD_ADDR_VAR 0 15
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 274
37099: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37100: LD_ADDR_VAR 0 16
37104: PUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: CALL_OW 255
37114: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37115: LD_ADDR_VAR 0 17
37119: PUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 248
37129: ST_TO_ADDR
// if sources then
37130: LD_VAR 0 5
37134: IFFALSE 37181
// for i = 1 to 3 do
37136: LD_ADDR_VAR 0 8
37140: PUSH
37141: DOUBLE
37142: LD_INT 1
37144: DEC
37145: ST_TO_ADDR
37146: LD_INT 3
37148: PUSH
37149: FOR_TO
37150: IFFALSE 37179
// AddResourceType ( base , i , sources [ i ] ) ;
37152: LD_VAR 0 15
37156: PPUSH
37157: LD_VAR 0 8
37161: PPUSH
37162: LD_VAR 0 5
37166: PUSH
37167: LD_VAR 0 8
37171: ARRAY
37172: PPUSH
37173: CALL_OW 276
37177: GO 37149
37179: POP
37180: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37181: LD_ADDR_VAR 0 18
37185: PUSH
37186: LD_VAR 0 15
37190: PPUSH
37191: LD_VAR 0 2
37195: PPUSH
37196: LD_INT 1
37198: PPUSH
37199: CALL 36441 0 3
37203: ST_TO_ADDR
// InitHc ;
37204: CALL_OW 19
// InitUc ;
37208: CALL_OW 18
// uc_side := side ;
37212: LD_ADDR_OWVAR 20
37216: PUSH
37217: LD_VAR 0 16
37221: ST_TO_ADDR
// uc_nation := nation ;
37222: LD_ADDR_OWVAR 21
37226: PUSH
37227: LD_VAR 0 17
37231: ST_TO_ADDR
// if buildings then
37232: LD_VAR 0 18
37236: IFFALSE 38558
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37238: LD_ADDR_VAR 0 19
37242: PUSH
37243: LD_VAR 0 18
37247: PPUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 30
37253: PUSH
37254: LD_INT 29
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 30
37263: PUSH
37264: LD_INT 30
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PPUSH
37276: CALL_OW 72
37280: ST_TO_ADDR
// if tmp then
37281: LD_VAR 0 19
37285: IFFALSE 37333
// for i in tmp do
37287: LD_ADDR_VAR 0 8
37291: PUSH
37292: LD_VAR 0 19
37296: PUSH
37297: FOR_IN
37298: IFFALSE 37331
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37300: LD_VAR 0 8
37304: PPUSH
37305: CALL_OW 250
37309: PPUSH
37310: LD_VAR 0 8
37314: PPUSH
37315: CALL_OW 251
37319: PPUSH
37320: LD_VAR 0 16
37324: PPUSH
37325: CALL_OW 441
37329: GO 37297
37331: POP
37332: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37333: LD_VAR 0 18
37337: PPUSH
37338: LD_INT 2
37340: PUSH
37341: LD_INT 30
37343: PUSH
37344: LD_INT 32
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 30
37353: PUSH
37354: LD_INT 33
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: PPUSH
37366: CALL_OW 72
37370: IFFALSE 37458
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37372: LD_ADDR_VAR 0 8
37376: PUSH
37377: LD_VAR 0 18
37381: PPUSH
37382: LD_INT 2
37384: PUSH
37385: LD_INT 30
37387: PUSH
37388: LD_INT 32
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 30
37397: PUSH
37398: LD_INT 33
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: PPUSH
37410: CALL_OW 72
37414: PUSH
37415: FOR_IN
37416: IFFALSE 37456
// begin if not GetBWeapon ( i ) then
37418: LD_VAR 0 8
37422: PPUSH
37423: CALL_OW 269
37427: NOT
37428: IFFALSE 37454
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37430: LD_VAR 0 8
37434: PPUSH
37435: LD_VAR 0 8
37439: PPUSH
37440: LD_VAR 0 2
37444: PPUSH
37445: CALL 38704 0 2
37449: PPUSH
37450: CALL_OW 431
// end ;
37454: GO 37415
37456: POP
37457: POP
// end ; for i = 1 to personel do
37458: LD_ADDR_VAR 0 8
37462: PUSH
37463: DOUBLE
37464: LD_INT 1
37466: DEC
37467: ST_TO_ADDR
37468: LD_VAR 0 6
37472: PUSH
37473: FOR_TO
37474: IFFALSE 38538
// begin if i > 4 then
37476: LD_VAR 0 8
37480: PUSH
37481: LD_INT 4
37483: GREATER
37484: IFFALSE 37488
// break ;
37486: GO 38538
// case i of 1 :
37488: LD_VAR 0 8
37492: PUSH
37493: LD_INT 1
37495: DOUBLE
37496: EQUAL
37497: IFTRUE 37501
37499: GO 37581
37501: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37502: LD_ADDR_VAR 0 12
37506: PUSH
37507: LD_VAR 0 18
37511: PPUSH
37512: LD_INT 22
37514: PUSH
37515: LD_VAR 0 16
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 58
37526: PUSH
37527: EMPTY
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 30
37535: PUSH
37536: LD_INT 32
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 30
37545: PUSH
37546: LD_INT 4
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 30
37555: PUSH
37556: LD_INT 5
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: PPUSH
37574: CALL_OW 72
37578: ST_TO_ADDR
37579: GO 37803
37581: LD_INT 2
37583: DOUBLE
37584: EQUAL
37585: IFTRUE 37589
37587: GO 37651
37589: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37590: LD_ADDR_VAR 0 12
37594: PUSH
37595: LD_VAR 0 18
37599: PPUSH
37600: LD_INT 22
37602: PUSH
37603: LD_VAR 0 16
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: LD_INT 30
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 30
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PPUSH
37644: CALL_OW 72
37648: ST_TO_ADDR
37649: GO 37803
37651: LD_INT 3
37653: DOUBLE
37654: EQUAL
37655: IFTRUE 37659
37657: GO 37721
37659: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37660: LD_ADDR_VAR 0 12
37664: PUSH
37665: LD_VAR 0 18
37669: PPUSH
37670: LD_INT 22
37672: PUSH
37673: LD_VAR 0 16
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 30
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 30
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PPUSH
37714: CALL_OW 72
37718: ST_TO_ADDR
37719: GO 37803
37721: LD_INT 4
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37729
37727: GO 37802
37729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37730: LD_ADDR_VAR 0 12
37734: PUSH
37735: LD_VAR 0 18
37739: PPUSH
37740: LD_INT 22
37742: PUSH
37743: LD_VAR 0 16
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 30
37757: PUSH
37758: LD_INT 6
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 30
37767: PUSH
37768: LD_INT 7
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 30
37777: PUSH
37778: LD_INT 8
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PPUSH
37795: CALL_OW 72
37799: ST_TO_ADDR
37800: GO 37803
37802: POP
// if i = 1 then
37803: LD_VAR 0 8
37807: PUSH
37808: LD_INT 1
37810: EQUAL
37811: IFFALSE 37922
// begin tmp := [ ] ;
37813: LD_ADDR_VAR 0 19
37817: PUSH
37818: EMPTY
37819: ST_TO_ADDR
// for j in f do
37820: LD_ADDR_VAR 0 9
37824: PUSH
37825: LD_VAR 0 12
37829: PUSH
37830: FOR_IN
37831: IFFALSE 37904
// if GetBType ( j ) = b_bunker then
37833: LD_VAR 0 9
37837: PPUSH
37838: CALL_OW 266
37842: PUSH
37843: LD_INT 32
37845: EQUAL
37846: IFFALSE 37873
// tmp := Insert ( tmp , 1 , j ) else
37848: LD_ADDR_VAR 0 19
37852: PUSH
37853: LD_VAR 0 19
37857: PPUSH
37858: LD_INT 1
37860: PPUSH
37861: LD_VAR 0 9
37865: PPUSH
37866: CALL_OW 2
37870: ST_TO_ADDR
37871: GO 37902
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37873: LD_ADDR_VAR 0 19
37877: PUSH
37878: LD_VAR 0 19
37882: PPUSH
37883: LD_VAR 0 19
37887: PUSH
37888: LD_INT 1
37890: PLUS
37891: PPUSH
37892: LD_VAR 0 9
37896: PPUSH
37897: CALL_OW 2
37901: ST_TO_ADDR
37902: GO 37830
37904: POP
37905: POP
// if tmp then
37906: LD_VAR 0 19
37910: IFFALSE 37922
// f := tmp ;
37912: LD_ADDR_VAR 0 12
37916: PUSH
37917: LD_VAR 0 19
37921: ST_TO_ADDR
// end ; x := personel [ i ] ;
37922: LD_ADDR_VAR 0 13
37926: PUSH
37927: LD_VAR 0 6
37931: PUSH
37932: LD_VAR 0 8
37936: ARRAY
37937: ST_TO_ADDR
// if x = - 1 then
37938: LD_VAR 0 13
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: EQUAL
37947: IFFALSE 38156
// begin for j in f do
37949: LD_ADDR_VAR 0 9
37953: PUSH
37954: LD_VAR 0 12
37958: PUSH
37959: FOR_IN
37960: IFFALSE 38152
// repeat InitHc ;
37962: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37966: LD_VAR 0 9
37970: PPUSH
37971: CALL_OW 266
37975: PUSH
37976: LD_INT 5
37978: EQUAL
37979: IFFALSE 38049
// begin if UnitsInside ( j ) < 3 then
37981: LD_VAR 0 9
37985: PPUSH
37986: CALL_OW 313
37990: PUSH
37991: LD_INT 3
37993: LESS
37994: IFFALSE 38030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37996: LD_INT 0
37998: PPUSH
37999: LD_INT 5
38001: PUSH
38002: LD_INT 8
38004: PUSH
38005: LD_INT 9
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: PUSH
38013: LD_VAR 0 17
38017: ARRAY
38018: PPUSH
38019: LD_VAR 0 4
38023: PPUSH
38024: CALL_OW 380
38028: GO 38047
// PrepareHuman ( false , i , skill ) ;
38030: LD_INT 0
38032: PPUSH
38033: LD_VAR 0 8
38037: PPUSH
38038: LD_VAR 0 4
38042: PPUSH
38043: CALL_OW 380
// end else
38047: GO 38066
// PrepareHuman ( false , i , skill ) ;
38049: LD_INT 0
38051: PPUSH
38052: LD_VAR 0 8
38056: PPUSH
38057: LD_VAR 0 4
38061: PPUSH
38062: CALL_OW 380
// un := CreateHuman ;
38066: LD_ADDR_VAR 0 14
38070: PUSH
38071: CALL_OW 44
38075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38076: LD_ADDR_VAR 0 7
38080: PUSH
38081: LD_VAR 0 7
38085: PPUSH
38086: LD_INT 1
38088: PPUSH
38089: LD_VAR 0 14
38093: PPUSH
38094: CALL_OW 2
38098: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38099: LD_VAR 0 14
38103: PPUSH
38104: LD_VAR 0 9
38108: PPUSH
38109: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38113: LD_VAR 0 9
38117: PPUSH
38118: CALL_OW 313
38122: PUSH
38123: LD_INT 6
38125: EQUAL
38126: PUSH
38127: LD_VAR 0 9
38131: PPUSH
38132: CALL_OW 266
38136: PUSH
38137: LD_INT 32
38139: PUSH
38140: LD_INT 31
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: IN
38147: OR
38148: IFFALSE 37962
38150: GO 37959
38152: POP
38153: POP
// end else
38154: GO 38536
// for j = 1 to x do
38156: LD_ADDR_VAR 0 9
38160: PUSH
38161: DOUBLE
38162: LD_INT 1
38164: DEC
38165: ST_TO_ADDR
38166: LD_VAR 0 13
38170: PUSH
38171: FOR_TO
38172: IFFALSE 38534
// begin InitHc ;
38174: CALL_OW 19
// if not f then
38178: LD_VAR 0 12
38182: NOT
38183: IFFALSE 38272
// begin PrepareHuman ( false , i , skill ) ;
38185: LD_INT 0
38187: PPUSH
38188: LD_VAR 0 8
38192: PPUSH
38193: LD_VAR 0 4
38197: PPUSH
38198: CALL_OW 380
// un := CreateHuman ;
38202: LD_ADDR_VAR 0 14
38206: PUSH
38207: CALL_OW 44
38211: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38212: LD_ADDR_VAR 0 7
38216: PUSH
38217: LD_VAR 0 7
38221: PPUSH
38222: LD_INT 1
38224: PPUSH
38225: LD_VAR 0 14
38229: PPUSH
38230: CALL_OW 2
38234: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38235: LD_VAR 0 14
38239: PPUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 250
38249: PPUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 251
38259: PPUSH
38260: LD_INT 10
38262: PPUSH
38263: LD_INT 0
38265: PPUSH
38266: CALL_OW 50
// continue ;
38270: GO 38171
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38272: LD_VAR 0 12
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: PPUSH
38281: CALL_OW 313
38285: PUSH
38286: LD_VAR 0 12
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PPUSH
38295: CALL_OW 266
38299: PUSH
38300: LD_INT 32
38302: PUSH
38303: LD_INT 31
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: IN
38310: AND
38311: PUSH
38312: LD_VAR 0 12
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: PPUSH
38321: CALL_OW 313
38325: PUSH
38326: LD_INT 6
38328: EQUAL
38329: OR
38330: IFFALSE 38350
// f := Delete ( f , 1 ) ;
38332: LD_ADDR_VAR 0 12
38336: PUSH
38337: LD_VAR 0 12
38341: PPUSH
38342: LD_INT 1
38344: PPUSH
38345: CALL_OW 3
38349: ST_TO_ADDR
// if not f then
38350: LD_VAR 0 12
38354: NOT
38355: IFFALSE 38373
// begin x := x + 2 ;
38357: LD_ADDR_VAR 0 13
38361: PUSH
38362: LD_VAR 0 13
38366: PUSH
38367: LD_INT 2
38369: PLUS
38370: ST_TO_ADDR
// continue ;
38371: GO 38171
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38373: LD_VAR 0 12
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PPUSH
38382: CALL_OW 266
38386: PUSH
38387: LD_INT 5
38389: EQUAL
38390: IFFALSE 38464
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38392: LD_VAR 0 12
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: CALL_OW 313
38405: PUSH
38406: LD_INT 3
38408: LESS
38409: IFFALSE 38445
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38411: LD_INT 0
38413: PPUSH
38414: LD_INT 5
38416: PUSH
38417: LD_INT 8
38419: PUSH
38420: LD_INT 9
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: PUSH
38428: LD_VAR 0 17
38432: ARRAY
38433: PPUSH
38434: LD_VAR 0 4
38438: PPUSH
38439: CALL_OW 380
38443: GO 38462
// PrepareHuman ( false , i , skill ) ;
38445: LD_INT 0
38447: PPUSH
38448: LD_VAR 0 8
38452: PPUSH
38453: LD_VAR 0 4
38457: PPUSH
38458: CALL_OW 380
// end else
38462: GO 38481
// PrepareHuman ( false , i , skill ) ;
38464: LD_INT 0
38466: PPUSH
38467: LD_VAR 0 8
38471: PPUSH
38472: LD_VAR 0 4
38476: PPUSH
38477: CALL_OW 380
// un := CreateHuman ;
38481: LD_ADDR_VAR 0 14
38485: PUSH
38486: CALL_OW 44
38490: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38491: LD_ADDR_VAR 0 7
38495: PUSH
38496: LD_VAR 0 7
38500: PPUSH
38501: LD_INT 1
38503: PPUSH
38504: LD_VAR 0 14
38508: PPUSH
38509: CALL_OW 2
38513: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38514: LD_VAR 0 14
38518: PPUSH
38519: LD_VAR 0 12
38523: PUSH
38524: LD_INT 1
38526: ARRAY
38527: PPUSH
38528: CALL_OW 52
// end ;
38532: GO 38171
38534: POP
38535: POP
// end ;
38536: GO 37473
38538: POP
38539: POP
// result := result ^ buildings ;
38540: LD_ADDR_VAR 0 7
38544: PUSH
38545: LD_VAR 0 7
38549: PUSH
38550: LD_VAR 0 18
38554: ADD
38555: ST_TO_ADDR
// end else
38556: GO 38699
// begin for i = 1 to personel do
38558: LD_ADDR_VAR 0 8
38562: PUSH
38563: DOUBLE
38564: LD_INT 1
38566: DEC
38567: ST_TO_ADDR
38568: LD_VAR 0 6
38572: PUSH
38573: FOR_TO
38574: IFFALSE 38697
// begin if i > 4 then
38576: LD_VAR 0 8
38580: PUSH
38581: LD_INT 4
38583: GREATER
38584: IFFALSE 38588
// break ;
38586: GO 38697
// x := personel [ i ] ;
38588: LD_ADDR_VAR 0 13
38592: PUSH
38593: LD_VAR 0 6
38597: PUSH
38598: LD_VAR 0 8
38602: ARRAY
38603: ST_TO_ADDR
// if x = - 1 then
38604: LD_VAR 0 13
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: EQUAL
38613: IFFALSE 38617
// continue ;
38615: GO 38573
// PrepareHuman ( false , i , skill ) ;
38617: LD_INT 0
38619: PPUSH
38620: LD_VAR 0 8
38624: PPUSH
38625: LD_VAR 0 4
38629: PPUSH
38630: CALL_OW 380
// un := CreateHuman ;
38634: LD_ADDR_VAR 0 14
38638: PUSH
38639: CALL_OW 44
38643: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38644: LD_VAR 0 14
38648: PPUSH
38649: LD_VAR 0 1
38653: PPUSH
38654: CALL_OW 250
38658: PPUSH
38659: LD_VAR 0 1
38663: PPUSH
38664: CALL_OW 251
38668: PPUSH
38669: LD_INT 10
38671: PPUSH
38672: LD_INT 0
38674: PPUSH
38675: CALL_OW 50
// result := result ^ un ;
38679: LD_ADDR_VAR 0 7
38683: PUSH
38684: LD_VAR 0 7
38688: PUSH
38689: LD_VAR 0 14
38693: ADD
38694: ST_TO_ADDR
// end ;
38695: GO 38573
38697: POP
38698: POP
// end ; end ;
38699: LD_VAR 0 7
38703: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38704: LD_INT 0
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
// result := false ;
38722: LD_ADDR_VAR 0 3
38726: PUSH
38727: LD_INT 0
38729: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38730: LD_VAR 0 1
38734: NOT
38735: PUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 266
38745: PUSH
38746: LD_INT 32
38748: PUSH
38749: LD_INT 33
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: IN
38756: NOT
38757: OR
38758: IFFALSE 38762
// exit ;
38760: GO 39901
// nat := GetNation ( tower ) ;
38762: LD_ADDR_VAR 0 12
38766: PUSH
38767: LD_VAR 0 1
38771: PPUSH
38772: CALL_OW 248
38776: ST_TO_ADDR
// side := GetSide ( tower ) ;
38777: LD_ADDR_VAR 0 16
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 255
38791: ST_TO_ADDR
// x := GetX ( tower ) ;
38792: LD_ADDR_VAR 0 10
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 250
38806: ST_TO_ADDR
// y := GetY ( tower ) ;
38807: LD_ADDR_VAR 0 11
38811: PUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: CALL_OW 251
38821: ST_TO_ADDR
// if not x or not y then
38822: LD_VAR 0 10
38826: NOT
38827: PUSH
38828: LD_VAR 0 11
38832: NOT
38833: OR
38834: IFFALSE 38838
// exit ;
38836: GO 39901
// weapon := 0 ;
38838: LD_ADDR_VAR 0 18
38842: PUSH
38843: LD_INT 0
38845: ST_TO_ADDR
// fac_list := [ ] ;
38846: LD_ADDR_VAR 0 17
38850: PUSH
38851: EMPTY
38852: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38853: LD_ADDR_VAR 0 6
38857: PUSH
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL_OW 274
38867: PPUSH
38868: LD_VAR 0 2
38872: PPUSH
38873: LD_INT 0
38875: PPUSH
38876: CALL 36441 0 3
38880: PPUSH
38881: LD_INT 30
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PPUSH
38891: CALL_OW 72
38895: ST_TO_ADDR
// if not factories then
38896: LD_VAR 0 6
38900: NOT
38901: IFFALSE 38905
// exit ;
38903: GO 39901
// for i in factories do
38905: LD_ADDR_VAR 0 8
38909: PUSH
38910: LD_VAR 0 6
38914: PUSH
38915: FOR_IN
38916: IFFALSE 38941
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38918: LD_ADDR_VAR 0 17
38922: PUSH
38923: LD_VAR 0 17
38927: PUSH
38928: LD_VAR 0 8
38932: PPUSH
38933: CALL_OW 478
38937: UNION
38938: ST_TO_ADDR
38939: GO 38915
38941: POP
38942: POP
// if not fac_list then
38943: LD_VAR 0 17
38947: NOT
38948: IFFALSE 38952
// exit ;
38950: GO 39901
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38952: LD_ADDR_VAR 0 5
38956: PUSH
38957: LD_INT 4
38959: PUSH
38960: LD_INT 5
38962: PUSH
38963: LD_INT 9
38965: PUSH
38966: LD_INT 10
38968: PUSH
38969: LD_INT 6
38971: PUSH
38972: LD_INT 7
38974: PUSH
38975: LD_INT 11
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 27
38989: PUSH
38990: LD_INT 28
38992: PUSH
38993: LD_INT 26
38995: PUSH
38996: LD_INT 30
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 43
39007: PUSH
39008: LD_INT 44
39010: PUSH
39011: LD_INT 46
39013: PUSH
39014: LD_INT 45
39016: PUSH
39017: LD_INT 47
39019: PUSH
39020: LD_INT 49
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: PUSH
39036: LD_VAR 0 12
39040: ARRAY
39041: ST_TO_ADDR
// for i in list do
39042: LD_ADDR_VAR 0 8
39046: PUSH
39047: LD_VAR 0 5
39051: PUSH
39052: FOR_IN
39053: IFFALSE 39086
// if not i in fac_list then
39055: LD_VAR 0 8
39059: PUSH
39060: LD_VAR 0 17
39064: IN
39065: NOT
39066: IFFALSE 39084
// list := list diff i ;
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_VAR 0 5
39077: PUSH
39078: LD_VAR 0 8
39082: DIFF
39083: ST_TO_ADDR
39084: GO 39052
39086: POP
39087: POP
// if not list then
39088: LD_VAR 0 5
39092: NOT
39093: IFFALSE 39097
// exit ;
39095: GO 39901
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39097: LD_VAR 0 12
39101: PUSH
39102: LD_INT 3
39104: EQUAL
39105: PUSH
39106: LD_INT 49
39108: PUSH
39109: LD_VAR 0 5
39113: IN
39114: AND
39115: PUSH
39116: LD_INT 31
39118: PPUSH
39119: LD_VAR 0 16
39123: PPUSH
39124: CALL_OW 321
39128: PUSH
39129: LD_INT 2
39131: EQUAL
39132: AND
39133: IFFALSE 39193
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39135: LD_INT 22
39137: PUSH
39138: LD_VAR 0 16
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 35
39149: PUSH
39150: LD_INT 49
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 91
39159: PUSH
39160: LD_VAR 0 1
39164: PUSH
39165: LD_INT 10
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: PPUSH
39178: CALL_OW 69
39182: NOT
39183: IFFALSE 39193
// weapon := ru_time_lapser ;
39185: LD_ADDR_VAR 0 18
39189: PUSH
39190: LD_INT 49
39192: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39193: LD_VAR 0 12
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: IN
39208: PUSH
39209: LD_INT 11
39211: PUSH
39212: LD_VAR 0 5
39216: IN
39217: PUSH
39218: LD_INT 30
39220: PUSH
39221: LD_VAR 0 5
39225: IN
39226: OR
39227: AND
39228: PUSH
39229: LD_INT 6
39231: PPUSH
39232: LD_VAR 0 16
39236: PPUSH
39237: CALL_OW 321
39241: PUSH
39242: LD_INT 2
39244: EQUAL
39245: AND
39246: IFFALSE 39411
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39248: LD_INT 22
39250: PUSH
39251: LD_VAR 0 16
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 35
39265: PUSH
39266: LD_INT 11
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 35
39275: PUSH
39276: LD_INT 30
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 91
39290: PUSH
39291: LD_VAR 0 1
39295: PUSH
39296: LD_INT 18
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PPUSH
39309: CALL_OW 69
39313: NOT
39314: PUSH
39315: LD_INT 22
39317: PUSH
39318: LD_VAR 0 16
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: LD_INT 30
39332: PUSH
39333: LD_INT 32
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 30
39342: PUSH
39343: LD_INT 33
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 91
39357: PUSH
39358: LD_VAR 0 1
39362: PUSH
39363: LD_INT 12
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: PPUSH
39379: CALL_OW 69
39383: PUSH
39384: LD_INT 2
39386: GREATER
39387: AND
39388: IFFALSE 39411
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39390: LD_ADDR_VAR 0 18
39394: PUSH
39395: LD_INT 11
39397: PUSH
39398: LD_INT 30
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_VAR 0 12
39409: ARRAY
39410: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39411: LD_VAR 0 18
39415: NOT
39416: PUSH
39417: LD_INT 40
39419: PPUSH
39420: LD_VAR 0 16
39424: PPUSH
39425: CALL_OW 321
39429: PUSH
39430: LD_INT 2
39432: EQUAL
39433: AND
39434: PUSH
39435: LD_INT 7
39437: PUSH
39438: LD_VAR 0 5
39442: IN
39443: PUSH
39444: LD_INT 28
39446: PUSH
39447: LD_VAR 0 5
39451: IN
39452: OR
39453: PUSH
39454: LD_INT 45
39456: PUSH
39457: LD_VAR 0 5
39461: IN
39462: OR
39463: AND
39464: IFFALSE 39718
// begin hex := GetHexInfo ( x , y ) ;
39466: LD_ADDR_VAR 0 4
39470: PUSH
39471: LD_VAR 0 10
39475: PPUSH
39476: LD_VAR 0 11
39480: PPUSH
39481: CALL_OW 546
39485: ST_TO_ADDR
// if hex [ 1 ] then
39486: LD_VAR 0 4
39490: PUSH
39491: LD_INT 1
39493: ARRAY
39494: IFFALSE 39498
// exit ;
39496: GO 39901
// height := hex [ 2 ] ;
39498: LD_ADDR_VAR 0 15
39502: PUSH
39503: LD_VAR 0 4
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39512: LD_ADDR_VAR 0 14
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: LD_INT 5
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// for i in tmp do
39535: LD_ADDR_VAR 0 8
39539: PUSH
39540: LD_VAR 0 14
39544: PUSH
39545: FOR_IN
39546: IFFALSE 39716
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39548: LD_ADDR_VAR 0 9
39552: PUSH
39553: LD_VAR 0 10
39557: PPUSH
39558: LD_VAR 0 8
39562: PPUSH
39563: LD_INT 5
39565: PPUSH
39566: CALL_OW 272
39570: PUSH
39571: LD_VAR 0 11
39575: PPUSH
39576: LD_VAR 0 8
39580: PPUSH
39581: LD_INT 5
39583: PPUSH
39584: CALL_OW 273
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39593: LD_VAR 0 9
39597: PUSH
39598: LD_INT 1
39600: ARRAY
39601: PPUSH
39602: LD_VAR 0 9
39606: PUSH
39607: LD_INT 2
39609: ARRAY
39610: PPUSH
39611: CALL_OW 488
39615: IFFALSE 39714
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39617: LD_ADDR_VAR 0 4
39621: PUSH
39622: LD_VAR 0 9
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: PPUSH
39631: LD_VAR 0 9
39635: PUSH
39636: LD_INT 2
39638: ARRAY
39639: PPUSH
39640: CALL_OW 546
39644: ST_TO_ADDR
// if hex [ 1 ] then
39645: LD_VAR 0 4
39649: PUSH
39650: LD_INT 1
39652: ARRAY
39653: IFFALSE 39657
// continue ;
39655: GO 39545
// h := hex [ 2 ] ;
39657: LD_ADDR_VAR 0 13
39661: PUSH
39662: LD_VAR 0 4
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: ST_TO_ADDR
// if h + 7 < height then
39671: LD_VAR 0 13
39675: PUSH
39676: LD_INT 7
39678: PLUS
39679: PUSH
39680: LD_VAR 0 15
39684: LESS
39685: IFFALSE 39714
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39687: LD_ADDR_VAR 0 18
39691: PUSH
39692: LD_INT 7
39694: PUSH
39695: LD_INT 28
39697: PUSH
39698: LD_INT 45
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: PUSH
39706: LD_VAR 0 12
39710: ARRAY
39711: ST_TO_ADDR
// break ;
39712: GO 39716
// end ; end ; end ;
39714: GO 39545
39716: POP
39717: POP
// end ; if not weapon then
39718: LD_VAR 0 18
39722: NOT
39723: IFFALSE 39783
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39725: LD_ADDR_VAR 0 5
39729: PUSH
39730: LD_VAR 0 5
39734: PUSH
39735: LD_INT 11
39737: PUSH
39738: LD_INT 30
39740: PUSH
39741: LD_INT 49
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: LIST
39748: DIFF
39749: ST_TO_ADDR
// if not list then
39750: LD_VAR 0 5
39754: NOT
39755: IFFALSE 39759
// exit ;
39757: GO 39901
// weapon := list [ rand ( 1 , list ) ] ;
39759: LD_ADDR_VAR 0 18
39763: PUSH
39764: LD_VAR 0 5
39768: PUSH
39769: LD_INT 1
39771: PPUSH
39772: LD_VAR 0 5
39776: PPUSH
39777: CALL_OW 12
39781: ARRAY
39782: ST_TO_ADDR
// end ; if weapon then
39783: LD_VAR 0 18
39787: IFFALSE 39901
// begin tmp := CostOfWeapon ( weapon ) ;
39789: LD_ADDR_VAR 0 14
39793: PUSH
39794: LD_VAR 0 18
39798: PPUSH
39799: CALL_OW 451
39803: ST_TO_ADDR
// j := GetBase ( tower ) ;
39804: LD_ADDR_VAR 0 9
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 274
39818: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39819: LD_VAR 0 9
39823: PPUSH
39824: LD_INT 1
39826: PPUSH
39827: CALL_OW 275
39831: PUSH
39832: LD_VAR 0 14
39836: PUSH
39837: LD_INT 1
39839: ARRAY
39840: GREATEREQUAL
39841: PUSH
39842: LD_VAR 0 9
39846: PPUSH
39847: LD_INT 2
39849: PPUSH
39850: CALL_OW 275
39854: PUSH
39855: LD_VAR 0 14
39859: PUSH
39860: LD_INT 2
39862: ARRAY
39863: GREATEREQUAL
39864: AND
39865: PUSH
39866: LD_VAR 0 9
39870: PPUSH
39871: LD_INT 3
39873: PPUSH
39874: CALL_OW 275
39878: PUSH
39879: LD_VAR 0 14
39883: PUSH
39884: LD_INT 3
39886: ARRAY
39887: GREATEREQUAL
39888: AND
39889: IFFALSE 39901
// result := weapon ;
39891: LD_ADDR_VAR 0 3
39895: PUSH
39896: LD_VAR 0 18
39900: ST_TO_ADDR
// end ; end ;
39901: LD_VAR 0 3
39905: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39906: LD_INT 0
39908: PPUSH
39909: PPUSH
// result := true ;
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 1
39917: ST_TO_ADDR
// if array1 = array2 then
39918: LD_VAR 0 1
39922: PUSH
39923: LD_VAR 0 2
39927: EQUAL
39928: IFFALSE 39988
// begin for i = 1 to array1 do
39930: LD_ADDR_VAR 0 4
39934: PUSH
39935: DOUBLE
39936: LD_INT 1
39938: DEC
39939: ST_TO_ADDR
39940: LD_VAR 0 1
39944: PUSH
39945: FOR_TO
39946: IFFALSE 39984
// if array1 [ i ] <> array2 [ i ] then
39948: LD_VAR 0 1
39952: PUSH
39953: LD_VAR 0 4
39957: ARRAY
39958: PUSH
39959: LD_VAR 0 2
39963: PUSH
39964: LD_VAR 0 4
39968: ARRAY
39969: NONEQUAL
39970: IFFALSE 39982
// begin result := false ;
39972: LD_ADDR_VAR 0 3
39976: PUSH
39977: LD_INT 0
39979: ST_TO_ADDR
// break ;
39980: GO 39984
// end ;
39982: GO 39945
39984: POP
39985: POP
// end else
39986: GO 39996
// result := false ;
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: LD_INT 0
39995: ST_TO_ADDR
// end ;
39996: LD_VAR 0 3
40000: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40001: LD_INT 0
40003: PPUSH
40004: PPUSH
// if not array1 or not array2 then
40005: LD_VAR 0 1
40009: NOT
40010: PUSH
40011: LD_VAR 0 2
40015: NOT
40016: OR
40017: IFFALSE 40021
// exit ;
40019: GO 40085
// result := true ;
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_INT 1
40028: ST_TO_ADDR
// for i = 1 to array1 do
40029: LD_ADDR_VAR 0 4
40033: PUSH
40034: DOUBLE
40035: LD_INT 1
40037: DEC
40038: ST_TO_ADDR
40039: LD_VAR 0 1
40043: PUSH
40044: FOR_TO
40045: IFFALSE 40083
// if array1 [ i ] <> array2 [ i ] then
40047: LD_VAR 0 1
40051: PUSH
40052: LD_VAR 0 4
40056: ARRAY
40057: PUSH
40058: LD_VAR 0 2
40062: PUSH
40063: LD_VAR 0 4
40067: ARRAY
40068: NONEQUAL
40069: IFFALSE 40081
// begin result := false ;
40071: LD_ADDR_VAR 0 3
40075: PUSH
40076: LD_INT 0
40078: ST_TO_ADDR
// break ;
40079: GO 40083
// end ;
40081: GO 40044
40083: POP
40084: POP
// end ;
40085: LD_VAR 0 3
40089: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40090: LD_INT 0
40092: PPUSH
40093: PPUSH
40094: PPUSH
// pom := GetBase ( fac ) ;
40095: LD_ADDR_VAR 0 5
40099: PUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: CALL_OW 274
40109: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40110: LD_ADDR_VAR 0 4
40114: PUSH
40115: LD_VAR 0 2
40119: PUSH
40120: LD_INT 1
40122: ARRAY
40123: PPUSH
40124: LD_VAR 0 2
40128: PUSH
40129: LD_INT 2
40131: ARRAY
40132: PPUSH
40133: LD_VAR 0 2
40137: PUSH
40138: LD_INT 3
40140: ARRAY
40141: PPUSH
40142: LD_VAR 0 2
40146: PUSH
40147: LD_INT 4
40149: ARRAY
40150: PPUSH
40151: CALL_OW 449
40155: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40156: LD_ADDR_VAR 0 3
40160: PUSH
40161: LD_VAR 0 5
40165: PPUSH
40166: LD_INT 1
40168: PPUSH
40169: CALL_OW 275
40173: PUSH
40174: LD_VAR 0 4
40178: PUSH
40179: LD_INT 1
40181: ARRAY
40182: GREATEREQUAL
40183: PUSH
40184: LD_VAR 0 5
40188: PPUSH
40189: LD_INT 2
40191: PPUSH
40192: CALL_OW 275
40196: PUSH
40197: LD_VAR 0 4
40201: PUSH
40202: LD_INT 2
40204: ARRAY
40205: GREATEREQUAL
40206: AND
40207: PUSH
40208: LD_VAR 0 5
40212: PPUSH
40213: LD_INT 3
40215: PPUSH
40216: CALL_OW 275
40220: PUSH
40221: LD_VAR 0 4
40225: PUSH
40226: LD_INT 3
40228: ARRAY
40229: GREATEREQUAL
40230: AND
40231: ST_TO_ADDR
// end ;
40232: LD_VAR 0 3
40236: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40237: LD_INT 0
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
// pom := GetBase ( building ) ;
40243: LD_ADDR_VAR 0 3
40247: PUSH
40248: LD_VAR 0 1
40252: PPUSH
40253: CALL_OW 274
40257: ST_TO_ADDR
// if not pom then
40258: LD_VAR 0 3
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40437
// btype := GetBType ( building ) ;
40267: LD_ADDR_VAR 0 5
40271: PUSH
40272: LD_VAR 0 1
40276: PPUSH
40277: CALL_OW 266
40281: ST_TO_ADDR
// if btype = b_armoury then
40282: LD_VAR 0 5
40286: PUSH
40287: LD_INT 4
40289: EQUAL
40290: IFFALSE 40300
// btype := b_barracks ;
40292: LD_ADDR_VAR 0 5
40296: PUSH
40297: LD_INT 5
40299: ST_TO_ADDR
// if btype = b_depot then
40300: LD_VAR 0 5
40304: PUSH
40305: LD_INT 0
40307: EQUAL
40308: IFFALSE 40318
// btype := b_warehouse ;
40310: LD_ADDR_VAR 0 5
40314: PUSH
40315: LD_INT 1
40317: ST_TO_ADDR
// if btype = b_workshop then
40318: LD_VAR 0 5
40322: PUSH
40323: LD_INT 2
40325: EQUAL
40326: IFFALSE 40336
// btype := b_factory ;
40328: LD_ADDR_VAR 0 5
40332: PUSH
40333: LD_INT 3
40335: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40336: LD_ADDR_VAR 0 4
40340: PUSH
40341: LD_VAR 0 5
40345: PPUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 248
40355: PPUSH
40356: CALL_OW 450
40360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40361: LD_ADDR_VAR 0 2
40365: PUSH
40366: LD_VAR 0 3
40370: PPUSH
40371: LD_INT 1
40373: PPUSH
40374: CALL_OW 275
40378: PUSH
40379: LD_VAR 0 4
40383: PUSH
40384: LD_INT 1
40386: ARRAY
40387: GREATEREQUAL
40388: PUSH
40389: LD_VAR 0 3
40393: PPUSH
40394: LD_INT 2
40396: PPUSH
40397: CALL_OW 275
40401: PUSH
40402: LD_VAR 0 4
40406: PUSH
40407: LD_INT 2
40409: ARRAY
40410: GREATEREQUAL
40411: AND
40412: PUSH
40413: LD_VAR 0 3
40417: PPUSH
40418: LD_INT 3
40420: PPUSH
40421: CALL_OW 275
40425: PUSH
40426: LD_VAR 0 4
40430: PUSH
40431: LD_INT 3
40433: ARRAY
40434: GREATEREQUAL
40435: AND
40436: ST_TO_ADDR
// end ;
40437: LD_VAR 0 2
40441: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40442: LD_INT 0
40444: PPUSH
40445: PPUSH
40446: PPUSH
// pom := GetBase ( building ) ;
40447: LD_ADDR_VAR 0 4
40451: PUSH
40452: LD_VAR 0 1
40456: PPUSH
40457: CALL_OW 274
40461: ST_TO_ADDR
// if not pom then
40462: LD_VAR 0 4
40466: NOT
40467: IFFALSE 40471
// exit ;
40469: GO 40572
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40471: LD_ADDR_VAR 0 5
40475: PUSH
40476: LD_VAR 0 2
40480: PPUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: CALL_OW 248
40490: PPUSH
40491: CALL_OW 450
40495: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40496: LD_ADDR_VAR 0 3
40500: PUSH
40501: LD_VAR 0 4
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 275
40513: PUSH
40514: LD_VAR 0 5
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: GREATEREQUAL
40523: PUSH
40524: LD_VAR 0 4
40528: PPUSH
40529: LD_INT 2
40531: PPUSH
40532: CALL_OW 275
40536: PUSH
40537: LD_VAR 0 5
40541: PUSH
40542: LD_INT 2
40544: ARRAY
40545: GREATEREQUAL
40546: AND
40547: PUSH
40548: LD_VAR 0 4
40552: PPUSH
40553: LD_INT 3
40555: PPUSH
40556: CALL_OW 275
40560: PUSH
40561: LD_VAR 0 5
40565: PUSH
40566: LD_INT 3
40568: ARRAY
40569: GREATEREQUAL
40570: AND
40571: ST_TO_ADDR
// end ;
40572: LD_VAR 0 3
40576: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40577: LD_INT 0
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
// result := false ;
40590: LD_ADDR_VAR 0 8
40594: PUSH
40595: LD_INT 0
40597: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40598: LD_VAR 0 5
40602: NOT
40603: PUSH
40604: LD_VAR 0 1
40608: NOT
40609: OR
40610: PUSH
40611: LD_VAR 0 2
40615: NOT
40616: OR
40617: PUSH
40618: LD_VAR 0 3
40622: NOT
40623: OR
40624: IFFALSE 40628
// exit ;
40626: GO 41442
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40628: LD_ADDR_VAR 0 14
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: LD_VAR 0 2
40642: PPUSH
40643: LD_VAR 0 3
40647: PPUSH
40648: LD_VAR 0 4
40652: PPUSH
40653: LD_VAR 0 5
40657: PUSH
40658: LD_INT 1
40660: ARRAY
40661: PPUSH
40662: CALL_OW 248
40666: PPUSH
40667: LD_INT 0
40669: PPUSH
40670: CALL 42279 0 6
40674: ST_TO_ADDR
// if not hexes then
40675: LD_VAR 0 14
40679: NOT
40680: IFFALSE 40684
// exit ;
40682: GO 41442
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40684: LD_ADDR_VAR 0 17
40688: PUSH
40689: LD_VAR 0 5
40693: PPUSH
40694: LD_INT 22
40696: PUSH
40697: LD_VAR 0 13
40701: PPUSH
40702: CALL_OW 255
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 30
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 30
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PPUSH
40743: CALL_OW 72
40747: ST_TO_ADDR
// for i = 1 to hexes do
40748: LD_ADDR_VAR 0 9
40752: PUSH
40753: DOUBLE
40754: LD_INT 1
40756: DEC
40757: ST_TO_ADDR
40758: LD_VAR 0 14
40762: PUSH
40763: FOR_TO
40764: IFFALSE 41440
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40766: LD_ADDR_VAR 0 13
40770: PUSH
40771: LD_VAR 0 14
40775: PUSH
40776: LD_VAR 0 9
40780: ARRAY
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: PPUSH
40786: LD_VAR 0 14
40790: PUSH
40791: LD_VAR 0 9
40795: ARRAY
40796: PUSH
40797: LD_INT 2
40799: ARRAY
40800: PPUSH
40801: CALL_OW 428
40805: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40806: LD_VAR 0 14
40810: PUSH
40811: LD_VAR 0 9
40815: ARRAY
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: PPUSH
40821: LD_VAR 0 14
40825: PUSH
40826: LD_VAR 0 9
40830: ARRAY
40831: PUSH
40832: LD_INT 2
40834: ARRAY
40835: PPUSH
40836: CALL_OW 351
40840: PUSH
40841: LD_VAR 0 14
40845: PUSH
40846: LD_VAR 0 9
40850: ARRAY
40851: PUSH
40852: LD_INT 1
40854: ARRAY
40855: PPUSH
40856: LD_VAR 0 14
40860: PUSH
40861: LD_VAR 0 9
40865: ARRAY
40866: PUSH
40867: LD_INT 2
40869: ARRAY
40870: PPUSH
40871: CALL_OW 488
40875: NOT
40876: OR
40877: PUSH
40878: LD_VAR 0 13
40882: PPUSH
40883: CALL_OW 247
40887: PUSH
40888: LD_INT 3
40890: EQUAL
40891: OR
40892: IFFALSE 40898
// exit ;
40894: POP
40895: POP
40896: GO 41442
// if not tmp then
40898: LD_VAR 0 13
40902: NOT
40903: IFFALSE 40907
// continue ;
40905: GO 40763
// result := true ;
40907: LD_ADDR_VAR 0 8
40911: PUSH
40912: LD_INT 1
40914: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40915: LD_VAR 0 6
40919: PUSH
40920: LD_VAR 0 13
40924: PPUSH
40925: CALL_OW 247
40929: PUSH
40930: LD_INT 2
40932: EQUAL
40933: AND
40934: PUSH
40935: LD_VAR 0 13
40939: PPUSH
40940: CALL_OW 263
40944: PUSH
40945: LD_INT 1
40947: EQUAL
40948: AND
40949: IFFALSE 41113
// begin if IsDrivenBy ( tmp ) then
40951: LD_VAR 0 13
40955: PPUSH
40956: CALL_OW 311
40960: IFFALSE 40964
// continue ;
40962: GO 40763
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40964: LD_VAR 0 6
40968: PPUSH
40969: LD_INT 3
40971: PUSH
40972: LD_INT 60
40974: PUSH
40975: EMPTY
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: LD_INT 55
40987: PUSH
40988: EMPTY
40989: LIST
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PPUSH
40999: CALL_OW 72
41003: IFFALSE 41111
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41005: LD_ADDR_VAR 0 18
41009: PUSH
41010: LD_VAR 0 6
41014: PPUSH
41015: LD_INT 3
41017: PUSH
41018: LD_INT 60
41020: PUSH
41021: EMPTY
41022: LIST
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 3
41030: PUSH
41031: LD_INT 55
41033: PUSH
41034: EMPTY
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PPUSH
41045: CALL_OW 72
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: ST_TO_ADDR
// if IsInUnit ( driver ) then
41054: LD_VAR 0 18
41058: PPUSH
41059: CALL_OW 310
41063: IFFALSE 41074
// ComExit ( driver ) ;
41065: LD_VAR 0 18
41069: PPUSH
41070: CALL 65463 0 1
// AddComEnterUnit ( driver , tmp ) ;
41074: LD_VAR 0 18
41078: PPUSH
41079: LD_VAR 0 13
41083: PPUSH
41084: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41088: LD_VAR 0 18
41092: PPUSH
41093: LD_VAR 0 7
41097: PPUSH
41098: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41102: LD_VAR 0 18
41106: PPUSH
41107: CALL_OW 181
// end ; continue ;
41111: GO 40763
// end ; if not cleaners or not tmp in cleaners then
41113: LD_VAR 0 6
41117: NOT
41118: PUSH
41119: LD_VAR 0 13
41123: PUSH
41124: LD_VAR 0 6
41128: IN
41129: NOT
41130: OR
41131: IFFALSE 41438
// begin if dep then
41133: LD_VAR 0 17
41137: IFFALSE 41273
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41139: LD_ADDR_VAR 0 16
41143: PUSH
41144: LD_VAR 0 17
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: PPUSH
41153: CALL_OW 250
41157: PPUSH
41158: LD_VAR 0 17
41162: PUSH
41163: LD_INT 1
41165: ARRAY
41166: PPUSH
41167: CALL_OW 254
41171: PPUSH
41172: LD_INT 5
41174: PPUSH
41175: CALL_OW 272
41179: PUSH
41180: LD_VAR 0 17
41184: PUSH
41185: LD_INT 1
41187: ARRAY
41188: PPUSH
41189: CALL_OW 251
41193: PPUSH
41194: LD_VAR 0 17
41198: PUSH
41199: LD_INT 1
41201: ARRAY
41202: PPUSH
41203: CALL_OW 254
41207: PPUSH
41208: LD_INT 5
41210: PPUSH
41211: CALL_OW 273
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41220: LD_VAR 0 16
41224: PUSH
41225: LD_INT 1
41227: ARRAY
41228: PPUSH
41229: LD_VAR 0 16
41233: PUSH
41234: LD_INT 2
41236: ARRAY
41237: PPUSH
41238: CALL_OW 488
41242: IFFALSE 41273
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41244: LD_VAR 0 13
41248: PPUSH
41249: LD_VAR 0 16
41253: PUSH
41254: LD_INT 1
41256: ARRAY
41257: PPUSH
41258: LD_VAR 0 16
41262: PUSH
41263: LD_INT 2
41265: ARRAY
41266: PPUSH
41267: CALL_OW 111
// continue ;
41271: GO 40763
// end ; end ; r := GetDir ( tmp ) ;
41273: LD_ADDR_VAR 0 15
41277: PUSH
41278: LD_VAR 0 13
41282: PPUSH
41283: CALL_OW 254
41287: ST_TO_ADDR
// if r = 5 then
41288: LD_VAR 0 15
41292: PUSH
41293: LD_INT 5
41295: EQUAL
41296: IFFALSE 41306
// r := 0 ;
41298: LD_ADDR_VAR 0 15
41302: PUSH
41303: LD_INT 0
41305: ST_TO_ADDR
// for j = r to 5 do
41306: LD_ADDR_VAR 0 10
41310: PUSH
41311: DOUBLE
41312: LD_VAR 0 15
41316: DEC
41317: ST_TO_ADDR
41318: LD_INT 5
41320: PUSH
41321: FOR_TO
41322: IFFALSE 41436
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41324: LD_ADDR_VAR 0 11
41328: PUSH
41329: LD_VAR 0 13
41333: PPUSH
41334: CALL_OW 250
41338: PPUSH
41339: LD_VAR 0 10
41343: PPUSH
41344: LD_INT 2
41346: PPUSH
41347: CALL_OW 272
41351: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41352: LD_ADDR_VAR 0 12
41356: PUSH
41357: LD_VAR 0 13
41361: PPUSH
41362: CALL_OW 251
41366: PPUSH
41367: LD_VAR 0 10
41371: PPUSH
41372: LD_INT 2
41374: PPUSH
41375: CALL_OW 273
41379: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41380: LD_VAR 0 11
41384: PPUSH
41385: LD_VAR 0 12
41389: PPUSH
41390: CALL_OW 488
41394: PUSH
41395: LD_VAR 0 11
41399: PPUSH
41400: LD_VAR 0 12
41404: PPUSH
41405: CALL_OW 428
41409: NOT
41410: AND
41411: IFFALSE 41434
// begin ComMoveXY ( tmp , _x , _y ) ;
41413: LD_VAR 0 13
41417: PPUSH
41418: LD_VAR 0 11
41422: PPUSH
41423: LD_VAR 0 12
41427: PPUSH
41428: CALL_OW 111
// break ;
41432: GO 41436
// end ; end ;
41434: GO 41321
41436: POP
41437: POP
// end ; end ;
41438: GO 40763
41440: POP
41441: POP
// end ;
41442: LD_VAR 0 8
41446: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41447: LD_INT 0
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
// result := false ;
41459: LD_ADDR_VAR 0 6
41463: PUSH
41464: LD_INT 0
41466: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41467: LD_VAR 0 1
41471: NOT
41472: PUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 266
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: IN
41493: NOT
41494: OR
41495: PUSH
41496: LD_VAR 0 2
41500: NOT
41501: OR
41502: PUSH
41503: LD_VAR 0 5
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: LD_INT 3
41519: PUSH
41520: LD_INT 4
41522: PUSH
41523: LD_INT 5
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: IN
41534: NOT
41535: OR
41536: PUSH
41537: LD_VAR 0 3
41541: PPUSH
41542: LD_VAR 0 4
41546: PPUSH
41547: CALL_OW 488
41551: NOT
41552: OR
41553: IFFALSE 41557
// exit ;
41555: GO 42274
// pom := GetBase ( depot ) ;
41557: LD_ADDR_VAR 0 10
41561: PUSH
41562: LD_VAR 0 1
41566: PPUSH
41567: CALL_OW 274
41571: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41572: LD_ADDR_VAR 0 11
41576: PUSH
41577: LD_VAR 0 2
41581: PPUSH
41582: LD_VAR 0 1
41586: PPUSH
41587: CALL_OW 248
41591: PPUSH
41592: CALL_OW 450
41596: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41597: LD_VAR 0 10
41601: PPUSH
41602: LD_INT 1
41604: PPUSH
41605: CALL_OW 275
41609: PUSH
41610: LD_VAR 0 11
41614: PUSH
41615: LD_INT 1
41617: ARRAY
41618: GREATEREQUAL
41619: PUSH
41620: LD_VAR 0 10
41624: PPUSH
41625: LD_INT 2
41627: PPUSH
41628: CALL_OW 275
41632: PUSH
41633: LD_VAR 0 11
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: GREATEREQUAL
41642: AND
41643: PUSH
41644: LD_VAR 0 10
41648: PPUSH
41649: LD_INT 3
41651: PPUSH
41652: CALL_OW 275
41656: PUSH
41657: LD_VAR 0 11
41661: PUSH
41662: LD_INT 3
41664: ARRAY
41665: GREATEREQUAL
41666: AND
41667: NOT
41668: IFFALSE 41672
// exit ;
41670: GO 42274
// if GetBType ( depot ) = b_depot then
41672: LD_VAR 0 1
41676: PPUSH
41677: CALL_OW 266
41681: PUSH
41682: LD_INT 0
41684: EQUAL
41685: IFFALSE 41697
// dist := 28 else
41687: LD_ADDR_VAR 0 14
41691: PUSH
41692: LD_INT 28
41694: ST_TO_ADDR
41695: GO 41705
// dist := 36 ;
41697: LD_ADDR_VAR 0 14
41701: PUSH
41702: LD_INT 36
41704: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41705: LD_VAR 0 1
41709: PPUSH
41710: LD_VAR 0 3
41714: PPUSH
41715: LD_VAR 0 4
41719: PPUSH
41720: CALL_OW 297
41724: PUSH
41725: LD_VAR 0 14
41729: GREATER
41730: IFFALSE 41734
// exit ;
41732: GO 42274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41734: LD_ADDR_VAR 0 12
41738: PUSH
41739: LD_VAR 0 2
41743: PPUSH
41744: LD_VAR 0 3
41748: PPUSH
41749: LD_VAR 0 4
41753: PPUSH
41754: LD_VAR 0 5
41758: PPUSH
41759: LD_VAR 0 1
41763: PPUSH
41764: CALL_OW 248
41768: PPUSH
41769: LD_INT 0
41771: PPUSH
41772: CALL 42279 0 6
41776: ST_TO_ADDR
// if not hexes then
41777: LD_VAR 0 12
41781: NOT
41782: IFFALSE 41786
// exit ;
41784: GO 42274
// hex := GetHexInfo ( x , y ) ;
41786: LD_ADDR_VAR 0 15
41790: PUSH
41791: LD_VAR 0 3
41795: PPUSH
41796: LD_VAR 0 4
41800: PPUSH
41801: CALL_OW 546
41805: ST_TO_ADDR
// if hex [ 1 ] then
41806: LD_VAR 0 15
41810: PUSH
41811: LD_INT 1
41813: ARRAY
41814: IFFALSE 41818
// exit ;
41816: GO 42274
// height := hex [ 2 ] ;
41818: LD_ADDR_VAR 0 13
41822: PUSH
41823: LD_VAR 0 15
41827: PUSH
41828: LD_INT 2
41830: ARRAY
41831: ST_TO_ADDR
// for i = 1 to hexes do
41832: LD_ADDR_VAR 0 7
41836: PUSH
41837: DOUBLE
41838: LD_INT 1
41840: DEC
41841: ST_TO_ADDR
41842: LD_VAR 0 12
41846: PUSH
41847: FOR_TO
41848: IFFALSE 42178
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41850: LD_VAR 0 12
41854: PUSH
41855: LD_VAR 0 7
41859: ARRAY
41860: PUSH
41861: LD_INT 1
41863: ARRAY
41864: PPUSH
41865: LD_VAR 0 12
41869: PUSH
41870: LD_VAR 0 7
41874: ARRAY
41875: PUSH
41876: LD_INT 2
41878: ARRAY
41879: PPUSH
41880: CALL_OW 488
41884: NOT
41885: PUSH
41886: LD_VAR 0 12
41890: PUSH
41891: LD_VAR 0 7
41895: ARRAY
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PPUSH
41901: LD_VAR 0 12
41905: PUSH
41906: LD_VAR 0 7
41910: ARRAY
41911: PUSH
41912: LD_INT 2
41914: ARRAY
41915: PPUSH
41916: CALL_OW 428
41920: PUSH
41921: LD_INT 0
41923: GREATER
41924: OR
41925: PUSH
41926: LD_VAR 0 12
41930: PUSH
41931: LD_VAR 0 7
41935: ARRAY
41936: PUSH
41937: LD_INT 1
41939: ARRAY
41940: PPUSH
41941: LD_VAR 0 12
41945: PUSH
41946: LD_VAR 0 7
41950: ARRAY
41951: PUSH
41952: LD_INT 2
41954: ARRAY
41955: PPUSH
41956: CALL_OW 351
41960: OR
41961: IFFALSE 41967
// exit ;
41963: POP
41964: POP
41965: GO 42274
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41967: LD_ADDR_VAR 0 8
41971: PUSH
41972: LD_VAR 0 12
41976: PUSH
41977: LD_VAR 0 7
41981: ARRAY
41982: PUSH
41983: LD_INT 1
41985: ARRAY
41986: PPUSH
41987: LD_VAR 0 12
41991: PUSH
41992: LD_VAR 0 7
41996: ARRAY
41997: PUSH
41998: LD_INT 2
42000: ARRAY
42001: PPUSH
42002: CALL_OW 546
42006: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42007: LD_VAR 0 8
42011: PUSH
42012: LD_INT 1
42014: ARRAY
42015: PUSH
42016: LD_VAR 0 8
42020: PUSH
42021: LD_INT 2
42023: ARRAY
42024: PUSH
42025: LD_VAR 0 13
42029: PUSH
42030: LD_INT 2
42032: PLUS
42033: GREATER
42034: OR
42035: PUSH
42036: LD_VAR 0 8
42040: PUSH
42041: LD_INT 2
42043: ARRAY
42044: PUSH
42045: LD_VAR 0 13
42049: PUSH
42050: LD_INT 2
42052: MINUS
42053: LESS
42054: OR
42055: PUSH
42056: LD_VAR 0 8
42060: PUSH
42061: LD_INT 3
42063: ARRAY
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 8
42070: PUSH
42071: LD_INT 9
42073: PUSH
42074: LD_INT 10
42076: PUSH
42077: LD_INT 11
42079: PUSH
42080: LD_INT 12
42082: PUSH
42083: LD_INT 13
42085: PUSH
42086: LD_INT 16
42088: PUSH
42089: LD_INT 17
42091: PUSH
42092: LD_INT 18
42094: PUSH
42095: LD_INT 19
42097: PUSH
42098: LD_INT 20
42100: PUSH
42101: LD_INT 21
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: IN
42119: NOT
42120: OR
42121: PUSH
42122: LD_VAR 0 8
42126: PUSH
42127: LD_INT 5
42129: ARRAY
42130: NOT
42131: OR
42132: PUSH
42133: LD_VAR 0 8
42137: PUSH
42138: LD_INT 6
42140: ARRAY
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 7
42150: PUSH
42151: LD_INT 9
42153: PUSH
42154: LD_INT 10
42156: PUSH
42157: LD_INT 11
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: IN
42168: NOT
42169: OR
42170: IFFALSE 42176
// exit ;
42172: POP
42173: POP
42174: GO 42274
// end ;
42176: GO 41847
42178: POP
42179: POP
// side := GetSide ( depot ) ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 255
42194: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42195: LD_VAR 0 9
42199: PPUSH
42200: LD_VAR 0 3
42204: PPUSH
42205: LD_VAR 0 4
42209: PPUSH
42210: LD_INT 20
42212: PPUSH
42213: CALL 34595 0 4
42217: PUSH
42218: LD_INT 4
42220: ARRAY
42221: IFFALSE 42225
// exit ;
42223: GO 42274
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42225: LD_VAR 0 2
42229: PUSH
42230: LD_INT 29
42232: PUSH
42233: LD_INT 30
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: IN
42240: PUSH
42241: LD_VAR 0 3
42245: PPUSH
42246: LD_VAR 0 4
42250: PPUSH
42251: LD_VAR 0 9
42255: PPUSH
42256: CALL_OW 440
42260: NOT
42261: AND
42262: IFFALSE 42266
// exit ;
42264: GO 42274
// result := true ;
42266: LD_ADDR_VAR 0 6
42270: PUSH
42271: LD_INT 1
42273: ST_TO_ADDR
// end ;
42274: LD_VAR 0 6
42278: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42279: LD_INT 0
42281: PPUSH
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
// result = [ ] ;
42339: LD_ADDR_VAR 0 7
42343: PUSH
42344: EMPTY
42345: ST_TO_ADDR
// temp_list = [ ] ;
42346: LD_ADDR_VAR 0 9
42350: PUSH
42351: EMPTY
42352: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42353: LD_VAR 0 4
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: LD_INT 4
42372: PUSH
42373: LD_INT 5
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: IN
42384: NOT
42385: PUSH
42386: LD_VAR 0 1
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: IN
42401: PUSH
42402: LD_VAR 0 5
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: IN
42421: NOT
42422: AND
42423: OR
42424: IFFALSE 42428
// exit ;
42426: GO 60819
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42428: LD_VAR 0 1
42432: PUSH
42433: LD_INT 6
42435: PUSH
42436: LD_INT 7
42438: PUSH
42439: LD_INT 8
42441: PUSH
42442: LD_INT 13
42444: PUSH
42445: LD_INT 12
42447: PUSH
42448: LD_INT 15
42450: PUSH
42451: LD_INT 11
42453: PUSH
42454: LD_INT 14
42456: PUSH
42457: LD_INT 10
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: IN
42471: IFFALSE 42481
// btype = b_lab ;
42473: LD_ADDR_VAR 0 1
42477: PUSH
42478: LD_INT 6
42480: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42481: LD_VAR 0 6
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: IN
42500: NOT
42501: PUSH
42502: LD_VAR 0 1
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 6
42521: PUSH
42522: LD_INT 36
42524: PUSH
42525: LD_INT 4
42527: PUSH
42528: LD_INT 5
42530: PUSH
42531: LD_INT 31
42533: PUSH
42534: LD_INT 32
42536: PUSH
42537: LD_INT 33
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: IN
42553: NOT
42554: PUSH
42555: LD_VAR 0 6
42559: PUSH
42560: LD_INT 1
42562: EQUAL
42563: AND
42564: OR
42565: PUSH
42566: LD_VAR 0 1
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: IN
42581: NOT
42582: PUSH
42583: LD_VAR 0 6
42587: PUSH
42588: LD_INT 2
42590: EQUAL
42591: AND
42592: OR
42593: IFFALSE 42603
// mode = 0 ;
42595: LD_ADDR_VAR 0 6
42599: PUSH
42600: LD_INT 0
42602: ST_TO_ADDR
// case mode of 0 :
42603: LD_VAR 0 6
42607: PUSH
42608: LD_INT 0
42610: DOUBLE
42611: EQUAL
42612: IFTRUE 42616
42614: GO 54069
42616: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42617: LD_ADDR_VAR 0 11
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42810: LD_ADDR_VAR 0 12
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: NEG
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 3
42978: NEG
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43006: LD_ADDR_VAR 0 13
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: LD_INT 2
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43205: LD_ADDR_VAR 0 14
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43401: LD_ADDR_VAR 0 15
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43594: LD_ADDR_VAR 0 16
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: LD_INT 3
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43787: LD_ADDR_VAR 0 17
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: NEG
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44017: LD_ADDR_VAR 0 18
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44247: LD_ADDR_VAR 0 19
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44477: LD_ADDR_VAR 0 20
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44707: LD_ADDR_VAR 0 21
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44937: LD_ADDR_VAR 0 22
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45167: LD_ADDR_VAR 0 23
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45447: LD_ADDR_VAR 0 24
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45723: LD_ADDR_VAR 0 25
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 3
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45997: LD_ADDR_VAR 0 26
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46273: LD_ADDR_VAR 0 27
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 3
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46553: LD_ADDR_VAR 0 28
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46835: LD_ADDR_VAR 0 29
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47114: LD_ADDR_VAR 0 30
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47392: LD_ADDR_VAR 0 31
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 3
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47670: LD_ADDR_VAR 0 32
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 33
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: NEG
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48227: LD_ADDR_VAR 0 34
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48507: LD_ADDR_VAR 0 35
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48619: LD_ADDR_VAR 0 36
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48731: LD_ADDR_VAR 0 37
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48843: LD_ADDR_VAR 0 38
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48955: LD_ADDR_VAR 0 39
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49067: LD_ADDR_VAR 0 40
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49179: LD_ADDR_VAR 0 41
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: LD_INT 3
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49529: LD_ADDR_VAR 0 42
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 3
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 3
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 3
49838: NEG
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49879: LD_ADDR_VAR 0 43
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50227: LD_ADDR_VAR 0 44
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50577: LD_ADDR_VAR 0 45
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 3
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 3
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50927: LD_ADDR_VAR 0 46
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51275: LD_ADDR_VAR 0 47
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51426: LD_ADDR_VAR 0 48
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51573: LD_ADDR_VAR 0 49
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51717: LD_ADDR_VAR 0 50
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51861: LD_ADDR_VAR 0 51
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52008: LD_ADDR_VAR 0 52
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52159: LD_ADDR_VAR 0 53
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52389: LD_ADDR_VAR 0 54
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52619: LD_ADDR_VAR 0 55
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52849: LD_ADDR_VAR 0 56
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53079: LD_ADDR_VAR 0 57
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53309: LD_ADDR_VAR 0 58
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53539: LD_ADDR_VAR 0 59
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53627: LD_ADDR_VAR 0 60
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53715: LD_ADDR_VAR 0 61
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53803: LD_ADDR_VAR 0 62
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53891: LD_ADDR_VAR 0 63
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53979: LD_ADDR_VAR 0 64
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: ST_TO_ADDR
// end ; 1 :
54067: GO 59964
54069: LD_INT 1
54071: DOUBLE
54072: EQUAL
54073: IFTRUE 54077
54075: GO 56700
54077: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54078: LD_ADDR_VAR 0 11
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54122: LD_ADDR_VAR 0 12
54126: PUSH
54127: LD_INT 2
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54163: LD_ADDR_VAR 0 13
54167: PUSH
54168: LD_INT 3
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54203: LD_ADDR_VAR 0 14
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54244: LD_ADDR_VAR 0 15
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54288: LD_ADDR_VAR 0 16
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54334: LD_ADDR_VAR 0 17
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 3
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 3
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54378: LD_ADDR_VAR 0 18
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54419: LD_ADDR_VAR 0 19
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: LD_INT 3
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54459: LD_ADDR_VAR 0 20
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54500: LD_ADDR_VAR 0 21
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54544: LD_ADDR_VAR 0 22
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 3
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54590: LD_ADDR_VAR 0 23
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 4
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54634: LD_ADDR_VAR 0 24
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54675: LD_ADDR_VAR 0 25
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 4
54692: PUSH
54693: LD_INT 3
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 3
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54715: LD_ADDR_VAR 0 26
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 4
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54756: LD_ADDR_VAR 0 27
54760: PUSH
54761: LD_INT 3
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54800: LD_ADDR_VAR 0 28
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: LD_INT 4
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 4
54831: NEG
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54846: LD_ADDR_VAR 0 29
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 4
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 5
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 6
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 6
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55001: LD_ADDR_VAR 0 30
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 4
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 4
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 5
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 5
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 5
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 6
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 6
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55144: LD_ADDR_VAR 0 31
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 4
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: PUSH
55192: LD_INT 4
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 5
55211: PUSH
55212: LD_INT 4
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 5
55221: PUSH
55222: LD_INT 5
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: LD_INT 5
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 6
55241: PUSH
55242: LD_INT 5
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 6
55251: PUSH
55252: LD_INT 6
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 5
55261: PUSH
55262: LD_INT 6
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55283: LD_ADDR_VAR 0 32
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 3
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 4
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 4
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 5
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 6
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 6
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 5
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55426: LD_ADDR_VAR 0 33
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 5
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 5
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 5
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 6
55546: NEG
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 6
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55581: LD_ADDR_VAR 0 34
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: LD_INT 4
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: NEG
55637: PUSH
55638: LD_INT 3
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 4
55648: NEG
55649: PUSH
55650: LD_INT 4
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 4
55660: NEG
55661: PUSH
55662: LD_INT 5
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 5
55672: NEG
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 5
55684: NEG
55685: PUSH
55686: LD_INT 5
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 5
55696: NEG
55697: PUSH
55698: LD_INT 6
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 6
55708: NEG
55709: PUSH
55710: LD_INT 5
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 6
55720: NEG
55721: PUSH
55722: LD_INT 6
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55744: LD_ADDR_VAR 0 41
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55788: LD_ADDR_VAR 0 42
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55829: LD_ADDR_VAR 0 43
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55869: LD_ADDR_VAR 0 44
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55910: LD_ADDR_VAR 0 45
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55954: LD_ADDR_VAR 0 46
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56000: LD_ADDR_VAR 0 47
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56033: LD_ADDR_VAR 0 48
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56064: LD_ADDR_VAR 0 49
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56093: LD_ADDR_VAR 0 50
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 3
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56122: LD_ADDR_VAR 0 51
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56153: LD_ADDR_VAR 0 52
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56186: LD_ADDR_VAR 0 53
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56230: LD_ADDR_VAR 0 54
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56271: LD_ADDR_VAR 0 55
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 3
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56311: LD_ADDR_VAR 0 56
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56352: LD_ADDR_VAR 0 57
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56396: LD_ADDR_VAR 0 58
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: NEG
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56442: LD_ADDR_VAR 0 59
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: LIST
56485: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56486: LD_ADDR_VAR 0 60
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56527: LD_ADDR_VAR 0 61
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56567: LD_ADDR_VAR 0 62
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56608: LD_ADDR_VAR 0 63
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56652: LD_ADDR_VAR 0 64
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// end ; 2 :
56698: GO 59964
56700: LD_INT 2
56702: DOUBLE
56703: EQUAL
56704: IFTRUE 56708
56706: GO 59963
56708: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56709: LD_ADDR_VAR 0 29
56713: PUSH
56714: LD_INT 4
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 5
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 4
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 5
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 4
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: PUSH
56840: LD_INT 4
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: LD_INT 4
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 4
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 4
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 5
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 5
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 5
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 4
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 4
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 4
57094: NEG
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 4
57106: NEG
57107: PUSH
57108: LD_INT 5
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 4
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 4
57142: NEG
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 5
57154: NEG
57155: PUSH
57156: LD_INT 4
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 5
57166: NEG
57167: PUSH
57168: LD_INT 5
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: LD_INT 5
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 5
57190: NEG
57191: PUSH
57192: LD_INT 3
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57247: LD_ADDR_VAR 0 30
57251: PUSH
57252: LD_INT 4
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 4
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 5
57274: PUSH
57275: LD_INT 4
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 5
57284: PUSH
57285: LD_INT 5
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 4
57294: PUSH
57295: LD_INT 5
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 4
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 5
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 4
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 4
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 5
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 5
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: LD_INT 4
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: NEG
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 4
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: NEG
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 5
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 4
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 5
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 5
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57794: LD_ADDR_VAR 0 31
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 4
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 5
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 5
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 4
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 5
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 4
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: NEG
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: NEG
58009: PUSH
58010: LD_INT 5
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: LD_INT 4
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 4
58044: NEG
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 5
58056: NEG
58057: PUSH
58058: LD_INT 4
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 5
58068: NEG
58069: PUSH
58070: LD_INT 5
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: LD_INT 5
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 5
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 4
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 4
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 5
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 5
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 5
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58344: LD_ADDR_VAR 0 32
58348: PUSH
58349: LD_INT 4
58351: NEG
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 4
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 4
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 5
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 5
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 4
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: NEG
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: NEG
58526: PUSH
58527: LD_INT 4
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 4
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 4
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 5
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 5
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 5
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 4
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 4
58756: PUSH
58757: LD_INT 4
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 4
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 5
58776: PUSH
58777: LD_INT 4
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: PUSH
58787: LD_INT 5
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: LD_INT 5
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 5
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: LD_INT 5
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58891: LD_ADDR_VAR 0 33
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: NEG
58911: PUSH
58912: LD_INT 5
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 4
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 5
58958: NEG
58959: PUSH
58960: LD_INT 4
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 5
58970: NEG
58971: PUSH
58972: LD_INT 5
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: NEG
58983: PUSH
58984: LD_INT 5
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 5
58994: NEG
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 4
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 2
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 4
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 4
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 5
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 5
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 4
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 5
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 3
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 4
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: LD_INT 4
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 4
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 5
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59429: LD_ADDR_VAR 0 34
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 5
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 5
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 3
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 5
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 4
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 4
59631: PUSH
59632: LD_INT 4
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 4
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 5
59651: PUSH
59652: LD_INT 4
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 5
59661: PUSH
59662: LD_INT 5
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: LD_INT 5
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: LD_INT 4
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 5
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: LD_INT 5
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 4
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 4
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 4
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 4
59814: NEG
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 5
59870: NEG
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 5
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 5
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: ST_TO_ADDR
// end ; end ;
59961: GO 59964
59963: POP
// case btype of b_depot , b_warehouse :
59964: LD_VAR 0 1
59968: PUSH
59969: LD_INT 0
59971: DOUBLE
59972: EQUAL
59973: IFTRUE 59983
59975: LD_INT 1
59977: DOUBLE
59978: EQUAL
59979: IFTRUE 59983
59981: GO 60184
59983: POP
// case nation of nation_american :
59984: LD_VAR 0 5
59988: PUSH
59989: LD_INT 1
59991: DOUBLE
59992: EQUAL
59993: IFTRUE 59997
59995: GO 60053
59997: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59998: LD_ADDR_VAR 0 9
60002: PUSH
60003: LD_VAR 0 11
60007: PUSH
60008: LD_VAR 0 12
60012: PUSH
60013: LD_VAR 0 13
60017: PUSH
60018: LD_VAR 0 14
60022: PUSH
60023: LD_VAR 0 15
60027: PUSH
60028: LD_VAR 0 16
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: PUSH
60041: LD_VAR 0 4
60045: PUSH
60046: LD_INT 1
60048: PLUS
60049: ARRAY
60050: ST_TO_ADDR
60051: GO 60182
60053: LD_INT 2
60055: DOUBLE
60056: EQUAL
60057: IFTRUE 60061
60059: GO 60117
60061: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60062: LD_ADDR_VAR 0 9
60066: PUSH
60067: LD_VAR 0 17
60071: PUSH
60072: LD_VAR 0 18
60076: PUSH
60077: LD_VAR 0 19
60081: PUSH
60082: LD_VAR 0 20
60086: PUSH
60087: LD_VAR 0 21
60091: PUSH
60092: LD_VAR 0 22
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: PUSH
60105: LD_VAR 0 4
60109: PUSH
60110: LD_INT 1
60112: PLUS
60113: ARRAY
60114: ST_TO_ADDR
60115: GO 60182
60117: LD_INT 3
60119: DOUBLE
60120: EQUAL
60121: IFTRUE 60125
60123: GO 60181
60125: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60126: LD_ADDR_VAR 0 9
60130: PUSH
60131: LD_VAR 0 23
60135: PUSH
60136: LD_VAR 0 24
60140: PUSH
60141: LD_VAR 0 25
60145: PUSH
60146: LD_VAR 0 26
60150: PUSH
60151: LD_VAR 0 27
60155: PUSH
60156: LD_VAR 0 28
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: PUSH
60169: LD_VAR 0 4
60173: PUSH
60174: LD_INT 1
60176: PLUS
60177: ARRAY
60178: ST_TO_ADDR
60179: GO 60182
60181: POP
60182: GO 60737
60184: LD_INT 2
60186: DOUBLE
60187: EQUAL
60188: IFTRUE 60198
60190: LD_INT 3
60192: DOUBLE
60193: EQUAL
60194: IFTRUE 60198
60196: GO 60254
60198: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60199: LD_ADDR_VAR 0 9
60203: PUSH
60204: LD_VAR 0 29
60208: PUSH
60209: LD_VAR 0 30
60213: PUSH
60214: LD_VAR 0 31
60218: PUSH
60219: LD_VAR 0 32
60223: PUSH
60224: LD_VAR 0 33
60228: PUSH
60229: LD_VAR 0 34
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: PUSH
60242: LD_VAR 0 4
60246: PUSH
60247: LD_INT 1
60249: PLUS
60250: ARRAY
60251: ST_TO_ADDR
60252: GO 60737
60254: LD_INT 16
60256: DOUBLE
60257: EQUAL
60258: IFTRUE 60316
60260: LD_INT 17
60262: DOUBLE
60263: EQUAL
60264: IFTRUE 60316
60266: LD_INT 18
60268: DOUBLE
60269: EQUAL
60270: IFTRUE 60316
60272: LD_INT 19
60274: DOUBLE
60275: EQUAL
60276: IFTRUE 60316
60278: LD_INT 22
60280: DOUBLE
60281: EQUAL
60282: IFTRUE 60316
60284: LD_INT 20
60286: DOUBLE
60287: EQUAL
60288: IFTRUE 60316
60290: LD_INT 21
60292: DOUBLE
60293: EQUAL
60294: IFTRUE 60316
60296: LD_INT 23
60298: DOUBLE
60299: EQUAL
60300: IFTRUE 60316
60302: LD_INT 24
60304: DOUBLE
60305: EQUAL
60306: IFTRUE 60316
60308: LD_INT 25
60310: DOUBLE
60311: EQUAL
60312: IFTRUE 60316
60314: GO 60372
60316: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60317: LD_ADDR_VAR 0 9
60321: PUSH
60322: LD_VAR 0 35
60326: PUSH
60327: LD_VAR 0 36
60331: PUSH
60332: LD_VAR 0 37
60336: PUSH
60337: LD_VAR 0 38
60341: PUSH
60342: LD_VAR 0 39
60346: PUSH
60347: LD_VAR 0 40
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: PUSH
60360: LD_VAR 0 4
60364: PUSH
60365: LD_INT 1
60367: PLUS
60368: ARRAY
60369: ST_TO_ADDR
60370: GO 60737
60372: LD_INT 6
60374: DOUBLE
60375: EQUAL
60376: IFTRUE 60428
60378: LD_INT 7
60380: DOUBLE
60381: EQUAL
60382: IFTRUE 60428
60384: LD_INT 8
60386: DOUBLE
60387: EQUAL
60388: IFTRUE 60428
60390: LD_INT 13
60392: DOUBLE
60393: EQUAL
60394: IFTRUE 60428
60396: LD_INT 12
60398: DOUBLE
60399: EQUAL
60400: IFTRUE 60428
60402: LD_INT 15
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60428
60408: LD_INT 11
60410: DOUBLE
60411: EQUAL
60412: IFTRUE 60428
60414: LD_INT 14
60416: DOUBLE
60417: EQUAL
60418: IFTRUE 60428
60420: LD_INT 10
60422: DOUBLE
60423: EQUAL
60424: IFTRUE 60428
60426: GO 60484
60428: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60429: LD_ADDR_VAR 0 9
60433: PUSH
60434: LD_VAR 0 41
60438: PUSH
60439: LD_VAR 0 42
60443: PUSH
60444: LD_VAR 0 43
60448: PUSH
60449: LD_VAR 0 44
60453: PUSH
60454: LD_VAR 0 45
60458: PUSH
60459: LD_VAR 0 46
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: PUSH
60472: LD_VAR 0 4
60476: PUSH
60477: LD_INT 1
60479: PLUS
60480: ARRAY
60481: ST_TO_ADDR
60482: GO 60737
60484: LD_INT 36
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60492
60490: GO 60548
60492: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60493: LD_ADDR_VAR 0 9
60497: PUSH
60498: LD_VAR 0 47
60502: PUSH
60503: LD_VAR 0 48
60507: PUSH
60508: LD_VAR 0 49
60512: PUSH
60513: LD_VAR 0 50
60517: PUSH
60518: LD_VAR 0 51
60522: PUSH
60523: LD_VAR 0 52
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: PUSH
60536: LD_VAR 0 4
60540: PUSH
60541: LD_INT 1
60543: PLUS
60544: ARRAY
60545: ST_TO_ADDR
60546: GO 60737
60548: LD_INT 4
60550: DOUBLE
60551: EQUAL
60552: IFTRUE 60574
60554: LD_INT 5
60556: DOUBLE
60557: EQUAL
60558: IFTRUE 60574
60560: LD_INT 34
60562: DOUBLE
60563: EQUAL
60564: IFTRUE 60574
60566: LD_INT 37
60568: DOUBLE
60569: EQUAL
60570: IFTRUE 60574
60572: GO 60630
60574: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60575: LD_ADDR_VAR 0 9
60579: PUSH
60580: LD_VAR 0 53
60584: PUSH
60585: LD_VAR 0 54
60589: PUSH
60590: LD_VAR 0 55
60594: PUSH
60595: LD_VAR 0 56
60599: PUSH
60600: LD_VAR 0 57
60604: PUSH
60605: LD_VAR 0 58
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: LD_VAR 0 4
60622: PUSH
60623: LD_INT 1
60625: PLUS
60626: ARRAY
60627: ST_TO_ADDR
60628: GO 60737
60630: LD_INT 31
60632: DOUBLE
60633: EQUAL
60634: IFTRUE 60680
60636: LD_INT 32
60638: DOUBLE
60639: EQUAL
60640: IFTRUE 60680
60642: LD_INT 33
60644: DOUBLE
60645: EQUAL
60646: IFTRUE 60680
60648: LD_INT 27
60650: DOUBLE
60651: EQUAL
60652: IFTRUE 60680
60654: LD_INT 26
60656: DOUBLE
60657: EQUAL
60658: IFTRUE 60680
60660: LD_INT 28
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60680
60666: LD_INT 29
60668: DOUBLE
60669: EQUAL
60670: IFTRUE 60680
60672: LD_INT 30
60674: DOUBLE
60675: EQUAL
60676: IFTRUE 60680
60678: GO 60736
60680: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60681: LD_ADDR_VAR 0 9
60685: PUSH
60686: LD_VAR 0 59
60690: PUSH
60691: LD_VAR 0 60
60695: PUSH
60696: LD_VAR 0 61
60700: PUSH
60701: LD_VAR 0 62
60705: PUSH
60706: LD_VAR 0 63
60710: PUSH
60711: LD_VAR 0 64
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: PUSH
60724: LD_VAR 0 4
60728: PUSH
60729: LD_INT 1
60731: PLUS
60732: ARRAY
60733: ST_TO_ADDR
60734: GO 60737
60736: POP
// temp_list2 = [ ] ;
60737: LD_ADDR_VAR 0 10
60741: PUSH
60742: EMPTY
60743: ST_TO_ADDR
// for i in temp_list do
60744: LD_ADDR_VAR 0 8
60748: PUSH
60749: LD_VAR 0 9
60753: PUSH
60754: FOR_IN
60755: IFFALSE 60807
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60757: LD_ADDR_VAR 0 10
60761: PUSH
60762: LD_VAR 0 10
60766: PUSH
60767: LD_VAR 0 8
60771: PUSH
60772: LD_INT 1
60774: ARRAY
60775: PUSH
60776: LD_VAR 0 2
60780: PLUS
60781: PUSH
60782: LD_VAR 0 8
60786: PUSH
60787: LD_INT 2
60789: ARRAY
60790: PUSH
60791: LD_VAR 0 3
60795: PLUS
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: ADD
60804: ST_TO_ADDR
60805: GO 60754
60807: POP
60808: POP
// result = temp_list2 ;
60809: LD_ADDR_VAR 0 7
60813: PUSH
60814: LD_VAR 0 10
60818: ST_TO_ADDR
// end ;
60819: LD_VAR 0 7
60823: RET
// export function EnemyInRange ( unit , dist ) ; begin
60824: LD_INT 0
60826: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60827: LD_ADDR_VAR 0 3
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: CALL_OW 255
60841: PPUSH
60842: LD_VAR 0 1
60846: PPUSH
60847: CALL_OW 250
60851: PPUSH
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 251
60861: PPUSH
60862: LD_VAR 0 2
60866: PPUSH
60867: CALL 34595 0 4
60871: PUSH
60872: LD_INT 4
60874: ARRAY
60875: ST_TO_ADDR
// end ;
60876: LD_VAR 0 3
60880: RET
// export function PlayerSeeMe ( unit ) ; begin
60881: LD_INT 0
60883: PPUSH
// result := See ( your_side , unit ) ;
60884: LD_ADDR_VAR 0 2
60888: PUSH
60889: LD_OWVAR 2
60893: PPUSH
60894: LD_VAR 0 1
60898: PPUSH
60899: CALL_OW 292
60903: ST_TO_ADDR
// end ;
60904: LD_VAR 0 2
60908: RET
// export function ReverseDir ( unit ) ; begin
60909: LD_INT 0
60911: PPUSH
// if not unit then
60912: LD_VAR 0 1
60916: NOT
60917: IFFALSE 60921
// exit ;
60919: GO 60944
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60921: LD_ADDR_VAR 0 2
60925: PUSH
60926: LD_VAR 0 1
60930: PPUSH
60931: CALL_OW 254
60935: PUSH
60936: LD_INT 3
60938: PLUS
60939: PUSH
60940: LD_INT 6
60942: MOD
60943: ST_TO_ADDR
// end ;
60944: LD_VAR 0 2
60948: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60949: LD_INT 0
60951: PPUSH
60952: PPUSH
60953: PPUSH
60954: PPUSH
60955: PPUSH
// if not hexes then
60956: LD_VAR 0 2
60960: NOT
60961: IFFALSE 60965
// exit ;
60963: GO 61113
// dist := 9999 ;
60965: LD_ADDR_VAR 0 5
60969: PUSH
60970: LD_INT 9999
60972: ST_TO_ADDR
// for i = 1 to hexes do
60973: LD_ADDR_VAR 0 4
60977: PUSH
60978: DOUBLE
60979: LD_INT 1
60981: DEC
60982: ST_TO_ADDR
60983: LD_VAR 0 2
60987: PUSH
60988: FOR_TO
60989: IFFALSE 61101
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60991: LD_VAR 0 1
60995: PPUSH
60996: LD_VAR 0 2
61000: PUSH
61001: LD_VAR 0 4
61005: ARRAY
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PPUSH
61011: LD_VAR 0 2
61015: PUSH
61016: LD_VAR 0 4
61020: ARRAY
61021: PUSH
61022: LD_INT 2
61024: ARRAY
61025: PPUSH
61026: CALL_OW 297
61030: PUSH
61031: LD_VAR 0 5
61035: LESS
61036: IFFALSE 61099
// begin hex := hexes [ i ] ;
61038: LD_ADDR_VAR 0 7
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_VAR 0 4
61052: ARRAY
61053: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61054: LD_ADDR_VAR 0 5
61058: PUSH
61059: LD_VAR 0 1
61063: PPUSH
61064: LD_VAR 0 2
61068: PUSH
61069: LD_VAR 0 4
61073: ARRAY
61074: PUSH
61075: LD_INT 1
61077: ARRAY
61078: PPUSH
61079: LD_VAR 0 2
61083: PUSH
61084: LD_VAR 0 4
61088: ARRAY
61089: PUSH
61090: LD_INT 2
61092: ARRAY
61093: PPUSH
61094: CALL_OW 297
61098: ST_TO_ADDR
// end ; end ;
61099: GO 60988
61101: POP
61102: POP
// result := hex ;
61103: LD_ADDR_VAR 0 3
61107: PUSH
61108: LD_VAR 0 7
61112: ST_TO_ADDR
// end ;
61113: LD_VAR 0 3
61117: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61118: LD_INT 0
61120: PPUSH
61121: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61122: LD_VAR 0 1
61126: NOT
61127: PUSH
61128: LD_VAR 0 1
61132: PUSH
61133: LD_INT 21
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 23
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PPUSH
61157: CALL_OW 69
61161: IN
61162: NOT
61163: OR
61164: IFFALSE 61168
// exit ;
61166: GO 61215
// for i = 1 to 3 do
61168: LD_ADDR_VAR 0 3
61172: PUSH
61173: DOUBLE
61174: LD_INT 1
61176: DEC
61177: ST_TO_ADDR
61178: LD_INT 3
61180: PUSH
61181: FOR_TO
61182: IFFALSE 61213
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61184: LD_VAR 0 1
61188: PPUSH
61189: CALL_OW 250
61193: PPUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: CALL_OW 251
61203: PPUSH
61204: LD_INT 1
61206: PPUSH
61207: CALL_OW 453
61211: GO 61181
61213: POP
61214: POP
// end ;
61215: LD_VAR 0 2
61219: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61220: LD_INT 0
61222: PPUSH
61223: PPUSH
61224: PPUSH
61225: PPUSH
61226: PPUSH
61227: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61228: LD_VAR 0 1
61232: NOT
61233: PUSH
61234: LD_VAR 0 2
61238: NOT
61239: OR
61240: PUSH
61241: LD_VAR 0 1
61245: PPUSH
61246: CALL_OW 314
61250: OR
61251: IFFALSE 61255
// exit ;
61253: GO 61696
// x := GetX ( enemy_unit ) ;
61255: LD_ADDR_VAR 0 7
61259: PUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: CALL_OW 250
61269: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61270: LD_ADDR_VAR 0 8
61274: PUSH
61275: LD_VAR 0 2
61279: PPUSH
61280: CALL_OW 251
61284: ST_TO_ADDR
// if not x or not y then
61285: LD_VAR 0 7
61289: NOT
61290: PUSH
61291: LD_VAR 0 8
61295: NOT
61296: OR
61297: IFFALSE 61301
// exit ;
61299: GO 61696
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61301: LD_ADDR_VAR 0 6
61305: PUSH
61306: LD_VAR 0 7
61310: PPUSH
61311: LD_INT 0
61313: PPUSH
61314: LD_INT 4
61316: PPUSH
61317: CALL_OW 272
61321: PUSH
61322: LD_VAR 0 8
61326: PPUSH
61327: LD_INT 0
61329: PPUSH
61330: LD_INT 4
61332: PPUSH
61333: CALL_OW 273
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_VAR 0 7
61346: PPUSH
61347: LD_INT 1
61349: PPUSH
61350: LD_INT 4
61352: PPUSH
61353: CALL_OW 272
61357: PUSH
61358: LD_VAR 0 8
61362: PPUSH
61363: LD_INT 1
61365: PPUSH
61366: LD_INT 4
61368: PPUSH
61369: CALL_OW 273
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_VAR 0 7
61382: PPUSH
61383: LD_INT 2
61385: PPUSH
61386: LD_INT 4
61388: PPUSH
61389: CALL_OW 272
61393: PUSH
61394: LD_VAR 0 8
61398: PPUSH
61399: LD_INT 2
61401: PPUSH
61402: LD_INT 4
61404: PPUSH
61405: CALL_OW 273
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_VAR 0 7
61418: PPUSH
61419: LD_INT 3
61421: PPUSH
61422: LD_INT 4
61424: PPUSH
61425: CALL_OW 272
61429: PUSH
61430: LD_VAR 0 8
61434: PPUSH
61435: LD_INT 3
61437: PPUSH
61438: LD_INT 4
61440: PPUSH
61441: CALL_OW 273
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_VAR 0 7
61454: PPUSH
61455: LD_INT 4
61457: PPUSH
61458: LD_INT 4
61460: PPUSH
61461: CALL_OW 272
61465: PUSH
61466: LD_VAR 0 8
61470: PPUSH
61471: LD_INT 4
61473: PPUSH
61474: LD_INT 4
61476: PPUSH
61477: CALL_OW 273
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_VAR 0 7
61490: PPUSH
61491: LD_INT 5
61493: PPUSH
61494: LD_INT 4
61496: PPUSH
61497: CALL_OW 272
61501: PUSH
61502: LD_VAR 0 8
61506: PPUSH
61507: LD_INT 5
61509: PPUSH
61510: LD_INT 4
61512: PPUSH
61513: CALL_OW 273
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: ST_TO_ADDR
// for i = tmp downto 1 do
61530: LD_ADDR_VAR 0 4
61534: PUSH
61535: DOUBLE
61536: LD_VAR 0 6
61540: INC
61541: ST_TO_ADDR
61542: LD_INT 1
61544: PUSH
61545: FOR_DOWNTO
61546: IFFALSE 61647
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61548: LD_VAR 0 6
61552: PUSH
61553: LD_VAR 0 4
61557: ARRAY
61558: PUSH
61559: LD_INT 1
61561: ARRAY
61562: PPUSH
61563: LD_VAR 0 6
61567: PUSH
61568: LD_VAR 0 4
61572: ARRAY
61573: PUSH
61574: LD_INT 2
61576: ARRAY
61577: PPUSH
61578: CALL_OW 488
61582: NOT
61583: PUSH
61584: LD_VAR 0 6
61588: PUSH
61589: LD_VAR 0 4
61593: ARRAY
61594: PUSH
61595: LD_INT 1
61597: ARRAY
61598: PPUSH
61599: LD_VAR 0 6
61603: PUSH
61604: LD_VAR 0 4
61608: ARRAY
61609: PUSH
61610: LD_INT 2
61612: ARRAY
61613: PPUSH
61614: CALL_OW 428
61618: PUSH
61619: LD_INT 0
61621: NONEQUAL
61622: OR
61623: IFFALSE 61645
// tmp := Delete ( tmp , i ) ;
61625: LD_ADDR_VAR 0 6
61629: PUSH
61630: LD_VAR 0 6
61634: PPUSH
61635: LD_VAR 0 4
61639: PPUSH
61640: CALL_OW 3
61644: ST_TO_ADDR
61645: GO 61545
61647: POP
61648: POP
// j := GetClosestHex ( unit , tmp ) ;
61649: LD_ADDR_VAR 0 5
61653: PUSH
61654: LD_VAR 0 1
61658: PPUSH
61659: LD_VAR 0 6
61663: PPUSH
61664: CALL 60949 0 2
61668: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61669: LD_VAR 0 1
61673: PPUSH
61674: LD_VAR 0 5
61678: PUSH
61679: LD_INT 1
61681: ARRAY
61682: PPUSH
61683: LD_VAR 0 5
61687: PUSH
61688: LD_INT 2
61690: ARRAY
61691: PPUSH
61692: CALL_OW 111
// end ;
61696: LD_VAR 0 3
61700: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61701: LD_INT 0
61703: PPUSH
61704: PPUSH
61705: PPUSH
// uc_side = 0 ;
61706: LD_ADDR_OWVAR 20
61710: PUSH
61711: LD_INT 0
61713: ST_TO_ADDR
// uc_nation = 0 ;
61714: LD_ADDR_OWVAR 21
61718: PUSH
61719: LD_INT 0
61721: ST_TO_ADDR
// InitHc_All ( ) ;
61722: CALL_OW 584
// InitVc ;
61726: CALL_OW 20
// if mastodonts then
61730: LD_VAR 0 6
61734: IFFALSE 61801
// for i = 1 to mastodonts do
61736: LD_ADDR_VAR 0 11
61740: PUSH
61741: DOUBLE
61742: LD_INT 1
61744: DEC
61745: ST_TO_ADDR
61746: LD_VAR 0 6
61750: PUSH
61751: FOR_TO
61752: IFFALSE 61799
// begin vc_chassis := 31 ;
61754: LD_ADDR_OWVAR 37
61758: PUSH
61759: LD_INT 31
61761: ST_TO_ADDR
// vc_control := control_rider ;
61762: LD_ADDR_OWVAR 38
61766: PUSH
61767: LD_INT 4
61769: ST_TO_ADDR
// animal := CreateVehicle ;
61770: LD_ADDR_VAR 0 12
61774: PUSH
61775: CALL_OW 45
61779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61780: LD_VAR 0 12
61784: PPUSH
61785: LD_VAR 0 8
61789: PPUSH
61790: LD_INT 0
61792: PPUSH
61793: CALL 63989 0 3
// end ;
61797: GO 61751
61799: POP
61800: POP
// if horses then
61801: LD_VAR 0 5
61805: IFFALSE 61872
// for i = 1 to horses do
61807: LD_ADDR_VAR 0 11
61811: PUSH
61812: DOUBLE
61813: LD_INT 1
61815: DEC
61816: ST_TO_ADDR
61817: LD_VAR 0 5
61821: PUSH
61822: FOR_TO
61823: IFFALSE 61870
// begin hc_class := 21 ;
61825: LD_ADDR_OWVAR 28
61829: PUSH
61830: LD_INT 21
61832: ST_TO_ADDR
// hc_gallery :=  ;
61833: LD_ADDR_OWVAR 33
61837: PUSH
61838: LD_STRING 
61840: ST_TO_ADDR
// animal := CreateHuman ;
61841: LD_ADDR_VAR 0 12
61845: PUSH
61846: CALL_OW 44
61850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61851: LD_VAR 0 12
61855: PPUSH
61856: LD_VAR 0 8
61860: PPUSH
61861: LD_INT 0
61863: PPUSH
61864: CALL 63989 0 3
// end ;
61868: GO 61822
61870: POP
61871: POP
// if birds then
61872: LD_VAR 0 1
61876: IFFALSE 61943
// for i = 1 to birds do
61878: LD_ADDR_VAR 0 11
61882: PUSH
61883: DOUBLE
61884: LD_INT 1
61886: DEC
61887: ST_TO_ADDR
61888: LD_VAR 0 1
61892: PUSH
61893: FOR_TO
61894: IFFALSE 61941
// begin hc_class = 18 ;
61896: LD_ADDR_OWVAR 28
61900: PUSH
61901: LD_INT 18
61903: ST_TO_ADDR
// hc_gallery =  ;
61904: LD_ADDR_OWVAR 33
61908: PUSH
61909: LD_STRING 
61911: ST_TO_ADDR
// animal := CreateHuman ;
61912: LD_ADDR_VAR 0 12
61916: PUSH
61917: CALL_OW 44
61921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61922: LD_VAR 0 12
61926: PPUSH
61927: LD_VAR 0 8
61931: PPUSH
61932: LD_INT 0
61934: PPUSH
61935: CALL 63989 0 3
// end ;
61939: GO 61893
61941: POP
61942: POP
// if tigers then
61943: LD_VAR 0 2
61947: IFFALSE 62031
// for i = 1 to tigers do
61949: LD_ADDR_VAR 0 11
61953: PUSH
61954: DOUBLE
61955: LD_INT 1
61957: DEC
61958: ST_TO_ADDR
61959: LD_VAR 0 2
61963: PUSH
61964: FOR_TO
61965: IFFALSE 62029
// begin hc_class = class_tiger ;
61967: LD_ADDR_OWVAR 28
61971: PUSH
61972: LD_INT 14
61974: ST_TO_ADDR
// hc_gallery =  ;
61975: LD_ADDR_OWVAR 33
61979: PUSH
61980: LD_STRING 
61982: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61983: LD_ADDR_OWVAR 35
61987: PUSH
61988: LD_INT 7
61990: NEG
61991: PPUSH
61992: LD_INT 7
61994: PPUSH
61995: CALL_OW 12
61999: ST_TO_ADDR
// animal := CreateHuman ;
62000: LD_ADDR_VAR 0 12
62004: PUSH
62005: CALL_OW 44
62009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62010: LD_VAR 0 12
62014: PPUSH
62015: LD_VAR 0 8
62019: PPUSH
62020: LD_INT 0
62022: PPUSH
62023: CALL 63989 0 3
// end ;
62027: GO 61964
62029: POP
62030: POP
// if apemans then
62031: LD_VAR 0 3
62035: IFFALSE 62158
// for i = 1 to apemans do
62037: LD_ADDR_VAR 0 11
62041: PUSH
62042: DOUBLE
62043: LD_INT 1
62045: DEC
62046: ST_TO_ADDR
62047: LD_VAR 0 3
62051: PUSH
62052: FOR_TO
62053: IFFALSE 62156
// begin hc_class = class_apeman ;
62055: LD_ADDR_OWVAR 28
62059: PUSH
62060: LD_INT 12
62062: ST_TO_ADDR
// hc_gallery =  ;
62063: LD_ADDR_OWVAR 33
62067: PUSH
62068: LD_STRING 
62070: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62071: LD_ADDR_OWVAR 35
62075: PUSH
62076: LD_INT 5
62078: NEG
62079: PPUSH
62080: LD_INT 5
62082: PPUSH
62083: CALL_OW 12
62087: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62088: LD_ADDR_OWVAR 31
62092: PUSH
62093: LD_INT 1
62095: PPUSH
62096: LD_INT 3
62098: PPUSH
62099: CALL_OW 12
62103: PUSH
62104: LD_INT 1
62106: PPUSH
62107: LD_INT 3
62109: PPUSH
62110: CALL_OW 12
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// animal := CreateHuman ;
62127: LD_ADDR_VAR 0 12
62131: PUSH
62132: CALL_OW 44
62136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62137: LD_VAR 0 12
62141: PPUSH
62142: LD_VAR 0 8
62146: PPUSH
62147: LD_INT 0
62149: PPUSH
62150: CALL 63989 0 3
// end ;
62154: GO 62052
62156: POP
62157: POP
// if enchidnas then
62158: LD_VAR 0 4
62162: IFFALSE 62229
// for i = 1 to enchidnas do
62164: LD_ADDR_VAR 0 11
62168: PUSH
62169: DOUBLE
62170: LD_INT 1
62172: DEC
62173: ST_TO_ADDR
62174: LD_VAR 0 4
62178: PUSH
62179: FOR_TO
62180: IFFALSE 62227
// begin hc_class = 13 ;
62182: LD_ADDR_OWVAR 28
62186: PUSH
62187: LD_INT 13
62189: ST_TO_ADDR
// hc_gallery =  ;
62190: LD_ADDR_OWVAR 33
62194: PUSH
62195: LD_STRING 
62197: ST_TO_ADDR
// animal := CreateHuman ;
62198: LD_ADDR_VAR 0 12
62202: PUSH
62203: CALL_OW 44
62207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62208: LD_VAR 0 12
62212: PPUSH
62213: LD_VAR 0 8
62217: PPUSH
62218: LD_INT 0
62220: PPUSH
62221: CALL 63989 0 3
// end ;
62225: GO 62179
62227: POP
62228: POP
// if fishes then
62229: LD_VAR 0 7
62233: IFFALSE 62300
// for i = 1 to fishes do
62235: LD_ADDR_VAR 0 11
62239: PUSH
62240: DOUBLE
62241: LD_INT 1
62243: DEC
62244: ST_TO_ADDR
62245: LD_VAR 0 7
62249: PUSH
62250: FOR_TO
62251: IFFALSE 62298
// begin hc_class = 20 ;
62253: LD_ADDR_OWVAR 28
62257: PUSH
62258: LD_INT 20
62260: ST_TO_ADDR
// hc_gallery =  ;
62261: LD_ADDR_OWVAR 33
62265: PUSH
62266: LD_STRING 
62268: ST_TO_ADDR
// animal := CreateHuman ;
62269: LD_ADDR_VAR 0 12
62273: PUSH
62274: CALL_OW 44
62278: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62279: LD_VAR 0 12
62283: PPUSH
62284: LD_VAR 0 9
62288: PPUSH
62289: LD_INT 0
62291: PPUSH
62292: CALL 63989 0 3
// end ;
62296: GO 62250
62298: POP
62299: POP
// end ;
62300: LD_VAR 0 10
62304: RET
// export function WantHeal ( sci , unit ) ; begin
62305: LD_INT 0
62307: PPUSH
// if GetTaskList ( sci ) > 0 then
62308: LD_VAR 0 1
62312: PPUSH
62313: CALL_OW 437
62317: PUSH
62318: LD_INT 0
62320: GREATER
62321: IFFALSE 62391
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62323: LD_VAR 0 1
62327: PPUSH
62328: CALL_OW 437
62332: PUSH
62333: LD_INT 1
62335: ARRAY
62336: PUSH
62337: LD_INT 1
62339: ARRAY
62340: PUSH
62341: LD_STRING l
62343: EQUAL
62344: PUSH
62345: LD_VAR 0 1
62349: PPUSH
62350: CALL_OW 437
62354: PUSH
62355: LD_INT 1
62357: ARRAY
62358: PUSH
62359: LD_INT 4
62361: ARRAY
62362: PUSH
62363: LD_VAR 0 2
62367: EQUAL
62368: AND
62369: IFFALSE 62381
// result := true else
62371: LD_ADDR_VAR 0 3
62375: PUSH
62376: LD_INT 1
62378: ST_TO_ADDR
62379: GO 62389
// result := false ;
62381: LD_ADDR_VAR 0 3
62385: PUSH
62386: LD_INT 0
62388: ST_TO_ADDR
// end else
62389: GO 62399
// result := false ;
62391: LD_ADDR_VAR 0 3
62395: PUSH
62396: LD_INT 0
62398: ST_TO_ADDR
// end ;
62399: LD_VAR 0 3
62403: RET
// export function HealTarget ( sci ) ; begin
62404: LD_INT 0
62406: PPUSH
// if not sci then
62407: LD_VAR 0 1
62411: NOT
62412: IFFALSE 62416
// exit ;
62414: GO 62481
// result := 0 ;
62416: LD_ADDR_VAR 0 2
62420: PUSH
62421: LD_INT 0
62423: ST_TO_ADDR
// if GetTaskList ( sci ) then
62424: LD_VAR 0 1
62428: PPUSH
62429: CALL_OW 437
62433: IFFALSE 62481
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62435: LD_VAR 0 1
62439: PPUSH
62440: CALL_OW 437
62444: PUSH
62445: LD_INT 1
62447: ARRAY
62448: PUSH
62449: LD_INT 1
62451: ARRAY
62452: PUSH
62453: LD_STRING l
62455: EQUAL
62456: IFFALSE 62481
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62458: LD_ADDR_VAR 0 2
62462: PUSH
62463: LD_VAR 0 1
62467: PPUSH
62468: CALL_OW 437
62472: PUSH
62473: LD_INT 1
62475: ARRAY
62476: PUSH
62477: LD_INT 4
62479: ARRAY
62480: ST_TO_ADDR
// end ;
62481: LD_VAR 0 2
62485: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62486: LD_INT 0
62488: PPUSH
62489: PPUSH
62490: PPUSH
62491: PPUSH
// if not base_units then
62492: LD_VAR 0 1
62496: NOT
62497: IFFALSE 62501
// exit ;
62499: GO 62588
// result := false ;
62501: LD_ADDR_VAR 0 2
62505: PUSH
62506: LD_INT 0
62508: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62509: LD_ADDR_VAR 0 5
62513: PUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: LD_INT 21
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PPUSH
62529: CALL_OW 72
62533: ST_TO_ADDR
// if not tmp then
62534: LD_VAR 0 5
62538: NOT
62539: IFFALSE 62543
// exit ;
62541: GO 62588
// for i in tmp do
62543: LD_ADDR_VAR 0 3
62547: PUSH
62548: LD_VAR 0 5
62552: PUSH
62553: FOR_IN
62554: IFFALSE 62586
// begin result := EnemyInRange ( i , 22 ) ;
62556: LD_ADDR_VAR 0 2
62560: PUSH
62561: LD_VAR 0 3
62565: PPUSH
62566: LD_INT 22
62568: PPUSH
62569: CALL 60824 0 2
62573: ST_TO_ADDR
// if result then
62574: LD_VAR 0 2
62578: IFFALSE 62584
// exit ;
62580: POP
62581: POP
62582: GO 62588
// end ;
62584: GO 62553
62586: POP
62587: POP
// end ;
62588: LD_VAR 0 2
62592: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62593: LD_INT 0
62595: PPUSH
62596: PPUSH
// if not units then
62597: LD_VAR 0 1
62601: NOT
62602: IFFALSE 62606
// exit ;
62604: GO 62676
// result := [ ] ;
62606: LD_ADDR_VAR 0 3
62610: PUSH
62611: EMPTY
62612: ST_TO_ADDR
// for i in units do
62613: LD_ADDR_VAR 0 4
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: FOR_IN
62624: IFFALSE 62674
// if GetTag ( i ) = tag then
62626: LD_VAR 0 4
62630: PPUSH
62631: CALL_OW 110
62635: PUSH
62636: LD_VAR 0 2
62640: EQUAL
62641: IFFALSE 62672
// result := Insert ( result , result + 1 , i ) ;
62643: LD_ADDR_VAR 0 3
62647: PUSH
62648: LD_VAR 0 3
62652: PPUSH
62653: LD_VAR 0 3
62657: PUSH
62658: LD_INT 1
62660: PLUS
62661: PPUSH
62662: LD_VAR 0 4
62666: PPUSH
62667: CALL_OW 2
62671: ST_TO_ADDR
62672: GO 62623
62674: POP
62675: POP
// end ;
62676: LD_VAR 0 3
62680: RET
// export function IsDriver ( un ) ; begin
62681: LD_INT 0
62683: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62684: LD_ADDR_VAR 0 2
62688: PUSH
62689: LD_VAR 0 1
62693: PUSH
62694: LD_INT 55
62696: PUSH
62697: EMPTY
62698: LIST
62699: PPUSH
62700: CALL_OW 69
62704: IN
62705: ST_TO_ADDR
// end ;
62706: LD_VAR 0 2
62710: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62711: LD_INT 0
62713: PPUSH
62714: PPUSH
// list := [ ] ;
62715: LD_ADDR_VAR 0 5
62719: PUSH
62720: EMPTY
62721: ST_TO_ADDR
// case d of 0 :
62722: LD_VAR 0 3
62726: PUSH
62727: LD_INT 0
62729: DOUBLE
62730: EQUAL
62731: IFTRUE 62735
62733: GO 62868
62735: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62736: LD_ADDR_VAR 0 5
62740: PUSH
62741: LD_VAR 0 1
62745: PUSH
62746: LD_INT 4
62748: MINUS
62749: PUSH
62750: LD_VAR 0 2
62754: PUSH
62755: LD_INT 4
62757: MINUS
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: PUSH
62767: LD_VAR 0 1
62771: PUSH
62772: LD_INT 3
62774: MINUS
62775: PUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: PUSH
62789: LD_VAR 0 1
62793: PUSH
62794: LD_INT 4
62796: PLUS
62797: PUSH
62798: LD_VAR 0 2
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: LIST
62810: PUSH
62811: LD_VAR 0 1
62815: PUSH
62816: LD_INT 3
62818: PLUS
62819: PUSH
62820: LD_VAR 0 2
62824: PUSH
62825: LD_INT 3
62827: PLUS
62828: PUSH
62829: LD_INT 5
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: PUSH
62837: LD_VAR 0 1
62841: PUSH
62842: LD_VAR 0 2
62846: PUSH
62847: LD_INT 4
62849: PLUS
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: ST_TO_ADDR
// end ; 1 :
62866: GO 63566
62868: LD_INT 1
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62876
62874: GO 63009
62876: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62877: LD_ADDR_VAR 0 5
62881: PUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_VAR 0 2
62891: PUSH
62892: LD_INT 4
62894: MINUS
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: PUSH
62904: LD_VAR 0 1
62908: PUSH
62909: LD_INT 3
62911: MINUS
62912: PUSH
62913: LD_VAR 0 2
62917: PUSH
62918: LD_INT 3
62920: MINUS
62921: PUSH
62922: LD_INT 2
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: PUSH
62930: LD_VAR 0 1
62934: PUSH
62935: LD_INT 4
62937: MINUS
62938: PUSH
62939: LD_VAR 0 2
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: PUSH
62952: LD_VAR 0 1
62956: PUSH
62957: LD_VAR 0 2
62961: PUSH
62962: LD_INT 3
62964: PLUS
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: LIST
62973: PUSH
62974: LD_VAR 0 1
62978: PUSH
62979: LD_INT 4
62981: PLUS
62982: PUSH
62983: LD_VAR 0 2
62987: PUSH
62988: LD_INT 4
62990: PLUS
62991: PUSH
62992: LD_INT 5
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: ST_TO_ADDR
// end ; 2 :
63007: GO 63566
63009: LD_INT 2
63011: DOUBLE
63012: EQUAL
63013: IFTRUE 63017
63015: GO 63146
63017: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63018: LD_ADDR_VAR 0 5
63022: PUSH
63023: LD_VAR 0 1
63027: PUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_INT 3
63035: MINUS
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: PUSH
63045: LD_VAR 0 1
63049: PUSH
63050: LD_INT 4
63052: PLUS
63053: PUSH
63054: LD_VAR 0 2
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: PUSH
63067: LD_VAR 0 1
63071: PUSH
63072: LD_VAR 0 2
63076: PUSH
63077: LD_INT 4
63079: PLUS
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: PUSH
63089: LD_VAR 0 1
63093: PUSH
63094: LD_INT 3
63096: MINUS
63097: PUSH
63098: LD_VAR 0 2
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: PUSH
63111: LD_VAR 0 1
63115: PUSH
63116: LD_INT 4
63118: MINUS
63119: PUSH
63120: LD_VAR 0 2
63124: PUSH
63125: LD_INT 4
63127: MINUS
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: LIST
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// end ; 3 :
63144: GO 63566
63146: LD_INT 3
63148: DOUBLE
63149: EQUAL
63150: IFTRUE 63154
63152: GO 63287
63154: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63155: LD_ADDR_VAR 0 5
63159: PUSH
63160: LD_VAR 0 1
63164: PUSH
63165: LD_INT 3
63167: PLUS
63168: PUSH
63169: LD_VAR 0 2
63173: PUSH
63174: LD_INT 4
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: LIST
63181: PUSH
63182: LD_VAR 0 1
63186: PUSH
63187: LD_INT 4
63189: PLUS
63190: PUSH
63191: LD_VAR 0 2
63195: PUSH
63196: LD_INT 4
63198: PLUS
63199: PUSH
63200: LD_INT 5
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: PUSH
63208: LD_VAR 0 1
63212: PUSH
63213: LD_INT 4
63215: MINUS
63216: PUSH
63217: LD_VAR 0 2
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: LIST
63229: PUSH
63230: LD_VAR 0 1
63234: PUSH
63235: LD_VAR 0 2
63239: PUSH
63240: LD_INT 4
63242: MINUS
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: PUSH
63252: LD_VAR 0 1
63256: PUSH
63257: LD_INT 3
63259: MINUS
63260: PUSH
63261: LD_VAR 0 2
63265: PUSH
63266: LD_INT 3
63268: MINUS
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: LIST
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// end ; 4 :
63285: GO 63566
63287: LD_INT 4
63289: DOUBLE
63290: EQUAL
63291: IFTRUE 63295
63293: GO 63428
63295: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63296: LD_ADDR_VAR 0 5
63300: PUSH
63301: LD_VAR 0 1
63305: PUSH
63306: LD_VAR 0 2
63310: PUSH
63311: LD_INT 4
63313: PLUS
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: PUSH
63323: LD_VAR 0 1
63327: PUSH
63328: LD_INT 3
63330: PLUS
63331: PUSH
63332: LD_VAR 0 2
63336: PUSH
63337: LD_INT 3
63339: PLUS
63340: PUSH
63341: LD_INT 5
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: PUSH
63349: LD_VAR 0 1
63353: PUSH
63354: LD_INT 4
63356: PLUS
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: LD_INT 4
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: PUSH
63371: LD_VAR 0 1
63375: PUSH
63376: LD_VAR 0 2
63380: PUSH
63381: LD_INT 3
63383: MINUS
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: PUSH
63393: LD_VAR 0 1
63397: PUSH
63398: LD_INT 4
63400: MINUS
63401: PUSH
63402: LD_VAR 0 2
63406: PUSH
63407: LD_INT 4
63409: MINUS
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: ST_TO_ADDR
// end ; 5 :
63426: GO 63566
63428: LD_INT 5
63430: DOUBLE
63431: EQUAL
63432: IFTRUE 63436
63434: GO 63565
63436: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63437: LD_ADDR_VAR 0 5
63441: PUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_INT 4
63449: MINUS
63450: PUSH
63451: LD_VAR 0 2
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: LD_VAR 0 1
63468: PUSH
63469: LD_VAR 0 2
63473: PUSH
63474: LD_INT 4
63476: MINUS
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: PUSH
63486: LD_VAR 0 1
63490: PUSH
63491: LD_INT 4
63493: PLUS
63494: PUSH
63495: LD_VAR 0 2
63499: PUSH
63500: LD_INT 4
63502: PLUS
63503: PUSH
63504: LD_INT 5
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: PUSH
63512: LD_VAR 0 1
63516: PUSH
63517: LD_INT 3
63519: PLUS
63520: PUSH
63521: LD_VAR 0 2
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: PUSH
63534: LD_VAR 0 1
63538: PUSH
63539: LD_VAR 0 2
63543: PUSH
63544: LD_INT 3
63546: PLUS
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: ST_TO_ADDR
// end ; end ;
63563: GO 63566
63565: POP
// result := list ;
63566: LD_ADDR_VAR 0 4
63570: PUSH
63571: LD_VAR 0 5
63575: ST_TO_ADDR
// end ;
63576: LD_VAR 0 4
63580: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63581: LD_INT 0
63583: PPUSH
63584: PPUSH
63585: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63586: LD_VAR 0 1
63590: NOT
63591: PUSH
63592: LD_VAR 0 2
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: LD_INT 4
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: IN
63615: NOT
63616: OR
63617: IFFALSE 63621
// exit ;
63619: GO 63713
// tmp := [ ] ;
63621: LD_ADDR_VAR 0 5
63625: PUSH
63626: EMPTY
63627: ST_TO_ADDR
// for i in units do
63628: LD_ADDR_VAR 0 4
63632: PUSH
63633: LD_VAR 0 1
63637: PUSH
63638: FOR_IN
63639: IFFALSE 63682
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63641: LD_ADDR_VAR 0 5
63645: PUSH
63646: LD_VAR 0 5
63650: PPUSH
63651: LD_VAR 0 5
63655: PUSH
63656: LD_INT 1
63658: PLUS
63659: PPUSH
63660: LD_VAR 0 4
63664: PPUSH
63665: LD_VAR 0 2
63669: PPUSH
63670: CALL_OW 259
63674: PPUSH
63675: CALL_OW 2
63679: ST_TO_ADDR
63680: GO 63638
63682: POP
63683: POP
// if not tmp then
63684: LD_VAR 0 5
63688: NOT
63689: IFFALSE 63693
// exit ;
63691: GO 63713
// result := SortListByListDesc ( units , tmp ) ;
63693: LD_ADDR_VAR 0 3
63697: PUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: LD_VAR 0 5
63707: PPUSH
63708: CALL_OW 77
63712: ST_TO_ADDR
// end ;
63713: LD_VAR 0 3
63717: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63718: LD_INT 0
63720: PPUSH
63721: PPUSH
63722: PPUSH
// result := false ;
63723: LD_ADDR_VAR 0 3
63727: PUSH
63728: LD_INT 0
63730: ST_TO_ADDR
// x := GetX ( building ) ;
63731: LD_ADDR_VAR 0 4
63735: PUSH
63736: LD_VAR 0 2
63740: PPUSH
63741: CALL_OW 250
63745: ST_TO_ADDR
// y := GetY ( building ) ;
63746: LD_ADDR_VAR 0 5
63750: PUSH
63751: LD_VAR 0 2
63755: PPUSH
63756: CALL_OW 251
63760: ST_TO_ADDR
// if not building or not x or not y then
63761: LD_VAR 0 2
63765: NOT
63766: PUSH
63767: LD_VAR 0 4
63771: NOT
63772: OR
63773: PUSH
63774: LD_VAR 0 5
63778: NOT
63779: OR
63780: IFFALSE 63784
// exit ;
63782: GO 63876
// if GetTaskList ( unit ) then
63784: LD_VAR 0 1
63788: PPUSH
63789: CALL_OW 437
63793: IFFALSE 63876
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63795: LD_STRING e
63797: PUSH
63798: LD_VAR 0 1
63802: PPUSH
63803: CALL_OW 437
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: PUSH
63812: LD_INT 1
63814: ARRAY
63815: EQUAL
63816: PUSH
63817: LD_VAR 0 4
63821: PUSH
63822: LD_VAR 0 1
63826: PPUSH
63827: CALL_OW 437
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PUSH
63836: LD_INT 2
63838: ARRAY
63839: EQUAL
63840: AND
63841: PUSH
63842: LD_VAR 0 5
63846: PUSH
63847: LD_VAR 0 1
63851: PPUSH
63852: CALL_OW 437
63856: PUSH
63857: LD_INT 1
63859: ARRAY
63860: PUSH
63861: LD_INT 3
63863: ARRAY
63864: EQUAL
63865: AND
63866: IFFALSE 63876
// result := true end ;
63868: LD_ADDR_VAR 0 3
63872: PUSH
63873: LD_INT 1
63875: ST_TO_ADDR
// end ;
63876: LD_VAR 0 3
63880: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63881: LD_INT 0
63883: PPUSH
// result := false ;
63884: LD_ADDR_VAR 0 4
63888: PUSH
63889: LD_INT 0
63891: ST_TO_ADDR
// if GetTaskList ( unit ) then
63892: LD_VAR 0 1
63896: PPUSH
63897: CALL_OW 437
63901: IFFALSE 63984
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63903: LD_STRING M
63905: PUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: CALL_OW 437
63915: PUSH
63916: LD_INT 1
63918: ARRAY
63919: PUSH
63920: LD_INT 1
63922: ARRAY
63923: EQUAL
63924: PUSH
63925: LD_VAR 0 2
63929: PUSH
63930: LD_VAR 0 1
63934: PPUSH
63935: CALL_OW 437
63939: PUSH
63940: LD_INT 1
63942: ARRAY
63943: PUSH
63944: LD_INT 2
63946: ARRAY
63947: EQUAL
63948: AND
63949: PUSH
63950: LD_VAR 0 3
63954: PUSH
63955: LD_VAR 0 1
63959: PPUSH
63960: CALL_OW 437
63964: PUSH
63965: LD_INT 1
63967: ARRAY
63968: PUSH
63969: LD_INT 3
63971: ARRAY
63972: EQUAL
63973: AND
63974: IFFALSE 63984
// result := true ;
63976: LD_ADDR_VAR 0 4
63980: PUSH
63981: LD_INT 1
63983: ST_TO_ADDR
// end ; end ;
63984: LD_VAR 0 4
63988: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63989: LD_INT 0
63991: PPUSH
63992: PPUSH
63993: PPUSH
63994: PPUSH
// if not unit or not area then
63995: LD_VAR 0 1
63999: NOT
64000: PUSH
64001: LD_VAR 0 2
64005: NOT
64006: OR
64007: IFFALSE 64011
// exit ;
64009: GO 64175
// tmp := AreaToList ( area , i ) ;
64011: LD_ADDR_VAR 0 6
64015: PUSH
64016: LD_VAR 0 2
64020: PPUSH
64021: LD_VAR 0 5
64025: PPUSH
64026: CALL_OW 517
64030: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64031: LD_ADDR_VAR 0 5
64035: PUSH
64036: DOUBLE
64037: LD_INT 1
64039: DEC
64040: ST_TO_ADDR
64041: LD_VAR 0 6
64045: PUSH
64046: LD_INT 1
64048: ARRAY
64049: PUSH
64050: FOR_TO
64051: IFFALSE 64173
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64053: LD_ADDR_VAR 0 7
64057: PUSH
64058: LD_VAR 0 6
64062: PUSH
64063: LD_INT 1
64065: ARRAY
64066: PUSH
64067: LD_VAR 0 5
64071: ARRAY
64072: PUSH
64073: LD_VAR 0 6
64077: PUSH
64078: LD_INT 2
64080: ARRAY
64081: PUSH
64082: LD_VAR 0 5
64086: ARRAY
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64092: LD_VAR 0 7
64096: PUSH
64097: LD_INT 1
64099: ARRAY
64100: PPUSH
64101: LD_VAR 0 7
64105: PUSH
64106: LD_INT 2
64108: ARRAY
64109: PPUSH
64110: CALL_OW 428
64114: PUSH
64115: LD_INT 0
64117: EQUAL
64118: IFFALSE 64171
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64120: LD_VAR 0 1
64124: PPUSH
64125: LD_VAR 0 7
64129: PUSH
64130: LD_INT 1
64132: ARRAY
64133: PPUSH
64134: LD_VAR 0 7
64138: PUSH
64139: LD_INT 2
64141: ARRAY
64142: PPUSH
64143: LD_VAR 0 3
64147: PPUSH
64148: CALL_OW 48
// result := IsPlaced ( unit ) ;
64152: LD_ADDR_VAR 0 4
64156: PUSH
64157: LD_VAR 0 1
64161: PPUSH
64162: CALL_OW 305
64166: ST_TO_ADDR
// exit ;
64167: POP
64168: POP
64169: GO 64175
// end ; end ;
64171: GO 64050
64173: POP
64174: POP
// end ;
64175: LD_VAR 0 4
64179: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64180: LD_INT 0
64182: PPUSH
64183: PPUSH
64184: PPUSH
// if not side or side > 8 then
64185: LD_VAR 0 1
64189: NOT
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_INT 8
64198: GREATER
64199: OR
64200: IFFALSE 64204
// exit ;
64202: GO 64391
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64204: LD_ADDR_VAR 0 4
64208: PUSH
64209: LD_INT 22
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 21
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PPUSH
64235: CALL_OW 69
64239: ST_TO_ADDR
// if not tmp then
64240: LD_VAR 0 4
64244: NOT
64245: IFFALSE 64249
// exit ;
64247: GO 64391
// enable_addtolog := true ;
64249: LD_ADDR_OWVAR 81
64253: PUSH
64254: LD_INT 1
64256: ST_TO_ADDR
// AddToLog ( [ ) ;
64257: LD_STRING [
64259: PPUSH
64260: CALL_OW 561
// for i in tmp do
64264: LD_ADDR_VAR 0 3
64268: PUSH
64269: LD_VAR 0 4
64273: PUSH
64274: FOR_IN
64275: IFFALSE 64382
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64277: LD_STRING [
64279: PUSH
64280: LD_VAR 0 3
64284: PPUSH
64285: CALL_OW 266
64289: STR
64290: PUSH
64291: LD_STRING , 
64293: STR
64294: PUSH
64295: LD_VAR 0 3
64299: PPUSH
64300: CALL_OW 250
64304: STR
64305: PUSH
64306: LD_STRING , 
64308: STR
64309: PUSH
64310: LD_VAR 0 3
64314: PPUSH
64315: CALL_OW 251
64319: STR
64320: PUSH
64321: LD_STRING , 
64323: STR
64324: PUSH
64325: LD_VAR 0 3
64329: PPUSH
64330: CALL_OW 254
64334: STR
64335: PUSH
64336: LD_STRING , 
64338: STR
64339: PUSH
64340: LD_VAR 0 3
64344: PPUSH
64345: LD_INT 1
64347: PPUSH
64348: CALL_OW 268
64352: STR
64353: PUSH
64354: LD_STRING , 
64356: STR
64357: PUSH
64358: LD_VAR 0 3
64362: PPUSH
64363: LD_INT 2
64365: PPUSH
64366: CALL_OW 268
64370: STR
64371: PUSH
64372: LD_STRING ],
64374: STR
64375: PPUSH
64376: CALL_OW 561
// end ;
64380: GO 64274
64382: POP
64383: POP
// AddToLog ( ]; ) ;
64384: LD_STRING ];
64386: PPUSH
64387: CALL_OW 561
// end ;
64391: LD_VAR 0 2
64395: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64396: LD_INT 0
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
// if not area or not rate or not max then
64403: LD_VAR 0 1
64407: NOT
64408: PUSH
64409: LD_VAR 0 2
64413: NOT
64414: OR
64415: PUSH
64416: LD_VAR 0 4
64420: NOT
64421: OR
64422: IFFALSE 64426
// exit ;
64424: GO 64618
// while 1 do
64426: LD_INT 1
64428: IFFALSE 64618
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64430: LD_ADDR_VAR 0 9
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: LD_INT 1
64442: PPUSH
64443: CALL_OW 287
64447: PUSH
64448: LD_INT 10
64450: MUL
64451: ST_TO_ADDR
// r := rate / 10 ;
64452: LD_ADDR_VAR 0 7
64456: PUSH
64457: LD_VAR 0 2
64461: PUSH
64462: LD_INT 10
64464: DIVREAL
64465: ST_TO_ADDR
// time := 1 1$00 ;
64466: LD_ADDR_VAR 0 8
64470: PUSH
64471: LD_INT 2100
64473: ST_TO_ADDR
// if amount < min then
64474: LD_VAR 0 9
64478: PUSH
64479: LD_VAR 0 3
64483: LESS
64484: IFFALSE 64502
// r := r * 2 else
64486: LD_ADDR_VAR 0 7
64490: PUSH
64491: LD_VAR 0 7
64495: PUSH
64496: LD_INT 2
64498: MUL
64499: ST_TO_ADDR
64500: GO 64528
// if amount > max then
64502: LD_VAR 0 9
64506: PUSH
64507: LD_VAR 0 4
64511: GREATER
64512: IFFALSE 64528
// r := r / 2 ;
64514: LD_ADDR_VAR 0 7
64518: PUSH
64519: LD_VAR 0 7
64523: PUSH
64524: LD_INT 2
64526: DIVREAL
64527: ST_TO_ADDR
// time := time / r ;
64528: LD_ADDR_VAR 0 8
64532: PUSH
64533: LD_VAR 0 8
64537: PUSH
64538: LD_VAR 0 7
64542: DIVREAL
64543: ST_TO_ADDR
// if time < 0 then
64544: LD_VAR 0 8
64548: PUSH
64549: LD_INT 0
64551: LESS
64552: IFFALSE 64569
// time := time * - 1 ;
64554: LD_ADDR_VAR 0 8
64558: PUSH
64559: LD_VAR 0 8
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: MUL
64568: ST_TO_ADDR
// wait ( time ) ;
64569: LD_VAR 0 8
64573: PPUSH
64574: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64578: LD_INT 35
64580: PPUSH
64581: LD_INT 875
64583: PPUSH
64584: CALL_OW 12
64588: PPUSH
64589: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64593: LD_INT 1
64595: PPUSH
64596: LD_INT 5
64598: PPUSH
64599: CALL_OW 12
64603: PPUSH
64604: LD_VAR 0 1
64608: PPUSH
64609: LD_INT 1
64611: PPUSH
64612: CALL_OW 55
// end ;
64616: GO 64426
// end ;
64618: LD_VAR 0 5
64622: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64623: LD_INT 0
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
64630: PPUSH
64631: PPUSH
64632: PPUSH
// if not turrets or not factories then
64633: LD_VAR 0 1
64637: NOT
64638: PUSH
64639: LD_VAR 0 2
64643: NOT
64644: OR
64645: IFFALSE 64649
// exit ;
64647: GO 64956
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64649: LD_ADDR_VAR 0 10
64653: PUSH
64654: LD_INT 5
64656: PUSH
64657: LD_INT 6
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: PUSH
64667: LD_INT 4
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: LD_INT 5
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 24
64691: PUSH
64692: LD_INT 25
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 23
64701: PUSH
64702: LD_INT 27
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 42
64715: PUSH
64716: LD_INT 43
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 44
64725: PUSH
64726: LD_INT 46
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 45
64735: PUSH
64736: LD_INT 47
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: LIST
64752: ST_TO_ADDR
// result := [ ] ;
64753: LD_ADDR_VAR 0 3
64757: PUSH
64758: EMPTY
64759: ST_TO_ADDR
// for i in turrets do
64760: LD_ADDR_VAR 0 4
64764: PUSH
64765: LD_VAR 0 1
64769: PUSH
64770: FOR_IN
64771: IFFALSE 64954
// begin nat := GetNation ( i ) ;
64773: LD_ADDR_VAR 0 7
64777: PUSH
64778: LD_VAR 0 4
64782: PPUSH
64783: CALL_OW 248
64787: ST_TO_ADDR
// weapon := 0 ;
64788: LD_ADDR_VAR 0 8
64792: PUSH
64793: LD_INT 0
64795: ST_TO_ADDR
// if not nat then
64796: LD_VAR 0 7
64800: NOT
64801: IFFALSE 64805
// continue ;
64803: GO 64770
// for j in list [ nat ] do
64805: LD_ADDR_VAR 0 5
64809: PUSH
64810: LD_VAR 0 10
64814: PUSH
64815: LD_VAR 0 7
64819: ARRAY
64820: PUSH
64821: FOR_IN
64822: IFFALSE 64863
// if GetBWeapon ( i ) = j [ 1 ] then
64824: LD_VAR 0 4
64828: PPUSH
64829: CALL_OW 269
64833: PUSH
64834: LD_VAR 0 5
64838: PUSH
64839: LD_INT 1
64841: ARRAY
64842: EQUAL
64843: IFFALSE 64861
// begin weapon := j [ 2 ] ;
64845: LD_ADDR_VAR 0 8
64849: PUSH
64850: LD_VAR 0 5
64854: PUSH
64855: LD_INT 2
64857: ARRAY
64858: ST_TO_ADDR
// break ;
64859: GO 64863
// end ;
64861: GO 64821
64863: POP
64864: POP
// if not weapon then
64865: LD_VAR 0 8
64869: NOT
64870: IFFALSE 64874
// continue ;
64872: GO 64770
// for k in factories do
64874: LD_ADDR_VAR 0 6
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: FOR_IN
64885: IFFALSE 64950
// begin weapons := AvailableWeaponList ( k ) ;
64887: LD_ADDR_VAR 0 9
64891: PUSH
64892: LD_VAR 0 6
64896: PPUSH
64897: CALL_OW 478
64901: ST_TO_ADDR
// if not weapons then
64902: LD_VAR 0 9
64906: NOT
64907: IFFALSE 64911
// continue ;
64909: GO 64884
// if weapon in weapons then
64911: LD_VAR 0 8
64915: PUSH
64916: LD_VAR 0 9
64920: IN
64921: IFFALSE 64948
// begin result := [ i , weapon ] ;
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: LD_VAR 0 4
64932: PUSH
64933: LD_VAR 0 8
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// exit ;
64942: POP
64943: POP
64944: POP
64945: POP
64946: GO 64956
// end ; end ;
64948: GO 64884
64950: POP
64951: POP
// end ;
64952: GO 64770
64954: POP
64955: POP
// end ;
64956: LD_VAR 0 3
64960: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64961: LD_INT 0
64963: PPUSH
// if not side or side > 8 then
64964: LD_VAR 0 3
64968: NOT
64969: PUSH
64970: LD_VAR 0 3
64974: PUSH
64975: LD_INT 8
64977: GREATER
64978: OR
64979: IFFALSE 64983
// exit ;
64981: GO 65042
// if not range then
64983: LD_VAR 0 4
64987: NOT
64988: IFFALSE 64999
// range := - 12 ;
64990: LD_ADDR_VAR 0 4
64994: PUSH
64995: LD_INT 12
64997: NEG
64998: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64999: LD_VAR 0 1
65003: PPUSH
65004: LD_VAR 0 2
65008: PPUSH
65009: LD_VAR 0 3
65013: PPUSH
65014: LD_VAR 0 4
65018: PPUSH
65019: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65023: LD_VAR 0 1
65027: PPUSH
65028: LD_VAR 0 2
65032: PPUSH
65033: LD_VAR 0 3
65037: PPUSH
65038: CALL_OW 331
// end ;
65042: LD_VAR 0 5
65046: RET
// export function Video ( mode ) ; begin
65047: LD_INT 0
65049: PPUSH
// ingame_video = mode ;
65050: LD_ADDR_OWVAR 52
65054: PUSH
65055: LD_VAR 0 1
65059: ST_TO_ADDR
// interface_hidden = mode ;
65060: LD_ADDR_OWVAR 54
65064: PUSH
65065: LD_VAR 0 1
65069: ST_TO_ADDR
// end ;
65070: LD_VAR 0 2
65074: RET
// export function Join ( array , element ) ; begin
65075: LD_INT 0
65077: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65078: LD_ADDR_VAR 0 3
65082: PUSH
65083: LD_VAR 0 1
65087: PPUSH
65088: LD_VAR 0 1
65092: PUSH
65093: LD_INT 1
65095: PLUS
65096: PPUSH
65097: LD_VAR 0 2
65101: PPUSH
65102: CALL_OW 1
65106: ST_TO_ADDR
// end ;
65107: LD_VAR 0 3
65111: RET
// export function JoinUnion ( array , element ) ; begin
65112: LD_INT 0
65114: PPUSH
// result := array union element ;
65115: LD_ADDR_VAR 0 3
65119: PUSH
65120: LD_VAR 0 1
65124: PUSH
65125: LD_VAR 0 2
65129: UNION
65130: ST_TO_ADDR
// end ;
65131: LD_VAR 0 3
65135: RET
// export function GetBehemoths ( side ) ; begin
65136: LD_INT 0
65138: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65139: LD_ADDR_VAR 0 2
65143: PUSH
65144: LD_INT 22
65146: PUSH
65147: LD_VAR 0 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 31
65158: PUSH
65159: LD_INT 25
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PPUSH
65170: CALL_OW 69
65174: ST_TO_ADDR
// end ;
65175: LD_VAR 0 2
65179: RET
// export function Shuffle ( array ) ; var i , index ; begin
65180: LD_INT 0
65182: PPUSH
65183: PPUSH
65184: PPUSH
// result := [ ] ;
65185: LD_ADDR_VAR 0 2
65189: PUSH
65190: EMPTY
65191: ST_TO_ADDR
// if not array then
65192: LD_VAR 0 1
65196: NOT
65197: IFFALSE 65201
// exit ;
65199: GO 65300
// Randomize ;
65201: CALL_OW 10
// for i = array downto 1 do
65205: LD_ADDR_VAR 0 3
65209: PUSH
65210: DOUBLE
65211: LD_VAR 0 1
65215: INC
65216: ST_TO_ADDR
65217: LD_INT 1
65219: PUSH
65220: FOR_DOWNTO
65221: IFFALSE 65298
// begin index := rand ( 1 , array ) ;
65223: LD_ADDR_VAR 0 4
65227: PUSH
65228: LD_INT 1
65230: PPUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: CALL_OW 12
65240: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65241: LD_ADDR_VAR 0 2
65245: PUSH
65246: LD_VAR 0 2
65250: PPUSH
65251: LD_VAR 0 2
65255: PUSH
65256: LD_INT 1
65258: PLUS
65259: PPUSH
65260: LD_VAR 0 1
65264: PUSH
65265: LD_VAR 0 4
65269: ARRAY
65270: PPUSH
65271: CALL_OW 2
65275: ST_TO_ADDR
// array := Delete ( array , index ) ;
65276: LD_ADDR_VAR 0 1
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: LD_VAR 0 4
65290: PPUSH
65291: CALL_OW 3
65295: ST_TO_ADDR
// end ;
65296: GO 65220
65298: POP
65299: POP
// end ;
65300: LD_VAR 0 2
65304: RET
// export function GetBaseMaterials ( base ) ; begin
65305: LD_INT 0
65307: PPUSH
// result := [ 0 , 0 , 0 ] ;
65308: LD_ADDR_VAR 0 2
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: ST_TO_ADDR
// if not base then
65327: LD_VAR 0 1
65331: NOT
65332: IFFALSE 65336
// exit ;
65334: GO 65385
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65336: LD_ADDR_VAR 0 2
65340: PUSH
65341: LD_VAR 0 1
65345: PPUSH
65346: LD_INT 1
65348: PPUSH
65349: CALL_OW 275
65353: PUSH
65354: LD_VAR 0 1
65358: PPUSH
65359: LD_INT 2
65361: PPUSH
65362: CALL_OW 275
65366: PUSH
65367: LD_VAR 0 1
65371: PPUSH
65372: LD_INT 3
65374: PPUSH
65375: CALL_OW 275
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 2
65389: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
// result := array ;
65394: LD_ADDR_VAR 0 3
65398: PUSH
65399: LD_VAR 0 1
65403: ST_TO_ADDR
// if size > 0 then
65404: LD_VAR 0 2
65408: PUSH
65409: LD_INT 0
65411: GREATER
65412: IFFALSE 65458
// for i := array downto size do
65414: LD_ADDR_VAR 0 4
65418: PUSH
65419: DOUBLE
65420: LD_VAR 0 1
65424: INC
65425: ST_TO_ADDR
65426: LD_VAR 0 2
65430: PUSH
65431: FOR_DOWNTO
65432: IFFALSE 65456
// result := Delete ( result , result ) ;
65434: LD_ADDR_VAR 0 3
65438: PUSH
65439: LD_VAR 0 3
65443: PPUSH
65444: LD_VAR 0 3
65448: PPUSH
65449: CALL_OW 3
65453: ST_TO_ADDR
65454: GO 65431
65456: POP
65457: POP
// end ;
65458: LD_VAR 0 3
65462: RET
// export function ComExit ( unit ) ; var tmp ; begin
65463: LD_INT 0
65465: PPUSH
65466: PPUSH
// if not IsInUnit ( unit ) then
65467: LD_VAR 0 1
65471: PPUSH
65472: CALL_OW 310
65476: NOT
65477: IFFALSE 65481
// exit ;
65479: GO 65541
// tmp := IsInUnit ( unit ) ;
65481: LD_ADDR_VAR 0 3
65485: PUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 310
65495: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65496: LD_VAR 0 3
65500: PPUSH
65501: CALL_OW 247
65505: PUSH
65506: LD_INT 2
65508: EQUAL
65509: IFFALSE 65522
// ComExitVehicle ( unit ) else
65511: LD_VAR 0 1
65515: PPUSH
65516: CALL_OW 121
65520: GO 65531
// ComExitBuilding ( unit ) ;
65522: LD_VAR 0 1
65526: PPUSH
65527: CALL_OW 122
// result := tmp ;
65531: LD_ADDR_VAR 0 2
65535: PUSH
65536: LD_VAR 0 3
65540: ST_TO_ADDR
// end ;
65541: LD_VAR 0 2
65545: RET
// export function ComExitAll ( units ) ; var i ; begin
65546: LD_INT 0
65548: PPUSH
65549: PPUSH
// if not units then
65550: LD_VAR 0 1
65554: NOT
65555: IFFALSE 65559
// exit ;
65557: GO 65585
// for i in units do
65559: LD_ADDR_VAR 0 3
65563: PUSH
65564: LD_VAR 0 1
65568: PUSH
65569: FOR_IN
65570: IFFALSE 65583
// ComExit ( i ) ;
65572: LD_VAR 0 3
65576: PPUSH
65577: CALL 65463 0 1
65581: GO 65569
65583: POP
65584: POP
// end ;
65585: LD_VAR 0 2
65589: RET
// export function ResetHc ; begin
65590: LD_INT 0
65592: PPUSH
// InitHc ;
65593: CALL_OW 19
// hc_importance := 0 ;
65597: LD_ADDR_OWVAR 32
65601: PUSH
65602: LD_INT 0
65604: ST_TO_ADDR
// end ;
65605: LD_VAR 0 1
65609: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65610: LD_INT 0
65612: PPUSH
65613: PPUSH
65614: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65615: LD_ADDR_VAR 0 6
65619: PUSH
65620: LD_VAR 0 1
65624: PUSH
65625: LD_VAR 0 3
65629: PLUS
65630: PUSH
65631: LD_INT 2
65633: DIV
65634: ST_TO_ADDR
// if _x < 0 then
65635: LD_VAR 0 6
65639: PUSH
65640: LD_INT 0
65642: LESS
65643: IFFALSE 65660
// _x := _x * - 1 ;
65645: LD_ADDR_VAR 0 6
65649: PUSH
65650: LD_VAR 0 6
65654: PUSH
65655: LD_INT 1
65657: NEG
65658: MUL
65659: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65660: LD_ADDR_VAR 0 7
65664: PUSH
65665: LD_VAR 0 2
65669: PUSH
65670: LD_VAR 0 4
65674: PLUS
65675: PUSH
65676: LD_INT 2
65678: DIV
65679: ST_TO_ADDR
// if _y < 0 then
65680: LD_VAR 0 7
65684: PUSH
65685: LD_INT 0
65687: LESS
65688: IFFALSE 65705
// _y := _y * - 1 ;
65690: LD_ADDR_VAR 0 7
65694: PUSH
65695: LD_VAR 0 7
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: MUL
65704: ST_TO_ADDR
// result := [ _x , _y ] ;
65705: LD_ADDR_VAR 0 5
65709: PUSH
65710: LD_VAR 0 6
65714: PUSH
65715: LD_VAR 0 7
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// end ;
65724: LD_VAR 0 5
65728: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
// task := GetTaskList ( unit ) ;
65735: LD_ADDR_VAR 0 7
65739: PUSH
65740: LD_VAR 0 1
65744: PPUSH
65745: CALL_OW 437
65749: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65750: LD_VAR 0 7
65754: NOT
65755: PUSH
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 2
65765: PPUSH
65766: CALL_OW 308
65770: NOT
65771: AND
65772: IFFALSE 65776
// exit ;
65774: GO 65894
// if IsInArea ( unit , area ) then
65776: LD_VAR 0 1
65780: PPUSH
65781: LD_VAR 0 2
65785: PPUSH
65786: CALL_OW 308
65790: IFFALSE 65808
// begin ComMoveToArea ( unit , goAway ) ;
65792: LD_VAR 0 1
65796: PPUSH
65797: LD_VAR 0 3
65801: PPUSH
65802: CALL_OW 113
// exit ;
65806: GO 65894
// end ; if task [ 1 ] [ 1 ] <> M then
65808: LD_VAR 0 7
65812: PUSH
65813: LD_INT 1
65815: ARRAY
65816: PUSH
65817: LD_INT 1
65819: ARRAY
65820: PUSH
65821: LD_STRING M
65823: NONEQUAL
65824: IFFALSE 65828
// exit ;
65826: GO 65894
// x := task [ 1 ] [ 2 ] ;
65828: LD_ADDR_VAR 0 5
65832: PUSH
65833: LD_VAR 0 7
65837: PUSH
65838: LD_INT 1
65840: ARRAY
65841: PUSH
65842: LD_INT 2
65844: ARRAY
65845: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65846: LD_ADDR_VAR 0 6
65850: PUSH
65851: LD_VAR 0 7
65855: PUSH
65856: LD_INT 1
65858: ARRAY
65859: PUSH
65860: LD_INT 3
65862: ARRAY
65863: ST_TO_ADDR
// if InArea ( x , y , area ) then
65864: LD_VAR 0 5
65868: PPUSH
65869: LD_VAR 0 6
65873: PPUSH
65874: LD_VAR 0 2
65878: PPUSH
65879: CALL_OW 309
65883: IFFALSE 65894
// ComStop ( unit ) ;
65885: LD_VAR 0 1
65889: PPUSH
65890: CALL_OW 141
// end ;
65894: LD_VAR 0 4
65898: RET
// export function Abs ( value ) ; begin
65899: LD_INT 0
65901: PPUSH
// result := value ;
65902: LD_ADDR_VAR 0 2
65906: PUSH
65907: LD_VAR 0 1
65911: ST_TO_ADDR
// if value < 0 then
65912: LD_VAR 0 1
65916: PUSH
65917: LD_INT 0
65919: LESS
65920: IFFALSE 65937
// result := value * - 1 ;
65922: LD_ADDR_VAR 0 2
65926: PUSH
65927: LD_VAR 0 1
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: MUL
65936: ST_TO_ADDR
// end ;
65937: LD_VAR 0 2
65941: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65942: LD_INT 0
65944: PPUSH
65945: PPUSH
65946: PPUSH
65947: PPUSH
65948: PPUSH
65949: PPUSH
65950: PPUSH
65951: PPUSH
// if not unit or not building then
65952: LD_VAR 0 1
65956: NOT
65957: PUSH
65958: LD_VAR 0 2
65962: NOT
65963: OR
65964: IFFALSE 65968
// exit ;
65966: GO 66194
// x := GetX ( building ) ;
65968: LD_ADDR_VAR 0 4
65972: PUSH
65973: LD_VAR 0 2
65977: PPUSH
65978: CALL_OW 250
65982: ST_TO_ADDR
// y := GetY ( building ) ;
65983: LD_ADDR_VAR 0 6
65987: PUSH
65988: LD_VAR 0 2
65992: PPUSH
65993: CALL_OW 251
65997: ST_TO_ADDR
// d := GetDir ( building ) ;
65998: LD_ADDR_VAR 0 8
66002: PUSH
66003: LD_VAR 0 2
66007: PPUSH
66008: CALL_OW 254
66012: ST_TO_ADDR
// r := 4 ;
66013: LD_ADDR_VAR 0 9
66017: PUSH
66018: LD_INT 4
66020: ST_TO_ADDR
// for i := 1 to 5 do
66021: LD_ADDR_VAR 0 10
66025: PUSH
66026: DOUBLE
66027: LD_INT 1
66029: DEC
66030: ST_TO_ADDR
66031: LD_INT 5
66033: PUSH
66034: FOR_TO
66035: IFFALSE 66192
// begin _x := ShiftX ( x , d , r + i ) ;
66037: LD_ADDR_VAR 0 5
66041: PUSH
66042: LD_VAR 0 4
66046: PPUSH
66047: LD_VAR 0 8
66051: PPUSH
66052: LD_VAR 0 9
66056: PUSH
66057: LD_VAR 0 10
66061: PLUS
66062: PPUSH
66063: CALL_OW 272
66067: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66068: LD_ADDR_VAR 0 7
66072: PUSH
66073: LD_VAR 0 6
66077: PPUSH
66078: LD_VAR 0 8
66082: PPUSH
66083: LD_VAR 0 9
66087: PUSH
66088: LD_VAR 0 10
66092: PLUS
66093: PPUSH
66094: CALL_OW 273
66098: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66099: LD_VAR 0 5
66103: PPUSH
66104: LD_VAR 0 7
66108: PPUSH
66109: CALL_OW 488
66113: PUSH
66114: LD_VAR 0 5
66118: PPUSH
66119: LD_VAR 0 7
66123: PPUSH
66124: CALL_OW 428
66128: PPUSH
66129: CALL_OW 247
66133: PUSH
66134: LD_INT 3
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: IN
66144: NOT
66145: AND
66146: IFFALSE 66190
// begin ComMoveXY ( unit , _x , _y ) ;
66148: LD_VAR 0 1
66152: PPUSH
66153: LD_VAR 0 5
66157: PPUSH
66158: LD_VAR 0 7
66162: PPUSH
66163: CALL_OW 111
// result := [ _x , _y ] ;
66167: LD_ADDR_VAR 0 3
66171: PUSH
66172: LD_VAR 0 5
66176: PUSH
66177: LD_VAR 0 7
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: ST_TO_ADDR
// exit ;
66186: POP
66187: POP
66188: GO 66194
// end ; end ;
66190: GO 66034
66192: POP
66193: POP
// end ;
66194: LD_VAR 0 3
66198: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66199: LD_INT 0
66201: PPUSH
66202: PPUSH
66203: PPUSH
// result := 0 ;
66204: LD_ADDR_VAR 0 3
66208: PUSH
66209: LD_INT 0
66211: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66212: LD_VAR 0 1
66216: PUSH
66217: LD_INT 0
66219: LESS
66220: PUSH
66221: LD_VAR 0 1
66225: PUSH
66226: LD_INT 8
66228: GREATER
66229: OR
66230: PUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 0
66238: LESS
66239: OR
66240: PUSH
66241: LD_VAR 0 2
66245: PUSH
66246: LD_INT 8
66248: GREATER
66249: OR
66250: IFFALSE 66254
// exit ;
66252: GO 66329
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66254: LD_ADDR_VAR 0 4
66258: PUSH
66259: LD_INT 22
66261: PUSH
66262: LD_VAR 0 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PPUSH
66271: CALL_OW 69
66275: PUSH
66276: FOR_IN
66277: IFFALSE 66327
// begin un := UnitShoot ( i ) ;
66279: LD_ADDR_VAR 0 5
66283: PUSH
66284: LD_VAR 0 4
66288: PPUSH
66289: CALL_OW 504
66293: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66294: LD_VAR 0 5
66298: PPUSH
66299: CALL_OW 255
66303: PUSH
66304: LD_VAR 0 1
66308: EQUAL
66309: IFFALSE 66325
// begin result := un ;
66311: LD_ADDR_VAR 0 3
66315: PUSH
66316: LD_VAR 0 5
66320: ST_TO_ADDR
// exit ;
66321: POP
66322: POP
66323: GO 66329
// end ; end ;
66325: GO 66276
66327: POP
66328: POP
// end ;
66329: LD_VAR 0 3
66333: RET
// export function GetCargoBay ( units ) ; begin
66334: LD_INT 0
66336: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66337: LD_ADDR_VAR 0 2
66341: PUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: LD_INT 2
66349: PUSH
66350: LD_INT 34
66352: PUSH
66353: LD_INT 12
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 34
66362: PUSH
66363: LD_INT 51
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 34
66372: PUSH
66373: LD_INT 32
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 34
66382: PUSH
66383: LD_EXP 22
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: PPUSH
66399: CALL_OW 72
66403: ST_TO_ADDR
// end ; end_of_file
66404: LD_VAR 0 2
66408: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66409: LD_VAR 0 1
66413: PUSH
66414: LD_INT 200
66416: DOUBLE
66417: GREATEREQUAL
66418: IFFALSE 66426
66420: LD_INT 299
66422: DOUBLE
66423: LESSEQUAL
66424: IFTRUE 66428
66426: GO 66460
66428: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66429: LD_VAR 0 1
66433: PPUSH
66434: LD_VAR 0 2
66438: PPUSH
66439: LD_VAR 0 3
66443: PPUSH
66444: LD_VAR 0 4
66448: PPUSH
66449: LD_VAR 0 5
66453: PPUSH
66454: CALL 24870 0 5
66458: GO 66537
66460: LD_INT 300
66462: DOUBLE
66463: GREATEREQUAL
66464: IFFALSE 66472
66466: LD_INT 399
66468: DOUBLE
66469: LESSEQUAL
66470: IFTRUE 66474
66472: GO 66536
66474: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 2
66484: PPUSH
66485: LD_VAR 0 3
66489: PPUSH
66490: LD_VAR 0 4
66494: PPUSH
66495: LD_VAR 0 5
66499: PPUSH
66500: LD_VAR 0 6
66504: PPUSH
66505: LD_VAR 0 7
66509: PPUSH
66510: LD_VAR 0 8
66514: PPUSH
66515: LD_VAR 0 9
66519: PPUSH
66520: LD_VAR 0 10
66524: PPUSH
66525: LD_VAR 0 11
66529: PPUSH
66530: CALL 22758 0 11
66534: GO 66537
66536: POP
// end ;
66537: PPOPN 11
66539: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66540: LD_VAR 0 1
66544: PPUSH
66545: LD_VAR 0 2
66549: PPUSH
66550: LD_VAR 0 3
66554: PPUSH
66555: LD_VAR 0 4
66559: PPUSH
66560: LD_VAR 0 5
66564: PPUSH
66565: CALL 24852 0 5
// end ; end_of_file
66569: PPOPN 5
66571: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66572: LD_VAR 0 1
66576: PPUSH
66577: LD_VAR 0 2
66581: PPUSH
66582: LD_VAR 0 3
66586: PPUSH
66587: LD_VAR 0 4
66591: PPUSH
66592: LD_VAR 0 5
66596: PPUSH
66597: LD_VAR 0 6
66601: PPUSH
66602: CALL 11566 0 6
// end ;
66606: PPOPN 6
66608: END
