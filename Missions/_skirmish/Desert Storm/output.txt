// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7895 0 5
// PrepareComm ;
 110: CALL 8378 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6981 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6981 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6981 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6981 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6981 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6981 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6981 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7035 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7097 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7145 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8528 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8528 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8528 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7329 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7329 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7329 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7329 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7329 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7329 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7329 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 23124 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 23222 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 23230 0 1
// end ;
6961: PPOPN 1
6963: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_VAR 0 2
6973: PPUSH
6974: CALL 23246 0 2
// end ; end_of_file
6978: PPOPN 2
6980: END
// export function RefreshTime ( time , bool ) ; begin
6981: LD_INT 0
6983: PPUSH
// if bool then
6984: LD_VAR 0 2
6988: IFFALSE 7006
// time := time + 0 0$01 else
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 1
6999: PUSH
7000: LD_INT 35
7002: PLUS
7003: ST_TO_ADDR
7004: GO 7020
// time := time - 0 0$01 ;
7006: LD_ADDR_VAR 0 1
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: LD_INT 35
7018: MINUS
7019: ST_TO_ADDR
// result := time ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_VAR 0 1
7029: ST_TO_ADDR
// end ;
7030: LD_VAR 0 3
7034: RET
// export function MineExist ( side ) ; begin
7035: LD_INT 0
7037: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7038: LD_INT 22
7040: PUSH
7041: LD_VAR 0 1
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 30
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 69
7068: PUSH
7069: LD_INT 0
7071: GREATER
7072: IFFALSE 7084
// result := true else
7074: LD_ADDR_VAR 0 2
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
7082: GO 7092
// result := false ;
7084: LD_ADDR_VAR 0 2
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// end ;
7092: LD_VAR 0 2
7096: RET
// export function FacExist ( side ) ; begin
7097: LD_INT 0
7099: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 22
7107: PUSH
7108: LD_VAR 0 1
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 30
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: PUSH
7136: LD_INT 0
7138: GREATER
7139: ST_TO_ADDR
// end ;
7140: LD_VAR 0 2
7144: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_VAR 0 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 33
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 50
7180: PUSH
7181: EMPTY
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: PPUSH
7189: CALL_OW 69
7193: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7194: LD_ADDR_VAR 0 5
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: LD_VAR 0 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 31
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 69
7229: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7230: LD_VAR 0 5
7234: PUSH
7235: LD_INT 0
7237: GREATER
7238: PUSH
7239: LD_VAR 0 4
7243: PUSH
7244: LD_INT 0
7246: GREATER
7247: AND
7248: IFFALSE 7324
// for i = 1 to filter do
7250: LD_ADDR_VAR 0 3
7254: PUSH
7255: DOUBLE
7256: LD_INT 1
7258: DEC
7259: ST_TO_ADDR
7260: LD_VAR 0 4
7264: PUSH
7265: FOR_TO
7266: IFFALSE 7322
// if not IsControledBy ( filter [ i ] ) then
7268: LD_VAR 0 4
7272: PUSH
7273: LD_VAR 0 3
7277: ARRAY
7278: PPUSH
7279: CALL_OW 312
7283: NOT
7284: IFFALSE 7320
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7286: LD_VAR 0 4
7290: PUSH
7291: LD_VAR 0 3
7295: ARRAY
7296: PPUSH
7297: LD_VAR 0 5
7301: PUSH
7302: LD_INT 1
7304: PPUSH
7305: LD_VAR 0 5
7309: PPUSH
7310: CALL_OW 12
7314: ARRAY
7315: PPUSH
7316: CALL_OW 135
7320: GO 7265
7322: POP
7323: POP
// end ;
7324: LD_VAR 0 2
7328: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
7336: PPUSH
// hc_class := clas ;
7337: LD_ADDR_OWVAR 28
7341: PUSH
7342: LD_VAR 0 1
7346: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_VAR 0 2
7356: PUSH
7357: LD_INT 1
7359: NEG
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: CALL_OW 12
7368: PLUS
7369: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: LD_VAR 0 2
7379: PUSH
7380: LD_INT 1
7382: NEG
7383: PPUSH
7384: LD_INT 1
7386: PPUSH
7387: CALL_OW 12
7391: PLUS
7392: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7393: LD_ADDR_VAR 0 6
7397: PUSH
7398: LD_VAR 0 2
7402: PUSH
7403: LD_INT 1
7405: NEG
7406: PPUSH
7407: LD_INT 1
7409: PPUSH
7410: CALL_OW 12
7414: PLUS
7415: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7416: LD_ADDR_VAR 0 7
7420: PUSH
7421: LD_VAR 0 2
7425: PUSH
7426: LD_INT 1
7428: NEG
7429: PPUSH
7430: LD_INT 1
7432: PPUSH
7433: CALL_OW 12
7437: PLUS
7438: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_INT 1
7446: EQUAL
7447: PUSH
7448: LD_VAR 0 1
7452: PUSH
7453: LD_INT 9
7455: EQUAL
7456: OR
7457: PUSH
7458: LD_VAR 0 1
7462: PUSH
7463: LD_INT 5
7465: EQUAL
7466: OR
7467: PUSH
7468: LD_VAR 0 1
7472: PUSH
7473: LD_INT 8
7475: EQUAL
7476: OR
7477: IFFALSE 7502
// bonus := [ 2 , 0 , 0 , 0 ] ;
7479: LD_ADDR_VAR 0 8
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: LD_INT 0
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: ST_TO_ADDR
// if clas = 2 then
7502: LD_VAR 0 1
7506: PUSH
7507: LD_INT 2
7509: EQUAL
7510: IFFALSE 7535
// bonus := [ 0 , 2 , 0 , 0 ] ;
7512: LD_ADDR_VAR 0 8
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 2
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: ST_TO_ADDR
// if clas = 3 then
7535: LD_VAR 0 1
7539: PUSH
7540: LD_INT 3
7542: EQUAL
7543: IFFALSE 7568
// bonus := [ 0 , 0 , 2 , 0 ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// if clas = 4 then
7568: LD_VAR 0 1
7572: PUSH
7573: LD_INT 4
7575: EQUAL
7576: IFFALSE 7601
// bonus := [ 0 , 0 , 0 , 2 ] ;
7578: LD_ADDR_VAR 0 8
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 0
7588: PUSH
7589: LD_INT 0
7591: PUSH
7592: LD_INT 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7601: LD_VAR 0 1
7605: PUSH
7606: LD_INT 4
7608: GREATER
7609: PUSH
7610: LD_VAR 0 1
7614: PUSH
7615: LD_INT 9
7617: NONEQUAL
7618: AND
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: LD_INT 5
7627: NONEQUAL
7628: AND
7629: PUSH
7630: LD_VAR 0 1
7634: PUSH
7635: LD_INT 8
7637: NONEQUAL
7638: AND
7639: IFFALSE 7664
// bonus := [ 0 , 0 , 0 , 0 ] ;
7641: LD_ADDR_VAR 0 8
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: LD_INT 0
7654: PUSH
7655: LD_INT 0
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7664: LD_ADDR_OWVAR 30
7668: PUSH
7669: LD_INT 0
7671: PPUSH
7672: LD_INT 2
7674: PPUSH
7675: CALL_OW 12
7679: PUSH
7680: LD_INT 0
7682: PPUSH
7683: LD_INT 2
7685: PPUSH
7686: CALL_OW 12
7690: PUSH
7691: LD_INT 0
7693: PPUSH
7694: LD_INT 2
7696: PPUSH
7697: CALL_OW 12
7701: PUSH
7702: LD_INT 0
7704: PPUSH
7705: LD_INT 2
7707: PPUSH
7708: CALL_OW 12
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7719: LD_ADDR_OWVAR 31
7723: PUSH
7724: LD_VAR 0 4
7728: PUSH
7729: LD_VAR 0 8
7733: PUSH
7734: LD_INT 1
7736: ARRAY
7737: PLUS
7738: PUSH
7739: LD_VAR 0 5
7743: PUSH
7744: LD_VAR 0 8
7748: PUSH
7749: LD_INT 2
7751: ARRAY
7752: PLUS
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_VAR 0 8
7763: PUSH
7764: LD_INT 3
7766: ARRAY
7767: PLUS
7768: PUSH
7769: LD_VAR 0 7
7773: PUSH
7774: LD_VAR 0 8
7778: PUSH
7779: LD_INT 4
7781: ARRAY
7782: PLUS
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7790: LD_ADDR_OWVAR 27
7794: PUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 2
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// hc_gallery :=  ;
7806: LD_ADDR_OWVAR 33
7810: PUSH
7811: LD_STRING 
7813: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7814: LD_ADDR_OWVAR 29
7818: PUSH
7819: LD_INT 8
7821: PPUSH
7822: LD_INT 12
7824: PPUSH
7825: CALL_OW 12
7829: PUSH
7830: LD_INT 9
7832: PPUSH
7833: LD_INT 11
7835: PPUSH
7836: CALL_OW 12
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: ST_TO_ADDR
// hc_name :=  ;
7845: LD_ADDR_OWVAR 26
7849: PUSH
7850: LD_STRING 
7852: ST_TO_ADDR
// result := CreateHuman ;
7853: LD_ADDR_VAR 0 3
7857: PUSH
7858: CALL_OW 44
7862: ST_TO_ADDR
// end ;
7863: LD_VAR 0 3
7867: RET
// export function GetSpeed ( unit ) ; begin
7868: LD_INT 0
7870: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 464
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: ST_TO_ADDR
// end ;
7890: LD_VAR 0 2
7894: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7895: LD_INT 0
7897: PPUSH
7898: PPUSH
7899: PPUSH
7900: PPUSH
7901: PPUSH
7902: PPUSH
// uc_nation = nation_nature ;
7903: LD_ADDR_OWVAR 21
7907: PUSH
7908: LD_INT 0
7910: ST_TO_ADDR
// uc_side = 0 ;
7911: LD_ADDR_OWVAR 20
7915: PUSH
7916: LD_INT 0
7918: ST_TO_ADDR
// l = 0 ;
7919: LD_ADDR_VAR 0 7
7923: PUSH
7924: LD_INT 0
7926: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7927: LD_ADDR_OWVAR 24
7931: PUSH
7932: LD_INT 0
7934: PPUSH
7935: LD_INT 5
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7943: LD_ADDR_OWVAR 35
7947: PUSH
7948: LD_INT 5
7950: NEG
7951: PPUSH
7952: LD_INT 0
7954: PPUSH
7955: CALL_OW 12
7959: ST_TO_ADDR
// hc_gallery =  ;
7960: LD_ADDR_OWVAR 33
7964: PUSH
7965: LD_STRING 
7967: ST_TO_ADDR
// hc_class = class_apeman ;
7968: LD_ADDR_OWVAR 28
7972: PUSH
7973: LD_INT 12
7975: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7976: LD_ADDR_OWVAR 29
7980: PUSH
7981: LD_INT 11
7983: PPUSH
7984: LD_INT 13
7986: PPUSH
7987: CALL_OW 12
7991: PUSH
7992: LD_INT 10
7994: PPUSH
7995: LD_INT 11
7997: PPUSH
7998: CALL_OW 12
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// hc_sex = sex_male ;
8007: LD_ADDR_OWVAR 27
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8015: LD_ADDR_OWVAR 31
8019: PUSH
8020: LD_INT 0
8022: PPUSH
8023: LD_INT 2
8025: PPUSH
8026: CALL_OW 12
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: LD_INT 0
8036: PUSH
8037: LD_INT 0
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// apeman = CreateHuman ;
8046: LD_ADDR_VAR 0 8
8050: PUSH
8051: CALL_OW 44
8055: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8056: LD_VAR 0 8
8060: PPUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_INT 0
8068: PPUSH
8069: CALL_OW 49
// l = l + 1 ;
8073: LD_ADDR_VAR 0 7
8077: PUSH
8078: LD_VAR 0 7
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ST_TO_ADDR
// end until l = num1 ;
8087: LD_VAR 0 7
8091: PUSH
8092: LD_VAR 0 2
8096: EQUAL
8097: IFFALSE 7927
// l = 0 ;
8099: LD_ADDR_VAR 0 7
8103: PUSH
8104: LD_INT 0
8106: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8107: LD_ADDR_OWVAR 35
8111: PUSH
8112: LD_INT 0
8114: PPUSH
8115: LD_INT 25
8117: PPUSH
8118: CALL_OW 12
8122: ST_TO_ADDR
// hc_class = class_tiger ;
8123: LD_ADDR_OWVAR 28
8127: PUSH
8128: LD_INT 14
8130: ST_TO_ADDR
// hc_sex = sex_male ;
8131: LD_ADDR_OWVAR 27
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// hc_gallery = sandnature ;
8139: LD_ADDR_OWVAR 33
8143: PUSH
8144: LD_STRING sandnature
8146: ST_TO_ADDR
// hc_face_number = 3 ;
8147: LD_ADDR_OWVAR 34
8151: PUSH
8152: LD_INT 3
8154: ST_TO_ADDR
// tiger = CreateHuman ;
8155: LD_ADDR_VAR 0 9
8159: PUSH
8160: CALL_OW 44
8164: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8165: LD_VAR 0 9
8169: PPUSH
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_INT 0
8177: PPUSH
8178: CALL_OW 49
// l = l + 1 ;
8182: LD_ADDR_VAR 0 7
8186: PUSH
8187: LD_VAR 0 7
8191: PUSH
8192: LD_INT 1
8194: PLUS
8195: ST_TO_ADDR
// end until l = num2 ;
8196: LD_VAR 0 7
8200: PUSH
8201: LD_VAR 0 3
8205: EQUAL
8206: IFFALSE 8107
// l = 0 ;
8208: LD_ADDR_VAR 0 7
8212: PUSH
8213: LD_INT 0
8215: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8216: LD_ADDR_OWVAR 28
8220: PUSH
8221: LD_INT 18
8223: ST_TO_ADDR
// hc_gallery = sandnature ;
8224: LD_ADDR_OWVAR 33
8228: PUSH
8229: LD_STRING sandnature
8231: ST_TO_ADDR
// hc_face_number = 1 ;
8232: LD_ADDR_OWVAR 34
8236: PUSH
8237: LD_INT 1
8239: ST_TO_ADDR
// bird = CreateHuman ;
8240: LD_ADDR_VAR 0 10
8244: PUSH
8245: CALL_OW 44
8249: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8250: LD_VAR 0 10
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 51
// l = l + 1 ;
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: LD_VAR 0 7
8271: PUSH
8272: LD_INT 1
8274: PLUS
8275: ST_TO_ADDR
// end until l = num3 ;
8276: LD_VAR 0 7
8280: PUSH
8281: LD_VAR 0 4
8285: EQUAL
8286: IFFALSE 8216
// l = 0 ;
8288: LD_ADDR_VAR 0 7
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8296: LD_ADDR_OWVAR 28
8300: PUSH
8301: LD_INT 21
8303: ST_TO_ADDR
// hc_gallery = sandnature ;
8304: LD_ADDR_OWVAR 33
8308: PUSH
8309: LD_STRING sandnature
8311: ST_TO_ADDR
// hc_face_number = 5 ;
8312: LD_ADDR_OWVAR 34
8316: PUSH
8317: LD_INT 5
8319: ST_TO_ADDR
// horse := CreateHuman ;
8320: LD_ADDR_VAR 0 11
8324: PUSH
8325: CALL_OW 44
8329: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8330: LD_VAR 0 11
8334: PPUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_INT 0
8342: PPUSH
8343: CALL_OW 49
// l = l + 1 ;
8347: LD_ADDR_VAR 0 7
8351: PUSH
8352: LD_VAR 0 7
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: ST_TO_ADDR
// end until l = num4 ;
8361: LD_VAR 0 7
8365: PUSH
8366: LD_VAR 0 5
8370: EQUAL
8371: IFFALSE 8296
// end ;
8373: LD_VAR 0 6
8377: RET
// export function PrepareComm ; begin
8378: LD_INT 0
8380: PPUSH
// uc_side := 1 ;
8381: LD_ADDR_OWVAR 20
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// uc_nation := 1 ;
8389: LD_ADDR_OWVAR 21
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// hc_gallery :=  ;
8397: LD_ADDR_OWVAR 33
8401: PUSH
8402: LD_STRING 
8404: ST_TO_ADDR
// hc_name :=  ;
8405: LD_ADDR_OWVAR 26
8409: PUSH
8410: LD_STRING 
8412: ST_TO_ADDR
// hc_class := 1 ;
8413: LD_ADDR_OWVAR 28
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// hc_sex := sex_male ;
8421: LD_ADDR_OWVAR 27
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// am_comander := CreateHuman ;
8429: LD_ADDR_EXP 46
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// uc_side := 3 ;
8439: LD_ADDR_OWVAR 20
8443: PUSH
8444: LD_INT 3
8446: ST_TO_ADDR
// uc_nation := 3 ;
8447: LD_ADDR_OWVAR 21
8451: PUSH
8452: LD_INT 3
8454: ST_TO_ADDR
// ru_comander := CreateHuman ;
8455: LD_ADDR_EXP 47
8459: PUSH
8460: CALL_OW 44
8464: ST_TO_ADDR
// uc_side := 2 ;
8465: LD_ADDR_OWVAR 20
8469: PUSH
8470: LD_INT 2
8472: ST_TO_ADDR
// uc_nation := 2 ;
8473: LD_ADDR_OWVAR 21
8477: PUSH
8478: LD_INT 2
8480: ST_TO_ADDR
// hc_name := Heike Steyer ;
8481: LD_ADDR_OWVAR 26
8485: PUSH
8486: LD_STRING Heike Steyer
8488: ST_TO_ADDR
// hc_sex := sex_female ;
8489: LD_ADDR_OWVAR 27
8493: PUSH
8494: LD_INT 2
8496: ST_TO_ADDR
// hc_gallery := sandar ;
8497: LD_ADDR_OWVAR 33
8501: PUSH
8502: LD_STRING sandar
8504: ST_TO_ADDR
// hc_face_number := 14 ;
8505: LD_ADDR_OWVAR 34
8509: PUSH
8510: LD_INT 14
8512: ST_TO_ADDR
// ar_comander := CreateHuman ;
8513: LD_ADDR_EXP 48
8517: PUSH
8518: CALL_OW 44
8522: ST_TO_ADDR
// end ;
8523: LD_VAR 0 1
8527: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
// list := [ ] ;
8533: LD_ADDR_VAR 0 4
8537: PUSH
8538: EMPTY
8539: ST_TO_ADDR
// for i = 1 to filter do
8540: LD_ADDR_VAR 0 5
8544: PUSH
8545: DOUBLE
8546: LD_INT 1
8548: DEC
8549: ST_TO_ADDR
8550: LD_VAR 0 1
8554: PUSH
8555: FOR_TO
8556: IFFALSE 8605
// if GetSpeed ( filter [ i ] ) < speed then
8558: LD_VAR 0 1
8562: PUSH
8563: LD_VAR 0 5
8567: ARRAY
8568: PPUSH
8569: CALL 7868 0 1
8573: PUSH
8574: LD_VAR 0 2
8578: LESS
8579: IFFALSE 8603
// list := list ^ filter [ i ] ;
8581: LD_ADDR_VAR 0 4
8585: PUSH
8586: LD_VAR 0 4
8590: PUSH
8591: LD_VAR 0 1
8595: PUSH
8596: LD_VAR 0 5
8600: ARRAY
8601: ADD
8602: ST_TO_ADDR
8603: GO 8555
8605: POP
8606: POP
// result := list ;
8607: LD_ADDR_VAR 0 3
8611: PUSH
8612: LD_VAR 0 4
8616: ST_TO_ADDR
// end ; end_of_file
8617: LD_VAR 0 3
8621: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8622: LD_INT 0
8624: PPUSH
// ar_miner := 81 ;
8625: LD_ADDR_EXP 59
8629: PUSH
8630: LD_INT 81
8632: ST_TO_ADDR
// ar_crane := 88 ;
8633: LD_ADDR_EXP 58
8637: PUSH
8638: LD_INT 88
8640: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8641: LD_ADDR_EXP 53
8645: PUSH
8646: LD_INT 89
8648: ST_TO_ADDR
// us_hack := 99 ;
8649: LD_ADDR_EXP 54
8653: PUSH
8654: LD_INT 99
8656: ST_TO_ADDR
// us_artillery := 97 ;
8657: LD_ADDR_EXP 55
8661: PUSH
8662: LD_INT 97
8664: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8665: LD_ADDR_EXP 56
8669: PUSH
8670: LD_INT 91
8672: ST_TO_ADDR
// ar_mortar := 92 ;
8673: LD_ADDR_EXP 57
8677: PUSH
8678: LD_INT 92
8680: ST_TO_ADDR
// ru_radar := 98 ;
8681: LD_ADDR_EXP 52
8685: PUSH
8686: LD_INT 98
8688: ST_TO_ADDR
// tech_Artillery := 80 ;
8689: LD_ADDR_EXP 60
8693: PUSH
8694: LD_INT 80
8696: ST_TO_ADDR
// tech_RadMat := 81 ;
8697: LD_ADDR_EXP 61
8701: PUSH
8702: LD_INT 81
8704: ST_TO_ADDR
// tech_BasicTools := 82 ;
8705: LD_ADDR_EXP 62
8709: PUSH
8710: LD_INT 82
8712: ST_TO_ADDR
// tech_Cargo := 83 ;
8713: LD_ADDR_EXP 63
8717: PUSH
8718: LD_INT 83
8720: ST_TO_ADDR
// tech_Track := 84 ;
8721: LD_ADDR_EXP 64
8725: PUSH
8726: LD_INT 84
8728: ST_TO_ADDR
// tech_Crane := 85 ;
8729: LD_ADDR_EXP 65
8733: PUSH
8734: LD_INT 85
8736: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8737: LD_ADDR_EXP 66
8741: PUSH
8742: LD_INT 86
8744: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8745: LD_ADDR_EXP 67
8749: PUSH
8750: LD_INT 87
8752: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8753: LD_ADDR_EXP 68
8757: PUSH
8758: LD_INT 88
8760: ST_TO_ADDR
// class_mastodont := 31 ;
8761: LD_ADDR_EXP 69
8765: PUSH
8766: LD_INT 31
8768: ST_TO_ADDR
// class_horse := 21 ;
8769: LD_ADDR_EXP 70
8773: PUSH
8774: LD_INT 21
8776: ST_TO_ADDR
// end ;
8777: LD_VAR 0 1
8781: RET
// every 1 do
8782: GO 8784
8784: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8785: CALL 8622 0 0
8789: END
// every 0 0$1 do
8790: GO 8792
8792: DISABLE
// begin enable ;
8793: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8794: LD_STRING updateTimer(
8796: PUSH
8797: LD_OWVAR 1
8801: STR
8802: PUSH
8803: LD_STRING );
8805: STR
8806: PPUSH
8807: CALL_OW 559
// end ;
8811: END
// export function SOS_MapStart ( ) ; begin
8812: LD_INT 0
8814: PPUSH
// if streamModeActive then
8815: LD_EXP 71
8819: IFFALSE 8828
// DefineStreamItems ( true ) ;
8821: LD_INT 1
8823: PPUSH
8824: CALL 10478 0 1
// UpdateFactoryWaypoints ( ) ;
8828: CALL 24062 0 0
// end ;
8832: LD_VAR 0 1
8836: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8837: LD_INT 0
8839: PPUSH
// if p2 = 100 then
8840: LD_VAR 0 2
8844: PUSH
8845: LD_INT 100
8847: EQUAL
8848: IFFALSE 9851
// begin if not StreamModeActive then
8850: LD_EXP 71
8854: NOT
8855: IFFALSE 8865
// StreamModeActive := true ;
8857: LD_ADDR_EXP 71
8861: PUSH
8862: LD_INT 1
8864: ST_TO_ADDR
// if p3 = 0 then
8865: LD_VAR 0 3
8869: PUSH
8870: LD_INT 0
8872: EQUAL
8873: IFFALSE 8879
// InitStreamMode ;
8875: CALL 10014 0 0
// if p3 = 1 then
8879: LD_VAR 0 3
8883: PUSH
8884: LD_INT 1
8886: EQUAL
8887: IFFALSE 8897
// sRocket := true ;
8889: LD_ADDR_EXP 76
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// if p3 = 2 then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 2
8904: EQUAL
8905: IFFALSE 8915
// sSpeed := true ;
8907: LD_ADDR_EXP 75
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 3 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 3
8922: EQUAL
8923: IFFALSE 8933
// sEngine := true ;
8925: LD_ADDR_EXP 77
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// if p3 = 4 then
8933: LD_VAR 0 3
8937: PUSH
8938: LD_INT 4
8940: EQUAL
8941: IFFALSE 8951
// sSpec := true ;
8943: LD_ADDR_EXP 74
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// if p3 = 5 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 5
8958: EQUAL
8959: IFFALSE 8969
// sLevel := true ;
8961: LD_ADDR_EXP 78
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// if p3 = 6 then
8969: LD_VAR 0 3
8973: PUSH
8974: LD_INT 6
8976: EQUAL
8977: IFFALSE 8987
// sArmoury := true ;
8979: LD_ADDR_EXP 79
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// if p3 = 7 then
8987: LD_VAR 0 3
8991: PUSH
8992: LD_INT 7
8994: EQUAL
8995: IFFALSE 9005
// sRadar := true ;
8997: LD_ADDR_EXP 80
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// if p3 = 8 then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_INT 8
9012: EQUAL
9013: IFFALSE 9023
// sBunker := true ;
9015: LD_ADDR_EXP 81
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// if p3 = 9 then
9023: LD_VAR 0 3
9027: PUSH
9028: LD_INT 9
9030: EQUAL
9031: IFFALSE 9041
// sHack := true ;
9033: LD_ADDR_EXP 82
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// if p3 = 10 then
9041: LD_VAR 0 3
9045: PUSH
9046: LD_INT 10
9048: EQUAL
9049: IFFALSE 9059
// sFire := true ;
9051: LD_ADDR_EXP 83
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// if p3 = 11 then
9059: LD_VAR 0 3
9063: PUSH
9064: LD_INT 11
9066: EQUAL
9067: IFFALSE 9077
// sRefresh := true ;
9069: LD_ADDR_EXP 84
9073: PUSH
9074: LD_INT 1
9076: ST_TO_ADDR
// if p3 = 12 then
9077: LD_VAR 0 3
9081: PUSH
9082: LD_INT 12
9084: EQUAL
9085: IFFALSE 9095
// sExp := true ;
9087: LD_ADDR_EXP 85
9091: PUSH
9092: LD_INT 1
9094: ST_TO_ADDR
// if p3 = 13 then
9095: LD_VAR 0 3
9099: PUSH
9100: LD_INT 13
9102: EQUAL
9103: IFFALSE 9113
// sDepot := true ;
9105: LD_ADDR_EXP 86
9109: PUSH
9110: LD_INT 1
9112: ST_TO_ADDR
// if p3 = 14 then
9113: LD_VAR 0 3
9117: PUSH
9118: LD_INT 14
9120: EQUAL
9121: IFFALSE 9131
// sFlag := true ;
9123: LD_ADDR_EXP 87
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// if p3 = 15 then
9131: LD_VAR 0 3
9135: PUSH
9136: LD_INT 15
9138: EQUAL
9139: IFFALSE 9149
// sKamikadze := true ;
9141: LD_ADDR_EXP 95
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// if p3 = 16 then
9149: LD_VAR 0 3
9153: PUSH
9154: LD_INT 16
9156: EQUAL
9157: IFFALSE 9167
// sTroll := true ;
9159: LD_ADDR_EXP 96
9163: PUSH
9164: LD_INT 1
9166: ST_TO_ADDR
// if p3 = 17 then
9167: LD_VAR 0 3
9171: PUSH
9172: LD_INT 17
9174: EQUAL
9175: IFFALSE 9185
// sSlow := true ;
9177: LD_ADDR_EXP 97
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// if p3 = 18 then
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 18
9192: EQUAL
9193: IFFALSE 9203
// sLack := true ;
9195: LD_ADDR_EXP 98
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// if p3 = 19 then
9203: LD_VAR 0 3
9207: PUSH
9208: LD_INT 19
9210: EQUAL
9211: IFFALSE 9221
// sTank := true ;
9213: LD_ADDR_EXP 100
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// if p3 = 20 then
9221: LD_VAR 0 3
9225: PUSH
9226: LD_INT 20
9228: EQUAL
9229: IFFALSE 9239
// sRemote := true ;
9231: LD_ADDR_EXP 101
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// if p3 = 21 then
9239: LD_VAR 0 3
9243: PUSH
9244: LD_INT 21
9246: EQUAL
9247: IFFALSE 9257
// sPowell := true ;
9249: LD_ADDR_EXP 102
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// if p3 = 22 then
9257: LD_VAR 0 3
9261: PUSH
9262: LD_INT 22
9264: EQUAL
9265: IFFALSE 9275
// sTeleport := true ;
9267: LD_ADDR_EXP 105
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// if p3 = 23 then
9275: LD_VAR 0 3
9279: PUSH
9280: LD_INT 23
9282: EQUAL
9283: IFFALSE 9293
// sOilTower := true ;
9285: LD_ADDR_EXP 107
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// if p3 = 24 then
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 24
9300: EQUAL
9301: IFFALSE 9311
// sShovel := true ;
9303: LD_ADDR_EXP 108
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// if p3 = 25 then
9311: LD_VAR 0 3
9315: PUSH
9316: LD_INT 25
9318: EQUAL
9319: IFFALSE 9329
// sSheik := true ;
9321: LD_ADDR_EXP 109
9325: PUSH
9326: LD_INT 1
9328: ST_TO_ADDR
// if p3 = 26 then
9329: LD_VAR 0 3
9333: PUSH
9334: LD_INT 26
9336: EQUAL
9337: IFFALSE 9347
// sEarthquake := true ;
9339: LD_ADDR_EXP 111
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// if p3 = 27 then
9347: LD_VAR 0 3
9351: PUSH
9352: LD_INT 27
9354: EQUAL
9355: IFFALSE 9365
// sAI := true ;
9357: LD_ADDR_EXP 112
9361: PUSH
9362: LD_INT 1
9364: ST_TO_ADDR
// if p3 = 28 then
9365: LD_VAR 0 3
9369: PUSH
9370: LD_INT 28
9372: EQUAL
9373: IFFALSE 9383
// sCargo := true ;
9375: LD_ADDR_EXP 115
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// if p3 = 29 then
9383: LD_VAR 0 3
9387: PUSH
9388: LD_INT 29
9390: EQUAL
9391: IFFALSE 9401
// sDLaser := true ;
9393: LD_ADDR_EXP 116
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// if p3 = 30 then
9401: LD_VAR 0 3
9405: PUSH
9406: LD_INT 30
9408: EQUAL
9409: IFFALSE 9419
// sExchange := true ;
9411: LD_ADDR_EXP 117
9415: PUSH
9416: LD_INT 1
9418: ST_TO_ADDR
// if p3 = 31 then
9419: LD_VAR 0 3
9423: PUSH
9424: LD_INT 31
9426: EQUAL
9427: IFFALSE 9437
// sFac := true ;
9429: LD_ADDR_EXP 118
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// if p3 = 32 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 32
9444: EQUAL
9445: IFFALSE 9455
// sPower := true ;
9447: LD_ADDR_EXP 119
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
// if p3 = 33 then
9455: LD_VAR 0 3
9459: PUSH
9460: LD_INT 33
9462: EQUAL
9463: IFFALSE 9473
// sRandom := true ;
9465: LD_ADDR_EXP 120
9469: PUSH
9470: LD_INT 1
9472: ST_TO_ADDR
// if p3 = 34 then
9473: LD_VAR 0 3
9477: PUSH
9478: LD_INT 34
9480: EQUAL
9481: IFFALSE 9491
// sShield := true ;
9483: LD_ADDR_EXP 121
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// if p3 = 35 then
9491: LD_VAR 0 3
9495: PUSH
9496: LD_INT 35
9498: EQUAL
9499: IFFALSE 9509
// sTime := true ;
9501: LD_ADDR_EXP 122
9505: PUSH
9506: LD_INT 1
9508: ST_TO_ADDR
// if p3 = 36 then
9509: LD_VAR 0 3
9513: PUSH
9514: LD_INT 36
9516: EQUAL
9517: IFFALSE 9527
// sTools := true ;
9519: LD_ADDR_EXP 123
9523: PUSH
9524: LD_INT 1
9526: ST_TO_ADDR
// if p3 = 101 then
9527: LD_VAR 0 3
9531: PUSH
9532: LD_INT 101
9534: EQUAL
9535: IFFALSE 9545
// sSold := true ;
9537: LD_ADDR_EXP 88
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// if p3 = 102 then
9545: LD_VAR 0 3
9549: PUSH
9550: LD_INT 102
9552: EQUAL
9553: IFFALSE 9563
// sDiff := true ;
9555: LD_ADDR_EXP 89
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// if p3 = 103 then
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 103
9570: EQUAL
9571: IFFALSE 9581
// sFog := true ;
9573: LD_ADDR_EXP 92
9577: PUSH
9578: LD_INT 1
9580: ST_TO_ADDR
// if p3 = 104 then
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 104
9588: EQUAL
9589: IFFALSE 9599
// sReset := true ;
9591: LD_ADDR_EXP 93
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// if p3 = 105 then
9599: LD_VAR 0 3
9603: PUSH
9604: LD_INT 105
9606: EQUAL
9607: IFFALSE 9617
// sSun := true ;
9609: LD_ADDR_EXP 94
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// if p3 = 106 then
9617: LD_VAR 0 3
9621: PUSH
9622: LD_INT 106
9624: EQUAL
9625: IFFALSE 9635
// sTiger := true ;
9627: LD_ADDR_EXP 90
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
// if p3 = 107 then
9635: LD_VAR 0 3
9639: PUSH
9640: LD_INT 107
9642: EQUAL
9643: IFFALSE 9653
// sBomb := true ;
9645: LD_ADDR_EXP 91
9649: PUSH
9650: LD_INT 1
9652: ST_TO_ADDR
// if p3 = 108 then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 108
9660: EQUAL
9661: IFFALSE 9671
// sWound := true ;
9663: LD_ADDR_EXP 99
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// if p3 = 109 then
9671: LD_VAR 0 3
9675: PUSH
9676: LD_INT 109
9678: EQUAL
9679: IFFALSE 9689
// sBetray := true ;
9681: LD_ADDR_EXP 103
9685: PUSH
9686: LD_INT 1
9688: ST_TO_ADDR
// if p3 = 110 then
9689: LD_VAR 0 3
9693: PUSH
9694: LD_INT 110
9696: EQUAL
9697: IFFALSE 9707
// sContamin := true ;
9699: LD_ADDR_EXP 104
9703: PUSH
9704: LD_INT 1
9706: ST_TO_ADDR
// if p3 = 111 then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 111
9714: EQUAL
9715: IFFALSE 9725
// sOil := true ;
9717: LD_ADDR_EXP 106
9721: PUSH
9722: LD_INT 1
9724: ST_TO_ADDR
// if p3 = 112 then
9725: LD_VAR 0 3
9729: PUSH
9730: LD_INT 112
9732: EQUAL
9733: IFFALSE 9743
// sStu := true ;
9735: LD_ADDR_EXP 110
9739: PUSH
9740: LD_INT 1
9742: ST_TO_ADDR
// if p3 = 113 then
9743: LD_VAR 0 3
9747: PUSH
9748: LD_INT 113
9750: EQUAL
9751: IFFALSE 9761
// sBazooka := true ;
9753: LD_ADDR_EXP 113
9757: PUSH
9758: LD_INT 1
9760: ST_TO_ADDR
// if p3 = 114 then
9761: LD_VAR 0 3
9765: PUSH
9766: LD_INT 114
9768: EQUAL
9769: IFFALSE 9779
// sMortar := true ;
9771: LD_ADDR_EXP 114
9775: PUSH
9776: LD_INT 1
9778: ST_TO_ADDR
// if p3 = 115 then
9779: LD_VAR 0 3
9783: PUSH
9784: LD_INT 115
9786: EQUAL
9787: IFFALSE 9797
// sRanger := true ;
9789: LD_ADDR_EXP 124
9793: PUSH
9794: LD_INT 1
9796: ST_TO_ADDR
// if p3 = 116 then
9797: LD_VAR 0 3
9801: PUSH
9802: LD_INT 116
9804: EQUAL
9805: IFFALSE 9815
// sComputer := true ;
9807: LD_ADDR_EXP 125
9811: PUSH
9812: LD_INT 1
9814: ST_TO_ADDR
// if p3 = 117 then
9815: LD_VAR 0 3
9819: PUSH
9820: LD_INT 117
9822: EQUAL
9823: IFFALSE 9833
// s30 := true ;
9825: LD_ADDR_EXP 126
9829: PUSH
9830: LD_INT 1
9832: ST_TO_ADDR
// if p3 = 118 then
9833: LD_VAR 0 3
9837: PUSH
9838: LD_INT 118
9840: EQUAL
9841: IFFALSE 9851
// s60 := true ;
9843: LD_ADDR_EXP 127
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// end ; if p2 = 101 then
9851: LD_VAR 0 2
9855: PUSH
9856: LD_INT 101
9858: EQUAL
9859: IFFALSE 9987
// begin case p3 of 1 :
9861: LD_VAR 0 3
9865: PUSH
9866: LD_INT 1
9868: DOUBLE
9869: EQUAL
9870: IFTRUE 9874
9872: GO 9881
9874: POP
// hHackUnlimitedResources ; 2 :
9875: CALL 22085 0 0
9879: GO 9987
9881: LD_INT 2
9883: DOUBLE
9884: EQUAL
9885: IFTRUE 9889
9887: GO 9896
9889: POP
// hHackSetLevel10 ; 3 :
9890: CALL 22218 0 0
9894: GO 9987
9896: LD_INT 3
9898: DOUBLE
9899: EQUAL
9900: IFTRUE 9904
9902: GO 9911
9904: POP
// hHackSetLevel10YourUnits ; 4 :
9905: CALL 22303 0 0
9909: GO 9987
9911: LD_INT 4
9913: DOUBLE
9914: EQUAL
9915: IFTRUE 9919
9917: GO 9926
9919: POP
// hHackInvincible ; 5 :
9920: CALL 22751 0 0
9924: GO 9987
9926: LD_INT 5
9928: DOUBLE
9929: EQUAL
9930: IFTRUE 9934
9932: GO 9941
9934: POP
// hHackInvisible ; 6 :
9935: CALL 22862 0 0
9939: GO 9987
9941: LD_INT 6
9943: DOUBLE
9944: EQUAL
9945: IFTRUE 9949
9947: GO 9956
9949: POP
// hHackChangeYourSide ; 7 :
9950: CALL 22919 0 0
9954: GO 9987
9956: LD_INT 7
9958: DOUBLE
9959: EQUAL
9960: IFTRUE 9964
9962: GO 9971
9964: POP
// hHackChangeUnitSide ; 8 :
9965: CALL 22961 0 0
9969: GO 9987
9971: LD_INT 8
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 9986
9979: POP
// hHackFog ; end ;
9980: CALL 23062 0 0
9984: GO 9987
9986: POP
// end ; end ;
9987: LD_VAR 0 7
9991: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9992: GO 9994
9994: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9995: LD_STRING initStreamRollete();
9997: PPUSH
9998: CALL_OW 559
// InitStreamMode ;
10002: CALL 10014 0 0
// DefineStreamItems ( false ) ;
10006: LD_INT 0
10008: PPUSH
10009: CALL 10478 0 1
// end ;
10013: END
// function InitStreamMode ; begin
10014: LD_INT 0
10016: PPUSH
// streamModeActive := false ;
10017: LD_ADDR_EXP 71
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// normalCounter := 36 ;
10025: LD_ADDR_EXP 72
10029: PUSH
10030: LD_INT 36
10032: ST_TO_ADDR
// hardcoreCounter := 18 ;
10033: LD_ADDR_EXP 73
10037: PUSH
10038: LD_INT 18
10040: ST_TO_ADDR
// sRocket := false ;
10041: LD_ADDR_EXP 76
10045: PUSH
10046: LD_INT 0
10048: ST_TO_ADDR
// sSpeed := false ;
10049: LD_ADDR_EXP 75
10053: PUSH
10054: LD_INT 0
10056: ST_TO_ADDR
// sEngine := false ;
10057: LD_ADDR_EXP 77
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// sSpec := false ;
10065: LD_ADDR_EXP 74
10069: PUSH
10070: LD_INT 0
10072: ST_TO_ADDR
// sLevel := false ;
10073: LD_ADDR_EXP 78
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// sArmoury := false ;
10081: LD_ADDR_EXP 79
10085: PUSH
10086: LD_INT 0
10088: ST_TO_ADDR
// sRadar := false ;
10089: LD_ADDR_EXP 80
10093: PUSH
10094: LD_INT 0
10096: ST_TO_ADDR
// sBunker := false ;
10097: LD_ADDR_EXP 81
10101: PUSH
10102: LD_INT 0
10104: ST_TO_ADDR
// sHack := false ;
10105: LD_ADDR_EXP 82
10109: PUSH
10110: LD_INT 0
10112: ST_TO_ADDR
// sFire := false ;
10113: LD_ADDR_EXP 83
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// sRefresh := false ;
10121: LD_ADDR_EXP 84
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// sExp := false ;
10129: LD_ADDR_EXP 85
10133: PUSH
10134: LD_INT 0
10136: ST_TO_ADDR
// sDepot := false ;
10137: LD_ADDR_EXP 86
10141: PUSH
10142: LD_INT 0
10144: ST_TO_ADDR
// sFlag := false ;
10145: LD_ADDR_EXP 87
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// sKamikadze := false ;
10153: LD_ADDR_EXP 95
10157: PUSH
10158: LD_INT 0
10160: ST_TO_ADDR
// sTroll := false ;
10161: LD_ADDR_EXP 96
10165: PUSH
10166: LD_INT 0
10168: ST_TO_ADDR
// sSlow := false ;
10169: LD_ADDR_EXP 97
10173: PUSH
10174: LD_INT 0
10176: ST_TO_ADDR
// sLack := false ;
10177: LD_ADDR_EXP 98
10181: PUSH
10182: LD_INT 0
10184: ST_TO_ADDR
// sTank := false ;
10185: LD_ADDR_EXP 100
10189: PUSH
10190: LD_INT 0
10192: ST_TO_ADDR
// sRemote := false ;
10193: LD_ADDR_EXP 101
10197: PUSH
10198: LD_INT 0
10200: ST_TO_ADDR
// sPowell := false ;
10201: LD_ADDR_EXP 102
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// sTeleport := false ;
10209: LD_ADDR_EXP 105
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// sOilTower := false ;
10217: LD_ADDR_EXP 107
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// sShovel := false ;
10225: LD_ADDR_EXP 108
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// sSheik := false ;
10233: LD_ADDR_EXP 109
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// sEarthquake := false ;
10241: LD_ADDR_EXP 111
10245: PUSH
10246: LD_INT 0
10248: ST_TO_ADDR
// sAI := false ;
10249: LD_ADDR_EXP 112
10253: PUSH
10254: LD_INT 0
10256: ST_TO_ADDR
// sCargo := false ;
10257: LD_ADDR_EXP 115
10261: PUSH
10262: LD_INT 0
10264: ST_TO_ADDR
// sDLaser := false ;
10265: LD_ADDR_EXP 116
10269: PUSH
10270: LD_INT 0
10272: ST_TO_ADDR
// sExchange := false ;
10273: LD_ADDR_EXP 117
10277: PUSH
10278: LD_INT 0
10280: ST_TO_ADDR
// sFac := false ;
10281: LD_ADDR_EXP 118
10285: PUSH
10286: LD_INT 0
10288: ST_TO_ADDR
// sPower := false ;
10289: LD_ADDR_EXP 119
10293: PUSH
10294: LD_INT 0
10296: ST_TO_ADDR
// sRandom := false ;
10297: LD_ADDR_EXP 120
10301: PUSH
10302: LD_INT 0
10304: ST_TO_ADDR
// sShield := false ;
10305: LD_ADDR_EXP 121
10309: PUSH
10310: LD_INT 0
10312: ST_TO_ADDR
// sTime := false ;
10313: LD_ADDR_EXP 122
10317: PUSH
10318: LD_INT 0
10320: ST_TO_ADDR
// sTools := false ;
10321: LD_ADDR_EXP 123
10325: PUSH
10326: LD_INT 0
10328: ST_TO_ADDR
// sSold := false ;
10329: LD_ADDR_EXP 88
10333: PUSH
10334: LD_INT 0
10336: ST_TO_ADDR
// sDiff := false ;
10337: LD_ADDR_EXP 89
10341: PUSH
10342: LD_INT 0
10344: ST_TO_ADDR
// sFog := false ;
10345: LD_ADDR_EXP 92
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// sReset := false ;
10353: LD_ADDR_EXP 93
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// sSun := false ;
10361: LD_ADDR_EXP 94
10365: PUSH
10366: LD_INT 0
10368: ST_TO_ADDR
// sTiger := false ;
10369: LD_ADDR_EXP 90
10373: PUSH
10374: LD_INT 0
10376: ST_TO_ADDR
// sBomb := false ;
10377: LD_ADDR_EXP 91
10381: PUSH
10382: LD_INT 0
10384: ST_TO_ADDR
// sWound := false ;
10385: LD_ADDR_EXP 99
10389: PUSH
10390: LD_INT 0
10392: ST_TO_ADDR
// sBetray := false ;
10393: LD_ADDR_EXP 103
10397: PUSH
10398: LD_INT 0
10400: ST_TO_ADDR
// sContamin := false ;
10401: LD_ADDR_EXP 104
10405: PUSH
10406: LD_INT 0
10408: ST_TO_ADDR
// sOil := false ;
10409: LD_ADDR_EXP 106
10413: PUSH
10414: LD_INT 0
10416: ST_TO_ADDR
// sStu := false ;
10417: LD_ADDR_EXP 110
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
// sBazooka := false ;
10425: LD_ADDR_EXP 113
10429: PUSH
10430: LD_INT 0
10432: ST_TO_ADDR
// sMortar := false ;
10433: LD_ADDR_EXP 114
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
// sRanger := false ;
10441: LD_ADDR_EXP 124
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
// sComputer := false ;
10449: LD_ADDR_EXP 125
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// s30 := false ;
10457: LD_ADDR_EXP 126
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// s60 := false ;
10465: LD_ADDR_EXP 127
10469: PUSH
10470: LD_INT 0
10472: ST_TO_ADDR
// end ;
10473: LD_VAR 0 1
10477: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10478: LD_INT 0
10480: PPUSH
10481: PPUSH
10482: PPUSH
10483: PPUSH
10484: PPUSH
10485: PPUSH
10486: PPUSH
// result := [ ] ;
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: EMPTY
10493: ST_TO_ADDR
// if campaign_id = 1 then
10494: LD_OWVAR 69
10498: PUSH
10499: LD_INT 1
10501: EQUAL
10502: IFFALSE 13668
// begin case mission_number of 1 :
10504: LD_OWVAR 70
10508: PUSH
10509: LD_INT 1
10511: DOUBLE
10512: EQUAL
10513: IFTRUE 10517
10515: GO 10593
10517: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10518: LD_ADDR_VAR 0 2
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: LD_INT 4
10528: PUSH
10529: LD_INT 11
10531: PUSH
10532: LD_INT 12
10534: PUSH
10535: LD_INT 15
10537: PUSH
10538: LD_INT 16
10540: PUSH
10541: LD_INT 22
10543: PUSH
10544: LD_INT 23
10546: PUSH
10547: LD_INT 26
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 101
10563: PUSH
10564: LD_INT 102
10566: PUSH
10567: LD_INT 106
10569: PUSH
10570: LD_INT 116
10572: PUSH
10573: LD_INT 117
10575: PUSH
10576: LD_INT 118
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: ST_TO_ADDR
10591: GO 13666
10593: LD_INT 2
10595: DOUBLE
10596: EQUAL
10597: IFTRUE 10601
10599: GO 10685
10601: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: LD_INT 11
10615: PUSH
10616: LD_INT 12
10618: PUSH
10619: LD_INT 15
10621: PUSH
10622: LD_INT 16
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_INT 23
10630: PUSH
10631: LD_INT 26
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 101
10647: PUSH
10648: LD_INT 102
10650: PUSH
10651: LD_INT 105
10653: PUSH
10654: LD_INT 106
10656: PUSH
10657: LD_INT 108
10659: PUSH
10660: LD_INT 116
10662: PUSH
10663: LD_INT 117
10665: PUSH
10666: LD_INT 118
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: ST_TO_ADDR
10683: GO 13666
10685: LD_INT 3
10687: DOUBLE
10688: EQUAL
10689: IFTRUE 10693
10691: GO 10781
10693: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10694: LD_ADDR_VAR 0 2
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 4
10704: PUSH
10705: LD_INT 5
10707: PUSH
10708: LD_INT 11
10710: PUSH
10711: LD_INT 12
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 16
10719: PUSH
10720: LD_INT 22
10722: PUSH
10723: LD_INT 26
10725: PUSH
10726: LD_INT 36
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 101
10743: PUSH
10744: LD_INT 102
10746: PUSH
10747: LD_INT 105
10749: PUSH
10750: LD_INT 106
10752: PUSH
10753: LD_INT 108
10755: PUSH
10756: LD_INT 116
10758: PUSH
10759: LD_INT 117
10761: PUSH
10762: LD_INT 118
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: ST_TO_ADDR
10779: GO 13666
10781: LD_INT 4
10783: DOUBLE
10784: EQUAL
10785: IFTRUE 10789
10787: GO 10885
10789: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10790: LD_ADDR_VAR 0 2
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: LD_INT 4
10800: PUSH
10801: LD_INT 5
10803: PUSH
10804: LD_INT 8
10806: PUSH
10807: LD_INT 11
10809: PUSH
10810: LD_INT 12
10812: PUSH
10813: LD_INT 15
10815: PUSH
10816: LD_INT 16
10818: PUSH
10819: LD_INT 22
10821: PUSH
10822: LD_INT 23
10824: PUSH
10825: LD_INT 26
10827: PUSH
10828: LD_INT 36
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 101
10847: PUSH
10848: LD_INT 102
10850: PUSH
10851: LD_INT 105
10853: PUSH
10854: LD_INT 106
10856: PUSH
10857: LD_INT 108
10859: PUSH
10860: LD_INT 116
10862: PUSH
10863: LD_INT 117
10865: PUSH
10866: LD_INT 118
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: ST_TO_ADDR
10883: GO 13666
10885: LD_INT 5
10887: DOUBLE
10888: EQUAL
10889: IFTRUE 10893
10891: GO 11005
10893: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10894: LD_ADDR_VAR 0 2
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: LD_INT 4
10904: PUSH
10905: LD_INT 5
10907: PUSH
10908: LD_INT 6
10910: PUSH
10911: LD_INT 8
10913: PUSH
10914: LD_INT 11
10916: PUSH
10917: LD_INT 12
10919: PUSH
10920: LD_INT 15
10922: PUSH
10923: LD_INT 16
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 23
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 26
10937: PUSH
10938: LD_INT 36
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 101
10959: PUSH
10960: LD_INT 102
10962: PUSH
10963: LD_INT 105
10965: PUSH
10966: LD_INT 106
10968: PUSH
10969: LD_INT 108
10971: PUSH
10972: LD_INT 109
10974: PUSH
10975: LD_INT 112
10977: PUSH
10978: LD_INT 116
10980: PUSH
10981: LD_INT 117
10983: PUSH
10984: LD_INT 118
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: ST_TO_ADDR
11003: GO 13666
11005: LD_INT 6
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11145
11013: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11014: LD_ADDR_VAR 0 2
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 4
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: LD_INT 6
11030: PUSH
11031: LD_INT 8
11033: PUSH
11034: LD_INT 11
11036: PUSH
11037: LD_INT 12
11039: PUSH
11040: LD_INT 15
11042: PUSH
11043: LD_INT 16
11045: PUSH
11046: LD_INT 20
11048: PUSH
11049: LD_INT 21
11051: PUSH
11052: LD_INT 22
11054: PUSH
11055: LD_INT 23
11057: PUSH
11058: LD_INT 25
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 30
11066: PUSH
11067: LD_INT 31
11069: PUSH
11070: LD_INT 32
11072: PUSH
11073: LD_INT 36
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 101
11099: PUSH
11100: LD_INT 102
11102: PUSH
11103: LD_INT 105
11105: PUSH
11106: LD_INT 106
11108: PUSH
11109: LD_INT 108
11111: PUSH
11112: LD_INT 109
11114: PUSH
11115: LD_INT 112
11117: PUSH
11118: LD_INT 116
11120: PUSH
11121: LD_INT 117
11123: PUSH
11124: LD_INT 118
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: ST_TO_ADDR
11143: GO 13666
11145: LD_INT 7
11147: DOUBLE
11148: EQUAL
11149: IFTRUE 11153
11151: GO 11265
11153: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11154: LD_ADDR_VAR 0 2
11158: PUSH
11159: LD_INT 2
11161: PUSH
11162: LD_INT 4
11164: PUSH
11165: LD_INT 5
11167: PUSH
11168: LD_INT 7
11170: PUSH
11171: LD_INT 11
11173: PUSH
11174: LD_INT 12
11176: PUSH
11177: LD_INT 15
11179: PUSH
11180: LD_INT 16
11182: PUSH
11183: LD_INT 20
11185: PUSH
11186: LD_INT 21
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 23
11194: PUSH
11195: LD_INT 25
11197: PUSH
11198: LD_INT 26
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 101
11219: PUSH
11220: LD_INT 102
11222: PUSH
11223: LD_INT 103
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 106
11231: PUSH
11232: LD_INT 108
11234: PUSH
11235: LD_INT 112
11237: PUSH
11238: LD_INT 116
11240: PUSH
11241: LD_INT 117
11243: PUSH
11244: LD_INT 118
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: ST_TO_ADDR
11263: GO 13666
11265: LD_INT 8
11267: DOUBLE
11268: EQUAL
11269: IFTRUE 11273
11271: GO 11413
11273: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11274: LD_ADDR_VAR 0 2
11278: PUSH
11279: LD_INT 2
11281: PUSH
11282: LD_INT 4
11284: PUSH
11285: LD_INT 5
11287: PUSH
11288: LD_INT 6
11290: PUSH
11291: LD_INT 7
11293: PUSH
11294: LD_INT 8
11296: PUSH
11297: LD_INT 11
11299: PUSH
11300: LD_INT 12
11302: PUSH
11303: LD_INT 15
11305: PUSH
11306: LD_INT 16
11308: PUSH
11309: LD_INT 20
11311: PUSH
11312: LD_INT 21
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 23
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 26
11326: PUSH
11327: LD_INT 30
11329: PUSH
11330: LD_INT 31
11332: PUSH
11333: LD_INT 32
11335: PUSH
11336: LD_INT 36
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 101
11363: PUSH
11364: LD_INT 102
11366: PUSH
11367: LD_INT 103
11369: PUSH
11370: LD_INT 105
11372: PUSH
11373: LD_INT 106
11375: PUSH
11376: LD_INT 108
11378: PUSH
11379: LD_INT 109
11381: PUSH
11382: LD_INT 112
11384: PUSH
11385: LD_INT 116
11387: PUSH
11388: LD_INT 117
11390: PUSH
11391: LD_INT 118
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: ST_TO_ADDR
11411: GO 13666
11413: LD_INT 9
11415: DOUBLE
11416: EQUAL
11417: IFTRUE 11421
11419: GO 11569
11421: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: LD_INT 5
11435: PUSH
11436: LD_INT 6
11438: PUSH
11439: LD_INT 7
11441: PUSH
11442: LD_INT 8
11444: PUSH
11445: LD_INT 11
11447: PUSH
11448: LD_INT 12
11450: PUSH
11451: LD_INT 15
11453: PUSH
11454: LD_INT 16
11456: PUSH
11457: LD_INT 20
11459: PUSH
11460: LD_INT 21
11462: PUSH
11463: LD_INT 22
11465: PUSH
11466: LD_INT 23
11468: PUSH
11469: LD_INT 25
11471: PUSH
11472: LD_INT 26
11474: PUSH
11475: LD_INT 28
11477: PUSH
11478: LD_INT 30
11480: PUSH
11481: LD_INT 31
11483: PUSH
11484: LD_INT 32
11486: PUSH
11487: LD_INT 36
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 101
11515: PUSH
11516: LD_INT 102
11518: PUSH
11519: LD_INT 103
11521: PUSH
11522: LD_INT 105
11524: PUSH
11525: LD_INT 106
11527: PUSH
11528: LD_INT 108
11530: PUSH
11531: LD_INT 109
11533: PUSH
11534: LD_INT 112
11536: PUSH
11537: LD_INT 114
11539: PUSH
11540: LD_INT 116
11542: PUSH
11543: LD_INT 117
11545: PUSH
11546: LD_INT 118
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: ST_TO_ADDR
11567: GO 13666
11569: LD_INT 10
11571: DOUBLE
11572: EQUAL
11573: IFTRUE 11577
11575: GO 11773
11577: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11578: LD_ADDR_VAR 0 2
11582: PUSH
11583: LD_INT 2
11585: PUSH
11586: LD_INT 4
11588: PUSH
11589: LD_INT 5
11591: PUSH
11592: LD_INT 6
11594: PUSH
11595: LD_INT 7
11597: PUSH
11598: LD_INT 8
11600: PUSH
11601: LD_INT 9
11603: PUSH
11604: LD_INT 10
11606: PUSH
11607: LD_INT 11
11609: PUSH
11610: LD_INT 12
11612: PUSH
11613: LD_INT 13
11615: PUSH
11616: LD_INT 14
11618: PUSH
11619: LD_INT 15
11621: PUSH
11622: LD_INT 16
11624: PUSH
11625: LD_INT 17
11627: PUSH
11628: LD_INT 18
11630: PUSH
11631: LD_INT 19
11633: PUSH
11634: LD_INT 20
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 23
11645: PUSH
11646: LD_INT 24
11648: PUSH
11649: LD_INT 25
11651: PUSH
11652: LD_INT 26
11654: PUSH
11655: LD_INT 28
11657: PUSH
11658: LD_INT 30
11660: PUSH
11661: LD_INT 31
11663: PUSH
11664: LD_INT 32
11666: PUSH
11667: LD_INT 36
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 101
11703: PUSH
11704: LD_INT 102
11706: PUSH
11707: LD_INT 103
11709: PUSH
11710: LD_INT 104
11712: PUSH
11713: LD_INT 105
11715: PUSH
11716: LD_INT 106
11718: PUSH
11719: LD_INT 107
11721: PUSH
11722: LD_INT 108
11724: PUSH
11725: LD_INT 109
11727: PUSH
11728: LD_INT 110
11730: PUSH
11731: LD_INT 111
11733: PUSH
11734: LD_INT 112
11736: PUSH
11737: LD_INT 114
11739: PUSH
11740: LD_INT 116
11742: PUSH
11743: LD_INT 117
11745: PUSH
11746: LD_INT 118
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: ST_TO_ADDR
11771: GO 13666
11773: LD_INT 11
11775: DOUBLE
11776: EQUAL
11777: IFTRUE 11781
11779: GO 11985
11781: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11782: LD_ADDR_VAR 0 2
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: LD_INT 3
11792: PUSH
11793: LD_INT 4
11795: PUSH
11796: LD_INT 5
11798: PUSH
11799: LD_INT 6
11801: PUSH
11802: LD_INT 7
11804: PUSH
11805: LD_INT 8
11807: PUSH
11808: LD_INT 9
11810: PUSH
11811: LD_INT 10
11813: PUSH
11814: LD_INT 11
11816: PUSH
11817: LD_INT 12
11819: PUSH
11820: LD_INT 13
11822: PUSH
11823: LD_INT 14
11825: PUSH
11826: LD_INT 15
11828: PUSH
11829: LD_INT 16
11831: PUSH
11832: LD_INT 17
11834: PUSH
11835: LD_INT 18
11837: PUSH
11838: LD_INT 19
11840: PUSH
11841: LD_INT 20
11843: PUSH
11844: LD_INT 21
11846: PUSH
11847: LD_INT 22
11849: PUSH
11850: LD_INT 23
11852: PUSH
11853: LD_INT 24
11855: PUSH
11856: LD_INT 25
11858: PUSH
11859: LD_INT 26
11861: PUSH
11862: LD_INT 28
11864: PUSH
11865: LD_INT 30
11867: PUSH
11868: LD_INT 31
11870: PUSH
11871: LD_INT 32
11873: PUSH
11874: LD_INT 34
11876: PUSH
11877: LD_INT 36
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 101
11915: PUSH
11916: LD_INT 102
11918: PUSH
11919: LD_INT 103
11921: PUSH
11922: LD_INT 104
11924: PUSH
11925: LD_INT 105
11927: PUSH
11928: LD_INT 106
11930: PUSH
11931: LD_INT 107
11933: PUSH
11934: LD_INT 108
11936: PUSH
11937: LD_INT 109
11939: PUSH
11940: LD_INT 110
11942: PUSH
11943: LD_INT 111
11945: PUSH
11946: LD_INT 112
11948: PUSH
11949: LD_INT 114
11951: PUSH
11952: LD_INT 116
11954: PUSH
11955: LD_INT 117
11957: PUSH
11958: LD_INT 118
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: ST_TO_ADDR
11983: GO 13666
11985: LD_INT 12
11987: DOUBLE
11988: EQUAL
11989: IFTRUE 11993
11991: GO 12213
11993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11994: LD_ADDR_VAR 0 2
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: LD_INT 3
12007: PUSH
12008: LD_INT 4
12010: PUSH
12011: LD_INT 5
12013: PUSH
12014: LD_INT 6
12016: PUSH
12017: LD_INT 7
12019: PUSH
12020: LD_INT 8
12022: PUSH
12023: LD_INT 9
12025: PUSH
12026: LD_INT 10
12028: PUSH
12029: LD_INT 11
12031: PUSH
12032: LD_INT 12
12034: PUSH
12035: LD_INT 13
12037: PUSH
12038: LD_INT 14
12040: PUSH
12041: LD_INT 15
12043: PUSH
12044: LD_INT 16
12046: PUSH
12047: LD_INT 17
12049: PUSH
12050: LD_INT 18
12052: PUSH
12053: LD_INT 19
12055: PUSH
12056: LD_INT 20
12058: PUSH
12059: LD_INT 21
12061: PUSH
12062: LD_INT 22
12064: PUSH
12065: LD_INT 23
12067: PUSH
12068: LD_INT 24
12070: PUSH
12071: LD_INT 25
12073: PUSH
12074: LD_INT 26
12076: PUSH
12077: LD_INT 27
12079: PUSH
12080: LD_INT 28
12082: PUSH
12083: LD_INT 30
12085: PUSH
12086: LD_INT 31
12088: PUSH
12089: LD_INT 32
12091: PUSH
12092: LD_INT 33
12094: PUSH
12095: LD_INT 34
12097: PUSH
12098: LD_INT 36
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 101
12139: PUSH
12140: LD_INT 102
12142: PUSH
12143: LD_INT 103
12145: PUSH
12146: LD_INT 104
12148: PUSH
12149: LD_INT 105
12151: PUSH
12152: LD_INT 106
12154: PUSH
12155: LD_INT 107
12157: PUSH
12158: LD_INT 108
12160: PUSH
12161: LD_INT 109
12163: PUSH
12164: LD_INT 110
12166: PUSH
12167: LD_INT 111
12169: PUSH
12170: LD_INT 112
12172: PUSH
12173: LD_INT 113
12175: PUSH
12176: LD_INT 114
12178: PUSH
12179: LD_INT 116
12181: PUSH
12182: LD_INT 117
12184: PUSH
12185: LD_INT 118
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: ST_TO_ADDR
12211: GO 13666
12213: LD_INT 13
12215: DOUBLE
12216: EQUAL
12217: IFTRUE 12221
12219: GO 12429
12221: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12222: LD_ADDR_VAR 0 2
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 3
12235: PUSH
12236: LD_INT 4
12238: PUSH
12239: LD_INT 5
12241: PUSH
12242: LD_INT 8
12244: PUSH
12245: LD_INT 9
12247: PUSH
12248: LD_INT 10
12250: PUSH
12251: LD_INT 11
12253: PUSH
12254: LD_INT 12
12256: PUSH
12257: LD_INT 14
12259: PUSH
12260: LD_INT 15
12262: PUSH
12263: LD_INT 16
12265: PUSH
12266: LD_INT 17
12268: PUSH
12269: LD_INT 18
12271: PUSH
12272: LD_INT 19
12274: PUSH
12275: LD_INT 20
12277: PUSH
12278: LD_INT 21
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: LD_INT 25
12292: PUSH
12293: LD_INT 26
12295: PUSH
12296: LD_INT 27
12298: PUSH
12299: LD_INT 28
12301: PUSH
12302: LD_INT 30
12304: PUSH
12305: LD_INT 31
12307: PUSH
12308: LD_INT 32
12310: PUSH
12311: LD_INT 33
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 36
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 101
12355: PUSH
12356: LD_INT 102
12358: PUSH
12359: LD_INT 103
12361: PUSH
12362: LD_INT 104
12364: PUSH
12365: LD_INT 105
12367: PUSH
12368: LD_INT 106
12370: PUSH
12371: LD_INT 107
12373: PUSH
12374: LD_INT 108
12376: PUSH
12377: LD_INT 109
12379: PUSH
12380: LD_INT 110
12382: PUSH
12383: LD_INT 111
12385: PUSH
12386: LD_INT 112
12388: PUSH
12389: LD_INT 113
12391: PUSH
12392: LD_INT 114
12394: PUSH
12395: LD_INT 116
12397: PUSH
12398: LD_INT 117
12400: PUSH
12401: LD_INT 118
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: ST_TO_ADDR
12427: GO 13666
12429: LD_INT 14
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12661
12437: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12438: LD_ADDR_VAR 0 2
12442: PUSH
12443: LD_INT 1
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: LD_INT 4
12454: PUSH
12455: LD_INT 5
12457: PUSH
12458: LD_INT 6
12460: PUSH
12461: LD_INT 7
12463: PUSH
12464: LD_INT 8
12466: PUSH
12467: LD_INT 9
12469: PUSH
12470: LD_INT 10
12472: PUSH
12473: LD_INT 11
12475: PUSH
12476: LD_INT 12
12478: PUSH
12479: LD_INT 13
12481: PUSH
12482: LD_INT 14
12484: PUSH
12485: LD_INT 15
12487: PUSH
12488: LD_INT 16
12490: PUSH
12491: LD_INT 17
12493: PUSH
12494: LD_INT 18
12496: PUSH
12497: LD_INT 19
12499: PUSH
12500: LD_INT 20
12502: PUSH
12503: LD_INT 21
12505: PUSH
12506: LD_INT 22
12508: PUSH
12509: LD_INT 23
12511: PUSH
12512: LD_INT 24
12514: PUSH
12515: LD_INT 25
12517: PUSH
12518: LD_INT 26
12520: PUSH
12521: LD_INT 27
12523: PUSH
12524: LD_INT 28
12526: PUSH
12527: LD_INT 29
12529: PUSH
12530: LD_INT 30
12532: PUSH
12533: LD_INT 31
12535: PUSH
12536: LD_INT 32
12538: PUSH
12539: LD_INT 33
12541: PUSH
12542: LD_INT 34
12544: PUSH
12545: LD_INT 36
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 101
12587: PUSH
12588: LD_INT 102
12590: PUSH
12591: LD_INT 103
12593: PUSH
12594: LD_INT 104
12596: PUSH
12597: LD_INT 105
12599: PUSH
12600: LD_INT 106
12602: PUSH
12603: LD_INT 107
12605: PUSH
12606: LD_INT 108
12608: PUSH
12609: LD_INT 109
12611: PUSH
12612: LD_INT 110
12614: PUSH
12615: LD_INT 111
12617: PUSH
12618: LD_INT 112
12620: PUSH
12621: LD_INT 113
12623: PUSH
12624: LD_INT 114
12626: PUSH
12627: LD_INT 116
12629: PUSH
12630: LD_INT 117
12632: PUSH
12633: LD_INT 118
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: ST_TO_ADDR
12659: GO 13666
12661: LD_INT 15
12663: DOUBLE
12664: EQUAL
12665: IFTRUE 12669
12667: GO 12893
12669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12670: LD_ADDR_VAR 0 2
12674: PUSH
12675: LD_INT 1
12677: PUSH
12678: LD_INT 2
12680: PUSH
12681: LD_INT 3
12683: PUSH
12684: LD_INT 4
12686: PUSH
12687: LD_INT 5
12689: PUSH
12690: LD_INT 6
12692: PUSH
12693: LD_INT 7
12695: PUSH
12696: LD_INT 8
12698: PUSH
12699: LD_INT 9
12701: PUSH
12702: LD_INT 10
12704: PUSH
12705: LD_INT 11
12707: PUSH
12708: LD_INT 12
12710: PUSH
12711: LD_INT 13
12713: PUSH
12714: LD_INT 14
12716: PUSH
12717: LD_INT 15
12719: PUSH
12720: LD_INT 16
12722: PUSH
12723: LD_INT 17
12725: PUSH
12726: LD_INT 18
12728: PUSH
12729: LD_INT 19
12731: PUSH
12732: LD_INT 20
12734: PUSH
12735: LD_INT 21
12737: PUSH
12738: LD_INT 22
12740: PUSH
12741: LD_INT 23
12743: PUSH
12744: LD_INT 24
12746: PUSH
12747: LD_INT 25
12749: PUSH
12750: LD_INT 26
12752: PUSH
12753: LD_INT 27
12755: PUSH
12756: LD_INT 28
12758: PUSH
12759: LD_INT 29
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 31
12767: PUSH
12768: LD_INT 32
12770: PUSH
12771: LD_INT 33
12773: PUSH
12774: LD_INT 34
12776: PUSH
12777: LD_INT 36
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 101
12819: PUSH
12820: LD_INT 102
12822: PUSH
12823: LD_INT 103
12825: PUSH
12826: LD_INT 104
12828: PUSH
12829: LD_INT 105
12831: PUSH
12832: LD_INT 106
12834: PUSH
12835: LD_INT 107
12837: PUSH
12838: LD_INT 108
12840: PUSH
12841: LD_INT 109
12843: PUSH
12844: LD_INT 110
12846: PUSH
12847: LD_INT 111
12849: PUSH
12850: LD_INT 112
12852: PUSH
12853: LD_INT 113
12855: PUSH
12856: LD_INT 114
12858: PUSH
12859: LD_INT 116
12861: PUSH
12862: LD_INT 117
12864: PUSH
12865: LD_INT 118
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: ST_TO_ADDR
12891: GO 13666
12893: LD_INT 16
12895: DOUBLE
12896: EQUAL
12897: IFTRUE 12901
12899: GO 13037
12901: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12902: LD_ADDR_VAR 0 2
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 4
12912: PUSH
12913: LD_INT 5
12915: PUSH
12916: LD_INT 7
12918: PUSH
12919: LD_INT 11
12921: PUSH
12922: LD_INT 12
12924: PUSH
12925: LD_INT 15
12927: PUSH
12928: LD_INT 16
12930: PUSH
12931: LD_INT 20
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 26
12948: PUSH
12949: LD_INT 30
12951: PUSH
12952: LD_INT 31
12954: PUSH
12955: LD_INT 32
12957: PUSH
12958: LD_INT 33
12960: PUSH
12961: LD_INT 34
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 101
12987: PUSH
12988: LD_INT 102
12990: PUSH
12991: LD_INT 103
12993: PUSH
12994: LD_INT 106
12996: PUSH
12997: LD_INT 108
12999: PUSH
13000: LD_INT 112
13002: PUSH
13003: LD_INT 113
13005: PUSH
13006: LD_INT 114
13008: PUSH
13009: LD_INT 116
13011: PUSH
13012: LD_INT 117
13014: PUSH
13015: LD_INT 118
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: ST_TO_ADDR
13035: GO 13666
13037: LD_INT 17
13039: DOUBLE
13040: EQUAL
13041: IFTRUE 13045
13043: GO 13269
13045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13046: LD_ADDR_VAR 0 2
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: LD_INT 2
13056: PUSH
13057: LD_INT 3
13059: PUSH
13060: LD_INT 4
13062: PUSH
13063: LD_INT 5
13065: PUSH
13066: LD_INT 6
13068: PUSH
13069: LD_INT 7
13071: PUSH
13072: LD_INT 8
13074: PUSH
13075: LD_INT 9
13077: PUSH
13078: LD_INT 10
13080: PUSH
13081: LD_INT 11
13083: PUSH
13084: LD_INT 12
13086: PUSH
13087: LD_INT 13
13089: PUSH
13090: LD_INT 14
13092: PUSH
13093: LD_INT 15
13095: PUSH
13096: LD_INT 16
13098: PUSH
13099: LD_INT 17
13101: PUSH
13102: LD_INT 18
13104: PUSH
13105: LD_INT 19
13107: PUSH
13108: LD_INT 20
13110: PUSH
13111: LD_INT 21
13113: PUSH
13114: LD_INT 22
13116: PUSH
13117: LD_INT 23
13119: PUSH
13120: LD_INT 24
13122: PUSH
13123: LD_INT 25
13125: PUSH
13126: LD_INT 26
13128: PUSH
13129: LD_INT 27
13131: PUSH
13132: LD_INT 28
13134: PUSH
13135: LD_INT 29
13137: PUSH
13138: LD_INT 30
13140: PUSH
13141: LD_INT 31
13143: PUSH
13144: LD_INT 32
13146: PUSH
13147: LD_INT 33
13149: PUSH
13150: LD_INT 34
13152: PUSH
13153: LD_INT 36
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 101
13195: PUSH
13196: LD_INT 102
13198: PUSH
13199: LD_INT 103
13201: PUSH
13202: LD_INT 104
13204: PUSH
13205: LD_INT 105
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 107
13213: PUSH
13214: LD_INT 108
13216: PUSH
13217: LD_INT 109
13219: PUSH
13220: LD_INT 110
13222: PUSH
13223: LD_INT 111
13225: PUSH
13226: LD_INT 112
13228: PUSH
13229: LD_INT 113
13231: PUSH
13232: LD_INT 114
13234: PUSH
13235: LD_INT 116
13237: PUSH
13238: LD_INT 117
13240: PUSH
13241: LD_INT 118
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: ST_TO_ADDR
13267: GO 13666
13269: LD_INT 18
13271: DOUBLE
13272: EQUAL
13273: IFTRUE 13277
13275: GO 13425
13277: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13278: LD_ADDR_VAR 0 2
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: LD_INT 4
13288: PUSH
13289: LD_INT 5
13291: PUSH
13292: LD_INT 7
13294: PUSH
13295: LD_INT 11
13297: PUSH
13298: LD_INT 12
13300: PUSH
13301: LD_INT 15
13303: PUSH
13304: LD_INT 16
13306: PUSH
13307: LD_INT 20
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 22
13315: PUSH
13316: LD_INT 23
13318: PUSH
13319: LD_INT 25
13321: PUSH
13322: LD_INT 26
13324: PUSH
13325: LD_INT 30
13327: PUSH
13328: LD_INT 31
13330: PUSH
13331: LD_INT 32
13333: PUSH
13334: LD_INT 33
13336: PUSH
13337: LD_INT 34
13339: PUSH
13340: LD_INT 35
13342: PUSH
13343: LD_INT 36
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 101
13371: PUSH
13372: LD_INT 102
13374: PUSH
13375: LD_INT 103
13377: PUSH
13378: LD_INT 106
13380: PUSH
13381: LD_INT 108
13383: PUSH
13384: LD_INT 112
13386: PUSH
13387: LD_INT 113
13389: PUSH
13390: LD_INT 114
13392: PUSH
13393: LD_INT 115
13395: PUSH
13396: LD_INT 116
13398: PUSH
13399: LD_INT 117
13401: PUSH
13402: LD_INT 118
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: ST_TO_ADDR
13423: GO 13666
13425: LD_INT 19
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 13665
13433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13434: LD_ADDR_VAR 0 2
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: LD_INT 3
13447: PUSH
13448: LD_INT 4
13450: PUSH
13451: LD_INT 5
13453: PUSH
13454: LD_INT 6
13456: PUSH
13457: LD_INT 7
13459: PUSH
13460: LD_INT 8
13462: PUSH
13463: LD_INT 9
13465: PUSH
13466: LD_INT 10
13468: PUSH
13469: LD_INT 11
13471: PUSH
13472: LD_INT 12
13474: PUSH
13475: LD_INT 13
13477: PUSH
13478: LD_INT 14
13480: PUSH
13481: LD_INT 15
13483: PUSH
13484: LD_INT 16
13486: PUSH
13487: LD_INT 17
13489: PUSH
13490: LD_INT 18
13492: PUSH
13493: LD_INT 19
13495: PUSH
13496: LD_INT 20
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 22
13504: PUSH
13505: LD_INT 23
13507: PUSH
13508: LD_INT 24
13510: PUSH
13511: LD_INT 25
13513: PUSH
13514: LD_INT 26
13516: PUSH
13517: LD_INT 27
13519: PUSH
13520: LD_INT 28
13522: PUSH
13523: LD_INT 29
13525: PUSH
13526: LD_INT 30
13528: PUSH
13529: LD_INT 31
13531: PUSH
13532: LD_INT 32
13534: PUSH
13535: LD_INT 33
13537: PUSH
13538: LD_INT 34
13540: PUSH
13541: LD_INT 35
13543: PUSH
13544: LD_INT 36
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 101
13587: PUSH
13588: LD_INT 102
13590: PUSH
13591: LD_INT 103
13593: PUSH
13594: LD_INT 104
13596: PUSH
13597: LD_INT 105
13599: PUSH
13600: LD_INT 106
13602: PUSH
13603: LD_INT 107
13605: PUSH
13606: LD_INT 108
13608: PUSH
13609: LD_INT 109
13611: PUSH
13612: LD_INT 110
13614: PUSH
13615: LD_INT 111
13617: PUSH
13618: LD_INT 112
13620: PUSH
13621: LD_INT 113
13623: PUSH
13624: LD_INT 114
13626: PUSH
13627: LD_INT 115
13629: PUSH
13630: LD_INT 116
13632: PUSH
13633: LD_INT 117
13635: PUSH
13636: LD_INT 118
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: ST_TO_ADDR
13663: GO 13666
13665: POP
// end else
13666: GO 13897
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13668: LD_ADDR_VAR 0 2
13672: PUSH
13673: LD_INT 1
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 3
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: LD_INT 5
13687: PUSH
13688: LD_INT 6
13690: PUSH
13691: LD_INT 7
13693: PUSH
13694: LD_INT 8
13696: PUSH
13697: LD_INT 9
13699: PUSH
13700: LD_INT 10
13702: PUSH
13703: LD_INT 11
13705: PUSH
13706: LD_INT 12
13708: PUSH
13709: LD_INT 13
13711: PUSH
13712: LD_INT 14
13714: PUSH
13715: LD_INT 15
13717: PUSH
13718: LD_INT 16
13720: PUSH
13721: LD_INT 17
13723: PUSH
13724: LD_INT 18
13726: PUSH
13727: LD_INT 19
13729: PUSH
13730: LD_INT 20
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_INT 23
13741: PUSH
13742: LD_INT 24
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 27
13753: PUSH
13754: LD_INT 28
13756: PUSH
13757: LD_INT 29
13759: PUSH
13760: LD_INT 30
13762: PUSH
13763: LD_INT 31
13765: PUSH
13766: LD_INT 32
13768: PUSH
13769: LD_INT 33
13771: PUSH
13772: LD_INT 34
13774: PUSH
13775: LD_INT 35
13777: PUSH
13778: LD_INT 36
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 101
13821: PUSH
13822: LD_INT 102
13824: PUSH
13825: LD_INT 103
13827: PUSH
13828: LD_INT 104
13830: PUSH
13831: LD_INT 105
13833: PUSH
13834: LD_INT 106
13836: PUSH
13837: LD_INT 107
13839: PUSH
13840: LD_INT 108
13842: PUSH
13843: LD_INT 109
13845: PUSH
13846: LD_INT 110
13848: PUSH
13849: LD_INT 111
13851: PUSH
13852: LD_INT 112
13854: PUSH
13855: LD_INT 113
13857: PUSH
13858: LD_INT 114
13860: PUSH
13861: LD_INT 115
13863: PUSH
13864: LD_INT 116
13866: PUSH
13867: LD_INT 117
13869: PUSH
13870: LD_INT 118
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: ST_TO_ADDR
// if result then
13897: LD_VAR 0 2
13901: IFFALSE 14687
// begin normal :=  ;
13903: LD_ADDR_VAR 0 5
13907: PUSH
13908: LD_STRING 
13910: ST_TO_ADDR
// hardcore :=  ;
13911: LD_ADDR_VAR 0 6
13915: PUSH
13916: LD_STRING 
13918: ST_TO_ADDR
// active :=  ;
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: LD_STRING 
13926: ST_TO_ADDR
// for i = 1 to normalCounter do
13927: LD_ADDR_VAR 0 8
13931: PUSH
13932: DOUBLE
13933: LD_INT 1
13935: DEC
13936: ST_TO_ADDR
13937: LD_EXP 72
13941: PUSH
13942: FOR_TO
13943: IFFALSE 14044
// begin tmp := 0 ;
13945: LD_ADDR_VAR 0 3
13949: PUSH
13950: LD_STRING 0
13952: ST_TO_ADDR
// if result [ 1 ] then
13953: LD_VAR 0 2
13957: PUSH
13958: LD_INT 1
13960: ARRAY
13961: IFFALSE 14026
// if result [ 1 ] [ 1 ] = i then
13963: LD_VAR 0 2
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PUSH
13976: LD_VAR 0 8
13980: EQUAL
13981: IFFALSE 14026
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_VAR 0 2
13992: PPUSH
13993: LD_INT 1
13995: PPUSH
13996: LD_VAR 0 2
14000: PUSH
14001: LD_INT 1
14003: ARRAY
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 3
14012: PPUSH
14013: CALL_OW 1
14017: ST_TO_ADDR
// tmp := 1 ;
14018: LD_ADDR_VAR 0 3
14022: PUSH
14023: LD_STRING 1
14025: ST_TO_ADDR
// end ; normal := normal & tmp ;
14026: LD_ADDR_VAR 0 5
14030: PUSH
14031: LD_VAR 0 5
14035: PUSH
14036: LD_VAR 0 3
14040: STR
14041: ST_TO_ADDR
// end ;
14042: GO 13942
14044: POP
14045: POP
// for i = 1 to hardcoreCounter do
14046: LD_ADDR_VAR 0 8
14050: PUSH
14051: DOUBLE
14052: LD_INT 1
14054: DEC
14055: ST_TO_ADDR
14056: LD_EXP 73
14060: PUSH
14061: FOR_TO
14062: IFFALSE 14167
// begin tmp := 0 ;
14064: LD_ADDR_VAR 0 3
14068: PUSH
14069: LD_STRING 0
14071: ST_TO_ADDR
// if result [ 2 ] then
14072: LD_VAR 0 2
14076: PUSH
14077: LD_INT 2
14079: ARRAY
14080: IFFALSE 14149
// if result [ 2 ] [ 1 ] = 100 + i then
14082: LD_VAR 0 2
14086: PUSH
14087: LD_INT 2
14089: ARRAY
14090: PUSH
14091: LD_INT 1
14093: ARRAY
14094: PUSH
14095: LD_INT 100
14097: PUSH
14098: LD_VAR 0 8
14102: PLUS
14103: EQUAL
14104: IFFALSE 14149
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14106: LD_ADDR_VAR 0 2
14110: PUSH
14111: LD_VAR 0 2
14115: PPUSH
14116: LD_INT 2
14118: PPUSH
14119: LD_VAR 0 2
14123: PUSH
14124: LD_INT 2
14126: ARRAY
14127: PPUSH
14128: LD_INT 1
14130: PPUSH
14131: CALL_OW 3
14135: PPUSH
14136: CALL_OW 1
14140: ST_TO_ADDR
// tmp := 1 ;
14141: LD_ADDR_VAR 0 3
14145: PUSH
14146: LD_STRING 1
14148: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14149: LD_ADDR_VAR 0 6
14153: PUSH
14154: LD_VAR 0 6
14158: PUSH
14159: LD_VAR 0 3
14163: STR
14164: ST_TO_ADDR
// end ;
14165: GO 14061
14167: POP
14168: POP
// if isGameLoad then
14169: LD_VAR 0 1
14173: IFFALSE 14648
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_EXP 76
14184: PUSH
14185: LD_EXP 75
14189: PUSH
14190: LD_EXP 77
14194: PUSH
14195: LD_EXP 74
14199: PUSH
14200: LD_EXP 78
14204: PUSH
14205: LD_EXP 79
14209: PUSH
14210: LD_EXP 80
14214: PUSH
14215: LD_EXP 81
14219: PUSH
14220: LD_EXP 82
14224: PUSH
14225: LD_EXP 83
14229: PUSH
14230: LD_EXP 84
14234: PUSH
14235: LD_EXP 85
14239: PUSH
14240: LD_EXP 86
14244: PUSH
14245: LD_EXP 87
14249: PUSH
14250: LD_EXP 95
14254: PUSH
14255: LD_EXP 96
14259: PUSH
14260: LD_EXP 97
14264: PUSH
14265: LD_EXP 98
14269: PUSH
14270: LD_EXP 100
14274: PUSH
14275: LD_EXP 101
14279: PUSH
14280: LD_EXP 102
14284: PUSH
14285: LD_EXP 105
14289: PUSH
14290: LD_EXP 107
14294: PUSH
14295: LD_EXP 108
14299: PUSH
14300: LD_EXP 109
14304: PUSH
14305: LD_EXP 111
14309: PUSH
14310: LD_EXP 112
14314: PUSH
14315: LD_EXP 115
14319: PUSH
14320: LD_EXP 116
14324: PUSH
14325: LD_EXP 117
14329: PUSH
14330: LD_EXP 118
14334: PUSH
14335: LD_EXP 119
14339: PUSH
14340: LD_EXP 120
14344: PUSH
14345: LD_EXP 121
14349: PUSH
14350: LD_EXP 122
14354: PUSH
14355: LD_EXP 123
14359: PUSH
14360: LD_EXP 88
14364: PUSH
14365: LD_EXP 89
14369: PUSH
14370: LD_EXP 92
14374: PUSH
14375: LD_EXP 93
14379: PUSH
14380: LD_EXP 94
14384: PUSH
14385: LD_EXP 90
14389: PUSH
14390: LD_EXP 91
14394: PUSH
14395: LD_EXP 99
14399: PUSH
14400: LD_EXP 103
14404: PUSH
14405: LD_EXP 104
14409: PUSH
14410: LD_EXP 106
14414: PUSH
14415: LD_EXP 110
14419: PUSH
14420: LD_EXP 113
14424: PUSH
14425: LD_EXP 114
14429: PUSH
14430: LD_EXP 124
14434: PUSH
14435: LD_EXP 125
14439: PUSH
14440: LD_EXP 126
14444: PUSH
14445: LD_EXP 127
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: ST_TO_ADDR
// tmp :=  ;
14506: LD_ADDR_VAR 0 3
14510: PUSH
14511: LD_STRING 
14513: ST_TO_ADDR
// for i = 1 to normalCounter do
14514: LD_ADDR_VAR 0 8
14518: PUSH
14519: DOUBLE
14520: LD_INT 1
14522: DEC
14523: ST_TO_ADDR
14524: LD_EXP 72
14528: PUSH
14529: FOR_TO
14530: IFFALSE 14566
// begin if flags [ i ] then
14532: LD_VAR 0 4
14536: PUSH
14537: LD_VAR 0 8
14541: ARRAY
14542: IFFALSE 14564
// tmp := tmp & i & ; ;
14544: LD_ADDR_VAR 0 3
14548: PUSH
14549: LD_VAR 0 3
14553: PUSH
14554: LD_VAR 0 8
14558: STR
14559: PUSH
14560: LD_STRING ;
14562: STR
14563: ST_TO_ADDR
// end ;
14564: GO 14529
14566: POP
14567: POP
// for i = 1 to hardcoreCounter do
14568: LD_ADDR_VAR 0 8
14572: PUSH
14573: DOUBLE
14574: LD_INT 1
14576: DEC
14577: ST_TO_ADDR
14578: LD_EXP 73
14582: PUSH
14583: FOR_TO
14584: IFFALSE 14630
// begin if flags [ normalCounter + i ] then
14586: LD_VAR 0 4
14590: PUSH
14591: LD_EXP 72
14595: PUSH
14596: LD_VAR 0 8
14600: PLUS
14601: ARRAY
14602: IFFALSE 14628
// tmp := tmp & ( 100 + i ) & ; ;
14604: LD_ADDR_VAR 0 3
14608: PUSH
14609: LD_VAR 0 3
14613: PUSH
14614: LD_INT 100
14616: PUSH
14617: LD_VAR 0 8
14621: PLUS
14622: STR
14623: PUSH
14624: LD_STRING ;
14626: STR
14627: ST_TO_ADDR
// end ;
14628: GO 14583
14630: POP
14631: POP
// if tmp then
14632: LD_VAR 0 3
14636: IFFALSE 14648
// active := tmp ;
14638: LD_ADDR_VAR 0 7
14642: PUSH
14643: LD_VAR 0 3
14647: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14648: LD_STRING getStreamItemsFromMission("
14650: PUSH
14651: LD_VAR 0 5
14655: STR
14656: PUSH
14657: LD_STRING ","
14659: STR
14660: PUSH
14661: LD_VAR 0 6
14665: STR
14666: PUSH
14667: LD_STRING ","
14669: STR
14670: PUSH
14671: LD_VAR 0 7
14675: STR
14676: PUSH
14677: LD_STRING ")
14679: STR
14680: PPUSH
14681: CALL_OW 559
// end else
14685: GO 14694
// ToLua ( getStreamItemsFromMission("","","") ) ;
14687: LD_STRING getStreamItemsFromMission("","","")
14689: PPUSH
14690: CALL_OW 559
// end ;
14694: LD_VAR 0 2
14698: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14699: LD_EXP 71
14703: PUSH
14704: LD_EXP 76
14708: AND
14709: IFFALSE 14833
14711: GO 14713
14713: DISABLE
14714: LD_INT 0
14716: PPUSH
14717: PPUSH
// begin enable ;
14718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14719: LD_ADDR_VAR 0 2
14723: PUSH
14724: LD_INT 22
14726: PUSH
14727: LD_OWVAR 2
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: LD_INT 34
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 34
14751: PUSH
14752: LD_INT 45
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 34
14761: PUSH
14762: LD_INT 28
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 34
14771: PUSH
14772: LD_INT 47
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PPUSH
14790: CALL_OW 69
14794: ST_TO_ADDR
// if not tmp then
14795: LD_VAR 0 2
14799: NOT
14800: IFFALSE 14804
// exit ;
14802: GO 14833
// for i in tmp do
14804: LD_ADDR_VAR 0 1
14808: PUSH
14809: LD_VAR 0 2
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14831
// begin SetLives ( i , 0 ) ;
14817: LD_VAR 0 1
14821: PPUSH
14822: LD_INT 0
14824: PPUSH
14825: CALL_OW 234
// end ;
14829: GO 14814
14831: POP
14832: POP
// end ;
14833: PPOPN 2
14835: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14836: LD_EXP 71
14840: PUSH
14841: LD_EXP 77
14845: AND
14846: IFFALSE 14930
14848: GO 14850
14850: DISABLE
14851: LD_INT 0
14853: PPUSH
14854: PPUSH
// begin enable ;
14855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_OWVAR 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 32
14875: PUSH
14876: LD_INT 3
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: ST_TO_ADDR
// if not tmp then
14892: LD_VAR 0 2
14896: NOT
14897: IFFALSE 14901
// exit ;
14899: GO 14930
// for i in tmp do
14901: LD_ADDR_VAR 0 1
14905: PUSH
14906: LD_VAR 0 2
14910: PUSH
14911: FOR_IN
14912: IFFALSE 14928
// begin SetLives ( i , 0 ) ;
14914: LD_VAR 0 1
14918: PPUSH
14919: LD_INT 0
14921: PPUSH
14922: CALL_OW 234
// end ;
14926: GO 14911
14928: POP
14929: POP
// end ;
14930: PPOPN 2
14932: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14933: LD_EXP 71
14937: PUSH
14938: LD_EXP 74
14942: AND
14943: IFFALSE 15036
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
// begin enable ;
14951: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_OWVAR 2
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: LD_INT 25
14974: PUSH
14975: LD_INT 5
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 25
14984: PUSH
14985: LD_INT 9
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 25
14994: PUSH
14995: LD_INT 8
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PPUSH
15012: CALL_OW 69
15016: PUSH
15017: FOR_IN
15018: IFFALSE 15034
// begin SetClass ( i , 1 ) ;
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: CALL_OW 336
// end ;
15032: GO 15017
15034: POP
15035: POP
// end ;
15036: PPOPN 1
15038: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15039: LD_EXP 71
15043: PUSH
15044: LD_EXP 75
15048: AND
15049: PUSH
15050: LD_OWVAR 65
15054: PUSH
15055: LD_INT 7
15057: LESS
15058: AND
15059: IFFALSE 15073
15061: GO 15063
15063: DISABLE
// begin enable ;
15064: ENABLE
// game_speed := 7 ;
15065: LD_ADDR_OWVAR 65
15069: PUSH
15070: LD_INT 7
15072: ST_TO_ADDR
// end ;
15073: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15074: LD_EXP 71
15078: PUSH
15079: LD_EXP 78
15083: AND
15084: IFFALSE 15286
15086: GO 15088
15088: DISABLE
15089: LD_INT 0
15091: PPUSH
15092: PPUSH
15093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_INT 81
15101: PUSH
15102: LD_OWVAR 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 21
15113: PUSH
15114: LD_INT 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PPUSH
15125: CALL_OW 69
15129: ST_TO_ADDR
// if not tmp then
15130: LD_VAR 0 3
15134: NOT
15135: IFFALSE 15139
// exit ;
15137: GO 15286
// if tmp > 5 then
15139: LD_VAR 0 3
15143: PUSH
15144: LD_INT 5
15146: GREATER
15147: IFFALSE 15159
// k := 5 else
15149: LD_ADDR_VAR 0 2
15153: PUSH
15154: LD_INT 5
15156: ST_TO_ADDR
15157: GO 15169
// k := tmp ;
15159: LD_ADDR_VAR 0 2
15163: PUSH
15164: LD_VAR 0 3
15168: ST_TO_ADDR
// for i := 1 to k do
15169: LD_ADDR_VAR 0 1
15173: PUSH
15174: DOUBLE
15175: LD_INT 1
15177: DEC
15178: ST_TO_ADDR
15179: LD_VAR 0 2
15183: PUSH
15184: FOR_TO
15185: IFFALSE 15284
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15187: LD_VAR 0 3
15191: PUSH
15192: LD_VAR 0 1
15196: ARRAY
15197: PPUSH
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 4
15205: MOD
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: PPUSH
15211: CALL_OW 259
15215: PUSH
15216: LD_INT 10
15218: LESS
15219: IFFALSE 15282
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15221: LD_VAR 0 3
15225: PUSH
15226: LD_VAR 0 1
15230: ARRAY
15231: PPUSH
15232: LD_VAR 0 1
15236: PUSH
15237: LD_INT 4
15239: MOD
15240: PUSH
15241: LD_INT 1
15243: PLUS
15244: PPUSH
15245: LD_VAR 0 3
15249: PUSH
15250: LD_VAR 0 1
15254: ARRAY
15255: PPUSH
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 4
15263: MOD
15264: PUSH
15265: LD_INT 1
15267: PLUS
15268: PPUSH
15269: CALL_OW 259
15273: PUSH
15274: LD_INT 1
15276: PLUS
15277: PPUSH
15278: CALL_OW 237
15282: GO 15184
15284: POP
15285: POP
// end ;
15286: PPOPN 3
15288: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15289: LD_EXP 71
15293: PUSH
15294: LD_EXP 79
15298: AND
15299: IFFALSE 15319
15301: GO 15303
15303: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15304: LD_INT 4
15306: PPUSH
15307: LD_OWVAR 2
15311: PPUSH
15312: LD_INT 0
15314: PPUSH
15315: CALL_OW 324
15319: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15320: LD_EXP 71
15324: PUSH
15325: LD_EXP 108
15329: AND
15330: IFFALSE 15350
15332: GO 15334
15334: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15335: LD_INT 19
15337: PPUSH
15338: LD_OWVAR 2
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 324
15350: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15351: LD_EXP 71
15355: PUSH
15356: LD_EXP 80
15360: AND
15361: IFFALSE 15463
15363: GO 15365
15365: DISABLE
15366: LD_INT 0
15368: PPUSH
15369: PPUSH
// begin enable ;
15370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_INT 22
15378: PUSH
15379: LD_OWVAR 2
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 34
15393: PUSH
15394: LD_INT 11
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 34
15403: PUSH
15404: LD_INT 30
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 69
15424: ST_TO_ADDR
// if not tmp then
15425: LD_VAR 0 2
15429: NOT
15430: IFFALSE 15434
// exit ;
15432: GO 15463
// for i in tmp do
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_VAR 0 2
15443: PUSH
15444: FOR_IN
15445: IFFALSE 15461
// begin SetLives ( i , 0 ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 0
15454: PPUSH
15455: CALL_OW 234
// end ;
15459: GO 15444
15461: POP
15462: POP
// end ;
15463: PPOPN 2
15465: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15466: LD_EXP 71
15470: PUSH
15471: LD_EXP 81
15475: AND
15476: IFFALSE 15496
15478: GO 15480
15480: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15481: LD_INT 32
15483: PPUSH
15484: LD_OWVAR 2
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 324
15496: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15497: LD_EXP 71
15501: PUSH
15502: LD_EXP 82
15506: AND
15507: IFFALSE 15688
15509: GO 15511
15511: DISABLE
15512: LD_INT 0
15514: PPUSH
15515: PPUSH
15516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15517: LD_ADDR_VAR 0 2
15521: PUSH
15522: LD_INT 22
15524: PUSH
15525: LD_OWVAR 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 33
15536: PUSH
15537: LD_INT 3
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: ST_TO_ADDR
// if not tmp then
15553: LD_VAR 0 2
15557: NOT
15558: IFFALSE 15562
// exit ;
15560: GO 15688
// side := 0 ;
15562: LD_ADDR_VAR 0 3
15566: PUSH
15567: LD_INT 0
15569: ST_TO_ADDR
// for i := 1 to 8 do
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: DOUBLE
15576: LD_INT 1
15578: DEC
15579: ST_TO_ADDR
15580: LD_INT 8
15582: PUSH
15583: FOR_TO
15584: IFFALSE 15632
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15586: LD_OWVAR 2
15590: PUSH
15591: LD_VAR 0 1
15595: NONEQUAL
15596: PUSH
15597: LD_OWVAR 2
15601: PPUSH
15602: LD_VAR 0 1
15606: PPUSH
15607: CALL_OW 81
15611: PUSH
15612: LD_INT 2
15614: EQUAL
15615: AND
15616: IFFALSE 15630
// begin side := i ;
15618: LD_ADDR_VAR 0 3
15622: PUSH
15623: LD_VAR 0 1
15627: ST_TO_ADDR
// break ;
15628: GO 15632
// end ;
15630: GO 15583
15632: POP
15633: POP
// if not side then
15634: LD_VAR 0 3
15638: NOT
15639: IFFALSE 15643
// exit ;
15641: GO 15688
// for i := 1 to tmp do
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 2
15657: PUSH
15658: FOR_TO
15659: IFFALSE 15686
// if Prob ( 60 ) then
15661: LD_INT 60
15663: PPUSH
15664: CALL_OW 13
15668: IFFALSE 15684
// SetSide ( i , side ) ;
15670: LD_VAR 0 1
15674: PPUSH
15675: LD_VAR 0 3
15679: PPUSH
15680: CALL_OW 235
15684: GO 15658
15686: POP
15687: POP
// end ;
15688: PPOPN 3
15690: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15691: LD_EXP 71
15695: PUSH
15696: LD_EXP 84
15700: AND
15701: IFFALSE 15820
15703: GO 15705
15705: DISABLE
15706: LD_INT 0
15708: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15709: LD_ADDR_VAR 0 1
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_OWVAR 2
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 21
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 3
15738: PUSH
15739: LD_INT 23
15741: PUSH
15742: LD_INT 0
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: PPUSH
15758: CALL_OW 69
15762: PUSH
15763: FOR_IN
15764: IFFALSE 15818
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15766: LD_VAR 0 1
15770: PPUSH
15771: CALL_OW 257
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: LD_INT 3
15784: PUSH
15785: LD_INT 4
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: IN
15794: IFFALSE 15816
// SetClass ( un , rand ( 1 , 4 ) ) ;
15796: LD_VAR 0 1
15800: PPUSH
15801: LD_INT 1
15803: PPUSH
15804: LD_INT 4
15806: PPUSH
15807: CALL_OW 12
15811: PPUSH
15812: CALL_OW 336
15816: GO 15763
15818: POP
15819: POP
// end ;
15820: PPOPN 1
15822: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15823: LD_EXP 71
15827: PUSH
15828: LD_EXP 83
15832: AND
15833: IFFALSE 15912
15835: GO 15837
15837: DISABLE
15838: LD_INT 0
15840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15841: LD_ADDR_VAR 0 1
15845: PUSH
15846: LD_INT 22
15848: PUSH
15849: LD_OWVAR 2
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 21
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 69
15876: ST_TO_ADDR
// if not tmp then
15877: LD_VAR 0 1
15881: NOT
15882: IFFALSE 15886
// exit ;
15884: GO 15912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15886: LD_VAR 0 1
15890: PUSH
15891: LD_INT 1
15893: PPUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 12
15903: ARRAY
15904: PPUSH
15905: LD_INT 100
15907: PPUSH
15908: CALL_OW 234
// end ;
15912: PPOPN 1
15914: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15915: LD_EXP 71
15919: PUSH
15920: LD_EXP 85
15924: AND
15925: IFFALSE 16023
15927: GO 15929
15929: DISABLE
15930: LD_INT 0
15932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15933: LD_ADDR_VAR 0 1
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_OWVAR 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: ST_TO_ADDR
// if not tmp then
15969: LD_VAR 0 1
15973: NOT
15974: IFFALSE 15978
// exit ;
15976: GO 16023
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15978: LD_VAR 0 1
15982: PUSH
15983: LD_INT 1
15985: PPUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 12
15995: ARRAY
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: LD_INT 4
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: LD_INT 3000
16010: PPUSH
16011: LD_INT 9000
16013: PPUSH
16014: CALL_OW 12
16018: PPUSH
16019: CALL_OW 492
// end ;
16023: PPOPN 1
16025: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16026: LD_EXP 71
16030: PUSH
16031: LD_EXP 86
16035: AND
16036: IFFALSE 16056
16038: GO 16040
16040: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16041: LD_INT 1
16043: PPUSH
16044: LD_OWVAR 2
16048: PPUSH
16049: LD_INT 0
16051: PPUSH
16052: CALL_OW 324
16056: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16057: LD_EXP 71
16061: PUSH
16062: LD_EXP 87
16066: AND
16067: IFFALSE 16150
16069: GO 16071
16071: DISABLE
16072: LD_INT 0
16074: PPUSH
16075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16076: LD_ADDR_VAR 0 2
16080: PUSH
16081: LD_INT 22
16083: PUSH
16084: LD_OWVAR 2
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 3
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PPUSH
16107: CALL_OW 69
16111: ST_TO_ADDR
// if not tmp then
16112: LD_VAR 0 2
16116: NOT
16117: IFFALSE 16121
// exit ;
16119: GO 16150
// for i in tmp do
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: LD_VAR 0 2
16130: PUSH
16131: FOR_IN
16132: IFFALSE 16148
// SetBLevel ( i , 10 ) ;
16134: LD_VAR 0 1
16138: PPUSH
16139: LD_INT 10
16141: PPUSH
16142: CALL_OW 241
16146: GO 16131
16148: POP
16149: POP
// end ;
16150: PPOPN 2
16152: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16153: LD_EXP 71
16157: PUSH
16158: LD_EXP 88
16162: AND
16163: IFFALSE 16274
16165: GO 16167
16167: DISABLE
16168: LD_INT 0
16170: PPUSH
16171: PPUSH
16172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 22
16180: PUSH
16181: LD_OWVAR 2
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 25
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 69
16208: ST_TO_ADDR
// if not tmp then
16209: LD_VAR 0 3
16213: NOT
16214: IFFALSE 16218
// exit ;
16216: GO 16274
// un := tmp [ rand ( 1 , tmp ) ] ;
16218: LD_ADDR_VAR 0 2
16222: PUSH
16223: LD_VAR 0 3
16227: PUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: CALL_OW 12
16240: ARRAY
16241: ST_TO_ADDR
// if Crawls ( un ) then
16242: LD_VAR 0 2
16246: PPUSH
16247: CALL_OW 318
16251: IFFALSE 16262
// ComWalk ( un ) ;
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_INT 5
16269: PPUSH
16270: CALL_OW 336
// end ;
16274: PPOPN 3
16276: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16277: LD_EXP 71
16281: PUSH
16282: LD_EXP 89
16286: AND
16287: PUSH
16288: LD_OWVAR 67
16292: PUSH
16293: LD_INT 4
16295: LESS
16296: AND
16297: IFFALSE 16316
16299: GO 16301
16301: DISABLE
// begin Difficulty := Difficulty + 1 ;
16302: LD_ADDR_OWVAR 67
16306: PUSH
16307: LD_OWVAR 67
16311: PUSH
16312: LD_INT 1
16314: PLUS
16315: ST_TO_ADDR
// end ;
16316: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16317: LD_EXP 71
16321: PUSH
16322: LD_EXP 90
16326: AND
16327: IFFALSE 16430
16329: GO 16331
16331: DISABLE
16332: LD_INT 0
16334: PPUSH
// begin for i := 1 to 5 do
16335: LD_ADDR_VAR 0 1
16339: PUSH
16340: DOUBLE
16341: LD_INT 1
16343: DEC
16344: ST_TO_ADDR
16345: LD_INT 5
16347: PUSH
16348: FOR_TO
16349: IFFALSE 16428
// begin uc_nation := nation_nature ;
16351: LD_ADDR_OWVAR 21
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// uc_side := 0 ;
16359: LD_ADDR_OWVAR 20
16363: PUSH
16364: LD_INT 0
16366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16367: LD_ADDR_OWVAR 29
16371: PUSH
16372: LD_INT 12
16374: PUSH
16375: LD_INT 12
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: ST_TO_ADDR
// hc_agressivity := 20 ;
16382: LD_ADDR_OWVAR 35
16386: PUSH
16387: LD_INT 20
16389: ST_TO_ADDR
// hc_class := class_tiger ;
16390: LD_ADDR_OWVAR 28
16394: PUSH
16395: LD_INT 14
16397: ST_TO_ADDR
// hc_gallery :=  ;
16398: LD_ADDR_OWVAR 33
16402: PUSH
16403: LD_STRING 
16405: ST_TO_ADDR
// hc_name :=  ;
16406: LD_ADDR_OWVAR 26
16410: PUSH
16411: LD_STRING 
16413: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16414: CALL_OW 44
16418: PPUSH
16419: LD_INT 0
16421: PPUSH
16422: CALL_OW 51
// end ;
16426: GO 16348
16428: POP
16429: POP
// end ;
16430: PPOPN 1
16432: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16433: LD_EXP 71
16437: PUSH
16438: LD_EXP 91
16442: AND
16443: IFFALSE 16452
16445: GO 16447
16447: DISABLE
// StreamSibBomb ;
16448: CALL 16453 0 0
16452: END
// export function StreamSibBomb ; var i , x , y ; begin
16453: LD_INT 0
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
// result := false ;
16459: LD_ADDR_VAR 0 1
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// for i := 1 to 16 do
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: DOUBLE
16473: LD_INT 1
16475: DEC
16476: ST_TO_ADDR
16477: LD_INT 16
16479: PUSH
16480: FOR_TO
16481: IFFALSE 16680
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_INT 10
16490: PUSH
16491: LD_INT 20
16493: PUSH
16494: LD_INT 30
16496: PUSH
16497: LD_INT 40
16499: PUSH
16500: LD_INT 50
16502: PUSH
16503: LD_INT 60
16505: PUSH
16506: LD_INT 70
16508: PUSH
16509: LD_INT 80
16511: PUSH
16512: LD_INT 90
16514: PUSH
16515: LD_INT 100
16517: PUSH
16518: LD_INT 110
16520: PUSH
16521: LD_INT 120
16523: PUSH
16524: LD_INT 130
16526: PUSH
16527: LD_INT 140
16529: PUSH
16530: LD_INT 150
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: PPUSH
16553: LD_INT 15
16555: PPUSH
16556: CALL_OW 12
16560: ARRAY
16561: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16562: LD_ADDR_VAR 0 4
16566: PUSH
16567: LD_INT 10
16569: PUSH
16570: LD_INT 20
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 40
16578: PUSH
16579: LD_INT 50
16581: PUSH
16582: LD_INT 60
16584: PUSH
16585: LD_INT 70
16587: PUSH
16588: LD_INT 80
16590: PUSH
16591: LD_INT 90
16593: PUSH
16594: LD_INT 100
16596: PUSH
16597: LD_INT 110
16599: PUSH
16600: LD_INT 120
16602: PUSH
16603: LD_INT 130
16605: PUSH
16606: LD_INT 140
16608: PUSH
16609: LD_INT 150
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 15
16634: PPUSH
16635: CALL_OW 12
16639: ARRAY
16640: ST_TO_ADDR
// if ValidHex ( x , y ) then
16641: LD_VAR 0 3
16645: PPUSH
16646: LD_VAR 0 4
16650: PPUSH
16651: CALL_OW 488
16655: IFFALSE 16678
// begin result := [ x , y ] ;
16657: LD_ADDR_VAR 0 1
16661: PUSH
16662: LD_VAR 0 3
16666: PUSH
16667: LD_VAR 0 4
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: ST_TO_ADDR
// break ;
16676: GO 16680
// end ; end ;
16678: GO 16480
16680: POP
16681: POP
// if result then
16682: LD_VAR 0 1
16686: IFFALSE 16746
// begin ToLua ( playSibBomb() ) ;
16688: LD_STRING playSibBomb()
16690: PPUSH
16691: CALL_OW 559
// wait ( 0 0$14 ) ;
16695: LD_INT 490
16697: PPUSH
16698: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16702: LD_VAR 0 1
16706: PUSH
16707: LD_INT 1
16709: ARRAY
16710: PPUSH
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 2
16718: ARRAY
16719: PPUSH
16720: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16724: LD_VAR 0 1
16728: PUSH
16729: LD_INT 1
16731: ARRAY
16732: PPUSH
16733: LD_VAR 0 1
16737: PUSH
16738: LD_INT 2
16740: ARRAY
16741: PPUSH
16742: CALL_OW 429
// end ; end ;
16746: LD_VAR 0 1
16750: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16751: LD_EXP 71
16755: PUSH
16756: LD_EXP 93
16760: AND
16761: IFFALSE 16773
16763: GO 16765
16765: DISABLE
// YouLost (  ) ;
16766: LD_STRING 
16768: PPUSH
16769: CALL_OW 104
16773: END
// every 0 0$1 trigger StreamModeActive and sFog do
16774: LD_EXP 71
16778: PUSH
16779: LD_EXP 92
16783: AND
16784: IFFALSE 16798
16786: GO 16788
16788: DISABLE
// FogOff ( your_side ) ;
16789: LD_OWVAR 2
16793: PPUSH
16794: CALL_OW 344
16798: END
// every 0 0$1 trigger StreamModeActive and sSun do
16799: LD_EXP 71
16803: PUSH
16804: LD_EXP 94
16808: AND
16809: IFFALSE 16837
16811: GO 16813
16813: DISABLE
// begin solar_recharge_percent := 0 ;
16814: LD_ADDR_OWVAR 79
16818: PUSH
16819: LD_INT 0
16821: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16822: LD_INT 10500
16824: PPUSH
16825: CALL_OW 67
// solar_recharge_percent := 100 ;
16829: LD_ADDR_OWVAR 79
16833: PUSH
16834: LD_INT 100
16836: ST_TO_ADDR
// end ;
16837: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16838: LD_EXP 71
16842: PUSH
16843: LD_EXP 95
16847: AND
16848: IFFALSE 17087
16850: GO 16852
16852: DISABLE
16853: LD_INT 0
16855: PPUSH
16856: PPUSH
16857: PPUSH
// begin tmp := [ ] ;
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: EMPTY
16864: ST_TO_ADDR
// for i := 1 to 6 do
16865: LD_ADDR_VAR 0 1
16869: PUSH
16870: DOUBLE
16871: LD_INT 1
16873: DEC
16874: ST_TO_ADDR
16875: LD_INT 6
16877: PUSH
16878: FOR_TO
16879: IFFALSE 16984
// begin uc_nation := nation_nature ;
16881: LD_ADDR_OWVAR 21
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// uc_side := 0 ;
16889: LD_ADDR_OWVAR 20
16893: PUSH
16894: LD_INT 0
16896: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16897: LD_ADDR_OWVAR 29
16901: PUSH
16902: LD_INT 12
16904: PUSH
16905: LD_INT 12
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: ST_TO_ADDR
// hc_agressivity := 20 ;
16912: LD_ADDR_OWVAR 35
16916: PUSH
16917: LD_INT 20
16919: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16920: LD_ADDR_OWVAR 28
16924: PUSH
16925: LD_INT 17
16927: ST_TO_ADDR
// hc_gallery :=  ;
16928: LD_ADDR_OWVAR 33
16932: PUSH
16933: LD_STRING 
16935: ST_TO_ADDR
// hc_name :=  ;
16936: LD_ADDR_OWVAR 26
16940: PUSH
16941: LD_STRING 
16943: ST_TO_ADDR
// un := CreateHuman ;
16944: LD_ADDR_VAR 0 2
16948: PUSH
16949: CALL_OW 44
16953: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 51
// tmp := tmp ^ un ;
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: LD_VAR 0 3
16975: PUSH
16976: LD_VAR 0 2
16980: ADD
16981: ST_TO_ADDR
// end ;
16982: GO 16878
16984: POP
16985: POP
// repeat wait ( 0 0$1 ) ;
16986: LD_INT 35
16988: PPUSH
16989: CALL_OW 67
// for un in tmp do
16993: LD_ADDR_VAR 0 2
16997: PUSH
16998: LD_VAR 0 3
17002: PUSH
17003: FOR_IN
17004: IFFALSE 17078
// begin if IsDead ( un ) then
17006: LD_VAR 0 2
17010: PPUSH
17011: CALL_OW 301
17015: IFFALSE 17035
// begin tmp := tmp diff un ;
17017: LD_ADDR_VAR 0 3
17021: PUSH
17022: LD_VAR 0 3
17026: PUSH
17027: LD_VAR 0 2
17031: DIFF
17032: ST_TO_ADDR
// continue ;
17033: GO 17003
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17035: LD_VAR 0 2
17039: PPUSH
17040: LD_INT 3
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 0
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PPUSH
17057: CALL_OW 69
17061: PPUSH
17062: LD_VAR 0 2
17066: PPUSH
17067: CALL_OW 74
17071: PPUSH
17072: CALL_OW 115
// end ;
17076: GO 17003
17078: POP
17079: POP
// until not tmp ;
17080: LD_VAR 0 3
17084: NOT
17085: IFFALSE 16986
// end ;
17087: PPOPN 3
17089: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17090: LD_EXP 71
17094: PUSH
17095: LD_EXP 96
17099: AND
17100: IFFALSE 17154
17102: GO 17104
17104: DISABLE
// begin ToLua ( displayTroll(); ) ;
17105: LD_STRING displayTroll();
17107: PPUSH
17108: CALL_OW 559
// wait ( 3 3$00 ) ;
17112: LD_INT 6300
17114: PPUSH
17115: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17119: LD_STRING hideTroll();
17121: PPUSH
17122: CALL_OW 559
// wait ( 1 1$00 ) ;
17126: LD_INT 2100
17128: PPUSH
17129: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17133: LD_STRING displayTroll();
17135: PPUSH
17136: CALL_OW 559
// wait ( 1 1$00 ) ;
17140: LD_INT 2100
17142: PPUSH
17143: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17147: LD_STRING hideTroll();
17149: PPUSH
17150: CALL_OW 559
// end ;
17154: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17155: LD_EXP 71
17159: PUSH
17160: LD_EXP 97
17164: AND
17165: IFFALSE 17228
17167: GO 17169
17169: DISABLE
17170: LD_INT 0
17172: PPUSH
// begin p := 0 ;
17173: LD_ADDR_VAR 0 1
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// repeat game_speed := 1 ;
17181: LD_ADDR_OWVAR 65
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17189: LD_INT 35
17191: PPUSH
17192: CALL_OW 67
// p := p + 1 ;
17196: LD_ADDR_VAR 0 1
17200: PUSH
17201: LD_VAR 0 1
17205: PUSH
17206: LD_INT 1
17208: PLUS
17209: ST_TO_ADDR
// until p >= 60 ;
17210: LD_VAR 0 1
17214: PUSH
17215: LD_INT 60
17217: GREATEREQUAL
17218: IFFALSE 17181
// game_speed := 4 ;
17220: LD_ADDR_OWVAR 65
17224: PUSH
17225: LD_INT 4
17227: ST_TO_ADDR
// end ;
17228: PPOPN 1
17230: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17231: LD_EXP 71
17235: PUSH
17236: LD_EXP 98
17240: AND
17241: IFFALSE 17387
17243: GO 17245
17245: DISABLE
17246: LD_INT 0
17248: PPUSH
17249: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17250: LD_ADDR_VAR 0 1
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_OWVAR 2
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: LD_INT 30
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 69
17303: ST_TO_ADDR
// if not depot then
17304: LD_VAR 0 1
17308: NOT
17309: IFFALSE 17313
// exit ;
17311: GO 17387
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17313: LD_ADDR_VAR 0 2
17317: PUSH
17318: LD_VAR 0 1
17322: PUSH
17323: LD_INT 1
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 12
17335: ARRAY
17336: PPUSH
17337: CALL_OW 274
17341: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17342: LD_VAR 0 2
17346: PPUSH
17347: LD_INT 1
17349: PPUSH
17350: LD_INT 0
17352: PPUSH
17353: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17357: LD_VAR 0 2
17361: PPUSH
17362: LD_INT 2
17364: PPUSH
17365: LD_INT 0
17367: PPUSH
17368: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17372: LD_VAR 0 2
17376: PPUSH
17377: LD_INT 3
17379: PPUSH
17380: LD_INT 0
17382: PPUSH
17383: CALL_OW 277
// end ;
17387: PPOPN 2
17389: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17390: LD_EXP 71
17394: PUSH
17395: LD_EXP 99
17399: AND
17400: IFFALSE 17497
17402: GO 17404
17404: DISABLE
17405: LD_INT 0
17407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17408: LD_ADDR_VAR 0 1
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_OWVAR 2
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 21
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: ST_TO_ADDR
// if not tmp then
17462: LD_VAR 0 1
17466: NOT
17467: IFFALSE 17471
// exit ;
17469: GO 17497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17471: LD_VAR 0 1
17475: PUSH
17476: LD_INT 1
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 12
17488: ARRAY
17489: PPUSH
17490: LD_INT 200
17492: PPUSH
17493: CALL_OW 234
// end ;
17497: PPOPN 1
17499: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17500: LD_EXP 71
17504: PUSH
17505: LD_EXP 100
17509: AND
17510: IFFALSE 17589
17512: GO 17514
17514: DISABLE
17515: LD_INT 0
17517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17518: LD_ADDR_VAR 0 1
17522: PUSH
17523: LD_INT 22
17525: PUSH
17526: LD_OWVAR 2
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: ST_TO_ADDR
// if not tmp then
17554: LD_VAR 0 1
17558: NOT
17559: IFFALSE 17563
// exit ;
17561: GO 17589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17563: LD_VAR 0 1
17567: PUSH
17568: LD_INT 1
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 12
17580: ARRAY
17581: PPUSH
17582: LD_INT 60
17584: PPUSH
17585: CALL_OW 234
// end ;
17589: PPOPN 1
17591: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17592: LD_EXP 71
17596: PUSH
17597: LD_EXP 101
17601: AND
17602: IFFALSE 17701
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
// begin enable ;
17611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17612: LD_ADDR_VAR 0 1
17616: PUSH
17617: LD_INT 22
17619: PUSH
17620: LD_OWVAR 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 61
17631: PUSH
17632: EMPTY
17633: LIST
17634: PUSH
17635: LD_INT 33
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: ST_TO_ADDR
// if not tmp then
17655: LD_VAR 0 1
17659: NOT
17660: IFFALSE 17664
// exit ;
17662: GO 17701
// for i in tmp do
17664: LD_ADDR_VAR 0 2
17668: PUSH
17669: LD_VAR 0 1
17673: PUSH
17674: FOR_IN
17675: IFFALSE 17699
// if IsControledBy ( i ) then
17677: LD_VAR 0 2
17681: PPUSH
17682: CALL_OW 312
17686: IFFALSE 17697
// ComUnlink ( i ) ;
17688: LD_VAR 0 2
17692: PPUSH
17693: CALL_OW 136
17697: GO 17674
17699: POP
17700: POP
// end ;
17701: PPOPN 2
17703: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17704: LD_EXP 71
17708: PUSH
17709: LD_EXP 102
17713: AND
17714: IFFALSE 17854
17716: GO 17718
17718: DISABLE
17719: LD_INT 0
17721: PPUSH
17722: PPUSH
// begin ToLua ( displayPowell(); ) ;
17723: LD_STRING displayPowell();
17725: PPUSH
17726: CALL_OW 559
// uc_side := 0 ;
17730: LD_ADDR_OWVAR 20
17734: PUSH
17735: LD_INT 0
17737: ST_TO_ADDR
// uc_nation := 2 ;
17738: LD_ADDR_OWVAR 21
17742: PUSH
17743: LD_INT 2
17745: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17746: LD_ADDR_OWVAR 37
17750: PUSH
17751: LD_INT 14
17753: ST_TO_ADDR
// vc_engine := engine_siberite ;
17754: LD_ADDR_OWVAR 39
17758: PUSH
17759: LD_INT 3
17761: ST_TO_ADDR
// vc_control := control_apeman ;
17762: LD_ADDR_OWVAR 38
17766: PUSH
17767: LD_INT 5
17769: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17770: LD_ADDR_OWVAR 40
17774: PUSH
17775: LD_INT 29
17777: ST_TO_ADDR
// un := CreateVehicle ;
17778: LD_ADDR_VAR 0 2
17782: PUSH
17783: CALL_OW 45
17787: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17788: LD_VAR 0 2
17792: PPUSH
17793: LD_INT 1
17795: PPUSH
17796: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17800: LD_INT 35
17802: PPUSH
17803: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17807: LD_VAR 0 2
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_OWVAR 2
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: PPUSH
17829: LD_VAR 0 2
17833: PPUSH
17834: CALL_OW 74
17838: PPUSH
17839: CALL_OW 115
// until IsDead ( un ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: CALL_OW 301
17852: IFFALSE 17800
// end ;
17854: PPOPN 2
17856: END
// every 0 0$1 trigger StreamModeActive and sStu do
17857: LD_EXP 71
17861: PUSH
17862: LD_EXP 110
17866: AND
17867: IFFALSE 17883
17869: GO 17871
17871: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17872: LD_STRING displayStucuk();
17874: PPUSH
17875: CALL_OW 559
// ResetFog ;
17879: CALL_OW 335
// end ;
17883: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17884: LD_EXP 71
17888: PUSH
17889: LD_EXP 103
17893: AND
17894: IFFALSE 18035
17896: GO 17898
17898: DISABLE
17899: LD_INT 0
17901: PPUSH
17902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17903: LD_ADDR_VAR 0 2
17907: PUSH
17908: LD_INT 22
17910: PUSH
17911: LD_OWVAR 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 21
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 69
17938: ST_TO_ADDR
// if not tmp then
17939: LD_VAR 0 2
17943: NOT
17944: IFFALSE 17948
// exit ;
17946: GO 18035
// un := tmp [ rand ( 1 , tmp ) ] ;
17948: LD_ADDR_VAR 0 1
17952: PUSH
17953: LD_VAR 0 2
17957: PUSH
17958: LD_INT 1
17960: PPUSH
17961: LD_VAR 0 2
17965: PPUSH
17966: CALL_OW 12
17970: ARRAY
17971: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: LD_INT 0
17979: PPUSH
17980: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17984: LD_VAR 0 1
17988: PPUSH
17989: LD_OWVAR 3
17993: PUSH
17994: LD_VAR 0 1
17998: DIFF
17999: PPUSH
18000: LD_VAR 0 1
18004: PPUSH
18005: CALL_OW 74
18009: PPUSH
18010: CALL_OW 115
// wait ( 0 0$20 ) ;
18014: LD_INT 700
18016: PPUSH
18017: CALL_OW 67
// SetSide ( un , your_side ) ;
18021: LD_VAR 0 1
18025: PPUSH
18026: LD_OWVAR 2
18030: PPUSH
18031: CALL_OW 235
// end ;
18035: PPOPN 2
18037: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18038: LD_EXP 71
18042: PUSH
18043: LD_EXP 104
18047: AND
18048: IFFALSE 18154
18050: GO 18052
18052: DISABLE
18053: LD_INT 0
18055: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_OWVAR 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 30
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 30
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: ST_TO_ADDR
// if not depot then
18110: LD_VAR 0 1
18114: NOT
18115: IFFALSE 18119
// exit ;
18117: GO 18154
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18119: LD_VAR 0 1
18123: PUSH
18124: LD_INT 1
18126: ARRAY
18127: PPUSH
18128: CALL_OW 250
18132: PPUSH
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 1
18140: ARRAY
18141: PPUSH
18142: CALL_OW 251
18146: PPUSH
18147: LD_INT 70
18149: PPUSH
18150: CALL_OW 495
// end ;
18154: PPOPN 1
18156: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18157: LD_EXP 71
18161: PUSH
18162: LD_EXP 105
18166: AND
18167: IFFALSE 18378
18169: GO 18171
18171: DISABLE
18172: LD_INT 0
18174: PPUSH
18175: PPUSH
18176: PPUSH
18177: PPUSH
18178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18179: LD_ADDR_VAR 0 5
18183: PUSH
18184: LD_INT 22
18186: PUSH
18187: LD_OWVAR 2
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: ST_TO_ADDR
// if not tmp then
18215: LD_VAR 0 5
18219: NOT
18220: IFFALSE 18224
// exit ;
18222: GO 18378
// for i in tmp do
18224: LD_ADDR_VAR 0 1
18228: PUSH
18229: LD_VAR 0 5
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18376
// begin d := rand ( 0 , 5 ) ;
18237: LD_ADDR_VAR 0 4
18241: PUSH
18242: LD_INT 0
18244: PPUSH
18245: LD_INT 5
18247: PPUSH
18248: CALL_OW 12
18252: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 250
18267: PPUSH
18268: LD_VAR 0 4
18272: PPUSH
18273: LD_INT 3
18275: PPUSH
18276: LD_INT 12
18278: PPUSH
18279: CALL_OW 12
18283: PPUSH
18284: CALL_OW 272
18288: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_VAR 0 1
18298: PPUSH
18299: CALL_OW 251
18303: PPUSH
18304: LD_VAR 0 4
18308: PPUSH
18309: LD_INT 3
18311: PPUSH
18312: LD_INT 12
18314: PPUSH
18315: CALL_OW 12
18319: PPUSH
18320: CALL_OW 273
18324: ST_TO_ADDR
// if ValidHex ( x , y ) then
18325: LD_VAR 0 2
18329: PPUSH
18330: LD_VAR 0 3
18334: PPUSH
18335: CALL_OW 488
18339: IFFALSE 18374
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18341: LD_VAR 0 1
18345: PPUSH
18346: LD_VAR 0 2
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: LD_INT 3
18358: PPUSH
18359: LD_INT 6
18361: PPUSH
18362: CALL_OW 12
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 483
// end ;
18374: GO 18234
18376: POP
18377: POP
// end ;
18378: PPOPN 5
18380: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18381: LD_EXP 71
18385: PUSH
18386: LD_EXP 106
18390: AND
18391: IFFALSE 18485
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18400: LD_ADDR_VAR 0 2
18404: PUSH
18405: LD_INT 22
18407: PUSH
18408: LD_OWVAR 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 32
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 21
18429: PUSH
18430: LD_INT 2
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: PPUSH
18442: CALL_OW 69
18446: ST_TO_ADDR
// if not tmp then
18447: LD_VAR 0 2
18451: NOT
18452: IFFALSE 18456
// exit ;
18454: GO 18485
// for i in tmp do
18456: LD_ADDR_VAR 0 1
18460: PUSH
18461: LD_VAR 0 2
18465: PUSH
18466: FOR_IN
18467: IFFALSE 18483
// SetFuel ( i , 0 ) ;
18469: LD_VAR 0 1
18473: PPUSH
18474: LD_INT 0
18476: PPUSH
18477: CALL_OW 240
18481: GO 18466
18483: POP
18484: POP
// end ;
18485: PPOPN 2
18487: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18488: LD_EXP 71
18492: PUSH
18493: LD_EXP 107
18497: AND
18498: IFFALSE 18564
18500: GO 18502
18502: DISABLE
18503: LD_INT 0
18505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18506: LD_ADDR_VAR 0 1
18510: PUSH
18511: LD_INT 22
18513: PUSH
18514: LD_OWVAR 2
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 30
18525: PUSH
18526: LD_INT 29
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL_OW 69
18541: ST_TO_ADDR
// if not tmp then
18542: LD_VAR 0 1
18546: NOT
18547: IFFALSE 18551
// exit ;
18549: GO 18564
// DestroyUnit ( tmp [ 1 ] ) ;
18551: LD_VAR 0 1
18555: PUSH
18556: LD_INT 1
18558: ARRAY
18559: PPUSH
18560: CALL_OW 65
// end ;
18564: PPOPN 1
18566: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18567: LD_EXP 71
18571: PUSH
18572: LD_EXP 109
18576: AND
18577: IFFALSE 18706
18579: GO 18581
18581: DISABLE
18582: LD_INT 0
18584: PPUSH
// begin uc_side := 0 ;
18585: LD_ADDR_OWVAR 20
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// uc_nation := nation_arabian ;
18593: LD_ADDR_OWVAR 21
18597: PUSH
18598: LD_INT 2
18600: ST_TO_ADDR
// hc_gallery :=  ;
18601: LD_ADDR_OWVAR 33
18605: PUSH
18606: LD_STRING 
18608: ST_TO_ADDR
// hc_name :=  ;
18609: LD_ADDR_OWVAR 26
18613: PUSH
18614: LD_STRING 
18616: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18617: LD_INT 1
18619: PPUSH
18620: LD_INT 11
18622: PPUSH
18623: LD_INT 10
18625: PPUSH
18626: CALL_OW 380
// un := CreateHuman ;
18630: LD_ADDR_VAR 0 1
18634: PUSH
18635: CALL_OW 44
18639: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18640: LD_VAR 0 1
18644: PPUSH
18645: LD_INT 1
18647: PPUSH
18648: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18652: LD_INT 35
18654: PPUSH
18655: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18659: LD_VAR 0 1
18663: PPUSH
18664: LD_INT 22
18666: PUSH
18667: LD_OWVAR 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 69
18680: PPUSH
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL_OW 74
18690: PPUSH
18691: CALL_OW 115
// until IsDead ( un ) ;
18695: LD_VAR 0 1
18699: PPUSH
18700: CALL_OW 301
18704: IFFALSE 18652
// end ;
18706: PPOPN 1
18708: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18709: LD_EXP 71
18713: PUSH
18714: LD_EXP 111
18718: AND
18719: IFFALSE 18731
18721: GO 18723
18723: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18724: LD_STRING earthquake(getX(game), 0, 32)
18726: PPUSH
18727: CALL_OW 559
18731: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18732: LD_EXP 71
18736: PUSH
18737: LD_EXP 112
18741: AND
18742: IFFALSE 18833
18744: GO 18746
18746: DISABLE
18747: LD_INT 0
18749: PPUSH
// begin enable ;
18750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 21
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 33
18780: PUSH
18781: LD_INT 3
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: LIST
18792: PPUSH
18793: CALL_OW 69
18797: ST_TO_ADDR
// if not tmp then
18798: LD_VAR 0 1
18802: NOT
18803: IFFALSE 18807
// exit ;
18805: GO 18833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18807: LD_VAR 0 1
18811: PUSH
18812: LD_INT 1
18814: PPUSH
18815: LD_VAR 0 1
18819: PPUSH
18820: CALL_OW 12
18824: ARRAY
18825: PPUSH
18826: LD_INT 1
18828: PPUSH
18829: CALL_OW 234
// end ;
18833: PPOPN 1
18835: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18836: LD_EXP 71
18840: PUSH
18841: LD_EXP 113
18845: AND
18846: IFFALSE 18987
18848: GO 18850
18850: DISABLE
18851: LD_INT 0
18853: PPUSH
18854: PPUSH
18855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: LD_INT 22
18863: PUSH
18864: LD_OWVAR 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 25
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PPUSH
18887: CALL_OW 69
18891: ST_TO_ADDR
// if not tmp then
18892: LD_VAR 0 3
18896: NOT
18897: IFFALSE 18901
// exit ;
18899: GO 18987
// un := tmp [ rand ( 1 , tmp ) ] ;
18901: LD_ADDR_VAR 0 2
18905: PUSH
18906: LD_VAR 0 3
18910: PUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: CALL_OW 12
18923: ARRAY
18924: ST_TO_ADDR
// if Crawls ( un ) then
18925: LD_VAR 0 2
18929: PPUSH
18930: CALL_OW 318
18934: IFFALSE 18945
// ComWalk ( un ) ;
18936: LD_VAR 0 2
18940: PPUSH
18941: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18945: LD_VAR 0 2
18949: PPUSH
18950: LD_INT 9
18952: PPUSH
18953: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18957: LD_INT 28
18959: PPUSH
18960: LD_OWVAR 2
18964: PPUSH
18965: LD_INT 2
18967: PPUSH
18968: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18972: LD_INT 29
18974: PPUSH
18975: LD_OWVAR 2
18979: PPUSH
18980: LD_INT 2
18982: PPUSH
18983: CALL_OW 322
// end ;
18987: PPOPN 3
18989: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18990: LD_EXP 71
18994: PUSH
18995: LD_EXP 114
18999: AND
19000: IFFALSE 19111
19002: GO 19004
19004: DISABLE
19005: LD_INT 0
19007: PPUSH
19008: PPUSH
19009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19010: LD_ADDR_VAR 0 3
19014: PUSH
19015: LD_INT 22
19017: PUSH
19018: LD_OWVAR 2
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 25
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL_OW 69
19045: ST_TO_ADDR
// if not tmp then
19046: LD_VAR 0 3
19050: NOT
19051: IFFALSE 19055
// exit ;
19053: GO 19111
// un := tmp [ rand ( 1 , tmp ) ] ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_VAR 0 3
19064: PUSH
19065: LD_INT 1
19067: PPUSH
19068: LD_VAR 0 3
19072: PPUSH
19073: CALL_OW 12
19077: ARRAY
19078: ST_TO_ADDR
// if Crawls ( un ) then
19079: LD_VAR 0 2
19083: PPUSH
19084: CALL_OW 318
19088: IFFALSE 19099
// ComWalk ( un ) ;
19090: LD_VAR 0 2
19094: PPUSH
19095: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19099: LD_VAR 0 2
19103: PPUSH
19104: LD_INT 8
19106: PPUSH
19107: CALL_OW 336
// end ;
19111: PPOPN 3
19113: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19114: LD_EXP 71
19118: PUSH
19119: LD_EXP 115
19123: AND
19124: IFFALSE 19268
19126: GO 19128
19128: DISABLE
19129: LD_INT 0
19131: PPUSH
19132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19133: LD_ADDR_VAR 0 2
19137: PUSH
19138: LD_INT 22
19140: PUSH
19141: LD_OWVAR 2
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 21
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: LD_INT 34
19165: PUSH
19166: LD_INT 12
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 34
19175: PUSH
19176: LD_INT 51
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 34
19185: PUSH
19186: LD_INT 32
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: PPUSH
19204: CALL_OW 69
19208: ST_TO_ADDR
// if not tmp then
19209: LD_VAR 0 2
19213: NOT
19214: IFFALSE 19218
// exit ;
19216: GO 19268
// for i in tmp do
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_VAR 0 2
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19266
// if GetCargo ( i , mat_artifact ) = 0 then
19231: LD_VAR 0 1
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 289
19243: PUSH
19244: LD_INT 0
19246: EQUAL
19247: IFFALSE 19264
// SetCargo ( i , mat_siberit , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 3
19256: PPUSH
19257: LD_INT 100
19259: PPUSH
19260: CALL_OW 290
19264: GO 19228
19266: POP
19267: POP
// end ;
19268: PPOPN 2
19270: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19271: LD_EXP 71
19275: PUSH
19276: LD_EXP 116
19280: AND
19281: IFFALSE 19464
19283: GO 19285
19285: DISABLE
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19290: LD_ADDR_VAR 0 2
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_OWVAR 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: ST_TO_ADDR
// if not tmp then
19312: LD_VAR 0 2
19316: NOT
19317: IFFALSE 19321
// exit ;
19319: GO 19464
// for i := 1 to 2 do
19321: LD_ADDR_VAR 0 1
19325: PUSH
19326: DOUBLE
19327: LD_INT 1
19329: DEC
19330: ST_TO_ADDR
19331: LD_INT 2
19333: PUSH
19334: FOR_TO
19335: IFFALSE 19462
// begin uc_side := your_side ;
19337: LD_ADDR_OWVAR 20
19341: PUSH
19342: LD_OWVAR 2
19346: ST_TO_ADDR
// uc_nation := nation_american ;
19347: LD_ADDR_OWVAR 21
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// vc_chassis := us_morphling ;
19355: LD_ADDR_OWVAR 37
19359: PUSH
19360: LD_INT 5
19362: ST_TO_ADDR
// vc_engine := engine_siberite ;
19363: LD_ADDR_OWVAR 39
19367: PUSH
19368: LD_INT 3
19370: ST_TO_ADDR
// vc_control := control_computer ;
19371: LD_ADDR_OWVAR 38
19375: PUSH
19376: LD_INT 3
19378: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19379: LD_ADDR_OWVAR 40
19383: PUSH
19384: LD_INT 10
19386: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19387: LD_VAR 0 2
19391: PUSH
19392: LD_INT 1
19394: ARRAY
19395: PPUSH
19396: CALL_OW 310
19400: NOT
19401: IFFALSE 19448
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19403: CALL_OW 45
19407: PPUSH
19408: LD_VAR 0 2
19412: PUSH
19413: LD_INT 1
19415: ARRAY
19416: PPUSH
19417: CALL_OW 250
19421: PPUSH
19422: LD_VAR 0 2
19426: PUSH
19427: LD_INT 1
19429: ARRAY
19430: PPUSH
19431: CALL_OW 251
19435: PPUSH
19436: LD_INT 12
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL_OW 50
19446: GO 19460
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19448: CALL_OW 45
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: CALL_OW 51
// end ;
19460: GO 19334
19462: POP
19463: POP
// end ;
19464: PPOPN 2
19466: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19467: LD_EXP 71
19471: PUSH
19472: LD_EXP 117
19476: AND
19477: IFFALSE 19699
19479: GO 19481
19481: DISABLE
19482: LD_INT 0
19484: PPUSH
19485: PPUSH
19486: PPUSH
19487: PPUSH
19488: PPUSH
19489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19490: LD_ADDR_VAR 0 6
19494: PUSH
19495: LD_INT 22
19497: PUSH
19498: LD_OWVAR 2
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 3
19519: PUSH
19520: LD_INT 23
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PPUSH
19539: CALL_OW 69
19543: ST_TO_ADDR
// if not tmp then
19544: LD_VAR 0 6
19548: NOT
19549: IFFALSE 19553
// exit ;
19551: GO 19699
// s1 := rand ( 1 , 4 ) ;
19553: LD_ADDR_VAR 0 2
19557: PUSH
19558: LD_INT 1
19560: PPUSH
19561: LD_INT 4
19563: PPUSH
19564: CALL_OW 12
19568: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19569: LD_ADDR_VAR 0 4
19573: PUSH
19574: LD_VAR 0 6
19578: PUSH
19579: LD_INT 1
19581: ARRAY
19582: PPUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: CALL_OW 259
19592: ST_TO_ADDR
// if s1 = 1 then
19593: LD_VAR 0 2
19597: PUSH
19598: LD_INT 1
19600: EQUAL
19601: IFFALSE 19621
// s2 := rand ( 2 , 4 ) else
19603: LD_ADDR_VAR 0 3
19607: PUSH
19608: LD_INT 2
19610: PPUSH
19611: LD_INT 4
19613: PPUSH
19614: CALL_OW 12
19618: ST_TO_ADDR
19619: GO 19629
// s2 := 1 ;
19621: LD_ADDR_VAR 0 3
19625: PUSH
19626: LD_INT 1
19628: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19629: LD_ADDR_VAR 0 5
19633: PUSH
19634: LD_VAR 0 6
19638: PUSH
19639: LD_INT 1
19641: ARRAY
19642: PPUSH
19643: LD_VAR 0 3
19647: PPUSH
19648: CALL_OW 259
19652: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19653: LD_VAR 0 6
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: LD_VAR 0 2
19666: PPUSH
19667: LD_VAR 0 5
19671: PPUSH
19672: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19676: LD_VAR 0 6
19680: PUSH
19681: LD_INT 1
19683: ARRAY
19684: PPUSH
19685: LD_VAR 0 3
19689: PPUSH
19690: LD_VAR 0 4
19694: PPUSH
19695: CALL_OW 237
// end ;
19699: PPOPN 6
19701: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19702: LD_EXP 71
19706: PUSH
19707: LD_EXP 118
19711: AND
19712: IFFALSE 19791
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19720: LD_ADDR_VAR 0 1
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_OWVAR 2
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 30
19739: PUSH
19740: LD_INT 3
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: ST_TO_ADDR
// if not tmp then
19756: LD_VAR 0 1
19760: NOT
19761: IFFALSE 19765
// exit ;
19763: GO 19791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19765: LD_VAR 0 1
19769: PUSH
19770: LD_INT 1
19772: PPUSH
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 12
19782: ARRAY
19783: PPUSH
19784: LD_INT 1
19786: PPUSH
19787: CALL_OW 234
// end ;
19791: PPOPN 1
19793: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19794: LD_EXP 71
19798: PUSH
19799: LD_EXP 119
19803: AND
19804: IFFALSE 19916
19806: GO 19808
19808: DISABLE
19809: LD_INT 0
19811: PPUSH
19812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19813: LD_ADDR_VAR 0 2
19817: PUSH
19818: LD_INT 22
19820: PUSH
19821: LD_OWVAR 2
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 30
19835: PUSH
19836: LD_INT 27
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 30
19845: PUSH
19846: LD_INT 26
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 30
19855: PUSH
19856: LD_INT 28
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: ST_TO_ADDR
// if not tmp then
19878: LD_VAR 0 2
19882: NOT
19883: IFFALSE 19887
// exit ;
19885: GO 19916
// for i in tmp do
19887: LD_ADDR_VAR 0 1
19891: PUSH
19892: LD_VAR 0 2
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19914
// SetLives ( i , 1 ) ;
19900: LD_VAR 0 1
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: CALL_OW 234
19912: GO 19897
19914: POP
19915: POP
// end ;
19916: PPOPN 2
19918: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19919: LD_EXP 71
19923: PUSH
19924: LD_EXP 120
19928: AND
19929: IFFALSE 20216
19931: GO 19933
19933: DISABLE
19934: LD_INT 0
19936: PPUSH
19937: PPUSH
19938: PPUSH
// begin i := rand ( 1 , 7 ) ;
19939: LD_ADDR_VAR 0 1
19943: PUSH
19944: LD_INT 1
19946: PPUSH
19947: LD_INT 7
19949: PPUSH
19950: CALL_OW 12
19954: ST_TO_ADDR
// case i of 1 :
19955: LD_VAR 0 1
19959: PUSH
19960: LD_INT 1
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 19978
19968: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19969: LD_STRING earthquake(getX(game), 0, 32)
19971: PPUSH
19972: CALL_OW 559
19976: GO 20216
19978: LD_INT 2
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20000
19986: POP
// begin ToLua ( displayStucuk(); ) ;
19987: LD_STRING displayStucuk();
19989: PPUSH
19990: CALL_OW 559
// ResetFog ;
19994: CALL_OW 335
// end ; 3 :
19998: GO 20216
20000: LD_INT 3
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20112
20008: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 25
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PPUSH
20040: CALL_OW 69
20044: ST_TO_ADDR
// if not tmp then
20045: LD_VAR 0 2
20049: NOT
20050: IFFALSE 20054
// exit ;
20052: GO 20216
// un := tmp [ rand ( 1 , tmp ) ] ;
20054: LD_ADDR_VAR 0 3
20058: PUSH
20059: LD_VAR 0 2
20063: PUSH
20064: LD_INT 1
20066: PPUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: CALL_OW 12
20076: ARRAY
20077: ST_TO_ADDR
// if Crawls ( un ) then
20078: LD_VAR 0 3
20082: PPUSH
20083: CALL_OW 318
20087: IFFALSE 20098
// ComWalk ( un ) ;
20089: LD_VAR 0 3
20093: PPUSH
20094: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20098: LD_VAR 0 3
20102: PPUSH
20103: LD_INT 8
20105: PPUSH
20106: CALL_OW 336
// end ; 4 :
20110: GO 20216
20112: LD_INT 4
20114: DOUBLE
20115: EQUAL
20116: IFTRUE 20120
20118: GO 20194
20120: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20121: LD_ADDR_VAR 0 2
20125: PUSH
20126: LD_INT 22
20128: PUSH
20129: LD_OWVAR 2
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 30
20140: PUSH
20141: LD_INT 29
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PPUSH
20152: CALL_OW 69
20156: ST_TO_ADDR
// if not tmp then
20157: LD_VAR 0 2
20161: NOT
20162: IFFALSE 20166
// exit ;
20164: GO 20216
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20166: LD_VAR 0 2
20170: PUSH
20171: LD_INT 1
20173: ARRAY
20174: PPUSH
20175: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20179: LD_VAR 0 2
20183: PUSH
20184: LD_INT 1
20186: ARRAY
20187: PPUSH
20188: CALL_OW 65
// end ; 5 .. 7 :
20192: GO 20216
20194: LD_INT 5
20196: DOUBLE
20197: GREATEREQUAL
20198: IFFALSE 20206
20200: LD_INT 7
20202: DOUBLE
20203: LESSEQUAL
20204: IFTRUE 20208
20206: GO 20215
20208: POP
// StreamSibBomb ; end ;
20209: CALL 16453 0 0
20213: GO 20216
20215: POP
// end ;
20216: PPOPN 3
20218: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20219: LD_EXP 71
20223: PUSH
20224: LD_EXP 121
20228: AND
20229: IFFALSE 20385
20231: GO 20233
20233: DISABLE
20234: LD_INT 0
20236: PPUSH
20237: PPUSH
20238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20239: LD_ADDR_VAR 0 2
20243: PUSH
20244: LD_INT 81
20246: PUSH
20247: LD_OWVAR 2
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: LD_INT 21
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 21
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: ST_TO_ADDR
// if not tmp then
20293: LD_VAR 0 2
20297: NOT
20298: IFFALSE 20302
// exit ;
20300: GO 20385
// p := 0 ;
20302: LD_ADDR_VAR 0 3
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20310: LD_INT 35
20312: PPUSH
20313: CALL_OW 67
// p := p + 1 ;
20317: LD_ADDR_VAR 0 3
20321: PUSH
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 1
20329: PLUS
20330: ST_TO_ADDR
// for i in tmp do
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_VAR 0 2
20340: PUSH
20341: FOR_IN
20342: IFFALSE 20373
// if GetLives ( i ) < 1000 then
20344: LD_VAR 0 1
20348: PPUSH
20349: CALL_OW 256
20353: PUSH
20354: LD_INT 1000
20356: LESS
20357: IFFALSE 20371
// SetLives ( i , 1000 ) ;
20359: LD_VAR 0 1
20363: PPUSH
20364: LD_INT 1000
20366: PPUSH
20367: CALL_OW 234
20371: GO 20341
20373: POP
20374: POP
// until p > 20 ;
20375: LD_VAR 0 3
20379: PUSH
20380: LD_INT 20
20382: GREATER
20383: IFFALSE 20310
// end ;
20385: PPOPN 3
20387: END
// every 0 0$1 trigger StreamModeActive and sTime do
20388: LD_EXP 71
20392: PUSH
20393: LD_EXP 122
20397: AND
20398: IFFALSE 20433
20400: GO 20402
20402: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20403: LD_INT 28
20405: PPUSH
20406: LD_OWVAR 2
20410: PPUSH
20411: LD_INT 2
20413: PPUSH
20414: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20418: LD_INT 30
20420: PPUSH
20421: LD_OWVAR 2
20425: PPUSH
20426: LD_INT 2
20428: PPUSH
20429: CALL_OW 322
// end ;
20433: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20434: LD_EXP 71
20438: PUSH
20439: LD_EXP 123
20443: AND
20444: IFFALSE 20565
20446: GO 20448
20448: DISABLE
20449: LD_INT 0
20451: PPUSH
20452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20453: LD_ADDR_VAR 0 2
20457: PUSH
20458: LD_INT 22
20460: PUSH
20461: LD_OWVAR 2
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 21
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: LD_INT 23
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: LIST
20501: PPUSH
20502: CALL_OW 69
20506: ST_TO_ADDR
// if not tmp then
20507: LD_VAR 0 2
20511: NOT
20512: IFFALSE 20516
// exit ;
20514: GO 20565
// for i in tmp do
20516: LD_ADDR_VAR 0 1
20520: PUSH
20521: LD_VAR 0 2
20525: PUSH
20526: FOR_IN
20527: IFFALSE 20563
// begin if Crawls ( i ) then
20529: LD_VAR 0 1
20533: PPUSH
20534: CALL_OW 318
20538: IFFALSE 20549
// ComWalk ( i ) ;
20540: LD_VAR 0 1
20544: PPUSH
20545: CALL_OW 138
// SetClass ( i , 2 ) ;
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_INT 2
20556: PPUSH
20557: CALL_OW 336
// end ;
20561: GO 20526
20563: POP
20564: POP
// end ;
20565: PPOPN 2
20567: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20568: LD_EXP 71
20572: PUSH
20573: LD_EXP 124
20577: AND
20578: IFFALSE 20866
20580: GO 20582
20582: DISABLE
20583: LD_INT 0
20585: PPUSH
20586: PPUSH
20587: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20588: LD_OWVAR 2
20592: PPUSH
20593: LD_INT 9
20595: PPUSH
20596: LD_INT 1
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20606: LD_INT 9
20608: PPUSH
20609: LD_OWVAR 2
20613: PPUSH
20614: CALL_OW 343
// uc_side := 9 ;
20618: LD_ADDR_OWVAR 20
20622: PUSH
20623: LD_INT 9
20625: ST_TO_ADDR
// uc_nation := 2 ;
20626: LD_ADDR_OWVAR 21
20630: PUSH
20631: LD_INT 2
20633: ST_TO_ADDR
// hc_name := Dark Warrior ;
20634: LD_ADDR_OWVAR 26
20638: PUSH
20639: LD_STRING Dark Warrior
20641: ST_TO_ADDR
// hc_gallery :=  ;
20642: LD_ADDR_OWVAR 33
20646: PUSH
20647: LD_STRING 
20649: ST_TO_ADDR
// hc_noskilllimit := true ;
20650: LD_ADDR_OWVAR 76
20654: PUSH
20655: LD_INT 1
20657: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20658: LD_ADDR_OWVAR 31
20662: PUSH
20663: LD_INT 30
20665: PUSH
20666: LD_INT 30
20668: PUSH
20669: LD_INT 30
20671: PUSH
20672: LD_INT 30
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: ST_TO_ADDR
// un := CreateHuman ;
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: CALL_OW 44
20690: ST_TO_ADDR
// hc_noskilllimit := false ;
20691: LD_ADDR_OWVAR 76
20695: PUSH
20696: LD_INT 0
20698: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 1
20706: PPUSH
20707: CALL_OW 51
// ToLua ( playRanger() ) ;
20711: LD_STRING playRanger()
20713: PPUSH
20714: CALL_OW 559
// p := 0 ;
20718: LD_ADDR_VAR 0 2
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20726: LD_INT 35
20728: PPUSH
20729: CALL_OW 67
// p := p + 1 ;
20733: LD_ADDR_VAR 0 2
20737: PUSH
20738: LD_VAR 0 2
20742: PUSH
20743: LD_INT 1
20745: PLUS
20746: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 256
20756: PUSH
20757: LD_INT 1000
20759: LESS
20760: IFFALSE 20774
// SetLives ( un , 1000 ) ;
20762: LD_VAR 0 3
20766: PPUSH
20767: LD_INT 1000
20769: PPUSH
20770: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20774: LD_VAR 0 3
20778: PPUSH
20779: LD_INT 81
20781: PUSH
20782: LD_OWVAR 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 91
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 30
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PPUSH
20811: CALL_OW 69
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: CALL_OW 74
20825: PPUSH
20826: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20830: LD_VAR 0 2
20834: PUSH
20835: LD_INT 80
20837: GREATER
20838: PUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: CALL_OW 301
20848: OR
20849: IFFALSE 20726
// if un then
20851: LD_VAR 0 3
20855: IFFALSE 20866
// RemoveUnit ( un ) ;
20857: LD_VAR 0 3
20861: PPUSH
20862: CALL_OW 64
// end ;
20866: PPOPN 3
20868: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20869: LD_EXP 125
20873: IFFALSE 20989
20875: GO 20877
20877: DISABLE
20878: LD_INT 0
20880: PPUSH
20881: PPUSH
20882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20883: LD_ADDR_VAR 0 2
20887: PUSH
20888: LD_INT 81
20890: PUSH
20891: LD_OWVAR 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 21
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PPUSH
20914: CALL_OW 69
20918: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20919: LD_STRING playComputer()
20921: PPUSH
20922: CALL_OW 559
// if not tmp then
20926: LD_VAR 0 2
20930: NOT
20931: IFFALSE 20935
// exit ;
20933: GO 20989
// for i in tmp do
20935: LD_ADDR_VAR 0 1
20939: PUSH
20940: LD_VAR 0 2
20944: PUSH
20945: FOR_IN
20946: IFFALSE 20987
// for j := 1 to 4 do
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: DOUBLE
20954: LD_INT 1
20956: DEC
20957: ST_TO_ADDR
20958: LD_INT 4
20960: PUSH
20961: FOR_TO
20962: IFFALSE 20983
// SetSkill ( i , j , 10 ) ;
20964: LD_VAR 0 1
20968: PPUSH
20969: LD_VAR 0 3
20973: PPUSH
20974: LD_INT 10
20976: PPUSH
20977: CALL_OW 237
20981: GO 20961
20983: POP
20984: POP
20985: GO 20945
20987: POP
20988: POP
// end ;
20989: PPOPN 3
20991: END
// every 0 0$1 trigger s30 do var i , tmp ;
20992: LD_EXP 126
20996: IFFALSE 21065
20998: GO 21000
21000: DISABLE
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 22
21012: PUSH
21013: LD_OWVAR 2
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 69
21026: ST_TO_ADDR
// if not tmp then
21027: LD_VAR 0 2
21031: NOT
21032: IFFALSE 21036
// exit ;
21034: GO 21065
// for i in tmp do
21036: LD_ADDR_VAR 0 1
21040: PUSH
21041: LD_VAR 0 2
21045: PUSH
21046: FOR_IN
21047: IFFALSE 21063
// SetLives ( i , 300 ) ;
21049: LD_VAR 0 1
21053: PPUSH
21054: LD_INT 300
21056: PPUSH
21057: CALL_OW 234
21061: GO 21046
21063: POP
21064: POP
// end ;
21065: PPOPN 2
21067: END
// every 0 0$1 trigger s60 do var i , tmp ;
21068: LD_EXP 127
21072: IFFALSE 21141
21074: GO 21076
21076: DISABLE
21077: LD_INT 0
21079: PPUSH
21080: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21081: LD_ADDR_VAR 0 2
21085: PUSH
21086: LD_INT 22
21088: PUSH
21089: LD_OWVAR 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PPUSH
21098: CALL_OW 69
21102: ST_TO_ADDR
// if not tmp then
21103: LD_VAR 0 2
21107: NOT
21108: IFFALSE 21112
// exit ;
21110: GO 21141
// for i in tmp do
21112: LD_ADDR_VAR 0 1
21116: PUSH
21117: LD_VAR 0 2
21121: PUSH
21122: FOR_IN
21123: IFFALSE 21139
// SetLives ( i , 600 ) ;
21125: LD_VAR 0 1
21129: PPUSH
21130: LD_INT 600
21132: PPUSH
21133: CALL_OW 234
21137: GO 21122
21139: POP
21140: POP
// end ;
21141: PPOPN 2
21143: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21144: LD_INT 0
21146: PPUSH
// case cmd of 301 :
21147: LD_VAR 0 1
21151: PUSH
21152: LD_INT 301
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21192
21160: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21161: LD_VAR 0 6
21165: PPUSH
21166: LD_VAR 0 7
21170: PPUSH
21171: LD_VAR 0 8
21175: PPUSH
21176: LD_VAR 0 4
21180: PPUSH
21181: LD_VAR 0 5
21185: PPUSH
21186: CALL 22393 0 5
21190: GO 21313
21192: LD_INT 302
21194: DOUBLE
21195: EQUAL
21196: IFTRUE 21200
21198: GO 21237
21200: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21201: LD_VAR 0 6
21205: PPUSH
21206: LD_VAR 0 7
21210: PPUSH
21211: LD_VAR 0 8
21215: PPUSH
21216: LD_VAR 0 9
21220: PPUSH
21221: LD_VAR 0 4
21225: PPUSH
21226: LD_VAR 0 5
21230: PPUSH
21231: CALL 22484 0 6
21235: GO 21313
21237: LD_INT 303
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21282
21245: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21246: LD_VAR 0 6
21250: PPUSH
21251: LD_VAR 0 7
21255: PPUSH
21256: LD_VAR 0 8
21260: PPUSH
21261: LD_VAR 0 9
21265: PPUSH
21266: LD_VAR 0 4
21270: PPUSH
21271: LD_VAR 0 5
21275: PPUSH
21276: CALL 21318 0 6
21280: GO 21313
21282: LD_INT 304
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21312
21290: POP
// hHackTeleport ( unit , x , y ) ; end ;
21291: LD_VAR 0 2
21295: PPUSH
21296: LD_VAR 0 4
21300: PPUSH
21301: LD_VAR 0 5
21305: PPUSH
21306: CALL 23077 0 3
21310: GO 21313
21312: POP
// end ;
21313: LD_VAR 0 12
21317: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21318: LD_INT 0
21320: PPUSH
21321: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21322: LD_VAR 0 1
21326: PUSH
21327: LD_INT 1
21329: LESS
21330: PUSH
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 3
21338: GREATER
21339: OR
21340: PUSH
21341: LD_VAR 0 5
21345: PPUSH
21346: LD_VAR 0 6
21350: PPUSH
21351: CALL_OW 428
21355: OR
21356: IFFALSE 21360
// exit ;
21358: GO 22080
// uc_side := your_side ;
21360: LD_ADDR_OWVAR 20
21364: PUSH
21365: LD_OWVAR 2
21369: ST_TO_ADDR
// uc_nation := nation ;
21370: LD_ADDR_OWVAR 21
21374: PUSH
21375: LD_VAR 0 1
21379: ST_TO_ADDR
// bc_level = 1 ;
21380: LD_ADDR_OWVAR 43
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// case btype of 1 :
21388: LD_VAR 0 2
21392: PUSH
21393: LD_INT 1
21395: DOUBLE
21396: EQUAL
21397: IFTRUE 21401
21399: GO 21412
21401: POP
// bc_type := b_depot ; 2 :
21402: LD_ADDR_OWVAR 42
21406: PUSH
21407: LD_INT 0
21409: ST_TO_ADDR
21410: GO 22024
21412: LD_INT 2
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21431
21420: POP
// bc_type := b_warehouse ; 3 :
21421: LD_ADDR_OWVAR 42
21425: PUSH
21426: LD_INT 1
21428: ST_TO_ADDR
21429: GO 22024
21431: LD_INT 3
21433: DOUBLE
21434: EQUAL
21435: IFTRUE 21439
21437: GO 21450
21439: POP
// bc_type := b_lab ; 4 .. 9 :
21440: LD_ADDR_OWVAR 42
21444: PUSH
21445: LD_INT 6
21447: ST_TO_ADDR
21448: GO 22024
21450: LD_INT 4
21452: DOUBLE
21453: GREATEREQUAL
21454: IFFALSE 21462
21456: LD_INT 9
21458: DOUBLE
21459: LESSEQUAL
21460: IFTRUE 21464
21462: GO 21516
21464: POP
// begin bc_type := b_lab_half ;
21465: LD_ADDR_OWVAR 42
21469: PUSH
21470: LD_INT 7
21472: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21473: LD_ADDR_OWVAR 44
21477: PUSH
21478: LD_INT 10
21480: PUSH
21481: LD_INT 11
21483: PUSH
21484: LD_INT 12
21486: PUSH
21487: LD_INT 15
21489: PUSH
21490: LD_INT 14
21492: PUSH
21493: LD_INT 13
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: LD_VAR 0 2
21508: PUSH
21509: LD_INT 3
21511: MINUS
21512: ARRAY
21513: ST_TO_ADDR
// end ; 10 .. 13 :
21514: GO 22024
21516: LD_INT 10
21518: DOUBLE
21519: GREATEREQUAL
21520: IFFALSE 21528
21522: LD_INT 13
21524: DOUBLE
21525: LESSEQUAL
21526: IFTRUE 21530
21528: GO 21607
21530: POP
// begin bc_type := b_lab_full ;
21531: LD_ADDR_OWVAR 42
21535: PUSH
21536: LD_INT 8
21538: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21539: LD_ADDR_OWVAR 44
21543: PUSH
21544: LD_INT 10
21546: PUSH
21547: LD_INT 12
21549: PUSH
21550: LD_INT 14
21552: PUSH
21553: LD_INT 13
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: LD_VAR 0 2
21566: PUSH
21567: LD_INT 9
21569: MINUS
21570: ARRAY
21571: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21572: LD_ADDR_OWVAR 45
21576: PUSH
21577: LD_INT 11
21579: PUSH
21580: LD_INT 15
21582: PUSH
21583: LD_INT 12
21585: PUSH
21586: LD_INT 15
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PUSH
21595: LD_VAR 0 2
21599: PUSH
21600: LD_INT 9
21602: MINUS
21603: ARRAY
21604: ST_TO_ADDR
// end ; 14 :
21605: GO 22024
21607: LD_INT 14
21609: DOUBLE
21610: EQUAL
21611: IFTRUE 21615
21613: GO 21626
21615: POP
// bc_type := b_workshop ; 15 :
21616: LD_ADDR_OWVAR 42
21620: PUSH
21621: LD_INT 2
21623: ST_TO_ADDR
21624: GO 22024
21626: LD_INT 15
21628: DOUBLE
21629: EQUAL
21630: IFTRUE 21634
21632: GO 21645
21634: POP
// bc_type := b_factory ; 16 :
21635: LD_ADDR_OWVAR 42
21639: PUSH
21640: LD_INT 3
21642: ST_TO_ADDR
21643: GO 22024
21645: LD_INT 16
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21664
21653: POP
// bc_type := b_ext_gun ; 17 :
21654: LD_ADDR_OWVAR 42
21658: PUSH
21659: LD_INT 17
21661: ST_TO_ADDR
21662: GO 22024
21664: LD_INT 17
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21700
21672: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21673: LD_ADDR_OWVAR 42
21677: PUSH
21678: LD_INT 19
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 19
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: LD_VAR 0 1
21696: ARRAY
21697: ST_TO_ADDR
21698: GO 22024
21700: LD_INT 18
21702: DOUBLE
21703: EQUAL
21704: IFTRUE 21708
21706: GO 21719
21708: POP
// bc_type := b_ext_radar ; 19 :
21709: LD_ADDR_OWVAR 42
21713: PUSH
21714: LD_INT 20
21716: ST_TO_ADDR
21717: GO 22024
21719: LD_INT 19
21721: DOUBLE
21722: EQUAL
21723: IFTRUE 21727
21725: GO 21738
21727: POP
// bc_type := b_ext_radio ; 20 :
21728: LD_ADDR_OWVAR 42
21732: PUSH
21733: LD_INT 22
21735: ST_TO_ADDR
21736: GO 22024
21738: LD_INT 20
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21757
21746: POP
// bc_type := b_ext_siberium ; 21 :
21747: LD_ADDR_OWVAR 42
21751: PUSH
21752: LD_INT 21
21754: ST_TO_ADDR
21755: GO 22024
21757: LD_INT 21
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21776
21765: POP
// bc_type := b_ext_computer ; 22 :
21766: LD_ADDR_OWVAR 42
21770: PUSH
21771: LD_INT 24
21773: ST_TO_ADDR
21774: GO 22024
21776: LD_INT 22
21778: DOUBLE
21779: EQUAL
21780: IFTRUE 21784
21782: GO 21795
21784: POP
// bc_type := b_ext_track ; 23 :
21785: LD_ADDR_OWVAR 42
21789: PUSH
21790: LD_INT 16
21792: ST_TO_ADDR
21793: GO 22024
21795: LD_INT 23
21797: DOUBLE
21798: EQUAL
21799: IFTRUE 21803
21801: GO 21814
21803: POP
// bc_type := b_ext_laser ; 24 :
21804: LD_ADDR_OWVAR 42
21808: PUSH
21809: LD_INT 25
21811: ST_TO_ADDR
21812: GO 22024
21814: LD_INT 24
21816: DOUBLE
21817: EQUAL
21818: IFTRUE 21822
21820: GO 21833
21822: POP
// bc_type := b_control_tower ; 25 :
21823: LD_ADDR_OWVAR 42
21827: PUSH
21828: LD_INT 36
21830: ST_TO_ADDR
21831: GO 22024
21833: LD_INT 25
21835: DOUBLE
21836: EQUAL
21837: IFTRUE 21841
21839: GO 21852
21841: POP
// bc_type := b_breastwork ; 26 :
21842: LD_ADDR_OWVAR 42
21846: PUSH
21847: LD_INT 31
21849: ST_TO_ADDR
21850: GO 22024
21852: LD_INT 26
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21871
21860: POP
// bc_type := b_bunker ; 27 :
21861: LD_ADDR_OWVAR 42
21865: PUSH
21866: LD_INT 32
21868: ST_TO_ADDR
21869: GO 22024
21871: LD_INT 27
21873: DOUBLE
21874: EQUAL
21875: IFTRUE 21879
21877: GO 21890
21879: POP
// bc_type := b_turret ; 28 :
21880: LD_ADDR_OWVAR 42
21884: PUSH
21885: LD_INT 33
21887: ST_TO_ADDR
21888: GO 22024
21890: LD_INT 28
21892: DOUBLE
21893: EQUAL
21894: IFTRUE 21898
21896: GO 21909
21898: POP
// bc_type := b_armoury ; 29 :
21899: LD_ADDR_OWVAR 42
21903: PUSH
21904: LD_INT 4
21906: ST_TO_ADDR
21907: GO 22024
21909: LD_INT 29
21911: DOUBLE
21912: EQUAL
21913: IFTRUE 21917
21915: GO 21928
21917: POP
// bc_type := b_barracks ; 30 :
21918: LD_ADDR_OWVAR 42
21922: PUSH
21923: LD_INT 5
21925: ST_TO_ADDR
21926: GO 22024
21928: LD_INT 30
21930: DOUBLE
21931: EQUAL
21932: IFTRUE 21936
21934: GO 21947
21936: POP
// bc_type := b_solar_power ; 31 :
21937: LD_ADDR_OWVAR 42
21941: PUSH
21942: LD_INT 27
21944: ST_TO_ADDR
21945: GO 22024
21947: LD_INT 31
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 21966
21955: POP
// bc_type := b_oil_power ; 32 :
21956: LD_ADDR_OWVAR 42
21960: PUSH
21961: LD_INT 26
21963: ST_TO_ADDR
21964: GO 22024
21966: LD_INT 32
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 21985
21974: POP
// bc_type := b_siberite_power ; 33 :
21975: LD_ADDR_OWVAR 42
21979: PUSH
21980: LD_INT 28
21982: ST_TO_ADDR
21983: GO 22024
21985: LD_INT 33
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22004
21993: POP
// bc_type := b_oil_mine ; 34 :
21994: LD_ADDR_OWVAR 42
21998: PUSH
21999: LD_INT 29
22001: ST_TO_ADDR
22002: GO 22024
22004: LD_INT 34
22006: DOUBLE
22007: EQUAL
22008: IFTRUE 22012
22010: GO 22023
22012: POP
// bc_type := b_siberite_mine ; end ;
22013: LD_ADDR_OWVAR 42
22017: PUSH
22018: LD_INT 30
22020: ST_TO_ADDR
22021: GO 22024
22023: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22024: LD_ADDR_VAR 0 8
22028: PUSH
22029: LD_VAR 0 5
22033: PPUSH
22034: LD_VAR 0 6
22038: PPUSH
22039: LD_VAR 0 3
22043: PPUSH
22044: CALL_OW 47
22048: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22049: LD_OWVAR 42
22053: PUSH
22054: LD_INT 32
22056: PUSH
22057: LD_INT 33
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: IN
22064: IFFALSE 22080
// PlaceWeaponTurret ( b , weapon ) ;
22066: LD_VAR 0 8
22070: PPUSH
22071: LD_VAR 0 4
22075: PPUSH
22076: CALL_OW 431
// end ;
22080: LD_VAR 0 7
22084: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22085: LD_INT 0
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22091: LD_ADDR_VAR 0 4
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_OWVAR 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: ST_TO_ADDR
// if not tmp then
22145: LD_VAR 0 4
22149: NOT
22150: IFFALSE 22154
// exit ;
22152: GO 22213
// for i in tmp do
22154: LD_ADDR_VAR 0 2
22158: PUSH
22159: LD_VAR 0 4
22163: PUSH
22164: FOR_IN
22165: IFFALSE 22211
// for j = 1 to 3 do
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: DOUBLE
22173: LD_INT 1
22175: DEC
22176: ST_TO_ADDR
22177: LD_INT 3
22179: PUSH
22180: FOR_TO
22181: IFFALSE 22207
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22183: LD_VAR 0 2
22187: PPUSH
22188: CALL_OW 274
22192: PPUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 99999
22200: PPUSH
22201: CALL_OW 277
22205: GO 22180
22207: POP
22208: POP
22209: GO 22164
22211: POP
22212: POP
// end ;
22213: LD_VAR 0 1
22217: RET
// export function hHackSetLevel10 ; var i , j ; begin
22218: LD_INT 0
22220: PPUSH
22221: PPUSH
22222: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22223: LD_ADDR_VAR 0 2
22227: PUSH
22228: LD_INT 21
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL_OW 69
22242: PUSH
22243: FOR_IN
22244: IFFALSE 22296
// if IsSelected ( i ) then
22246: LD_VAR 0 2
22250: PPUSH
22251: CALL_OW 306
22255: IFFALSE 22294
// begin for j := 1 to 4 do
22257: LD_ADDR_VAR 0 3
22261: PUSH
22262: DOUBLE
22263: LD_INT 1
22265: DEC
22266: ST_TO_ADDR
22267: LD_INT 4
22269: PUSH
22270: FOR_TO
22271: IFFALSE 22292
// SetSkill ( i , j , 10 ) ;
22273: LD_VAR 0 2
22277: PPUSH
22278: LD_VAR 0 3
22282: PPUSH
22283: LD_INT 10
22285: PPUSH
22286: CALL_OW 237
22290: GO 22270
22292: POP
22293: POP
// end ;
22294: GO 22243
22296: POP
22297: POP
// end ;
22298: LD_VAR 0 1
22302: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22303: LD_INT 0
22305: PPUSH
22306: PPUSH
22307: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22308: LD_ADDR_VAR 0 2
22312: PUSH
22313: LD_INT 22
22315: PUSH
22316: LD_OWVAR 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 21
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: PUSH
22344: FOR_IN
22345: IFFALSE 22386
// begin for j := 1 to 4 do
22347: LD_ADDR_VAR 0 3
22351: PUSH
22352: DOUBLE
22353: LD_INT 1
22355: DEC
22356: ST_TO_ADDR
22357: LD_INT 4
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22382
// SetSkill ( i , j , 10 ) ;
22363: LD_VAR 0 2
22367: PPUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: LD_INT 10
22375: PPUSH
22376: CALL_OW 237
22380: GO 22360
22382: POP
22383: POP
// end ;
22384: GO 22344
22386: POP
22387: POP
// end ;
22388: LD_VAR 0 1
22392: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22393: LD_INT 0
22395: PPUSH
// uc_side := your_side ;
22396: LD_ADDR_OWVAR 20
22400: PUSH
22401: LD_OWVAR 2
22405: ST_TO_ADDR
// uc_nation := nation ;
22406: LD_ADDR_OWVAR 21
22410: PUSH
22411: LD_VAR 0 1
22415: ST_TO_ADDR
// InitHc ;
22416: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22420: LD_INT 0
22422: PPUSH
22423: LD_VAR 0 2
22427: PPUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22437: LD_VAR 0 4
22441: PPUSH
22442: LD_VAR 0 5
22446: PPUSH
22447: CALL_OW 428
22451: PUSH
22452: LD_INT 0
22454: EQUAL
22455: IFFALSE 22479
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22457: CALL_OW 44
22461: PPUSH
22462: LD_VAR 0 4
22466: PPUSH
22467: LD_VAR 0 5
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 48
// end ;
22479: LD_VAR 0 6
22483: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22484: LD_INT 0
22486: PPUSH
22487: PPUSH
// uc_side := your_side ;
22488: LD_ADDR_OWVAR 20
22492: PUSH
22493: LD_OWVAR 2
22497: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22498: LD_VAR 0 1
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 4
22514: PUSH
22515: LD_INT 5
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: IN
22525: IFFALSE 22537
// uc_nation := nation_american else
22527: LD_ADDR_OWVAR 21
22531: PUSH
22532: LD_INT 1
22534: ST_TO_ADDR
22535: GO 22580
// if chassis in [ 11 , 12 , 13 , 14 ] then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_INT 11
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: LD_INT 13
22550: PUSH
22551: LD_INT 14
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: IN
22560: IFFALSE 22572
// uc_nation := nation_arabian else
22562: LD_ADDR_OWVAR 21
22566: PUSH
22567: LD_INT 2
22569: ST_TO_ADDR
22570: GO 22580
// uc_nation := nation_russian ;
22572: LD_ADDR_OWVAR 21
22576: PUSH
22577: LD_INT 3
22579: ST_TO_ADDR
// vc_chassis := chassis ;
22580: LD_ADDR_OWVAR 37
22584: PUSH
22585: LD_VAR 0 1
22589: ST_TO_ADDR
// vc_engine := engine ;
22590: LD_ADDR_OWVAR 39
22594: PUSH
22595: LD_VAR 0 2
22599: ST_TO_ADDR
// vc_control := control ;
22600: LD_ADDR_OWVAR 38
22604: PUSH
22605: LD_VAR 0 3
22609: ST_TO_ADDR
// vc_weapon := weapon ;
22610: LD_ADDR_OWVAR 40
22614: PUSH
22615: LD_VAR 0 4
22619: ST_TO_ADDR
// un := CreateVehicle ;
22620: LD_ADDR_VAR 0 8
22624: PUSH
22625: CALL_OW 45
22629: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22630: LD_VAR 0 8
22634: PPUSH
22635: LD_INT 0
22637: PPUSH
22638: LD_INT 5
22640: PPUSH
22641: CALL_OW 12
22645: PPUSH
22646: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22650: LD_VAR 0 8
22654: PPUSH
22655: LD_VAR 0 5
22659: PPUSH
22660: LD_VAR 0 6
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 48
// end ;
22672: LD_VAR 0 7
22676: RET
// export hInvincible ; every 1 do
22677: GO 22679
22679: DISABLE
// hInvincible := [ ] ;
22680: LD_ADDR_EXP 128
22684: PUSH
22685: EMPTY
22686: ST_TO_ADDR
22687: END
// every 10 do var i ;
22688: GO 22690
22690: DISABLE
22691: LD_INT 0
22693: PPUSH
// begin enable ;
22694: ENABLE
// if not hInvincible then
22695: LD_EXP 128
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 22748
// for i in hInvincible do
22704: LD_ADDR_VAR 0 1
22708: PUSH
22709: LD_EXP 128
22713: PUSH
22714: FOR_IN
22715: IFFALSE 22746
// if GetLives ( i ) < 1000 then
22717: LD_VAR 0 1
22721: PPUSH
22722: CALL_OW 256
22726: PUSH
22727: LD_INT 1000
22729: LESS
22730: IFFALSE 22744
// SetLives ( i , 1000 ) ;
22732: LD_VAR 0 1
22736: PPUSH
22737: LD_INT 1000
22739: PPUSH
22740: CALL_OW 234
22744: GO 22714
22746: POP
22747: POP
// end ;
22748: PPOPN 1
22750: END
// export function hHackInvincible ; var i ; begin
22751: LD_INT 0
22753: PPUSH
22754: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22755: LD_ADDR_VAR 0 2
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 21
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: PPUSH
22788: CALL_OW 69
22792: PUSH
22793: FOR_IN
22794: IFFALSE 22855
// if IsSelected ( i ) then
22796: LD_VAR 0 2
22800: PPUSH
22801: CALL_OW 306
22805: IFFALSE 22853
// begin if i in hInvincible then
22807: LD_VAR 0 2
22811: PUSH
22812: LD_EXP 128
22816: IN
22817: IFFALSE 22837
// hInvincible := hInvincible diff i else
22819: LD_ADDR_EXP 128
22823: PUSH
22824: LD_EXP 128
22828: PUSH
22829: LD_VAR 0 2
22833: DIFF
22834: ST_TO_ADDR
22835: GO 22853
// hInvincible := hInvincible union i ;
22837: LD_ADDR_EXP 128
22841: PUSH
22842: LD_EXP 128
22846: PUSH
22847: LD_VAR 0 2
22851: UNION
22852: ST_TO_ADDR
// end ;
22853: GO 22793
22855: POP
22856: POP
// end ;
22857: LD_VAR 0 1
22861: RET
// export function hHackInvisible ; var i , j ; begin
22862: LD_INT 0
22864: PPUSH
22865: PPUSH
22866: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_INT 21
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 69
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22912
// if IsSelected ( i ) then
22890: LD_VAR 0 2
22894: PPUSH
22895: CALL_OW 306
22899: IFFALSE 22910
// ComForceInvisible ( i ) ;
22901: LD_VAR 0 2
22905: PPUSH
22906: CALL_OW 496
22910: GO 22887
22912: POP
22913: POP
// end ;
22914: LD_VAR 0 1
22918: RET
// export function hHackChangeYourSide ; begin
22919: LD_INT 0
22921: PPUSH
// if your_side = 8 then
22922: LD_OWVAR 2
22926: PUSH
22927: LD_INT 8
22929: EQUAL
22930: IFFALSE 22942
// your_side := 0 else
22932: LD_ADDR_OWVAR 2
22936: PUSH
22937: LD_INT 0
22939: ST_TO_ADDR
22940: GO 22956
// your_side := your_side + 1 ;
22942: LD_ADDR_OWVAR 2
22946: PUSH
22947: LD_OWVAR 2
22951: PUSH
22952: LD_INT 1
22954: PLUS
22955: ST_TO_ADDR
// end ;
22956: LD_VAR 0 1
22960: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
22965: PPUSH
// for i in all_units do
22966: LD_ADDR_VAR 0 2
22970: PUSH
22971: LD_OWVAR 3
22975: PUSH
22976: FOR_IN
22977: IFFALSE 23055
// if IsSelected ( i ) then
22979: LD_VAR 0 2
22983: PPUSH
22984: CALL_OW 306
22988: IFFALSE 23053
// begin j := GetSide ( i ) ;
22990: LD_ADDR_VAR 0 3
22994: PUSH
22995: LD_VAR 0 2
22999: PPUSH
23000: CALL_OW 255
23004: ST_TO_ADDR
// if j = 8 then
23005: LD_VAR 0 3
23009: PUSH
23010: LD_INT 8
23012: EQUAL
23013: IFFALSE 23025
// j := 0 else
23015: LD_ADDR_VAR 0 3
23019: PUSH
23020: LD_INT 0
23022: ST_TO_ADDR
23023: GO 23039
// j := j + 1 ;
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_INT 1
23037: PLUS
23038: ST_TO_ADDR
// SetSide ( i , j ) ;
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: CALL_OW 235
// end ;
23053: GO 22976
23055: POP
23056: POP
// end ;
23057: LD_VAR 0 1
23061: RET
// export function hHackFog ; begin
23062: LD_INT 0
23064: PPUSH
// FogOff ( true ) ;
23065: LD_INT 1
23067: PPUSH
23068: CALL_OW 344
// end ;
23072: LD_VAR 0 1
23076: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23077: LD_INT 0
23079: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23080: LD_VAR 0 1
23084: PPUSH
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 3
23094: PPUSH
23095: LD_INT 1
23097: PPUSH
23098: LD_INT 1
23100: PPUSH
23101: CALL_OW 483
// CenterOnXY ( x , y ) ;
23105: LD_VAR 0 2
23109: PPUSH
23110: LD_VAR 0 3
23114: PPUSH
23115: CALL_OW 84
// end ; end_of_file
23119: LD_VAR 0 4
23123: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23124: LD_INT 0
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 264
23139: PUSH
23140: LD_EXP 56
23144: EQUAL
23145: IFFALSE 23217
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23147: LD_INT 68
23149: PPUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 255
23159: PPUSH
23160: CALL_OW 321
23164: PUSH
23165: LD_INT 2
23167: EQUAL
23168: IFFALSE 23180
// eff := 70 else
23170: LD_ADDR_VAR 0 4
23174: PUSH
23175: LD_INT 70
23177: ST_TO_ADDR
23178: GO 23188
// eff := 30 ;
23180: LD_ADDR_VAR 0 4
23184: PUSH
23185: LD_INT 30
23187: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 250
23197: PPUSH
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 251
23207: PPUSH
23208: LD_VAR 0 4
23212: PPUSH
23213: CALL_OW 495
// end ; end ;
23217: LD_VAR 0 2
23221: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23222: LD_INT 0
23224: PPUSH
// end ;
23225: LD_VAR 0 4
23229: RET
// export function SOS_Command ( cmd ) ; begin
23230: LD_INT 0
23232: PPUSH
// end ;
23233: LD_VAR 0 2
23237: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23238: LD_INT 0
23240: PPUSH
// end ;
23241: LD_VAR 0 6
23245: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23246: LD_INT 0
23248: PPUSH
23249: PPUSH
// if not vehicle or not factory then
23250: LD_VAR 0 1
23254: NOT
23255: PUSH
23256: LD_VAR 0 2
23260: NOT
23261: OR
23262: IFFALSE 23266
// exit ;
23264: GO 23497
// if factoryWaypoints >= factory then
23266: LD_EXP 129
23270: PUSH
23271: LD_VAR 0 2
23275: GREATEREQUAL
23276: IFFALSE 23497
// if factoryWaypoints [ factory ] then
23278: LD_EXP 129
23282: PUSH
23283: LD_VAR 0 2
23287: ARRAY
23288: IFFALSE 23497
// begin if GetControl ( vehicle ) = control_manual then
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 263
23299: PUSH
23300: LD_INT 1
23302: EQUAL
23303: IFFALSE 23384
// begin driver := IsDrivenBy ( vehicle ) ;
23305: LD_ADDR_VAR 0 4
23309: PUSH
23310: LD_VAR 0 1
23314: PPUSH
23315: CALL_OW 311
23319: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23320: LD_VAR 0 4
23324: PPUSH
23325: LD_EXP 129
23329: PUSH
23330: LD_VAR 0 2
23334: ARRAY
23335: PUSH
23336: LD_INT 3
23338: ARRAY
23339: PPUSH
23340: LD_EXP 129
23344: PUSH
23345: LD_VAR 0 2
23349: ARRAY
23350: PUSH
23351: LD_INT 4
23353: ARRAY
23354: PPUSH
23355: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23359: LD_VAR 0 4
23363: PPUSH
23364: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23368: LD_VAR 0 4
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL_OW 180
// end else
23382: GO 23497
// if GetControl ( vehicle ) = control_remote then
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL_OW 263
23393: PUSH
23394: LD_INT 2
23396: EQUAL
23397: IFFALSE 23458
// begin wait ( 0 0$2 ) ;
23399: LD_INT 70
23401: PPUSH
23402: CALL_OW 67
// if Connect ( vehicle ) then
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL 35721 0 1
23415: IFFALSE 23456
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23417: LD_VAR 0 1
23421: PPUSH
23422: LD_EXP 129
23426: PUSH
23427: LD_VAR 0 2
23431: ARRAY
23432: PUSH
23433: LD_INT 3
23435: ARRAY
23436: PPUSH
23437: LD_EXP 129
23441: PUSH
23442: LD_VAR 0 2
23446: ARRAY
23447: PUSH
23448: LD_INT 4
23450: ARRAY
23451: PPUSH
23452: CALL_OW 171
// end else
23456: GO 23497
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23458: LD_VAR 0 1
23462: PPUSH
23463: LD_EXP 129
23467: PUSH
23468: LD_VAR 0 2
23472: ARRAY
23473: PUSH
23474: LD_INT 3
23476: ARRAY
23477: PPUSH
23478: LD_EXP 129
23482: PUSH
23483: LD_VAR 0 2
23487: ARRAY
23488: PUSH
23489: LD_INT 4
23491: ARRAY
23492: PPUSH
23493: CALL_OW 171
// end ; end ;
23497: LD_VAR 0 3
23501: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23502: LD_INT 0
23504: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23505: LD_VAR 0 1
23509: PUSH
23510: LD_INT 250
23512: EQUAL
23513: PUSH
23514: LD_VAR 0 2
23518: PPUSH
23519: CALL_OW 264
23523: PUSH
23524: LD_EXP 59
23528: EQUAL
23529: AND
23530: IFFALSE 23551
// MinerPlaceMine ( unit , x , y ) ;
23532: LD_VAR 0 2
23536: PPUSH
23537: LD_VAR 0 4
23541: PPUSH
23542: LD_VAR 0 5
23546: PPUSH
23547: CALL 26279 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23551: LD_VAR 0 1
23555: PUSH
23556: LD_INT 251
23558: EQUAL
23559: PUSH
23560: LD_VAR 0 2
23564: PPUSH
23565: CALL_OW 264
23569: PUSH
23570: LD_EXP 59
23574: EQUAL
23575: AND
23576: IFFALSE 23597
// MinerDetonateMine ( unit , x , y ) ;
23578: LD_VAR 0 2
23582: PPUSH
23583: LD_VAR 0 4
23587: PPUSH
23588: LD_VAR 0 5
23592: PPUSH
23593: CALL 26556 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23597: LD_VAR 0 1
23601: PUSH
23602: LD_INT 252
23604: EQUAL
23605: PUSH
23606: LD_VAR 0 2
23610: PPUSH
23611: CALL_OW 264
23615: PUSH
23616: LD_EXP 59
23620: EQUAL
23621: AND
23622: IFFALSE 23643
// MinerCreateMinefield ( unit , x , y ) ;
23624: LD_VAR 0 2
23628: PPUSH
23629: LD_VAR 0 4
23633: PPUSH
23634: LD_VAR 0 5
23638: PPUSH
23639: CALL 26973 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23643: LD_VAR 0 1
23647: PUSH
23648: LD_INT 253
23650: EQUAL
23651: PUSH
23652: LD_VAR 0 2
23656: PPUSH
23657: CALL_OW 257
23661: PUSH
23662: LD_INT 5
23664: EQUAL
23665: AND
23666: IFFALSE 23687
// ComBinocular ( unit , x , y ) ;
23668: LD_VAR 0 2
23672: PPUSH
23673: LD_VAR 0 4
23677: PPUSH
23678: LD_VAR 0 5
23682: PPUSH
23683: CALL 27344 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23687: LD_VAR 0 1
23691: PUSH
23692: LD_INT 254
23694: EQUAL
23695: PUSH
23696: LD_VAR 0 2
23700: PPUSH
23701: CALL_OW 264
23705: PUSH
23706: LD_EXP 54
23710: EQUAL
23711: AND
23712: PUSH
23713: LD_VAR 0 3
23717: PPUSH
23718: CALL_OW 263
23722: PUSH
23723: LD_INT 3
23725: EQUAL
23726: AND
23727: IFFALSE 23743
// HackDestroyVehicle ( unit , selectedUnit ) ;
23729: LD_VAR 0 2
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: CALL 25639 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23743: LD_VAR 0 1
23747: PUSH
23748: LD_INT 255
23750: EQUAL
23751: PUSH
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 264
23761: PUSH
23762: LD_INT 14
23764: PUSH
23765: LD_INT 53
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: IN
23772: AND
23773: PUSH
23774: LD_VAR 0 4
23778: PPUSH
23779: LD_VAR 0 5
23783: PPUSH
23784: CALL_OW 488
23788: AND
23789: IFFALSE 23813
// CutTreeXYR ( unit , x , y , 12 ) ;
23791: LD_VAR 0 2
23795: PPUSH
23796: LD_VAR 0 4
23800: PPUSH
23801: LD_VAR 0 5
23805: PPUSH
23806: LD_INT 12
23808: PPUSH
23809: CALL 24205 0 4
// if cmd = 256 then
23813: LD_VAR 0 1
23817: PUSH
23818: LD_INT 256
23820: EQUAL
23821: IFFALSE 23842
// SetFactoryWaypoint ( unit , x , y ) ;
23823: LD_VAR 0 2
23827: PPUSH
23828: LD_VAR 0 4
23832: PPUSH
23833: LD_VAR 0 5
23837: PPUSH
23838: CALL 23847 0 3
// end ;
23842: LD_VAR 0 6
23846: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23851: LD_VAR 0 1
23855: NOT
23856: PUSH
23857: LD_VAR 0 2
23861: PPUSH
23862: LD_VAR 0 3
23866: PPUSH
23867: CALL_OW 488
23871: NOT
23872: OR
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 266
23883: PUSH
23884: LD_INT 3
23886: NONEQUAL
23887: PUSH
23888: LD_VAR 0 1
23892: PPUSH
23893: CALL_OW 247
23897: PUSH
23898: LD_INT 1
23900: EQUAL
23901: NOT
23902: AND
23903: OR
23904: IFFALSE 23908
// exit ;
23906: GO 24057
// if GetType ( factory ) = unit_human then
23908: LD_VAR 0 1
23912: PPUSH
23913: CALL_OW 247
23917: PUSH
23918: LD_INT 1
23920: EQUAL
23921: IFFALSE 23938
// factory := IsInUnit ( factory ) ;
23923: LD_ADDR_VAR 0 1
23927: PUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 310
23937: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 266
23947: PUSH
23948: LD_INT 3
23950: NONEQUAL
23951: IFFALSE 23955
// exit ;
23953: GO 24057
// if HexInfo ( x , y ) = factory then
23955: LD_VAR 0 2
23959: PPUSH
23960: LD_VAR 0 3
23964: PPUSH
23965: CALL_OW 428
23969: PUSH
23970: LD_VAR 0 1
23974: EQUAL
23975: IFFALSE 24002
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23977: LD_ADDR_EXP 129
23981: PUSH
23982: LD_EXP 129
23986: PPUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: LD_INT 0
23994: PPUSH
23995: CALL_OW 1
23999: ST_TO_ADDR
24000: GO 24053
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24002: LD_ADDR_EXP 129
24006: PUSH
24007: LD_EXP 129
24011: PPUSH
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL_OW 255
24026: PUSH
24027: LD_VAR 0 1
24031: PUSH
24032: LD_VAR 0 2
24036: PUSH
24037: LD_VAR 0 3
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24053: CALL 24062 0 0
// end ;
24057: LD_VAR 0 4
24061: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
24062: LD_INT 0
24064: PPUSH
24065: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24066: LD_STRING resetFactoryWaypoint();
24068: PPUSH
24069: CALL_OW 559
// if factoryWaypoints then
24073: LD_EXP 129
24077: IFFALSE 24200
// begin for i := 1 to factoryWaypoints do
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: DOUBLE
24085: LD_INT 1
24087: DEC
24088: ST_TO_ADDR
24089: LD_EXP 129
24093: PUSH
24094: FOR_TO
24095: IFFALSE 24198
// if factoryWaypoints [ i ] then
24097: LD_EXP 129
24101: PUSH
24102: LD_VAR 0 2
24106: ARRAY
24107: IFFALSE 24196
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
24109: LD_STRING setFactoryWaypointXY(
24111: PUSH
24112: LD_EXP 129
24116: PUSH
24117: LD_VAR 0 2
24121: ARRAY
24122: PUSH
24123: LD_INT 1
24125: ARRAY
24126: STR
24127: PUSH
24128: LD_STRING ,
24130: STR
24131: PUSH
24132: LD_EXP 129
24136: PUSH
24137: LD_VAR 0 2
24141: ARRAY
24142: PUSH
24143: LD_INT 2
24145: ARRAY
24146: STR
24147: PUSH
24148: LD_STRING ,
24150: STR
24151: PUSH
24152: LD_EXP 129
24156: PUSH
24157: LD_VAR 0 2
24161: ARRAY
24162: PUSH
24163: LD_INT 3
24165: ARRAY
24166: STR
24167: PUSH
24168: LD_STRING ,
24170: STR
24171: PUSH
24172: LD_EXP 129
24176: PUSH
24177: LD_VAR 0 2
24181: ARRAY
24182: PUSH
24183: LD_INT 4
24185: ARRAY
24186: STR
24187: PUSH
24188: LD_STRING )
24190: STR
24191: PPUSH
24192: CALL_OW 559
24196: GO 24094
24198: POP
24199: POP
// end ; end ;
24200: LD_VAR 0 1
24204: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24216: LD_VAR 0 1
24220: NOT
24221: PUSH
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: CALL_OW 488
24236: NOT
24237: OR
24238: PUSH
24239: LD_VAR 0 4
24243: NOT
24244: OR
24245: IFFALSE 24249
// exit ;
24247: GO 24589
// list := [ ] ;
24249: LD_ADDR_VAR 0 13
24253: PUSH
24254: EMPTY
24255: ST_TO_ADDR
// if x - r < 0 then
24256: LD_VAR 0 2
24260: PUSH
24261: LD_VAR 0 4
24265: MINUS
24266: PUSH
24267: LD_INT 0
24269: LESS
24270: IFFALSE 24282
// min_x := 0 else
24272: LD_ADDR_VAR 0 7
24276: PUSH
24277: LD_INT 0
24279: ST_TO_ADDR
24280: GO 24298
// min_x := x - r ;
24282: LD_ADDR_VAR 0 7
24286: PUSH
24287: LD_VAR 0 2
24291: PUSH
24292: LD_VAR 0 4
24296: MINUS
24297: ST_TO_ADDR
// if y - r < 0 then
24298: LD_VAR 0 3
24302: PUSH
24303: LD_VAR 0 4
24307: MINUS
24308: PUSH
24309: LD_INT 0
24311: LESS
24312: IFFALSE 24324
// min_y := 0 else
24314: LD_ADDR_VAR 0 8
24318: PUSH
24319: LD_INT 0
24321: ST_TO_ADDR
24322: GO 24340
// min_y := y - r ;
24324: LD_ADDR_VAR 0 8
24328: PUSH
24329: LD_VAR 0 3
24333: PUSH
24334: LD_VAR 0 4
24338: MINUS
24339: ST_TO_ADDR
// max_x := x + r ;
24340: LD_ADDR_VAR 0 9
24344: PUSH
24345: LD_VAR 0 2
24349: PUSH
24350: LD_VAR 0 4
24354: PLUS
24355: ST_TO_ADDR
// max_y := y + r ;
24356: LD_ADDR_VAR 0 10
24360: PUSH
24361: LD_VAR 0 3
24365: PUSH
24366: LD_VAR 0 4
24370: PLUS
24371: ST_TO_ADDR
// for _x = min_x to max_x do
24372: LD_ADDR_VAR 0 11
24376: PUSH
24377: DOUBLE
24378: LD_VAR 0 7
24382: DEC
24383: ST_TO_ADDR
24384: LD_VAR 0 9
24388: PUSH
24389: FOR_TO
24390: IFFALSE 24507
// for _y = min_y to max_y do
24392: LD_ADDR_VAR 0 12
24396: PUSH
24397: DOUBLE
24398: LD_VAR 0 8
24402: DEC
24403: ST_TO_ADDR
24404: LD_VAR 0 10
24408: PUSH
24409: FOR_TO
24410: IFFALSE 24503
// begin if not ValidHex ( _x , _y ) then
24412: LD_VAR 0 11
24416: PPUSH
24417: LD_VAR 0 12
24421: PPUSH
24422: CALL_OW 488
24426: NOT
24427: IFFALSE 24431
// continue ;
24429: GO 24409
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24431: LD_VAR 0 11
24435: PPUSH
24436: LD_VAR 0 12
24440: PPUSH
24441: CALL_OW 351
24445: PUSH
24446: LD_VAR 0 11
24450: PPUSH
24451: LD_VAR 0 12
24455: PPUSH
24456: CALL_OW 554
24460: AND
24461: IFFALSE 24501
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24463: LD_ADDR_VAR 0 13
24467: PUSH
24468: LD_VAR 0 13
24472: PPUSH
24473: LD_VAR 0 13
24477: PUSH
24478: LD_INT 1
24480: PLUS
24481: PPUSH
24482: LD_VAR 0 11
24486: PUSH
24487: LD_VAR 0 12
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PPUSH
24496: CALL_OW 2
24500: ST_TO_ADDR
// end ;
24501: GO 24409
24503: POP
24504: POP
24505: GO 24389
24507: POP
24508: POP
// if not list then
24509: LD_VAR 0 13
24513: NOT
24514: IFFALSE 24518
// exit ;
24516: GO 24589
// for i in list do
24518: LD_ADDR_VAR 0 6
24522: PUSH
24523: LD_VAR 0 13
24527: PUSH
24528: FOR_IN
24529: IFFALSE 24587
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24531: LD_VAR 0 1
24535: PPUSH
24536: LD_STRING M
24538: PUSH
24539: LD_VAR 0 6
24543: PUSH
24544: LD_INT 1
24546: ARRAY
24547: PUSH
24548: LD_VAR 0 6
24552: PUSH
24553: LD_INT 2
24555: ARRAY
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: PUSH
24578: EMPTY
24579: LIST
24580: PPUSH
24581: CALL_OW 447
24585: GO 24528
24587: POP
24588: POP
// end ;
24589: LD_VAR 0 5
24593: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24594: LD_EXP 130
24598: NOT
24599: IFFALSE 24649
24601: GO 24603
24603: DISABLE
// begin initHack := true ;
24604: LD_ADDR_EXP 130
24608: PUSH
24609: LD_INT 1
24611: ST_TO_ADDR
// hackTanks := [ ] ;
24612: LD_ADDR_EXP 131
24616: PUSH
24617: EMPTY
24618: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24619: LD_ADDR_EXP 132
24623: PUSH
24624: EMPTY
24625: ST_TO_ADDR
// hackLimit := 3 ;
24626: LD_ADDR_EXP 133
24630: PUSH
24631: LD_INT 3
24633: ST_TO_ADDR
// hackDist := 12 ;
24634: LD_ADDR_EXP 134
24638: PUSH
24639: LD_INT 12
24641: ST_TO_ADDR
// hackCounter := [ ] ;
24642: LD_ADDR_EXP 135
24646: PUSH
24647: EMPTY
24648: ST_TO_ADDR
// end ;
24649: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24650: LD_EXP 130
24654: PUSH
24655: LD_INT 34
24657: PUSH
24658: LD_EXP 54
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PPUSH
24667: CALL_OW 69
24671: AND
24672: IFFALSE 24927
24674: GO 24676
24676: DISABLE
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin enable ;
24681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24682: LD_ADDR_VAR 0 1
24686: PUSH
24687: LD_INT 34
24689: PUSH
24690: LD_EXP 54
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24925
// begin if not i in hackTanks then
24707: LD_VAR 0 1
24711: PUSH
24712: LD_EXP 131
24716: IN
24717: NOT
24718: IFFALSE 24801
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24720: LD_ADDR_EXP 131
24724: PUSH
24725: LD_EXP 131
24729: PPUSH
24730: LD_EXP 131
24734: PUSH
24735: LD_INT 1
24737: PLUS
24738: PPUSH
24739: LD_VAR 0 1
24743: PPUSH
24744: CALL_OW 1
24748: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24749: LD_ADDR_EXP 132
24753: PUSH
24754: LD_EXP 132
24758: PPUSH
24759: LD_EXP 132
24763: PUSH
24764: LD_INT 1
24766: PLUS
24767: PPUSH
24768: EMPTY
24769: PPUSH
24770: CALL_OW 1
24774: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24775: LD_ADDR_EXP 135
24779: PUSH
24780: LD_EXP 135
24784: PPUSH
24785: LD_EXP 135
24789: PUSH
24790: LD_INT 1
24792: PLUS
24793: PPUSH
24794: EMPTY
24795: PPUSH
24796: CALL_OW 1
24800: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 302
24810: NOT
24811: IFFALSE 24824
// begin HackUnlinkAll ( i ) ;
24813: LD_VAR 0 1
24817: PPUSH
24818: CALL 24930 0 1
// continue ;
24822: GO 24704
// end ; HackCheckCapturedStatus ( i ) ;
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL 25373 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24833: LD_ADDR_VAR 0 2
24837: PUSH
24838: LD_INT 81
24840: PUSH
24841: LD_VAR 0 1
24845: PPUSH
24846: CALL_OW 255
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 33
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 91
24867: PUSH
24868: LD_VAR 0 1
24872: PUSH
24873: LD_EXP 134
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 50
24885: PUSH
24886: EMPTY
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: PPUSH
24895: CALL_OW 69
24899: ST_TO_ADDR
// if not tmp then
24900: LD_VAR 0 2
24904: NOT
24905: IFFALSE 24909
// continue ;
24907: GO 24704
// HackLink ( i , tmp ) ;
24909: LD_VAR 0 1
24913: PPUSH
24914: LD_VAR 0 2
24918: PPUSH
24919: CALL 25066 0 2
// end ;
24923: GO 24704
24925: POP
24926: POP
// end ;
24927: PPOPN 2
24929: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24930: LD_INT 0
24932: PPUSH
24933: PPUSH
24934: PPUSH
// if not hack in hackTanks then
24935: LD_VAR 0 1
24939: PUSH
24940: LD_EXP 131
24944: IN
24945: NOT
24946: IFFALSE 24950
// exit ;
24948: GO 25061
// index := GetElementIndex ( hackTanks , hack ) ;
24950: LD_ADDR_VAR 0 4
24954: PUSH
24955: LD_EXP 131
24959: PPUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL 32535 0 2
24969: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24970: LD_EXP 132
24974: PUSH
24975: LD_VAR 0 4
24979: ARRAY
24980: IFFALSE 25061
// begin for i in hackTanksCaptured [ index ] do
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_EXP 132
24991: PUSH
24992: LD_VAR 0 4
24996: ARRAY
24997: PUSH
24998: FOR_IN
24999: IFFALSE 25025
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25001: LD_VAR 0 3
25005: PUSH
25006: LD_INT 1
25008: ARRAY
25009: PPUSH
25010: LD_VAR 0 3
25014: PUSH
25015: LD_INT 2
25017: ARRAY
25018: PPUSH
25019: CALL_OW 235
25023: GO 24998
25025: POP
25026: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25027: LD_ADDR_EXP 132
25031: PUSH
25032: LD_EXP 132
25036: PPUSH
25037: LD_VAR 0 4
25041: PPUSH
25042: EMPTY
25043: PPUSH
25044: CALL_OW 1
25048: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25049: LD_VAR 0 1
25053: PPUSH
25054: LD_INT 0
25056: PPUSH
25057: CALL_OW 505
// end ; end ;
25061: LD_VAR 0 2
25065: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25066: LD_INT 0
25068: PPUSH
25069: PPUSH
25070: PPUSH
// if not hack in hackTanks or not vehicles then
25071: LD_VAR 0 1
25075: PUSH
25076: LD_EXP 131
25080: IN
25081: NOT
25082: PUSH
25083: LD_VAR 0 2
25087: NOT
25088: OR
25089: IFFALSE 25093
// exit ;
25091: GO 25368
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25093: LD_ADDR_VAR 0 2
25097: PUSH
25098: LD_VAR 0 1
25102: PPUSH
25103: LD_VAR 0 2
25107: PPUSH
25108: LD_INT 1
25110: PPUSH
25111: LD_INT 1
25113: PPUSH
25114: CALL 33185 0 4
25118: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25119: LD_ADDR_VAR 0 5
25123: PUSH
25124: LD_EXP 131
25128: PPUSH
25129: LD_VAR 0 1
25133: PPUSH
25134: CALL 32535 0 2
25138: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25139: LD_EXP 132
25143: PUSH
25144: LD_VAR 0 5
25148: ARRAY
25149: PUSH
25150: LD_EXP 133
25154: LESS
25155: IFFALSE 25344
// begin for i := 1 to vehicles do
25157: LD_ADDR_VAR 0 4
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_VAR 0 2
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25342
// begin if hackTanksCaptured [ index ] = hackLimit then
25175: LD_EXP 132
25179: PUSH
25180: LD_VAR 0 5
25184: ARRAY
25185: PUSH
25186: LD_EXP 133
25190: EQUAL
25191: IFFALSE 25195
// break ;
25193: GO 25342
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25195: LD_ADDR_EXP 135
25199: PUSH
25200: LD_EXP 135
25204: PPUSH
25205: LD_VAR 0 5
25209: PPUSH
25210: LD_EXP 135
25214: PUSH
25215: LD_VAR 0 5
25219: ARRAY
25220: PUSH
25221: LD_INT 1
25223: PLUS
25224: PPUSH
25225: CALL_OW 1
25229: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25230: LD_ADDR_EXP 132
25234: PUSH
25235: LD_EXP 132
25239: PPUSH
25240: LD_VAR 0 5
25244: PUSH
25245: LD_EXP 132
25249: PUSH
25250: LD_VAR 0 5
25254: ARRAY
25255: PUSH
25256: LD_INT 1
25258: PLUS
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PPUSH
25264: LD_VAR 0 2
25268: PUSH
25269: LD_VAR 0 4
25273: ARRAY
25274: PUSH
25275: LD_VAR 0 2
25279: PUSH
25280: LD_VAR 0 4
25284: ARRAY
25285: PPUSH
25286: CALL_OW 255
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PPUSH
25295: CALL 32750 0 3
25299: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25300: LD_VAR 0 2
25304: PUSH
25305: LD_VAR 0 4
25309: ARRAY
25310: PPUSH
25311: LD_VAR 0 1
25315: PPUSH
25316: CALL_OW 255
25320: PPUSH
25321: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25325: LD_VAR 0 2
25329: PUSH
25330: LD_VAR 0 4
25334: ARRAY
25335: PPUSH
25336: CALL_OW 141
// end ;
25340: GO 25172
25342: POP
25343: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25344: LD_VAR 0 1
25348: PPUSH
25349: LD_EXP 132
25353: PUSH
25354: LD_VAR 0 5
25358: ARRAY
25359: PUSH
25360: LD_INT 0
25362: PLUS
25363: PPUSH
25364: CALL_OW 505
// end ;
25368: LD_VAR 0 3
25372: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
// if not hack in hackTanks then
25379: LD_VAR 0 1
25383: PUSH
25384: LD_EXP 131
25388: IN
25389: NOT
25390: IFFALSE 25394
// exit ;
25392: GO 25634
// index := GetElementIndex ( hackTanks , hack ) ;
25394: LD_ADDR_VAR 0 4
25398: PUSH
25399: LD_EXP 131
25403: PPUSH
25404: LD_VAR 0 1
25408: PPUSH
25409: CALL 32535 0 2
25413: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: DOUBLE
25420: LD_EXP 132
25424: PUSH
25425: LD_VAR 0 4
25429: ARRAY
25430: INC
25431: ST_TO_ADDR
25432: LD_INT 1
25434: PUSH
25435: FOR_DOWNTO
25436: IFFALSE 25608
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25438: LD_ADDR_VAR 0 5
25442: PUSH
25443: LD_EXP 132
25447: PUSH
25448: LD_VAR 0 4
25452: ARRAY
25453: PUSH
25454: LD_VAR 0 3
25458: ARRAY
25459: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25460: LD_VAR 0 5
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PPUSH
25469: CALL_OW 302
25473: NOT
25474: PUSH
25475: LD_VAR 0 5
25479: PUSH
25480: LD_INT 1
25482: ARRAY
25483: PPUSH
25484: CALL_OW 255
25488: PUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 255
25498: NONEQUAL
25499: OR
25500: IFFALSE 25606
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25502: LD_VAR 0 5
25506: PUSH
25507: LD_INT 1
25509: ARRAY
25510: PPUSH
25511: CALL_OW 305
25515: PUSH
25516: LD_VAR 0 5
25520: PUSH
25521: LD_INT 1
25523: ARRAY
25524: PPUSH
25525: CALL_OW 255
25529: PUSH
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 255
25539: EQUAL
25540: AND
25541: IFFALSE 25565
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25543: LD_VAR 0 5
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: LD_VAR 0 5
25556: PUSH
25557: LD_INT 2
25559: ARRAY
25560: PPUSH
25561: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25565: LD_ADDR_EXP 132
25569: PUSH
25570: LD_EXP 132
25574: PPUSH
25575: LD_VAR 0 4
25579: PPUSH
25580: LD_EXP 132
25584: PUSH
25585: LD_VAR 0 4
25589: ARRAY
25590: PPUSH
25591: LD_VAR 0 3
25595: PPUSH
25596: CALL_OW 3
25600: PPUSH
25601: CALL_OW 1
25605: ST_TO_ADDR
// end ; end ;
25606: GO 25435
25608: POP
25609: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25610: LD_VAR 0 1
25614: PPUSH
25615: LD_EXP 132
25619: PUSH
25620: LD_VAR 0 4
25624: ARRAY
25625: PUSH
25626: LD_INT 0
25628: PLUS
25629: PPUSH
25630: CALL_OW 505
// end ;
25634: LD_VAR 0 2
25638: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
25643: PPUSH
25644: PPUSH
// if not hack in hackTanks then
25645: LD_VAR 0 1
25649: PUSH
25650: LD_EXP 131
25654: IN
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 25745
// index := GetElementIndex ( hackTanks , hack ) ;
25660: LD_ADDR_VAR 0 5
25664: PUSH
25665: LD_EXP 131
25669: PPUSH
25670: LD_VAR 0 1
25674: PPUSH
25675: CALL 32535 0 2
25679: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25680: LD_ADDR_VAR 0 4
25684: PUSH
25685: DOUBLE
25686: LD_INT 1
25688: DEC
25689: ST_TO_ADDR
25690: LD_EXP 132
25694: PUSH
25695: LD_VAR 0 5
25699: ARRAY
25700: PUSH
25701: FOR_TO
25702: IFFALSE 25743
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25704: LD_EXP 132
25708: PUSH
25709: LD_VAR 0 5
25713: ARRAY
25714: PUSH
25715: LD_VAR 0 4
25719: ARRAY
25720: PUSH
25721: LD_INT 1
25723: ARRAY
25724: PUSH
25725: LD_VAR 0 2
25729: EQUAL
25730: IFFALSE 25741
// KillUnit ( vehicle ) ;
25732: LD_VAR 0 2
25736: PPUSH
25737: CALL_OW 66
25741: GO 25701
25743: POP
25744: POP
// end ;
25745: LD_VAR 0 3
25749: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25750: LD_EXP 136
25754: NOT
25755: IFFALSE 25790
25757: GO 25759
25759: DISABLE
// begin initMiner := true ;
25760: LD_ADDR_EXP 136
25764: PUSH
25765: LD_INT 1
25767: ST_TO_ADDR
// minersList := [ ] ;
25768: LD_ADDR_EXP 137
25772: PUSH
25773: EMPTY
25774: ST_TO_ADDR
// minerMinesList := [ ] ;
25775: LD_ADDR_EXP 138
25779: PUSH
25780: EMPTY
25781: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25782: LD_ADDR_EXP 139
25786: PUSH
25787: LD_INT 5
25789: ST_TO_ADDR
// end ;
25790: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25791: LD_EXP 136
25795: PUSH
25796: LD_INT 34
25798: PUSH
25799: LD_EXP 59
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PPUSH
25808: CALL_OW 69
25812: AND
25813: IFFALSE 26276
25815: GO 25817
25817: DISABLE
25818: LD_INT 0
25820: PPUSH
25821: PPUSH
25822: PPUSH
25823: PPUSH
// begin enable ;
25824: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25825: LD_ADDR_VAR 0 1
25829: PUSH
25830: LD_INT 34
25832: PUSH
25833: LD_EXP 59
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PPUSH
25842: CALL_OW 69
25846: PUSH
25847: FOR_IN
25848: IFFALSE 25920
// begin if not i in minersList then
25850: LD_VAR 0 1
25854: PUSH
25855: LD_EXP 137
25859: IN
25860: NOT
25861: IFFALSE 25918
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25863: LD_ADDR_EXP 137
25867: PUSH
25868: LD_EXP 137
25872: PPUSH
25873: LD_EXP 137
25877: PUSH
25878: LD_INT 1
25880: PLUS
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: CALL_OW 1
25891: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25892: LD_ADDR_EXP 138
25896: PUSH
25897: LD_EXP 138
25901: PPUSH
25902: LD_EXP 138
25906: PUSH
25907: LD_INT 1
25909: PLUS
25910: PPUSH
25911: EMPTY
25912: PPUSH
25913: CALL_OW 1
25917: ST_TO_ADDR
// end end ;
25918: GO 25847
25920: POP
25921: POP
// for i := minerMinesList downto 1 do
25922: LD_ADDR_VAR 0 1
25926: PUSH
25927: DOUBLE
25928: LD_EXP 138
25932: INC
25933: ST_TO_ADDR
25934: LD_INT 1
25936: PUSH
25937: FOR_DOWNTO
25938: IFFALSE 26274
// begin if IsLive ( minersList [ i ] ) then
25940: LD_EXP 137
25944: PUSH
25945: LD_VAR 0 1
25949: ARRAY
25950: PPUSH
25951: CALL_OW 300
25955: IFFALSE 25983
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25957: LD_EXP 137
25961: PUSH
25962: LD_VAR 0 1
25966: ARRAY
25967: PPUSH
25968: LD_EXP 138
25972: PUSH
25973: LD_VAR 0 1
25977: ARRAY
25978: PPUSH
25979: CALL_OW 505
// if not minerMinesList [ i ] then
25983: LD_EXP 138
25987: PUSH
25988: LD_VAR 0 1
25992: ARRAY
25993: NOT
25994: IFFALSE 25998
// continue ;
25996: GO 25937
// for j := minerMinesList [ i ] downto 1 do
25998: LD_ADDR_VAR 0 2
26002: PUSH
26003: DOUBLE
26004: LD_EXP 138
26008: PUSH
26009: LD_VAR 0 1
26013: ARRAY
26014: INC
26015: ST_TO_ADDR
26016: LD_INT 1
26018: PUSH
26019: FOR_DOWNTO
26020: IFFALSE 26270
// begin side := GetSide ( minersList [ i ] ) ;
26022: LD_ADDR_VAR 0 3
26026: PUSH
26027: LD_EXP 137
26031: PUSH
26032: LD_VAR 0 1
26036: ARRAY
26037: PPUSH
26038: CALL_OW 255
26042: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26043: LD_ADDR_VAR 0 4
26047: PUSH
26048: LD_EXP 138
26052: PUSH
26053: LD_VAR 0 1
26057: ARRAY
26058: PUSH
26059: LD_VAR 0 2
26063: ARRAY
26064: PUSH
26065: LD_INT 1
26067: ARRAY
26068: PPUSH
26069: LD_EXP 138
26073: PUSH
26074: LD_VAR 0 1
26078: ARRAY
26079: PUSH
26080: LD_VAR 0 2
26084: ARRAY
26085: PUSH
26086: LD_INT 2
26088: ARRAY
26089: PPUSH
26090: CALL_OW 428
26094: ST_TO_ADDR
// if not tmp then
26095: LD_VAR 0 4
26099: NOT
26100: IFFALSE 26104
// continue ;
26102: GO 26019
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26104: LD_VAR 0 4
26108: PUSH
26109: LD_INT 81
26111: PUSH
26112: LD_VAR 0 3
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PPUSH
26121: CALL_OW 69
26125: IN
26126: PUSH
26127: LD_EXP 138
26131: PUSH
26132: LD_VAR 0 1
26136: ARRAY
26137: PUSH
26138: LD_VAR 0 2
26142: ARRAY
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: PPUSH
26148: LD_EXP 138
26152: PUSH
26153: LD_VAR 0 1
26157: ARRAY
26158: PUSH
26159: LD_VAR 0 2
26163: ARRAY
26164: PUSH
26165: LD_INT 2
26167: ARRAY
26168: PPUSH
26169: CALL_OW 458
26173: AND
26174: IFFALSE 26268
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26176: LD_EXP 138
26180: PUSH
26181: LD_VAR 0 1
26185: ARRAY
26186: PUSH
26187: LD_VAR 0 2
26191: ARRAY
26192: PUSH
26193: LD_INT 1
26195: ARRAY
26196: PPUSH
26197: LD_EXP 138
26201: PUSH
26202: LD_VAR 0 1
26206: ARRAY
26207: PUSH
26208: LD_VAR 0 2
26212: ARRAY
26213: PUSH
26214: LD_INT 2
26216: ARRAY
26217: PPUSH
26218: LD_VAR 0 3
26222: PPUSH
26223: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26227: LD_ADDR_EXP 138
26231: PUSH
26232: LD_EXP 138
26236: PPUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: LD_EXP 138
26246: PUSH
26247: LD_VAR 0 1
26251: ARRAY
26252: PPUSH
26253: LD_VAR 0 2
26257: PPUSH
26258: CALL_OW 3
26262: PPUSH
26263: CALL_OW 1
26267: ST_TO_ADDR
// end ; end ;
26268: GO 26019
26270: POP
26271: POP
// end ;
26272: GO 25937
26274: POP
26275: POP
// end ;
26276: PPOPN 4
26278: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26279: LD_INT 0
26281: PPUSH
26282: PPUSH
// result := false ;
26283: LD_ADDR_VAR 0 4
26287: PUSH
26288: LD_INT 0
26290: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 264
26300: PUSH
26301: LD_EXP 59
26305: EQUAL
26306: NOT
26307: IFFALSE 26311
// exit ;
26309: GO 26551
// index := GetElementIndex ( minersList , unit ) ;
26311: LD_ADDR_VAR 0 5
26315: PUSH
26316: LD_EXP 137
26320: PPUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL 32535 0 2
26330: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26331: LD_EXP 138
26335: PUSH
26336: LD_VAR 0 5
26340: ARRAY
26341: PUSH
26342: LD_EXP 139
26346: GREATEREQUAL
26347: IFFALSE 26351
// exit ;
26349: GO 26551
// ComMoveXY ( unit , x , y ) ;
26351: LD_VAR 0 1
26355: PPUSH
26356: LD_VAR 0 2
26360: PPUSH
26361: LD_VAR 0 3
26365: PPUSH
26366: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26370: LD_INT 35
26372: PPUSH
26373: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26377: LD_VAR 0 1
26381: PPUSH
26382: LD_VAR 0 2
26386: PPUSH
26387: LD_VAR 0 3
26391: PPUSH
26392: CALL 63254 0 3
26396: NOT
26397: PUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 314
26407: AND
26408: IFFALSE 26412
// exit ;
26410: GO 26551
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26412: LD_VAR 0 2
26416: PPUSH
26417: LD_VAR 0 3
26421: PPUSH
26422: CALL_OW 428
26426: PUSH
26427: LD_VAR 0 1
26431: EQUAL
26432: PUSH
26433: LD_VAR 0 1
26437: PPUSH
26438: CALL_OW 314
26442: NOT
26443: AND
26444: IFFALSE 26370
// PlaySoundXY ( x , y , PlantMine ) ;
26446: LD_VAR 0 2
26450: PPUSH
26451: LD_VAR 0 3
26455: PPUSH
26456: LD_STRING PlantMine
26458: PPUSH
26459: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_VAR 0 3
26472: PPUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 255
26482: PPUSH
26483: LD_INT 0
26485: PPUSH
26486: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26490: LD_ADDR_EXP 138
26494: PUSH
26495: LD_EXP 138
26499: PPUSH
26500: LD_VAR 0 5
26504: PUSH
26505: LD_EXP 138
26509: PUSH
26510: LD_VAR 0 5
26514: ARRAY
26515: PUSH
26516: LD_INT 1
26518: PLUS
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: LD_VAR 0 2
26528: PUSH
26529: LD_VAR 0 3
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PPUSH
26538: CALL 32750 0 3
26542: ST_TO_ADDR
// result := true ;
26543: LD_ADDR_VAR 0 4
26547: PUSH
26548: LD_INT 1
26550: ST_TO_ADDR
// end ;
26551: LD_VAR 0 4
26555: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26556: LD_INT 0
26558: PPUSH
26559: PPUSH
26560: PPUSH
// if not unit in minersList then
26561: LD_VAR 0 1
26565: PUSH
26566: LD_EXP 137
26570: IN
26571: NOT
26572: IFFALSE 26576
// exit ;
26574: GO 26968
// index := GetElementIndex ( minersList , unit ) ;
26576: LD_ADDR_VAR 0 6
26580: PUSH
26581: LD_EXP 137
26585: PPUSH
26586: LD_VAR 0 1
26590: PPUSH
26591: CALL 32535 0 2
26595: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26596: LD_ADDR_VAR 0 5
26600: PUSH
26601: DOUBLE
26602: LD_EXP 138
26606: PUSH
26607: LD_VAR 0 6
26611: ARRAY
26612: INC
26613: ST_TO_ADDR
26614: LD_INT 1
26616: PUSH
26617: FOR_DOWNTO
26618: IFFALSE 26779
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26620: LD_EXP 138
26624: PUSH
26625: LD_VAR 0 6
26629: ARRAY
26630: PUSH
26631: LD_VAR 0 5
26635: ARRAY
26636: PUSH
26637: LD_INT 1
26639: ARRAY
26640: PUSH
26641: LD_VAR 0 2
26645: EQUAL
26646: PUSH
26647: LD_EXP 138
26651: PUSH
26652: LD_VAR 0 6
26656: ARRAY
26657: PUSH
26658: LD_VAR 0 5
26662: ARRAY
26663: PUSH
26664: LD_INT 2
26666: ARRAY
26667: PUSH
26668: LD_VAR 0 3
26672: EQUAL
26673: AND
26674: IFFALSE 26777
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26676: LD_EXP 138
26680: PUSH
26681: LD_VAR 0 6
26685: ARRAY
26686: PUSH
26687: LD_VAR 0 5
26691: ARRAY
26692: PUSH
26693: LD_INT 1
26695: ARRAY
26696: PPUSH
26697: LD_EXP 138
26701: PUSH
26702: LD_VAR 0 6
26706: ARRAY
26707: PUSH
26708: LD_VAR 0 5
26712: ARRAY
26713: PUSH
26714: LD_INT 2
26716: ARRAY
26717: PPUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL_OW 255
26727: PPUSH
26728: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26732: LD_ADDR_EXP 138
26736: PUSH
26737: LD_EXP 138
26741: PPUSH
26742: LD_VAR 0 6
26746: PPUSH
26747: LD_EXP 138
26751: PUSH
26752: LD_VAR 0 6
26756: ARRAY
26757: PPUSH
26758: LD_VAR 0 5
26762: PPUSH
26763: CALL_OW 3
26767: PPUSH
26768: CALL_OW 1
26772: ST_TO_ADDR
// exit ;
26773: POP
26774: POP
26775: GO 26968
// end ; end ;
26777: GO 26617
26779: POP
26780: POP
// for i := minerMinesList [ index ] downto 1 do
26781: LD_ADDR_VAR 0 5
26785: PUSH
26786: DOUBLE
26787: LD_EXP 138
26791: PUSH
26792: LD_VAR 0 6
26796: ARRAY
26797: INC
26798: ST_TO_ADDR
26799: LD_INT 1
26801: PUSH
26802: FOR_DOWNTO
26803: IFFALSE 26966
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26805: LD_EXP 138
26809: PUSH
26810: LD_VAR 0 6
26814: ARRAY
26815: PUSH
26816: LD_VAR 0 5
26820: ARRAY
26821: PUSH
26822: LD_INT 1
26824: ARRAY
26825: PPUSH
26826: LD_EXP 138
26830: PUSH
26831: LD_VAR 0 6
26835: ARRAY
26836: PUSH
26837: LD_VAR 0 5
26841: ARRAY
26842: PUSH
26843: LD_INT 2
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 2
26851: PPUSH
26852: LD_VAR 0 3
26856: PPUSH
26857: CALL_OW 298
26861: PUSH
26862: LD_INT 6
26864: LESS
26865: IFFALSE 26964
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26867: LD_EXP 138
26871: PUSH
26872: LD_VAR 0 6
26876: ARRAY
26877: PUSH
26878: LD_VAR 0 5
26882: ARRAY
26883: PUSH
26884: LD_INT 1
26886: ARRAY
26887: PPUSH
26888: LD_EXP 138
26892: PUSH
26893: LD_VAR 0 6
26897: ARRAY
26898: PUSH
26899: LD_VAR 0 5
26903: ARRAY
26904: PUSH
26905: LD_INT 2
26907: ARRAY
26908: PPUSH
26909: LD_VAR 0 1
26913: PPUSH
26914: CALL_OW 255
26918: PPUSH
26919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26923: LD_ADDR_EXP 138
26927: PUSH
26928: LD_EXP 138
26932: PPUSH
26933: LD_VAR 0 6
26937: PPUSH
26938: LD_EXP 138
26942: PUSH
26943: LD_VAR 0 6
26947: ARRAY
26948: PPUSH
26949: LD_VAR 0 5
26953: PPUSH
26954: CALL_OW 3
26958: PPUSH
26959: CALL_OW 1
26963: ST_TO_ADDR
// end ; end ;
26964: GO 26802
26966: POP
26967: POP
// end ;
26968: LD_VAR 0 4
26972: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26973: LD_INT 0
26975: PPUSH
26976: PPUSH
26977: PPUSH
26978: PPUSH
26979: PPUSH
26980: PPUSH
26981: PPUSH
26982: PPUSH
26983: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 264
26993: PUSH
26994: LD_EXP 59
26998: EQUAL
26999: NOT
27000: PUSH
27001: LD_VAR 0 1
27005: PUSH
27006: LD_EXP 137
27010: IN
27011: NOT
27012: OR
27013: IFFALSE 27017
// exit ;
27015: GO 27339
// index := GetElementIndex ( minersList , unit ) ;
27017: LD_ADDR_VAR 0 6
27021: PUSH
27022: LD_EXP 137
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL 32535 0 2
27036: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27037: LD_ADDR_VAR 0 8
27041: PUSH
27042: LD_EXP 139
27046: PUSH
27047: LD_EXP 138
27051: PUSH
27052: LD_VAR 0 6
27056: ARRAY
27057: MINUS
27058: ST_TO_ADDR
// if not minesFreeAmount then
27059: LD_VAR 0 8
27063: NOT
27064: IFFALSE 27068
// exit ;
27066: GO 27339
// tmp := [ ] ;
27068: LD_ADDR_VAR 0 7
27072: PUSH
27073: EMPTY
27074: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27075: LD_ADDR_VAR 0 5
27079: PUSH
27080: DOUBLE
27081: LD_INT 1
27083: DEC
27084: ST_TO_ADDR
27085: LD_VAR 0 8
27089: PUSH
27090: FOR_TO
27091: IFFALSE 27286
// begin _d := rand ( 0 , 5 ) ;
27093: LD_ADDR_VAR 0 11
27097: PUSH
27098: LD_INT 0
27100: PPUSH
27101: LD_INT 5
27103: PPUSH
27104: CALL_OW 12
27108: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27109: LD_ADDR_VAR 0 12
27113: PUSH
27114: LD_INT 2
27116: PPUSH
27117: LD_INT 6
27119: PPUSH
27120: CALL_OW 12
27124: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27125: LD_ADDR_VAR 0 9
27129: PUSH
27130: LD_VAR 0 2
27134: PPUSH
27135: LD_VAR 0 11
27139: PPUSH
27140: LD_VAR 0 12
27144: PPUSH
27145: CALL_OW 272
27149: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27150: LD_ADDR_VAR 0 10
27154: PUSH
27155: LD_VAR 0 3
27159: PPUSH
27160: LD_VAR 0 11
27164: PPUSH
27165: LD_VAR 0 12
27169: PPUSH
27170: CALL_OW 273
27174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27175: LD_VAR 0 9
27179: PPUSH
27180: LD_VAR 0 10
27184: PPUSH
27185: CALL_OW 488
27189: PUSH
27190: LD_VAR 0 9
27194: PUSH
27195: LD_VAR 0 10
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_VAR 0 7
27208: IN
27209: NOT
27210: AND
27211: PUSH
27212: LD_VAR 0 9
27216: PPUSH
27217: LD_VAR 0 10
27221: PPUSH
27222: CALL_OW 458
27226: NOT
27227: AND
27228: IFFALSE 27270
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27230: LD_ADDR_VAR 0 7
27234: PUSH
27235: LD_VAR 0 7
27239: PPUSH
27240: LD_VAR 0 7
27244: PUSH
27245: LD_INT 1
27247: PLUS
27248: PPUSH
27249: LD_VAR 0 9
27253: PUSH
27254: LD_VAR 0 10
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PPUSH
27263: CALL_OW 1
27267: ST_TO_ADDR
27268: GO 27284
// i := i - 1 ;
27270: LD_ADDR_VAR 0 5
27274: PUSH
27275: LD_VAR 0 5
27279: PUSH
27280: LD_INT 1
27282: MINUS
27283: ST_TO_ADDR
// end ;
27284: GO 27090
27286: POP
27287: POP
// for i in tmp do
27288: LD_ADDR_VAR 0 5
27292: PUSH
27293: LD_VAR 0 7
27297: PUSH
27298: FOR_IN
27299: IFFALSE 27337
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27301: LD_VAR 0 1
27305: PPUSH
27306: LD_VAR 0 5
27310: PUSH
27311: LD_INT 1
27313: ARRAY
27314: PPUSH
27315: LD_VAR 0 5
27319: PUSH
27320: LD_INT 2
27322: ARRAY
27323: PPUSH
27324: CALL 26279 0 3
27328: NOT
27329: IFFALSE 27335
// exit ;
27331: POP
27332: POP
27333: GO 27339
27335: GO 27298
27337: POP
27338: POP
// end ;
27339: LD_VAR 0 4
27343: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27344: LD_INT 0
27346: PPUSH
27347: PPUSH
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
// if not GetClass ( unit ) = class_sniper then
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 257
27362: PUSH
27363: LD_INT 5
27365: EQUAL
27366: NOT
27367: IFFALSE 27371
// exit ;
27369: GO 27759
// dist := 8 ;
27371: LD_ADDR_VAR 0 5
27375: PUSH
27376: LD_INT 8
27378: ST_TO_ADDR
// viewRange := 12 ;
27379: LD_ADDR_VAR 0 7
27383: PUSH
27384: LD_INT 12
27386: ST_TO_ADDR
// side := GetSide ( unit ) ;
27387: LD_ADDR_VAR 0 6
27391: PUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: CALL_OW 255
27401: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27402: LD_INT 61
27404: PPUSH
27405: LD_VAR 0 6
27409: PPUSH
27410: CALL_OW 321
27414: PUSH
27415: LD_INT 2
27417: EQUAL
27418: IFFALSE 27428
// viewRange := 16 ;
27420: LD_ADDR_VAR 0 7
27424: PUSH
27425: LD_INT 16
27427: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27428: LD_VAR 0 1
27432: PPUSH
27433: LD_VAR 0 2
27437: PPUSH
27438: LD_VAR 0 3
27442: PPUSH
27443: CALL_OW 297
27447: PUSH
27448: LD_VAR 0 5
27452: GREATER
27453: IFFALSE 27532
// begin ComMoveXY ( unit , x , y ) ;
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 2
27464: PPUSH
27465: LD_VAR 0 3
27469: PPUSH
27470: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27474: LD_INT 35
27476: PPUSH
27477: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27481: LD_VAR 0 1
27485: PPUSH
27486: LD_VAR 0 2
27490: PPUSH
27491: LD_VAR 0 3
27495: PPUSH
27496: CALL 63254 0 3
27500: NOT
27501: IFFALSE 27505
// exit ;
27503: GO 27759
// until GetDistUnitXY ( unit , x , y ) < dist ;
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_VAR 0 2
27514: PPUSH
27515: LD_VAR 0 3
27519: PPUSH
27520: CALL_OW 297
27524: PUSH
27525: LD_VAR 0 5
27529: LESS
27530: IFFALSE 27474
// end ; ComTurnXY ( unit , x , y ) ;
27532: LD_VAR 0 1
27536: PPUSH
27537: LD_VAR 0 2
27541: PPUSH
27542: LD_VAR 0 3
27546: PPUSH
27547: CALL_OW 118
// wait ( 5 ) ;
27551: LD_INT 5
27553: PPUSH
27554: CALL_OW 67
// _d := GetDir ( unit ) ;
27558: LD_ADDR_VAR 0 10
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL_OW 254
27572: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27573: LD_ADDR_VAR 0 8
27577: PUSH
27578: LD_VAR 0 1
27582: PPUSH
27583: CALL_OW 250
27587: PPUSH
27588: LD_VAR 0 10
27592: PPUSH
27593: LD_VAR 0 5
27597: PPUSH
27598: CALL_OW 272
27602: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27603: LD_ADDR_VAR 0 9
27607: PUSH
27608: LD_VAR 0 1
27612: PPUSH
27613: CALL_OW 251
27617: PPUSH
27618: LD_VAR 0 10
27622: PPUSH
27623: LD_VAR 0 5
27627: PPUSH
27628: CALL_OW 273
27632: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27633: LD_VAR 0 8
27637: PPUSH
27638: LD_VAR 0 9
27642: PPUSH
27643: CALL_OW 488
27647: NOT
27648: IFFALSE 27652
// exit ;
27650: GO 27759
// ComAnimCustom ( unit , 1 ) ;
27652: LD_VAR 0 1
27656: PPUSH
27657: LD_INT 1
27659: PPUSH
27660: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27664: LD_VAR 0 8
27668: PPUSH
27669: LD_VAR 0 9
27673: PPUSH
27674: LD_VAR 0 6
27678: PPUSH
27679: LD_VAR 0 7
27683: PPUSH
27684: CALL_OW 330
// repeat wait ( 1 ) ;
27688: LD_INT 1
27690: PPUSH
27691: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27695: LD_VAR 0 1
27699: PPUSH
27700: CALL_OW 316
27704: PUSH
27705: LD_VAR 0 1
27709: PPUSH
27710: CALL_OW 314
27714: OR
27715: PUSH
27716: LD_VAR 0 1
27720: PPUSH
27721: CALL_OW 302
27725: NOT
27726: OR
27727: PUSH
27728: LD_VAR 0 1
27732: PPUSH
27733: CALL_OW 301
27737: OR
27738: IFFALSE 27688
// RemoveSeeing ( _x , _y , side ) ;
27740: LD_VAR 0 8
27744: PPUSH
27745: LD_VAR 0 9
27749: PPUSH
27750: LD_VAR 0 6
27754: PPUSH
27755: CALL_OW 331
// end ; end_of_file
27759: LD_VAR 0 4
27763: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27764: LD_INT 0
27766: PPUSH
27767: PPUSH
// if exist_mode then
27768: LD_VAR 0 2
27772: IFFALSE 27797
// unit := CreateCharacter ( prefix & ident ) else
27774: LD_ADDR_VAR 0 5
27778: PUSH
27779: LD_VAR 0 3
27783: PUSH
27784: LD_VAR 0 1
27788: STR
27789: PPUSH
27790: CALL_OW 34
27794: ST_TO_ADDR
27795: GO 27812
// unit := NewCharacter ( ident ) ;
27797: LD_ADDR_VAR 0 5
27801: PUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL_OW 25
27811: ST_TO_ADDR
// result := unit ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_VAR 0 5
27821: ST_TO_ADDR
// end ;
27822: LD_VAR 0 4
27826: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27827: LD_INT 0
27829: PPUSH
27830: PPUSH
// if not side or not nation then
27831: LD_VAR 0 1
27835: NOT
27836: PUSH
27837: LD_VAR 0 2
27841: NOT
27842: OR
27843: IFFALSE 27847
// exit ;
27845: GO 28615
// case nation of nation_american :
27847: LD_VAR 0 2
27851: PUSH
27852: LD_INT 1
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 28074
27860: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27861: LD_ADDR_VAR 0 4
27865: PUSH
27866: LD_INT 35
27868: PUSH
27869: LD_INT 45
27871: PUSH
27872: LD_INT 46
27874: PUSH
27875: LD_INT 47
27877: PUSH
27878: LD_INT 82
27880: PUSH
27881: LD_INT 83
27883: PUSH
27884: LD_INT 84
27886: PUSH
27887: LD_INT 85
27889: PUSH
27890: LD_INT 86
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: LD_INT 6
27901: PUSH
27902: LD_INT 15
27904: PUSH
27905: LD_INT 16
27907: PUSH
27908: LD_INT 7
27910: PUSH
27911: LD_INT 12
27913: PUSH
27914: LD_INT 13
27916: PUSH
27917: LD_INT 10
27919: PUSH
27920: LD_INT 14
27922: PUSH
27923: LD_INT 20
27925: PUSH
27926: LD_INT 21
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 25
27934: PUSH
27935: LD_INT 32
27937: PUSH
27938: LD_INT 27
27940: PUSH
27941: LD_INT 36
27943: PUSH
27944: LD_INT 69
27946: PUSH
27947: LD_INT 39
27949: PUSH
27950: LD_INT 34
27952: PUSH
27953: LD_INT 40
27955: PUSH
27956: LD_INT 48
27958: PUSH
27959: LD_INT 49
27961: PUSH
27962: LD_INT 50
27964: PUSH
27965: LD_INT 51
27967: PUSH
27968: LD_INT 52
27970: PUSH
27971: LD_INT 53
27973: PUSH
27974: LD_INT 54
27976: PUSH
27977: LD_INT 55
27979: PUSH
27980: LD_INT 56
27982: PUSH
27983: LD_INT 57
27985: PUSH
27986: LD_INT 58
27988: PUSH
27989: LD_INT 59
27991: PUSH
27992: LD_INT 60
27994: PUSH
27995: LD_INT 61
27997: PUSH
27998: LD_INT 62
28000: PUSH
28001: LD_INT 80
28003: PUSH
28004: LD_INT 82
28006: PUSH
28007: LD_INT 83
28009: PUSH
28010: LD_INT 84
28012: PUSH
28013: LD_INT 85
28015: PUSH
28016: LD_INT 86
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: ST_TO_ADDR
28072: GO 28539
28074: LD_INT 2
28076: DOUBLE
28077: EQUAL
28078: IFTRUE 28082
28080: GO 28308
28082: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28083: LD_ADDR_VAR 0 4
28087: PUSH
28088: LD_INT 35
28090: PUSH
28091: LD_INT 45
28093: PUSH
28094: LD_INT 46
28096: PUSH
28097: LD_INT 47
28099: PUSH
28100: LD_INT 82
28102: PUSH
28103: LD_INT 83
28105: PUSH
28106: LD_INT 84
28108: PUSH
28109: LD_INT 85
28111: PUSH
28112: LD_INT 87
28114: PUSH
28115: LD_INT 70
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 11
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: LD_INT 4
28129: PUSH
28130: LD_INT 5
28132: PUSH
28133: LD_INT 6
28135: PUSH
28136: LD_INT 15
28138: PUSH
28139: LD_INT 18
28141: PUSH
28142: LD_INT 7
28144: PUSH
28145: LD_INT 17
28147: PUSH
28148: LD_INT 8
28150: PUSH
28151: LD_INT 20
28153: PUSH
28154: LD_INT 21
28156: PUSH
28157: LD_INT 22
28159: PUSH
28160: LD_INT 72
28162: PUSH
28163: LD_INT 26
28165: PUSH
28166: LD_INT 69
28168: PUSH
28169: LD_INT 39
28171: PUSH
28172: LD_INT 40
28174: PUSH
28175: LD_INT 41
28177: PUSH
28178: LD_INT 42
28180: PUSH
28181: LD_INT 43
28183: PUSH
28184: LD_INT 48
28186: PUSH
28187: LD_INT 49
28189: PUSH
28190: LD_INT 50
28192: PUSH
28193: LD_INT 51
28195: PUSH
28196: LD_INT 52
28198: PUSH
28199: LD_INT 53
28201: PUSH
28202: LD_INT 54
28204: PUSH
28205: LD_INT 55
28207: PUSH
28208: LD_INT 56
28210: PUSH
28211: LD_INT 60
28213: PUSH
28214: LD_INT 61
28216: PUSH
28217: LD_INT 62
28219: PUSH
28220: LD_INT 66
28222: PUSH
28223: LD_INT 67
28225: PUSH
28226: LD_INT 68
28228: PUSH
28229: LD_INT 81
28231: PUSH
28232: LD_INT 82
28234: PUSH
28235: LD_INT 83
28237: PUSH
28238: LD_INT 84
28240: PUSH
28241: LD_INT 85
28243: PUSH
28244: LD_INT 87
28246: PUSH
28247: LD_INT 88
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: ST_TO_ADDR
28306: GO 28539
28308: LD_INT 3
28310: DOUBLE
28311: EQUAL
28312: IFTRUE 28316
28314: GO 28538
28316: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28317: LD_ADDR_VAR 0 4
28321: PUSH
28322: LD_INT 46
28324: PUSH
28325: LD_INT 47
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: LD_INT 82
28336: PUSH
28337: LD_INT 83
28339: PUSH
28340: LD_INT 84
28342: PUSH
28343: LD_INT 85
28345: PUSH
28346: LD_INT 86
28348: PUSH
28349: LD_INT 11
28351: PUSH
28352: LD_INT 9
28354: PUSH
28355: LD_INT 20
28357: PUSH
28358: LD_INT 19
28360: PUSH
28361: LD_INT 21
28363: PUSH
28364: LD_INT 24
28366: PUSH
28367: LD_INT 22
28369: PUSH
28370: LD_INT 25
28372: PUSH
28373: LD_INT 28
28375: PUSH
28376: LD_INT 29
28378: PUSH
28379: LD_INT 30
28381: PUSH
28382: LD_INT 31
28384: PUSH
28385: LD_INT 37
28387: PUSH
28388: LD_INT 38
28390: PUSH
28391: LD_INT 32
28393: PUSH
28394: LD_INT 27
28396: PUSH
28397: LD_INT 33
28399: PUSH
28400: LD_INT 69
28402: PUSH
28403: LD_INT 39
28405: PUSH
28406: LD_INT 34
28408: PUSH
28409: LD_INT 40
28411: PUSH
28412: LD_INT 71
28414: PUSH
28415: LD_INT 23
28417: PUSH
28418: LD_INT 44
28420: PUSH
28421: LD_INT 48
28423: PUSH
28424: LD_INT 49
28426: PUSH
28427: LD_INT 50
28429: PUSH
28430: LD_INT 51
28432: PUSH
28433: LD_INT 52
28435: PUSH
28436: LD_INT 53
28438: PUSH
28439: LD_INT 54
28441: PUSH
28442: LD_INT 55
28444: PUSH
28445: LD_INT 56
28447: PUSH
28448: LD_INT 57
28450: PUSH
28451: LD_INT 58
28453: PUSH
28454: LD_INT 59
28456: PUSH
28457: LD_INT 63
28459: PUSH
28460: LD_INT 64
28462: PUSH
28463: LD_INT 65
28465: PUSH
28466: LD_INT 82
28468: PUSH
28469: LD_INT 83
28471: PUSH
28472: LD_INT 84
28474: PUSH
28475: LD_INT 85
28477: PUSH
28478: LD_INT 86
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: ST_TO_ADDR
28536: GO 28539
28538: POP
// if state > - 1 and state < 3 then
28539: LD_VAR 0 3
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: GREATER
28548: PUSH
28549: LD_VAR 0 3
28553: PUSH
28554: LD_INT 3
28556: LESS
28557: AND
28558: IFFALSE 28615
// for i in result do
28560: LD_ADDR_VAR 0 5
28564: PUSH
28565: LD_VAR 0 4
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28613
// if GetTech ( i , side ) <> state then
28573: LD_VAR 0 5
28577: PPUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL_OW 321
28587: PUSH
28588: LD_VAR 0 3
28592: NONEQUAL
28593: IFFALSE 28611
// result := result diff i ;
28595: LD_ADDR_VAR 0 4
28599: PUSH
28600: LD_VAR 0 4
28604: PUSH
28605: LD_VAR 0 5
28609: DIFF
28610: ST_TO_ADDR
28611: GO 28570
28613: POP
28614: POP
// end ;
28615: LD_VAR 0 4
28619: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28620: LD_INT 0
28622: PPUSH
28623: PPUSH
28624: PPUSH
// result := true ;
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: LD_INT 1
28632: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28633: LD_ADDR_VAR 0 5
28637: PUSH
28638: LD_VAR 0 2
28642: PPUSH
28643: CALL_OW 480
28647: ST_TO_ADDR
// if not tmp then
28648: LD_VAR 0 5
28652: NOT
28653: IFFALSE 28657
// exit ;
28655: GO 28706
// for i in tmp do
28657: LD_ADDR_VAR 0 4
28661: PUSH
28662: LD_VAR 0 5
28666: PUSH
28667: FOR_IN
28668: IFFALSE 28704
// if GetTech ( i , side ) <> state_researched then
28670: LD_VAR 0 4
28674: PPUSH
28675: LD_VAR 0 1
28679: PPUSH
28680: CALL_OW 321
28684: PUSH
28685: LD_INT 2
28687: NONEQUAL
28688: IFFALSE 28702
// begin result := false ;
28690: LD_ADDR_VAR 0 3
28694: PUSH
28695: LD_INT 0
28697: ST_TO_ADDR
// exit ;
28698: POP
28699: POP
28700: GO 28706
// end ;
28702: GO 28667
28704: POP
28705: POP
// end ;
28706: LD_VAR 0 3
28710: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28711: LD_INT 0
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
28717: PPUSH
28718: PPUSH
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28726: LD_VAR 0 1
28730: NOT
28731: PUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL_OW 257
28741: PUSH
28742: LD_INT 9
28744: NONEQUAL
28745: OR
28746: IFFALSE 28750
// exit ;
28748: GO 29323
// side := GetSide ( unit ) ;
28750: LD_ADDR_VAR 0 9
28754: PUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 255
28764: ST_TO_ADDR
// tech_space := tech_spacanom ;
28765: LD_ADDR_VAR 0 12
28769: PUSH
28770: LD_INT 29
28772: ST_TO_ADDR
// tech_time := tech_taurad ;
28773: LD_ADDR_VAR 0 13
28777: PUSH
28778: LD_INT 28
28780: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28781: LD_ADDR_VAR 0 11
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 310
28795: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28796: LD_VAR 0 11
28800: PPUSH
28801: CALL_OW 247
28805: PUSH
28806: LD_INT 2
28808: EQUAL
28809: IFFALSE 28813
// exit ;
28811: GO 29323
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28813: LD_ADDR_VAR 0 8
28817: PUSH
28818: LD_INT 81
28820: PUSH
28821: LD_VAR 0 9
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 3
28832: PUSH
28833: LD_INT 21
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PPUSH
28851: CALL_OW 69
28855: ST_TO_ADDR
// if not tmp then
28856: LD_VAR 0 8
28860: NOT
28861: IFFALSE 28865
// exit ;
28863: GO 29323
// if in_unit then
28865: LD_VAR 0 11
28869: IFFALSE 28893
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28871: LD_ADDR_VAR 0 10
28875: PUSH
28876: LD_VAR 0 8
28880: PPUSH
28881: LD_VAR 0 11
28885: PPUSH
28886: CALL_OW 74
28890: ST_TO_ADDR
28891: GO 28913
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28893: LD_ADDR_VAR 0 10
28897: PUSH
28898: LD_VAR 0 8
28902: PPUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 74
28912: ST_TO_ADDR
// if not enemy then
28913: LD_VAR 0 10
28917: NOT
28918: IFFALSE 28922
// exit ;
28920: GO 29323
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28922: LD_VAR 0 11
28926: PUSH
28927: LD_VAR 0 11
28931: PPUSH
28932: LD_VAR 0 10
28936: PPUSH
28937: CALL_OW 296
28941: PUSH
28942: LD_INT 13
28944: GREATER
28945: AND
28946: PUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: LD_VAR 0 10
28956: PPUSH
28957: CALL_OW 296
28961: PUSH
28962: LD_INT 12
28964: GREATER
28965: OR
28966: IFFALSE 28970
// exit ;
28968: GO 29323
// missile := [ 1 ] ;
28970: LD_ADDR_VAR 0 14
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28981: LD_VAR 0 9
28985: PPUSH
28986: LD_VAR 0 12
28990: PPUSH
28991: CALL_OW 325
28995: IFFALSE 29024
// missile := Replace ( missile , missile + 1 , 2 ) ;
28997: LD_ADDR_VAR 0 14
29001: PUSH
29002: LD_VAR 0 14
29006: PPUSH
29007: LD_VAR 0 14
29011: PUSH
29012: LD_INT 1
29014: PLUS
29015: PPUSH
29016: LD_INT 2
29018: PPUSH
29019: CALL_OW 1
29023: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29024: LD_VAR 0 9
29028: PPUSH
29029: LD_VAR 0 13
29033: PPUSH
29034: CALL_OW 325
29038: PUSH
29039: LD_VAR 0 10
29043: PPUSH
29044: CALL_OW 255
29048: PPUSH
29049: LD_VAR 0 13
29053: PPUSH
29054: CALL_OW 325
29058: NOT
29059: AND
29060: IFFALSE 29089
// missile := Replace ( missile , missile + 1 , 3 ) ;
29062: LD_ADDR_VAR 0 14
29066: PUSH
29067: LD_VAR 0 14
29071: PPUSH
29072: LD_VAR 0 14
29076: PUSH
29077: LD_INT 1
29079: PLUS
29080: PPUSH
29081: LD_INT 3
29083: PPUSH
29084: CALL_OW 1
29088: ST_TO_ADDR
// if missile < 2 then
29089: LD_VAR 0 14
29093: PUSH
29094: LD_INT 2
29096: LESS
29097: IFFALSE 29101
// exit ;
29099: GO 29323
// x := GetX ( enemy ) ;
29101: LD_ADDR_VAR 0 4
29105: PUSH
29106: LD_VAR 0 10
29110: PPUSH
29111: CALL_OW 250
29115: ST_TO_ADDR
// y := GetY ( enemy ) ;
29116: LD_ADDR_VAR 0 5
29120: PUSH
29121: LD_VAR 0 10
29125: PPUSH
29126: CALL_OW 251
29130: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29131: LD_ADDR_VAR 0 6
29135: PUSH
29136: LD_VAR 0 4
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PPUSH
29145: LD_INT 1
29147: PPUSH
29148: CALL_OW 12
29152: PLUS
29153: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29154: LD_ADDR_VAR 0 7
29158: PUSH
29159: LD_VAR 0 5
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PPUSH
29168: LD_INT 1
29170: PPUSH
29171: CALL_OW 12
29175: PLUS
29176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29177: LD_VAR 0 6
29181: PPUSH
29182: LD_VAR 0 7
29186: PPUSH
29187: CALL_OW 488
29191: NOT
29192: IFFALSE 29214
// begin _x := x ;
29194: LD_ADDR_VAR 0 6
29198: PUSH
29199: LD_VAR 0 4
29203: ST_TO_ADDR
// _y := y ;
29204: LD_ADDR_VAR 0 7
29208: PUSH
29209: LD_VAR 0 5
29213: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29214: LD_ADDR_VAR 0 3
29218: PUSH
29219: LD_INT 1
29221: PPUSH
29222: LD_VAR 0 14
29226: PPUSH
29227: CALL_OW 12
29231: ST_TO_ADDR
// case i of 1 :
29232: LD_VAR 0 3
29236: PUSH
29237: LD_INT 1
29239: DOUBLE
29240: EQUAL
29241: IFTRUE 29245
29243: GO 29262
29245: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29246: LD_VAR 0 1
29250: PPUSH
29251: LD_VAR 0 10
29255: PPUSH
29256: CALL_OW 115
29260: GO 29323
29262: LD_INT 2
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29292
29270: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_VAR 0 6
29280: PPUSH
29281: LD_VAR 0 7
29285: PPUSH
29286: CALL_OW 153
29290: GO 29323
29292: LD_INT 3
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 29322
29300: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29301: LD_VAR 0 1
29305: PPUSH
29306: LD_VAR 0 6
29310: PPUSH
29311: LD_VAR 0 7
29315: PPUSH
29316: CALL_OW 154
29320: GO 29323
29322: POP
// end ;
29323: LD_VAR 0 2
29327: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
// if not unit or not building then
29336: LD_VAR 0 1
29340: NOT
29341: PUSH
29342: LD_VAR 0 2
29346: NOT
29347: OR
29348: IFFALSE 29352
// exit ;
29350: GO 29510
// x := GetX ( building ) ;
29352: LD_ADDR_VAR 0 5
29356: PUSH
29357: LD_VAR 0 2
29361: PPUSH
29362: CALL_OW 250
29366: ST_TO_ADDR
// y := GetY ( building ) ;
29367: LD_ADDR_VAR 0 6
29371: PUSH
29372: LD_VAR 0 2
29376: PPUSH
29377: CALL_OW 251
29381: ST_TO_ADDR
// for i = 0 to 5 do
29382: LD_ADDR_VAR 0 4
29386: PUSH
29387: DOUBLE
29388: LD_INT 0
29390: DEC
29391: ST_TO_ADDR
29392: LD_INT 5
29394: PUSH
29395: FOR_TO
29396: IFFALSE 29508
// begin _x := ShiftX ( x , i , 3 ) ;
29398: LD_ADDR_VAR 0 7
29402: PUSH
29403: LD_VAR 0 5
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: LD_INT 3
29415: PPUSH
29416: CALL_OW 272
29420: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29421: LD_ADDR_VAR 0 8
29425: PUSH
29426: LD_VAR 0 6
29430: PPUSH
29431: LD_VAR 0 4
29435: PPUSH
29436: LD_INT 3
29438: PPUSH
29439: CALL_OW 273
29443: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29444: LD_VAR 0 7
29448: PPUSH
29449: LD_VAR 0 8
29453: PPUSH
29454: CALL_OW 488
29458: NOT
29459: IFFALSE 29463
// continue ;
29461: GO 29395
// if HexInfo ( _x , _y ) = 0 then
29463: LD_VAR 0 7
29467: PPUSH
29468: LD_VAR 0 8
29472: PPUSH
29473: CALL_OW 428
29477: PUSH
29478: LD_INT 0
29480: EQUAL
29481: IFFALSE 29506
// begin ComMoveXY ( unit , _x , _y ) ;
29483: LD_VAR 0 1
29487: PPUSH
29488: LD_VAR 0 7
29492: PPUSH
29493: LD_VAR 0 8
29497: PPUSH
29498: CALL_OW 111
// exit ;
29502: POP
29503: POP
29504: GO 29510
// end ; end ;
29506: GO 29395
29508: POP
29509: POP
// end ;
29510: LD_VAR 0 3
29514: RET
// export function ScanBase ( side , base_area ) ; begin
29515: LD_INT 0
29517: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29518: LD_ADDR_VAR 0 3
29522: PUSH
29523: LD_VAR 0 2
29527: PPUSH
29528: LD_INT 81
29530: PUSH
29531: LD_VAR 0 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PPUSH
29540: CALL_OW 70
29544: ST_TO_ADDR
// end ;
29545: LD_VAR 0 3
29549: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29550: LD_INT 0
29552: PPUSH
29553: PPUSH
29554: PPUSH
29555: PPUSH
// result := false ;
29556: LD_ADDR_VAR 0 2
29560: PUSH
29561: LD_INT 0
29563: ST_TO_ADDR
// side := GetSide ( unit ) ;
29564: LD_ADDR_VAR 0 3
29568: PUSH
29569: LD_VAR 0 1
29573: PPUSH
29574: CALL_OW 255
29578: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29579: LD_ADDR_VAR 0 4
29583: PUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 248
29593: ST_TO_ADDR
// case nat of 1 :
29594: LD_VAR 0 4
29598: PUSH
29599: LD_INT 1
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29607
29605: GO 29618
29607: POP
// tech := tech_lassight ; 2 :
29608: LD_ADDR_VAR 0 5
29612: PUSH
29613: LD_INT 12
29615: ST_TO_ADDR
29616: GO 29657
29618: LD_INT 2
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29637
29626: POP
// tech := tech_mortar ; 3 :
29627: LD_ADDR_VAR 0 5
29631: PUSH
29632: LD_INT 41
29634: ST_TO_ADDR
29635: GO 29657
29637: LD_INT 3
29639: DOUBLE
29640: EQUAL
29641: IFTRUE 29645
29643: GO 29656
29645: POP
// tech := tech_bazooka ; end ;
29646: LD_ADDR_VAR 0 5
29650: PUSH
29651: LD_INT 44
29653: ST_TO_ADDR
29654: GO 29657
29656: POP
// if Researched ( side , tech ) then
29657: LD_VAR 0 3
29661: PPUSH
29662: LD_VAR 0 5
29666: PPUSH
29667: CALL_OW 325
29671: IFFALSE 29698
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29673: LD_ADDR_VAR 0 2
29677: PUSH
29678: LD_INT 5
29680: PUSH
29681: LD_INT 8
29683: PUSH
29684: LD_INT 9
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: PUSH
29692: LD_VAR 0 4
29696: ARRAY
29697: ST_TO_ADDR
// end ;
29698: LD_VAR 0 2
29702: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29703: LD_INT 0
29705: PPUSH
29706: PPUSH
29707: PPUSH
// if not mines then
29708: LD_VAR 0 2
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29861
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29717: LD_ADDR_VAR 0 5
29721: PUSH
29722: LD_INT 81
29724: PUSH
29725: LD_VAR 0 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 3
29736: PUSH
29737: LD_INT 21
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PPUSH
29755: CALL_OW 69
29759: ST_TO_ADDR
// for i in mines do
29760: LD_ADDR_VAR 0 4
29764: PUSH
29765: LD_VAR 0 2
29769: PUSH
29770: FOR_IN
29771: IFFALSE 29859
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29773: LD_VAR 0 4
29777: PUSH
29778: LD_INT 1
29780: ARRAY
29781: PPUSH
29782: LD_VAR 0 4
29786: PUSH
29787: LD_INT 2
29789: ARRAY
29790: PPUSH
29791: CALL_OW 458
29795: NOT
29796: IFFALSE 29800
// continue ;
29798: GO 29770
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29800: LD_VAR 0 4
29804: PUSH
29805: LD_INT 1
29807: ARRAY
29808: PPUSH
29809: LD_VAR 0 4
29813: PUSH
29814: LD_INT 2
29816: ARRAY
29817: PPUSH
29818: CALL_OW 428
29822: PUSH
29823: LD_VAR 0 5
29827: IN
29828: IFFALSE 29857
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29830: LD_VAR 0 4
29834: PUSH
29835: LD_INT 1
29837: ARRAY
29838: PPUSH
29839: LD_VAR 0 4
29843: PUSH
29844: LD_INT 2
29846: ARRAY
29847: PPUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 456
// end ;
29857: GO 29770
29859: POP
29860: POP
// end ;
29861: LD_VAR 0 3
29865: RET
// export function Count ( array ) ; var i ; begin
29866: LD_INT 0
29868: PPUSH
29869: PPUSH
// result := 0 ;
29870: LD_ADDR_VAR 0 2
29874: PUSH
29875: LD_INT 0
29877: ST_TO_ADDR
// for i in array do
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_VAR 0 1
29887: PUSH
29888: FOR_IN
29889: IFFALSE 29913
// if i then
29891: LD_VAR 0 3
29895: IFFALSE 29911
// result := result + 1 ;
29897: LD_ADDR_VAR 0 2
29901: PUSH
29902: LD_VAR 0 2
29906: PUSH
29907: LD_INT 1
29909: PLUS
29910: ST_TO_ADDR
29911: GO 29888
29913: POP
29914: POP
// end ;
29915: LD_VAR 0 2
29919: RET
// export function IsEmpty ( building ) ; begin
29920: LD_INT 0
29922: PPUSH
// if not building then
29923: LD_VAR 0 1
29927: NOT
29928: IFFALSE 29932
// exit ;
29930: GO 29975
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_VAR 0 1
29941: PUSH
29942: LD_INT 22
29944: PUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 255
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 58
29961: PUSH
29962: EMPTY
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 69
29973: IN
29974: ST_TO_ADDR
// end ;
29975: LD_VAR 0 2
29979: RET
// export function IsNotFull ( building ) ; begin
29980: LD_INT 0
29982: PPUSH
// if not building then
29983: LD_VAR 0 1
29987: NOT
29988: IFFALSE 29992
// exit ;
29990: GO 30011
// result := UnitsInside ( building ) < 6 ;
29992: LD_ADDR_VAR 0 2
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 313
30006: PUSH
30007: LD_INT 6
30009: LESS
30010: ST_TO_ADDR
// end ;
30011: LD_VAR 0 2
30015: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
// tmp := [ ] ;
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: EMPTY
30028: ST_TO_ADDR
// list := [ ] ;
30029: LD_ADDR_VAR 0 5
30033: PUSH
30034: EMPTY
30035: ST_TO_ADDR
// for i = 16 to 25 do
30036: LD_ADDR_VAR 0 4
30040: PUSH
30041: DOUBLE
30042: LD_INT 16
30044: DEC
30045: ST_TO_ADDR
30046: LD_INT 25
30048: PUSH
30049: FOR_TO
30050: IFFALSE 30123
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30052: LD_ADDR_VAR 0 3
30056: PUSH
30057: LD_VAR 0 3
30061: PUSH
30062: LD_INT 22
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 255
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 91
30081: PUSH
30082: LD_VAR 0 1
30086: PUSH
30087: LD_INT 6
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 30
30097: PUSH
30098: LD_VAR 0 4
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: PPUSH
30115: CALL_OW 69
30119: ADD
30120: ST_TO_ADDR
30121: GO 30049
30123: POP
30124: POP
// for i = 1 to tmp do
30125: LD_ADDR_VAR 0 4
30129: PUSH
30130: DOUBLE
30131: LD_INT 1
30133: DEC
30134: ST_TO_ADDR
30135: LD_VAR 0 3
30139: PUSH
30140: FOR_TO
30141: IFFALSE 30229
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: LD_VAR 0 5
30152: PUSH
30153: LD_VAR 0 3
30157: PUSH
30158: LD_VAR 0 4
30162: ARRAY
30163: PPUSH
30164: CALL_OW 266
30168: PUSH
30169: LD_VAR 0 3
30173: PUSH
30174: LD_VAR 0 4
30178: ARRAY
30179: PPUSH
30180: CALL_OW 250
30184: PUSH
30185: LD_VAR 0 3
30189: PUSH
30190: LD_VAR 0 4
30194: ARRAY
30195: PPUSH
30196: CALL_OW 251
30200: PUSH
30201: LD_VAR 0 3
30205: PUSH
30206: LD_VAR 0 4
30210: ARRAY
30211: PPUSH
30212: CALL_OW 254
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: ADD
30226: ST_TO_ADDR
30227: GO 30140
30229: POP
30230: POP
// result := list ;
30231: LD_ADDR_VAR 0 2
30235: PUSH
30236: LD_VAR 0 5
30240: ST_TO_ADDR
// end ;
30241: LD_VAR 0 2
30245: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30246: LD_INT 0
30248: PPUSH
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
// if not factory then
30255: LD_VAR 0 1
30259: NOT
30260: IFFALSE 30264
// exit ;
30262: GO 30857
// if control = control_apeman then
30264: LD_VAR 0 4
30268: PUSH
30269: LD_INT 5
30271: EQUAL
30272: IFFALSE 30381
// begin tmp := UnitsInside ( factory ) ;
30274: LD_ADDR_VAR 0 8
30278: PUSH
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 313
30288: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30289: LD_VAR 0 8
30293: PPUSH
30294: LD_INT 25
30296: PUSH
30297: LD_INT 12
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PPUSH
30304: CALL_OW 72
30308: NOT
30309: IFFALSE 30319
// control := control_manual ;
30311: LD_ADDR_VAR 0 4
30315: PUSH
30316: LD_INT 1
30318: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30319: LD_ADDR_VAR 0 8
30323: PUSH
30324: LD_VAR 0 1
30328: PPUSH
30329: CALL 30016 0 1
30333: ST_TO_ADDR
// if tmp then
30334: LD_VAR 0 8
30338: IFFALSE 30381
// begin for i in tmp do
30340: LD_ADDR_VAR 0 7
30344: PUSH
30345: LD_VAR 0 8
30349: PUSH
30350: FOR_IN
30351: IFFALSE 30379
// if i [ 1 ] = b_ext_radio then
30353: LD_VAR 0 7
30357: PUSH
30358: LD_INT 1
30360: ARRAY
30361: PUSH
30362: LD_INT 22
30364: EQUAL
30365: IFFALSE 30377
// begin control := control_remote ;
30367: LD_ADDR_VAR 0 4
30371: PUSH
30372: LD_INT 2
30374: ST_TO_ADDR
// break ;
30375: GO 30379
// end ;
30377: GO 30350
30379: POP
30380: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30381: LD_VAR 0 1
30385: PPUSH
30386: LD_VAR 0 2
30390: PPUSH
30391: LD_VAR 0 3
30395: PPUSH
30396: LD_VAR 0 4
30400: PPUSH
30401: LD_VAR 0 5
30405: PPUSH
30406: CALL_OW 448
30410: IFFALSE 30445
// begin result := [ chassis , engine , control , weapon ] ;
30412: LD_ADDR_VAR 0 6
30416: PUSH
30417: LD_VAR 0 2
30421: PUSH
30422: LD_VAR 0 3
30426: PUSH
30427: LD_VAR 0 4
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// exit ;
30443: GO 30857
// end ; _chassis := AvailableChassisList ( factory ) ;
30445: LD_ADDR_VAR 0 9
30449: PUSH
30450: LD_VAR 0 1
30454: PPUSH
30455: CALL_OW 475
30459: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30460: LD_ADDR_VAR 0 11
30464: PUSH
30465: LD_VAR 0 1
30469: PPUSH
30470: CALL_OW 476
30474: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30475: LD_ADDR_VAR 0 12
30479: PUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 477
30489: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30490: LD_ADDR_VAR 0 10
30494: PUSH
30495: LD_VAR 0 1
30499: PPUSH
30500: CALL_OW 478
30504: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30505: LD_VAR 0 9
30509: NOT
30510: PUSH
30511: LD_VAR 0 11
30515: NOT
30516: OR
30517: PUSH
30518: LD_VAR 0 12
30522: NOT
30523: OR
30524: PUSH
30525: LD_VAR 0 10
30529: NOT
30530: OR
30531: IFFALSE 30566
// begin result := [ chassis , engine , control , weapon ] ;
30533: LD_ADDR_VAR 0 6
30537: PUSH
30538: LD_VAR 0 2
30542: PUSH
30543: LD_VAR 0 3
30547: PUSH
30548: LD_VAR 0 4
30552: PUSH
30553: LD_VAR 0 5
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: ST_TO_ADDR
// exit ;
30564: GO 30857
// end ; if not chassis in _chassis then
30566: LD_VAR 0 2
30570: PUSH
30571: LD_VAR 0 9
30575: IN
30576: NOT
30577: IFFALSE 30603
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30579: LD_ADDR_VAR 0 2
30583: PUSH
30584: LD_VAR 0 9
30588: PUSH
30589: LD_INT 1
30591: PPUSH
30592: LD_VAR 0 9
30596: PPUSH
30597: CALL_OW 12
30601: ARRAY
30602: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30603: LD_VAR 0 2
30607: PPUSH
30608: LD_VAR 0 3
30612: PPUSH
30613: CALL 30862 0 2
30617: NOT
30618: IFFALSE 30677
// repeat engine := _engine [ 1 ] ;
30620: LD_ADDR_VAR 0 3
30624: PUSH
30625: LD_VAR 0 11
30629: PUSH
30630: LD_INT 1
30632: ARRAY
30633: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30634: LD_ADDR_VAR 0 11
30638: PUSH
30639: LD_VAR 0 11
30643: PPUSH
30644: LD_INT 1
30646: PPUSH
30647: CALL_OW 3
30651: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30652: LD_VAR 0 2
30656: PPUSH
30657: LD_VAR 0 3
30661: PPUSH
30662: CALL 30862 0 2
30666: PUSH
30667: LD_VAR 0 11
30671: PUSH
30672: EMPTY
30673: EQUAL
30674: OR
30675: IFFALSE 30620
// if not control in _control then
30677: LD_VAR 0 4
30681: PUSH
30682: LD_VAR 0 12
30686: IN
30687: NOT
30688: IFFALSE 30714
// control := _control [ rand ( 1 , _control ) ] ;
30690: LD_ADDR_VAR 0 4
30694: PUSH
30695: LD_VAR 0 12
30699: PUSH
30700: LD_INT 1
30702: PPUSH
30703: LD_VAR 0 12
30707: PPUSH
30708: CALL_OW 12
30712: ARRAY
30713: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30714: LD_VAR 0 2
30718: PPUSH
30719: LD_VAR 0 5
30723: PPUSH
30724: CALL 31082 0 2
30728: NOT
30729: IFFALSE 30788
// repeat weapon := _weapon [ 1 ] ;
30731: LD_ADDR_VAR 0 5
30735: PUSH
30736: LD_VAR 0 10
30740: PUSH
30741: LD_INT 1
30743: ARRAY
30744: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30745: LD_ADDR_VAR 0 10
30749: PUSH
30750: LD_VAR 0 10
30754: PPUSH
30755: LD_INT 1
30757: PPUSH
30758: CALL_OW 3
30762: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30763: LD_VAR 0 2
30767: PPUSH
30768: LD_VAR 0 5
30772: PPUSH
30773: CALL 31082 0 2
30777: PUSH
30778: LD_VAR 0 10
30782: PUSH
30783: EMPTY
30784: EQUAL
30785: OR
30786: IFFALSE 30731
// result := [ ] ;
30788: LD_ADDR_VAR 0 6
30792: PUSH
30793: EMPTY
30794: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30795: LD_VAR 0 1
30799: PPUSH
30800: LD_VAR 0 2
30804: PPUSH
30805: LD_VAR 0 3
30809: PPUSH
30810: LD_VAR 0 4
30814: PPUSH
30815: LD_VAR 0 5
30819: PPUSH
30820: CALL_OW 448
30824: IFFALSE 30857
// result := [ chassis , engine , control , weapon ] ;
30826: LD_ADDR_VAR 0 6
30830: PUSH
30831: LD_VAR 0 2
30835: PUSH
30836: LD_VAR 0 3
30840: PUSH
30841: LD_VAR 0 4
30845: PUSH
30846: LD_VAR 0 5
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// end ;
30857: LD_VAR 0 6
30861: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30862: LD_INT 0
30864: PPUSH
// if not chassis or not engine then
30865: LD_VAR 0 1
30869: NOT
30870: PUSH
30871: LD_VAR 0 2
30875: NOT
30876: OR
30877: IFFALSE 30881
// exit ;
30879: GO 31077
// case engine of engine_solar :
30881: LD_VAR 0 2
30885: PUSH
30886: LD_INT 2
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 30932
30894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_INT 11
30902: PUSH
30903: LD_INT 12
30905: PUSH
30906: LD_INT 13
30908: PUSH
30909: LD_INT 14
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 3
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
30930: GO 31061
30932: LD_INT 1
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 31002
30940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30941: LD_ADDR_VAR 0 3
30945: PUSH
30946: LD_INT 11
30948: PUSH
30949: LD_INT 12
30951: PUSH
30952: LD_INT 13
30954: PUSH
30955: LD_INT 14
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: LD_INT 4
30969: PUSH
30970: LD_INT 5
30972: PUSH
30973: LD_INT 21
30975: PUSH
30976: LD_INT 23
30978: PUSH
30979: LD_INT 22
30981: PUSH
30982: LD_INT 24
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
31000: GO 31061
31002: LD_INT 3
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31060
31010: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: LD_INT 13
31018: PUSH
31019: LD_INT 14
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: LD_INT 3
31027: PUSH
31028: LD_INT 4
31030: PUSH
31031: LD_INT 5
31033: PUSH
31034: LD_INT 21
31036: PUSH
31037: LD_INT 22
31039: PUSH
31040: LD_INT 23
31042: PUSH
31043: LD_INT 24
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
31058: GO 31061
31060: POP
// result := ( chassis in result ) ;
31061: LD_ADDR_VAR 0 3
31065: PUSH
31066: LD_VAR 0 1
31070: PUSH
31071: LD_VAR 0 3
31075: IN
31076: ST_TO_ADDR
// end ;
31077: LD_VAR 0 3
31081: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31082: LD_INT 0
31084: PPUSH
// if not chassis or not weapon then
31085: LD_VAR 0 1
31089: NOT
31090: PUSH
31091: LD_VAR 0 2
31095: NOT
31096: OR
31097: IFFALSE 31101
// exit ;
31099: GO 32163
// case weapon of us_machine_gun :
31101: LD_VAR 0 2
31105: PUSH
31106: LD_INT 2
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31144
31114: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: LD_INT 4
31131: PUSH
31132: LD_INT 5
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: ST_TO_ADDR
31142: GO 32147
31144: LD_INT 3
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31182
31152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31153: LD_ADDR_VAR 0 3
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 4
31169: PUSH
31170: LD_INT 5
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
31180: GO 32147
31182: LD_INT 11
31184: DOUBLE
31185: EQUAL
31186: IFTRUE 31190
31188: GO 31220
31190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 4
31207: PUSH
31208: LD_INT 5
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: ST_TO_ADDR
31218: GO 32147
31220: LD_INT 4
31222: DOUBLE
31223: EQUAL
31224: IFTRUE 31228
31226: GO 31254
31228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: LD_INT 4
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
31252: GO 32147
31254: LD_INT 5
31256: DOUBLE
31257: EQUAL
31258: IFTRUE 31262
31260: GO 31288
31262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: LD_INT 4
31276: PUSH
31277: LD_INT 5
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
31286: GO 32147
31288: LD_INT 9
31290: DOUBLE
31291: EQUAL
31292: IFTRUE 31296
31294: GO 31322
31296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31297: LD_ADDR_VAR 0 3
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: LD_INT 4
31310: PUSH
31311: LD_INT 5
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: ST_TO_ADDR
31320: GO 32147
31322: LD_INT 7
31324: DOUBLE
31325: EQUAL
31326: IFTRUE 31330
31328: GO 31356
31330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31331: LD_ADDR_VAR 0 3
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: LD_INT 4
31344: PUSH
31345: LD_INT 5
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: ST_TO_ADDR
31354: GO 32147
31356: LD_INT 12
31358: DOUBLE
31359: EQUAL
31360: IFTRUE 31364
31362: GO 31390
31364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31365: LD_ADDR_VAR 0 3
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: LD_INT 4
31378: PUSH
31379: LD_INT 5
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: ST_TO_ADDR
31388: GO 32147
31390: LD_INT 13
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31424
31398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 4
31412: PUSH
31413: LD_INT 5
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
31422: GO 32147
31424: LD_INT 14
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31450
31432: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31433: LD_ADDR_VAR 0 3
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: ST_TO_ADDR
31448: GO 32147
31450: LD_INT 6
31452: DOUBLE
31453: EQUAL
31454: IFTRUE 31458
31456: GO 31476
31458: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31459: LD_ADDR_VAR 0 3
31463: PUSH
31464: LD_INT 4
31466: PUSH
31467: LD_INT 5
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: ST_TO_ADDR
31474: GO 32147
31476: LD_INT 10
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31502
31484: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_INT 4
31492: PUSH
31493: LD_INT 5
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: ST_TO_ADDR
31500: GO 32147
31502: LD_INT 22
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31536
31510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_INT 11
31518: PUSH
31519: LD_INT 12
31521: PUSH
31522: LD_INT 13
31524: PUSH
31525: LD_INT 14
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
31534: GO 32147
31536: LD_INT 23
31538: DOUBLE
31539: EQUAL
31540: IFTRUE 31544
31542: GO 31570
31544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31545: LD_ADDR_VAR 0 3
31549: PUSH
31550: LD_INT 11
31552: PUSH
31553: LD_INT 12
31555: PUSH
31556: LD_INT 13
31558: PUSH
31559: LD_INT 14
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: ST_TO_ADDR
31568: GO 32147
31570: LD_INT 24
31572: DOUBLE
31573: EQUAL
31574: IFTRUE 31578
31576: GO 31604
31578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_INT 11
31586: PUSH
31587: LD_INT 12
31589: PUSH
31590: LD_INT 13
31592: PUSH
31593: LD_INT 14
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
31602: GO 32147
31604: LD_INT 30
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31638
31612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_INT 11
31620: PUSH
31621: LD_INT 12
31623: PUSH
31624: LD_INT 13
31626: PUSH
31627: LD_INT 14
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: ST_TO_ADDR
31636: GO 32147
31638: LD_INT 25
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31664
31646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31647: LD_ADDR_VAR 0 3
31651: PUSH
31652: LD_INT 13
31654: PUSH
31655: LD_INT 14
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: ST_TO_ADDR
31662: GO 32147
31664: LD_INT 27
31666: DOUBLE
31667: EQUAL
31668: IFTRUE 31672
31670: GO 31690
31672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: LD_INT 13
31680: PUSH
31681: LD_INT 14
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: ST_TO_ADDR
31688: GO 32147
31690: LD_EXP 57
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31726
31700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: LD_INT 11
31708: PUSH
31709: LD_INT 12
31711: PUSH
31712: LD_INT 13
31714: PUSH
31715: LD_INT 14
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: ST_TO_ADDR
31724: GO 32147
31726: LD_INT 28
31728: DOUBLE
31729: EQUAL
31730: IFTRUE 31734
31732: GO 31752
31734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_INT 13
31742: PUSH
31743: LD_INT 14
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: ST_TO_ADDR
31750: GO 32147
31752: LD_INT 29
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31778
31760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_INT 13
31768: PUSH
31769: LD_INT 14
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: ST_TO_ADDR
31776: GO 32147
31778: LD_INT 31
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 31804
31786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31787: LD_ADDR_VAR 0 3
31791: PUSH
31792: LD_INT 13
31794: PUSH
31795: LD_INT 14
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: ST_TO_ADDR
31802: GO 32147
31804: LD_INT 26
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31830
31812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: LD_INT 13
31820: PUSH
31821: LD_INT 14
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: ST_TO_ADDR
31828: GO 32147
31830: LD_INT 42
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31864
31838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_INT 21
31846: PUSH
31847: LD_INT 22
31849: PUSH
31850: LD_INT 23
31852: PUSH
31853: LD_INT 24
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
31862: GO 32147
31864: LD_INT 43
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31898
31872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_INT 21
31880: PUSH
31881: LD_INT 22
31883: PUSH
31884: LD_INT 23
31886: PUSH
31887: LD_INT 24
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
31896: GO 32147
31898: LD_INT 44
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31932
31906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_INT 21
31914: PUSH
31915: LD_INT 22
31917: PUSH
31918: LD_INT 23
31920: PUSH
31921: LD_INT 24
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
31930: GO 32147
31932: LD_INT 45
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31966
31940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 22
31951: PUSH
31952: LD_INT 23
31954: PUSH
31955: LD_INT 24
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
31964: GO 32147
31966: LD_INT 49
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 32000
31974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 21
31982: PUSH
31983: LD_INT 22
31985: PUSH
31986: LD_INT 23
31988: PUSH
31989: LD_INT 24
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: ST_TO_ADDR
31998: GO 32147
32000: LD_INT 51
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32034
32008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32009: LD_ADDR_VAR 0 3
32013: PUSH
32014: LD_INT 21
32016: PUSH
32017: LD_INT 22
32019: PUSH
32020: LD_INT 23
32022: PUSH
32023: LD_INT 24
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32147
32034: LD_INT 52
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32068
32042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 22
32053: PUSH
32054: LD_INT 23
32056: PUSH
32057: LD_INT 24
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: ST_TO_ADDR
32066: GO 32147
32068: LD_INT 53
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32094
32076: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_INT 23
32084: PUSH
32085: LD_INT 24
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: ST_TO_ADDR
32092: GO 32147
32094: LD_INT 46
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32120
32102: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_INT 23
32110: PUSH
32111: LD_INT 24
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: ST_TO_ADDR
32118: GO 32147
32120: LD_INT 47
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32146
32128: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32129: LD_ADDR_VAR 0 3
32133: PUSH
32134: LD_INT 23
32136: PUSH
32137: LD_INT 24
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 32147
32146: POP
// result := ( chassis in result ) ;
32147: LD_ADDR_VAR 0 3
32151: PUSH
32152: LD_VAR 0 1
32156: PUSH
32157: LD_VAR 0 3
32161: IN
32162: ST_TO_ADDR
// end ;
32163: LD_VAR 0 3
32167: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32168: LD_INT 0
32170: PPUSH
32171: PPUSH
32172: PPUSH
32173: PPUSH
32174: PPUSH
32175: PPUSH
32176: PPUSH
// result := array ;
32177: LD_ADDR_VAR 0 5
32181: PUSH
32182: LD_VAR 0 1
32186: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32187: LD_VAR 0 1
32191: NOT
32192: PUSH
32193: LD_VAR 0 2
32197: NOT
32198: OR
32199: PUSH
32200: LD_VAR 0 3
32204: NOT
32205: OR
32206: PUSH
32207: LD_VAR 0 2
32211: PUSH
32212: LD_VAR 0 1
32216: GREATER
32217: OR
32218: PUSH
32219: LD_VAR 0 3
32223: PUSH
32224: LD_VAR 0 1
32228: GREATER
32229: OR
32230: IFFALSE 32234
// exit ;
32232: GO 32530
// if direction then
32234: LD_VAR 0 4
32238: IFFALSE 32302
// begin d := 1 ;
32240: LD_ADDR_VAR 0 9
32244: PUSH
32245: LD_INT 1
32247: ST_TO_ADDR
// if i_from > i_to then
32248: LD_VAR 0 2
32252: PUSH
32253: LD_VAR 0 3
32257: GREATER
32258: IFFALSE 32284
// length := ( array - i_from ) + i_to else
32260: LD_ADDR_VAR 0 11
32264: PUSH
32265: LD_VAR 0 1
32269: PUSH
32270: LD_VAR 0 2
32274: MINUS
32275: PUSH
32276: LD_VAR 0 3
32280: PLUS
32281: ST_TO_ADDR
32282: GO 32300
// length := i_to - i_from ;
32284: LD_ADDR_VAR 0 11
32288: PUSH
32289: LD_VAR 0 3
32293: PUSH
32294: LD_VAR 0 2
32298: MINUS
32299: ST_TO_ADDR
// end else
32300: GO 32363
// begin d := - 1 ;
32302: LD_ADDR_VAR 0 9
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: ST_TO_ADDR
// if i_from > i_to then
32311: LD_VAR 0 2
32315: PUSH
32316: LD_VAR 0 3
32320: GREATER
32321: IFFALSE 32341
// length := i_from - i_to else
32323: LD_ADDR_VAR 0 11
32327: PUSH
32328: LD_VAR 0 2
32332: PUSH
32333: LD_VAR 0 3
32337: MINUS
32338: ST_TO_ADDR
32339: GO 32363
// length := ( array - i_to ) + i_from ;
32341: LD_ADDR_VAR 0 11
32345: PUSH
32346: LD_VAR 0 1
32350: PUSH
32351: LD_VAR 0 3
32355: MINUS
32356: PUSH
32357: LD_VAR 0 2
32361: PLUS
32362: ST_TO_ADDR
// end ; if not length then
32363: LD_VAR 0 11
32367: NOT
32368: IFFALSE 32372
// exit ;
32370: GO 32530
// tmp := array ;
32372: LD_ADDR_VAR 0 10
32376: PUSH
32377: LD_VAR 0 1
32381: ST_TO_ADDR
// for i = 1 to length do
32382: LD_ADDR_VAR 0 6
32386: PUSH
32387: DOUBLE
32388: LD_INT 1
32390: DEC
32391: ST_TO_ADDR
32392: LD_VAR 0 11
32396: PUSH
32397: FOR_TO
32398: IFFALSE 32518
// begin for j = 1 to array do
32400: LD_ADDR_VAR 0 7
32404: PUSH
32405: DOUBLE
32406: LD_INT 1
32408: DEC
32409: ST_TO_ADDR
32410: LD_VAR 0 1
32414: PUSH
32415: FOR_TO
32416: IFFALSE 32504
// begin k := j + d ;
32418: LD_ADDR_VAR 0 8
32422: PUSH
32423: LD_VAR 0 7
32427: PUSH
32428: LD_VAR 0 9
32432: PLUS
32433: ST_TO_ADDR
// if k > array then
32434: LD_VAR 0 8
32438: PUSH
32439: LD_VAR 0 1
32443: GREATER
32444: IFFALSE 32454
// k := 1 ;
32446: LD_ADDR_VAR 0 8
32450: PUSH
32451: LD_INT 1
32453: ST_TO_ADDR
// if not k then
32454: LD_VAR 0 8
32458: NOT
32459: IFFALSE 32471
// k := array ;
32461: LD_ADDR_VAR 0 8
32465: PUSH
32466: LD_VAR 0 1
32470: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32471: LD_ADDR_VAR 0 10
32475: PUSH
32476: LD_VAR 0 10
32480: PPUSH
32481: LD_VAR 0 8
32485: PPUSH
32486: LD_VAR 0 1
32490: PUSH
32491: LD_VAR 0 7
32495: ARRAY
32496: PPUSH
32497: CALL_OW 1
32501: ST_TO_ADDR
// end ;
32502: GO 32415
32504: POP
32505: POP
// array := tmp ;
32506: LD_ADDR_VAR 0 1
32510: PUSH
32511: LD_VAR 0 10
32515: ST_TO_ADDR
// end ;
32516: GO 32397
32518: POP
32519: POP
// result := array ;
32520: LD_ADDR_VAR 0 5
32524: PUSH
32525: LD_VAR 0 1
32529: ST_TO_ADDR
// end ;
32530: LD_VAR 0 5
32534: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32535: LD_INT 0
32537: PPUSH
32538: PPUSH
// result := 0 ;
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_INT 0
32546: ST_TO_ADDR
// if not array or not value in array then
32547: LD_VAR 0 1
32551: NOT
32552: PUSH
32553: LD_VAR 0 2
32557: PUSH
32558: LD_VAR 0 1
32562: IN
32563: NOT
32564: OR
32565: IFFALSE 32569
// exit ;
32567: GO 32623
// for i = 1 to array do
32569: LD_ADDR_VAR 0 4
32573: PUSH
32574: DOUBLE
32575: LD_INT 1
32577: DEC
32578: ST_TO_ADDR
32579: LD_VAR 0 1
32583: PUSH
32584: FOR_TO
32585: IFFALSE 32621
// if value = array [ i ] then
32587: LD_VAR 0 2
32591: PUSH
32592: LD_VAR 0 1
32596: PUSH
32597: LD_VAR 0 4
32601: ARRAY
32602: EQUAL
32603: IFFALSE 32619
// begin result := i ;
32605: LD_ADDR_VAR 0 3
32609: PUSH
32610: LD_VAR 0 4
32614: ST_TO_ADDR
// exit ;
32615: POP
32616: POP
32617: GO 32623
// end ;
32619: GO 32584
32621: POP
32622: POP
// end ;
32623: LD_VAR 0 3
32627: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32628: LD_INT 0
32630: PPUSH
// vc_chassis := chassis ;
32631: LD_ADDR_OWVAR 37
32635: PUSH
32636: LD_VAR 0 1
32640: ST_TO_ADDR
// vc_engine := engine ;
32641: LD_ADDR_OWVAR 39
32645: PUSH
32646: LD_VAR 0 2
32650: ST_TO_ADDR
// vc_control := control ;
32651: LD_ADDR_OWVAR 38
32655: PUSH
32656: LD_VAR 0 3
32660: ST_TO_ADDR
// vc_weapon := weapon ;
32661: LD_ADDR_OWVAR 40
32665: PUSH
32666: LD_VAR 0 4
32670: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32671: LD_ADDR_OWVAR 41
32675: PUSH
32676: LD_VAR 0 5
32680: ST_TO_ADDR
// end ;
32681: LD_VAR 0 6
32685: RET
// export function WantPlant ( unit ) ; var task ; begin
32686: LD_INT 0
32688: PPUSH
32689: PPUSH
// result := false ;
32690: LD_ADDR_VAR 0 2
32694: PUSH
32695: LD_INT 0
32697: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 437
32712: ST_TO_ADDR
// if task then
32713: LD_VAR 0 3
32717: IFFALSE 32745
// if task [ 1 ] [ 1 ] = p then
32719: LD_VAR 0 3
32723: PUSH
32724: LD_INT 1
32726: ARRAY
32727: PUSH
32728: LD_INT 1
32730: ARRAY
32731: PUSH
32732: LD_STRING p
32734: EQUAL
32735: IFFALSE 32745
// result := true ;
32737: LD_ADDR_VAR 0 2
32741: PUSH
32742: LD_INT 1
32744: ST_TO_ADDR
// end ;
32745: LD_VAR 0 2
32749: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32750: LD_INT 0
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
// if pos < 1 then
32756: LD_VAR 0 2
32760: PUSH
32761: LD_INT 1
32763: LESS
32764: IFFALSE 32768
// exit ;
32766: GO 33071
// if pos = 1 then
32768: LD_VAR 0 2
32772: PUSH
32773: LD_INT 1
32775: EQUAL
32776: IFFALSE 32809
// result := Replace ( arr , pos [ 1 ] , value ) else
32778: LD_ADDR_VAR 0 4
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: LD_VAR 0 2
32792: PUSH
32793: LD_INT 1
32795: ARRAY
32796: PPUSH
32797: LD_VAR 0 3
32801: PPUSH
32802: CALL_OW 1
32806: ST_TO_ADDR
32807: GO 33071
// begin tmp := arr ;
32809: LD_ADDR_VAR 0 6
32813: PUSH
32814: LD_VAR 0 1
32818: ST_TO_ADDR
// s_arr := [ tmp ] ;
32819: LD_ADDR_VAR 0 7
32823: PUSH
32824: LD_VAR 0 6
32828: PUSH
32829: EMPTY
32830: LIST
32831: ST_TO_ADDR
// for i = 1 to pos - 1 do
32832: LD_ADDR_VAR 0 5
32836: PUSH
32837: DOUBLE
32838: LD_INT 1
32840: DEC
32841: ST_TO_ADDR
32842: LD_VAR 0 2
32846: PUSH
32847: LD_INT 1
32849: MINUS
32850: PUSH
32851: FOR_TO
32852: IFFALSE 32897
// begin tmp := tmp [ pos [ i ] ] ;
32854: LD_ADDR_VAR 0 6
32858: PUSH
32859: LD_VAR 0 6
32863: PUSH
32864: LD_VAR 0 2
32868: PUSH
32869: LD_VAR 0 5
32873: ARRAY
32874: ARRAY
32875: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32876: LD_ADDR_VAR 0 7
32880: PUSH
32881: LD_VAR 0 7
32885: PUSH
32886: LD_VAR 0 6
32890: PUSH
32891: EMPTY
32892: LIST
32893: ADD
32894: ST_TO_ADDR
// end ;
32895: GO 32851
32897: POP
32898: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32899: LD_ADDR_VAR 0 6
32903: PUSH
32904: LD_VAR 0 6
32908: PPUSH
32909: LD_VAR 0 2
32913: PUSH
32914: LD_VAR 0 2
32918: ARRAY
32919: PPUSH
32920: LD_VAR 0 3
32924: PPUSH
32925: CALL_OW 1
32929: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32930: LD_ADDR_VAR 0 7
32934: PUSH
32935: LD_VAR 0 7
32939: PPUSH
32940: LD_VAR 0 7
32944: PPUSH
32945: LD_VAR 0 6
32949: PPUSH
32950: CALL_OW 1
32954: ST_TO_ADDR
// for i = s_arr downto 2 do
32955: LD_ADDR_VAR 0 5
32959: PUSH
32960: DOUBLE
32961: LD_VAR 0 7
32965: INC
32966: ST_TO_ADDR
32967: LD_INT 2
32969: PUSH
32970: FOR_DOWNTO
32971: IFFALSE 33055
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32973: LD_ADDR_VAR 0 6
32977: PUSH
32978: LD_VAR 0 7
32982: PUSH
32983: LD_VAR 0 5
32987: PUSH
32988: LD_INT 1
32990: MINUS
32991: ARRAY
32992: PPUSH
32993: LD_VAR 0 2
32997: PUSH
32998: LD_VAR 0 5
33002: PUSH
33003: LD_INT 1
33005: MINUS
33006: ARRAY
33007: PPUSH
33008: LD_VAR 0 7
33012: PUSH
33013: LD_VAR 0 5
33017: ARRAY
33018: PPUSH
33019: CALL_OW 1
33023: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 7
33033: PPUSH
33034: LD_VAR 0 5
33038: PUSH
33039: LD_INT 1
33041: MINUS
33042: PPUSH
33043: LD_VAR 0 6
33047: PPUSH
33048: CALL_OW 1
33052: ST_TO_ADDR
// end ;
33053: GO 32970
33055: POP
33056: POP
// result := s_arr [ 1 ] ;
33057: LD_ADDR_VAR 0 4
33061: PUSH
33062: LD_VAR 0 7
33066: PUSH
33067: LD_INT 1
33069: ARRAY
33070: ST_TO_ADDR
// end ; end ;
33071: LD_VAR 0 4
33075: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33076: LD_INT 0
33078: PPUSH
33079: PPUSH
// if not list then
33080: LD_VAR 0 1
33084: NOT
33085: IFFALSE 33089
// exit ;
33087: GO 33180
// i := list [ pos1 ] ;
33089: LD_ADDR_VAR 0 5
33093: PUSH
33094: LD_VAR 0 1
33098: PUSH
33099: LD_VAR 0 2
33103: ARRAY
33104: ST_TO_ADDR
// if not i then
33105: LD_VAR 0 5
33109: NOT
33110: IFFALSE 33114
// exit ;
33112: GO 33180
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33114: LD_ADDR_VAR 0 1
33118: PUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: LD_VAR 0 1
33133: PUSH
33134: LD_VAR 0 3
33138: ARRAY
33139: PPUSH
33140: CALL_OW 1
33144: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33145: LD_ADDR_VAR 0 1
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: LD_VAR 0 3
33159: PPUSH
33160: LD_VAR 0 5
33164: PPUSH
33165: CALL_OW 1
33169: ST_TO_ADDR
// result := list ;
33170: LD_ADDR_VAR 0 4
33174: PUSH
33175: LD_VAR 0 1
33179: ST_TO_ADDR
// end ;
33180: LD_VAR 0 4
33184: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33185: LD_INT 0
33187: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33188: LD_ADDR_VAR 0 5
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 250
33202: PPUSH
33203: LD_VAR 0 1
33207: PPUSH
33208: CALL_OW 251
33212: PPUSH
33213: LD_VAR 0 2
33217: PPUSH
33218: LD_VAR 0 3
33222: PPUSH
33223: LD_VAR 0 4
33227: PPUSH
33228: CALL 33238 0 5
33232: ST_TO_ADDR
// end ;
33233: LD_VAR 0 5
33237: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33238: LD_INT 0
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
// if not list then
33244: LD_VAR 0 3
33248: NOT
33249: IFFALSE 33253
// exit ;
33251: GO 33641
// result := [ ] ;
33253: LD_ADDR_VAR 0 6
33257: PUSH
33258: EMPTY
33259: ST_TO_ADDR
// for i in list do
33260: LD_ADDR_VAR 0 7
33264: PUSH
33265: LD_VAR 0 3
33269: PUSH
33270: FOR_IN
33271: IFFALSE 33473
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33273: LD_ADDR_VAR 0 9
33277: PUSH
33278: LD_VAR 0 7
33282: PPUSH
33283: LD_VAR 0 1
33287: PPUSH
33288: LD_VAR 0 2
33292: PPUSH
33293: CALL_OW 297
33297: ST_TO_ADDR
// if not result then
33298: LD_VAR 0 6
33302: NOT
33303: IFFALSE 33329
// result := [ [ i , tmp ] ] else
33305: LD_ADDR_VAR 0 6
33309: PUSH
33310: LD_VAR 0 7
33314: PUSH
33315: LD_VAR 0 9
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: ST_TO_ADDR
33327: GO 33471
// begin if result [ result ] [ 2 ] < tmp then
33329: LD_VAR 0 6
33333: PUSH
33334: LD_VAR 0 6
33338: ARRAY
33339: PUSH
33340: LD_INT 2
33342: ARRAY
33343: PUSH
33344: LD_VAR 0 9
33348: LESS
33349: IFFALSE 33391
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33351: LD_ADDR_VAR 0 6
33355: PUSH
33356: LD_VAR 0 6
33360: PPUSH
33361: LD_VAR 0 6
33365: PUSH
33366: LD_INT 1
33368: PLUS
33369: PPUSH
33370: LD_VAR 0 7
33374: PUSH
33375: LD_VAR 0 9
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PPUSH
33384: CALL_OW 2
33388: ST_TO_ADDR
33389: GO 33471
// for j = 1 to result do
33391: LD_ADDR_VAR 0 8
33395: PUSH
33396: DOUBLE
33397: LD_INT 1
33399: DEC
33400: ST_TO_ADDR
33401: LD_VAR 0 6
33405: PUSH
33406: FOR_TO
33407: IFFALSE 33469
// begin if tmp < result [ j ] [ 2 ] then
33409: LD_VAR 0 9
33413: PUSH
33414: LD_VAR 0 6
33418: PUSH
33419: LD_VAR 0 8
33423: ARRAY
33424: PUSH
33425: LD_INT 2
33427: ARRAY
33428: LESS
33429: IFFALSE 33467
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33431: LD_ADDR_VAR 0 6
33435: PUSH
33436: LD_VAR 0 6
33440: PPUSH
33441: LD_VAR 0 8
33445: PPUSH
33446: LD_VAR 0 7
33450: PUSH
33451: LD_VAR 0 9
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PPUSH
33460: CALL_OW 2
33464: ST_TO_ADDR
// break ;
33465: GO 33469
// end ; end ;
33467: GO 33406
33469: POP
33470: POP
// end ; end ;
33471: GO 33270
33473: POP
33474: POP
// if result and not asc then
33475: LD_VAR 0 6
33479: PUSH
33480: LD_VAR 0 4
33484: NOT
33485: AND
33486: IFFALSE 33561
// begin tmp := result ;
33488: LD_ADDR_VAR 0 9
33492: PUSH
33493: LD_VAR 0 6
33497: ST_TO_ADDR
// for i = tmp downto 1 do
33498: LD_ADDR_VAR 0 7
33502: PUSH
33503: DOUBLE
33504: LD_VAR 0 9
33508: INC
33509: ST_TO_ADDR
33510: LD_INT 1
33512: PUSH
33513: FOR_DOWNTO
33514: IFFALSE 33559
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33516: LD_ADDR_VAR 0 6
33520: PUSH
33521: LD_VAR 0 6
33525: PPUSH
33526: LD_VAR 0 9
33530: PUSH
33531: LD_VAR 0 7
33535: MINUS
33536: PUSH
33537: LD_INT 1
33539: PLUS
33540: PPUSH
33541: LD_VAR 0 9
33545: PUSH
33546: LD_VAR 0 7
33550: ARRAY
33551: PPUSH
33552: CALL_OW 1
33556: ST_TO_ADDR
33557: GO 33513
33559: POP
33560: POP
// end ; tmp := [ ] ;
33561: LD_ADDR_VAR 0 9
33565: PUSH
33566: EMPTY
33567: ST_TO_ADDR
// if mode then
33568: LD_VAR 0 5
33572: IFFALSE 33641
// begin for i = 1 to result do
33574: LD_ADDR_VAR 0 7
33578: PUSH
33579: DOUBLE
33580: LD_INT 1
33582: DEC
33583: ST_TO_ADDR
33584: LD_VAR 0 6
33588: PUSH
33589: FOR_TO
33590: IFFALSE 33629
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33592: LD_ADDR_VAR 0 9
33596: PUSH
33597: LD_VAR 0 9
33601: PPUSH
33602: LD_VAR 0 7
33606: PPUSH
33607: LD_VAR 0 6
33611: PUSH
33612: LD_VAR 0 7
33616: ARRAY
33617: PUSH
33618: LD_INT 1
33620: ARRAY
33621: PPUSH
33622: CALL_OW 1
33626: ST_TO_ADDR
33627: GO 33589
33629: POP
33630: POP
// result := tmp ;
33631: LD_ADDR_VAR 0 6
33635: PUSH
33636: LD_VAR 0 9
33640: ST_TO_ADDR
// end ; end ;
33641: LD_VAR 0 6
33645: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33646: LD_INT 0
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
// if not x or not y then
33676: LD_VAR 0 2
33680: NOT
33681: PUSH
33682: LD_VAR 0 3
33686: NOT
33687: OR
33688: IFFALSE 33692
// exit ;
33690: GO 35344
// if not range then
33692: LD_VAR 0 4
33696: NOT
33697: IFFALSE 33707
// range := 10 ;
33699: LD_ADDR_VAR 0 4
33703: PUSH
33704: LD_INT 10
33706: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33707: LD_ADDR_VAR 0 8
33711: PUSH
33712: LD_INT 81
33714: PUSH
33715: LD_VAR 0 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 92
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_VAR 0 3
33736: PUSH
33737: LD_VAR 0 4
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: LD_INT 21
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: PPUSH
33770: CALL_OW 69
33774: ST_TO_ADDR
// if not tmp then
33775: LD_VAR 0 8
33779: NOT
33780: IFFALSE 33784
// exit ;
33782: GO 35344
// for i in tmp do
33784: LD_ADDR_VAR 0 6
33788: PUSH
33789: LD_VAR 0 8
33793: PUSH
33794: FOR_IN
33795: IFFALSE 35319
// begin points := [ 0 , 0 , 0 ] ;
33797: LD_ADDR_VAR 0 9
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: ST_TO_ADDR
// bpoints := 1 ;
33816: LD_ADDR_VAR 0 10
33820: PUSH
33821: LD_INT 1
33823: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33824: LD_VAR 0 6
33828: PPUSH
33829: CALL_OW 247
33833: PUSH
33834: LD_INT 1
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 34420
33842: POP
// begin if GetClass ( i ) = 1 then
33843: LD_VAR 0 6
33847: PPUSH
33848: CALL_OW 257
33852: PUSH
33853: LD_INT 1
33855: EQUAL
33856: IFFALSE 33877
// points := [ 10 , 5 , 3 ] ;
33858: LD_ADDR_VAR 0 9
33862: PUSH
33863: LD_INT 10
33865: PUSH
33866: LD_INT 5
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33877: LD_VAR 0 6
33881: PPUSH
33882: CALL_OW 257
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 4
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: IN
33901: IFFALSE 33922
// points := [ 3 , 2 , 1 ] ;
33903: LD_ADDR_VAR 0 9
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33922: LD_VAR 0 6
33926: PPUSH
33927: CALL_OW 257
33931: PUSH
33932: LD_INT 5
33934: EQUAL
33935: IFFALSE 33956
// points := [ 130 , 5 , 2 ] ;
33937: LD_ADDR_VAR 0 9
33941: PUSH
33942: LD_INT 130
33944: PUSH
33945: LD_INT 5
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33956: LD_VAR 0 6
33960: PPUSH
33961: CALL_OW 257
33965: PUSH
33966: LD_INT 8
33968: EQUAL
33969: IFFALSE 33990
// points := [ 35 , 35 , 30 ] ;
33971: LD_ADDR_VAR 0 9
33975: PUSH
33976: LD_INT 35
33978: PUSH
33979: LD_INT 35
33981: PUSH
33982: LD_INT 30
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33990: LD_VAR 0 6
33994: PPUSH
33995: CALL_OW 257
33999: PUSH
34000: LD_INT 9
34002: EQUAL
34003: IFFALSE 34024
// points := [ 20 , 55 , 40 ] ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_INT 20
34012: PUSH
34013: LD_INT 55
34015: PUSH
34016: LD_INT 40
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34024: LD_VAR 0 6
34028: PPUSH
34029: CALL_OW 257
34033: PUSH
34034: LD_INT 12
34036: PUSH
34037: LD_INT 16
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: IN
34044: IFFALSE 34065
// points := [ 5 , 3 , 2 ] ;
34046: LD_ADDR_VAR 0 9
34050: PUSH
34051: LD_INT 5
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34065: LD_VAR 0 6
34069: PPUSH
34070: CALL_OW 257
34074: PUSH
34075: LD_INT 17
34077: EQUAL
34078: IFFALSE 34099
// points := [ 100 , 50 , 75 ] ;
34080: LD_ADDR_VAR 0 9
34084: PUSH
34085: LD_INT 100
34087: PUSH
34088: LD_INT 50
34090: PUSH
34091: LD_INT 75
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34099: LD_VAR 0 6
34103: PPUSH
34104: CALL_OW 257
34108: PUSH
34109: LD_INT 15
34111: EQUAL
34112: IFFALSE 34133
// points := [ 10 , 5 , 3 ] ;
34114: LD_ADDR_VAR 0 9
34118: PUSH
34119: LD_INT 10
34121: PUSH
34122: LD_INT 5
34124: PUSH
34125: LD_INT 3
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34133: LD_VAR 0 6
34137: PPUSH
34138: CALL_OW 257
34142: PUSH
34143: LD_INT 14
34145: EQUAL
34146: IFFALSE 34167
// points := [ 10 , 0 , 0 ] ;
34148: LD_ADDR_VAR 0 9
34152: PUSH
34153: LD_INT 10
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34167: LD_VAR 0 6
34171: PPUSH
34172: CALL_OW 257
34176: PUSH
34177: LD_INT 11
34179: EQUAL
34180: IFFALSE 34201
// points := [ 30 , 10 , 5 ] ;
34182: LD_ADDR_VAR 0 9
34186: PUSH
34187: LD_INT 30
34189: PUSH
34190: LD_INT 10
34192: PUSH
34193: LD_INT 5
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34201: LD_VAR 0 1
34205: PPUSH
34206: LD_INT 5
34208: PPUSH
34209: CALL_OW 321
34213: PUSH
34214: LD_INT 2
34216: EQUAL
34217: IFFALSE 34234
// bpoints := bpoints * 1.8 ;
34219: LD_ADDR_VAR 0 10
34223: PUSH
34224: LD_VAR 0 10
34228: PUSH
34229: LD_REAL  1.80000000000000E+0000
34232: MUL
34233: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 257
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: IN
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: LD_INT 51
34270: PPUSH
34271: CALL_OW 321
34275: PUSH
34276: LD_INT 2
34278: EQUAL
34279: AND
34280: IFFALSE 34297
// bpoints := bpoints * 1.2 ;
34282: LD_ADDR_VAR 0 10
34286: PUSH
34287: LD_VAR 0 10
34291: PUSH
34292: LD_REAL  1.20000000000000E+0000
34295: MUL
34296: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34297: LD_VAR 0 6
34301: PPUSH
34302: CALL_OW 257
34306: PUSH
34307: LD_INT 5
34309: PUSH
34310: LD_INT 7
34312: PUSH
34313: LD_INT 9
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: IN
34321: PUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: LD_INT 52
34329: PPUSH
34330: CALL_OW 321
34334: PUSH
34335: LD_INT 2
34337: EQUAL
34338: AND
34339: IFFALSE 34356
// bpoints := bpoints * 1.5 ;
34341: LD_ADDR_VAR 0 10
34345: PUSH
34346: LD_VAR 0 10
34350: PUSH
34351: LD_REAL  1.50000000000000E+0000
34354: MUL
34355: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34356: LD_VAR 0 1
34360: PPUSH
34361: LD_INT 66
34363: PPUSH
34364: CALL_OW 321
34368: PUSH
34369: LD_INT 2
34371: EQUAL
34372: IFFALSE 34389
// bpoints := bpoints * 1.1 ;
34374: LD_ADDR_VAR 0 10
34378: PUSH
34379: LD_VAR 0 10
34383: PUSH
34384: LD_REAL  1.10000000000000E+0000
34387: MUL
34388: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34389: LD_ADDR_VAR 0 10
34393: PUSH
34394: LD_VAR 0 10
34398: PUSH
34399: LD_VAR 0 6
34403: PPUSH
34404: LD_INT 1
34406: PPUSH
34407: CALL_OW 259
34411: PUSH
34412: LD_REAL  1.15000000000000E+0000
34415: MUL
34416: MUL
34417: ST_TO_ADDR
// end ; unit_vehicle :
34418: GO 35248
34420: LD_INT 2
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 35236
34428: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34429: LD_VAR 0 6
34433: PPUSH
34434: CALL_OW 264
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 42
34444: PUSH
34445: LD_INT 24
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: IN
34453: IFFALSE 34474
// points := [ 25 , 5 , 3 ] ;
34455: LD_ADDR_VAR 0 9
34459: PUSH
34460: LD_INT 25
34462: PUSH
34463: LD_INT 5
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34474: LD_VAR 0 6
34478: PPUSH
34479: CALL_OW 264
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 43
34489: PUSH
34490: LD_INT 25
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: IN
34498: IFFALSE 34519
// points := [ 40 , 15 , 5 ] ;
34500: LD_ADDR_VAR 0 9
34504: PUSH
34505: LD_INT 40
34507: PUSH
34508: LD_INT 15
34510: PUSH
34511: LD_INT 5
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34519: LD_VAR 0 6
34523: PPUSH
34524: CALL_OW 264
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 23
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: IN
34539: IFFALSE 34560
// points := [ 7 , 25 , 8 ] ;
34541: LD_ADDR_VAR 0 9
34545: PUSH
34546: LD_INT 7
34548: PUSH
34549: LD_INT 25
34551: PUSH
34552: LD_INT 8
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34560: LD_VAR 0 6
34564: PPUSH
34565: CALL_OW 264
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: LD_INT 27
34575: PUSH
34576: LD_INT 44
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: IN
34584: IFFALSE 34605
// points := [ 14 , 50 , 16 ] ;
34586: LD_ADDR_VAR 0 9
34590: PUSH
34591: LD_INT 14
34593: PUSH
34594: LD_INT 50
34596: PUSH
34597: LD_INT 16
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34605: LD_VAR 0 6
34609: PPUSH
34610: CALL_OW 264
34614: PUSH
34615: LD_INT 6
34617: PUSH
34618: LD_INT 46
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: IN
34625: IFFALSE 34646
// points := [ 32 , 120 , 70 ] ;
34627: LD_ADDR_VAR 0 9
34631: PUSH
34632: LD_INT 32
34634: PUSH
34635: LD_INT 120
34637: PUSH
34638: LD_INT 70
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34646: LD_VAR 0 6
34650: PPUSH
34651: CALL_OW 264
34655: PUSH
34656: LD_INT 7
34658: PUSH
34659: LD_INT 28
34661: PUSH
34662: LD_INT 45
34664: PUSH
34665: LD_EXP 57
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: IN
34676: IFFALSE 34697
// points := [ 35 , 20 , 45 ] ;
34678: LD_ADDR_VAR 0 9
34682: PUSH
34683: LD_INT 35
34685: PUSH
34686: LD_INT 20
34688: PUSH
34689: LD_INT 45
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34697: LD_VAR 0 6
34701: PPUSH
34702: CALL_OW 264
34706: PUSH
34707: LD_INT 47
34709: PUSH
34710: EMPTY
34711: LIST
34712: IN
34713: IFFALSE 34734
// points := [ 67 , 45 , 75 ] ;
34715: LD_ADDR_VAR 0 9
34719: PUSH
34720: LD_INT 67
34722: PUSH
34723: LD_INT 45
34725: PUSH
34726: LD_INT 75
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34734: LD_VAR 0 6
34738: PPUSH
34739: CALL_OW 264
34743: PUSH
34744: LD_INT 26
34746: PUSH
34747: EMPTY
34748: LIST
34749: IN
34750: IFFALSE 34771
// points := [ 120 , 30 , 80 ] ;
34752: LD_ADDR_VAR 0 9
34756: PUSH
34757: LD_INT 120
34759: PUSH
34760: LD_INT 30
34762: PUSH
34763: LD_INT 80
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34771: LD_VAR 0 6
34775: PPUSH
34776: CALL_OW 264
34780: PUSH
34781: LD_INT 22
34783: PUSH
34784: EMPTY
34785: LIST
34786: IN
34787: IFFALSE 34808
// points := [ 40 , 1 , 1 ] ;
34789: LD_ADDR_VAR 0 9
34793: PUSH
34794: LD_INT 40
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34808: LD_VAR 0 6
34812: PPUSH
34813: CALL_OW 264
34817: PUSH
34818: LD_INT 29
34820: PUSH
34821: EMPTY
34822: LIST
34823: IN
34824: IFFALSE 34845
// points := [ 70 , 200 , 400 ] ;
34826: LD_ADDR_VAR 0 9
34830: PUSH
34831: LD_INT 70
34833: PUSH
34834: LD_INT 200
34836: PUSH
34837: LD_INT 400
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34845: LD_VAR 0 6
34849: PPUSH
34850: CALL_OW 264
34854: PUSH
34855: LD_INT 14
34857: PUSH
34858: LD_INT 53
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: IN
34865: IFFALSE 34886
// points := [ 40 , 10 , 20 ] ;
34867: LD_ADDR_VAR 0 9
34871: PUSH
34872: LD_INT 40
34874: PUSH
34875: LD_INT 10
34877: PUSH
34878: LD_INT 20
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34886: LD_VAR 0 6
34890: PPUSH
34891: CALL_OW 264
34895: PUSH
34896: LD_INT 9
34898: PUSH
34899: EMPTY
34900: LIST
34901: IN
34902: IFFALSE 34923
// points := [ 5 , 70 , 20 ] ;
34904: LD_ADDR_VAR 0 9
34908: PUSH
34909: LD_INT 5
34911: PUSH
34912: LD_INT 70
34914: PUSH
34915: LD_INT 20
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34923: LD_VAR 0 6
34927: PPUSH
34928: CALL_OW 264
34932: PUSH
34933: LD_INT 10
34935: PUSH
34936: EMPTY
34937: LIST
34938: IN
34939: IFFALSE 34960
// points := [ 35 , 110 , 70 ] ;
34941: LD_ADDR_VAR 0 9
34945: PUSH
34946: LD_INT 35
34948: PUSH
34949: LD_INT 110
34951: PUSH
34952: LD_INT 70
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34960: LD_VAR 0 6
34964: PPUSH
34965: CALL_OW 265
34969: PUSH
34970: LD_INT 25
34972: EQUAL
34973: IFFALSE 34994
// points := [ 80 , 65 , 100 ] ;
34975: LD_ADDR_VAR 0 9
34979: PUSH
34980: LD_INT 80
34982: PUSH
34983: LD_INT 65
34985: PUSH
34986: LD_INT 100
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34994: LD_VAR 0 6
34998: PPUSH
34999: CALL_OW 263
35003: PUSH
35004: LD_INT 1
35006: EQUAL
35007: IFFALSE 35042
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35009: LD_ADDR_VAR 0 10
35013: PUSH
35014: LD_VAR 0 10
35018: PUSH
35019: LD_VAR 0 6
35023: PPUSH
35024: CALL_OW 311
35028: PPUSH
35029: LD_INT 3
35031: PPUSH
35032: CALL_OW 259
35036: PUSH
35037: LD_INT 4
35039: MUL
35040: MUL
35041: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35042: LD_VAR 0 6
35046: PPUSH
35047: CALL_OW 263
35051: PUSH
35052: LD_INT 2
35054: EQUAL
35055: IFFALSE 35106
// begin j := IsControledBy ( i ) ;
35057: LD_ADDR_VAR 0 7
35061: PUSH
35062: LD_VAR 0 6
35066: PPUSH
35067: CALL_OW 312
35071: ST_TO_ADDR
// if j then
35072: LD_VAR 0 7
35076: IFFALSE 35106
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35078: LD_ADDR_VAR 0 10
35082: PUSH
35083: LD_VAR 0 10
35087: PUSH
35088: LD_VAR 0 7
35092: PPUSH
35093: LD_INT 3
35095: PPUSH
35096: CALL_OW 259
35100: PUSH
35101: LD_INT 3
35103: MUL
35104: MUL
35105: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35106: LD_VAR 0 6
35110: PPUSH
35111: CALL_OW 264
35115: PUSH
35116: LD_INT 5
35118: PUSH
35119: LD_INT 6
35121: PUSH
35122: LD_INT 46
35124: PUSH
35125: LD_INT 44
35127: PUSH
35128: LD_INT 47
35130: PUSH
35131: LD_INT 45
35133: PUSH
35134: LD_INT 28
35136: PUSH
35137: LD_INT 7
35139: PUSH
35140: LD_INT 27
35142: PUSH
35143: LD_INT 29
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: IN
35158: PUSH
35159: LD_VAR 0 1
35163: PPUSH
35164: LD_INT 52
35166: PPUSH
35167: CALL_OW 321
35171: PUSH
35172: LD_INT 2
35174: EQUAL
35175: AND
35176: IFFALSE 35193
// bpoints := bpoints * 1.2 ;
35178: LD_ADDR_VAR 0 10
35182: PUSH
35183: LD_VAR 0 10
35187: PUSH
35188: LD_REAL  1.20000000000000E+0000
35191: MUL
35192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35193: LD_VAR 0 6
35197: PPUSH
35198: CALL_OW 264
35202: PUSH
35203: LD_INT 6
35205: PUSH
35206: LD_INT 46
35208: PUSH
35209: LD_INT 47
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: IN
35217: IFFALSE 35234
// bpoints := bpoints * 1.2 ;
35219: LD_ADDR_VAR 0 10
35223: PUSH
35224: LD_VAR 0 10
35228: PUSH
35229: LD_REAL  1.20000000000000E+0000
35232: MUL
35233: ST_TO_ADDR
// end ; unit_building :
35234: GO 35248
35236: LD_INT 3
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35247
35244: POP
// ; end ;
35245: GO 35248
35247: POP
// for j = 1 to 3 do
35248: LD_ADDR_VAR 0 7
35252: PUSH
35253: DOUBLE
35254: LD_INT 1
35256: DEC
35257: ST_TO_ADDR
35258: LD_INT 3
35260: PUSH
35261: FOR_TO
35262: IFFALSE 35315
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35264: LD_ADDR_VAR 0 5
35268: PUSH
35269: LD_VAR 0 5
35273: PPUSH
35274: LD_VAR 0 7
35278: PPUSH
35279: LD_VAR 0 5
35283: PUSH
35284: LD_VAR 0 7
35288: ARRAY
35289: PUSH
35290: LD_VAR 0 9
35294: PUSH
35295: LD_VAR 0 7
35299: ARRAY
35300: PUSH
35301: LD_VAR 0 10
35305: MUL
35306: PLUS
35307: PPUSH
35308: CALL_OW 1
35312: ST_TO_ADDR
35313: GO 35261
35315: POP
35316: POP
// end ;
35317: GO 33794
35319: POP
35320: POP
// result := Replace ( result , 4 , tmp ) ;
35321: LD_ADDR_VAR 0 5
35325: PUSH
35326: LD_VAR 0 5
35330: PPUSH
35331: LD_INT 4
35333: PPUSH
35334: LD_VAR 0 8
35338: PPUSH
35339: CALL_OW 1
35343: ST_TO_ADDR
// end ;
35344: LD_VAR 0 5
35348: RET
// export function DangerAtRange ( unit , range ) ; begin
35349: LD_INT 0
35351: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35352: LD_ADDR_VAR 0 3
35356: PUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 255
35366: PPUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 250
35376: PPUSH
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 251
35386: PPUSH
35387: LD_VAR 0 2
35391: PPUSH
35392: CALL 33646 0 4
35396: ST_TO_ADDR
// end ;
35397: LD_VAR 0 3
35401: RET
// export function DangerInArea ( side , area ) ; begin
35402: LD_INT 0
35404: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35405: LD_ADDR_VAR 0 3
35409: PUSH
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_INT 81
35417: PUSH
35418: LD_VAR 0 1
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PPUSH
35427: CALL_OW 70
35431: ST_TO_ADDR
// end ;
35432: LD_VAR 0 3
35436: RET
// export function IsExtension ( b ) ; begin
35437: LD_INT 0
35439: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35440: LD_ADDR_VAR 0 2
35444: PUSH
35445: LD_VAR 0 1
35449: PUSH
35450: LD_INT 23
35452: PUSH
35453: LD_INT 20
35455: PUSH
35456: LD_INT 22
35458: PUSH
35459: LD_INT 17
35461: PUSH
35462: LD_INT 24
35464: PUSH
35465: LD_INT 21
35467: PUSH
35468: LD_INT 19
35470: PUSH
35471: LD_INT 16
35473: PUSH
35474: LD_INT 25
35476: PUSH
35477: LD_INT 18
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: IN
35492: ST_TO_ADDR
// end ;
35493: LD_VAR 0 2
35497: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35498: LD_INT 0
35500: PPUSH
35501: PPUSH
35502: PPUSH
// result := [ ] ;
35503: LD_ADDR_VAR 0 4
35507: PUSH
35508: EMPTY
35509: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35510: LD_ADDR_VAR 0 5
35514: PUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: LD_INT 21
35522: PUSH
35523: LD_INT 3
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PPUSH
35530: CALL_OW 70
35534: ST_TO_ADDR
// if not tmp then
35535: LD_VAR 0 5
35539: NOT
35540: IFFALSE 35544
// exit ;
35542: GO 35608
// if checkLink then
35544: LD_VAR 0 3
35548: IFFALSE 35598
// begin for i in tmp do
35550: LD_ADDR_VAR 0 6
35554: PUSH
35555: LD_VAR 0 5
35559: PUSH
35560: FOR_IN
35561: IFFALSE 35596
// if GetBase ( i ) <> base then
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 274
35572: PUSH
35573: LD_VAR 0 1
35577: NONEQUAL
35578: IFFALSE 35594
// ComLinkToBase ( base , i ) ;
35580: LD_VAR 0 1
35584: PPUSH
35585: LD_VAR 0 6
35589: PPUSH
35590: CALL_OW 169
35594: GO 35560
35596: POP
35597: POP
// end ; result := tmp ;
35598: LD_ADDR_VAR 0 4
35602: PUSH
35603: LD_VAR 0 5
35607: ST_TO_ADDR
// end ;
35608: LD_VAR 0 4
35612: RET
// export function ComComplete ( units , b ) ; var i ; begin
35613: LD_INT 0
35615: PPUSH
35616: PPUSH
// if not units then
35617: LD_VAR 0 1
35621: NOT
35622: IFFALSE 35626
// exit ;
35624: GO 35716
// for i in units do
35626: LD_ADDR_VAR 0 4
35630: PUSH
35631: LD_VAR 0 1
35635: PUSH
35636: FOR_IN
35637: IFFALSE 35714
// if BuildingStatus ( b ) = bs_build then
35639: LD_VAR 0 2
35643: PPUSH
35644: CALL_OW 461
35648: PUSH
35649: LD_INT 1
35651: EQUAL
35652: IFFALSE 35712
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35654: LD_VAR 0 4
35658: PPUSH
35659: LD_STRING h
35661: PUSH
35662: LD_VAR 0 2
35666: PPUSH
35667: CALL_OW 250
35671: PUSH
35672: LD_VAR 0 2
35676: PPUSH
35677: CALL_OW 251
35681: PUSH
35682: LD_VAR 0 2
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: PPUSH
35708: CALL_OW 446
35712: GO 35636
35714: POP
35715: POP
// end ;
35716: LD_VAR 0 3
35720: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35721: LD_INT 0
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35729: LD_VAR 0 1
35733: NOT
35734: PUSH
35735: LD_VAR 0 1
35739: PPUSH
35740: CALL_OW 263
35744: PUSH
35745: LD_INT 2
35747: NONEQUAL
35748: OR
35749: IFFALSE 35753
// exit ;
35751: GO 36069
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35753: LD_ADDR_VAR 0 6
35757: PUSH
35758: LD_INT 22
35760: PUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 255
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 30
35780: PUSH
35781: LD_INT 36
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 34
35790: PUSH
35791: LD_INT 31
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PPUSH
35807: CALL_OW 69
35811: ST_TO_ADDR
// if not tmp then
35812: LD_VAR 0 6
35816: NOT
35817: IFFALSE 35821
// exit ;
35819: GO 36069
// result := [ ] ;
35821: LD_ADDR_VAR 0 2
35825: PUSH
35826: EMPTY
35827: ST_TO_ADDR
// for i in tmp do
35828: LD_ADDR_VAR 0 3
35832: PUSH
35833: LD_VAR 0 6
35837: PUSH
35838: FOR_IN
35839: IFFALSE 35910
// begin t := UnitsInside ( i ) ;
35841: LD_ADDR_VAR 0 4
35845: PUSH
35846: LD_VAR 0 3
35850: PPUSH
35851: CALL_OW 313
35855: ST_TO_ADDR
// if t then
35856: LD_VAR 0 4
35860: IFFALSE 35908
// for j in t do
35862: LD_ADDR_VAR 0 7
35866: PUSH
35867: LD_VAR 0 4
35871: PUSH
35872: FOR_IN
35873: IFFALSE 35906
// result := Replace ( result , result + 1 , j ) ;
35875: LD_ADDR_VAR 0 2
35879: PUSH
35880: LD_VAR 0 2
35884: PPUSH
35885: LD_VAR 0 2
35889: PUSH
35890: LD_INT 1
35892: PLUS
35893: PPUSH
35894: LD_VAR 0 7
35898: PPUSH
35899: CALL_OW 1
35903: ST_TO_ADDR
35904: GO 35872
35906: POP
35907: POP
// end ;
35908: GO 35838
35910: POP
35911: POP
// if not result then
35912: LD_VAR 0 2
35916: NOT
35917: IFFALSE 35921
// exit ;
35919: GO 36069
// mech := result [ 1 ] ;
35921: LD_ADDR_VAR 0 5
35925: PUSH
35926: LD_VAR 0 2
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: ST_TO_ADDR
// if result > 1 then
35935: LD_VAR 0 2
35939: PUSH
35940: LD_INT 1
35942: GREATER
35943: IFFALSE 36055
// begin for i = 2 to result do
35945: LD_ADDR_VAR 0 3
35949: PUSH
35950: DOUBLE
35951: LD_INT 2
35953: DEC
35954: ST_TO_ADDR
35955: LD_VAR 0 2
35959: PUSH
35960: FOR_TO
35961: IFFALSE 36053
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35963: LD_ADDR_VAR 0 4
35967: PUSH
35968: LD_VAR 0 2
35972: PUSH
35973: LD_VAR 0 3
35977: ARRAY
35978: PPUSH
35979: LD_INT 3
35981: PPUSH
35982: CALL_OW 259
35986: PUSH
35987: LD_VAR 0 2
35991: PUSH
35992: LD_VAR 0 3
35996: ARRAY
35997: PPUSH
35998: CALL_OW 432
36002: MINUS
36003: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36004: LD_VAR 0 4
36008: PUSH
36009: LD_VAR 0 5
36013: PPUSH
36014: LD_INT 3
36016: PPUSH
36017: CALL_OW 259
36021: PUSH
36022: LD_VAR 0 5
36026: PPUSH
36027: CALL_OW 432
36031: MINUS
36032: GREATEREQUAL
36033: IFFALSE 36051
// mech := result [ i ] ;
36035: LD_ADDR_VAR 0 5
36039: PUSH
36040: LD_VAR 0 2
36044: PUSH
36045: LD_VAR 0 3
36049: ARRAY
36050: ST_TO_ADDR
// end ;
36051: GO 35960
36053: POP
36054: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36055: LD_VAR 0 1
36059: PPUSH
36060: LD_VAR 0 5
36064: PPUSH
36065: CALL_OW 135
// end ;
36069: LD_VAR 0 2
36073: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36074: LD_INT 0
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
// result := [ ] ;
36089: LD_ADDR_VAR 0 7
36093: PUSH
36094: EMPTY
36095: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 266
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: IN
36116: NOT
36117: IFFALSE 36121
// exit ;
36119: GO 37755
// if name then
36121: LD_VAR 0 3
36125: IFFALSE 36141
// SetBName ( base_dep , name ) ;
36127: LD_VAR 0 1
36131: PPUSH
36132: LD_VAR 0 3
36136: PPUSH
36137: CALL_OW 500
// base := GetBase ( base_dep ) ;
36141: LD_ADDR_VAR 0 15
36145: PUSH
36146: LD_VAR 0 1
36150: PPUSH
36151: CALL_OW 274
36155: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36156: LD_ADDR_VAR 0 16
36160: PUSH
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL_OW 255
36170: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36171: LD_ADDR_VAR 0 17
36175: PUSH
36176: LD_VAR 0 1
36180: PPUSH
36181: CALL_OW 248
36185: ST_TO_ADDR
// if sources then
36186: LD_VAR 0 5
36190: IFFALSE 36237
// for i = 1 to 3 do
36192: LD_ADDR_VAR 0 8
36196: PUSH
36197: DOUBLE
36198: LD_INT 1
36200: DEC
36201: ST_TO_ADDR
36202: LD_INT 3
36204: PUSH
36205: FOR_TO
36206: IFFALSE 36235
// AddResourceType ( base , i , sources [ i ] ) ;
36208: LD_VAR 0 15
36212: PPUSH
36213: LD_VAR 0 8
36217: PPUSH
36218: LD_VAR 0 5
36222: PUSH
36223: LD_VAR 0 8
36227: ARRAY
36228: PPUSH
36229: CALL_OW 276
36233: GO 36205
36235: POP
36236: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36237: LD_ADDR_VAR 0 18
36241: PUSH
36242: LD_VAR 0 15
36246: PPUSH
36247: LD_VAR 0 2
36251: PPUSH
36252: LD_INT 1
36254: PPUSH
36255: CALL 35498 0 3
36259: ST_TO_ADDR
// InitHc ;
36260: CALL_OW 19
// InitUc ;
36264: CALL_OW 18
// uc_side := side ;
36268: LD_ADDR_OWVAR 20
36272: PUSH
36273: LD_VAR 0 16
36277: ST_TO_ADDR
// uc_nation := nation ;
36278: LD_ADDR_OWVAR 21
36282: PUSH
36283: LD_VAR 0 17
36287: ST_TO_ADDR
// if buildings then
36288: LD_VAR 0 18
36292: IFFALSE 37614
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36294: LD_ADDR_VAR 0 19
36298: PUSH
36299: LD_VAR 0 18
36303: PPUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 30
36309: PUSH
36310: LD_INT 29
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 30
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: PPUSH
36332: CALL_OW 72
36336: ST_TO_ADDR
// if tmp then
36337: LD_VAR 0 19
36341: IFFALSE 36389
// for i in tmp do
36343: LD_ADDR_VAR 0 8
36347: PUSH
36348: LD_VAR 0 19
36352: PUSH
36353: FOR_IN
36354: IFFALSE 36387
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36356: LD_VAR 0 8
36360: PPUSH
36361: CALL_OW 250
36365: PPUSH
36366: LD_VAR 0 8
36370: PPUSH
36371: CALL_OW 251
36375: PPUSH
36376: LD_VAR 0 16
36380: PPUSH
36381: CALL_OW 441
36385: GO 36353
36387: POP
36388: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36389: LD_VAR 0 18
36393: PPUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 30
36399: PUSH
36400: LD_INT 32
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 30
36409: PUSH
36410: LD_INT 33
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: PPUSH
36422: CALL_OW 72
36426: IFFALSE 36514
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36428: LD_ADDR_VAR 0 8
36432: PUSH
36433: LD_VAR 0 18
36437: PPUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 30
36443: PUSH
36444: LD_INT 32
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 30
36453: PUSH
36454: LD_INT 33
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PPUSH
36466: CALL_OW 72
36470: PUSH
36471: FOR_IN
36472: IFFALSE 36512
// begin if not GetBWeapon ( i ) then
36474: LD_VAR 0 8
36478: PPUSH
36479: CALL_OW 269
36483: NOT
36484: IFFALSE 36510
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36486: LD_VAR 0 8
36490: PPUSH
36491: LD_VAR 0 8
36495: PPUSH
36496: LD_VAR 0 2
36500: PPUSH
36501: CALL 37760 0 2
36505: PPUSH
36506: CALL_OW 431
// end ;
36510: GO 36471
36512: POP
36513: POP
// end ; for i = 1 to personel do
36514: LD_ADDR_VAR 0 8
36518: PUSH
36519: DOUBLE
36520: LD_INT 1
36522: DEC
36523: ST_TO_ADDR
36524: LD_VAR 0 6
36528: PUSH
36529: FOR_TO
36530: IFFALSE 37594
// begin if i > 4 then
36532: LD_VAR 0 8
36536: PUSH
36537: LD_INT 4
36539: GREATER
36540: IFFALSE 36544
// break ;
36542: GO 37594
// case i of 1 :
36544: LD_VAR 0 8
36548: PUSH
36549: LD_INT 1
36551: DOUBLE
36552: EQUAL
36553: IFTRUE 36557
36555: GO 36637
36557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36558: LD_ADDR_VAR 0 12
36562: PUSH
36563: LD_VAR 0 18
36567: PPUSH
36568: LD_INT 22
36570: PUSH
36571: LD_VAR 0 16
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 58
36582: PUSH
36583: EMPTY
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: LD_INT 30
36591: PUSH
36592: LD_INT 32
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 30
36601: PUSH
36602: LD_INT 4
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: LD_INT 5
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: PPUSH
36630: CALL_OW 72
36634: ST_TO_ADDR
36635: GO 36859
36637: LD_INT 2
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36707
36645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36646: LD_ADDR_VAR 0 12
36650: PUSH
36651: LD_VAR 0 18
36655: PPUSH
36656: LD_INT 22
36658: PUSH
36659: LD_VAR 0 16
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 30
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 30
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PPUSH
36700: CALL_OW 72
36704: ST_TO_ADDR
36705: GO 36859
36707: LD_INT 3
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36715
36713: GO 36777
36715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36716: LD_ADDR_VAR 0 12
36720: PUSH
36721: LD_VAR 0 18
36725: PPUSH
36726: LD_INT 22
36728: PUSH
36729: LD_VAR 0 16
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 30
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 30
36753: PUSH
36754: LD_INT 3
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PPUSH
36770: CALL_OW 72
36774: ST_TO_ADDR
36775: GO 36859
36777: LD_INT 4
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36858
36785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36786: LD_ADDR_VAR 0 12
36790: PUSH
36791: LD_VAR 0 18
36795: PPUSH
36796: LD_INT 22
36798: PUSH
36799: LD_VAR 0 16
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 30
36813: PUSH
36814: LD_INT 6
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 30
36823: PUSH
36824: LD_INT 7
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 30
36833: PUSH
36834: LD_INT 8
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PPUSH
36851: CALL_OW 72
36855: ST_TO_ADDR
36856: GO 36859
36858: POP
// if i = 1 then
36859: LD_VAR 0 8
36863: PUSH
36864: LD_INT 1
36866: EQUAL
36867: IFFALSE 36978
// begin tmp := [ ] ;
36869: LD_ADDR_VAR 0 19
36873: PUSH
36874: EMPTY
36875: ST_TO_ADDR
// for j in f do
36876: LD_ADDR_VAR 0 9
36880: PUSH
36881: LD_VAR 0 12
36885: PUSH
36886: FOR_IN
36887: IFFALSE 36960
// if GetBType ( j ) = b_bunker then
36889: LD_VAR 0 9
36893: PPUSH
36894: CALL_OW 266
36898: PUSH
36899: LD_INT 32
36901: EQUAL
36902: IFFALSE 36929
// tmp := Insert ( tmp , 1 , j ) else
36904: LD_ADDR_VAR 0 19
36908: PUSH
36909: LD_VAR 0 19
36913: PPUSH
36914: LD_INT 1
36916: PPUSH
36917: LD_VAR 0 9
36921: PPUSH
36922: CALL_OW 2
36926: ST_TO_ADDR
36927: GO 36958
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36929: LD_ADDR_VAR 0 19
36933: PUSH
36934: LD_VAR 0 19
36938: PPUSH
36939: LD_VAR 0 19
36943: PUSH
36944: LD_INT 1
36946: PLUS
36947: PPUSH
36948: LD_VAR 0 9
36952: PPUSH
36953: CALL_OW 2
36957: ST_TO_ADDR
36958: GO 36886
36960: POP
36961: POP
// if tmp then
36962: LD_VAR 0 19
36966: IFFALSE 36978
// f := tmp ;
36968: LD_ADDR_VAR 0 12
36972: PUSH
36973: LD_VAR 0 19
36977: ST_TO_ADDR
// end ; x := personel [ i ] ;
36978: LD_ADDR_VAR 0 13
36982: PUSH
36983: LD_VAR 0 6
36987: PUSH
36988: LD_VAR 0 8
36992: ARRAY
36993: ST_TO_ADDR
// if x = - 1 then
36994: LD_VAR 0 13
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: EQUAL
37003: IFFALSE 37212
// begin for j in f do
37005: LD_ADDR_VAR 0 9
37009: PUSH
37010: LD_VAR 0 12
37014: PUSH
37015: FOR_IN
37016: IFFALSE 37208
// repeat InitHc ;
37018: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37022: LD_VAR 0 9
37026: PPUSH
37027: CALL_OW 266
37031: PUSH
37032: LD_INT 5
37034: EQUAL
37035: IFFALSE 37105
// begin if UnitsInside ( j ) < 3 then
37037: LD_VAR 0 9
37041: PPUSH
37042: CALL_OW 313
37046: PUSH
37047: LD_INT 3
37049: LESS
37050: IFFALSE 37086
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37052: LD_INT 0
37054: PPUSH
37055: LD_INT 5
37057: PUSH
37058: LD_INT 8
37060: PUSH
37061: LD_INT 9
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: PUSH
37069: LD_VAR 0 17
37073: ARRAY
37074: PPUSH
37075: LD_VAR 0 4
37079: PPUSH
37080: CALL_OW 380
37084: GO 37103
// PrepareHuman ( false , i , skill ) ;
37086: LD_INT 0
37088: PPUSH
37089: LD_VAR 0 8
37093: PPUSH
37094: LD_VAR 0 4
37098: PPUSH
37099: CALL_OW 380
// end else
37103: GO 37122
// PrepareHuman ( false , i , skill ) ;
37105: LD_INT 0
37107: PPUSH
37108: LD_VAR 0 8
37112: PPUSH
37113: LD_VAR 0 4
37117: PPUSH
37118: CALL_OW 380
// un := CreateHuman ;
37122: LD_ADDR_VAR 0 14
37126: PUSH
37127: CALL_OW 44
37131: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37132: LD_ADDR_VAR 0 7
37136: PUSH
37137: LD_VAR 0 7
37141: PPUSH
37142: LD_INT 1
37144: PPUSH
37145: LD_VAR 0 14
37149: PPUSH
37150: CALL_OW 2
37154: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37155: LD_VAR 0 14
37159: PPUSH
37160: LD_VAR 0 9
37164: PPUSH
37165: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37169: LD_VAR 0 9
37173: PPUSH
37174: CALL_OW 313
37178: PUSH
37179: LD_INT 6
37181: EQUAL
37182: PUSH
37183: LD_VAR 0 9
37187: PPUSH
37188: CALL_OW 266
37192: PUSH
37193: LD_INT 32
37195: PUSH
37196: LD_INT 31
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: IN
37203: OR
37204: IFFALSE 37018
37206: GO 37015
37208: POP
37209: POP
// end else
37210: GO 37592
// for j = 1 to x do
37212: LD_ADDR_VAR 0 9
37216: PUSH
37217: DOUBLE
37218: LD_INT 1
37220: DEC
37221: ST_TO_ADDR
37222: LD_VAR 0 13
37226: PUSH
37227: FOR_TO
37228: IFFALSE 37590
// begin InitHc ;
37230: CALL_OW 19
// if not f then
37234: LD_VAR 0 12
37238: NOT
37239: IFFALSE 37328
// begin PrepareHuman ( false , i , skill ) ;
37241: LD_INT 0
37243: PPUSH
37244: LD_VAR 0 8
37248: PPUSH
37249: LD_VAR 0 4
37253: PPUSH
37254: CALL_OW 380
// un := CreateHuman ;
37258: LD_ADDR_VAR 0 14
37262: PUSH
37263: CALL_OW 44
37267: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37268: LD_ADDR_VAR 0 7
37272: PUSH
37273: LD_VAR 0 7
37277: PPUSH
37278: LD_INT 1
37280: PPUSH
37281: LD_VAR 0 14
37285: PPUSH
37286: CALL_OW 2
37290: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37291: LD_VAR 0 14
37295: PPUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 250
37305: PPUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 251
37315: PPUSH
37316: LD_INT 10
37318: PPUSH
37319: LD_INT 0
37321: PPUSH
37322: CALL_OW 50
// continue ;
37326: GO 37227
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37328: LD_VAR 0 12
37332: PUSH
37333: LD_INT 1
37335: ARRAY
37336: PPUSH
37337: CALL_OW 313
37341: PUSH
37342: LD_VAR 0 12
37346: PUSH
37347: LD_INT 1
37349: ARRAY
37350: PPUSH
37351: CALL_OW 266
37355: PUSH
37356: LD_INT 32
37358: PUSH
37359: LD_INT 31
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: IN
37366: AND
37367: PUSH
37368: LD_VAR 0 12
37372: PUSH
37373: LD_INT 1
37375: ARRAY
37376: PPUSH
37377: CALL_OW 313
37381: PUSH
37382: LD_INT 6
37384: EQUAL
37385: OR
37386: IFFALSE 37406
// f := Delete ( f , 1 ) ;
37388: LD_ADDR_VAR 0 12
37392: PUSH
37393: LD_VAR 0 12
37397: PPUSH
37398: LD_INT 1
37400: PPUSH
37401: CALL_OW 3
37405: ST_TO_ADDR
// if not f then
37406: LD_VAR 0 12
37410: NOT
37411: IFFALSE 37429
// begin x := x + 2 ;
37413: LD_ADDR_VAR 0 13
37417: PUSH
37418: LD_VAR 0 13
37422: PUSH
37423: LD_INT 2
37425: PLUS
37426: ST_TO_ADDR
// continue ;
37427: GO 37227
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37429: LD_VAR 0 12
37433: PUSH
37434: LD_INT 1
37436: ARRAY
37437: PPUSH
37438: CALL_OW 266
37442: PUSH
37443: LD_INT 5
37445: EQUAL
37446: IFFALSE 37520
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37448: LD_VAR 0 12
37452: PUSH
37453: LD_INT 1
37455: ARRAY
37456: PPUSH
37457: CALL_OW 313
37461: PUSH
37462: LD_INT 3
37464: LESS
37465: IFFALSE 37501
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37467: LD_INT 0
37469: PPUSH
37470: LD_INT 5
37472: PUSH
37473: LD_INT 8
37475: PUSH
37476: LD_INT 9
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: PUSH
37484: LD_VAR 0 17
37488: ARRAY
37489: PPUSH
37490: LD_VAR 0 4
37494: PPUSH
37495: CALL_OW 380
37499: GO 37518
// PrepareHuman ( false , i , skill ) ;
37501: LD_INT 0
37503: PPUSH
37504: LD_VAR 0 8
37508: PPUSH
37509: LD_VAR 0 4
37513: PPUSH
37514: CALL_OW 380
// end else
37518: GO 37537
// PrepareHuman ( false , i , skill ) ;
37520: LD_INT 0
37522: PPUSH
37523: LD_VAR 0 8
37527: PPUSH
37528: LD_VAR 0 4
37532: PPUSH
37533: CALL_OW 380
// un := CreateHuman ;
37537: LD_ADDR_VAR 0 14
37541: PUSH
37542: CALL_OW 44
37546: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37547: LD_ADDR_VAR 0 7
37551: PUSH
37552: LD_VAR 0 7
37556: PPUSH
37557: LD_INT 1
37559: PPUSH
37560: LD_VAR 0 14
37564: PPUSH
37565: CALL_OW 2
37569: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37570: LD_VAR 0 14
37574: PPUSH
37575: LD_VAR 0 12
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PPUSH
37584: CALL_OW 52
// end ;
37588: GO 37227
37590: POP
37591: POP
// end ;
37592: GO 36529
37594: POP
37595: POP
// result := result ^ buildings ;
37596: LD_ADDR_VAR 0 7
37600: PUSH
37601: LD_VAR 0 7
37605: PUSH
37606: LD_VAR 0 18
37610: ADD
37611: ST_TO_ADDR
// end else
37612: GO 37755
// begin for i = 1 to personel do
37614: LD_ADDR_VAR 0 8
37618: PUSH
37619: DOUBLE
37620: LD_INT 1
37622: DEC
37623: ST_TO_ADDR
37624: LD_VAR 0 6
37628: PUSH
37629: FOR_TO
37630: IFFALSE 37753
// begin if i > 4 then
37632: LD_VAR 0 8
37636: PUSH
37637: LD_INT 4
37639: GREATER
37640: IFFALSE 37644
// break ;
37642: GO 37753
// x := personel [ i ] ;
37644: LD_ADDR_VAR 0 13
37648: PUSH
37649: LD_VAR 0 6
37653: PUSH
37654: LD_VAR 0 8
37658: ARRAY
37659: ST_TO_ADDR
// if x = - 1 then
37660: LD_VAR 0 13
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: EQUAL
37669: IFFALSE 37673
// continue ;
37671: GO 37629
// PrepareHuman ( false , i , skill ) ;
37673: LD_INT 0
37675: PPUSH
37676: LD_VAR 0 8
37680: PPUSH
37681: LD_VAR 0 4
37685: PPUSH
37686: CALL_OW 380
// un := CreateHuman ;
37690: LD_ADDR_VAR 0 14
37694: PUSH
37695: CALL_OW 44
37699: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37700: LD_VAR 0 14
37704: PPUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 250
37714: PPUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL_OW 251
37724: PPUSH
37725: LD_INT 10
37727: PPUSH
37728: LD_INT 0
37730: PPUSH
37731: CALL_OW 50
// result := result ^ un ;
37735: LD_ADDR_VAR 0 7
37739: PUSH
37740: LD_VAR 0 7
37744: PUSH
37745: LD_VAR 0 14
37749: ADD
37750: ST_TO_ADDR
// end ;
37751: GO 37629
37753: POP
37754: POP
// end ; end ;
37755: LD_VAR 0 7
37759: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37760: LD_INT 0
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
// result := false ;
37778: LD_ADDR_VAR 0 3
37782: PUSH
37783: LD_INT 0
37785: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37786: LD_VAR 0 1
37790: NOT
37791: PUSH
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 266
37801: PUSH
37802: LD_INT 32
37804: PUSH
37805: LD_INT 33
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: IN
37812: NOT
37813: OR
37814: IFFALSE 37818
// exit ;
37816: GO 38927
// nat := GetNation ( tower ) ;
37818: LD_ADDR_VAR 0 12
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 248
37832: ST_TO_ADDR
// side := GetSide ( tower ) ;
37833: LD_ADDR_VAR 0 16
37837: PUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 255
37847: ST_TO_ADDR
// x := GetX ( tower ) ;
37848: LD_ADDR_VAR 0 10
37852: PUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 250
37862: ST_TO_ADDR
// y := GetY ( tower ) ;
37863: LD_ADDR_VAR 0 11
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 251
37877: ST_TO_ADDR
// if not x or not y then
37878: LD_VAR 0 10
37882: NOT
37883: PUSH
37884: LD_VAR 0 11
37888: NOT
37889: OR
37890: IFFALSE 37894
// exit ;
37892: GO 38927
// weapon := 0 ;
37894: LD_ADDR_VAR 0 18
37898: PUSH
37899: LD_INT 0
37901: ST_TO_ADDR
// fac_list := [ ] ;
37902: LD_ADDR_VAR 0 17
37906: PUSH
37907: EMPTY
37908: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37909: LD_ADDR_VAR 0 6
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 274
37923: PPUSH
37924: LD_VAR 0 2
37928: PPUSH
37929: LD_INT 0
37931: PPUSH
37932: CALL 35498 0 3
37936: PPUSH
37937: LD_INT 30
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PPUSH
37947: CALL_OW 72
37951: ST_TO_ADDR
// if not factories then
37952: LD_VAR 0 6
37956: NOT
37957: IFFALSE 37961
// exit ;
37959: GO 38927
// for i in factories do
37961: LD_ADDR_VAR 0 8
37965: PUSH
37966: LD_VAR 0 6
37970: PUSH
37971: FOR_IN
37972: IFFALSE 37997
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37974: LD_ADDR_VAR 0 17
37978: PUSH
37979: LD_VAR 0 17
37983: PUSH
37984: LD_VAR 0 8
37988: PPUSH
37989: CALL_OW 478
37993: UNION
37994: ST_TO_ADDR
37995: GO 37971
37997: POP
37998: POP
// if not fac_list then
37999: LD_VAR 0 17
38003: NOT
38004: IFFALSE 38008
// exit ;
38006: GO 38927
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38008: LD_ADDR_VAR 0 5
38012: PUSH
38013: LD_INT 4
38015: PUSH
38016: LD_INT 5
38018: PUSH
38019: LD_INT 9
38021: PUSH
38022: LD_INT 10
38024: PUSH
38025: LD_INT 6
38027: PUSH
38028: LD_INT 7
38030: PUSH
38031: LD_INT 11
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 27
38045: PUSH
38046: LD_INT 28
38048: PUSH
38049: LD_INT 26
38051: PUSH
38052: LD_INT 30
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 43
38063: PUSH
38064: LD_INT 44
38066: PUSH
38067: LD_INT 46
38069: PUSH
38070: LD_INT 45
38072: PUSH
38073: LD_INT 47
38075: PUSH
38076: LD_INT 49
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: PUSH
38092: LD_VAR 0 12
38096: ARRAY
38097: ST_TO_ADDR
// list := list isect fac_list ;
38098: LD_ADDR_VAR 0 5
38102: PUSH
38103: LD_VAR 0 5
38107: PUSH
38108: LD_VAR 0 17
38112: ISECT
38113: ST_TO_ADDR
// if not list then
38114: LD_VAR 0 5
38118: NOT
38119: IFFALSE 38123
// exit ;
38121: GO 38927
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38123: LD_VAR 0 12
38127: PUSH
38128: LD_INT 3
38130: EQUAL
38131: PUSH
38132: LD_INT 49
38134: PUSH
38135: LD_VAR 0 5
38139: IN
38140: AND
38141: PUSH
38142: LD_INT 31
38144: PPUSH
38145: LD_VAR 0 16
38149: PPUSH
38150: CALL_OW 321
38154: PUSH
38155: LD_INT 2
38157: EQUAL
38158: AND
38159: IFFALSE 38219
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38161: LD_INT 22
38163: PUSH
38164: LD_VAR 0 16
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 35
38175: PUSH
38176: LD_INT 49
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 91
38185: PUSH
38186: LD_VAR 0 1
38190: PUSH
38191: LD_INT 10
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: PPUSH
38204: CALL_OW 69
38208: NOT
38209: IFFALSE 38219
// weapon := ru_time_lapser ;
38211: LD_ADDR_VAR 0 18
38215: PUSH
38216: LD_INT 49
38218: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38219: LD_VAR 0 12
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: IN
38234: PUSH
38235: LD_INT 11
38237: PUSH
38238: LD_VAR 0 5
38242: IN
38243: PUSH
38244: LD_INT 30
38246: PUSH
38247: LD_VAR 0 5
38251: IN
38252: OR
38253: AND
38254: PUSH
38255: LD_INT 6
38257: PPUSH
38258: LD_VAR 0 16
38262: PPUSH
38263: CALL_OW 321
38267: PUSH
38268: LD_INT 2
38270: EQUAL
38271: AND
38272: IFFALSE 38437
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38274: LD_INT 22
38276: PUSH
38277: LD_VAR 0 16
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 35
38291: PUSH
38292: LD_INT 11
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 35
38301: PUSH
38302: LD_INT 30
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 91
38316: PUSH
38317: LD_VAR 0 1
38321: PUSH
38322: LD_INT 18
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: PPUSH
38335: CALL_OW 69
38339: NOT
38340: PUSH
38341: LD_INT 22
38343: PUSH
38344: LD_VAR 0 16
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 30
38358: PUSH
38359: LD_INT 32
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 30
38368: PUSH
38369: LD_INT 33
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 91
38383: PUSH
38384: LD_VAR 0 1
38388: PUSH
38389: LD_INT 12
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: PPUSH
38405: CALL_OW 69
38409: PUSH
38410: LD_INT 2
38412: GREATER
38413: AND
38414: IFFALSE 38437
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38416: LD_ADDR_VAR 0 18
38420: PUSH
38421: LD_INT 11
38423: PUSH
38424: LD_INT 30
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_VAR 0 12
38435: ARRAY
38436: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38437: LD_VAR 0 18
38441: NOT
38442: PUSH
38443: LD_INT 40
38445: PPUSH
38446: LD_VAR 0 16
38450: PPUSH
38451: CALL_OW 321
38455: PUSH
38456: LD_INT 2
38458: EQUAL
38459: AND
38460: PUSH
38461: LD_INT 7
38463: PUSH
38464: LD_VAR 0 5
38468: IN
38469: PUSH
38470: LD_INT 28
38472: PUSH
38473: LD_VAR 0 5
38477: IN
38478: OR
38479: PUSH
38480: LD_INT 45
38482: PUSH
38483: LD_VAR 0 5
38487: IN
38488: OR
38489: AND
38490: IFFALSE 38744
// begin hex := GetHexInfo ( x , y ) ;
38492: LD_ADDR_VAR 0 4
38496: PUSH
38497: LD_VAR 0 10
38501: PPUSH
38502: LD_VAR 0 11
38506: PPUSH
38507: CALL_OW 546
38511: ST_TO_ADDR
// if hex [ 1 ] then
38512: LD_VAR 0 4
38516: PUSH
38517: LD_INT 1
38519: ARRAY
38520: IFFALSE 38524
// exit ;
38522: GO 38927
// height := hex [ 2 ] ;
38524: LD_ADDR_VAR 0 15
38528: PUSH
38529: LD_VAR 0 4
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38538: LD_ADDR_VAR 0 14
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 3
38551: PUSH
38552: LD_INT 5
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: ST_TO_ADDR
// for i in tmp do
38561: LD_ADDR_VAR 0 8
38565: PUSH
38566: LD_VAR 0 14
38570: PUSH
38571: FOR_IN
38572: IFFALSE 38742
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38574: LD_ADDR_VAR 0 9
38578: PUSH
38579: LD_VAR 0 10
38583: PPUSH
38584: LD_VAR 0 8
38588: PPUSH
38589: LD_INT 5
38591: PPUSH
38592: CALL_OW 272
38596: PUSH
38597: LD_VAR 0 11
38601: PPUSH
38602: LD_VAR 0 8
38606: PPUSH
38607: LD_INT 5
38609: PPUSH
38610: CALL_OW 273
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38619: LD_VAR 0 9
38623: PUSH
38624: LD_INT 1
38626: ARRAY
38627: PPUSH
38628: LD_VAR 0 9
38632: PUSH
38633: LD_INT 2
38635: ARRAY
38636: PPUSH
38637: CALL_OW 488
38641: IFFALSE 38740
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: LD_VAR 0 9
38652: PUSH
38653: LD_INT 1
38655: ARRAY
38656: PPUSH
38657: LD_VAR 0 9
38661: PUSH
38662: LD_INT 2
38664: ARRAY
38665: PPUSH
38666: CALL_OW 546
38670: ST_TO_ADDR
// if hex [ 1 ] then
38671: LD_VAR 0 4
38675: PUSH
38676: LD_INT 1
38678: ARRAY
38679: IFFALSE 38683
// continue ;
38681: GO 38571
// h := hex [ 2 ] ;
38683: LD_ADDR_VAR 0 13
38687: PUSH
38688: LD_VAR 0 4
38692: PUSH
38693: LD_INT 2
38695: ARRAY
38696: ST_TO_ADDR
// if h + 7 < height then
38697: LD_VAR 0 13
38701: PUSH
38702: LD_INT 7
38704: PLUS
38705: PUSH
38706: LD_VAR 0 15
38710: LESS
38711: IFFALSE 38740
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38713: LD_ADDR_VAR 0 18
38717: PUSH
38718: LD_INT 7
38720: PUSH
38721: LD_INT 28
38723: PUSH
38724: LD_INT 45
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: PUSH
38732: LD_VAR 0 12
38736: ARRAY
38737: ST_TO_ADDR
// break ;
38738: GO 38742
// end ; end ; end ;
38740: GO 38571
38742: POP
38743: POP
// end ; if not weapon then
38744: LD_VAR 0 18
38748: NOT
38749: IFFALSE 38809
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38751: LD_ADDR_VAR 0 5
38755: PUSH
38756: LD_VAR 0 5
38760: PUSH
38761: LD_INT 11
38763: PUSH
38764: LD_INT 30
38766: PUSH
38767: LD_INT 49
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: DIFF
38775: ST_TO_ADDR
// if not list then
38776: LD_VAR 0 5
38780: NOT
38781: IFFALSE 38785
// exit ;
38783: GO 38927
// weapon := list [ rand ( 1 , list ) ] ;
38785: LD_ADDR_VAR 0 18
38789: PUSH
38790: LD_VAR 0 5
38794: PUSH
38795: LD_INT 1
38797: PPUSH
38798: LD_VAR 0 5
38802: PPUSH
38803: CALL_OW 12
38807: ARRAY
38808: ST_TO_ADDR
// end ; if weapon then
38809: LD_VAR 0 18
38813: IFFALSE 38927
// begin tmp := CostOfWeapon ( weapon ) ;
38815: LD_ADDR_VAR 0 14
38819: PUSH
38820: LD_VAR 0 18
38824: PPUSH
38825: CALL_OW 451
38829: ST_TO_ADDR
// j := GetBase ( tower ) ;
38830: LD_ADDR_VAR 0 9
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL_OW 274
38844: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38845: LD_VAR 0 9
38849: PPUSH
38850: LD_INT 1
38852: PPUSH
38853: CALL_OW 275
38857: PUSH
38858: LD_VAR 0 14
38862: PUSH
38863: LD_INT 1
38865: ARRAY
38866: GREATEREQUAL
38867: PUSH
38868: LD_VAR 0 9
38872: PPUSH
38873: LD_INT 2
38875: PPUSH
38876: CALL_OW 275
38880: PUSH
38881: LD_VAR 0 14
38885: PUSH
38886: LD_INT 2
38888: ARRAY
38889: GREATEREQUAL
38890: AND
38891: PUSH
38892: LD_VAR 0 9
38896: PPUSH
38897: LD_INT 3
38899: PPUSH
38900: CALL_OW 275
38904: PUSH
38905: LD_VAR 0 14
38909: PUSH
38910: LD_INT 3
38912: ARRAY
38913: GREATEREQUAL
38914: AND
38915: IFFALSE 38927
// result := weapon ;
38917: LD_ADDR_VAR 0 3
38921: PUSH
38922: LD_VAR 0 18
38926: ST_TO_ADDR
// end ; end ;
38927: LD_VAR 0 3
38931: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38932: LD_INT 0
38934: PPUSH
38935: PPUSH
// result := true ;
38936: LD_ADDR_VAR 0 3
38940: PUSH
38941: LD_INT 1
38943: ST_TO_ADDR
// if array1 = array2 then
38944: LD_VAR 0 1
38948: PUSH
38949: LD_VAR 0 2
38953: EQUAL
38954: IFFALSE 39014
// begin for i = 1 to array1 do
38956: LD_ADDR_VAR 0 4
38960: PUSH
38961: DOUBLE
38962: LD_INT 1
38964: DEC
38965: ST_TO_ADDR
38966: LD_VAR 0 1
38970: PUSH
38971: FOR_TO
38972: IFFALSE 39010
// if array1 [ i ] <> array2 [ i ] then
38974: LD_VAR 0 1
38978: PUSH
38979: LD_VAR 0 4
38983: ARRAY
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_VAR 0 4
38994: ARRAY
38995: NONEQUAL
38996: IFFALSE 39008
// begin result := false ;
38998: LD_ADDR_VAR 0 3
39002: PUSH
39003: LD_INT 0
39005: ST_TO_ADDR
// break ;
39006: GO 39010
// end ;
39008: GO 38971
39010: POP
39011: POP
// end else
39012: GO 39022
// result := false ;
39014: LD_ADDR_VAR 0 3
39018: PUSH
39019: LD_INT 0
39021: ST_TO_ADDR
// end ;
39022: LD_VAR 0 3
39026: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39027: LD_INT 0
39029: PPUSH
39030: PPUSH
// if not array1 or not array2 then
39031: LD_VAR 0 1
39035: NOT
39036: PUSH
39037: LD_VAR 0 2
39041: NOT
39042: OR
39043: IFFALSE 39047
// exit ;
39045: GO 39111
// result := true ;
39047: LD_ADDR_VAR 0 3
39051: PUSH
39052: LD_INT 1
39054: ST_TO_ADDR
// for i = 1 to array1 do
39055: LD_ADDR_VAR 0 4
39059: PUSH
39060: DOUBLE
39061: LD_INT 1
39063: DEC
39064: ST_TO_ADDR
39065: LD_VAR 0 1
39069: PUSH
39070: FOR_TO
39071: IFFALSE 39109
// if array1 [ i ] <> array2 [ i ] then
39073: LD_VAR 0 1
39077: PUSH
39078: LD_VAR 0 4
39082: ARRAY
39083: PUSH
39084: LD_VAR 0 2
39088: PUSH
39089: LD_VAR 0 4
39093: ARRAY
39094: NONEQUAL
39095: IFFALSE 39107
// begin result := false ;
39097: LD_ADDR_VAR 0 3
39101: PUSH
39102: LD_INT 0
39104: ST_TO_ADDR
// break ;
39105: GO 39109
// end ;
39107: GO 39070
39109: POP
39110: POP
// end ;
39111: LD_VAR 0 3
39115: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39116: LD_INT 0
39118: PPUSH
39119: PPUSH
39120: PPUSH
// pom := GetBase ( fac ) ;
39121: LD_ADDR_VAR 0 5
39125: PUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL_OW 274
39135: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39136: LD_ADDR_VAR 0 4
39140: PUSH
39141: LD_VAR 0 2
39145: PUSH
39146: LD_INT 1
39148: ARRAY
39149: PPUSH
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 2
39157: ARRAY
39158: PPUSH
39159: LD_VAR 0 2
39163: PUSH
39164: LD_INT 3
39166: ARRAY
39167: PPUSH
39168: LD_VAR 0 2
39172: PUSH
39173: LD_INT 4
39175: ARRAY
39176: PPUSH
39177: CALL_OW 449
39181: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39182: LD_ADDR_VAR 0 3
39186: PUSH
39187: LD_VAR 0 5
39191: PPUSH
39192: LD_INT 1
39194: PPUSH
39195: CALL_OW 275
39199: PUSH
39200: LD_VAR 0 4
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: GREATEREQUAL
39209: PUSH
39210: LD_VAR 0 5
39214: PPUSH
39215: LD_INT 2
39217: PPUSH
39218: CALL_OW 275
39222: PUSH
39223: LD_VAR 0 4
39227: PUSH
39228: LD_INT 2
39230: ARRAY
39231: GREATEREQUAL
39232: AND
39233: PUSH
39234: LD_VAR 0 5
39238: PPUSH
39239: LD_INT 3
39241: PPUSH
39242: CALL_OW 275
39246: PUSH
39247: LD_VAR 0 4
39251: PUSH
39252: LD_INT 3
39254: ARRAY
39255: GREATEREQUAL
39256: AND
39257: ST_TO_ADDR
// end ;
39258: LD_VAR 0 3
39262: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
// pom := GetBase ( building ) ;
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_VAR 0 1
39278: PPUSH
39279: CALL_OW 274
39283: ST_TO_ADDR
// if not pom then
39284: LD_VAR 0 3
39288: NOT
39289: IFFALSE 39293
// exit ;
39291: GO 39463
// btype := GetBType ( building ) ;
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 266
39307: ST_TO_ADDR
// if btype = b_armoury then
39308: LD_VAR 0 5
39312: PUSH
39313: LD_INT 4
39315: EQUAL
39316: IFFALSE 39326
// btype := b_barracks ;
39318: LD_ADDR_VAR 0 5
39322: PUSH
39323: LD_INT 5
39325: ST_TO_ADDR
// if btype = b_depot then
39326: LD_VAR 0 5
39330: PUSH
39331: LD_INT 0
39333: EQUAL
39334: IFFALSE 39344
// btype := b_warehouse ;
39336: LD_ADDR_VAR 0 5
39340: PUSH
39341: LD_INT 1
39343: ST_TO_ADDR
// if btype = b_workshop then
39344: LD_VAR 0 5
39348: PUSH
39349: LD_INT 2
39351: EQUAL
39352: IFFALSE 39362
// btype := b_factory ;
39354: LD_ADDR_VAR 0 5
39358: PUSH
39359: LD_INT 3
39361: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39362: LD_ADDR_VAR 0 4
39366: PUSH
39367: LD_VAR 0 5
39371: PPUSH
39372: LD_VAR 0 1
39376: PPUSH
39377: CALL_OW 248
39381: PPUSH
39382: CALL_OW 450
39386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39387: LD_ADDR_VAR 0 2
39391: PUSH
39392: LD_VAR 0 3
39396: PPUSH
39397: LD_INT 1
39399: PPUSH
39400: CALL_OW 275
39404: PUSH
39405: LD_VAR 0 4
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: GREATEREQUAL
39414: PUSH
39415: LD_VAR 0 3
39419: PPUSH
39420: LD_INT 2
39422: PPUSH
39423: CALL_OW 275
39427: PUSH
39428: LD_VAR 0 4
39432: PUSH
39433: LD_INT 2
39435: ARRAY
39436: GREATEREQUAL
39437: AND
39438: PUSH
39439: LD_VAR 0 3
39443: PPUSH
39444: LD_INT 3
39446: PPUSH
39447: CALL_OW 275
39451: PUSH
39452: LD_VAR 0 4
39456: PUSH
39457: LD_INT 3
39459: ARRAY
39460: GREATEREQUAL
39461: AND
39462: ST_TO_ADDR
// end ;
39463: LD_VAR 0 2
39467: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
39472: PPUSH
// pom := GetBase ( building ) ;
39473: LD_ADDR_VAR 0 4
39477: PUSH
39478: LD_VAR 0 1
39482: PPUSH
39483: CALL_OW 274
39487: ST_TO_ADDR
// if not pom then
39488: LD_VAR 0 4
39492: NOT
39493: IFFALSE 39497
// exit ;
39495: GO 39598
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39497: LD_ADDR_VAR 0 5
39501: PUSH
39502: LD_VAR 0 2
39506: PPUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 248
39516: PPUSH
39517: CALL_OW 450
39521: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39522: LD_ADDR_VAR 0 3
39526: PUSH
39527: LD_VAR 0 4
39531: PPUSH
39532: LD_INT 1
39534: PPUSH
39535: CALL_OW 275
39539: PUSH
39540: LD_VAR 0 5
39544: PUSH
39545: LD_INT 1
39547: ARRAY
39548: GREATEREQUAL
39549: PUSH
39550: LD_VAR 0 4
39554: PPUSH
39555: LD_INT 2
39557: PPUSH
39558: CALL_OW 275
39562: PUSH
39563: LD_VAR 0 5
39567: PUSH
39568: LD_INT 2
39570: ARRAY
39571: GREATEREQUAL
39572: AND
39573: PUSH
39574: LD_VAR 0 4
39578: PPUSH
39579: LD_INT 3
39581: PPUSH
39582: CALL_OW 275
39586: PUSH
39587: LD_VAR 0 5
39591: PUSH
39592: LD_INT 3
39594: ARRAY
39595: GREATEREQUAL
39596: AND
39597: ST_TO_ADDR
// end ;
39598: LD_VAR 0 3
39602: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39603: LD_INT 0
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
// result := false ;
39616: LD_ADDR_VAR 0 8
39620: PUSH
39621: LD_INT 0
39623: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39624: LD_VAR 0 5
39628: NOT
39629: PUSH
39630: LD_VAR 0 1
39634: NOT
39635: OR
39636: PUSH
39637: LD_VAR 0 2
39641: NOT
39642: OR
39643: PUSH
39644: LD_VAR 0 3
39648: NOT
39649: OR
39650: IFFALSE 39654
// exit ;
39652: GO 40468
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39654: LD_ADDR_VAR 0 14
39658: PUSH
39659: LD_VAR 0 1
39663: PPUSH
39664: LD_VAR 0 2
39668: PPUSH
39669: LD_VAR 0 3
39673: PPUSH
39674: LD_VAR 0 4
39678: PPUSH
39679: LD_VAR 0 5
39683: PUSH
39684: LD_INT 1
39686: ARRAY
39687: PPUSH
39688: CALL_OW 248
39692: PPUSH
39693: LD_INT 0
39695: PPUSH
39696: CALL 41705 0 6
39700: ST_TO_ADDR
// if not hexes then
39701: LD_VAR 0 14
39705: NOT
39706: IFFALSE 39710
// exit ;
39708: GO 40468
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39710: LD_ADDR_VAR 0 17
39714: PUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: LD_INT 22
39722: PUSH
39723: LD_VAR 0 13
39727: PPUSH
39728: CALL_OW 255
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 30
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 30
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PPUSH
39769: CALL_OW 72
39773: ST_TO_ADDR
// for i = 1 to hexes do
39774: LD_ADDR_VAR 0 9
39778: PUSH
39779: DOUBLE
39780: LD_INT 1
39782: DEC
39783: ST_TO_ADDR
39784: LD_VAR 0 14
39788: PUSH
39789: FOR_TO
39790: IFFALSE 40466
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39792: LD_ADDR_VAR 0 13
39796: PUSH
39797: LD_VAR 0 14
39801: PUSH
39802: LD_VAR 0 9
39806: ARRAY
39807: PUSH
39808: LD_INT 1
39810: ARRAY
39811: PPUSH
39812: LD_VAR 0 14
39816: PUSH
39817: LD_VAR 0 9
39821: ARRAY
39822: PUSH
39823: LD_INT 2
39825: ARRAY
39826: PPUSH
39827: CALL_OW 428
39831: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39832: LD_VAR 0 14
39836: PUSH
39837: LD_VAR 0 9
39841: ARRAY
39842: PUSH
39843: LD_INT 1
39845: ARRAY
39846: PPUSH
39847: LD_VAR 0 14
39851: PUSH
39852: LD_VAR 0 9
39856: ARRAY
39857: PUSH
39858: LD_INT 2
39860: ARRAY
39861: PPUSH
39862: CALL_OW 351
39866: PUSH
39867: LD_VAR 0 14
39871: PUSH
39872: LD_VAR 0 9
39876: ARRAY
39877: PUSH
39878: LD_INT 1
39880: ARRAY
39881: PPUSH
39882: LD_VAR 0 14
39886: PUSH
39887: LD_VAR 0 9
39891: ARRAY
39892: PUSH
39893: LD_INT 2
39895: ARRAY
39896: PPUSH
39897: CALL_OW 488
39901: NOT
39902: OR
39903: PUSH
39904: LD_VAR 0 13
39908: PPUSH
39909: CALL_OW 247
39913: PUSH
39914: LD_INT 3
39916: EQUAL
39917: OR
39918: IFFALSE 39924
// exit ;
39920: POP
39921: POP
39922: GO 40468
// if not tmp then
39924: LD_VAR 0 13
39928: NOT
39929: IFFALSE 39933
// continue ;
39931: GO 39789
// result := true ;
39933: LD_ADDR_VAR 0 8
39937: PUSH
39938: LD_INT 1
39940: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39941: LD_VAR 0 6
39945: PUSH
39946: LD_VAR 0 13
39950: PPUSH
39951: CALL_OW 247
39955: PUSH
39956: LD_INT 2
39958: EQUAL
39959: AND
39960: PUSH
39961: LD_VAR 0 13
39965: PPUSH
39966: CALL_OW 263
39970: PUSH
39971: LD_INT 1
39973: EQUAL
39974: AND
39975: IFFALSE 40139
// begin if IsDrivenBy ( tmp ) then
39977: LD_VAR 0 13
39981: PPUSH
39982: CALL_OW 311
39986: IFFALSE 39990
// continue ;
39988: GO 39789
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39990: LD_VAR 0 6
39994: PPUSH
39995: LD_INT 3
39997: PUSH
39998: LD_INT 60
40000: PUSH
40001: EMPTY
40002: LIST
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: LD_INT 55
40013: PUSH
40014: EMPTY
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PPUSH
40025: CALL_OW 72
40029: IFFALSE 40137
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40031: LD_ADDR_VAR 0 18
40035: PUSH
40036: LD_VAR 0 6
40040: PPUSH
40041: LD_INT 3
40043: PUSH
40044: LD_INT 60
40046: PUSH
40047: EMPTY
40048: LIST
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 3
40056: PUSH
40057: LD_INT 55
40059: PUSH
40060: EMPTY
40061: LIST
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PPUSH
40071: CALL_OW 72
40075: PUSH
40076: LD_INT 1
40078: ARRAY
40079: ST_TO_ADDR
// if IsInUnit ( driver ) then
40080: LD_VAR 0 18
40084: PPUSH
40085: CALL_OW 310
40089: IFFALSE 40100
// ComExit ( driver ) ;
40091: LD_VAR 0 18
40095: PPUSH
40096: CALL 64833 0 1
// AddComEnterUnit ( driver , tmp ) ;
40100: LD_VAR 0 18
40104: PPUSH
40105: LD_VAR 0 13
40109: PPUSH
40110: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40114: LD_VAR 0 18
40118: PPUSH
40119: LD_VAR 0 7
40123: PPUSH
40124: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40128: LD_VAR 0 18
40132: PPUSH
40133: CALL_OW 181
// end ; continue ;
40137: GO 39789
// end ; if not cleaners or not tmp in cleaners then
40139: LD_VAR 0 6
40143: NOT
40144: PUSH
40145: LD_VAR 0 13
40149: PUSH
40150: LD_VAR 0 6
40154: IN
40155: NOT
40156: OR
40157: IFFALSE 40464
// begin if dep then
40159: LD_VAR 0 17
40163: IFFALSE 40299
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40165: LD_ADDR_VAR 0 16
40169: PUSH
40170: LD_VAR 0 17
40174: PUSH
40175: LD_INT 1
40177: ARRAY
40178: PPUSH
40179: CALL_OW 250
40183: PPUSH
40184: LD_VAR 0 17
40188: PUSH
40189: LD_INT 1
40191: ARRAY
40192: PPUSH
40193: CALL_OW 254
40197: PPUSH
40198: LD_INT 5
40200: PPUSH
40201: CALL_OW 272
40205: PUSH
40206: LD_VAR 0 17
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PPUSH
40215: CALL_OW 251
40219: PPUSH
40220: LD_VAR 0 17
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: CALL_OW 254
40233: PPUSH
40234: LD_INT 5
40236: PPUSH
40237: CALL_OW 273
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40246: LD_VAR 0 16
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PPUSH
40255: LD_VAR 0 16
40259: PUSH
40260: LD_INT 2
40262: ARRAY
40263: PPUSH
40264: CALL_OW 488
40268: IFFALSE 40299
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40270: LD_VAR 0 13
40274: PPUSH
40275: LD_VAR 0 16
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: PPUSH
40284: LD_VAR 0 16
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: PPUSH
40293: CALL_OW 111
// continue ;
40297: GO 39789
// end ; end ; r := GetDir ( tmp ) ;
40299: LD_ADDR_VAR 0 15
40303: PUSH
40304: LD_VAR 0 13
40308: PPUSH
40309: CALL_OW 254
40313: ST_TO_ADDR
// if r = 5 then
40314: LD_VAR 0 15
40318: PUSH
40319: LD_INT 5
40321: EQUAL
40322: IFFALSE 40332
// r := 0 ;
40324: LD_ADDR_VAR 0 15
40328: PUSH
40329: LD_INT 0
40331: ST_TO_ADDR
// for j = r to 5 do
40332: LD_ADDR_VAR 0 10
40336: PUSH
40337: DOUBLE
40338: LD_VAR 0 15
40342: DEC
40343: ST_TO_ADDR
40344: LD_INT 5
40346: PUSH
40347: FOR_TO
40348: IFFALSE 40462
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40350: LD_ADDR_VAR 0 11
40354: PUSH
40355: LD_VAR 0 13
40359: PPUSH
40360: CALL_OW 250
40364: PPUSH
40365: LD_VAR 0 10
40369: PPUSH
40370: LD_INT 2
40372: PPUSH
40373: CALL_OW 272
40377: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40378: LD_ADDR_VAR 0 12
40382: PUSH
40383: LD_VAR 0 13
40387: PPUSH
40388: CALL_OW 251
40392: PPUSH
40393: LD_VAR 0 10
40397: PPUSH
40398: LD_INT 2
40400: PPUSH
40401: CALL_OW 273
40405: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40406: LD_VAR 0 11
40410: PPUSH
40411: LD_VAR 0 12
40415: PPUSH
40416: CALL_OW 488
40420: PUSH
40421: LD_VAR 0 11
40425: PPUSH
40426: LD_VAR 0 12
40430: PPUSH
40431: CALL_OW 428
40435: NOT
40436: AND
40437: IFFALSE 40460
// begin ComMoveXY ( tmp , _x , _y ) ;
40439: LD_VAR 0 13
40443: PPUSH
40444: LD_VAR 0 11
40448: PPUSH
40449: LD_VAR 0 12
40453: PPUSH
40454: CALL_OW 111
// break ;
40458: GO 40462
// end ; end ;
40460: GO 40347
40462: POP
40463: POP
// end ; end ;
40464: GO 39789
40466: POP
40467: POP
// end ;
40468: LD_VAR 0 8
40472: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40473: LD_INT 0
40475: PPUSH
// result := true ;
40476: LD_ADDR_VAR 0 3
40480: PUSH
40481: LD_INT 1
40483: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40484: LD_VAR 0 2
40488: PUSH
40489: LD_INT 24
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40503
40495: LD_INT 33
40497: DOUBLE
40498: EQUAL
40499: IFTRUE 40503
40501: GO 40528
40503: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40504: LD_ADDR_VAR 0 3
40508: PUSH
40509: LD_INT 32
40511: PPUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 321
40521: PUSH
40522: LD_INT 2
40524: EQUAL
40525: ST_TO_ADDR
40526: GO 40848
40528: LD_INT 20
40530: DOUBLE
40531: EQUAL
40532: IFTRUE 40536
40534: GO 40561
40536: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 6
40544: PPUSH
40545: LD_VAR 0 1
40549: PPUSH
40550: CALL_OW 321
40554: PUSH
40555: LD_INT 2
40557: EQUAL
40558: ST_TO_ADDR
40559: GO 40848
40561: LD_INT 22
40563: DOUBLE
40564: EQUAL
40565: IFTRUE 40575
40567: LD_INT 36
40569: DOUBLE
40570: EQUAL
40571: IFTRUE 40575
40573: GO 40600
40575: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40576: LD_ADDR_VAR 0 3
40580: PUSH
40581: LD_INT 15
40583: PPUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 321
40593: PUSH
40594: LD_INT 2
40596: EQUAL
40597: ST_TO_ADDR
40598: GO 40848
40600: LD_INT 30
40602: DOUBLE
40603: EQUAL
40604: IFTRUE 40608
40606: GO 40633
40608: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_INT 20
40616: PPUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 321
40626: PUSH
40627: LD_INT 2
40629: EQUAL
40630: ST_TO_ADDR
40631: GO 40848
40633: LD_INT 28
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40647
40639: LD_INT 21
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40647
40645: GO 40672
40647: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40648: LD_ADDR_VAR 0 3
40652: PUSH
40653: LD_INT 21
40655: PPUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 321
40665: PUSH
40666: LD_INT 2
40668: EQUAL
40669: ST_TO_ADDR
40670: GO 40848
40672: LD_INT 16
40674: DOUBLE
40675: EQUAL
40676: IFTRUE 40680
40678: GO 40707
40680: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40681: LD_ADDR_VAR 0 3
40685: PUSH
40686: LD_EXP 64
40690: PPUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 321
40700: PUSH
40701: LD_INT 2
40703: EQUAL
40704: ST_TO_ADDR
40705: GO 40848
40707: LD_INT 19
40709: DOUBLE
40710: EQUAL
40711: IFTRUE 40721
40713: LD_INT 23
40715: DOUBLE
40716: EQUAL
40717: IFTRUE 40721
40719: GO 40748
40721: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_EXP 63
40731: PPUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 321
40741: PUSH
40742: LD_INT 2
40744: EQUAL
40745: ST_TO_ADDR
40746: GO 40848
40748: LD_INT 17
40750: DOUBLE
40751: EQUAL
40752: IFTRUE 40756
40754: GO 40781
40756: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40757: LD_ADDR_VAR 0 3
40761: PUSH
40762: LD_INT 39
40764: PPUSH
40765: LD_VAR 0 1
40769: PPUSH
40770: CALL_OW 321
40774: PUSH
40775: LD_INT 2
40777: EQUAL
40778: ST_TO_ADDR
40779: GO 40848
40781: LD_INT 18
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40789
40787: GO 40814
40789: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40790: LD_ADDR_VAR 0 3
40794: PUSH
40795: LD_INT 40
40797: PPUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 321
40807: PUSH
40808: LD_INT 2
40810: EQUAL
40811: ST_TO_ADDR
40812: GO 40848
40814: LD_INT 27
40816: DOUBLE
40817: EQUAL
40818: IFTRUE 40822
40820: GO 40847
40822: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40823: LD_ADDR_VAR 0 3
40827: PUSH
40828: LD_INT 35
40830: PPUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 321
40840: PUSH
40841: LD_INT 2
40843: EQUAL
40844: ST_TO_ADDR
40845: GO 40848
40847: POP
// end ;
40848: LD_VAR 0 3
40852: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40853: LD_INT 0
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
// result := false ;
40866: LD_ADDR_VAR 0 6
40870: PUSH
40871: LD_INT 0
40873: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40874: LD_VAR 0 1
40878: NOT
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 266
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: IN
40900: NOT
40901: OR
40902: PUSH
40903: LD_VAR 0 2
40907: NOT
40908: OR
40909: PUSH
40910: LD_VAR 0 5
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: LD_INT 4
40929: PUSH
40930: LD_INT 5
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: IN
40941: NOT
40942: OR
40943: PUSH
40944: LD_VAR 0 3
40948: PPUSH
40949: LD_VAR 0 4
40953: PPUSH
40954: CALL_OW 488
40958: NOT
40959: OR
40960: IFFALSE 40964
// exit ;
40962: GO 41700
// side := GetSide ( depot ) ;
40964: LD_ADDR_VAR 0 9
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 255
40978: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40979: LD_VAR 0 9
40983: PPUSH
40984: LD_VAR 0 2
40988: PPUSH
40989: CALL 40473 0 2
40993: NOT
40994: IFFALSE 40998
// exit ;
40996: GO 41700
// pom := GetBase ( depot ) ;
40998: LD_ADDR_VAR 0 10
41002: PUSH
41003: LD_VAR 0 1
41007: PPUSH
41008: CALL_OW 274
41012: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41013: LD_ADDR_VAR 0 11
41017: PUSH
41018: LD_VAR 0 2
41022: PPUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 248
41032: PPUSH
41033: CALL_OW 450
41037: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41038: LD_VAR 0 10
41042: PPUSH
41043: LD_INT 1
41045: PPUSH
41046: CALL_OW 275
41050: PUSH
41051: LD_VAR 0 11
41055: PUSH
41056: LD_INT 1
41058: ARRAY
41059: GREATEREQUAL
41060: PUSH
41061: LD_VAR 0 10
41065: PPUSH
41066: LD_INT 2
41068: PPUSH
41069: CALL_OW 275
41073: PUSH
41074: LD_VAR 0 11
41078: PUSH
41079: LD_INT 2
41081: ARRAY
41082: GREATEREQUAL
41083: AND
41084: PUSH
41085: LD_VAR 0 10
41089: PPUSH
41090: LD_INT 3
41092: PPUSH
41093: CALL_OW 275
41097: PUSH
41098: LD_VAR 0 11
41102: PUSH
41103: LD_INT 3
41105: ARRAY
41106: GREATEREQUAL
41107: AND
41108: NOT
41109: IFFALSE 41113
// exit ;
41111: GO 41700
// if GetBType ( depot ) = b_depot then
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 266
41122: PUSH
41123: LD_INT 0
41125: EQUAL
41126: IFFALSE 41138
// dist := 28 else
41128: LD_ADDR_VAR 0 14
41132: PUSH
41133: LD_INT 28
41135: ST_TO_ADDR
41136: GO 41146
// dist := 36 ;
41138: LD_ADDR_VAR 0 14
41142: PUSH
41143: LD_INT 36
41145: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41146: LD_VAR 0 1
41150: PPUSH
41151: LD_VAR 0 3
41155: PPUSH
41156: LD_VAR 0 4
41160: PPUSH
41161: CALL_OW 297
41165: PUSH
41166: LD_VAR 0 14
41170: GREATER
41171: IFFALSE 41175
// exit ;
41173: GO 41700
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41175: LD_ADDR_VAR 0 12
41179: PUSH
41180: LD_VAR 0 2
41184: PPUSH
41185: LD_VAR 0 3
41189: PPUSH
41190: LD_VAR 0 4
41194: PPUSH
41195: LD_VAR 0 5
41199: PPUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: CALL_OW 248
41209: PPUSH
41210: LD_INT 0
41212: PPUSH
41213: CALL 41705 0 6
41217: ST_TO_ADDR
// if not hexes then
41218: LD_VAR 0 12
41222: NOT
41223: IFFALSE 41227
// exit ;
41225: GO 41700
// hex := GetHexInfo ( x , y ) ;
41227: LD_ADDR_VAR 0 15
41231: PUSH
41232: LD_VAR 0 3
41236: PPUSH
41237: LD_VAR 0 4
41241: PPUSH
41242: CALL_OW 546
41246: ST_TO_ADDR
// if hex [ 1 ] then
41247: LD_VAR 0 15
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: IFFALSE 41259
// exit ;
41257: GO 41700
// height := hex [ 2 ] ;
41259: LD_ADDR_VAR 0 13
41263: PUSH
41264: LD_VAR 0 15
41268: PUSH
41269: LD_INT 2
41271: ARRAY
41272: ST_TO_ADDR
// for i = 1 to hexes do
41273: LD_ADDR_VAR 0 7
41277: PUSH
41278: DOUBLE
41279: LD_INT 1
41281: DEC
41282: ST_TO_ADDR
41283: LD_VAR 0 12
41287: PUSH
41288: FOR_TO
41289: IFFALSE 41619
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41291: LD_VAR 0 12
41295: PUSH
41296: LD_VAR 0 7
41300: ARRAY
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: PPUSH
41306: LD_VAR 0 12
41310: PUSH
41311: LD_VAR 0 7
41315: ARRAY
41316: PUSH
41317: LD_INT 2
41319: ARRAY
41320: PPUSH
41321: CALL_OW 488
41325: NOT
41326: PUSH
41327: LD_VAR 0 12
41331: PUSH
41332: LD_VAR 0 7
41336: ARRAY
41337: PUSH
41338: LD_INT 1
41340: ARRAY
41341: PPUSH
41342: LD_VAR 0 12
41346: PUSH
41347: LD_VAR 0 7
41351: ARRAY
41352: PUSH
41353: LD_INT 2
41355: ARRAY
41356: PPUSH
41357: CALL_OW 428
41361: PUSH
41362: LD_INT 0
41364: GREATER
41365: OR
41366: PUSH
41367: LD_VAR 0 12
41371: PUSH
41372: LD_VAR 0 7
41376: ARRAY
41377: PUSH
41378: LD_INT 1
41380: ARRAY
41381: PPUSH
41382: LD_VAR 0 12
41386: PUSH
41387: LD_VAR 0 7
41391: ARRAY
41392: PUSH
41393: LD_INT 2
41395: ARRAY
41396: PPUSH
41397: CALL_OW 351
41401: OR
41402: IFFALSE 41408
// exit ;
41404: POP
41405: POP
41406: GO 41700
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41408: LD_ADDR_VAR 0 8
41412: PUSH
41413: LD_VAR 0 12
41417: PUSH
41418: LD_VAR 0 7
41422: ARRAY
41423: PUSH
41424: LD_INT 1
41426: ARRAY
41427: PPUSH
41428: LD_VAR 0 12
41432: PUSH
41433: LD_VAR 0 7
41437: ARRAY
41438: PUSH
41439: LD_INT 2
41441: ARRAY
41442: PPUSH
41443: CALL_OW 546
41447: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41448: LD_VAR 0 8
41452: PUSH
41453: LD_INT 1
41455: ARRAY
41456: PUSH
41457: LD_VAR 0 8
41461: PUSH
41462: LD_INT 2
41464: ARRAY
41465: PUSH
41466: LD_VAR 0 13
41470: PUSH
41471: LD_INT 2
41473: PLUS
41474: GREATER
41475: OR
41476: PUSH
41477: LD_VAR 0 8
41481: PUSH
41482: LD_INT 2
41484: ARRAY
41485: PUSH
41486: LD_VAR 0 13
41490: PUSH
41491: LD_INT 2
41493: MINUS
41494: LESS
41495: OR
41496: PUSH
41497: LD_VAR 0 8
41501: PUSH
41502: LD_INT 3
41504: ARRAY
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 8
41511: PUSH
41512: LD_INT 9
41514: PUSH
41515: LD_INT 10
41517: PUSH
41518: LD_INT 11
41520: PUSH
41521: LD_INT 12
41523: PUSH
41524: LD_INT 13
41526: PUSH
41527: LD_INT 16
41529: PUSH
41530: LD_INT 17
41532: PUSH
41533: LD_INT 18
41535: PUSH
41536: LD_INT 19
41538: PUSH
41539: LD_INT 20
41541: PUSH
41542: LD_INT 21
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: IN
41560: NOT
41561: OR
41562: PUSH
41563: LD_VAR 0 8
41567: PUSH
41568: LD_INT 5
41570: ARRAY
41571: NOT
41572: OR
41573: PUSH
41574: LD_VAR 0 8
41578: PUSH
41579: LD_INT 6
41581: ARRAY
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 7
41591: PUSH
41592: LD_INT 9
41594: PUSH
41595: LD_INT 10
41597: PUSH
41598: LD_INT 11
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: IN
41609: NOT
41610: OR
41611: IFFALSE 41617
// exit ;
41613: POP
41614: POP
41615: GO 41700
// end ;
41617: GO 41288
41619: POP
41620: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41621: LD_VAR 0 9
41625: PPUSH
41626: LD_VAR 0 3
41630: PPUSH
41631: LD_VAR 0 4
41635: PPUSH
41636: LD_INT 20
41638: PPUSH
41639: CALL 33646 0 4
41643: PUSH
41644: LD_INT 4
41646: ARRAY
41647: IFFALSE 41651
// exit ;
41649: GO 41700
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41651: LD_VAR 0 2
41655: PUSH
41656: LD_INT 29
41658: PUSH
41659: LD_INT 30
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: IN
41666: PUSH
41667: LD_VAR 0 3
41671: PPUSH
41672: LD_VAR 0 4
41676: PPUSH
41677: LD_VAR 0 9
41681: PPUSH
41682: CALL_OW 440
41686: NOT
41687: AND
41688: IFFALSE 41692
// exit ;
41690: GO 41700
// result := true ;
41692: LD_ADDR_VAR 0 6
41696: PUSH
41697: LD_INT 1
41699: ST_TO_ADDR
// end ;
41700: LD_VAR 0 6
41704: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41705: LD_INT 0
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
41744: PPUSH
41745: PPUSH
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
// result = [ ] ;
41765: LD_ADDR_VAR 0 7
41769: PUSH
41770: EMPTY
41771: ST_TO_ADDR
// temp_list = [ ] ;
41772: LD_ADDR_VAR 0 9
41776: PUSH
41777: EMPTY
41778: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41779: LD_VAR 0 4
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: LD_INT 4
41798: PUSH
41799: LD_INT 5
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: IN
41810: NOT
41811: PUSH
41812: LD_VAR 0 1
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: IN
41827: PUSH
41828: LD_VAR 0 5
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: IN
41847: NOT
41848: AND
41849: OR
41850: IFFALSE 41854
// exit ;
41852: GO 60245
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41854: LD_VAR 0 1
41858: PUSH
41859: LD_INT 6
41861: PUSH
41862: LD_INT 7
41864: PUSH
41865: LD_INT 8
41867: PUSH
41868: LD_INT 13
41870: PUSH
41871: LD_INT 12
41873: PUSH
41874: LD_INT 15
41876: PUSH
41877: LD_INT 11
41879: PUSH
41880: LD_INT 14
41882: PUSH
41883: LD_INT 10
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: IN
41897: IFFALSE 41907
// btype = b_lab ;
41899: LD_ADDR_VAR 0 1
41903: PUSH
41904: LD_INT 6
41906: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41907: LD_VAR 0 6
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: IN
41926: NOT
41927: PUSH
41928: LD_VAR 0 1
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: LD_INT 6
41947: PUSH
41948: LD_INT 36
41950: PUSH
41951: LD_INT 4
41953: PUSH
41954: LD_INT 5
41956: PUSH
41957: LD_INT 31
41959: PUSH
41960: LD_INT 32
41962: PUSH
41963: LD_INT 33
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: IN
41979: NOT
41980: PUSH
41981: LD_VAR 0 6
41985: PUSH
41986: LD_INT 1
41988: EQUAL
41989: AND
41990: OR
41991: PUSH
41992: LD_VAR 0 1
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: IN
42007: NOT
42008: PUSH
42009: LD_VAR 0 6
42013: PUSH
42014: LD_INT 2
42016: EQUAL
42017: AND
42018: OR
42019: IFFALSE 42029
// mode = 0 ;
42021: LD_ADDR_VAR 0 6
42025: PUSH
42026: LD_INT 0
42028: ST_TO_ADDR
// case mode of 0 :
42029: LD_VAR 0 6
42033: PUSH
42034: LD_INT 0
42036: DOUBLE
42037: EQUAL
42038: IFTRUE 42042
42040: GO 53495
42042: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42043: LD_ADDR_VAR 0 11
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42236: LD_ADDR_VAR 0 12
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 3
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42432: LD_ADDR_VAR 0 13
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 3
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: NEG
42592: PUSH
42593: LD_INT 2
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42631: LD_ADDR_VAR 0 14
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 3
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 3
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42827: LD_ADDR_VAR 0 15
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43020: LD_ADDR_VAR 0 16
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 3
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43213: LD_ADDR_VAR 0 17
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43443: LD_ADDR_VAR 0 18
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43673: LD_ADDR_VAR 0 19
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43903: LD_ADDR_VAR 0 20
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44133: LD_ADDR_VAR 0 21
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44363: LD_ADDR_VAR 0 22
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44593: LD_ADDR_VAR 0 23
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 3
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44873: LD_ADDR_VAR 0 24
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45149: LD_ADDR_VAR 0 25
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 3
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45423: LD_ADDR_VAR 0 26
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45699: LD_ADDR_VAR 0 27
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: NEG
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: NEG
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45979: LD_ADDR_VAR 0 28
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 3
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46261: LD_ADDR_VAR 0 29
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 3
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46540: LD_ADDR_VAR 0 30
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 3
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 3
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46818: LD_ADDR_VAR 0 31
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47096: LD_ADDR_VAR 0 32
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47374: LD_ADDR_VAR 0 33
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 3
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47653: LD_ADDR_VAR 0 34
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47933: LD_ADDR_VAR 0 35
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48045: LD_ADDR_VAR 0 36
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48157: LD_ADDR_VAR 0 37
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48269: LD_ADDR_VAR 0 38
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48381: LD_ADDR_VAR 0 39
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48493: LD_ADDR_VAR 0 40
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48605: LD_ADDR_VAR 0 41
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 3
48902: NEG
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: NEG
48915: PUSH
48916: LD_INT 3
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48955: LD_ADDR_VAR 0 42
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 3
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 3
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: NEG
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49305: LD_ADDR_VAR 0 43
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49653: LD_ADDR_VAR 0 44
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: NEG
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50003: LD_ADDR_VAR 0 45
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 3
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 3
50312: NEG
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50353: LD_ADDR_VAR 0 46
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 3
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50701: LD_ADDR_VAR 0 47
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50852: LD_ADDR_VAR 0 48
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50999: LD_ADDR_VAR 0 49
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51143: LD_ADDR_VAR 0 50
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51287: LD_ADDR_VAR 0 51
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51434: LD_ADDR_VAR 0 52
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51585: LD_ADDR_VAR 0 53
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51815: LD_ADDR_VAR 0 54
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52045: LD_ADDR_VAR 0 55
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52275: LD_ADDR_VAR 0 56
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52505: LD_ADDR_VAR 0 57
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52735: LD_ADDR_VAR 0 58
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52965: LD_ADDR_VAR 0 59
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53053: LD_ADDR_VAR 0 60
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53141: LD_ADDR_VAR 0 61
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53229: LD_ADDR_VAR 0 62
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53317: LD_ADDR_VAR 0 63
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53405: LD_ADDR_VAR 0 64
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// end ; 1 :
53493: GO 59390
53495: LD_INT 1
53497: DOUBLE
53498: EQUAL
53499: IFTRUE 53503
53501: GO 56126
53503: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53504: LD_ADDR_VAR 0 11
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53548: LD_ADDR_VAR 0 12
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53589: LD_ADDR_VAR 0 13
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53629: LD_ADDR_VAR 0 14
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53670: LD_ADDR_VAR 0 15
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: NEG
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53714: LD_ADDR_VAR 0 16
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53760: LD_ADDR_VAR 0 17
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53804: LD_ADDR_VAR 0 18
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53845: LD_ADDR_VAR 0 19
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53885: LD_ADDR_VAR 0 20
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53926: LD_ADDR_VAR 0 21
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: NEG
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53970: LD_ADDR_VAR 0 22
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: LIST
54015: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54016: LD_ADDR_VAR 0 23
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 4
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54060: LD_ADDR_VAR 0 24
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 4
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54101: LD_ADDR_VAR 0 25
54105: PUSH
54106: LD_INT 3
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 4
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54141: LD_ADDR_VAR 0 26
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 4
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54182: LD_ADDR_VAR 0 27
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 4
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54226: LD_ADDR_VAR 0 28
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: LD_INT 3
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: LD_INT 4
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 4
54257: NEG
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54272: LD_ADDR_VAR 0 29
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 3
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 4
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 4
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 5
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 5
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 6
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 6
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 5
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54427: LD_ADDR_VAR 0 30
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 4
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 4
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 4
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 5
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 5
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 5
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 6
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 6
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54570: LD_ADDR_VAR 0 31
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 4
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 4
54617: PUSH
54618: LD_INT 4
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 4
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 5
54637: PUSH
54638: LD_INT 4
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 5
54647: PUSH
54648: LD_INT 5
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 4
54657: PUSH
54658: LD_INT 5
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 6
54667: PUSH
54668: LD_INT 5
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 6
54677: PUSH
54678: LD_INT 6
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 5
54687: PUSH
54688: LD_INT 6
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54709: LD_ADDR_VAR 0 32
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 3
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 4
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 4
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 5
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 5
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 6
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 6
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54852: LD_ADDR_VAR 0 33
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 3
54870: NEG
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 4
54904: NEG
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 4
54915: NEG
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 4
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 5
54938: NEG
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 5
54949: NEG
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 5
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 6
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 6
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55007: LD_ADDR_VAR 0 34
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 3
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 4
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 4
55074: NEG
55075: PUSH
55076: LD_INT 4
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 4
55086: NEG
55087: PUSH
55088: LD_INT 5
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 5
55098: NEG
55099: PUSH
55100: LD_INT 4
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 5
55110: NEG
55111: PUSH
55112: LD_INT 5
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 5
55122: NEG
55123: PUSH
55124: LD_INT 6
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 6
55134: NEG
55135: PUSH
55136: LD_INT 5
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 6
55146: NEG
55147: PUSH
55148: LD_INT 6
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55170: LD_ADDR_VAR 0 41
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55214: LD_ADDR_VAR 0 42
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55255: LD_ADDR_VAR 0 43
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55295: LD_ADDR_VAR 0 44
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55336: LD_ADDR_VAR 0 45
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55380: LD_ADDR_VAR 0 46
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55426: LD_ADDR_VAR 0 47
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 3
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55459: LD_ADDR_VAR 0 48
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55490: LD_ADDR_VAR 0 49
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55519: LD_ADDR_VAR 0 50
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55548: LD_ADDR_VAR 0 51
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55579: LD_ADDR_VAR 0 52
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55612: LD_ADDR_VAR 0 53
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55656: LD_ADDR_VAR 0 54
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55697: LD_ADDR_VAR 0 55
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 3
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55737: LD_ADDR_VAR 0 56
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55778: LD_ADDR_VAR 0 57
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55822: LD_ADDR_VAR 0 58
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55868: LD_ADDR_VAR 0 59
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55912: LD_ADDR_VAR 0 60
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55953: LD_ADDR_VAR 0 61
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55993: LD_ADDR_VAR 0 62
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56034: LD_ADDR_VAR 0 63
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56078: LD_ADDR_VAR 0 64
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: ST_TO_ADDR
// end ; 2 :
56124: GO 59390
56126: LD_INT 2
56128: DOUBLE
56129: EQUAL
56130: IFTRUE 56134
56132: GO 59389
56134: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56135: LD_ADDR_VAR 0 29
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 5
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 5
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 4
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 5
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 4
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 5
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 5
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 4
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 5
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: NEG
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 4
56520: NEG
56521: PUSH
56522: LD_INT 4
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 4
56532: NEG
56533: PUSH
56534: LD_INT 5
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 3
56544: NEG
56545: PUSH
56546: LD_INT 4
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 3
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 4
56568: NEG
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 5
56580: NEG
56581: PUSH
56582: LD_INT 4
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 5
56592: NEG
56593: PUSH
56594: LD_INT 5
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: LD_INT 5
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 5
56616: NEG
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56673: LD_ADDR_VAR 0 30
56677: PUSH
56678: LD_INT 4
56680: PUSH
56681: LD_INT 4
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: LD_INT 4
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: PUSH
56711: LD_INT 5
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: PUSH
56721: LD_INT 5
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 5
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 5
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 4
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: LD_INT 4
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 4
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 4
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 3
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 5
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 5
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 5
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: NEG
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: LD_INT 4
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: LD_INT 4
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 4
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 4
57061: NEG
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 4
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 5
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 3
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 4
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 5
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 5
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57220: LD_ADDR_VAR 0 31
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 4
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 5
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 4
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 4
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 4
57422: NEG
57423: PUSH
57424: LD_INT 4
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 4
57434: NEG
57435: PUSH
57436: LD_INT 5
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: LD_INT 4
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 4
57470: NEG
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 5
57482: NEG
57483: PUSH
57484: LD_INT 4
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 5
57494: NEG
57495: PUSH
57496: LD_INT 5
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 3
57506: NEG
57507: PUSH
57508: LD_INT 5
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 5
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 4
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 5
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 5
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 4
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 5
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57770: LD_ADDR_VAR 0 32
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 4
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 5
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 5
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 5
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: LD_INT 4
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 4
57951: NEG
57952: PUSH
57953: LD_INT 4
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 5
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 4
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 5
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 5
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 4
58182: PUSH
58183: LD_INT 4
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: LD_INT 4
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 5
58212: PUSH
58213: LD_INT 5
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: LD_INT 5
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: LD_INT 4
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: LD_INT 3
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 5
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: LD_INT 5
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58317: LD_ADDR_VAR 0 33
58321: PUSH
58322: LD_INT 4
58324: NEG
58325: PUSH
58326: LD_INT 4
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 4
58336: NEG
58337: PUSH
58338: LD_INT 5
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: LD_INT 4
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: LD_INT 3
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 4
58372: NEG
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: NEG
58385: PUSH
58386: LD_INT 4
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 5
58396: NEG
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: LD_INT 5
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 5
58420: NEG
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 4
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 5
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 5
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 5
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 4
58657: PUSH
58658: LD_INT 4
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 4
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 4
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 3
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 4
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 5
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 5
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 4
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 5
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58855: LD_ADDR_VAR 0 34
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 4
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 5
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 4
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 4
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 5
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 5
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 4
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 4
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 4
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 4
59057: PUSH
59058: LD_INT 4
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: LD_INT 4
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 5
59087: PUSH
59088: LD_INT 5
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 4
59097: PUSH
59098: LD_INT 5
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: LD_INT 4
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 5
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 5
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 4
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 4
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 4
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 4
59240: NEG
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 3
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 5
59296: NEG
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 5
59307: NEG
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// end ; end ;
59387: GO 59390
59389: POP
// case btype of b_depot , b_warehouse :
59390: LD_VAR 0 1
59394: PUSH
59395: LD_INT 0
59397: DOUBLE
59398: EQUAL
59399: IFTRUE 59409
59401: LD_INT 1
59403: DOUBLE
59404: EQUAL
59405: IFTRUE 59409
59407: GO 59610
59409: POP
// case nation of nation_american :
59410: LD_VAR 0 5
59414: PUSH
59415: LD_INT 1
59417: DOUBLE
59418: EQUAL
59419: IFTRUE 59423
59421: GO 59479
59423: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59424: LD_ADDR_VAR 0 9
59428: PUSH
59429: LD_VAR 0 11
59433: PUSH
59434: LD_VAR 0 12
59438: PUSH
59439: LD_VAR 0 13
59443: PUSH
59444: LD_VAR 0 14
59448: PUSH
59449: LD_VAR 0 15
59453: PUSH
59454: LD_VAR 0 16
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: PUSH
59467: LD_VAR 0 4
59471: PUSH
59472: LD_INT 1
59474: PLUS
59475: ARRAY
59476: ST_TO_ADDR
59477: GO 59608
59479: LD_INT 2
59481: DOUBLE
59482: EQUAL
59483: IFTRUE 59487
59485: GO 59543
59487: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59488: LD_ADDR_VAR 0 9
59492: PUSH
59493: LD_VAR 0 17
59497: PUSH
59498: LD_VAR 0 18
59502: PUSH
59503: LD_VAR 0 19
59507: PUSH
59508: LD_VAR 0 20
59512: PUSH
59513: LD_VAR 0 21
59517: PUSH
59518: LD_VAR 0 22
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: PUSH
59531: LD_VAR 0 4
59535: PUSH
59536: LD_INT 1
59538: PLUS
59539: ARRAY
59540: ST_TO_ADDR
59541: GO 59608
59543: LD_INT 3
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59551
59549: GO 59607
59551: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59552: LD_ADDR_VAR 0 9
59556: PUSH
59557: LD_VAR 0 23
59561: PUSH
59562: LD_VAR 0 24
59566: PUSH
59567: LD_VAR 0 25
59571: PUSH
59572: LD_VAR 0 26
59576: PUSH
59577: LD_VAR 0 27
59581: PUSH
59582: LD_VAR 0 28
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: PUSH
59595: LD_VAR 0 4
59599: PUSH
59600: LD_INT 1
59602: PLUS
59603: ARRAY
59604: ST_TO_ADDR
59605: GO 59608
59607: POP
59608: GO 60163
59610: LD_INT 2
59612: DOUBLE
59613: EQUAL
59614: IFTRUE 59624
59616: LD_INT 3
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59624
59622: GO 59680
59624: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59625: LD_ADDR_VAR 0 9
59629: PUSH
59630: LD_VAR 0 29
59634: PUSH
59635: LD_VAR 0 30
59639: PUSH
59640: LD_VAR 0 31
59644: PUSH
59645: LD_VAR 0 32
59649: PUSH
59650: LD_VAR 0 33
59654: PUSH
59655: LD_VAR 0 34
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: LD_VAR 0 4
59672: PUSH
59673: LD_INT 1
59675: PLUS
59676: ARRAY
59677: ST_TO_ADDR
59678: GO 60163
59680: LD_INT 16
59682: DOUBLE
59683: EQUAL
59684: IFTRUE 59742
59686: LD_INT 17
59688: DOUBLE
59689: EQUAL
59690: IFTRUE 59742
59692: LD_INT 18
59694: DOUBLE
59695: EQUAL
59696: IFTRUE 59742
59698: LD_INT 19
59700: DOUBLE
59701: EQUAL
59702: IFTRUE 59742
59704: LD_INT 22
59706: DOUBLE
59707: EQUAL
59708: IFTRUE 59742
59710: LD_INT 20
59712: DOUBLE
59713: EQUAL
59714: IFTRUE 59742
59716: LD_INT 21
59718: DOUBLE
59719: EQUAL
59720: IFTRUE 59742
59722: LD_INT 23
59724: DOUBLE
59725: EQUAL
59726: IFTRUE 59742
59728: LD_INT 24
59730: DOUBLE
59731: EQUAL
59732: IFTRUE 59742
59734: LD_INT 25
59736: DOUBLE
59737: EQUAL
59738: IFTRUE 59742
59740: GO 59798
59742: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59743: LD_ADDR_VAR 0 9
59747: PUSH
59748: LD_VAR 0 35
59752: PUSH
59753: LD_VAR 0 36
59757: PUSH
59758: LD_VAR 0 37
59762: PUSH
59763: LD_VAR 0 38
59767: PUSH
59768: LD_VAR 0 39
59772: PUSH
59773: LD_VAR 0 40
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: PUSH
59786: LD_VAR 0 4
59790: PUSH
59791: LD_INT 1
59793: PLUS
59794: ARRAY
59795: ST_TO_ADDR
59796: GO 60163
59798: LD_INT 6
59800: DOUBLE
59801: EQUAL
59802: IFTRUE 59854
59804: LD_INT 7
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59854
59810: LD_INT 8
59812: DOUBLE
59813: EQUAL
59814: IFTRUE 59854
59816: LD_INT 13
59818: DOUBLE
59819: EQUAL
59820: IFTRUE 59854
59822: LD_INT 12
59824: DOUBLE
59825: EQUAL
59826: IFTRUE 59854
59828: LD_INT 15
59830: DOUBLE
59831: EQUAL
59832: IFTRUE 59854
59834: LD_INT 11
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59854
59840: LD_INT 14
59842: DOUBLE
59843: EQUAL
59844: IFTRUE 59854
59846: LD_INT 10
59848: DOUBLE
59849: EQUAL
59850: IFTRUE 59854
59852: GO 59910
59854: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59855: LD_ADDR_VAR 0 9
59859: PUSH
59860: LD_VAR 0 41
59864: PUSH
59865: LD_VAR 0 42
59869: PUSH
59870: LD_VAR 0 43
59874: PUSH
59875: LD_VAR 0 44
59879: PUSH
59880: LD_VAR 0 45
59884: PUSH
59885: LD_VAR 0 46
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: PUSH
59898: LD_VAR 0 4
59902: PUSH
59903: LD_INT 1
59905: PLUS
59906: ARRAY
59907: ST_TO_ADDR
59908: GO 60163
59910: LD_INT 36
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59918
59916: GO 59974
59918: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59919: LD_ADDR_VAR 0 9
59923: PUSH
59924: LD_VAR 0 47
59928: PUSH
59929: LD_VAR 0 48
59933: PUSH
59934: LD_VAR 0 49
59938: PUSH
59939: LD_VAR 0 50
59943: PUSH
59944: LD_VAR 0 51
59948: PUSH
59949: LD_VAR 0 52
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: PUSH
59962: LD_VAR 0 4
59966: PUSH
59967: LD_INT 1
59969: PLUS
59970: ARRAY
59971: ST_TO_ADDR
59972: GO 60163
59974: LD_INT 4
59976: DOUBLE
59977: EQUAL
59978: IFTRUE 60000
59980: LD_INT 5
59982: DOUBLE
59983: EQUAL
59984: IFTRUE 60000
59986: LD_INT 34
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 60000
59992: LD_INT 37
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60000
59998: GO 60056
60000: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60001: LD_ADDR_VAR 0 9
60005: PUSH
60006: LD_VAR 0 53
60010: PUSH
60011: LD_VAR 0 54
60015: PUSH
60016: LD_VAR 0 55
60020: PUSH
60021: LD_VAR 0 56
60025: PUSH
60026: LD_VAR 0 57
60030: PUSH
60031: LD_VAR 0 58
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: PUSH
60044: LD_VAR 0 4
60048: PUSH
60049: LD_INT 1
60051: PLUS
60052: ARRAY
60053: ST_TO_ADDR
60054: GO 60163
60056: LD_INT 31
60058: DOUBLE
60059: EQUAL
60060: IFTRUE 60106
60062: LD_INT 32
60064: DOUBLE
60065: EQUAL
60066: IFTRUE 60106
60068: LD_INT 33
60070: DOUBLE
60071: EQUAL
60072: IFTRUE 60106
60074: LD_INT 27
60076: DOUBLE
60077: EQUAL
60078: IFTRUE 60106
60080: LD_INT 26
60082: DOUBLE
60083: EQUAL
60084: IFTRUE 60106
60086: LD_INT 28
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60106
60092: LD_INT 29
60094: DOUBLE
60095: EQUAL
60096: IFTRUE 60106
60098: LD_INT 30
60100: DOUBLE
60101: EQUAL
60102: IFTRUE 60106
60104: GO 60162
60106: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60107: LD_ADDR_VAR 0 9
60111: PUSH
60112: LD_VAR 0 59
60116: PUSH
60117: LD_VAR 0 60
60121: PUSH
60122: LD_VAR 0 61
60126: PUSH
60127: LD_VAR 0 62
60131: PUSH
60132: LD_VAR 0 63
60136: PUSH
60137: LD_VAR 0 64
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: PUSH
60150: LD_VAR 0 4
60154: PUSH
60155: LD_INT 1
60157: PLUS
60158: ARRAY
60159: ST_TO_ADDR
60160: GO 60163
60162: POP
// temp_list2 = [ ] ;
60163: LD_ADDR_VAR 0 10
60167: PUSH
60168: EMPTY
60169: ST_TO_ADDR
// for i in temp_list do
60170: LD_ADDR_VAR 0 8
60174: PUSH
60175: LD_VAR 0 9
60179: PUSH
60180: FOR_IN
60181: IFFALSE 60233
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60183: LD_ADDR_VAR 0 10
60187: PUSH
60188: LD_VAR 0 10
60192: PUSH
60193: LD_VAR 0 8
60197: PUSH
60198: LD_INT 1
60200: ARRAY
60201: PUSH
60202: LD_VAR 0 2
60206: PLUS
60207: PUSH
60208: LD_VAR 0 8
60212: PUSH
60213: LD_INT 2
60215: ARRAY
60216: PUSH
60217: LD_VAR 0 3
60221: PLUS
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: ADD
60230: ST_TO_ADDR
60231: GO 60180
60233: POP
60234: POP
// result = temp_list2 ;
60235: LD_ADDR_VAR 0 7
60239: PUSH
60240: LD_VAR 0 10
60244: ST_TO_ADDR
// end ;
60245: LD_VAR 0 7
60249: RET
// export function EnemyInRange ( unit , dist ) ; begin
60250: LD_INT 0
60252: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60253: LD_ADDR_VAR 0 3
60257: PUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 255
60267: PPUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: CALL_OW 250
60277: PPUSH
60278: LD_VAR 0 1
60282: PPUSH
60283: CALL_OW 251
60287: PPUSH
60288: LD_VAR 0 2
60292: PPUSH
60293: CALL 33646 0 4
60297: PUSH
60298: LD_INT 4
60300: ARRAY
60301: ST_TO_ADDR
// end ;
60302: LD_VAR 0 3
60306: RET
// export function PlayerSeeMe ( unit ) ; begin
60307: LD_INT 0
60309: PPUSH
// result := See ( your_side , unit ) ;
60310: LD_ADDR_VAR 0 2
60314: PUSH
60315: LD_OWVAR 2
60319: PPUSH
60320: LD_VAR 0 1
60324: PPUSH
60325: CALL_OW 292
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 2
60334: RET
// export function ReverseDir ( unit ) ; begin
60335: LD_INT 0
60337: PPUSH
// if not unit then
60338: LD_VAR 0 1
60342: NOT
60343: IFFALSE 60347
// exit ;
60345: GO 60370
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60347: LD_ADDR_VAR 0 2
60351: PUSH
60352: LD_VAR 0 1
60356: PPUSH
60357: CALL_OW 254
60361: PUSH
60362: LD_INT 3
60364: PLUS
60365: PUSH
60366: LD_INT 6
60368: MOD
60369: ST_TO_ADDR
// end ;
60370: LD_VAR 0 2
60374: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60375: LD_INT 0
60377: PPUSH
60378: PPUSH
60379: PPUSH
60380: PPUSH
60381: PPUSH
// if not hexes then
60382: LD_VAR 0 2
60386: NOT
60387: IFFALSE 60391
// exit ;
60389: GO 60539
// dist := 9999 ;
60391: LD_ADDR_VAR 0 5
60395: PUSH
60396: LD_INT 9999
60398: ST_TO_ADDR
// for i = 1 to hexes do
60399: LD_ADDR_VAR 0 4
60403: PUSH
60404: DOUBLE
60405: LD_INT 1
60407: DEC
60408: ST_TO_ADDR
60409: LD_VAR 0 2
60413: PUSH
60414: FOR_TO
60415: IFFALSE 60527
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60417: LD_VAR 0 1
60421: PPUSH
60422: LD_VAR 0 2
60426: PUSH
60427: LD_VAR 0 4
60431: ARRAY
60432: PUSH
60433: LD_INT 1
60435: ARRAY
60436: PPUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_VAR 0 4
60446: ARRAY
60447: PUSH
60448: LD_INT 2
60450: ARRAY
60451: PPUSH
60452: CALL_OW 297
60456: PUSH
60457: LD_VAR 0 5
60461: LESS
60462: IFFALSE 60525
// begin hex := hexes [ i ] ;
60464: LD_ADDR_VAR 0 7
60468: PUSH
60469: LD_VAR 0 2
60473: PUSH
60474: LD_VAR 0 4
60478: ARRAY
60479: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60480: LD_ADDR_VAR 0 5
60484: PUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: LD_VAR 0 2
60494: PUSH
60495: LD_VAR 0 4
60499: ARRAY
60500: PUSH
60501: LD_INT 1
60503: ARRAY
60504: PPUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_VAR 0 4
60514: ARRAY
60515: PUSH
60516: LD_INT 2
60518: ARRAY
60519: PPUSH
60520: CALL_OW 297
60524: ST_TO_ADDR
// end ; end ;
60525: GO 60414
60527: POP
60528: POP
// result := hex ;
60529: LD_ADDR_VAR 0 3
60533: PUSH
60534: LD_VAR 0 7
60538: ST_TO_ADDR
// end ;
60539: LD_VAR 0 3
60543: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60544: LD_INT 0
60546: PPUSH
60547: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60548: LD_VAR 0 1
60552: NOT
60553: PUSH
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 21
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 23
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PPUSH
60583: CALL_OW 69
60587: IN
60588: NOT
60589: OR
60590: IFFALSE 60594
// exit ;
60592: GO 60641
// for i = 1 to 3 do
60594: LD_ADDR_VAR 0 3
60598: PUSH
60599: DOUBLE
60600: LD_INT 1
60602: DEC
60603: ST_TO_ADDR
60604: LD_INT 3
60606: PUSH
60607: FOR_TO
60608: IFFALSE 60639
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60610: LD_VAR 0 1
60614: PPUSH
60615: CALL_OW 250
60619: PPUSH
60620: LD_VAR 0 1
60624: PPUSH
60625: CALL_OW 251
60629: PPUSH
60630: LD_INT 1
60632: PPUSH
60633: CALL_OW 453
60637: GO 60607
60639: POP
60640: POP
// end ;
60641: LD_VAR 0 2
60645: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60646: LD_INT 0
60648: PPUSH
60649: PPUSH
60650: PPUSH
60651: PPUSH
60652: PPUSH
60653: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60654: LD_VAR 0 1
60658: NOT
60659: PUSH
60660: LD_VAR 0 2
60664: NOT
60665: OR
60666: PUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: CALL_OW 314
60676: OR
60677: IFFALSE 60681
// exit ;
60679: GO 61122
// x := GetX ( enemy_unit ) ;
60681: LD_ADDR_VAR 0 7
60685: PUSH
60686: LD_VAR 0 2
60690: PPUSH
60691: CALL_OW 250
60695: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60696: LD_ADDR_VAR 0 8
60700: PUSH
60701: LD_VAR 0 2
60705: PPUSH
60706: CALL_OW 251
60710: ST_TO_ADDR
// if not x or not y then
60711: LD_VAR 0 7
60715: NOT
60716: PUSH
60717: LD_VAR 0 8
60721: NOT
60722: OR
60723: IFFALSE 60727
// exit ;
60725: GO 61122
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60727: LD_ADDR_VAR 0 6
60731: PUSH
60732: LD_VAR 0 7
60736: PPUSH
60737: LD_INT 0
60739: PPUSH
60740: LD_INT 4
60742: PPUSH
60743: CALL_OW 272
60747: PUSH
60748: LD_VAR 0 8
60752: PPUSH
60753: LD_INT 0
60755: PPUSH
60756: LD_INT 4
60758: PPUSH
60759: CALL_OW 273
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_VAR 0 7
60772: PPUSH
60773: LD_INT 1
60775: PPUSH
60776: LD_INT 4
60778: PPUSH
60779: CALL_OW 272
60783: PUSH
60784: LD_VAR 0 8
60788: PPUSH
60789: LD_INT 1
60791: PPUSH
60792: LD_INT 4
60794: PPUSH
60795: CALL_OW 273
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_VAR 0 7
60808: PPUSH
60809: LD_INT 2
60811: PPUSH
60812: LD_INT 4
60814: PPUSH
60815: CALL_OW 272
60819: PUSH
60820: LD_VAR 0 8
60824: PPUSH
60825: LD_INT 2
60827: PPUSH
60828: LD_INT 4
60830: PPUSH
60831: CALL_OW 273
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_VAR 0 7
60844: PPUSH
60845: LD_INT 3
60847: PPUSH
60848: LD_INT 4
60850: PPUSH
60851: CALL_OW 272
60855: PUSH
60856: LD_VAR 0 8
60860: PPUSH
60861: LD_INT 3
60863: PPUSH
60864: LD_INT 4
60866: PPUSH
60867: CALL_OW 273
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_VAR 0 7
60880: PPUSH
60881: LD_INT 4
60883: PPUSH
60884: LD_INT 4
60886: PPUSH
60887: CALL_OW 272
60891: PUSH
60892: LD_VAR 0 8
60896: PPUSH
60897: LD_INT 4
60899: PPUSH
60900: LD_INT 4
60902: PPUSH
60903: CALL_OW 273
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_VAR 0 7
60916: PPUSH
60917: LD_INT 5
60919: PPUSH
60920: LD_INT 4
60922: PPUSH
60923: CALL_OW 272
60927: PUSH
60928: LD_VAR 0 8
60932: PPUSH
60933: LD_INT 5
60935: PPUSH
60936: LD_INT 4
60938: PPUSH
60939: CALL_OW 273
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: ST_TO_ADDR
// for i = tmp downto 1 do
60956: LD_ADDR_VAR 0 4
60960: PUSH
60961: DOUBLE
60962: LD_VAR 0 6
60966: INC
60967: ST_TO_ADDR
60968: LD_INT 1
60970: PUSH
60971: FOR_DOWNTO
60972: IFFALSE 61073
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60974: LD_VAR 0 6
60978: PUSH
60979: LD_VAR 0 4
60983: ARRAY
60984: PUSH
60985: LD_INT 1
60987: ARRAY
60988: PPUSH
60989: LD_VAR 0 6
60993: PUSH
60994: LD_VAR 0 4
60998: ARRAY
60999: PUSH
61000: LD_INT 2
61002: ARRAY
61003: PPUSH
61004: CALL_OW 488
61008: NOT
61009: PUSH
61010: LD_VAR 0 6
61014: PUSH
61015: LD_VAR 0 4
61019: ARRAY
61020: PUSH
61021: LD_INT 1
61023: ARRAY
61024: PPUSH
61025: LD_VAR 0 6
61029: PUSH
61030: LD_VAR 0 4
61034: ARRAY
61035: PUSH
61036: LD_INT 2
61038: ARRAY
61039: PPUSH
61040: CALL_OW 428
61044: PUSH
61045: LD_INT 0
61047: NONEQUAL
61048: OR
61049: IFFALSE 61071
// tmp := Delete ( tmp , i ) ;
61051: LD_ADDR_VAR 0 6
61055: PUSH
61056: LD_VAR 0 6
61060: PPUSH
61061: LD_VAR 0 4
61065: PPUSH
61066: CALL_OW 3
61070: ST_TO_ADDR
61071: GO 60971
61073: POP
61074: POP
// j := GetClosestHex ( unit , tmp ) ;
61075: LD_ADDR_VAR 0 5
61079: PUSH
61080: LD_VAR 0 1
61084: PPUSH
61085: LD_VAR 0 6
61089: PPUSH
61090: CALL 60375 0 2
61094: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61095: LD_VAR 0 1
61099: PPUSH
61100: LD_VAR 0 5
61104: PUSH
61105: LD_INT 1
61107: ARRAY
61108: PPUSH
61109: LD_VAR 0 5
61113: PUSH
61114: LD_INT 2
61116: ARRAY
61117: PPUSH
61118: CALL_OW 111
// end ;
61122: LD_VAR 0 3
61126: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61127: LD_INT 0
61129: PPUSH
61130: PPUSH
61131: PPUSH
// uc_side = 0 ;
61132: LD_ADDR_OWVAR 20
61136: PUSH
61137: LD_INT 0
61139: ST_TO_ADDR
// uc_nation = 0 ;
61140: LD_ADDR_OWVAR 21
61144: PUSH
61145: LD_INT 0
61147: ST_TO_ADDR
// InitHc_All ( ) ;
61148: CALL_OW 584
// InitVc ;
61152: CALL_OW 20
// if mastodonts then
61156: LD_VAR 0 6
61160: IFFALSE 61227
// for i = 1 to mastodonts do
61162: LD_ADDR_VAR 0 11
61166: PUSH
61167: DOUBLE
61168: LD_INT 1
61170: DEC
61171: ST_TO_ADDR
61172: LD_VAR 0 6
61176: PUSH
61177: FOR_TO
61178: IFFALSE 61225
// begin vc_chassis := 31 ;
61180: LD_ADDR_OWVAR 37
61184: PUSH
61185: LD_INT 31
61187: ST_TO_ADDR
// vc_control := control_rider ;
61188: LD_ADDR_OWVAR 38
61192: PUSH
61193: LD_INT 4
61195: ST_TO_ADDR
// animal := CreateVehicle ;
61196: LD_ADDR_VAR 0 12
61200: PUSH
61201: CALL_OW 45
61205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61206: LD_VAR 0 12
61210: PPUSH
61211: LD_VAR 0 8
61215: PPUSH
61216: LD_INT 0
61218: PPUSH
61219: CALL 63362 0 3
// end ;
61223: GO 61177
61225: POP
61226: POP
// if horses then
61227: LD_VAR 0 5
61231: IFFALSE 61298
// for i = 1 to horses do
61233: LD_ADDR_VAR 0 11
61237: PUSH
61238: DOUBLE
61239: LD_INT 1
61241: DEC
61242: ST_TO_ADDR
61243: LD_VAR 0 5
61247: PUSH
61248: FOR_TO
61249: IFFALSE 61296
// begin hc_class := 21 ;
61251: LD_ADDR_OWVAR 28
61255: PUSH
61256: LD_INT 21
61258: ST_TO_ADDR
// hc_gallery :=  ;
61259: LD_ADDR_OWVAR 33
61263: PUSH
61264: LD_STRING 
61266: ST_TO_ADDR
// animal := CreateHuman ;
61267: LD_ADDR_VAR 0 12
61271: PUSH
61272: CALL_OW 44
61276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61277: LD_VAR 0 12
61281: PPUSH
61282: LD_VAR 0 8
61286: PPUSH
61287: LD_INT 0
61289: PPUSH
61290: CALL 63362 0 3
// end ;
61294: GO 61248
61296: POP
61297: POP
// if birds then
61298: LD_VAR 0 1
61302: IFFALSE 61369
// for i = 1 to birds do
61304: LD_ADDR_VAR 0 11
61308: PUSH
61309: DOUBLE
61310: LD_INT 1
61312: DEC
61313: ST_TO_ADDR
61314: LD_VAR 0 1
61318: PUSH
61319: FOR_TO
61320: IFFALSE 61367
// begin hc_class = 18 ;
61322: LD_ADDR_OWVAR 28
61326: PUSH
61327: LD_INT 18
61329: ST_TO_ADDR
// hc_gallery =  ;
61330: LD_ADDR_OWVAR 33
61334: PUSH
61335: LD_STRING 
61337: ST_TO_ADDR
// animal := CreateHuman ;
61338: LD_ADDR_VAR 0 12
61342: PUSH
61343: CALL_OW 44
61347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61348: LD_VAR 0 12
61352: PPUSH
61353: LD_VAR 0 8
61357: PPUSH
61358: LD_INT 0
61360: PPUSH
61361: CALL 63362 0 3
// end ;
61365: GO 61319
61367: POP
61368: POP
// if tigers then
61369: LD_VAR 0 2
61373: IFFALSE 61457
// for i = 1 to tigers do
61375: LD_ADDR_VAR 0 11
61379: PUSH
61380: DOUBLE
61381: LD_INT 1
61383: DEC
61384: ST_TO_ADDR
61385: LD_VAR 0 2
61389: PUSH
61390: FOR_TO
61391: IFFALSE 61455
// begin hc_class = class_tiger ;
61393: LD_ADDR_OWVAR 28
61397: PUSH
61398: LD_INT 14
61400: ST_TO_ADDR
// hc_gallery =  ;
61401: LD_ADDR_OWVAR 33
61405: PUSH
61406: LD_STRING 
61408: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61409: LD_ADDR_OWVAR 35
61413: PUSH
61414: LD_INT 7
61416: NEG
61417: PPUSH
61418: LD_INT 7
61420: PPUSH
61421: CALL_OW 12
61425: ST_TO_ADDR
// animal := CreateHuman ;
61426: LD_ADDR_VAR 0 12
61430: PUSH
61431: CALL_OW 44
61435: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61436: LD_VAR 0 12
61440: PPUSH
61441: LD_VAR 0 8
61445: PPUSH
61446: LD_INT 0
61448: PPUSH
61449: CALL 63362 0 3
// end ;
61453: GO 61390
61455: POP
61456: POP
// if apemans then
61457: LD_VAR 0 3
61461: IFFALSE 61584
// for i = 1 to apemans do
61463: LD_ADDR_VAR 0 11
61467: PUSH
61468: DOUBLE
61469: LD_INT 1
61471: DEC
61472: ST_TO_ADDR
61473: LD_VAR 0 3
61477: PUSH
61478: FOR_TO
61479: IFFALSE 61582
// begin hc_class = class_apeman ;
61481: LD_ADDR_OWVAR 28
61485: PUSH
61486: LD_INT 12
61488: ST_TO_ADDR
// hc_gallery =  ;
61489: LD_ADDR_OWVAR 33
61493: PUSH
61494: LD_STRING 
61496: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61497: LD_ADDR_OWVAR 35
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PPUSH
61506: LD_INT 2
61508: PPUSH
61509: CALL_OW 12
61513: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61514: LD_ADDR_OWVAR 31
61518: PUSH
61519: LD_INT 1
61521: PPUSH
61522: LD_INT 3
61524: PPUSH
61525: CALL_OW 12
61529: PUSH
61530: LD_INT 1
61532: PPUSH
61533: LD_INT 3
61535: PPUSH
61536: CALL_OW 12
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// animal := CreateHuman ;
61553: LD_ADDR_VAR 0 12
61557: PUSH
61558: CALL_OW 44
61562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61563: LD_VAR 0 12
61567: PPUSH
61568: LD_VAR 0 8
61572: PPUSH
61573: LD_INT 0
61575: PPUSH
61576: CALL 63362 0 3
// end ;
61580: GO 61478
61582: POP
61583: POP
// if enchidnas then
61584: LD_VAR 0 4
61588: IFFALSE 61655
// for i = 1 to enchidnas do
61590: LD_ADDR_VAR 0 11
61594: PUSH
61595: DOUBLE
61596: LD_INT 1
61598: DEC
61599: ST_TO_ADDR
61600: LD_VAR 0 4
61604: PUSH
61605: FOR_TO
61606: IFFALSE 61653
// begin hc_class = 13 ;
61608: LD_ADDR_OWVAR 28
61612: PUSH
61613: LD_INT 13
61615: ST_TO_ADDR
// hc_gallery =  ;
61616: LD_ADDR_OWVAR 33
61620: PUSH
61621: LD_STRING 
61623: ST_TO_ADDR
// animal := CreateHuman ;
61624: LD_ADDR_VAR 0 12
61628: PUSH
61629: CALL_OW 44
61633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61634: LD_VAR 0 12
61638: PPUSH
61639: LD_VAR 0 8
61643: PPUSH
61644: LD_INT 0
61646: PPUSH
61647: CALL 63362 0 3
// end ;
61651: GO 61605
61653: POP
61654: POP
// if fishes then
61655: LD_VAR 0 7
61659: IFFALSE 61726
// for i = 1 to fishes do
61661: LD_ADDR_VAR 0 11
61665: PUSH
61666: DOUBLE
61667: LD_INT 1
61669: DEC
61670: ST_TO_ADDR
61671: LD_VAR 0 7
61675: PUSH
61676: FOR_TO
61677: IFFALSE 61724
// begin hc_class = 20 ;
61679: LD_ADDR_OWVAR 28
61683: PUSH
61684: LD_INT 20
61686: ST_TO_ADDR
// hc_gallery =  ;
61687: LD_ADDR_OWVAR 33
61691: PUSH
61692: LD_STRING 
61694: ST_TO_ADDR
// animal := CreateHuman ;
61695: LD_ADDR_VAR 0 12
61699: PUSH
61700: CALL_OW 44
61704: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61705: LD_VAR 0 12
61709: PPUSH
61710: LD_VAR 0 9
61714: PPUSH
61715: LD_INT 0
61717: PPUSH
61718: CALL 63362 0 3
// end ;
61722: GO 61676
61724: POP
61725: POP
// end ;
61726: LD_VAR 0 10
61730: RET
// export function WantHeal ( sci , unit ) ; begin
61731: LD_INT 0
61733: PPUSH
// if GetTaskList ( sci ) > 0 then
61734: LD_VAR 0 1
61738: PPUSH
61739: CALL_OW 437
61743: PUSH
61744: LD_INT 0
61746: GREATER
61747: IFFALSE 61817
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61749: LD_VAR 0 1
61753: PPUSH
61754: CALL_OW 437
61758: PUSH
61759: LD_INT 1
61761: ARRAY
61762: PUSH
61763: LD_INT 1
61765: ARRAY
61766: PUSH
61767: LD_STRING l
61769: EQUAL
61770: PUSH
61771: LD_VAR 0 1
61775: PPUSH
61776: CALL_OW 437
61780: PUSH
61781: LD_INT 1
61783: ARRAY
61784: PUSH
61785: LD_INT 4
61787: ARRAY
61788: PUSH
61789: LD_VAR 0 2
61793: EQUAL
61794: AND
61795: IFFALSE 61807
// result := true else
61797: LD_ADDR_VAR 0 3
61801: PUSH
61802: LD_INT 1
61804: ST_TO_ADDR
61805: GO 61815
// result := false ;
61807: LD_ADDR_VAR 0 3
61811: PUSH
61812: LD_INT 0
61814: ST_TO_ADDR
// end else
61815: GO 61825
// result := false ;
61817: LD_ADDR_VAR 0 3
61821: PUSH
61822: LD_INT 0
61824: ST_TO_ADDR
// end ;
61825: LD_VAR 0 3
61829: RET
// export function HealTarget ( sci ) ; begin
61830: LD_INT 0
61832: PPUSH
// if not sci then
61833: LD_VAR 0 1
61837: NOT
61838: IFFALSE 61842
// exit ;
61840: GO 61907
// result := 0 ;
61842: LD_ADDR_VAR 0 2
61846: PUSH
61847: LD_INT 0
61849: ST_TO_ADDR
// if GetTaskList ( sci ) then
61850: LD_VAR 0 1
61854: PPUSH
61855: CALL_OW 437
61859: IFFALSE 61907
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61861: LD_VAR 0 1
61865: PPUSH
61866: CALL_OW 437
61870: PUSH
61871: LD_INT 1
61873: ARRAY
61874: PUSH
61875: LD_INT 1
61877: ARRAY
61878: PUSH
61879: LD_STRING l
61881: EQUAL
61882: IFFALSE 61907
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61884: LD_ADDR_VAR 0 2
61888: PUSH
61889: LD_VAR 0 1
61893: PPUSH
61894: CALL_OW 437
61898: PUSH
61899: LD_INT 1
61901: ARRAY
61902: PUSH
61903: LD_INT 4
61905: ARRAY
61906: ST_TO_ADDR
// end ;
61907: LD_VAR 0 2
61911: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61912: LD_INT 0
61914: PPUSH
61915: PPUSH
61916: PPUSH
61917: PPUSH
// if not base_units then
61918: LD_VAR 0 1
61922: NOT
61923: IFFALSE 61927
// exit ;
61925: GO 62014
// result := false ;
61927: LD_ADDR_VAR 0 2
61931: PUSH
61932: LD_INT 0
61934: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61935: LD_ADDR_VAR 0 5
61939: PUSH
61940: LD_VAR 0 1
61944: PPUSH
61945: LD_INT 21
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PPUSH
61955: CALL_OW 72
61959: ST_TO_ADDR
// if not tmp then
61960: LD_VAR 0 5
61964: NOT
61965: IFFALSE 61969
// exit ;
61967: GO 62014
// for i in tmp do
61969: LD_ADDR_VAR 0 3
61973: PUSH
61974: LD_VAR 0 5
61978: PUSH
61979: FOR_IN
61980: IFFALSE 62012
// begin result := EnemyInRange ( i , 22 ) ;
61982: LD_ADDR_VAR 0 2
61986: PUSH
61987: LD_VAR 0 3
61991: PPUSH
61992: LD_INT 22
61994: PPUSH
61995: CALL 60250 0 2
61999: ST_TO_ADDR
// if result then
62000: LD_VAR 0 2
62004: IFFALSE 62010
// exit ;
62006: POP
62007: POP
62008: GO 62014
// end ;
62010: GO 61979
62012: POP
62013: POP
// end ;
62014: LD_VAR 0 2
62018: RET
// export function FilterByTag ( units , tag ) ; begin
62019: LD_INT 0
62021: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62022: LD_ADDR_VAR 0 3
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: LD_INT 120
62034: PUSH
62035: LD_VAR 0 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PPUSH
62044: CALL_OW 72
62048: ST_TO_ADDR
// end ;
62049: LD_VAR 0 3
62053: RET
// export function IsDriver ( un ) ; begin
62054: LD_INT 0
62056: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62057: LD_ADDR_VAR 0 2
62061: PUSH
62062: LD_VAR 0 1
62066: PUSH
62067: LD_INT 55
62069: PUSH
62070: EMPTY
62071: LIST
62072: PPUSH
62073: CALL_OW 69
62077: IN
62078: ST_TO_ADDR
// end ;
62079: LD_VAR 0 2
62083: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62084: LD_INT 0
62086: PPUSH
62087: PPUSH
// list := [ ] ;
62088: LD_ADDR_VAR 0 5
62092: PUSH
62093: EMPTY
62094: ST_TO_ADDR
// case d of 0 :
62095: LD_VAR 0 3
62099: PUSH
62100: LD_INT 0
62102: DOUBLE
62103: EQUAL
62104: IFTRUE 62108
62106: GO 62241
62108: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62109: LD_ADDR_VAR 0 5
62113: PUSH
62114: LD_VAR 0 1
62118: PUSH
62119: LD_INT 4
62121: MINUS
62122: PUSH
62123: LD_VAR 0 2
62127: PUSH
62128: LD_INT 4
62130: MINUS
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: PUSH
62140: LD_VAR 0 1
62144: PUSH
62145: LD_INT 3
62147: MINUS
62148: PUSH
62149: LD_VAR 0 2
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: PUSH
62162: LD_VAR 0 1
62166: PUSH
62167: LD_INT 4
62169: PLUS
62170: PUSH
62171: LD_VAR 0 2
62175: PUSH
62176: LD_INT 4
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: PUSH
62184: LD_VAR 0 1
62188: PUSH
62189: LD_INT 3
62191: PLUS
62192: PUSH
62193: LD_VAR 0 2
62197: PUSH
62198: LD_INT 3
62200: PLUS
62201: PUSH
62202: LD_INT 5
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: PUSH
62210: LD_VAR 0 1
62214: PUSH
62215: LD_VAR 0 2
62219: PUSH
62220: LD_INT 4
62222: PLUS
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: LIST
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// end ; 1 :
62239: GO 62939
62241: LD_INT 1
62243: DOUBLE
62244: EQUAL
62245: IFTRUE 62249
62247: GO 62382
62249: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62250: LD_ADDR_VAR 0 5
62254: PUSH
62255: LD_VAR 0 1
62259: PUSH
62260: LD_VAR 0 2
62264: PUSH
62265: LD_INT 4
62267: MINUS
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: LIST
62276: PUSH
62277: LD_VAR 0 1
62281: PUSH
62282: LD_INT 3
62284: MINUS
62285: PUSH
62286: LD_VAR 0 2
62290: PUSH
62291: LD_INT 3
62293: MINUS
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: PUSH
62303: LD_VAR 0 1
62307: PUSH
62308: LD_INT 4
62310: MINUS
62311: PUSH
62312: LD_VAR 0 2
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: PUSH
62325: LD_VAR 0 1
62329: PUSH
62330: LD_VAR 0 2
62334: PUSH
62335: LD_INT 3
62337: PLUS
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: PUSH
62347: LD_VAR 0 1
62351: PUSH
62352: LD_INT 4
62354: PLUS
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_INT 4
62363: PLUS
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: ST_TO_ADDR
// end ; 2 :
62380: GO 62939
62382: LD_INT 2
62384: DOUBLE
62385: EQUAL
62386: IFTRUE 62390
62388: GO 62519
62390: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62391: LD_ADDR_VAR 0 5
62395: PUSH
62396: LD_VAR 0 1
62400: PUSH
62401: LD_VAR 0 2
62405: PUSH
62406: LD_INT 3
62408: MINUS
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: LIST
62417: PUSH
62418: LD_VAR 0 1
62422: PUSH
62423: LD_INT 4
62425: PLUS
62426: PUSH
62427: LD_VAR 0 2
62431: PUSH
62432: LD_INT 4
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: PUSH
62440: LD_VAR 0 1
62444: PUSH
62445: LD_VAR 0 2
62449: PUSH
62450: LD_INT 4
62452: PLUS
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: PUSH
62462: LD_VAR 0 1
62466: PUSH
62467: LD_INT 3
62469: MINUS
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: PUSH
62484: LD_VAR 0 1
62488: PUSH
62489: LD_INT 4
62491: MINUS
62492: PUSH
62493: LD_VAR 0 2
62497: PUSH
62498: LD_INT 4
62500: MINUS
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// end ; 3 :
62517: GO 62939
62519: LD_INT 3
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62527
62525: GO 62660
62527: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62528: LD_ADDR_VAR 0 5
62532: PUSH
62533: LD_VAR 0 1
62537: PUSH
62538: LD_INT 3
62540: PLUS
62541: PUSH
62542: LD_VAR 0 2
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: LIST
62554: PUSH
62555: LD_VAR 0 1
62559: PUSH
62560: LD_INT 4
62562: PLUS
62563: PUSH
62564: LD_VAR 0 2
62568: PUSH
62569: LD_INT 4
62571: PLUS
62572: PUSH
62573: LD_INT 5
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: PUSH
62581: LD_VAR 0 1
62585: PUSH
62586: LD_INT 4
62588: MINUS
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: PUSH
62603: LD_VAR 0 1
62607: PUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_INT 4
62615: MINUS
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: PUSH
62625: LD_VAR 0 1
62629: PUSH
62630: LD_INT 3
62632: MINUS
62633: PUSH
62634: LD_VAR 0 2
62638: PUSH
62639: LD_INT 3
62641: MINUS
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: ST_TO_ADDR
// end ; 4 :
62658: GO 62939
62660: LD_INT 4
62662: DOUBLE
62663: EQUAL
62664: IFTRUE 62668
62666: GO 62801
62668: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62669: LD_ADDR_VAR 0 5
62673: PUSH
62674: LD_VAR 0 1
62678: PUSH
62679: LD_VAR 0 2
62683: PUSH
62684: LD_INT 4
62686: PLUS
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: PUSH
62696: LD_VAR 0 1
62700: PUSH
62701: LD_INT 3
62703: PLUS
62704: PUSH
62705: LD_VAR 0 2
62709: PUSH
62710: LD_INT 3
62712: PLUS
62713: PUSH
62714: LD_INT 5
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: PUSH
62722: LD_VAR 0 1
62726: PUSH
62727: LD_INT 4
62729: PLUS
62730: PUSH
62731: LD_VAR 0 2
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: PUSH
62744: LD_VAR 0 1
62748: PUSH
62749: LD_VAR 0 2
62753: PUSH
62754: LD_INT 3
62756: MINUS
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: PUSH
62766: LD_VAR 0 1
62770: PUSH
62771: LD_INT 4
62773: MINUS
62774: PUSH
62775: LD_VAR 0 2
62779: PUSH
62780: LD_INT 4
62782: MINUS
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: ST_TO_ADDR
// end ; 5 :
62799: GO 62939
62801: LD_INT 5
62803: DOUBLE
62804: EQUAL
62805: IFTRUE 62809
62807: GO 62938
62809: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62810: LD_ADDR_VAR 0 5
62814: PUSH
62815: LD_VAR 0 1
62819: PUSH
62820: LD_INT 4
62822: MINUS
62823: PUSH
62824: LD_VAR 0 2
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: PUSH
62837: LD_VAR 0 1
62841: PUSH
62842: LD_VAR 0 2
62846: PUSH
62847: LD_INT 4
62849: MINUS
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: PUSH
62859: LD_VAR 0 1
62863: PUSH
62864: LD_INT 4
62866: PLUS
62867: PUSH
62868: LD_VAR 0 2
62872: PUSH
62873: LD_INT 4
62875: PLUS
62876: PUSH
62877: LD_INT 5
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: PUSH
62885: LD_VAR 0 1
62889: PUSH
62890: LD_INT 3
62892: PLUS
62893: PUSH
62894: LD_VAR 0 2
62898: PUSH
62899: LD_INT 4
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: PUSH
62907: LD_VAR 0 1
62911: PUSH
62912: LD_VAR 0 2
62916: PUSH
62917: LD_INT 3
62919: PLUS
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// end ; end ;
62936: GO 62939
62938: POP
// result := list ;
62939: LD_ADDR_VAR 0 4
62943: PUSH
62944: LD_VAR 0 5
62948: ST_TO_ADDR
// end ;
62949: LD_VAR 0 4
62953: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62954: LD_INT 0
62956: PPUSH
62957: PPUSH
62958: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62959: LD_VAR 0 1
62963: NOT
62964: PUSH
62965: LD_VAR 0 2
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: IN
62988: NOT
62989: OR
62990: IFFALSE 62994
// exit ;
62992: GO 63086
// tmp := [ ] ;
62994: LD_ADDR_VAR 0 5
62998: PUSH
62999: EMPTY
63000: ST_TO_ADDR
// for i in units do
63001: LD_ADDR_VAR 0 4
63005: PUSH
63006: LD_VAR 0 1
63010: PUSH
63011: FOR_IN
63012: IFFALSE 63055
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63014: LD_ADDR_VAR 0 5
63018: PUSH
63019: LD_VAR 0 5
63023: PPUSH
63024: LD_VAR 0 5
63028: PUSH
63029: LD_INT 1
63031: PLUS
63032: PPUSH
63033: LD_VAR 0 4
63037: PPUSH
63038: LD_VAR 0 2
63042: PPUSH
63043: CALL_OW 259
63047: PPUSH
63048: CALL_OW 2
63052: ST_TO_ADDR
63053: GO 63011
63055: POP
63056: POP
// if not tmp then
63057: LD_VAR 0 5
63061: NOT
63062: IFFALSE 63066
// exit ;
63064: GO 63086
// result := SortListByListDesc ( units , tmp ) ;
63066: LD_ADDR_VAR 0 3
63070: PUSH
63071: LD_VAR 0 1
63075: PPUSH
63076: LD_VAR 0 5
63080: PPUSH
63081: CALL_OW 77
63085: ST_TO_ADDR
// end ;
63086: LD_VAR 0 3
63090: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63091: LD_INT 0
63093: PPUSH
63094: PPUSH
63095: PPUSH
// result := false ;
63096: LD_ADDR_VAR 0 3
63100: PUSH
63101: LD_INT 0
63103: ST_TO_ADDR
// x := GetX ( building ) ;
63104: LD_ADDR_VAR 0 4
63108: PUSH
63109: LD_VAR 0 2
63113: PPUSH
63114: CALL_OW 250
63118: ST_TO_ADDR
// y := GetY ( building ) ;
63119: LD_ADDR_VAR 0 5
63123: PUSH
63124: LD_VAR 0 2
63128: PPUSH
63129: CALL_OW 251
63133: ST_TO_ADDR
// if not building or not x or not y then
63134: LD_VAR 0 2
63138: NOT
63139: PUSH
63140: LD_VAR 0 4
63144: NOT
63145: OR
63146: PUSH
63147: LD_VAR 0 5
63151: NOT
63152: OR
63153: IFFALSE 63157
// exit ;
63155: GO 63249
// if GetTaskList ( unit ) then
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL_OW 437
63166: IFFALSE 63249
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63168: LD_STRING e
63170: PUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL_OW 437
63180: PUSH
63181: LD_INT 1
63183: ARRAY
63184: PUSH
63185: LD_INT 1
63187: ARRAY
63188: EQUAL
63189: PUSH
63190: LD_VAR 0 4
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 437
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PUSH
63209: LD_INT 2
63211: ARRAY
63212: EQUAL
63213: AND
63214: PUSH
63215: LD_VAR 0 5
63219: PUSH
63220: LD_VAR 0 1
63224: PPUSH
63225: CALL_OW 437
63229: PUSH
63230: LD_INT 1
63232: ARRAY
63233: PUSH
63234: LD_INT 3
63236: ARRAY
63237: EQUAL
63238: AND
63239: IFFALSE 63249
// result := true end ;
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: LD_INT 1
63248: ST_TO_ADDR
// end ;
63249: LD_VAR 0 3
63253: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63254: LD_INT 0
63256: PPUSH
// result := false ;
63257: LD_ADDR_VAR 0 4
63261: PUSH
63262: LD_INT 0
63264: ST_TO_ADDR
// if GetTaskList ( unit ) then
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 437
63274: IFFALSE 63357
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63276: LD_STRING M
63278: PUSH
63279: LD_VAR 0 1
63283: PPUSH
63284: CALL_OW 437
63288: PUSH
63289: LD_INT 1
63291: ARRAY
63292: PUSH
63293: LD_INT 1
63295: ARRAY
63296: EQUAL
63297: PUSH
63298: LD_VAR 0 2
63302: PUSH
63303: LD_VAR 0 1
63307: PPUSH
63308: CALL_OW 437
63312: PUSH
63313: LD_INT 1
63315: ARRAY
63316: PUSH
63317: LD_INT 2
63319: ARRAY
63320: EQUAL
63321: AND
63322: PUSH
63323: LD_VAR 0 3
63327: PUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: CALL_OW 437
63337: PUSH
63338: LD_INT 1
63340: ARRAY
63341: PUSH
63342: LD_INT 3
63344: ARRAY
63345: EQUAL
63346: AND
63347: IFFALSE 63357
// result := true ;
63349: LD_ADDR_VAR 0 4
63353: PUSH
63354: LD_INT 1
63356: ST_TO_ADDR
// end ; end ;
63357: LD_VAR 0 4
63361: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63362: LD_INT 0
63364: PPUSH
63365: PPUSH
63366: PPUSH
63367: PPUSH
// if not unit or not area then
63368: LD_VAR 0 1
63372: NOT
63373: PUSH
63374: LD_VAR 0 2
63378: NOT
63379: OR
63380: IFFALSE 63384
// exit ;
63382: GO 63548
// tmp := AreaToList ( area , i ) ;
63384: LD_ADDR_VAR 0 6
63388: PUSH
63389: LD_VAR 0 2
63393: PPUSH
63394: LD_VAR 0 5
63398: PPUSH
63399: CALL_OW 517
63403: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63404: LD_ADDR_VAR 0 5
63408: PUSH
63409: DOUBLE
63410: LD_INT 1
63412: DEC
63413: ST_TO_ADDR
63414: LD_VAR 0 6
63418: PUSH
63419: LD_INT 1
63421: ARRAY
63422: PUSH
63423: FOR_TO
63424: IFFALSE 63546
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63426: LD_ADDR_VAR 0 7
63430: PUSH
63431: LD_VAR 0 6
63435: PUSH
63436: LD_INT 1
63438: ARRAY
63439: PUSH
63440: LD_VAR 0 5
63444: ARRAY
63445: PUSH
63446: LD_VAR 0 6
63450: PUSH
63451: LD_INT 2
63453: ARRAY
63454: PUSH
63455: LD_VAR 0 5
63459: ARRAY
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63465: LD_VAR 0 7
63469: PUSH
63470: LD_INT 1
63472: ARRAY
63473: PPUSH
63474: LD_VAR 0 7
63478: PUSH
63479: LD_INT 2
63481: ARRAY
63482: PPUSH
63483: CALL_OW 428
63487: PUSH
63488: LD_INT 0
63490: EQUAL
63491: IFFALSE 63544
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63493: LD_VAR 0 1
63497: PPUSH
63498: LD_VAR 0 7
63502: PUSH
63503: LD_INT 1
63505: ARRAY
63506: PPUSH
63507: LD_VAR 0 7
63511: PUSH
63512: LD_INT 2
63514: ARRAY
63515: PPUSH
63516: LD_VAR 0 3
63520: PPUSH
63521: CALL_OW 48
// result := IsPlaced ( unit ) ;
63525: LD_ADDR_VAR 0 4
63529: PUSH
63530: LD_VAR 0 1
63534: PPUSH
63535: CALL_OW 305
63539: ST_TO_ADDR
// exit ;
63540: POP
63541: POP
63542: GO 63548
// end ; end ;
63544: GO 63423
63546: POP
63547: POP
// end ;
63548: LD_VAR 0 4
63552: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63553: LD_INT 0
63555: PPUSH
63556: PPUSH
63557: PPUSH
// if not side or side > 8 then
63558: LD_VAR 0 1
63562: NOT
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 8
63571: GREATER
63572: OR
63573: IFFALSE 63577
// exit ;
63575: GO 63764
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63577: LD_ADDR_VAR 0 4
63581: PUSH
63582: LD_INT 22
63584: PUSH
63585: LD_VAR 0 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 21
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PPUSH
63608: CALL_OW 69
63612: ST_TO_ADDR
// if not tmp then
63613: LD_VAR 0 4
63617: NOT
63618: IFFALSE 63622
// exit ;
63620: GO 63764
// enable_addtolog := true ;
63622: LD_ADDR_OWVAR 81
63626: PUSH
63627: LD_INT 1
63629: ST_TO_ADDR
// AddToLog ( [ ) ;
63630: LD_STRING [
63632: PPUSH
63633: CALL_OW 561
// for i in tmp do
63637: LD_ADDR_VAR 0 3
63641: PUSH
63642: LD_VAR 0 4
63646: PUSH
63647: FOR_IN
63648: IFFALSE 63755
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63650: LD_STRING [
63652: PUSH
63653: LD_VAR 0 3
63657: PPUSH
63658: CALL_OW 266
63662: STR
63663: PUSH
63664: LD_STRING , 
63666: STR
63667: PUSH
63668: LD_VAR 0 3
63672: PPUSH
63673: CALL_OW 250
63677: STR
63678: PUSH
63679: LD_STRING , 
63681: STR
63682: PUSH
63683: LD_VAR 0 3
63687: PPUSH
63688: CALL_OW 251
63692: STR
63693: PUSH
63694: LD_STRING , 
63696: STR
63697: PUSH
63698: LD_VAR 0 3
63702: PPUSH
63703: CALL_OW 254
63707: STR
63708: PUSH
63709: LD_STRING , 
63711: STR
63712: PUSH
63713: LD_VAR 0 3
63717: PPUSH
63718: LD_INT 1
63720: PPUSH
63721: CALL_OW 268
63725: STR
63726: PUSH
63727: LD_STRING , 
63729: STR
63730: PUSH
63731: LD_VAR 0 3
63735: PPUSH
63736: LD_INT 2
63738: PPUSH
63739: CALL_OW 268
63743: STR
63744: PUSH
63745: LD_STRING ],
63747: STR
63748: PPUSH
63749: CALL_OW 561
// end ;
63753: GO 63647
63755: POP
63756: POP
// AddToLog ( ]; ) ;
63757: LD_STRING ];
63759: PPUSH
63760: CALL_OW 561
// end ;
63764: LD_VAR 0 2
63768: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63769: LD_INT 0
63771: PPUSH
63772: PPUSH
63773: PPUSH
63774: PPUSH
63775: PPUSH
// if not area or not rate or not max then
63776: LD_VAR 0 1
63780: NOT
63781: PUSH
63782: LD_VAR 0 2
63786: NOT
63787: OR
63788: PUSH
63789: LD_VAR 0 4
63793: NOT
63794: OR
63795: IFFALSE 63799
// exit ;
63797: GO 63988
// while 1 do
63799: LD_INT 1
63801: IFFALSE 63988
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63803: LD_ADDR_VAR 0 9
63807: PUSH
63808: LD_VAR 0 1
63812: PPUSH
63813: LD_INT 1
63815: PPUSH
63816: CALL_OW 287
63820: PUSH
63821: LD_INT 10
63823: MUL
63824: ST_TO_ADDR
// r := rate / 10 ;
63825: LD_ADDR_VAR 0 7
63829: PUSH
63830: LD_VAR 0 2
63834: PUSH
63835: LD_INT 10
63837: DIVREAL
63838: ST_TO_ADDR
// time := 1 1$00 ;
63839: LD_ADDR_VAR 0 8
63843: PUSH
63844: LD_INT 2100
63846: ST_TO_ADDR
// if amount < min then
63847: LD_VAR 0 9
63851: PUSH
63852: LD_VAR 0 3
63856: LESS
63857: IFFALSE 63875
// r := r * 2 else
63859: LD_ADDR_VAR 0 7
63863: PUSH
63864: LD_VAR 0 7
63868: PUSH
63869: LD_INT 2
63871: MUL
63872: ST_TO_ADDR
63873: GO 63901
// if amount > max then
63875: LD_VAR 0 9
63879: PUSH
63880: LD_VAR 0 4
63884: GREATER
63885: IFFALSE 63901
// r := r / 2 ;
63887: LD_ADDR_VAR 0 7
63891: PUSH
63892: LD_VAR 0 7
63896: PUSH
63897: LD_INT 2
63899: DIVREAL
63900: ST_TO_ADDR
// time := time / r ;
63901: LD_ADDR_VAR 0 8
63905: PUSH
63906: LD_VAR 0 8
63910: PUSH
63911: LD_VAR 0 7
63915: DIVREAL
63916: ST_TO_ADDR
// if time < 0 then
63917: LD_VAR 0 8
63921: PUSH
63922: LD_INT 0
63924: LESS
63925: IFFALSE 63942
// time := time * - 1 ;
63927: LD_ADDR_VAR 0 8
63931: PUSH
63932: LD_VAR 0 8
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: MUL
63941: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63942: LD_VAR 0 8
63946: PUSH
63947: LD_INT 35
63949: PPUSH
63950: LD_INT 875
63952: PPUSH
63953: CALL_OW 12
63957: PLUS
63958: PPUSH
63959: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63963: LD_INT 1
63965: PPUSH
63966: LD_INT 5
63968: PPUSH
63969: CALL_OW 12
63973: PPUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: LD_INT 1
63981: PPUSH
63982: CALL_OW 55
// end ;
63986: GO 63799
// end ;
63988: LD_VAR 0 5
63992: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
// if not turrets or not factories then
64003: LD_VAR 0 1
64007: NOT
64008: PUSH
64009: LD_VAR 0 2
64013: NOT
64014: OR
64015: IFFALSE 64019
// exit ;
64017: GO 64326
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64019: LD_ADDR_VAR 0 10
64023: PUSH
64024: LD_INT 5
64026: PUSH
64027: LD_INT 6
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: LD_INT 4
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 3
64046: PUSH
64047: LD_INT 5
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 24
64061: PUSH
64062: LD_INT 25
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 23
64071: PUSH
64072: LD_INT 27
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 42
64085: PUSH
64086: LD_INT 43
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 44
64095: PUSH
64096: LD_INT 46
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 45
64105: PUSH
64106: LD_INT 47
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// result := [ ] ;
64123: LD_ADDR_VAR 0 3
64127: PUSH
64128: EMPTY
64129: ST_TO_ADDR
// for i in turrets do
64130: LD_ADDR_VAR 0 4
64134: PUSH
64135: LD_VAR 0 1
64139: PUSH
64140: FOR_IN
64141: IFFALSE 64324
// begin nat := GetNation ( i ) ;
64143: LD_ADDR_VAR 0 7
64147: PUSH
64148: LD_VAR 0 4
64152: PPUSH
64153: CALL_OW 248
64157: ST_TO_ADDR
// weapon := 0 ;
64158: LD_ADDR_VAR 0 8
64162: PUSH
64163: LD_INT 0
64165: ST_TO_ADDR
// if not nat then
64166: LD_VAR 0 7
64170: NOT
64171: IFFALSE 64175
// continue ;
64173: GO 64140
// for j in list [ nat ] do
64175: LD_ADDR_VAR 0 5
64179: PUSH
64180: LD_VAR 0 10
64184: PUSH
64185: LD_VAR 0 7
64189: ARRAY
64190: PUSH
64191: FOR_IN
64192: IFFALSE 64233
// if GetBWeapon ( i ) = j [ 1 ] then
64194: LD_VAR 0 4
64198: PPUSH
64199: CALL_OW 269
64203: PUSH
64204: LD_VAR 0 5
64208: PUSH
64209: LD_INT 1
64211: ARRAY
64212: EQUAL
64213: IFFALSE 64231
// begin weapon := j [ 2 ] ;
64215: LD_ADDR_VAR 0 8
64219: PUSH
64220: LD_VAR 0 5
64224: PUSH
64225: LD_INT 2
64227: ARRAY
64228: ST_TO_ADDR
// break ;
64229: GO 64233
// end ;
64231: GO 64191
64233: POP
64234: POP
// if not weapon then
64235: LD_VAR 0 8
64239: NOT
64240: IFFALSE 64244
// continue ;
64242: GO 64140
// for k in factories do
64244: LD_ADDR_VAR 0 6
64248: PUSH
64249: LD_VAR 0 2
64253: PUSH
64254: FOR_IN
64255: IFFALSE 64320
// begin weapons := AvailableWeaponList ( k ) ;
64257: LD_ADDR_VAR 0 9
64261: PUSH
64262: LD_VAR 0 6
64266: PPUSH
64267: CALL_OW 478
64271: ST_TO_ADDR
// if not weapons then
64272: LD_VAR 0 9
64276: NOT
64277: IFFALSE 64281
// continue ;
64279: GO 64254
// if weapon in weapons then
64281: LD_VAR 0 8
64285: PUSH
64286: LD_VAR 0 9
64290: IN
64291: IFFALSE 64318
// begin result := [ i , weapon ] ;
64293: LD_ADDR_VAR 0 3
64297: PUSH
64298: LD_VAR 0 4
64302: PUSH
64303: LD_VAR 0 8
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// exit ;
64312: POP
64313: POP
64314: POP
64315: POP
64316: GO 64326
// end ; end ;
64318: GO 64254
64320: POP
64321: POP
// end ;
64322: GO 64140
64324: POP
64325: POP
// end ;
64326: LD_VAR 0 3
64330: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64331: LD_INT 0
64333: PPUSH
// if not side or side > 8 then
64334: LD_VAR 0 3
64338: NOT
64339: PUSH
64340: LD_VAR 0 3
64344: PUSH
64345: LD_INT 8
64347: GREATER
64348: OR
64349: IFFALSE 64353
// exit ;
64351: GO 64412
// if not range then
64353: LD_VAR 0 4
64357: NOT
64358: IFFALSE 64369
// range := - 12 ;
64360: LD_ADDR_VAR 0 4
64364: PUSH
64365: LD_INT 12
64367: NEG
64368: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64369: LD_VAR 0 1
64373: PPUSH
64374: LD_VAR 0 2
64378: PPUSH
64379: LD_VAR 0 3
64383: PPUSH
64384: LD_VAR 0 4
64388: PPUSH
64389: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64393: LD_VAR 0 1
64397: PPUSH
64398: LD_VAR 0 2
64402: PPUSH
64403: LD_VAR 0 3
64407: PPUSH
64408: CALL_OW 331
// end ;
64412: LD_VAR 0 5
64416: RET
// export function Video ( mode ) ; begin
64417: LD_INT 0
64419: PPUSH
// ingame_video = mode ;
64420: LD_ADDR_OWVAR 52
64424: PUSH
64425: LD_VAR 0 1
64429: ST_TO_ADDR
// interface_hidden = mode ;
64430: LD_ADDR_OWVAR 54
64434: PUSH
64435: LD_VAR 0 1
64439: ST_TO_ADDR
// end ;
64440: LD_VAR 0 2
64444: RET
// export function Join ( array , element ) ; begin
64445: LD_INT 0
64447: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64448: LD_ADDR_VAR 0 3
64452: PUSH
64453: LD_VAR 0 1
64457: PPUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_INT 1
64465: PLUS
64466: PPUSH
64467: LD_VAR 0 2
64471: PPUSH
64472: CALL_OW 1
64476: ST_TO_ADDR
// end ;
64477: LD_VAR 0 3
64481: RET
// export function JoinUnion ( array , element ) ; begin
64482: LD_INT 0
64484: PPUSH
// result := array union element ;
64485: LD_ADDR_VAR 0 3
64489: PUSH
64490: LD_VAR 0 1
64494: PUSH
64495: LD_VAR 0 2
64499: UNION
64500: ST_TO_ADDR
// end ;
64501: LD_VAR 0 3
64505: RET
// export function GetBehemoths ( side ) ; begin
64506: LD_INT 0
64508: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64509: LD_ADDR_VAR 0 2
64513: PUSH
64514: LD_INT 22
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 31
64528: PUSH
64529: LD_INT 25
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PPUSH
64540: CALL_OW 69
64544: ST_TO_ADDR
// end ;
64545: LD_VAR 0 2
64549: RET
// export function Shuffle ( array ) ; var i , index ; begin
64550: LD_INT 0
64552: PPUSH
64553: PPUSH
64554: PPUSH
// result := [ ] ;
64555: LD_ADDR_VAR 0 2
64559: PUSH
64560: EMPTY
64561: ST_TO_ADDR
// if not array then
64562: LD_VAR 0 1
64566: NOT
64567: IFFALSE 64571
// exit ;
64569: GO 64670
// Randomize ;
64571: CALL_OW 10
// for i = array downto 1 do
64575: LD_ADDR_VAR 0 3
64579: PUSH
64580: DOUBLE
64581: LD_VAR 0 1
64585: INC
64586: ST_TO_ADDR
64587: LD_INT 1
64589: PUSH
64590: FOR_DOWNTO
64591: IFFALSE 64668
// begin index := rand ( 1 , array ) ;
64593: LD_ADDR_VAR 0 4
64597: PUSH
64598: LD_INT 1
64600: PPUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 12
64610: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64611: LD_ADDR_VAR 0 2
64615: PUSH
64616: LD_VAR 0 2
64620: PPUSH
64621: LD_VAR 0 2
64625: PUSH
64626: LD_INT 1
64628: PLUS
64629: PPUSH
64630: LD_VAR 0 1
64634: PUSH
64635: LD_VAR 0 4
64639: ARRAY
64640: PPUSH
64641: CALL_OW 2
64645: ST_TO_ADDR
// array := Delete ( array , index ) ;
64646: LD_ADDR_VAR 0 1
64650: PUSH
64651: LD_VAR 0 1
64655: PPUSH
64656: LD_VAR 0 4
64660: PPUSH
64661: CALL_OW 3
64665: ST_TO_ADDR
// end ;
64666: GO 64590
64668: POP
64669: POP
// end ;
64670: LD_VAR 0 2
64674: RET
// export function GetBaseMaterials ( base ) ; begin
64675: LD_INT 0
64677: PPUSH
// result := [ 0 , 0 , 0 ] ;
64678: LD_ADDR_VAR 0 2
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// if not base then
64697: LD_VAR 0 1
64701: NOT
64702: IFFALSE 64706
// exit ;
64704: GO 64755
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64706: LD_ADDR_VAR 0 2
64710: PUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: LD_INT 1
64718: PPUSH
64719: CALL_OW 275
64723: PUSH
64724: LD_VAR 0 1
64728: PPUSH
64729: LD_INT 2
64731: PPUSH
64732: CALL_OW 275
64736: PUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: LD_INT 3
64744: PPUSH
64745: CALL_OW 275
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: ST_TO_ADDR
// end ;
64755: LD_VAR 0 2
64759: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
// result := array ;
64764: LD_ADDR_VAR 0 3
64768: PUSH
64769: LD_VAR 0 1
64773: ST_TO_ADDR
// if size > 0 then
64774: LD_VAR 0 2
64778: PUSH
64779: LD_INT 0
64781: GREATER
64782: IFFALSE 64828
// for i := array downto size do
64784: LD_ADDR_VAR 0 4
64788: PUSH
64789: DOUBLE
64790: LD_VAR 0 1
64794: INC
64795: ST_TO_ADDR
64796: LD_VAR 0 2
64800: PUSH
64801: FOR_DOWNTO
64802: IFFALSE 64826
// result := Delete ( result , result ) ;
64804: LD_ADDR_VAR 0 3
64808: PUSH
64809: LD_VAR 0 3
64813: PPUSH
64814: LD_VAR 0 3
64818: PPUSH
64819: CALL_OW 3
64823: ST_TO_ADDR
64824: GO 64801
64826: POP
64827: POP
// end ;
64828: LD_VAR 0 3
64832: RET
// export function ComExit ( unit ) ; var tmp ; begin
64833: LD_INT 0
64835: PPUSH
64836: PPUSH
// if not IsInUnit ( unit ) then
64837: LD_VAR 0 1
64841: PPUSH
64842: CALL_OW 310
64846: NOT
64847: IFFALSE 64851
// exit ;
64849: GO 64911
// tmp := IsInUnit ( unit ) ;
64851: LD_ADDR_VAR 0 3
64855: PUSH
64856: LD_VAR 0 1
64860: PPUSH
64861: CALL_OW 310
64865: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64866: LD_VAR 0 3
64870: PPUSH
64871: CALL_OW 247
64875: PUSH
64876: LD_INT 2
64878: EQUAL
64879: IFFALSE 64892
// ComExitVehicle ( unit ) else
64881: LD_VAR 0 1
64885: PPUSH
64886: CALL_OW 121
64890: GO 64901
// ComExitBuilding ( unit ) ;
64892: LD_VAR 0 1
64896: PPUSH
64897: CALL_OW 122
// result := tmp ;
64901: LD_ADDR_VAR 0 2
64905: PUSH
64906: LD_VAR 0 3
64910: ST_TO_ADDR
// end ;
64911: LD_VAR 0 2
64915: RET
// export function ComExitAll ( units ) ; var i ; begin
64916: LD_INT 0
64918: PPUSH
64919: PPUSH
// if not units then
64920: LD_VAR 0 1
64924: NOT
64925: IFFALSE 64929
// exit ;
64927: GO 64955
// for i in units do
64929: LD_ADDR_VAR 0 3
64933: PUSH
64934: LD_VAR 0 1
64938: PUSH
64939: FOR_IN
64940: IFFALSE 64953
// ComExit ( i ) ;
64942: LD_VAR 0 3
64946: PPUSH
64947: CALL 64833 0 1
64951: GO 64939
64953: POP
64954: POP
// end ;
64955: LD_VAR 0 2
64959: RET
// export function ResetHc ; begin
64960: LD_INT 0
64962: PPUSH
// InitHc ;
64963: CALL_OW 19
// hc_importance := 0 ;
64967: LD_ADDR_OWVAR 32
64971: PUSH
64972: LD_INT 0
64974: ST_TO_ADDR
// end ;
64975: LD_VAR 0 1
64979: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64980: LD_INT 0
64982: PPUSH
64983: PPUSH
64984: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64985: LD_ADDR_VAR 0 6
64989: PUSH
64990: LD_VAR 0 1
64994: PUSH
64995: LD_VAR 0 3
64999: PLUS
65000: PUSH
65001: LD_INT 2
65003: DIV
65004: ST_TO_ADDR
// if _x < 0 then
65005: LD_VAR 0 6
65009: PUSH
65010: LD_INT 0
65012: LESS
65013: IFFALSE 65030
// _x := _x * - 1 ;
65015: LD_ADDR_VAR 0 6
65019: PUSH
65020: LD_VAR 0 6
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: MUL
65029: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65030: LD_ADDR_VAR 0 7
65034: PUSH
65035: LD_VAR 0 2
65039: PUSH
65040: LD_VAR 0 4
65044: PLUS
65045: PUSH
65046: LD_INT 2
65048: DIV
65049: ST_TO_ADDR
// if _y < 0 then
65050: LD_VAR 0 7
65054: PUSH
65055: LD_INT 0
65057: LESS
65058: IFFALSE 65075
// _y := _y * - 1 ;
65060: LD_ADDR_VAR 0 7
65064: PUSH
65065: LD_VAR 0 7
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: MUL
65074: ST_TO_ADDR
// result := [ _x , _y ] ;
65075: LD_ADDR_VAR 0 5
65079: PUSH
65080: LD_VAR 0 6
65084: PUSH
65085: LD_VAR 0 7
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// end ;
65094: LD_VAR 0 5
65098: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65099: LD_INT 0
65101: PPUSH
65102: PPUSH
65103: PPUSH
65104: PPUSH
// task := GetTaskList ( unit ) ;
65105: LD_ADDR_VAR 0 7
65109: PUSH
65110: LD_VAR 0 1
65114: PPUSH
65115: CALL_OW 437
65119: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65120: LD_VAR 0 7
65124: NOT
65125: PUSH
65126: LD_VAR 0 1
65130: PPUSH
65131: LD_VAR 0 2
65135: PPUSH
65136: CALL_OW 308
65140: NOT
65141: AND
65142: IFFALSE 65146
// exit ;
65144: GO 65264
// if IsInArea ( unit , area ) then
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_VAR 0 2
65155: PPUSH
65156: CALL_OW 308
65160: IFFALSE 65178
// begin ComMoveToArea ( unit , goAway ) ;
65162: LD_VAR 0 1
65166: PPUSH
65167: LD_VAR 0 3
65171: PPUSH
65172: CALL_OW 113
// exit ;
65176: GO 65264
// end ; if task [ 1 ] [ 1 ] <> M then
65178: LD_VAR 0 7
65182: PUSH
65183: LD_INT 1
65185: ARRAY
65186: PUSH
65187: LD_INT 1
65189: ARRAY
65190: PUSH
65191: LD_STRING M
65193: NONEQUAL
65194: IFFALSE 65198
// exit ;
65196: GO 65264
// x := task [ 1 ] [ 2 ] ;
65198: LD_ADDR_VAR 0 5
65202: PUSH
65203: LD_VAR 0 7
65207: PUSH
65208: LD_INT 1
65210: ARRAY
65211: PUSH
65212: LD_INT 2
65214: ARRAY
65215: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65216: LD_ADDR_VAR 0 6
65220: PUSH
65221: LD_VAR 0 7
65225: PUSH
65226: LD_INT 1
65228: ARRAY
65229: PUSH
65230: LD_INT 3
65232: ARRAY
65233: ST_TO_ADDR
// if InArea ( x , y , area ) then
65234: LD_VAR 0 5
65238: PPUSH
65239: LD_VAR 0 6
65243: PPUSH
65244: LD_VAR 0 2
65248: PPUSH
65249: CALL_OW 309
65253: IFFALSE 65264
// ComStop ( unit ) ;
65255: LD_VAR 0 1
65259: PPUSH
65260: CALL_OW 141
// end ;
65264: LD_VAR 0 4
65268: RET
// export function Abs ( value ) ; begin
65269: LD_INT 0
65271: PPUSH
// result := value ;
65272: LD_ADDR_VAR 0 2
65276: PUSH
65277: LD_VAR 0 1
65281: ST_TO_ADDR
// if value < 0 then
65282: LD_VAR 0 1
65286: PUSH
65287: LD_INT 0
65289: LESS
65290: IFFALSE 65307
// result := value * - 1 ;
65292: LD_ADDR_VAR 0 2
65296: PUSH
65297: LD_VAR 0 1
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: MUL
65306: ST_TO_ADDR
// end ;
65307: LD_VAR 0 2
65311: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
// if not unit or not building then
65322: LD_VAR 0 1
65326: NOT
65327: PUSH
65328: LD_VAR 0 2
65332: NOT
65333: OR
65334: IFFALSE 65338
// exit ;
65336: GO 65564
// x := GetX ( building ) ;
65338: LD_ADDR_VAR 0 4
65342: PUSH
65343: LD_VAR 0 2
65347: PPUSH
65348: CALL_OW 250
65352: ST_TO_ADDR
// y := GetY ( building ) ;
65353: LD_ADDR_VAR 0 6
65357: PUSH
65358: LD_VAR 0 2
65362: PPUSH
65363: CALL_OW 251
65367: ST_TO_ADDR
// d := GetDir ( building ) ;
65368: LD_ADDR_VAR 0 8
65372: PUSH
65373: LD_VAR 0 2
65377: PPUSH
65378: CALL_OW 254
65382: ST_TO_ADDR
// r := 4 ;
65383: LD_ADDR_VAR 0 9
65387: PUSH
65388: LD_INT 4
65390: ST_TO_ADDR
// for i := 1 to 5 do
65391: LD_ADDR_VAR 0 10
65395: PUSH
65396: DOUBLE
65397: LD_INT 1
65399: DEC
65400: ST_TO_ADDR
65401: LD_INT 5
65403: PUSH
65404: FOR_TO
65405: IFFALSE 65562
// begin _x := ShiftX ( x , d , r + i ) ;
65407: LD_ADDR_VAR 0 5
65411: PUSH
65412: LD_VAR 0 4
65416: PPUSH
65417: LD_VAR 0 8
65421: PPUSH
65422: LD_VAR 0 9
65426: PUSH
65427: LD_VAR 0 10
65431: PLUS
65432: PPUSH
65433: CALL_OW 272
65437: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65438: LD_ADDR_VAR 0 7
65442: PUSH
65443: LD_VAR 0 6
65447: PPUSH
65448: LD_VAR 0 8
65452: PPUSH
65453: LD_VAR 0 9
65457: PUSH
65458: LD_VAR 0 10
65462: PLUS
65463: PPUSH
65464: CALL_OW 273
65468: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65469: LD_VAR 0 5
65473: PPUSH
65474: LD_VAR 0 7
65478: PPUSH
65479: CALL_OW 488
65483: PUSH
65484: LD_VAR 0 5
65488: PPUSH
65489: LD_VAR 0 7
65493: PPUSH
65494: CALL_OW 428
65498: PPUSH
65499: CALL_OW 247
65503: PUSH
65504: LD_INT 3
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: IN
65514: NOT
65515: AND
65516: IFFALSE 65560
// begin ComMoveXY ( unit , _x , _y ) ;
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 5
65527: PPUSH
65528: LD_VAR 0 7
65532: PPUSH
65533: CALL_OW 111
// result := [ _x , _y ] ;
65537: LD_ADDR_VAR 0 3
65541: PUSH
65542: LD_VAR 0 5
65546: PUSH
65547: LD_VAR 0 7
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: ST_TO_ADDR
// exit ;
65556: POP
65557: POP
65558: GO 65564
// end ; end ;
65560: GO 65404
65562: POP
65563: POP
// end ;
65564: LD_VAR 0 3
65568: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65569: LD_INT 0
65571: PPUSH
65572: PPUSH
65573: PPUSH
// result := 0 ;
65574: LD_ADDR_VAR 0 3
65578: PUSH
65579: LD_INT 0
65581: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65582: LD_VAR 0 1
65586: PUSH
65587: LD_INT 0
65589: LESS
65590: PUSH
65591: LD_VAR 0 1
65595: PUSH
65596: LD_INT 8
65598: GREATER
65599: OR
65600: PUSH
65601: LD_VAR 0 2
65605: PUSH
65606: LD_INT 0
65608: LESS
65609: OR
65610: PUSH
65611: LD_VAR 0 2
65615: PUSH
65616: LD_INT 8
65618: GREATER
65619: OR
65620: IFFALSE 65624
// exit ;
65622: GO 65699
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65624: LD_ADDR_VAR 0 4
65628: PUSH
65629: LD_INT 22
65631: PUSH
65632: LD_VAR 0 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PPUSH
65641: CALL_OW 69
65645: PUSH
65646: FOR_IN
65647: IFFALSE 65697
// begin un := UnitShoot ( i ) ;
65649: LD_ADDR_VAR 0 5
65653: PUSH
65654: LD_VAR 0 4
65658: PPUSH
65659: CALL_OW 504
65663: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65664: LD_VAR 0 5
65668: PPUSH
65669: CALL_OW 255
65673: PUSH
65674: LD_VAR 0 1
65678: EQUAL
65679: IFFALSE 65695
// begin result := un ;
65681: LD_ADDR_VAR 0 3
65685: PUSH
65686: LD_VAR 0 5
65690: ST_TO_ADDR
// exit ;
65691: POP
65692: POP
65693: GO 65699
// end ; end ;
65695: GO 65646
65697: POP
65698: POP
// end ;
65699: LD_VAR 0 3
65703: RET
// export function GetCargoBay ( units ) ; begin
65704: LD_INT 0
65706: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65707: LD_ADDR_VAR 0 2
65711: PUSH
65712: LD_VAR 0 1
65716: PPUSH
65717: LD_INT 2
65719: PUSH
65720: LD_INT 34
65722: PUSH
65723: LD_INT 12
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 34
65732: PUSH
65733: LD_INT 51
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 34
65742: PUSH
65743: LD_INT 32
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 34
65752: PUSH
65753: LD_EXP 53
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: PPUSH
65769: CALL_OW 72
65773: ST_TO_ADDR
// end ;
65774: LD_VAR 0 2
65778: RET
// export function Negate ( value ) ; begin
65779: LD_INT 0
65781: PPUSH
// result := not value ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 1
65791: NOT
65792: ST_TO_ADDR
// end ;
65793: LD_VAR 0 2
65797: RET
// export function Inc ( value ) ; begin
65798: LD_INT 0
65800: PPUSH
// result := value + 1 ;
65801: LD_ADDR_VAR 0 2
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 1
65813: PLUS
65814: ST_TO_ADDR
// end ;
65815: LD_VAR 0 2
65819: RET
// export function Dec ( value ) ; begin
65820: LD_INT 0
65822: PPUSH
// result := value - 1 ;
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 1
65835: MINUS
65836: ST_TO_ADDR
// end ;
65837: LD_VAR 0 2
65841: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65842: LD_INT 0
65844: PPUSH
65845: PPUSH
65846: PPUSH
65847: PPUSH
65848: PPUSH
65849: PPUSH
65850: PPUSH
65851: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65852: LD_VAR 0 1
65856: PPUSH
65857: LD_VAR 0 2
65861: PPUSH
65862: CALL_OW 488
65866: NOT
65867: PUSH
65868: LD_VAR 0 3
65872: PPUSH
65873: LD_VAR 0 4
65877: PPUSH
65878: CALL_OW 488
65882: NOT
65883: OR
65884: IFFALSE 65897
// begin result := - 1 ;
65886: LD_ADDR_VAR 0 5
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: ST_TO_ADDR
// exit ;
65895: GO 66132
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65897: LD_ADDR_VAR 0 12
65901: PUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: LD_VAR 0 4
65921: PPUSH
65922: CALL 64980 0 4
65926: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65927: LD_ADDR_VAR 0 11
65931: PUSH
65932: LD_VAR 0 1
65936: PPUSH
65937: LD_VAR 0 2
65941: PPUSH
65942: LD_VAR 0 12
65946: PUSH
65947: LD_INT 1
65949: ARRAY
65950: PPUSH
65951: LD_VAR 0 12
65955: PUSH
65956: LD_INT 2
65958: ARRAY
65959: PPUSH
65960: CALL_OW 298
65964: ST_TO_ADDR
// distance := 9999 ;
65965: LD_ADDR_VAR 0 10
65969: PUSH
65970: LD_INT 9999
65972: ST_TO_ADDR
// for i := 0 to 5 do
65973: LD_ADDR_VAR 0 6
65977: PUSH
65978: DOUBLE
65979: LD_INT 0
65981: DEC
65982: ST_TO_ADDR
65983: LD_INT 5
65985: PUSH
65986: FOR_TO
65987: IFFALSE 66130
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65989: LD_ADDR_VAR 0 7
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: LD_VAR 0 6
66003: PPUSH
66004: LD_VAR 0 11
66008: PPUSH
66009: CALL_OW 272
66013: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66014: LD_ADDR_VAR 0 8
66018: PUSH
66019: LD_VAR 0 2
66023: PPUSH
66024: LD_VAR 0 6
66028: PPUSH
66029: LD_VAR 0 11
66033: PPUSH
66034: CALL_OW 273
66038: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66039: LD_VAR 0 7
66043: PPUSH
66044: LD_VAR 0 8
66048: PPUSH
66049: CALL_OW 488
66053: NOT
66054: IFFALSE 66058
// continue ;
66056: GO 65986
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66058: LD_ADDR_VAR 0 9
66062: PUSH
66063: LD_VAR 0 12
66067: PUSH
66068: LD_INT 1
66070: ARRAY
66071: PPUSH
66072: LD_VAR 0 12
66076: PUSH
66077: LD_INT 2
66079: ARRAY
66080: PPUSH
66081: LD_VAR 0 7
66085: PPUSH
66086: LD_VAR 0 8
66090: PPUSH
66091: CALL_OW 298
66095: ST_TO_ADDR
// if tmp < distance then
66096: LD_VAR 0 9
66100: PUSH
66101: LD_VAR 0 10
66105: LESS
66106: IFFALSE 66128
// begin result := i ;
66108: LD_ADDR_VAR 0 5
66112: PUSH
66113: LD_VAR 0 6
66117: ST_TO_ADDR
// distance := tmp ;
66118: LD_ADDR_VAR 0 10
66122: PUSH
66123: LD_VAR 0 9
66127: ST_TO_ADDR
// end ; end ;
66128: GO 65986
66130: POP
66131: POP
// end ;
66132: LD_VAR 0 5
66136: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66137: LD_INT 0
66139: PPUSH
66140: PPUSH
// if not driver or not IsInUnit ( driver ) then
66141: LD_VAR 0 1
66145: NOT
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: CALL_OW 310
66156: NOT
66157: OR
66158: IFFALSE 66162
// exit ;
66160: GO 66252
// vehicle := IsInUnit ( driver ) ;
66162: LD_ADDR_VAR 0 3
66166: PUSH
66167: LD_VAR 0 1
66171: PPUSH
66172: CALL_OW 310
66176: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66177: LD_VAR 0 1
66181: PPUSH
66182: LD_STRING \
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: PUSH
66212: LD_STRING E
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_VAR 0 3
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PPUSH
66248: CALL_OW 446
// end ;
66252: LD_VAR 0 2
66256: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66257: LD_INT 0
66259: PPUSH
66260: PPUSH
// if not driver or not IsInUnit ( driver ) then
66261: LD_VAR 0 1
66265: NOT
66266: PUSH
66267: LD_VAR 0 1
66271: PPUSH
66272: CALL_OW 310
66276: NOT
66277: OR
66278: IFFALSE 66282
// exit ;
66280: GO 66372
// vehicle := IsInUnit ( driver ) ;
66282: LD_ADDR_VAR 0 3
66286: PUSH
66287: LD_VAR 0 1
66291: PPUSH
66292: CALL_OW 310
66296: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66297: LD_VAR 0 1
66301: PPUSH
66302: LD_STRING \
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: LD_STRING E
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_VAR 0 3
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PPUSH
66368: CALL_OW 447
// end ;
66372: LD_VAR 0 2
66376: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66377: LD_INT 0
66379: PPUSH
66380: PPUSH
66381: PPUSH
// tmp := [ ] ;
66382: LD_ADDR_VAR 0 5
66386: PUSH
66387: EMPTY
66388: ST_TO_ADDR
// for i in units do
66389: LD_ADDR_VAR 0 4
66393: PUSH
66394: LD_VAR 0 1
66398: PUSH
66399: FOR_IN
66400: IFFALSE 66438
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66402: LD_ADDR_VAR 0 5
66406: PUSH
66407: LD_VAR 0 5
66411: PPUSH
66412: LD_VAR 0 5
66416: PUSH
66417: LD_INT 1
66419: PLUS
66420: PPUSH
66421: LD_VAR 0 4
66425: PPUSH
66426: CALL_OW 256
66430: PPUSH
66431: CALL_OW 2
66435: ST_TO_ADDR
66436: GO 66399
66438: POP
66439: POP
// if not tmp then
66440: LD_VAR 0 5
66444: NOT
66445: IFFALSE 66449
// exit ;
66447: GO 66497
// if asc then
66449: LD_VAR 0 2
66453: IFFALSE 66477
// result := SortListByListAsc ( units , tmp ) else
66455: LD_ADDR_VAR 0 3
66459: PUSH
66460: LD_VAR 0 1
66464: PPUSH
66465: LD_VAR 0 5
66469: PPUSH
66470: CALL_OW 76
66474: ST_TO_ADDR
66475: GO 66497
// result := SortListByListDesc ( units , tmp ) ;
66477: LD_ADDR_VAR 0 3
66481: PUSH
66482: LD_VAR 0 1
66486: PPUSH
66487: LD_VAR 0 5
66491: PPUSH
66492: CALL_OW 77
66496: ST_TO_ADDR
// end ;
66497: LD_VAR 0 3
66501: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
// task := GetTaskList ( mech ) ;
66506: LD_ADDR_VAR 0 4
66510: PUSH
66511: LD_VAR 0 1
66515: PPUSH
66516: CALL_OW 437
66520: ST_TO_ADDR
// if not task then
66521: LD_VAR 0 4
66525: NOT
66526: IFFALSE 66530
// exit ;
66528: GO 66572
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66530: LD_ADDR_VAR 0 3
66534: PUSH
66535: LD_VAR 0 4
66539: PUSH
66540: LD_INT 1
66542: ARRAY
66543: PUSH
66544: LD_INT 1
66546: ARRAY
66547: PUSH
66548: LD_STRING r
66550: EQUAL
66551: PUSH
66552: LD_VAR 0 4
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PUSH
66561: LD_INT 4
66563: ARRAY
66564: PUSH
66565: LD_VAR 0 2
66569: EQUAL
66570: AND
66571: ST_TO_ADDR
// end ;
66572: LD_VAR 0 3
66576: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66577: LD_INT 0
66579: PPUSH
// SetDir ( unit , d ) ;
66580: LD_VAR 0 1
66584: PPUSH
66585: LD_VAR 0 4
66589: PPUSH
66590: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66594: LD_VAR 0 1
66598: PPUSH
66599: LD_VAR 0 2
66603: PPUSH
66604: LD_VAR 0 3
66608: PPUSH
66609: LD_VAR 0 5
66613: PPUSH
66614: CALL_OW 48
// end ;
66618: LD_VAR 0 6
66622: RET
// export function ToNaturalNumber ( number ) ; begin
66623: LD_INT 0
66625: PPUSH
// result := number div 1 ;
66626: LD_ADDR_VAR 0 2
66630: PUSH
66631: LD_VAR 0 1
66635: PUSH
66636: LD_INT 1
66638: DIV
66639: ST_TO_ADDR
// if number < 0 then
66640: LD_VAR 0 1
66644: PUSH
66645: LD_INT 0
66647: LESS
66648: IFFALSE 66658
// result := 0 ;
66650: LD_ADDR_VAR 0 2
66654: PUSH
66655: LD_INT 0
66657: ST_TO_ADDR
// end ;
66658: LD_VAR 0 2
66662: RET
// export function SortByClass ( units , class ) ; var un ; begin
66663: LD_INT 0
66665: PPUSH
66666: PPUSH
// if not units or not class then
66667: LD_VAR 0 1
66671: NOT
66672: PUSH
66673: LD_VAR 0 2
66677: NOT
66678: OR
66679: IFFALSE 66683
// exit ;
66681: GO 66778
// result := [ ] ;
66683: LD_ADDR_VAR 0 3
66687: PUSH
66688: EMPTY
66689: ST_TO_ADDR
// for un in units do
66690: LD_ADDR_VAR 0 4
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: FOR_IN
66701: IFFALSE 66776
// if GetClass ( un ) = class then
66703: LD_VAR 0 4
66707: PPUSH
66708: CALL_OW 257
66712: PUSH
66713: LD_VAR 0 2
66717: EQUAL
66718: IFFALSE 66745
// result := Insert ( result , 1 , un ) else
66720: LD_ADDR_VAR 0 3
66724: PUSH
66725: LD_VAR 0 3
66729: PPUSH
66730: LD_INT 1
66732: PPUSH
66733: LD_VAR 0 4
66737: PPUSH
66738: CALL_OW 2
66742: ST_TO_ADDR
66743: GO 66774
// result := Replace ( result , result + 1 , un ) ;
66745: LD_ADDR_VAR 0 3
66749: PUSH
66750: LD_VAR 0 3
66754: PPUSH
66755: LD_VAR 0 3
66759: PUSH
66760: LD_INT 1
66762: PLUS
66763: PPUSH
66764: LD_VAR 0 4
66768: PPUSH
66769: CALL_OW 1
66773: ST_TO_ADDR
66774: GO 66700
66776: POP
66777: POP
// end ;
66778: LD_VAR 0 3
66782: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66783: LD_INT 0
66785: PPUSH
66786: PPUSH
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
66791: PPUSH
// result := [ ] ;
66792: LD_ADDR_VAR 0 4
66796: PUSH
66797: EMPTY
66798: ST_TO_ADDR
// if x - r < 0 then
66799: LD_VAR 0 1
66803: PUSH
66804: LD_VAR 0 3
66808: MINUS
66809: PUSH
66810: LD_INT 0
66812: LESS
66813: IFFALSE 66825
// min_x := 0 else
66815: LD_ADDR_VAR 0 8
66819: PUSH
66820: LD_INT 0
66822: ST_TO_ADDR
66823: GO 66841
// min_x := x - r ;
66825: LD_ADDR_VAR 0 8
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: LD_VAR 0 3
66839: MINUS
66840: ST_TO_ADDR
// if y - r < 0 then
66841: LD_VAR 0 2
66845: PUSH
66846: LD_VAR 0 3
66850: MINUS
66851: PUSH
66852: LD_INT 0
66854: LESS
66855: IFFALSE 66867
// min_y := 0 else
66857: LD_ADDR_VAR 0 7
66861: PUSH
66862: LD_INT 0
66864: ST_TO_ADDR
66865: GO 66883
// min_y := y - r ;
66867: LD_ADDR_VAR 0 7
66871: PUSH
66872: LD_VAR 0 2
66876: PUSH
66877: LD_VAR 0 3
66881: MINUS
66882: ST_TO_ADDR
// max_x := x + r ;
66883: LD_ADDR_VAR 0 9
66887: PUSH
66888: LD_VAR 0 1
66892: PUSH
66893: LD_VAR 0 3
66897: PLUS
66898: ST_TO_ADDR
// max_y := y + r ;
66899: LD_ADDR_VAR 0 10
66903: PUSH
66904: LD_VAR 0 2
66908: PUSH
66909: LD_VAR 0 3
66913: PLUS
66914: ST_TO_ADDR
// for _x = min_x to max_x do
66915: LD_ADDR_VAR 0 5
66919: PUSH
66920: DOUBLE
66921: LD_VAR 0 8
66925: DEC
66926: ST_TO_ADDR
66927: LD_VAR 0 9
66931: PUSH
66932: FOR_TO
66933: IFFALSE 67034
// for _y = min_y to max_y do
66935: LD_ADDR_VAR 0 6
66939: PUSH
66940: DOUBLE
66941: LD_VAR 0 7
66945: DEC
66946: ST_TO_ADDR
66947: LD_VAR 0 10
66951: PUSH
66952: FOR_TO
66953: IFFALSE 67030
// begin if not ValidHex ( _x , _y ) then
66955: LD_VAR 0 5
66959: PPUSH
66960: LD_VAR 0 6
66964: PPUSH
66965: CALL_OW 488
66969: NOT
66970: IFFALSE 66974
// continue ;
66972: GO 66952
// if GetResourceTypeXY ( _x , _y ) then
66974: LD_VAR 0 5
66978: PPUSH
66979: LD_VAR 0 6
66983: PPUSH
66984: CALL_OW 283
66988: IFFALSE 67028
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66990: LD_ADDR_VAR 0 4
66994: PUSH
66995: LD_VAR 0 4
66999: PPUSH
67000: LD_VAR 0 4
67004: PUSH
67005: LD_INT 1
67007: PLUS
67008: PPUSH
67009: LD_VAR 0 5
67013: PUSH
67014: LD_VAR 0 6
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PPUSH
67023: CALL_OW 1
67027: ST_TO_ADDR
// end ;
67028: GO 66952
67030: POP
67031: POP
67032: GO 66932
67034: POP
67035: POP
// end ;
67036: LD_VAR 0 4
67040: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67041: LD_INT 0
67043: PPUSH
67044: PPUSH
67045: PPUSH
67046: PPUSH
67047: PPUSH
67048: PPUSH
67049: PPUSH
67050: PPUSH
// if not units then
67051: LD_VAR 0 1
67055: NOT
67056: IFFALSE 67060
// exit ;
67058: GO 67485
// result := UnitFilter ( units , [ f_ok ] ) ;
67060: LD_ADDR_VAR 0 3
67064: PUSH
67065: LD_VAR 0 1
67069: PPUSH
67070: LD_INT 50
67072: PUSH
67073: EMPTY
67074: LIST
67075: PPUSH
67076: CALL_OW 72
67080: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67081: LD_ADDR_VAR 0 8
67085: PUSH
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PPUSH
67095: CALL_OW 255
67099: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67100: LD_ADDR_VAR 0 10
67104: PUSH
67105: LD_INT 29
67107: PUSH
67108: LD_EXP 56
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: ST_TO_ADDR
// if not result then
67117: LD_VAR 0 3
67121: NOT
67122: IFFALSE 67126
// exit ;
67124: GO 67485
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67126: LD_ADDR_VAR 0 5
67130: PUSH
67131: LD_INT 81
67133: PUSH
67134: LD_VAR 0 8
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PPUSH
67143: CALL_OW 69
67147: ST_TO_ADDR
// for i in result do
67148: LD_ADDR_VAR 0 4
67152: PUSH
67153: LD_VAR 0 3
67157: PUSH
67158: FOR_IN
67159: IFFALSE 67483
// begin tag := GetTag ( i ) + 1 ;
67161: LD_ADDR_VAR 0 9
67165: PUSH
67166: LD_VAR 0 4
67170: PPUSH
67171: CALL_OW 110
67175: PUSH
67176: LD_INT 1
67178: PLUS
67179: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67180: LD_ADDR_VAR 0 7
67184: PUSH
67185: LD_VAR 0 4
67189: PPUSH
67190: CALL_OW 250
67194: PPUSH
67195: LD_VAR 0 4
67199: PPUSH
67200: CALL_OW 251
67204: PPUSH
67205: LD_INT 6
67207: PPUSH
67208: CALL 66783 0 3
67212: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67213: LD_VAR 0 7
67217: PUSH
67218: LD_VAR 0 4
67222: PPUSH
67223: CALL_OW 264
67227: PUSH
67228: LD_VAR 0 10
67232: IN
67233: NOT
67234: AND
67235: IFFALSE 67274
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67237: LD_VAR 0 4
67241: PPUSH
67242: LD_VAR 0 7
67246: PUSH
67247: LD_INT 1
67249: ARRAY
67250: PUSH
67251: LD_INT 1
67253: ARRAY
67254: PPUSH
67255: LD_VAR 0 7
67259: PUSH
67260: LD_INT 1
67262: ARRAY
67263: PUSH
67264: LD_INT 2
67266: ARRAY
67267: PPUSH
67268: CALL_OW 116
67272: GO 67481
// if path > tag then
67274: LD_VAR 0 2
67278: PUSH
67279: LD_VAR 0 9
67283: GREATER
67284: IFFALSE 67451
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
67286: LD_ADDR_VAR 0 6
67290: PUSH
67291: LD_VAR 0 5
67295: PPUSH
67296: LD_INT 91
67298: PUSH
67299: LD_VAR 0 4
67303: PUSH
67304: LD_INT 12
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: PPUSH
67312: CALL_OW 72
67316: ST_TO_ADDR
// if nearEnemy then
67317: LD_VAR 0 6
67321: IFFALSE 67349
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67323: LD_VAR 0 4
67327: PPUSH
67328: LD_VAR 0 6
67332: PPUSH
67333: LD_VAR 0 4
67337: PPUSH
67338: CALL_OW 74
67342: PPUSH
67343: CALL_OW 115
67347: GO 67449
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67349: LD_VAR 0 4
67353: PPUSH
67354: LD_VAR 0 2
67358: PUSH
67359: LD_VAR 0 9
67363: ARRAY
67364: PUSH
67365: LD_INT 1
67367: ARRAY
67368: PPUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_VAR 0 9
67378: ARRAY
67379: PUSH
67380: LD_INT 2
67382: ARRAY
67383: PPUSH
67384: CALL_OW 297
67388: PUSH
67389: LD_INT 6
67391: GREATER
67392: IFFALSE 67435
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67394: LD_VAR 0 4
67398: PPUSH
67399: LD_VAR 0 2
67403: PUSH
67404: LD_VAR 0 9
67408: ARRAY
67409: PUSH
67410: LD_INT 1
67412: ARRAY
67413: PPUSH
67414: LD_VAR 0 2
67418: PUSH
67419: LD_VAR 0 9
67423: ARRAY
67424: PUSH
67425: LD_INT 2
67427: ARRAY
67428: PPUSH
67429: CALL_OW 114
67433: GO 67449
// SetTag ( i , tag ) ;
67435: LD_VAR 0 4
67439: PPUSH
67440: LD_VAR 0 9
67444: PPUSH
67445: CALL_OW 109
// end else
67449: GO 67481
// if enemy then
67451: LD_VAR 0 5
67455: IFFALSE 67481
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67457: LD_VAR 0 4
67461: PPUSH
67462: LD_VAR 0 5
67466: PPUSH
67467: LD_VAR 0 4
67471: PPUSH
67472: CALL_OW 74
67476: PPUSH
67477: CALL_OW 115
// end ;
67481: GO 67158
67483: POP
67484: POP
// end ;
67485: LD_VAR 0 3
67489: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67490: LD_INT 0
67492: PPUSH
67493: PPUSH
67494: PPUSH
// if not unit or IsInUnit ( unit ) then
67495: LD_VAR 0 1
67499: NOT
67500: PUSH
67501: LD_VAR 0 1
67505: PPUSH
67506: CALL_OW 310
67510: OR
67511: IFFALSE 67515
// exit ;
67513: GO 67606
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67515: LD_ADDR_VAR 0 4
67519: PUSH
67520: LD_VAR 0 1
67524: PPUSH
67525: CALL_OW 250
67529: PPUSH
67530: LD_VAR 0 2
67534: PPUSH
67535: LD_INT 1
67537: PPUSH
67538: CALL_OW 272
67542: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67543: LD_ADDR_VAR 0 5
67547: PUSH
67548: LD_VAR 0 1
67552: PPUSH
67553: CALL_OW 251
67557: PPUSH
67558: LD_VAR 0 2
67562: PPUSH
67563: LD_INT 1
67565: PPUSH
67566: CALL_OW 273
67570: ST_TO_ADDR
// if ValidHex ( x , y ) then
67571: LD_VAR 0 4
67575: PPUSH
67576: LD_VAR 0 5
67580: PPUSH
67581: CALL_OW 488
67585: IFFALSE 67606
// ComTurnXY ( unit , x , y ) ;
67587: LD_VAR 0 1
67591: PPUSH
67592: LD_VAR 0 4
67596: PPUSH
67597: LD_VAR 0 5
67601: PPUSH
67602: CALL_OW 118
// end ;
67606: LD_VAR 0 3
67610: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67611: LD_INT 0
67613: PPUSH
67614: PPUSH
// result := false ;
67615: LD_ADDR_VAR 0 3
67619: PUSH
67620: LD_INT 0
67622: ST_TO_ADDR
// if not units then
67623: LD_VAR 0 2
67627: NOT
67628: IFFALSE 67632
// exit ;
67630: GO 67677
// for i in units do
67632: LD_ADDR_VAR 0 4
67636: PUSH
67637: LD_VAR 0 2
67641: PUSH
67642: FOR_IN
67643: IFFALSE 67675
// if See ( side , i ) then
67645: LD_VAR 0 1
67649: PPUSH
67650: LD_VAR 0 4
67654: PPUSH
67655: CALL_OW 292
67659: IFFALSE 67673
// begin result := true ;
67661: LD_ADDR_VAR 0 3
67665: PUSH
67666: LD_INT 1
67668: ST_TO_ADDR
// exit ;
67669: POP
67670: POP
67671: GO 67677
// end ;
67673: GO 67642
67675: POP
67676: POP
// end ;
67677: LD_VAR 0 3
67681: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67682: LD_INT 0
67684: PPUSH
67685: PPUSH
67686: PPUSH
67687: PPUSH
// if not unit or not points then
67688: LD_VAR 0 1
67692: NOT
67693: PUSH
67694: LD_VAR 0 2
67698: NOT
67699: OR
67700: IFFALSE 67704
// exit ;
67702: GO 67794
// dist := 99999 ;
67704: LD_ADDR_VAR 0 5
67708: PUSH
67709: LD_INT 99999
67711: ST_TO_ADDR
// for i in points do
67712: LD_ADDR_VAR 0 4
67716: PUSH
67717: LD_VAR 0 2
67721: PUSH
67722: FOR_IN
67723: IFFALSE 67792
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67725: LD_ADDR_VAR 0 6
67729: PUSH
67730: LD_VAR 0 1
67734: PPUSH
67735: LD_VAR 0 4
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: PPUSH
67744: LD_VAR 0 4
67748: PUSH
67749: LD_INT 2
67751: ARRAY
67752: PPUSH
67753: CALL_OW 297
67757: ST_TO_ADDR
// if tmpDist < dist then
67758: LD_VAR 0 6
67762: PUSH
67763: LD_VAR 0 5
67767: LESS
67768: IFFALSE 67790
// begin result := i ;
67770: LD_ADDR_VAR 0 3
67774: PUSH
67775: LD_VAR 0 4
67779: ST_TO_ADDR
// dist := tmpDist ;
67780: LD_ADDR_VAR 0 5
67784: PUSH
67785: LD_VAR 0 6
67789: ST_TO_ADDR
// end ; end ;
67790: GO 67722
67792: POP
67793: POP
// end ; end_of_file
67794: LD_VAR 0 3
67798: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67799: LD_VAR 0 1
67803: PUSH
67804: LD_INT 200
67806: DOUBLE
67807: GREATEREQUAL
67808: IFFALSE 67816
67810: LD_INT 299
67812: DOUBLE
67813: LESSEQUAL
67814: IFTRUE 67818
67816: GO 67850
67818: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67819: LD_VAR 0 1
67823: PPUSH
67824: LD_VAR 0 2
67828: PPUSH
67829: LD_VAR 0 3
67833: PPUSH
67834: LD_VAR 0 4
67838: PPUSH
67839: LD_VAR 0 5
67843: PPUSH
67844: CALL 23502 0 5
67848: GO 67927
67850: LD_INT 300
67852: DOUBLE
67853: GREATEREQUAL
67854: IFFALSE 67862
67856: LD_INT 399
67858: DOUBLE
67859: LESSEQUAL
67860: IFTRUE 67864
67862: GO 67926
67864: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67865: LD_VAR 0 1
67869: PPUSH
67870: LD_VAR 0 2
67874: PPUSH
67875: LD_VAR 0 3
67879: PPUSH
67880: LD_VAR 0 4
67884: PPUSH
67885: LD_VAR 0 5
67889: PPUSH
67890: LD_VAR 0 6
67894: PPUSH
67895: LD_VAR 0 7
67899: PPUSH
67900: LD_VAR 0 8
67904: PPUSH
67905: LD_VAR 0 9
67909: PPUSH
67910: LD_VAR 0 10
67914: PPUSH
67915: LD_VAR 0 11
67919: PPUSH
67920: CALL 21144 0 11
67924: GO 67927
67926: POP
// end ;
67927: PPOPN 11
67929: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67930: LD_VAR 0 1
67934: PPUSH
67935: LD_VAR 0 2
67939: PPUSH
67940: LD_VAR 0 3
67944: PPUSH
67945: LD_VAR 0 4
67949: PPUSH
67950: LD_VAR 0 5
67954: PPUSH
67955: CALL 23238 0 5
// end ; end_of_file
67959: PPOPN 5
67961: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67962: LD_VAR 0 1
67966: PPUSH
67967: LD_VAR 0 2
67971: PPUSH
67972: LD_VAR 0 3
67976: PPUSH
67977: LD_VAR 0 4
67981: PPUSH
67982: LD_VAR 0 5
67986: PPUSH
67987: LD_VAR 0 6
67991: PPUSH
67992: CALL 8837 0 6
// end ;
67996: PPOPN 6
67998: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67999: CALL 8812 0 0
// end ;
68003: PPOPN 1
68005: END
