// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 23102 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 23200 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 23208 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_miner := 81 ;
8608: LD_ADDR_EXP 59
8612: PUSH
8613: LD_INT 81
8615: ST_TO_ADDR
// ar_crane := 88 ;
8616: LD_ADDR_EXP 58
8620: PUSH
8621: LD_INT 88
8623: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8624: LD_ADDR_EXP 53
8628: PUSH
8629: LD_INT 89
8631: ST_TO_ADDR
// us_hack := 99 ;
8632: LD_ADDR_EXP 54
8636: PUSH
8637: LD_INT 99
8639: ST_TO_ADDR
// us_artillery := 97 ;
8640: LD_ADDR_EXP 55
8644: PUSH
8645: LD_INT 97
8647: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8648: LD_ADDR_EXP 56
8652: PUSH
8653: LD_INT 91
8655: ST_TO_ADDR
// ar_mortar := 92 ;
8656: LD_ADDR_EXP 57
8660: PUSH
8661: LD_INT 92
8663: ST_TO_ADDR
// ru_radar := 98 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 98
8671: ST_TO_ADDR
// tech_Artillery := 80 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 80
8679: ST_TO_ADDR
// tech_RadMat := 81 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 81
8687: ST_TO_ADDR
// tech_BasicTools := 82 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 82
8695: ST_TO_ADDR
// tech_Cargo := 83 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 83
8703: ST_TO_ADDR
// tech_Track := 84 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 84
8711: ST_TO_ADDR
// tech_Crane := 85 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 85
8719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 86
8727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8728: LD_ADDR_EXP 67
8732: PUSH
8733: LD_INT 87
8735: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8736: LD_ADDR_EXP 68
8740: PUSH
8741: LD_INT 88
8743: ST_TO_ADDR
// class_mastodont := 31 ;
8744: LD_ADDR_EXP 69
8748: PUSH
8749: LD_INT 31
8751: ST_TO_ADDR
// class_horse := 21 ;
8752: LD_ADDR_EXP 70
8756: PUSH
8757: LD_INT 21
8759: ST_TO_ADDR
// end ;
8760: LD_VAR 0 1
8764: RET
// every 1 do
8765: GO 8767
8767: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8768: CALL 8605 0 0
8772: END
// every 0 0$1 do
8773: GO 8775
8775: DISABLE
// begin enable ;
8776: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8777: LD_STRING updateTimer(
8779: PUSH
8780: LD_OWVAR 1
8784: STR
8785: PUSH
8786: LD_STRING );
8788: STR
8789: PPUSH
8790: CALL_OW 559
// end ;
8794: END
// on MapStart ( p ) do begin if streamModeActive then
8795: LD_EXP 71
8799: IFFALSE 8808
// DefineStreamItems ( true ) ;
8801: LD_INT 1
8803: PPUSH
8804: CALL 10456 0 1
// UpdateFactoryWaypoints ( ) ;
8808: CALL 24040 0 0
// end ;
8812: PPOPN 1
8814: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8815: LD_INT 0
8817: PPUSH
// if p2 = 100 then
8818: LD_VAR 0 2
8822: PUSH
8823: LD_INT 100
8825: EQUAL
8826: IFFALSE 9829
// begin if not StreamModeActive then
8828: LD_EXP 71
8832: NOT
8833: IFFALSE 8843
// StreamModeActive := true ;
8835: LD_ADDR_EXP 71
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// if p3 = 0 then
8843: LD_VAR 0 3
8847: PUSH
8848: LD_INT 0
8850: EQUAL
8851: IFFALSE 8857
// InitStreamMode ;
8853: CALL 9992 0 0
// if p3 = 1 then
8857: LD_VAR 0 3
8861: PUSH
8862: LD_INT 1
8864: EQUAL
8865: IFFALSE 8875
// sRocket := true ;
8867: LD_ADDR_EXP 76
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// if p3 = 2 then
8875: LD_VAR 0 3
8879: PUSH
8880: LD_INT 2
8882: EQUAL
8883: IFFALSE 8893
// sSpeed := true ;
8885: LD_ADDR_EXP 75
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// if p3 = 3 then
8893: LD_VAR 0 3
8897: PUSH
8898: LD_INT 3
8900: EQUAL
8901: IFFALSE 8911
// sEngine := true ;
8903: LD_ADDR_EXP 77
8907: PUSH
8908: LD_INT 1
8910: ST_TO_ADDR
// if p3 = 4 then
8911: LD_VAR 0 3
8915: PUSH
8916: LD_INT 4
8918: EQUAL
8919: IFFALSE 8929
// sSpec := true ;
8921: LD_ADDR_EXP 74
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// if p3 = 5 then
8929: LD_VAR 0 3
8933: PUSH
8934: LD_INT 5
8936: EQUAL
8937: IFFALSE 8947
// sLevel := true ;
8939: LD_ADDR_EXP 78
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// if p3 = 6 then
8947: LD_VAR 0 3
8951: PUSH
8952: LD_INT 6
8954: EQUAL
8955: IFFALSE 8965
// sArmoury := true ;
8957: LD_ADDR_EXP 79
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// if p3 = 7 then
8965: LD_VAR 0 3
8969: PUSH
8970: LD_INT 7
8972: EQUAL
8973: IFFALSE 8983
// sRadar := true ;
8975: LD_ADDR_EXP 80
8979: PUSH
8980: LD_INT 1
8982: ST_TO_ADDR
// if p3 = 8 then
8983: LD_VAR 0 3
8987: PUSH
8988: LD_INT 8
8990: EQUAL
8991: IFFALSE 9001
// sBunker := true ;
8993: LD_ADDR_EXP 81
8997: PUSH
8998: LD_INT 1
9000: ST_TO_ADDR
// if p3 = 9 then
9001: LD_VAR 0 3
9005: PUSH
9006: LD_INT 9
9008: EQUAL
9009: IFFALSE 9019
// sHack := true ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// if p3 = 10 then
9019: LD_VAR 0 3
9023: PUSH
9024: LD_INT 10
9026: EQUAL
9027: IFFALSE 9037
// sFire := true ;
9029: LD_ADDR_EXP 83
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// if p3 = 11 then
9037: LD_VAR 0 3
9041: PUSH
9042: LD_INT 11
9044: EQUAL
9045: IFFALSE 9055
// sRefresh := true ;
9047: LD_ADDR_EXP 84
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// if p3 = 12 then
9055: LD_VAR 0 3
9059: PUSH
9060: LD_INT 12
9062: EQUAL
9063: IFFALSE 9073
// sExp := true ;
9065: LD_ADDR_EXP 85
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// if p3 = 13 then
9073: LD_VAR 0 3
9077: PUSH
9078: LD_INT 13
9080: EQUAL
9081: IFFALSE 9091
// sDepot := true ;
9083: LD_ADDR_EXP 86
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// if p3 = 14 then
9091: LD_VAR 0 3
9095: PUSH
9096: LD_INT 14
9098: EQUAL
9099: IFFALSE 9109
// sFlag := true ;
9101: LD_ADDR_EXP 87
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// if p3 = 15 then
9109: LD_VAR 0 3
9113: PUSH
9114: LD_INT 15
9116: EQUAL
9117: IFFALSE 9127
// sKamikadze := true ;
9119: LD_ADDR_EXP 95
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// if p3 = 16 then
9127: LD_VAR 0 3
9131: PUSH
9132: LD_INT 16
9134: EQUAL
9135: IFFALSE 9145
// sTroll := true ;
9137: LD_ADDR_EXP 96
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// if p3 = 17 then
9145: LD_VAR 0 3
9149: PUSH
9150: LD_INT 17
9152: EQUAL
9153: IFFALSE 9163
// sSlow := true ;
9155: LD_ADDR_EXP 97
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// if p3 = 18 then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 18
9170: EQUAL
9171: IFFALSE 9181
// sLack := true ;
9173: LD_ADDR_EXP 98
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// if p3 = 19 then
9181: LD_VAR 0 3
9185: PUSH
9186: LD_INT 19
9188: EQUAL
9189: IFFALSE 9199
// sTank := true ;
9191: LD_ADDR_EXP 100
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// if p3 = 20 then
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 20
9206: EQUAL
9207: IFFALSE 9217
// sRemote := true ;
9209: LD_ADDR_EXP 101
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// if p3 = 21 then
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 21
9224: EQUAL
9225: IFFALSE 9235
// sPowell := true ;
9227: LD_ADDR_EXP 102
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// if p3 = 22 then
9235: LD_VAR 0 3
9239: PUSH
9240: LD_INT 22
9242: EQUAL
9243: IFFALSE 9253
// sTeleport := true ;
9245: LD_ADDR_EXP 105
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// if p3 = 23 then
9253: LD_VAR 0 3
9257: PUSH
9258: LD_INT 23
9260: EQUAL
9261: IFFALSE 9271
// sOilTower := true ;
9263: LD_ADDR_EXP 107
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// if p3 = 24 then
9271: LD_VAR 0 3
9275: PUSH
9276: LD_INT 24
9278: EQUAL
9279: IFFALSE 9289
// sShovel := true ;
9281: LD_ADDR_EXP 108
9285: PUSH
9286: LD_INT 1
9288: ST_TO_ADDR
// if p3 = 25 then
9289: LD_VAR 0 3
9293: PUSH
9294: LD_INT 25
9296: EQUAL
9297: IFFALSE 9307
// sSheik := true ;
9299: LD_ADDR_EXP 109
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// if p3 = 26 then
9307: LD_VAR 0 3
9311: PUSH
9312: LD_INT 26
9314: EQUAL
9315: IFFALSE 9325
// sEarthquake := true ;
9317: LD_ADDR_EXP 111
9321: PUSH
9322: LD_INT 1
9324: ST_TO_ADDR
// if p3 = 27 then
9325: LD_VAR 0 3
9329: PUSH
9330: LD_INT 27
9332: EQUAL
9333: IFFALSE 9343
// sAI := true ;
9335: LD_ADDR_EXP 112
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// if p3 = 28 then
9343: LD_VAR 0 3
9347: PUSH
9348: LD_INT 28
9350: EQUAL
9351: IFFALSE 9361
// sCargo := true ;
9353: LD_ADDR_EXP 115
9357: PUSH
9358: LD_INT 1
9360: ST_TO_ADDR
// if p3 = 29 then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_INT 29
9368: EQUAL
9369: IFFALSE 9379
// sDLaser := true ;
9371: LD_ADDR_EXP 116
9375: PUSH
9376: LD_INT 1
9378: ST_TO_ADDR
// if p3 = 30 then
9379: LD_VAR 0 3
9383: PUSH
9384: LD_INT 30
9386: EQUAL
9387: IFFALSE 9397
// sExchange := true ;
9389: LD_ADDR_EXP 117
9393: PUSH
9394: LD_INT 1
9396: ST_TO_ADDR
// if p3 = 31 then
9397: LD_VAR 0 3
9401: PUSH
9402: LD_INT 31
9404: EQUAL
9405: IFFALSE 9415
// sFac := true ;
9407: LD_ADDR_EXP 118
9411: PUSH
9412: LD_INT 1
9414: ST_TO_ADDR
// if p3 = 32 then
9415: LD_VAR 0 3
9419: PUSH
9420: LD_INT 32
9422: EQUAL
9423: IFFALSE 9433
// sPower := true ;
9425: LD_ADDR_EXP 119
9429: PUSH
9430: LD_INT 1
9432: ST_TO_ADDR
// if p3 = 33 then
9433: LD_VAR 0 3
9437: PUSH
9438: LD_INT 33
9440: EQUAL
9441: IFFALSE 9451
// sRandom := true ;
9443: LD_ADDR_EXP 120
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
// if p3 = 34 then
9451: LD_VAR 0 3
9455: PUSH
9456: LD_INT 34
9458: EQUAL
9459: IFFALSE 9469
// sShield := true ;
9461: LD_ADDR_EXP 121
9465: PUSH
9466: LD_INT 1
9468: ST_TO_ADDR
// if p3 = 35 then
9469: LD_VAR 0 3
9473: PUSH
9474: LD_INT 35
9476: EQUAL
9477: IFFALSE 9487
// sTime := true ;
9479: LD_ADDR_EXP 122
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// if p3 = 36 then
9487: LD_VAR 0 3
9491: PUSH
9492: LD_INT 36
9494: EQUAL
9495: IFFALSE 9505
// sTools := true ;
9497: LD_ADDR_EXP 123
9501: PUSH
9502: LD_INT 1
9504: ST_TO_ADDR
// if p3 = 101 then
9505: LD_VAR 0 3
9509: PUSH
9510: LD_INT 101
9512: EQUAL
9513: IFFALSE 9523
// sSold := true ;
9515: LD_ADDR_EXP 88
9519: PUSH
9520: LD_INT 1
9522: ST_TO_ADDR
// if p3 = 102 then
9523: LD_VAR 0 3
9527: PUSH
9528: LD_INT 102
9530: EQUAL
9531: IFFALSE 9541
// sDiff := true ;
9533: LD_ADDR_EXP 89
9537: PUSH
9538: LD_INT 1
9540: ST_TO_ADDR
// if p3 = 103 then
9541: LD_VAR 0 3
9545: PUSH
9546: LD_INT 103
9548: EQUAL
9549: IFFALSE 9559
// sFog := true ;
9551: LD_ADDR_EXP 92
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
// if p3 = 104 then
9559: LD_VAR 0 3
9563: PUSH
9564: LD_INT 104
9566: EQUAL
9567: IFFALSE 9577
// sReset := true ;
9569: LD_ADDR_EXP 93
9573: PUSH
9574: LD_INT 1
9576: ST_TO_ADDR
// if p3 = 105 then
9577: LD_VAR 0 3
9581: PUSH
9582: LD_INT 105
9584: EQUAL
9585: IFFALSE 9595
// sSun := true ;
9587: LD_ADDR_EXP 94
9591: PUSH
9592: LD_INT 1
9594: ST_TO_ADDR
// if p3 = 106 then
9595: LD_VAR 0 3
9599: PUSH
9600: LD_INT 106
9602: EQUAL
9603: IFFALSE 9613
// sTiger := true ;
9605: LD_ADDR_EXP 90
9609: PUSH
9610: LD_INT 1
9612: ST_TO_ADDR
// if p3 = 107 then
9613: LD_VAR 0 3
9617: PUSH
9618: LD_INT 107
9620: EQUAL
9621: IFFALSE 9631
// sBomb := true ;
9623: LD_ADDR_EXP 91
9627: PUSH
9628: LD_INT 1
9630: ST_TO_ADDR
// if p3 = 108 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 108
9638: EQUAL
9639: IFFALSE 9649
// sWound := true ;
9641: LD_ADDR_EXP 99
9645: PUSH
9646: LD_INT 1
9648: ST_TO_ADDR
// if p3 = 109 then
9649: LD_VAR 0 3
9653: PUSH
9654: LD_INT 109
9656: EQUAL
9657: IFFALSE 9667
// sBetray := true ;
9659: LD_ADDR_EXP 103
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// if p3 = 110 then
9667: LD_VAR 0 3
9671: PUSH
9672: LD_INT 110
9674: EQUAL
9675: IFFALSE 9685
// sContamin := true ;
9677: LD_ADDR_EXP 104
9681: PUSH
9682: LD_INT 1
9684: ST_TO_ADDR
// if p3 = 111 then
9685: LD_VAR 0 3
9689: PUSH
9690: LD_INT 111
9692: EQUAL
9693: IFFALSE 9703
// sOil := true ;
9695: LD_ADDR_EXP 106
9699: PUSH
9700: LD_INT 1
9702: ST_TO_ADDR
// if p3 = 112 then
9703: LD_VAR 0 3
9707: PUSH
9708: LD_INT 112
9710: EQUAL
9711: IFFALSE 9721
// sStu := true ;
9713: LD_ADDR_EXP 110
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
// if p3 = 113 then
9721: LD_VAR 0 3
9725: PUSH
9726: LD_INT 113
9728: EQUAL
9729: IFFALSE 9739
// sBazooka := true ;
9731: LD_ADDR_EXP 113
9735: PUSH
9736: LD_INT 1
9738: ST_TO_ADDR
// if p3 = 114 then
9739: LD_VAR 0 3
9743: PUSH
9744: LD_INT 114
9746: EQUAL
9747: IFFALSE 9757
// sMortar := true ;
9749: LD_ADDR_EXP 114
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// if p3 = 115 then
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 115
9764: EQUAL
9765: IFFALSE 9775
// sRanger := true ;
9767: LD_ADDR_EXP 124
9771: PUSH
9772: LD_INT 1
9774: ST_TO_ADDR
// if p3 = 116 then
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 116
9782: EQUAL
9783: IFFALSE 9793
// sComputer := true ;
9785: LD_ADDR_EXP 125
9789: PUSH
9790: LD_INT 1
9792: ST_TO_ADDR
// if p3 = 117 then
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 117
9800: EQUAL
9801: IFFALSE 9811
// s30 := true ;
9803: LD_ADDR_EXP 126
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// if p3 = 118 then
9811: LD_VAR 0 3
9815: PUSH
9816: LD_INT 118
9818: EQUAL
9819: IFFALSE 9829
// s60 := true ;
9821: LD_ADDR_EXP 127
9825: PUSH
9826: LD_INT 1
9828: ST_TO_ADDR
// end ; if p2 = 101 then
9829: LD_VAR 0 2
9833: PUSH
9834: LD_INT 101
9836: EQUAL
9837: IFFALSE 9965
// begin case p3 of 1 :
9839: LD_VAR 0 3
9843: PUSH
9844: LD_INT 1
9846: DOUBLE
9847: EQUAL
9848: IFTRUE 9852
9850: GO 9859
9852: POP
// hHackUnlimitedResources ; 2 :
9853: CALL 22063 0 0
9857: GO 9965
9859: LD_INT 2
9861: DOUBLE
9862: EQUAL
9863: IFTRUE 9867
9865: GO 9874
9867: POP
// hHackSetLevel10 ; 3 :
9868: CALL 22196 0 0
9872: GO 9965
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9889
9882: POP
// hHackSetLevel10YourUnits ; 4 :
9883: CALL 22281 0 0
9887: GO 9965
9889: LD_INT 4
9891: DOUBLE
9892: EQUAL
9893: IFTRUE 9897
9895: GO 9904
9897: POP
// hHackInvincible ; 5 :
9898: CALL 22729 0 0
9902: GO 9965
9904: LD_INT 5
9906: DOUBLE
9907: EQUAL
9908: IFTRUE 9912
9910: GO 9919
9912: POP
// hHackInvisible ; 6 :
9913: CALL 22840 0 0
9917: GO 9965
9919: LD_INT 6
9921: DOUBLE
9922: EQUAL
9923: IFTRUE 9927
9925: GO 9934
9927: POP
// hHackChangeYourSide ; 7 :
9928: CALL 22897 0 0
9932: GO 9965
9934: LD_INT 7
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 9949
9942: POP
// hHackChangeUnitSide ; 8 :
9943: CALL 22939 0 0
9947: GO 9965
9949: LD_INT 8
9951: DOUBLE
9952: EQUAL
9953: IFTRUE 9957
9955: GO 9964
9957: POP
// hHackFog ; end ;
9958: CALL 23040 0 0
9962: GO 9965
9964: POP
// end ; end ;
9965: LD_VAR 0 7
9969: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9970: GO 9972
9972: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9973: LD_STRING initStreamRollete();
9975: PPUSH
9976: CALL_OW 559
// InitStreamMode ;
9980: CALL 9992 0 0
// DefineStreamItems ( false ) ;
9984: LD_INT 0
9986: PPUSH
9987: CALL 10456 0 1
// end ;
9991: END
// function InitStreamMode ; begin
9992: LD_INT 0
9994: PPUSH
// streamModeActive := false ;
9995: LD_ADDR_EXP 71
9999: PUSH
10000: LD_INT 0
10002: ST_TO_ADDR
// normalCounter := 36 ;
10003: LD_ADDR_EXP 72
10007: PUSH
10008: LD_INT 36
10010: ST_TO_ADDR
// hardcoreCounter := 18 ;
10011: LD_ADDR_EXP 73
10015: PUSH
10016: LD_INT 18
10018: ST_TO_ADDR
// sRocket := false ;
10019: LD_ADDR_EXP 76
10023: PUSH
10024: LD_INT 0
10026: ST_TO_ADDR
// sSpeed := false ;
10027: LD_ADDR_EXP 75
10031: PUSH
10032: LD_INT 0
10034: ST_TO_ADDR
// sEngine := false ;
10035: LD_ADDR_EXP 77
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// sSpec := false ;
10043: LD_ADDR_EXP 74
10047: PUSH
10048: LD_INT 0
10050: ST_TO_ADDR
// sLevel := false ;
10051: LD_ADDR_EXP 78
10055: PUSH
10056: LD_INT 0
10058: ST_TO_ADDR
// sArmoury := false ;
10059: LD_ADDR_EXP 79
10063: PUSH
10064: LD_INT 0
10066: ST_TO_ADDR
// sRadar := false ;
10067: LD_ADDR_EXP 80
10071: PUSH
10072: LD_INT 0
10074: ST_TO_ADDR
// sBunker := false ;
10075: LD_ADDR_EXP 81
10079: PUSH
10080: LD_INT 0
10082: ST_TO_ADDR
// sHack := false ;
10083: LD_ADDR_EXP 82
10087: PUSH
10088: LD_INT 0
10090: ST_TO_ADDR
// sFire := false ;
10091: LD_ADDR_EXP 83
10095: PUSH
10096: LD_INT 0
10098: ST_TO_ADDR
// sRefresh := false ;
10099: LD_ADDR_EXP 84
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// sExp := false ;
10107: LD_ADDR_EXP 85
10111: PUSH
10112: LD_INT 0
10114: ST_TO_ADDR
// sDepot := false ;
10115: LD_ADDR_EXP 86
10119: PUSH
10120: LD_INT 0
10122: ST_TO_ADDR
// sFlag := false ;
10123: LD_ADDR_EXP 87
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// sKamikadze := false ;
10131: LD_ADDR_EXP 95
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// sTroll := false ;
10139: LD_ADDR_EXP 96
10143: PUSH
10144: LD_INT 0
10146: ST_TO_ADDR
// sSlow := false ;
10147: LD_ADDR_EXP 97
10151: PUSH
10152: LD_INT 0
10154: ST_TO_ADDR
// sLack := false ;
10155: LD_ADDR_EXP 98
10159: PUSH
10160: LD_INT 0
10162: ST_TO_ADDR
// sTank := false ;
10163: LD_ADDR_EXP 100
10167: PUSH
10168: LD_INT 0
10170: ST_TO_ADDR
// sRemote := false ;
10171: LD_ADDR_EXP 101
10175: PUSH
10176: LD_INT 0
10178: ST_TO_ADDR
// sPowell := false ;
10179: LD_ADDR_EXP 102
10183: PUSH
10184: LD_INT 0
10186: ST_TO_ADDR
// sTeleport := false ;
10187: LD_ADDR_EXP 105
10191: PUSH
10192: LD_INT 0
10194: ST_TO_ADDR
// sOilTower := false ;
10195: LD_ADDR_EXP 107
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// sShovel := false ;
10203: LD_ADDR_EXP 108
10207: PUSH
10208: LD_INT 0
10210: ST_TO_ADDR
// sSheik := false ;
10211: LD_ADDR_EXP 109
10215: PUSH
10216: LD_INT 0
10218: ST_TO_ADDR
// sEarthquake := false ;
10219: LD_ADDR_EXP 111
10223: PUSH
10224: LD_INT 0
10226: ST_TO_ADDR
// sAI := false ;
10227: LD_ADDR_EXP 112
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// sCargo := false ;
10235: LD_ADDR_EXP 115
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// sDLaser := false ;
10243: LD_ADDR_EXP 116
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// sExchange := false ;
10251: LD_ADDR_EXP 117
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// sFac := false ;
10259: LD_ADDR_EXP 118
10263: PUSH
10264: LD_INT 0
10266: ST_TO_ADDR
// sPower := false ;
10267: LD_ADDR_EXP 119
10271: PUSH
10272: LD_INT 0
10274: ST_TO_ADDR
// sRandom := false ;
10275: LD_ADDR_EXP 120
10279: PUSH
10280: LD_INT 0
10282: ST_TO_ADDR
// sShield := false ;
10283: LD_ADDR_EXP 121
10287: PUSH
10288: LD_INT 0
10290: ST_TO_ADDR
// sTime := false ;
10291: LD_ADDR_EXP 122
10295: PUSH
10296: LD_INT 0
10298: ST_TO_ADDR
// sTools := false ;
10299: LD_ADDR_EXP 123
10303: PUSH
10304: LD_INT 0
10306: ST_TO_ADDR
// sSold := false ;
10307: LD_ADDR_EXP 88
10311: PUSH
10312: LD_INT 0
10314: ST_TO_ADDR
// sDiff := false ;
10315: LD_ADDR_EXP 89
10319: PUSH
10320: LD_INT 0
10322: ST_TO_ADDR
// sFog := false ;
10323: LD_ADDR_EXP 92
10327: PUSH
10328: LD_INT 0
10330: ST_TO_ADDR
// sReset := false ;
10331: LD_ADDR_EXP 93
10335: PUSH
10336: LD_INT 0
10338: ST_TO_ADDR
// sSun := false ;
10339: LD_ADDR_EXP 94
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// sTiger := false ;
10347: LD_ADDR_EXP 90
10351: PUSH
10352: LD_INT 0
10354: ST_TO_ADDR
// sBomb := false ;
10355: LD_ADDR_EXP 91
10359: PUSH
10360: LD_INT 0
10362: ST_TO_ADDR
// sWound := false ;
10363: LD_ADDR_EXP 99
10367: PUSH
10368: LD_INT 0
10370: ST_TO_ADDR
// sBetray := false ;
10371: LD_ADDR_EXP 103
10375: PUSH
10376: LD_INT 0
10378: ST_TO_ADDR
// sContamin := false ;
10379: LD_ADDR_EXP 104
10383: PUSH
10384: LD_INT 0
10386: ST_TO_ADDR
// sOil := false ;
10387: LD_ADDR_EXP 106
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
// sStu := false ;
10395: LD_ADDR_EXP 110
10399: PUSH
10400: LD_INT 0
10402: ST_TO_ADDR
// sBazooka := false ;
10403: LD_ADDR_EXP 113
10407: PUSH
10408: LD_INT 0
10410: ST_TO_ADDR
// sMortar := false ;
10411: LD_ADDR_EXP 114
10415: PUSH
10416: LD_INT 0
10418: ST_TO_ADDR
// sRanger := false ;
10419: LD_ADDR_EXP 124
10423: PUSH
10424: LD_INT 0
10426: ST_TO_ADDR
// sComputer := false ;
10427: LD_ADDR_EXP 125
10431: PUSH
10432: LD_INT 0
10434: ST_TO_ADDR
// s30 := false ;
10435: LD_ADDR_EXP 126
10439: PUSH
10440: LD_INT 0
10442: ST_TO_ADDR
// s60 := false ;
10443: LD_ADDR_EXP 127
10447: PUSH
10448: LD_INT 0
10450: ST_TO_ADDR
// end ;
10451: LD_VAR 0 1
10455: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10456: LD_INT 0
10458: PPUSH
10459: PPUSH
10460: PPUSH
10461: PPUSH
10462: PPUSH
10463: PPUSH
10464: PPUSH
// result := [ ] ;
10465: LD_ADDR_VAR 0 2
10469: PUSH
10470: EMPTY
10471: ST_TO_ADDR
// if campaign_id = 1 then
10472: LD_OWVAR 69
10476: PUSH
10477: LD_INT 1
10479: EQUAL
10480: IFFALSE 13646
// begin case mission_number of 1 :
10482: LD_OWVAR 70
10486: PUSH
10487: LD_INT 1
10489: DOUBLE
10490: EQUAL
10491: IFTRUE 10495
10493: GO 10571
10495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10496: LD_ADDR_VAR 0 2
10500: PUSH
10501: LD_INT 2
10503: PUSH
10504: LD_INT 4
10506: PUSH
10507: LD_INT 11
10509: PUSH
10510: LD_INT 12
10512: PUSH
10513: LD_INT 15
10515: PUSH
10516: LD_INT 16
10518: PUSH
10519: LD_INT 22
10521: PUSH
10522: LD_INT 23
10524: PUSH
10525: LD_INT 26
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 101
10541: PUSH
10542: LD_INT 102
10544: PUSH
10545: LD_INT 106
10547: PUSH
10548: LD_INT 116
10550: PUSH
10551: LD_INT 117
10553: PUSH
10554: LD_INT 118
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: ST_TO_ADDR
10569: GO 13644
10571: LD_INT 2
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10663
10579: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 2
10587: PUSH
10588: LD_INT 4
10590: PUSH
10591: LD_INT 11
10593: PUSH
10594: LD_INT 12
10596: PUSH
10597: LD_INT 15
10599: PUSH
10600: LD_INT 16
10602: PUSH
10603: LD_INT 22
10605: PUSH
10606: LD_INT 23
10608: PUSH
10609: LD_INT 26
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 101
10625: PUSH
10626: LD_INT 102
10628: PUSH
10629: LD_INT 105
10631: PUSH
10632: LD_INT 106
10634: PUSH
10635: LD_INT 108
10637: PUSH
10638: LD_INT 116
10640: PUSH
10641: LD_INT 117
10643: PUSH
10644: LD_INT 118
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: ST_TO_ADDR
10661: GO 13644
10663: LD_INT 3
10665: DOUBLE
10666: EQUAL
10667: IFTRUE 10671
10669: GO 10759
10671: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: LD_INT 4
10682: PUSH
10683: LD_INT 5
10685: PUSH
10686: LD_INT 11
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: LD_INT 15
10694: PUSH
10695: LD_INT 16
10697: PUSH
10698: LD_INT 22
10700: PUSH
10701: LD_INT 26
10703: PUSH
10704: LD_INT 36
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 101
10721: PUSH
10722: LD_INT 102
10724: PUSH
10725: LD_INT 105
10727: PUSH
10728: LD_INT 106
10730: PUSH
10731: LD_INT 108
10733: PUSH
10734: LD_INT 116
10736: PUSH
10737: LD_INT 117
10739: PUSH
10740: LD_INT 118
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: ST_TO_ADDR
10757: GO 13644
10759: LD_INT 4
10761: DOUBLE
10762: EQUAL
10763: IFTRUE 10767
10765: GO 10863
10767: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10768: LD_ADDR_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 4
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 8
10784: PUSH
10785: LD_INT 11
10787: PUSH
10788: LD_INT 12
10790: PUSH
10791: LD_INT 15
10793: PUSH
10794: LD_INT 16
10796: PUSH
10797: LD_INT 22
10799: PUSH
10800: LD_INT 23
10802: PUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 36
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 101
10825: PUSH
10826: LD_INT 102
10828: PUSH
10829: LD_INT 105
10831: PUSH
10832: LD_INT 106
10834: PUSH
10835: LD_INT 108
10837: PUSH
10838: LD_INT 116
10840: PUSH
10841: LD_INT 117
10843: PUSH
10844: LD_INT 118
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: ST_TO_ADDR
10861: GO 13644
10863: LD_INT 5
10865: DOUBLE
10866: EQUAL
10867: IFTRUE 10871
10869: GO 10983
10871: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: LD_INT 2
10879: PUSH
10880: LD_INT 4
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: LD_INT 6
10888: PUSH
10889: LD_INT 8
10891: PUSH
10892: LD_INT 11
10894: PUSH
10895: LD_INT 12
10897: PUSH
10898: LD_INT 15
10900: PUSH
10901: LD_INT 16
10903: PUSH
10904: LD_INT 22
10906: PUSH
10907: LD_INT 23
10909: PUSH
10910: LD_INT 25
10912: PUSH
10913: LD_INT 26
10915: PUSH
10916: LD_INT 36
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 102
10940: PUSH
10941: LD_INT 105
10943: PUSH
10944: LD_INT 106
10946: PUSH
10947: LD_INT 108
10949: PUSH
10950: LD_INT 109
10952: PUSH
10953: LD_INT 112
10955: PUSH
10956: LD_INT 116
10958: PUSH
10959: LD_INT 117
10961: PUSH
10962: LD_INT 118
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: ST_TO_ADDR
10981: GO 13644
10983: LD_INT 6
10985: DOUBLE
10986: EQUAL
10987: IFTRUE 10991
10989: GO 11123
10991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: LD_INT 4
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: LD_INT 6
11008: PUSH
11009: LD_INT 8
11011: PUSH
11012: LD_INT 11
11014: PUSH
11015: LD_INT 12
11017: PUSH
11018: LD_INT 15
11020: PUSH
11021: LD_INT 16
11023: PUSH
11024: LD_INT 20
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_INT 23
11035: PUSH
11036: LD_INT 25
11038: PUSH
11039: LD_INT 26
11041: PUSH
11042: LD_INT 30
11044: PUSH
11045: LD_INT 31
11047: PUSH
11048: LD_INT 32
11050: PUSH
11051: LD_INT 36
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 101
11077: PUSH
11078: LD_INT 102
11080: PUSH
11081: LD_INT 105
11083: PUSH
11084: LD_INT 106
11086: PUSH
11087: LD_INT 108
11089: PUSH
11090: LD_INT 109
11092: PUSH
11093: LD_INT 112
11095: PUSH
11096: LD_INT 116
11098: PUSH
11099: LD_INT 117
11101: PUSH
11102: LD_INT 118
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: ST_TO_ADDR
11121: GO 13644
11123: LD_INT 7
11125: DOUBLE
11126: EQUAL
11127: IFTRUE 11131
11129: GO 11243
11131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11132: LD_ADDR_VAR 0 2
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 4
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: LD_INT 7
11148: PUSH
11149: LD_INT 11
11151: PUSH
11152: LD_INT 12
11154: PUSH
11155: LD_INT 15
11157: PUSH
11158: LD_INT 16
11160: PUSH
11161: LD_INT 20
11163: PUSH
11164: LD_INT 21
11166: PUSH
11167: LD_INT 22
11169: PUSH
11170: LD_INT 23
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 26
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 101
11197: PUSH
11198: LD_INT 102
11200: PUSH
11201: LD_INT 103
11203: PUSH
11204: LD_INT 105
11206: PUSH
11207: LD_INT 106
11209: PUSH
11210: LD_INT 108
11212: PUSH
11213: LD_INT 112
11215: PUSH
11216: LD_INT 116
11218: PUSH
11219: LD_INT 117
11221: PUSH
11222: LD_INT 118
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: ST_TO_ADDR
11241: GO 13644
11243: LD_INT 8
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11391
11251: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: LD_INT 5
11265: PUSH
11266: LD_INT 6
11268: PUSH
11269: LD_INT 7
11271: PUSH
11272: LD_INT 8
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 12
11280: PUSH
11281: LD_INT 15
11283: PUSH
11284: LD_INT 16
11286: PUSH
11287: LD_INT 20
11289: PUSH
11290: LD_INT 21
11292: PUSH
11293: LD_INT 22
11295: PUSH
11296: LD_INT 23
11298: PUSH
11299: LD_INT 25
11301: PUSH
11302: LD_INT 26
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 31
11310: PUSH
11311: LD_INT 32
11313: PUSH
11314: LD_INT 36
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 101
11341: PUSH
11342: LD_INT 102
11344: PUSH
11345: LD_INT 103
11347: PUSH
11348: LD_INT 105
11350: PUSH
11351: LD_INT 106
11353: PUSH
11354: LD_INT 108
11356: PUSH
11357: LD_INT 109
11359: PUSH
11360: LD_INT 112
11362: PUSH
11363: LD_INT 116
11365: PUSH
11366: LD_INT 117
11368: PUSH
11369: LD_INT 118
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: ST_TO_ADDR
11389: GO 13644
11391: LD_INT 9
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11547
11399: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: LD_INT 5
11413: PUSH
11414: LD_INT 6
11416: PUSH
11417: LD_INT 7
11419: PUSH
11420: LD_INT 8
11422: PUSH
11423: LD_INT 11
11425: PUSH
11426: LD_INT 12
11428: PUSH
11429: LD_INT 15
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: LD_INT 20
11437: PUSH
11438: LD_INT 21
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_INT 23
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 26
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 30
11458: PUSH
11459: LD_INT 31
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: LD_INT 36
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 101
11493: PUSH
11494: LD_INT 102
11496: PUSH
11497: LD_INT 103
11499: PUSH
11500: LD_INT 105
11502: PUSH
11503: LD_INT 106
11505: PUSH
11506: LD_INT 108
11508: PUSH
11509: LD_INT 109
11511: PUSH
11512: LD_INT 112
11514: PUSH
11515: LD_INT 114
11517: PUSH
11518: LD_INT 116
11520: PUSH
11521: LD_INT 117
11523: PUSH
11524: LD_INT 118
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: ST_TO_ADDR
11545: GO 13644
11547: LD_INT 10
11549: DOUBLE
11550: EQUAL
11551: IFTRUE 11555
11553: GO 11751
11555: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11556: LD_ADDR_VAR 0 2
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: LD_INT 4
11566: PUSH
11567: LD_INT 5
11569: PUSH
11570: LD_INT 6
11572: PUSH
11573: LD_INT 7
11575: PUSH
11576: LD_INT 8
11578: PUSH
11579: LD_INT 9
11581: PUSH
11582: LD_INT 10
11584: PUSH
11585: LD_INT 11
11587: PUSH
11588: LD_INT 12
11590: PUSH
11591: LD_INT 13
11593: PUSH
11594: LD_INT 14
11596: PUSH
11597: LD_INT 15
11599: PUSH
11600: LD_INT 16
11602: PUSH
11603: LD_INT 17
11605: PUSH
11606: LD_INT 18
11608: PUSH
11609: LD_INT 19
11611: PUSH
11612: LD_INT 20
11614: PUSH
11615: LD_INT 21
11617: PUSH
11618: LD_INT 22
11620: PUSH
11621: LD_INT 23
11623: PUSH
11624: LD_INT 24
11626: PUSH
11627: LD_INT 25
11629: PUSH
11630: LD_INT 26
11632: PUSH
11633: LD_INT 28
11635: PUSH
11636: LD_INT 30
11638: PUSH
11639: LD_INT 31
11641: PUSH
11642: LD_INT 32
11644: PUSH
11645: LD_INT 36
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 101
11681: PUSH
11682: LD_INT 102
11684: PUSH
11685: LD_INT 103
11687: PUSH
11688: LD_INT 104
11690: PUSH
11691: LD_INT 105
11693: PUSH
11694: LD_INT 106
11696: PUSH
11697: LD_INT 107
11699: PUSH
11700: LD_INT 108
11702: PUSH
11703: LD_INT 109
11705: PUSH
11706: LD_INT 110
11708: PUSH
11709: LD_INT 111
11711: PUSH
11712: LD_INT 112
11714: PUSH
11715: LD_INT 114
11717: PUSH
11718: LD_INT 116
11720: PUSH
11721: LD_INT 117
11723: PUSH
11724: LD_INT 118
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: ST_TO_ADDR
11749: GO 13644
11751: LD_INT 11
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11963
11759: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11760: LD_ADDR_VAR 0 2
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: LD_INT 3
11770: PUSH
11771: LD_INT 4
11773: PUSH
11774: LD_INT 5
11776: PUSH
11777: LD_INT 6
11779: PUSH
11780: LD_INT 7
11782: PUSH
11783: LD_INT 8
11785: PUSH
11786: LD_INT 9
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 11
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: LD_INT 13
11800: PUSH
11801: LD_INT 14
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: LD_INT 16
11809: PUSH
11810: LD_INT 17
11812: PUSH
11813: LD_INT 18
11815: PUSH
11816: LD_INT 19
11818: PUSH
11819: LD_INT 20
11821: PUSH
11822: LD_INT 21
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_INT 23
11830: PUSH
11831: LD_INT 24
11833: PUSH
11834: LD_INT 25
11836: PUSH
11837: LD_INT 26
11839: PUSH
11840: LD_INT 28
11842: PUSH
11843: LD_INT 30
11845: PUSH
11846: LD_INT 31
11848: PUSH
11849: LD_INT 32
11851: PUSH
11852: LD_INT 34
11854: PUSH
11855: LD_INT 36
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 101
11893: PUSH
11894: LD_INT 102
11896: PUSH
11897: LD_INT 103
11899: PUSH
11900: LD_INT 104
11902: PUSH
11903: LD_INT 105
11905: PUSH
11906: LD_INT 106
11908: PUSH
11909: LD_INT 107
11911: PUSH
11912: LD_INT 108
11914: PUSH
11915: LD_INT 109
11917: PUSH
11918: LD_INT 110
11920: PUSH
11921: LD_INT 111
11923: PUSH
11924: LD_INT 112
11926: PUSH
11927: LD_INT 114
11929: PUSH
11930: LD_INT 116
11932: PUSH
11933: LD_INT 117
11935: PUSH
11936: LD_INT 118
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: ST_TO_ADDR
11961: GO 13644
11963: LD_INT 12
11965: DOUBLE
11966: EQUAL
11967: IFTRUE 11971
11969: GO 12191
11971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11972: LD_ADDR_VAR 0 2
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: LD_INT 2
11982: PUSH
11983: LD_INT 3
11985: PUSH
11986: LD_INT 4
11988: PUSH
11989: LD_INT 5
11991: PUSH
11992: LD_INT 6
11994: PUSH
11995: LD_INT 7
11997: PUSH
11998: LD_INT 8
12000: PUSH
12001: LD_INT 9
12003: PUSH
12004: LD_INT 10
12006: PUSH
12007: LD_INT 11
12009: PUSH
12010: LD_INT 12
12012: PUSH
12013: LD_INT 13
12015: PUSH
12016: LD_INT 14
12018: PUSH
12019: LD_INT 15
12021: PUSH
12022: LD_INT 16
12024: PUSH
12025: LD_INT 17
12027: PUSH
12028: LD_INT 18
12030: PUSH
12031: LD_INT 19
12033: PUSH
12034: LD_INT 20
12036: PUSH
12037: LD_INT 21
12039: PUSH
12040: LD_INT 22
12042: PUSH
12043: LD_INT 23
12045: PUSH
12046: LD_INT 24
12048: PUSH
12049: LD_INT 25
12051: PUSH
12052: LD_INT 26
12054: PUSH
12055: LD_INT 27
12057: PUSH
12058: LD_INT 28
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 31
12066: PUSH
12067: LD_INT 32
12069: PUSH
12070: LD_INT 33
12072: PUSH
12073: LD_INT 34
12075: PUSH
12076: LD_INT 36
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 101
12117: PUSH
12118: LD_INT 102
12120: PUSH
12121: LD_INT 103
12123: PUSH
12124: LD_INT 104
12126: PUSH
12127: LD_INT 105
12129: PUSH
12130: LD_INT 106
12132: PUSH
12133: LD_INT 107
12135: PUSH
12136: LD_INT 108
12138: PUSH
12139: LD_INT 109
12141: PUSH
12142: LD_INT 110
12144: PUSH
12145: LD_INT 111
12147: PUSH
12148: LD_INT 112
12150: PUSH
12151: LD_INT 113
12153: PUSH
12154: LD_INT 114
12156: PUSH
12157: LD_INT 116
12159: PUSH
12160: LD_INT 117
12162: PUSH
12163: LD_INT 118
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: ST_TO_ADDR
12189: GO 13644
12191: LD_INT 13
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12407
12199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12200: LD_ADDR_VAR 0 2
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: LD_INT 3
12213: PUSH
12214: LD_INT 4
12216: PUSH
12217: LD_INT 5
12219: PUSH
12220: LD_INT 8
12222: PUSH
12223: LD_INT 9
12225: PUSH
12226: LD_INT 10
12228: PUSH
12229: LD_INT 11
12231: PUSH
12232: LD_INT 12
12234: PUSH
12235: LD_INT 14
12237: PUSH
12238: LD_INT 15
12240: PUSH
12241: LD_INT 16
12243: PUSH
12244: LD_INT 17
12246: PUSH
12247: LD_INT 18
12249: PUSH
12250: LD_INT 19
12252: PUSH
12253: LD_INT 20
12255: PUSH
12256: LD_INT 21
12258: PUSH
12259: LD_INT 22
12261: PUSH
12262: LD_INT 23
12264: PUSH
12265: LD_INT 24
12267: PUSH
12268: LD_INT 25
12270: PUSH
12271: LD_INT 26
12273: PUSH
12274: LD_INT 27
12276: PUSH
12277: LD_INT 28
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 31
12285: PUSH
12286: LD_INT 32
12288: PUSH
12289: LD_INT 33
12291: PUSH
12292: LD_INT 34
12294: PUSH
12295: LD_INT 36
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 101
12333: PUSH
12334: LD_INT 102
12336: PUSH
12337: LD_INT 103
12339: PUSH
12340: LD_INT 104
12342: PUSH
12343: LD_INT 105
12345: PUSH
12346: LD_INT 106
12348: PUSH
12349: LD_INT 107
12351: PUSH
12352: LD_INT 108
12354: PUSH
12355: LD_INT 109
12357: PUSH
12358: LD_INT 110
12360: PUSH
12361: LD_INT 111
12363: PUSH
12364: LD_INT 112
12366: PUSH
12367: LD_INT 113
12369: PUSH
12370: LD_INT 114
12372: PUSH
12373: LD_INT 116
12375: PUSH
12376: LD_INT 117
12378: PUSH
12379: LD_INT 118
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: ST_TO_ADDR
12405: GO 13644
12407: LD_INT 14
12409: DOUBLE
12410: EQUAL
12411: IFTRUE 12415
12413: GO 12639
12415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12416: LD_ADDR_VAR 0 2
12420: PUSH
12421: LD_INT 1
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: LD_INT 3
12429: PUSH
12430: LD_INT 4
12432: PUSH
12433: LD_INT 5
12435: PUSH
12436: LD_INT 6
12438: PUSH
12439: LD_INT 7
12441: PUSH
12442: LD_INT 8
12444: PUSH
12445: LD_INT 9
12447: PUSH
12448: LD_INT 10
12450: PUSH
12451: LD_INT 11
12453: PUSH
12454: LD_INT 12
12456: PUSH
12457: LD_INT 13
12459: PUSH
12460: LD_INT 14
12462: PUSH
12463: LD_INT 15
12465: PUSH
12466: LD_INT 16
12468: PUSH
12469: LD_INT 17
12471: PUSH
12472: LD_INT 18
12474: PUSH
12475: LD_INT 19
12477: PUSH
12478: LD_INT 20
12480: PUSH
12481: LD_INT 21
12483: PUSH
12484: LD_INT 22
12486: PUSH
12487: LD_INT 23
12489: PUSH
12490: LD_INT 24
12492: PUSH
12493: LD_INT 25
12495: PUSH
12496: LD_INT 26
12498: PUSH
12499: LD_INT 27
12501: PUSH
12502: LD_INT 28
12504: PUSH
12505: LD_INT 29
12507: PUSH
12508: LD_INT 30
12510: PUSH
12511: LD_INT 31
12513: PUSH
12514: LD_INT 32
12516: PUSH
12517: LD_INT 33
12519: PUSH
12520: LD_INT 34
12522: PUSH
12523: LD_INT 36
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 101
12565: PUSH
12566: LD_INT 102
12568: PUSH
12569: LD_INT 103
12571: PUSH
12572: LD_INT 104
12574: PUSH
12575: LD_INT 105
12577: PUSH
12578: LD_INT 106
12580: PUSH
12581: LD_INT 107
12583: PUSH
12584: LD_INT 108
12586: PUSH
12587: LD_INT 109
12589: PUSH
12590: LD_INT 110
12592: PUSH
12593: LD_INT 111
12595: PUSH
12596: LD_INT 112
12598: PUSH
12599: LD_INT 113
12601: PUSH
12602: LD_INT 114
12604: PUSH
12605: LD_INT 116
12607: PUSH
12608: LD_INT 117
12610: PUSH
12611: LD_INT 118
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: ST_TO_ADDR
12637: GO 13644
12639: LD_INT 15
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12871
12647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: LD_INT 2
12658: PUSH
12659: LD_INT 3
12661: PUSH
12662: LD_INT 4
12664: PUSH
12665: LD_INT 5
12667: PUSH
12668: LD_INT 6
12670: PUSH
12671: LD_INT 7
12673: PUSH
12674: LD_INT 8
12676: PUSH
12677: LD_INT 9
12679: PUSH
12680: LD_INT 10
12682: PUSH
12683: LD_INT 11
12685: PUSH
12686: LD_INT 12
12688: PUSH
12689: LD_INT 13
12691: PUSH
12692: LD_INT 14
12694: PUSH
12695: LD_INT 15
12697: PUSH
12698: LD_INT 16
12700: PUSH
12701: LD_INT 17
12703: PUSH
12704: LD_INT 18
12706: PUSH
12707: LD_INT 19
12709: PUSH
12710: LD_INT 20
12712: PUSH
12713: LD_INT 21
12715: PUSH
12716: LD_INT 22
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 24
12724: PUSH
12725: LD_INT 25
12727: PUSH
12728: LD_INT 26
12730: PUSH
12731: LD_INT 27
12733: PUSH
12734: LD_INT 28
12736: PUSH
12737: LD_INT 29
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 31
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 33
12751: PUSH
12752: LD_INT 34
12754: PUSH
12755: LD_INT 36
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 101
12797: PUSH
12798: LD_INT 102
12800: PUSH
12801: LD_INT 103
12803: PUSH
12804: LD_INT 104
12806: PUSH
12807: LD_INT 105
12809: PUSH
12810: LD_INT 106
12812: PUSH
12813: LD_INT 107
12815: PUSH
12816: LD_INT 108
12818: PUSH
12819: LD_INT 109
12821: PUSH
12822: LD_INT 110
12824: PUSH
12825: LD_INT 111
12827: PUSH
12828: LD_INT 112
12830: PUSH
12831: LD_INT 113
12833: PUSH
12834: LD_INT 114
12836: PUSH
12837: LD_INT 116
12839: PUSH
12840: LD_INT 117
12842: PUSH
12843: LD_INT 118
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: ST_TO_ADDR
12869: GO 13644
12871: LD_INT 16
12873: DOUBLE
12874: EQUAL
12875: IFTRUE 12879
12877: GO 13015
12879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12880: LD_ADDR_VAR 0 2
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: LD_INT 4
12890: PUSH
12891: LD_INT 5
12893: PUSH
12894: LD_INT 7
12896: PUSH
12897: LD_INT 11
12899: PUSH
12900: LD_INT 12
12902: PUSH
12903: LD_INT 15
12905: PUSH
12906: LD_INT 16
12908: PUSH
12909: LD_INT 20
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 22
12917: PUSH
12918: LD_INT 23
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 31
12932: PUSH
12933: LD_INT 32
12935: PUSH
12936: LD_INT 33
12938: PUSH
12939: LD_INT 34
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 101
12965: PUSH
12966: LD_INT 102
12968: PUSH
12969: LD_INT 103
12971: PUSH
12972: LD_INT 106
12974: PUSH
12975: LD_INT 108
12977: PUSH
12978: LD_INT 112
12980: PUSH
12981: LD_INT 113
12983: PUSH
12984: LD_INT 114
12986: PUSH
12987: LD_INT 116
12989: PUSH
12990: LD_INT 117
12992: PUSH
12993: LD_INT 118
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: ST_TO_ADDR
13013: GO 13644
13015: LD_INT 17
13017: DOUBLE
13018: EQUAL
13019: IFTRUE 13023
13021: GO 13247
13023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13024: LD_ADDR_VAR 0 2
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 3
13037: PUSH
13038: LD_INT 4
13040: PUSH
13041: LD_INT 5
13043: PUSH
13044: LD_INT 6
13046: PUSH
13047: LD_INT 7
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: LD_INT 9
13055: PUSH
13056: LD_INT 10
13058: PUSH
13059: LD_INT 11
13061: PUSH
13062: LD_INT 12
13064: PUSH
13065: LD_INT 13
13067: PUSH
13068: LD_INT 14
13070: PUSH
13071: LD_INT 15
13073: PUSH
13074: LD_INT 16
13076: PUSH
13077: LD_INT 17
13079: PUSH
13080: LD_INT 18
13082: PUSH
13083: LD_INT 19
13085: PUSH
13086: LD_INT 20
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 23
13097: PUSH
13098: LD_INT 24
13100: PUSH
13101: LD_INT 25
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 27
13109: PUSH
13110: LD_INT 28
13112: PUSH
13113: LD_INT 29
13115: PUSH
13116: LD_INT 30
13118: PUSH
13119: LD_INT 31
13121: PUSH
13122: LD_INT 32
13124: PUSH
13125: LD_INT 33
13127: PUSH
13128: LD_INT 34
13130: PUSH
13131: LD_INT 36
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 101
13173: PUSH
13174: LD_INT 102
13176: PUSH
13177: LD_INT 103
13179: PUSH
13180: LD_INT 104
13182: PUSH
13183: LD_INT 105
13185: PUSH
13186: LD_INT 106
13188: PUSH
13189: LD_INT 107
13191: PUSH
13192: LD_INT 108
13194: PUSH
13195: LD_INT 109
13197: PUSH
13198: LD_INT 110
13200: PUSH
13201: LD_INT 111
13203: PUSH
13204: LD_INT 112
13206: PUSH
13207: LD_INT 113
13209: PUSH
13210: LD_INT 114
13212: PUSH
13213: LD_INT 116
13215: PUSH
13216: LD_INT 117
13218: PUSH
13219: LD_INT 118
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: ST_TO_ADDR
13245: GO 13644
13247: LD_INT 18
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13403
13255: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: LD_INT 4
13266: PUSH
13267: LD_INT 5
13269: PUSH
13270: LD_INT 7
13272: PUSH
13273: LD_INT 11
13275: PUSH
13276: LD_INT 12
13278: PUSH
13279: LD_INT 15
13281: PUSH
13282: LD_INT 16
13284: PUSH
13285: LD_INT 20
13287: PUSH
13288: LD_INT 21
13290: PUSH
13291: LD_INT 22
13293: PUSH
13294: LD_INT 23
13296: PUSH
13297: LD_INT 25
13299: PUSH
13300: LD_INT 26
13302: PUSH
13303: LD_INT 30
13305: PUSH
13306: LD_INT 31
13308: PUSH
13309: LD_INT 32
13311: PUSH
13312: LD_INT 33
13314: PUSH
13315: LD_INT 34
13317: PUSH
13318: LD_INT 35
13320: PUSH
13321: LD_INT 36
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 101
13349: PUSH
13350: LD_INT 102
13352: PUSH
13353: LD_INT 103
13355: PUSH
13356: LD_INT 106
13358: PUSH
13359: LD_INT 108
13361: PUSH
13362: LD_INT 112
13364: PUSH
13365: LD_INT 113
13367: PUSH
13368: LD_INT 114
13370: PUSH
13371: LD_INT 115
13373: PUSH
13374: LD_INT 116
13376: PUSH
13377: LD_INT 117
13379: PUSH
13380: LD_INT 118
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: ST_TO_ADDR
13401: GO 13644
13403: LD_INT 19
13405: DOUBLE
13406: EQUAL
13407: IFTRUE 13411
13409: GO 13643
13411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13412: LD_ADDR_VAR 0 2
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: LD_INT 5
13431: PUSH
13432: LD_INT 6
13434: PUSH
13435: LD_INT 7
13437: PUSH
13438: LD_INT 8
13440: PUSH
13441: LD_INT 9
13443: PUSH
13444: LD_INT 10
13446: PUSH
13447: LD_INT 11
13449: PUSH
13450: LD_INT 12
13452: PUSH
13453: LD_INT 13
13455: PUSH
13456: LD_INT 14
13458: PUSH
13459: LD_INT 15
13461: PUSH
13462: LD_INT 16
13464: PUSH
13465: LD_INT 17
13467: PUSH
13468: LD_INT 18
13470: PUSH
13471: LD_INT 19
13473: PUSH
13474: LD_INT 20
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 22
13482: PUSH
13483: LD_INT 23
13485: PUSH
13486: LD_INT 24
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 26
13494: PUSH
13495: LD_INT 27
13497: PUSH
13498: LD_INT 28
13500: PUSH
13501: LD_INT 29
13503: PUSH
13504: LD_INT 30
13506: PUSH
13507: LD_INT 31
13509: PUSH
13510: LD_INT 32
13512: PUSH
13513: LD_INT 33
13515: PUSH
13516: LD_INT 34
13518: PUSH
13519: LD_INT 35
13521: PUSH
13522: LD_INT 36
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 101
13565: PUSH
13566: LD_INT 102
13568: PUSH
13569: LD_INT 103
13571: PUSH
13572: LD_INT 104
13574: PUSH
13575: LD_INT 105
13577: PUSH
13578: LD_INT 106
13580: PUSH
13581: LD_INT 107
13583: PUSH
13584: LD_INT 108
13586: PUSH
13587: LD_INT 109
13589: PUSH
13590: LD_INT 110
13592: PUSH
13593: LD_INT 111
13595: PUSH
13596: LD_INT 112
13598: PUSH
13599: LD_INT 113
13601: PUSH
13602: LD_INT 114
13604: PUSH
13605: LD_INT 115
13607: PUSH
13608: LD_INT 116
13610: PUSH
13611: LD_INT 117
13613: PUSH
13614: LD_INT 118
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: ST_TO_ADDR
13641: GO 13644
13643: POP
// end else
13644: GO 13875
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13646: LD_ADDR_VAR 0 2
13650: PUSH
13651: LD_INT 1
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: LD_INT 3
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: LD_INT 5
13665: PUSH
13666: LD_INT 6
13668: PUSH
13669: LD_INT 7
13671: PUSH
13672: LD_INT 8
13674: PUSH
13675: LD_INT 9
13677: PUSH
13678: LD_INT 10
13680: PUSH
13681: LD_INT 11
13683: PUSH
13684: LD_INT 12
13686: PUSH
13687: LD_INT 13
13689: PUSH
13690: LD_INT 14
13692: PUSH
13693: LD_INT 15
13695: PUSH
13696: LD_INT 16
13698: PUSH
13699: LD_INT 17
13701: PUSH
13702: LD_INT 18
13704: PUSH
13705: LD_INT 19
13707: PUSH
13708: LD_INT 20
13710: PUSH
13711: LD_INT 21
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 23
13719: PUSH
13720: LD_INT 24
13722: PUSH
13723: LD_INT 25
13725: PUSH
13726: LD_INT 26
13728: PUSH
13729: LD_INT 27
13731: PUSH
13732: LD_INT 28
13734: PUSH
13735: LD_INT 29
13737: PUSH
13738: LD_INT 30
13740: PUSH
13741: LD_INT 31
13743: PUSH
13744: LD_INT 32
13746: PUSH
13747: LD_INT 33
13749: PUSH
13750: LD_INT 34
13752: PUSH
13753: LD_INT 35
13755: PUSH
13756: LD_INT 36
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 101
13799: PUSH
13800: LD_INT 102
13802: PUSH
13803: LD_INT 103
13805: PUSH
13806: LD_INT 104
13808: PUSH
13809: LD_INT 105
13811: PUSH
13812: LD_INT 106
13814: PUSH
13815: LD_INT 107
13817: PUSH
13818: LD_INT 108
13820: PUSH
13821: LD_INT 109
13823: PUSH
13824: LD_INT 110
13826: PUSH
13827: LD_INT 111
13829: PUSH
13830: LD_INT 112
13832: PUSH
13833: LD_INT 113
13835: PUSH
13836: LD_INT 114
13838: PUSH
13839: LD_INT 115
13841: PUSH
13842: LD_INT 116
13844: PUSH
13845: LD_INT 117
13847: PUSH
13848: LD_INT 118
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// if result then
13875: LD_VAR 0 2
13879: IFFALSE 14665
// begin normal :=  ;
13881: LD_ADDR_VAR 0 5
13885: PUSH
13886: LD_STRING 
13888: ST_TO_ADDR
// hardcore :=  ;
13889: LD_ADDR_VAR 0 6
13893: PUSH
13894: LD_STRING 
13896: ST_TO_ADDR
// active :=  ;
13897: LD_ADDR_VAR 0 7
13901: PUSH
13902: LD_STRING 
13904: ST_TO_ADDR
// for i = 1 to normalCounter do
13905: LD_ADDR_VAR 0 8
13909: PUSH
13910: DOUBLE
13911: LD_INT 1
13913: DEC
13914: ST_TO_ADDR
13915: LD_EXP 72
13919: PUSH
13920: FOR_TO
13921: IFFALSE 14022
// begin tmp := 0 ;
13923: LD_ADDR_VAR 0 3
13927: PUSH
13928: LD_STRING 0
13930: ST_TO_ADDR
// if result [ 1 ] then
13931: LD_VAR 0 2
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: IFFALSE 14004
// if result [ 1 ] [ 1 ] = i then
13941: LD_VAR 0 2
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PUSH
13950: LD_INT 1
13952: ARRAY
13953: PUSH
13954: LD_VAR 0 8
13958: EQUAL
13959: IFFALSE 14004
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13961: LD_ADDR_VAR 0 2
13965: PUSH
13966: LD_VAR 0 2
13970: PPUSH
13971: LD_INT 1
13973: PPUSH
13974: LD_VAR 0 2
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 3
13990: PPUSH
13991: CALL_OW 1
13995: ST_TO_ADDR
// tmp := 1 ;
13996: LD_ADDR_VAR 0 3
14000: PUSH
14001: LD_STRING 1
14003: ST_TO_ADDR
// end ; normal := normal & tmp ;
14004: LD_ADDR_VAR 0 5
14008: PUSH
14009: LD_VAR 0 5
14013: PUSH
14014: LD_VAR 0 3
14018: STR
14019: ST_TO_ADDR
// end ;
14020: GO 13920
14022: POP
14023: POP
// for i = 1 to hardcoreCounter do
14024: LD_ADDR_VAR 0 8
14028: PUSH
14029: DOUBLE
14030: LD_INT 1
14032: DEC
14033: ST_TO_ADDR
14034: LD_EXP 73
14038: PUSH
14039: FOR_TO
14040: IFFALSE 14145
// begin tmp := 0 ;
14042: LD_ADDR_VAR 0 3
14046: PUSH
14047: LD_STRING 0
14049: ST_TO_ADDR
// if result [ 2 ] then
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 2
14057: ARRAY
14058: IFFALSE 14127
// if result [ 2 ] [ 1 ] = 100 + i then
14060: LD_VAR 0 2
14064: PUSH
14065: LD_INT 2
14067: ARRAY
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PUSH
14073: LD_INT 100
14075: PUSH
14076: LD_VAR 0 8
14080: PLUS
14081: EQUAL
14082: IFFALSE 14127
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_INT 2
14096: PPUSH
14097: LD_VAR 0 2
14101: PUSH
14102: LD_INT 2
14104: ARRAY
14105: PPUSH
14106: LD_INT 1
14108: PPUSH
14109: CALL_OW 3
14113: PPUSH
14114: CALL_OW 1
14118: ST_TO_ADDR
// tmp := 1 ;
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_STRING 1
14126: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14127: LD_ADDR_VAR 0 6
14131: PUSH
14132: LD_VAR 0 6
14136: PUSH
14137: LD_VAR 0 3
14141: STR
14142: ST_TO_ADDR
// end ;
14143: GO 14039
14145: POP
14146: POP
// if isGameLoad then
14147: LD_VAR 0 1
14151: IFFALSE 14626
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14153: LD_ADDR_VAR 0 4
14157: PUSH
14158: LD_EXP 76
14162: PUSH
14163: LD_EXP 75
14167: PUSH
14168: LD_EXP 77
14172: PUSH
14173: LD_EXP 74
14177: PUSH
14178: LD_EXP 78
14182: PUSH
14183: LD_EXP 79
14187: PUSH
14188: LD_EXP 80
14192: PUSH
14193: LD_EXP 81
14197: PUSH
14198: LD_EXP 82
14202: PUSH
14203: LD_EXP 83
14207: PUSH
14208: LD_EXP 84
14212: PUSH
14213: LD_EXP 85
14217: PUSH
14218: LD_EXP 86
14222: PUSH
14223: LD_EXP 87
14227: PUSH
14228: LD_EXP 95
14232: PUSH
14233: LD_EXP 96
14237: PUSH
14238: LD_EXP 97
14242: PUSH
14243: LD_EXP 98
14247: PUSH
14248: LD_EXP 100
14252: PUSH
14253: LD_EXP 101
14257: PUSH
14258: LD_EXP 102
14262: PUSH
14263: LD_EXP 105
14267: PUSH
14268: LD_EXP 107
14272: PUSH
14273: LD_EXP 108
14277: PUSH
14278: LD_EXP 109
14282: PUSH
14283: LD_EXP 111
14287: PUSH
14288: LD_EXP 112
14292: PUSH
14293: LD_EXP 115
14297: PUSH
14298: LD_EXP 116
14302: PUSH
14303: LD_EXP 117
14307: PUSH
14308: LD_EXP 118
14312: PUSH
14313: LD_EXP 119
14317: PUSH
14318: LD_EXP 120
14322: PUSH
14323: LD_EXP 121
14327: PUSH
14328: LD_EXP 122
14332: PUSH
14333: LD_EXP 123
14337: PUSH
14338: LD_EXP 88
14342: PUSH
14343: LD_EXP 89
14347: PUSH
14348: LD_EXP 92
14352: PUSH
14353: LD_EXP 93
14357: PUSH
14358: LD_EXP 94
14362: PUSH
14363: LD_EXP 90
14367: PUSH
14368: LD_EXP 91
14372: PUSH
14373: LD_EXP 99
14377: PUSH
14378: LD_EXP 103
14382: PUSH
14383: LD_EXP 104
14387: PUSH
14388: LD_EXP 106
14392: PUSH
14393: LD_EXP 110
14397: PUSH
14398: LD_EXP 113
14402: PUSH
14403: LD_EXP 114
14407: PUSH
14408: LD_EXP 124
14412: PUSH
14413: LD_EXP 125
14417: PUSH
14418: LD_EXP 126
14422: PUSH
14423: LD_EXP 127
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: ST_TO_ADDR
// tmp :=  ;
14484: LD_ADDR_VAR 0 3
14488: PUSH
14489: LD_STRING 
14491: ST_TO_ADDR
// for i = 1 to normalCounter do
14492: LD_ADDR_VAR 0 8
14496: PUSH
14497: DOUBLE
14498: LD_INT 1
14500: DEC
14501: ST_TO_ADDR
14502: LD_EXP 72
14506: PUSH
14507: FOR_TO
14508: IFFALSE 14544
// begin if flags [ i ] then
14510: LD_VAR 0 4
14514: PUSH
14515: LD_VAR 0 8
14519: ARRAY
14520: IFFALSE 14542
// tmp := tmp & i & ; ;
14522: LD_ADDR_VAR 0 3
14526: PUSH
14527: LD_VAR 0 3
14531: PUSH
14532: LD_VAR 0 8
14536: STR
14537: PUSH
14538: LD_STRING ;
14540: STR
14541: ST_TO_ADDR
// end ;
14542: GO 14507
14544: POP
14545: POP
// for i = 1 to hardcoreCounter do
14546: LD_ADDR_VAR 0 8
14550: PUSH
14551: DOUBLE
14552: LD_INT 1
14554: DEC
14555: ST_TO_ADDR
14556: LD_EXP 73
14560: PUSH
14561: FOR_TO
14562: IFFALSE 14608
// begin if flags [ normalCounter + i ] then
14564: LD_VAR 0 4
14568: PUSH
14569: LD_EXP 72
14573: PUSH
14574: LD_VAR 0 8
14578: PLUS
14579: ARRAY
14580: IFFALSE 14606
// tmp := tmp & ( 100 + i ) & ; ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: LD_VAR 0 3
14591: PUSH
14592: LD_INT 100
14594: PUSH
14595: LD_VAR 0 8
14599: PLUS
14600: STR
14601: PUSH
14602: LD_STRING ;
14604: STR
14605: ST_TO_ADDR
// end ;
14606: GO 14561
14608: POP
14609: POP
// if tmp then
14610: LD_VAR 0 3
14614: IFFALSE 14626
// active := tmp ;
14616: LD_ADDR_VAR 0 7
14620: PUSH
14621: LD_VAR 0 3
14625: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14626: LD_STRING getStreamItemsFromMission("
14628: PUSH
14629: LD_VAR 0 5
14633: STR
14634: PUSH
14635: LD_STRING ","
14637: STR
14638: PUSH
14639: LD_VAR 0 6
14643: STR
14644: PUSH
14645: LD_STRING ","
14647: STR
14648: PUSH
14649: LD_VAR 0 7
14653: STR
14654: PUSH
14655: LD_STRING ")
14657: STR
14658: PPUSH
14659: CALL_OW 559
// end else
14663: GO 14672
// ToLua ( getStreamItemsFromMission("","","") ) ;
14665: LD_STRING getStreamItemsFromMission("","","")
14667: PPUSH
14668: CALL_OW 559
// end ;
14672: LD_VAR 0 2
14676: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14677: LD_EXP 71
14681: PUSH
14682: LD_EXP 76
14686: AND
14687: IFFALSE 14811
14689: GO 14691
14691: DISABLE
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
// begin enable ;
14696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14697: LD_ADDR_VAR 0 2
14701: PUSH
14702: LD_INT 22
14704: PUSH
14705: LD_OWVAR 2
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 2
14716: PUSH
14717: LD_INT 34
14719: PUSH
14720: LD_INT 7
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 34
14729: PUSH
14730: LD_INT 45
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 34
14739: PUSH
14740: LD_INT 28
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 34
14749: PUSH
14750: LD_INT 47
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 69
14772: ST_TO_ADDR
// if not tmp then
14773: LD_VAR 0 2
14777: NOT
14778: IFFALSE 14782
// exit ;
14780: GO 14811
// for i in tmp do
14782: LD_ADDR_VAR 0 1
14786: PUSH
14787: LD_VAR 0 2
14791: PUSH
14792: FOR_IN
14793: IFFALSE 14809
// begin SetLives ( i , 0 ) ;
14795: LD_VAR 0 1
14799: PPUSH
14800: LD_INT 0
14802: PPUSH
14803: CALL_OW 234
// end ;
14807: GO 14792
14809: POP
14810: POP
// end ;
14811: PPOPN 2
14813: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14814: LD_EXP 71
14818: PUSH
14819: LD_EXP 77
14823: AND
14824: IFFALSE 14908
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
// begin enable ;
14833: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_INT 22
14841: PUSH
14842: LD_OWVAR 2
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 32
14853: PUSH
14854: LD_INT 3
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: ST_TO_ADDR
// if not tmp then
14870: LD_VAR 0 2
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 14908
// for i in tmp do
14879: LD_ADDR_VAR 0 1
14883: PUSH
14884: LD_VAR 0 2
14888: PUSH
14889: FOR_IN
14890: IFFALSE 14906
// begin SetLives ( i , 0 ) ;
14892: LD_VAR 0 1
14896: PPUSH
14897: LD_INT 0
14899: PPUSH
14900: CALL_OW 234
// end ;
14904: GO 14889
14906: POP
14907: POP
// end ;
14908: PPOPN 2
14910: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14911: LD_EXP 71
14915: PUSH
14916: LD_EXP 74
14920: AND
14921: IFFALSE 15014
14923: GO 14925
14925: DISABLE
14926: LD_INT 0
14928: PPUSH
// begin enable ;
14929: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14930: LD_ADDR_VAR 0 1
14934: PUSH
14935: LD_INT 22
14937: PUSH
14938: LD_OWVAR 2
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 2
14949: PUSH
14950: LD_INT 25
14952: PUSH
14953: LD_INT 5
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 25
14962: PUSH
14963: LD_INT 9
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 25
14972: PUSH
14973: LD_INT 8
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 69
14994: PUSH
14995: FOR_IN
14996: IFFALSE 15012
// begin SetClass ( i , 1 ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 336
// end ;
15010: GO 14995
15012: POP
15013: POP
// end ;
15014: PPOPN 1
15016: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15017: LD_EXP 71
15021: PUSH
15022: LD_EXP 75
15026: AND
15027: PUSH
15028: LD_OWVAR 65
15032: PUSH
15033: LD_INT 7
15035: LESS
15036: AND
15037: IFFALSE 15051
15039: GO 15041
15041: DISABLE
// begin enable ;
15042: ENABLE
// game_speed := 7 ;
15043: LD_ADDR_OWVAR 65
15047: PUSH
15048: LD_INT 7
15050: ST_TO_ADDR
// end ;
15051: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15052: LD_EXP 71
15056: PUSH
15057: LD_EXP 78
15061: AND
15062: IFFALSE 15264
15064: GO 15066
15066: DISABLE
15067: LD_INT 0
15069: PPUSH
15070: PPUSH
15071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15072: LD_ADDR_VAR 0 3
15076: PUSH
15077: LD_INT 81
15079: PUSH
15080: LD_OWVAR 2
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 21
15091: PUSH
15092: LD_INT 1
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PPUSH
15103: CALL_OW 69
15107: ST_TO_ADDR
// if not tmp then
15108: LD_VAR 0 3
15112: NOT
15113: IFFALSE 15117
// exit ;
15115: GO 15264
// if tmp > 5 then
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 5
15124: GREATER
15125: IFFALSE 15137
// k := 5 else
15127: LD_ADDR_VAR 0 2
15131: PUSH
15132: LD_INT 5
15134: ST_TO_ADDR
15135: GO 15147
// k := tmp ;
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_VAR 0 3
15146: ST_TO_ADDR
// for i := 1 to k do
15147: LD_ADDR_VAR 0 1
15151: PUSH
15152: DOUBLE
15153: LD_INT 1
15155: DEC
15156: ST_TO_ADDR
15157: LD_VAR 0 2
15161: PUSH
15162: FOR_TO
15163: IFFALSE 15262
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15165: LD_VAR 0 3
15169: PUSH
15170: LD_VAR 0 1
15174: ARRAY
15175: PPUSH
15176: LD_VAR 0 1
15180: PUSH
15181: LD_INT 4
15183: MOD
15184: PUSH
15185: LD_INT 1
15187: PLUS
15188: PPUSH
15189: CALL_OW 259
15193: PUSH
15194: LD_INT 10
15196: LESS
15197: IFFALSE 15260
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15199: LD_VAR 0 3
15203: PUSH
15204: LD_VAR 0 1
15208: ARRAY
15209: PPUSH
15210: LD_VAR 0 1
15214: PUSH
15215: LD_INT 4
15217: MOD
15218: PUSH
15219: LD_INT 1
15221: PLUS
15222: PPUSH
15223: LD_VAR 0 3
15227: PUSH
15228: LD_VAR 0 1
15232: ARRAY
15233: PPUSH
15234: LD_VAR 0 1
15238: PUSH
15239: LD_INT 4
15241: MOD
15242: PUSH
15243: LD_INT 1
15245: PLUS
15246: PPUSH
15247: CALL_OW 259
15251: PUSH
15252: LD_INT 1
15254: PLUS
15255: PPUSH
15256: CALL_OW 237
15260: GO 15162
15262: POP
15263: POP
// end ;
15264: PPOPN 3
15266: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15267: LD_EXP 71
15271: PUSH
15272: LD_EXP 79
15276: AND
15277: IFFALSE 15297
15279: GO 15281
15281: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15282: LD_INT 4
15284: PPUSH
15285: LD_OWVAR 2
15289: PPUSH
15290: LD_INT 0
15292: PPUSH
15293: CALL_OW 324
15297: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15298: LD_EXP 71
15302: PUSH
15303: LD_EXP 108
15307: AND
15308: IFFALSE 15328
15310: GO 15312
15312: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15313: LD_INT 19
15315: PPUSH
15316: LD_OWVAR 2
15320: PPUSH
15321: LD_INT 0
15323: PPUSH
15324: CALL_OW 324
15328: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15329: LD_EXP 71
15333: PUSH
15334: LD_EXP 80
15338: AND
15339: IFFALSE 15441
15341: GO 15343
15343: DISABLE
15344: LD_INT 0
15346: PPUSH
15347: PPUSH
// begin enable ;
15348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15349: LD_ADDR_VAR 0 2
15353: PUSH
15354: LD_INT 22
15356: PUSH
15357: LD_OWVAR 2
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 34
15371: PUSH
15372: LD_INT 11
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 34
15381: PUSH
15382: LD_INT 30
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// if not tmp then
15403: LD_VAR 0 2
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15441
// for i in tmp do
15412: LD_ADDR_VAR 0 1
15416: PUSH
15417: LD_VAR 0 2
15421: PUSH
15422: FOR_IN
15423: IFFALSE 15439
// begin SetLives ( i , 0 ) ;
15425: LD_VAR 0 1
15429: PPUSH
15430: LD_INT 0
15432: PPUSH
15433: CALL_OW 234
// end ;
15437: GO 15422
15439: POP
15440: POP
// end ;
15441: PPOPN 2
15443: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15444: LD_EXP 71
15448: PUSH
15449: LD_EXP 81
15453: AND
15454: IFFALSE 15474
15456: GO 15458
15458: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15459: LD_INT 32
15461: PPUSH
15462: LD_OWVAR 2
15466: PPUSH
15467: LD_INT 0
15469: PPUSH
15470: CALL_OW 324
15474: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15475: LD_EXP 71
15479: PUSH
15480: LD_EXP 82
15484: AND
15485: IFFALSE 15666
15487: GO 15489
15489: DISABLE
15490: LD_INT 0
15492: PPUSH
15493: PPUSH
15494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: LD_INT 22
15502: PUSH
15503: LD_OWVAR 2
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 33
15514: PUSH
15515: LD_INT 3
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15666
// side := 0 ;
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: LD_INT 0
15547: ST_TO_ADDR
// for i := 1 to 8 do
15548: LD_ADDR_VAR 0 1
15552: PUSH
15553: DOUBLE
15554: LD_INT 1
15556: DEC
15557: ST_TO_ADDR
15558: LD_INT 8
15560: PUSH
15561: FOR_TO
15562: IFFALSE 15610
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15564: LD_OWVAR 2
15568: PUSH
15569: LD_VAR 0 1
15573: NONEQUAL
15574: PUSH
15575: LD_OWVAR 2
15579: PPUSH
15580: LD_VAR 0 1
15584: PPUSH
15585: CALL_OW 81
15589: PUSH
15590: LD_INT 2
15592: EQUAL
15593: AND
15594: IFFALSE 15608
// begin side := i ;
15596: LD_ADDR_VAR 0 3
15600: PUSH
15601: LD_VAR 0 1
15605: ST_TO_ADDR
// break ;
15606: GO 15610
// end ;
15608: GO 15561
15610: POP
15611: POP
// if not side then
15612: LD_VAR 0 3
15616: NOT
15617: IFFALSE 15621
// exit ;
15619: GO 15666
// for i := 1 to tmp do
15621: LD_ADDR_VAR 0 1
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_VAR 0 2
15635: PUSH
15636: FOR_TO
15637: IFFALSE 15664
// if Prob ( 60 ) then
15639: LD_INT 60
15641: PPUSH
15642: CALL_OW 13
15646: IFFALSE 15662
// SetSide ( i , side ) ;
15648: LD_VAR 0 1
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: CALL_OW 235
15662: GO 15636
15664: POP
15665: POP
// end ;
15666: PPOPN 3
15668: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15669: LD_EXP 71
15673: PUSH
15674: LD_EXP 84
15678: AND
15679: IFFALSE 15798
15681: GO 15683
15683: DISABLE
15684: LD_INT 0
15686: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15687: LD_ADDR_VAR 0 1
15691: PUSH
15692: LD_INT 22
15694: PUSH
15695: LD_OWVAR 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 3
15716: PUSH
15717: LD_INT 23
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: PUSH
15741: FOR_IN
15742: IFFALSE 15796
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15744: LD_VAR 0 1
15748: PPUSH
15749: CALL_OW 257
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: LD_INT 2
15759: PUSH
15760: LD_INT 3
15762: PUSH
15763: LD_INT 4
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: IN
15772: IFFALSE 15794
// SetClass ( un , rand ( 1 , 4 ) ) ;
15774: LD_VAR 0 1
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 4
15784: PPUSH
15785: CALL_OW 12
15789: PPUSH
15790: CALL_OW 336
15794: GO 15741
15796: POP
15797: POP
// end ;
15798: PPOPN 1
15800: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15801: LD_EXP 71
15805: PUSH
15806: LD_EXP 83
15810: AND
15811: IFFALSE 15890
15813: GO 15815
15815: DISABLE
15816: LD_INT 0
15818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15819: LD_ADDR_VAR 0 1
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_OWVAR 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 21
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: ST_TO_ADDR
// if not tmp then
15855: LD_VAR 0 1
15859: NOT
15860: IFFALSE 15864
// exit ;
15862: GO 15890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15864: LD_VAR 0 1
15868: PUSH
15869: LD_INT 1
15871: PPUSH
15872: LD_VAR 0 1
15876: PPUSH
15877: CALL_OW 12
15881: ARRAY
15882: PPUSH
15883: LD_INT 100
15885: PPUSH
15886: CALL_OW 234
// end ;
15890: PPOPN 1
15892: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15893: LD_EXP 71
15897: PUSH
15898: LD_EXP 85
15902: AND
15903: IFFALSE 16001
15905: GO 15907
15907: DISABLE
15908: LD_INT 0
15910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15911: LD_ADDR_VAR 0 1
15915: PUSH
15916: LD_INT 22
15918: PUSH
15919: LD_OWVAR 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if not tmp then
15947: LD_VAR 0 1
15951: NOT
15952: IFFALSE 15956
// exit ;
15954: GO 16001
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15956: LD_VAR 0 1
15960: PUSH
15961: LD_INT 1
15963: PPUSH
15964: LD_VAR 0 1
15968: PPUSH
15969: CALL_OW 12
15973: ARRAY
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_INT 4
15980: PPUSH
15981: CALL_OW 12
15985: PPUSH
15986: LD_INT 3000
15988: PPUSH
15989: LD_INT 9000
15991: PPUSH
15992: CALL_OW 12
15996: PPUSH
15997: CALL_OW 492
// end ;
16001: PPOPN 1
16003: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16004: LD_EXP 71
16008: PUSH
16009: LD_EXP 86
16013: AND
16014: IFFALSE 16034
16016: GO 16018
16018: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16019: LD_INT 1
16021: PPUSH
16022: LD_OWVAR 2
16026: PPUSH
16027: LD_INT 0
16029: PPUSH
16030: CALL_OW 324
16034: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16035: LD_EXP 71
16039: PUSH
16040: LD_EXP 87
16044: AND
16045: IFFALSE 16128
16047: GO 16049
16049: DISABLE
16050: LD_INT 0
16052: PPUSH
16053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16054: LD_ADDR_VAR 0 2
16058: PUSH
16059: LD_INT 22
16061: PUSH
16062: LD_OWVAR 2
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 21
16073: PUSH
16074: LD_INT 3
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: ST_TO_ADDR
// if not tmp then
16090: LD_VAR 0 2
16094: NOT
16095: IFFALSE 16099
// exit ;
16097: GO 16128
// for i in tmp do
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: LD_VAR 0 2
16108: PUSH
16109: FOR_IN
16110: IFFALSE 16126
// SetBLevel ( i , 10 ) ;
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_INT 10
16119: PPUSH
16120: CALL_OW 241
16124: GO 16109
16126: POP
16127: POP
// end ;
16128: PPOPN 2
16130: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16131: LD_EXP 71
16135: PUSH
16136: LD_EXP 88
16140: AND
16141: IFFALSE 16252
16143: GO 16145
16145: DISABLE
16146: LD_INT 0
16148: PPUSH
16149: PPUSH
16150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16151: LD_ADDR_VAR 0 3
16155: PUSH
16156: LD_INT 22
16158: PUSH
16159: LD_OWVAR 2
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 25
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if not tmp then
16187: LD_VAR 0 3
16191: NOT
16192: IFFALSE 16196
// exit ;
16194: GO 16252
// un := tmp [ rand ( 1 , tmp ) ] ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_VAR 0 3
16205: PUSH
16206: LD_INT 1
16208: PPUSH
16209: LD_VAR 0 3
16213: PPUSH
16214: CALL_OW 12
16218: ARRAY
16219: ST_TO_ADDR
// if Crawls ( un ) then
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 318
16229: IFFALSE 16240
// ComWalk ( un ) ;
16231: LD_VAR 0 2
16235: PPUSH
16236: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16240: LD_VAR 0 2
16244: PPUSH
16245: LD_INT 5
16247: PPUSH
16248: CALL_OW 336
// end ;
16252: PPOPN 3
16254: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16255: LD_EXP 71
16259: PUSH
16260: LD_EXP 89
16264: AND
16265: PUSH
16266: LD_OWVAR 67
16270: PUSH
16271: LD_INT 4
16273: LESS
16274: AND
16275: IFFALSE 16294
16277: GO 16279
16279: DISABLE
// begin Difficulty := Difficulty + 1 ;
16280: LD_ADDR_OWVAR 67
16284: PUSH
16285: LD_OWVAR 67
16289: PUSH
16290: LD_INT 1
16292: PLUS
16293: ST_TO_ADDR
// end ;
16294: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16295: LD_EXP 71
16299: PUSH
16300: LD_EXP 90
16304: AND
16305: IFFALSE 16408
16307: GO 16309
16309: DISABLE
16310: LD_INT 0
16312: PPUSH
// begin for i := 1 to 5 do
16313: LD_ADDR_VAR 0 1
16317: PUSH
16318: DOUBLE
16319: LD_INT 1
16321: DEC
16322: ST_TO_ADDR
16323: LD_INT 5
16325: PUSH
16326: FOR_TO
16327: IFFALSE 16406
// begin uc_nation := nation_nature ;
16329: LD_ADDR_OWVAR 21
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// uc_side := 0 ;
16337: LD_ADDR_OWVAR 20
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16345: LD_ADDR_OWVAR 29
16349: PUSH
16350: LD_INT 12
16352: PUSH
16353: LD_INT 12
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// hc_agressivity := 20 ;
16360: LD_ADDR_OWVAR 35
16364: PUSH
16365: LD_INT 20
16367: ST_TO_ADDR
// hc_class := class_tiger ;
16368: LD_ADDR_OWVAR 28
16372: PUSH
16373: LD_INT 14
16375: ST_TO_ADDR
// hc_gallery :=  ;
16376: LD_ADDR_OWVAR 33
16380: PUSH
16381: LD_STRING 
16383: ST_TO_ADDR
// hc_name :=  ;
16384: LD_ADDR_OWVAR 26
16388: PUSH
16389: LD_STRING 
16391: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16392: CALL_OW 44
16396: PPUSH
16397: LD_INT 0
16399: PPUSH
16400: CALL_OW 51
// end ;
16404: GO 16326
16406: POP
16407: POP
// end ;
16408: PPOPN 1
16410: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16411: LD_EXP 71
16415: PUSH
16416: LD_EXP 91
16420: AND
16421: IFFALSE 16430
16423: GO 16425
16425: DISABLE
// StreamSibBomb ;
16426: CALL 16431 0 0
16430: END
// export function StreamSibBomb ; var i , x , y ; begin
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
// result := false ;
16437: LD_ADDR_VAR 0 1
16441: PUSH
16442: LD_INT 0
16444: ST_TO_ADDR
// for i := 1 to 16 do
16445: LD_ADDR_VAR 0 2
16449: PUSH
16450: DOUBLE
16451: LD_INT 1
16453: DEC
16454: ST_TO_ADDR
16455: LD_INT 16
16457: PUSH
16458: FOR_TO
16459: IFFALSE 16658
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16461: LD_ADDR_VAR 0 3
16465: PUSH
16466: LD_INT 10
16468: PUSH
16469: LD_INT 20
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 40
16477: PUSH
16478: LD_INT 50
16480: PUSH
16481: LD_INT 60
16483: PUSH
16484: LD_INT 70
16486: PUSH
16487: LD_INT 80
16489: PUSH
16490: LD_INT 90
16492: PUSH
16493: LD_INT 100
16495: PUSH
16496: LD_INT 110
16498: PUSH
16499: LD_INT 120
16501: PUSH
16502: LD_INT 130
16504: PUSH
16505: LD_INT 140
16507: PUSH
16508: LD_INT 150
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 1
16530: PPUSH
16531: LD_INT 15
16533: PPUSH
16534: CALL_OW 12
16538: ARRAY
16539: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16540: LD_ADDR_VAR 0 4
16544: PUSH
16545: LD_INT 10
16547: PUSH
16548: LD_INT 20
16550: PUSH
16551: LD_INT 30
16553: PUSH
16554: LD_INT 40
16556: PUSH
16557: LD_INT 50
16559: PUSH
16560: LD_INT 60
16562: PUSH
16563: LD_INT 70
16565: PUSH
16566: LD_INT 80
16568: PUSH
16569: LD_INT 90
16571: PUSH
16572: LD_INT 100
16574: PUSH
16575: LD_INT 110
16577: PUSH
16578: LD_INT 120
16580: PUSH
16581: LD_INT 130
16583: PUSH
16584: LD_INT 140
16586: PUSH
16587: LD_INT 150
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 1
16609: PPUSH
16610: LD_INT 15
16612: PPUSH
16613: CALL_OW 12
16617: ARRAY
16618: ST_TO_ADDR
// if ValidHex ( x , y ) then
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: CALL_OW 488
16633: IFFALSE 16656
// begin result := [ x , y ] ;
16635: LD_ADDR_VAR 0 1
16639: PUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_VAR 0 4
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: ST_TO_ADDR
// break ;
16654: GO 16658
// end ; end ;
16656: GO 16458
16658: POP
16659: POP
// if result then
16660: LD_VAR 0 1
16664: IFFALSE 16724
// begin ToLua ( playSibBomb() ) ;
16666: LD_STRING playSibBomb()
16668: PPUSH
16669: CALL_OW 559
// wait ( 0 0$14 ) ;
16673: LD_INT 490
16675: PPUSH
16676: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16680: LD_VAR 0 1
16684: PUSH
16685: LD_INT 1
16687: ARRAY
16688: PPUSH
16689: LD_VAR 0 1
16693: PUSH
16694: LD_INT 2
16696: ARRAY
16697: PPUSH
16698: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16702: LD_VAR 0 1
16706: PUSH
16707: LD_INT 1
16709: ARRAY
16710: PPUSH
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 2
16718: ARRAY
16719: PPUSH
16720: CALL_OW 429
// end ; end ;
16724: LD_VAR 0 1
16728: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16729: LD_EXP 71
16733: PUSH
16734: LD_EXP 93
16738: AND
16739: IFFALSE 16751
16741: GO 16743
16743: DISABLE
// YouLost (  ) ;
16744: LD_STRING 
16746: PPUSH
16747: CALL_OW 104
16751: END
// every 0 0$1 trigger StreamModeActive and sFog do
16752: LD_EXP 71
16756: PUSH
16757: LD_EXP 92
16761: AND
16762: IFFALSE 16776
16764: GO 16766
16766: DISABLE
// FogOff ( your_side ) ;
16767: LD_OWVAR 2
16771: PPUSH
16772: CALL_OW 344
16776: END
// every 0 0$1 trigger StreamModeActive and sSun do
16777: LD_EXP 71
16781: PUSH
16782: LD_EXP 94
16786: AND
16787: IFFALSE 16815
16789: GO 16791
16791: DISABLE
// begin solar_recharge_percent := 0 ;
16792: LD_ADDR_OWVAR 79
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16800: LD_INT 10500
16802: PPUSH
16803: CALL_OW 67
// solar_recharge_percent := 100 ;
16807: LD_ADDR_OWVAR 79
16811: PUSH
16812: LD_INT 100
16814: ST_TO_ADDR
// end ;
16815: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16816: LD_EXP 71
16820: PUSH
16821: LD_EXP 95
16825: AND
16826: IFFALSE 17065
16828: GO 16830
16830: DISABLE
16831: LD_INT 0
16833: PPUSH
16834: PPUSH
16835: PPUSH
// begin tmp := [ ] ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: EMPTY
16842: ST_TO_ADDR
// for i := 1 to 6 do
16843: LD_ADDR_VAR 0 1
16847: PUSH
16848: DOUBLE
16849: LD_INT 1
16851: DEC
16852: ST_TO_ADDR
16853: LD_INT 6
16855: PUSH
16856: FOR_TO
16857: IFFALSE 16962
// begin uc_nation := nation_nature ;
16859: LD_ADDR_OWVAR 21
16863: PUSH
16864: LD_INT 0
16866: ST_TO_ADDR
// uc_side := 0 ;
16867: LD_ADDR_OWVAR 20
16871: PUSH
16872: LD_INT 0
16874: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16875: LD_ADDR_OWVAR 29
16879: PUSH
16880: LD_INT 12
16882: PUSH
16883: LD_INT 12
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: ST_TO_ADDR
// hc_agressivity := 20 ;
16890: LD_ADDR_OWVAR 35
16894: PUSH
16895: LD_INT 20
16897: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16898: LD_ADDR_OWVAR 28
16902: PUSH
16903: LD_INT 17
16905: ST_TO_ADDR
// hc_gallery :=  ;
16906: LD_ADDR_OWVAR 33
16910: PUSH
16911: LD_STRING 
16913: ST_TO_ADDR
// hc_name :=  ;
16914: LD_ADDR_OWVAR 26
16918: PUSH
16919: LD_STRING 
16921: ST_TO_ADDR
// un := CreateHuman ;
16922: LD_ADDR_VAR 0 2
16926: PUSH
16927: CALL_OW 44
16931: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16932: LD_VAR 0 2
16936: PPUSH
16937: LD_INT 1
16939: PPUSH
16940: CALL_OW 51
// tmp := tmp ^ un ;
16944: LD_ADDR_VAR 0 3
16948: PUSH
16949: LD_VAR 0 3
16953: PUSH
16954: LD_VAR 0 2
16958: ADD
16959: ST_TO_ADDR
// end ;
16960: GO 16856
16962: POP
16963: POP
// repeat wait ( 0 0$1 ) ;
16964: LD_INT 35
16966: PPUSH
16967: CALL_OW 67
// for un in tmp do
16971: LD_ADDR_VAR 0 2
16975: PUSH
16976: LD_VAR 0 3
16980: PUSH
16981: FOR_IN
16982: IFFALSE 17056
// begin if IsDead ( un ) then
16984: LD_VAR 0 2
16988: PPUSH
16989: CALL_OW 301
16993: IFFALSE 17013
// begin tmp := tmp diff un ;
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: LD_VAR 0 3
17004: PUSH
17005: LD_VAR 0 2
17009: DIFF
17010: ST_TO_ADDR
// continue ;
17011: GO 16981
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17013: LD_VAR 0 2
17017: PPUSH
17018: LD_INT 3
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PPUSH
17035: CALL_OW 69
17039: PPUSH
17040: LD_VAR 0 2
17044: PPUSH
17045: CALL_OW 74
17049: PPUSH
17050: CALL_OW 115
// end ;
17054: GO 16981
17056: POP
17057: POP
// until not tmp ;
17058: LD_VAR 0 3
17062: NOT
17063: IFFALSE 16964
// end ;
17065: PPOPN 3
17067: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17068: LD_EXP 71
17072: PUSH
17073: LD_EXP 96
17077: AND
17078: IFFALSE 17132
17080: GO 17082
17082: DISABLE
// begin ToLua ( displayTroll(); ) ;
17083: LD_STRING displayTroll();
17085: PPUSH
17086: CALL_OW 559
// wait ( 3 3$00 ) ;
17090: LD_INT 6300
17092: PPUSH
17093: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17097: LD_STRING hideTroll();
17099: PPUSH
17100: CALL_OW 559
// wait ( 1 1$00 ) ;
17104: LD_INT 2100
17106: PPUSH
17107: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17111: LD_STRING displayTroll();
17113: PPUSH
17114: CALL_OW 559
// wait ( 1 1$00 ) ;
17118: LD_INT 2100
17120: PPUSH
17121: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17125: LD_STRING hideTroll();
17127: PPUSH
17128: CALL_OW 559
// end ;
17132: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17133: LD_EXP 71
17137: PUSH
17138: LD_EXP 97
17142: AND
17143: IFFALSE 17206
17145: GO 17147
17147: DISABLE
17148: LD_INT 0
17150: PPUSH
// begin p := 0 ;
17151: LD_ADDR_VAR 0 1
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
// repeat game_speed := 1 ;
17159: LD_ADDR_OWVAR 65
17163: PUSH
17164: LD_INT 1
17166: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17167: LD_INT 35
17169: PPUSH
17170: CALL_OW 67
// p := p + 1 ;
17174: LD_ADDR_VAR 0 1
17178: PUSH
17179: LD_VAR 0 1
17183: PUSH
17184: LD_INT 1
17186: PLUS
17187: ST_TO_ADDR
// until p >= 60 ;
17188: LD_VAR 0 1
17192: PUSH
17193: LD_INT 60
17195: GREATEREQUAL
17196: IFFALSE 17159
// game_speed := 4 ;
17198: LD_ADDR_OWVAR 65
17202: PUSH
17203: LD_INT 4
17205: ST_TO_ADDR
// end ;
17206: PPOPN 1
17208: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17209: LD_EXP 71
17213: PUSH
17214: LD_EXP 98
17218: AND
17219: IFFALSE 17365
17221: GO 17223
17223: DISABLE
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17228: LD_ADDR_VAR 0 1
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_OWVAR 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: PUSH
17248: LD_INT 30
17250: PUSH
17251: LD_INT 0
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 30
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: ST_TO_ADDR
// if not depot then
17282: LD_VAR 0 1
17286: NOT
17287: IFFALSE 17291
// exit ;
17289: GO 17365
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17291: LD_ADDR_VAR 0 2
17295: PUSH
17296: LD_VAR 0 1
17300: PUSH
17301: LD_INT 1
17303: PPUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 12
17313: ARRAY
17314: PPUSH
17315: CALL_OW 274
17319: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17320: LD_VAR 0 2
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_INT 0
17330: PPUSH
17331: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17335: LD_VAR 0 2
17339: PPUSH
17340: LD_INT 2
17342: PPUSH
17343: LD_INT 0
17345: PPUSH
17346: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17350: LD_VAR 0 2
17354: PPUSH
17355: LD_INT 3
17357: PPUSH
17358: LD_INT 0
17360: PPUSH
17361: CALL_OW 277
// end ;
17365: PPOPN 2
17367: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17368: LD_EXP 71
17372: PUSH
17373: LD_EXP 99
17377: AND
17378: IFFALSE 17475
17380: GO 17382
17382: DISABLE
17383: LD_INT 0
17385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17386: LD_ADDR_VAR 0 1
17390: PUSH
17391: LD_INT 22
17393: PUSH
17394: LD_OWVAR 2
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 21
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 3
17415: PUSH
17416: LD_INT 23
17418: PUSH
17419: LD_INT 0
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: PPUSH
17435: CALL_OW 69
17439: ST_TO_ADDR
// if not tmp then
17440: LD_VAR 0 1
17444: NOT
17445: IFFALSE 17449
// exit ;
17447: GO 17475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17449: LD_VAR 0 1
17453: PUSH
17454: LD_INT 1
17456: PPUSH
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 12
17466: ARRAY
17467: PPUSH
17468: LD_INT 200
17470: PPUSH
17471: CALL_OW 234
// end ;
17475: PPOPN 1
17477: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17478: LD_EXP 71
17482: PUSH
17483: LD_EXP 100
17487: AND
17488: IFFALSE 17567
17490: GO 17492
17492: DISABLE
17493: LD_INT 0
17495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17496: LD_ADDR_VAR 0 1
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_OWVAR 2
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 21
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PPUSH
17527: CALL_OW 69
17531: ST_TO_ADDR
// if not tmp then
17532: LD_VAR 0 1
17536: NOT
17537: IFFALSE 17541
// exit ;
17539: GO 17567
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17541: LD_VAR 0 1
17545: PUSH
17546: LD_INT 1
17548: PPUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 12
17558: ARRAY
17559: PPUSH
17560: LD_INT 60
17562: PPUSH
17563: CALL_OW 234
// end ;
17567: PPOPN 1
17569: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17570: LD_EXP 71
17574: PUSH
17575: LD_EXP 101
17579: AND
17580: IFFALSE 17679
17582: GO 17584
17584: DISABLE
17585: LD_INT 0
17587: PPUSH
17588: PPUSH
// begin enable ;
17589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17590: LD_ADDR_VAR 0 1
17594: PUSH
17595: LD_INT 22
17597: PUSH
17598: LD_OWVAR 2
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 61
17609: PUSH
17610: EMPTY
17611: LIST
17612: PUSH
17613: LD_INT 33
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 69
17632: ST_TO_ADDR
// if not tmp then
17633: LD_VAR 0 1
17637: NOT
17638: IFFALSE 17642
// exit ;
17640: GO 17679
// for i in tmp do
17642: LD_ADDR_VAR 0 2
17646: PUSH
17647: LD_VAR 0 1
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17677
// if IsControledBy ( i ) then
17655: LD_VAR 0 2
17659: PPUSH
17660: CALL_OW 312
17664: IFFALSE 17675
// ComUnlink ( i ) ;
17666: LD_VAR 0 2
17670: PPUSH
17671: CALL_OW 136
17675: GO 17652
17677: POP
17678: POP
// end ;
17679: PPOPN 2
17681: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17682: LD_EXP 71
17686: PUSH
17687: LD_EXP 102
17691: AND
17692: IFFALSE 17832
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
17700: PPUSH
// begin ToLua ( displayPowell(); ) ;
17701: LD_STRING displayPowell();
17703: PPUSH
17704: CALL_OW 559
// uc_side := 0 ;
17708: LD_ADDR_OWVAR 20
17712: PUSH
17713: LD_INT 0
17715: ST_TO_ADDR
// uc_nation := 2 ;
17716: LD_ADDR_OWVAR 21
17720: PUSH
17721: LD_INT 2
17723: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17724: LD_ADDR_OWVAR 37
17728: PUSH
17729: LD_INT 14
17731: ST_TO_ADDR
// vc_engine := engine_siberite ;
17732: LD_ADDR_OWVAR 39
17736: PUSH
17737: LD_INT 3
17739: ST_TO_ADDR
// vc_control := control_apeman ;
17740: LD_ADDR_OWVAR 38
17744: PUSH
17745: LD_INT 5
17747: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17748: LD_ADDR_OWVAR 40
17752: PUSH
17753: LD_INT 29
17755: ST_TO_ADDR
// un := CreateVehicle ;
17756: LD_ADDR_VAR 0 2
17760: PUSH
17761: CALL_OW 45
17765: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17766: LD_VAR 0 2
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17778: LD_INT 35
17780: PPUSH
17781: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17785: LD_VAR 0 2
17789: PPUSH
17790: LD_INT 22
17792: PUSH
17793: LD_OWVAR 2
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_VAR 0 2
17811: PPUSH
17812: CALL_OW 74
17816: PPUSH
17817: CALL_OW 115
// until IsDead ( un ) ;
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 301
17830: IFFALSE 17778
// end ;
17832: PPOPN 2
17834: END
// every 0 0$1 trigger StreamModeActive and sStu do
17835: LD_EXP 71
17839: PUSH
17840: LD_EXP 110
17844: AND
17845: IFFALSE 17861
17847: GO 17849
17849: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17850: LD_STRING displayStucuk();
17852: PPUSH
17853: CALL_OW 559
// ResetFog ;
17857: CALL_OW 335
// end ;
17861: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17862: LD_EXP 71
17866: PUSH
17867: LD_EXP 103
17871: AND
17872: IFFALSE 18013
17874: GO 17876
17876: DISABLE
17877: LD_INT 0
17879: PPUSH
17880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17881: LD_ADDR_VAR 0 2
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_OWVAR 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 21
17900: PUSH
17901: LD_INT 1
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PPUSH
17912: CALL_OW 69
17916: ST_TO_ADDR
// if not tmp then
17917: LD_VAR 0 2
17921: NOT
17922: IFFALSE 17926
// exit ;
17924: GO 18013
// un := tmp [ rand ( 1 , tmp ) ] ;
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_VAR 0 2
17935: PUSH
17936: LD_INT 1
17938: PPUSH
17939: LD_VAR 0 2
17943: PPUSH
17944: CALL_OW 12
17948: ARRAY
17949: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17950: LD_VAR 0 1
17954: PPUSH
17955: LD_INT 0
17957: PPUSH
17958: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_OWVAR 3
17971: PUSH
17972: LD_VAR 0 1
17976: DIFF
17977: PPUSH
17978: LD_VAR 0 1
17982: PPUSH
17983: CALL_OW 74
17987: PPUSH
17988: CALL_OW 115
// wait ( 0 0$20 ) ;
17992: LD_INT 700
17994: PPUSH
17995: CALL_OW 67
// SetSide ( un , your_side ) ;
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_OWVAR 2
18008: PPUSH
18009: CALL_OW 235
// end ;
18013: PPOPN 2
18015: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18016: LD_EXP 71
18020: PUSH
18021: LD_EXP 104
18025: AND
18026: IFFALSE 18132
18028: GO 18030
18030: DISABLE
18031: LD_INT 0
18033: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18034: LD_ADDR_VAR 0 1
18038: PUSH
18039: LD_INT 22
18041: PUSH
18042: LD_OWVAR 2
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: LD_INT 30
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 30
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: ST_TO_ADDR
// if not depot then
18088: LD_VAR 0 1
18092: NOT
18093: IFFALSE 18097
// exit ;
18095: GO 18132
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18097: LD_VAR 0 1
18101: PUSH
18102: LD_INT 1
18104: ARRAY
18105: PPUSH
18106: CALL_OW 250
18110: PPUSH
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: CALL_OW 251
18124: PPUSH
18125: LD_INT 70
18127: PPUSH
18128: CALL_OW 495
// end ;
18132: PPOPN 1
18134: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18135: LD_EXP 71
18139: PUSH
18140: LD_EXP 105
18144: AND
18145: IFFALSE 18356
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
18153: PPUSH
18154: PPUSH
18155: PPUSH
18156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18157: LD_ADDR_VAR 0 5
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_OWVAR 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PPUSH
18188: CALL_OW 69
18192: ST_TO_ADDR
// if not tmp then
18193: LD_VAR 0 5
18197: NOT
18198: IFFALSE 18202
// exit ;
18200: GO 18356
// for i in tmp do
18202: LD_ADDR_VAR 0 1
18206: PUSH
18207: LD_VAR 0 5
18211: PUSH
18212: FOR_IN
18213: IFFALSE 18354
// begin d := rand ( 0 , 5 ) ;
18215: LD_ADDR_VAR 0 4
18219: PUSH
18220: LD_INT 0
18222: PPUSH
18223: LD_INT 5
18225: PPUSH
18226: CALL_OW 12
18230: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18231: LD_ADDR_VAR 0 2
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 250
18245: PPUSH
18246: LD_VAR 0 4
18250: PPUSH
18251: LD_INT 3
18253: PPUSH
18254: LD_INT 12
18256: PPUSH
18257: CALL_OW 12
18261: PPUSH
18262: CALL_OW 272
18266: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18267: LD_ADDR_VAR 0 3
18271: PUSH
18272: LD_VAR 0 1
18276: PPUSH
18277: CALL_OW 251
18281: PPUSH
18282: LD_VAR 0 4
18286: PPUSH
18287: LD_INT 3
18289: PPUSH
18290: LD_INT 12
18292: PPUSH
18293: CALL_OW 12
18297: PPUSH
18298: CALL_OW 273
18302: ST_TO_ADDR
// if ValidHex ( x , y ) then
18303: LD_VAR 0 2
18307: PPUSH
18308: LD_VAR 0 3
18312: PPUSH
18313: CALL_OW 488
18317: IFFALSE 18352
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18319: LD_VAR 0 1
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: LD_VAR 0 3
18333: PPUSH
18334: LD_INT 3
18336: PPUSH
18337: LD_INT 6
18339: PPUSH
18340: CALL_OW 12
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 483
// end ;
18352: GO 18212
18354: POP
18355: POP
// end ;
18356: PPOPN 5
18358: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18359: LD_EXP 71
18363: PUSH
18364: LD_EXP 106
18368: AND
18369: IFFALSE 18463
18371: GO 18373
18373: DISABLE
18374: LD_INT 0
18376: PPUSH
18377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18378: LD_ADDR_VAR 0 2
18382: PUSH
18383: LD_INT 22
18385: PUSH
18386: LD_OWVAR 2
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 32
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 21
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: LIST
18419: PPUSH
18420: CALL_OW 69
18424: ST_TO_ADDR
// if not tmp then
18425: LD_VAR 0 2
18429: NOT
18430: IFFALSE 18434
// exit ;
18432: GO 18463
// for i in tmp do
18434: LD_ADDR_VAR 0 1
18438: PUSH
18439: LD_VAR 0 2
18443: PUSH
18444: FOR_IN
18445: IFFALSE 18461
// SetFuel ( i , 0 ) ;
18447: LD_VAR 0 1
18451: PPUSH
18452: LD_INT 0
18454: PPUSH
18455: CALL_OW 240
18459: GO 18444
18461: POP
18462: POP
// end ;
18463: PPOPN 2
18465: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18466: LD_EXP 71
18470: PUSH
18471: LD_EXP 107
18475: AND
18476: IFFALSE 18542
18478: GO 18480
18480: DISABLE
18481: LD_INT 0
18483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_INT 22
18491: PUSH
18492: LD_OWVAR 2
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 30
18503: PUSH
18504: LD_INT 29
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 69
18519: ST_TO_ADDR
// if not tmp then
18520: LD_VAR 0 1
18524: NOT
18525: IFFALSE 18529
// exit ;
18527: GO 18542
// DestroyUnit ( tmp [ 1 ] ) ;
18529: LD_VAR 0 1
18533: PUSH
18534: LD_INT 1
18536: ARRAY
18537: PPUSH
18538: CALL_OW 65
// end ;
18542: PPOPN 1
18544: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18545: LD_EXP 71
18549: PUSH
18550: LD_EXP 109
18554: AND
18555: IFFALSE 18684
18557: GO 18559
18559: DISABLE
18560: LD_INT 0
18562: PPUSH
// begin uc_side := 0 ;
18563: LD_ADDR_OWVAR 20
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
// uc_nation := nation_arabian ;
18571: LD_ADDR_OWVAR 21
18575: PUSH
18576: LD_INT 2
18578: ST_TO_ADDR
// hc_gallery :=  ;
18579: LD_ADDR_OWVAR 33
18583: PUSH
18584: LD_STRING 
18586: ST_TO_ADDR
// hc_name :=  ;
18587: LD_ADDR_OWVAR 26
18591: PUSH
18592: LD_STRING 
18594: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18595: LD_INT 1
18597: PPUSH
18598: LD_INT 11
18600: PPUSH
18601: LD_INT 10
18603: PPUSH
18604: CALL_OW 380
// un := CreateHuman ;
18608: LD_ADDR_VAR 0 1
18612: PUSH
18613: CALL_OW 44
18617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18618: LD_VAR 0 1
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18630: LD_INT 35
18632: PPUSH
18633: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18637: LD_VAR 0 1
18641: PPUSH
18642: LD_INT 22
18644: PUSH
18645: LD_OWVAR 2
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PPUSH
18654: CALL_OW 69
18658: PPUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL_OW 74
18668: PPUSH
18669: CALL_OW 115
// until IsDead ( un ) ;
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 301
18682: IFFALSE 18630
// end ;
18684: PPOPN 1
18686: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18687: LD_EXP 71
18691: PUSH
18692: LD_EXP 111
18696: AND
18697: IFFALSE 18709
18699: GO 18701
18701: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18702: LD_STRING earthquake(getX(game), 0, 32)
18704: PPUSH
18705: CALL_OW 559
18709: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18710: LD_EXP 71
18714: PUSH
18715: LD_EXP 112
18719: AND
18720: IFFALSE 18811
18722: GO 18724
18724: DISABLE
18725: LD_INT 0
18727: PPUSH
// begin enable ;
18728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18729: LD_ADDR_VAR 0 1
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_OWVAR 2
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 21
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 33
18758: PUSH
18759: LD_INT 3
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: ST_TO_ADDR
// if not tmp then
18776: LD_VAR 0 1
18780: NOT
18781: IFFALSE 18785
// exit ;
18783: GO 18811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18785: LD_VAR 0 1
18789: PUSH
18790: LD_INT 1
18792: PPUSH
18793: LD_VAR 0 1
18797: PPUSH
18798: CALL_OW 12
18802: ARRAY
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 234
// end ;
18811: PPOPN 1
18813: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18814: LD_EXP 71
18818: PUSH
18819: LD_EXP 113
18823: AND
18824: IFFALSE 18965
18826: GO 18828
18828: DISABLE
18829: LD_INT 0
18831: PPUSH
18832: PPUSH
18833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18834: LD_ADDR_VAR 0 3
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_OWVAR 2
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 25
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PPUSH
18865: CALL_OW 69
18869: ST_TO_ADDR
// if not tmp then
18870: LD_VAR 0 3
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 18965
// un := tmp [ rand ( 1 , tmp ) ] ;
18879: LD_ADDR_VAR 0 2
18883: PUSH
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 1
18891: PPUSH
18892: LD_VAR 0 3
18896: PPUSH
18897: CALL_OW 12
18901: ARRAY
18902: ST_TO_ADDR
// if Crawls ( un ) then
18903: LD_VAR 0 2
18907: PPUSH
18908: CALL_OW 318
18912: IFFALSE 18923
// ComWalk ( un ) ;
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 9
18930: PPUSH
18931: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18935: LD_INT 28
18937: PPUSH
18938: LD_OWVAR 2
18942: PPUSH
18943: LD_INT 2
18945: PPUSH
18946: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18950: LD_INT 29
18952: PPUSH
18953: LD_OWVAR 2
18957: PPUSH
18958: LD_INT 2
18960: PPUSH
18961: CALL_OW 322
// end ;
18965: PPOPN 3
18967: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18968: LD_EXP 71
18972: PUSH
18973: LD_EXP 114
18977: AND
18978: IFFALSE 19089
18980: GO 18982
18982: DISABLE
18983: LD_INT 0
18985: PPUSH
18986: PPUSH
18987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: LD_INT 22
18995: PUSH
18996: LD_OWVAR 2
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 25
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PPUSH
19019: CALL_OW 69
19023: ST_TO_ADDR
// if not tmp then
19024: LD_VAR 0 3
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19089
// un := tmp [ rand ( 1 , tmp ) ] ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_VAR 0 3
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_VAR 0 3
19050: PPUSH
19051: CALL_OW 12
19055: ARRAY
19056: ST_TO_ADDR
// if Crawls ( un ) then
19057: LD_VAR 0 2
19061: PPUSH
19062: CALL_OW 318
19066: IFFALSE 19077
// ComWalk ( un ) ;
19068: LD_VAR 0 2
19072: PPUSH
19073: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19077: LD_VAR 0 2
19081: PPUSH
19082: LD_INT 8
19084: PPUSH
19085: CALL_OW 336
// end ;
19089: PPOPN 3
19091: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19092: LD_EXP 71
19096: PUSH
19097: LD_EXP 115
19101: AND
19102: IFFALSE 19246
19104: GO 19106
19106: DISABLE
19107: LD_INT 0
19109: PPUSH
19110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 34
19143: PUSH
19144: LD_INT 12
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 34
19153: PUSH
19154: LD_INT 51
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 34
19163: PUSH
19164: LD_INT 32
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 69
19186: ST_TO_ADDR
// if not tmp then
19187: LD_VAR 0 2
19191: NOT
19192: IFFALSE 19196
// exit ;
19194: GO 19246
// for i in tmp do
19196: LD_ADDR_VAR 0 1
19200: PUSH
19201: LD_VAR 0 2
19205: PUSH
19206: FOR_IN
19207: IFFALSE 19244
// if GetCargo ( i , mat_artifact ) = 0 then
19209: LD_VAR 0 1
19213: PPUSH
19214: LD_INT 4
19216: PPUSH
19217: CALL_OW 289
19221: PUSH
19222: LD_INT 0
19224: EQUAL
19225: IFFALSE 19242
// SetCargo ( i , mat_siberit , 100 ) ;
19227: LD_VAR 0 1
19231: PPUSH
19232: LD_INT 3
19234: PPUSH
19235: LD_INT 100
19237: PPUSH
19238: CALL_OW 290
19242: GO 19206
19244: POP
19245: POP
// end ;
19246: PPOPN 2
19248: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19249: LD_EXP 71
19253: PUSH
19254: LD_EXP 116
19258: AND
19259: IFFALSE 19442
19261: GO 19263
19263: DISABLE
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19268: LD_ADDR_VAR 0 2
19272: PUSH
19273: LD_INT 22
19275: PUSH
19276: LD_OWVAR 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: ST_TO_ADDR
// if not tmp then
19290: LD_VAR 0 2
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19442
// for i := 1 to 2 do
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: DOUBLE
19305: LD_INT 1
19307: DEC
19308: ST_TO_ADDR
19309: LD_INT 2
19311: PUSH
19312: FOR_TO
19313: IFFALSE 19440
// begin uc_side := your_side ;
19315: LD_ADDR_OWVAR 20
19319: PUSH
19320: LD_OWVAR 2
19324: ST_TO_ADDR
// uc_nation := nation_american ;
19325: LD_ADDR_OWVAR 21
19329: PUSH
19330: LD_INT 1
19332: ST_TO_ADDR
// vc_chassis := us_morphling ;
19333: LD_ADDR_OWVAR 37
19337: PUSH
19338: LD_INT 5
19340: ST_TO_ADDR
// vc_engine := engine_siberite ;
19341: LD_ADDR_OWVAR 39
19345: PUSH
19346: LD_INT 3
19348: ST_TO_ADDR
// vc_control := control_computer ;
19349: LD_ADDR_OWVAR 38
19353: PUSH
19354: LD_INT 3
19356: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19357: LD_ADDR_OWVAR 40
19361: PUSH
19362: LD_INT 10
19364: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19365: LD_VAR 0 2
19369: PUSH
19370: LD_INT 1
19372: ARRAY
19373: PPUSH
19374: CALL_OW 310
19378: NOT
19379: IFFALSE 19426
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19381: CALL_OW 45
19385: PPUSH
19386: LD_VAR 0 2
19390: PUSH
19391: LD_INT 1
19393: ARRAY
19394: PPUSH
19395: CALL_OW 250
19399: PPUSH
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: CALL_OW 251
19413: PPUSH
19414: LD_INT 12
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: CALL_OW 50
19424: GO 19438
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19426: CALL_OW 45
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 51
// end ;
19438: GO 19312
19440: POP
19441: POP
// end ;
19442: PPOPN 2
19444: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19445: LD_EXP 71
19449: PUSH
19450: LD_EXP 117
19454: AND
19455: IFFALSE 19677
19457: GO 19459
19459: DISABLE
19460: LD_INT 0
19462: PPUSH
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19468: LD_ADDR_VAR 0 6
19472: PUSH
19473: LD_INT 22
19475: PUSH
19476: LD_OWVAR 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 3
19497: PUSH
19498: LD_INT 23
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 69
19521: ST_TO_ADDR
// if not tmp then
19522: LD_VAR 0 6
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19677
// s1 := rand ( 1 , 4 ) ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_INT 1
19538: PPUSH
19539: LD_INT 4
19541: PPUSH
19542: CALL_OW 12
19546: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19547: LD_ADDR_VAR 0 4
19551: PUSH
19552: LD_VAR 0 6
19556: PUSH
19557: LD_INT 1
19559: ARRAY
19560: PPUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: CALL_OW 259
19570: ST_TO_ADDR
// if s1 = 1 then
19571: LD_VAR 0 2
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: IFFALSE 19599
// s2 := rand ( 2 , 4 ) else
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_INT 2
19588: PPUSH
19589: LD_INT 4
19591: PPUSH
19592: CALL_OW 12
19596: ST_TO_ADDR
19597: GO 19607
// s2 := 1 ;
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19607: LD_ADDR_VAR 0 5
19611: PUSH
19612: LD_VAR 0 6
19616: PUSH
19617: LD_INT 1
19619: ARRAY
19620: PPUSH
19621: LD_VAR 0 3
19625: PPUSH
19626: CALL_OW 259
19630: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19631: LD_VAR 0 6
19635: PUSH
19636: LD_INT 1
19638: ARRAY
19639: PPUSH
19640: LD_VAR 0 2
19644: PPUSH
19645: LD_VAR 0 5
19649: PPUSH
19650: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19654: LD_VAR 0 6
19658: PUSH
19659: LD_INT 1
19661: ARRAY
19662: PPUSH
19663: LD_VAR 0 3
19667: PPUSH
19668: LD_VAR 0 4
19672: PPUSH
19673: CALL_OW 237
// end ;
19677: PPOPN 6
19679: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19680: LD_EXP 71
19684: PUSH
19685: LD_EXP 118
19689: AND
19690: IFFALSE 19769
19692: GO 19694
19694: DISABLE
19695: LD_INT 0
19697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19698: LD_ADDR_VAR 0 1
19702: PUSH
19703: LD_INT 22
19705: PUSH
19706: LD_OWVAR 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 30
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PPUSH
19729: CALL_OW 69
19733: ST_TO_ADDR
// if not tmp then
19734: LD_VAR 0 1
19738: NOT
19739: IFFALSE 19743
// exit ;
19741: GO 19769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19743: LD_VAR 0 1
19747: PUSH
19748: LD_INT 1
19750: PPUSH
19751: LD_VAR 0 1
19755: PPUSH
19756: CALL_OW 12
19760: ARRAY
19761: PPUSH
19762: LD_INT 1
19764: PPUSH
19765: CALL_OW 234
// end ;
19769: PPOPN 1
19771: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19772: LD_EXP 71
19776: PUSH
19777: LD_EXP 119
19781: AND
19782: IFFALSE 19894
19784: GO 19786
19786: DISABLE
19787: LD_INT 0
19789: PPUSH
19790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19791: LD_ADDR_VAR 0 2
19795: PUSH
19796: LD_INT 22
19798: PUSH
19799: LD_OWVAR 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: LD_INT 30
19813: PUSH
19814: LD_INT 27
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 30
19823: PUSH
19824: LD_INT 26
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 30
19833: PUSH
19834: LD_INT 28
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: ST_TO_ADDR
// if not tmp then
19856: LD_VAR 0 2
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 19894
// for i in tmp do
19865: LD_ADDR_VAR 0 1
19869: PUSH
19870: LD_VAR 0 2
19874: PUSH
19875: FOR_IN
19876: IFFALSE 19892
// SetLives ( i , 1 ) ;
19878: LD_VAR 0 1
19882: PPUSH
19883: LD_INT 1
19885: PPUSH
19886: CALL_OW 234
19890: GO 19875
19892: POP
19893: POP
// end ;
19894: PPOPN 2
19896: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19897: LD_EXP 71
19901: PUSH
19902: LD_EXP 120
19906: AND
19907: IFFALSE 20194
19909: GO 19911
19911: DISABLE
19912: LD_INT 0
19914: PPUSH
19915: PPUSH
19916: PPUSH
// begin i := rand ( 1 , 7 ) ;
19917: LD_ADDR_VAR 0 1
19921: PUSH
19922: LD_INT 1
19924: PPUSH
19925: LD_INT 7
19927: PPUSH
19928: CALL_OW 12
19932: ST_TO_ADDR
// case i of 1 :
19933: LD_VAR 0 1
19937: PUSH
19938: LD_INT 1
19940: DOUBLE
19941: EQUAL
19942: IFTRUE 19946
19944: GO 19956
19946: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19947: LD_STRING earthquake(getX(game), 0, 32)
19949: PPUSH
19950: CALL_OW 559
19954: GO 20194
19956: LD_INT 2
19958: DOUBLE
19959: EQUAL
19960: IFTRUE 19964
19962: GO 19978
19964: POP
// begin ToLua ( displayStucuk(); ) ;
19965: LD_STRING displayStucuk();
19967: PPUSH
19968: CALL_OW 559
// ResetFog ;
19972: CALL_OW 335
// end ; 3 :
19976: GO 20194
19978: LD_INT 3
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20090
19986: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19987: LD_ADDR_VAR 0 2
19991: PUSH
19992: LD_INT 22
19994: PUSH
19995: LD_OWVAR 2
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 25
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PPUSH
20018: CALL_OW 69
20022: ST_TO_ADDR
// if not tmp then
20023: LD_VAR 0 2
20027: NOT
20028: IFFALSE 20032
// exit ;
20030: GO 20194
// un := tmp [ rand ( 1 , tmp ) ] ;
20032: LD_ADDR_VAR 0 3
20036: PUSH
20037: LD_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: PPUSH
20045: LD_VAR 0 2
20049: PPUSH
20050: CALL_OW 12
20054: ARRAY
20055: ST_TO_ADDR
// if Crawls ( un ) then
20056: LD_VAR 0 3
20060: PPUSH
20061: CALL_OW 318
20065: IFFALSE 20076
// ComWalk ( un ) ;
20067: LD_VAR 0 3
20071: PPUSH
20072: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20076: LD_VAR 0 3
20080: PPUSH
20081: LD_INT 8
20083: PPUSH
20084: CALL_OW 336
// end ; 4 :
20088: GO 20194
20090: LD_INT 4
20092: DOUBLE
20093: EQUAL
20094: IFTRUE 20098
20096: GO 20172
20098: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20099: LD_ADDR_VAR 0 2
20103: PUSH
20104: LD_INT 22
20106: PUSH
20107: LD_OWVAR 2
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 30
20118: PUSH
20119: LD_INT 29
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PPUSH
20130: CALL_OW 69
20134: ST_TO_ADDR
// if not tmp then
20135: LD_VAR 0 2
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20194
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20144: LD_VAR 0 2
20148: PUSH
20149: LD_INT 1
20151: ARRAY
20152: PPUSH
20153: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20157: LD_VAR 0 2
20161: PUSH
20162: LD_INT 1
20164: ARRAY
20165: PPUSH
20166: CALL_OW 65
// end ; 5 .. 7 :
20170: GO 20194
20172: LD_INT 5
20174: DOUBLE
20175: GREATEREQUAL
20176: IFFALSE 20184
20178: LD_INT 7
20180: DOUBLE
20181: LESSEQUAL
20182: IFTRUE 20186
20184: GO 20193
20186: POP
// StreamSibBomb ; end ;
20187: CALL 16431 0 0
20191: GO 20194
20193: POP
// end ;
20194: PPOPN 3
20196: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20197: LD_EXP 71
20201: PUSH
20202: LD_EXP 121
20206: AND
20207: IFFALSE 20363
20209: GO 20211
20211: DISABLE
20212: LD_INT 0
20214: PPUSH
20215: PPUSH
20216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20217: LD_ADDR_VAR 0 2
20221: PUSH
20222: LD_INT 81
20224: PUSH
20225: LD_OWVAR 2
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: LD_INT 21
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 21
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PPUSH
20266: CALL_OW 69
20270: ST_TO_ADDR
// if not tmp then
20271: LD_VAR 0 2
20275: NOT
20276: IFFALSE 20280
// exit ;
20278: GO 20363
// p := 0 ;
20280: LD_ADDR_VAR 0 3
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20288: LD_INT 35
20290: PPUSH
20291: CALL_OW 67
// p := p + 1 ;
20295: LD_ADDR_VAR 0 3
20299: PUSH
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 1
20307: PLUS
20308: ST_TO_ADDR
// for i in tmp do
20309: LD_ADDR_VAR 0 1
20313: PUSH
20314: LD_VAR 0 2
20318: PUSH
20319: FOR_IN
20320: IFFALSE 20351
// if GetLives ( i ) < 1000 then
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 256
20331: PUSH
20332: LD_INT 1000
20334: LESS
20335: IFFALSE 20349
// SetLives ( i , 1000 ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: LD_INT 1000
20344: PPUSH
20345: CALL_OW 234
20349: GO 20319
20351: POP
20352: POP
// until p > 20 ;
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 20
20360: GREATER
20361: IFFALSE 20288
// end ;
20363: PPOPN 3
20365: END
// every 0 0$1 trigger StreamModeActive and sTime do
20366: LD_EXP 71
20370: PUSH
20371: LD_EXP 122
20375: AND
20376: IFFALSE 20411
20378: GO 20380
20380: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20381: LD_INT 28
20383: PPUSH
20384: LD_OWVAR 2
20388: PPUSH
20389: LD_INT 2
20391: PPUSH
20392: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20396: LD_INT 30
20398: PPUSH
20399: LD_OWVAR 2
20403: PPUSH
20404: LD_INT 2
20406: PPUSH
20407: CALL_OW 322
// end ;
20411: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20412: LD_EXP 71
20416: PUSH
20417: LD_EXP 123
20421: AND
20422: IFFALSE 20543
20424: GO 20426
20426: DISABLE
20427: LD_INT 0
20429: PPUSH
20430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20431: LD_ADDR_VAR 0 2
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_OWVAR 2
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 21
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 3
20460: PUSH
20461: LD_INT 23
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 69
20484: ST_TO_ADDR
// if not tmp then
20485: LD_VAR 0 2
20489: NOT
20490: IFFALSE 20494
// exit ;
20492: GO 20543
// for i in tmp do
20494: LD_ADDR_VAR 0 1
20498: PUSH
20499: LD_VAR 0 2
20503: PUSH
20504: FOR_IN
20505: IFFALSE 20541
// begin if Crawls ( i ) then
20507: LD_VAR 0 1
20511: PPUSH
20512: CALL_OW 318
20516: IFFALSE 20527
// ComWalk ( i ) ;
20518: LD_VAR 0 1
20522: PPUSH
20523: CALL_OW 138
// SetClass ( i , 2 ) ;
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_INT 2
20534: PPUSH
20535: CALL_OW 336
// end ;
20539: GO 20504
20541: POP
20542: POP
// end ;
20543: PPOPN 2
20545: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20546: LD_EXP 71
20550: PUSH
20551: LD_EXP 124
20555: AND
20556: IFFALSE 20844
20558: GO 20560
20560: DISABLE
20561: LD_INT 0
20563: PPUSH
20564: PPUSH
20565: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20566: LD_OWVAR 2
20570: PPUSH
20571: LD_INT 9
20573: PPUSH
20574: LD_INT 1
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20584: LD_INT 9
20586: PPUSH
20587: LD_OWVAR 2
20591: PPUSH
20592: CALL_OW 343
// uc_side := 9 ;
20596: LD_ADDR_OWVAR 20
20600: PUSH
20601: LD_INT 9
20603: ST_TO_ADDR
// uc_nation := 2 ;
20604: LD_ADDR_OWVAR 21
20608: PUSH
20609: LD_INT 2
20611: ST_TO_ADDR
// hc_name := Dark Warrior ;
20612: LD_ADDR_OWVAR 26
20616: PUSH
20617: LD_STRING Dark Warrior
20619: ST_TO_ADDR
// hc_gallery :=  ;
20620: LD_ADDR_OWVAR 33
20624: PUSH
20625: LD_STRING 
20627: ST_TO_ADDR
// hc_noskilllimit := true ;
20628: LD_ADDR_OWVAR 76
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20636: LD_ADDR_OWVAR 31
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: LD_INT 30
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: LD_INT 30
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: ST_TO_ADDR
// un := CreateHuman ;
20659: LD_ADDR_VAR 0 3
20663: PUSH
20664: CALL_OW 44
20668: ST_TO_ADDR
// hc_noskilllimit := false ;
20669: LD_ADDR_OWVAR 76
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20677: LD_VAR 0 3
20681: PPUSH
20682: LD_INT 1
20684: PPUSH
20685: CALL_OW 51
// ToLua ( playRanger() ) ;
20689: LD_STRING playRanger()
20691: PPUSH
20692: CALL_OW 559
// p := 0 ;
20696: LD_ADDR_VAR 0 2
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20704: LD_INT 35
20706: PPUSH
20707: CALL_OW 67
// p := p + 1 ;
20711: LD_ADDR_VAR 0 2
20715: PUSH
20716: LD_VAR 0 2
20720: PUSH
20721: LD_INT 1
20723: PLUS
20724: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20725: LD_VAR 0 3
20729: PPUSH
20730: CALL_OW 256
20734: PUSH
20735: LD_INT 1000
20737: LESS
20738: IFFALSE 20752
// SetLives ( un , 1000 ) ;
20740: LD_VAR 0 3
20744: PPUSH
20745: LD_INT 1000
20747: PPUSH
20748: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20752: LD_VAR 0 3
20756: PPUSH
20757: LD_INT 81
20759: PUSH
20760: LD_OWVAR 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 91
20771: PUSH
20772: LD_VAR 0 3
20776: PUSH
20777: LD_INT 30
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PPUSH
20789: CALL_OW 69
20793: PPUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: CALL_OW 74
20803: PPUSH
20804: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20808: LD_VAR 0 2
20812: PUSH
20813: LD_INT 80
20815: GREATER
20816: PUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: CALL_OW 301
20826: OR
20827: IFFALSE 20704
// if un then
20829: LD_VAR 0 3
20833: IFFALSE 20844
// RemoveUnit ( un ) ;
20835: LD_VAR 0 3
20839: PPUSH
20840: CALL_OW 64
// end ;
20844: PPOPN 3
20846: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20847: LD_EXP 125
20851: IFFALSE 20967
20853: GO 20855
20855: DISABLE
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20861: LD_ADDR_VAR 0 2
20865: PUSH
20866: LD_INT 81
20868: PUSH
20869: LD_OWVAR 2
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 21
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20897: LD_STRING playComputer()
20899: PPUSH
20900: CALL_OW 559
// if not tmp then
20904: LD_VAR 0 2
20908: NOT
20909: IFFALSE 20913
// exit ;
20911: GO 20967
// for i in tmp do
20913: LD_ADDR_VAR 0 1
20917: PUSH
20918: LD_VAR 0 2
20922: PUSH
20923: FOR_IN
20924: IFFALSE 20965
// for j := 1 to 4 do
20926: LD_ADDR_VAR 0 3
20930: PUSH
20931: DOUBLE
20932: LD_INT 1
20934: DEC
20935: ST_TO_ADDR
20936: LD_INT 4
20938: PUSH
20939: FOR_TO
20940: IFFALSE 20961
// SetSkill ( i , j , 10 ) ;
20942: LD_VAR 0 1
20946: PPUSH
20947: LD_VAR 0 3
20951: PPUSH
20952: LD_INT 10
20954: PPUSH
20955: CALL_OW 237
20959: GO 20939
20961: POP
20962: POP
20963: GO 20923
20965: POP
20966: POP
// end ;
20967: PPOPN 3
20969: END
// every 0 0$1 trigger s30 do var i , tmp ;
20970: LD_EXP 126
20974: IFFALSE 21043
20976: GO 20978
20978: DISABLE
20979: LD_INT 0
20981: PPUSH
20982: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20983: LD_ADDR_VAR 0 2
20987: PUSH
20988: LD_INT 22
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL_OW 69
21004: ST_TO_ADDR
// if not tmp then
21005: LD_VAR 0 2
21009: NOT
21010: IFFALSE 21014
// exit ;
21012: GO 21043
// for i in tmp do
21014: LD_ADDR_VAR 0 1
21018: PUSH
21019: LD_VAR 0 2
21023: PUSH
21024: FOR_IN
21025: IFFALSE 21041
// SetLives ( i , 300 ) ;
21027: LD_VAR 0 1
21031: PPUSH
21032: LD_INT 300
21034: PPUSH
21035: CALL_OW 234
21039: GO 21024
21041: POP
21042: POP
// end ;
21043: PPOPN 2
21045: END
// every 0 0$1 trigger s60 do var i , tmp ;
21046: LD_EXP 127
21050: IFFALSE 21119
21052: GO 21054
21054: DISABLE
21055: LD_INT 0
21057: PPUSH
21058: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_OWVAR 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 69
21080: ST_TO_ADDR
// if not tmp then
21081: LD_VAR 0 2
21085: NOT
21086: IFFALSE 21090
// exit ;
21088: GO 21119
// for i in tmp do
21090: LD_ADDR_VAR 0 1
21094: PUSH
21095: LD_VAR 0 2
21099: PUSH
21100: FOR_IN
21101: IFFALSE 21117
// SetLives ( i , 600 ) ;
21103: LD_VAR 0 1
21107: PPUSH
21108: LD_INT 600
21110: PPUSH
21111: CALL_OW 234
21115: GO 21100
21117: POP
21118: POP
// end ;
21119: PPOPN 2
21121: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21122: LD_INT 0
21124: PPUSH
// case cmd of 301 :
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 301
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21170
21138: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21139: LD_VAR 0 6
21143: PPUSH
21144: LD_VAR 0 7
21148: PPUSH
21149: LD_VAR 0 8
21153: PPUSH
21154: LD_VAR 0 4
21158: PPUSH
21159: LD_VAR 0 5
21163: PPUSH
21164: CALL 22371 0 5
21168: GO 21291
21170: LD_INT 302
21172: DOUBLE
21173: EQUAL
21174: IFTRUE 21178
21176: GO 21215
21178: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21179: LD_VAR 0 6
21183: PPUSH
21184: LD_VAR 0 7
21188: PPUSH
21189: LD_VAR 0 8
21193: PPUSH
21194: LD_VAR 0 9
21198: PPUSH
21199: LD_VAR 0 4
21203: PPUSH
21204: LD_VAR 0 5
21208: PPUSH
21209: CALL 22462 0 6
21213: GO 21291
21215: LD_INT 303
21217: DOUBLE
21218: EQUAL
21219: IFTRUE 21223
21221: GO 21260
21223: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21224: LD_VAR 0 6
21228: PPUSH
21229: LD_VAR 0 7
21233: PPUSH
21234: LD_VAR 0 8
21238: PPUSH
21239: LD_VAR 0 9
21243: PPUSH
21244: LD_VAR 0 4
21248: PPUSH
21249: LD_VAR 0 5
21253: PPUSH
21254: CALL 21296 0 6
21258: GO 21291
21260: LD_INT 304
21262: DOUBLE
21263: EQUAL
21264: IFTRUE 21268
21266: GO 21290
21268: POP
// hHackTeleport ( unit , x , y ) ; end ;
21269: LD_VAR 0 2
21273: PPUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: CALL 23055 0 3
21288: GO 21291
21290: POP
// end ;
21291: LD_VAR 0 12
21295: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21300: LD_VAR 0 1
21304: PUSH
21305: LD_INT 1
21307: LESS
21308: PUSH
21309: LD_VAR 0 1
21313: PUSH
21314: LD_INT 3
21316: GREATER
21317: OR
21318: PUSH
21319: LD_VAR 0 5
21323: PPUSH
21324: LD_VAR 0 6
21328: PPUSH
21329: CALL_OW 428
21333: OR
21334: IFFALSE 21338
// exit ;
21336: GO 22058
// uc_side := your_side ;
21338: LD_ADDR_OWVAR 20
21342: PUSH
21343: LD_OWVAR 2
21347: ST_TO_ADDR
// uc_nation := nation ;
21348: LD_ADDR_OWVAR 21
21352: PUSH
21353: LD_VAR 0 1
21357: ST_TO_ADDR
// bc_level = 1 ;
21358: LD_ADDR_OWVAR 43
21362: PUSH
21363: LD_INT 1
21365: ST_TO_ADDR
// case btype of 1 :
21366: LD_VAR 0 2
21370: PUSH
21371: LD_INT 1
21373: DOUBLE
21374: EQUAL
21375: IFTRUE 21379
21377: GO 21390
21379: POP
// bc_type := b_depot ; 2 :
21380: LD_ADDR_OWVAR 42
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
21388: GO 22002
21390: LD_INT 2
21392: DOUBLE
21393: EQUAL
21394: IFTRUE 21398
21396: GO 21409
21398: POP
// bc_type := b_warehouse ; 3 :
21399: LD_ADDR_OWVAR 42
21403: PUSH
21404: LD_INT 1
21406: ST_TO_ADDR
21407: GO 22002
21409: LD_INT 3
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21428
21417: POP
// bc_type := b_lab ; 4 .. 9 :
21418: LD_ADDR_OWVAR 42
21422: PUSH
21423: LD_INT 6
21425: ST_TO_ADDR
21426: GO 22002
21428: LD_INT 4
21430: DOUBLE
21431: GREATEREQUAL
21432: IFFALSE 21440
21434: LD_INT 9
21436: DOUBLE
21437: LESSEQUAL
21438: IFTRUE 21442
21440: GO 21494
21442: POP
// begin bc_type := b_lab_half ;
21443: LD_ADDR_OWVAR 42
21447: PUSH
21448: LD_INT 7
21450: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21451: LD_ADDR_OWVAR 44
21455: PUSH
21456: LD_INT 10
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: LD_INT 12
21464: PUSH
21465: LD_INT 15
21467: PUSH
21468: LD_INT 14
21470: PUSH
21471: LD_INT 13
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_INT 3
21489: MINUS
21490: ARRAY
21491: ST_TO_ADDR
// end ; 10 .. 13 :
21492: GO 22002
21494: LD_INT 10
21496: DOUBLE
21497: GREATEREQUAL
21498: IFFALSE 21506
21500: LD_INT 13
21502: DOUBLE
21503: LESSEQUAL
21504: IFTRUE 21508
21506: GO 21585
21508: POP
// begin bc_type := b_lab_full ;
21509: LD_ADDR_OWVAR 42
21513: PUSH
21514: LD_INT 8
21516: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21517: LD_ADDR_OWVAR 44
21521: PUSH
21522: LD_INT 10
21524: PUSH
21525: LD_INT 12
21527: PUSH
21528: LD_INT 14
21530: PUSH
21531: LD_INT 13
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: PUSH
21540: LD_VAR 0 2
21544: PUSH
21545: LD_INT 9
21547: MINUS
21548: ARRAY
21549: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21550: LD_ADDR_OWVAR 45
21554: PUSH
21555: LD_INT 11
21557: PUSH
21558: LD_INT 15
21560: PUSH
21561: LD_INT 12
21563: PUSH
21564: LD_INT 15
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: PUSH
21573: LD_VAR 0 2
21577: PUSH
21578: LD_INT 9
21580: MINUS
21581: ARRAY
21582: ST_TO_ADDR
// end ; 14 :
21583: GO 22002
21585: LD_INT 14
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21604
21593: POP
// bc_type := b_workshop ; 15 :
21594: LD_ADDR_OWVAR 42
21598: PUSH
21599: LD_INT 2
21601: ST_TO_ADDR
21602: GO 22002
21604: LD_INT 15
21606: DOUBLE
21607: EQUAL
21608: IFTRUE 21612
21610: GO 21623
21612: POP
// bc_type := b_factory ; 16 :
21613: LD_ADDR_OWVAR 42
21617: PUSH
21618: LD_INT 3
21620: ST_TO_ADDR
21621: GO 22002
21623: LD_INT 16
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21642
21631: POP
// bc_type := b_ext_gun ; 17 :
21632: LD_ADDR_OWVAR 42
21636: PUSH
21637: LD_INT 17
21639: ST_TO_ADDR
21640: GO 22002
21642: LD_INT 17
21644: DOUBLE
21645: EQUAL
21646: IFTRUE 21650
21648: GO 21678
21650: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21651: LD_ADDR_OWVAR 42
21655: PUSH
21656: LD_INT 19
21658: PUSH
21659: LD_INT 23
21661: PUSH
21662: LD_INT 19
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: LIST
21669: PUSH
21670: LD_VAR 0 1
21674: ARRAY
21675: ST_TO_ADDR
21676: GO 22002
21678: LD_INT 18
21680: DOUBLE
21681: EQUAL
21682: IFTRUE 21686
21684: GO 21697
21686: POP
// bc_type := b_ext_radar ; 19 :
21687: LD_ADDR_OWVAR 42
21691: PUSH
21692: LD_INT 20
21694: ST_TO_ADDR
21695: GO 22002
21697: LD_INT 19
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21716
21705: POP
// bc_type := b_ext_radio ; 20 :
21706: LD_ADDR_OWVAR 42
21710: PUSH
21711: LD_INT 22
21713: ST_TO_ADDR
21714: GO 22002
21716: LD_INT 20
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21735
21724: POP
// bc_type := b_ext_siberium ; 21 :
21725: LD_ADDR_OWVAR 42
21729: PUSH
21730: LD_INT 21
21732: ST_TO_ADDR
21733: GO 22002
21735: LD_INT 21
21737: DOUBLE
21738: EQUAL
21739: IFTRUE 21743
21741: GO 21754
21743: POP
// bc_type := b_ext_computer ; 22 :
21744: LD_ADDR_OWVAR 42
21748: PUSH
21749: LD_INT 24
21751: ST_TO_ADDR
21752: GO 22002
21754: LD_INT 22
21756: DOUBLE
21757: EQUAL
21758: IFTRUE 21762
21760: GO 21773
21762: POP
// bc_type := b_ext_track ; 23 :
21763: LD_ADDR_OWVAR 42
21767: PUSH
21768: LD_INT 16
21770: ST_TO_ADDR
21771: GO 22002
21773: LD_INT 23
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21792
21781: POP
// bc_type := b_ext_laser ; 24 :
21782: LD_ADDR_OWVAR 42
21786: PUSH
21787: LD_INT 25
21789: ST_TO_ADDR
21790: GO 22002
21792: LD_INT 24
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21811
21800: POP
// bc_type := b_control_tower ; 25 :
21801: LD_ADDR_OWVAR 42
21805: PUSH
21806: LD_INT 36
21808: ST_TO_ADDR
21809: GO 22002
21811: LD_INT 25
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21830
21819: POP
// bc_type := b_breastwork ; 26 :
21820: LD_ADDR_OWVAR 42
21824: PUSH
21825: LD_INT 31
21827: ST_TO_ADDR
21828: GO 22002
21830: LD_INT 26
21832: DOUBLE
21833: EQUAL
21834: IFTRUE 21838
21836: GO 21849
21838: POP
// bc_type := b_bunker ; 27 :
21839: LD_ADDR_OWVAR 42
21843: PUSH
21844: LD_INT 32
21846: ST_TO_ADDR
21847: GO 22002
21849: LD_INT 27
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21868
21857: POP
// bc_type := b_turret ; 28 :
21858: LD_ADDR_OWVAR 42
21862: PUSH
21863: LD_INT 33
21865: ST_TO_ADDR
21866: GO 22002
21868: LD_INT 28
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 21887
21876: POP
// bc_type := b_armoury ; 29 :
21877: LD_ADDR_OWVAR 42
21881: PUSH
21882: LD_INT 4
21884: ST_TO_ADDR
21885: GO 22002
21887: LD_INT 29
21889: DOUBLE
21890: EQUAL
21891: IFTRUE 21895
21893: GO 21906
21895: POP
// bc_type := b_barracks ; 30 :
21896: LD_ADDR_OWVAR 42
21900: PUSH
21901: LD_INT 5
21903: ST_TO_ADDR
21904: GO 22002
21906: LD_INT 30
21908: DOUBLE
21909: EQUAL
21910: IFTRUE 21914
21912: GO 21925
21914: POP
// bc_type := b_solar_power ; 31 :
21915: LD_ADDR_OWVAR 42
21919: PUSH
21920: LD_INT 27
21922: ST_TO_ADDR
21923: GO 22002
21925: LD_INT 31
21927: DOUBLE
21928: EQUAL
21929: IFTRUE 21933
21931: GO 21944
21933: POP
// bc_type := b_oil_power ; 32 :
21934: LD_ADDR_OWVAR 42
21938: PUSH
21939: LD_INT 26
21941: ST_TO_ADDR
21942: GO 22002
21944: LD_INT 32
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 21963
21952: POP
// bc_type := b_siberite_power ; 33 :
21953: LD_ADDR_OWVAR 42
21957: PUSH
21958: LD_INT 28
21960: ST_TO_ADDR
21961: GO 22002
21963: LD_INT 33
21965: DOUBLE
21966: EQUAL
21967: IFTRUE 21971
21969: GO 21982
21971: POP
// bc_type := b_oil_mine ; 34 :
21972: LD_ADDR_OWVAR 42
21976: PUSH
21977: LD_INT 29
21979: ST_TO_ADDR
21980: GO 22002
21982: LD_INT 34
21984: DOUBLE
21985: EQUAL
21986: IFTRUE 21990
21988: GO 22001
21990: POP
// bc_type := b_siberite_mine ; end ;
21991: LD_ADDR_OWVAR 42
21995: PUSH
21996: LD_INT 30
21998: ST_TO_ADDR
21999: GO 22002
22001: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22002: LD_ADDR_VAR 0 8
22006: PUSH
22007: LD_VAR 0 5
22011: PPUSH
22012: LD_VAR 0 6
22016: PPUSH
22017: LD_VAR 0 3
22021: PPUSH
22022: CALL_OW 47
22026: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22027: LD_OWVAR 42
22031: PUSH
22032: LD_INT 32
22034: PUSH
22035: LD_INT 33
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: IN
22042: IFFALSE 22058
// PlaceWeaponTurret ( b , weapon ) ;
22044: LD_VAR 0 8
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: CALL_OW 431
// end ;
22058: LD_VAR 0 7
22062: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22063: LD_INT 0
22065: PPUSH
22066: PPUSH
22067: PPUSH
22068: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22069: LD_ADDR_VAR 0 4
22073: PUSH
22074: LD_INT 22
22076: PUSH
22077: LD_OWVAR 2
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 30
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 30
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 69
22122: ST_TO_ADDR
// if not tmp then
22123: LD_VAR 0 4
22127: NOT
22128: IFFALSE 22132
// exit ;
22130: GO 22191
// for i in tmp do
22132: LD_ADDR_VAR 0 2
22136: PUSH
22137: LD_VAR 0 4
22141: PUSH
22142: FOR_IN
22143: IFFALSE 22189
// for j = 1 to 3 do
22145: LD_ADDR_VAR 0 3
22149: PUSH
22150: DOUBLE
22151: LD_INT 1
22153: DEC
22154: ST_TO_ADDR
22155: LD_INT 3
22157: PUSH
22158: FOR_TO
22159: IFFALSE 22185
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22161: LD_VAR 0 2
22165: PPUSH
22166: CALL_OW 274
22170: PPUSH
22171: LD_VAR 0 3
22175: PPUSH
22176: LD_INT 99999
22178: PPUSH
22179: CALL_OW 277
22183: GO 22158
22185: POP
22186: POP
22187: GO 22142
22189: POP
22190: POP
// end ;
22191: LD_VAR 0 1
22195: RET
// export function hHackSetLevel10 ; var i , j ; begin
22196: LD_INT 0
22198: PPUSH
22199: PPUSH
22200: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22201: LD_ADDR_VAR 0 2
22205: PUSH
22206: LD_INT 21
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 69
22220: PUSH
22221: FOR_IN
22222: IFFALSE 22274
// if IsSelected ( i ) then
22224: LD_VAR 0 2
22228: PPUSH
22229: CALL_OW 306
22233: IFFALSE 22272
// begin for j := 1 to 4 do
22235: LD_ADDR_VAR 0 3
22239: PUSH
22240: DOUBLE
22241: LD_INT 1
22243: DEC
22244: ST_TO_ADDR
22245: LD_INT 4
22247: PUSH
22248: FOR_TO
22249: IFFALSE 22270
// SetSkill ( i , j , 10 ) ;
22251: LD_VAR 0 2
22255: PPUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: LD_INT 10
22263: PPUSH
22264: CALL_OW 237
22268: GO 22248
22270: POP
22271: POP
// end ;
22272: GO 22221
22274: POP
22275: POP
// end ;
22276: LD_VAR 0 1
22280: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22281: LD_INT 0
22283: PPUSH
22284: PPUSH
22285: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22286: LD_ADDR_VAR 0 2
22290: PUSH
22291: LD_INT 22
22293: PUSH
22294: LD_OWVAR 2
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 21
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: PUSH
22322: FOR_IN
22323: IFFALSE 22364
// begin for j := 1 to 4 do
22325: LD_ADDR_VAR 0 3
22329: PUSH
22330: DOUBLE
22331: LD_INT 1
22333: DEC
22334: ST_TO_ADDR
22335: LD_INT 4
22337: PUSH
22338: FOR_TO
22339: IFFALSE 22360
// SetSkill ( i , j , 10 ) ;
22341: LD_VAR 0 2
22345: PPUSH
22346: LD_VAR 0 3
22350: PPUSH
22351: LD_INT 10
22353: PPUSH
22354: CALL_OW 237
22358: GO 22338
22360: POP
22361: POP
// end ;
22362: GO 22322
22364: POP
22365: POP
// end ;
22366: LD_VAR 0 1
22370: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22371: LD_INT 0
22373: PPUSH
// uc_side := your_side ;
22374: LD_ADDR_OWVAR 20
22378: PUSH
22379: LD_OWVAR 2
22383: ST_TO_ADDR
// uc_nation := nation ;
22384: LD_ADDR_OWVAR 21
22388: PUSH
22389: LD_VAR 0 1
22393: ST_TO_ADDR
// InitHc ;
22394: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22398: LD_INT 0
22400: PPUSH
22401: LD_VAR 0 2
22405: PPUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22415: LD_VAR 0 4
22419: PPUSH
22420: LD_VAR 0 5
22424: PPUSH
22425: CALL_OW 428
22429: PUSH
22430: LD_INT 0
22432: EQUAL
22433: IFFALSE 22457
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22435: CALL_OW 44
22439: PPUSH
22440: LD_VAR 0 4
22444: PPUSH
22445: LD_VAR 0 5
22449: PPUSH
22450: LD_INT 1
22452: PPUSH
22453: CALL_OW 48
// end ;
22457: LD_VAR 0 6
22461: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22462: LD_INT 0
22464: PPUSH
22465: PPUSH
// uc_side := your_side ;
22466: LD_ADDR_OWVAR 20
22470: PUSH
22471: LD_OWVAR 2
22475: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: LD_INT 4
22492: PUSH
22493: LD_INT 5
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: IN
22503: IFFALSE 22515
// uc_nation := nation_american else
22505: LD_ADDR_OWVAR 21
22509: PUSH
22510: LD_INT 1
22512: ST_TO_ADDR
22513: GO 22558
// if chassis in [ 11 , 12 , 13 , 14 ] then
22515: LD_VAR 0 1
22519: PUSH
22520: LD_INT 11
22522: PUSH
22523: LD_INT 12
22525: PUSH
22526: LD_INT 13
22528: PUSH
22529: LD_INT 14
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: IN
22538: IFFALSE 22550
// uc_nation := nation_arabian else
22540: LD_ADDR_OWVAR 21
22544: PUSH
22545: LD_INT 2
22547: ST_TO_ADDR
22548: GO 22558
// uc_nation := nation_russian ;
22550: LD_ADDR_OWVAR 21
22554: PUSH
22555: LD_INT 3
22557: ST_TO_ADDR
// vc_chassis := chassis ;
22558: LD_ADDR_OWVAR 37
22562: PUSH
22563: LD_VAR 0 1
22567: ST_TO_ADDR
// vc_engine := engine ;
22568: LD_ADDR_OWVAR 39
22572: PUSH
22573: LD_VAR 0 2
22577: ST_TO_ADDR
// vc_control := control ;
22578: LD_ADDR_OWVAR 38
22582: PUSH
22583: LD_VAR 0 3
22587: ST_TO_ADDR
// vc_weapon := weapon ;
22588: LD_ADDR_OWVAR 40
22592: PUSH
22593: LD_VAR 0 4
22597: ST_TO_ADDR
// un := CreateVehicle ;
22598: LD_ADDR_VAR 0 8
22602: PUSH
22603: CALL_OW 45
22607: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22608: LD_VAR 0 8
22612: PPUSH
22613: LD_INT 0
22615: PPUSH
22616: LD_INT 5
22618: PPUSH
22619: CALL_OW 12
22623: PPUSH
22624: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22628: LD_VAR 0 8
22632: PPUSH
22633: LD_VAR 0 5
22637: PPUSH
22638: LD_VAR 0 6
22642: PPUSH
22643: LD_INT 1
22645: PPUSH
22646: CALL_OW 48
// end ;
22650: LD_VAR 0 7
22654: RET
// export hInvincible ; every 1 do
22655: GO 22657
22657: DISABLE
// hInvincible := [ ] ;
22658: LD_ADDR_EXP 128
22662: PUSH
22663: EMPTY
22664: ST_TO_ADDR
22665: END
// every 10 do var i ;
22666: GO 22668
22668: DISABLE
22669: LD_INT 0
22671: PPUSH
// begin enable ;
22672: ENABLE
// if not hInvincible then
22673: LD_EXP 128
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22726
// for i in hInvincible do
22682: LD_ADDR_VAR 0 1
22686: PUSH
22687: LD_EXP 128
22691: PUSH
22692: FOR_IN
22693: IFFALSE 22724
// if GetLives ( i ) < 1000 then
22695: LD_VAR 0 1
22699: PPUSH
22700: CALL_OW 256
22704: PUSH
22705: LD_INT 1000
22707: LESS
22708: IFFALSE 22722
// SetLives ( i , 1000 ) ;
22710: LD_VAR 0 1
22714: PPUSH
22715: LD_INT 1000
22717: PPUSH
22718: CALL_OW 234
22722: GO 22692
22724: POP
22725: POP
// end ;
22726: PPOPN 1
22728: END
// export function hHackInvincible ; var i ; begin
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22733: LD_ADDR_VAR 0 2
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 21
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 69
22770: PUSH
22771: FOR_IN
22772: IFFALSE 22833
// if IsSelected ( i ) then
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 306
22783: IFFALSE 22831
// begin if i in hInvincible then
22785: LD_VAR 0 2
22789: PUSH
22790: LD_EXP 128
22794: IN
22795: IFFALSE 22815
// hInvincible := hInvincible diff i else
22797: LD_ADDR_EXP 128
22801: PUSH
22802: LD_EXP 128
22806: PUSH
22807: LD_VAR 0 2
22811: DIFF
22812: ST_TO_ADDR
22813: GO 22831
// hInvincible := hInvincible union i ;
22815: LD_ADDR_EXP 128
22819: PUSH
22820: LD_EXP 128
22824: PUSH
22825: LD_VAR 0 2
22829: UNION
22830: ST_TO_ADDR
// end ;
22831: GO 22771
22833: POP
22834: POP
// end ;
22835: LD_VAR 0 1
22839: RET
// export function hHackInvisible ; var i , j ; begin
22840: LD_INT 0
22842: PPUSH
22843: PPUSH
22844: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22845: LD_ADDR_VAR 0 2
22849: PUSH
22850: LD_INT 21
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PPUSH
22860: CALL_OW 69
22864: PUSH
22865: FOR_IN
22866: IFFALSE 22890
// if IsSelected ( i ) then
22868: LD_VAR 0 2
22872: PPUSH
22873: CALL_OW 306
22877: IFFALSE 22888
// ComForceInvisible ( i ) ;
22879: LD_VAR 0 2
22883: PPUSH
22884: CALL_OW 496
22888: GO 22865
22890: POP
22891: POP
// end ;
22892: LD_VAR 0 1
22896: RET
// export function hHackChangeYourSide ; begin
22897: LD_INT 0
22899: PPUSH
// if your_side = 8 then
22900: LD_OWVAR 2
22904: PUSH
22905: LD_INT 8
22907: EQUAL
22908: IFFALSE 22920
// your_side := 0 else
22910: LD_ADDR_OWVAR 2
22914: PUSH
22915: LD_INT 0
22917: ST_TO_ADDR
22918: GO 22934
// your_side := your_side + 1 ;
22920: LD_ADDR_OWVAR 2
22924: PUSH
22925: LD_OWVAR 2
22929: PUSH
22930: LD_INT 1
22932: PLUS
22933: ST_TO_ADDR
// end ;
22934: LD_VAR 0 1
22938: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
22943: PPUSH
// for i in all_units do
22944: LD_ADDR_VAR 0 2
22948: PUSH
22949: LD_OWVAR 3
22953: PUSH
22954: FOR_IN
22955: IFFALSE 23033
// if IsSelected ( i ) then
22957: LD_VAR 0 2
22961: PPUSH
22962: CALL_OW 306
22966: IFFALSE 23031
// begin j := GetSide ( i ) ;
22968: LD_ADDR_VAR 0 3
22972: PUSH
22973: LD_VAR 0 2
22977: PPUSH
22978: CALL_OW 255
22982: ST_TO_ADDR
// if j = 8 then
22983: LD_VAR 0 3
22987: PUSH
22988: LD_INT 8
22990: EQUAL
22991: IFFALSE 23003
// j := 0 else
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: LD_INT 0
23000: ST_TO_ADDR
23001: GO 23017
// j := j + 1 ;
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: LD_INT 1
23015: PLUS
23016: ST_TO_ADDR
// SetSide ( i , j ) ;
23017: LD_VAR 0 2
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: CALL_OW 235
// end ;
23031: GO 22954
23033: POP
23034: POP
// end ;
23035: LD_VAR 0 1
23039: RET
// export function hHackFog ; begin
23040: LD_INT 0
23042: PPUSH
// FogOff ( true ) ;
23043: LD_INT 1
23045: PPUSH
23046: CALL_OW 344
// end ;
23050: LD_VAR 0 1
23054: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23055: LD_INT 0
23057: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23058: LD_VAR 0 1
23062: PPUSH
23063: LD_VAR 0 2
23067: PPUSH
23068: LD_VAR 0 3
23072: PPUSH
23073: LD_INT 1
23075: PPUSH
23076: LD_INT 1
23078: PPUSH
23079: CALL_OW 483
// CenterOnXY ( x , y ) ;
23083: LD_VAR 0 2
23087: PPUSH
23088: LD_VAR 0 3
23092: PPUSH
23093: CALL_OW 84
// end ; end_of_file
23097: LD_VAR 0 4
23101: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23102: LD_INT 0
23104: PPUSH
23105: PPUSH
23106: PPUSH
23107: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 264
23117: PUSH
23118: LD_EXP 56
23122: EQUAL
23123: IFFALSE 23195
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23125: LD_INT 68
23127: PPUSH
23128: LD_VAR 0 1
23132: PPUSH
23133: CALL_OW 255
23137: PPUSH
23138: CALL_OW 321
23142: PUSH
23143: LD_INT 2
23145: EQUAL
23146: IFFALSE 23158
// eff := 70 else
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_INT 70
23155: ST_TO_ADDR
23156: GO 23166
// eff := 30 ;
23158: LD_ADDR_VAR 0 4
23162: PUSH
23163: LD_INT 30
23165: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 250
23175: PPUSH
23176: LD_VAR 0 1
23180: PPUSH
23181: CALL_OW 251
23185: PPUSH
23186: LD_VAR 0 4
23190: PPUSH
23191: CALL_OW 495
// end ; end ;
23195: LD_VAR 0 2
23199: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23200: LD_INT 0
23202: PPUSH
// end ;
23203: LD_VAR 0 4
23207: RET
// export function SOS_Command ( cmd ) ; begin
23208: LD_INT 0
23210: PPUSH
// end ;
23211: LD_VAR 0 2
23215: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23216: LD_INT 0
23218: PPUSH
// end ;
23219: LD_VAR 0 6
23223: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23224: LD_INT 0
23226: PPUSH
23227: PPUSH
// if not vehicle or not factory then
23228: LD_VAR 0 1
23232: NOT
23233: PUSH
23234: LD_VAR 0 2
23238: NOT
23239: OR
23240: IFFALSE 23244
// exit ;
23242: GO 23475
// if factoryWaypoints >= factory then
23244: LD_EXP 129
23248: PUSH
23249: LD_VAR 0 2
23253: GREATEREQUAL
23254: IFFALSE 23475
// if factoryWaypoints [ factory ] then
23256: LD_EXP 129
23260: PUSH
23261: LD_VAR 0 2
23265: ARRAY
23266: IFFALSE 23475
// begin if GetControl ( vehicle ) = control_manual then
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 263
23277: PUSH
23278: LD_INT 1
23280: EQUAL
23281: IFFALSE 23362
// begin driver := IsDrivenBy ( vehicle ) ;
23283: LD_ADDR_VAR 0 4
23287: PUSH
23288: LD_VAR 0 1
23292: PPUSH
23293: CALL_OW 311
23297: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
23298: LD_VAR 0 4
23302: PPUSH
23303: LD_EXP 129
23307: PUSH
23308: LD_VAR 0 2
23312: ARRAY
23313: PUSH
23314: LD_INT 1
23316: ARRAY
23317: PPUSH
23318: LD_EXP 129
23322: PUSH
23323: LD_VAR 0 2
23327: ARRAY
23328: PUSH
23329: LD_INT 2
23331: ARRAY
23332: PPUSH
23333: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23337: LD_VAR 0 4
23341: PPUSH
23342: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23346: LD_VAR 0 4
23350: PPUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: CALL_OW 180
// end else
23360: GO 23475
// if GetControl ( vehicle ) = control_remote then
23362: LD_VAR 0 1
23366: PPUSH
23367: CALL_OW 263
23371: PUSH
23372: LD_INT 2
23374: EQUAL
23375: IFFALSE 23436
// begin wait ( 0 0$2 ) ;
23377: LD_INT 70
23379: PPUSH
23380: CALL_OW 67
// if Connect ( vehicle ) then
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL 35699 0 1
23393: IFFALSE 23434
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
23395: LD_VAR 0 1
23399: PPUSH
23400: LD_EXP 129
23404: PUSH
23405: LD_VAR 0 2
23409: ARRAY
23410: PUSH
23411: LD_INT 1
23413: ARRAY
23414: PPUSH
23415: LD_EXP 129
23419: PUSH
23420: LD_VAR 0 2
23424: ARRAY
23425: PUSH
23426: LD_INT 2
23428: ARRAY
23429: PPUSH
23430: CALL_OW 171
// end else
23434: GO 23475
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
23436: LD_VAR 0 1
23440: PPUSH
23441: LD_EXP 129
23445: PUSH
23446: LD_VAR 0 2
23450: ARRAY
23451: PUSH
23452: LD_INT 1
23454: ARRAY
23455: PPUSH
23456: LD_EXP 129
23460: PUSH
23461: LD_VAR 0 2
23465: ARRAY
23466: PUSH
23467: LD_INT 2
23469: ARRAY
23470: PPUSH
23471: CALL_OW 171
// end ; end ;
23475: LD_VAR 0 3
23479: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23480: LD_INT 0
23482: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23483: LD_VAR 0 1
23487: PUSH
23488: LD_INT 250
23490: EQUAL
23491: PUSH
23492: LD_VAR 0 2
23496: PPUSH
23497: CALL_OW 264
23501: PUSH
23502: LD_EXP 59
23506: EQUAL
23507: AND
23508: IFFALSE 23529
// MinerPlaceMine ( unit , x , y ) ;
23510: LD_VAR 0 2
23514: PPUSH
23515: LD_VAR 0 4
23519: PPUSH
23520: LD_VAR 0 5
23524: PPUSH
23525: CALL 26257 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23529: LD_VAR 0 1
23533: PUSH
23534: LD_INT 251
23536: EQUAL
23537: PUSH
23538: LD_VAR 0 2
23542: PPUSH
23543: CALL_OW 264
23547: PUSH
23548: LD_EXP 59
23552: EQUAL
23553: AND
23554: IFFALSE 23575
// MinerDetonateMine ( unit , x , y ) ;
23556: LD_VAR 0 2
23560: PPUSH
23561: LD_VAR 0 4
23565: PPUSH
23566: LD_VAR 0 5
23570: PPUSH
23571: CALL 26534 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23575: LD_VAR 0 1
23579: PUSH
23580: LD_INT 252
23582: EQUAL
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: CALL_OW 264
23593: PUSH
23594: LD_EXP 59
23598: EQUAL
23599: AND
23600: IFFALSE 23621
// MinerCreateMinefield ( unit , x , y ) ;
23602: LD_VAR 0 2
23606: PPUSH
23607: LD_VAR 0 4
23611: PPUSH
23612: LD_VAR 0 5
23616: PPUSH
23617: CALL 26951 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23621: LD_VAR 0 1
23625: PUSH
23626: LD_INT 253
23628: EQUAL
23629: PUSH
23630: LD_VAR 0 2
23634: PPUSH
23635: CALL_OW 257
23639: PUSH
23640: LD_INT 5
23642: EQUAL
23643: AND
23644: IFFALSE 23665
// ComBinocular ( unit , x , y ) ;
23646: LD_VAR 0 2
23650: PPUSH
23651: LD_VAR 0 4
23655: PPUSH
23656: LD_VAR 0 5
23660: PPUSH
23661: CALL 27322 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23665: LD_VAR 0 1
23669: PUSH
23670: LD_INT 254
23672: EQUAL
23673: PUSH
23674: LD_VAR 0 2
23678: PPUSH
23679: CALL_OW 264
23683: PUSH
23684: LD_EXP 54
23688: EQUAL
23689: AND
23690: PUSH
23691: LD_VAR 0 3
23695: PPUSH
23696: CALL_OW 263
23700: PUSH
23701: LD_INT 3
23703: EQUAL
23704: AND
23705: IFFALSE 23721
// HackDestroyVehicle ( unit , selectedUnit ) ;
23707: LD_VAR 0 2
23711: PPUSH
23712: LD_VAR 0 3
23716: PPUSH
23717: CALL 25617 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23721: LD_VAR 0 1
23725: PUSH
23726: LD_INT 255
23728: EQUAL
23729: PUSH
23730: LD_VAR 0 2
23734: PPUSH
23735: CALL_OW 264
23739: PUSH
23740: LD_INT 14
23742: PUSH
23743: LD_INT 53
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: IN
23750: AND
23751: PUSH
23752: LD_VAR 0 4
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: CALL_OW 488
23766: AND
23767: IFFALSE 23791
// CutTreeXYR ( unit , x , y , 12 ) ;
23769: LD_VAR 0 2
23773: PPUSH
23774: LD_VAR 0 4
23778: PPUSH
23779: LD_VAR 0 5
23783: PPUSH
23784: LD_INT 12
23786: PPUSH
23787: CALL 24183 0 4
// if cmd = 256 then
23791: LD_VAR 0 1
23795: PUSH
23796: LD_INT 256
23798: EQUAL
23799: IFFALSE 23820
// SetFactoryWaypoint ( unit , x , y ) ;
23801: LD_VAR 0 2
23805: PPUSH
23806: LD_VAR 0 4
23810: PPUSH
23811: LD_VAR 0 5
23815: PPUSH
23816: CALL 23825 0 3
// end ;
23820: LD_VAR 0 6
23824: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23825: LD_INT 0
23827: PPUSH
23828: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23829: LD_VAR 0 1
23833: NOT
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: LD_VAR 0 3
23844: PPUSH
23845: CALL_OW 488
23849: NOT
23850: OR
23851: PUSH
23852: LD_VAR 0 1
23856: PPUSH
23857: CALL_OW 266
23861: PUSH
23862: LD_INT 3
23864: NONEQUAL
23865: PUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 247
23875: PUSH
23876: LD_INT 1
23878: EQUAL
23879: NOT
23880: AND
23881: OR
23882: IFFALSE 23886
// exit ;
23884: GO 24035
// if GetType ( factory ) = unit_human then
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 247
23895: PUSH
23896: LD_INT 1
23898: EQUAL
23899: IFFALSE 23916
// factory := IsInUnit ( factory ) ;
23901: LD_ADDR_VAR 0 1
23905: PUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 310
23915: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 266
23925: PUSH
23926: LD_INT 3
23928: NONEQUAL
23929: IFFALSE 23933
// exit ;
23931: GO 24035
// if HexInfo ( x , y ) = factory then
23933: LD_VAR 0 2
23937: PPUSH
23938: LD_VAR 0 3
23942: PPUSH
23943: CALL_OW 428
23947: PUSH
23948: LD_VAR 0 1
23952: EQUAL
23953: IFFALSE 23980
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23955: LD_ADDR_EXP 129
23959: PUSH
23960: LD_EXP 129
23964: PPUSH
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_INT 0
23972: PPUSH
23973: CALL_OW 1
23977: ST_TO_ADDR
23978: GO 24031
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23980: LD_ADDR_EXP 129
23984: PUSH
23985: LD_EXP 129
23989: PPUSH
23990: LD_VAR 0 1
23994: PPUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 255
24004: PUSH
24005: LD_VAR 0 1
24009: PUSH
24010: LD_VAR 0 2
24014: PUSH
24015: LD_VAR 0 3
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: PPUSH
24026: CALL_OW 1
24030: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24031: CALL 24040 0 0
// end ;
24035: LD_VAR 0 4
24039: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24044: LD_STRING resetFactoryWaypoint();
24046: PPUSH
24047: CALL_OW 559
// if factoryWaypoints then
24051: LD_EXP 129
24055: IFFALSE 24178
// begin for i := 1 to factoryWaypoints do
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: DOUBLE
24063: LD_INT 1
24065: DEC
24066: ST_TO_ADDR
24067: LD_EXP 129
24071: PUSH
24072: FOR_TO
24073: IFFALSE 24176
// if factoryWaypoints [ i ] then
24075: LD_EXP 129
24079: PUSH
24080: LD_VAR 0 2
24084: ARRAY
24085: IFFALSE 24174
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
24087: LD_STRING setFactoryWaypointXY(
24089: PUSH
24090: LD_EXP 129
24094: PUSH
24095: LD_VAR 0 2
24099: ARRAY
24100: PUSH
24101: LD_INT 1
24103: ARRAY
24104: STR
24105: PUSH
24106: LD_STRING ,
24108: STR
24109: PUSH
24110: LD_EXP 129
24114: PUSH
24115: LD_VAR 0 2
24119: ARRAY
24120: PUSH
24121: LD_INT 2
24123: ARRAY
24124: STR
24125: PUSH
24126: LD_STRING ,
24128: STR
24129: PUSH
24130: LD_EXP 129
24134: PUSH
24135: LD_VAR 0 2
24139: ARRAY
24140: PUSH
24141: LD_INT 3
24143: ARRAY
24144: STR
24145: PUSH
24146: LD_STRING ,
24148: STR
24149: PUSH
24150: LD_EXP 129
24154: PUSH
24155: LD_VAR 0 2
24159: ARRAY
24160: PUSH
24161: LD_INT 4
24163: ARRAY
24164: STR
24165: PUSH
24166: LD_STRING )
24168: STR
24169: PPUSH
24170: CALL_OW 559
24174: GO 24072
24176: POP
24177: POP
// end ; end ;
24178: LD_VAR 0 1
24182: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24183: LD_INT 0
24185: PPUSH
24186: PPUSH
24187: PPUSH
24188: PPUSH
24189: PPUSH
24190: PPUSH
24191: PPUSH
24192: PPUSH
24193: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24194: LD_VAR 0 1
24198: NOT
24199: PUSH
24200: LD_VAR 0 2
24204: PPUSH
24205: LD_VAR 0 3
24209: PPUSH
24210: CALL_OW 488
24214: NOT
24215: OR
24216: PUSH
24217: LD_VAR 0 4
24221: NOT
24222: OR
24223: IFFALSE 24227
// exit ;
24225: GO 24567
// list := [ ] ;
24227: LD_ADDR_VAR 0 13
24231: PUSH
24232: EMPTY
24233: ST_TO_ADDR
// if x - r < 0 then
24234: LD_VAR 0 2
24238: PUSH
24239: LD_VAR 0 4
24243: MINUS
24244: PUSH
24245: LD_INT 0
24247: LESS
24248: IFFALSE 24260
// min_x := 0 else
24250: LD_ADDR_VAR 0 7
24254: PUSH
24255: LD_INT 0
24257: ST_TO_ADDR
24258: GO 24276
// min_x := x - r ;
24260: LD_ADDR_VAR 0 7
24264: PUSH
24265: LD_VAR 0 2
24269: PUSH
24270: LD_VAR 0 4
24274: MINUS
24275: ST_TO_ADDR
// if y - r < 0 then
24276: LD_VAR 0 3
24280: PUSH
24281: LD_VAR 0 4
24285: MINUS
24286: PUSH
24287: LD_INT 0
24289: LESS
24290: IFFALSE 24302
// min_y := 0 else
24292: LD_ADDR_VAR 0 8
24296: PUSH
24297: LD_INT 0
24299: ST_TO_ADDR
24300: GO 24318
// min_y := y - r ;
24302: LD_ADDR_VAR 0 8
24306: PUSH
24307: LD_VAR 0 3
24311: PUSH
24312: LD_VAR 0 4
24316: MINUS
24317: ST_TO_ADDR
// max_x := x + r ;
24318: LD_ADDR_VAR 0 9
24322: PUSH
24323: LD_VAR 0 2
24327: PUSH
24328: LD_VAR 0 4
24332: PLUS
24333: ST_TO_ADDR
// max_y := y + r ;
24334: LD_ADDR_VAR 0 10
24338: PUSH
24339: LD_VAR 0 3
24343: PUSH
24344: LD_VAR 0 4
24348: PLUS
24349: ST_TO_ADDR
// for _x = min_x to max_x do
24350: LD_ADDR_VAR 0 11
24354: PUSH
24355: DOUBLE
24356: LD_VAR 0 7
24360: DEC
24361: ST_TO_ADDR
24362: LD_VAR 0 9
24366: PUSH
24367: FOR_TO
24368: IFFALSE 24485
// for _y = min_y to max_y do
24370: LD_ADDR_VAR 0 12
24374: PUSH
24375: DOUBLE
24376: LD_VAR 0 8
24380: DEC
24381: ST_TO_ADDR
24382: LD_VAR 0 10
24386: PUSH
24387: FOR_TO
24388: IFFALSE 24481
// begin if not ValidHex ( _x , _y ) then
24390: LD_VAR 0 11
24394: PPUSH
24395: LD_VAR 0 12
24399: PPUSH
24400: CALL_OW 488
24404: NOT
24405: IFFALSE 24409
// continue ;
24407: GO 24387
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24409: LD_VAR 0 11
24413: PPUSH
24414: LD_VAR 0 12
24418: PPUSH
24419: CALL_OW 351
24423: PUSH
24424: LD_VAR 0 11
24428: PPUSH
24429: LD_VAR 0 12
24433: PPUSH
24434: CALL_OW 554
24438: AND
24439: IFFALSE 24479
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24441: LD_ADDR_VAR 0 13
24445: PUSH
24446: LD_VAR 0 13
24450: PPUSH
24451: LD_VAR 0 13
24455: PUSH
24456: LD_INT 1
24458: PLUS
24459: PPUSH
24460: LD_VAR 0 11
24464: PUSH
24465: LD_VAR 0 12
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PPUSH
24474: CALL_OW 2
24478: ST_TO_ADDR
// end ;
24479: GO 24387
24481: POP
24482: POP
24483: GO 24367
24485: POP
24486: POP
// if not list then
24487: LD_VAR 0 13
24491: NOT
24492: IFFALSE 24496
// exit ;
24494: GO 24567
// for i in list do
24496: LD_ADDR_VAR 0 6
24500: PUSH
24501: LD_VAR 0 13
24505: PUSH
24506: FOR_IN
24507: IFFALSE 24565
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24509: LD_VAR 0 1
24513: PPUSH
24514: LD_STRING M
24516: PUSH
24517: LD_VAR 0 6
24521: PUSH
24522: LD_INT 1
24524: ARRAY
24525: PUSH
24526: LD_VAR 0 6
24530: PUSH
24531: LD_INT 2
24533: ARRAY
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: PUSH
24556: EMPTY
24557: LIST
24558: PPUSH
24559: CALL_OW 447
24563: GO 24506
24565: POP
24566: POP
// end ;
24567: LD_VAR 0 5
24571: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24572: LD_EXP 130
24576: NOT
24577: IFFALSE 24627
24579: GO 24581
24581: DISABLE
// begin initHack := true ;
24582: LD_ADDR_EXP 130
24586: PUSH
24587: LD_INT 1
24589: ST_TO_ADDR
// hackTanks := [ ] ;
24590: LD_ADDR_EXP 131
24594: PUSH
24595: EMPTY
24596: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24597: LD_ADDR_EXP 132
24601: PUSH
24602: EMPTY
24603: ST_TO_ADDR
// hackLimit := 3 ;
24604: LD_ADDR_EXP 133
24608: PUSH
24609: LD_INT 3
24611: ST_TO_ADDR
// hackDist := 12 ;
24612: LD_ADDR_EXP 134
24616: PUSH
24617: LD_INT 12
24619: ST_TO_ADDR
// hackCounter := [ ] ;
24620: LD_ADDR_EXP 135
24624: PUSH
24625: EMPTY
24626: ST_TO_ADDR
// end ;
24627: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24628: LD_EXP 130
24632: PUSH
24633: LD_INT 34
24635: PUSH
24636: LD_EXP 54
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PPUSH
24645: CALL_OW 69
24649: AND
24650: IFFALSE 24905
24652: GO 24654
24654: DISABLE
24655: LD_INT 0
24657: PPUSH
24658: PPUSH
// begin enable ;
24659: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24660: LD_ADDR_VAR 0 1
24664: PUSH
24665: LD_INT 34
24667: PUSH
24668: LD_EXP 54
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 69
24681: PUSH
24682: FOR_IN
24683: IFFALSE 24903
// begin if not i in hackTanks then
24685: LD_VAR 0 1
24689: PUSH
24690: LD_EXP 131
24694: IN
24695: NOT
24696: IFFALSE 24779
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24698: LD_ADDR_EXP 131
24702: PUSH
24703: LD_EXP 131
24707: PPUSH
24708: LD_EXP 131
24712: PUSH
24713: LD_INT 1
24715: PLUS
24716: PPUSH
24717: LD_VAR 0 1
24721: PPUSH
24722: CALL_OW 1
24726: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24727: LD_ADDR_EXP 132
24731: PUSH
24732: LD_EXP 132
24736: PPUSH
24737: LD_EXP 132
24741: PUSH
24742: LD_INT 1
24744: PLUS
24745: PPUSH
24746: EMPTY
24747: PPUSH
24748: CALL_OW 1
24752: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24753: LD_ADDR_EXP 135
24757: PUSH
24758: LD_EXP 135
24762: PPUSH
24763: LD_EXP 135
24767: PUSH
24768: LD_INT 1
24770: PLUS
24771: PPUSH
24772: EMPTY
24773: PPUSH
24774: CALL_OW 1
24778: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL_OW 302
24788: NOT
24789: IFFALSE 24802
// begin HackUnlinkAll ( i ) ;
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL 24908 0 1
// continue ;
24800: GO 24682
// end ; HackCheckCapturedStatus ( i ) ;
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL 25351 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24811: LD_ADDR_VAR 0 2
24815: PUSH
24816: LD_INT 81
24818: PUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 255
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 33
24835: PUSH
24836: LD_INT 3
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 91
24845: PUSH
24846: LD_VAR 0 1
24850: PUSH
24851: LD_EXP 134
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 50
24863: PUSH
24864: EMPTY
24865: LIST
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: PPUSH
24873: CALL_OW 69
24877: ST_TO_ADDR
// if not tmp then
24878: LD_VAR 0 2
24882: NOT
24883: IFFALSE 24887
// continue ;
24885: GO 24682
// HackLink ( i , tmp ) ;
24887: LD_VAR 0 1
24891: PPUSH
24892: LD_VAR 0 2
24896: PPUSH
24897: CALL 25044 0 2
// end ;
24901: GO 24682
24903: POP
24904: POP
// end ;
24905: PPOPN 2
24907: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24908: LD_INT 0
24910: PPUSH
24911: PPUSH
24912: PPUSH
// if not hack in hackTanks then
24913: LD_VAR 0 1
24917: PUSH
24918: LD_EXP 131
24922: IN
24923: NOT
24924: IFFALSE 24928
// exit ;
24926: GO 25039
// index := GetElementIndex ( hackTanks , hack ) ;
24928: LD_ADDR_VAR 0 4
24932: PUSH
24933: LD_EXP 131
24937: PPUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL 32513 0 2
24947: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24948: LD_EXP 132
24952: PUSH
24953: LD_VAR 0 4
24957: ARRAY
24958: IFFALSE 25039
// begin for i in hackTanksCaptured [ index ] do
24960: LD_ADDR_VAR 0 3
24964: PUSH
24965: LD_EXP 132
24969: PUSH
24970: LD_VAR 0 4
24974: ARRAY
24975: PUSH
24976: FOR_IN
24977: IFFALSE 25003
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24979: LD_VAR 0 3
24983: PUSH
24984: LD_INT 1
24986: ARRAY
24987: PPUSH
24988: LD_VAR 0 3
24992: PUSH
24993: LD_INT 2
24995: ARRAY
24996: PPUSH
24997: CALL_OW 235
25001: GO 24976
25003: POP
25004: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25005: LD_ADDR_EXP 132
25009: PUSH
25010: LD_EXP 132
25014: PPUSH
25015: LD_VAR 0 4
25019: PPUSH
25020: EMPTY
25021: PPUSH
25022: CALL_OW 1
25026: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25027: LD_VAR 0 1
25031: PPUSH
25032: LD_INT 0
25034: PPUSH
25035: CALL_OW 505
// end ; end ;
25039: LD_VAR 0 2
25043: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25044: LD_INT 0
25046: PPUSH
25047: PPUSH
25048: PPUSH
// if not hack in hackTanks or not vehicles then
25049: LD_VAR 0 1
25053: PUSH
25054: LD_EXP 131
25058: IN
25059: NOT
25060: PUSH
25061: LD_VAR 0 2
25065: NOT
25066: OR
25067: IFFALSE 25071
// exit ;
25069: GO 25346
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25071: LD_ADDR_VAR 0 2
25075: PUSH
25076: LD_VAR 0 1
25080: PPUSH
25081: LD_VAR 0 2
25085: PPUSH
25086: LD_INT 1
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: CALL 33163 0 4
25096: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25097: LD_ADDR_VAR 0 5
25101: PUSH
25102: LD_EXP 131
25106: PPUSH
25107: LD_VAR 0 1
25111: PPUSH
25112: CALL 32513 0 2
25116: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25117: LD_EXP 132
25121: PUSH
25122: LD_VAR 0 5
25126: ARRAY
25127: PUSH
25128: LD_EXP 133
25132: LESS
25133: IFFALSE 25322
// begin for i := 1 to vehicles do
25135: LD_ADDR_VAR 0 4
25139: PUSH
25140: DOUBLE
25141: LD_INT 1
25143: DEC
25144: ST_TO_ADDR
25145: LD_VAR 0 2
25149: PUSH
25150: FOR_TO
25151: IFFALSE 25320
// begin if hackTanksCaptured [ index ] = hackLimit then
25153: LD_EXP 132
25157: PUSH
25158: LD_VAR 0 5
25162: ARRAY
25163: PUSH
25164: LD_EXP 133
25168: EQUAL
25169: IFFALSE 25173
// break ;
25171: GO 25320
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25173: LD_ADDR_EXP 135
25177: PUSH
25178: LD_EXP 135
25182: PPUSH
25183: LD_VAR 0 5
25187: PPUSH
25188: LD_EXP 135
25192: PUSH
25193: LD_VAR 0 5
25197: ARRAY
25198: PUSH
25199: LD_INT 1
25201: PLUS
25202: PPUSH
25203: CALL_OW 1
25207: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25208: LD_ADDR_EXP 132
25212: PUSH
25213: LD_EXP 132
25217: PPUSH
25218: LD_VAR 0 5
25222: PUSH
25223: LD_EXP 132
25227: PUSH
25228: LD_VAR 0 5
25232: ARRAY
25233: PUSH
25234: LD_INT 1
25236: PLUS
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: LD_VAR 0 2
25246: PUSH
25247: LD_VAR 0 4
25251: ARRAY
25252: PUSH
25253: LD_VAR 0 2
25257: PUSH
25258: LD_VAR 0 4
25262: ARRAY
25263: PPUSH
25264: CALL_OW 255
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PPUSH
25273: CALL 32728 0 3
25277: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25278: LD_VAR 0 2
25282: PUSH
25283: LD_VAR 0 4
25287: ARRAY
25288: PPUSH
25289: LD_VAR 0 1
25293: PPUSH
25294: CALL_OW 255
25298: PPUSH
25299: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25303: LD_VAR 0 2
25307: PUSH
25308: LD_VAR 0 4
25312: ARRAY
25313: PPUSH
25314: CALL_OW 141
// end ;
25318: GO 25150
25320: POP
25321: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_EXP 132
25331: PUSH
25332: LD_VAR 0 5
25336: ARRAY
25337: PUSH
25338: LD_INT 0
25340: PLUS
25341: PPUSH
25342: CALL_OW 505
// end ;
25346: LD_VAR 0 3
25350: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25351: LD_INT 0
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
// if not hack in hackTanks then
25357: LD_VAR 0 1
25361: PUSH
25362: LD_EXP 131
25366: IN
25367: NOT
25368: IFFALSE 25372
// exit ;
25370: GO 25612
// index := GetElementIndex ( hackTanks , hack ) ;
25372: LD_ADDR_VAR 0 4
25376: PUSH
25377: LD_EXP 131
25381: PPUSH
25382: LD_VAR 0 1
25386: PPUSH
25387: CALL 32513 0 2
25391: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25392: LD_ADDR_VAR 0 3
25396: PUSH
25397: DOUBLE
25398: LD_EXP 132
25402: PUSH
25403: LD_VAR 0 4
25407: ARRAY
25408: INC
25409: ST_TO_ADDR
25410: LD_INT 1
25412: PUSH
25413: FOR_DOWNTO
25414: IFFALSE 25586
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25416: LD_ADDR_VAR 0 5
25420: PUSH
25421: LD_EXP 132
25425: PUSH
25426: LD_VAR 0 4
25430: ARRAY
25431: PUSH
25432: LD_VAR 0 3
25436: ARRAY
25437: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25438: LD_VAR 0 5
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: CALL_OW 302
25451: NOT
25452: PUSH
25453: LD_VAR 0 5
25457: PUSH
25458: LD_INT 1
25460: ARRAY
25461: PPUSH
25462: CALL_OW 255
25466: PUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 255
25476: NONEQUAL
25477: OR
25478: IFFALSE 25584
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25480: LD_VAR 0 5
25484: PUSH
25485: LD_INT 1
25487: ARRAY
25488: PPUSH
25489: CALL_OW 305
25493: PUSH
25494: LD_VAR 0 5
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: CALL_OW 255
25507: PUSH
25508: LD_VAR 0 1
25512: PPUSH
25513: CALL_OW 255
25517: EQUAL
25518: AND
25519: IFFALSE 25543
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25521: LD_VAR 0 5
25525: PUSH
25526: LD_INT 1
25528: ARRAY
25529: PPUSH
25530: LD_VAR 0 5
25534: PUSH
25535: LD_INT 2
25537: ARRAY
25538: PPUSH
25539: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25543: LD_ADDR_EXP 132
25547: PUSH
25548: LD_EXP 132
25552: PPUSH
25553: LD_VAR 0 4
25557: PPUSH
25558: LD_EXP 132
25562: PUSH
25563: LD_VAR 0 4
25567: ARRAY
25568: PPUSH
25569: LD_VAR 0 3
25573: PPUSH
25574: CALL_OW 3
25578: PPUSH
25579: CALL_OW 1
25583: ST_TO_ADDR
// end ; end ;
25584: GO 25413
25586: POP
25587: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_EXP 132
25597: PUSH
25598: LD_VAR 0 4
25602: ARRAY
25603: PUSH
25604: LD_INT 0
25606: PLUS
25607: PPUSH
25608: CALL_OW 505
// end ;
25612: LD_VAR 0 2
25616: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25617: LD_INT 0
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
// if not hack in hackTanks then
25623: LD_VAR 0 1
25627: PUSH
25628: LD_EXP 131
25632: IN
25633: NOT
25634: IFFALSE 25638
// exit ;
25636: GO 25723
// index := GetElementIndex ( hackTanks , hack ) ;
25638: LD_ADDR_VAR 0 5
25642: PUSH
25643: LD_EXP 131
25647: PPUSH
25648: LD_VAR 0 1
25652: PPUSH
25653: CALL 32513 0 2
25657: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25658: LD_ADDR_VAR 0 4
25662: PUSH
25663: DOUBLE
25664: LD_INT 1
25666: DEC
25667: ST_TO_ADDR
25668: LD_EXP 132
25672: PUSH
25673: LD_VAR 0 5
25677: ARRAY
25678: PUSH
25679: FOR_TO
25680: IFFALSE 25721
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25682: LD_EXP 132
25686: PUSH
25687: LD_VAR 0 5
25691: ARRAY
25692: PUSH
25693: LD_VAR 0 4
25697: ARRAY
25698: PUSH
25699: LD_INT 1
25701: ARRAY
25702: PUSH
25703: LD_VAR 0 2
25707: EQUAL
25708: IFFALSE 25719
// KillUnit ( vehicle ) ;
25710: LD_VAR 0 2
25714: PPUSH
25715: CALL_OW 66
25719: GO 25679
25721: POP
25722: POP
// end ;
25723: LD_VAR 0 3
25727: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25728: LD_EXP 136
25732: NOT
25733: IFFALSE 25768
25735: GO 25737
25737: DISABLE
// begin initMiner := true ;
25738: LD_ADDR_EXP 136
25742: PUSH
25743: LD_INT 1
25745: ST_TO_ADDR
// minersList := [ ] ;
25746: LD_ADDR_EXP 137
25750: PUSH
25751: EMPTY
25752: ST_TO_ADDR
// minerMinesList := [ ] ;
25753: LD_ADDR_EXP 138
25757: PUSH
25758: EMPTY
25759: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25760: LD_ADDR_EXP 139
25764: PUSH
25765: LD_INT 5
25767: ST_TO_ADDR
// end ;
25768: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25769: LD_EXP 136
25773: PUSH
25774: LD_INT 34
25776: PUSH
25777: LD_EXP 59
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 69
25790: AND
25791: IFFALSE 26254
25793: GO 25795
25795: DISABLE
25796: LD_INT 0
25798: PPUSH
25799: PPUSH
25800: PPUSH
25801: PPUSH
// begin enable ;
25802: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25803: LD_ADDR_VAR 0 1
25807: PUSH
25808: LD_INT 34
25810: PUSH
25811: LD_EXP 59
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PPUSH
25820: CALL_OW 69
25824: PUSH
25825: FOR_IN
25826: IFFALSE 25898
// begin if not i in minersList then
25828: LD_VAR 0 1
25832: PUSH
25833: LD_EXP 137
25837: IN
25838: NOT
25839: IFFALSE 25896
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25841: LD_ADDR_EXP 137
25845: PUSH
25846: LD_EXP 137
25850: PPUSH
25851: LD_EXP 137
25855: PUSH
25856: LD_INT 1
25858: PLUS
25859: PPUSH
25860: LD_VAR 0 1
25864: PPUSH
25865: CALL_OW 1
25869: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25870: LD_ADDR_EXP 138
25874: PUSH
25875: LD_EXP 138
25879: PPUSH
25880: LD_EXP 138
25884: PUSH
25885: LD_INT 1
25887: PLUS
25888: PPUSH
25889: EMPTY
25890: PPUSH
25891: CALL_OW 1
25895: ST_TO_ADDR
// end end ;
25896: GO 25825
25898: POP
25899: POP
// for i := minerMinesList downto 1 do
25900: LD_ADDR_VAR 0 1
25904: PUSH
25905: DOUBLE
25906: LD_EXP 138
25910: INC
25911: ST_TO_ADDR
25912: LD_INT 1
25914: PUSH
25915: FOR_DOWNTO
25916: IFFALSE 26252
// begin if IsLive ( minersList [ i ] ) then
25918: LD_EXP 137
25922: PUSH
25923: LD_VAR 0 1
25927: ARRAY
25928: PPUSH
25929: CALL_OW 300
25933: IFFALSE 25961
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25935: LD_EXP 137
25939: PUSH
25940: LD_VAR 0 1
25944: ARRAY
25945: PPUSH
25946: LD_EXP 138
25950: PUSH
25951: LD_VAR 0 1
25955: ARRAY
25956: PPUSH
25957: CALL_OW 505
// if not minerMinesList [ i ] then
25961: LD_EXP 138
25965: PUSH
25966: LD_VAR 0 1
25970: ARRAY
25971: NOT
25972: IFFALSE 25976
// continue ;
25974: GO 25915
// for j := minerMinesList [ i ] downto 1 do
25976: LD_ADDR_VAR 0 2
25980: PUSH
25981: DOUBLE
25982: LD_EXP 138
25986: PUSH
25987: LD_VAR 0 1
25991: ARRAY
25992: INC
25993: ST_TO_ADDR
25994: LD_INT 1
25996: PUSH
25997: FOR_DOWNTO
25998: IFFALSE 26248
// begin side := GetSide ( minersList [ i ] ) ;
26000: LD_ADDR_VAR 0 3
26004: PUSH
26005: LD_EXP 137
26009: PUSH
26010: LD_VAR 0 1
26014: ARRAY
26015: PPUSH
26016: CALL_OW 255
26020: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26021: LD_ADDR_VAR 0 4
26025: PUSH
26026: LD_EXP 138
26030: PUSH
26031: LD_VAR 0 1
26035: ARRAY
26036: PUSH
26037: LD_VAR 0 2
26041: ARRAY
26042: PUSH
26043: LD_INT 1
26045: ARRAY
26046: PPUSH
26047: LD_EXP 138
26051: PUSH
26052: LD_VAR 0 1
26056: ARRAY
26057: PUSH
26058: LD_VAR 0 2
26062: ARRAY
26063: PUSH
26064: LD_INT 2
26066: ARRAY
26067: PPUSH
26068: CALL_OW 428
26072: ST_TO_ADDR
// if not tmp then
26073: LD_VAR 0 4
26077: NOT
26078: IFFALSE 26082
// continue ;
26080: GO 25997
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26082: LD_VAR 0 4
26086: PUSH
26087: LD_INT 81
26089: PUSH
26090: LD_VAR 0 3
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PPUSH
26099: CALL_OW 69
26103: IN
26104: PUSH
26105: LD_EXP 138
26109: PUSH
26110: LD_VAR 0 1
26114: ARRAY
26115: PUSH
26116: LD_VAR 0 2
26120: ARRAY
26121: PUSH
26122: LD_INT 1
26124: ARRAY
26125: PPUSH
26126: LD_EXP 138
26130: PUSH
26131: LD_VAR 0 1
26135: ARRAY
26136: PUSH
26137: LD_VAR 0 2
26141: ARRAY
26142: PUSH
26143: LD_INT 2
26145: ARRAY
26146: PPUSH
26147: CALL_OW 458
26151: AND
26152: IFFALSE 26246
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26154: LD_EXP 138
26158: PUSH
26159: LD_VAR 0 1
26163: ARRAY
26164: PUSH
26165: LD_VAR 0 2
26169: ARRAY
26170: PUSH
26171: LD_INT 1
26173: ARRAY
26174: PPUSH
26175: LD_EXP 138
26179: PUSH
26180: LD_VAR 0 1
26184: ARRAY
26185: PUSH
26186: LD_VAR 0 2
26190: ARRAY
26191: PUSH
26192: LD_INT 2
26194: ARRAY
26195: PPUSH
26196: LD_VAR 0 3
26200: PPUSH
26201: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26205: LD_ADDR_EXP 138
26209: PUSH
26210: LD_EXP 138
26214: PPUSH
26215: LD_VAR 0 1
26219: PPUSH
26220: LD_EXP 138
26224: PUSH
26225: LD_VAR 0 1
26229: ARRAY
26230: PPUSH
26231: LD_VAR 0 2
26235: PPUSH
26236: CALL_OW 3
26240: PPUSH
26241: CALL_OW 1
26245: ST_TO_ADDR
// end ; end ;
26246: GO 25997
26248: POP
26249: POP
// end ;
26250: GO 25915
26252: POP
26253: POP
// end ;
26254: PPOPN 4
26256: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26257: LD_INT 0
26259: PPUSH
26260: PPUSH
// result := false ;
26261: LD_ADDR_VAR 0 4
26265: PUSH
26266: LD_INT 0
26268: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 264
26278: PUSH
26279: LD_EXP 59
26283: EQUAL
26284: NOT
26285: IFFALSE 26289
// exit ;
26287: GO 26529
// index := GetElementIndex ( minersList , unit ) ;
26289: LD_ADDR_VAR 0 5
26293: PUSH
26294: LD_EXP 137
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL 32513 0 2
26308: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26309: LD_EXP 138
26313: PUSH
26314: LD_VAR 0 5
26318: ARRAY
26319: PUSH
26320: LD_EXP 139
26324: GREATEREQUAL
26325: IFFALSE 26329
// exit ;
26327: GO 26529
// ComMoveXY ( unit , x , y ) ;
26329: LD_VAR 0 1
26333: PPUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: LD_VAR 0 3
26343: PPUSH
26344: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26348: LD_INT 35
26350: PPUSH
26351: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 2
26364: PPUSH
26365: LD_VAR 0 3
26369: PPUSH
26370: CALL 63285 0 3
26374: NOT
26375: PUSH
26376: LD_VAR 0 1
26380: PPUSH
26381: CALL_OW 314
26385: AND
26386: IFFALSE 26390
// exit ;
26388: GO 26529
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26390: LD_VAR 0 2
26394: PPUSH
26395: LD_VAR 0 3
26399: PPUSH
26400: CALL_OW 428
26404: PUSH
26405: LD_VAR 0 1
26409: EQUAL
26410: PUSH
26411: LD_VAR 0 1
26415: PPUSH
26416: CALL_OW 314
26420: NOT
26421: AND
26422: IFFALSE 26348
// PlaySoundXY ( x , y , PlantMine ) ;
26424: LD_VAR 0 2
26428: PPUSH
26429: LD_VAR 0 3
26433: PPUSH
26434: LD_STRING PlantMine
26436: PPUSH
26437: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26441: LD_VAR 0 2
26445: PPUSH
26446: LD_VAR 0 3
26450: PPUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 255
26460: PPUSH
26461: LD_INT 0
26463: PPUSH
26464: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26468: LD_ADDR_EXP 138
26472: PUSH
26473: LD_EXP 138
26477: PPUSH
26478: LD_VAR 0 5
26482: PUSH
26483: LD_EXP 138
26487: PUSH
26488: LD_VAR 0 5
26492: ARRAY
26493: PUSH
26494: LD_INT 1
26496: PLUS
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PPUSH
26502: LD_VAR 0 2
26506: PUSH
26507: LD_VAR 0 3
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PPUSH
26516: CALL 32728 0 3
26520: ST_TO_ADDR
// result := true ;
26521: LD_ADDR_VAR 0 4
26525: PUSH
26526: LD_INT 1
26528: ST_TO_ADDR
// end ;
26529: LD_VAR 0 4
26533: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26534: LD_INT 0
26536: PPUSH
26537: PPUSH
26538: PPUSH
// if not unit in minersList then
26539: LD_VAR 0 1
26543: PUSH
26544: LD_EXP 137
26548: IN
26549: NOT
26550: IFFALSE 26554
// exit ;
26552: GO 26946
// index := GetElementIndex ( minersList , unit ) ;
26554: LD_ADDR_VAR 0 6
26558: PUSH
26559: LD_EXP 137
26563: PPUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: CALL 32513 0 2
26573: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26574: LD_ADDR_VAR 0 5
26578: PUSH
26579: DOUBLE
26580: LD_EXP 138
26584: PUSH
26585: LD_VAR 0 6
26589: ARRAY
26590: INC
26591: ST_TO_ADDR
26592: LD_INT 1
26594: PUSH
26595: FOR_DOWNTO
26596: IFFALSE 26757
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26598: LD_EXP 138
26602: PUSH
26603: LD_VAR 0 6
26607: ARRAY
26608: PUSH
26609: LD_VAR 0 5
26613: ARRAY
26614: PUSH
26615: LD_INT 1
26617: ARRAY
26618: PUSH
26619: LD_VAR 0 2
26623: EQUAL
26624: PUSH
26625: LD_EXP 138
26629: PUSH
26630: LD_VAR 0 6
26634: ARRAY
26635: PUSH
26636: LD_VAR 0 5
26640: ARRAY
26641: PUSH
26642: LD_INT 2
26644: ARRAY
26645: PUSH
26646: LD_VAR 0 3
26650: EQUAL
26651: AND
26652: IFFALSE 26755
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26654: LD_EXP 138
26658: PUSH
26659: LD_VAR 0 6
26663: ARRAY
26664: PUSH
26665: LD_VAR 0 5
26669: ARRAY
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: LD_EXP 138
26679: PUSH
26680: LD_VAR 0 6
26684: ARRAY
26685: PUSH
26686: LD_VAR 0 5
26690: ARRAY
26691: PUSH
26692: LD_INT 2
26694: ARRAY
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 255
26705: PPUSH
26706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26710: LD_ADDR_EXP 138
26714: PUSH
26715: LD_EXP 138
26719: PPUSH
26720: LD_VAR 0 6
26724: PPUSH
26725: LD_EXP 138
26729: PUSH
26730: LD_VAR 0 6
26734: ARRAY
26735: PPUSH
26736: LD_VAR 0 5
26740: PPUSH
26741: CALL_OW 3
26745: PPUSH
26746: CALL_OW 1
26750: ST_TO_ADDR
// exit ;
26751: POP
26752: POP
26753: GO 26946
// end ; end ;
26755: GO 26595
26757: POP
26758: POP
// for i := minerMinesList [ index ] downto 1 do
26759: LD_ADDR_VAR 0 5
26763: PUSH
26764: DOUBLE
26765: LD_EXP 138
26769: PUSH
26770: LD_VAR 0 6
26774: ARRAY
26775: INC
26776: ST_TO_ADDR
26777: LD_INT 1
26779: PUSH
26780: FOR_DOWNTO
26781: IFFALSE 26944
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26783: LD_EXP 138
26787: PUSH
26788: LD_VAR 0 6
26792: ARRAY
26793: PUSH
26794: LD_VAR 0 5
26798: ARRAY
26799: PUSH
26800: LD_INT 1
26802: ARRAY
26803: PPUSH
26804: LD_EXP 138
26808: PUSH
26809: LD_VAR 0 6
26813: ARRAY
26814: PUSH
26815: LD_VAR 0 5
26819: ARRAY
26820: PUSH
26821: LD_INT 2
26823: ARRAY
26824: PPUSH
26825: LD_VAR 0 2
26829: PPUSH
26830: LD_VAR 0 3
26834: PPUSH
26835: CALL_OW 298
26839: PUSH
26840: LD_INT 6
26842: LESS
26843: IFFALSE 26942
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26845: LD_EXP 138
26849: PUSH
26850: LD_VAR 0 6
26854: ARRAY
26855: PUSH
26856: LD_VAR 0 5
26860: ARRAY
26861: PUSH
26862: LD_INT 1
26864: ARRAY
26865: PPUSH
26866: LD_EXP 138
26870: PUSH
26871: LD_VAR 0 6
26875: ARRAY
26876: PUSH
26877: LD_VAR 0 5
26881: ARRAY
26882: PUSH
26883: LD_INT 2
26885: ARRAY
26886: PPUSH
26887: LD_VAR 0 1
26891: PPUSH
26892: CALL_OW 255
26896: PPUSH
26897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26901: LD_ADDR_EXP 138
26905: PUSH
26906: LD_EXP 138
26910: PPUSH
26911: LD_VAR 0 6
26915: PPUSH
26916: LD_EXP 138
26920: PUSH
26921: LD_VAR 0 6
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 5
26931: PPUSH
26932: CALL_OW 3
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// end ; end ;
26942: GO 26780
26944: POP
26945: POP
// end ;
26946: LD_VAR 0 4
26950: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26951: LD_INT 0
26953: PPUSH
26954: PPUSH
26955: PPUSH
26956: PPUSH
26957: PPUSH
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26962: LD_VAR 0 1
26966: PPUSH
26967: CALL_OW 264
26971: PUSH
26972: LD_EXP 59
26976: EQUAL
26977: NOT
26978: PUSH
26979: LD_VAR 0 1
26983: PUSH
26984: LD_EXP 137
26988: IN
26989: NOT
26990: OR
26991: IFFALSE 26995
// exit ;
26993: GO 27317
// index := GetElementIndex ( minersList , unit ) ;
26995: LD_ADDR_VAR 0 6
26999: PUSH
27000: LD_EXP 137
27004: PPUSH
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL 32513 0 2
27014: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27015: LD_ADDR_VAR 0 8
27019: PUSH
27020: LD_EXP 139
27024: PUSH
27025: LD_EXP 138
27029: PUSH
27030: LD_VAR 0 6
27034: ARRAY
27035: MINUS
27036: ST_TO_ADDR
// if not minesFreeAmount then
27037: LD_VAR 0 8
27041: NOT
27042: IFFALSE 27046
// exit ;
27044: GO 27317
// tmp := [ ] ;
27046: LD_ADDR_VAR 0 7
27050: PUSH
27051: EMPTY
27052: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27053: LD_ADDR_VAR 0 5
27057: PUSH
27058: DOUBLE
27059: LD_INT 1
27061: DEC
27062: ST_TO_ADDR
27063: LD_VAR 0 8
27067: PUSH
27068: FOR_TO
27069: IFFALSE 27264
// begin _d := rand ( 0 , 5 ) ;
27071: LD_ADDR_VAR 0 11
27075: PUSH
27076: LD_INT 0
27078: PPUSH
27079: LD_INT 5
27081: PPUSH
27082: CALL_OW 12
27086: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27087: LD_ADDR_VAR 0 12
27091: PUSH
27092: LD_INT 2
27094: PPUSH
27095: LD_INT 6
27097: PPUSH
27098: CALL_OW 12
27102: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27103: LD_ADDR_VAR 0 9
27107: PUSH
27108: LD_VAR 0 2
27112: PPUSH
27113: LD_VAR 0 11
27117: PPUSH
27118: LD_VAR 0 12
27122: PPUSH
27123: CALL_OW 272
27127: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27128: LD_ADDR_VAR 0 10
27132: PUSH
27133: LD_VAR 0 3
27137: PPUSH
27138: LD_VAR 0 11
27142: PPUSH
27143: LD_VAR 0 12
27147: PPUSH
27148: CALL_OW 273
27152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27153: LD_VAR 0 9
27157: PPUSH
27158: LD_VAR 0 10
27162: PPUSH
27163: CALL_OW 488
27167: PUSH
27168: LD_VAR 0 9
27172: PUSH
27173: LD_VAR 0 10
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_VAR 0 7
27186: IN
27187: NOT
27188: AND
27189: PUSH
27190: LD_VAR 0 9
27194: PPUSH
27195: LD_VAR 0 10
27199: PPUSH
27200: CALL_OW 458
27204: NOT
27205: AND
27206: IFFALSE 27248
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27208: LD_ADDR_VAR 0 7
27212: PUSH
27213: LD_VAR 0 7
27217: PPUSH
27218: LD_VAR 0 7
27222: PUSH
27223: LD_INT 1
27225: PLUS
27226: PPUSH
27227: LD_VAR 0 9
27231: PUSH
27232: LD_VAR 0 10
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 1
27245: ST_TO_ADDR
27246: GO 27262
// i := i - 1 ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_VAR 0 5
27257: PUSH
27258: LD_INT 1
27260: MINUS
27261: ST_TO_ADDR
// end ;
27262: GO 27068
27264: POP
27265: POP
// for i in tmp do
27266: LD_ADDR_VAR 0 5
27270: PUSH
27271: LD_VAR 0 7
27275: PUSH
27276: FOR_IN
27277: IFFALSE 27315
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27279: LD_VAR 0 1
27283: PPUSH
27284: LD_VAR 0 5
27288: PUSH
27289: LD_INT 1
27291: ARRAY
27292: PPUSH
27293: LD_VAR 0 5
27297: PUSH
27298: LD_INT 2
27300: ARRAY
27301: PPUSH
27302: CALL 26257 0 3
27306: NOT
27307: IFFALSE 27313
// exit ;
27309: POP
27310: POP
27311: GO 27317
27313: GO 27276
27315: POP
27316: POP
// end ;
27317: LD_VAR 0 4
27321: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27322: LD_INT 0
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
// if not GetClass ( unit ) = class_sniper then
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 257
27340: PUSH
27341: LD_INT 5
27343: EQUAL
27344: NOT
27345: IFFALSE 27349
// exit ;
27347: GO 27737
// dist := 8 ;
27349: LD_ADDR_VAR 0 5
27353: PUSH
27354: LD_INT 8
27356: ST_TO_ADDR
// viewRange := 12 ;
27357: LD_ADDR_VAR 0 7
27361: PUSH
27362: LD_INT 12
27364: ST_TO_ADDR
// side := GetSide ( unit ) ;
27365: LD_ADDR_VAR 0 6
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 255
27379: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27380: LD_INT 61
27382: PPUSH
27383: LD_VAR 0 6
27387: PPUSH
27388: CALL_OW 321
27392: PUSH
27393: LD_INT 2
27395: EQUAL
27396: IFFALSE 27406
// viewRange := 16 ;
27398: LD_ADDR_VAR 0 7
27402: PUSH
27403: LD_INT 16
27405: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27406: LD_VAR 0 1
27410: PPUSH
27411: LD_VAR 0 2
27415: PPUSH
27416: LD_VAR 0 3
27420: PPUSH
27421: CALL_OW 297
27425: PUSH
27426: LD_VAR 0 5
27430: GREATER
27431: IFFALSE 27510
// begin ComMoveXY ( unit , x , y ) ;
27433: LD_VAR 0 1
27437: PPUSH
27438: LD_VAR 0 2
27442: PPUSH
27443: LD_VAR 0 3
27447: PPUSH
27448: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27452: LD_INT 35
27454: PPUSH
27455: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27459: LD_VAR 0 1
27463: PPUSH
27464: LD_VAR 0 2
27468: PPUSH
27469: LD_VAR 0 3
27473: PPUSH
27474: CALL 63285 0 3
27478: NOT
27479: IFFALSE 27483
// exit ;
27481: GO 27737
// until GetDistUnitXY ( unit , x , y ) < dist ;
27483: LD_VAR 0 1
27487: PPUSH
27488: LD_VAR 0 2
27492: PPUSH
27493: LD_VAR 0 3
27497: PPUSH
27498: CALL_OW 297
27502: PUSH
27503: LD_VAR 0 5
27507: LESS
27508: IFFALSE 27452
// end ; ComTurnXY ( unit , x , y ) ;
27510: LD_VAR 0 1
27514: PPUSH
27515: LD_VAR 0 2
27519: PPUSH
27520: LD_VAR 0 3
27524: PPUSH
27525: CALL_OW 118
// wait ( 5 ) ;
27529: LD_INT 5
27531: PPUSH
27532: CALL_OW 67
// _d := GetDir ( unit ) ;
27536: LD_ADDR_VAR 0 10
27540: PUSH
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 254
27550: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27551: LD_ADDR_VAR 0 8
27555: PUSH
27556: LD_VAR 0 1
27560: PPUSH
27561: CALL_OW 250
27565: PPUSH
27566: LD_VAR 0 10
27570: PPUSH
27571: LD_VAR 0 5
27575: PPUSH
27576: CALL_OW 272
27580: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27581: LD_ADDR_VAR 0 9
27585: PUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 251
27595: PPUSH
27596: LD_VAR 0 10
27600: PPUSH
27601: LD_VAR 0 5
27605: PPUSH
27606: CALL_OW 273
27610: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27611: LD_VAR 0 8
27615: PPUSH
27616: LD_VAR 0 9
27620: PPUSH
27621: CALL_OW 488
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27737
// ComAnimCustom ( unit , 1 ) ;
27630: LD_VAR 0 1
27634: PPUSH
27635: LD_INT 1
27637: PPUSH
27638: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27642: LD_VAR 0 8
27646: PPUSH
27647: LD_VAR 0 9
27651: PPUSH
27652: LD_VAR 0 6
27656: PPUSH
27657: LD_VAR 0 7
27661: PPUSH
27662: CALL_OW 330
// repeat wait ( 1 ) ;
27666: LD_INT 1
27668: PPUSH
27669: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27673: LD_VAR 0 1
27677: PPUSH
27678: CALL_OW 316
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 314
27692: OR
27693: PUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 302
27703: NOT
27704: OR
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 301
27715: OR
27716: IFFALSE 27666
// RemoveSeeing ( _x , _y , side ) ;
27718: LD_VAR 0 8
27722: PPUSH
27723: LD_VAR 0 9
27727: PPUSH
27728: LD_VAR 0 6
27732: PPUSH
27733: CALL_OW 331
// end ; end_of_file
27737: LD_VAR 0 4
27741: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27742: LD_INT 0
27744: PPUSH
27745: PPUSH
// if exist_mode then
27746: LD_VAR 0 2
27750: IFFALSE 27775
// unit := CreateCharacter ( prefix & ident ) else
27752: LD_ADDR_VAR 0 5
27756: PUSH
27757: LD_VAR 0 3
27761: PUSH
27762: LD_VAR 0 1
27766: STR
27767: PPUSH
27768: CALL_OW 34
27772: ST_TO_ADDR
27773: GO 27790
// unit := NewCharacter ( ident ) ;
27775: LD_ADDR_VAR 0 5
27779: PUSH
27780: LD_VAR 0 1
27784: PPUSH
27785: CALL_OW 25
27789: ST_TO_ADDR
// result := unit ;
27790: LD_ADDR_VAR 0 4
27794: PUSH
27795: LD_VAR 0 5
27799: ST_TO_ADDR
// end ;
27800: LD_VAR 0 4
27804: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27805: LD_INT 0
27807: PPUSH
27808: PPUSH
// if not side or not nation then
27809: LD_VAR 0 1
27813: NOT
27814: PUSH
27815: LD_VAR 0 2
27819: NOT
27820: OR
27821: IFFALSE 27825
// exit ;
27823: GO 28593
// case nation of nation_american :
27825: LD_VAR 0 2
27829: PUSH
27830: LD_INT 1
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27838
27836: GO 28052
27838: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27839: LD_ADDR_VAR 0 4
27843: PUSH
27844: LD_INT 35
27846: PUSH
27847: LD_INT 45
27849: PUSH
27850: LD_INT 46
27852: PUSH
27853: LD_INT 47
27855: PUSH
27856: LD_INT 82
27858: PUSH
27859: LD_INT 83
27861: PUSH
27862: LD_INT 84
27864: PUSH
27865: LD_INT 85
27867: PUSH
27868: LD_INT 86
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 6
27879: PUSH
27880: LD_INT 15
27882: PUSH
27883: LD_INT 16
27885: PUSH
27886: LD_INT 7
27888: PUSH
27889: LD_INT 12
27891: PUSH
27892: LD_INT 13
27894: PUSH
27895: LD_INT 10
27897: PUSH
27898: LD_INT 14
27900: PUSH
27901: LD_INT 20
27903: PUSH
27904: LD_INT 21
27906: PUSH
27907: LD_INT 22
27909: PUSH
27910: LD_INT 25
27912: PUSH
27913: LD_INT 32
27915: PUSH
27916: LD_INT 27
27918: PUSH
27919: LD_INT 36
27921: PUSH
27922: LD_INT 69
27924: PUSH
27925: LD_INT 39
27927: PUSH
27928: LD_INT 34
27930: PUSH
27931: LD_INT 40
27933: PUSH
27934: LD_INT 48
27936: PUSH
27937: LD_INT 49
27939: PUSH
27940: LD_INT 50
27942: PUSH
27943: LD_INT 51
27945: PUSH
27946: LD_INT 52
27948: PUSH
27949: LD_INT 53
27951: PUSH
27952: LD_INT 54
27954: PUSH
27955: LD_INT 55
27957: PUSH
27958: LD_INT 56
27960: PUSH
27961: LD_INT 57
27963: PUSH
27964: LD_INT 58
27966: PUSH
27967: LD_INT 59
27969: PUSH
27970: LD_INT 60
27972: PUSH
27973: LD_INT 61
27975: PUSH
27976: LD_INT 62
27978: PUSH
27979: LD_INT 80
27981: PUSH
27982: LD_INT 82
27984: PUSH
27985: LD_INT 83
27987: PUSH
27988: LD_INT 84
27990: PUSH
27991: LD_INT 85
27993: PUSH
27994: LD_INT 86
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: ST_TO_ADDR
28050: GO 28517
28052: LD_INT 2
28054: DOUBLE
28055: EQUAL
28056: IFTRUE 28060
28058: GO 28286
28060: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28061: LD_ADDR_VAR 0 4
28065: PUSH
28066: LD_INT 35
28068: PUSH
28069: LD_INT 45
28071: PUSH
28072: LD_INT 46
28074: PUSH
28075: LD_INT 47
28077: PUSH
28078: LD_INT 82
28080: PUSH
28081: LD_INT 83
28083: PUSH
28084: LD_INT 84
28086: PUSH
28087: LD_INT 85
28089: PUSH
28090: LD_INT 87
28092: PUSH
28093: LD_INT 70
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 11
28101: PUSH
28102: LD_INT 3
28104: PUSH
28105: LD_INT 4
28107: PUSH
28108: LD_INT 5
28110: PUSH
28111: LD_INT 6
28113: PUSH
28114: LD_INT 15
28116: PUSH
28117: LD_INT 18
28119: PUSH
28120: LD_INT 7
28122: PUSH
28123: LD_INT 17
28125: PUSH
28126: LD_INT 8
28128: PUSH
28129: LD_INT 20
28131: PUSH
28132: LD_INT 21
28134: PUSH
28135: LD_INT 22
28137: PUSH
28138: LD_INT 72
28140: PUSH
28141: LD_INT 26
28143: PUSH
28144: LD_INT 69
28146: PUSH
28147: LD_INT 39
28149: PUSH
28150: LD_INT 40
28152: PUSH
28153: LD_INT 41
28155: PUSH
28156: LD_INT 42
28158: PUSH
28159: LD_INT 43
28161: PUSH
28162: LD_INT 48
28164: PUSH
28165: LD_INT 49
28167: PUSH
28168: LD_INT 50
28170: PUSH
28171: LD_INT 51
28173: PUSH
28174: LD_INT 52
28176: PUSH
28177: LD_INT 53
28179: PUSH
28180: LD_INT 54
28182: PUSH
28183: LD_INT 55
28185: PUSH
28186: LD_INT 56
28188: PUSH
28189: LD_INT 60
28191: PUSH
28192: LD_INT 61
28194: PUSH
28195: LD_INT 62
28197: PUSH
28198: LD_INT 66
28200: PUSH
28201: LD_INT 67
28203: PUSH
28204: LD_INT 68
28206: PUSH
28207: LD_INT 81
28209: PUSH
28210: LD_INT 82
28212: PUSH
28213: LD_INT 83
28215: PUSH
28216: LD_INT 84
28218: PUSH
28219: LD_INT 85
28221: PUSH
28222: LD_INT 87
28224: PUSH
28225: LD_INT 88
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
28284: GO 28517
28286: LD_INT 3
28288: DOUBLE
28289: EQUAL
28290: IFTRUE 28294
28292: GO 28516
28294: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28295: LD_ADDR_VAR 0 4
28299: PUSH
28300: LD_INT 46
28302: PUSH
28303: LD_INT 47
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 2
28311: PUSH
28312: LD_INT 82
28314: PUSH
28315: LD_INT 83
28317: PUSH
28318: LD_INT 84
28320: PUSH
28321: LD_INT 85
28323: PUSH
28324: LD_INT 86
28326: PUSH
28327: LD_INT 11
28329: PUSH
28330: LD_INT 9
28332: PUSH
28333: LD_INT 20
28335: PUSH
28336: LD_INT 19
28338: PUSH
28339: LD_INT 21
28341: PUSH
28342: LD_INT 24
28344: PUSH
28345: LD_INT 22
28347: PUSH
28348: LD_INT 25
28350: PUSH
28351: LD_INT 28
28353: PUSH
28354: LD_INT 29
28356: PUSH
28357: LD_INT 30
28359: PUSH
28360: LD_INT 31
28362: PUSH
28363: LD_INT 37
28365: PUSH
28366: LD_INT 38
28368: PUSH
28369: LD_INT 32
28371: PUSH
28372: LD_INT 27
28374: PUSH
28375: LD_INT 33
28377: PUSH
28378: LD_INT 69
28380: PUSH
28381: LD_INT 39
28383: PUSH
28384: LD_INT 34
28386: PUSH
28387: LD_INT 40
28389: PUSH
28390: LD_INT 71
28392: PUSH
28393: LD_INT 23
28395: PUSH
28396: LD_INT 44
28398: PUSH
28399: LD_INT 48
28401: PUSH
28402: LD_INT 49
28404: PUSH
28405: LD_INT 50
28407: PUSH
28408: LD_INT 51
28410: PUSH
28411: LD_INT 52
28413: PUSH
28414: LD_INT 53
28416: PUSH
28417: LD_INT 54
28419: PUSH
28420: LD_INT 55
28422: PUSH
28423: LD_INT 56
28425: PUSH
28426: LD_INT 57
28428: PUSH
28429: LD_INT 58
28431: PUSH
28432: LD_INT 59
28434: PUSH
28435: LD_INT 63
28437: PUSH
28438: LD_INT 64
28440: PUSH
28441: LD_INT 65
28443: PUSH
28444: LD_INT 82
28446: PUSH
28447: LD_INT 83
28449: PUSH
28450: LD_INT 84
28452: PUSH
28453: LD_INT 85
28455: PUSH
28456: LD_INT 86
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
28514: GO 28517
28516: POP
// if state > - 1 and state < 3 then
28517: LD_VAR 0 3
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: GREATER
28526: PUSH
28527: LD_VAR 0 3
28531: PUSH
28532: LD_INT 3
28534: LESS
28535: AND
28536: IFFALSE 28593
// for i in result do
28538: LD_ADDR_VAR 0 5
28542: PUSH
28543: LD_VAR 0 4
28547: PUSH
28548: FOR_IN
28549: IFFALSE 28591
// if GetTech ( i , side ) <> state then
28551: LD_VAR 0 5
28555: PPUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 321
28565: PUSH
28566: LD_VAR 0 3
28570: NONEQUAL
28571: IFFALSE 28589
// result := result diff i ;
28573: LD_ADDR_VAR 0 4
28577: PUSH
28578: LD_VAR 0 4
28582: PUSH
28583: LD_VAR 0 5
28587: DIFF
28588: ST_TO_ADDR
28589: GO 28548
28591: POP
28592: POP
// end ;
28593: LD_VAR 0 4
28597: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28598: LD_INT 0
28600: PPUSH
28601: PPUSH
28602: PPUSH
// result := true ;
28603: LD_ADDR_VAR 0 3
28607: PUSH
28608: LD_INT 1
28610: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28611: LD_ADDR_VAR 0 5
28615: PUSH
28616: LD_VAR 0 2
28620: PPUSH
28621: CALL_OW 480
28625: ST_TO_ADDR
// if not tmp then
28626: LD_VAR 0 5
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 28684
// for i in tmp do
28635: LD_ADDR_VAR 0 4
28639: PUSH
28640: LD_VAR 0 5
28644: PUSH
28645: FOR_IN
28646: IFFALSE 28682
// if GetTech ( i , side ) <> state_researched then
28648: LD_VAR 0 4
28652: PPUSH
28653: LD_VAR 0 1
28657: PPUSH
28658: CALL_OW 321
28662: PUSH
28663: LD_INT 2
28665: NONEQUAL
28666: IFFALSE 28680
// begin result := false ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 0
28675: ST_TO_ADDR
// exit ;
28676: POP
28677: POP
28678: GO 28684
// end ;
28680: GO 28645
28682: POP
28683: POP
// end ;
28684: LD_VAR 0 3
28688: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28689: LD_INT 0
28691: PPUSH
28692: PPUSH
28693: PPUSH
28694: PPUSH
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
28701: PPUSH
28702: PPUSH
28703: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28704: LD_VAR 0 1
28708: NOT
28709: PUSH
28710: LD_VAR 0 1
28714: PPUSH
28715: CALL_OW 257
28719: PUSH
28720: LD_INT 9
28722: NONEQUAL
28723: OR
28724: IFFALSE 28728
// exit ;
28726: GO 29301
// side := GetSide ( unit ) ;
28728: LD_ADDR_VAR 0 9
28732: PUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 255
28742: ST_TO_ADDR
// tech_space := tech_spacanom ;
28743: LD_ADDR_VAR 0 12
28747: PUSH
28748: LD_INT 29
28750: ST_TO_ADDR
// tech_time := tech_taurad ;
28751: LD_ADDR_VAR 0 13
28755: PUSH
28756: LD_INT 28
28758: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28759: LD_ADDR_VAR 0 11
28763: PUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 310
28773: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28774: LD_VAR 0 11
28778: PPUSH
28779: CALL_OW 247
28783: PUSH
28784: LD_INT 2
28786: EQUAL
28787: IFFALSE 28791
// exit ;
28789: GO 29301
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28791: LD_ADDR_VAR 0 8
28795: PUSH
28796: LD_INT 81
28798: PUSH
28799: LD_VAR 0 9
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: LD_INT 21
28813: PUSH
28814: LD_INT 3
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PPUSH
28829: CALL_OW 69
28833: ST_TO_ADDR
// if not tmp then
28834: LD_VAR 0 8
28838: NOT
28839: IFFALSE 28843
// exit ;
28841: GO 29301
// if in_unit then
28843: LD_VAR 0 11
28847: IFFALSE 28871
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28849: LD_ADDR_VAR 0 10
28853: PUSH
28854: LD_VAR 0 8
28858: PPUSH
28859: LD_VAR 0 11
28863: PPUSH
28864: CALL_OW 74
28868: ST_TO_ADDR
28869: GO 28891
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28871: LD_ADDR_VAR 0 10
28875: PUSH
28876: LD_VAR 0 8
28880: PPUSH
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 74
28890: ST_TO_ADDR
// if not enemy then
28891: LD_VAR 0 10
28895: NOT
28896: IFFALSE 28900
// exit ;
28898: GO 29301
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28900: LD_VAR 0 11
28904: PUSH
28905: LD_VAR 0 11
28909: PPUSH
28910: LD_VAR 0 10
28914: PPUSH
28915: CALL_OW 296
28919: PUSH
28920: LD_INT 13
28922: GREATER
28923: AND
28924: PUSH
28925: LD_VAR 0 1
28929: PPUSH
28930: LD_VAR 0 10
28934: PPUSH
28935: CALL_OW 296
28939: PUSH
28940: LD_INT 12
28942: GREATER
28943: OR
28944: IFFALSE 28948
// exit ;
28946: GO 29301
// missile := [ 1 ] ;
28948: LD_ADDR_VAR 0 14
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: EMPTY
28957: LIST
28958: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28959: LD_VAR 0 9
28963: PPUSH
28964: LD_VAR 0 12
28968: PPUSH
28969: CALL_OW 325
28973: IFFALSE 29002
// missile := Insert ( missile , missile + 1 , 2 ) ;
28975: LD_ADDR_VAR 0 14
28979: PUSH
28980: LD_VAR 0 14
28984: PPUSH
28985: LD_VAR 0 14
28989: PUSH
28990: LD_INT 1
28992: PLUS
28993: PPUSH
28994: LD_INT 2
28996: PPUSH
28997: CALL_OW 2
29001: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29002: LD_VAR 0 9
29006: PPUSH
29007: LD_VAR 0 13
29011: PPUSH
29012: CALL_OW 325
29016: PUSH
29017: LD_VAR 0 10
29021: PPUSH
29022: CALL_OW 255
29026: PPUSH
29027: LD_VAR 0 13
29031: PPUSH
29032: CALL_OW 325
29036: NOT
29037: AND
29038: IFFALSE 29067
// missile := Insert ( missile , missile + 1 , 3 ) ;
29040: LD_ADDR_VAR 0 14
29044: PUSH
29045: LD_VAR 0 14
29049: PPUSH
29050: LD_VAR 0 14
29054: PUSH
29055: LD_INT 1
29057: PLUS
29058: PPUSH
29059: LD_INT 3
29061: PPUSH
29062: CALL_OW 2
29066: ST_TO_ADDR
// if missile < 2 then
29067: LD_VAR 0 14
29071: PUSH
29072: LD_INT 2
29074: LESS
29075: IFFALSE 29079
// exit ;
29077: GO 29301
// x := GetX ( enemy ) ;
29079: LD_ADDR_VAR 0 4
29083: PUSH
29084: LD_VAR 0 10
29088: PPUSH
29089: CALL_OW 250
29093: ST_TO_ADDR
// y := GetY ( enemy ) ;
29094: LD_ADDR_VAR 0 5
29098: PUSH
29099: LD_VAR 0 10
29103: PPUSH
29104: CALL_OW 251
29108: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29109: LD_ADDR_VAR 0 6
29113: PUSH
29114: LD_VAR 0 4
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PPUSH
29123: LD_INT 1
29125: PPUSH
29126: CALL_OW 12
29130: PLUS
29131: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29132: LD_ADDR_VAR 0 7
29136: PUSH
29137: LD_VAR 0 5
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PPUSH
29146: LD_INT 1
29148: PPUSH
29149: CALL_OW 12
29153: PLUS
29154: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29155: LD_VAR 0 6
29159: PPUSH
29160: LD_VAR 0 7
29164: PPUSH
29165: CALL_OW 488
29169: NOT
29170: IFFALSE 29192
// begin _x := x ;
29172: LD_ADDR_VAR 0 6
29176: PUSH
29177: LD_VAR 0 4
29181: ST_TO_ADDR
// _y := y ;
29182: LD_ADDR_VAR 0 7
29186: PUSH
29187: LD_VAR 0 5
29191: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 1
29199: PPUSH
29200: LD_VAR 0 14
29204: PPUSH
29205: CALL_OW 12
29209: ST_TO_ADDR
// case i of 1 :
29210: LD_VAR 0 3
29214: PUSH
29215: LD_INT 1
29217: DOUBLE
29218: EQUAL
29219: IFTRUE 29223
29221: GO 29240
29223: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_VAR 0 10
29233: PPUSH
29234: CALL_OW 115
29238: GO 29301
29240: LD_INT 2
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29270
29248: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29249: LD_VAR 0 1
29253: PPUSH
29254: LD_VAR 0 6
29258: PPUSH
29259: LD_VAR 0 7
29263: PPUSH
29264: CALL_OW 153
29268: GO 29301
29270: LD_INT 3
29272: DOUBLE
29273: EQUAL
29274: IFTRUE 29278
29276: GO 29300
29278: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29279: LD_VAR 0 1
29283: PPUSH
29284: LD_VAR 0 6
29288: PPUSH
29289: LD_VAR 0 7
29293: PPUSH
29294: CALL_OW 154
29298: GO 29301
29300: POP
// end ;
29301: LD_VAR 0 2
29305: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
// if not unit or not building then
29314: LD_VAR 0 1
29318: NOT
29319: PUSH
29320: LD_VAR 0 2
29324: NOT
29325: OR
29326: IFFALSE 29330
// exit ;
29328: GO 29488
// x := GetX ( building ) ;
29330: LD_ADDR_VAR 0 5
29334: PUSH
29335: LD_VAR 0 2
29339: PPUSH
29340: CALL_OW 250
29344: ST_TO_ADDR
// y := GetY ( building ) ;
29345: LD_ADDR_VAR 0 6
29349: PUSH
29350: LD_VAR 0 2
29354: PPUSH
29355: CALL_OW 251
29359: ST_TO_ADDR
// for i = 0 to 5 do
29360: LD_ADDR_VAR 0 4
29364: PUSH
29365: DOUBLE
29366: LD_INT 0
29368: DEC
29369: ST_TO_ADDR
29370: LD_INT 5
29372: PUSH
29373: FOR_TO
29374: IFFALSE 29486
// begin _x := ShiftX ( x , i , 3 ) ;
29376: LD_ADDR_VAR 0 7
29380: PUSH
29381: LD_VAR 0 5
29385: PPUSH
29386: LD_VAR 0 4
29390: PPUSH
29391: LD_INT 3
29393: PPUSH
29394: CALL_OW 272
29398: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29399: LD_ADDR_VAR 0 8
29403: PUSH
29404: LD_VAR 0 6
29408: PPUSH
29409: LD_VAR 0 4
29413: PPUSH
29414: LD_INT 3
29416: PPUSH
29417: CALL_OW 273
29421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29422: LD_VAR 0 7
29426: PPUSH
29427: LD_VAR 0 8
29431: PPUSH
29432: CALL_OW 488
29436: NOT
29437: IFFALSE 29441
// continue ;
29439: GO 29373
// if HexInfo ( _x , _y ) = 0 then
29441: LD_VAR 0 7
29445: PPUSH
29446: LD_VAR 0 8
29450: PPUSH
29451: CALL_OW 428
29455: PUSH
29456: LD_INT 0
29458: EQUAL
29459: IFFALSE 29484
// begin ComMoveXY ( unit , _x , _y ) ;
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_VAR 0 7
29470: PPUSH
29471: LD_VAR 0 8
29475: PPUSH
29476: CALL_OW 111
// exit ;
29480: POP
29481: POP
29482: GO 29488
// end ; end ;
29484: GO 29373
29486: POP
29487: POP
// end ;
29488: LD_VAR 0 3
29492: RET
// export function ScanBase ( side , base_area ) ; begin
29493: LD_INT 0
29495: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29496: LD_ADDR_VAR 0 3
29500: PUSH
29501: LD_VAR 0 2
29505: PPUSH
29506: LD_INT 81
29508: PUSH
29509: LD_VAR 0 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PPUSH
29518: CALL_OW 70
29522: ST_TO_ADDR
// end ;
29523: LD_VAR 0 3
29527: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29528: LD_INT 0
29530: PPUSH
29531: PPUSH
29532: PPUSH
29533: PPUSH
// result := false ;
29534: LD_ADDR_VAR 0 2
29538: PUSH
29539: LD_INT 0
29541: ST_TO_ADDR
// side := GetSide ( unit ) ;
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_VAR 0 1
29551: PPUSH
29552: CALL_OW 255
29556: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29557: LD_ADDR_VAR 0 4
29561: PUSH
29562: LD_VAR 0 1
29566: PPUSH
29567: CALL_OW 248
29571: ST_TO_ADDR
// case nat of 1 :
29572: LD_VAR 0 4
29576: PUSH
29577: LD_INT 1
29579: DOUBLE
29580: EQUAL
29581: IFTRUE 29585
29583: GO 29596
29585: POP
// tech := tech_lassight ; 2 :
29586: LD_ADDR_VAR 0 5
29590: PUSH
29591: LD_INT 12
29593: ST_TO_ADDR
29594: GO 29635
29596: LD_INT 2
29598: DOUBLE
29599: EQUAL
29600: IFTRUE 29604
29602: GO 29615
29604: POP
// tech := tech_mortar ; 3 :
29605: LD_ADDR_VAR 0 5
29609: PUSH
29610: LD_INT 41
29612: ST_TO_ADDR
29613: GO 29635
29615: LD_INT 3
29617: DOUBLE
29618: EQUAL
29619: IFTRUE 29623
29621: GO 29634
29623: POP
// tech := tech_bazooka ; end ;
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: LD_INT 44
29631: ST_TO_ADDR
29632: GO 29635
29634: POP
// if Researched ( side , tech ) then
29635: LD_VAR 0 3
29639: PPUSH
29640: LD_VAR 0 5
29644: PPUSH
29645: CALL_OW 325
29649: IFFALSE 29676
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29651: LD_ADDR_VAR 0 2
29655: PUSH
29656: LD_INT 5
29658: PUSH
29659: LD_INT 8
29661: PUSH
29662: LD_INT 9
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: PUSH
29670: LD_VAR 0 4
29674: ARRAY
29675: ST_TO_ADDR
// end ;
29676: LD_VAR 0 2
29680: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29681: LD_INT 0
29683: PPUSH
29684: PPUSH
29685: PPUSH
// if not mines then
29686: LD_VAR 0 2
29690: NOT
29691: IFFALSE 29695
// exit ;
29693: GO 29839
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29695: LD_ADDR_VAR 0 5
29699: PUSH
29700: LD_INT 81
29702: PUSH
29703: LD_VAR 0 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 21
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PPUSH
29733: CALL_OW 69
29737: ST_TO_ADDR
// for i in mines do
29738: LD_ADDR_VAR 0 4
29742: PUSH
29743: LD_VAR 0 2
29747: PUSH
29748: FOR_IN
29749: IFFALSE 29837
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29751: LD_VAR 0 4
29755: PUSH
29756: LD_INT 1
29758: ARRAY
29759: PPUSH
29760: LD_VAR 0 4
29764: PUSH
29765: LD_INT 2
29767: ARRAY
29768: PPUSH
29769: CALL_OW 458
29773: NOT
29774: IFFALSE 29778
// continue ;
29776: GO 29748
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29778: LD_VAR 0 4
29782: PUSH
29783: LD_INT 1
29785: ARRAY
29786: PPUSH
29787: LD_VAR 0 4
29791: PUSH
29792: LD_INT 2
29794: ARRAY
29795: PPUSH
29796: CALL_OW 428
29800: PUSH
29801: LD_VAR 0 5
29805: IN
29806: IFFALSE 29835
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29808: LD_VAR 0 4
29812: PUSH
29813: LD_INT 1
29815: ARRAY
29816: PPUSH
29817: LD_VAR 0 4
29821: PUSH
29822: LD_INT 2
29824: ARRAY
29825: PPUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: CALL_OW 456
// end ;
29835: GO 29748
29837: POP
29838: POP
// end ;
29839: LD_VAR 0 3
29843: RET
// export function Count ( array ) ; var i ; begin
29844: LD_INT 0
29846: PPUSH
29847: PPUSH
// result := 0 ;
29848: LD_ADDR_VAR 0 2
29852: PUSH
29853: LD_INT 0
29855: ST_TO_ADDR
// for i in array do
29856: LD_ADDR_VAR 0 3
29860: PUSH
29861: LD_VAR 0 1
29865: PUSH
29866: FOR_IN
29867: IFFALSE 29891
// if i then
29869: LD_VAR 0 3
29873: IFFALSE 29889
// result := result + 1 ;
29875: LD_ADDR_VAR 0 2
29879: PUSH
29880: LD_VAR 0 2
29884: PUSH
29885: LD_INT 1
29887: PLUS
29888: ST_TO_ADDR
29889: GO 29866
29891: POP
29892: POP
// end ;
29893: LD_VAR 0 2
29897: RET
// export function IsEmpty ( building ) ; begin
29898: LD_INT 0
29900: PPUSH
// if not building then
29901: LD_VAR 0 1
29905: NOT
29906: IFFALSE 29910
// exit ;
29908: GO 29953
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_VAR 0 1
29919: PUSH
29920: LD_INT 22
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 255
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 58
29939: PUSH
29940: EMPTY
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PPUSH
29947: CALL_OW 69
29951: IN
29952: ST_TO_ADDR
// end ;
29953: LD_VAR 0 2
29957: RET
// export function IsNotFull ( building ) ; begin
29958: LD_INT 0
29960: PPUSH
// if not building then
29961: LD_VAR 0 1
29965: NOT
29966: IFFALSE 29970
// exit ;
29968: GO 29989
// result := UnitsInside ( building ) < 6 ;
29970: LD_ADDR_VAR 0 2
29974: PUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL_OW 313
29984: PUSH
29985: LD_INT 6
29987: LESS
29988: ST_TO_ADDR
// end ;
29989: LD_VAR 0 2
29993: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29994: LD_INT 0
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
// tmp := [ ] ;
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: EMPTY
30006: ST_TO_ADDR
// list := [ ] ;
30007: LD_ADDR_VAR 0 5
30011: PUSH
30012: EMPTY
30013: ST_TO_ADDR
// for i = 16 to 25 do
30014: LD_ADDR_VAR 0 4
30018: PUSH
30019: DOUBLE
30020: LD_INT 16
30022: DEC
30023: ST_TO_ADDR
30024: LD_INT 25
30026: PUSH
30027: FOR_TO
30028: IFFALSE 30101
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30030: LD_ADDR_VAR 0 3
30034: PUSH
30035: LD_VAR 0 3
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_VAR 0 1
30047: PPUSH
30048: CALL_OW 255
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 91
30059: PUSH
30060: LD_VAR 0 1
30064: PUSH
30065: LD_INT 6
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 30
30075: PUSH
30076: LD_VAR 0 4
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: PPUSH
30093: CALL_OW 69
30097: ADD
30098: ST_TO_ADDR
30099: GO 30027
30101: POP
30102: POP
// for i = 1 to tmp do
30103: LD_ADDR_VAR 0 4
30107: PUSH
30108: DOUBLE
30109: LD_INT 1
30111: DEC
30112: ST_TO_ADDR
30113: LD_VAR 0 3
30117: PUSH
30118: FOR_TO
30119: IFFALSE 30207
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30121: LD_ADDR_VAR 0 5
30125: PUSH
30126: LD_VAR 0 5
30130: PUSH
30131: LD_VAR 0 3
30135: PUSH
30136: LD_VAR 0 4
30140: ARRAY
30141: PPUSH
30142: CALL_OW 266
30146: PUSH
30147: LD_VAR 0 3
30151: PUSH
30152: LD_VAR 0 4
30156: ARRAY
30157: PPUSH
30158: CALL_OW 250
30162: PUSH
30163: LD_VAR 0 3
30167: PUSH
30168: LD_VAR 0 4
30172: ARRAY
30173: PPUSH
30174: CALL_OW 251
30178: PUSH
30179: LD_VAR 0 3
30183: PUSH
30184: LD_VAR 0 4
30188: ARRAY
30189: PPUSH
30190: CALL_OW 254
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: ADD
30204: ST_TO_ADDR
30205: GO 30118
30207: POP
30208: POP
// result := list ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_VAR 0 5
30218: ST_TO_ADDR
// end ;
30219: LD_VAR 0 2
30223: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30224: LD_INT 0
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
30231: PPUSH
30232: PPUSH
// if not factory then
30233: LD_VAR 0 1
30237: NOT
30238: IFFALSE 30242
// exit ;
30240: GO 30835
// if control = control_apeman then
30242: LD_VAR 0 4
30246: PUSH
30247: LD_INT 5
30249: EQUAL
30250: IFFALSE 30359
// begin tmp := UnitsInside ( factory ) ;
30252: LD_ADDR_VAR 0 8
30256: PUSH
30257: LD_VAR 0 1
30261: PPUSH
30262: CALL_OW 313
30266: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30267: LD_VAR 0 8
30271: PPUSH
30272: LD_INT 25
30274: PUSH
30275: LD_INT 12
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PPUSH
30282: CALL_OW 72
30286: NOT
30287: IFFALSE 30297
// control := control_manual ;
30289: LD_ADDR_VAR 0 4
30293: PUSH
30294: LD_INT 1
30296: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30297: LD_ADDR_VAR 0 8
30301: PUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: CALL 29994 0 1
30311: ST_TO_ADDR
// if tmp then
30312: LD_VAR 0 8
30316: IFFALSE 30359
// begin for i in tmp do
30318: LD_ADDR_VAR 0 7
30322: PUSH
30323: LD_VAR 0 8
30327: PUSH
30328: FOR_IN
30329: IFFALSE 30357
// if i [ 1 ] = b_ext_radio then
30331: LD_VAR 0 7
30335: PUSH
30336: LD_INT 1
30338: ARRAY
30339: PUSH
30340: LD_INT 22
30342: EQUAL
30343: IFFALSE 30355
// begin control := control_remote ;
30345: LD_ADDR_VAR 0 4
30349: PUSH
30350: LD_INT 2
30352: ST_TO_ADDR
// break ;
30353: GO 30357
// end ;
30355: GO 30328
30357: POP
30358: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30359: LD_VAR 0 1
30363: PPUSH
30364: LD_VAR 0 2
30368: PPUSH
30369: LD_VAR 0 3
30373: PPUSH
30374: LD_VAR 0 4
30378: PPUSH
30379: LD_VAR 0 5
30383: PPUSH
30384: CALL_OW 448
30388: IFFALSE 30423
// begin result := [ chassis , engine , control , weapon ] ;
30390: LD_ADDR_VAR 0 6
30394: PUSH
30395: LD_VAR 0 2
30399: PUSH
30400: LD_VAR 0 3
30404: PUSH
30405: LD_VAR 0 4
30409: PUSH
30410: LD_VAR 0 5
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// exit ;
30421: GO 30835
// end ; _chassis := AvailableChassisList ( factory ) ;
30423: LD_ADDR_VAR 0 9
30427: PUSH
30428: LD_VAR 0 1
30432: PPUSH
30433: CALL_OW 475
30437: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30438: LD_ADDR_VAR 0 11
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 476
30452: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30453: LD_ADDR_VAR 0 12
30457: PUSH
30458: LD_VAR 0 1
30462: PPUSH
30463: CALL_OW 477
30467: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30468: LD_ADDR_VAR 0 10
30472: PUSH
30473: LD_VAR 0 1
30477: PPUSH
30478: CALL_OW 478
30482: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30483: LD_VAR 0 9
30487: NOT
30488: PUSH
30489: LD_VAR 0 11
30493: NOT
30494: OR
30495: PUSH
30496: LD_VAR 0 12
30500: NOT
30501: OR
30502: PUSH
30503: LD_VAR 0 10
30507: NOT
30508: OR
30509: IFFALSE 30544
// begin result := [ chassis , engine , control , weapon ] ;
30511: LD_ADDR_VAR 0 6
30515: PUSH
30516: LD_VAR 0 2
30520: PUSH
30521: LD_VAR 0 3
30525: PUSH
30526: LD_VAR 0 4
30530: PUSH
30531: LD_VAR 0 5
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
// exit ;
30542: GO 30835
// end ; if not chassis in _chassis then
30544: LD_VAR 0 2
30548: PUSH
30549: LD_VAR 0 9
30553: IN
30554: NOT
30555: IFFALSE 30581
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_VAR 0 9
30566: PUSH
30567: LD_INT 1
30569: PPUSH
30570: LD_VAR 0 9
30574: PPUSH
30575: CALL_OW 12
30579: ARRAY
30580: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30581: LD_VAR 0 2
30585: PPUSH
30586: LD_VAR 0 3
30590: PPUSH
30591: CALL 30840 0 2
30595: NOT
30596: IFFALSE 30655
// repeat engine := _engine [ 1 ] ;
30598: LD_ADDR_VAR 0 3
30602: PUSH
30603: LD_VAR 0 11
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30612: LD_ADDR_VAR 0 11
30616: PUSH
30617: LD_VAR 0 11
30621: PPUSH
30622: LD_INT 1
30624: PPUSH
30625: CALL_OW 3
30629: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30630: LD_VAR 0 2
30634: PPUSH
30635: LD_VAR 0 3
30639: PPUSH
30640: CALL 30840 0 2
30644: PUSH
30645: LD_VAR 0 11
30649: PUSH
30650: EMPTY
30651: EQUAL
30652: OR
30653: IFFALSE 30598
// if not control in _control then
30655: LD_VAR 0 4
30659: PUSH
30660: LD_VAR 0 12
30664: IN
30665: NOT
30666: IFFALSE 30692
// control := _control [ rand ( 1 , _control ) ] ;
30668: LD_ADDR_VAR 0 4
30672: PUSH
30673: LD_VAR 0 12
30677: PUSH
30678: LD_INT 1
30680: PPUSH
30681: LD_VAR 0 12
30685: PPUSH
30686: CALL_OW 12
30690: ARRAY
30691: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30692: LD_VAR 0 2
30696: PPUSH
30697: LD_VAR 0 5
30701: PPUSH
30702: CALL 31060 0 2
30706: NOT
30707: IFFALSE 30766
// repeat weapon := _weapon [ 1 ] ;
30709: LD_ADDR_VAR 0 5
30713: PUSH
30714: LD_VAR 0 10
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30723: LD_ADDR_VAR 0 10
30727: PUSH
30728: LD_VAR 0 10
30732: PPUSH
30733: LD_INT 1
30735: PPUSH
30736: CALL_OW 3
30740: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30741: LD_VAR 0 2
30745: PPUSH
30746: LD_VAR 0 5
30750: PPUSH
30751: CALL 31060 0 2
30755: PUSH
30756: LD_VAR 0 10
30760: PUSH
30761: EMPTY
30762: EQUAL
30763: OR
30764: IFFALSE 30709
// result := [ ] ;
30766: LD_ADDR_VAR 0 6
30770: PUSH
30771: EMPTY
30772: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_VAR 0 2
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: LD_VAR 0 4
30792: PPUSH
30793: LD_VAR 0 5
30797: PPUSH
30798: CALL_OW 448
30802: IFFALSE 30835
// result := [ chassis , engine , control , weapon ] ;
30804: LD_ADDR_VAR 0 6
30808: PUSH
30809: LD_VAR 0 2
30813: PUSH
30814: LD_VAR 0 3
30818: PUSH
30819: LD_VAR 0 4
30823: PUSH
30824: LD_VAR 0 5
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: ST_TO_ADDR
// end ;
30835: LD_VAR 0 6
30839: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30840: LD_INT 0
30842: PPUSH
// if not chassis or not engine then
30843: LD_VAR 0 1
30847: NOT
30848: PUSH
30849: LD_VAR 0 2
30853: NOT
30854: OR
30855: IFFALSE 30859
// exit ;
30857: GO 31055
// case engine of engine_solar :
30859: LD_VAR 0 2
30863: PUSH
30864: LD_INT 2
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30910
30872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30873: LD_ADDR_VAR 0 3
30877: PUSH
30878: LD_INT 11
30880: PUSH
30881: LD_INT 12
30883: PUSH
30884: LD_INT 13
30886: PUSH
30887: LD_INT 14
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
30908: GO 31039
30910: LD_INT 1
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30980
30918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30919: LD_ADDR_VAR 0 3
30923: PUSH
30924: LD_INT 11
30926: PUSH
30927: LD_INT 12
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: LD_INT 14
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: LD_INT 4
30947: PUSH
30948: LD_INT 5
30950: PUSH
30951: LD_INT 21
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 22
30959: PUSH
30960: LD_INT 24
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: ST_TO_ADDR
30978: GO 31039
30980: LD_INT 3
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 31038
30988: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_INT 13
30996: PUSH
30997: LD_INT 14
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 4
31008: PUSH
31009: LD_INT 5
31011: PUSH
31012: LD_INT 21
31014: PUSH
31015: LD_INT 22
31017: PUSH
31018: LD_INT 23
31020: PUSH
31021: LD_INT 24
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
31036: GO 31039
31038: POP
// result := ( chassis in result ) ;
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_VAR 0 1
31048: PUSH
31049: LD_VAR 0 3
31053: IN
31054: ST_TO_ADDR
// end ;
31055: LD_VAR 0 3
31059: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31060: LD_INT 0
31062: PPUSH
// if not chassis or not weapon then
31063: LD_VAR 0 1
31067: NOT
31068: PUSH
31069: LD_VAR 0 2
31073: NOT
31074: OR
31075: IFFALSE 31079
// exit ;
31077: GO 32141
// case weapon of us_machine_gun :
31079: LD_VAR 0 2
31083: PUSH
31084: LD_INT 2
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31122
31092: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31093: LD_ADDR_VAR 0 3
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 4
31109: PUSH
31110: LD_INT 5
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
31120: GO 32125
31122: LD_INT 3
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31160
31130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: LD_INT 4
31147: PUSH
31148: LD_INT 5
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: ST_TO_ADDR
31158: GO 32125
31160: LD_INT 11
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31198
31168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31169: LD_ADDR_VAR 0 3
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 4
31185: PUSH
31186: LD_INT 5
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
31196: GO 32125
31198: LD_INT 4
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31232
31206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: LD_INT 4
31220: PUSH
31221: LD_INT 5
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
31230: GO 32125
31232: LD_INT 5
31234: DOUBLE
31235: EQUAL
31236: IFTRUE 31240
31238: GO 31266
31240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31241: LD_ADDR_VAR 0 3
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: LD_INT 4
31254: PUSH
31255: LD_INT 5
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
31264: GO 32125
31266: LD_INT 9
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31300
31274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31275: LD_ADDR_VAR 0 3
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 3
31285: PUSH
31286: LD_INT 4
31288: PUSH
31289: LD_INT 5
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: ST_TO_ADDR
31298: GO 32125
31300: LD_INT 7
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31308
31306: GO 31334
31308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: LD_INT 4
31322: PUSH
31323: LD_INT 5
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 32125
31334: LD_INT 12
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31368
31342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 4
31356: PUSH
31357: LD_INT 5
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
31366: GO 32125
31368: LD_INT 13
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31402
31376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
31400: GO 32125
31402: LD_INT 14
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31428
31410: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31411: LD_ADDR_VAR 0 3
31415: PUSH
31416: LD_INT 4
31418: PUSH
31419: LD_INT 5
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: ST_TO_ADDR
31426: GO 32125
31428: LD_INT 6
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31454
31436: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 4
31444: PUSH
31445: LD_INT 5
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: ST_TO_ADDR
31452: GO 32125
31454: LD_INT 10
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31480
31462: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31463: LD_ADDR_VAR 0 3
31467: PUSH
31468: LD_INT 4
31470: PUSH
31471: LD_INT 5
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: ST_TO_ADDR
31478: GO 32125
31480: LD_INT 22
31482: DOUBLE
31483: EQUAL
31484: IFTRUE 31488
31486: GO 31514
31488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31489: LD_ADDR_VAR 0 3
31493: PUSH
31494: LD_INT 11
31496: PUSH
31497: LD_INT 12
31499: PUSH
31500: LD_INT 13
31502: PUSH
31503: LD_INT 14
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
31512: GO 32125
31514: LD_INT 23
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31548
31522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31523: LD_ADDR_VAR 0 3
31527: PUSH
31528: LD_INT 11
31530: PUSH
31531: LD_INT 12
31533: PUSH
31534: LD_INT 13
31536: PUSH
31537: LD_INT 14
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
31546: GO 32125
31548: LD_INT 24
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31582
31556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31557: LD_ADDR_VAR 0 3
31561: PUSH
31562: LD_INT 11
31564: PUSH
31565: LD_INT 12
31567: PUSH
31568: LD_INT 13
31570: PUSH
31571: LD_INT 14
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
31580: GO 32125
31582: LD_INT 30
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31616
31590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: LD_INT 11
31598: PUSH
31599: LD_INT 12
31601: PUSH
31602: LD_INT 13
31604: PUSH
31605: LD_INT 14
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: ST_TO_ADDR
31614: GO 32125
31616: LD_INT 25
31618: DOUBLE
31619: EQUAL
31620: IFTRUE 31624
31622: GO 31642
31624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: LD_INT 13
31632: PUSH
31633: LD_INT 14
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: ST_TO_ADDR
31640: GO 32125
31642: LD_INT 27
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31668
31650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_INT 13
31658: PUSH
31659: LD_INT 14
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: ST_TO_ADDR
31666: GO 32125
31668: LD_EXP 57
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31704
31678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31679: LD_ADDR_VAR 0 3
31683: PUSH
31684: LD_INT 11
31686: PUSH
31687: LD_INT 12
31689: PUSH
31690: LD_INT 13
31692: PUSH
31693: LD_INT 14
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
31702: GO 32125
31704: LD_INT 28
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31730
31712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_INT 13
31720: PUSH
31721: LD_INT 14
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: ST_TO_ADDR
31728: GO 32125
31730: LD_INT 29
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31756
31738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 13
31746: PUSH
31747: LD_INT 14
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: ST_TO_ADDR
31754: GO 32125
31756: LD_INT 31
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31782
31764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31765: LD_ADDR_VAR 0 3
31769: PUSH
31770: LD_INT 13
31772: PUSH
31773: LD_INT 14
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: ST_TO_ADDR
31780: GO 32125
31782: LD_INT 26
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31808
31790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 13
31798: PUSH
31799: LD_INT 14
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 32125
31808: LD_INT 42
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31842
31816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_INT 21
31824: PUSH
31825: LD_INT 22
31827: PUSH
31828: LD_INT 23
31830: PUSH
31831: LD_INT 24
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: ST_TO_ADDR
31840: GO 32125
31842: LD_INT 43
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31876
31850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31851: LD_ADDR_VAR 0 3
31855: PUSH
31856: LD_INT 21
31858: PUSH
31859: LD_INT 22
31861: PUSH
31862: LD_INT 23
31864: PUSH
31865: LD_INT 24
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: ST_TO_ADDR
31874: GO 32125
31876: LD_INT 44
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 31910
31884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31885: LD_ADDR_VAR 0 3
31889: PUSH
31890: LD_INT 21
31892: PUSH
31893: LD_INT 22
31895: PUSH
31896: LD_INT 23
31898: PUSH
31899: LD_INT 24
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: ST_TO_ADDR
31908: GO 32125
31910: LD_INT 45
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31918
31916: GO 31944
31918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_INT 21
31926: PUSH
31927: LD_INT 22
31929: PUSH
31930: LD_INT 23
31932: PUSH
31933: LD_INT 24
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: ST_TO_ADDR
31942: GO 32125
31944: LD_INT 49
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31978
31952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: LD_INT 21
31960: PUSH
31961: LD_INT 22
31963: PUSH
31964: LD_INT 23
31966: PUSH
31967: LD_INT 24
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32125
31978: LD_INT 51
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32012
31986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 22
31997: PUSH
31998: LD_INT 23
32000: PUSH
32001: LD_INT 24
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: ST_TO_ADDR
32010: GO 32125
32012: LD_INT 52
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32046
32020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32021: LD_ADDR_VAR 0 3
32025: PUSH
32026: LD_INT 21
32028: PUSH
32029: LD_INT 22
32031: PUSH
32032: LD_INT 23
32034: PUSH
32035: LD_INT 24
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: ST_TO_ADDR
32044: GO 32125
32046: LD_INT 53
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32072
32054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32055: LD_ADDR_VAR 0 3
32059: PUSH
32060: LD_INT 23
32062: PUSH
32063: LD_INT 24
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: ST_TO_ADDR
32070: GO 32125
32072: LD_INT 46
32074: DOUBLE
32075: EQUAL
32076: IFTRUE 32080
32078: GO 32098
32080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32081: LD_ADDR_VAR 0 3
32085: PUSH
32086: LD_INT 23
32088: PUSH
32089: LD_INT 24
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: ST_TO_ADDR
32096: GO 32125
32098: LD_INT 47
32100: DOUBLE
32101: EQUAL
32102: IFTRUE 32106
32104: GO 32124
32106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32107: LD_ADDR_VAR 0 3
32111: PUSH
32112: LD_INT 23
32114: PUSH
32115: LD_INT 24
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: ST_TO_ADDR
32122: GO 32125
32124: POP
// result := ( chassis in result ) ;
32125: LD_ADDR_VAR 0 3
32129: PUSH
32130: LD_VAR 0 1
32134: PUSH
32135: LD_VAR 0 3
32139: IN
32140: ST_TO_ADDR
// end ;
32141: LD_VAR 0 3
32145: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32146: LD_INT 0
32148: PPUSH
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
// result := array ;
32155: LD_ADDR_VAR 0 5
32159: PUSH
32160: LD_VAR 0 1
32164: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32165: LD_VAR 0 1
32169: NOT
32170: PUSH
32171: LD_VAR 0 2
32175: NOT
32176: OR
32177: PUSH
32178: LD_VAR 0 3
32182: NOT
32183: OR
32184: PUSH
32185: LD_VAR 0 2
32189: PUSH
32190: LD_VAR 0 1
32194: GREATER
32195: OR
32196: PUSH
32197: LD_VAR 0 3
32201: PUSH
32202: LD_VAR 0 1
32206: GREATER
32207: OR
32208: IFFALSE 32212
// exit ;
32210: GO 32508
// if direction then
32212: LD_VAR 0 4
32216: IFFALSE 32280
// begin d := 1 ;
32218: LD_ADDR_VAR 0 9
32222: PUSH
32223: LD_INT 1
32225: ST_TO_ADDR
// if i_from > i_to then
32226: LD_VAR 0 2
32230: PUSH
32231: LD_VAR 0 3
32235: GREATER
32236: IFFALSE 32262
// length := ( array - i_from ) + i_to else
32238: LD_ADDR_VAR 0 11
32242: PUSH
32243: LD_VAR 0 1
32247: PUSH
32248: LD_VAR 0 2
32252: MINUS
32253: PUSH
32254: LD_VAR 0 3
32258: PLUS
32259: ST_TO_ADDR
32260: GO 32278
// length := i_to - i_from ;
32262: LD_ADDR_VAR 0 11
32266: PUSH
32267: LD_VAR 0 3
32271: PUSH
32272: LD_VAR 0 2
32276: MINUS
32277: ST_TO_ADDR
// end else
32278: GO 32341
// begin d := - 1 ;
32280: LD_ADDR_VAR 0 9
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: ST_TO_ADDR
// if i_from > i_to then
32289: LD_VAR 0 2
32293: PUSH
32294: LD_VAR 0 3
32298: GREATER
32299: IFFALSE 32319
// length := i_from - i_to else
32301: LD_ADDR_VAR 0 11
32305: PUSH
32306: LD_VAR 0 2
32310: PUSH
32311: LD_VAR 0 3
32315: MINUS
32316: ST_TO_ADDR
32317: GO 32341
// length := ( array - i_to ) + i_from ;
32319: LD_ADDR_VAR 0 11
32323: PUSH
32324: LD_VAR 0 1
32328: PUSH
32329: LD_VAR 0 3
32333: MINUS
32334: PUSH
32335: LD_VAR 0 2
32339: PLUS
32340: ST_TO_ADDR
// end ; if not length then
32341: LD_VAR 0 11
32345: NOT
32346: IFFALSE 32350
// exit ;
32348: GO 32508
// tmp := array ;
32350: LD_ADDR_VAR 0 10
32354: PUSH
32355: LD_VAR 0 1
32359: ST_TO_ADDR
// for i = 1 to length do
32360: LD_ADDR_VAR 0 6
32364: PUSH
32365: DOUBLE
32366: LD_INT 1
32368: DEC
32369: ST_TO_ADDR
32370: LD_VAR 0 11
32374: PUSH
32375: FOR_TO
32376: IFFALSE 32496
// begin for j = 1 to array do
32378: LD_ADDR_VAR 0 7
32382: PUSH
32383: DOUBLE
32384: LD_INT 1
32386: DEC
32387: ST_TO_ADDR
32388: LD_VAR 0 1
32392: PUSH
32393: FOR_TO
32394: IFFALSE 32482
// begin k := j + d ;
32396: LD_ADDR_VAR 0 8
32400: PUSH
32401: LD_VAR 0 7
32405: PUSH
32406: LD_VAR 0 9
32410: PLUS
32411: ST_TO_ADDR
// if k > array then
32412: LD_VAR 0 8
32416: PUSH
32417: LD_VAR 0 1
32421: GREATER
32422: IFFALSE 32432
// k := 1 ;
32424: LD_ADDR_VAR 0 8
32428: PUSH
32429: LD_INT 1
32431: ST_TO_ADDR
// if not k then
32432: LD_VAR 0 8
32436: NOT
32437: IFFALSE 32449
// k := array ;
32439: LD_ADDR_VAR 0 8
32443: PUSH
32444: LD_VAR 0 1
32448: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32449: LD_ADDR_VAR 0 10
32453: PUSH
32454: LD_VAR 0 10
32458: PPUSH
32459: LD_VAR 0 8
32463: PPUSH
32464: LD_VAR 0 1
32468: PUSH
32469: LD_VAR 0 7
32473: ARRAY
32474: PPUSH
32475: CALL_OW 1
32479: ST_TO_ADDR
// end ;
32480: GO 32393
32482: POP
32483: POP
// array := tmp ;
32484: LD_ADDR_VAR 0 1
32488: PUSH
32489: LD_VAR 0 10
32493: ST_TO_ADDR
// end ;
32494: GO 32375
32496: POP
32497: POP
// result := array ;
32498: LD_ADDR_VAR 0 5
32502: PUSH
32503: LD_VAR 0 1
32507: ST_TO_ADDR
// end ;
32508: LD_VAR 0 5
32512: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32513: LD_INT 0
32515: PPUSH
32516: PPUSH
// result := 0 ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 0
32524: ST_TO_ADDR
// if not array or not value in array then
32525: LD_VAR 0 1
32529: NOT
32530: PUSH
32531: LD_VAR 0 2
32535: PUSH
32536: LD_VAR 0 1
32540: IN
32541: NOT
32542: OR
32543: IFFALSE 32547
// exit ;
32545: GO 32601
// for i = 1 to array do
32547: LD_ADDR_VAR 0 4
32551: PUSH
32552: DOUBLE
32553: LD_INT 1
32555: DEC
32556: ST_TO_ADDR
32557: LD_VAR 0 1
32561: PUSH
32562: FOR_TO
32563: IFFALSE 32599
// if value = array [ i ] then
32565: LD_VAR 0 2
32569: PUSH
32570: LD_VAR 0 1
32574: PUSH
32575: LD_VAR 0 4
32579: ARRAY
32580: EQUAL
32581: IFFALSE 32597
// begin result := i ;
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_VAR 0 4
32592: ST_TO_ADDR
// exit ;
32593: POP
32594: POP
32595: GO 32601
// end ;
32597: GO 32562
32599: POP
32600: POP
// end ;
32601: LD_VAR 0 3
32605: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32606: LD_INT 0
32608: PPUSH
// vc_chassis := chassis ;
32609: LD_ADDR_OWVAR 37
32613: PUSH
32614: LD_VAR 0 1
32618: ST_TO_ADDR
// vc_engine := engine ;
32619: LD_ADDR_OWVAR 39
32623: PUSH
32624: LD_VAR 0 2
32628: ST_TO_ADDR
// vc_control := control ;
32629: LD_ADDR_OWVAR 38
32633: PUSH
32634: LD_VAR 0 3
32638: ST_TO_ADDR
// vc_weapon := weapon ;
32639: LD_ADDR_OWVAR 40
32643: PUSH
32644: LD_VAR 0 4
32648: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32649: LD_ADDR_OWVAR 41
32653: PUSH
32654: LD_VAR 0 5
32658: ST_TO_ADDR
// end ;
32659: LD_VAR 0 6
32663: RET
// export function WantPlant ( unit ) ; var task ; begin
32664: LD_INT 0
32666: PPUSH
32667: PPUSH
// result := false ;
32668: LD_ADDR_VAR 0 2
32672: PUSH
32673: LD_INT 0
32675: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 437
32690: ST_TO_ADDR
// if task then
32691: LD_VAR 0 3
32695: IFFALSE 32723
// if task [ 1 ] [ 1 ] = p then
32697: LD_VAR 0 3
32701: PUSH
32702: LD_INT 1
32704: ARRAY
32705: PUSH
32706: LD_INT 1
32708: ARRAY
32709: PUSH
32710: LD_STRING p
32712: EQUAL
32713: IFFALSE 32723
// result := true ;
32715: LD_ADDR_VAR 0 2
32719: PUSH
32720: LD_INT 1
32722: ST_TO_ADDR
// end ;
32723: LD_VAR 0 2
32727: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
// if pos < 1 then
32734: LD_VAR 0 2
32738: PUSH
32739: LD_INT 1
32741: LESS
32742: IFFALSE 32746
// exit ;
32744: GO 33049
// if pos = 1 then
32746: LD_VAR 0 2
32750: PUSH
32751: LD_INT 1
32753: EQUAL
32754: IFFALSE 32787
// result := Replace ( arr , pos [ 1 ] , value ) else
32756: LD_ADDR_VAR 0 4
32760: PUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_VAR 0 2
32770: PUSH
32771: LD_INT 1
32773: ARRAY
32774: PPUSH
32775: LD_VAR 0 3
32779: PPUSH
32780: CALL_OW 1
32784: ST_TO_ADDR
32785: GO 33049
// begin tmp := arr ;
32787: LD_ADDR_VAR 0 6
32791: PUSH
32792: LD_VAR 0 1
32796: ST_TO_ADDR
// s_arr := [ tmp ] ;
32797: LD_ADDR_VAR 0 7
32801: PUSH
32802: LD_VAR 0 6
32806: PUSH
32807: EMPTY
32808: LIST
32809: ST_TO_ADDR
// for i = 1 to pos - 1 do
32810: LD_ADDR_VAR 0 5
32814: PUSH
32815: DOUBLE
32816: LD_INT 1
32818: DEC
32819: ST_TO_ADDR
32820: LD_VAR 0 2
32824: PUSH
32825: LD_INT 1
32827: MINUS
32828: PUSH
32829: FOR_TO
32830: IFFALSE 32875
// begin tmp := tmp [ pos [ i ] ] ;
32832: LD_ADDR_VAR 0 6
32836: PUSH
32837: LD_VAR 0 6
32841: PUSH
32842: LD_VAR 0 2
32846: PUSH
32847: LD_VAR 0 5
32851: ARRAY
32852: ARRAY
32853: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32854: LD_ADDR_VAR 0 7
32858: PUSH
32859: LD_VAR 0 7
32863: PUSH
32864: LD_VAR 0 6
32868: PUSH
32869: EMPTY
32870: LIST
32871: ADD
32872: ST_TO_ADDR
// end ;
32873: GO 32829
32875: POP
32876: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32877: LD_ADDR_VAR 0 6
32881: PUSH
32882: LD_VAR 0 6
32886: PPUSH
32887: LD_VAR 0 2
32891: PUSH
32892: LD_VAR 0 2
32896: ARRAY
32897: PPUSH
32898: LD_VAR 0 3
32902: PPUSH
32903: CALL_OW 1
32907: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32908: LD_ADDR_VAR 0 7
32912: PUSH
32913: LD_VAR 0 7
32917: PPUSH
32918: LD_VAR 0 7
32922: PPUSH
32923: LD_VAR 0 6
32927: PPUSH
32928: CALL_OW 1
32932: ST_TO_ADDR
// for i = s_arr downto 2 do
32933: LD_ADDR_VAR 0 5
32937: PUSH
32938: DOUBLE
32939: LD_VAR 0 7
32943: INC
32944: ST_TO_ADDR
32945: LD_INT 2
32947: PUSH
32948: FOR_DOWNTO
32949: IFFALSE 33033
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32951: LD_ADDR_VAR 0 6
32955: PUSH
32956: LD_VAR 0 7
32960: PUSH
32961: LD_VAR 0 5
32965: PUSH
32966: LD_INT 1
32968: MINUS
32969: ARRAY
32970: PPUSH
32971: LD_VAR 0 2
32975: PUSH
32976: LD_VAR 0 5
32980: PUSH
32981: LD_INT 1
32983: MINUS
32984: ARRAY
32985: PPUSH
32986: LD_VAR 0 7
32990: PUSH
32991: LD_VAR 0 5
32995: ARRAY
32996: PPUSH
32997: CALL_OW 1
33001: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33002: LD_ADDR_VAR 0 7
33006: PUSH
33007: LD_VAR 0 7
33011: PPUSH
33012: LD_VAR 0 5
33016: PUSH
33017: LD_INT 1
33019: MINUS
33020: PPUSH
33021: LD_VAR 0 6
33025: PPUSH
33026: CALL_OW 1
33030: ST_TO_ADDR
// end ;
33031: GO 32948
33033: POP
33034: POP
// result := s_arr [ 1 ] ;
33035: LD_ADDR_VAR 0 4
33039: PUSH
33040: LD_VAR 0 7
33044: PUSH
33045: LD_INT 1
33047: ARRAY
33048: ST_TO_ADDR
// end ; end ;
33049: LD_VAR 0 4
33053: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
// if not list then
33058: LD_VAR 0 1
33062: NOT
33063: IFFALSE 33067
// exit ;
33065: GO 33158
// i := list [ pos1 ] ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: LD_VAR 0 1
33076: PUSH
33077: LD_VAR 0 2
33081: ARRAY
33082: ST_TO_ADDR
// if not i then
33083: LD_VAR 0 5
33087: NOT
33088: IFFALSE 33092
// exit ;
33090: GO 33158
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33092: LD_ADDR_VAR 0 1
33096: PUSH
33097: LD_VAR 0 1
33101: PPUSH
33102: LD_VAR 0 2
33106: PPUSH
33107: LD_VAR 0 1
33111: PUSH
33112: LD_VAR 0 3
33116: ARRAY
33117: PPUSH
33118: CALL_OW 1
33122: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33123: LD_ADDR_VAR 0 1
33127: PUSH
33128: LD_VAR 0 1
33132: PPUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: LD_VAR 0 5
33142: PPUSH
33143: CALL_OW 1
33147: ST_TO_ADDR
// result := list ;
33148: LD_ADDR_VAR 0 4
33152: PUSH
33153: LD_VAR 0 1
33157: ST_TO_ADDR
// end ;
33158: LD_VAR 0 4
33162: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33163: LD_INT 0
33165: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33166: LD_ADDR_VAR 0 5
33170: PUSH
33171: LD_VAR 0 1
33175: PPUSH
33176: CALL_OW 250
33180: PPUSH
33181: LD_VAR 0 1
33185: PPUSH
33186: CALL_OW 251
33190: PPUSH
33191: LD_VAR 0 2
33195: PPUSH
33196: LD_VAR 0 3
33200: PPUSH
33201: LD_VAR 0 4
33205: PPUSH
33206: CALL 33216 0 5
33210: ST_TO_ADDR
// end ;
33211: LD_VAR 0 5
33215: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33216: LD_INT 0
33218: PPUSH
33219: PPUSH
33220: PPUSH
33221: PPUSH
// if not list then
33222: LD_VAR 0 3
33226: NOT
33227: IFFALSE 33231
// exit ;
33229: GO 33619
// result := [ ] ;
33231: LD_ADDR_VAR 0 6
33235: PUSH
33236: EMPTY
33237: ST_TO_ADDR
// for i in list do
33238: LD_ADDR_VAR 0 7
33242: PUSH
33243: LD_VAR 0 3
33247: PUSH
33248: FOR_IN
33249: IFFALSE 33451
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: LD_VAR 0 7
33260: PPUSH
33261: LD_VAR 0 1
33265: PPUSH
33266: LD_VAR 0 2
33270: PPUSH
33271: CALL_OW 297
33275: ST_TO_ADDR
// if not result then
33276: LD_VAR 0 6
33280: NOT
33281: IFFALSE 33307
// result := [ [ i , tmp ] ] else
33283: LD_ADDR_VAR 0 6
33287: PUSH
33288: LD_VAR 0 7
33292: PUSH
33293: LD_VAR 0 9
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: EMPTY
33303: LIST
33304: ST_TO_ADDR
33305: GO 33449
// begin if result [ result ] [ 2 ] < tmp then
33307: LD_VAR 0 6
33311: PUSH
33312: LD_VAR 0 6
33316: ARRAY
33317: PUSH
33318: LD_INT 2
33320: ARRAY
33321: PUSH
33322: LD_VAR 0 9
33326: LESS
33327: IFFALSE 33369
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33329: LD_ADDR_VAR 0 6
33333: PUSH
33334: LD_VAR 0 6
33338: PPUSH
33339: LD_VAR 0 6
33343: PUSH
33344: LD_INT 1
33346: PLUS
33347: PPUSH
33348: LD_VAR 0 7
33352: PUSH
33353: LD_VAR 0 9
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PPUSH
33362: CALL_OW 2
33366: ST_TO_ADDR
33367: GO 33449
// for j = 1 to result do
33369: LD_ADDR_VAR 0 8
33373: PUSH
33374: DOUBLE
33375: LD_INT 1
33377: DEC
33378: ST_TO_ADDR
33379: LD_VAR 0 6
33383: PUSH
33384: FOR_TO
33385: IFFALSE 33447
// begin if tmp < result [ j ] [ 2 ] then
33387: LD_VAR 0 9
33391: PUSH
33392: LD_VAR 0 6
33396: PUSH
33397: LD_VAR 0 8
33401: ARRAY
33402: PUSH
33403: LD_INT 2
33405: ARRAY
33406: LESS
33407: IFFALSE 33445
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33409: LD_ADDR_VAR 0 6
33413: PUSH
33414: LD_VAR 0 6
33418: PPUSH
33419: LD_VAR 0 8
33423: PPUSH
33424: LD_VAR 0 7
33428: PUSH
33429: LD_VAR 0 9
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PPUSH
33438: CALL_OW 2
33442: ST_TO_ADDR
// break ;
33443: GO 33447
// end ; end ;
33445: GO 33384
33447: POP
33448: POP
// end ; end ;
33449: GO 33248
33451: POP
33452: POP
// if result and not asc then
33453: LD_VAR 0 6
33457: PUSH
33458: LD_VAR 0 4
33462: NOT
33463: AND
33464: IFFALSE 33539
// begin tmp := result ;
33466: LD_ADDR_VAR 0 9
33470: PUSH
33471: LD_VAR 0 6
33475: ST_TO_ADDR
// for i = tmp downto 1 do
33476: LD_ADDR_VAR 0 7
33480: PUSH
33481: DOUBLE
33482: LD_VAR 0 9
33486: INC
33487: ST_TO_ADDR
33488: LD_INT 1
33490: PUSH
33491: FOR_DOWNTO
33492: IFFALSE 33537
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33494: LD_ADDR_VAR 0 6
33498: PUSH
33499: LD_VAR 0 6
33503: PPUSH
33504: LD_VAR 0 9
33508: PUSH
33509: LD_VAR 0 7
33513: MINUS
33514: PUSH
33515: LD_INT 1
33517: PLUS
33518: PPUSH
33519: LD_VAR 0 9
33523: PUSH
33524: LD_VAR 0 7
33528: ARRAY
33529: PPUSH
33530: CALL_OW 1
33534: ST_TO_ADDR
33535: GO 33491
33537: POP
33538: POP
// end ; tmp := [ ] ;
33539: LD_ADDR_VAR 0 9
33543: PUSH
33544: EMPTY
33545: ST_TO_ADDR
// if mode then
33546: LD_VAR 0 5
33550: IFFALSE 33619
// begin for i = 1 to result do
33552: LD_ADDR_VAR 0 7
33556: PUSH
33557: DOUBLE
33558: LD_INT 1
33560: DEC
33561: ST_TO_ADDR
33562: LD_VAR 0 6
33566: PUSH
33567: FOR_TO
33568: IFFALSE 33607
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33570: LD_ADDR_VAR 0 9
33574: PUSH
33575: LD_VAR 0 9
33579: PPUSH
33580: LD_VAR 0 7
33584: PPUSH
33585: LD_VAR 0 6
33589: PUSH
33590: LD_VAR 0 7
33594: ARRAY
33595: PUSH
33596: LD_INT 1
33598: ARRAY
33599: PPUSH
33600: CALL_OW 1
33604: ST_TO_ADDR
33605: GO 33567
33607: POP
33608: POP
// result := tmp ;
33609: LD_ADDR_VAR 0 6
33613: PUSH
33614: LD_VAR 0 9
33618: ST_TO_ADDR
// end ; end ;
33619: LD_VAR 0 6
33623: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33632: LD_ADDR_VAR 0 5
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: ST_TO_ADDR
// if not x or not y then
33654: LD_VAR 0 2
33658: NOT
33659: PUSH
33660: LD_VAR 0 3
33664: NOT
33665: OR
33666: IFFALSE 33670
// exit ;
33668: GO 35322
// if not range then
33670: LD_VAR 0 4
33674: NOT
33675: IFFALSE 33685
// range := 10 ;
33677: LD_ADDR_VAR 0 4
33681: PUSH
33682: LD_INT 10
33684: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33685: LD_ADDR_VAR 0 8
33689: PUSH
33690: LD_INT 81
33692: PUSH
33693: LD_VAR 0 1
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 92
33704: PUSH
33705: LD_VAR 0 2
33709: PUSH
33710: LD_VAR 0 3
33714: PUSH
33715: LD_VAR 0 4
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 21
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 69
33752: ST_TO_ADDR
// if not tmp then
33753: LD_VAR 0 8
33757: NOT
33758: IFFALSE 33762
// exit ;
33760: GO 35322
// for i in tmp do
33762: LD_ADDR_VAR 0 6
33766: PUSH
33767: LD_VAR 0 8
33771: PUSH
33772: FOR_IN
33773: IFFALSE 35297
// begin points := [ 0 , 0 , 0 ] ;
33775: LD_ADDR_VAR 0 9
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: ST_TO_ADDR
// bpoints := 1 ;
33794: LD_ADDR_VAR 0 10
33798: PUSH
33799: LD_INT 1
33801: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33802: LD_VAR 0 6
33806: PPUSH
33807: CALL_OW 247
33811: PUSH
33812: LD_INT 1
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 34398
33820: POP
// begin if GetClass ( i ) = 1 then
33821: LD_VAR 0 6
33825: PPUSH
33826: CALL_OW 257
33830: PUSH
33831: LD_INT 1
33833: EQUAL
33834: IFFALSE 33855
// points := [ 10 , 5 , 3 ] ;
33836: LD_ADDR_VAR 0 9
33840: PUSH
33841: LD_INT 10
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33855: LD_VAR 0 6
33859: PPUSH
33860: CALL_OW 257
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: LD_INT 3
33870: PUSH
33871: LD_INT 4
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: IN
33879: IFFALSE 33900
// points := [ 3 , 2 , 1 ] ;
33881: LD_ADDR_VAR 0 9
33885: PUSH
33886: LD_INT 3
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33900: LD_VAR 0 6
33904: PPUSH
33905: CALL_OW 257
33909: PUSH
33910: LD_INT 5
33912: EQUAL
33913: IFFALSE 33934
// points := [ 130 , 5 , 2 ] ;
33915: LD_ADDR_VAR 0 9
33919: PUSH
33920: LD_INT 130
33922: PUSH
33923: LD_INT 5
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33934: LD_VAR 0 6
33938: PPUSH
33939: CALL_OW 257
33943: PUSH
33944: LD_INT 8
33946: EQUAL
33947: IFFALSE 33968
// points := [ 35 , 35 , 30 ] ;
33949: LD_ADDR_VAR 0 9
33953: PUSH
33954: LD_INT 35
33956: PUSH
33957: LD_INT 35
33959: PUSH
33960: LD_INT 30
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33968: LD_VAR 0 6
33972: PPUSH
33973: CALL_OW 257
33977: PUSH
33978: LD_INT 9
33980: EQUAL
33981: IFFALSE 34002
// points := [ 20 , 55 , 40 ] ;
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_INT 20
33990: PUSH
33991: LD_INT 55
33993: PUSH
33994: LD_INT 40
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34002: LD_VAR 0 6
34006: PPUSH
34007: CALL_OW 257
34011: PUSH
34012: LD_INT 12
34014: PUSH
34015: LD_INT 16
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: IN
34022: IFFALSE 34043
// points := [ 5 , 3 , 2 ] ;
34024: LD_ADDR_VAR 0 9
34028: PUSH
34029: LD_INT 5
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34043: LD_VAR 0 6
34047: PPUSH
34048: CALL_OW 257
34052: PUSH
34053: LD_INT 17
34055: EQUAL
34056: IFFALSE 34077
// points := [ 100 , 50 , 75 ] ;
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_INT 100
34065: PUSH
34066: LD_INT 50
34068: PUSH
34069: LD_INT 75
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34077: LD_VAR 0 6
34081: PPUSH
34082: CALL_OW 257
34086: PUSH
34087: LD_INT 15
34089: EQUAL
34090: IFFALSE 34111
// points := [ 10 , 5 , 3 ] ;
34092: LD_ADDR_VAR 0 9
34096: PUSH
34097: LD_INT 10
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34111: LD_VAR 0 6
34115: PPUSH
34116: CALL_OW 257
34120: PUSH
34121: LD_INT 14
34123: EQUAL
34124: IFFALSE 34145
// points := [ 10 , 0 , 0 ] ;
34126: LD_ADDR_VAR 0 9
34130: PUSH
34131: LD_INT 10
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34145: LD_VAR 0 6
34149: PPUSH
34150: CALL_OW 257
34154: PUSH
34155: LD_INT 11
34157: EQUAL
34158: IFFALSE 34179
// points := [ 30 , 10 , 5 ] ;
34160: LD_ADDR_VAR 0 9
34164: PUSH
34165: LD_INT 30
34167: PUSH
34168: LD_INT 10
34170: PUSH
34171: LD_INT 5
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34179: LD_VAR 0 1
34183: PPUSH
34184: LD_INT 5
34186: PPUSH
34187: CALL_OW 321
34191: PUSH
34192: LD_INT 2
34194: EQUAL
34195: IFFALSE 34212
// bpoints := bpoints * 1.8 ;
34197: LD_ADDR_VAR 0 10
34201: PUSH
34202: LD_VAR 0 10
34206: PUSH
34207: LD_REAL  1.80000000000000E+0000
34210: MUL
34211: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34212: LD_VAR 0 6
34216: PPUSH
34217: CALL_OW 257
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: LD_INT 3
34230: PUSH
34231: LD_INT 4
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: IN
34240: PUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: LD_INT 51
34248: PPUSH
34249: CALL_OW 321
34253: PUSH
34254: LD_INT 2
34256: EQUAL
34257: AND
34258: IFFALSE 34275
// bpoints := bpoints * 1.2 ;
34260: LD_ADDR_VAR 0 10
34264: PUSH
34265: LD_VAR 0 10
34269: PUSH
34270: LD_REAL  1.20000000000000E+0000
34273: MUL
34274: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34275: LD_VAR 0 6
34279: PPUSH
34280: CALL_OW 257
34284: PUSH
34285: LD_INT 5
34287: PUSH
34288: LD_INT 7
34290: PUSH
34291: LD_INT 9
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: IN
34299: PUSH
34300: LD_VAR 0 1
34304: PPUSH
34305: LD_INT 52
34307: PPUSH
34308: CALL_OW 321
34312: PUSH
34313: LD_INT 2
34315: EQUAL
34316: AND
34317: IFFALSE 34334
// bpoints := bpoints * 1.5 ;
34319: LD_ADDR_VAR 0 10
34323: PUSH
34324: LD_VAR 0 10
34328: PUSH
34329: LD_REAL  1.50000000000000E+0000
34332: MUL
34333: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34334: LD_VAR 0 1
34338: PPUSH
34339: LD_INT 66
34341: PPUSH
34342: CALL_OW 321
34346: PUSH
34347: LD_INT 2
34349: EQUAL
34350: IFFALSE 34367
// bpoints := bpoints * 1.1 ;
34352: LD_ADDR_VAR 0 10
34356: PUSH
34357: LD_VAR 0 10
34361: PUSH
34362: LD_REAL  1.10000000000000E+0000
34365: MUL
34366: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34367: LD_ADDR_VAR 0 10
34371: PUSH
34372: LD_VAR 0 10
34376: PUSH
34377: LD_VAR 0 6
34381: PPUSH
34382: LD_INT 1
34384: PPUSH
34385: CALL_OW 259
34389: PUSH
34390: LD_REAL  1.15000000000000E+0000
34393: MUL
34394: MUL
34395: ST_TO_ADDR
// end ; unit_vehicle :
34396: GO 35226
34398: LD_INT 2
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34406
34404: GO 35214
34406: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34407: LD_VAR 0 6
34411: PPUSH
34412: CALL_OW 264
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 42
34422: PUSH
34423: LD_INT 24
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: LIST
34430: IN
34431: IFFALSE 34452
// points := [ 25 , 5 , 3 ] ;
34433: LD_ADDR_VAR 0 9
34437: PUSH
34438: LD_INT 25
34440: PUSH
34441: LD_INT 5
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34452: LD_VAR 0 6
34456: PPUSH
34457: CALL_OW 264
34461: PUSH
34462: LD_INT 4
34464: PUSH
34465: LD_INT 43
34467: PUSH
34468: LD_INT 25
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: IN
34476: IFFALSE 34497
// points := [ 40 , 15 , 5 ] ;
34478: LD_ADDR_VAR 0 9
34482: PUSH
34483: LD_INT 40
34485: PUSH
34486: LD_INT 15
34488: PUSH
34489: LD_INT 5
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34497: LD_VAR 0 6
34501: PPUSH
34502: CALL_OW 264
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 23
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: IN
34517: IFFALSE 34538
// points := [ 7 , 25 , 8 ] ;
34519: LD_ADDR_VAR 0 9
34523: PUSH
34524: LD_INT 7
34526: PUSH
34527: LD_INT 25
34529: PUSH
34530: LD_INT 8
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34538: LD_VAR 0 6
34542: PPUSH
34543: CALL_OW 264
34547: PUSH
34548: LD_INT 5
34550: PUSH
34551: LD_INT 27
34553: PUSH
34554: LD_INT 44
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: IN
34562: IFFALSE 34583
// points := [ 14 , 50 , 16 ] ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: LD_INT 14
34571: PUSH
34572: LD_INT 50
34574: PUSH
34575: LD_INT 16
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34583: LD_VAR 0 6
34587: PPUSH
34588: CALL_OW 264
34592: PUSH
34593: LD_INT 6
34595: PUSH
34596: LD_INT 46
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: IN
34603: IFFALSE 34624
// points := [ 32 , 120 , 70 ] ;
34605: LD_ADDR_VAR 0 9
34609: PUSH
34610: LD_INT 32
34612: PUSH
34613: LD_INT 120
34615: PUSH
34616: LD_INT 70
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34624: LD_VAR 0 6
34628: PPUSH
34629: CALL_OW 264
34633: PUSH
34634: LD_INT 7
34636: PUSH
34637: LD_INT 28
34639: PUSH
34640: LD_INT 45
34642: PUSH
34643: LD_EXP 57
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: IN
34654: IFFALSE 34675
// points := [ 35 , 20 , 45 ] ;
34656: LD_ADDR_VAR 0 9
34660: PUSH
34661: LD_INT 35
34663: PUSH
34664: LD_INT 20
34666: PUSH
34667: LD_INT 45
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34675: LD_VAR 0 6
34679: PPUSH
34680: CALL_OW 264
34684: PUSH
34685: LD_INT 47
34687: PUSH
34688: EMPTY
34689: LIST
34690: IN
34691: IFFALSE 34712
// points := [ 67 , 45 , 75 ] ;
34693: LD_ADDR_VAR 0 9
34697: PUSH
34698: LD_INT 67
34700: PUSH
34701: LD_INT 45
34703: PUSH
34704: LD_INT 75
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34712: LD_VAR 0 6
34716: PPUSH
34717: CALL_OW 264
34721: PUSH
34722: LD_INT 26
34724: PUSH
34725: EMPTY
34726: LIST
34727: IN
34728: IFFALSE 34749
// points := [ 120 , 30 , 80 ] ;
34730: LD_ADDR_VAR 0 9
34734: PUSH
34735: LD_INT 120
34737: PUSH
34738: LD_INT 30
34740: PUSH
34741: LD_INT 80
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34749: LD_VAR 0 6
34753: PPUSH
34754: CALL_OW 264
34758: PUSH
34759: LD_INT 22
34761: PUSH
34762: EMPTY
34763: LIST
34764: IN
34765: IFFALSE 34786
// points := [ 40 , 1 , 1 ] ;
34767: LD_ADDR_VAR 0 9
34771: PUSH
34772: LD_INT 40
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34786: LD_VAR 0 6
34790: PPUSH
34791: CALL_OW 264
34795: PUSH
34796: LD_INT 29
34798: PUSH
34799: EMPTY
34800: LIST
34801: IN
34802: IFFALSE 34823
// points := [ 70 , 200 , 400 ] ;
34804: LD_ADDR_VAR 0 9
34808: PUSH
34809: LD_INT 70
34811: PUSH
34812: LD_INT 200
34814: PUSH
34815: LD_INT 400
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34823: LD_VAR 0 6
34827: PPUSH
34828: CALL_OW 264
34832: PUSH
34833: LD_INT 14
34835: PUSH
34836: LD_INT 53
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: IN
34843: IFFALSE 34864
// points := [ 40 , 10 , 20 ] ;
34845: LD_ADDR_VAR 0 9
34849: PUSH
34850: LD_INT 40
34852: PUSH
34853: LD_INT 10
34855: PUSH
34856: LD_INT 20
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34864: LD_VAR 0 6
34868: PPUSH
34869: CALL_OW 264
34873: PUSH
34874: LD_INT 9
34876: PUSH
34877: EMPTY
34878: LIST
34879: IN
34880: IFFALSE 34901
// points := [ 5 , 70 , 20 ] ;
34882: LD_ADDR_VAR 0 9
34886: PUSH
34887: LD_INT 5
34889: PUSH
34890: LD_INT 70
34892: PUSH
34893: LD_INT 20
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34901: LD_VAR 0 6
34905: PPUSH
34906: CALL_OW 264
34910: PUSH
34911: LD_INT 10
34913: PUSH
34914: EMPTY
34915: LIST
34916: IN
34917: IFFALSE 34938
// points := [ 35 , 110 , 70 ] ;
34919: LD_ADDR_VAR 0 9
34923: PUSH
34924: LD_INT 35
34926: PUSH
34927: LD_INT 110
34929: PUSH
34930: LD_INT 70
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34938: LD_VAR 0 6
34942: PPUSH
34943: CALL_OW 265
34947: PUSH
34948: LD_INT 25
34950: EQUAL
34951: IFFALSE 34972
// points := [ 80 , 65 , 100 ] ;
34953: LD_ADDR_VAR 0 9
34957: PUSH
34958: LD_INT 80
34960: PUSH
34961: LD_INT 65
34963: PUSH
34964: LD_INT 100
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34972: LD_VAR 0 6
34976: PPUSH
34977: CALL_OW 263
34981: PUSH
34982: LD_INT 1
34984: EQUAL
34985: IFFALSE 35020
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34987: LD_ADDR_VAR 0 10
34991: PUSH
34992: LD_VAR 0 10
34996: PUSH
34997: LD_VAR 0 6
35001: PPUSH
35002: CALL_OW 311
35006: PPUSH
35007: LD_INT 3
35009: PPUSH
35010: CALL_OW 259
35014: PUSH
35015: LD_INT 4
35017: MUL
35018: MUL
35019: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35020: LD_VAR 0 6
35024: PPUSH
35025: CALL_OW 263
35029: PUSH
35030: LD_INT 2
35032: EQUAL
35033: IFFALSE 35084
// begin j := IsControledBy ( i ) ;
35035: LD_ADDR_VAR 0 7
35039: PUSH
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 312
35049: ST_TO_ADDR
// if j then
35050: LD_VAR 0 7
35054: IFFALSE 35084
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35056: LD_ADDR_VAR 0 10
35060: PUSH
35061: LD_VAR 0 10
35065: PUSH
35066: LD_VAR 0 7
35070: PPUSH
35071: LD_INT 3
35073: PPUSH
35074: CALL_OW 259
35078: PUSH
35079: LD_INT 3
35081: MUL
35082: MUL
35083: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35084: LD_VAR 0 6
35088: PPUSH
35089: CALL_OW 264
35093: PUSH
35094: LD_INT 5
35096: PUSH
35097: LD_INT 6
35099: PUSH
35100: LD_INT 46
35102: PUSH
35103: LD_INT 44
35105: PUSH
35106: LD_INT 47
35108: PUSH
35109: LD_INT 45
35111: PUSH
35112: LD_INT 28
35114: PUSH
35115: LD_INT 7
35117: PUSH
35118: LD_INT 27
35120: PUSH
35121: LD_INT 29
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: IN
35136: PUSH
35137: LD_VAR 0 1
35141: PPUSH
35142: LD_INT 52
35144: PPUSH
35145: CALL_OW 321
35149: PUSH
35150: LD_INT 2
35152: EQUAL
35153: AND
35154: IFFALSE 35171
// bpoints := bpoints * 1.2 ;
35156: LD_ADDR_VAR 0 10
35160: PUSH
35161: LD_VAR 0 10
35165: PUSH
35166: LD_REAL  1.20000000000000E+0000
35169: MUL
35170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35171: LD_VAR 0 6
35175: PPUSH
35176: CALL_OW 264
35180: PUSH
35181: LD_INT 6
35183: PUSH
35184: LD_INT 46
35186: PUSH
35187: LD_INT 47
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: IN
35195: IFFALSE 35212
// bpoints := bpoints * 1.2 ;
35197: LD_ADDR_VAR 0 10
35201: PUSH
35202: LD_VAR 0 10
35206: PUSH
35207: LD_REAL  1.20000000000000E+0000
35210: MUL
35211: ST_TO_ADDR
// end ; unit_building :
35212: GO 35226
35214: LD_INT 3
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35225
35222: POP
// ; end ;
35223: GO 35226
35225: POP
// for j = 1 to 3 do
35226: LD_ADDR_VAR 0 7
35230: PUSH
35231: DOUBLE
35232: LD_INT 1
35234: DEC
35235: ST_TO_ADDR
35236: LD_INT 3
35238: PUSH
35239: FOR_TO
35240: IFFALSE 35293
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_VAR 0 5
35251: PPUSH
35252: LD_VAR 0 7
35256: PPUSH
35257: LD_VAR 0 5
35261: PUSH
35262: LD_VAR 0 7
35266: ARRAY
35267: PUSH
35268: LD_VAR 0 9
35272: PUSH
35273: LD_VAR 0 7
35277: ARRAY
35278: PUSH
35279: LD_VAR 0 10
35283: MUL
35284: PLUS
35285: PPUSH
35286: CALL_OW 1
35290: ST_TO_ADDR
35291: GO 35239
35293: POP
35294: POP
// end ;
35295: GO 33772
35297: POP
35298: POP
// result := Replace ( result , 4 , tmp ) ;
35299: LD_ADDR_VAR 0 5
35303: PUSH
35304: LD_VAR 0 5
35308: PPUSH
35309: LD_INT 4
35311: PPUSH
35312: LD_VAR 0 8
35316: PPUSH
35317: CALL_OW 1
35321: ST_TO_ADDR
// end ;
35322: LD_VAR 0 5
35326: RET
// export function DangerAtRange ( unit , range ) ; begin
35327: LD_INT 0
35329: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35330: LD_ADDR_VAR 0 3
35334: PUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 255
35344: PPUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 250
35354: PPUSH
35355: LD_VAR 0 1
35359: PPUSH
35360: CALL_OW 251
35364: PPUSH
35365: LD_VAR 0 2
35369: PPUSH
35370: CALL 33624 0 4
35374: ST_TO_ADDR
// end ;
35375: LD_VAR 0 3
35379: RET
// export function DangerInArea ( side , area ) ; begin
35380: LD_INT 0
35382: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35383: LD_ADDR_VAR 0 3
35387: PUSH
35388: LD_VAR 0 2
35392: PPUSH
35393: LD_INT 81
35395: PUSH
35396: LD_VAR 0 1
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PPUSH
35405: CALL_OW 70
35409: ST_TO_ADDR
// end ;
35410: LD_VAR 0 3
35414: RET
// export function IsExtension ( b ) ; begin
35415: LD_INT 0
35417: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35418: LD_ADDR_VAR 0 2
35422: PUSH
35423: LD_VAR 0 1
35427: PUSH
35428: LD_INT 23
35430: PUSH
35431: LD_INT 20
35433: PUSH
35434: LD_INT 22
35436: PUSH
35437: LD_INT 17
35439: PUSH
35440: LD_INT 24
35442: PUSH
35443: LD_INT 21
35445: PUSH
35446: LD_INT 19
35448: PUSH
35449: LD_INT 16
35451: PUSH
35452: LD_INT 25
35454: PUSH
35455: LD_INT 18
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: IN
35470: ST_TO_ADDR
// end ;
35471: LD_VAR 0 2
35475: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35476: LD_INT 0
35478: PPUSH
35479: PPUSH
35480: PPUSH
// result := [ ] ;
35481: LD_ADDR_VAR 0 4
35485: PUSH
35486: EMPTY
35487: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35488: LD_ADDR_VAR 0 5
35492: PUSH
35493: LD_VAR 0 2
35497: PPUSH
35498: LD_INT 21
35500: PUSH
35501: LD_INT 3
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PPUSH
35508: CALL_OW 70
35512: ST_TO_ADDR
// if not tmp then
35513: LD_VAR 0 5
35517: NOT
35518: IFFALSE 35522
// exit ;
35520: GO 35586
// if checkLink then
35522: LD_VAR 0 3
35526: IFFALSE 35576
// begin for i in tmp do
35528: LD_ADDR_VAR 0 6
35532: PUSH
35533: LD_VAR 0 5
35537: PUSH
35538: FOR_IN
35539: IFFALSE 35574
// if GetBase ( i ) <> base then
35541: LD_VAR 0 6
35545: PPUSH
35546: CALL_OW 274
35550: PUSH
35551: LD_VAR 0 1
35555: NONEQUAL
35556: IFFALSE 35572
// ComLinkToBase ( base , i ) ;
35558: LD_VAR 0 1
35562: PPUSH
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 169
35572: GO 35538
35574: POP
35575: POP
// end ; result := tmp ;
35576: LD_ADDR_VAR 0 4
35580: PUSH
35581: LD_VAR 0 5
35585: ST_TO_ADDR
// end ;
35586: LD_VAR 0 4
35590: RET
// export function ComComplete ( units , b ) ; var i ; begin
35591: LD_INT 0
35593: PPUSH
35594: PPUSH
// if not units then
35595: LD_VAR 0 1
35599: NOT
35600: IFFALSE 35604
// exit ;
35602: GO 35694
// for i in units do
35604: LD_ADDR_VAR 0 4
35608: PUSH
35609: LD_VAR 0 1
35613: PUSH
35614: FOR_IN
35615: IFFALSE 35692
// if BuildingStatus ( b ) = bs_build then
35617: LD_VAR 0 2
35621: PPUSH
35622: CALL_OW 461
35626: PUSH
35627: LD_INT 1
35629: EQUAL
35630: IFFALSE 35690
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35632: LD_VAR 0 4
35636: PPUSH
35637: LD_STRING h
35639: PUSH
35640: LD_VAR 0 2
35644: PPUSH
35645: CALL_OW 250
35649: PUSH
35650: LD_VAR 0 2
35654: PPUSH
35655: CALL_OW 251
35659: PUSH
35660: LD_VAR 0 2
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: PPUSH
35686: CALL_OW 446
35690: GO 35614
35692: POP
35693: POP
// end ;
35694: LD_VAR 0 3
35698: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35699: LD_INT 0
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35707: LD_VAR 0 1
35711: NOT
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 263
35722: PUSH
35723: LD_INT 2
35725: NONEQUAL
35726: OR
35727: IFFALSE 35731
// exit ;
35729: GO 36047
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35731: LD_ADDR_VAR 0 6
35735: PUSH
35736: LD_INT 22
35738: PUSH
35739: LD_VAR 0 1
35743: PPUSH
35744: CALL_OW 255
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 30
35758: PUSH
35759: LD_INT 36
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 34
35768: PUSH
35769: LD_INT 31
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 69
35789: ST_TO_ADDR
// if not tmp then
35790: LD_VAR 0 6
35794: NOT
35795: IFFALSE 35799
// exit ;
35797: GO 36047
// result := [ ] ;
35799: LD_ADDR_VAR 0 2
35803: PUSH
35804: EMPTY
35805: ST_TO_ADDR
// for i in tmp do
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: LD_VAR 0 6
35815: PUSH
35816: FOR_IN
35817: IFFALSE 35888
// begin t := UnitsInside ( i ) ;
35819: LD_ADDR_VAR 0 4
35823: PUSH
35824: LD_VAR 0 3
35828: PPUSH
35829: CALL_OW 313
35833: ST_TO_ADDR
// if t then
35834: LD_VAR 0 4
35838: IFFALSE 35886
// for j in t do
35840: LD_ADDR_VAR 0 7
35844: PUSH
35845: LD_VAR 0 4
35849: PUSH
35850: FOR_IN
35851: IFFALSE 35884
// result := Replace ( result , result + 1 , j ) ;
35853: LD_ADDR_VAR 0 2
35857: PUSH
35858: LD_VAR 0 2
35862: PPUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_INT 1
35870: PLUS
35871: PPUSH
35872: LD_VAR 0 7
35876: PPUSH
35877: CALL_OW 1
35881: ST_TO_ADDR
35882: GO 35850
35884: POP
35885: POP
// end ;
35886: GO 35816
35888: POP
35889: POP
// if not result then
35890: LD_VAR 0 2
35894: NOT
35895: IFFALSE 35899
// exit ;
35897: GO 36047
// mech := result [ 1 ] ;
35899: LD_ADDR_VAR 0 5
35903: PUSH
35904: LD_VAR 0 2
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: ST_TO_ADDR
// if result > 1 then
35913: LD_VAR 0 2
35917: PUSH
35918: LD_INT 1
35920: GREATER
35921: IFFALSE 36033
// begin for i = 2 to result do
35923: LD_ADDR_VAR 0 3
35927: PUSH
35928: DOUBLE
35929: LD_INT 2
35931: DEC
35932: ST_TO_ADDR
35933: LD_VAR 0 2
35937: PUSH
35938: FOR_TO
35939: IFFALSE 36031
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35941: LD_ADDR_VAR 0 4
35945: PUSH
35946: LD_VAR 0 2
35950: PUSH
35951: LD_VAR 0 3
35955: ARRAY
35956: PPUSH
35957: LD_INT 3
35959: PPUSH
35960: CALL_OW 259
35964: PUSH
35965: LD_VAR 0 2
35969: PUSH
35970: LD_VAR 0 3
35974: ARRAY
35975: PPUSH
35976: CALL_OW 432
35980: MINUS
35981: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35982: LD_VAR 0 4
35986: PUSH
35987: LD_VAR 0 5
35991: PPUSH
35992: LD_INT 3
35994: PPUSH
35995: CALL_OW 259
35999: PUSH
36000: LD_VAR 0 5
36004: PPUSH
36005: CALL_OW 432
36009: MINUS
36010: GREATEREQUAL
36011: IFFALSE 36029
// mech := result [ i ] ;
36013: LD_ADDR_VAR 0 5
36017: PUSH
36018: LD_VAR 0 2
36022: PUSH
36023: LD_VAR 0 3
36027: ARRAY
36028: ST_TO_ADDR
// end ;
36029: GO 35938
36031: POP
36032: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36033: LD_VAR 0 1
36037: PPUSH
36038: LD_VAR 0 5
36042: PPUSH
36043: CALL_OW 135
// end ;
36047: LD_VAR 0 2
36051: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36052: LD_INT 0
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
// result := [ ] ;
36067: LD_ADDR_VAR 0 7
36071: PUSH
36072: EMPTY
36073: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36074: LD_VAR 0 1
36078: PPUSH
36079: CALL_OW 266
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: IN
36094: NOT
36095: IFFALSE 36099
// exit ;
36097: GO 37733
// if name then
36099: LD_VAR 0 3
36103: IFFALSE 36119
// SetBName ( base_dep , name ) ;
36105: LD_VAR 0 1
36109: PPUSH
36110: LD_VAR 0 3
36114: PPUSH
36115: CALL_OW 500
// base := GetBase ( base_dep ) ;
36119: LD_ADDR_VAR 0 15
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 274
36133: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36134: LD_ADDR_VAR 0 16
36138: PUSH
36139: LD_VAR 0 1
36143: PPUSH
36144: CALL_OW 255
36148: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36149: LD_ADDR_VAR 0 17
36153: PUSH
36154: LD_VAR 0 1
36158: PPUSH
36159: CALL_OW 248
36163: ST_TO_ADDR
// if sources then
36164: LD_VAR 0 5
36168: IFFALSE 36215
// for i = 1 to 3 do
36170: LD_ADDR_VAR 0 8
36174: PUSH
36175: DOUBLE
36176: LD_INT 1
36178: DEC
36179: ST_TO_ADDR
36180: LD_INT 3
36182: PUSH
36183: FOR_TO
36184: IFFALSE 36213
// AddResourceType ( base , i , sources [ i ] ) ;
36186: LD_VAR 0 15
36190: PPUSH
36191: LD_VAR 0 8
36195: PPUSH
36196: LD_VAR 0 5
36200: PUSH
36201: LD_VAR 0 8
36205: ARRAY
36206: PPUSH
36207: CALL_OW 276
36211: GO 36183
36213: POP
36214: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36215: LD_ADDR_VAR 0 18
36219: PUSH
36220: LD_VAR 0 15
36224: PPUSH
36225: LD_VAR 0 2
36229: PPUSH
36230: LD_INT 1
36232: PPUSH
36233: CALL 35476 0 3
36237: ST_TO_ADDR
// InitHc ;
36238: CALL_OW 19
// InitUc ;
36242: CALL_OW 18
// uc_side := side ;
36246: LD_ADDR_OWVAR 20
36250: PUSH
36251: LD_VAR 0 16
36255: ST_TO_ADDR
// uc_nation := nation ;
36256: LD_ADDR_OWVAR 21
36260: PUSH
36261: LD_VAR 0 17
36265: ST_TO_ADDR
// if buildings then
36266: LD_VAR 0 18
36270: IFFALSE 37592
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36272: LD_ADDR_VAR 0 19
36276: PUSH
36277: LD_VAR 0 18
36281: PPUSH
36282: LD_INT 2
36284: PUSH
36285: LD_INT 30
36287: PUSH
36288: LD_INT 29
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 30
36297: PUSH
36298: LD_INT 30
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: PPUSH
36310: CALL_OW 72
36314: ST_TO_ADDR
// if tmp then
36315: LD_VAR 0 19
36319: IFFALSE 36367
// for i in tmp do
36321: LD_ADDR_VAR 0 8
36325: PUSH
36326: LD_VAR 0 19
36330: PUSH
36331: FOR_IN
36332: IFFALSE 36365
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36334: LD_VAR 0 8
36338: PPUSH
36339: CALL_OW 250
36343: PPUSH
36344: LD_VAR 0 8
36348: PPUSH
36349: CALL_OW 251
36353: PPUSH
36354: LD_VAR 0 16
36358: PPUSH
36359: CALL_OW 441
36363: GO 36331
36365: POP
36366: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36367: LD_VAR 0 18
36371: PPUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 30
36377: PUSH
36378: LD_INT 32
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 30
36387: PUSH
36388: LD_INT 33
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: PPUSH
36400: CALL_OW 72
36404: IFFALSE 36492
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36406: LD_ADDR_VAR 0 8
36410: PUSH
36411: LD_VAR 0 18
36415: PPUSH
36416: LD_INT 2
36418: PUSH
36419: LD_INT 30
36421: PUSH
36422: LD_INT 32
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 30
36431: PUSH
36432: LD_INT 33
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: PPUSH
36444: CALL_OW 72
36448: PUSH
36449: FOR_IN
36450: IFFALSE 36490
// begin if not GetBWeapon ( i ) then
36452: LD_VAR 0 8
36456: PPUSH
36457: CALL_OW 269
36461: NOT
36462: IFFALSE 36488
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36464: LD_VAR 0 8
36468: PPUSH
36469: LD_VAR 0 8
36473: PPUSH
36474: LD_VAR 0 2
36478: PPUSH
36479: CALL 37738 0 2
36483: PPUSH
36484: CALL_OW 431
// end ;
36488: GO 36449
36490: POP
36491: POP
// end ; for i = 1 to personel do
36492: LD_ADDR_VAR 0 8
36496: PUSH
36497: DOUBLE
36498: LD_INT 1
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 6
36506: PUSH
36507: FOR_TO
36508: IFFALSE 37572
// begin if i > 4 then
36510: LD_VAR 0 8
36514: PUSH
36515: LD_INT 4
36517: GREATER
36518: IFFALSE 36522
// break ;
36520: GO 37572
// case i of 1 :
36522: LD_VAR 0 8
36526: PUSH
36527: LD_INT 1
36529: DOUBLE
36530: EQUAL
36531: IFTRUE 36535
36533: GO 36615
36535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36536: LD_ADDR_VAR 0 12
36540: PUSH
36541: LD_VAR 0 18
36545: PPUSH
36546: LD_INT 22
36548: PUSH
36549: LD_VAR 0 16
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 58
36560: PUSH
36561: EMPTY
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 30
36569: PUSH
36570: LD_INT 32
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 30
36579: PUSH
36580: LD_INT 4
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 30
36589: PUSH
36590: LD_INT 5
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: PPUSH
36608: CALL_OW 72
36612: ST_TO_ADDR
36613: GO 36837
36615: LD_INT 2
36617: DOUBLE
36618: EQUAL
36619: IFTRUE 36623
36621: GO 36685
36623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36624: LD_ADDR_VAR 0 12
36628: PUSH
36629: LD_VAR 0 18
36633: PPUSH
36634: LD_INT 22
36636: PUSH
36637: LD_VAR 0 16
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 30
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 30
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PPUSH
36678: CALL_OW 72
36682: ST_TO_ADDR
36683: GO 36837
36685: LD_INT 3
36687: DOUBLE
36688: EQUAL
36689: IFTRUE 36693
36691: GO 36755
36693: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36694: LD_ADDR_VAR 0 12
36698: PUSH
36699: LD_VAR 0 18
36703: PPUSH
36704: LD_INT 22
36706: PUSH
36707: LD_VAR 0 16
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 30
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 30
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PPUSH
36748: CALL_OW 72
36752: ST_TO_ADDR
36753: GO 36837
36755: LD_INT 4
36757: DOUBLE
36758: EQUAL
36759: IFTRUE 36763
36761: GO 36836
36763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36764: LD_ADDR_VAR 0 12
36768: PUSH
36769: LD_VAR 0 18
36773: PPUSH
36774: LD_INT 22
36776: PUSH
36777: LD_VAR 0 16
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: PUSH
36789: LD_INT 30
36791: PUSH
36792: LD_INT 6
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 30
36801: PUSH
36802: LD_INT 7
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 30
36811: PUSH
36812: LD_INT 8
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL_OW 72
36833: ST_TO_ADDR
36834: GO 36837
36836: POP
// if i = 1 then
36837: LD_VAR 0 8
36841: PUSH
36842: LD_INT 1
36844: EQUAL
36845: IFFALSE 36956
// begin tmp := [ ] ;
36847: LD_ADDR_VAR 0 19
36851: PUSH
36852: EMPTY
36853: ST_TO_ADDR
// for j in f do
36854: LD_ADDR_VAR 0 9
36858: PUSH
36859: LD_VAR 0 12
36863: PUSH
36864: FOR_IN
36865: IFFALSE 36938
// if GetBType ( j ) = b_bunker then
36867: LD_VAR 0 9
36871: PPUSH
36872: CALL_OW 266
36876: PUSH
36877: LD_INT 32
36879: EQUAL
36880: IFFALSE 36907
// tmp := Insert ( tmp , 1 , j ) else
36882: LD_ADDR_VAR 0 19
36886: PUSH
36887: LD_VAR 0 19
36891: PPUSH
36892: LD_INT 1
36894: PPUSH
36895: LD_VAR 0 9
36899: PPUSH
36900: CALL_OW 2
36904: ST_TO_ADDR
36905: GO 36936
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36907: LD_ADDR_VAR 0 19
36911: PUSH
36912: LD_VAR 0 19
36916: PPUSH
36917: LD_VAR 0 19
36921: PUSH
36922: LD_INT 1
36924: PLUS
36925: PPUSH
36926: LD_VAR 0 9
36930: PPUSH
36931: CALL_OW 2
36935: ST_TO_ADDR
36936: GO 36864
36938: POP
36939: POP
// if tmp then
36940: LD_VAR 0 19
36944: IFFALSE 36956
// f := tmp ;
36946: LD_ADDR_VAR 0 12
36950: PUSH
36951: LD_VAR 0 19
36955: ST_TO_ADDR
// end ; x := personel [ i ] ;
36956: LD_ADDR_VAR 0 13
36960: PUSH
36961: LD_VAR 0 6
36965: PUSH
36966: LD_VAR 0 8
36970: ARRAY
36971: ST_TO_ADDR
// if x = - 1 then
36972: LD_VAR 0 13
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: EQUAL
36981: IFFALSE 37190
// begin for j in f do
36983: LD_ADDR_VAR 0 9
36987: PUSH
36988: LD_VAR 0 12
36992: PUSH
36993: FOR_IN
36994: IFFALSE 37186
// repeat InitHc ;
36996: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37000: LD_VAR 0 9
37004: PPUSH
37005: CALL_OW 266
37009: PUSH
37010: LD_INT 5
37012: EQUAL
37013: IFFALSE 37083
// begin if UnitsInside ( j ) < 3 then
37015: LD_VAR 0 9
37019: PPUSH
37020: CALL_OW 313
37024: PUSH
37025: LD_INT 3
37027: LESS
37028: IFFALSE 37064
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37030: LD_INT 0
37032: PPUSH
37033: LD_INT 5
37035: PUSH
37036: LD_INT 8
37038: PUSH
37039: LD_INT 9
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: PUSH
37047: LD_VAR 0 17
37051: ARRAY
37052: PPUSH
37053: LD_VAR 0 4
37057: PPUSH
37058: CALL_OW 380
37062: GO 37081
// PrepareHuman ( false , i , skill ) ;
37064: LD_INT 0
37066: PPUSH
37067: LD_VAR 0 8
37071: PPUSH
37072: LD_VAR 0 4
37076: PPUSH
37077: CALL_OW 380
// end else
37081: GO 37100
// PrepareHuman ( false , i , skill ) ;
37083: LD_INT 0
37085: PPUSH
37086: LD_VAR 0 8
37090: PPUSH
37091: LD_VAR 0 4
37095: PPUSH
37096: CALL_OW 380
// un := CreateHuman ;
37100: LD_ADDR_VAR 0 14
37104: PUSH
37105: CALL_OW 44
37109: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37110: LD_ADDR_VAR 0 7
37114: PUSH
37115: LD_VAR 0 7
37119: PPUSH
37120: LD_INT 1
37122: PPUSH
37123: LD_VAR 0 14
37127: PPUSH
37128: CALL_OW 2
37132: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37133: LD_VAR 0 14
37137: PPUSH
37138: LD_VAR 0 9
37142: PPUSH
37143: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37147: LD_VAR 0 9
37151: PPUSH
37152: CALL_OW 313
37156: PUSH
37157: LD_INT 6
37159: EQUAL
37160: PUSH
37161: LD_VAR 0 9
37165: PPUSH
37166: CALL_OW 266
37170: PUSH
37171: LD_INT 32
37173: PUSH
37174: LD_INT 31
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: IN
37181: OR
37182: IFFALSE 36996
37184: GO 36993
37186: POP
37187: POP
// end else
37188: GO 37570
// for j = 1 to x do
37190: LD_ADDR_VAR 0 9
37194: PUSH
37195: DOUBLE
37196: LD_INT 1
37198: DEC
37199: ST_TO_ADDR
37200: LD_VAR 0 13
37204: PUSH
37205: FOR_TO
37206: IFFALSE 37568
// begin InitHc ;
37208: CALL_OW 19
// if not f then
37212: LD_VAR 0 12
37216: NOT
37217: IFFALSE 37306
// begin PrepareHuman ( false , i , skill ) ;
37219: LD_INT 0
37221: PPUSH
37222: LD_VAR 0 8
37226: PPUSH
37227: LD_VAR 0 4
37231: PPUSH
37232: CALL_OW 380
// un := CreateHuman ;
37236: LD_ADDR_VAR 0 14
37240: PUSH
37241: CALL_OW 44
37245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37246: LD_ADDR_VAR 0 7
37250: PUSH
37251: LD_VAR 0 7
37255: PPUSH
37256: LD_INT 1
37258: PPUSH
37259: LD_VAR 0 14
37263: PPUSH
37264: CALL_OW 2
37268: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37269: LD_VAR 0 14
37273: PPUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 250
37283: PPUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL_OW 251
37293: PPUSH
37294: LD_INT 10
37296: PPUSH
37297: LD_INT 0
37299: PPUSH
37300: CALL_OW 50
// continue ;
37304: GO 37205
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37306: LD_VAR 0 12
37310: PUSH
37311: LD_INT 1
37313: ARRAY
37314: PPUSH
37315: CALL_OW 313
37319: PUSH
37320: LD_VAR 0 12
37324: PUSH
37325: LD_INT 1
37327: ARRAY
37328: PPUSH
37329: CALL_OW 266
37333: PUSH
37334: LD_INT 32
37336: PUSH
37337: LD_INT 31
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: IN
37344: AND
37345: PUSH
37346: LD_VAR 0 12
37350: PUSH
37351: LD_INT 1
37353: ARRAY
37354: PPUSH
37355: CALL_OW 313
37359: PUSH
37360: LD_INT 6
37362: EQUAL
37363: OR
37364: IFFALSE 37384
// f := Delete ( f , 1 ) ;
37366: LD_ADDR_VAR 0 12
37370: PUSH
37371: LD_VAR 0 12
37375: PPUSH
37376: LD_INT 1
37378: PPUSH
37379: CALL_OW 3
37383: ST_TO_ADDR
// if not f then
37384: LD_VAR 0 12
37388: NOT
37389: IFFALSE 37407
// begin x := x + 2 ;
37391: LD_ADDR_VAR 0 13
37395: PUSH
37396: LD_VAR 0 13
37400: PUSH
37401: LD_INT 2
37403: PLUS
37404: ST_TO_ADDR
// continue ;
37405: GO 37205
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37407: LD_VAR 0 12
37411: PUSH
37412: LD_INT 1
37414: ARRAY
37415: PPUSH
37416: CALL_OW 266
37420: PUSH
37421: LD_INT 5
37423: EQUAL
37424: IFFALSE 37498
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37426: LD_VAR 0 12
37430: PUSH
37431: LD_INT 1
37433: ARRAY
37434: PPUSH
37435: CALL_OW 313
37439: PUSH
37440: LD_INT 3
37442: LESS
37443: IFFALSE 37479
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37445: LD_INT 0
37447: PPUSH
37448: LD_INT 5
37450: PUSH
37451: LD_INT 8
37453: PUSH
37454: LD_INT 9
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: PUSH
37462: LD_VAR 0 17
37466: ARRAY
37467: PPUSH
37468: LD_VAR 0 4
37472: PPUSH
37473: CALL_OW 380
37477: GO 37496
// PrepareHuman ( false , i , skill ) ;
37479: LD_INT 0
37481: PPUSH
37482: LD_VAR 0 8
37486: PPUSH
37487: LD_VAR 0 4
37491: PPUSH
37492: CALL_OW 380
// end else
37496: GO 37515
// PrepareHuman ( false , i , skill ) ;
37498: LD_INT 0
37500: PPUSH
37501: LD_VAR 0 8
37505: PPUSH
37506: LD_VAR 0 4
37510: PPUSH
37511: CALL_OW 380
// un := CreateHuman ;
37515: LD_ADDR_VAR 0 14
37519: PUSH
37520: CALL_OW 44
37524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37525: LD_ADDR_VAR 0 7
37529: PUSH
37530: LD_VAR 0 7
37534: PPUSH
37535: LD_INT 1
37537: PPUSH
37538: LD_VAR 0 14
37542: PPUSH
37543: CALL_OW 2
37547: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37548: LD_VAR 0 14
37552: PPUSH
37553: LD_VAR 0 12
37557: PUSH
37558: LD_INT 1
37560: ARRAY
37561: PPUSH
37562: CALL_OW 52
// end ;
37566: GO 37205
37568: POP
37569: POP
// end ;
37570: GO 36507
37572: POP
37573: POP
// result := result ^ buildings ;
37574: LD_ADDR_VAR 0 7
37578: PUSH
37579: LD_VAR 0 7
37583: PUSH
37584: LD_VAR 0 18
37588: ADD
37589: ST_TO_ADDR
// end else
37590: GO 37733
// begin for i = 1 to personel do
37592: LD_ADDR_VAR 0 8
37596: PUSH
37597: DOUBLE
37598: LD_INT 1
37600: DEC
37601: ST_TO_ADDR
37602: LD_VAR 0 6
37606: PUSH
37607: FOR_TO
37608: IFFALSE 37731
// begin if i > 4 then
37610: LD_VAR 0 8
37614: PUSH
37615: LD_INT 4
37617: GREATER
37618: IFFALSE 37622
// break ;
37620: GO 37731
// x := personel [ i ] ;
37622: LD_ADDR_VAR 0 13
37626: PUSH
37627: LD_VAR 0 6
37631: PUSH
37632: LD_VAR 0 8
37636: ARRAY
37637: ST_TO_ADDR
// if x = - 1 then
37638: LD_VAR 0 13
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: EQUAL
37647: IFFALSE 37651
// continue ;
37649: GO 37607
// PrepareHuman ( false , i , skill ) ;
37651: LD_INT 0
37653: PPUSH
37654: LD_VAR 0 8
37658: PPUSH
37659: LD_VAR 0 4
37663: PPUSH
37664: CALL_OW 380
// un := CreateHuman ;
37668: LD_ADDR_VAR 0 14
37672: PUSH
37673: CALL_OW 44
37677: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37678: LD_VAR 0 14
37682: PPUSH
37683: LD_VAR 0 1
37687: PPUSH
37688: CALL_OW 250
37692: PPUSH
37693: LD_VAR 0 1
37697: PPUSH
37698: CALL_OW 251
37702: PPUSH
37703: LD_INT 10
37705: PPUSH
37706: LD_INT 0
37708: PPUSH
37709: CALL_OW 50
// result := result ^ un ;
37713: LD_ADDR_VAR 0 7
37717: PUSH
37718: LD_VAR 0 7
37722: PUSH
37723: LD_VAR 0 14
37727: ADD
37728: ST_TO_ADDR
// end ;
37729: GO 37607
37731: POP
37732: POP
// end ; end ;
37733: LD_VAR 0 7
37737: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37738: LD_INT 0
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
37746: PPUSH
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
// result := false ;
37756: LD_ADDR_VAR 0 3
37760: PUSH
37761: LD_INT 0
37763: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37764: LD_VAR 0 1
37768: NOT
37769: PUSH
37770: LD_VAR 0 1
37774: PPUSH
37775: CALL_OW 266
37779: PUSH
37780: LD_INT 32
37782: PUSH
37783: LD_INT 33
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: IN
37790: NOT
37791: OR
37792: IFFALSE 37796
// exit ;
37794: GO 38905
// nat := GetNation ( tower ) ;
37796: LD_ADDR_VAR 0 12
37800: PUSH
37801: LD_VAR 0 1
37805: PPUSH
37806: CALL_OW 248
37810: ST_TO_ADDR
// side := GetSide ( tower ) ;
37811: LD_ADDR_VAR 0 16
37815: PUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 255
37825: ST_TO_ADDR
// x := GetX ( tower ) ;
37826: LD_ADDR_VAR 0 10
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 250
37840: ST_TO_ADDR
// y := GetY ( tower ) ;
37841: LD_ADDR_VAR 0 11
37845: PUSH
37846: LD_VAR 0 1
37850: PPUSH
37851: CALL_OW 251
37855: ST_TO_ADDR
// if not x or not y then
37856: LD_VAR 0 10
37860: NOT
37861: PUSH
37862: LD_VAR 0 11
37866: NOT
37867: OR
37868: IFFALSE 37872
// exit ;
37870: GO 38905
// weapon := 0 ;
37872: LD_ADDR_VAR 0 18
37876: PUSH
37877: LD_INT 0
37879: ST_TO_ADDR
// fac_list := [ ] ;
37880: LD_ADDR_VAR 0 17
37884: PUSH
37885: EMPTY
37886: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37887: LD_ADDR_VAR 0 6
37891: PUSH
37892: LD_VAR 0 1
37896: PPUSH
37897: CALL_OW 274
37901: PPUSH
37902: LD_VAR 0 2
37906: PPUSH
37907: LD_INT 0
37909: PPUSH
37910: CALL 35476 0 3
37914: PPUSH
37915: LD_INT 30
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PPUSH
37925: CALL_OW 72
37929: ST_TO_ADDR
// if not factories then
37930: LD_VAR 0 6
37934: NOT
37935: IFFALSE 37939
// exit ;
37937: GO 38905
// for i in factories do
37939: LD_ADDR_VAR 0 8
37943: PUSH
37944: LD_VAR 0 6
37948: PUSH
37949: FOR_IN
37950: IFFALSE 37975
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37952: LD_ADDR_VAR 0 17
37956: PUSH
37957: LD_VAR 0 17
37961: PUSH
37962: LD_VAR 0 8
37966: PPUSH
37967: CALL_OW 478
37971: UNION
37972: ST_TO_ADDR
37973: GO 37949
37975: POP
37976: POP
// if not fac_list then
37977: LD_VAR 0 17
37981: NOT
37982: IFFALSE 37986
// exit ;
37984: GO 38905
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37986: LD_ADDR_VAR 0 5
37990: PUSH
37991: LD_INT 4
37993: PUSH
37994: LD_INT 5
37996: PUSH
37997: LD_INT 9
37999: PUSH
38000: LD_INT 10
38002: PUSH
38003: LD_INT 6
38005: PUSH
38006: LD_INT 7
38008: PUSH
38009: LD_INT 11
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 27
38023: PUSH
38024: LD_INT 28
38026: PUSH
38027: LD_INT 26
38029: PUSH
38030: LD_INT 30
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 43
38041: PUSH
38042: LD_INT 44
38044: PUSH
38045: LD_INT 46
38047: PUSH
38048: LD_INT 45
38050: PUSH
38051: LD_INT 47
38053: PUSH
38054: LD_INT 49
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: PUSH
38070: LD_VAR 0 12
38074: ARRAY
38075: ST_TO_ADDR
// list := list isect fac_list ;
38076: LD_ADDR_VAR 0 5
38080: PUSH
38081: LD_VAR 0 5
38085: PUSH
38086: LD_VAR 0 17
38090: ISECT
38091: ST_TO_ADDR
// if not list then
38092: LD_VAR 0 5
38096: NOT
38097: IFFALSE 38101
// exit ;
38099: GO 38905
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38101: LD_VAR 0 12
38105: PUSH
38106: LD_INT 3
38108: EQUAL
38109: PUSH
38110: LD_INT 49
38112: PUSH
38113: LD_VAR 0 5
38117: IN
38118: AND
38119: PUSH
38120: LD_INT 31
38122: PPUSH
38123: LD_VAR 0 16
38127: PPUSH
38128: CALL_OW 321
38132: PUSH
38133: LD_INT 2
38135: EQUAL
38136: AND
38137: IFFALSE 38197
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38139: LD_INT 22
38141: PUSH
38142: LD_VAR 0 16
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 35
38153: PUSH
38154: LD_INT 49
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 91
38163: PUSH
38164: LD_VAR 0 1
38168: PUSH
38169: LD_INT 10
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 69
38186: NOT
38187: IFFALSE 38197
// weapon := ru_time_lapser ;
38189: LD_ADDR_VAR 0 18
38193: PUSH
38194: LD_INT 49
38196: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38197: LD_VAR 0 12
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: IN
38212: PUSH
38213: LD_INT 11
38215: PUSH
38216: LD_VAR 0 5
38220: IN
38221: PUSH
38222: LD_INT 30
38224: PUSH
38225: LD_VAR 0 5
38229: IN
38230: OR
38231: AND
38232: PUSH
38233: LD_INT 6
38235: PPUSH
38236: LD_VAR 0 16
38240: PPUSH
38241: CALL_OW 321
38245: PUSH
38246: LD_INT 2
38248: EQUAL
38249: AND
38250: IFFALSE 38415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38252: LD_INT 22
38254: PUSH
38255: LD_VAR 0 16
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 35
38269: PUSH
38270: LD_INT 11
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 35
38279: PUSH
38280: LD_INT 30
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 91
38294: PUSH
38295: LD_VAR 0 1
38299: PUSH
38300: LD_INT 18
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL_OW 69
38317: NOT
38318: PUSH
38319: LD_INT 22
38321: PUSH
38322: LD_VAR 0 16
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 30
38336: PUSH
38337: LD_INT 32
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 30
38346: PUSH
38347: LD_INT 33
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 91
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: LD_INT 12
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: PPUSH
38383: CALL_OW 69
38387: PUSH
38388: LD_INT 2
38390: GREATER
38391: AND
38392: IFFALSE 38415
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38394: LD_ADDR_VAR 0 18
38398: PUSH
38399: LD_INT 11
38401: PUSH
38402: LD_INT 30
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_VAR 0 12
38413: ARRAY
38414: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38415: LD_VAR 0 18
38419: NOT
38420: PUSH
38421: LD_INT 40
38423: PPUSH
38424: LD_VAR 0 16
38428: PPUSH
38429: CALL_OW 321
38433: PUSH
38434: LD_INT 2
38436: EQUAL
38437: AND
38438: PUSH
38439: LD_INT 7
38441: PUSH
38442: LD_VAR 0 5
38446: IN
38447: PUSH
38448: LD_INT 28
38450: PUSH
38451: LD_VAR 0 5
38455: IN
38456: OR
38457: PUSH
38458: LD_INT 45
38460: PUSH
38461: LD_VAR 0 5
38465: IN
38466: OR
38467: AND
38468: IFFALSE 38722
// begin hex := GetHexInfo ( x , y ) ;
38470: LD_ADDR_VAR 0 4
38474: PUSH
38475: LD_VAR 0 10
38479: PPUSH
38480: LD_VAR 0 11
38484: PPUSH
38485: CALL_OW 546
38489: ST_TO_ADDR
// if hex [ 1 ] then
38490: LD_VAR 0 4
38494: PUSH
38495: LD_INT 1
38497: ARRAY
38498: IFFALSE 38502
// exit ;
38500: GO 38905
// height := hex [ 2 ] ;
38502: LD_ADDR_VAR 0 15
38506: PUSH
38507: LD_VAR 0 4
38511: PUSH
38512: LD_INT 2
38514: ARRAY
38515: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38516: LD_ADDR_VAR 0 14
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 3
38529: PUSH
38530: LD_INT 5
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// for i in tmp do
38539: LD_ADDR_VAR 0 8
38543: PUSH
38544: LD_VAR 0 14
38548: PUSH
38549: FOR_IN
38550: IFFALSE 38720
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38552: LD_ADDR_VAR 0 9
38556: PUSH
38557: LD_VAR 0 10
38561: PPUSH
38562: LD_VAR 0 8
38566: PPUSH
38567: LD_INT 5
38569: PPUSH
38570: CALL_OW 272
38574: PUSH
38575: LD_VAR 0 11
38579: PPUSH
38580: LD_VAR 0 8
38584: PPUSH
38585: LD_INT 5
38587: PPUSH
38588: CALL_OW 273
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38597: LD_VAR 0 9
38601: PUSH
38602: LD_INT 1
38604: ARRAY
38605: PPUSH
38606: LD_VAR 0 9
38610: PUSH
38611: LD_INT 2
38613: ARRAY
38614: PPUSH
38615: CALL_OW 488
38619: IFFALSE 38718
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38621: LD_ADDR_VAR 0 4
38625: PUSH
38626: LD_VAR 0 9
38630: PUSH
38631: LD_INT 1
38633: ARRAY
38634: PPUSH
38635: LD_VAR 0 9
38639: PUSH
38640: LD_INT 2
38642: ARRAY
38643: PPUSH
38644: CALL_OW 546
38648: ST_TO_ADDR
// if hex [ 1 ] then
38649: LD_VAR 0 4
38653: PUSH
38654: LD_INT 1
38656: ARRAY
38657: IFFALSE 38661
// continue ;
38659: GO 38549
// h := hex [ 2 ] ;
38661: LD_ADDR_VAR 0 13
38665: PUSH
38666: LD_VAR 0 4
38670: PUSH
38671: LD_INT 2
38673: ARRAY
38674: ST_TO_ADDR
// if h + 7 < height then
38675: LD_VAR 0 13
38679: PUSH
38680: LD_INT 7
38682: PLUS
38683: PUSH
38684: LD_VAR 0 15
38688: LESS
38689: IFFALSE 38718
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38691: LD_ADDR_VAR 0 18
38695: PUSH
38696: LD_INT 7
38698: PUSH
38699: LD_INT 28
38701: PUSH
38702: LD_INT 45
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: LD_VAR 0 12
38714: ARRAY
38715: ST_TO_ADDR
// break ;
38716: GO 38720
// end ; end ; end ;
38718: GO 38549
38720: POP
38721: POP
// end ; if not weapon then
38722: LD_VAR 0 18
38726: NOT
38727: IFFALSE 38787
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38729: LD_ADDR_VAR 0 5
38733: PUSH
38734: LD_VAR 0 5
38738: PUSH
38739: LD_INT 11
38741: PUSH
38742: LD_INT 30
38744: PUSH
38745: LD_INT 49
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: DIFF
38753: ST_TO_ADDR
// if not list then
38754: LD_VAR 0 5
38758: NOT
38759: IFFALSE 38763
// exit ;
38761: GO 38905
// weapon := list [ rand ( 1 , list ) ] ;
38763: LD_ADDR_VAR 0 18
38767: PUSH
38768: LD_VAR 0 5
38772: PUSH
38773: LD_INT 1
38775: PPUSH
38776: LD_VAR 0 5
38780: PPUSH
38781: CALL_OW 12
38785: ARRAY
38786: ST_TO_ADDR
// end ; if weapon then
38787: LD_VAR 0 18
38791: IFFALSE 38905
// begin tmp := CostOfWeapon ( weapon ) ;
38793: LD_ADDR_VAR 0 14
38797: PUSH
38798: LD_VAR 0 18
38802: PPUSH
38803: CALL_OW 451
38807: ST_TO_ADDR
// j := GetBase ( tower ) ;
38808: LD_ADDR_VAR 0 9
38812: PUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL_OW 274
38822: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38823: LD_VAR 0 9
38827: PPUSH
38828: LD_INT 1
38830: PPUSH
38831: CALL_OW 275
38835: PUSH
38836: LD_VAR 0 14
38840: PUSH
38841: LD_INT 1
38843: ARRAY
38844: GREATEREQUAL
38845: PUSH
38846: LD_VAR 0 9
38850: PPUSH
38851: LD_INT 2
38853: PPUSH
38854: CALL_OW 275
38858: PUSH
38859: LD_VAR 0 14
38863: PUSH
38864: LD_INT 2
38866: ARRAY
38867: GREATEREQUAL
38868: AND
38869: PUSH
38870: LD_VAR 0 9
38874: PPUSH
38875: LD_INT 3
38877: PPUSH
38878: CALL_OW 275
38882: PUSH
38883: LD_VAR 0 14
38887: PUSH
38888: LD_INT 3
38890: ARRAY
38891: GREATEREQUAL
38892: AND
38893: IFFALSE 38905
// result := weapon ;
38895: LD_ADDR_VAR 0 3
38899: PUSH
38900: LD_VAR 0 18
38904: ST_TO_ADDR
// end ; end ;
38905: LD_VAR 0 3
38909: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38910: LD_INT 0
38912: PPUSH
38913: PPUSH
// result := true ;
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_INT 1
38921: ST_TO_ADDR
// if array1 = array2 then
38922: LD_VAR 0 1
38926: PUSH
38927: LD_VAR 0 2
38931: EQUAL
38932: IFFALSE 38992
// begin for i = 1 to array1 do
38934: LD_ADDR_VAR 0 4
38938: PUSH
38939: DOUBLE
38940: LD_INT 1
38942: DEC
38943: ST_TO_ADDR
38944: LD_VAR 0 1
38948: PUSH
38949: FOR_TO
38950: IFFALSE 38988
// if array1 [ i ] <> array2 [ i ] then
38952: LD_VAR 0 1
38956: PUSH
38957: LD_VAR 0 4
38961: ARRAY
38962: PUSH
38963: LD_VAR 0 2
38967: PUSH
38968: LD_VAR 0 4
38972: ARRAY
38973: NONEQUAL
38974: IFFALSE 38986
// begin result := false ;
38976: LD_ADDR_VAR 0 3
38980: PUSH
38981: LD_INT 0
38983: ST_TO_ADDR
// break ;
38984: GO 38988
// end ;
38986: GO 38949
38988: POP
38989: POP
// end else
38990: GO 39000
// result := false ;
38992: LD_ADDR_VAR 0 3
38996: PUSH
38997: LD_INT 0
38999: ST_TO_ADDR
// end ;
39000: LD_VAR 0 3
39004: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
// if not array1 or not array2 then
39009: LD_VAR 0 1
39013: NOT
39014: PUSH
39015: LD_VAR 0 2
39019: NOT
39020: OR
39021: IFFALSE 39025
// exit ;
39023: GO 39089
// result := true ;
39025: LD_ADDR_VAR 0 3
39029: PUSH
39030: LD_INT 1
39032: ST_TO_ADDR
// for i = 1 to array1 do
39033: LD_ADDR_VAR 0 4
39037: PUSH
39038: DOUBLE
39039: LD_INT 1
39041: DEC
39042: ST_TO_ADDR
39043: LD_VAR 0 1
39047: PUSH
39048: FOR_TO
39049: IFFALSE 39087
// if array1 [ i ] <> array2 [ i ] then
39051: LD_VAR 0 1
39055: PUSH
39056: LD_VAR 0 4
39060: ARRAY
39061: PUSH
39062: LD_VAR 0 2
39066: PUSH
39067: LD_VAR 0 4
39071: ARRAY
39072: NONEQUAL
39073: IFFALSE 39085
// begin result := false ;
39075: LD_ADDR_VAR 0 3
39079: PUSH
39080: LD_INT 0
39082: ST_TO_ADDR
// break ;
39083: GO 39087
// end ;
39085: GO 39048
39087: POP
39088: POP
// end ;
39089: LD_VAR 0 3
39093: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
39098: PPUSH
// pom := GetBase ( fac ) ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: CALL_OW 274
39113: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: LD_VAR 0 2
39123: PUSH
39124: LD_INT 1
39126: ARRAY
39127: PPUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_INT 2
39135: ARRAY
39136: PPUSH
39137: LD_VAR 0 2
39141: PUSH
39142: LD_INT 3
39144: ARRAY
39145: PPUSH
39146: LD_VAR 0 2
39150: PUSH
39151: LD_INT 4
39153: ARRAY
39154: PPUSH
39155: CALL_OW 449
39159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39160: LD_ADDR_VAR 0 3
39164: PUSH
39165: LD_VAR 0 5
39169: PPUSH
39170: LD_INT 1
39172: PPUSH
39173: CALL_OW 275
39177: PUSH
39178: LD_VAR 0 4
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: GREATEREQUAL
39187: PUSH
39188: LD_VAR 0 5
39192: PPUSH
39193: LD_INT 2
39195: PPUSH
39196: CALL_OW 275
39200: PUSH
39201: LD_VAR 0 4
39205: PUSH
39206: LD_INT 2
39208: ARRAY
39209: GREATEREQUAL
39210: AND
39211: PUSH
39212: LD_VAR 0 5
39216: PPUSH
39217: LD_INT 3
39219: PPUSH
39220: CALL_OW 275
39224: PUSH
39225: LD_VAR 0 4
39229: PUSH
39230: LD_INT 3
39232: ARRAY
39233: GREATEREQUAL
39234: AND
39235: ST_TO_ADDR
// end ;
39236: LD_VAR 0 3
39240: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
// pom := GetBase ( building ) ;
39247: LD_ADDR_VAR 0 3
39251: PUSH
39252: LD_VAR 0 1
39256: PPUSH
39257: CALL_OW 274
39261: ST_TO_ADDR
// if not pom then
39262: LD_VAR 0 3
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39441
// btype := GetBType ( building ) ;
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 266
39285: ST_TO_ADDR
// if btype = b_armoury then
39286: LD_VAR 0 5
39290: PUSH
39291: LD_INT 4
39293: EQUAL
39294: IFFALSE 39304
// btype := b_barracks ;
39296: LD_ADDR_VAR 0 5
39300: PUSH
39301: LD_INT 5
39303: ST_TO_ADDR
// if btype = b_depot then
39304: LD_VAR 0 5
39308: PUSH
39309: LD_INT 0
39311: EQUAL
39312: IFFALSE 39322
// btype := b_warehouse ;
39314: LD_ADDR_VAR 0 5
39318: PUSH
39319: LD_INT 1
39321: ST_TO_ADDR
// if btype = b_workshop then
39322: LD_VAR 0 5
39326: PUSH
39327: LD_INT 2
39329: EQUAL
39330: IFFALSE 39340
// btype := b_factory ;
39332: LD_ADDR_VAR 0 5
39336: PUSH
39337: LD_INT 3
39339: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39340: LD_ADDR_VAR 0 4
39344: PUSH
39345: LD_VAR 0 5
39349: PPUSH
39350: LD_VAR 0 1
39354: PPUSH
39355: CALL_OW 248
39359: PPUSH
39360: CALL_OW 450
39364: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39365: LD_ADDR_VAR 0 2
39369: PUSH
39370: LD_VAR 0 3
39374: PPUSH
39375: LD_INT 1
39377: PPUSH
39378: CALL_OW 275
39382: PUSH
39383: LD_VAR 0 4
39387: PUSH
39388: LD_INT 1
39390: ARRAY
39391: GREATEREQUAL
39392: PUSH
39393: LD_VAR 0 3
39397: PPUSH
39398: LD_INT 2
39400: PPUSH
39401: CALL_OW 275
39405: PUSH
39406: LD_VAR 0 4
39410: PUSH
39411: LD_INT 2
39413: ARRAY
39414: GREATEREQUAL
39415: AND
39416: PUSH
39417: LD_VAR 0 3
39421: PPUSH
39422: LD_INT 3
39424: PPUSH
39425: CALL_OW 275
39429: PUSH
39430: LD_VAR 0 4
39434: PUSH
39435: LD_INT 3
39437: ARRAY
39438: GREATEREQUAL
39439: AND
39440: ST_TO_ADDR
// end ;
39441: LD_VAR 0 2
39445: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39446: LD_INT 0
39448: PPUSH
39449: PPUSH
39450: PPUSH
// pom := GetBase ( building ) ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_VAR 0 1
39460: PPUSH
39461: CALL_OW 274
39465: ST_TO_ADDR
// if not pom then
39466: LD_VAR 0 4
39470: NOT
39471: IFFALSE 39475
// exit ;
39473: GO 39576
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39475: LD_ADDR_VAR 0 5
39479: PUSH
39480: LD_VAR 0 2
39484: PPUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 248
39494: PPUSH
39495: CALL_OW 450
39499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39500: LD_ADDR_VAR 0 3
39504: PUSH
39505: LD_VAR 0 4
39509: PPUSH
39510: LD_INT 1
39512: PPUSH
39513: CALL_OW 275
39517: PUSH
39518: LD_VAR 0 5
39522: PUSH
39523: LD_INT 1
39525: ARRAY
39526: GREATEREQUAL
39527: PUSH
39528: LD_VAR 0 4
39532: PPUSH
39533: LD_INT 2
39535: PPUSH
39536: CALL_OW 275
39540: PUSH
39541: LD_VAR 0 5
39545: PUSH
39546: LD_INT 2
39548: ARRAY
39549: GREATEREQUAL
39550: AND
39551: PUSH
39552: LD_VAR 0 4
39556: PPUSH
39557: LD_INT 3
39559: PPUSH
39560: CALL_OW 275
39564: PUSH
39565: LD_VAR 0 5
39569: PUSH
39570: LD_INT 3
39572: ARRAY
39573: GREATEREQUAL
39574: AND
39575: ST_TO_ADDR
// end ;
39576: LD_VAR 0 3
39580: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39581: LD_INT 0
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
// result := false ;
39594: LD_ADDR_VAR 0 8
39598: PUSH
39599: LD_INT 0
39601: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39602: LD_VAR 0 5
39606: NOT
39607: PUSH
39608: LD_VAR 0 1
39612: NOT
39613: OR
39614: PUSH
39615: LD_VAR 0 2
39619: NOT
39620: OR
39621: PUSH
39622: LD_VAR 0 3
39626: NOT
39627: OR
39628: IFFALSE 39632
// exit ;
39630: GO 40446
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39632: LD_ADDR_VAR 0 14
39636: PUSH
39637: LD_VAR 0 1
39641: PPUSH
39642: LD_VAR 0 2
39646: PPUSH
39647: LD_VAR 0 3
39651: PPUSH
39652: LD_VAR 0 4
39656: PPUSH
39657: LD_VAR 0 5
39661: PUSH
39662: LD_INT 1
39664: ARRAY
39665: PPUSH
39666: CALL_OW 248
39670: PPUSH
39671: LD_INT 0
39673: PPUSH
39674: CALL 41683 0 6
39678: ST_TO_ADDR
// if not hexes then
39679: LD_VAR 0 14
39683: NOT
39684: IFFALSE 39688
// exit ;
39686: GO 40446
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39688: LD_ADDR_VAR 0 17
39692: PUSH
39693: LD_VAR 0 5
39697: PPUSH
39698: LD_INT 22
39700: PUSH
39701: LD_VAR 0 13
39705: PPUSH
39706: CALL_OW 255
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 30
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PPUSH
39747: CALL_OW 72
39751: ST_TO_ADDR
// for i = 1 to hexes do
39752: LD_ADDR_VAR 0 9
39756: PUSH
39757: DOUBLE
39758: LD_INT 1
39760: DEC
39761: ST_TO_ADDR
39762: LD_VAR 0 14
39766: PUSH
39767: FOR_TO
39768: IFFALSE 40444
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39770: LD_ADDR_VAR 0 13
39774: PUSH
39775: LD_VAR 0 14
39779: PUSH
39780: LD_VAR 0 9
39784: ARRAY
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_VAR 0 14
39794: PUSH
39795: LD_VAR 0 9
39799: ARRAY
39800: PUSH
39801: LD_INT 2
39803: ARRAY
39804: PPUSH
39805: CALL_OW 428
39809: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39810: LD_VAR 0 14
39814: PUSH
39815: LD_VAR 0 9
39819: ARRAY
39820: PUSH
39821: LD_INT 1
39823: ARRAY
39824: PPUSH
39825: LD_VAR 0 14
39829: PUSH
39830: LD_VAR 0 9
39834: ARRAY
39835: PUSH
39836: LD_INT 2
39838: ARRAY
39839: PPUSH
39840: CALL_OW 351
39844: PUSH
39845: LD_VAR 0 14
39849: PUSH
39850: LD_VAR 0 9
39854: ARRAY
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: PPUSH
39860: LD_VAR 0 14
39864: PUSH
39865: LD_VAR 0 9
39869: ARRAY
39870: PUSH
39871: LD_INT 2
39873: ARRAY
39874: PPUSH
39875: CALL_OW 488
39879: NOT
39880: OR
39881: PUSH
39882: LD_VAR 0 13
39886: PPUSH
39887: CALL_OW 247
39891: PUSH
39892: LD_INT 3
39894: EQUAL
39895: OR
39896: IFFALSE 39902
// exit ;
39898: POP
39899: POP
39900: GO 40446
// if not tmp then
39902: LD_VAR 0 13
39906: NOT
39907: IFFALSE 39911
// continue ;
39909: GO 39767
// result := true ;
39911: LD_ADDR_VAR 0 8
39915: PUSH
39916: LD_INT 1
39918: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39919: LD_VAR 0 6
39923: PUSH
39924: LD_VAR 0 13
39928: PPUSH
39929: CALL_OW 247
39933: PUSH
39934: LD_INT 2
39936: EQUAL
39937: AND
39938: PUSH
39939: LD_VAR 0 13
39943: PPUSH
39944: CALL_OW 263
39948: PUSH
39949: LD_INT 1
39951: EQUAL
39952: AND
39953: IFFALSE 40117
// begin if IsDrivenBy ( tmp ) then
39955: LD_VAR 0 13
39959: PPUSH
39960: CALL_OW 311
39964: IFFALSE 39968
// continue ;
39966: GO 39767
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39968: LD_VAR 0 6
39972: PPUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 60
39978: PUSH
39979: EMPTY
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: LD_INT 55
39991: PUSH
39992: EMPTY
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PPUSH
40003: CALL_OW 72
40007: IFFALSE 40115
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40009: LD_ADDR_VAR 0 18
40013: PUSH
40014: LD_VAR 0 6
40018: PPUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 60
40024: PUSH
40025: EMPTY
40026: LIST
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: LD_INT 55
40037: PUSH
40038: EMPTY
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PPUSH
40049: CALL_OW 72
40053: PUSH
40054: LD_INT 1
40056: ARRAY
40057: ST_TO_ADDR
// if IsInUnit ( driver ) then
40058: LD_VAR 0 18
40062: PPUSH
40063: CALL_OW 310
40067: IFFALSE 40078
// ComExit ( driver ) ;
40069: LD_VAR 0 18
40073: PPUSH
40074: CALL 64867 0 1
// AddComEnterUnit ( driver , tmp ) ;
40078: LD_VAR 0 18
40082: PPUSH
40083: LD_VAR 0 13
40087: PPUSH
40088: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40092: LD_VAR 0 18
40096: PPUSH
40097: LD_VAR 0 7
40101: PPUSH
40102: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40106: LD_VAR 0 18
40110: PPUSH
40111: CALL_OW 181
// end ; continue ;
40115: GO 39767
// end ; if not cleaners or not tmp in cleaners then
40117: LD_VAR 0 6
40121: NOT
40122: PUSH
40123: LD_VAR 0 13
40127: PUSH
40128: LD_VAR 0 6
40132: IN
40133: NOT
40134: OR
40135: IFFALSE 40442
// begin if dep then
40137: LD_VAR 0 17
40141: IFFALSE 40277
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40143: LD_ADDR_VAR 0 16
40147: PUSH
40148: LD_VAR 0 17
40152: PUSH
40153: LD_INT 1
40155: ARRAY
40156: PPUSH
40157: CALL_OW 250
40161: PPUSH
40162: LD_VAR 0 17
40166: PUSH
40167: LD_INT 1
40169: ARRAY
40170: PPUSH
40171: CALL_OW 254
40175: PPUSH
40176: LD_INT 5
40178: PPUSH
40179: CALL_OW 272
40183: PUSH
40184: LD_VAR 0 17
40188: PUSH
40189: LD_INT 1
40191: ARRAY
40192: PPUSH
40193: CALL_OW 251
40197: PPUSH
40198: LD_VAR 0 17
40202: PUSH
40203: LD_INT 1
40205: ARRAY
40206: PPUSH
40207: CALL_OW 254
40211: PPUSH
40212: LD_INT 5
40214: PPUSH
40215: CALL_OW 273
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40224: LD_VAR 0 16
40228: PUSH
40229: LD_INT 1
40231: ARRAY
40232: PPUSH
40233: LD_VAR 0 16
40237: PUSH
40238: LD_INT 2
40240: ARRAY
40241: PPUSH
40242: CALL_OW 488
40246: IFFALSE 40277
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40248: LD_VAR 0 13
40252: PPUSH
40253: LD_VAR 0 16
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: LD_VAR 0 16
40266: PUSH
40267: LD_INT 2
40269: ARRAY
40270: PPUSH
40271: CALL_OW 111
// continue ;
40275: GO 39767
// end ; end ; r := GetDir ( tmp ) ;
40277: LD_ADDR_VAR 0 15
40281: PUSH
40282: LD_VAR 0 13
40286: PPUSH
40287: CALL_OW 254
40291: ST_TO_ADDR
// if r = 5 then
40292: LD_VAR 0 15
40296: PUSH
40297: LD_INT 5
40299: EQUAL
40300: IFFALSE 40310
// r := 0 ;
40302: LD_ADDR_VAR 0 15
40306: PUSH
40307: LD_INT 0
40309: ST_TO_ADDR
// for j = r to 5 do
40310: LD_ADDR_VAR 0 10
40314: PUSH
40315: DOUBLE
40316: LD_VAR 0 15
40320: DEC
40321: ST_TO_ADDR
40322: LD_INT 5
40324: PUSH
40325: FOR_TO
40326: IFFALSE 40440
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40328: LD_ADDR_VAR 0 11
40332: PUSH
40333: LD_VAR 0 13
40337: PPUSH
40338: CALL_OW 250
40342: PPUSH
40343: LD_VAR 0 10
40347: PPUSH
40348: LD_INT 2
40350: PPUSH
40351: CALL_OW 272
40355: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40356: LD_ADDR_VAR 0 12
40360: PUSH
40361: LD_VAR 0 13
40365: PPUSH
40366: CALL_OW 251
40370: PPUSH
40371: LD_VAR 0 10
40375: PPUSH
40376: LD_INT 2
40378: PPUSH
40379: CALL_OW 273
40383: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40384: LD_VAR 0 11
40388: PPUSH
40389: LD_VAR 0 12
40393: PPUSH
40394: CALL_OW 488
40398: PUSH
40399: LD_VAR 0 11
40403: PPUSH
40404: LD_VAR 0 12
40408: PPUSH
40409: CALL_OW 428
40413: NOT
40414: AND
40415: IFFALSE 40438
// begin ComMoveXY ( tmp , _x , _y ) ;
40417: LD_VAR 0 13
40421: PPUSH
40422: LD_VAR 0 11
40426: PPUSH
40427: LD_VAR 0 12
40431: PPUSH
40432: CALL_OW 111
// break ;
40436: GO 40440
// end ; end ;
40438: GO 40325
40440: POP
40441: POP
// end ; end ;
40442: GO 39767
40444: POP
40445: POP
// end ;
40446: LD_VAR 0 8
40450: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40451: LD_INT 0
40453: PPUSH
// result := true ;
40454: LD_ADDR_VAR 0 3
40458: PUSH
40459: LD_INT 1
40461: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40462: LD_VAR 0 2
40466: PUSH
40467: LD_INT 24
40469: DOUBLE
40470: EQUAL
40471: IFTRUE 40481
40473: LD_INT 33
40475: DOUBLE
40476: EQUAL
40477: IFTRUE 40481
40479: GO 40506
40481: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40482: LD_ADDR_VAR 0 3
40486: PUSH
40487: LD_INT 32
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 321
40499: PUSH
40500: LD_INT 2
40502: EQUAL
40503: ST_TO_ADDR
40504: GO 40826
40506: LD_INT 20
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40514
40512: GO 40539
40514: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_INT 6
40522: PPUSH
40523: LD_VAR 0 1
40527: PPUSH
40528: CALL_OW 321
40532: PUSH
40533: LD_INT 2
40535: EQUAL
40536: ST_TO_ADDR
40537: GO 40826
40539: LD_INT 22
40541: DOUBLE
40542: EQUAL
40543: IFTRUE 40553
40545: LD_INT 36
40547: DOUBLE
40548: EQUAL
40549: IFTRUE 40553
40551: GO 40578
40553: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_INT 15
40561: PPUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 321
40571: PUSH
40572: LD_INT 2
40574: EQUAL
40575: ST_TO_ADDR
40576: GO 40826
40578: LD_INT 30
40580: DOUBLE
40581: EQUAL
40582: IFTRUE 40586
40584: GO 40611
40586: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_INT 20
40594: PPUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 321
40604: PUSH
40605: LD_INT 2
40607: EQUAL
40608: ST_TO_ADDR
40609: GO 40826
40611: LD_INT 28
40613: DOUBLE
40614: EQUAL
40615: IFTRUE 40625
40617: LD_INT 21
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40650
40625: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 21
40633: PPUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 321
40643: PUSH
40644: LD_INT 2
40646: EQUAL
40647: ST_TO_ADDR
40648: GO 40826
40650: LD_INT 16
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40685
40658: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_EXP 64
40668: PPUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 321
40678: PUSH
40679: LD_INT 2
40681: EQUAL
40682: ST_TO_ADDR
40683: GO 40826
40685: LD_INT 19
40687: DOUBLE
40688: EQUAL
40689: IFTRUE 40699
40691: LD_INT 23
40693: DOUBLE
40694: EQUAL
40695: IFTRUE 40699
40697: GO 40726
40699: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40700: LD_ADDR_VAR 0 3
40704: PUSH
40705: LD_EXP 63
40709: PPUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 321
40719: PUSH
40720: LD_INT 2
40722: EQUAL
40723: ST_TO_ADDR
40724: GO 40826
40726: LD_INT 17
40728: DOUBLE
40729: EQUAL
40730: IFTRUE 40734
40732: GO 40759
40734: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40735: LD_ADDR_VAR 0 3
40739: PUSH
40740: LD_INT 39
40742: PPUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: CALL_OW 321
40752: PUSH
40753: LD_INT 2
40755: EQUAL
40756: ST_TO_ADDR
40757: GO 40826
40759: LD_INT 18
40761: DOUBLE
40762: EQUAL
40763: IFTRUE 40767
40765: GO 40792
40767: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_INT 40
40775: PPUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 321
40785: PUSH
40786: LD_INT 2
40788: EQUAL
40789: ST_TO_ADDR
40790: GO 40826
40792: LD_INT 27
40794: DOUBLE
40795: EQUAL
40796: IFTRUE 40800
40798: GO 40825
40800: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40801: LD_ADDR_VAR 0 3
40805: PUSH
40806: LD_INT 35
40808: PPUSH
40809: LD_VAR 0 1
40813: PPUSH
40814: CALL_OW 321
40818: PUSH
40819: LD_INT 2
40821: EQUAL
40822: ST_TO_ADDR
40823: GO 40826
40825: POP
// end ;
40826: LD_VAR 0 3
40830: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
// result := false ;
40844: LD_ADDR_VAR 0 6
40848: PUSH
40849: LD_INT 0
40851: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40852: LD_VAR 0 1
40856: NOT
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 266
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: IN
40878: NOT
40879: OR
40880: PUSH
40881: LD_VAR 0 2
40885: NOT
40886: OR
40887: PUSH
40888: LD_VAR 0 5
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 3
40904: PUSH
40905: LD_INT 4
40907: PUSH
40908: LD_INT 5
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: IN
40919: NOT
40920: OR
40921: PUSH
40922: LD_VAR 0 3
40926: PPUSH
40927: LD_VAR 0 4
40931: PPUSH
40932: CALL_OW 488
40936: NOT
40937: OR
40938: IFFALSE 40942
// exit ;
40940: GO 41678
// side := GetSide ( depot ) ;
40942: LD_ADDR_VAR 0 9
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 255
40956: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40957: LD_VAR 0 9
40961: PPUSH
40962: LD_VAR 0 2
40966: PPUSH
40967: CALL 40451 0 2
40971: NOT
40972: IFFALSE 40976
// exit ;
40974: GO 41678
// pom := GetBase ( depot ) ;
40976: LD_ADDR_VAR 0 10
40980: PUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: CALL_OW 274
40990: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40991: LD_ADDR_VAR 0 11
40995: PUSH
40996: LD_VAR 0 2
41000: PPUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: CALL_OW 248
41010: PPUSH
41011: CALL_OW 450
41015: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41016: LD_VAR 0 10
41020: PPUSH
41021: LD_INT 1
41023: PPUSH
41024: CALL_OW 275
41028: PUSH
41029: LD_VAR 0 11
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: GREATEREQUAL
41038: PUSH
41039: LD_VAR 0 10
41043: PPUSH
41044: LD_INT 2
41046: PPUSH
41047: CALL_OW 275
41051: PUSH
41052: LD_VAR 0 11
41056: PUSH
41057: LD_INT 2
41059: ARRAY
41060: GREATEREQUAL
41061: AND
41062: PUSH
41063: LD_VAR 0 10
41067: PPUSH
41068: LD_INT 3
41070: PPUSH
41071: CALL_OW 275
41075: PUSH
41076: LD_VAR 0 11
41080: PUSH
41081: LD_INT 3
41083: ARRAY
41084: GREATEREQUAL
41085: AND
41086: NOT
41087: IFFALSE 41091
// exit ;
41089: GO 41678
// if GetBType ( depot ) = b_depot then
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 266
41100: PUSH
41101: LD_INT 0
41103: EQUAL
41104: IFFALSE 41116
// dist := 28 else
41106: LD_ADDR_VAR 0 14
41110: PUSH
41111: LD_INT 28
41113: ST_TO_ADDR
41114: GO 41124
// dist := 36 ;
41116: LD_ADDR_VAR 0 14
41120: PUSH
41121: LD_INT 36
41123: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41124: LD_VAR 0 1
41128: PPUSH
41129: LD_VAR 0 3
41133: PPUSH
41134: LD_VAR 0 4
41138: PPUSH
41139: CALL_OW 297
41143: PUSH
41144: LD_VAR 0 14
41148: GREATER
41149: IFFALSE 41153
// exit ;
41151: GO 41678
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41153: LD_ADDR_VAR 0 12
41157: PUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_VAR 0 3
41167: PPUSH
41168: LD_VAR 0 4
41172: PPUSH
41173: LD_VAR 0 5
41177: PPUSH
41178: LD_VAR 0 1
41182: PPUSH
41183: CALL_OW 248
41187: PPUSH
41188: LD_INT 0
41190: PPUSH
41191: CALL 41683 0 6
41195: ST_TO_ADDR
// if not hexes then
41196: LD_VAR 0 12
41200: NOT
41201: IFFALSE 41205
// exit ;
41203: GO 41678
// hex := GetHexInfo ( x , y ) ;
41205: LD_ADDR_VAR 0 15
41209: PUSH
41210: LD_VAR 0 3
41214: PPUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: CALL_OW 546
41224: ST_TO_ADDR
// if hex [ 1 ] then
41225: LD_VAR 0 15
41229: PUSH
41230: LD_INT 1
41232: ARRAY
41233: IFFALSE 41237
// exit ;
41235: GO 41678
// height := hex [ 2 ] ;
41237: LD_ADDR_VAR 0 13
41241: PUSH
41242: LD_VAR 0 15
41246: PUSH
41247: LD_INT 2
41249: ARRAY
41250: ST_TO_ADDR
// for i = 1 to hexes do
41251: LD_ADDR_VAR 0 7
41255: PUSH
41256: DOUBLE
41257: LD_INT 1
41259: DEC
41260: ST_TO_ADDR
41261: LD_VAR 0 12
41265: PUSH
41266: FOR_TO
41267: IFFALSE 41597
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41269: LD_VAR 0 12
41273: PUSH
41274: LD_VAR 0 7
41278: ARRAY
41279: PUSH
41280: LD_INT 1
41282: ARRAY
41283: PPUSH
41284: LD_VAR 0 12
41288: PUSH
41289: LD_VAR 0 7
41293: ARRAY
41294: PUSH
41295: LD_INT 2
41297: ARRAY
41298: PPUSH
41299: CALL_OW 488
41303: NOT
41304: PUSH
41305: LD_VAR 0 12
41309: PUSH
41310: LD_VAR 0 7
41314: ARRAY
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: PPUSH
41320: LD_VAR 0 12
41324: PUSH
41325: LD_VAR 0 7
41329: ARRAY
41330: PUSH
41331: LD_INT 2
41333: ARRAY
41334: PPUSH
41335: CALL_OW 428
41339: PUSH
41340: LD_INT 0
41342: GREATER
41343: OR
41344: PUSH
41345: LD_VAR 0 12
41349: PUSH
41350: LD_VAR 0 7
41354: ARRAY
41355: PUSH
41356: LD_INT 1
41358: ARRAY
41359: PPUSH
41360: LD_VAR 0 12
41364: PUSH
41365: LD_VAR 0 7
41369: ARRAY
41370: PUSH
41371: LD_INT 2
41373: ARRAY
41374: PPUSH
41375: CALL_OW 351
41379: OR
41380: IFFALSE 41386
// exit ;
41382: POP
41383: POP
41384: GO 41678
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41386: LD_ADDR_VAR 0 8
41390: PUSH
41391: LD_VAR 0 12
41395: PUSH
41396: LD_VAR 0 7
41400: ARRAY
41401: PUSH
41402: LD_INT 1
41404: ARRAY
41405: PPUSH
41406: LD_VAR 0 12
41410: PUSH
41411: LD_VAR 0 7
41415: ARRAY
41416: PUSH
41417: LD_INT 2
41419: ARRAY
41420: PPUSH
41421: CALL_OW 546
41425: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41426: LD_VAR 0 8
41430: PUSH
41431: LD_INT 1
41433: ARRAY
41434: PUSH
41435: LD_VAR 0 8
41439: PUSH
41440: LD_INT 2
41442: ARRAY
41443: PUSH
41444: LD_VAR 0 13
41448: PUSH
41449: LD_INT 2
41451: PLUS
41452: GREATER
41453: OR
41454: PUSH
41455: LD_VAR 0 8
41459: PUSH
41460: LD_INT 2
41462: ARRAY
41463: PUSH
41464: LD_VAR 0 13
41468: PUSH
41469: LD_INT 2
41471: MINUS
41472: LESS
41473: OR
41474: PUSH
41475: LD_VAR 0 8
41479: PUSH
41480: LD_INT 3
41482: ARRAY
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 8
41489: PUSH
41490: LD_INT 9
41492: PUSH
41493: LD_INT 10
41495: PUSH
41496: LD_INT 11
41498: PUSH
41499: LD_INT 12
41501: PUSH
41502: LD_INT 13
41504: PUSH
41505: LD_INT 16
41507: PUSH
41508: LD_INT 17
41510: PUSH
41511: LD_INT 18
41513: PUSH
41514: LD_INT 19
41516: PUSH
41517: LD_INT 20
41519: PUSH
41520: LD_INT 21
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: IN
41538: NOT
41539: OR
41540: PUSH
41541: LD_VAR 0 8
41545: PUSH
41546: LD_INT 5
41548: ARRAY
41549: NOT
41550: OR
41551: PUSH
41552: LD_VAR 0 8
41556: PUSH
41557: LD_INT 6
41559: ARRAY
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 7
41569: PUSH
41570: LD_INT 9
41572: PUSH
41573: LD_INT 10
41575: PUSH
41576: LD_INT 11
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: IN
41587: NOT
41588: OR
41589: IFFALSE 41595
// exit ;
41591: POP
41592: POP
41593: GO 41678
// end ;
41595: GO 41266
41597: POP
41598: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41599: LD_VAR 0 9
41603: PPUSH
41604: LD_VAR 0 3
41608: PPUSH
41609: LD_VAR 0 4
41613: PPUSH
41614: LD_INT 20
41616: PPUSH
41617: CALL 33624 0 4
41621: PUSH
41622: LD_INT 4
41624: ARRAY
41625: IFFALSE 41629
// exit ;
41627: GO 41678
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41629: LD_VAR 0 2
41633: PUSH
41634: LD_INT 29
41636: PUSH
41637: LD_INT 30
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: IN
41644: PUSH
41645: LD_VAR 0 3
41649: PPUSH
41650: LD_VAR 0 4
41654: PPUSH
41655: LD_VAR 0 9
41659: PPUSH
41660: CALL_OW 440
41664: NOT
41665: AND
41666: IFFALSE 41670
// exit ;
41668: GO 41678
// result := true ;
41670: LD_ADDR_VAR 0 6
41674: PUSH
41675: LD_INT 1
41677: ST_TO_ADDR
// end ;
41678: LD_VAR 0 6
41682: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41683: LD_INT 0
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
// result = [ ] ;
41743: LD_ADDR_VAR 0 7
41747: PUSH
41748: EMPTY
41749: ST_TO_ADDR
// temp_list = [ ] ;
41750: LD_ADDR_VAR 0 9
41754: PUSH
41755: EMPTY
41756: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41757: LD_VAR 0 4
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 3
41773: PUSH
41774: LD_INT 4
41776: PUSH
41777: LD_INT 5
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: IN
41788: NOT
41789: PUSH
41790: LD_VAR 0 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: IN
41805: PUSH
41806: LD_VAR 0 5
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: LIST
41824: IN
41825: NOT
41826: AND
41827: OR
41828: IFFALSE 41832
// exit ;
41830: GO 60223
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41832: LD_VAR 0 1
41836: PUSH
41837: LD_INT 6
41839: PUSH
41840: LD_INT 7
41842: PUSH
41843: LD_INT 8
41845: PUSH
41846: LD_INT 13
41848: PUSH
41849: LD_INT 12
41851: PUSH
41852: LD_INT 15
41854: PUSH
41855: LD_INT 11
41857: PUSH
41858: LD_INT 14
41860: PUSH
41861: LD_INT 10
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: IN
41875: IFFALSE 41885
// btype = b_lab ;
41877: LD_ADDR_VAR 0 1
41881: PUSH
41882: LD_INT 6
41884: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41885: LD_VAR 0 6
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: IN
41904: NOT
41905: PUSH
41906: LD_VAR 0 1
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 3
41922: PUSH
41923: LD_INT 6
41925: PUSH
41926: LD_INT 36
41928: PUSH
41929: LD_INT 4
41931: PUSH
41932: LD_INT 5
41934: PUSH
41935: LD_INT 31
41937: PUSH
41938: LD_INT 32
41940: PUSH
41941: LD_INT 33
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: IN
41957: NOT
41958: PUSH
41959: LD_VAR 0 6
41963: PUSH
41964: LD_INT 1
41966: EQUAL
41967: AND
41968: OR
41969: PUSH
41970: LD_VAR 0 1
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 3
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: IN
41985: NOT
41986: PUSH
41987: LD_VAR 0 6
41991: PUSH
41992: LD_INT 2
41994: EQUAL
41995: AND
41996: OR
41997: IFFALSE 42007
// mode = 0 ;
41999: LD_ADDR_VAR 0 6
42003: PUSH
42004: LD_INT 0
42006: ST_TO_ADDR
// case mode of 0 :
42007: LD_VAR 0 6
42011: PUSH
42012: LD_INT 0
42014: DOUBLE
42015: EQUAL
42016: IFTRUE 42020
42018: GO 53473
42020: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42021: LD_ADDR_VAR 0 11
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42214: LD_ADDR_VAR 0 12
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 3
42371: NEG
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 3
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42410: LD_ADDR_VAR 0 13
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 3
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42609: LD_ADDR_VAR 0 14
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 3
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 3
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42805: LD_ADDR_VAR 0 15
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 3
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42998: LD_ADDR_VAR 0 16
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43191: LD_ADDR_VAR 0 17
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43421: LD_ADDR_VAR 0 18
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43651: LD_ADDR_VAR 0 19
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43881: LD_ADDR_VAR 0 20
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44111: LD_ADDR_VAR 0 21
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44341: LD_ADDR_VAR 0 22
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44571: LD_ADDR_VAR 0 23
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44851: LD_ADDR_VAR 0 24
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45127: LD_ADDR_VAR 0 25
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45401: LD_ADDR_VAR 0 26
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45677: LD_ADDR_VAR 0 27
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 3
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45957: LD_ADDR_VAR 0 28
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46239: LD_ADDR_VAR 0 29
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: LD_INT 3
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46518: LD_ADDR_VAR 0 30
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46796: LD_ADDR_VAR 0 31
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47074: LD_ADDR_VAR 0 32
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47352: LD_ADDR_VAR 0 33
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47631: LD_ADDR_VAR 0 34
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47911: LD_ADDR_VAR 0 35
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48023: LD_ADDR_VAR 0 36
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48135: LD_ADDR_VAR 0 37
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48247: LD_ADDR_VAR 0 38
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48359: LD_ADDR_VAR 0 39
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48471: LD_ADDR_VAR 0 40
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48583: LD_ADDR_VAR 0 41
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48933: LD_ADDR_VAR 0 42
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: NEG
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49283: LD_ADDR_VAR 0 43
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 3
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 3
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49631: LD_ADDR_VAR 0 44
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 3
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49981: LD_ADDR_VAR 0 45
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 3
50290: NEG
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50331: LD_ADDR_VAR 0 46
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 3
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 3
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50679: LD_ADDR_VAR 0 47
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50830: LD_ADDR_VAR 0 48
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50977: LD_ADDR_VAR 0 49
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51121: LD_ADDR_VAR 0 50
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51265: LD_ADDR_VAR 0 51
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51412: LD_ADDR_VAR 0 52
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51563: LD_ADDR_VAR 0 53
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51793: LD_ADDR_VAR 0 54
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52023: LD_ADDR_VAR 0 55
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52253: LD_ADDR_VAR 0 56
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52483: LD_ADDR_VAR 0 57
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52713: LD_ADDR_VAR 0 58
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52943: LD_ADDR_VAR 0 59
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53031: LD_ADDR_VAR 0 60
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53119: LD_ADDR_VAR 0 61
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53207: LD_ADDR_VAR 0 62
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53295: LD_ADDR_VAR 0 63
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53383: LD_ADDR_VAR 0 64
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// end ; 1 :
53471: GO 59368
53473: LD_INT 1
53475: DOUBLE
53476: EQUAL
53477: IFTRUE 53481
53479: GO 56104
53481: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53482: LD_ADDR_VAR 0 11
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53526: LD_ADDR_VAR 0 12
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53567: LD_ADDR_VAR 0 13
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53607: LD_ADDR_VAR 0 14
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53648: LD_ADDR_VAR 0 15
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53692: LD_ADDR_VAR 0 16
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: LD_INT 3
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53738: LD_ADDR_VAR 0 17
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53782: LD_ADDR_VAR 0 18
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53823: LD_ADDR_VAR 0 19
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53863: LD_ADDR_VAR 0 20
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53904: LD_ADDR_VAR 0 21
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53948: LD_ADDR_VAR 0 22
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 3
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: LD_INT 3
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: LIST
53993: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53994: LD_ADDR_VAR 0 23
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 4
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54038: LD_ADDR_VAR 0 24
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 4
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54079: LD_ADDR_VAR 0 25
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 4
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 4
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54119: LD_ADDR_VAR 0 26
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 4
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 3
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54160: LD_ADDR_VAR 0 27
54164: PUSH
54165: LD_INT 3
54167: NEG
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 4
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54204: LD_ADDR_VAR 0 28
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 3
54223: NEG
54224: PUSH
54225: LD_INT 4
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 4
54235: NEG
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54250: LD_ADDR_VAR 0 29
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 4
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 4
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 5
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 5
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 4
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 6
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 6
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 5
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54405: LD_ADDR_VAR 0 30
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 4
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 4
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 5
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 5
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 5
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 6
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 6
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54548: LD_ADDR_VAR 0 31
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 4
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 4
54595: PUSH
54596: LD_INT 4
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: LD_INT 4
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 5
54615: PUSH
54616: LD_INT 4
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 5
54625: PUSH
54626: LD_INT 5
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 4
54635: PUSH
54636: LD_INT 5
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 6
54645: PUSH
54646: LD_INT 5
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 6
54655: PUSH
54656: LD_INT 6
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: LD_INT 6
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54687: LD_ADDR_VAR 0 32
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 4
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 4
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 5
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 5
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 6
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 6
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 5
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54830: LD_ADDR_VAR 0 33
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 4
54882: NEG
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 4
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 4
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 5
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 5
54939: NEG
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 6
54950: NEG
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 6
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54985: LD_ADDR_VAR 0 34
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: LD_INT 3
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 4
55052: NEG
55053: PUSH
55054: LD_INT 4
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 4
55064: NEG
55065: PUSH
55066: LD_INT 5
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 5
55076: NEG
55077: PUSH
55078: LD_INT 4
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 5
55088: NEG
55089: PUSH
55090: LD_INT 5
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 5
55100: NEG
55101: PUSH
55102: LD_INT 6
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 6
55112: NEG
55113: PUSH
55114: LD_INT 5
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 6
55124: NEG
55125: PUSH
55126: LD_INT 6
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55148: LD_ADDR_VAR 0 41
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55192: LD_ADDR_VAR 0 42
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55233: LD_ADDR_VAR 0 43
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55273: LD_ADDR_VAR 0 44
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55314: LD_ADDR_VAR 0 45
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55358: LD_ADDR_VAR 0 46
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55404: LD_ADDR_VAR 0 47
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55437: LD_ADDR_VAR 0 48
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55468: LD_ADDR_VAR 0 49
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55497: LD_ADDR_VAR 0 50
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55526: LD_ADDR_VAR 0 51
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55557: LD_ADDR_VAR 0 52
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55590: LD_ADDR_VAR 0 53
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55634: LD_ADDR_VAR 0 54
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55675: LD_ADDR_VAR 0 55
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55715: LD_ADDR_VAR 0 56
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55756: LD_ADDR_VAR 0 57
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 3
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55800: LD_ADDR_VAR 0 58
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: LD_INT 3
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55846: LD_ADDR_VAR 0 59
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55890: LD_ADDR_VAR 0 60
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55931: LD_ADDR_VAR 0 61
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55971: LD_ADDR_VAR 0 62
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56012: LD_ADDR_VAR 0 63
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56056: LD_ADDR_VAR 0 64
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// end ; 2 :
56102: GO 59368
56104: LD_INT 2
56106: DOUBLE
56107: EQUAL
56108: IFTRUE 56112
56110: GO 59367
56112: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56113: LD_ADDR_VAR 0 29
56117: PUSH
56118: LD_INT 4
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 4
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 5
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 5
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 4
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 5
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: PUSH
56244: LD_INT 4
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 3
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 4
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 4
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 4
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 5
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 5
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 4
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 4
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: LD_INT 4
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 4
56510: NEG
56511: PUSH
56512: LD_INT 5
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 4
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: NEG
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 5
56558: NEG
56559: PUSH
56560: LD_INT 4
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 5
56570: NEG
56571: PUSH
56572: LD_INT 5
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: LD_INT 5
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 5
56594: NEG
56595: PUSH
56596: LD_INT 3
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56651: LD_ADDR_VAR 0 30
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: LD_INT 4
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: LD_INT 5
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 4
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 5
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 3
56738: PUSH
56739: LD_INT 5
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 4
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 4
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 4
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 4
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 4
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: NEG
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 5
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 5
56920: NEG
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 4
57003: NEG
57004: PUSH
57005: LD_INT 3
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 4
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 4
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 5
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 4
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 4
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 5
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 5
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57198: LD_ADDR_VAR 0 31
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 4
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 4
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 5
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 5
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 4
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 5
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: LD_INT 4
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 4
57412: NEG
57413: PUSH
57414: LD_INT 5
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: LD_INT 4
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 5
57460: NEG
57461: PUSH
57462: LD_INT 4
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 5
57472: NEG
57473: PUSH
57474: LD_INT 5
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 5
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 4
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 5
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 5
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 5
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57748: LD_ADDR_VAR 0 32
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 4
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 5
57811: NEG
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 5
57834: NEG
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: LD_INT 3
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: LD_INT 4
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 4
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 4
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 4
57953: NEG
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 4
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 5
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 4
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 5
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: LD_INT 5
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 4
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 4
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 3
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: LD_INT 4
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 5
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 5
58190: PUSH
58191: LD_INT 5
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 4
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: LD_INT 5
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58295: LD_ADDR_VAR 0 33
58299: PUSH
58300: LD_INT 4
58302: NEG
58303: PUSH
58304: LD_INT 4
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 4
58314: NEG
58315: PUSH
58316: LD_INT 5
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: LD_INT 4
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: LD_INT 3
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 5
58362: NEG
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 5
58374: NEG
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 5
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 5
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 4
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 4
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 4
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 5
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 5
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 5
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 4
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 4
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: LD_INT 4
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 4
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 5
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 5
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 4
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 5
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58833: LD_ADDR_VAR 0 34
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 5
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 4
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 4
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 5
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 5
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 4
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 4
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 4
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: LD_INT 4
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: PUSH
59066: LD_INT 5
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: LD_INT 5
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: LD_INT 4
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: LD_INT 5
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 3
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 4
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 5
59274: NEG
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 5
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: NEG
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: NEG
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// end ; end ;
59365: GO 59368
59367: POP
// case btype of b_depot , b_warehouse :
59368: LD_VAR 0 1
59372: PUSH
59373: LD_INT 0
59375: DOUBLE
59376: EQUAL
59377: IFTRUE 59387
59379: LD_INT 1
59381: DOUBLE
59382: EQUAL
59383: IFTRUE 59387
59385: GO 59588
59387: POP
// case nation of nation_american :
59388: LD_VAR 0 5
59392: PUSH
59393: LD_INT 1
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59401
59399: GO 59457
59401: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59402: LD_ADDR_VAR 0 9
59406: PUSH
59407: LD_VAR 0 11
59411: PUSH
59412: LD_VAR 0 12
59416: PUSH
59417: LD_VAR 0 13
59421: PUSH
59422: LD_VAR 0 14
59426: PUSH
59427: LD_VAR 0 15
59431: PUSH
59432: LD_VAR 0 16
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: PUSH
59445: LD_VAR 0 4
59449: PUSH
59450: LD_INT 1
59452: PLUS
59453: ARRAY
59454: ST_TO_ADDR
59455: GO 59586
59457: LD_INT 2
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59465
59463: GO 59521
59465: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59466: LD_ADDR_VAR 0 9
59470: PUSH
59471: LD_VAR 0 17
59475: PUSH
59476: LD_VAR 0 18
59480: PUSH
59481: LD_VAR 0 19
59485: PUSH
59486: LD_VAR 0 20
59490: PUSH
59491: LD_VAR 0 21
59495: PUSH
59496: LD_VAR 0 22
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: PUSH
59509: LD_VAR 0 4
59513: PUSH
59514: LD_INT 1
59516: PLUS
59517: ARRAY
59518: ST_TO_ADDR
59519: GO 59586
59521: LD_INT 3
59523: DOUBLE
59524: EQUAL
59525: IFTRUE 59529
59527: GO 59585
59529: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59530: LD_ADDR_VAR 0 9
59534: PUSH
59535: LD_VAR 0 23
59539: PUSH
59540: LD_VAR 0 24
59544: PUSH
59545: LD_VAR 0 25
59549: PUSH
59550: LD_VAR 0 26
59554: PUSH
59555: LD_VAR 0 27
59559: PUSH
59560: LD_VAR 0 28
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: PUSH
59573: LD_VAR 0 4
59577: PUSH
59578: LD_INT 1
59580: PLUS
59581: ARRAY
59582: ST_TO_ADDR
59583: GO 59586
59585: POP
59586: GO 60141
59588: LD_INT 2
59590: DOUBLE
59591: EQUAL
59592: IFTRUE 59602
59594: LD_INT 3
59596: DOUBLE
59597: EQUAL
59598: IFTRUE 59602
59600: GO 59658
59602: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59603: LD_ADDR_VAR 0 9
59607: PUSH
59608: LD_VAR 0 29
59612: PUSH
59613: LD_VAR 0 30
59617: PUSH
59618: LD_VAR 0 31
59622: PUSH
59623: LD_VAR 0 32
59627: PUSH
59628: LD_VAR 0 33
59632: PUSH
59633: LD_VAR 0 34
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_VAR 0 4
59650: PUSH
59651: LD_INT 1
59653: PLUS
59654: ARRAY
59655: ST_TO_ADDR
59656: GO 60141
59658: LD_INT 16
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59720
59664: LD_INT 17
59666: DOUBLE
59667: EQUAL
59668: IFTRUE 59720
59670: LD_INT 18
59672: DOUBLE
59673: EQUAL
59674: IFTRUE 59720
59676: LD_INT 19
59678: DOUBLE
59679: EQUAL
59680: IFTRUE 59720
59682: LD_INT 22
59684: DOUBLE
59685: EQUAL
59686: IFTRUE 59720
59688: LD_INT 20
59690: DOUBLE
59691: EQUAL
59692: IFTRUE 59720
59694: LD_INT 21
59696: DOUBLE
59697: EQUAL
59698: IFTRUE 59720
59700: LD_INT 23
59702: DOUBLE
59703: EQUAL
59704: IFTRUE 59720
59706: LD_INT 24
59708: DOUBLE
59709: EQUAL
59710: IFTRUE 59720
59712: LD_INT 25
59714: DOUBLE
59715: EQUAL
59716: IFTRUE 59720
59718: GO 59776
59720: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59721: LD_ADDR_VAR 0 9
59725: PUSH
59726: LD_VAR 0 35
59730: PUSH
59731: LD_VAR 0 36
59735: PUSH
59736: LD_VAR 0 37
59740: PUSH
59741: LD_VAR 0 38
59745: PUSH
59746: LD_VAR 0 39
59750: PUSH
59751: LD_VAR 0 40
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: PUSH
59764: LD_VAR 0 4
59768: PUSH
59769: LD_INT 1
59771: PLUS
59772: ARRAY
59773: ST_TO_ADDR
59774: GO 60141
59776: LD_INT 6
59778: DOUBLE
59779: EQUAL
59780: IFTRUE 59832
59782: LD_INT 7
59784: DOUBLE
59785: EQUAL
59786: IFTRUE 59832
59788: LD_INT 8
59790: DOUBLE
59791: EQUAL
59792: IFTRUE 59832
59794: LD_INT 13
59796: DOUBLE
59797: EQUAL
59798: IFTRUE 59832
59800: LD_INT 12
59802: DOUBLE
59803: EQUAL
59804: IFTRUE 59832
59806: LD_INT 15
59808: DOUBLE
59809: EQUAL
59810: IFTRUE 59832
59812: LD_INT 11
59814: DOUBLE
59815: EQUAL
59816: IFTRUE 59832
59818: LD_INT 14
59820: DOUBLE
59821: EQUAL
59822: IFTRUE 59832
59824: LD_INT 10
59826: DOUBLE
59827: EQUAL
59828: IFTRUE 59832
59830: GO 59888
59832: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59833: LD_ADDR_VAR 0 9
59837: PUSH
59838: LD_VAR 0 41
59842: PUSH
59843: LD_VAR 0 42
59847: PUSH
59848: LD_VAR 0 43
59852: PUSH
59853: LD_VAR 0 44
59857: PUSH
59858: LD_VAR 0 45
59862: PUSH
59863: LD_VAR 0 46
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: PUSH
59876: LD_VAR 0 4
59880: PUSH
59881: LD_INT 1
59883: PLUS
59884: ARRAY
59885: ST_TO_ADDR
59886: GO 60141
59888: LD_INT 36
59890: DOUBLE
59891: EQUAL
59892: IFTRUE 59896
59894: GO 59952
59896: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59897: LD_ADDR_VAR 0 9
59901: PUSH
59902: LD_VAR 0 47
59906: PUSH
59907: LD_VAR 0 48
59911: PUSH
59912: LD_VAR 0 49
59916: PUSH
59917: LD_VAR 0 50
59921: PUSH
59922: LD_VAR 0 51
59926: PUSH
59927: LD_VAR 0 52
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: LD_VAR 0 4
59944: PUSH
59945: LD_INT 1
59947: PLUS
59948: ARRAY
59949: ST_TO_ADDR
59950: GO 60141
59952: LD_INT 4
59954: DOUBLE
59955: EQUAL
59956: IFTRUE 59978
59958: LD_INT 5
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 59978
59964: LD_INT 34
59966: DOUBLE
59967: EQUAL
59968: IFTRUE 59978
59970: LD_INT 37
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 59978
59976: GO 60034
59978: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59979: LD_ADDR_VAR 0 9
59983: PUSH
59984: LD_VAR 0 53
59988: PUSH
59989: LD_VAR 0 54
59993: PUSH
59994: LD_VAR 0 55
59998: PUSH
59999: LD_VAR 0 56
60003: PUSH
60004: LD_VAR 0 57
60008: PUSH
60009: LD_VAR 0 58
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: PUSH
60022: LD_VAR 0 4
60026: PUSH
60027: LD_INT 1
60029: PLUS
60030: ARRAY
60031: ST_TO_ADDR
60032: GO 60141
60034: LD_INT 31
60036: DOUBLE
60037: EQUAL
60038: IFTRUE 60084
60040: LD_INT 32
60042: DOUBLE
60043: EQUAL
60044: IFTRUE 60084
60046: LD_INT 33
60048: DOUBLE
60049: EQUAL
60050: IFTRUE 60084
60052: LD_INT 27
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60084
60058: LD_INT 26
60060: DOUBLE
60061: EQUAL
60062: IFTRUE 60084
60064: LD_INT 28
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60084
60070: LD_INT 29
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60084
60076: LD_INT 30
60078: DOUBLE
60079: EQUAL
60080: IFTRUE 60084
60082: GO 60140
60084: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60085: LD_ADDR_VAR 0 9
60089: PUSH
60090: LD_VAR 0 59
60094: PUSH
60095: LD_VAR 0 60
60099: PUSH
60100: LD_VAR 0 61
60104: PUSH
60105: LD_VAR 0 62
60109: PUSH
60110: LD_VAR 0 63
60114: PUSH
60115: LD_VAR 0 64
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: PUSH
60128: LD_VAR 0 4
60132: PUSH
60133: LD_INT 1
60135: PLUS
60136: ARRAY
60137: ST_TO_ADDR
60138: GO 60141
60140: POP
// temp_list2 = [ ] ;
60141: LD_ADDR_VAR 0 10
60145: PUSH
60146: EMPTY
60147: ST_TO_ADDR
// for i in temp_list do
60148: LD_ADDR_VAR 0 8
60152: PUSH
60153: LD_VAR 0 9
60157: PUSH
60158: FOR_IN
60159: IFFALSE 60211
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60161: LD_ADDR_VAR 0 10
60165: PUSH
60166: LD_VAR 0 10
60170: PUSH
60171: LD_VAR 0 8
60175: PUSH
60176: LD_INT 1
60178: ARRAY
60179: PUSH
60180: LD_VAR 0 2
60184: PLUS
60185: PUSH
60186: LD_VAR 0 8
60190: PUSH
60191: LD_INT 2
60193: ARRAY
60194: PUSH
60195: LD_VAR 0 3
60199: PLUS
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: EMPTY
60206: LIST
60207: ADD
60208: ST_TO_ADDR
60209: GO 60158
60211: POP
60212: POP
// result = temp_list2 ;
60213: LD_ADDR_VAR 0 7
60217: PUSH
60218: LD_VAR 0 10
60222: ST_TO_ADDR
// end ;
60223: LD_VAR 0 7
60227: RET
// export function EnemyInRange ( unit , dist ) ; begin
60228: LD_INT 0
60230: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60231: LD_ADDR_VAR 0 3
60235: PUSH
60236: LD_VAR 0 1
60240: PPUSH
60241: CALL_OW 255
60245: PPUSH
60246: LD_VAR 0 1
60250: PPUSH
60251: CALL_OW 250
60255: PPUSH
60256: LD_VAR 0 1
60260: PPUSH
60261: CALL_OW 251
60265: PPUSH
60266: LD_VAR 0 2
60270: PPUSH
60271: CALL 33624 0 4
60275: PUSH
60276: LD_INT 4
60278: ARRAY
60279: ST_TO_ADDR
// end ;
60280: LD_VAR 0 3
60284: RET
// export function PlayerSeeMe ( unit ) ; begin
60285: LD_INT 0
60287: PPUSH
// result := See ( your_side , unit ) ;
60288: LD_ADDR_VAR 0 2
60292: PUSH
60293: LD_OWVAR 2
60297: PPUSH
60298: LD_VAR 0 1
60302: PPUSH
60303: CALL_OW 292
60307: ST_TO_ADDR
// end ;
60308: LD_VAR 0 2
60312: RET
// export function ReverseDir ( unit ) ; begin
60313: LD_INT 0
60315: PPUSH
// if not unit then
60316: LD_VAR 0 1
60320: NOT
60321: IFFALSE 60325
// exit ;
60323: GO 60348
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60325: LD_ADDR_VAR 0 2
60329: PUSH
60330: LD_VAR 0 1
60334: PPUSH
60335: CALL_OW 254
60339: PUSH
60340: LD_INT 3
60342: PLUS
60343: PUSH
60344: LD_INT 6
60346: MOD
60347: ST_TO_ADDR
// end ;
60348: LD_VAR 0 2
60352: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60353: LD_INT 0
60355: PPUSH
60356: PPUSH
60357: PPUSH
60358: PPUSH
60359: PPUSH
// if not hexes then
60360: LD_VAR 0 2
60364: NOT
60365: IFFALSE 60369
// exit ;
60367: GO 60517
// dist := 9999 ;
60369: LD_ADDR_VAR 0 5
60373: PUSH
60374: LD_INT 9999
60376: ST_TO_ADDR
// for i = 1 to hexes do
60377: LD_ADDR_VAR 0 4
60381: PUSH
60382: DOUBLE
60383: LD_INT 1
60385: DEC
60386: ST_TO_ADDR
60387: LD_VAR 0 2
60391: PUSH
60392: FOR_TO
60393: IFFALSE 60505
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60395: LD_VAR 0 1
60399: PPUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_VAR 0 4
60409: ARRAY
60410: PUSH
60411: LD_INT 1
60413: ARRAY
60414: PPUSH
60415: LD_VAR 0 2
60419: PUSH
60420: LD_VAR 0 4
60424: ARRAY
60425: PUSH
60426: LD_INT 2
60428: ARRAY
60429: PPUSH
60430: CALL_OW 297
60434: PUSH
60435: LD_VAR 0 5
60439: LESS
60440: IFFALSE 60503
// begin hex := hexes [ i ] ;
60442: LD_ADDR_VAR 0 7
60446: PUSH
60447: LD_VAR 0 2
60451: PUSH
60452: LD_VAR 0 4
60456: ARRAY
60457: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60458: LD_ADDR_VAR 0 5
60462: PUSH
60463: LD_VAR 0 1
60467: PPUSH
60468: LD_VAR 0 2
60472: PUSH
60473: LD_VAR 0 4
60477: ARRAY
60478: PUSH
60479: LD_INT 1
60481: ARRAY
60482: PPUSH
60483: LD_VAR 0 2
60487: PUSH
60488: LD_VAR 0 4
60492: ARRAY
60493: PUSH
60494: LD_INT 2
60496: ARRAY
60497: PPUSH
60498: CALL_OW 297
60502: ST_TO_ADDR
// end ; end ;
60503: GO 60392
60505: POP
60506: POP
// result := hex ;
60507: LD_ADDR_VAR 0 3
60511: PUSH
60512: LD_VAR 0 7
60516: ST_TO_ADDR
// end ;
60517: LD_VAR 0 3
60521: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60522: LD_INT 0
60524: PPUSH
60525: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60526: LD_VAR 0 1
60530: NOT
60531: PUSH
60532: LD_VAR 0 1
60536: PUSH
60537: LD_INT 21
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 23
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PPUSH
60561: CALL_OW 69
60565: IN
60566: NOT
60567: OR
60568: IFFALSE 60572
// exit ;
60570: GO 60619
// for i = 1 to 3 do
60572: LD_ADDR_VAR 0 3
60576: PUSH
60577: DOUBLE
60578: LD_INT 1
60580: DEC
60581: ST_TO_ADDR
60582: LD_INT 3
60584: PUSH
60585: FOR_TO
60586: IFFALSE 60617
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60588: LD_VAR 0 1
60592: PPUSH
60593: CALL_OW 250
60597: PPUSH
60598: LD_VAR 0 1
60602: PPUSH
60603: CALL_OW 251
60607: PPUSH
60608: LD_INT 1
60610: PPUSH
60611: CALL_OW 453
60615: GO 60585
60617: POP
60618: POP
// end ;
60619: LD_VAR 0 2
60623: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60624: LD_INT 0
60626: PPUSH
60627: PPUSH
60628: PPUSH
60629: PPUSH
60630: PPUSH
60631: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60632: LD_VAR 0 1
60636: NOT
60637: PUSH
60638: LD_VAR 0 2
60642: NOT
60643: OR
60644: PUSH
60645: LD_VAR 0 1
60649: PPUSH
60650: CALL_OW 314
60654: OR
60655: IFFALSE 60659
// exit ;
60657: GO 61100
// x := GetX ( enemy_unit ) ;
60659: LD_ADDR_VAR 0 7
60663: PUSH
60664: LD_VAR 0 2
60668: PPUSH
60669: CALL_OW 250
60673: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60674: LD_ADDR_VAR 0 8
60678: PUSH
60679: LD_VAR 0 2
60683: PPUSH
60684: CALL_OW 251
60688: ST_TO_ADDR
// if not x or not y then
60689: LD_VAR 0 7
60693: NOT
60694: PUSH
60695: LD_VAR 0 8
60699: NOT
60700: OR
60701: IFFALSE 60705
// exit ;
60703: GO 61100
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60705: LD_ADDR_VAR 0 6
60709: PUSH
60710: LD_VAR 0 7
60714: PPUSH
60715: LD_INT 0
60717: PPUSH
60718: LD_INT 4
60720: PPUSH
60721: CALL_OW 272
60725: PUSH
60726: LD_VAR 0 8
60730: PPUSH
60731: LD_INT 0
60733: PPUSH
60734: LD_INT 4
60736: PPUSH
60737: CALL_OW 273
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_VAR 0 7
60750: PPUSH
60751: LD_INT 1
60753: PPUSH
60754: LD_INT 4
60756: PPUSH
60757: CALL_OW 272
60761: PUSH
60762: LD_VAR 0 8
60766: PPUSH
60767: LD_INT 1
60769: PPUSH
60770: LD_INT 4
60772: PPUSH
60773: CALL_OW 273
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_VAR 0 7
60786: PPUSH
60787: LD_INT 2
60789: PPUSH
60790: LD_INT 4
60792: PPUSH
60793: CALL_OW 272
60797: PUSH
60798: LD_VAR 0 8
60802: PPUSH
60803: LD_INT 2
60805: PPUSH
60806: LD_INT 4
60808: PPUSH
60809: CALL_OW 273
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_VAR 0 7
60822: PPUSH
60823: LD_INT 3
60825: PPUSH
60826: LD_INT 4
60828: PPUSH
60829: CALL_OW 272
60833: PUSH
60834: LD_VAR 0 8
60838: PPUSH
60839: LD_INT 3
60841: PPUSH
60842: LD_INT 4
60844: PPUSH
60845: CALL_OW 273
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_VAR 0 7
60858: PPUSH
60859: LD_INT 4
60861: PPUSH
60862: LD_INT 4
60864: PPUSH
60865: CALL_OW 272
60869: PUSH
60870: LD_VAR 0 8
60874: PPUSH
60875: LD_INT 4
60877: PPUSH
60878: LD_INT 4
60880: PPUSH
60881: CALL_OW 273
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_VAR 0 7
60894: PPUSH
60895: LD_INT 5
60897: PPUSH
60898: LD_INT 4
60900: PPUSH
60901: CALL_OW 272
60905: PUSH
60906: LD_VAR 0 8
60910: PPUSH
60911: LD_INT 5
60913: PPUSH
60914: LD_INT 4
60916: PPUSH
60917: CALL_OW 273
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// for i = tmp downto 1 do
60934: LD_ADDR_VAR 0 4
60938: PUSH
60939: DOUBLE
60940: LD_VAR 0 6
60944: INC
60945: ST_TO_ADDR
60946: LD_INT 1
60948: PUSH
60949: FOR_DOWNTO
60950: IFFALSE 61051
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60952: LD_VAR 0 6
60956: PUSH
60957: LD_VAR 0 4
60961: ARRAY
60962: PUSH
60963: LD_INT 1
60965: ARRAY
60966: PPUSH
60967: LD_VAR 0 6
60971: PUSH
60972: LD_VAR 0 4
60976: ARRAY
60977: PUSH
60978: LD_INT 2
60980: ARRAY
60981: PPUSH
60982: CALL_OW 488
60986: NOT
60987: PUSH
60988: LD_VAR 0 6
60992: PUSH
60993: LD_VAR 0 4
60997: ARRAY
60998: PUSH
60999: LD_INT 1
61001: ARRAY
61002: PPUSH
61003: LD_VAR 0 6
61007: PUSH
61008: LD_VAR 0 4
61012: ARRAY
61013: PUSH
61014: LD_INT 2
61016: ARRAY
61017: PPUSH
61018: CALL_OW 428
61022: PUSH
61023: LD_INT 0
61025: NONEQUAL
61026: OR
61027: IFFALSE 61049
// tmp := Delete ( tmp , i ) ;
61029: LD_ADDR_VAR 0 6
61033: PUSH
61034: LD_VAR 0 6
61038: PPUSH
61039: LD_VAR 0 4
61043: PPUSH
61044: CALL_OW 3
61048: ST_TO_ADDR
61049: GO 60949
61051: POP
61052: POP
// j := GetClosestHex ( unit , tmp ) ;
61053: LD_ADDR_VAR 0 5
61057: PUSH
61058: LD_VAR 0 1
61062: PPUSH
61063: LD_VAR 0 6
61067: PPUSH
61068: CALL 60353 0 2
61072: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61073: LD_VAR 0 1
61077: PPUSH
61078: LD_VAR 0 5
61082: PUSH
61083: LD_INT 1
61085: ARRAY
61086: PPUSH
61087: LD_VAR 0 5
61091: PUSH
61092: LD_INT 2
61094: ARRAY
61095: PPUSH
61096: CALL_OW 111
// end ;
61100: LD_VAR 0 3
61104: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
61109: PPUSH
// uc_side = 0 ;
61110: LD_ADDR_OWVAR 20
61114: PUSH
61115: LD_INT 0
61117: ST_TO_ADDR
// uc_nation = 0 ;
61118: LD_ADDR_OWVAR 21
61122: PUSH
61123: LD_INT 0
61125: ST_TO_ADDR
// InitHc_All ( ) ;
61126: CALL_OW 584
// InitVc ;
61130: CALL_OW 20
// if mastodonts then
61134: LD_VAR 0 6
61138: IFFALSE 61205
// for i = 1 to mastodonts do
61140: LD_ADDR_VAR 0 11
61144: PUSH
61145: DOUBLE
61146: LD_INT 1
61148: DEC
61149: ST_TO_ADDR
61150: LD_VAR 0 6
61154: PUSH
61155: FOR_TO
61156: IFFALSE 61203
// begin vc_chassis := 31 ;
61158: LD_ADDR_OWVAR 37
61162: PUSH
61163: LD_INT 31
61165: ST_TO_ADDR
// vc_control := control_rider ;
61166: LD_ADDR_OWVAR 38
61170: PUSH
61171: LD_INT 4
61173: ST_TO_ADDR
// animal := CreateVehicle ;
61174: LD_ADDR_VAR 0 12
61178: PUSH
61179: CALL_OW 45
61183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61184: LD_VAR 0 12
61188: PPUSH
61189: LD_VAR 0 8
61193: PPUSH
61194: LD_INT 0
61196: PPUSH
61197: CALL 63393 0 3
// end ;
61201: GO 61155
61203: POP
61204: POP
// if horses then
61205: LD_VAR 0 5
61209: IFFALSE 61276
// for i = 1 to horses do
61211: LD_ADDR_VAR 0 11
61215: PUSH
61216: DOUBLE
61217: LD_INT 1
61219: DEC
61220: ST_TO_ADDR
61221: LD_VAR 0 5
61225: PUSH
61226: FOR_TO
61227: IFFALSE 61274
// begin hc_class := 21 ;
61229: LD_ADDR_OWVAR 28
61233: PUSH
61234: LD_INT 21
61236: ST_TO_ADDR
// hc_gallery :=  ;
61237: LD_ADDR_OWVAR 33
61241: PUSH
61242: LD_STRING 
61244: ST_TO_ADDR
// animal := CreateHuman ;
61245: LD_ADDR_VAR 0 12
61249: PUSH
61250: CALL_OW 44
61254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61255: LD_VAR 0 12
61259: PPUSH
61260: LD_VAR 0 8
61264: PPUSH
61265: LD_INT 0
61267: PPUSH
61268: CALL 63393 0 3
// end ;
61272: GO 61226
61274: POP
61275: POP
// if birds then
61276: LD_VAR 0 1
61280: IFFALSE 61347
// for i = 1 to birds do
61282: LD_ADDR_VAR 0 11
61286: PUSH
61287: DOUBLE
61288: LD_INT 1
61290: DEC
61291: ST_TO_ADDR
61292: LD_VAR 0 1
61296: PUSH
61297: FOR_TO
61298: IFFALSE 61345
// begin hc_class = 18 ;
61300: LD_ADDR_OWVAR 28
61304: PUSH
61305: LD_INT 18
61307: ST_TO_ADDR
// hc_gallery =  ;
61308: LD_ADDR_OWVAR 33
61312: PUSH
61313: LD_STRING 
61315: ST_TO_ADDR
// animal := CreateHuman ;
61316: LD_ADDR_VAR 0 12
61320: PUSH
61321: CALL_OW 44
61325: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61326: LD_VAR 0 12
61330: PPUSH
61331: LD_VAR 0 8
61335: PPUSH
61336: LD_INT 0
61338: PPUSH
61339: CALL 63393 0 3
// end ;
61343: GO 61297
61345: POP
61346: POP
// if tigers then
61347: LD_VAR 0 2
61351: IFFALSE 61435
// for i = 1 to tigers do
61353: LD_ADDR_VAR 0 11
61357: PUSH
61358: DOUBLE
61359: LD_INT 1
61361: DEC
61362: ST_TO_ADDR
61363: LD_VAR 0 2
61367: PUSH
61368: FOR_TO
61369: IFFALSE 61433
// begin hc_class = class_tiger ;
61371: LD_ADDR_OWVAR 28
61375: PUSH
61376: LD_INT 14
61378: ST_TO_ADDR
// hc_gallery =  ;
61379: LD_ADDR_OWVAR 33
61383: PUSH
61384: LD_STRING 
61386: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61387: LD_ADDR_OWVAR 35
61391: PUSH
61392: LD_INT 7
61394: NEG
61395: PPUSH
61396: LD_INT 7
61398: PPUSH
61399: CALL_OW 12
61403: ST_TO_ADDR
// animal := CreateHuman ;
61404: LD_ADDR_VAR 0 12
61408: PUSH
61409: CALL_OW 44
61413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61414: LD_VAR 0 12
61418: PPUSH
61419: LD_VAR 0 8
61423: PPUSH
61424: LD_INT 0
61426: PPUSH
61427: CALL 63393 0 3
// end ;
61431: GO 61368
61433: POP
61434: POP
// if apemans then
61435: LD_VAR 0 3
61439: IFFALSE 61562
// for i = 1 to apemans do
61441: LD_ADDR_VAR 0 11
61445: PUSH
61446: DOUBLE
61447: LD_INT 1
61449: DEC
61450: ST_TO_ADDR
61451: LD_VAR 0 3
61455: PUSH
61456: FOR_TO
61457: IFFALSE 61560
// begin hc_class = class_apeman ;
61459: LD_ADDR_OWVAR 28
61463: PUSH
61464: LD_INT 12
61466: ST_TO_ADDR
// hc_gallery =  ;
61467: LD_ADDR_OWVAR 33
61471: PUSH
61472: LD_STRING 
61474: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61475: LD_ADDR_OWVAR 35
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PPUSH
61484: LD_INT 2
61486: PPUSH
61487: CALL_OW 12
61491: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61492: LD_ADDR_OWVAR 31
61496: PUSH
61497: LD_INT 1
61499: PPUSH
61500: LD_INT 3
61502: PPUSH
61503: CALL_OW 12
61507: PUSH
61508: LD_INT 1
61510: PPUSH
61511: LD_INT 3
61513: PPUSH
61514: CALL_OW 12
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// animal := CreateHuman ;
61531: LD_ADDR_VAR 0 12
61535: PUSH
61536: CALL_OW 44
61540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61541: LD_VAR 0 12
61545: PPUSH
61546: LD_VAR 0 8
61550: PPUSH
61551: LD_INT 0
61553: PPUSH
61554: CALL 63393 0 3
// end ;
61558: GO 61456
61560: POP
61561: POP
// if enchidnas then
61562: LD_VAR 0 4
61566: IFFALSE 61633
// for i = 1 to enchidnas do
61568: LD_ADDR_VAR 0 11
61572: PUSH
61573: DOUBLE
61574: LD_INT 1
61576: DEC
61577: ST_TO_ADDR
61578: LD_VAR 0 4
61582: PUSH
61583: FOR_TO
61584: IFFALSE 61631
// begin hc_class = 13 ;
61586: LD_ADDR_OWVAR 28
61590: PUSH
61591: LD_INT 13
61593: ST_TO_ADDR
// hc_gallery =  ;
61594: LD_ADDR_OWVAR 33
61598: PUSH
61599: LD_STRING 
61601: ST_TO_ADDR
// animal := CreateHuman ;
61602: LD_ADDR_VAR 0 12
61606: PUSH
61607: CALL_OW 44
61611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61612: LD_VAR 0 12
61616: PPUSH
61617: LD_VAR 0 8
61621: PPUSH
61622: LD_INT 0
61624: PPUSH
61625: CALL 63393 0 3
// end ;
61629: GO 61583
61631: POP
61632: POP
// if fishes then
61633: LD_VAR 0 7
61637: IFFALSE 61704
// for i = 1 to fishes do
61639: LD_ADDR_VAR 0 11
61643: PUSH
61644: DOUBLE
61645: LD_INT 1
61647: DEC
61648: ST_TO_ADDR
61649: LD_VAR 0 7
61653: PUSH
61654: FOR_TO
61655: IFFALSE 61702
// begin hc_class = 20 ;
61657: LD_ADDR_OWVAR 28
61661: PUSH
61662: LD_INT 20
61664: ST_TO_ADDR
// hc_gallery =  ;
61665: LD_ADDR_OWVAR 33
61669: PUSH
61670: LD_STRING 
61672: ST_TO_ADDR
// animal := CreateHuman ;
61673: LD_ADDR_VAR 0 12
61677: PUSH
61678: CALL_OW 44
61682: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61683: LD_VAR 0 12
61687: PPUSH
61688: LD_VAR 0 9
61692: PPUSH
61693: LD_INT 0
61695: PPUSH
61696: CALL 63393 0 3
// end ;
61700: GO 61654
61702: POP
61703: POP
// end ;
61704: LD_VAR 0 10
61708: RET
// export function WantHeal ( sci , unit ) ; begin
61709: LD_INT 0
61711: PPUSH
// if GetTaskList ( sci ) > 0 then
61712: LD_VAR 0 1
61716: PPUSH
61717: CALL_OW 437
61721: PUSH
61722: LD_INT 0
61724: GREATER
61725: IFFALSE 61795
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61727: LD_VAR 0 1
61731: PPUSH
61732: CALL_OW 437
61736: PUSH
61737: LD_INT 1
61739: ARRAY
61740: PUSH
61741: LD_INT 1
61743: ARRAY
61744: PUSH
61745: LD_STRING l
61747: EQUAL
61748: PUSH
61749: LD_VAR 0 1
61753: PPUSH
61754: CALL_OW 437
61758: PUSH
61759: LD_INT 1
61761: ARRAY
61762: PUSH
61763: LD_INT 4
61765: ARRAY
61766: PUSH
61767: LD_VAR 0 2
61771: EQUAL
61772: AND
61773: IFFALSE 61785
// result := true else
61775: LD_ADDR_VAR 0 3
61779: PUSH
61780: LD_INT 1
61782: ST_TO_ADDR
61783: GO 61793
// result := false ;
61785: LD_ADDR_VAR 0 3
61789: PUSH
61790: LD_INT 0
61792: ST_TO_ADDR
// end else
61793: GO 61803
// result := false ;
61795: LD_ADDR_VAR 0 3
61799: PUSH
61800: LD_INT 0
61802: ST_TO_ADDR
// end ;
61803: LD_VAR 0 3
61807: RET
// export function HealTarget ( sci ) ; begin
61808: LD_INT 0
61810: PPUSH
// if not sci then
61811: LD_VAR 0 1
61815: NOT
61816: IFFALSE 61820
// exit ;
61818: GO 61885
// result := 0 ;
61820: LD_ADDR_VAR 0 2
61824: PUSH
61825: LD_INT 0
61827: ST_TO_ADDR
// if GetTaskList ( sci ) then
61828: LD_VAR 0 1
61832: PPUSH
61833: CALL_OW 437
61837: IFFALSE 61885
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61839: LD_VAR 0 1
61843: PPUSH
61844: CALL_OW 437
61848: PUSH
61849: LD_INT 1
61851: ARRAY
61852: PUSH
61853: LD_INT 1
61855: ARRAY
61856: PUSH
61857: LD_STRING l
61859: EQUAL
61860: IFFALSE 61885
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61862: LD_ADDR_VAR 0 2
61866: PUSH
61867: LD_VAR 0 1
61871: PPUSH
61872: CALL_OW 437
61876: PUSH
61877: LD_INT 1
61879: ARRAY
61880: PUSH
61881: LD_INT 4
61883: ARRAY
61884: ST_TO_ADDR
// end ;
61885: LD_VAR 0 2
61889: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61890: LD_INT 0
61892: PPUSH
61893: PPUSH
61894: PPUSH
61895: PPUSH
// if not base_units then
61896: LD_VAR 0 1
61900: NOT
61901: IFFALSE 61905
// exit ;
61903: GO 61992
// result := false ;
61905: LD_ADDR_VAR 0 2
61909: PUSH
61910: LD_INT 0
61912: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61913: LD_ADDR_VAR 0 5
61917: PUSH
61918: LD_VAR 0 1
61922: PPUSH
61923: LD_INT 21
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PPUSH
61933: CALL_OW 72
61937: ST_TO_ADDR
// if not tmp then
61938: LD_VAR 0 5
61942: NOT
61943: IFFALSE 61947
// exit ;
61945: GO 61992
// for i in tmp do
61947: LD_ADDR_VAR 0 3
61951: PUSH
61952: LD_VAR 0 5
61956: PUSH
61957: FOR_IN
61958: IFFALSE 61990
// begin result := EnemyInRange ( i , 22 ) ;
61960: LD_ADDR_VAR 0 2
61964: PUSH
61965: LD_VAR 0 3
61969: PPUSH
61970: LD_INT 22
61972: PPUSH
61973: CALL 60228 0 2
61977: ST_TO_ADDR
// if result then
61978: LD_VAR 0 2
61982: IFFALSE 61988
// exit ;
61984: POP
61985: POP
61986: GO 61992
// end ;
61988: GO 61957
61990: POP
61991: POP
// end ;
61992: LD_VAR 0 2
61996: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61997: LD_INT 0
61999: PPUSH
62000: PPUSH
// if not units then
62001: LD_VAR 0 1
62005: NOT
62006: IFFALSE 62010
// exit ;
62008: GO 62080
// result := [ ] ;
62010: LD_ADDR_VAR 0 3
62014: PUSH
62015: EMPTY
62016: ST_TO_ADDR
// for i in units do
62017: LD_ADDR_VAR 0 4
62021: PUSH
62022: LD_VAR 0 1
62026: PUSH
62027: FOR_IN
62028: IFFALSE 62078
// if GetTag ( i ) = tag then
62030: LD_VAR 0 4
62034: PPUSH
62035: CALL_OW 110
62039: PUSH
62040: LD_VAR 0 2
62044: EQUAL
62045: IFFALSE 62076
// result := Replace ( result , result + 1 , i ) ;
62047: LD_ADDR_VAR 0 3
62051: PUSH
62052: LD_VAR 0 3
62056: PPUSH
62057: LD_VAR 0 3
62061: PUSH
62062: LD_INT 1
62064: PLUS
62065: PPUSH
62066: LD_VAR 0 4
62070: PPUSH
62071: CALL_OW 1
62075: ST_TO_ADDR
62076: GO 62027
62078: POP
62079: POP
// end ;
62080: LD_VAR 0 3
62084: RET
// export function IsDriver ( un ) ; begin
62085: LD_INT 0
62087: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62088: LD_ADDR_VAR 0 2
62092: PUSH
62093: LD_VAR 0 1
62097: PUSH
62098: LD_INT 55
62100: PUSH
62101: EMPTY
62102: LIST
62103: PPUSH
62104: CALL_OW 69
62108: IN
62109: ST_TO_ADDR
// end ;
62110: LD_VAR 0 2
62114: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62115: LD_INT 0
62117: PPUSH
62118: PPUSH
// list := [ ] ;
62119: LD_ADDR_VAR 0 5
62123: PUSH
62124: EMPTY
62125: ST_TO_ADDR
// case d of 0 :
62126: LD_VAR 0 3
62130: PUSH
62131: LD_INT 0
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62139
62137: GO 62272
62139: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62140: LD_ADDR_VAR 0 5
62144: PUSH
62145: LD_VAR 0 1
62149: PUSH
62150: LD_INT 4
62152: MINUS
62153: PUSH
62154: LD_VAR 0 2
62158: PUSH
62159: LD_INT 4
62161: MINUS
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: PUSH
62171: LD_VAR 0 1
62175: PUSH
62176: LD_INT 3
62178: MINUS
62179: PUSH
62180: LD_VAR 0 2
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: PUSH
62193: LD_VAR 0 1
62197: PUSH
62198: LD_INT 4
62200: PLUS
62201: PUSH
62202: LD_VAR 0 2
62206: PUSH
62207: LD_INT 4
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: LIST
62214: PUSH
62215: LD_VAR 0 1
62219: PUSH
62220: LD_INT 3
62222: PLUS
62223: PUSH
62224: LD_VAR 0 2
62228: PUSH
62229: LD_INT 3
62231: PLUS
62232: PUSH
62233: LD_INT 5
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: PUSH
62241: LD_VAR 0 1
62245: PUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_INT 4
62253: PLUS
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// end ; 1 :
62270: GO 62970
62272: LD_INT 1
62274: DOUBLE
62275: EQUAL
62276: IFTRUE 62280
62278: GO 62413
62280: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62281: LD_ADDR_VAR 0 5
62285: PUSH
62286: LD_VAR 0 1
62290: PUSH
62291: LD_VAR 0 2
62295: PUSH
62296: LD_INT 4
62298: MINUS
62299: PUSH
62300: LD_INT 3
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: PUSH
62308: LD_VAR 0 1
62312: PUSH
62313: LD_INT 3
62315: MINUS
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 3
62324: MINUS
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: PUSH
62334: LD_VAR 0 1
62338: PUSH
62339: LD_INT 4
62341: MINUS
62342: PUSH
62343: LD_VAR 0 2
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: LIST
62355: PUSH
62356: LD_VAR 0 1
62360: PUSH
62361: LD_VAR 0 2
62365: PUSH
62366: LD_INT 3
62368: PLUS
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: PUSH
62378: LD_VAR 0 1
62382: PUSH
62383: LD_INT 4
62385: PLUS
62386: PUSH
62387: LD_VAR 0 2
62391: PUSH
62392: LD_INT 4
62394: PLUS
62395: PUSH
62396: LD_INT 5
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: ST_TO_ADDR
// end ; 2 :
62411: GO 62970
62413: LD_INT 2
62415: DOUBLE
62416: EQUAL
62417: IFTRUE 62421
62419: GO 62550
62421: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62422: LD_ADDR_VAR 0 5
62426: PUSH
62427: LD_VAR 0 1
62431: PUSH
62432: LD_VAR 0 2
62436: PUSH
62437: LD_INT 3
62439: MINUS
62440: PUSH
62441: LD_INT 3
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: PUSH
62449: LD_VAR 0 1
62453: PUSH
62454: LD_INT 4
62456: PLUS
62457: PUSH
62458: LD_VAR 0 2
62462: PUSH
62463: LD_INT 4
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: PUSH
62471: LD_VAR 0 1
62475: PUSH
62476: LD_VAR 0 2
62480: PUSH
62481: LD_INT 4
62483: PLUS
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: PUSH
62493: LD_VAR 0 1
62497: PUSH
62498: LD_INT 3
62500: MINUS
62501: PUSH
62502: LD_VAR 0 2
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_INT 4
62522: MINUS
62523: PUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_INT 4
62531: MINUS
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: ST_TO_ADDR
// end ; 3 :
62548: GO 62970
62550: LD_INT 3
62552: DOUBLE
62553: EQUAL
62554: IFTRUE 62558
62556: GO 62691
62558: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62559: LD_ADDR_VAR 0 5
62563: PUSH
62564: LD_VAR 0 1
62568: PUSH
62569: LD_INT 3
62571: PLUS
62572: PUSH
62573: LD_VAR 0 2
62577: PUSH
62578: LD_INT 4
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: PUSH
62586: LD_VAR 0 1
62590: PUSH
62591: LD_INT 4
62593: PLUS
62594: PUSH
62595: LD_VAR 0 2
62599: PUSH
62600: LD_INT 4
62602: PLUS
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: PUSH
62612: LD_VAR 0 1
62616: PUSH
62617: LD_INT 4
62619: MINUS
62620: PUSH
62621: LD_VAR 0 2
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: PUSH
62634: LD_VAR 0 1
62638: PUSH
62639: LD_VAR 0 2
62643: PUSH
62644: LD_INT 4
62646: MINUS
62647: PUSH
62648: LD_INT 3
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: LIST
62655: PUSH
62656: LD_VAR 0 1
62660: PUSH
62661: LD_INT 3
62663: MINUS
62664: PUSH
62665: LD_VAR 0 2
62669: PUSH
62670: LD_INT 3
62672: MINUS
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// end ; 4 :
62689: GO 62970
62691: LD_INT 4
62693: DOUBLE
62694: EQUAL
62695: IFTRUE 62699
62697: GO 62832
62699: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62700: LD_ADDR_VAR 0 5
62704: PUSH
62705: LD_VAR 0 1
62709: PUSH
62710: LD_VAR 0 2
62714: PUSH
62715: LD_INT 4
62717: PLUS
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: PUSH
62727: LD_VAR 0 1
62731: PUSH
62732: LD_INT 3
62734: PLUS
62735: PUSH
62736: LD_VAR 0 2
62740: PUSH
62741: LD_INT 3
62743: PLUS
62744: PUSH
62745: LD_INT 5
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: PUSH
62753: LD_VAR 0 1
62757: PUSH
62758: LD_INT 4
62760: PLUS
62761: PUSH
62762: LD_VAR 0 2
62766: PUSH
62767: LD_INT 4
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: PUSH
62775: LD_VAR 0 1
62779: PUSH
62780: LD_VAR 0 2
62784: PUSH
62785: LD_INT 3
62787: MINUS
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: PUSH
62797: LD_VAR 0 1
62801: PUSH
62802: LD_INT 4
62804: MINUS
62805: PUSH
62806: LD_VAR 0 2
62810: PUSH
62811: LD_INT 4
62813: MINUS
62814: PUSH
62815: LD_INT 2
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// end ; 5 :
62830: GO 62970
62832: LD_INT 5
62834: DOUBLE
62835: EQUAL
62836: IFTRUE 62840
62838: GO 62969
62840: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62841: LD_ADDR_VAR 0 5
62845: PUSH
62846: LD_VAR 0 1
62850: PUSH
62851: LD_INT 4
62853: MINUS
62854: PUSH
62855: LD_VAR 0 2
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: PUSH
62868: LD_VAR 0 1
62872: PUSH
62873: LD_VAR 0 2
62877: PUSH
62878: LD_INT 4
62880: MINUS
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: PUSH
62890: LD_VAR 0 1
62894: PUSH
62895: LD_INT 4
62897: PLUS
62898: PUSH
62899: LD_VAR 0 2
62903: PUSH
62904: LD_INT 4
62906: PLUS
62907: PUSH
62908: LD_INT 5
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: PUSH
62916: LD_VAR 0 1
62920: PUSH
62921: LD_INT 3
62923: PLUS
62924: PUSH
62925: LD_VAR 0 2
62929: PUSH
62930: LD_INT 4
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: LIST
62937: PUSH
62938: LD_VAR 0 1
62942: PUSH
62943: LD_VAR 0 2
62947: PUSH
62948: LD_INT 3
62950: PLUS
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: ST_TO_ADDR
// end ; end ;
62967: GO 62970
62969: POP
// result := list ;
62970: LD_ADDR_VAR 0 4
62974: PUSH
62975: LD_VAR 0 5
62979: ST_TO_ADDR
// end ;
62980: LD_VAR 0 4
62984: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62985: LD_INT 0
62987: PPUSH
62988: PPUSH
62989: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62990: LD_VAR 0 1
62994: NOT
62995: PUSH
62996: LD_VAR 0 2
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: LD_INT 4
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: IN
63019: NOT
63020: OR
63021: IFFALSE 63025
// exit ;
63023: GO 63117
// tmp := [ ] ;
63025: LD_ADDR_VAR 0 5
63029: PUSH
63030: EMPTY
63031: ST_TO_ADDR
// for i in units do
63032: LD_ADDR_VAR 0 4
63036: PUSH
63037: LD_VAR 0 1
63041: PUSH
63042: FOR_IN
63043: IFFALSE 63086
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63045: LD_ADDR_VAR 0 5
63049: PUSH
63050: LD_VAR 0 5
63054: PPUSH
63055: LD_VAR 0 5
63059: PUSH
63060: LD_INT 1
63062: PLUS
63063: PPUSH
63064: LD_VAR 0 4
63068: PPUSH
63069: LD_VAR 0 2
63073: PPUSH
63074: CALL_OW 259
63078: PPUSH
63079: CALL_OW 2
63083: ST_TO_ADDR
63084: GO 63042
63086: POP
63087: POP
// if not tmp then
63088: LD_VAR 0 5
63092: NOT
63093: IFFALSE 63097
// exit ;
63095: GO 63117
// result := SortListByListDesc ( units , tmp ) ;
63097: LD_ADDR_VAR 0 3
63101: PUSH
63102: LD_VAR 0 1
63106: PPUSH
63107: LD_VAR 0 5
63111: PPUSH
63112: CALL_OW 77
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 3
63121: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63122: LD_INT 0
63124: PPUSH
63125: PPUSH
63126: PPUSH
// result := false ;
63127: LD_ADDR_VAR 0 3
63131: PUSH
63132: LD_INT 0
63134: ST_TO_ADDR
// x := GetX ( building ) ;
63135: LD_ADDR_VAR 0 4
63139: PUSH
63140: LD_VAR 0 2
63144: PPUSH
63145: CALL_OW 250
63149: ST_TO_ADDR
// y := GetY ( building ) ;
63150: LD_ADDR_VAR 0 5
63154: PUSH
63155: LD_VAR 0 2
63159: PPUSH
63160: CALL_OW 251
63164: ST_TO_ADDR
// if not building or not x or not y then
63165: LD_VAR 0 2
63169: NOT
63170: PUSH
63171: LD_VAR 0 4
63175: NOT
63176: OR
63177: PUSH
63178: LD_VAR 0 5
63182: NOT
63183: OR
63184: IFFALSE 63188
// exit ;
63186: GO 63280
// if GetTaskList ( unit ) then
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL_OW 437
63197: IFFALSE 63280
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63199: LD_STRING e
63201: PUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: CALL_OW 437
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: PUSH
63216: LD_INT 1
63218: ARRAY
63219: EQUAL
63220: PUSH
63221: LD_VAR 0 4
63225: PUSH
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL_OW 437
63235: PUSH
63236: LD_INT 1
63238: ARRAY
63239: PUSH
63240: LD_INT 2
63242: ARRAY
63243: EQUAL
63244: AND
63245: PUSH
63246: LD_VAR 0 5
63250: PUSH
63251: LD_VAR 0 1
63255: PPUSH
63256: CALL_OW 437
63260: PUSH
63261: LD_INT 1
63263: ARRAY
63264: PUSH
63265: LD_INT 3
63267: ARRAY
63268: EQUAL
63269: AND
63270: IFFALSE 63280
// result := true end ;
63272: LD_ADDR_VAR 0 3
63276: PUSH
63277: LD_INT 1
63279: ST_TO_ADDR
// end ;
63280: LD_VAR 0 3
63284: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63285: LD_INT 0
63287: PPUSH
// result := false ;
63288: LD_ADDR_VAR 0 4
63292: PUSH
63293: LD_INT 0
63295: ST_TO_ADDR
// if GetTaskList ( unit ) then
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 437
63305: IFFALSE 63388
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63307: LD_STRING M
63309: PUSH
63310: LD_VAR 0 1
63314: PPUSH
63315: CALL_OW 437
63319: PUSH
63320: LD_INT 1
63322: ARRAY
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: EQUAL
63328: PUSH
63329: LD_VAR 0 2
63333: PUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 437
63343: PUSH
63344: LD_INT 1
63346: ARRAY
63347: PUSH
63348: LD_INT 2
63350: ARRAY
63351: EQUAL
63352: AND
63353: PUSH
63354: LD_VAR 0 3
63358: PUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 437
63368: PUSH
63369: LD_INT 1
63371: ARRAY
63372: PUSH
63373: LD_INT 3
63375: ARRAY
63376: EQUAL
63377: AND
63378: IFFALSE 63388
// result := true ;
63380: LD_ADDR_VAR 0 4
63384: PUSH
63385: LD_INT 1
63387: ST_TO_ADDR
// end ; end ;
63388: LD_VAR 0 4
63392: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63393: LD_INT 0
63395: PPUSH
63396: PPUSH
63397: PPUSH
63398: PPUSH
// if not unit or not area then
63399: LD_VAR 0 1
63403: NOT
63404: PUSH
63405: LD_VAR 0 2
63409: NOT
63410: OR
63411: IFFALSE 63415
// exit ;
63413: GO 63579
// tmp := AreaToList ( area , i ) ;
63415: LD_ADDR_VAR 0 6
63419: PUSH
63420: LD_VAR 0 2
63424: PPUSH
63425: LD_VAR 0 5
63429: PPUSH
63430: CALL_OW 517
63434: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63435: LD_ADDR_VAR 0 5
63439: PUSH
63440: DOUBLE
63441: LD_INT 1
63443: DEC
63444: ST_TO_ADDR
63445: LD_VAR 0 6
63449: PUSH
63450: LD_INT 1
63452: ARRAY
63453: PUSH
63454: FOR_TO
63455: IFFALSE 63577
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63457: LD_ADDR_VAR 0 7
63461: PUSH
63462: LD_VAR 0 6
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: PUSH
63471: LD_VAR 0 5
63475: ARRAY
63476: PUSH
63477: LD_VAR 0 6
63481: PUSH
63482: LD_INT 2
63484: ARRAY
63485: PUSH
63486: LD_VAR 0 5
63490: ARRAY
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63496: LD_VAR 0 7
63500: PUSH
63501: LD_INT 1
63503: ARRAY
63504: PPUSH
63505: LD_VAR 0 7
63509: PUSH
63510: LD_INT 2
63512: ARRAY
63513: PPUSH
63514: CALL_OW 428
63518: PUSH
63519: LD_INT 0
63521: EQUAL
63522: IFFALSE 63575
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63524: LD_VAR 0 1
63528: PPUSH
63529: LD_VAR 0 7
63533: PUSH
63534: LD_INT 1
63536: ARRAY
63537: PPUSH
63538: LD_VAR 0 7
63542: PUSH
63543: LD_INT 2
63545: ARRAY
63546: PPUSH
63547: LD_VAR 0 3
63551: PPUSH
63552: CALL_OW 48
// result := IsPlaced ( unit ) ;
63556: LD_ADDR_VAR 0 4
63560: PUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 305
63570: ST_TO_ADDR
// exit ;
63571: POP
63572: POP
63573: GO 63579
// end ; end ;
63575: GO 63454
63577: POP
63578: POP
// end ;
63579: LD_VAR 0 4
63583: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63584: LD_INT 0
63586: PPUSH
63587: PPUSH
63588: PPUSH
// if not side or side > 8 then
63589: LD_VAR 0 1
63593: NOT
63594: PUSH
63595: LD_VAR 0 1
63599: PUSH
63600: LD_INT 8
63602: GREATER
63603: OR
63604: IFFALSE 63608
// exit ;
63606: GO 63795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63608: LD_ADDR_VAR 0 4
63612: PUSH
63613: LD_INT 22
63615: PUSH
63616: LD_VAR 0 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 21
63627: PUSH
63628: LD_INT 3
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PPUSH
63639: CALL_OW 69
63643: ST_TO_ADDR
// if not tmp then
63644: LD_VAR 0 4
63648: NOT
63649: IFFALSE 63653
// exit ;
63651: GO 63795
// enable_addtolog := true ;
63653: LD_ADDR_OWVAR 81
63657: PUSH
63658: LD_INT 1
63660: ST_TO_ADDR
// AddToLog ( [ ) ;
63661: LD_STRING [
63663: PPUSH
63664: CALL_OW 561
// for i in tmp do
63668: LD_ADDR_VAR 0 3
63672: PUSH
63673: LD_VAR 0 4
63677: PUSH
63678: FOR_IN
63679: IFFALSE 63786
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63681: LD_STRING [
63683: PUSH
63684: LD_VAR 0 3
63688: PPUSH
63689: CALL_OW 266
63693: STR
63694: PUSH
63695: LD_STRING , 
63697: STR
63698: PUSH
63699: LD_VAR 0 3
63703: PPUSH
63704: CALL_OW 250
63708: STR
63709: PUSH
63710: LD_STRING , 
63712: STR
63713: PUSH
63714: LD_VAR 0 3
63718: PPUSH
63719: CALL_OW 251
63723: STR
63724: PUSH
63725: LD_STRING , 
63727: STR
63728: PUSH
63729: LD_VAR 0 3
63733: PPUSH
63734: CALL_OW 254
63738: STR
63739: PUSH
63740: LD_STRING , 
63742: STR
63743: PUSH
63744: LD_VAR 0 3
63748: PPUSH
63749: LD_INT 1
63751: PPUSH
63752: CALL_OW 268
63756: STR
63757: PUSH
63758: LD_STRING , 
63760: STR
63761: PUSH
63762: LD_VAR 0 3
63766: PPUSH
63767: LD_INT 2
63769: PPUSH
63770: CALL_OW 268
63774: STR
63775: PUSH
63776: LD_STRING ],
63778: STR
63779: PPUSH
63780: CALL_OW 561
// end ;
63784: GO 63678
63786: POP
63787: POP
// AddToLog ( ]; ) ;
63788: LD_STRING ];
63790: PPUSH
63791: CALL_OW 561
// end ;
63795: LD_VAR 0 2
63799: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63800: LD_INT 0
63802: PPUSH
63803: PPUSH
63804: PPUSH
63805: PPUSH
63806: PPUSH
// if not area or not rate or not max then
63807: LD_VAR 0 1
63811: NOT
63812: PUSH
63813: LD_VAR 0 2
63817: NOT
63818: OR
63819: PUSH
63820: LD_VAR 0 4
63824: NOT
63825: OR
63826: IFFALSE 63830
// exit ;
63828: GO 64022
// while 1 do
63830: LD_INT 1
63832: IFFALSE 64022
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63834: LD_ADDR_VAR 0 9
63838: PUSH
63839: LD_VAR 0 1
63843: PPUSH
63844: LD_INT 1
63846: PPUSH
63847: CALL_OW 287
63851: PUSH
63852: LD_INT 10
63854: MUL
63855: ST_TO_ADDR
// r := rate / 10 ;
63856: LD_ADDR_VAR 0 7
63860: PUSH
63861: LD_VAR 0 2
63865: PUSH
63866: LD_INT 10
63868: DIVREAL
63869: ST_TO_ADDR
// time := 1 1$00 ;
63870: LD_ADDR_VAR 0 8
63874: PUSH
63875: LD_INT 2100
63877: ST_TO_ADDR
// if amount < min then
63878: LD_VAR 0 9
63882: PUSH
63883: LD_VAR 0 3
63887: LESS
63888: IFFALSE 63906
// r := r * 2 else
63890: LD_ADDR_VAR 0 7
63894: PUSH
63895: LD_VAR 0 7
63899: PUSH
63900: LD_INT 2
63902: MUL
63903: ST_TO_ADDR
63904: GO 63932
// if amount > max then
63906: LD_VAR 0 9
63910: PUSH
63911: LD_VAR 0 4
63915: GREATER
63916: IFFALSE 63932
// r := r / 2 ;
63918: LD_ADDR_VAR 0 7
63922: PUSH
63923: LD_VAR 0 7
63927: PUSH
63928: LD_INT 2
63930: DIVREAL
63931: ST_TO_ADDR
// time := time / r ;
63932: LD_ADDR_VAR 0 8
63936: PUSH
63937: LD_VAR 0 8
63941: PUSH
63942: LD_VAR 0 7
63946: DIVREAL
63947: ST_TO_ADDR
// if time < 0 then
63948: LD_VAR 0 8
63952: PUSH
63953: LD_INT 0
63955: LESS
63956: IFFALSE 63973
// time := time * - 1 ;
63958: LD_ADDR_VAR 0 8
63962: PUSH
63963: LD_VAR 0 8
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: MUL
63972: ST_TO_ADDR
// wait ( time ) ;
63973: LD_VAR 0 8
63977: PPUSH
63978: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63982: LD_INT 35
63984: PPUSH
63985: LD_INT 875
63987: PPUSH
63988: CALL_OW 12
63992: PPUSH
63993: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63997: LD_INT 1
63999: PPUSH
64000: LD_INT 5
64002: PPUSH
64003: CALL_OW 12
64007: PPUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: LD_INT 1
64015: PPUSH
64016: CALL_OW 55
// end ;
64020: GO 63830
// end ;
64022: LD_VAR 0 5
64026: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64027: LD_INT 0
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
// if not turrets or not factories then
64037: LD_VAR 0 1
64041: NOT
64042: PUSH
64043: LD_VAR 0 2
64047: NOT
64048: OR
64049: IFFALSE 64053
// exit ;
64051: GO 64360
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64053: LD_ADDR_VAR 0 10
64057: PUSH
64058: LD_INT 5
64060: PUSH
64061: LD_INT 6
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: LD_INT 4
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: LD_INT 5
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 24
64095: PUSH
64096: LD_INT 25
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 23
64105: PUSH
64106: LD_INT 27
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 42
64119: PUSH
64120: LD_INT 43
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 44
64129: PUSH
64130: LD_INT 46
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 45
64139: PUSH
64140: LD_INT 47
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: LIST
64156: ST_TO_ADDR
// result := [ ] ;
64157: LD_ADDR_VAR 0 3
64161: PUSH
64162: EMPTY
64163: ST_TO_ADDR
// for i in turrets do
64164: LD_ADDR_VAR 0 4
64168: PUSH
64169: LD_VAR 0 1
64173: PUSH
64174: FOR_IN
64175: IFFALSE 64358
// begin nat := GetNation ( i ) ;
64177: LD_ADDR_VAR 0 7
64181: PUSH
64182: LD_VAR 0 4
64186: PPUSH
64187: CALL_OW 248
64191: ST_TO_ADDR
// weapon := 0 ;
64192: LD_ADDR_VAR 0 8
64196: PUSH
64197: LD_INT 0
64199: ST_TO_ADDR
// if not nat then
64200: LD_VAR 0 7
64204: NOT
64205: IFFALSE 64209
// continue ;
64207: GO 64174
// for j in list [ nat ] do
64209: LD_ADDR_VAR 0 5
64213: PUSH
64214: LD_VAR 0 10
64218: PUSH
64219: LD_VAR 0 7
64223: ARRAY
64224: PUSH
64225: FOR_IN
64226: IFFALSE 64267
// if GetBWeapon ( i ) = j [ 1 ] then
64228: LD_VAR 0 4
64232: PPUSH
64233: CALL_OW 269
64237: PUSH
64238: LD_VAR 0 5
64242: PUSH
64243: LD_INT 1
64245: ARRAY
64246: EQUAL
64247: IFFALSE 64265
// begin weapon := j [ 2 ] ;
64249: LD_ADDR_VAR 0 8
64253: PUSH
64254: LD_VAR 0 5
64258: PUSH
64259: LD_INT 2
64261: ARRAY
64262: ST_TO_ADDR
// break ;
64263: GO 64267
// end ;
64265: GO 64225
64267: POP
64268: POP
// if not weapon then
64269: LD_VAR 0 8
64273: NOT
64274: IFFALSE 64278
// continue ;
64276: GO 64174
// for k in factories do
64278: LD_ADDR_VAR 0 6
64282: PUSH
64283: LD_VAR 0 2
64287: PUSH
64288: FOR_IN
64289: IFFALSE 64354
// begin weapons := AvailableWeaponList ( k ) ;
64291: LD_ADDR_VAR 0 9
64295: PUSH
64296: LD_VAR 0 6
64300: PPUSH
64301: CALL_OW 478
64305: ST_TO_ADDR
// if not weapons then
64306: LD_VAR 0 9
64310: NOT
64311: IFFALSE 64315
// continue ;
64313: GO 64288
// if weapon in weapons then
64315: LD_VAR 0 8
64319: PUSH
64320: LD_VAR 0 9
64324: IN
64325: IFFALSE 64352
// begin result := [ i , weapon ] ;
64327: LD_ADDR_VAR 0 3
64331: PUSH
64332: LD_VAR 0 4
64336: PUSH
64337: LD_VAR 0 8
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// exit ;
64346: POP
64347: POP
64348: POP
64349: POP
64350: GO 64360
// end ; end ;
64352: GO 64288
64354: POP
64355: POP
// end ;
64356: GO 64174
64358: POP
64359: POP
// end ;
64360: LD_VAR 0 3
64364: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64365: LD_INT 0
64367: PPUSH
// if not side or side > 8 then
64368: LD_VAR 0 3
64372: NOT
64373: PUSH
64374: LD_VAR 0 3
64378: PUSH
64379: LD_INT 8
64381: GREATER
64382: OR
64383: IFFALSE 64387
// exit ;
64385: GO 64446
// if not range then
64387: LD_VAR 0 4
64391: NOT
64392: IFFALSE 64403
// range := - 12 ;
64394: LD_ADDR_VAR 0 4
64398: PUSH
64399: LD_INT 12
64401: NEG
64402: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64403: LD_VAR 0 1
64407: PPUSH
64408: LD_VAR 0 2
64412: PPUSH
64413: LD_VAR 0 3
64417: PPUSH
64418: LD_VAR 0 4
64422: PPUSH
64423: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64427: LD_VAR 0 1
64431: PPUSH
64432: LD_VAR 0 2
64436: PPUSH
64437: LD_VAR 0 3
64441: PPUSH
64442: CALL_OW 331
// end ;
64446: LD_VAR 0 5
64450: RET
// export function Video ( mode ) ; begin
64451: LD_INT 0
64453: PPUSH
// ingame_video = mode ;
64454: LD_ADDR_OWVAR 52
64458: PUSH
64459: LD_VAR 0 1
64463: ST_TO_ADDR
// interface_hidden = mode ;
64464: LD_ADDR_OWVAR 54
64468: PUSH
64469: LD_VAR 0 1
64473: ST_TO_ADDR
// end ;
64474: LD_VAR 0 2
64478: RET
// export function Join ( array , element ) ; begin
64479: LD_INT 0
64481: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64482: LD_ADDR_VAR 0 3
64486: PUSH
64487: LD_VAR 0 1
64491: PPUSH
64492: LD_VAR 0 1
64496: PUSH
64497: LD_INT 1
64499: PLUS
64500: PPUSH
64501: LD_VAR 0 2
64505: PPUSH
64506: CALL_OW 1
64510: ST_TO_ADDR
// end ;
64511: LD_VAR 0 3
64515: RET
// export function JoinUnion ( array , element ) ; begin
64516: LD_INT 0
64518: PPUSH
// result := array union element ;
64519: LD_ADDR_VAR 0 3
64523: PUSH
64524: LD_VAR 0 1
64528: PUSH
64529: LD_VAR 0 2
64533: UNION
64534: ST_TO_ADDR
// end ;
64535: LD_VAR 0 3
64539: RET
// export function GetBehemoths ( side ) ; begin
64540: LD_INT 0
64542: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64543: LD_ADDR_VAR 0 2
64547: PUSH
64548: LD_INT 22
64550: PUSH
64551: LD_VAR 0 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 31
64562: PUSH
64563: LD_INT 25
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PPUSH
64574: CALL_OW 69
64578: ST_TO_ADDR
// end ;
64579: LD_VAR 0 2
64583: RET
// export function Shuffle ( array ) ; var i , index ; begin
64584: LD_INT 0
64586: PPUSH
64587: PPUSH
64588: PPUSH
// result := [ ] ;
64589: LD_ADDR_VAR 0 2
64593: PUSH
64594: EMPTY
64595: ST_TO_ADDR
// if not array then
64596: LD_VAR 0 1
64600: NOT
64601: IFFALSE 64605
// exit ;
64603: GO 64704
// Randomize ;
64605: CALL_OW 10
// for i = array downto 1 do
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: DOUBLE
64615: LD_VAR 0 1
64619: INC
64620: ST_TO_ADDR
64621: LD_INT 1
64623: PUSH
64624: FOR_DOWNTO
64625: IFFALSE 64702
// begin index := rand ( 1 , array ) ;
64627: LD_ADDR_VAR 0 4
64631: PUSH
64632: LD_INT 1
64634: PPUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: CALL_OW 12
64644: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64645: LD_ADDR_VAR 0 2
64649: PUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_INT 1
64662: PLUS
64663: PPUSH
64664: LD_VAR 0 1
64668: PUSH
64669: LD_VAR 0 4
64673: ARRAY
64674: PPUSH
64675: CALL_OW 2
64679: ST_TO_ADDR
// array := Delete ( array , index ) ;
64680: LD_ADDR_VAR 0 1
64684: PUSH
64685: LD_VAR 0 1
64689: PPUSH
64690: LD_VAR 0 4
64694: PPUSH
64695: CALL_OW 3
64699: ST_TO_ADDR
// end ;
64700: GO 64624
64702: POP
64703: POP
// end ;
64704: LD_VAR 0 2
64708: RET
// export function GetBaseMaterials ( base ) ; begin
64709: LD_INT 0
64711: PPUSH
// result := [ 0 , 0 , 0 ] ;
64712: LD_ADDR_VAR 0 2
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// if not base then
64731: LD_VAR 0 1
64735: NOT
64736: IFFALSE 64740
// exit ;
64738: GO 64789
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64740: LD_ADDR_VAR 0 2
64744: PUSH
64745: LD_VAR 0 1
64749: PPUSH
64750: LD_INT 1
64752: PPUSH
64753: CALL_OW 275
64757: PUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_INT 2
64765: PPUSH
64766: CALL_OW 275
64770: PUSH
64771: LD_VAR 0 1
64775: PPUSH
64776: LD_INT 3
64778: PPUSH
64779: CALL_OW 275
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: LIST
64788: ST_TO_ADDR
// end ;
64789: LD_VAR 0 2
64793: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64794: LD_INT 0
64796: PPUSH
64797: PPUSH
// result := array ;
64798: LD_ADDR_VAR 0 3
64802: PUSH
64803: LD_VAR 0 1
64807: ST_TO_ADDR
// if size > 0 then
64808: LD_VAR 0 2
64812: PUSH
64813: LD_INT 0
64815: GREATER
64816: IFFALSE 64862
// for i := array downto size do
64818: LD_ADDR_VAR 0 4
64822: PUSH
64823: DOUBLE
64824: LD_VAR 0 1
64828: INC
64829: ST_TO_ADDR
64830: LD_VAR 0 2
64834: PUSH
64835: FOR_DOWNTO
64836: IFFALSE 64860
// result := Delete ( result , result ) ;
64838: LD_ADDR_VAR 0 3
64842: PUSH
64843: LD_VAR 0 3
64847: PPUSH
64848: LD_VAR 0 3
64852: PPUSH
64853: CALL_OW 3
64857: ST_TO_ADDR
64858: GO 64835
64860: POP
64861: POP
// end ;
64862: LD_VAR 0 3
64866: RET
// export function ComExit ( unit ) ; var tmp ; begin
64867: LD_INT 0
64869: PPUSH
64870: PPUSH
// if not IsInUnit ( unit ) then
64871: LD_VAR 0 1
64875: PPUSH
64876: CALL_OW 310
64880: NOT
64881: IFFALSE 64885
// exit ;
64883: GO 64945
// tmp := IsInUnit ( unit ) ;
64885: LD_ADDR_VAR 0 3
64889: PUSH
64890: LD_VAR 0 1
64894: PPUSH
64895: CALL_OW 310
64899: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64900: LD_VAR 0 3
64904: PPUSH
64905: CALL_OW 247
64909: PUSH
64910: LD_INT 2
64912: EQUAL
64913: IFFALSE 64926
// ComExitVehicle ( unit ) else
64915: LD_VAR 0 1
64919: PPUSH
64920: CALL_OW 121
64924: GO 64935
// ComExitBuilding ( unit ) ;
64926: LD_VAR 0 1
64930: PPUSH
64931: CALL_OW 122
// result := tmp ;
64935: LD_ADDR_VAR 0 2
64939: PUSH
64940: LD_VAR 0 3
64944: ST_TO_ADDR
// end ;
64945: LD_VAR 0 2
64949: RET
// export function ComExitAll ( units ) ; var i ; begin
64950: LD_INT 0
64952: PPUSH
64953: PPUSH
// if not units then
64954: LD_VAR 0 1
64958: NOT
64959: IFFALSE 64963
// exit ;
64961: GO 64989
// for i in units do
64963: LD_ADDR_VAR 0 3
64967: PUSH
64968: LD_VAR 0 1
64972: PUSH
64973: FOR_IN
64974: IFFALSE 64987
// ComExit ( i ) ;
64976: LD_VAR 0 3
64980: PPUSH
64981: CALL 64867 0 1
64985: GO 64973
64987: POP
64988: POP
// end ;
64989: LD_VAR 0 2
64993: RET
// export function ResetHc ; begin
64994: LD_INT 0
64996: PPUSH
// InitHc ;
64997: CALL_OW 19
// hc_importance := 0 ;
65001: LD_ADDR_OWVAR 32
65005: PUSH
65006: LD_INT 0
65008: ST_TO_ADDR
// end ;
65009: LD_VAR 0 1
65013: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65014: LD_INT 0
65016: PPUSH
65017: PPUSH
65018: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65019: LD_ADDR_VAR 0 6
65023: PUSH
65024: LD_VAR 0 1
65028: PUSH
65029: LD_VAR 0 3
65033: PLUS
65034: PUSH
65035: LD_INT 2
65037: DIV
65038: ST_TO_ADDR
// if _x < 0 then
65039: LD_VAR 0 6
65043: PUSH
65044: LD_INT 0
65046: LESS
65047: IFFALSE 65064
// _x := _x * - 1 ;
65049: LD_ADDR_VAR 0 6
65053: PUSH
65054: LD_VAR 0 6
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: MUL
65063: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65064: LD_ADDR_VAR 0 7
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_VAR 0 4
65078: PLUS
65079: PUSH
65080: LD_INT 2
65082: DIV
65083: ST_TO_ADDR
// if _y < 0 then
65084: LD_VAR 0 7
65088: PUSH
65089: LD_INT 0
65091: LESS
65092: IFFALSE 65109
// _y := _y * - 1 ;
65094: LD_ADDR_VAR 0 7
65098: PUSH
65099: LD_VAR 0 7
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: MUL
65108: ST_TO_ADDR
// result := [ _x , _y ] ;
65109: LD_ADDR_VAR 0 5
65113: PUSH
65114: LD_VAR 0 6
65118: PUSH
65119: LD_VAR 0 7
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: ST_TO_ADDR
// end ;
65128: LD_VAR 0 5
65132: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
65137: PPUSH
65138: PPUSH
// task := GetTaskList ( unit ) ;
65139: LD_ADDR_VAR 0 7
65143: PUSH
65144: LD_VAR 0 1
65148: PPUSH
65149: CALL_OW 437
65153: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65154: LD_VAR 0 7
65158: NOT
65159: PUSH
65160: LD_VAR 0 1
65164: PPUSH
65165: LD_VAR 0 2
65169: PPUSH
65170: CALL_OW 308
65174: NOT
65175: AND
65176: IFFALSE 65180
// exit ;
65178: GO 65298
// if IsInArea ( unit , area ) then
65180: LD_VAR 0 1
65184: PPUSH
65185: LD_VAR 0 2
65189: PPUSH
65190: CALL_OW 308
65194: IFFALSE 65212
// begin ComMoveToArea ( unit , goAway ) ;
65196: LD_VAR 0 1
65200: PPUSH
65201: LD_VAR 0 3
65205: PPUSH
65206: CALL_OW 113
// exit ;
65210: GO 65298
// end ; if task [ 1 ] [ 1 ] <> M then
65212: LD_VAR 0 7
65216: PUSH
65217: LD_INT 1
65219: ARRAY
65220: PUSH
65221: LD_INT 1
65223: ARRAY
65224: PUSH
65225: LD_STRING M
65227: NONEQUAL
65228: IFFALSE 65232
// exit ;
65230: GO 65298
// x := task [ 1 ] [ 2 ] ;
65232: LD_ADDR_VAR 0 5
65236: PUSH
65237: LD_VAR 0 7
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PUSH
65246: LD_INT 2
65248: ARRAY
65249: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65250: LD_ADDR_VAR 0 6
65254: PUSH
65255: LD_VAR 0 7
65259: PUSH
65260: LD_INT 1
65262: ARRAY
65263: PUSH
65264: LD_INT 3
65266: ARRAY
65267: ST_TO_ADDR
// if InArea ( x , y , area ) then
65268: LD_VAR 0 5
65272: PPUSH
65273: LD_VAR 0 6
65277: PPUSH
65278: LD_VAR 0 2
65282: PPUSH
65283: CALL_OW 309
65287: IFFALSE 65298
// ComStop ( unit ) ;
65289: LD_VAR 0 1
65293: PPUSH
65294: CALL_OW 141
// end ;
65298: LD_VAR 0 4
65302: RET
// export function Abs ( value ) ; begin
65303: LD_INT 0
65305: PPUSH
// result := value ;
65306: LD_ADDR_VAR 0 2
65310: PUSH
65311: LD_VAR 0 1
65315: ST_TO_ADDR
// if value < 0 then
65316: LD_VAR 0 1
65320: PUSH
65321: LD_INT 0
65323: LESS
65324: IFFALSE 65341
// result := value * - 1 ;
65326: LD_ADDR_VAR 0 2
65330: PUSH
65331: LD_VAR 0 1
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: MUL
65340: ST_TO_ADDR
// end ;
65341: LD_VAR 0 2
65345: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65346: LD_INT 0
65348: PPUSH
65349: PPUSH
65350: PPUSH
65351: PPUSH
65352: PPUSH
65353: PPUSH
65354: PPUSH
65355: PPUSH
// if not unit or not building then
65356: LD_VAR 0 1
65360: NOT
65361: PUSH
65362: LD_VAR 0 2
65366: NOT
65367: OR
65368: IFFALSE 65372
// exit ;
65370: GO 65598
// x := GetX ( building ) ;
65372: LD_ADDR_VAR 0 4
65376: PUSH
65377: LD_VAR 0 2
65381: PPUSH
65382: CALL_OW 250
65386: ST_TO_ADDR
// y := GetY ( building ) ;
65387: LD_ADDR_VAR 0 6
65391: PUSH
65392: LD_VAR 0 2
65396: PPUSH
65397: CALL_OW 251
65401: ST_TO_ADDR
// d := GetDir ( building ) ;
65402: LD_ADDR_VAR 0 8
65406: PUSH
65407: LD_VAR 0 2
65411: PPUSH
65412: CALL_OW 254
65416: ST_TO_ADDR
// r := 4 ;
65417: LD_ADDR_VAR 0 9
65421: PUSH
65422: LD_INT 4
65424: ST_TO_ADDR
// for i := 1 to 5 do
65425: LD_ADDR_VAR 0 10
65429: PUSH
65430: DOUBLE
65431: LD_INT 1
65433: DEC
65434: ST_TO_ADDR
65435: LD_INT 5
65437: PUSH
65438: FOR_TO
65439: IFFALSE 65596
// begin _x := ShiftX ( x , d , r + i ) ;
65441: LD_ADDR_VAR 0 5
65445: PUSH
65446: LD_VAR 0 4
65450: PPUSH
65451: LD_VAR 0 8
65455: PPUSH
65456: LD_VAR 0 9
65460: PUSH
65461: LD_VAR 0 10
65465: PLUS
65466: PPUSH
65467: CALL_OW 272
65471: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65472: LD_ADDR_VAR 0 7
65476: PUSH
65477: LD_VAR 0 6
65481: PPUSH
65482: LD_VAR 0 8
65486: PPUSH
65487: LD_VAR 0 9
65491: PUSH
65492: LD_VAR 0 10
65496: PLUS
65497: PPUSH
65498: CALL_OW 273
65502: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65503: LD_VAR 0 5
65507: PPUSH
65508: LD_VAR 0 7
65512: PPUSH
65513: CALL_OW 488
65517: PUSH
65518: LD_VAR 0 5
65522: PPUSH
65523: LD_VAR 0 7
65527: PPUSH
65528: CALL_OW 428
65532: PPUSH
65533: CALL_OW 247
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: IN
65548: NOT
65549: AND
65550: IFFALSE 65594
// begin ComMoveXY ( unit , _x , _y ) ;
65552: LD_VAR 0 1
65556: PPUSH
65557: LD_VAR 0 5
65561: PPUSH
65562: LD_VAR 0 7
65566: PPUSH
65567: CALL_OW 111
// result := [ _x , _y ] ;
65571: LD_ADDR_VAR 0 3
65575: PUSH
65576: LD_VAR 0 5
65580: PUSH
65581: LD_VAR 0 7
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// exit ;
65590: POP
65591: POP
65592: GO 65598
// end ; end ;
65594: GO 65438
65596: POP
65597: POP
// end ;
65598: LD_VAR 0 3
65602: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65603: LD_INT 0
65605: PPUSH
65606: PPUSH
65607: PPUSH
// result := 0 ;
65608: LD_ADDR_VAR 0 3
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65616: LD_VAR 0 1
65620: PUSH
65621: LD_INT 0
65623: LESS
65624: PUSH
65625: LD_VAR 0 1
65629: PUSH
65630: LD_INT 8
65632: GREATER
65633: OR
65634: PUSH
65635: LD_VAR 0 2
65639: PUSH
65640: LD_INT 0
65642: LESS
65643: OR
65644: PUSH
65645: LD_VAR 0 2
65649: PUSH
65650: LD_INT 8
65652: GREATER
65653: OR
65654: IFFALSE 65658
// exit ;
65656: GO 65733
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65658: LD_ADDR_VAR 0 4
65662: PUSH
65663: LD_INT 22
65665: PUSH
65666: LD_VAR 0 2
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PPUSH
65675: CALL_OW 69
65679: PUSH
65680: FOR_IN
65681: IFFALSE 65731
// begin un := UnitShoot ( i ) ;
65683: LD_ADDR_VAR 0 5
65687: PUSH
65688: LD_VAR 0 4
65692: PPUSH
65693: CALL_OW 504
65697: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65698: LD_VAR 0 5
65702: PPUSH
65703: CALL_OW 255
65707: PUSH
65708: LD_VAR 0 1
65712: EQUAL
65713: IFFALSE 65729
// begin result := un ;
65715: LD_ADDR_VAR 0 3
65719: PUSH
65720: LD_VAR 0 5
65724: ST_TO_ADDR
// exit ;
65725: POP
65726: POP
65727: GO 65733
// end ; end ;
65729: GO 65680
65731: POP
65732: POP
// end ;
65733: LD_VAR 0 3
65737: RET
// export function GetCargoBay ( units ) ; begin
65738: LD_INT 0
65740: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65741: LD_ADDR_VAR 0 2
65745: PUSH
65746: LD_VAR 0 1
65750: PPUSH
65751: LD_INT 2
65753: PUSH
65754: LD_INT 34
65756: PUSH
65757: LD_INT 12
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 34
65766: PUSH
65767: LD_INT 51
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 34
65776: PUSH
65777: LD_INT 32
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 34
65786: PUSH
65787: LD_EXP 53
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: PPUSH
65803: CALL_OW 72
65807: ST_TO_ADDR
// end ;
65808: LD_VAR 0 2
65812: RET
// export function Negate ( value ) ; begin
65813: LD_INT 0
65815: PPUSH
// result := not value ;
65816: LD_ADDR_VAR 0 2
65820: PUSH
65821: LD_VAR 0 1
65825: NOT
65826: ST_TO_ADDR
// end ;
65827: LD_VAR 0 2
65831: RET
// export function Inc ( value ) ; begin
65832: LD_INT 0
65834: PPUSH
// result := value + 1 ;
65835: LD_ADDR_VAR 0 2
65839: PUSH
65840: LD_VAR 0 1
65844: PUSH
65845: LD_INT 1
65847: PLUS
65848: ST_TO_ADDR
// end ;
65849: LD_VAR 0 2
65853: RET
// export function Dec ( value ) ; begin
65854: LD_INT 0
65856: PPUSH
// result := value - 1 ;
65857: LD_ADDR_VAR 0 2
65861: PUSH
65862: LD_VAR 0 1
65866: PUSH
65867: LD_INT 1
65869: MINUS
65870: ST_TO_ADDR
// end ;
65871: LD_VAR 0 2
65875: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65876: LD_INT 0
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
65884: PPUSH
65885: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65886: LD_VAR 0 1
65890: PPUSH
65891: LD_VAR 0 2
65895: PPUSH
65896: CALL_OW 488
65900: NOT
65901: PUSH
65902: LD_VAR 0 3
65906: PPUSH
65907: LD_VAR 0 4
65911: PPUSH
65912: CALL_OW 488
65916: NOT
65917: OR
65918: IFFALSE 65931
// begin result := - 1 ;
65920: LD_ADDR_VAR 0 5
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: ST_TO_ADDR
// exit ;
65929: GO 66166
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65931: LD_ADDR_VAR 0 12
65935: PUSH
65936: LD_VAR 0 1
65940: PPUSH
65941: LD_VAR 0 2
65945: PPUSH
65946: LD_VAR 0 3
65950: PPUSH
65951: LD_VAR 0 4
65955: PPUSH
65956: CALL 65014 0 4
65960: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65961: LD_ADDR_VAR 0 11
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_VAR 0 2
65975: PPUSH
65976: LD_VAR 0 12
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: PPUSH
65985: LD_VAR 0 12
65989: PUSH
65990: LD_INT 2
65992: ARRAY
65993: PPUSH
65994: CALL_OW 298
65998: ST_TO_ADDR
// distance := 9999 ;
65999: LD_ADDR_VAR 0 10
66003: PUSH
66004: LD_INT 9999
66006: ST_TO_ADDR
// for i := 0 to 5 do
66007: LD_ADDR_VAR 0 6
66011: PUSH
66012: DOUBLE
66013: LD_INT 0
66015: DEC
66016: ST_TO_ADDR
66017: LD_INT 5
66019: PUSH
66020: FOR_TO
66021: IFFALSE 66164
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66023: LD_ADDR_VAR 0 7
66027: PUSH
66028: LD_VAR 0 1
66032: PPUSH
66033: LD_VAR 0 6
66037: PPUSH
66038: LD_VAR 0 11
66042: PPUSH
66043: CALL_OW 272
66047: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66048: LD_ADDR_VAR 0 8
66052: PUSH
66053: LD_VAR 0 2
66057: PPUSH
66058: LD_VAR 0 6
66062: PPUSH
66063: LD_VAR 0 11
66067: PPUSH
66068: CALL_OW 273
66072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66073: LD_VAR 0 7
66077: PPUSH
66078: LD_VAR 0 8
66082: PPUSH
66083: CALL_OW 488
66087: NOT
66088: IFFALSE 66092
// continue ;
66090: GO 66020
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66092: LD_ADDR_VAR 0 9
66096: PUSH
66097: LD_VAR 0 12
66101: PUSH
66102: LD_INT 1
66104: ARRAY
66105: PPUSH
66106: LD_VAR 0 12
66110: PUSH
66111: LD_INT 2
66113: ARRAY
66114: PPUSH
66115: LD_VAR 0 7
66119: PPUSH
66120: LD_VAR 0 8
66124: PPUSH
66125: CALL_OW 298
66129: ST_TO_ADDR
// if tmp < distance then
66130: LD_VAR 0 9
66134: PUSH
66135: LD_VAR 0 10
66139: LESS
66140: IFFALSE 66162
// begin result := i ;
66142: LD_ADDR_VAR 0 5
66146: PUSH
66147: LD_VAR 0 6
66151: ST_TO_ADDR
// distance := tmp ;
66152: LD_ADDR_VAR 0 10
66156: PUSH
66157: LD_VAR 0 9
66161: ST_TO_ADDR
// end ; end ;
66162: GO 66020
66164: POP
66165: POP
// end ;
66166: LD_VAR 0 5
66170: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66171: LD_INT 0
66173: PPUSH
66174: PPUSH
// if not driver or not IsInUnit ( driver ) then
66175: LD_VAR 0 1
66179: NOT
66180: PUSH
66181: LD_VAR 0 1
66185: PPUSH
66186: CALL_OW 310
66190: NOT
66191: OR
66192: IFFALSE 66196
// exit ;
66194: GO 66286
// vehicle := IsInUnit ( driver ) ;
66196: LD_ADDR_VAR 0 3
66200: PUSH
66201: LD_VAR 0 1
66205: PPUSH
66206: CALL_OW 310
66210: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66211: LD_VAR 0 1
66215: PPUSH
66216: LD_STRING \
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: PUSH
66246: LD_STRING E
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_VAR 0 3
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PPUSH
66282: CALL_OW 446
// end ;
66286: LD_VAR 0 2
66290: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66291: LD_INT 0
66293: PPUSH
66294: PPUSH
// if not driver or not IsInUnit ( driver ) then
66295: LD_VAR 0 1
66299: NOT
66300: PUSH
66301: LD_VAR 0 1
66305: PPUSH
66306: CALL_OW 310
66310: NOT
66311: OR
66312: IFFALSE 66316
// exit ;
66314: GO 66406
// vehicle := IsInUnit ( driver ) ;
66316: LD_ADDR_VAR 0 3
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 310
66330: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66331: LD_VAR 0 1
66335: PPUSH
66336: LD_STRING \
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: PUSH
66366: LD_STRING E
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_VAR 0 3
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PPUSH
66402: CALL_OW 447
// end ;
66406: LD_VAR 0 2
66410: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66411: LD_INT 0
66413: PPUSH
66414: PPUSH
66415: PPUSH
// tmp := [ ] ;
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: EMPTY
66422: ST_TO_ADDR
// for i in units do
66423: LD_ADDR_VAR 0 4
66427: PUSH
66428: LD_VAR 0 1
66432: PUSH
66433: FOR_IN
66434: IFFALSE 66472
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66436: LD_ADDR_VAR 0 5
66440: PUSH
66441: LD_VAR 0 5
66445: PPUSH
66446: LD_VAR 0 5
66450: PUSH
66451: LD_INT 1
66453: PLUS
66454: PPUSH
66455: LD_VAR 0 4
66459: PPUSH
66460: CALL_OW 256
66464: PPUSH
66465: CALL_OW 2
66469: ST_TO_ADDR
66470: GO 66433
66472: POP
66473: POP
// if not tmp then
66474: LD_VAR 0 5
66478: NOT
66479: IFFALSE 66483
// exit ;
66481: GO 66531
// if asc then
66483: LD_VAR 0 2
66487: IFFALSE 66511
// result := SortListByListAsc ( units , tmp ) else
66489: LD_ADDR_VAR 0 3
66493: PUSH
66494: LD_VAR 0 1
66498: PPUSH
66499: LD_VAR 0 5
66503: PPUSH
66504: CALL_OW 76
66508: ST_TO_ADDR
66509: GO 66531
// result := SortListByListDesc ( units , tmp ) ;
66511: LD_ADDR_VAR 0 3
66515: PUSH
66516: LD_VAR 0 1
66520: PPUSH
66521: LD_VAR 0 5
66525: PPUSH
66526: CALL_OW 77
66530: ST_TO_ADDR
// end ;
66531: LD_VAR 0 3
66535: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66536: LD_INT 0
66538: PPUSH
66539: PPUSH
// task := GetTaskList ( mech ) ;
66540: LD_ADDR_VAR 0 4
66544: PUSH
66545: LD_VAR 0 1
66549: PPUSH
66550: CALL_OW 437
66554: ST_TO_ADDR
// if not task then
66555: LD_VAR 0 4
66559: NOT
66560: IFFALSE 66564
// exit ;
66562: GO 66606
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66564: LD_ADDR_VAR 0 3
66568: PUSH
66569: LD_VAR 0 4
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: PUSH
66582: LD_STRING r
66584: EQUAL
66585: PUSH
66586: LD_VAR 0 4
66590: PUSH
66591: LD_INT 1
66593: ARRAY
66594: PUSH
66595: LD_INT 4
66597: ARRAY
66598: PUSH
66599: LD_VAR 0 2
66603: EQUAL
66604: AND
66605: ST_TO_ADDR
// end ;
66606: LD_VAR 0 3
66610: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66611: LD_INT 0
66613: PPUSH
// SetDir ( unit , d ) ;
66614: LD_VAR 0 1
66618: PPUSH
66619: LD_VAR 0 4
66623: PPUSH
66624: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66628: LD_VAR 0 1
66632: PPUSH
66633: LD_VAR 0 2
66637: PPUSH
66638: LD_VAR 0 3
66642: PPUSH
66643: LD_VAR 0 5
66647: PPUSH
66648: CALL_OW 48
// end ;
66652: LD_VAR 0 6
66656: RET
// export function ToNaturalNumber ( number ) ; begin
66657: LD_INT 0
66659: PPUSH
// result := number div 1 ;
66660: LD_ADDR_VAR 0 2
66664: PUSH
66665: LD_VAR 0 1
66669: PUSH
66670: LD_INT 1
66672: DIV
66673: ST_TO_ADDR
// if number < 0 then
66674: LD_VAR 0 1
66678: PUSH
66679: LD_INT 0
66681: LESS
66682: IFFALSE 66692
// result := 0 ;
66684: LD_ADDR_VAR 0 2
66688: PUSH
66689: LD_INT 0
66691: ST_TO_ADDR
// end ;
66692: LD_VAR 0 2
66696: RET
// export function SortByClass ( units , class ) ; var un ; begin
66697: LD_INT 0
66699: PPUSH
66700: PPUSH
// if not units or not class then
66701: LD_VAR 0 1
66705: NOT
66706: PUSH
66707: LD_VAR 0 2
66711: NOT
66712: OR
66713: IFFALSE 66717
// exit ;
66715: GO 66812
// result := [ ] ;
66717: LD_ADDR_VAR 0 3
66721: PUSH
66722: EMPTY
66723: ST_TO_ADDR
// for un in units do
66724: LD_ADDR_VAR 0 4
66728: PUSH
66729: LD_VAR 0 1
66733: PUSH
66734: FOR_IN
66735: IFFALSE 66810
// if GetClass ( un ) = class then
66737: LD_VAR 0 4
66741: PPUSH
66742: CALL_OW 257
66746: PUSH
66747: LD_VAR 0 2
66751: EQUAL
66752: IFFALSE 66779
// result := Insert ( result , 1 , un ) else
66754: LD_ADDR_VAR 0 3
66758: PUSH
66759: LD_VAR 0 3
66763: PPUSH
66764: LD_INT 1
66766: PPUSH
66767: LD_VAR 0 4
66771: PPUSH
66772: CALL_OW 2
66776: ST_TO_ADDR
66777: GO 66808
// result := Replace ( result , result + 1 , un ) ;
66779: LD_ADDR_VAR 0 3
66783: PUSH
66784: LD_VAR 0 3
66788: PPUSH
66789: LD_VAR 0 3
66793: PUSH
66794: LD_INT 1
66796: PLUS
66797: PPUSH
66798: LD_VAR 0 4
66802: PPUSH
66803: CALL_OW 1
66807: ST_TO_ADDR
66808: GO 66734
66810: POP
66811: POP
// end ;
66812: LD_VAR 0 3
66816: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66817: LD_INT 0
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
66825: PPUSH
// result := [ ] ;
66826: LD_ADDR_VAR 0 4
66830: PUSH
66831: EMPTY
66832: ST_TO_ADDR
// if x - r < 0 then
66833: LD_VAR 0 1
66837: PUSH
66838: LD_VAR 0 3
66842: MINUS
66843: PUSH
66844: LD_INT 0
66846: LESS
66847: IFFALSE 66859
// min_x := 0 else
66849: LD_ADDR_VAR 0 8
66853: PUSH
66854: LD_INT 0
66856: ST_TO_ADDR
66857: GO 66875
// min_x := x - r ;
66859: LD_ADDR_VAR 0 8
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_VAR 0 3
66873: MINUS
66874: ST_TO_ADDR
// if y - r < 0 then
66875: LD_VAR 0 2
66879: PUSH
66880: LD_VAR 0 3
66884: MINUS
66885: PUSH
66886: LD_INT 0
66888: LESS
66889: IFFALSE 66901
// min_y := 0 else
66891: LD_ADDR_VAR 0 7
66895: PUSH
66896: LD_INT 0
66898: ST_TO_ADDR
66899: GO 66917
// min_y := y - r ;
66901: LD_ADDR_VAR 0 7
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_VAR 0 3
66915: MINUS
66916: ST_TO_ADDR
// max_x := x + r ;
66917: LD_ADDR_VAR 0 9
66921: PUSH
66922: LD_VAR 0 1
66926: PUSH
66927: LD_VAR 0 3
66931: PLUS
66932: ST_TO_ADDR
// max_y := y + r ;
66933: LD_ADDR_VAR 0 10
66937: PUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_VAR 0 3
66947: PLUS
66948: ST_TO_ADDR
// for _x = min_x to max_x do
66949: LD_ADDR_VAR 0 5
66953: PUSH
66954: DOUBLE
66955: LD_VAR 0 8
66959: DEC
66960: ST_TO_ADDR
66961: LD_VAR 0 9
66965: PUSH
66966: FOR_TO
66967: IFFALSE 67068
// for _y = min_y to max_y do
66969: LD_ADDR_VAR 0 6
66973: PUSH
66974: DOUBLE
66975: LD_VAR 0 7
66979: DEC
66980: ST_TO_ADDR
66981: LD_VAR 0 10
66985: PUSH
66986: FOR_TO
66987: IFFALSE 67064
// begin if not ValidHex ( _x , _y ) then
66989: LD_VAR 0 5
66993: PPUSH
66994: LD_VAR 0 6
66998: PPUSH
66999: CALL_OW 488
67003: NOT
67004: IFFALSE 67008
// continue ;
67006: GO 66986
// if GetResourceTypeXY ( _x , _y ) then
67008: LD_VAR 0 5
67012: PPUSH
67013: LD_VAR 0 6
67017: PPUSH
67018: CALL_OW 283
67022: IFFALSE 67062
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67024: LD_ADDR_VAR 0 4
67028: PUSH
67029: LD_VAR 0 4
67033: PPUSH
67034: LD_VAR 0 4
67038: PUSH
67039: LD_INT 1
67041: PLUS
67042: PPUSH
67043: LD_VAR 0 5
67047: PUSH
67048: LD_VAR 0 6
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PPUSH
67057: CALL_OW 1
67061: ST_TO_ADDR
// end ;
67062: GO 66986
67064: POP
67065: POP
67066: GO 66966
67068: POP
67069: POP
// end ;
67070: LD_VAR 0 4
67074: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67075: LD_INT 0
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
67081: PPUSH
67082: PPUSH
67083: PPUSH
67084: PPUSH
// if not units then
67085: LD_VAR 0 1
67089: NOT
67090: IFFALSE 67094
// exit ;
67092: GO 67519
// result := UnitFilter ( units , [ f_ok ] ) ;
67094: LD_ADDR_VAR 0 3
67098: PUSH
67099: LD_VAR 0 1
67103: PPUSH
67104: LD_INT 50
67106: PUSH
67107: EMPTY
67108: LIST
67109: PPUSH
67110: CALL_OW 72
67114: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67115: LD_ADDR_VAR 0 8
67119: PUSH
67120: LD_VAR 0 1
67124: PUSH
67125: LD_INT 1
67127: ARRAY
67128: PPUSH
67129: CALL_OW 255
67133: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67134: LD_ADDR_VAR 0 10
67138: PUSH
67139: LD_INT 29
67141: PUSH
67142: LD_EXP 56
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// if not result then
67151: LD_VAR 0 3
67155: NOT
67156: IFFALSE 67160
// exit ;
67158: GO 67519
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67160: LD_ADDR_VAR 0 5
67164: PUSH
67165: LD_INT 81
67167: PUSH
67168: LD_VAR 0 8
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PPUSH
67177: CALL_OW 69
67181: ST_TO_ADDR
// for i in result do
67182: LD_ADDR_VAR 0 4
67186: PUSH
67187: LD_VAR 0 3
67191: PUSH
67192: FOR_IN
67193: IFFALSE 67517
// begin tag := GetTag ( i ) + 1 ;
67195: LD_ADDR_VAR 0 9
67199: PUSH
67200: LD_VAR 0 4
67204: PPUSH
67205: CALL_OW 110
67209: PUSH
67210: LD_INT 1
67212: PLUS
67213: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67214: LD_ADDR_VAR 0 7
67218: PUSH
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 250
67228: PPUSH
67229: LD_VAR 0 4
67233: PPUSH
67234: CALL_OW 251
67238: PPUSH
67239: LD_INT 6
67241: PPUSH
67242: CALL 66817 0 3
67246: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67247: LD_VAR 0 7
67251: PUSH
67252: LD_VAR 0 4
67256: PPUSH
67257: CALL_OW 264
67261: PUSH
67262: LD_VAR 0 10
67266: IN
67267: NOT
67268: AND
67269: IFFALSE 67308
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67271: LD_VAR 0 4
67275: PPUSH
67276: LD_VAR 0 7
67280: PUSH
67281: LD_INT 1
67283: ARRAY
67284: PUSH
67285: LD_INT 1
67287: ARRAY
67288: PPUSH
67289: LD_VAR 0 7
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PUSH
67298: LD_INT 2
67300: ARRAY
67301: PPUSH
67302: CALL_OW 116
67306: GO 67515
// if path > tag then
67308: LD_VAR 0 2
67312: PUSH
67313: LD_VAR 0 9
67317: GREATER
67318: IFFALSE 67485
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
67320: LD_ADDR_VAR 0 6
67324: PUSH
67325: LD_VAR 0 5
67329: PPUSH
67330: LD_INT 91
67332: PUSH
67333: LD_VAR 0 4
67337: PUSH
67338: LD_INT 12
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: PPUSH
67346: CALL_OW 72
67350: ST_TO_ADDR
// if nearEnemy then
67351: LD_VAR 0 6
67355: IFFALSE 67383
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67357: LD_VAR 0 4
67361: PPUSH
67362: LD_VAR 0 6
67366: PPUSH
67367: LD_VAR 0 4
67371: PPUSH
67372: CALL_OW 74
67376: PPUSH
67377: CALL_OW 115
67381: GO 67483
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67383: LD_VAR 0 4
67387: PPUSH
67388: LD_VAR 0 2
67392: PUSH
67393: LD_VAR 0 9
67397: ARRAY
67398: PUSH
67399: LD_INT 1
67401: ARRAY
67402: PPUSH
67403: LD_VAR 0 2
67407: PUSH
67408: LD_VAR 0 9
67412: ARRAY
67413: PUSH
67414: LD_INT 2
67416: ARRAY
67417: PPUSH
67418: CALL_OW 297
67422: PUSH
67423: LD_INT 6
67425: GREATER
67426: IFFALSE 67469
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67428: LD_VAR 0 4
67432: PPUSH
67433: LD_VAR 0 2
67437: PUSH
67438: LD_VAR 0 9
67442: ARRAY
67443: PUSH
67444: LD_INT 1
67446: ARRAY
67447: PPUSH
67448: LD_VAR 0 2
67452: PUSH
67453: LD_VAR 0 9
67457: ARRAY
67458: PUSH
67459: LD_INT 2
67461: ARRAY
67462: PPUSH
67463: CALL_OW 114
67467: GO 67483
// SetTag ( i , tag ) ;
67469: LD_VAR 0 4
67473: PPUSH
67474: LD_VAR 0 9
67478: PPUSH
67479: CALL_OW 109
// end else
67483: GO 67515
// if enemy then
67485: LD_VAR 0 5
67489: IFFALSE 67515
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67491: LD_VAR 0 4
67495: PPUSH
67496: LD_VAR 0 5
67500: PPUSH
67501: LD_VAR 0 4
67505: PPUSH
67506: CALL_OW 74
67510: PPUSH
67511: CALL_OW 115
// end ;
67515: GO 67192
67517: POP
67518: POP
// end ;
67519: LD_VAR 0 3
67523: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
67528: PPUSH
// if not unit or IsInUnit ( unit ) then
67529: LD_VAR 0 1
67533: NOT
67534: PUSH
67535: LD_VAR 0 1
67539: PPUSH
67540: CALL_OW 310
67544: OR
67545: IFFALSE 67549
// exit ;
67547: GO 67640
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67549: LD_ADDR_VAR 0 4
67553: PUSH
67554: LD_VAR 0 1
67558: PPUSH
67559: CALL_OW 250
67563: PPUSH
67564: LD_VAR 0 2
67568: PPUSH
67569: LD_INT 1
67571: PPUSH
67572: CALL_OW 272
67576: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67577: LD_ADDR_VAR 0 5
67581: PUSH
67582: LD_VAR 0 1
67586: PPUSH
67587: CALL_OW 251
67591: PPUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: LD_INT 1
67599: PPUSH
67600: CALL_OW 273
67604: ST_TO_ADDR
// if ValidHex ( x , y ) then
67605: LD_VAR 0 4
67609: PPUSH
67610: LD_VAR 0 5
67614: PPUSH
67615: CALL_OW 488
67619: IFFALSE 67640
// ComTurnXY ( unit , x , y ) ;
67621: LD_VAR 0 1
67625: PPUSH
67626: LD_VAR 0 4
67630: PPUSH
67631: LD_VAR 0 5
67635: PPUSH
67636: CALL_OW 118
// end ;
67640: LD_VAR 0 3
67644: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67645: LD_INT 0
67647: PPUSH
67648: PPUSH
// result := false ;
67649: LD_ADDR_VAR 0 3
67653: PUSH
67654: LD_INT 0
67656: ST_TO_ADDR
// if not units then
67657: LD_VAR 0 2
67661: NOT
67662: IFFALSE 67666
// exit ;
67664: GO 67711
// for i in units do
67666: LD_ADDR_VAR 0 4
67670: PUSH
67671: LD_VAR 0 2
67675: PUSH
67676: FOR_IN
67677: IFFALSE 67709
// if See ( side , i ) then
67679: LD_VAR 0 1
67683: PPUSH
67684: LD_VAR 0 4
67688: PPUSH
67689: CALL_OW 292
67693: IFFALSE 67707
// begin result := true ;
67695: LD_ADDR_VAR 0 3
67699: PUSH
67700: LD_INT 1
67702: ST_TO_ADDR
// exit ;
67703: POP
67704: POP
67705: GO 67711
// end ;
67707: GO 67676
67709: POP
67710: POP
// end ;
67711: LD_VAR 0 3
67715: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67716: LD_INT 0
67718: PPUSH
67719: PPUSH
67720: PPUSH
67721: PPUSH
// if not unit or not points then
67722: LD_VAR 0 1
67726: NOT
67727: PUSH
67728: LD_VAR 0 2
67732: NOT
67733: OR
67734: IFFALSE 67738
// exit ;
67736: GO 67828
// dist := 99999 ;
67738: LD_ADDR_VAR 0 5
67742: PUSH
67743: LD_INT 99999
67745: ST_TO_ADDR
// for i in points do
67746: LD_ADDR_VAR 0 4
67750: PUSH
67751: LD_VAR 0 2
67755: PUSH
67756: FOR_IN
67757: IFFALSE 67826
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67759: LD_ADDR_VAR 0 6
67763: PUSH
67764: LD_VAR 0 1
67768: PPUSH
67769: LD_VAR 0 4
67773: PUSH
67774: LD_INT 1
67776: ARRAY
67777: PPUSH
67778: LD_VAR 0 4
67782: PUSH
67783: LD_INT 2
67785: ARRAY
67786: PPUSH
67787: CALL_OW 297
67791: ST_TO_ADDR
// if tmpDist < dist then
67792: LD_VAR 0 6
67796: PUSH
67797: LD_VAR 0 5
67801: LESS
67802: IFFALSE 67824
// begin result := i ;
67804: LD_ADDR_VAR 0 3
67808: PUSH
67809: LD_VAR 0 4
67813: ST_TO_ADDR
// dist := tmpDist ;
67814: LD_ADDR_VAR 0 5
67818: PUSH
67819: LD_VAR 0 6
67823: ST_TO_ADDR
// end ; end ;
67824: GO 67756
67826: POP
67827: POP
// end ; end_of_file
67828: LD_VAR 0 3
67832: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67833: LD_VAR 0 1
67837: PUSH
67838: LD_INT 200
67840: DOUBLE
67841: GREATEREQUAL
67842: IFFALSE 67850
67844: LD_INT 299
67846: DOUBLE
67847: LESSEQUAL
67848: IFTRUE 67852
67850: GO 67884
67852: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67853: LD_VAR 0 1
67857: PPUSH
67858: LD_VAR 0 2
67862: PPUSH
67863: LD_VAR 0 3
67867: PPUSH
67868: LD_VAR 0 4
67872: PPUSH
67873: LD_VAR 0 5
67877: PPUSH
67878: CALL 23480 0 5
67882: GO 67961
67884: LD_INT 300
67886: DOUBLE
67887: GREATEREQUAL
67888: IFFALSE 67896
67890: LD_INT 399
67892: DOUBLE
67893: LESSEQUAL
67894: IFTRUE 67898
67896: GO 67960
67898: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67899: LD_VAR 0 1
67903: PPUSH
67904: LD_VAR 0 2
67908: PPUSH
67909: LD_VAR 0 3
67913: PPUSH
67914: LD_VAR 0 4
67918: PPUSH
67919: LD_VAR 0 5
67923: PPUSH
67924: LD_VAR 0 6
67928: PPUSH
67929: LD_VAR 0 7
67933: PPUSH
67934: LD_VAR 0 8
67938: PPUSH
67939: LD_VAR 0 9
67943: PPUSH
67944: LD_VAR 0 10
67948: PPUSH
67949: LD_VAR 0 11
67953: PPUSH
67954: CALL 21122 0 11
67958: GO 67961
67960: POP
// end ;
67961: PPOPN 11
67963: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67964: LD_VAR 0 1
67968: PPUSH
67969: LD_VAR 0 2
67973: PPUSH
67974: LD_VAR 0 3
67978: PPUSH
67979: LD_VAR 0 4
67983: PPUSH
67984: LD_VAR 0 5
67988: PPUSH
67989: CALL 23216 0 5
// end ; end_of_file
67993: PPOPN 5
67995: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67996: LD_VAR 0 1
68000: PPUSH
68001: LD_VAR 0 2
68005: PPUSH
68006: LD_VAR 0 3
68010: PPUSH
68011: LD_VAR 0 4
68015: PPUSH
68016: LD_VAR 0 5
68020: PPUSH
68021: LD_VAR 0 6
68025: PPUSH
68026: CALL 8815 0 6
// end ;
68030: PPOPN 6
68032: END
