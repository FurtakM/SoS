// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 21937 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 22035 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 22043 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_miner := 81 ;
8608: LD_ADDR_EXP 59
8612: PUSH
8613: LD_INT 81
8615: ST_TO_ADDR
// ar_crane := 88 ;
8616: LD_ADDR_EXP 58
8620: PUSH
8621: LD_INT 88
8623: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8624: LD_ADDR_EXP 53
8628: PUSH
8629: LD_INT 89
8631: ST_TO_ADDR
// us_hack := 99 ;
8632: LD_ADDR_EXP 54
8636: PUSH
8637: LD_INT 99
8639: ST_TO_ADDR
// us_artillery := 97 ;
8640: LD_ADDR_EXP 55
8644: PUSH
8645: LD_INT 97
8647: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8648: LD_ADDR_EXP 56
8652: PUSH
8653: LD_INT 91
8655: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
8656: LD_ADDR_EXP 57
8660: PUSH
8661: LD_INT 92
8663: ST_TO_ADDR
// ru_radar := 98 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 98
8671: ST_TO_ADDR
// tech_Artillery := 80 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 80
8679: ST_TO_ADDR
// tech_RadMat := 81 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 81
8687: ST_TO_ADDR
// tech_BasicTools := 82 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 82
8695: ST_TO_ADDR
// tech_Cargo := 83 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 83
8703: ST_TO_ADDR
// tech_Track := 84 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 84
8711: ST_TO_ADDR
// tech_Crane := 85 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 85
8719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 86
8727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8728: LD_ADDR_EXP 67
8732: PUSH
8733: LD_INT 87
8735: ST_TO_ADDR
// class_mastodont := 31 ;
8736: LD_ADDR_EXP 68
8740: PUSH
8741: LD_INT 31
8743: ST_TO_ADDR
// class_horse := 21 ;
8744: LD_ADDR_EXP 69
8748: PUSH
8749: LD_INT 21
8751: ST_TO_ADDR
// end ;
8752: LD_VAR 0 1
8756: RET
// every 1 do
8757: GO 8759
8759: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8760: CALL 8605 0 0
8764: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8765: LD_INT 0
8767: PPUSH
// if p2 = 100 then
8768: LD_VAR 0 2
8772: PUSH
8773: LD_INT 100
8775: EQUAL
8776: IFFALSE 9725
// begin if not StreamModeActive then
8778: LD_EXP 70
8782: NOT
8783: IFFALSE 8793
// StreamModeActive := true ;
8785: LD_ADDR_EXP 70
8789: PUSH
8790: LD_INT 1
8792: ST_TO_ADDR
// if p3 = 0 then
8793: LD_VAR 0 3
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: IFFALSE 8807
// InitStreamMode ;
8803: CALL 9885 0 0
// if p3 = 1 then
8807: LD_VAR 0 3
8811: PUSH
8812: LD_INT 1
8814: EQUAL
8815: IFFALSE 8825
// sRocket := true ;
8817: LD_ADDR_EXP 75
8821: PUSH
8822: LD_INT 1
8824: ST_TO_ADDR
// if p3 = 2 then
8825: LD_VAR 0 3
8829: PUSH
8830: LD_INT 2
8832: EQUAL
8833: IFFALSE 8843
// sSpeed := true ;
8835: LD_ADDR_EXP 74
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// if p3 = 3 then
8843: LD_VAR 0 3
8847: PUSH
8848: LD_INT 3
8850: EQUAL
8851: IFFALSE 8861
// sEngine := true ;
8853: LD_ADDR_EXP 76
8857: PUSH
8858: LD_INT 1
8860: ST_TO_ADDR
// if p3 = 4 then
8861: LD_VAR 0 3
8865: PUSH
8866: LD_INT 4
8868: EQUAL
8869: IFFALSE 8879
// sSpec := true ;
8871: LD_ADDR_EXP 73
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
// if p3 = 5 then
8879: LD_VAR 0 3
8883: PUSH
8884: LD_INT 5
8886: EQUAL
8887: IFFALSE 8897
// sLevel := true ;
8889: LD_ADDR_EXP 77
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// if p3 = 6 then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 6
8904: EQUAL
8905: IFFALSE 8915
// sArmoury := true ;
8907: LD_ADDR_EXP 78
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 7 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 7
8922: EQUAL
8923: IFFALSE 8933
// sRadar := true ;
8925: LD_ADDR_EXP 79
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// if p3 = 8 then
8933: LD_VAR 0 3
8937: PUSH
8938: LD_INT 8
8940: EQUAL
8941: IFFALSE 8951
// sBunker := true ;
8943: LD_ADDR_EXP 80
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// if p3 = 9 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 9
8958: EQUAL
8959: IFFALSE 8969
// sHack := true ;
8961: LD_ADDR_EXP 81
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// if p3 = 10 then
8969: LD_VAR 0 3
8973: PUSH
8974: LD_INT 10
8976: EQUAL
8977: IFFALSE 8987
// sFire := true ;
8979: LD_ADDR_EXP 82
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// if p3 = 11 then
8987: LD_VAR 0 3
8991: PUSH
8992: LD_INT 11
8994: EQUAL
8995: IFFALSE 9005
// sRefresh := true ;
8997: LD_ADDR_EXP 83
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// if p3 = 12 then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_INT 12
9012: EQUAL
9013: IFFALSE 9023
// sExp := true ;
9015: LD_ADDR_EXP 84
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// if p3 = 13 then
9023: LD_VAR 0 3
9027: PUSH
9028: LD_INT 13
9030: EQUAL
9031: IFFALSE 9041
// sDepot := true ;
9033: LD_ADDR_EXP 85
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// if p3 = 14 then
9041: LD_VAR 0 3
9045: PUSH
9046: LD_INT 14
9048: EQUAL
9049: IFFALSE 9059
// sFlag := true ;
9051: LD_ADDR_EXP 86
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// if p3 = 15 then
9059: LD_VAR 0 3
9063: PUSH
9064: LD_INT 15
9066: EQUAL
9067: IFFALSE 9077
// sKamikadze := true ;
9069: LD_ADDR_EXP 94
9073: PUSH
9074: LD_INT 1
9076: ST_TO_ADDR
// if p3 = 16 then
9077: LD_VAR 0 3
9081: PUSH
9082: LD_INT 16
9084: EQUAL
9085: IFFALSE 9095
// sTroll := true ;
9087: LD_ADDR_EXP 95
9091: PUSH
9092: LD_INT 1
9094: ST_TO_ADDR
// if p3 = 17 then
9095: LD_VAR 0 3
9099: PUSH
9100: LD_INT 17
9102: EQUAL
9103: IFFALSE 9113
// sSlow := true ;
9105: LD_ADDR_EXP 96
9109: PUSH
9110: LD_INT 1
9112: ST_TO_ADDR
// if p3 = 18 then
9113: LD_VAR 0 3
9117: PUSH
9118: LD_INT 18
9120: EQUAL
9121: IFFALSE 9131
// sLack := true ;
9123: LD_ADDR_EXP 97
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// if p3 = 19 then
9131: LD_VAR 0 3
9135: PUSH
9136: LD_INT 19
9138: EQUAL
9139: IFFALSE 9149
// sTank := true ;
9141: LD_ADDR_EXP 99
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// if p3 = 20 then
9149: LD_VAR 0 3
9153: PUSH
9154: LD_INT 20
9156: EQUAL
9157: IFFALSE 9167
// sRemote := true ;
9159: LD_ADDR_EXP 100
9163: PUSH
9164: LD_INT 1
9166: ST_TO_ADDR
// if p3 = 21 then
9167: LD_VAR 0 3
9171: PUSH
9172: LD_INT 21
9174: EQUAL
9175: IFFALSE 9185
// sPowell := true ;
9177: LD_ADDR_EXP 101
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// if p3 = 22 then
9185: LD_VAR 0 3
9189: PUSH
9190: LD_INT 22
9192: EQUAL
9193: IFFALSE 9203
// sTeleport := true ;
9195: LD_ADDR_EXP 104
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// if p3 = 23 then
9203: LD_VAR 0 3
9207: PUSH
9208: LD_INT 23
9210: EQUAL
9211: IFFALSE 9221
// sOilTower := true ;
9213: LD_ADDR_EXP 106
9217: PUSH
9218: LD_INT 1
9220: ST_TO_ADDR
// if p3 = 24 then
9221: LD_VAR 0 3
9225: PUSH
9226: LD_INT 24
9228: EQUAL
9229: IFFALSE 9239
// sShovel := true ;
9231: LD_ADDR_EXP 107
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// if p3 = 25 then
9239: LD_VAR 0 3
9243: PUSH
9244: LD_INT 25
9246: EQUAL
9247: IFFALSE 9257
// sSheik := true ;
9249: LD_ADDR_EXP 108
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// if p3 = 26 then
9257: LD_VAR 0 3
9261: PUSH
9262: LD_INT 26
9264: EQUAL
9265: IFFALSE 9275
// sEarthquake := true ;
9267: LD_ADDR_EXP 110
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// if p3 = 27 then
9275: LD_VAR 0 3
9279: PUSH
9280: LD_INT 27
9282: EQUAL
9283: IFFALSE 9293
// sAI := true ;
9285: LD_ADDR_EXP 111
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// if p3 = 28 then
9293: LD_VAR 0 3
9297: PUSH
9298: LD_INT 28
9300: EQUAL
9301: IFFALSE 9311
// sCargo := true ;
9303: LD_ADDR_EXP 114
9307: PUSH
9308: LD_INT 1
9310: ST_TO_ADDR
// if p3 = 29 then
9311: LD_VAR 0 3
9315: PUSH
9316: LD_INT 29
9318: EQUAL
9319: IFFALSE 9329
// sDLaser := true ;
9321: LD_ADDR_EXP 115
9325: PUSH
9326: LD_INT 1
9328: ST_TO_ADDR
// if p3 = 30 then
9329: LD_VAR 0 3
9333: PUSH
9334: LD_INT 30
9336: EQUAL
9337: IFFALSE 9347
// sExchange := true ;
9339: LD_ADDR_EXP 116
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// if p3 = 31 then
9347: LD_VAR 0 3
9351: PUSH
9352: LD_INT 31
9354: EQUAL
9355: IFFALSE 9365
// sFac := true ;
9357: LD_ADDR_EXP 117
9361: PUSH
9362: LD_INT 1
9364: ST_TO_ADDR
// if p3 = 32 then
9365: LD_VAR 0 3
9369: PUSH
9370: LD_INT 32
9372: EQUAL
9373: IFFALSE 9383
// sPower := true ;
9375: LD_ADDR_EXP 118
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// if p3 = 33 then
9383: LD_VAR 0 3
9387: PUSH
9388: LD_INT 33
9390: EQUAL
9391: IFFALSE 9401
// sRandom := true ;
9393: LD_ADDR_EXP 119
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// if p3 = 34 then
9401: LD_VAR 0 3
9405: PUSH
9406: LD_INT 34
9408: EQUAL
9409: IFFALSE 9419
// sShield := true ;
9411: LD_ADDR_EXP 120
9415: PUSH
9416: LD_INT 1
9418: ST_TO_ADDR
// if p3 = 35 then
9419: LD_VAR 0 3
9423: PUSH
9424: LD_INT 35
9426: EQUAL
9427: IFFALSE 9437
// sTime := true ;
9429: LD_ADDR_EXP 121
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// if p3 = 36 then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 36
9444: EQUAL
9445: IFFALSE 9455
// sTools := true ;
9447: LD_ADDR_EXP 122
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
// if p3 = 101 then
9455: LD_VAR 0 3
9459: PUSH
9460: LD_INT 101
9462: EQUAL
9463: IFFALSE 9473
// sSold := true ;
9465: LD_ADDR_EXP 87
9469: PUSH
9470: LD_INT 1
9472: ST_TO_ADDR
// if p3 = 102 then
9473: LD_VAR 0 3
9477: PUSH
9478: LD_INT 102
9480: EQUAL
9481: IFFALSE 9491
// sDiff := true ;
9483: LD_ADDR_EXP 88
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// if p3 = 103 then
9491: LD_VAR 0 3
9495: PUSH
9496: LD_INT 103
9498: EQUAL
9499: IFFALSE 9509
// sFog := true ;
9501: LD_ADDR_EXP 91
9505: PUSH
9506: LD_INT 1
9508: ST_TO_ADDR
// if p3 = 104 then
9509: LD_VAR 0 3
9513: PUSH
9514: LD_INT 104
9516: EQUAL
9517: IFFALSE 9527
// sReset := true ;
9519: LD_ADDR_EXP 92
9523: PUSH
9524: LD_INT 1
9526: ST_TO_ADDR
// if p3 = 105 then
9527: LD_VAR 0 3
9531: PUSH
9532: LD_INT 105
9534: EQUAL
9535: IFFALSE 9545
// sSun := true ;
9537: LD_ADDR_EXP 93
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// if p3 = 106 then
9545: LD_VAR 0 3
9549: PUSH
9550: LD_INT 106
9552: EQUAL
9553: IFFALSE 9563
// sTiger := true ;
9555: LD_ADDR_EXP 89
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// if p3 = 107 then
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 107
9570: EQUAL
9571: IFFALSE 9581
// sBomb := true ;
9573: LD_ADDR_EXP 90
9577: PUSH
9578: LD_INT 1
9580: ST_TO_ADDR
// if p3 = 108 then
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 108
9588: EQUAL
9589: IFFALSE 9599
// sWound := true ;
9591: LD_ADDR_EXP 98
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// if p3 = 109 then
9599: LD_VAR 0 3
9603: PUSH
9604: LD_INT 109
9606: EQUAL
9607: IFFALSE 9617
// sBetray := true ;
9609: LD_ADDR_EXP 102
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// if p3 = 110 then
9617: LD_VAR 0 3
9621: PUSH
9622: LD_INT 110
9624: EQUAL
9625: IFFALSE 9635
// sContamin := true ;
9627: LD_ADDR_EXP 103
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
// if p3 = 111 then
9635: LD_VAR 0 3
9639: PUSH
9640: LD_INT 111
9642: EQUAL
9643: IFFALSE 9653
// sOil := true ;
9645: LD_ADDR_EXP 105
9649: PUSH
9650: LD_INT 1
9652: ST_TO_ADDR
// if p3 = 112 then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 112
9660: EQUAL
9661: IFFALSE 9671
// sStu := true ;
9663: LD_ADDR_EXP 109
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// if p3 = 113 then
9671: LD_VAR 0 3
9675: PUSH
9676: LD_INT 113
9678: EQUAL
9679: IFFALSE 9689
// sBazooka := true ;
9681: LD_ADDR_EXP 112
9685: PUSH
9686: LD_INT 1
9688: ST_TO_ADDR
// if p3 = 114 then
9689: LD_VAR 0 3
9693: PUSH
9694: LD_INT 114
9696: EQUAL
9697: IFFALSE 9707
// sMortar := true ;
9699: LD_ADDR_EXP 113
9703: PUSH
9704: LD_INT 1
9706: ST_TO_ADDR
// if p3 = 115 then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 115
9714: EQUAL
9715: IFFALSE 9725
// sRanger := true ;
9717: LD_ADDR_EXP 123
9721: PUSH
9722: LD_INT 1
9724: ST_TO_ADDR
// end ; if p2 = 101 then
9725: LD_VAR 0 2
9729: PUSH
9730: LD_INT 101
9732: EQUAL
9733: IFFALSE 9861
// begin case p3 of 1 :
9735: LD_VAR 0 3
9739: PUSH
9740: LD_INT 1
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9755
9748: POP
// hHackUnlimitedResources ; 2 :
9749: CALL 20898 0 0
9753: GO 9861
9755: LD_INT 2
9757: DOUBLE
9758: EQUAL
9759: IFTRUE 9763
9761: GO 9770
9763: POP
// hHackSetLevel10 ; 3 :
9764: CALL 21031 0 0
9768: GO 9861
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9785
9778: POP
// hHackSetLevel10YourUnits ; 4 :
9779: CALL 21116 0 0
9783: GO 9861
9785: LD_INT 4
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9800
9793: POP
// hHackInvincible ; 5 :
9794: CALL 21564 0 0
9798: GO 9861
9800: LD_INT 5
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9815
9808: POP
// hHackInvisible ; 6 :
9809: CALL 21675 0 0
9813: GO 9861
9815: LD_INT 6
9817: DOUBLE
9818: EQUAL
9819: IFTRUE 9823
9821: GO 9830
9823: POP
// hHackChangeYourSide ; 7 :
9824: CALL 21732 0 0
9828: GO 9861
9830: LD_INT 7
9832: DOUBLE
9833: EQUAL
9834: IFTRUE 9838
9836: GO 9845
9838: POP
// hHackChangeUnitSide ; 8 :
9839: CALL 21774 0 0
9843: GO 9861
9845: LD_INT 8
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9860
9853: POP
// hHackFog ; end ;
9854: CALL 21875 0 0
9858: GO 9861
9860: POP
// end ; end ;
9861: LD_VAR 0 7
9865: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9866: GO 9868
9868: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9869: LD_STRING initStreamRollete();
9871: PPUSH
9872: CALL_OW 559
// InitStreamMode ;
9876: CALL 9885 0 0
// DefineStreamItems ( ) ;
9880: CALL 10325 0 0
// end ;
9884: END
// function InitStreamMode ; begin
9885: LD_INT 0
9887: PPUSH
// streamModeActive := false ;
9888: LD_ADDR_EXP 70
9892: PUSH
9893: LD_INT 0
9895: ST_TO_ADDR
// normalCounter := 36 ;
9896: LD_ADDR_EXP 71
9900: PUSH
9901: LD_INT 36
9903: ST_TO_ADDR
// hardcoreCounter := 16 ;
9904: LD_ADDR_EXP 72
9908: PUSH
9909: LD_INT 16
9911: ST_TO_ADDR
// sRocket := false ;
9912: LD_ADDR_EXP 75
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// sSpeed := false ;
9920: LD_ADDR_EXP 74
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// sEngine := false ;
9928: LD_ADDR_EXP 76
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// sSpec := false ;
9936: LD_ADDR_EXP 73
9940: PUSH
9941: LD_INT 0
9943: ST_TO_ADDR
// sLevel := false ;
9944: LD_ADDR_EXP 77
9948: PUSH
9949: LD_INT 0
9951: ST_TO_ADDR
// sArmoury := false ;
9952: LD_ADDR_EXP 78
9956: PUSH
9957: LD_INT 0
9959: ST_TO_ADDR
// sRadar := false ;
9960: LD_ADDR_EXP 79
9964: PUSH
9965: LD_INT 0
9967: ST_TO_ADDR
// sBunker := false ;
9968: LD_ADDR_EXP 80
9972: PUSH
9973: LD_INT 0
9975: ST_TO_ADDR
// sHack := false ;
9976: LD_ADDR_EXP 81
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// sFire := false ;
9984: LD_ADDR_EXP 82
9988: PUSH
9989: LD_INT 0
9991: ST_TO_ADDR
// sRefresh := false ;
9992: LD_ADDR_EXP 83
9996: PUSH
9997: LD_INT 0
9999: ST_TO_ADDR
// sExp := false ;
10000: LD_ADDR_EXP 84
10004: PUSH
10005: LD_INT 0
10007: ST_TO_ADDR
// sDepot := false ;
10008: LD_ADDR_EXP 85
10012: PUSH
10013: LD_INT 0
10015: ST_TO_ADDR
// sFlag := false ;
10016: LD_ADDR_EXP 86
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// sKamikadze := false ;
10024: LD_ADDR_EXP 94
10028: PUSH
10029: LD_INT 0
10031: ST_TO_ADDR
// sTroll := false ;
10032: LD_ADDR_EXP 95
10036: PUSH
10037: LD_INT 0
10039: ST_TO_ADDR
// sSlow := false ;
10040: LD_ADDR_EXP 96
10044: PUSH
10045: LD_INT 0
10047: ST_TO_ADDR
// sLack := false ;
10048: LD_ADDR_EXP 97
10052: PUSH
10053: LD_INT 0
10055: ST_TO_ADDR
// sTank := false ;
10056: LD_ADDR_EXP 99
10060: PUSH
10061: LD_INT 0
10063: ST_TO_ADDR
// sRemote := false ;
10064: LD_ADDR_EXP 100
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// sPowell := false ;
10072: LD_ADDR_EXP 101
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// sTeleport := false ;
10080: LD_ADDR_EXP 104
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// sOilTower := false ;
10088: LD_ADDR_EXP 106
10092: PUSH
10093: LD_INT 0
10095: ST_TO_ADDR
// sShovel := false ;
10096: LD_ADDR_EXP 107
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// sSheik := false ;
10104: LD_ADDR_EXP 108
10108: PUSH
10109: LD_INT 0
10111: ST_TO_ADDR
// sEarthquake := false ;
10112: LD_ADDR_EXP 110
10116: PUSH
10117: LD_INT 0
10119: ST_TO_ADDR
// sAI := false ;
10120: LD_ADDR_EXP 111
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// sCargo := false ;
10128: LD_ADDR_EXP 114
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// sDLaser := false ;
10136: LD_ADDR_EXP 115
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// sExchange := false ;
10144: LD_ADDR_EXP 116
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// sFac := false ;
10152: LD_ADDR_EXP 117
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// sPower := false ;
10160: LD_ADDR_EXP 118
10164: PUSH
10165: LD_INT 0
10167: ST_TO_ADDR
// sRandom := false ;
10168: LD_ADDR_EXP 119
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// sShield := false ;
10176: LD_ADDR_EXP 120
10180: PUSH
10181: LD_INT 0
10183: ST_TO_ADDR
// sTime := false ;
10184: LD_ADDR_EXP 121
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// sTools := false ;
10192: LD_ADDR_EXP 122
10196: PUSH
10197: LD_INT 0
10199: ST_TO_ADDR
// sSold := false ;
10200: LD_ADDR_EXP 87
10204: PUSH
10205: LD_INT 0
10207: ST_TO_ADDR
// sDiff := false ;
10208: LD_ADDR_EXP 88
10212: PUSH
10213: LD_INT 0
10215: ST_TO_ADDR
// sFog := false ;
10216: LD_ADDR_EXP 91
10220: PUSH
10221: LD_INT 0
10223: ST_TO_ADDR
// sReset := false ;
10224: LD_ADDR_EXP 92
10228: PUSH
10229: LD_INT 0
10231: ST_TO_ADDR
// sSun := false ;
10232: LD_ADDR_EXP 93
10236: PUSH
10237: LD_INT 0
10239: ST_TO_ADDR
// sTiger := false ;
10240: LD_ADDR_EXP 89
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// sBomb := false ;
10248: LD_ADDR_EXP 90
10252: PUSH
10253: LD_INT 0
10255: ST_TO_ADDR
// sWound := false ;
10256: LD_ADDR_EXP 98
10260: PUSH
10261: LD_INT 0
10263: ST_TO_ADDR
// sBetray := false ;
10264: LD_ADDR_EXP 102
10268: PUSH
10269: LD_INT 0
10271: ST_TO_ADDR
// sContamin := false ;
10272: LD_ADDR_EXP 103
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// sOil := false ;
10280: LD_ADDR_EXP 105
10284: PUSH
10285: LD_INT 0
10287: ST_TO_ADDR
// sStu := false ;
10288: LD_ADDR_EXP 109
10292: PUSH
10293: LD_INT 0
10295: ST_TO_ADDR
// sBazooka := false ;
10296: LD_ADDR_EXP 112
10300: PUSH
10301: LD_INT 0
10303: ST_TO_ADDR
// sMortar := false ;
10304: LD_ADDR_EXP 113
10308: PUSH
10309: LD_INT 0
10311: ST_TO_ADDR
// sRanger := false ;
10312: LD_ADDR_EXP 123
10316: PUSH
10317: LD_INT 0
10319: ST_TO_ADDR
// end ;
10320: LD_VAR 0 1
10324: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10325: LD_INT 0
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
// result := [ ] ;
10332: LD_ADDR_VAR 0 1
10336: PUSH
10337: EMPTY
10338: ST_TO_ADDR
// if campaign_id = 1 then
10339: LD_OWVAR 69
10343: PUSH
10344: LD_INT 1
10346: EQUAL
10347: IFFALSE 13285
// begin case mission_number of 1 :
10349: LD_OWVAR 70
10353: PUSH
10354: LD_INT 1
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10426
10362: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10363: LD_ADDR_VAR 0 1
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: LD_INT 4
10373: PUSH
10374: LD_INT 11
10376: PUSH
10377: LD_INT 12
10379: PUSH
10380: LD_INT 15
10382: PUSH
10383: LD_INT 16
10385: PUSH
10386: LD_INT 22
10388: PUSH
10389: LD_INT 23
10391: PUSH
10392: LD_INT 26
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 101
10408: PUSH
10409: LD_INT 102
10411: PUSH
10412: LD_INT 106
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: ST_TO_ADDR
10424: GO 13283
10426: LD_INT 2
10428: DOUBLE
10429: EQUAL
10430: IFTRUE 10434
10432: GO 10506
10434: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10435: LD_ADDR_VAR 0 1
10439: PUSH
10440: LD_INT 2
10442: PUSH
10443: LD_INT 4
10445: PUSH
10446: LD_INT 11
10448: PUSH
10449: LD_INT 12
10451: PUSH
10452: LD_INT 15
10454: PUSH
10455: LD_INT 16
10457: PUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 23
10463: PUSH
10464: LD_INT 26
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 101
10480: PUSH
10481: LD_INT 102
10483: PUSH
10484: LD_INT 105
10486: PUSH
10487: LD_INT 106
10489: PUSH
10490: LD_INT 108
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: ST_TO_ADDR
10504: GO 13283
10506: LD_INT 3
10508: DOUBLE
10509: EQUAL
10510: IFTRUE 10514
10512: GO 10590
10514: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10515: LD_ADDR_VAR 0 1
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 11
10531: PUSH
10532: LD_INT 12
10534: PUSH
10535: LD_INT 15
10537: PUSH
10538: LD_INT 16
10540: PUSH
10541: LD_INT 22
10543: PUSH
10544: LD_INT 26
10546: PUSH
10547: LD_INT 36
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 101
10564: PUSH
10565: LD_INT 102
10567: PUSH
10568: LD_INT 105
10570: PUSH
10571: LD_INT 106
10573: PUSH
10574: LD_INT 108
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: ST_TO_ADDR
10588: GO 13283
10590: LD_INT 4
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10682
10598: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10599: LD_ADDR_VAR 0 1
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 4
10609: PUSH
10610: LD_INT 5
10612: PUSH
10613: LD_INT 8
10615: PUSH
10616: LD_INT 11
10618: PUSH
10619: LD_INT 12
10621: PUSH
10622: LD_INT 15
10624: PUSH
10625: LD_INT 16
10627: PUSH
10628: LD_INT 22
10630: PUSH
10631: LD_INT 23
10633: PUSH
10634: LD_INT 26
10636: PUSH
10637: LD_INT 36
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 101
10656: PUSH
10657: LD_INT 102
10659: PUSH
10660: LD_INT 105
10662: PUSH
10663: LD_INT 106
10665: PUSH
10666: LD_INT 108
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: ST_TO_ADDR
10680: GO 13283
10682: LD_INT 5
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10790
10690: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 4
10701: PUSH
10702: LD_INT 5
10704: PUSH
10705: LD_INT 6
10707: PUSH
10708: LD_INT 8
10710: PUSH
10711: LD_INT 11
10713: PUSH
10714: LD_INT 12
10716: PUSH
10717: LD_INT 15
10719: PUSH
10720: LD_INT 16
10722: PUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 25
10731: PUSH
10732: LD_INT 26
10734: PUSH
10735: LD_INT 36
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 101
10756: PUSH
10757: LD_INT 102
10759: PUSH
10760: LD_INT 105
10762: PUSH
10763: LD_INT 106
10765: PUSH
10766: LD_INT 108
10768: PUSH
10769: LD_INT 109
10771: PUSH
10772: LD_INT 112
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: ST_TO_ADDR
10788: GO 13283
10790: LD_INT 6
10792: DOUBLE
10793: EQUAL
10794: IFTRUE 10798
10796: GO 10918
10798: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: LD_INT 4
10809: PUSH
10810: LD_INT 5
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: LD_INT 8
10818: PUSH
10819: LD_INT 11
10821: PUSH
10822: LD_INT 12
10824: PUSH
10825: LD_INT 15
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: LD_INT 20
10833: PUSH
10834: LD_INT 21
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_INT 23
10842: PUSH
10843: LD_INT 25
10845: PUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: LD_INT 31
10854: PUSH
10855: LD_INT 32
10857: PUSH
10858: LD_INT 36
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 101
10884: PUSH
10885: LD_INT 102
10887: PUSH
10888: LD_INT 105
10890: PUSH
10891: LD_INT 106
10893: PUSH
10894: LD_INT 108
10896: PUSH
10897: LD_INT 109
10899: PUSH
10900: LD_INT 112
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: ST_TO_ADDR
10916: GO 13283
10918: LD_INT 7
10920: DOUBLE
10921: EQUAL
10922: IFTRUE 10926
10924: GO 11026
10926: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10927: LD_ADDR_VAR 0 1
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: LD_INT 4
10937: PUSH
10938: LD_INT 5
10940: PUSH
10941: LD_INT 7
10943: PUSH
10944: LD_INT 11
10946: PUSH
10947: LD_INT 12
10949: PUSH
10950: LD_INT 15
10952: PUSH
10953: LD_INT 16
10955: PUSH
10956: LD_INT 20
10958: PUSH
10959: LD_INT 21
10961: PUSH
10962: LD_INT 22
10964: PUSH
10965: LD_INT 23
10967: PUSH
10968: LD_INT 25
10970: PUSH
10971: LD_INT 26
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 101
10992: PUSH
10993: LD_INT 102
10995: PUSH
10996: LD_INT 103
10998: PUSH
10999: LD_INT 105
11001: PUSH
11002: LD_INT 106
11004: PUSH
11005: LD_INT 108
11007: PUSH
11008: LD_INT 112
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: ST_TO_ADDR
11024: GO 13283
11026: LD_INT 8
11028: DOUBLE
11029: EQUAL
11030: IFTRUE 11034
11032: GO 11162
11034: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11035: LD_ADDR_VAR 0 1
11039: PUSH
11040: LD_INT 2
11042: PUSH
11043: LD_INT 4
11045: PUSH
11046: LD_INT 5
11048: PUSH
11049: LD_INT 6
11051: PUSH
11052: LD_INT 7
11054: PUSH
11055: LD_INT 8
11057: PUSH
11058: LD_INT 11
11060: PUSH
11061: LD_INT 12
11063: PUSH
11064: LD_INT 15
11066: PUSH
11067: LD_INT 16
11069: PUSH
11070: LD_INT 20
11072: PUSH
11073: LD_INT 21
11075: PUSH
11076: LD_INT 22
11078: PUSH
11079: LD_INT 23
11081: PUSH
11082: LD_INT 25
11084: PUSH
11085: LD_INT 26
11087: PUSH
11088: LD_INT 30
11090: PUSH
11091: LD_INT 31
11093: PUSH
11094: LD_INT 32
11096: PUSH
11097: LD_INT 36
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 101
11124: PUSH
11125: LD_INT 102
11127: PUSH
11128: LD_INT 103
11130: PUSH
11131: LD_INT 105
11133: PUSH
11134: LD_INT 106
11136: PUSH
11137: LD_INT 108
11139: PUSH
11140: LD_INT 109
11142: PUSH
11143: LD_INT 112
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: ST_TO_ADDR
11160: GO 13283
11162: LD_INT 9
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11306
11170: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 4
11181: PUSH
11182: LD_INT 5
11184: PUSH
11185: LD_INT 6
11187: PUSH
11188: LD_INT 7
11190: PUSH
11191: LD_INT 8
11193: PUSH
11194: LD_INT 11
11196: PUSH
11197: LD_INT 12
11199: PUSH
11200: LD_INT 15
11202: PUSH
11203: LD_INT 16
11205: PUSH
11206: LD_INT 20
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 22
11214: PUSH
11215: LD_INT 23
11217: PUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 26
11223: PUSH
11224: LD_INT 28
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 31
11232: PUSH
11233: LD_INT 32
11235: PUSH
11236: LD_INT 36
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 101
11264: PUSH
11265: LD_INT 102
11267: PUSH
11268: LD_INT 103
11270: PUSH
11271: LD_INT 105
11273: PUSH
11274: LD_INT 106
11276: PUSH
11277: LD_INT 108
11279: PUSH
11280: LD_INT 109
11282: PUSH
11283: LD_INT 112
11285: PUSH
11286: LD_INT 114
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: ST_TO_ADDR
11304: GO 13283
11306: LD_INT 10
11308: DOUBLE
11309: EQUAL
11310: IFTRUE 11314
11312: GO 11498
11314: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11315: LD_ADDR_VAR 0 1
11319: PUSH
11320: LD_INT 2
11322: PUSH
11323: LD_INT 4
11325: PUSH
11326: LD_INT 5
11328: PUSH
11329: LD_INT 6
11331: PUSH
11332: LD_INT 7
11334: PUSH
11335: LD_INT 8
11337: PUSH
11338: LD_INT 9
11340: PUSH
11341: LD_INT 10
11343: PUSH
11344: LD_INT 11
11346: PUSH
11347: LD_INT 12
11349: PUSH
11350: LD_INT 13
11352: PUSH
11353: LD_INT 14
11355: PUSH
11356: LD_INT 15
11358: PUSH
11359: LD_INT 16
11361: PUSH
11362: LD_INT 17
11364: PUSH
11365: LD_INT 18
11367: PUSH
11368: LD_INT 19
11370: PUSH
11371: LD_INT 20
11373: PUSH
11374: LD_INT 21
11376: PUSH
11377: LD_INT 22
11379: PUSH
11380: LD_INT 23
11382: PUSH
11383: LD_INT 24
11385: PUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 26
11391: PUSH
11392: LD_INT 28
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 31
11400: PUSH
11401: LD_INT 32
11403: PUSH
11404: LD_INT 36
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 101
11440: PUSH
11441: LD_INT 102
11443: PUSH
11444: LD_INT 103
11446: PUSH
11447: LD_INT 104
11449: PUSH
11450: LD_INT 105
11452: PUSH
11453: LD_INT 106
11455: PUSH
11456: LD_INT 107
11458: PUSH
11459: LD_INT 108
11461: PUSH
11462: LD_INT 109
11464: PUSH
11465: LD_INT 110
11467: PUSH
11468: LD_INT 111
11470: PUSH
11471: LD_INT 112
11473: PUSH
11474: LD_INT 114
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: ST_TO_ADDR
11496: GO 13283
11498: LD_INT 11
11500: DOUBLE
11501: EQUAL
11502: IFTRUE 11506
11504: GO 11698
11506: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11507: LD_ADDR_VAR 0 1
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: LD_INT 3
11517: PUSH
11518: LD_INT 4
11520: PUSH
11521: LD_INT 5
11523: PUSH
11524: LD_INT 6
11526: PUSH
11527: LD_INT 7
11529: PUSH
11530: LD_INT 8
11532: PUSH
11533: LD_INT 9
11535: PUSH
11536: LD_INT 10
11538: PUSH
11539: LD_INT 11
11541: PUSH
11542: LD_INT 12
11544: PUSH
11545: LD_INT 13
11547: PUSH
11548: LD_INT 14
11550: PUSH
11551: LD_INT 15
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: LD_INT 17
11559: PUSH
11560: LD_INT 18
11562: PUSH
11563: LD_INT 19
11565: PUSH
11566: LD_INT 20
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 22
11574: PUSH
11575: LD_INT 23
11577: PUSH
11578: LD_INT 24
11580: PUSH
11581: LD_INT 25
11583: PUSH
11584: LD_INT 26
11586: PUSH
11587: LD_INT 28
11589: PUSH
11590: LD_INT 30
11592: PUSH
11593: LD_INT 31
11595: PUSH
11596: LD_INT 32
11598: PUSH
11599: LD_INT 34
11601: PUSH
11602: LD_INT 36
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 101
11640: PUSH
11641: LD_INT 102
11643: PUSH
11644: LD_INT 103
11646: PUSH
11647: LD_INT 104
11649: PUSH
11650: LD_INT 105
11652: PUSH
11653: LD_INT 106
11655: PUSH
11656: LD_INT 107
11658: PUSH
11659: LD_INT 108
11661: PUSH
11662: LD_INT 109
11664: PUSH
11665: LD_INT 110
11667: PUSH
11668: LD_INT 111
11670: PUSH
11671: LD_INT 112
11673: PUSH
11674: LD_INT 114
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: ST_TO_ADDR
11696: GO 13283
11698: LD_INT 12
11700: DOUBLE
11701: EQUAL
11702: IFTRUE 11706
11704: GO 11914
11706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11707: LD_ADDR_VAR 0 1
11711: PUSH
11712: LD_INT 1
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: LD_INT 4
11723: PUSH
11724: LD_INT 5
11726: PUSH
11727: LD_INT 6
11729: PUSH
11730: LD_INT 7
11732: PUSH
11733: LD_INT 8
11735: PUSH
11736: LD_INT 9
11738: PUSH
11739: LD_INT 10
11741: PUSH
11742: LD_INT 11
11744: PUSH
11745: LD_INT 12
11747: PUSH
11748: LD_INT 13
11750: PUSH
11751: LD_INT 14
11753: PUSH
11754: LD_INT 15
11756: PUSH
11757: LD_INT 16
11759: PUSH
11760: LD_INT 17
11762: PUSH
11763: LD_INT 18
11765: PUSH
11766: LD_INT 19
11768: PUSH
11769: LD_INT 20
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 22
11777: PUSH
11778: LD_INT 23
11780: PUSH
11781: LD_INT 24
11783: PUSH
11784: LD_INT 25
11786: PUSH
11787: LD_INT 26
11789: PUSH
11790: LD_INT 27
11792: PUSH
11793: LD_INT 28
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_INT 31
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: LD_INT 33
11807: PUSH
11808: LD_INT 34
11810: PUSH
11811: LD_INT 36
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 101
11852: PUSH
11853: LD_INT 102
11855: PUSH
11856: LD_INT 103
11858: PUSH
11859: LD_INT 104
11861: PUSH
11862: LD_INT 105
11864: PUSH
11865: LD_INT 106
11867: PUSH
11868: LD_INT 107
11870: PUSH
11871: LD_INT 108
11873: PUSH
11874: LD_INT 109
11876: PUSH
11877: LD_INT 110
11879: PUSH
11880: LD_INT 111
11882: PUSH
11883: LD_INT 112
11885: PUSH
11886: LD_INT 113
11888: PUSH
11889: LD_INT 114
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: ST_TO_ADDR
11912: GO 13283
11914: LD_INT 13
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 12118
11922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11923: LD_ADDR_VAR 0 1
11927: PUSH
11928: LD_INT 1
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: LD_INT 4
11939: PUSH
11940: LD_INT 5
11942: PUSH
11943: LD_INT 8
11945: PUSH
11946: LD_INT 9
11948: PUSH
11949: LD_INT 10
11951: PUSH
11952: LD_INT 11
11954: PUSH
11955: LD_INT 12
11957: PUSH
11958: LD_INT 14
11960: PUSH
11961: LD_INT 15
11963: PUSH
11964: LD_INT 16
11966: PUSH
11967: LD_INT 17
11969: PUSH
11970: LD_INT 18
11972: PUSH
11973: LD_INT 19
11975: PUSH
11976: LD_INT 20
11978: PUSH
11979: LD_INT 21
11981: PUSH
11982: LD_INT 22
11984: PUSH
11985: LD_INT 23
11987: PUSH
11988: LD_INT 24
11990: PUSH
11991: LD_INT 25
11993: PUSH
11994: LD_INT 26
11996: PUSH
11997: LD_INT 27
11999: PUSH
12000: LD_INT 28
12002: PUSH
12003: LD_INT 30
12005: PUSH
12006: LD_INT 31
12008: PUSH
12009: LD_INT 32
12011: PUSH
12012: LD_INT 33
12014: PUSH
12015: LD_INT 34
12017: PUSH
12018: LD_INT 36
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 101
12056: PUSH
12057: LD_INT 102
12059: PUSH
12060: LD_INT 103
12062: PUSH
12063: LD_INT 104
12065: PUSH
12066: LD_INT 105
12068: PUSH
12069: LD_INT 106
12071: PUSH
12072: LD_INT 107
12074: PUSH
12075: LD_INT 108
12077: PUSH
12078: LD_INT 109
12080: PUSH
12081: LD_INT 110
12083: PUSH
12084: LD_INT 111
12086: PUSH
12087: LD_INT 112
12089: PUSH
12090: LD_INT 113
12092: PUSH
12093: LD_INT 114
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: ST_TO_ADDR
12116: GO 13283
12118: LD_INT 14
12120: DOUBLE
12121: EQUAL
12122: IFTRUE 12126
12124: GO 12338
12126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12127: LD_ADDR_VAR 0 1
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: LD_INT 3
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: LD_INT 5
12146: PUSH
12147: LD_INT 6
12149: PUSH
12150: LD_INT 7
12152: PUSH
12153: LD_INT 8
12155: PUSH
12156: LD_INT 9
12158: PUSH
12159: LD_INT 10
12161: PUSH
12162: LD_INT 11
12164: PUSH
12165: LD_INT 12
12167: PUSH
12168: LD_INT 13
12170: PUSH
12171: LD_INT 14
12173: PUSH
12174: LD_INT 15
12176: PUSH
12177: LD_INT 16
12179: PUSH
12180: LD_INT 17
12182: PUSH
12183: LD_INT 18
12185: PUSH
12186: LD_INT 19
12188: PUSH
12189: LD_INT 20
12191: PUSH
12192: LD_INT 21
12194: PUSH
12195: LD_INT 22
12197: PUSH
12198: LD_INT 23
12200: PUSH
12201: LD_INT 24
12203: PUSH
12204: LD_INT 25
12206: PUSH
12207: LD_INT 26
12209: PUSH
12210: LD_INT 27
12212: PUSH
12213: LD_INT 28
12215: PUSH
12216: LD_INT 29
12218: PUSH
12219: LD_INT 30
12221: PUSH
12222: LD_INT 31
12224: PUSH
12225: LD_INT 32
12227: PUSH
12228: LD_INT 33
12230: PUSH
12231: LD_INT 34
12233: PUSH
12234: LD_INT 36
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 101
12276: PUSH
12277: LD_INT 102
12279: PUSH
12280: LD_INT 103
12282: PUSH
12283: LD_INT 104
12285: PUSH
12286: LD_INT 105
12288: PUSH
12289: LD_INT 106
12291: PUSH
12292: LD_INT 107
12294: PUSH
12295: LD_INT 108
12297: PUSH
12298: LD_INT 109
12300: PUSH
12301: LD_INT 110
12303: PUSH
12304: LD_INT 111
12306: PUSH
12307: LD_INT 112
12309: PUSH
12310: LD_INT 113
12312: PUSH
12313: LD_INT 114
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: ST_TO_ADDR
12336: GO 13283
12338: LD_INT 15
12340: DOUBLE
12341: EQUAL
12342: IFTRUE 12346
12344: GO 12558
12346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12347: LD_ADDR_VAR 0 1
12351: PUSH
12352: LD_INT 1
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 3
12360: PUSH
12361: LD_INT 4
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: LD_INT 6
12369: PUSH
12370: LD_INT 7
12372: PUSH
12373: LD_INT 8
12375: PUSH
12376: LD_INT 9
12378: PUSH
12379: LD_INT 10
12381: PUSH
12382: LD_INT 11
12384: PUSH
12385: LD_INT 12
12387: PUSH
12388: LD_INT 13
12390: PUSH
12391: LD_INT 14
12393: PUSH
12394: LD_INT 15
12396: PUSH
12397: LD_INT 16
12399: PUSH
12400: LD_INT 17
12402: PUSH
12403: LD_INT 18
12405: PUSH
12406: LD_INT 19
12408: PUSH
12409: LD_INT 20
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 22
12417: PUSH
12418: LD_INT 23
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 25
12426: PUSH
12427: LD_INT 26
12429: PUSH
12430: LD_INT 27
12432: PUSH
12433: LD_INT 28
12435: PUSH
12436: LD_INT 29
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: LD_INT 31
12444: PUSH
12445: LD_INT 32
12447: PUSH
12448: LD_INT 33
12450: PUSH
12451: LD_INT 34
12453: PUSH
12454: LD_INT 36
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 101
12496: PUSH
12497: LD_INT 102
12499: PUSH
12500: LD_INT 103
12502: PUSH
12503: LD_INT 104
12505: PUSH
12506: LD_INT 105
12508: PUSH
12509: LD_INT 106
12511: PUSH
12512: LD_INT 107
12514: PUSH
12515: LD_INT 108
12517: PUSH
12518: LD_INT 109
12520: PUSH
12521: LD_INT 110
12523: PUSH
12524: LD_INT 111
12526: PUSH
12527: LD_INT 112
12529: PUSH
12530: LD_INT 113
12532: PUSH
12533: LD_INT 114
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: ST_TO_ADDR
12556: GO 13283
12558: LD_INT 16
12560: DOUBLE
12561: EQUAL
12562: IFTRUE 12566
12564: GO 12690
12566: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12567: LD_ADDR_VAR 0 1
12571: PUSH
12572: LD_INT 2
12574: PUSH
12575: LD_INT 4
12577: PUSH
12578: LD_INT 5
12580: PUSH
12581: LD_INT 7
12583: PUSH
12584: LD_INT 11
12586: PUSH
12587: LD_INT 12
12589: PUSH
12590: LD_INT 15
12592: PUSH
12593: LD_INT 16
12595: PUSH
12596: LD_INT 20
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 22
12604: PUSH
12605: LD_INT 23
12607: PUSH
12608: LD_INT 25
12610: PUSH
12611: LD_INT 26
12613: PUSH
12614: LD_INT 30
12616: PUSH
12617: LD_INT 31
12619: PUSH
12620: LD_INT 32
12622: PUSH
12623: LD_INT 33
12625: PUSH
12626: LD_INT 34
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 101
12652: PUSH
12653: LD_INT 102
12655: PUSH
12656: LD_INT 103
12658: PUSH
12659: LD_INT 106
12661: PUSH
12662: LD_INT 108
12664: PUSH
12665: LD_INT 112
12667: PUSH
12668: LD_INT 113
12670: PUSH
12671: LD_INT 114
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: ST_TO_ADDR
12688: GO 13283
12690: LD_INT 17
12692: DOUBLE
12693: EQUAL
12694: IFTRUE 12698
12696: GO 12910
12698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12699: LD_ADDR_VAR 0 1
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: LD_INT 3
12712: PUSH
12713: LD_INT 4
12715: PUSH
12716: LD_INT 5
12718: PUSH
12719: LD_INT 6
12721: PUSH
12722: LD_INT 7
12724: PUSH
12725: LD_INT 8
12727: PUSH
12728: LD_INT 9
12730: PUSH
12731: LD_INT 10
12733: PUSH
12734: LD_INT 11
12736: PUSH
12737: LD_INT 12
12739: PUSH
12740: LD_INT 13
12742: PUSH
12743: LD_INT 14
12745: PUSH
12746: LD_INT 15
12748: PUSH
12749: LD_INT 16
12751: PUSH
12752: LD_INT 17
12754: PUSH
12755: LD_INT 18
12757: PUSH
12758: LD_INT 19
12760: PUSH
12761: LD_INT 20
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 23
12772: PUSH
12773: LD_INT 24
12775: PUSH
12776: LD_INT 25
12778: PUSH
12779: LD_INT 26
12781: PUSH
12782: LD_INT 27
12784: PUSH
12785: LD_INT 28
12787: PUSH
12788: LD_INT 29
12790: PUSH
12791: LD_INT 30
12793: PUSH
12794: LD_INT 31
12796: PUSH
12797: LD_INT 32
12799: PUSH
12800: LD_INT 33
12802: PUSH
12803: LD_INT 34
12805: PUSH
12806: LD_INT 36
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 101
12848: PUSH
12849: LD_INT 102
12851: PUSH
12852: LD_INT 103
12854: PUSH
12855: LD_INT 104
12857: PUSH
12858: LD_INT 105
12860: PUSH
12861: LD_INT 106
12863: PUSH
12864: LD_INT 107
12866: PUSH
12867: LD_INT 108
12869: PUSH
12870: LD_INT 109
12872: PUSH
12873: LD_INT 110
12875: PUSH
12876: LD_INT 111
12878: PUSH
12879: LD_INT 112
12881: PUSH
12882: LD_INT 113
12884: PUSH
12885: LD_INT 114
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: ST_TO_ADDR
12908: GO 13283
12910: LD_INT 18
12912: DOUBLE
12913: EQUAL
12914: IFTRUE 12918
12916: GO 13054
12918: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12919: LD_ADDR_VAR 0 1
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: LD_INT 4
12929: PUSH
12930: LD_INT 5
12932: PUSH
12933: LD_INT 7
12935: PUSH
12936: LD_INT 11
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 15
12944: PUSH
12945: LD_INT 16
12947: PUSH
12948: LD_INT 20
12950: PUSH
12951: LD_INT 21
12953: PUSH
12954: LD_INT 22
12956: PUSH
12957: LD_INT 23
12959: PUSH
12960: LD_INT 25
12962: PUSH
12963: LD_INT 26
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 31
12971: PUSH
12972: LD_INT 32
12974: PUSH
12975: LD_INT 33
12977: PUSH
12978: LD_INT 34
12980: PUSH
12981: LD_INT 35
12983: PUSH
12984: LD_INT 36
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 101
13012: PUSH
13013: LD_INT 102
13015: PUSH
13016: LD_INT 103
13018: PUSH
13019: LD_INT 106
13021: PUSH
13022: LD_INT 108
13024: PUSH
13025: LD_INT 112
13027: PUSH
13028: LD_INT 113
13030: PUSH
13031: LD_INT 114
13033: PUSH
13034: LD_INT 115
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: ST_TO_ADDR
13052: GO 13283
13054: LD_INT 19
13056: DOUBLE
13057: EQUAL
13058: IFTRUE 13062
13060: GO 13282
13062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13063: LD_ADDR_VAR 0 1
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: LD_INT 2
13073: PUSH
13074: LD_INT 3
13076: PUSH
13077: LD_INT 4
13079: PUSH
13080: LD_INT 5
13082: PUSH
13083: LD_INT 6
13085: PUSH
13086: LD_INT 7
13088: PUSH
13089: LD_INT 8
13091: PUSH
13092: LD_INT 9
13094: PUSH
13095: LD_INT 10
13097: PUSH
13098: LD_INT 11
13100: PUSH
13101: LD_INT 12
13103: PUSH
13104: LD_INT 13
13106: PUSH
13107: LD_INT 14
13109: PUSH
13110: LD_INT 15
13112: PUSH
13113: LD_INT 16
13115: PUSH
13116: LD_INT 17
13118: PUSH
13119: LD_INT 18
13121: PUSH
13122: LD_INT 19
13124: PUSH
13125: LD_INT 20
13127: PUSH
13128: LD_INT 21
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_INT 23
13136: PUSH
13137: LD_INT 24
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 26
13145: PUSH
13146: LD_INT 27
13148: PUSH
13149: LD_INT 28
13151: PUSH
13152: LD_INT 29
13154: PUSH
13155: LD_INT 30
13157: PUSH
13158: LD_INT 31
13160: PUSH
13161: LD_INT 32
13163: PUSH
13164: LD_INT 33
13166: PUSH
13167: LD_INT 34
13169: PUSH
13170: LD_INT 35
13172: PUSH
13173: LD_INT 36
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 101
13216: PUSH
13217: LD_INT 102
13219: PUSH
13220: LD_INT 103
13222: PUSH
13223: LD_INT 104
13225: PUSH
13226: LD_INT 105
13228: PUSH
13229: LD_INT 106
13231: PUSH
13232: LD_INT 107
13234: PUSH
13235: LD_INT 108
13237: PUSH
13238: LD_INT 109
13240: PUSH
13241: LD_INT 110
13243: PUSH
13244: LD_INT 111
13246: PUSH
13247: LD_INT 112
13249: PUSH
13250: LD_INT 113
13252: PUSH
13253: LD_INT 114
13255: PUSH
13256: LD_INT 115
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: ST_TO_ADDR
13280: GO 13283
13282: POP
// end else
13283: GO 13502
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13285: LD_ADDR_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: LD_INT 3
13298: PUSH
13299: LD_INT 4
13301: PUSH
13302: LD_INT 5
13304: PUSH
13305: LD_INT 6
13307: PUSH
13308: LD_INT 7
13310: PUSH
13311: LD_INT 8
13313: PUSH
13314: LD_INT 9
13316: PUSH
13317: LD_INT 10
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 13
13328: PUSH
13329: LD_INT 14
13331: PUSH
13332: LD_INT 15
13334: PUSH
13335: LD_INT 16
13337: PUSH
13338: LD_INT 17
13340: PUSH
13341: LD_INT 18
13343: PUSH
13344: LD_INT 19
13346: PUSH
13347: LD_INT 20
13349: PUSH
13350: LD_INT 21
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_INT 23
13358: PUSH
13359: LD_INT 24
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 26
13367: PUSH
13368: LD_INT 27
13370: PUSH
13371: LD_INT 28
13373: PUSH
13374: LD_INT 29
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 31
13382: PUSH
13383: LD_INT 32
13385: PUSH
13386: LD_INT 33
13388: PUSH
13389: LD_INT 34
13391: PUSH
13392: LD_INT 35
13394: PUSH
13395: LD_INT 36
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 101
13438: PUSH
13439: LD_INT 102
13441: PUSH
13442: LD_INT 103
13444: PUSH
13445: LD_INT 104
13447: PUSH
13448: LD_INT 105
13450: PUSH
13451: LD_INT 106
13453: PUSH
13454: LD_INT 107
13456: PUSH
13457: LD_INT 108
13459: PUSH
13460: LD_INT 109
13462: PUSH
13463: LD_INT 110
13465: PUSH
13466: LD_INT 111
13468: PUSH
13469: LD_INT 112
13471: PUSH
13472: LD_INT 113
13474: PUSH
13475: LD_INT 114
13477: PUSH
13478: LD_INT 115
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: ST_TO_ADDR
// if result then
13502: LD_VAR 0 1
13506: IFFALSE 13795
// begin normal :=  ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_STRING 
13515: ST_TO_ADDR
// hardcore :=  ;
13516: LD_ADDR_VAR 0 4
13520: PUSH
13521: LD_STRING 
13523: ST_TO_ADDR
// for i = 1 to normalCounter do
13524: LD_ADDR_VAR 0 5
13528: PUSH
13529: DOUBLE
13530: LD_INT 1
13532: DEC
13533: ST_TO_ADDR
13534: LD_EXP 71
13538: PUSH
13539: FOR_TO
13540: IFFALSE 13641
// begin tmp := 0 ;
13542: LD_ADDR_VAR 0 2
13546: PUSH
13547: LD_STRING 0
13549: ST_TO_ADDR
// if result [ 1 ] then
13550: LD_VAR 0 1
13554: PUSH
13555: LD_INT 1
13557: ARRAY
13558: IFFALSE 13623
// if result [ 1 ] [ 1 ] = i then
13560: LD_VAR 0 1
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PUSH
13573: LD_VAR 0 5
13577: EQUAL
13578: IFFALSE 13623
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13580: LD_ADDR_VAR 0 1
13584: PUSH
13585: LD_VAR 0 1
13589: PPUSH
13590: LD_INT 1
13592: PPUSH
13593: LD_VAR 0 1
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 3
13609: PPUSH
13610: CALL_OW 1
13614: ST_TO_ADDR
// tmp := 1 ;
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_STRING 1
13622: ST_TO_ADDR
// end ; normal := normal & tmp ;
13623: LD_ADDR_VAR 0 3
13627: PUSH
13628: LD_VAR 0 3
13632: PUSH
13633: LD_VAR 0 2
13637: STR
13638: ST_TO_ADDR
// end ;
13639: GO 13539
13641: POP
13642: POP
// for i = 1 to hardcoreCounter do
13643: LD_ADDR_VAR 0 5
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_EXP 72
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13764
// begin tmp := 0 ;
13661: LD_ADDR_VAR 0 2
13665: PUSH
13666: LD_STRING 0
13668: ST_TO_ADDR
// if result [ 2 ] then
13669: LD_VAR 0 1
13673: PUSH
13674: LD_INT 2
13676: ARRAY
13677: IFFALSE 13746
// if result [ 2 ] [ 1 ] = 100 + i then
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 2
13686: ARRAY
13687: PUSH
13688: LD_INT 1
13690: ARRAY
13691: PUSH
13692: LD_INT 100
13694: PUSH
13695: LD_VAR 0 5
13699: PLUS
13700: EQUAL
13701: IFFALSE 13746
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13703: LD_ADDR_VAR 0 1
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_INT 2
13715: PPUSH
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 2
13723: ARRAY
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: CALL_OW 3
13732: PPUSH
13733: CALL_OW 1
13737: ST_TO_ADDR
// tmp := 1 ;
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: LD_STRING 1
13745: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13746: LD_ADDR_VAR 0 4
13750: PUSH
13751: LD_VAR 0 4
13755: PUSH
13756: LD_VAR 0 2
13760: STR
13761: ST_TO_ADDR
// end ;
13762: GO 13658
13764: POP
13765: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13766: LD_STRING getStreamItemsFromMission("
13768: PUSH
13769: LD_VAR 0 3
13773: STR
13774: PUSH
13775: LD_STRING ","
13777: STR
13778: PUSH
13779: LD_VAR 0 4
13783: STR
13784: PUSH
13785: LD_STRING ")
13787: STR
13788: PPUSH
13789: CALL_OW 559
// end else
13793: GO 13802
// ToLua ( getStreamItemsFromMission("","") ) ;
13795: LD_STRING getStreamItemsFromMission("","")
13797: PPUSH
13798: CALL_OW 559
// end ;
13802: LD_VAR 0 1
13806: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13807: LD_EXP 70
13811: PUSH
13812: LD_EXP 75
13816: AND
13817: IFFALSE 13941
13819: GO 13821
13821: DISABLE
13822: LD_INT 0
13824: PPUSH
13825: PPUSH
// begin enable ;
13826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_INT 22
13834: PUSH
13835: LD_OWVAR 2
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 2
13846: PUSH
13847: LD_INT 34
13849: PUSH
13850: LD_INT 7
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 34
13859: PUSH
13860: LD_INT 45
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 34
13869: PUSH
13870: LD_INT 28
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 34
13879: PUSH
13880: LD_INT 47
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 69
13902: ST_TO_ADDR
// if not tmp then
13903: LD_VAR 0 2
13907: NOT
13908: IFFALSE 13912
// exit ;
13910: GO 13941
// for i in tmp do
13912: LD_ADDR_VAR 0 1
13916: PUSH
13917: LD_VAR 0 2
13921: PUSH
13922: FOR_IN
13923: IFFALSE 13939
// begin SetLives ( i , 0 ) ;
13925: LD_VAR 0 1
13929: PPUSH
13930: LD_INT 0
13932: PPUSH
13933: CALL_OW 234
// end ;
13937: GO 13922
13939: POP
13940: POP
// end ;
13941: PPOPN 2
13943: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13944: LD_EXP 70
13948: PUSH
13949: LD_EXP 76
13953: AND
13954: IFFALSE 14038
13956: GO 13958
13958: DISABLE
13959: LD_INT 0
13961: PPUSH
13962: PPUSH
// begin enable ;
13963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_INT 22
13971: PUSH
13972: LD_OWVAR 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 32
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 69
13999: ST_TO_ADDR
// if not tmp then
14000: LD_VAR 0 2
14004: NOT
14005: IFFALSE 14009
// exit ;
14007: GO 14038
// for i in tmp do
14009: LD_ADDR_VAR 0 1
14013: PUSH
14014: LD_VAR 0 2
14018: PUSH
14019: FOR_IN
14020: IFFALSE 14036
// begin SetLives ( i , 0 ) ;
14022: LD_VAR 0 1
14026: PPUSH
14027: LD_INT 0
14029: PPUSH
14030: CALL_OW 234
// end ;
14034: GO 14019
14036: POP
14037: POP
// end ;
14038: PPOPN 2
14040: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14041: LD_EXP 70
14045: PUSH
14046: LD_EXP 73
14050: AND
14051: IFFALSE 14144
14053: GO 14055
14055: DISABLE
14056: LD_INT 0
14058: PPUSH
// begin enable ;
14059: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14060: LD_ADDR_VAR 0 1
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_OWVAR 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: LD_INT 25
14082: PUSH
14083: LD_INT 5
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 9
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 25
14102: PUSH
14103: LD_INT 8
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: FOR_IN
14126: IFFALSE 14142
// begin SetClass ( i , 1 ) ;
14128: LD_VAR 0 1
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 336
// end ;
14140: GO 14125
14142: POP
14143: POP
// end ;
14144: PPOPN 1
14146: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14147: LD_EXP 70
14151: PUSH
14152: LD_EXP 74
14156: AND
14157: PUSH
14158: LD_OWVAR 65
14162: PUSH
14163: LD_INT 7
14165: LESS
14166: AND
14167: IFFALSE 14181
14169: GO 14171
14171: DISABLE
// begin enable ;
14172: ENABLE
// game_speed := 7 ;
14173: LD_ADDR_OWVAR 65
14177: PUSH
14178: LD_INT 7
14180: ST_TO_ADDR
// end ;
14181: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14182: LD_EXP 70
14186: PUSH
14187: LD_EXP 77
14191: AND
14192: IFFALSE 14394
14194: GO 14196
14196: DISABLE
14197: LD_INT 0
14199: PPUSH
14200: PPUSH
14201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14202: LD_ADDR_VAR 0 3
14206: PUSH
14207: LD_INT 81
14209: PUSH
14210: LD_OWVAR 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 21
14221: PUSH
14222: LD_INT 1
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 69
14237: ST_TO_ADDR
// if not tmp then
14238: LD_VAR 0 3
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14394
// if tmp > 5 then
14247: LD_VAR 0 3
14251: PUSH
14252: LD_INT 5
14254: GREATER
14255: IFFALSE 14267
// k := 5 else
14257: LD_ADDR_VAR 0 2
14261: PUSH
14262: LD_INT 5
14264: ST_TO_ADDR
14265: GO 14277
// k := tmp ;
14267: LD_ADDR_VAR 0 2
14271: PUSH
14272: LD_VAR 0 3
14276: ST_TO_ADDR
// for i := 1 to k do
14277: LD_ADDR_VAR 0 1
14281: PUSH
14282: DOUBLE
14283: LD_INT 1
14285: DEC
14286: ST_TO_ADDR
14287: LD_VAR 0 2
14291: PUSH
14292: FOR_TO
14293: IFFALSE 14392
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14295: LD_VAR 0 3
14299: PUSH
14300: LD_VAR 0 1
14304: ARRAY
14305: PPUSH
14306: LD_VAR 0 1
14310: PUSH
14311: LD_INT 4
14313: MOD
14314: PUSH
14315: LD_INT 1
14317: PLUS
14318: PPUSH
14319: CALL_OW 259
14323: PUSH
14324: LD_INT 10
14326: LESS
14327: IFFALSE 14390
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14329: LD_VAR 0 3
14333: PUSH
14334: LD_VAR 0 1
14338: ARRAY
14339: PPUSH
14340: LD_VAR 0 1
14344: PUSH
14345: LD_INT 4
14347: MOD
14348: PUSH
14349: LD_INT 1
14351: PLUS
14352: PPUSH
14353: LD_VAR 0 3
14357: PUSH
14358: LD_VAR 0 1
14362: ARRAY
14363: PPUSH
14364: LD_VAR 0 1
14368: PUSH
14369: LD_INT 4
14371: MOD
14372: PUSH
14373: LD_INT 1
14375: PLUS
14376: PPUSH
14377: CALL_OW 259
14381: PUSH
14382: LD_INT 1
14384: PLUS
14385: PPUSH
14386: CALL_OW 237
14390: GO 14292
14392: POP
14393: POP
// end ;
14394: PPOPN 3
14396: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14397: LD_EXP 70
14401: PUSH
14402: LD_EXP 78
14406: AND
14407: IFFALSE 14427
14409: GO 14411
14411: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14412: LD_INT 4
14414: PPUSH
14415: LD_OWVAR 2
14419: PPUSH
14420: LD_INT 0
14422: PPUSH
14423: CALL_OW 324
14427: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14428: LD_EXP 70
14432: PUSH
14433: LD_EXP 107
14437: AND
14438: IFFALSE 14458
14440: GO 14442
14442: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14443: LD_INT 19
14445: PPUSH
14446: LD_OWVAR 2
14450: PPUSH
14451: LD_INT 0
14453: PPUSH
14454: CALL_OW 324
14458: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14459: LD_EXP 70
14463: PUSH
14464: LD_EXP 79
14468: AND
14469: IFFALSE 14571
14471: GO 14473
14473: DISABLE
14474: LD_INT 0
14476: PPUSH
14477: PPUSH
// begin enable ;
14478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14479: LD_ADDR_VAR 0 2
14483: PUSH
14484: LD_INT 22
14486: PUSH
14487: LD_OWVAR 2
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 2
14498: PUSH
14499: LD_INT 34
14501: PUSH
14502: LD_INT 11
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 34
14511: PUSH
14512: LD_INT 30
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 69
14532: ST_TO_ADDR
// if not tmp then
14533: LD_VAR 0 2
14537: NOT
14538: IFFALSE 14542
// exit ;
14540: GO 14571
// for i in tmp do
14542: LD_ADDR_VAR 0 1
14546: PUSH
14547: LD_VAR 0 2
14551: PUSH
14552: FOR_IN
14553: IFFALSE 14569
// begin SetLives ( i , 0 ) ;
14555: LD_VAR 0 1
14559: PPUSH
14560: LD_INT 0
14562: PPUSH
14563: CALL_OW 234
// end ;
14567: GO 14552
14569: POP
14570: POP
// end ;
14571: PPOPN 2
14573: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14574: LD_EXP 70
14578: PUSH
14579: LD_EXP 80
14583: AND
14584: IFFALSE 14604
14586: GO 14588
14588: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14589: LD_INT 32
14591: PPUSH
14592: LD_OWVAR 2
14596: PPUSH
14597: LD_INT 0
14599: PPUSH
14600: CALL_OW 324
14604: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14605: LD_EXP 70
14609: PUSH
14610: LD_EXP 81
14614: AND
14615: IFFALSE 14796
14617: GO 14619
14619: DISABLE
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14625: LD_ADDR_VAR 0 2
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 33
14644: PUSH
14645: LD_INT 3
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: ST_TO_ADDR
// if not tmp then
14661: LD_VAR 0 2
14665: NOT
14666: IFFALSE 14670
// exit ;
14668: GO 14796
// side := 0 ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 0
14677: ST_TO_ADDR
// for i := 1 to 8 do
14678: LD_ADDR_VAR 0 1
14682: PUSH
14683: DOUBLE
14684: LD_INT 1
14686: DEC
14687: ST_TO_ADDR
14688: LD_INT 8
14690: PUSH
14691: FOR_TO
14692: IFFALSE 14740
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14694: LD_OWVAR 2
14698: PUSH
14699: LD_VAR 0 1
14703: NONEQUAL
14704: PUSH
14705: LD_OWVAR 2
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 81
14719: PUSH
14720: LD_INT 2
14722: EQUAL
14723: AND
14724: IFFALSE 14738
// begin side := i ;
14726: LD_ADDR_VAR 0 3
14730: PUSH
14731: LD_VAR 0 1
14735: ST_TO_ADDR
// break ;
14736: GO 14740
// end ;
14738: GO 14691
14740: POP
14741: POP
// if not side then
14742: LD_VAR 0 3
14746: NOT
14747: IFFALSE 14751
// exit ;
14749: GO 14796
// for i := 1 to tmp do
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: DOUBLE
14757: LD_INT 1
14759: DEC
14760: ST_TO_ADDR
14761: LD_VAR 0 2
14765: PUSH
14766: FOR_TO
14767: IFFALSE 14794
// if Prob ( 60 ) then
14769: LD_INT 60
14771: PPUSH
14772: CALL_OW 13
14776: IFFALSE 14792
// SetSide ( i , side ) ;
14778: LD_VAR 0 1
14782: PPUSH
14783: LD_VAR 0 3
14787: PPUSH
14788: CALL_OW 235
14792: GO 14766
14794: POP
14795: POP
// end ;
14796: PPOPN 3
14798: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14799: LD_EXP 70
14803: PUSH
14804: LD_EXP 83
14808: AND
14809: IFFALSE 14928
14811: GO 14813
14813: DISABLE
14814: LD_INT 0
14816: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14817: LD_ADDR_VAR 0 1
14821: PUSH
14822: LD_INT 22
14824: PUSH
14825: LD_OWVAR 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 1
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: LD_INT 23
14849: PUSH
14850: LD_INT 0
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: PUSH
14871: FOR_IN
14872: IFFALSE 14926
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL_OW 257
14883: PUSH
14884: LD_INT 1
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: LD_INT 4
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: IN
14902: IFFALSE 14924
// SetClass ( un , rand ( 1 , 4 ) ) ;
14904: LD_VAR 0 1
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: LD_INT 4
14914: PPUSH
14915: CALL_OW 12
14919: PPUSH
14920: CALL_OW 336
14924: GO 14871
14926: POP
14927: POP
// end ;
14928: PPOPN 1
14930: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14931: LD_EXP 70
14935: PUSH
14936: LD_EXP 82
14940: AND
14941: IFFALSE 15020
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14949: LD_ADDR_VAR 0 1
14953: PUSH
14954: LD_INT 22
14956: PUSH
14957: LD_OWVAR 2
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: LD_INT 3
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL_OW 69
14984: ST_TO_ADDR
// if not tmp then
14985: LD_VAR 0 1
14989: NOT
14990: IFFALSE 14994
// exit ;
14992: GO 15020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14994: LD_VAR 0 1
14998: PUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 12
15011: ARRAY
15012: PPUSH
15013: LD_INT 100
15015: PPUSH
15016: CALL_OW 234
// end ;
15020: PPOPN 1
15022: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15023: LD_EXP 70
15027: PUSH
15028: LD_EXP 84
15032: AND
15033: IFFALSE 15131
15035: GO 15037
15037: DISABLE
15038: LD_INT 0
15040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15041: LD_ADDR_VAR 0 1
15045: PUSH
15046: LD_INT 22
15048: PUSH
15049: LD_OWVAR 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 21
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if not tmp then
15077: LD_VAR 0 1
15081: NOT
15082: IFFALSE 15086
// exit ;
15084: GO 15131
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15086: LD_VAR 0 1
15090: PUSH
15091: LD_INT 1
15093: PPUSH
15094: LD_VAR 0 1
15098: PPUSH
15099: CALL_OW 12
15103: ARRAY
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: LD_INT 4
15110: PPUSH
15111: CALL_OW 12
15115: PPUSH
15116: LD_INT 3000
15118: PPUSH
15119: LD_INT 9000
15121: PPUSH
15122: CALL_OW 12
15126: PPUSH
15127: CALL_OW 492
// end ;
15131: PPOPN 1
15133: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15134: LD_EXP 70
15138: PUSH
15139: LD_EXP 85
15143: AND
15144: IFFALSE 15164
15146: GO 15148
15148: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15149: LD_INT 1
15151: PPUSH
15152: LD_OWVAR 2
15156: PPUSH
15157: LD_INT 0
15159: PPUSH
15160: CALL_OW 324
15164: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15165: LD_EXP 70
15169: PUSH
15170: LD_EXP 86
15174: AND
15175: IFFALSE 15258
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15184: LD_ADDR_VAR 0 2
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_OWVAR 2
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 3
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PPUSH
15215: CALL_OW 69
15219: ST_TO_ADDR
// if not tmp then
15220: LD_VAR 0 2
15224: NOT
15225: IFFALSE 15229
// exit ;
15227: GO 15258
// for i in tmp do
15229: LD_ADDR_VAR 0 1
15233: PUSH
15234: LD_VAR 0 2
15238: PUSH
15239: FOR_IN
15240: IFFALSE 15256
// SetBLevel ( i , 10 ) ;
15242: LD_VAR 0 1
15246: PPUSH
15247: LD_INT 10
15249: PPUSH
15250: CALL_OW 241
15254: GO 15239
15256: POP
15257: POP
// end ;
15258: PPOPN 2
15260: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15261: LD_EXP 70
15265: PUSH
15266: LD_EXP 87
15270: AND
15271: IFFALSE 15382
15273: GO 15275
15275: DISABLE
15276: LD_INT 0
15278: PPUSH
15279: PPUSH
15280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 22
15288: PUSH
15289: LD_OWVAR 2
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PPUSH
15312: CALL_OW 69
15316: ST_TO_ADDR
// if not tmp then
15317: LD_VAR 0 3
15321: NOT
15322: IFFALSE 15326
// exit ;
15324: GO 15382
// un := tmp [ rand ( 1 , tmp ) ] ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_VAR 0 3
15335: PUSH
15336: LD_INT 1
15338: PPUSH
15339: LD_VAR 0 3
15343: PPUSH
15344: CALL_OW 12
15348: ARRAY
15349: ST_TO_ADDR
// if Crawls ( un ) then
15350: LD_VAR 0 2
15354: PPUSH
15355: CALL_OW 318
15359: IFFALSE 15370
// ComWalk ( un ) ;
15361: LD_VAR 0 2
15365: PPUSH
15366: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15370: LD_VAR 0 2
15374: PPUSH
15375: LD_INT 5
15377: PPUSH
15378: CALL_OW 336
// end ;
15382: PPOPN 3
15384: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15385: LD_EXP 70
15389: PUSH
15390: LD_EXP 88
15394: AND
15395: PUSH
15396: LD_OWVAR 67
15400: PUSH
15401: LD_INT 3
15403: LESS
15404: AND
15405: IFFALSE 15424
15407: GO 15409
15409: DISABLE
// Difficulty := Difficulty + 1 ;
15410: LD_ADDR_OWVAR 67
15414: PUSH
15415: LD_OWVAR 67
15419: PUSH
15420: LD_INT 1
15422: PLUS
15423: ST_TO_ADDR
15424: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15425: LD_EXP 70
15429: PUSH
15430: LD_EXP 89
15434: AND
15435: IFFALSE 15538
15437: GO 15439
15439: DISABLE
15440: LD_INT 0
15442: PPUSH
// begin for i := 1 to 5 do
15443: LD_ADDR_VAR 0 1
15447: PUSH
15448: DOUBLE
15449: LD_INT 1
15451: DEC
15452: ST_TO_ADDR
15453: LD_INT 5
15455: PUSH
15456: FOR_TO
15457: IFFALSE 15536
// begin uc_nation := nation_nature ;
15459: LD_ADDR_OWVAR 21
15463: PUSH
15464: LD_INT 0
15466: ST_TO_ADDR
// uc_side := 0 ;
15467: LD_ADDR_OWVAR 20
15471: PUSH
15472: LD_INT 0
15474: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15475: LD_ADDR_OWVAR 29
15479: PUSH
15480: LD_INT 12
15482: PUSH
15483: LD_INT 12
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: ST_TO_ADDR
// hc_agressivity := 20 ;
15490: LD_ADDR_OWVAR 35
15494: PUSH
15495: LD_INT 20
15497: ST_TO_ADDR
// hc_class := class_tiger ;
15498: LD_ADDR_OWVAR 28
15502: PUSH
15503: LD_INT 14
15505: ST_TO_ADDR
// hc_gallery :=  ;
15506: LD_ADDR_OWVAR 33
15510: PUSH
15511: LD_STRING 
15513: ST_TO_ADDR
// hc_name :=  ;
15514: LD_ADDR_OWVAR 26
15518: PUSH
15519: LD_STRING 
15521: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15522: CALL_OW 44
15526: PPUSH
15527: LD_INT 0
15529: PPUSH
15530: CALL_OW 51
// end ;
15534: GO 15456
15536: POP
15537: POP
// end ;
15538: PPOPN 1
15540: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15541: LD_EXP 70
15545: PUSH
15546: LD_EXP 90
15550: AND
15551: IFFALSE 15560
15553: GO 15555
15555: DISABLE
// StreamSibBomb ;
15556: CALL 15561 0 0
15560: END
// export function StreamSibBomb ; var i , x , y ; begin
15561: LD_INT 0
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
// result := false ;
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: LD_INT 0
15574: ST_TO_ADDR
// for i := 1 to 16 do
15575: LD_ADDR_VAR 0 2
15579: PUSH
15580: DOUBLE
15581: LD_INT 1
15583: DEC
15584: ST_TO_ADDR
15585: LD_INT 16
15587: PUSH
15588: FOR_TO
15589: IFFALSE 15788
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15591: LD_ADDR_VAR 0 3
15595: PUSH
15596: LD_INT 10
15598: PUSH
15599: LD_INT 20
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 40
15607: PUSH
15608: LD_INT 50
15610: PUSH
15611: LD_INT 60
15613: PUSH
15614: LD_INT 70
15616: PUSH
15617: LD_INT 80
15619: PUSH
15620: LD_INT 90
15622: PUSH
15623: LD_INT 100
15625: PUSH
15626: LD_INT 110
15628: PUSH
15629: LD_INT 120
15631: PUSH
15632: LD_INT 130
15634: PUSH
15635: LD_INT 140
15637: PUSH
15638: LD_INT 150
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 1
15660: PPUSH
15661: LD_INT 15
15663: PPUSH
15664: CALL_OW 12
15668: ARRAY
15669: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15670: LD_ADDR_VAR 0 4
15674: PUSH
15675: LD_INT 10
15677: PUSH
15678: LD_INT 20
15680: PUSH
15681: LD_INT 30
15683: PUSH
15684: LD_INT 40
15686: PUSH
15687: LD_INT 50
15689: PUSH
15690: LD_INT 60
15692: PUSH
15693: LD_INT 70
15695: PUSH
15696: LD_INT 80
15698: PUSH
15699: LD_INT 90
15701: PUSH
15702: LD_INT 100
15704: PUSH
15705: LD_INT 110
15707: PUSH
15708: LD_INT 120
15710: PUSH
15711: LD_INT 130
15713: PUSH
15714: LD_INT 140
15716: PUSH
15717: LD_INT 150
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_INT 15
15742: PPUSH
15743: CALL_OW 12
15747: ARRAY
15748: ST_TO_ADDR
// if ValidHex ( x , y ) then
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_VAR 0 4
15758: PPUSH
15759: CALL_OW 488
15763: IFFALSE 15786
// begin result := [ x , y ] ;
15765: LD_ADDR_VAR 0 1
15769: PUSH
15770: LD_VAR 0 3
15774: PUSH
15775: LD_VAR 0 4
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: ST_TO_ADDR
// break ;
15784: GO 15788
// end ; end ;
15786: GO 15588
15788: POP
15789: POP
// if result then
15790: LD_VAR 0 1
15794: IFFALSE 15854
// begin ToLua ( playSibBomb() ) ;
15796: LD_STRING playSibBomb()
15798: PPUSH
15799: CALL_OW 559
// wait ( 0 0$14 ) ;
15803: LD_INT 490
15805: PPUSH
15806: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15810: LD_VAR 0 1
15814: PUSH
15815: LD_INT 1
15817: ARRAY
15818: PPUSH
15819: LD_VAR 0 1
15823: PUSH
15824: LD_INT 2
15826: ARRAY
15827: PPUSH
15828: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15832: LD_VAR 0 1
15836: PUSH
15837: LD_INT 1
15839: ARRAY
15840: PPUSH
15841: LD_VAR 0 1
15845: PUSH
15846: LD_INT 2
15848: ARRAY
15849: PPUSH
15850: CALL_OW 429
// end ; end ;
15854: LD_VAR 0 1
15858: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15859: LD_EXP 70
15863: PUSH
15864: LD_EXP 92
15868: AND
15869: IFFALSE 15881
15871: GO 15873
15873: DISABLE
// YouLost (  ) ;
15874: LD_STRING 
15876: PPUSH
15877: CALL_OW 104
15881: END
// every 0 0$1 trigger StreamModeActive and sFog do
15882: LD_EXP 70
15886: PUSH
15887: LD_EXP 91
15891: AND
15892: IFFALSE 15906
15894: GO 15896
15896: DISABLE
// FogOff ( your_side ) ;
15897: LD_OWVAR 2
15901: PPUSH
15902: CALL_OW 344
15906: END
// every 0 0$1 trigger StreamModeActive and sSun do
15907: LD_EXP 70
15911: PUSH
15912: LD_EXP 93
15916: AND
15917: IFFALSE 15945
15919: GO 15921
15921: DISABLE
// begin solar_recharge_percent := 0 ;
15922: LD_ADDR_OWVAR 79
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15930: LD_INT 10500
15932: PPUSH
15933: CALL_OW 67
// solar_recharge_percent := 100 ;
15937: LD_ADDR_OWVAR 79
15941: PUSH
15942: LD_INT 100
15944: ST_TO_ADDR
// end ;
15945: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15946: LD_EXP 70
15950: PUSH
15951: LD_EXP 94
15955: AND
15956: IFFALSE 16195
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
// begin tmp := [ ] ;
15966: LD_ADDR_VAR 0 3
15970: PUSH
15971: EMPTY
15972: ST_TO_ADDR
// for i := 1 to 6 do
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: DOUBLE
15979: LD_INT 1
15981: DEC
15982: ST_TO_ADDR
15983: LD_INT 6
15985: PUSH
15986: FOR_TO
15987: IFFALSE 16092
// begin uc_nation := nation_nature ;
15989: LD_ADDR_OWVAR 21
15993: PUSH
15994: LD_INT 0
15996: ST_TO_ADDR
// uc_side := 0 ;
15997: LD_ADDR_OWVAR 20
16001: PUSH
16002: LD_INT 0
16004: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16005: LD_ADDR_OWVAR 29
16009: PUSH
16010: LD_INT 12
16012: PUSH
16013: LD_INT 12
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: ST_TO_ADDR
// hc_agressivity := 20 ;
16020: LD_ADDR_OWVAR 35
16024: PUSH
16025: LD_INT 20
16027: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16028: LD_ADDR_OWVAR 28
16032: PUSH
16033: LD_INT 17
16035: ST_TO_ADDR
// hc_gallery :=  ;
16036: LD_ADDR_OWVAR 33
16040: PUSH
16041: LD_STRING 
16043: ST_TO_ADDR
// hc_name :=  ;
16044: LD_ADDR_OWVAR 26
16048: PUSH
16049: LD_STRING 
16051: ST_TO_ADDR
// un := CreateHuman ;
16052: LD_ADDR_VAR 0 2
16056: PUSH
16057: CALL_OW 44
16061: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16062: LD_VAR 0 2
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 51
// tmp := tmp ^ un ;
16074: LD_ADDR_VAR 0 3
16078: PUSH
16079: LD_VAR 0 3
16083: PUSH
16084: LD_VAR 0 2
16088: ADD
16089: ST_TO_ADDR
// end ;
16090: GO 15986
16092: POP
16093: POP
// repeat wait ( 0 0$1 ) ;
16094: LD_INT 35
16096: PPUSH
16097: CALL_OW 67
// for un in tmp do
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_VAR 0 3
16110: PUSH
16111: FOR_IN
16112: IFFALSE 16186
// begin if IsDead ( un ) then
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL_OW 301
16123: IFFALSE 16143
// begin tmp := tmp diff un ;
16125: LD_ADDR_VAR 0 3
16129: PUSH
16130: LD_VAR 0 3
16134: PUSH
16135: LD_VAR 0 2
16139: DIFF
16140: ST_TO_ADDR
// continue ;
16141: GO 16111
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16143: LD_VAR 0 2
16147: PPUSH
16148: LD_INT 3
16150: PUSH
16151: LD_INT 22
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: PPUSH
16170: LD_VAR 0 2
16174: PPUSH
16175: CALL_OW 74
16179: PPUSH
16180: CALL_OW 115
// end ;
16184: GO 16111
16186: POP
16187: POP
// until not tmp ;
16188: LD_VAR 0 3
16192: NOT
16193: IFFALSE 16094
// end ;
16195: PPOPN 3
16197: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16198: LD_EXP 70
16202: PUSH
16203: LD_EXP 95
16207: AND
16208: IFFALSE 16262
16210: GO 16212
16212: DISABLE
// begin ToLua ( displayTroll(); ) ;
16213: LD_STRING displayTroll();
16215: PPUSH
16216: CALL_OW 559
// wait ( 3 3$00 ) ;
16220: LD_INT 6300
16222: PPUSH
16223: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16227: LD_STRING hideTroll();
16229: PPUSH
16230: CALL_OW 559
// wait ( 1 1$00 ) ;
16234: LD_INT 2100
16236: PPUSH
16237: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16241: LD_STRING displayTroll();
16243: PPUSH
16244: CALL_OW 559
// wait ( 1 1$00 ) ;
16248: LD_INT 2100
16250: PPUSH
16251: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16255: LD_STRING hideTroll();
16257: PPUSH
16258: CALL_OW 559
// end ;
16262: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16263: LD_EXP 70
16267: PUSH
16268: LD_EXP 96
16272: AND
16273: IFFALSE 16336
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
// begin p := 0 ;
16281: LD_ADDR_VAR 0 1
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// repeat game_speed := 1 ;
16289: LD_ADDR_OWVAR 65
16293: PUSH
16294: LD_INT 1
16296: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16297: LD_INT 35
16299: PPUSH
16300: CALL_OW 67
// p := p + 1 ;
16304: LD_ADDR_VAR 0 1
16308: PUSH
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 1
16316: PLUS
16317: ST_TO_ADDR
// until p >= 60 ;
16318: LD_VAR 0 1
16322: PUSH
16323: LD_INT 60
16325: GREATEREQUAL
16326: IFFALSE 16289
// game_speed := 4 ;
16328: LD_ADDR_OWVAR 65
16332: PUSH
16333: LD_INT 4
16335: ST_TO_ADDR
// end ;
16336: PPOPN 1
16338: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16339: LD_EXP 70
16343: PUSH
16344: LD_EXP 97
16348: AND
16349: IFFALSE 16495
16351: GO 16353
16353: DISABLE
16354: LD_INT 0
16356: PPUSH
16357: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16358: LD_ADDR_VAR 0 1
16362: PUSH
16363: LD_INT 22
16365: PUSH
16366: LD_OWVAR 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 2
16377: PUSH
16378: LD_INT 30
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 30
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PPUSH
16407: CALL_OW 69
16411: ST_TO_ADDR
// if not depot then
16412: LD_VAR 0 1
16416: NOT
16417: IFFALSE 16421
// exit ;
16419: GO 16495
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16421: LD_ADDR_VAR 0 2
16425: PUSH
16426: LD_VAR 0 1
16430: PUSH
16431: LD_INT 1
16433: PPUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 12
16443: ARRAY
16444: PPUSH
16445: CALL_OW 274
16449: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16450: LD_VAR 0 2
16454: PPUSH
16455: LD_INT 1
16457: PPUSH
16458: LD_INT 0
16460: PPUSH
16461: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16465: LD_VAR 0 2
16469: PPUSH
16470: LD_INT 2
16472: PPUSH
16473: LD_INT 0
16475: PPUSH
16476: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: LD_INT 0
16490: PPUSH
16491: CALL_OW 277
// end ;
16495: PPOPN 2
16497: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16498: LD_EXP 70
16502: PUSH
16503: LD_EXP 98
16507: AND
16508: IFFALSE 16605
16510: GO 16512
16512: DISABLE
16513: LD_INT 0
16515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16516: LD_ADDR_VAR 0 1
16520: PUSH
16521: LD_INT 22
16523: PUSH
16524: LD_OWVAR 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 21
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: LD_INT 23
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: PPUSH
16565: CALL_OW 69
16569: ST_TO_ADDR
// if not tmp then
16570: LD_VAR 0 1
16574: NOT
16575: IFFALSE 16579
// exit ;
16577: GO 16605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16579: LD_VAR 0 1
16583: PUSH
16584: LD_INT 1
16586: PPUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 12
16596: ARRAY
16597: PPUSH
16598: LD_INT 200
16600: PPUSH
16601: CALL_OW 234
// end ;
16605: PPOPN 1
16607: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16608: LD_EXP 70
16612: PUSH
16613: LD_EXP 99
16617: AND
16618: IFFALSE 16697
16620: GO 16622
16622: DISABLE
16623: LD_INT 0
16625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16626: LD_ADDR_VAR 0 1
16630: PUSH
16631: LD_INT 22
16633: PUSH
16634: LD_OWVAR 2
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 21
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: ST_TO_ADDR
// if not tmp then
16662: LD_VAR 0 1
16666: NOT
16667: IFFALSE 16671
// exit ;
16669: GO 16697
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16671: LD_VAR 0 1
16675: PUSH
16676: LD_INT 1
16678: PPUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 12
16688: ARRAY
16689: PPUSH
16690: LD_INT 60
16692: PPUSH
16693: CALL_OW 234
// end ;
16697: PPOPN 1
16699: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16700: LD_EXP 70
16704: PUSH
16705: LD_EXP 100
16709: AND
16710: IFFALSE 16809
16712: GO 16714
16714: DISABLE
16715: LD_INT 0
16717: PPUSH
16718: PPUSH
// begin enable ;
16719: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16720: LD_ADDR_VAR 0 1
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: LD_OWVAR 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 61
16739: PUSH
16740: EMPTY
16741: LIST
16742: PUSH
16743: LD_INT 33
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: PPUSH
16758: CALL_OW 69
16762: ST_TO_ADDR
// if not tmp then
16763: LD_VAR 0 1
16767: NOT
16768: IFFALSE 16772
// exit ;
16770: GO 16809
// for i in tmp do
16772: LD_ADDR_VAR 0 2
16776: PUSH
16777: LD_VAR 0 1
16781: PUSH
16782: FOR_IN
16783: IFFALSE 16807
// if IsControledBy ( i ) then
16785: LD_VAR 0 2
16789: PPUSH
16790: CALL_OW 312
16794: IFFALSE 16805
// ComUnlink ( i ) ;
16796: LD_VAR 0 2
16800: PPUSH
16801: CALL_OW 136
16805: GO 16782
16807: POP
16808: POP
// end ;
16809: PPOPN 2
16811: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16812: LD_EXP 70
16816: PUSH
16817: LD_EXP 101
16821: AND
16822: IFFALSE 16962
16824: GO 16826
16826: DISABLE
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
// begin ToLua ( displayPowell(); ) ;
16831: LD_STRING displayPowell();
16833: PPUSH
16834: CALL_OW 559
// uc_side := 0 ;
16838: LD_ADDR_OWVAR 20
16842: PUSH
16843: LD_INT 0
16845: ST_TO_ADDR
// uc_nation := 2 ;
16846: LD_ADDR_OWVAR 21
16850: PUSH
16851: LD_INT 2
16853: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16854: LD_ADDR_OWVAR 37
16858: PUSH
16859: LD_INT 14
16861: ST_TO_ADDR
// vc_engine := engine_siberite ;
16862: LD_ADDR_OWVAR 39
16866: PUSH
16867: LD_INT 3
16869: ST_TO_ADDR
// vc_control := control_apeman ;
16870: LD_ADDR_OWVAR 38
16874: PUSH
16875: LD_INT 5
16877: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16878: LD_ADDR_OWVAR 40
16882: PUSH
16883: LD_INT 29
16885: ST_TO_ADDR
// un := CreateVehicle ;
16886: LD_ADDR_VAR 0 2
16890: PUSH
16891: CALL_OW 45
16895: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16896: LD_VAR 0 2
16900: PPUSH
16901: LD_INT 1
16903: PPUSH
16904: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16908: LD_INT 35
16910: PPUSH
16911: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16915: LD_VAR 0 2
16919: PPUSH
16920: LD_INT 22
16922: PUSH
16923: LD_OWVAR 2
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PPUSH
16932: CALL_OW 69
16936: PPUSH
16937: LD_VAR 0 2
16941: PPUSH
16942: CALL_OW 74
16946: PPUSH
16947: CALL_OW 115
// until IsDead ( un ) ;
16951: LD_VAR 0 2
16955: PPUSH
16956: CALL_OW 301
16960: IFFALSE 16908
// end ;
16962: PPOPN 2
16964: END
// every 0 0$1 trigger StreamModeActive and sStu do
16965: LD_EXP 70
16969: PUSH
16970: LD_EXP 109
16974: AND
16975: IFFALSE 16991
16977: GO 16979
16979: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16980: LD_STRING displayStucuk();
16982: PPUSH
16983: CALL_OW 559
// ResetFog ;
16987: CALL_OW 335
// end ;
16991: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16992: LD_EXP 70
16996: PUSH
16997: LD_EXP 102
17001: AND
17002: IFFALSE 17143
17004: GO 17006
17006: DISABLE
17007: LD_INT 0
17009: PPUSH
17010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17011: LD_ADDR_VAR 0 2
17015: PUSH
17016: LD_INT 22
17018: PUSH
17019: LD_OWVAR 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 21
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PPUSH
17042: CALL_OW 69
17046: ST_TO_ADDR
// if not tmp then
17047: LD_VAR 0 2
17051: NOT
17052: IFFALSE 17056
// exit ;
17054: GO 17143
// un := tmp [ rand ( 1 , tmp ) ] ;
17056: LD_ADDR_VAR 0 1
17060: PUSH
17061: LD_VAR 0 2
17065: PUSH
17066: LD_INT 1
17068: PPUSH
17069: LD_VAR 0 2
17073: PPUSH
17074: CALL_OW 12
17078: ARRAY
17079: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17080: LD_VAR 0 1
17084: PPUSH
17085: LD_INT 0
17087: PPUSH
17088: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17092: LD_VAR 0 1
17096: PPUSH
17097: LD_OWVAR 3
17101: PUSH
17102: LD_VAR 0 1
17106: DIFF
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 74
17117: PPUSH
17118: CALL_OW 115
// wait ( 0 0$20 ) ;
17122: LD_INT 700
17124: PPUSH
17125: CALL_OW 67
// SetSide ( un , your_side ) ;
17129: LD_VAR 0 1
17133: PPUSH
17134: LD_OWVAR 2
17138: PPUSH
17139: CALL_OW 235
// end ;
17143: PPOPN 2
17145: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17146: LD_EXP 70
17150: PUSH
17151: LD_EXP 103
17155: AND
17156: IFFALSE 17262
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17164: LD_ADDR_VAR 0 1
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_OWVAR 2
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 2
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 0
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 30
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: ST_TO_ADDR
// if not depot then
17218: LD_VAR 0 1
17222: NOT
17223: IFFALSE 17227
// exit ;
17225: GO 17262
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17227: LD_VAR 0 1
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: CALL_OW 250
17240: PPUSH
17241: LD_VAR 0 1
17245: PUSH
17246: LD_INT 1
17248: ARRAY
17249: PPUSH
17250: CALL_OW 251
17254: PPUSH
17255: LD_INT 70
17257: PPUSH
17258: CALL_OW 495
// end ;
17262: PPOPN 1
17264: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17265: LD_EXP 70
17269: PUSH
17270: LD_EXP 104
17274: AND
17275: IFFALSE 17486
17277: GO 17279
17279: DISABLE
17280: LD_INT 0
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17287: LD_ADDR_VAR 0 5
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_OWVAR 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 21
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 5
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17486
// for i in tmp do
17332: LD_ADDR_VAR 0 1
17336: PUSH
17337: LD_VAR 0 5
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17484
// begin d := rand ( 0 , 5 ) ;
17345: LD_ADDR_VAR 0 4
17349: PUSH
17350: LD_INT 0
17352: PPUSH
17353: LD_INT 5
17355: PPUSH
17356: CALL_OW 12
17360: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17361: LD_ADDR_VAR 0 2
17365: PUSH
17366: LD_VAR 0 1
17370: PPUSH
17371: CALL_OW 250
17375: PPUSH
17376: LD_VAR 0 4
17380: PPUSH
17381: LD_INT 3
17383: PPUSH
17384: LD_INT 12
17386: PPUSH
17387: CALL_OW 12
17391: PPUSH
17392: CALL_OW 272
17396: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17397: LD_ADDR_VAR 0 3
17401: PUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: CALL_OW 251
17411: PPUSH
17412: LD_VAR 0 4
17416: PPUSH
17417: LD_INT 3
17419: PPUSH
17420: LD_INT 12
17422: PPUSH
17423: CALL_OW 12
17427: PPUSH
17428: CALL_OW 273
17432: ST_TO_ADDR
// if ValidHex ( x , y ) then
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: CALL_OW 488
17447: IFFALSE 17482
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17449: LD_VAR 0 1
17453: PPUSH
17454: LD_VAR 0 2
17458: PPUSH
17459: LD_VAR 0 3
17463: PPUSH
17464: LD_INT 3
17466: PPUSH
17467: LD_INT 6
17469: PPUSH
17470: CALL_OW 12
17474: PPUSH
17475: LD_INT 1
17477: PPUSH
17478: CALL_OW 483
// end ;
17482: GO 17342
17484: POP
17485: POP
// end ;
17486: PPOPN 5
17488: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17489: LD_EXP 70
17493: PUSH
17494: LD_EXP 105
17498: AND
17499: IFFALSE 17593
17501: GO 17503
17503: DISABLE
17504: LD_INT 0
17506: PPUSH
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 32
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PPUSH
17550: CALL_OW 69
17554: ST_TO_ADDR
// if not tmp then
17555: LD_VAR 0 2
17559: NOT
17560: IFFALSE 17564
// exit ;
17562: GO 17593
// for i in tmp do
17564: LD_ADDR_VAR 0 1
17568: PUSH
17569: LD_VAR 0 2
17573: PUSH
17574: FOR_IN
17575: IFFALSE 17591
// SetFuel ( i , 0 ) ;
17577: LD_VAR 0 1
17581: PPUSH
17582: LD_INT 0
17584: PPUSH
17585: CALL_OW 240
17589: GO 17574
17591: POP
17592: POP
// end ;
17593: PPOPN 2
17595: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17596: LD_EXP 70
17600: PUSH
17601: LD_EXP 106
17605: AND
17606: IFFALSE 17672
17608: GO 17610
17610: DISABLE
17611: LD_INT 0
17613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17614: LD_ADDR_VAR 0 1
17618: PUSH
17619: LD_INT 22
17621: PUSH
17622: LD_OWVAR 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 30
17633: PUSH
17634: LD_INT 29
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PPUSH
17645: CALL_OW 69
17649: ST_TO_ADDR
// if not tmp then
17650: LD_VAR 0 1
17654: NOT
17655: IFFALSE 17659
// exit ;
17657: GO 17672
// DestroyUnit ( tmp [ 1 ] ) ;
17659: LD_VAR 0 1
17663: PUSH
17664: LD_INT 1
17666: ARRAY
17667: PPUSH
17668: CALL_OW 65
// end ;
17672: PPOPN 1
17674: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17675: LD_EXP 70
17679: PUSH
17680: LD_EXP 108
17684: AND
17685: IFFALSE 17814
17687: GO 17689
17689: DISABLE
17690: LD_INT 0
17692: PPUSH
// begin uc_side := 0 ;
17693: LD_ADDR_OWVAR 20
17697: PUSH
17698: LD_INT 0
17700: ST_TO_ADDR
// uc_nation := nation_arabian ;
17701: LD_ADDR_OWVAR 21
17705: PUSH
17706: LD_INT 2
17708: ST_TO_ADDR
// hc_gallery :=  ;
17709: LD_ADDR_OWVAR 33
17713: PUSH
17714: LD_STRING 
17716: ST_TO_ADDR
// hc_name :=  ;
17717: LD_ADDR_OWVAR 26
17721: PUSH
17722: LD_STRING 
17724: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17725: LD_INT 1
17727: PPUSH
17728: LD_INT 11
17730: PPUSH
17731: LD_INT 10
17733: PPUSH
17734: CALL_OW 380
// un := CreateHuman ;
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: CALL_OW 44
17747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17748: LD_VAR 0 1
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17760: LD_INT 35
17762: PPUSH
17763: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17767: LD_VAR 0 1
17771: PPUSH
17772: LD_INT 22
17774: PUSH
17775: LD_OWVAR 2
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PPUSH
17784: CALL_OW 69
17788: PPUSH
17789: LD_VAR 0 1
17793: PPUSH
17794: CALL_OW 74
17798: PPUSH
17799: CALL_OW 115
// until IsDead ( un ) ;
17803: LD_VAR 0 1
17807: PPUSH
17808: CALL_OW 301
17812: IFFALSE 17760
// end ;
17814: PPOPN 1
17816: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17817: LD_EXP 70
17821: PUSH
17822: LD_EXP 110
17826: AND
17827: IFFALSE 17839
17829: GO 17831
17831: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17832: LD_STRING earthquake(getX(game), 0, 32)
17834: PPUSH
17835: CALL_OW 559
17839: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17840: LD_EXP 70
17844: PUSH
17845: LD_EXP 111
17849: AND
17850: IFFALSE 17941
17852: GO 17854
17854: DISABLE
17855: LD_INT 0
17857: PPUSH
// begin enable ;
17858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17859: LD_ADDR_VAR 0 1
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_OWVAR 2
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 21
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 33
17888: PUSH
17889: LD_INT 3
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// if not tmp then
17906: LD_VAR 0 1
17910: NOT
17911: IFFALSE 17915
// exit ;
17913: GO 17941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17915: LD_VAR 0 1
17919: PUSH
17920: LD_INT 1
17922: PPUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 12
17932: ARRAY
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 234
// end ;
17941: PPOPN 1
17943: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17944: LD_EXP 70
17948: PUSH
17949: LD_EXP 112
17953: AND
17954: IFFALSE 18095
17956: GO 17958
17958: DISABLE
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
17963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_OWVAR 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 25
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 69
17999: ST_TO_ADDR
// if not tmp then
18000: LD_VAR 0 3
18004: NOT
18005: IFFALSE 18009
// exit ;
18007: GO 18095
// un := tmp [ rand ( 1 , tmp ) ] ;
18009: LD_ADDR_VAR 0 2
18013: PUSH
18014: LD_VAR 0 3
18018: PUSH
18019: LD_INT 1
18021: PPUSH
18022: LD_VAR 0 3
18026: PPUSH
18027: CALL_OW 12
18031: ARRAY
18032: ST_TO_ADDR
// if Crawls ( un ) then
18033: LD_VAR 0 2
18037: PPUSH
18038: CALL_OW 318
18042: IFFALSE 18053
// ComWalk ( un ) ;
18044: LD_VAR 0 2
18048: PPUSH
18049: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18053: LD_VAR 0 2
18057: PPUSH
18058: LD_INT 9
18060: PPUSH
18061: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18065: LD_INT 28
18067: PPUSH
18068: LD_OWVAR 2
18072: PPUSH
18073: LD_INT 2
18075: PPUSH
18076: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18080: LD_INT 29
18082: PPUSH
18083: LD_OWVAR 2
18087: PPUSH
18088: LD_INT 2
18090: PPUSH
18091: CALL_OW 322
// end ;
18095: PPOPN 3
18097: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18098: LD_EXP 70
18102: PUSH
18103: LD_EXP 113
18107: AND
18108: IFFALSE 18219
18110: GO 18112
18112: DISABLE
18113: LD_INT 0
18115: PPUSH
18116: PPUSH
18117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18118: LD_ADDR_VAR 0 3
18122: PUSH
18123: LD_INT 22
18125: PUSH
18126: LD_OWVAR 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 25
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: ST_TO_ADDR
// if not tmp then
18154: LD_VAR 0 3
18158: NOT
18159: IFFALSE 18163
// exit ;
18161: GO 18219
// un := tmp [ rand ( 1 , tmp ) ] ;
18163: LD_ADDR_VAR 0 2
18167: PUSH
18168: LD_VAR 0 3
18172: PUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: CALL_OW 12
18185: ARRAY
18186: ST_TO_ADDR
// if Crawls ( un ) then
18187: LD_VAR 0 2
18191: PPUSH
18192: CALL_OW 318
18196: IFFALSE 18207
// ComWalk ( un ) ;
18198: LD_VAR 0 2
18202: PPUSH
18203: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18207: LD_VAR 0 2
18211: PPUSH
18212: LD_INT 8
18214: PPUSH
18215: CALL_OW 336
// end ;
18219: PPOPN 3
18221: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18222: LD_EXP 70
18226: PUSH
18227: LD_EXP 114
18231: AND
18232: IFFALSE 18376
18234: GO 18236
18236: DISABLE
18237: LD_INT 0
18239: PPUSH
18240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18241: LD_ADDR_VAR 0 2
18245: PUSH
18246: LD_INT 22
18248: PUSH
18249: LD_OWVAR 2
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 21
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 2
18270: PUSH
18271: LD_INT 34
18273: PUSH
18274: LD_INT 12
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 34
18283: PUSH
18284: LD_INT 51
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 34
18293: PUSH
18294: LD_INT 32
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: ST_TO_ADDR
// if not tmp then
18317: LD_VAR 0 2
18321: NOT
18322: IFFALSE 18326
// exit ;
18324: GO 18376
// for i in tmp do
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_VAR 0 2
18335: PUSH
18336: FOR_IN
18337: IFFALSE 18374
// if GetCargo ( i , mat_artifact ) = 0 then
18339: LD_VAR 0 1
18343: PPUSH
18344: LD_INT 4
18346: PPUSH
18347: CALL_OW 289
18351: PUSH
18352: LD_INT 0
18354: EQUAL
18355: IFFALSE 18372
// SetCargo ( i , mat_siberit , 100 ) ;
18357: LD_VAR 0 1
18361: PPUSH
18362: LD_INT 3
18364: PPUSH
18365: LD_INT 100
18367: PPUSH
18368: CALL_OW 290
18372: GO 18336
18374: POP
18375: POP
// end ;
18376: PPOPN 2
18378: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18379: LD_EXP 70
18383: PUSH
18384: LD_EXP 115
18388: AND
18389: IFFALSE 18572
18391: GO 18393
18393: DISABLE
18394: LD_INT 0
18396: PPUSH
18397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18398: LD_ADDR_VAR 0 2
18402: PUSH
18403: LD_INT 22
18405: PUSH
18406: LD_OWVAR 2
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 69
18419: ST_TO_ADDR
// if not tmp then
18420: LD_VAR 0 2
18424: NOT
18425: IFFALSE 18429
// exit ;
18427: GO 18572
// for i := 1 to 2 do
18429: LD_ADDR_VAR 0 1
18433: PUSH
18434: DOUBLE
18435: LD_INT 1
18437: DEC
18438: ST_TO_ADDR
18439: LD_INT 2
18441: PUSH
18442: FOR_TO
18443: IFFALSE 18570
// begin uc_side := your_side ;
18445: LD_ADDR_OWVAR 20
18449: PUSH
18450: LD_OWVAR 2
18454: ST_TO_ADDR
// uc_nation := nation_american ;
18455: LD_ADDR_OWVAR 21
18459: PUSH
18460: LD_INT 1
18462: ST_TO_ADDR
// vc_chassis := us_morphling ;
18463: LD_ADDR_OWVAR 37
18467: PUSH
18468: LD_INT 5
18470: ST_TO_ADDR
// vc_engine := engine_siberite ;
18471: LD_ADDR_OWVAR 39
18475: PUSH
18476: LD_INT 3
18478: ST_TO_ADDR
// vc_control := control_computer ;
18479: LD_ADDR_OWVAR 38
18483: PUSH
18484: LD_INT 3
18486: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18487: LD_ADDR_OWVAR 40
18491: PUSH
18492: LD_INT 10
18494: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18495: LD_VAR 0 2
18499: PUSH
18500: LD_INT 1
18502: ARRAY
18503: PPUSH
18504: CALL_OW 310
18508: NOT
18509: IFFALSE 18556
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18511: CALL_OW 45
18515: PPUSH
18516: LD_VAR 0 2
18520: PUSH
18521: LD_INT 1
18523: ARRAY
18524: PPUSH
18525: CALL_OW 250
18529: PPUSH
18530: LD_VAR 0 2
18534: PUSH
18535: LD_INT 1
18537: ARRAY
18538: PPUSH
18539: CALL_OW 251
18543: PPUSH
18544: LD_INT 12
18546: PPUSH
18547: LD_INT 1
18549: PPUSH
18550: CALL_OW 50
18554: GO 18568
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18556: CALL_OW 45
18560: PPUSH
18561: LD_INT 1
18563: PPUSH
18564: CALL_OW 51
// end ;
18568: GO 18442
18570: POP
18571: POP
// end ;
18572: PPOPN 2
18574: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18575: LD_EXP 70
18579: PUSH
18580: LD_EXP 116
18584: AND
18585: IFFALSE 18807
18587: GO 18589
18589: DISABLE
18590: LD_INT 0
18592: PPUSH
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18598: LD_ADDR_VAR 0 6
18602: PUSH
18603: LD_INT 22
18605: PUSH
18606: LD_OWVAR 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 21
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: LD_INT 23
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: ST_TO_ADDR
// if not tmp then
18652: LD_VAR 0 6
18656: NOT
18657: IFFALSE 18661
// exit ;
18659: GO 18807
// s1 := rand ( 1 , 4 ) ;
18661: LD_ADDR_VAR 0 2
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_INT 4
18671: PPUSH
18672: CALL_OW 12
18676: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18677: LD_ADDR_VAR 0 4
18681: PUSH
18682: LD_VAR 0 6
18686: PUSH
18687: LD_INT 1
18689: ARRAY
18690: PPUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 259
18700: ST_TO_ADDR
// if s1 = 1 then
18701: LD_VAR 0 2
18705: PUSH
18706: LD_INT 1
18708: EQUAL
18709: IFFALSE 18729
// s2 := rand ( 2 , 4 ) else
18711: LD_ADDR_VAR 0 3
18715: PUSH
18716: LD_INT 2
18718: PPUSH
18719: LD_INT 4
18721: PPUSH
18722: CALL_OW 12
18726: ST_TO_ADDR
18727: GO 18737
// s2 := 1 ;
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 1
18736: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18737: LD_ADDR_VAR 0 5
18741: PUSH
18742: LD_VAR 0 6
18746: PUSH
18747: LD_INT 1
18749: ARRAY
18750: PPUSH
18751: LD_VAR 0 3
18755: PPUSH
18756: CALL_OW 259
18760: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18761: LD_VAR 0 6
18765: PUSH
18766: LD_INT 1
18768: ARRAY
18769: PPUSH
18770: LD_VAR 0 2
18774: PPUSH
18775: LD_VAR 0 5
18779: PPUSH
18780: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18784: LD_VAR 0 6
18788: PUSH
18789: LD_INT 1
18791: ARRAY
18792: PPUSH
18793: LD_VAR 0 3
18797: PPUSH
18798: LD_VAR 0 4
18802: PPUSH
18803: CALL_OW 237
// end ;
18807: PPOPN 6
18809: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18810: LD_EXP 70
18814: PUSH
18815: LD_EXP 117
18819: AND
18820: IFFALSE 18899
18822: GO 18824
18824: DISABLE
18825: LD_INT 0
18827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18828: LD_ADDR_VAR 0 1
18832: PUSH
18833: LD_INT 22
18835: PUSH
18836: LD_OWVAR 2
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 30
18847: PUSH
18848: LD_INT 3
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PPUSH
18859: CALL_OW 69
18863: ST_TO_ADDR
// if not tmp then
18864: LD_VAR 0 1
18868: NOT
18869: IFFALSE 18873
// exit ;
18871: GO 18899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18873: LD_VAR 0 1
18877: PUSH
18878: LD_INT 1
18880: PPUSH
18881: LD_VAR 0 1
18885: PPUSH
18886: CALL_OW 12
18890: ARRAY
18891: PPUSH
18892: LD_INT 1
18894: PPUSH
18895: CALL_OW 234
// end ;
18899: PPOPN 1
18901: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18902: LD_EXP 70
18906: PUSH
18907: LD_EXP 118
18911: AND
18912: IFFALSE 19024
18914: GO 18916
18916: DISABLE
18917: LD_INT 0
18919: PPUSH
18920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18921: LD_ADDR_VAR 0 2
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_OWVAR 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 2
18940: PUSH
18941: LD_INT 30
18943: PUSH
18944: LD_INT 27
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 30
18953: PUSH
18954: LD_INT 26
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 30
18963: PUSH
18964: LD_INT 28
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 69
18985: ST_TO_ADDR
// if not tmp then
18986: LD_VAR 0 2
18990: NOT
18991: IFFALSE 18995
// exit ;
18993: GO 19024
// for i in tmp do
18995: LD_ADDR_VAR 0 1
18999: PUSH
19000: LD_VAR 0 2
19004: PUSH
19005: FOR_IN
19006: IFFALSE 19022
// SetLives ( i , 1 ) ;
19008: LD_VAR 0 1
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 234
19020: GO 19005
19022: POP
19023: POP
// end ;
19024: PPOPN 2
19026: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19027: LD_EXP 70
19031: PUSH
19032: LD_EXP 119
19036: AND
19037: IFFALSE 19311
19039: GO 19041
19041: DISABLE
19042: LD_INT 0
19044: PPUSH
19045: PPUSH
19046: PPUSH
// begin i := rand ( 1 , 7 ) ;
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_INT 1
19054: PPUSH
19055: LD_INT 7
19057: PPUSH
19058: CALL_OW 12
19062: ST_TO_ADDR
// case i of 1 :
19063: LD_VAR 0 1
19067: PUSH
19068: LD_INT 1
19070: DOUBLE
19071: EQUAL
19072: IFTRUE 19076
19074: GO 19086
19076: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19077: LD_STRING earthquake(getX(game), 0, 32)
19079: PPUSH
19080: CALL_OW 559
19084: GO 19311
19086: LD_INT 2
19088: DOUBLE
19089: EQUAL
19090: IFTRUE 19094
19092: GO 19108
19094: POP
// begin ToLua ( displayStucuk(); ) ;
19095: LD_STRING displayStucuk();
19097: PPUSH
19098: CALL_OW 559
// ResetFog ;
19102: CALL_OW 335
// end ; 3 :
19106: GO 19311
19108: LD_INT 3
19110: DOUBLE
19111: EQUAL
19112: IFTRUE 19116
19114: GO 19220
19116: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19117: LD_ADDR_VAR 0 2
19121: PUSH
19122: LD_INT 22
19124: PUSH
19125: LD_OWVAR 2
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 25
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: ST_TO_ADDR
// if not tmp then
19153: LD_VAR 0 2
19157: NOT
19158: IFFALSE 19162
// exit ;
19160: GO 19311
// un := tmp [ rand ( 1 , tmp ) ] ;
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: LD_VAR 0 2
19171: PUSH
19172: LD_INT 1
19174: PPUSH
19175: LD_VAR 0 2
19179: PPUSH
19180: CALL_OW 12
19184: ARRAY
19185: ST_TO_ADDR
// if Crawls ( un ) then
19186: LD_VAR 0 3
19190: PPUSH
19191: CALL_OW 318
19195: IFFALSE 19206
// ComWalk ( un ) ;
19197: LD_VAR 0 3
19201: PPUSH
19202: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19206: LD_VAR 0 3
19210: PPUSH
19211: LD_INT 8
19213: PPUSH
19214: CALL_OW 336
// end ; 4 :
19218: GO 19311
19220: LD_INT 4
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19289
19228: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: LD_INT 22
19236: PUSH
19237: LD_OWVAR 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 30
19248: PUSH
19249: LD_INT 29
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PPUSH
19260: CALL_OW 69
19264: ST_TO_ADDR
// if not tmp then
19265: LD_VAR 0 2
19269: NOT
19270: IFFALSE 19274
// exit ;
19272: GO 19311
// DestroyUnit ( tmp [ 1 ] ) ;
19274: LD_VAR 0 2
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: CALL_OW 65
// end ; 5 .. 7 :
19287: GO 19311
19289: LD_INT 5
19291: DOUBLE
19292: GREATEREQUAL
19293: IFFALSE 19301
19295: LD_INT 7
19297: DOUBLE
19298: LESSEQUAL
19299: IFTRUE 19303
19301: GO 19310
19303: POP
// StreamSibBomb ; end ;
19304: CALL 15561 0 0
19308: GO 19311
19310: POP
// end ;
19311: PPOPN 3
19313: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19314: LD_EXP 70
19318: PUSH
19319: LD_EXP 120
19323: AND
19324: IFFALSE 19480
19326: GO 19328
19328: DISABLE
19329: LD_INT 0
19331: PPUSH
19332: PPUSH
19333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19334: LD_ADDR_VAR 0 2
19338: PUSH
19339: LD_INT 81
19341: PUSH
19342: LD_OWVAR 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 21
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PPUSH
19383: CALL_OW 69
19387: ST_TO_ADDR
// if not tmp then
19388: LD_VAR 0 2
19392: NOT
19393: IFFALSE 19397
// exit ;
19395: GO 19480
// p := 0 ;
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: LD_INT 0
19404: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19405: LD_INT 35
19407: PPUSH
19408: CALL_OW 67
// p := p + 1 ;
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 1
19424: PLUS
19425: ST_TO_ADDR
// for i in tmp do
19426: LD_ADDR_VAR 0 1
19430: PUSH
19431: LD_VAR 0 2
19435: PUSH
19436: FOR_IN
19437: IFFALSE 19468
// if GetLives ( i ) < 1000 then
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 256
19448: PUSH
19449: LD_INT 1000
19451: LESS
19452: IFFALSE 19466
// SetLives ( i , 1000 ) ;
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_INT 1000
19461: PPUSH
19462: CALL_OW 234
19466: GO 19436
19468: POP
19469: POP
// until p > 20 ;
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 20
19477: GREATER
19478: IFFALSE 19405
// end ;
19480: PPOPN 3
19482: END
// every 0 0$1 trigger StreamModeActive and sTime do
19483: LD_EXP 70
19487: PUSH
19488: LD_EXP 121
19492: AND
19493: IFFALSE 19528
19495: GO 19497
19497: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19498: LD_INT 28
19500: PPUSH
19501: LD_OWVAR 2
19505: PPUSH
19506: LD_INT 2
19508: PPUSH
19509: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19513: LD_INT 30
19515: PPUSH
19516: LD_OWVAR 2
19520: PPUSH
19521: LD_INT 2
19523: PPUSH
19524: CALL_OW 322
// end ;
19528: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19529: LD_EXP 70
19533: PUSH
19534: LD_EXP 122
19538: AND
19539: IFFALSE 19660
19541: GO 19543
19543: DISABLE
19544: LD_INT 0
19546: PPUSH
19547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19548: LD_ADDR_VAR 0 2
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_OWVAR 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 3
19577: PUSH
19578: LD_INT 23
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PPUSH
19597: CALL_OW 69
19601: ST_TO_ADDR
// if not tmp then
19602: LD_VAR 0 2
19606: NOT
19607: IFFALSE 19611
// exit ;
19609: GO 19660
// for i in tmp do
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: LD_VAR 0 2
19620: PUSH
19621: FOR_IN
19622: IFFALSE 19658
// begin if Crawls ( i ) then
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 318
19633: IFFALSE 19644
// ComWalk ( i ) ;
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 138
// SetClass ( i , 2 ) ;
19644: LD_VAR 0 1
19648: PPUSH
19649: LD_INT 2
19651: PPUSH
19652: CALL_OW 336
// end ;
19656: GO 19621
19658: POP
19659: POP
// end ;
19660: PPOPN 2
19662: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19663: LD_EXP 70
19667: PUSH
19668: LD_EXP 123
19672: AND
19673: IFFALSE 19954
19675: GO 19677
19677: DISABLE
19678: LD_INT 0
19680: PPUSH
19681: PPUSH
19682: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19683: LD_OWVAR 2
19687: PPUSH
19688: LD_INT 9
19690: PPUSH
19691: LD_INT 1
19693: PPUSH
19694: LD_INT 1
19696: PPUSH
19697: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19701: LD_INT 9
19703: PPUSH
19704: LD_OWVAR 2
19708: PPUSH
19709: CALL_OW 343
// uc_side := 9 ;
19713: LD_ADDR_OWVAR 20
19717: PUSH
19718: LD_INT 9
19720: ST_TO_ADDR
// uc_nation := 2 ;
19721: LD_ADDR_OWVAR 21
19725: PUSH
19726: LD_INT 2
19728: ST_TO_ADDR
// hc_name := Dark Warrior ;
19729: LD_ADDR_OWVAR 26
19733: PUSH
19734: LD_STRING Dark Warrior
19736: ST_TO_ADDR
// hc_gallery :=  ;
19737: LD_ADDR_OWVAR 33
19741: PUSH
19742: LD_STRING 
19744: ST_TO_ADDR
// hc_noskilllimit := true ;
19745: LD_ADDR_OWVAR 76
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19753: LD_ADDR_OWVAR 31
19757: PUSH
19758: LD_INT 30
19760: PUSH
19761: LD_INT 30
19763: PUSH
19764: LD_INT 30
19766: PUSH
19767: LD_INT 30
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: ST_TO_ADDR
// un := CreateHuman ;
19776: LD_ADDR_VAR 0 3
19780: PUSH
19781: CALL_OW 44
19785: ST_TO_ADDR
// hc_noskilllimit := false ;
19786: LD_ADDR_OWVAR 76
19790: PUSH
19791: LD_INT 0
19793: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19794: LD_VAR 0 3
19798: PPUSH
19799: LD_INT 1
19801: PPUSH
19802: CALL_OW 51
// p := 0 ;
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19814: LD_INT 35
19816: PPUSH
19817: CALL_OW 67
// p := p + 1 ;
19821: LD_ADDR_VAR 0 2
19825: PUSH
19826: LD_VAR 0 2
19830: PUSH
19831: LD_INT 1
19833: PLUS
19834: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19835: LD_VAR 0 3
19839: PPUSH
19840: CALL_OW 256
19844: PUSH
19845: LD_INT 1000
19847: LESS
19848: IFFALSE 19862
// SetLives ( un , 1000 ) ;
19850: LD_VAR 0 3
19854: PPUSH
19855: LD_INT 1000
19857: PPUSH
19858: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19862: LD_VAR 0 3
19866: PPUSH
19867: LD_INT 81
19869: PUSH
19870: LD_OWVAR 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 91
19881: PUSH
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 30
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PPUSH
19899: CALL_OW 69
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: CALL_OW 74
19913: PPUSH
19914: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19918: LD_VAR 0 2
19922: PUSH
19923: LD_INT 60
19925: GREATER
19926: PUSH
19927: LD_VAR 0 3
19931: PPUSH
19932: CALL_OW 301
19936: OR
19937: IFFALSE 19814
// if un then
19939: LD_VAR 0 3
19943: IFFALSE 19954
// RemoveUnit ( un ) ;
19945: LD_VAR 0 3
19949: PPUSH
19950: CALL_OW 64
// end ;
19954: PPOPN 3
19956: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19957: LD_INT 0
19959: PPUSH
// case cmd of 301 :
19960: LD_VAR 0 1
19964: PUSH
19965: LD_INT 301
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 20005
19973: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19974: LD_VAR 0 6
19978: PPUSH
19979: LD_VAR 0 7
19983: PPUSH
19984: LD_VAR 0 8
19988: PPUSH
19989: LD_VAR 0 4
19993: PPUSH
19994: LD_VAR 0 5
19998: PPUSH
19999: CALL 21206 0 5
20003: GO 20126
20005: LD_INT 302
20007: DOUBLE
20008: EQUAL
20009: IFTRUE 20013
20011: GO 20050
20013: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20014: LD_VAR 0 6
20018: PPUSH
20019: LD_VAR 0 7
20023: PPUSH
20024: LD_VAR 0 8
20028: PPUSH
20029: LD_VAR 0 9
20033: PPUSH
20034: LD_VAR 0 4
20038: PPUSH
20039: LD_VAR 0 5
20043: PPUSH
20044: CALL 21297 0 6
20048: GO 20126
20050: LD_INT 303
20052: DOUBLE
20053: EQUAL
20054: IFTRUE 20058
20056: GO 20095
20058: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20059: LD_VAR 0 6
20063: PPUSH
20064: LD_VAR 0 7
20068: PPUSH
20069: LD_VAR 0 8
20073: PPUSH
20074: LD_VAR 0 9
20078: PPUSH
20079: LD_VAR 0 4
20083: PPUSH
20084: LD_VAR 0 5
20088: PPUSH
20089: CALL 20131 0 6
20093: GO 20126
20095: LD_INT 304
20097: DOUBLE
20098: EQUAL
20099: IFTRUE 20103
20101: GO 20125
20103: POP
// hHackTeleport ( unit , x , y ) ; end ;
20104: LD_VAR 0 2
20108: PPUSH
20109: LD_VAR 0 4
20113: PPUSH
20114: LD_VAR 0 5
20118: PPUSH
20119: CALL 21890 0 3
20123: GO 20126
20125: POP
// end ;
20126: LD_VAR 0 12
20130: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20135: LD_VAR 0 1
20139: PUSH
20140: LD_INT 1
20142: LESS
20143: PUSH
20144: LD_VAR 0 1
20148: PUSH
20149: LD_INT 3
20151: GREATER
20152: OR
20153: PUSH
20154: LD_VAR 0 5
20158: PPUSH
20159: LD_VAR 0 6
20163: PPUSH
20164: CALL_OW 428
20168: OR
20169: IFFALSE 20173
// exit ;
20171: GO 20893
// uc_side := your_side ;
20173: LD_ADDR_OWVAR 20
20177: PUSH
20178: LD_OWVAR 2
20182: ST_TO_ADDR
// uc_nation := nation ;
20183: LD_ADDR_OWVAR 21
20187: PUSH
20188: LD_VAR 0 1
20192: ST_TO_ADDR
// bc_level = 1 ;
20193: LD_ADDR_OWVAR 43
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// case btype of 1 :
20201: LD_VAR 0 2
20205: PUSH
20206: LD_INT 1
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20225
20214: POP
// bc_type := b_depot ; 2 :
20215: LD_ADDR_OWVAR 42
20219: PUSH
20220: LD_INT 0
20222: ST_TO_ADDR
20223: GO 20837
20225: LD_INT 2
20227: DOUBLE
20228: EQUAL
20229: IFTRUE 20233
20231: GO 20244
20233: POP
// bc_type := b_warehouse ; 3 :
20234: LD_ADDR_OWVAR 42
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
20242: GO 20837
20244: LD_INT 3
20246: DOUBLE
20247: EQUAL
20248: IFTRUE 20252
20250: GO 20263
20252: POP
// bc_type := b_lab ; 4 .. 9 :
20253: LD_ADDR_OWVAR 42
20257: PUSH
20258: LD_INT 6
20260: ST_TO_ADDR
20261: GO 20837
20263: LD_INT 4
20265: DOUBLE
20266: GREATEREQUAL
20267: IFFALSE 20275
20269: LD_INT 9
20271: DOUBLE
20272: LESSEQUAL
20273: IFTRUE 20277
20275: GO 20329
20277: POP
// begin bc_type := b_lab_half ;
20278: LD_ADDR_OWVAR 42
20282: PUSH
20283: LD_INT 7
20285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20286: LD_ADDR_OWVAR 44
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 15
20302: PUSH
20303: LD_INT 14
20305: PUSH
20306: LD_INT 13
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: PUSH
20317: LD_VAR 0 2
20321: PUSH
20322: LD_INT 3
20324: MINUS
20325: ARRAY
20326: ST_TO_ADDR
// end ; 10 .. 13 :
20327: GO 20837
20329: LD_INT 10
20331: DOUBLE
20332: GREATEREQUAL
20333: IFFALSE 20341
20335: LD_INT 13
20337: DOUBLE
20338: LESSEQUAL
20339: IFTRUE 20343
20341: GO 20420
20343: POP
// begin bc_type := b_lab_full ;
20344: LD_ADDR_OWVAR 42
20348: PUSH
20349: LD_INT 8
20351: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20352: LD_ADDR_OWVAR 44
20356: PUSH
20357: LD_INT 10
20359: PUSH
20360: LD_INT 12
20362: PUSH
20363: LD_INT 14
20365: PUSH
20366: LD_INT 13
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: LD_VAR 0 2
20379: PUSH
20380: LD_INT 9
20382: MINUS
20383: ARRAY
20384: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20385: LD_ADDR_OWVAR 45
20389: PUSH
20390: LD_INT 11
20392: PUSH
20393: LD_INT 15
20395: PUSH
20396: LD_INT 12
20398: PUSH
20399: LD_INT 15
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: PUSH
20408: LD_VAR 0 2
20412: PUSH
20413: LD_INT 9
20415: MINUS
20416: ARRAY
20417: ST_TO_ADDR
// end ; 14 :
20418: GO 20837
20420: LD_INT 14
20422: DOUBLE
20423: EQUAL
20424: IFTRUE 20428
20426: GO 20439
20428: POP
// bc_type := b_workshop ; 15 :
20429: LD_ADDR_OWVAR 42
20433: PUSH
20434: LD_INT 2
20436: ST_TO_ADDR
20437: GO 20837
20439: LD_INT 15
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20458
20447: POP
// bc_type := b_factory ; 16 :
20448: LD_ADDR_OWVAR 42
20452: PUSH
20453: LD_INT 3
20455: ST_TO_ADDR
20456: GO 20837
20458: LD_INT 16
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 20477
20466: POP
// bc_type := b_ext_gun ; 17 :
20467: LD_ADDR_OWVAR 42
20471: PUSH
20472: LD_INT 17
20474: ST_TO_ADDR
20475: GO 20837
20477: LD_INT 17
20479: DOUBLE
20480: EQUAL
20481: IFTRUE 20485
20483: GO 20513
20485: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20486: LD_ADDR_OWVAR 42
20490: PUSH
20491: LD_INT 19
20493: PUSH
20494: LD_INT 23
20496: PUSH
20497: LD_INT 19
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: LIST
20504: PUSH
20505: LD_VAR 0 1
20509: ARRAY
20510: ST_TO_ADDR
20511: GO 20837
20513: LD_INT 18
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20532
20521: POP
// bc_type := b_ext_radar ; 19 :
20522: LD_ADDR_OWVAR 42
20526: PUSH
20527: LD_INT 20
20529: ST_TO_ADDR
20530: GO 20837
20532: LD_INT 19
20534: DOUBLE
20535: EQUAL
20536: IFTRUE 20540
20538: GO 20551
20540: POP
// bc_type := b_ext_radio ; 20 :
20541: LD_ADDR_OWVAR 42
20545: PUSH
20546: LD_INT 22
20548: ST_TO_ADDR
20549: GO 20837
20551: LD_INT 20
20553: DOUBLE
20554: EQUAL
20555: IFTRUE 20559
20557: GO 20570
20559: POP
// bc_type := b_ext_siberium ; 21 :
20560: LD_ADDR_OWVAR 42
20564: PUSH
20565: LD_INT 21
20567: ST_TO_ADDR
20568: GO 20837
20570: LD_INT 21
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20589
20578: POP
// bc_type := b_ext_computer ; 22 :
20579: LD_ADDR_OWVAR 42
20583: PUSH
20584: LD_INT 24
20586: ST_TO_ADDR
20587: GO 20837
20589: LD_INT 22
20591: DOUBLE
20592: EQUAL
20593: IFTRUE 20597
20595: GO 20608
20597: POP
// bc_type := b_ext_track ; 23 :
20598: LD_ADDR_OWVAR 42
20602: PUSH
20603: LD_INT 16
20605: ST_TO_ADDR
20606: GO 20837
20608: LD_INT 23
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20627
20616: POP
// bc_type := b_ext_laser ; 24 :
20617: LD_ADDR_OWVAR 42
20621: PUSH
20622: LD_INT 25
20624: ST_TO_ADDR
20625: GO 20837
20627: LD_INT 24
20629: DOUBLE
20630: EQUAL
20631: IFTRUE 20635
20633: GO 20646
20635: POP
// bc_type := b_control_tower ; 25 :
20636: LD_ADDR_OWVAR 42
20640: PUSH
20641: LD_INT 36
20643: ST_TO_ADDR
20644: GO 20837
20646: LD_INT 25
20648: DOUBLE
20649: EQUAL
20650: IFTRUE 20654
20652: GO 20665
20654: POP
// bc_type := b_breastwork ; 26 :
20655: LD_ADDR_OWVAR 42
20659: PUSH
20660: LD_INT 31
20662: ST_TO_ADDR
20663: GO 20837
20665: LD_INT 26
20667: DOUBLE
20668: EQUAL
20669: IFTRUE 20673
20671: GO 20684
20673: POP
// bc_type := b_bunker ; 27 :
20674: LD_ADDR_OWVAR 42
20678: PUSH
20679: LD_INT 32
20681: ST_TO_ADDR
20682: GO 20837
20684: LD_INT 27
20686: DOUBLE
20687: EQUAL
20688: IFTRUE 20692
20690: GO 20703
20692: POP
// bc_type := b_turret ; 28 :
20693: LD_ADDR_OWVAR 42
20697: PUSH
20698: LD_INT 33
20700: ST_TO_ADDR
20701: GO 20837
20703: LD_INT 28
20705: DOUBLE
20706: EQUAL
20707: IFTRUE 20711
20709: GO 20722
20711: POP
// bc_type := b_armoury ; 29 :
20712: LD_ADDR_OWVAR 42
20716: PUSH
20717: LD_INT 4
20719: ST_TO_ADDR
20720: GO 20837
20722: LD_INT 29
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20741
20730: POP
// bc_type := b_barracks ; 30 :
20731: LD_ADDR_OWVAR 42
20735: PUSH
20736: LD_INT 5
20738: ST_TO_ADDR
20739: GO 20837
20741: LD_INT 30
20743: DOUBLE
20744: EQUAL
20745: IFTRUE 20749
20747: GO 20760
20749: POP
// bc_type := b_solar_power ; 31 :
20750: LD_ADDR_OWVAR 42
20754: PUSH
20755: LD_INT 27
20757: ST_TO_ADDR
20758: GO 20837
20760: LD_INT 31
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20779
20768: POP
// bc_type := b_oil_power ; 32 :
20769: LD_ADDR_OWVAR 42
20773: PUSH
20774: LD_INT 26
20776: ST_TO_ADDR
20777: GO 20837
20779: LD_INT 32
20781: DOUBLE
20782: EQUAL
20783: IFTRUE 20787
20785: GO 20798
20787: POP
// bc_type := b_siberite_power ; 33 :
20788: LD_ADDR_OWVAR 42
20792: PUSH
20793: LD_INT 28
20795: ST_TO_ADDR
20796: GO 20837
20798: LD_INT 33
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20817
20806: POP
// bc_type := b_oil_mine ; 34 :
20807: LD_ADDR_OWVAR 42
20811: PUSH
20812: LD_INT 29
20814: ST_TO_ADDR
20815: GO 20837
20817: LD_INT 34
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20836
20825: POP
// bc_type := b_siberite_mine ; end ;
20826: LD_ADDR_OWVAR 42
20830: PUSH
20831: LD_INT 30
20833: ST_TO_ADDR
20834: GO 20837
20836: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20837: LD_ADDR_VAR 0 8
20841: PUSH
20842: LD_VAR 0 5
20846: PPUSH
20847: LD_VAR 0 6
20851: PPUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: CALL_OW 47
20861: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20862: LD_OWVAR 42
20866: PUSH
20867: LD_INT 32
20869: PUSH
20870: LD_INT 33
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: IN
20877: IFFALSE 20893
// PlaceWeaponTurret ( b , weapon ) ;
20879: LD_VAR 0 8
20883: PPUSH
20884: LD_VAR 0 4
20888: PPUSH
20889: CALL_OW 431
// end ;
20893: LD_VAR 0 7
20897: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20898: LD_INT 0
20900: PPUSH
20901: PPUSH
20902: PPUSH
20903: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20904: LD_ADDR_VAR 0 4
20908: PUSH
20909: LD_INT 22
20911: PUSH
20912: LD_OWVAR 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 30
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 30
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PPUSH
20953: CALL_OW 69
20957: ST_TO_ADDR
// if not tmp then
20958: LD_VAR 0 4
20962: NOT
20963: IFFALSE 20967
// exit ;
20965: GO 21026
// for i in tmp do
20967: LD_ADDR_VAR 0 2
20971: PUSH
20972: LD_VAR 0 4
20976: PUSH
20977: FOR_IN
20978: IFFALSE 21024
// for j = 1 to 3 do
20980: LD_ADDR_VAR 0 3
20984: PUSH
20985: DOUBLE
20986: LD_INT 1
20988: DEC
20989: ST_TO_ADDR
20990: LD_INT 3
20992: PUSH
20993: FOR_TO
20994: IFFALSE 21020
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20996: LD_VAR 0 2
21000: PPUSH
21001: CALL_OW 274
21005: PPUSH
21006: LD_VAR 0 3
21010: PPUSH
21011: LD_INT 99999
21013: PPUSH
21014: CALL_OW 277
21018: GO 20993
21020: POP
21021: POP
21022: GO 20977
21024: POP
21025: POP
// end ;
21026: LD_VAR 0 1
21030: RET
// export function hHackSetLevel10 ; var i , j ; begin
21031: LD_INT 0
21033: PPUSH
21034: PPUSH
21035: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21036: LD_ADDR_VAR 0 2
21040: PUSH
21041: LD_INT 21
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PPUSH
21051: CALL_OW 69
21055: PUSH
21056: FOR_IN
21057: IFFALSE 21109
// if IsSelected ( i ) then
21059: LD_VAR 0 2
21063: PPUSH
21064: CALL_OW 306
21068: IFFALSE 21107
// begin for j := 1 to 4 do
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: DOUBLE
21076: LD_INT 1
21078: DEC
21079: ST_TO_ADDR
21080: LD_INT 4
21082: PUSH
21083: FOR_TO
21084: IFFALSE 21105
// SetSkill ( i , j , 10 ) ;
21086: LD_VAR 0 2
21090: PPUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_INT 10
21098: PPUSH
21099: CALL_OW 237
21103: GO 21083
21105: POP
21106: POP
// end ;
21107: GO 21056
21109: POP
21110: POP
// end ;
21111: LD_VAR 0 1
21115: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21116: LD_INT 0
21118: PPUSH
21119: PPUSH
21120: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21121: LD_ADDR_VAR 0 2
21125: PUSH
21126: LD_INT 22
21128: PUSH
21129: LD_OWVAR 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 21
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL_OW 69
21156: PUSH
21157: FOR_IN
21158: IFFALSE 21199
// begin for j := 1 to 4 do
21160: LD_ADDR_VAR 0 3
21164: PUSH
21165: DOUBLE
21166: LD_INT 1
21168: DEC
21169: ST_TO_ADDR
21170: LD_INT 4
21172: PUSH
21173: FOR_TO
21174: IFFALSE 21195
// SetSkill ( i , j , 10 ) ;
21176: LD_VAR 0 2
21180: PPUSH
21181: LD_VAR 0 3
21185: PPUSH
21186: LD_INT 10
21188: PPUSH
21189: CALL_OW 237
21193: GO 21173
21195: POP
21196: POP
// end ;
21197: GO 21157
21199: POP
21200: POP
// end ;
21201: LD_VAR 0 1
21205: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21206: LD_INT 0
21208: PPUSH
// uc_side := your_side ;
21209: LD_ADDR_OWVAR 20
21213: PUSH
21214: LD_OWVAR 2
21218: ST_TO_ADDR
// uc_nation := nation ;
21219: LD_ADDR_OWVAR 21
21223: PUSH
21224: LD_VAR 0 1
21228: ST_TO_ADDR
// InitHc ;
21229: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21233: LD_INT 0
21235: PPUSH
21236: LD_VAR 0 2
21240: PPUSH
21241: LD_VAR 0 3
21245: PPUSH
21246: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21250: LD_VAR 0 4
21254: PPUSH
21255: LD_VAR 0 5
21259: PPUSH
21260: CALL_OW 428
21264: PUSH
21265: LD_INT 0
21267: EQUAL
21268: IFFALSE 21292
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21270: CALL_OW 44
21274: PPUSH
21275: LD_VAR 0 4
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: LD_INT 1
21287: PPUSH
21288: CALL_OW 48
// end ;
21292: LD_VAR 0 6
21296: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21297: LD_INT 0
21299: PPUSH
21300: PPUSH
// uc_side := your_side ;
21301: LD_ADDR_OWVAR 20
21305: PUSH
21306: LD_OWVAR 2
21310: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21311: LD_VAR 0 1
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: LD_INT 3
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: IN
21338: IFFALSE 21350
// uc_nation := nation_american else
21340: LD_ADDR_OWVAR 21
21344: PUSH
21345: LD_INT 1
21347: ST_TO_ADDR
21348: GO 21393
// if chassis in [ 11 , 12 , 13 , 14 ] then
21350: LD_VAR 0 1
21354: PUSH
21355: LD_INT 11
21357: PUSH
21358: LD_INT 12
21360: PUSH
21361: LD_INT 13
21363: PUSH
21364: LD_INT 14
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: IN
21373: IFFALSE 21385
// uc_nation := nation_arabian else
21375: LD_ADDR_OWVAR 21
21379: PUSH
21380: LD_INT 2
21382: ST_TO_ADDR
21383: GO 21393
// uc_nation := nation_russian ;
21385: LD_ADDR_OWVAR 21
21389: PUSH
21390: LD_INT 3
21392: ST_TO_ADDR
// vc_chassis := chassis ;
21393: LD_ADDR_OWVAR 37
21397: PUSH
21398: LD_VAR 0 1
21402: ST_TO_ADDR
// vc_engine := engine ;
21403: LD_ADDR_OWVAR 39
21407: PUSH
21408: LD_VAR 0 2
21412: ST_TO_ADDR
// vc_control := control ;
21413: LD_ADDR_OWVAR 38
21417: PUSH
21418: LD_VAR 0 3
21422: ST_TO_ADDR
// vc_weapon := weapon ;
21423: LD_ADDR_OWVAR 40
21427: PUSH
21428: LD_VAR 0 4
21432: ST_TO_ADDR
// un := CreateVehicle ;
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: CALL_OW 45
21442: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21443: LD_VAR 0 8
21447: PPUSH
21448: LD_INT 0
21450: PPUSH
21451: LD_INT 5
21453: PPUSH
21454: CALL_OW 12
21458: PPUSH
21459: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21463: LD_VAR 0 8
21467: PPUSH
21468: LD_VAR 0 5
21472: PPUSH
21473: LD_VAR 0 6
21477: PPUSH
21478: LD_INT 1
21480: PPUSH
21481: CALL_OW 48
// end ;
21485: LD_VAR 0 7
21489: RET
// export hInvincible ; every 1 do
21490: GO 21492
21492: DISABLE
// hInvincible := [ ] ;
21493: LD_ADDR_EXP 124
21497: PUSH
21498: EMPTY
21499: ST_TO_ADDR
21500: END
// every 10 do var i ;
21501: GO 21503
21503: DISABLE
21504: LD_INT 0
21506: PPUSH
// begin enable ;
21507: ENABLE
// if not hInvincible then
21508: LD_EXP 124
21512: NOT
21513: IFFALSE 21517
// exit ;
21515: GO 21561
// for i in hInvincible do
21517: LD_ADDR_VAR 0 1
21521: PUSH
21522: LD_EXP 124
21526: PUSH
21527: FOR_IN
21528: IFFALSE 21559
// if GetLives ( i ) < 1000 then
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 256
21539: PUSH
21540: LD_INT 1000
21542: LESS
21543: IFFALSE 21557
// SetLives ( i , 1000 ) ;
21545: LD_VAR 0 1
21549: PPUSH
21550: LD_INT 1000
21552: PPUSH
21553: CALL_OW 234
21557: GO 21527
21559: POP
21560: POP
// end ;
21561: PPOPN 1
21563: END
// export function hHackInvincible ; var i ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21568: LD_ADDR_VAR 0 2
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 21
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 69
21605: PUSH
21606: FOR_IN
21607: IFFALSE 21668
// if IsSelected ( i ) then
21609: LD_VAR 0 2
21613: PPUSH
21614: CALL_OW 306
21618: IFFALSE 21666
// begin if i in hInvincible then
21620: LD_VAR 0 2
21624: PUSH
21625: LD_EXP 124
21629: IN
21630: IFFALSE 21650
// hInvincible := hInvincible diff i else
21632: LD_ADDR_EXP 124
21636: PUSH
21637: LD_EXP 124
21641: PUSH
21642: LD_VAR 0 2
21646: DIFF
21647: ST_TO_ADDR
21648: GO 21666
// hInvincible := hInvincible union i ;
21650: LD_ADDR_EXP 124
21654: PUSH
21655: LD_EXP 124
21659: PUSH
21660: LD_VAR 0 2
21664: UNION
21665: ST_TO_ADDR
// end ;
21666: GO 21606
21668: POP
21669: POP
// end ;
21670: LD_VAR 0 1
21674: RET
// export function hHackInvisible ; var i , j ; begin
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21680: LD_ADDR_VAR 0 2
21684: PUSH
21685: LD_INT 21
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: PUSH
21700: FOR_IN
21701: IFFALSE 21725
// if IsSelected ( i ) then
21703: LD_VAR 0 2
21707: PPUSH
21708: CALL_OW 306
21712: IFFALSE 21723
// ComForceInvisible ( i ) ;
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL_OW 496
21723: GO 21700
21725: POP
21726: POP
// end ;
21727: LD_VAR 0 1
21731: RET
// export function hHackChangeYourSide ; begin
21732: LD_INT 0
21734: PPUSH
// if your_side = 8 then
21735: LD_OWVAR 2
21739: PUSH
21740: LD_INT 8
21742: EQUAL
21743: IFFALSE 21755
// your_side := 0 else
21745: LD_ADDR_OWVAR 2
21749: PUSH
21750: LD_INT 0
21752: ST_TO_ADDR
21753: GO 21769
// your_side := your_side + 1 ;
21755: LD_ADDR_OWVAR 2
21759: PUSH
21760: LD_OWVAR 2
21764: PUSH
21765: LD_INT 1
21767: PLUS
21768: ST_TO_ADDR
// end ;
21769: LD_VAR 0 1
21773: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
21778: PPUSH
// for i in all_units do
21779: LD_ADDR_VAR 0 2
21783: PUSH
21784: LD_OWVAR 3
21788: PUSH
21789: FOR_IN
21790: IFFALSE 21868
// if IsSelected ( i ) then
21792: LD_VAR 0 2
21796: PPUSH
21797: CALL_OW 306
21801: IFFALSE 21866
// begin j := GetSide ( i ) ;
21803: LD_ADDR_VAR 0 3
21807: PUSH
21808: LD_VAR 0 2
21812: PPUSH
21813: CALL_OW 255
21817: ST_TO_ADDR
// if j = 8 then
21818: LD_VAR 0 3
21822: PUSH
21823: LD_INT 8
21825: EQUAL
21826: IFFALSE 21838
// j := 0 else
21828: LD_ADDR_VAR 0 3
21832: PUSH
21833: LD_INT 0
21835: ST_TO_ADDR
21836: GO 21852
// j := j + 1 ;
21838: LD_ADDR_VAR 0 3
21842: PUSH
21843: LD_VAR 0 3
21847: PUSH
21848: LD_INT 1
21850: PLUS
21851: ST_TO_ADDR
// SetSide ( i , j ) ;
21852: LD_VAR 0 2
21856: PPUSH
21857: LD_VAR 0 3
21861: PPUSH
21862: CALL_OW 235
// end ;
21866: GO 21789
21868: POP
21869: POP
// end ;
21870: LD_VAR 0 1
21874: RET
// export function hHackFog ; begin
21875: LD_INT 0
21877: PPUSH
// FogOff ( true ) ;
21878: LD_INT 1
21880: PPUSH
21881: CALL_OW 344
// end ;
21885: LD_VAR 0 1
21889: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21890: LD_INT 0
21892: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21893: LD_VAR 0 1
21897: PPUSH
21898: LD_VAR 0 2
21902: PPUSH
21903: LD_VAR 0 3
21907: PPUSH
21908: LD_INT 1
21910: PPUSH
21911: LD_INT 1
21913: PPUSH
21914: CALL_OW 483
// CenterOnXY ( x , y ) ;
21918: LD_VAR 0 2
21922: PPUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: CALL_OW 84
// end ; end_of_file
21932: LD_VAR 0 4
21936: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL_OW 264
21952: PUSH
21953: LD_EXP 56
21957: EQUAL
21958: IFFALSE 22030
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21960: LD_INT 68
21962: PPUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 255
21972: PPUSH
21973: CALL_OW 321
21977: PUSH
21978: LD_INT 2
21980: EQUAL
21981: IFFALSE 21993
// eff := 70 else
21983: LD_ADDR_VAR 0 4
21987: PUSH
21988: LD_INT 70
21990: ST_TO_ADDR
21991: GO 22001
// eff := 30 ;
21993: LD_ADDR_VAR 0 4
21997: PUSH
21998: LD_INT 30
22000: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22001: LD_VAR 0 1
22005: PPUSH
22006: CALL_OW 250
22010: PPUSH
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 251
22020: PPUSH
22021: LD_VAR 0 4
22025: PPUSH
22026: CALL_OW 495
// end ; end ;
22030: LD_VAR 0 2
22034: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22035: LD_INT 0
22037: PPUSH
// end ;
22038: LD_VAR 0 4
22042: RET
// export function SOS_Command ( cmd ) ; begin
22043: LD_INT 0
22045: PPUSH
// end ;
22046: LD_VAR 0 2
22050: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22051: LD_INT 0
22053: PPUSH
// if cmd = 121 then
22054: LD_VAR 0 1
22058: PUSH
22059: LD_INT 121
22061: EQUAL
22062: IFFALSE 22064
// end ;
22064: LD_VAR 0 6
22068: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22069: LD_INT 0
22071: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22072: LD_VAR 0 1
22076: PUSH
22077: LD_INT 250
22079: EQUAL
22080: PUSH
22081: LD_VAR 0 2
22085: PPUSH
22086: CALL_OW 264
22090: PUSH
22091: LD_EXP 59
22095: EQUAL
22096: AND
22097: IFFALSE 22118
// MinerPlaceMine ( unit , x , y ) ;
22099: LD_VAR 0 2
22103: PPUSH
22104: LD_VAR 0 4
22108: PPUSH
22109: LD_VAR 0 5
22113: PPUSH
22114: CALL 24467 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22118: LD_VAR 0 1
22122: PUSH
22123: LD_INT 251
22125: EQUAL
22126: PUSH
22127: LD_VAR 0 2
22131: PPUSH
22132: CALL_OW 264
22136: PUSH
22137: LD_EXP 59
22141: EQUAL
22142: AND
22143: IFFALSE 22164
// MinerDetonateMine ( unit , x , y ) ;
22145: LD_VAR 0 2
22149: PPUSH
22150: LD_VAR 0 4
22154: PPUSH
22155: LD_VAR 0 5
22159: PPUSH
22160: CALL 24744 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 252
22171: EQUAL
22172: PUSH
22173: LD_VAR 0 2
22177: PPUSH
22178: CALL_OW 264
22182: PUSH
22183: LD_EXP 59
22187: EQUAL
22188: AND
22189: IFFALSE 22210
// MinerCreateMinefield ( unit , x , y ) ;
22191: LD_VAR 0 2
22195: PPUSH
22196: LD_VAR 0 4
22200: PPUSH
22201: LD_VAR 0 5
22205: PPUSH
22206: CALL 25161 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22210: LD_VAR 0 1
22214: PUSH
22215: LD_INT 253
22217: EQUAL
22218: PUSH
22219: LD_VAR 0 2
22223: PPUSH
22224: CALL_OW 257
22228: PUSH
22229: LD_INT 5
22231: EQUAL
22232: AND
22233: IFFALSE 22254
// ComBinocular ( unit , x , y ) ;
22235: LD_VAR 0 2
22239: PPUSH
22240: LD_VAR 0 4
22244: PPUSH
22245: LD_VAR 0 5
22249: PPUSH
22250: CALL 25532 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22254: LD_VAR 0 1
22258: PUSH
22259: LD_INT 254
22261: EQUAL
22262: PUSH
22263: LD_VAR 0 2
22267: PPUSH
22268: CALL_OW 264
22272: PUSH
22273: LD_EXP 54
22277: EQUAL
22278: AND
22279: PUSH
22280: LD_VAR 0 3
22284: PPUSH
22285: CALL_OW 263
22289: PUSH
22290: LD_INT 3
22292: EQUAL
22293: AND
22294: IFFALSE 22310
// HackDestroyVehicle ( unit , selectedUnit ) ;
22296: LD_VAR 0 2
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: CALL 23827 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22310: LD_VAR 0 1
22314: PUSH
22315: LD_INT 255
22317: EQUAL
22318: PUSH
22319: LD_VAR 0 2
22323: PPUSH
22324: CALL_OW 264
22328: PUSH
22329: LD_INT 14
22331: PUSH
22332: LD_INT 53
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: IN
22339: AND
22340: PUSH
22341: LD_VAR 0 4
22345: PPUSH
22346: LD_VAR 0 5
22350: PPUSH
22351: CALL_OW 488
22355: AND
22356: IFFALSE 22380
// CutTreeXYR ( unit , x , y , 12 ) ;
22358: LD_VAR 0 2
22362: PPUSH
22363: LD_VAR 0 4
22367: PPUSH
22368: LD_VAR 0 5
22372: PPUSH
22373: LD_INT 12
22375: PPUSH
22376: CALL 22393 0 4
// end ;
22380: LD_VAR 0 6
22384: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
22385: LD_INT 0
22387: PPUSH
// end ;
22388: LD_VAR 0 4
22392: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22393: LD_INT 0
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22404: LD_VAR 0 1
22408: NOT
22409: PUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: LD_VAR 0 3
22419: PPUSH
22420: CALL_OW 488
22424: NOT
22425: OR
22426: PUSH
22427: LD_VAR 0 4
22431: NOT
22432: OR
22433: IFFALSE 22437
// exit ;
22435: GO 22777
// list := [ ] ;
22437: LD_ADDR_VAR 0 13
22441: PUSH
22442: EMPTY
22443: ST_TO_ADDR
// if x - r < 0 then
22444: LD_VAR 0 2
22448: PUSH
22449: LD_VAR 0 4
22453: MINUS
22454: PUSH
22455: LD_INT 0
22457: LESS
22458: IFFALSE 22470
// min_x := 0 else
22460: LD_ADDR_VAR 0 7
22464: PUSH
22465: LD_INT 0
22467: ST_TO_ADDR
22468: GO 22486
// min_x := x - r ;
22470: LD_ADDR_VAR 0 7
22474: PUSH
22475: LD_VAR 0 2
22479: PUSH
22480: LD_VAR 0 4
22484: MINUS
22485: ST_TO_ADDR
// if y - r < 0 then
22486: LD_VAR 0 3
22490: PUSH
22491: LD_VAR 0 4
22495: MINUS
22496: PUSH
22497: LD_INT 0
22499: LESS
22500: IFFALSE 22512
// min_y := 0 else
22502: LD_ADDR_VAR 0 8
22506: PUSH
22507: LD_INT 0
22509: ST_TO_ADDR
22510: GO 22528
// min_y := y - r ;
22512: LD_ADDR_VAR 0 8
22516: PUSH
22517: LD_VAR 0 3
22521: PUSH
22522: LD_VAR 0 4
22526: MINUS
22527: ST_TO_ADDR
// max_x := x + r ;
22528: LD_ADDR_VAR 0 9
22532: PUSH
22533: LD_VAR 0 2
22537: PUSH
22538: LD_VAR 0 4
22542: PLUS
22543: ST_TO_ADDR
// max_y := y + r ;
22544: LD_ADDR_VAR 0 10
22548: PUSH
22549: LD_VAR 0 3
22553: PUSH
22554: LD_VAR 0 4
22558: PLUS
22559: ST_TO_ADDR
// for _x = min_x to max_x do
22560: LD_ADDR_VAR 0 11
22564: PUSH
22565: DOUBLE
22566: LD_VAR 0 7
22570: DEC
22571: ST_TO_ADDR
22572: LD_VAR 0 9
22576: PUSH
22577: FOR_TO
22578: IFFALSE 22695
// for _y = min_y to max_y do
22580: LD_ADDR_VAR 0 12
22584: PUSH
22585: DOUBLE
22586: LD_VAR 0 8
22590: DEC
22591: ST_TO_ADDR
22592: LD_VAR 0 10
22596: PUSH
22597: FOR_TO
22598: IFFALSE 22691
// begin if not ValidHex ( _x , _y ) then
22600: LD_VAR 0 11
22604: PPUSH
22605: LD_VAR 0 12
22609: PPUSH
22610: CALL_OW 488
22614: NOT
22615: IFFALSE 22619
// continue ;
22617: GO 22597
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22619: LD_VAR 0 11
22623: PPUSH
22624: LD_VAR 0 12
22628: PPUSH
22629: CALL_OW 351
22633: PUSH
22634: LD_VAR 0 11
22638: PPUSH
22639: LD_VAR 0 12
22643: PPUSH
22644: CALL_OW 554
22648: AND
22649: IFFALSE 22689
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22651: LD_ADDR_VAR 0 13
22655: PUSH
22656: LD_VAR 0 13
22660: PPUSH
22661: LD_VAR 0 13
22665: PUSH
22666: LD_INT 1
22668: PLUS
22669: PPUSH
22670: LD_VAR 0 11
22674: PUSH
22675: LD_VAR 0 12
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PPUSH
22684: CALL_OW 2
22688: ST_TO_ADDR
// end ;
22689: GO 22597
22691: POP
22692: POP
22693: GO 22577
22695: POP
22696: POP
// if not list then
22697: LD_VAR 0 13
22701: NOT
22702: IFFALSE 22706
// exit ;
22704: GO 22777
// for i in list do
22706: LD_ADDR_VAR 0 6
22710: PUSH
22711: LD_VAR 0 13
22715: PUSH
22716: FOR_IN
22717: IFFALSE 22775
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_STRING M
22726: PUSH
22727: LD_VAR 0 6
22731: PUSH
22732: LD_INT 1
22734: ARRAY
22735: PUSH
22736: LD_VAR 0 6
22740: PUSH
22741: LD_INT 2
22743: ARRAY
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 0
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: PPUSH
22769: CALL_OW 447
22773: GO 22716
22775: POP
22776: POP
// end ;
22777: LD_VAR 0 5
22781: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22782: LD_EXP 127
22786: NOT
22787: IFFALSE 22837
22789: GO 22791
22791: DISABLE
// begin initHack := true ;
22792: LD_ADDR_EXP 127
22796: PUSH
22797: LD_INT 1
22799: ST_TO_ADDR
// hackTanks := [ ] ;
22800: LD_ADDR_EXP 128
22804: PUSH
22805: EMPTY
22806: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22807: LD_ADDR_EXP 129
22811: PUSH
22812: EMPTY
22813: ST_TO_ADDR
// hackLimit := 3 ;
22814: LD_ADDR_EXP 130
22818: PUSH
22819: LD_INT 3
22821: ST_TO_ADDR
// hackDist := 12 ;
22822: LD_ADDR_EXP 131
22826: PUSH
22827: LD_INT 12
22829: ST_TO_ADDR
// hackCounter := [ ] ;
22830: LD_ADDR_EXP 132
22834: PUSH
22835: EMPTY
22836: ST_TO_ADDR
// end ;
22837: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22838: LD_EXP 127
22842: PUSH
22843: LD_INT 34
22845: PUSH
22846: LD_EXP 54
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PPUSH
22855: CALL_OW 69
22859: AND
22860: IFFALSE 23115
22862: GO 22864
22864: DISABLE
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
// begin enable ;
22869: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22870: LD_ADDR_VAR 0 1
22874: PUSH
22875: LD_INT 34
22877: PUSH
22878: LD_EXP 54
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PPUSH
22887: CALL_OW 69
22891: PUSH
22892: FOR_IN
22893: IFFALSE 23113
// begin if not i in hackTanks then
22895: LD_VAR 0 1
22899: PUSH
22900: LD_EXP 128
22904: IN
22905: NOT
22906: IFFALSE 22989
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22908: LD_ADDR_EXP 128
22912: PUSH
22913: LD_EXP 128
22917: PPUSH
22918: LD_EXP 128
22922: PUSH
22923: LD_INT 1
22925: PLUS
22926: PPUSH
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 1
22936: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22937: LD_ADDR_EXP 129
22941: PUSH
22942: LD_EXP 129
22946: PPUSH
22947: LD_EXP 129
22951: PUSH
22952: LD_INT 1
22954: PLUS
22955: PPUSH
22956: EMPTY
22957: PPUSH
22958: CALL_OW 1
22962: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22963: LD_ADDR_EXP 132
22967: PUSH
22968: LD_EXP 132
22972: PPUSH
22973: LD_EXP 132
22977: PUSH
22978: LD_INT 1
22980: PLUS
22981: PPUSH
22982: EMPTY
22983: PPUSH
22984: CALL_OW 1
22988: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22989: LD_VAR 0 1
22993: PPUSH
22994: CALL_OW 302
22998: NOT
22999: IFFALSE 23012
// begin HackUnlinkAll ( i ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL 23118 0 1
// continue ;
23010: GO 22892
// end ; HackCheckCapturedStatus ( i ) ;
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL 23561 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23021: LD_ADDR_VAR 0 2
23025: PUSH
23026: LD_INT 81
23028: PUSH
23029: LD_VAR 0 1
23033: PPUSH
23034: CALL_OW 255
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 33
23045: PUSH
23046: LD_INT 3
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 91
23055: PUSH
23056: LD_VAR 0 1
23060: PUSH
23061: LD_EXP 131
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 50
23073: PUSH
23074: EMPTY
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PPUSH
23083: CALL_OW 69
23087: ST_TO_ADDR
// if not tmp then
23088: LD_VAR 0 2
23092: NOT
23093: IFFALSE 23097
// continue ;
23095: GO 22892
// HackLink ( i , tmp ) ;
23097: LD_VAR 0 1
23101: PPUSH
23102: LD_VAR 0 2
23106: PPUSH
23107: CALL 23254 0 2
// end ;
23111: GO 22892
23113: POP
23114: POP
// end ;
23115: PPOPN 2
23117: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
23122: PPUSH
// if not hack in hackTanks then
23123: LD_VAR 0 1
23127: PUSH
23128: LD_EXP 128
23132: IN
23133: NOT
23134: IFFALSE 23138
// exit ;
23136: GO 23249
// index := GetElementIndex ( hackTanks , hack ) ;
23138: LD_ADDR_VAR 0 4
23142: PUSH
23143: LD_EXP 128
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL 30683 0 2
23157: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23158: LD_EXP 129
23162: PUSH
23163: LD_VAR 0 4
23167: ARRAY
23168: IFFALSE 23249
// begin for i in hackTanksCaptured [ index ] do
23170: LD_ADDR_VAR 0 3
23174: PUSH
23175: LD_EXP 129
23179: PUSH
23180: LD_VAR 0 4
23184: ARRAY
23185: PUSH
23186: FOR_IN
23187: IFFALSE 23213
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23189: LD_VAR 0 3
23193: PUSH
23194: LD_INT 1
23196: ARRAY
23197: PPUSH
23198: LD_VAR 0 3
23202: PUSH
23203: LD_INT 2
23205: ARRAY
23206: PPUSH
23207: CALL_OW 235
23211: GO 23186
23213: POP
23214: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23215: LD_ADDR_EXP 129
23219: PUSH
23220: LD_EXP 129
23224: PPUSH
23225: LD_VAR 0 4
23229: PPUSH
23230: EMPTY
23231: PPUSH
23232: CALL_OW 1
23236: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23237: LD_VAR 0 1
23241: PPUSH
23242: LD_INT 0
23244: PPUSH
23245: CALL_OW 505
// end ; end ;
23249: LD_VAR 0 2
23253: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23254: LD_INT 0
23256: PPUSH
23257: PPUSH
23258: PPUSH
// if not hack in hackTanks or not vehicles then
23259: LD_VAR 0 1
23263: PUSH
23264: LD_EXP 128
23268: IN
23269: NOT
23270: PUSH
23271: LD_VAR 0 2
23275: NOT
23276: OR
23277: IFFALSE 23281
// exit ;
23279: GO 23556
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23281: LD_ADDR_VAR 0 2
23285: PUSH
23286: LD_VAR 0 1
23290: PPUSH
23291: LD_VAR 0 2
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: CALL 31333 0 4
23306: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23307: LD_ADDR_VAR 0 5
23311: PUSH
23312: LD_EXP 128
23316: PPUSH
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL 30683 0 2
23326: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23327: LD_EXP 129
23331: PUSH
23332: LD_VAR 0 5
23336: ARRAY
23337: PUSH
23338: LD_EXP 130
23342: LESS
23343: IFFALSE 23532
// begin for i := 1 to vehicles do
23345: LD_ADDR_VAR 0 4
23349: PUSH
23350: DOUBLE
23351: LD_INT 1
23353: DEC
23354: ST_TO_ADDR
23355: LD_VAR 0 2
23359: PUSH
23360: FOR_TO
23361: IFFALSE 23530
// begin if hackTanksCaptured [ index ] = hackLimit then
23363: LD_EXP 129
23367: PUSH
23368: LD_VAR 0 5
23372: ARRAY
23373: PUSH
23374: LD_EXP 130
23378: EQUAL
23379: IFFALSE 23383
// break ;
23381: GO 23530
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23383: LD_ADDR_EXP 132
23387: PUSH
23388: LD_EXP 132
23392: PPUSH
23393: LD_VAR 0 5
23397: PPUSH
23398: LD_EXP 132
23402: PUSH
23403: LD_VAR 0 5
23407: ARRAY
23408: PUSH
23409: LD_INT 1
23411: PLUS
23412: PPUSH
23413: CALL_OW 1
23417: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23418: LD_ADDR_EXP 129
23422: PUSH
23423: LD_EXP 129
23427: PPUSH
23428: LD_VAR 0 5
23432: PUSH
23433: LD_EXP 129
23437: PUSH
23438: LD_VAR 0 5
23442: ARRAY
23443: PUSH
23444: LD_INT 1
23446: PLUS
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PPUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_VAR 0 4
23461: ARRAY
23462: PUSH
23463: LD_VAR 0 2
23467: PUSH
23468: LD_VAR 0 4
23472: ARRAY
23473: PPUSH
23474: CALL_OW 255
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL 30898 0 3
23487: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23488: LD_VAR 0 2
23492: PUSH
23493: LD_VAR 0 4
23497: ARRAY
23498: PPUSH
23499: LD_VAR 0 1
23503: PPUSH
23504: CALL_OW 255
23508: PPUSH
23509: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23513: LD_VAR 0 2
23517: PUSH
23518: LD_VAR 0 4
23522: ARRAY
23523: PPUSH
23524: CALL_OW 141
// end ;
23528: GO 23360
23530: POP
23531: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_EXP 129
23541: PUSH
23542: LD_VAR 0 5
23546: ARRAY
23547: PUSH
23548: LD_INT 0
23550: PLUS
23551: PPUSH
23552: CALL_OW 505
// end ;
23556: LD_VAR 0 3
23560: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23561: LD_INT 0
23563: PPUSH
23564: PPUSH
23565: PPUSH
23566: PPUSH
// if not hack in hackTanks then
23567: LD_VAR 0 1
23571: PUSH
23572: LD_EXP 128
23576: IN
23577: NOT
23578: IFFALSE 23582
// exit ;
23580: GO 23822
// index := GetElementIndex ( hackTanks , hack ) ;
23582: LD_ADDR_VAR 0 4
23586: PUSH
23587: LD_EXP 128
23591: PPUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL 30683 0 2
23601: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23602: LD_ADDR_VAR 0 3
23606: PUSH
23607: DOUBLE
23608: LD_EXP 129
23612: PUSH
23613: LD_VAR 0 4
23617: ARRAY
23618: INC
23619: ST_TO_ADDR
23620: LD_INT 1
23622: PUSH
23623: FOR_DOWNTO
23624: IFFALSE 23796
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23626: LD_ADDR_VAR 0 5
23630: PUSH
23631: LD_EXP 129
23635: PUSH
23636: LD_VAR 0 4
23640: ARRAY
23641: PUSH
23642: LD_VAR 0 3
23646: ARRAY
23647: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23648: LD_VAR 0 5
23652: PUSH
23653: LD_INT 1
23655: ARRAY
23656: PPUSH
23657: CALL_OW 302
23661: NOT
23662: PUSH
23663: LD_VAR 0 5
23667: PUSH
23668: LD_INT 1
23670: ARRAY
23671: PPUSH
23672: CALL_OW 255
23676: PUSH
23677: LD_VAR 0 1
23681: PPUSH
23682: CALL_OW 255
23686: NONEQUAL
23687: OR
23688: IFFALSE 23794
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23690: LD_VAR 0 5
23694: PUSH
23695: LD_INT 1
23697: ARRAY
23698: PPUSH
23699: CALL_OW 305
23703: PUSH
23704: LD_VAR 0 5
23708: PUSH
23709: LD_INT 1
23711: ARRAY
23712: PPUSH
23713: CALL_OW 255
23717: PUSH
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL_OW 255
23727: EQUAL
23728: AND
23729: IFFALSE 23753
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23731: LD_VAR 0 5
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: PPUSH
23740: LD_VAR 0 5
23744: PUSH
23745: LD_INT 2
23747: ARRAY
23748: PPUSH
23749: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23753: LD_ADDR_EXP 129
23757: PUSH
23758: LD_EXP 129
23762: PPUSH
23763: LD_VAR 0 4
23767: PPUSH
23768: LD_EXP 129
23772: PUSH
23773: LD_VAR 0 4
23777: ARRAY
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: CALL_OW 3
23788: PPUSH
23789: CALL_OW 1
23793: ST_TO_ADDR
// end ; end ;
23794: GO 23623
23796: POP
23797: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23798: LD_VAR 0 1
23802: PPUSH
23803: LD_EXP 129
23807: PUSH
23808: LD_VAR 0 4
23812: ARRAY
23813: PUSH
23814: LD_INT 0
23816: PLUS
23817: PPUSH
23818: CALL_OW 505
// end ;
23822: LD_VAR 0 2
23826: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23827: LD_INT 0
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
// if not hack in hackTanks then
23833: LD_VAR 0 1
23837: PUSH
23838: LD_EXP 128
23842: IN
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 23933
// index := GetElementIndex ( hackTanks , hack ) ;
23848: LD_ADDR_VAR 0 5
23852: PUSH
23853: LD_EXP 128
23857: PPUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL 30683 0 2
23867: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23868: LD_ADDR_VAR 0 4
23872: PUSH
23873: DOUBLE
23874: LD_INT 1
23876: DEC
23877: ST_TO_ADDR
23878: LD_EXP 129
23882: PUSH
23883: LD_VAR 0 5
23887: ARRAY
23888: PUSH
23889: FOR_TO
23890: IFFALSE 23931
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23892: LD_EXP 129
23896: PUSH
23897: LD_VAR 0 5
23901: ARRAY
23902: PUSH
23903: LD_VAR 0 4
23907: ARRAY
23908: PUSH
23909: LD_INT 1
23911: ARRAY
23912: PUSH
23913: LD_VAR 0 2
23917: EQUAL
23918: IFFALSE 23929
// KillUnit ( vehicle ) ;
23920: LD_VAR 0 2
23924: PPUSH
23925: CALL_OW 66
23929: GO 23889
23931: POP
23932: POP
// end ;
23933: LD_VAR 0 3
23937: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23938: LD_EXP 133
23942: NOT
23943: IFFALSE 23978
23945: GO 23947
23947: DISABLE
// begin initMiner := true ;
23948: LD_ADDR_EXP 133
23952: PUSH
23953: LD_INT 1
23955: ST_TO_ADDR
// minersList := [ ] ;
23956: LD_ADDR_EXP 134
23960: PUSH
23961: EMPTY
23962: ST_TO_ADDR
// minerMinesList := [ ] ;
23963: LD_ADDR_EXP 135
23967: PUSH
23968: EMPTY
23969: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23970: LD_ADDR_EXP 136
23974: PUSH
23975: LD_INT 5
23977: ST_TO_ADDR
// end ;
23978: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23979: LD_EXP 133
23983: PUSH
23984: LD_INT 34
23986: PUSH
23987: LD_EXP 59
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PPUSH
23996: CALL_OW 69
24000: AND
24001: IFFALSE 24464
24003: GO 24005
24005: DISABLE
24006: LD_INT 0
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
// begin enable ;
24012: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24013: LD_ADDR_VAR 0 1
24017: PUSH
24018: LD_INT 34
24020: PUSH
24021: LD_EXP 59
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: PUSH
24035: FOR_IN
24036: IFFALSE 24108
// begin if not i in minersList then
24038: LD_VAR 0 1
24042: PUSH
24043: LD_EXP 134
24047: IN
24048: NOT
24049: IFFALSE 24106
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24051: LD_ADDR_EXP 134
24055: PUSH
24056: LD_EXP 134
24060: PPUSH
24061: LD_EXP 134
24065: PUSH
24066: LD_INT 1
24068: PLUS
24069: PPUSH
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 1
24079: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24080: LD_ADDR_EXP 135
24084: PUSH
24085: LD_EXP 135
24089: PPUSH
24090: LD_EXP 135
24094: PUSH
24095: LD_INT 1
24097: PLUS
24098: PPUSH
24099: EMPTY
24100: PPUSH
24101: CALL_OW 1
24105: ST_TO_ADDR
// end end ;
24106: GO 24035
24108: POP
24109: POP
// for i := minerMinesList downto 1 do
24110: LD_ADDR_VAR 0 1
24114: PUSH
24115: DOUBLE
24116: LD_EXP 135
24120: INC
24121: ST_TO_ADDR
24122: LD_INT 1
24124: PUSH
24125: FOR_DOWNTO
24126: IFFALSE 24462
// begin if IsLive ( minersList [ i ] ) then
24128: LD_EXP 134
24132: PUSH
24133: LD_VAR 0 1
24137: ARRAY
24138: PPUSH
24139: CALL_OW 300
24143: IFFALSE 24171
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24145: LD_EXP 134
24149: PUSH
24150: LD_VAR 0 1
24154: ARRAY
24155: PPUSH
24156: LD_EXP 135
24160: PUSH
24161: LD_VAR 0 1
24165: ARRAY
24166: PPUSH
24167: CALL_OW 505
// if not minerMinesList [ i ] then
24171: LD_EXP 135
24175: PUSH
24176: LD_VAR 0 1
24180: ARRAY
24181: NOT
24182: IFFALSE 24186
// continue ;
24184: GO 24125
// for j := minerMinesList [ i ] downto 1 do
24186: LD_ADDR_VAR 0 2
24190: PUSH
24191: DOUBLE
24192: LD_EXP 135
24196: PUSH
24197: LD_VAR 0 1
24201: ARRAY
24202: INC
24203: ST_TO_ADDR
24204: LD_INT 1
24206: PUSH
24207: FOR_DOWNTO
24208: IFFALSE 24458
// begin side := GetSide ( minersList [ i ] ) ;
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_EXP 134
24219: PUSH
24220: LD_VAR 0 1
24224: ARRAY
24225: PPUSH
24226: CALL_OW 255
24230: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24231: LD_ADDR_VAR 0 4
24235: PUSH
24236: LD_EXP 135
24240: PUSH
24241: LD_VAR 0 1
24245: ARRAY
24246: PUSH
24247: LD_VAR 0 2
24251: ARRAY
24252: PUSH
24253: LD_INT 1
24255: ARRAY
24256: PPUSH
24257: LD_EXP 135
24261: PUSH
24262: LD_VAR 0 1
24266: ARRAY
24267: PUSH
24268: LD_VAR 0 2
24272: ARRAY
24273: PUSH
24274: LD_INT 2
24276: ARRAY
24277: PPUSH
24278: CALL_OW 428
24282: ST_TO_ADDR
// if not tmp then
24283: LD_VAR 0 4
24287: NOT
24288: IFFALSE 24292
// continue ;
24290: GO 24207
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24292: LD_VAR 0 4
24296: PUSH
24297: LD_INT 81
24299: PUSH
24300: LD_VAR 0 3
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PPUSH
24309: CALL_OW 69
24313: IN
24314: PUSH
24315: LD_EXP 135
24319: PUSH
24320: LD_VAR 0 1
24324: ARRAY
24325: PUSH
24326: LD_VAR 0 2
24330: ARRAY
24331: PUSH
24332: LD_INT 1
24334: ARRAY
24335: PPUSH
24336: LD_EXP 135
24340: PUSH
24341: LD_VAR 0 1
24345: ARRAY
24346: PUSH
24347: LD_VAR 0 2
24351: ARRAY
24352: PUSH
24353: LD_INT 2
24355: ARRAY
24356: PPUSH
24357: CALL_OW 458
24361: AND
24362: IFFALSE 24456
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24364: LD_EXP 135
24368: PUSH
24369: LD_VAR 0 1
24373: ARRAY
24374: PUSH
24375: LD_VAR 0 2
24379: ARRAY
24380: PUSH
24381: LD_INT 1
24383: ARRAY
24384: PPUSH
24385: LD_EXP 135
24389: PUSH
24390: LD_VAR 0 1
24394: ARRAY
24395: PUSH
24396: LD_VAR 0 2
24400: ARRAY
24401: PUSH
24402: LD_INT 2
24404: ARRAY
24405: PPUSH
24406: LD_VAR 0 3
24410: PPUSH
24411: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24415: LD_ADDR_EXP 135
24419: PUSH
24420: LD_EXP 135
24424: PPUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: LD_EXP 135
24434: PUSH
24435: LD_VAR 0 1
24439: ARRAY
24440: PPUSH
24441: LD_VAR 0 2
24445: PPUSH
24446: CALL_OW 3
24450: PPUSH
24451: CALL_OW 1
24455: ST_TO_ADDR
// end ; end ;
24456: GO 24207
24458: POP
24459: POP
// end ;
24460: GO 24125
24462: POP
24463: POP
// end ;
24464: PPOPN 4
24466: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
// result := false ;
24471: LD_ADDR_VAR 0 4
24475: PUSH
24476: LD_INT 0
24478: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 264
24488: PUSH
24489: LD_EXP 59
24493: EQUAL
24494: NOT
24495: IFFALSE 24499
// exit ;
24497: GO 24739
// index := GetElementIndex ( minersList , unit ) ;
24499: LD_ADDR_VAR 0 5
24503: PUSH
24504: LD_EXP 134
24508: PPUSH
24509: LD_VAR 0 1
24513: PPUSH
24514: CALL 30683 0 2
24518: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24519: LD_EXP 135
24523: PUSH
24524: LD_VAR 0 5
24528: ARRAY
24529: PUSH
24530: LD_EXP 136
24534: GREATEREQUAL
24535: IFFALSE 24539
// exit ;
24537: GO 24739
// ComMoveXY ( unit , x , y ) ;
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_VAR 0 2
24548: PPUSH
24549: LD_VAR 0 3
24553: PPUSH
24554: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24558: LD_INT 35
24560: PPUSH
24561: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24565: LD_VAR 0 1
24569: PPUSH
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: CALL 61080 0 3
24584: NOT
24585: PUSH
24586: LD_VAR 0 1
24590: PPUSH
24591: CALL_OW 314
24595: AND
24596: IFFALSE 24600
// exit ;
24598: GO 24739
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24600: LD_VAR 0 2
24604: PPUSH
24605: LD_VAR 0 3
24609: PPUSH
24610: CALL_OW 428
24614: PUSH
24615: LD_VAR 0 1
24619: EQUAL
24620: PUSH
24621: LD_VAR 0 1
24625: PPUSH
24626: CALL_OW 314
24630: NOT
24631: AND
24632: IFFALSE 24558
// PlaySoundXY ( x , y , PlantMine ) ;
24634: LD_VAR 0 2
24638: PPUSH
24639: LD_VAR 0 3
24643: PPUSH
24644: LD_STRING PlantMine
24646: PPUSH
24647: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24651: LD_VAR 0 2
24655: PPUSH
24656: LD_VAR 0 3
24660: PPUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: CALL_OW 255
24670: PPUSH
24671: LD_INT 0
24673: PPUSH
24674: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24678: LD_ADDR_EXP 135
24682: PUSH
24683: LD_EXP 135
24687: PPUSH
24688: LD_VAR 0 5
24692: PUSH
24693: LD_EXP 135
24697: PUSH
24698: LD_VAR 0 5
24702: ARRAY
24703: PUSH
24704: LD_INT 1
24706: PLUS
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PPUSH
24712: LD_VAR 0 2
24716: PUSH
24717: LD_VAR 0 3
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PPUSH
24726: CALL 30898 0 3
24730: ST_TO_ADDR
// result := true ;
24731: LD_ADDR_VAR 0 4
24735: PUSH
24736: LD_INT 1
24738: ST_TO_ADDR
// end ;
24739: LD_VAR 0 4
24743: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24744: LD_INT 0
24746: PPUSH
24747: PPUSH
24748: PPUSH
// if not unit in minersList then
24749: LD_VAR 0 1
24753: PUSH
24754: LD_EXP 134
24758: IN
24759: NOT
24760: IFFALSE 24764
// exit ;
24762: GO 25156
// index := GetElementIndex ( minersList , unit ) ;
24764: LD_ADDR_VAR 0 6
24768: PUSH
24769: LD_EXP 134
24773: PPUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL 30683 0 2
24783: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24784: LD_ADDR_VAR 0 5
24788: PUSH
24789: DOUBLE
24790: LD_EXP 135
24794: PUSH
24795: LD_VAR 0 6
24799: ARRAY
24800: INC
24801: ST_TO_ADDR
24802: LD_INT 1
24804: PUSH
24805: FOR_DOWNTO
24806: IFFALSE 24967
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24808: LD_EXP 135
24812: PUSH
24813: LD_VAR 0 6
24817: ARRAY
24818: PUSH
24819: LD_VAR 0 5
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PUSH
24829: LD_VAR 0 2
24833: EQUAL
24834: PUSH
24835: LD_EXP 135
24839: PUSH
24840: LD_VAR 0 6
24844: ARRAY
24845: PUSH
24846: LD_VAR 0 5
24850: ARRAY
24851: PUSH
24852: LD_INT 2
24854: ARRAY
24855: PUSH
24856: LD_VAR 0 3
24860: EQUAL
24861: AND
24862: IFFALSE 24965
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24864: LD_EXP 135
24868: PUSH
24869: LD_VAR 0 6
24873: ARRAY
24874: PUSH
24875: LD_VAR 0 5
24879: ARRAY
24880: PUSH
24881: LD_INT 1
24883: ARRAY
24884: PPUSH
24885: LD_EXP 135
24889: PUSH
24890: LD_VAR 0 6
24894: ARRAY
24895: PUSH
24896: LD_VAR 0 5
24900: ARRAY
24901: PUSH
24902: LD_INT 2
24904: ARRAY
24905: PPUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 255
24915: PPUSH
24916: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24920: LD_ADDR_EXP 135
24924: PUSH
24925: LD_EXP 135
24929: PPUSH
24930: LD_VAR 0 6
24934: PPUSH
24935: LD_EXP 135
24939: PUSH
24940: LD_VAR 0 6
24944: ARRAY
24945: PPUSH
24946: LD_VAR 0 5
24950: PPUSH
24951: CALL_OW 3
24955: PPUSH
24956: CALL_OW 1
24960: ST_TO_ADDR
// exit ;
24961: POP
24962: POP
24963: GO 25156
// end ; end ;
24965: GO 24805
24967: POP
24968: POP
// for i := minerMinesList [ index ] downto 1 do
24969: LD_ADDR_VAR 0 5
24973: PUSH
24974: DOUBLE
24975: LD_EXP 135
24979: PUSH
24980: LD_VAR 0 6
24984: ARRAY
24985: INC
24986: ST_TO_ADDR
24987: LD_INT 1
24989: PUSH
24990: FOR_DOWNTO
24991: IFFALSE 25154
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24993: LD_EXP 135
24997: PUSH
24998: LD_VAR 0 6
25002: ARRAY
25003: PUSH
25004: LD_VAR 0 5
25008: ARRAY
25009: PUSH
25010: LD_INT 1
25012: ARRAY
25013: PPUSH
25014: LD_EXP 135
25018: PUSH
25019: LD_VAR 0 6
25023: ARRAY
25024: PUSH
25025: LD_VAR 0 5
25029: ARRAY
25030: PUSH
25031: LD_INT 2
25033: ARRAY
25034: PPUSH
25035: LD_VAR 0 2
25039: PPUSH
25040: LD_VAR 0 3
25044: PPUSH
25045: CALL_OW 298
25049: PUSH
25050: LD_INT 6
25052: LESS
25053: IFFALSE 25152
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25055: LD_EXP 135
25059: PUSH
25060: LD_VAR 0 6
25064: ARRAY
25065: PUSH
25066: LD_VAR 0 5
25070: ARRAY
25071: PUSH
25072: LD_INT 1
25074: ARRAY
25075: PPUSH
25076: LD_EXP 135
25080: PUSH
25081: LD_VAR 0 6
25085: ARRAY
25086: PUSH
25087: LD_VAR 0 5
25091: ARRAY
25092: PUSH
25093: LD_INT 2
25095: ARRAY
25096: PPUSH
25097: LD_VAR 0 1
25101: PPUSH
25102: CALL_OW 255
25106: PPUSH
25107: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25111: LD_ADDR_EXP 135
25115: PUSH
25116: LD_EXP 135
25120: PPUSH
25121: LD_VAR 0 6
25125: PPUSH
25126: LD_EXP 135
25130: PUSH
25131: LD_VAR 0 6
25135: ARRAY
25136: PPUSH
25137: LD_VAR 0 5
25141: PPUSH
25142: CALL_OW 3
25146: PPUSH
25147: CALL_OW 1
25151: ST_TO_ADDR
// end ; end ;
25152: GO 24990
25154: POP
25155: POP
// end ;
25156: LD_VAR 0 4
25160: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25161: LD_INT 0
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25172: LD_VAR 0 1
25176: PPUSH
25177: CALL_OW 264
25181: PUSH
25182: LD_EXP 59
25186: EQUAL
25187: NOT
25188: PUSH
25189: LD_VAR 0 1
25193: PUSH
25194: LD_EXP 134
25198: IN
25199: NOT
25200: OR
25201: IFFALSE 25205
// exit ;
25203: GO 25527
// index := GetElementIndex ( minersList , unit ) ;
25205: LD_ADDR_VAR 0 6
25209: PUSH
25210: LD_EXP 134
25214: PPUSH
25215: LD_VAR 0 1
25219: PPUSH
25220: CALL 30683 0 2
25224: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25225: LD_ADDR_VAR 0 8
25229: PUSH
25230: LD_EXP 136
25234: PUSH
25235: LD_EXP 135
25239: PUSH
25240: LD_VAR 0 6
25244: ARRAY
25245: MINUS
25246: ST_TO_ADDR
// if not minesFreeAmount then
25247: LD_VAR 0 8
25251: NOT
25252: IFFALSE 25256
// exit ;
25254: GO 25527
// tmp := [ ] ;
25256: LD_ADDR_VAR 0 7
25260: PUSH
25261: EMPTY
25262: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25263: LD_ADDR_VAR 0 5
25267: PUSH
25268: DOUBLE
25269: LD_INT 1
25271: DEC
25272: ST_TO_ADDR
25273: LD_VAR 0 8
25277: PUSH
25278: FOR_TO
25279: IFFALSE 25474
// begin _d := rand ( 0 , 5 ) ;
25281: LD_ADDR_VAR 0 11
25285: PUSH
25286: LD_INT 0
25288: PPUSH
25289: LD_INT 5
25291: PPUSH
25292: CALL_OW 12
25296: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25297: LD_ADDR_VAR 0 12
25301: PUSH
25302: LD_INT 2
25304: PPUSH
25305: LD_INT 6
25307: PPUSH
25308: CALL_OW 12
25312: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25313: LD_ADDR_VAR 0 9
25317: PUSH
25318: LD_VAR 0 2
25322: PPUSH
25323: LD_VAR 0 11
25327: PPUSH
25328: LD_VAR 0 12
25332: PPUSH
25333: CALL_OW 272
25337: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25338: LD_ADDR_VAR 0 10
25342: PUSH
25343: LD_VAR 0 3
25347: PPUSH
25348: LD_VAR 0 11
25352: PPUSH
25353: LD_VAR 0 12
25357: PPUSH
25358: CALL_OW 273
25362: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25363: LD_VAR 0 9
25367: PPUSH
25368: LD_VAR 0 10
25372: PPUSH
25373: CALL_OW 488
25377: PUSH
25378: LD_VAR 0 9
25382: PUSH
25383: LD_VAR 0 10
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_VAR 0 7
25396: IN
25397: NOT
25398: AND
25399: PUSH
25400: LD_VAR 0 9
25404: PPUSH
25405: LD_VAR 0 10
25409: PPUSH
25410: CALL_OW 458
25414: NOT
25415: AND
25416: IFFALSE 25458
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25418: LD_ADDR_VAR 0 7
25422: PUSH
25423: LD_VAR 0 7
25427: PPUSH
25428: LD_VAR 0 7
25432: PUSH
25433: LD_INT 1
25435: PLUS
25436: PPUSH
25437: LD_VAR 0 9
25441: PUSH
25442: LD_VAR 0 10
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 1
25455: ST_TO_ADDR
25456: GO 25472
// i := i - 1 ;
25458: LD_ADDR_VAR 0 5
25462: PUSH
25463: LD_VAR 0 5
25467: PUSH
25468: LD_INT 1
25470: MINUS
25471: ST_TO_ADDR
// end ;
25472: GO 25278
25474: POP
25475: POP
// for i in tmp do
25476: LD_ADDR_VAR 0 5
25480: PUSH
25481: LD_VAR 0 7
25485: PUSH
25486: FOR_IN
25487: IFFALSE 25525
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25489: LD_VAR 0 1
25493: PPUSH
25494: LD_VAR 0 5
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: LD_VAR 0 5
25507: PUSH
25508: LD_INT 2
25510: ARRAY
25511: PPUSH
25512: CALL 24467 0 3
25516: NOT
25517: IFFALSE 25523
// exit ;
25519: POP
25520: POP
25521: GO 25527
25523: GO 25486
25525: POP
25526: POP
// end ;
25527: LD_VAR 0 4
25531: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
25536: PPUSH
25537: PPUSH
25538: PPUSH
25539: PPUSH
25540: PPUSH
// if not GetClass ( unit ) = class_sniper then
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 257
25550: PUSH
25551: LD_INT 5
25553: EQUAL
25554: NOT
25555: IFFALSE 25559
// exit ;
25557: GO 25947
// dist := 8 ;
25559: LD_ADDR_VAR 0 5
25563: PUSH
25564: LD_INT 8
25566: ST_TO_ADDR
// viewRange := 12 ;
25567: LD_ADDR_VAR 0 7
25571: PUSH
25572: LD_INT 12
25574: ST_TO_ADDR
// side := GetSide ( unit ) ;
25575: LD_ADDR_VAR 0 6
25579: PUSH
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 255
25589: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25590: LD_INT 61
25592: PPUSH
25593: LD_VAR 0 6
25597: PPUSH
25598: CALL_OW 321
25602: PUSH
25603: LD_INT 2
25605: EQUAL
25606: IFFALSE 25616
// viewRange := 16 ;
25608: LD_ADDR_VAR 0 7
25612: PUSH
25613: LD_INT 16
25615: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25616: LD_VAR 0 1
25620: PPUSH
25621: LD_VAR 0 2
25625: PPUSH
25626: LD_VAR 0 3
25630: PPUSH
25631: CALL_OW 297
25635: PUSH
25636: LD_VAR 0 5
25640: GREATER
25641: IFFALSE 25720
// begin ComMoveXY ( unit , x , y ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_VAR 0 2
25652: PPUSH
25653: LD_VAR 0 3
25657: PPUSH
25658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25662: LD_INT 35
25664: PPUSH
25665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25669: LD_VAR 0 1
25673: PPUSH
25674: LD_VAR 0 2
25678: PPUSH
25679: LD_VAR 0 3
25683: PPUSH
25684: CALL 61080 0 3
25688: NOT
25689: IFFALSE 25693
// exit ;
25691: GO 25947
// until GetDistUnitXY ( unit , x , y ) < dist ;
25693: LD_VAR 0 1
25697: PPUSH
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_VAR 0 3
25707: PPUSH
25708: CALL_OW 297
25712: PUSH
25713: LD_VAR 0 5
25717: LESS
25718: IFFALSE 25662
// end ; ComTurnXY ( unit , x , y ) ;
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_VAR 0 2
25729: PPUSH
25730: LD_VAR 0 3
25734: PPUSH
25735: CALL_OW 118
// wait ( 5 ) ;
25739: LD_INT 5
25741: PPUSH
25742: CALL_OW 67
// _d := GetDir ( unit ) ;
25746: LD_ADDR_VAR 0 10
25750: PUSH
25751: LD_VAR 0 1
25755: PPUSH
25756: CALL_OW 254
25760: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25761: LD_ADDR_VAR 0 8
25765: PUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 250
25775: PPUSH
25776: LD_VAR 0 10
25780: PPUSH
25781: LD_VAR 0 5
25785: PPUSH
25786: CALL_OW 272
25790: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25791: LD_ADDR_VAR 0 9
25795: PUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: CALL_OW 251
25805: PPUSH
25806: LD_VAR 0 10
25810: PPUSH
25811: LD_VAR 0 5
25815: PPUSH
25816: CALL_OW 273
25820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25821: LD_VAR 0 8
25825: PPUSH
25826: LD_VAR 0 9
25830: PPUSH
25831: CALL_OW 488
25835: NOT
25836: IFFALSE 25840
// exit ;
25838: GO 25947
// ComAnimCustom ( unit , 1 ) ;
25840: LD_VAR 0 1
25844: PPUSH
25845: LD_INT 1
25847: PPUSH
25848: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25852: LD_VAR 0 8
25856: PPUSH
25857: LD_VAR 0 9
25861: PPUSH
25862: LD_VAR 0 6
25866: PPUSH
25867: LD_VAR 0 7
25871: PPUSH
25872: CALL_OW 330
// repeat wait ( 1 ) ;
25876: LD_INT 1
25878: PPUSH
25879: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25883: LD_VAR 0 1
25887: PPUSH
25888: CALL_OW 316
25892: PUSH
25893: LD_VAR 0 1
25897: PPUSH
25898: CALL_OW 314
25902: OR
25903: PUSH
25904: LD_VAR 0 1
25908: PPUSH
25909: CALL_OW 302
25913: NOT
25914: OR
25915: PUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 301
25925: OR
25926: IFFALSE 25876
// RemoveSeeing ( _x , _y , side ) ;
25928: LD_VAR 0 8
25932: PPUSH
25933: LD_VAR 0 9
25937: PPUSH
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 331
// end ; end_of_file
25947: LD_VAR 0 4
25951: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25952: LD_INT 0
25954: PPUSH
25955: PPUSH
// if exist_mode then
25956: LD_VAR 0 2
25960: IFFALSE 25985
// unit := CreateCharacter ( prefix & ident ) else
25962: LD_ADDR_VAR 0 5
25966: PUSH
25967: LD_VAR 0 3
25971: PUSH
25972: LD_VAR 0 1
25976: STR
25977: PPUSH
25978: CALL_OW 34
25982: ST_TO_ADDR
25983: GO 26000
// unit := NewCharacter ( ident ) ;
25985: LD_ADDR_VAR 0 5
25989: PUSH
25990: LD_VAR 0 1
25994: PPUSH
25995: CALL_OW 25
25999: ST_TO_ADDR
// result := unit ;
26000: LD_ADDR_VAR 0 4
26004: PUSH
26005: LD_VAR 0 5
26009: ST_TO_ADDR
// end ;
26010: LD_VAR 0 4
26014: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26015: LD_INT 0
26017: PPUSH
26018: PPUSH
// if not side or not nation then
26019: LD_VAR 0 1
26023: NOT
26024: PUSH
26025: LD_VAR 0 2
26029: NOT
26030: OR
26031: IFFALSE 26035
// exit ;
26033: GO 26799
// case nation of nation_american :
26035: LD_VAR 0 2
26039: PUSH
26040: LD_INT 1
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26262
26048: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26049: LD_ADDR_VAR 0 4
26053: PUSH
26054: LD_INT 35
26056: PUSH
26057: LD_INT 45
26059: PUSH
26060: LD_INT 46
26062: PUSH
26063: LD_INT 47
26065: PUSH
26066: LD_INT 82
26068: PUSH
26069: LD_INT 83
26071: PUSH
26072: LD_INT 84
26074: PUSH
26075: LD_INT 85
26077: PUSH
26078: LD_INT 86
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: LD_INT 2
26086: PUSH
26087: LD_INT 6
26089: PUSH
26090: LD_INT 15
26092: PUSH
26093: LD_INT 16
26095: PUSH
26096: LD_INT 7
26098: PUSH
26099: LD_INT 12
26101: PUSH
26102: LD_INT 13
26104: PUSH
26105: LD_INT 10
26107: PUSH
26108: LD_INT 14
26110: PUSH
26111: LD_INT 20
26113: PUSH
26114: LD_INT 21
26116: PUSH
26117: LD_INT 22
26119: PUSH
26120: LD_INT 25
26122: PUSH
26123: LD_INT 32
26125: PUSH
26126: LD_INT 27
26128: PUSH
26129: LD_INT 36
26131: PUSH
26132: LD_INT 69
26134: PUSH
26135: LD_INT 39
26137: PUSH
26138: LD_INT 34
26140: PUSH
26141: LD_INT 40
26143: PUSH
26144: LD_INT 48
26146: PUSH
26147: LD_INT 49
26149: PUSH
26150: LD_INT 50
26152: PUSH
26153: LD_INT 51
26155: PUSH
26156: LD_INT 52
26158: PUSH
26159: LD_INT 53
26161: PUSH
26162: LD_INT 54
26164: PUSH
26165: LD_INT 55
26167: PUSH
26168: LD_INT 56
26170: PUSH
26171: LD_INT 57
26173: PUSH
26174: LD_INT 58
26176: PUSH
26177: LD_INT 59
26179: PUSH
26180: LD_INT 60
26182: PUSH
26183: LD_INT 61
26185: PUSH
26186: LD_INT 62
26188: PUSH
26189: LD_INT 80
26191: PUSH
26192: LD_INT 82
26194: PUSH
26195: LD_INT 83
26197: PUSH
26198: LD_INT 84
26200: PUSH
26201: LD_INT 85
26203: PUSH
26204: LD_INT 86
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
26260: GO 26723
26262: LD_INT 2
26264: DOUBLE
26265: EQUAL
26266: IFTRUE 26270
26268: GO 26492
26270: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
26271: LD_ADDR_VAR 0 4
26275: PUSH
26276: LD_INT 35
26278: PUSH
26279: LD_INT 45
26281: PUSH
26282: LD_INT 46
26284: PUSH
26285: LD_INT 47
26287: PUSH
26288: LD_INT 82
26290: PUSH
26291: LD_INT 83
26293: PUSH
26294: LD_INT 84
26296: PUSH
26297: LD_INT 85
26299: PUSH
26300: LD_INT 87
26302: PUSH
26303: LD_INT 70
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: LD_INT 11
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: LD_INT 4
26317: PUSH
26318: LD_INT 5
26320: PUSH
26321: LD_INT 6
26323: PUSH
26324: LD_INT 15
26326: PUSH
26327: LD_INT 18
26329: PUSH
26330: LD_INT 7
26332: PUSH
26333: LD_INT 17
26335: PUSH
26336: LD_INT 8
26338: PUSH
26339: LD_INT 20
26341: PUSH
26342: LD_INT 21
26344: PUSH
26345: LD_INT 22
26347: PUSH
26348: LD_INT 72
26350: PUSH
26351: LD_INT 26
26353: PUSH
26354: LD_INT 69
26356: PUSH
26357: LD_INT 39
26359: PUSH
26360: LD_INT 40
26362: PUSH
26363: LD_INT 41
26365: PUSH
26366: LD_INT 42
26368: PUSH
26369: LD_INT 43
26371: PUSH
26372: LD_INT 48
26374: PUSH
26375: LD_INT 49
26377: PUSH
26378: LD_INT 50
26380: PUSH
26381: LD_INT 51
26383: PUSH
26384: LD_INT 52
26386: PUSH
26387: LD_INT 53
26389: PUSH
26390: LD_INT 54
26392: PUSH
26393: LD_INT 55
26395: PUSH
26396: LD_INT 56
26398: PUSH
26399: LD_INT 60
26401: PUSH
26402: LD_INT 61
26404: PUSH
26405: LD_INT 62
26407: PUSH
26408: LD_INT 66
26410: PUSH
26411: LD_INT 67
26413: PUSH
26414: LD_INT 68
26416: PUSH
26417: LD_INT 81
26419: PUSH
26420: LD_INT 82
26422: PUSH
26423: LD_INT 83
26425: PUSH
26426: LD_INT 84
26428: PUSH
26429: LD_INT 85
26431: PUSH
26432: LD_INT 87
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: ST_TO_ADDR
26490: GO 26723
26492: LD_INT 3
26494: DOUBLE
26495: EQUAL
26496: IFTRUE 26500
26498: GO 26722
26500: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26501: LD_ADDR_VAR 0 4
26505: PUSH
26506: LD_INT 46
26508: PUSH
26509: LD_INT 47
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 82
26520: PUSH
26521: LD_INT 83
26523: PUSH
26524: LD_INT 84
26526: PUSH
26527: LD_INT 85
26529: PUSH
26530: LD_INT 86
26532: PUSH
26533: LD_INT 11
26535: PUSH
26536: LD_INT 9
26538: PUSH
26539: LD_INT 20
26541: PUSH
26542: LD_INT 19
26544: PUSH
26545: LD_INT 21
26547: PUSH
26548: LD_INT 24
26550: PUSH
26551: LD_INT 22
26553: PUSH
26554: LD_INT 25
26556: PUSH
26557: LD_INT 28
26559: PUSH
26560: LD_INT 29
26562: PUSH
26563: LD_INT 30
26565: PUSH
26566: LD_INT 31
26568: PUSH
26569: LD_INT 37
26571: PUSH
26572: LD_INT 38
26574: PUSH
26575: LD_INT 32
26577: PUSH
26578: LD_INT 27
26580: PUSH
26581: LD_INT 33
26583: PUSH
26584: LD_INT 69
26586: PUSH
26587: LD_INT 39
26589: PUSH
26590: LD_INT 34
26592: PUSH
26593: LD_INT 40
26595: PUSH
26596: LD_INT 71
26598: PUSH
26599: LD_INT 23
26601: PUSH
26602: LD_INT 44
26604: PUSH
26605: LD_INT 48
26607: PUSH
26608: LD_INT 49
26610: PUSH
26611: LD_INT 50
26613: PUSH
26614: LD_INT 51
26616: PUSH
26617: LD_INT 52
26619: PUSH
26620: LD_INT 53
26622: PUSH
26623: LD_INT 54
26625: PUSH
26626: LD_INT 55
26628: PUSH
26629: LD_INT 56
26631: PUSH
26632: LD_INT 57
26634: PUSH
26635: LD_INT 58
26637: PUSH
26638: LD_INT 59
26640: PUSH
26641: LD_INT 63
26643: PUSH
26644: LD_INT 64
26646: PUSH
26647: LD_INT 65
26649: PUSH
26650: LD_INT 82
26652: PUSH
26653: LD_INT 83
26655: PUSH
26656: LD_INT 84
26658: PUSH
26659: LD_INT 85
26661: PUSH
26662: LD_INT 86
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: ST_TO_ADDR
26720: GO 26723
26722: POP
// if state > - 1 and state < 3 then
26723: LD_VAR 0 3
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: GREATER
26732: PUSH
26733: LD_VAR 0 3
26737: PUSH
26738: LD_INT 3
26740: LESS
26741: AND
26742: IFFALSE 26799
// for i in result do
26744: LD_ADDR_VAR 0 5
26748: PUSH
26749: LD_VAR 0 4
26753: PUSH
26754: FOR_IN
26755: IFFALSE 26797
// if GetTech ( i , side ) <> state then
26757: LD_VAR 0 5
26761: PPUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 321
26771: PUSH
26772: LD_VAR 0 3
26776: NONEQUAL
26777: IFFALSE 26795
// result := result diff i ;
26779: LD_ADDR_VAR 0 4
26783: PUSH
26784: LD_VAR 0 4
26788: PUSH
26789: LD_VAR 0 5
26793: DIFF
26794: ST_TO_ADDR
26795: GO 26754
26797: POP
26798: POP
// end ;
26799: LD_VAR 0 4
26803: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
26808: PPUSH
// result := true ;
26809: LD_ADDR_VAR 0 3
26813: PUSH
26814: LD_INT 1
26816: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26817: LD_ADDR_VAR 0 5
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: CALL_OW 480
26831: ST_TO_ADDR
// if not tmp then
26832: LD_VAR 0 5
26836: NOT
26837: IFFALSE 26841
// exit ;
26839: GO 26890
// for i in tmp do
26841: LD_ADDR_VAR 0 4
26845: PUSH
26846: LD_VAR 0 5
26850: PUSH
26851: FOR_IN
26852: IFFALSE 26888
// if GetTech ( i , side ) <> state_researched then
26854: LD_VAR 0 4
26858: PPUSH
26859: LD_VAR 0 1
26863: PPUSH
26864: CALL_OW 321
26868: PUSH
26869: LD_INT 2
26871: NONEQUAL
26872: IFFALSE 26886
// begin result := false ;
26874: LD_ADDR_VAR 0 3
26878: PUSH
26879: LD_INT 0
26881: ST_TO_ADDR
// exit ;
26882: POP
26883: POP
26884: GO 26890
// end ;
26886: GO 26851
26888: POP
26889: POP
// end ;
26890: LD_VAR 0 3
26894: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
26899: PPUSH
26900: PPUSH
26901: PPUSH
26902: PPUSH
26903: PPUSH
26904: PPUSH
26905: PPUSH
26906: PPUSH
26907: PPUSH
26908: PPUSH
26909: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26910: LD_VAR 0 1
26914: NOT
26915: PUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 257
26925: PUSH
26926: LD_INT 9
26928: NONEQUAL
26929: OR
26930: IFFALSE 26934
// exit ;
26932: GO 27507
// side := GetSide ( unit ) ;
26934: LD_ADDR_VAR 0 9
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 255
26948: ST_TO_ADDR
// tech_space := tech_spacanom ;
26949: LD_ADDR_VAR 0 12
26953: PUSH
26954: LD_INT 29
26956: ST_TO_ADDR
// tech_time := tech_taurad ;
26957: LD_ADDR_VAR 0 13
26961: PUSH
26962: LD_INT 28
26964: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26965: LD_ADDR_VAR 0 11
26969: PUSH
26970: LD_VAR 0 1
26974: PPUSH
26975: CALL_OW 310
26979: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26980: LD_VAR 0 11
26984: PPUSH
26985: CALL_OW 247
26989: PUSH
26990: LD_INT 2
26992: EQUAL
26993: IFFALSE 26997
// exit ;
26995: GO 27507
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26997: LD_ADDR_VAR 0 8
27001: PUSH
27002: LD_INT 81
27004: PUSH
27005: LD_VAR 0 9
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 3
27016: PUSH
27017: LD_INT 21
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PPUSH
27035: CALL_OW 69
27039: ST_TO_ADDR
// if not tmp then
27040: LD_VAR 0 8
27044: NOT
27045: IFFALSE 27049
// exit ;
27047: GO 27507
// if in_unit then
27049: LD_VAR 0 11
27053: IFFALSE 27077
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27055: LD_ADDR_VAR 0 10
27059: PUSH
27060: LD_VAR 0 8
27064: PPUSH
27065: LD_VAR 0 11
27069: PPUSH
27070: CALL_OW 74
27074: ST_TO_ADDR
27075: GO 27097
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27077: LD_ADDR_VAR 0 10
27081: PUSH
27082: LD_VAR 0 8
27086: PPUSH
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 74
27096: ST_TO_ADDR
// if not enemy then
27097: LD_VAR 0 10
27101: NOT
27102: IFFALSE 27106
// exit ;
27104: GO 27507
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27106: LD_VAR 0 11
27110: PUSH
27111: LD_VAR 0 11
27115: PPUSH
27116: LD_VAR 0 10
27120: PPUSH
27121: CALL_OW 296
27125: PUSH
27126: LD_INT 13
27128: GREATER
27129: AND
27130: PUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: LD_VAR 0 10
27140: PPUSH
27141: CALL_OW 296
27145: PUSH
27146: LD_INT 12
27148: GREATER
27149: OR
27150: IFFALSE 27154
// exit ;
27152: GO 27507
// missile := [ 1 ] ;
27154: LD_ADDR_VAR 0 14
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27165: LD_VAR 0 9
27169: PPUSH
27170: LD_VAR 0 12
27174: PPUSH
27175: CALL_OW 325
27179: IFFALSE 27208
// missile := Insert ( missile , missile + 1 , 2 ) ;
27181: LD_ADDR_VAR 0 14
27185: PUSH
27186: LD_VAR 0 14
27190: PPUSH
27191: LD_VAR 0 14
27195: PUSH
27196: LD_INT 1
27198: PLUS
27199: PPUSH
27200: LD_INT 2
27202: PPUSH
27203: CALL_OW 2
27207: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27208: LD_VAR 0 9
27212: PPUSH
27213: LD_VAR 0 13
27217: PPUSH
27218: CALL_OW 325
27222: PUSH
27223: LD_VAR 0 10
27227: PPUSH
27228: CALL_OW 255
27232: PPUSH
27233: LD_VAR 0 13
27237: PPUSH
27238: CALL_OW 325
27242: NOT
27243: AND
27244: IFFALSE 27273
// missile := Insert ( missile , missile + 1 , 3 ) ;
27246: LD_ADDR_VAR 0 14
27250: PUSH
27251: LD_VAR 0 14
27255: PPUSH
27256: LD_VAR 0 14
27260: PUSH
27261: LD_INT 1
27263: PLUS
27264: PPUSH
27265: LD_INT 3
27267: PPUSH
27268: CALL_OW 2
27272: ST_TO_ADDR
// if missile < 2 then
27273: LD_VAR 0 14
27277: PUSH
27278: LD_INT 2
27280: LESS
27281: IFFALSE 27285
// exit ;
27283: GO 27507
// x := GetX ( enemy ) ;
27285: LD_ADDR_VAR 0 4
27289: PUSH
27290: LD_VAR 0 10
27294: PPUSH
27295: CALL_OW 250
27299: ST_TO_ADDR
// y := GetY ( enemy ) ;
27300: LD_ADDR_VAR 0 5
27304: PUSH
27305: LD_VAR 0 10
27309: PPUSH
27310: CALL_OW 251
27314: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27315: LD_ADDR_VAR 0 6
27319: PUSH
27320: LD_VAR 0 4
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PPUSH
27329: LD_INT 1
27331: PPUSH
27332: CALL_OW 12
27336: PLUS
27337: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27338: LD_ADDR_VAR 0 7
27342: PUSH
27343: LD_VAR 0 5
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PPUSH
27352: LD_INT 1
27354: PPUSH
27355: CALL_OW 12
27359: PLUS
27360: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27361: LD_VAR 0 6
27365: PPUSH
27366: LD_VAR 0 7
27370: PPUSH
27371: CALL_OW 488
27375: NOT
27376: IFFALSE 27398
// begin _x := x ;
27378: LD_ADDR_VAR 0 6
27382: PUSH
27383: LD_VAR 0 4
27387: ST_TO_ADDR
// _y := y ;
27388: LD_ADDR_VAR 0 7
27392: PUSH
27393: LD_VAR 0 5
27397: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27398: LD_ADDR_VAR 0 3
27402: PUSH
27403: LD_INT 1
27405: PPUSH
27406: LD_VAR 0 14
27410: PPUSH
27411: CALL_OW 12
27415: ST_TO_ADDR
// case i of 1 :
27416: LD_VAR 0 3
27420: PUSH
27421: LD_INT 1
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27429
27427: GO 27446
27429: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27430: LD_VAR 0 1
27434: PPUSH
27435: LD_VAR 0 10
27439: PPUSH
27440: CALL_OW 115
27444: GO 27507
27446: LD_INT 2
27448: DOUBLE
27449: EQUAL
27450: IFTRUE 27454
27452: GO 27476
27454: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 6
27464: PPUSH
27465: LD_VAR 0 7
27469: PPUSH
27470: CALL_OW 153
27474: GO 27507
27476: LD_INT 3
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27484
27482: GO 27506
27484: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27485: LD_VAR 0 1
27489: PPUSH
27490: LD_VAR 0 6
27494: PPUSH
27495: LD_VAR 0 7
27499: PPUSH
27500: CALL_OW 154
27504: GO 27507
27506: POP
// end ;
27507: LD_VAR 0 2
27511: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27512: LD_INT 0
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
27518: PPUSH
27519: PPUSH
// if not unit or not building then
27520: LD_VAR 0 1
27524: NOT
27525: PUSH
27526: LD_VAR 0 2
27530: NOT
27531: OR
27532: IFFALSE 27536
// exit ;
27534: GO 27694
// x := GetX ( building ) ;
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_VAR 0 2
27545: PPUSH
27546: CALL_OW 250
27550: ST_TO_ADDR
// y := GetY ( building ) ;
27551: LD_ADDR_VAR 0 6
27555: PUSH
27556: LD_VAR 0 2
27560: PPUSH
27561: CALL_OW 251
27565: ST_TO_ADDR
// for i = 0 to 5 do
27566: LD_ADDR_VAR 0 4
27570: PUSH
27571: DOUBLE
27572: LD_INT 0
27574: DEC
27575: ST_TO_ADDR
27576: LD_INT 5
27578: PUSH
27579: FOR_TO
27580: IFFALSE 27692
// begin _x := ShiftX ( x , i , 3 ) ;
27582: LD_ADDR_VAR 0 7
27586: PUSH
27587: LD_VAR 0 5
27591: PPUSH
27592: LD_VAR 0 4
27596: PPUSH
27597: LD_INT 3
27599: PPUSH
27600: CALL_OW 272
27604: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27605: LD_ADDR_VAR 0 8
27609: PUSH
27610: LD_VAR 0 6
27614: PPUSH
27615: LD_VAR 0 4
27619: PPUSH
27620: LD_INT 3
27622: PPUSH
27623: CALL_OW 273
27627: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27628: LD_VAR 0 7
27632: PPUSH
27633: LD_VAR 0 8
27637: PPUSH
27638: CALL_OW 488
27642: NOT
27643: IFFALSE 27647
// continue ;
27645: GO 27579
// if HexInfo ( _x , _y ) = 0 then
27647: LD_VAR 0 7
27651: PPUSH
27652: LD_VAR 0 8
27656: PPUSH
27657: CALL_OW 428
27661: PUSH
27662: LD_INT 0
27664: EQUAL
27665: IFFALSE 27690
// begin ComMoveXY ( unit , _x , _y ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: LD_VAR 0 7
27676: PPUSH
27677: LD_VAR 0 8
27681: PPUSH
27682: CALL_OW 111
// exit ;
27686: POP
27687: POP
27688: GO 27694
// end ; end ;
27690: GO 27579
27692: POP
27693: POP
// end ;
27694: LD_VAR 0 3
27698: RET
// export function ScanBase ( side , base_area ) ; begin
27699: LD_INT 0
27701: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27702: LD_ADDR_VAR 0 3
27706: PUSH
27707: LD_VAR 0 2
27711: PPUSH
27712: LD_INT 81
27714: PUSH
27715: LD_VAR 0 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL_OW 70
27728: ST_TO_ADDR
// end ;
27729: LD_VAR 0 3
27733: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27734: LD_INT 0
27736: PPUSH
27737: PPUSH
27738: PPUSH
27739: PPUSH
// result := false ;
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_INT 0
27747: ST_TO_ADDR
// side := GetSide ( unit ) ;
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_VAR 0 1
27757: PPUSH
27758: CALL_OW 255
27762: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27763: LD_ADDR_VAR 0 4
27767: PUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 248
27777: ST_TO_ADDR
// case nat of 1 :
27778: LD_VAR 0 4
27782: PUSH
27783: LD_INT 1
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27791
27789: GO 27802
27791: POP
// tech := tech_lassight ; 2 :
27792: LD_ADDR_VAR 0 5
27796: PUSH
27797: LD_INT 12
27799: ST_TO_ADDR
27800: GO 27841
27802: LD_INT 2
27804: DOUBLE
27805: EQUAL
27806: IFTRUE 27810
27808: GO 27821
27810: POP
// tech := tech_mortar ; 3 :
27811: LD_ADDR_VAR 0 5
27815: PUSH
27816: LD_INT 41
27818: ST_TO_ADDR
27819: GO 27841
27821: LD_INT 3
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27840
27829: POP
// tech := tech_bazooka ; end ;
27830: LD_ADDR_VAR 0 5
27834: PUSH
27835: LD_INT 44
27837: ST_TO_ADDR
27838: GO 27841
27840: POP
// if Researched ( side , tech ) then
27841: LD_VAR 0 3
27845: PPUSH
27846: LD_VAR 0 5
27850: PPUSH
27851: CALL_OW 325
27855: IFFALSE 27882
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27857: LD_ADDR_VAR 0 2
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: LD_INT 8
27867: PUSH
27868: LD_INT 9
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: PUSH
27876: LD_VAR 0 4
27880: ARRAY
27881: ST_TO_ADDR
// end ;
27882: LD_VAR 0 2
27886: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27887: LD_INT 0
27889: PPUSH
27890: PPUSH
27891: PPUSH
// if not mines then
27892: LD_VAR 0 2
27896: NOT
27897: IFFALSE 27901
// exit ;
27899: GO 28045
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27901: LD_ADDR_VAR 0 5
27905: PUSH
27906: LD_INT 81
27908: PUSH
27909: LD_VAR 0 1
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: LD_INT 21
27923: PUSH
27924: LD_INT 3
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PPUSH
27939: CALL_OW 69
27943: ST_TO_ADDR
// for i in mines do
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_VAR 0 2
27953: PUSH
27954: FOR_IN
27955: IFFALSE 28043
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27957: LD_VAR 0 4
27961: PUSH
27962: LD_INT 1
27964: ARRAY
27965: PPUSH
27966: LD_VAR 0 4
27970: PUSH
27971: LD_INT 2
27973: ARRAY
27974: PPUSH
27975: CALL_OW 458
27979: NOT
27980: IFFALSE 27984
// continue ;
27982: GO 27954
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27984: LD_VAR 0 4
27988: PUSH
27989: LD_INT 1
27991: ARRAY
27992: PPUSH
27993: LD_VAR 0 4
27997: PUSH
27998: LD_INT 2
28000: ARRAY
28001: PPUSH
28002: CALL_OW 428
28006: PUSH
28007: LD_VAR 0 5
28011: IN
28012: IFFALSE 28041
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28014: LD_VAR 0 4
28018: PUSH
28019: LD_INT 1
28021: ARRAY
28022: PPUSH
28023: LD_VAR 0 4
28027: PUSH
28028: LD_INT 2
28030: ARRAY
28031: PPUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 456
// end ;
28041: GO 27954
28043: POP
28044: POP
// end ;
28045: LD_VAR 0 3
28049: RET
// export function Count ( array ) ; var i ; begin
28050: LD_INT 0
28052: PPUSH
28053: PPUSH
// result := 0 ;
28054: LD_ADDR_VAR 0 2
28058: PUSH
28059: LD_INT 0
28061: ST_TO_ADDR
// for i in array do
28062: LD_ADDR_VAR 0 3
28066: PUSH
28067: LD_VAR 0 1
28071: PUSH
28072: FOR_IN
28073: IFFALSE 28097
// if i then
28075: LD_VAR 0 3
28079: IFFALSE 28095
// result := result + 1 ;
28081: LD_ADDR_VAR 0 2
28085: PUSH
28086: LD_VAR 0 2
28090: PUSH
28091: LD_INT 1
28093: PLUS
28094: ST_TO_ADDR
28095: GO 28072
28097: POP
28098: POP
// end ;
28099: LD_VAR 0 2
28103: RET
// export function IsEmpty ( building ) ; begin
28104: LD_INT 0
28106: PPUSH
// if not building then
28107: LD_VAR 0 1
28111: NOT
28112: IFFALSE 28116
// exit ;
28114: GO 28159
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28116: LD_ADDR_VAR 0 2
28120: PUSH
28121: LD_VAR 0 1
28125: PUSH
28126: LD_INT 22
28128: PUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 255
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 58
28145: PUSH
28146: EMPTY
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PPUSH
28153: CALL_OW 69
28157: IN
28158: ST_TO_ADDR
// end ;
28159: LD_VAR 0 2
28163: RET
// export function IsNotFull ( building ) ; begin
28164: LD_INT 0
28166: PPUSH
// if not building then
28167: LD_VAR 0 1
28171: NOT
28172: IFFALSE 28176
// exit ;
28174: GO 28195
// result := UnitsInside ( building ) < 6 ;
28176: LD_ADDR_VAR 0 2
28180: PUSH
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 313
28190: PUSH
28191: LD_INT 6
28193: LESS
28194: ST_TO_ADDR
// end ;
28195: LD_VAR 0 2
28199: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28200: LD_INT 0
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
// tmp := [ ] ;
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: EMPTY
28212: ST_TO_ADDR
// list := [ ] ;
28213: LD_ADDR_VAR 0 5
28217: PUSH
28218: EMPTY
28219: ST_TO_ADDR
// for i = 16 to 25 do
28220: LD_ADDR_VAR 0 4
28224: PUSH
28225: DOUBLE
28226: LD_INT 16
28228: DEC
28229: ST_TO_ADDR
28230: LD_INT 25
28232: PUSH
28233: FOR_TO
28234: IFFALSE 28307
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28236: LD_ADDR_VAR 0 3
28240: PUSH
28241: LD_VAR 0 3
28245: PUSH
28246: LD_INT 22
28248: PUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 255
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 91
28265: PUSH
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 6
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 30
28281: PUSH
28282: LD_VAR 0 4
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: PPUSH
28299: CALL_OW 69
28303: ADD
28304: ST_TO_ADDR
28305: GO 28233
28307: POP
28308: POP
// for i = 1 to tmp do
28309: LD_ADDR_VAR 0 4
28313: PUSH
28314: DOUBLE
28315: LD_INT 1
28317: DEC
28318: ST_TO_ADDR
28319: LD_VAR 0 3
28323: PUSH
28324: FOR_TO
28325: IFFALSE 28413
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_VAR 0 5
28336: PUSH
28337: LD_VAR 0 3
28341: PUSH
28342: LD_VAR 0 4
28346: ARRAY
28347: PPUSH
28348: CALL_OW 266
28352: PUSH
28353: LD_VAR 0 3
28357: PUSH
28358: LD_VAR 0 4
28362: ARRAY
28363: PPUSH
28364: CALL_OW 250
28368: PUSH
28369: LD_VAR 0 3
28373: PUSH
28374: LD_VAR 0 4
28378: ARRAY
28379: PPUSH
28380: CALL_OW 251
28384: PUSH
28385: LD_VAR 0 3
28389: PUSH
28390: LD_VAR 0 4
28394: ARRAY
28395: PPUSH
28396: CALL_OW 254
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: ADD
28410: ST_TO_ADDR
28411: GO 28324
28413: POP
28414: POP
// result := list ;
28415: LD_ADDR_VAR 0 2
28419: PUSH
28420: LD_VAR 0 5
28424: ST_TO_ADDR
// end ;
28425: LD_VAR 0 2
28429: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28430: LD_INT 0
28432: PPUSH
28433: PPUSH
28434: PPUSH
28435: PPUSH
28436: PPUSH
28437: PPUSH
28438: PPUSH
// if not factory then
28439: LD_VAR 0 1
28443: NOT
28444: IFFALSE 28448
// exit ;
28446: GO 29041
// if control = control_apeman then
28448: LD_VAR 0 4
28452: PUSH
28453: LD_INT 5
28455: EQUAL
28456: IFFALSE 28565
// begin tmp := UnitsInside ( factory ) ;
28458: LD_ADDR_VAR 0 8
28462: PUSH
28463: LD_VAR 0 1
28467: PPUSH
28468: CALL_OW 313
28472: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28473: LD_VAR 0 8
28477: PPUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 12
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 72
28492: NOT
28493: IFFALSE 28503
// control := control_manual ;
28495: LD_ADDR_VAR 0 4
28499: PUSH
28500: LD_INT 1
28502: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28503: LD_ADDR_VAR 0 8
28507: PUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL 28200 0 1
28517: ST_TO_ADDR
// if tmp then
28518: LD_VAR 0 8
28522: IFFALSE 28565
// begin for i in tmp do
28524: LD_ADDR_VAR 0 7
28528: PUSH
28529: LD_VAR 0 8
28533: PUSH
28534: FOR_IN
28535: IFFALSE 28563
// if i [ 1 ] = b_ext_radio then
28537: LD_VAR 0 7
28541: PUSH
28542: LD_INT 1
28544: ARRAY
28545: PUSH
28546: LD_INT 22
28548: EQUAL
28549: IFFALSE 28561
// begin control := control_remote ;
28551: LD_ADDR_VAR 0 4
28555: PUSH
28556: LD_INT 2
28558: ST_TO_ADDR
// break ;
28559: GO 28563
// end ;
28561: GO 28534
28563: POP
28564: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28565: LD_VAR 0 1
28569: PPUSH
28570: LD_VAR 0 2
28574: PPUSH
28575: LD_VAR 0 3
28579: PPUSH
28580: LD_VAR 0 4
28584: PPUSH
28585: LD_VAR 0 5
28589: PPUSH
28590: CALL_OW 448
28594: IFFALSE 28629
// begin result := [ chassis , engine , control , weapon ] ;
28596: LD_ADDR_VAR 0 6
28600: PUSH
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 3
28610: PUSH
28611: LD_VAR 0 4
28615: PUSH
28616: LD_VAR 0 5
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// exit ;
28627: GO 29041
// end ; _chassis := AvailableChassisList ( factory ) ;
28629: LD_ADDR_VAR 0 9
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 475
28643: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28644: LD_ADDR_VAR 0 11
28648: PUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 476
28658: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28659: LD_ADDR_VAR 0 12
28663: PUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 477
28673: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 478
28688: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28689: LD_VAR 0 9
28693: NOT
28694: PUSH
28695: LD_VAR 0 11
28699: NOT
28700: OR
28701: PUSH
28702: LD_VAR 0 12
28706: NOT
28707: OR
28708: PUSH
28709: LD_VAR 0 10
28713: NOT
28714: OR
28715: IFFALSE 28750
// begin result := [ chassis , engine , control , weapon ] ;
28717: LD_ADDR_VAR 0 6
28721: PUSH
28722: LD_VAR 0 2
28726: PUSH
28727: LD_VAR 0 3
28731: PUSH
28732: LD_VAR 0 4
28736: PUSH
28737: LD_VAR 0 5
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// exit ;
28748: GO 29041
// end ; if not chassis in _chassis then
28750: LD_VAR 0 2
28754: PUSH
28755: LD_VAR 0 9
28759: IN
28760: NOT
28761: IFFALSE 28787
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28763: LD_ADDR_VAR 0 2
28767: PUSH
28768: LD_VAR 0 9
28772: PUSH
28773: LD_INT 1
28775: PPUSH
28776: LD_VAR 0 9
28780: PPUSH
28781: CALL_OW 12
28785: ARRAY
28786: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28787: LD_VAR 0 2
28791: PPUSH
28792: LD_VAR 0 3
28796: PPUSH
28797: CALL 29046 0 2
28801: NOT
28802: IFFALSE 28861
// repeat engine := _engine [ 1 ] ;
28804: LD_ADDR_VAR 0 3
28808: PUSH
28809: LD_VAR 0 11
28813: PUSH
28814: LD_INT 1
28816: ARRAY
28817: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28818: LD_ADDR_VAR 0 11
28822: PUSH
28823: LD_VAR 0 11
28827: PPUSH
28828: LD_INT 1
28830: PPUSH
28831: CALL_OW 3
28835: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_VAR 0 3
28845: PPUSH
28846: CALL 29046 0 2
28850: PUSH
28851: LD_VAR 0 11
28855: PUSH
28856: EMPTY
28857: EQUAL
28858: OR
28859: IFFALSE 28804
// if not control in _control then
28861: LD_VAR 0 4
28865: PUSH
28866: LD_VAR 0 12
28870: IN
28871: NOT
28872: IFFALSE 28898
// control := _control [ rand ( 1 , _control ) ] ;
28874: LD_ADDR_VAR 0 4
28878: PUSH
28879: LD_VAR 0 12
28883: PUSH
28884: LD_INT 1
28886: PPUSH
28887: LD_VAR 0 12
28891: PPUSH
28892: CALL_OW 12
28896: ARRAY
28897: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28898: LD_VAR 0 2
28902: PPUSH
28903: LD_VAR 0 5
28907: PPUSH
28908: CALL 29266 0 2
28912: NOT
28913: IFFALSE 28972
// repeat weapon := _weapon [ 1 ] ;
28915: LD_ADDR_VAR 0 5
28919: PUSH
28920: LD_VAR 0 10
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28929: LD_ADDR_VAR 0 10
28933: PUSH
28934: LD_VAR 0 10
28938: PPUSH
28939: LD_INT 1
28941: PPUSH
28942: CALL_OW 3
28946: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28947: LD_VAR 0 2
28951: PPUSH
28952: LD_VAR 0 5
28956: PPUSH
28957: CALL 29266 0 2
28961: PUSH
28962: LD_VAR 0 10
28966: PUSH
28967: EMPTY
28968: EQUAL
28969: OR
28970: IFFALSE 28915
// result := [ ] ;
28972: LD_ADDR_VAR 0 6
28976: PUSH
28977: EMPTY
28978: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 2
28988: PPUSH
28989: LD_VAR 0 3
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: LD_VAR 0 5
29003: PPUSH
29004: CALL_OW 448
29008: IFFALSE 29041
// result := [ chassis , engine , control , weapon ] ;
29010: LD_ADDR_VAR 0 6
29014: PUSH
29015: LD_VAR 0 2
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: LD_VAR 0 4
29029: PUSH
29030: LD_VAR 0 5
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// end ;
29041: LD_VAR 0 6
29045: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29046: LD_INT 0
29048: PPUSH
// if not chassis or not engine then
29049: LD_VAR 0 1
29053: NOT
29054: PUSH
29055: LD_VAR 0 2
29059: NOT
29060: OR
29061: IFFALSE 29065
// exit ;
29063: GO 29261
// case engine of engine_solar :
29065: LD_VAR 0 2
29069: PUSH
29070: LD_INT 2
29072: DOUBLE
29073: EQUAL
29074: IFTRUE 29078
29076: GO 29116
29078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29079: LD_ADDR_VAR 0 3
29083: PUSH
29084: LD_INT 11
29086: PUSH
29087: LD_INT 12
29089: PUSH
29090: LD_INT 13
29092: PUSH
29093: LD_INT 14
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
29114: GO 29245
29116: LD_INT 1
29118: DOUBLE
29119: EQUAL
29120: IFTRUE 29124
29122: GO 29186
29124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29125: LD_ADDR_VAR 0 3
29129: PUSH
29130: LD_INT 11
29132: PUSH
29133: LD_INT 12
29135: PUSH
29136: LD_INT 13
29138: PUSH
29139: LD_INT 14
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 3
29150: PUSH
29151: LD_INT 4
29153: PUSH
29154: LD_INT 5
29156: PUSH
29157: LD_INT 21
29159: PUSH
29160: LD_INT 23
29162: PUSH
29163: LD_INT 22
29165: PUSH
29166: LD_INT 24
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
29184: GO 29245
29186: LD_INT 3
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29244
29194: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 13
29202: PUSH
29203: LD_INT 14
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 3
29211: PUSH
29212: LD_INT 4
29214: PUSH
29215: LD_INT 5
29217: PUSH
29218: LD_INT 21
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_INT 23
29226: PUSH
29227: LD_INT 24
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
29242: GO 29245
29244: POP
// result := ( chassis in result ) ;
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_VAR 0 1
29254: PUSH
29255: LD_VAR 0 3
29259: IN
29260: ST_TO_ADDR
// end ;
29261: LD_VAR 0 3
29265: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29266: LD_INT 0
29268: PPUSH
// if not chassis or not weapon then
29269: LD_VAR 0 1
29273: NOT
29274: PUSH
29275: LD_VAR 0 2
29279: NOT
29280: OR
29281: IFFALSE 29285
// exit ;
29283: GO 30311
// case weapon of us_machine_gun :
29285: LD_VAR 0 2
29289: PUSH
29290: LD_INT 2
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29328
29298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 5
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: ST_TO_ADDR
29326: GO 30295
29328: LD_INT 3
29330: DOUBLE
29331: EQUAL
29332: IFTRUE 29336
29334: GO 29366
29336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29337: LD_ADDR_VAR 0 3
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: LD_INT 4
29353: PUSH
29354: LD_INT 5
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
29364: GO 30295
29366: LD_INT 11
29368: DOUBLE
29369: EQUAL
29370: IFTRUE 29374
29372: GO 29404
29374: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: LD_INT 4
29391: PUSH
29392: LD_INT 5
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
29402: GO 30295
29404: LD_INT 4
29406: DOUBLE
29407: EQUAL
29408: IFTRUE 29412
29410: GO 29438
29412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29413: LD_ADDR_VAR 0 3
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: LD_INT 3
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: LD_INT 5
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
29436: GO 30295
29438: LD_INT 5
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29472
29446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29447: LD_ADDR_VAR 0 3
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
29470: GO 30295
29472: LD_INT 9
29474: DOUBLE
29475: EQUAL
29476: IFTRUE 29480
29478: GO 29506
29480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29481: LD_ADDR_VAR 0 3
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: LD_INT 4
29494: PUSH
29495: LD_INT 5
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: ST_TO_ADDR
29504: GO 30295
29506: LD_INT 7
29508: DOUBLE
29509: EQUAL
29510: IFTRUE 29514
29512: GO 29540
29514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29515: LD_ADDR_VAR 0 3
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: LD_INT 4
29528: PUSH
29529: LD_INT 5
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: ST_TO_ADDR
29538: GO 30295
29540: LD_INT 12
29542: DOUBLE
29543: EQUAL
29544: IFTRUE 29548
29546: GO 29574
29548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: LD_INT 5
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: ST_TO_ADDR
29572: GO 30295
29574: LD_INT 13
29576: DOUBLE
29577: EQUAL
29578: IFTRUE 29582
29580: GO 29608
29582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 4
29596: PUSH
29597: LD_INT 5
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: ST_TO_ADDR
29606: GO 30295
29608: LD_INT 14
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29634
29616: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_INT 4
29624: PUSH
29625: LD_INT 5
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: ST_TO_ADDR
29632: GO 30295
29634: LD_INT 6
29636: DOUBLE
29637: EQUAL
29638: IFTRUE 29642
29640: GO 29660
29642: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29643: LD_ADDR_VAR 0 3
29647: PUSH
29648: LD_INT 4
29650: PUSH
29651: LD_INT 5
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: ST_TO_ADDR
29658: GO 30295
29660: LD_INT 10
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 29686
29668: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29669: LD_ADDR_VAR 0 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: LD_INT 5
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: ST_TO_ADDR
29684: GO 30295
29686: LD_INT 22
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29720
29694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_INT 11
29702: PUSH
29703: LD_INT 12
29705: PUSH
29706: LD_INT 13
29708: PUSH
29709: LD_INT 14
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
29718: GO 30295
29720: LD_INT 23
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29754
29728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29729: LD_ADDR_VAR 0 3
29733: PUSH
29734: LD_INT 11
29736: PUSH
29737: LD_INT 12
29739: PUSH
29740: LD_INT 13
29742: PUSH
29743: LD_INT 14
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
29752: GO 30295
29754: LD_INT 24
29756: DOUBLE
29757: EQUAL
29758: IFTRUE 29762
29760: GO 29788
29762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29763: LD_ADDR_VAR 0 3
29767: PUSH
29768: LD_INT 11
29770: PUSH
29771: LD_INT 12
29773: PUSH
29774: LD_INT 13
29776: PUSH
29777: LD_INT 14
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: ST_TO_ADDR
29786: GO 30295
29788: LD_INT 30
29790: DOUBLE
29791: EQUAL
29792: IFTRUE 29796
29794: GO 29822
29796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_INT 11
29804: PUSH
29805: LD_INT 12
29807: PUSH
29808: LD_INT 13
29810: PUSH
29811: LD_INT 14
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
29820: GO 30295
29822: LD_INT 25
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29848
29830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_INT 13
29838: PUSH
29839: LD_INT 14
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: ST_TO_ADDR
29846: GO 30295
29848: LD_INT 27
29850: DOUBLE
29851: EQUAL
29852: IFTRUE 29856
29854: GO 29874
29856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29857: LD_ADDR_VAR 0 3
29861: PUSH
29862: LD_INT 13
29864: PUSH
29865: LD_INT 14
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: ST_TO_ADDR
29872: GO 30295
29874: LD_INT 28
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 29900
29882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29883: LD_ADDR_VAR 0 3
29887: PUSH
29888: LD_INT 13
29890: PUSH
29891: LD_INT 14
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: ST_TO_ADDR
29898: GO 30295
29900: LD_INT 29
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29926
29908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_INT 13
29916: PUSH
29917: LD_INT 14
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: ST_TO_ADDR
29924: GO 30295
29926: LD_INT 31
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29952
29934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_INT 13
29942: PUSH
29943: LD_INT 14
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: ST_TO_ADDR
29950: GO 30295
29952: LD_INT 26
29954: DOUBLE
29955: EQUAL
29956: IFTRUE 29960
29958: GO 29978
29960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_INT 13
29968: PUSH
29969: LD_INT 14
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: ST_TO_ADDR
29976: GO 30295
29978: LD_INT 42
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30012
29986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 21
29994: PUSH
29995: LD_INT 22
29997: PUSH
29998: LD_INT 23
30000: PUSH
30001: LD_INT 24
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: ST_TO_ADDR
30010: GO 30295
30012: LD_INT 43
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30046
30020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30021: LD_ADDR_VAR 0 3
30025: PUSH
30026: LD_INT 21
30028: PUSH
30029: LD_INT 22
30031: PUSH
30032: LD_INT 23
30034: PUSH
30035: LD_INT 24
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
30044: GO 30295
30046: LD_INT 44
30048: DOUBLE
30049: EQUAL
30050: IFTRUE 30054
30052: GO 30080
30054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_INT 21
30062: PUSH
30063: LD_INT 22
30065: PUSH
30066: LD_INT 23
30068: PUSH
30069: LD_INT 24
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
30078: GO 30295
30080: LD_INT 45
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30088
30086: GO 30114
30088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_INT 21
30096: PUSH
30097: LD_INT 22
30099: PUSH
30100: LD_INT 23
30102: PUSH
30103: LD_INT 24
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
30112: GO 30295
30114: LD_INT 49
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30148
30122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 21
30130: PUSH
30131: LD_INT 22
30133: PUSH
30134: LD_INT 23
30136: PUSH
30137: LD_INT 24
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: ST_TO_ADDR
30146: GO 30295
30148: LD_INT 51
30150: DOUBLE
30151: EQUAL
30152: IFTRUE 30156
30154: GO 30182
30156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 21
30164: PUSH
30165: LD_INT 22
30167: PUSH
30168: LD_INT 23
30170: PUSH
30171: LD_INT 24
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: ST_TO_ADDR
30180: GO 30295
30182: LD_INT 52
30184: DOUBLE
30185: EQUAL
30186: IFTRUE 30190
30188: GO 30216
30190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_INT 21
30198: PUSH
30199: LD_INT 22
30201: PUSH
30202: LD_INT 23
30204: PUSH
30205: LD_INT 24
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
30214: GO 30295
30216: LD_INT 53
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30242
30224: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 23
30232: PUSH
30233: LD_INT 24
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: ST_TO_ADDR
30240: GO 30295
30242: LD_INT 46
30244: DOUBLE
30245: EQUAL
30246: IFTRUE 30250
30248: GO 30268
30250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30251: LD_ADDR_VAR 0 3
30255: PUSH
30256: LD_INT 23
30258: PUSH
30259: LD_INT 24
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: ST_TO_ADDR
30266: GO 30295
30268: LD_INT 47
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30294
30276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30277: LD_ADDR_VAR 0 3
30281: PUSH
30282: LD_INT 23
30284: PUSH
30285: LD_INT 24
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: ST_TO_ADDR
30292: GO 30295
30294: POP
// result := ( chassis in result ) ;
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_VAR 0 1
30304: PUSH
30305: LD_VAR 0 3
30309: IN
30310: ST_TO_ADDR
// end ;
30311: LD_VAR 0 3
30315: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30316: LD_INT 0
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
// result := array ;
30325: LD_ADDR_VAR 0 5
30329: PUSH
30330: LD_VAR 0 1
30334: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30335: LD_VAR 0 1
30339: NOT
30340: PUSH
30341: LD_VAR 0 2
30345: NOT
30346: OR
30347: PUSH
30348: LD_VAR 0 3
30352: NOT
30353: OR
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: LD_VAR 0 1
30364: GREATER
30365: OR
30366: PUSH
30367: LD_VAR 0 3
30371: PUSH
30372: LD_VAR 0 1
30376: GREATER
30377: OR
30378: IFFALSE 30382
// exit ;
30380: GO 30678
// if direction then
30382: LD_VAR 0 4
30386: IFFALSE 30450
// begin d := 1 ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_INT 1
30395: ST_TO_ADDR
// if i_from > i_to then
30396: LD_VAR 0 2
30400: PUSH
30401: LD_VAR 0 3
30405: GREATER
30406: IFFALSE 30432
// length := ( array - i_from ) + i_to else
30408: LD_ADDR_VAR 0 11
30412: PUSH
30413: LD_VAR 0 1
30417: PUSH
30418: LD_VAR 0 2
30422: MINUS
30423: PUSH
30424: LD_VAR 0 3
30428: PLUS
30429: ST_TO_ADDR
30430: GO 30448
// length := i_to - i_from ;
30432: LD_ADDR_VAR 0 11
30436: PUSH
30437: LD_VAR 0 3
30441: PUSH
30442: LD_VAR 0 2
30446: MINUS
30447: ST_TO_ADDR
// end else
30448: GO 30511
// begin d := - 1 ;
30450: LD_ADDR_VAR 0 9
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: ST_TO_ADDR
// if i_from > i_to then
30459: LD_VAR 0 2
30463: PUSH
30464: LD_VAR 0 3
30468: GREATER
30469: IFFALSE 30489
// length := i_from - i_to else
30471: LD_ADDR_VAR 0 11
30475: PUSH
30476: LD_VAR 0 2
30480: PUSH
30481: LD_VAR 0 3
30485: MINUS
30486: ST_TO_ADDR
30487: GO 30511
// length := ( array - i_to ) + i_from ;
30489: LD_ADDR_VAR 0 11
30493: PUSH
30494: LD_VAR 0 1
30498: PUSH
30499: LD_VAR 0 3
30503: MINUS
30504: PUSH
30505: LD_VAR 0 2
30509: PLUS
30510: ST_TO_ADDR
// end ; if not length then
30511: LD_VAR 0 11
30515: NOT
30516: IFFALSE 30520
// exit ;
30518: GO 30678
// tmp := array ;
30520: LD_ADDR_VAR 0 10
30524: PUSH
30525: LD_VAR 0 1
30529: ST_TO_ADDR
// for i = 1 to length do
30530: LD_ADDR_VAR 0 6
30534: PUSH
30535: DOUBLE
30536: LD_INT 1
30538: DEC
30539: ST_TO_ADDR
30540: LD_VAR 0 11
30544: PUSH
30545: FOR_TO
30546: IFFALSE 30666
// begin for j = 1 to array do
30548: LD_ADDR_VAR 0 7
30552: PUSH
30553: DOUBLE
30554: LD_INT 1
30556: DEC
30557: ST_TO_ADDR
30558: LD_VAR 0 1
30562: PUSH
30563: FOR_TO
30564: IFFALSE 30652
// begin k := j + d ;
30566: LD_ADDR_VAR 0 8
30570: PUSH
30571: LD_VAR 0 7
30575: PUSH
30576: LD_VAR 0 9
30580: PLUS
30581: ST_TO_ADDR
// if k > array then
30582: LD_VAR 0 8
30586: PUSH
30587: LD_VAR 0 1
30591: GREATER
30592: IFFALSE 30602
// k := 1 ;
30594: LD_ADDR_VAR 0 8
30598: PUSH
30599: LD_INT 1
30601: ST_TO_ADDR
// if not k then
30602: LD_VAR 0 8
30606: NOT
30607: IFFALSE 30619
// k := array ;
30609: LD_ADDR_VAR 0 8
30613: PUSH
30614: LD_VAR 0 1
30618: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30619: LD_ADDR_VAR 0 10
30623: PUSH
30624: LD_VAR 0 10
30628: PPUSH
30629: LD_VAR 0 8
30633: PPUSH
30634: LD_VAR 0 1
30638: PUSH
30639: LD_VAR 0 7
30643: ARRAY
30644: PPUSH
30645: CALL_OW 1
30649: ST_TO_ADDR
// end ;
30650: GO 30563
30652: POP
30653: POP
// array := tmp ;
30654: LD_ADDR_VAR 0 1
30658: PUSH
30659: LD_VAR 0 10
30663: ST_TO_ADDR
// end ;
30664: GO 30545
30666: POP
30667: POP
// result := array ;
30668: LD_ADDR_VAR 0 5
30672: PUSH
30673: LD_VAR 0 1
30677: ST_TO_ADDR
// end ;
30678: LD_VAR 0 5
30682: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30683: LD_INT 0
30685: PPUSH
30686: PPUSH
// result := 0 ;
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 0
30694: ST_TO_ADDR
// if not array or not value in array then
30695: LD_VAR 0 1
30699: NOT
30700: PUSH
30701: LD_VAR 0 2
30705: PUSH
30706: LD_VAR 0 1
30710: IN
30711: NOT
30712: OR
30713: IFFALSE 30717
// exit ;
30715: GO 30771
// for i = 1 to array do
30717: LD_ADDR_VAR 0 4
30721: PUSH
30722: DOUBLE
30723: LD_INT 1
30725: DEC
30726: ST_TO_ADDR
30727: LD_VAR 0 1
30731: PUSH
30732: FOR_TO
30733: IFFALSE 30769
// if value = array [ i ] then
30735: LD_VAR 0 2
30739: PUSH
30740: LD_VAR 0 1
30744: PUSH
30745: LD_VAR 0 4
30749: ARRAY
30750: EQUAL
30751: IFFALSE 30767
// begin result := i ;
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_VAR 0 4
30762: ST_TO_ADDR
// exit ;
30763: POP
30764: POP
30765: GO 30771
// end ;
30767: GO 30732
30769: POP
30770: POP
// end ;
30771: LD_VAR 0 3
30775: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30776: LD_INT 0
30778: PPUSH
// vc_chassis := chassis ;
30779: LD_ADDR_OWVAR 37
30783: PUSH
30784: LD_VAR 0 1
30788: ST_TO_ADDR
// vc_engine := engine ;
30789: LD_ADDR_OWVAR 39
30793: PUSH
30794: LD_VAR 0 2
30798: ST_TO_ADDR
// vc_control := control ;
30799: LD_ADDR_OWVAR 38
30803: PUSH
30804: LD_VAR 0 3
30808: ST_TO_ADDR
// vc_weapon := weapon ;
30809: LD_ADDR_OWVAR 40
30813: PUSH
30814: LD_VAR 0 4
30818: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30819: LD_ADDR_OWVAR 41
30823: PUSH
30824: LD_VAR 0 5
30828: ST_TO_ADDR
// end ;
30829: LD_VAR 0 6
30833: RET
// export function WantPlant ( unit ) ; var task ; begin
30834: LD_INT 0
30836: PPUSH
30837: PPUSH
// result := false ;
30838: LD_ADDR_VAR 0 2
30842: PUSH
30843: LD_INT 0
30845: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30846: LD_ADDR_VAR 0 3
30850: PUSH
30851: LD_VAR 0 1
30855: PPUSH
30856: CALL_OW 437
30860: ST_TO_ADDR
// if task then
30861: LD_VAR 0 3
30865: IFFALSE 30893
// if task [ 1 ] [ 1 ] = p then
30867: LD_VAR 0 3
30871: PUSH
30872: LD_INT 1
30874: ARRAY
30875: PUSH
30876: LD_INT 1
30878: ARRAY
30879: PUSH
30880: LD_STRING p
30882: EQUAL
30883: IFFALSE 30893
// result := true ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 1
30892: ST_TO_ADDR
// end ;
30893: LD_VAR 0 2
30897: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30898: LD_INT 0
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
// if pos < 1 then
30904: LD_VAR 0 2
30908: PUSH
30909: LD_INT 1
30911: LESS
30912: IFFALSE 30916
// exit ;
30914: GO 31219
// if pos = 1 then
30916: LD_VAR 0 2
30920: PUSH
30921: LD_INT 1
30923: EQUAL
30924: IFFALSE 30957
// result := Replace ( arr , pos [ 1 ] , value ) else
30926: LD_ADDR_VAR 0 4
30930: PUSH
30931: LD_VAR 0 1
30935: PPUSH
30936: LD_VAR 0 2
30940: PUSH
30941: LD_INT 1
30943: ARRAY
30944: PPUSH
30945: LD_VAR 0 3
30949: PPUSH
30950: CALL_OW 1
30954: ST_TO_ADDR
30955: GO 31219
// begin tmp := arr ;
30957: LD_ADDR_VAR 0 6
30961: PUSH
30962: LD_VAR 0 1
30966: ST_TO_ADDR
// s_arr := [ tmp ] ;
30967: LD_ADDR_VAR 0 7
30971: PUSH
30972: LD_VAR 0 6
30976: PUSH
30977: EMPTY
30978: LIST
30979: ST_TO_ADDR
// for i = 1 to pos - 1 do
30980: LD_ADDR_VAR 0 5
30984: PUSH
30985: DOUBLE
30986: LD_INT 1
30988: DEC
30989: ST_TO_ADDR
30990: LD_VAR 0 2
30994: PUSH
30995: LD_INT 1
30997: MINUS
30998: PUSH
30999: FOR_TO
31000: IFFALSE 31045
// begin tmp := tmp [ pos [ i ] ] ;
31002: LD_ADDR_VAR 0 6
31006: PUSH
31007: LD_VAR 0 6
31011: PUSH
31012: LD_VAR 0 2
31016: PUSH
31017: LD_VAR 0 5
31021: ARRAY
31022: ARRAY
31023: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31024: LD_ADDR_VAR 0 7
31028: PUSH
31029: LD_VAR 0 7
31033: PUSH
31034: LD_VAR 0 6
31038: PUSH
31039: EMPTY
31040: LIST
31041: ADD
31042: ST_TO_ADDR
// end ;
31043: GO 30999
31045: POP
31046: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31047: LD_ADDR_VAR 0 6
31051: PUSH
31052: LD_VAR 0 6
31056: PPUSH
31057: LD_VAR 0 2
31061: PUSH
31062: LD_VAR 0 2
31066: ARRAY
31067: PPUSH
31068: LD_VAR 0 3
31072: PPUSH
31073: CALL_OW 1
31077: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31078: LD_ADDR_VAR 0 7
31082: PUSH
31083: LD_VAR 0 7
31087: PPUSH
31088: LD_VAR 0 7
31092: PPUSH
31093: LD_VAR 0 6
31097: PPUSH
31098: CALL_OW 1
31102: ST_TO_ADDR
// for i = s_arr downto 2 do
31103: LD_ADDR_VAR 0 5
31107: PUSH
31108: DOUBLE
31109: LD_VAR 0 7
31113: INC
31114: ST_TO_ADDR
31115: LD_INT 2
31117: PUSH
31118: FOR_DOWNTO
31119: IFFALSE 31203
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31121: LD_ADDR_VAR 0 6
31125: PUSH
31126: LD_VAR 0 7
31130: PUSH
31131: LD_VAR 0 5
31135: PUSH
31136: LD_INT 1
31138: MINUS
31139: ARRAY
31140: PPUSH
31141: LD_VAR 0 2
31145: PUSH
31146: LD_VAR 0 5
31150: PUSH
31151: LD_INT 1
31153: MINUS
31154: ARRAY
31155: PPUSH
31156: LD_VAR 0 7
31160: PUSH
31161: LD_VAR 0 5
31165: ARRAY
31166: PPUSH
31167: CALL_OW 1
31171: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31172: LD_ADDR_VAR 0 7
31176: PUSH
31177: LD_VAR 0 7
31181: PPUSH
31182: LD_VAR 0 5
31186: PUSH
31187: LD_INT 1
31189: MINUS
31190: PPUSH
31191: LD_VAR 0 6
31195: PPUSH
31196: CALL_OW 1
31200: ST_TO_ADDR
// end ;
31201: GO 31118
31203: POP
31204: POP
// result := s_arr [ 1 ] ;
31205: LD_ADDR_VAR 0 4
31209: PUSH
31210: LD_VAR 0 7
31214: PUSH
31215: LD_INT 1
31217: ARRAY
31218: ST_TO_ADDR
// end ; end ;
31219: LD_VAR 0 4
31223: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31224: LD_INT 0
31226: PPUSH
31227: PPUSH
// if not list then
31228: LD_VAR 0 1
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31328
// i := list [ pos1 ] ;
31237: LD_ADDR_VAR 0 5
31241: PUSH
31242: LD_VAR 0 1
31246: PUSH
31247: LD_VAR 0 2
31251: ARRAY
31252: ST_TO_ADDR
// if not i then
31253: LD_VAR 0 5
31257: NOT
31258: IFFALSE 31262
// exit ;
31260: GO 31328
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31262: LD_ADDR_VAR 0 1
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: LD_VAR 0 2
31276: PPUSH
31277: LD_VAR 0 1
31281: PUSH
31282: LD_VAR 0 3
31286: ARRAY
31287: PPUSH
31288: CALL_OW 1
31292: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31293: LD_ADDR_VAR 0 1
31297: PUSH
31298: LD_VAR 0 1
31302: PPUSH
31303: LD_VAR 0 3
31307: PPUSH
31308: LD_VAR 0 5
31312: PPUSH
31313: CALL_OW 1
31317: ST_TO_ADDR
// result := list ;
31318: LD_ADDR_VAR 0 4
31322: PUSH
31323: LD_VAR 0 1
31327: ST_TO_ADDR
// end ;
31328: LD_VAR 0 4
31332: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31333: LD_INT 0
31335: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31336: LD_ADDR_VAR 0 5
31340: PUSH
31341: LD_VAR 0 1
31345: PPUSH
31346: CALL_OW 250
31350: PPUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 251
31360: PPUSH
31361: LD_VAR 0 2
31365: PPUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: LD_VAR 0 4
31375: PPUSH
31376: CALL 31386 0 5
31380: ST_TO_ADDR
// end ;
31381: LD_VAR 0 5
31385: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31386: LD_INT 0
31388: PPUSH
31389: PPUSH
31390: PPUSH
31391: PPUSH
// if not list then
31392: LD_VAR 0 3
31396: NOT
31397: IFFALSE 31401
// exit ;
31399: GO 31789
// result := [ ] ;
31401: LD_ADDR_VAR 0 6
31405: PUSH
31406: EMPTY
31407: ST_TO_ADDR
// for i in list do
31408: LD_ADDR_VAR 0 7
31412: PUSH
31413: LD_VAR 0 3
31417: PUSH
31418: FOR_IN
31419: IFFALSE 31621
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31421: LD_ADDR_VAR 0 9
31425: PUSH
31426: LD_VAR 0 7
31430: PPUSH
31431: LD_VAR 0 1
31435: PPUSH
31436: LD_VAR 0 2
31440: PPUSH
31441: CALL_OW 297
31445: ST_TO_ADDR
// if not result then
31446: LD_VAR 0 6
31450: NOT
31451: IFFALSE 31477
// result := [ [ i , tmp ] ] else
31453: LD_ADDR_VAR 0 6
31457: PUSH
31458: LD_VAR 0 7
31462: PUSH
31463: LD_VAR 0 9
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: ST_TO_ADDR
31475: GO 31619
// begin if result [ result ] [ 2 ] < tmp then
31477: LD_VAR 0 6
31481: PUSH
31482: LD_VAR 0 6
31486: ARRAY
31487: PUSH
31488: LD_INT 2
31490: ARRAY
31491: PUSH
31492: LD_VAR 0 9
31496: LESS
31497: IFFALSE 31539
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31499: LD_ADDR_VAR 0 6
31503: PUSH
31504: LD_VAR 0 6
31508: PPUSH
31509: LD_VAR 0 6
31513: PUSH
31514: LD_INT 1
31516: PLUS
31517: PPUSH
31518: LD_VAR 0 7
31522: PUSH
31523: LD_VAR 0 9
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PPUSH
31532: CALL_OW 2
31536: ST_TO_ADDR
31537: GO 31619
// for j = 1 to result do
31539: LD_ADDR_VAR 0 8
31543: PUSH
31544: DOUBLE
31545: LD_INT 1
31547: DEC
31548: ST_TO_ADDR
31549: LD_VAR 0 6
31553: PUSH
31554: FOR_TO
31555: IFFALSE 31617
// begin if tmp < result [ j ] [ 2 ] then
31557: LD_VAR 0 9
31561: PUSH
31562: LD_VAR 0 6
31566: PUSH
31567: LD_VAR 0 8
31571: ARRAY
31572: PUSH
31573: LD_INT 2
31575: ARRAY
31576: LESS
31577: IFFALSE 31615
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31579: LD_ADDR_VAR 0 6
31583: PUSH
31584: LD_VAR 0 6
31588: PPUSH
31589: LD_VAR 0 8
31593: PPUSH
31594: LD_VAR 0 7
31598: PUSH
31599: LD_VAR 0 9
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PPUSH
31608: CALL_OW 2
31612: ST_TO_ADDR
// break ;
31613: GO 31617
// end ; end ;
31615: GO 31554
31617: POP
31618: POP
// end ; end ;
31619: GO 31418
31621: POP
31622: POP
// if result and not asc then
31623: LD_VAR 0 6
31627: PUSH
31628: LD_VAR 0 4
31632: NOT
31633: AND
31634: IFFALSE 31709
// begin tmp := result ;
31636: LD_ADDR_VAR 0 9
31640: PUSH
31641: LD_VAR 0 6
31645: ST_TO_ADDR
// for i = tmp downto 1 do
31646: LD_ADDR_VAR 0 7
31650: PUSH
31651: DOUBLE
31652: LD_VAR 0 9
31656: INC
31657: ST_TO_ADDR
31658: LD_INT 1
31660: PUSH
31661: FOR_DOWNTO
31662: IFFALSE 31707
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31664: LD_ADDR_VAR 0 6
31668: PUSH
31669: LD_VAR 0 6
31673: PPUSH
31674: LD_VAR 0 9
31678: PUSH
31679: LD_VAR 0 7
31683: MINUS
31684: PUSH
31685: LD_INT 1
31687: PLUS
31688: PPUSH
31689: LD_VAR 0 9
31693: PUSH
31694: LD_VAR 0 7
31698: ARRAY
31699: PPUSH
31700: CALL_OW 1
31704: ST_TO_ADDR
31705: GO 31661
31707: POP
31708: POP
// end ; tmp := [ ] ;
31709: LD_ADDR_VAR 0 9
31713: PUSH
31714: EMPTY
31715: ST_TO_ADDR
// if mode then
31716: LD_VAR 0 5
31720: IFFALSE 31789
// begin for i = 1 to result do
31722: LD_ADDR_VAR 0 7
31726: PUSH
31727: DOUBLE
31728: LD_INT 1
31730: DEC
31731: ST_TO_ADDR
31732: LD_VAR 0 6
31736: PUSH
31737: FOR_TO
31738: IFFALSE 31777
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31740: LD_ADDR_VAR 0 9
31744: PUSH
31745: LD_VAR 0 9
31749: PPUSH
31750: LD_VAR 0 7
31754: PPUSH
31755: LD_VAR 0 6
31759: PUSH
31760: LD_VAR 0 7
31764: ARRAY
31765: PUSH
31766: LD_INT 1
31768: ARRAY
31769: PPUSH
31770: CALL_OW 1
31774: ST_TO_ADDR
31775: GO 31737
31777: POP
31778: POP
// result := tmp ;
31779: LD_ADDR_VAR 0 6
31783: PUSH
31784: LD_VAR 0 9
31788: ST_TO_ADDR
// end ; end ;
31789: LD_VAR 0 6
31793: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31794: LD_INT 0
31796: PPUSH
31797: PPUSH
31798: PPUSH
31799: PPUSH
31800: PPUSH
31801: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: ST_TO_ADDR
// if not x or not y then
31824: LD_VAR 0 2
31828: NOT
31829: PUSH
31830: LD_VAR 0 3
31834: NOT
31835: OR
31836: IFFALSE 31840
// exit ;
31838: GO 33486
// if not range then
31840: LD_VAR 0 4
31844: NOT
31845: IFFALSE 31855
// range := 10 ;
31847: LD_ADDR_VAR 0 4
31851: PUSH
31852: LD_INT 10
31854: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31855: LD_ADDR_VAR 0 8
31859: PUSH
31860: LD_INT 81
31862: PUSH
31863: LD_VAR 0 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 92
31874: PUSH
31875: LD_VAR 0 2
31879: PUSH
31880: LD_VAR 0 3
31884: PUSH
31885: LD_VAR 0 4
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: LD_INT 21
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: PPUSH
31918: CALL_OW 69
31922: ST_TO_ADDR
// if not tmp then
31923: LD_VAR 0 8
31927: NOT
31928: IFFALSE 31932
// exit ;
31930: GO 33486
// for i in tmp do
31932: LD_ADDR_VAR 0 6
31936: PUSH
31937: LD_VAR 0 8
31941: PUSH
31942: FOR_IN
31943: IFFALSE 33461
// begin points := [ 0 , 0 , 0 ] ;
31945: LD_ADDR_VAR 0 9
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
// bpoints := 1 ;
31964: LD_ADDR_VAR 0 10
31968: PUSH
31969: LD_INT 1
31971: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 247
31981: PUSH
31982: LD_INT 1
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32568
31990: POP
// begin if GetClass ( i ) = 1 then
31991: LD_VAR 0 6
31995: PPUSH
31996: CALL_OW 257
32000: PUSH
32001: LD_INT 1
32003: EQUAL
32004: IFFALSE 32025
// points := [ 10 , 5 , 3 ] ;
32006: LD_ADDR_VAR 0 9
32010: PUSH
32011: LD_INT 10
32013: PUSH
32014: LD_INT 5
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: LIST
32024: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32025: LD_VAR 0 6
32029: PPUSH
32030: CALL_OW 257
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: IN
32049: IFFALSE 32070
// points := [ 3 , 2 , 1 ] ;
32051: LD_ADDR_VAR 0 9
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32070: LD_VAR 0 6
32074: PPUSH
32075: CALL_OW 257
32079: PUSH
32080: LD_INT 5
32082: EQUAL
32083: IFFALSE 32104
// points := [ 130 , 5 , 2 ] ;
32085: LD_ADDR_VAR 0 9
32089: PUSH
32090: LD_INT 130
32092: PUSH
32093: LD_INT 5
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32104: LD_VAR 0 6
32108: PPUSH
32109: CALL_OW 257
32113: PUSH
32114: LD_INT 8
32116: EQUAL
32117: IFFALSE 32138
// points := [ 35 , 35 , 30 ] ;
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_INT 35
32126: PUSH
32127: LD_INT 35
32129: PUSH
32130: LD_INT 30
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32138: LD_VAR 0 6
32142: PPUSH
32143: CALL_OW 257
32147: PUSH
32148: LD_INT 9
32150: EQUAL
32151: IFFALSE 32172
// points := [ 20 , 55 , 40 ] ;
32153: LD_ADDR_VAR 0 9
32157: PUSH
32158: LD_INT 20
32160: PUSH
32161: LD_INT 55
32163: PUSH
32164: LD_INT 40
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32172: LD_VAR 0 6
32176: PPUSH
32177: CALL_OW 257
32181: PUSH
32182: LD_INT 12
32184: PUSH
32185: LD_INT 16
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: IN
32192: IFFALSE 32213
// points := [ 5 , 3 , 2 ] ;
32194: LD_ADDR_VAR 0 9
32198: PUSH
32199: LD_INT 5
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: LD_INT 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32213: LD_VAR 0 6
32217: PPUSH
32218: CALL_OW 257
32222: PUSH
32223: LD_INT 17
32225: EQUAL
32226: IFFALSE 32247
// points := [ 100 , 50 , 75 ] ;
32228: LD_ADDR_VAR 0 9
32232: PUSH
32233: LD_INT 100
32235: PUSH
32236: LD_INT 50
32238: PUSH
32239: LD_INT 75
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32247: LD_VAR 0 6
32251: PPUSH
32252: CALL_OW 257
32256: PUSH
32257: LD_INT 15
32259: EQUAL
32260: IFFALSE 32281
// points := [ 10 , 5 , 3 ] ;
32262: LD_ADDR_VAR 0 9
32266: PUSH
32267: LD_INT 10
32269: PUSH
32270: LD_INT 5
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32281: LD_VAR 0 6
32285: PPUSH
32286: CALL_OW 257
32290: PUSH
32291: LD_INT 14
32293: EQUAL
32294: IFFALSE 32315
// points := [ 10 , 0 , 0 ] ;
32296: LD_ADDR_VAR 0 9
32300: PUSH
32301: LD_INT 10
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32315: LD_VAR 0 6
32319: PPUSH
32320: CALL_OW 257
32324: PUSH
32325: LD_INT 11
32327: EQUAL
32328: IFFALSE 32349
// points := [ 30 , 10 , 5 ] ;
32330: LD_ADDR_VAR 0 9
32334: PUSH
32335: LD_INT 30
32337: PUSH
32338: LD_INT 10
32340: PUSH
32341: LD_INT 5
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32349: LD_VAR 0 1
32353: PPUSH
32354: LD_INT 5
32356: PPUSH
32357: CALL_OW 321
32361: PUSH
32362: LD_INT 2
32364: EQUAL
32365: IFFALSE 32382
// bpoints := bpoints * 1.8 ;
32367: LD_ADDR_VAR 0 10
32371: PUSH
32372: LD_VAR 0 10
32376: PUSH
32377: LD_REAL  1.80000000000000E+0000
32380: MUL
32381: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32382: LD_VAR 0 6
32386: PPUSH
32387: CALL_OW 257
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: IN
32410: PUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: LD_INT 51
32418: PPUSH
32419: CALL_OW 321
32423: PUSH
32424: LD_INT 2
32426: EQUAL
32427: AND
32428: IFFALSE 32445
// bpoints := bpoints * 1.2 ;
32430: LD_ADDR_VAR 0 10
32434: PUSH
32435: LD_VAR 0 10
32439: PUSH
32440: LD_REAL  1.20000000000000E+0000
32443: MUL
32444: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32445: LD_VAR 0 6
32449: PPUSH
32450: CALL_OW 257
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 7
32460: PUSH
32461: LD_INT 9
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: IN
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: LD_INT 52
32477: PPUSH
32478: CALL_OW 321
32482: PUSH
32483: LD_INT 2
32485: EQUAL
32486: AND
32487: IFFALSE 32504
// bpoints := bpoints * 1.5 ;
32489: LD_ADDR_VAR 0 10
32493: PUSH
32494: LD_VAR 0 10
32498: PUSH
32499: LD_REAL  1.50000000000000E+0000
32502: MUL
32503: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32504: LD_VAR 0 1
32508: PPUSH
32509: LD_INT 66
32511: PPUSH
32512: CALL_OW 321
32516: PUSH
32517: LD_INT 2
32519: EQUAL
32520: IFFALSE 32537
// bpoints := bpoints * 1.1 ;
32522: LD_ADDR_VAR 0 10
32526: PUSH
32527: LD_VAR 0 10
32531: PUSH
32532: LD_REAL  1.10000000000000E+0000
32535: MUL
32536: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32537: LD_ADDR_VAR 0 10
32541: PUSH
32542: LD_VAR 0 10
32546: PUSH
32547: LD_VAR 0 6
32551: PPUSH
32552: LD_INT 1
32554: PPUSH
32555: CALL_OW 259
32559: PUSH
32560: LD_REAL  1.15000000000000E+0000
32563: MUL
32564: MUL
32565: ST_TO_ADDR
// end ; unit_vehicle :
32566: GO 33390
32568: LD_INT 2
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 33378
32576: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32577: LD_VAR 0 6
32581: PPUSH
32582: CALL_OW 264
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 42
32592: PUSH
32593: LD_INT 24
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: IN
32601: IFFALSE 32622
// points := [ 25 , 5 , 3 ] ;
32603: LD_ADDR_VAR 0 9
32607: PUSH
32608: LD_INT 25
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32622: LD_VAR 0 6
32626: PPUSH
32627: CALL_OW 264
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 43
32637: PUSH
32638: LD_INT 25
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: IN
32646: IFFALSE 32667
// points := [ 40 , 15 , 5 ] ;
32648: LD_ADDR_VAR 0 9
32652: PUSH
32653: LD_INT 40
32655: PUSH
32656: LD_INT 15
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32667: LD_VAR 0 6
32671: PPUSH
32672: CALL_OW 264
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: LD_INT 23
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: IN
32687: IFFALSE 32708
// points := [ 7 , 25 , 8 ] ;
32689: LD_ADDR_VAR 0 9
32693: PUSH
32694: LD_INT 7
32696: PUSH
32697: LD_INT 25
32699: PUSH
32700: LD_INT 8
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32708: LD_VAR 0 6
32712: PPUSH
32713: CALL_OW 264
32717: PUSH
32718: LD_INT 5
32720: PUSH
32721: LD_INT 27
32723: PUSH
32724: LD_INT 44
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: IN
32732: IFFALSE 32753
// points := [ 14 , 50 , 16 ] ;
32734: LD_ADDR_VAR 0 9
32738: PUSH
32739: LD_INT 14
32741: PUSH
32742: LD_INT 50
32744: PUSH
32745: LD_INT 16
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32753: LD_VAR 0 6
32757: PPUSH
32758: CALL_OW 264
32762: PUSH
32763: LD_INT 6
32765: PUSH
32766: LD_INT 46
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: IN
32773: IFFALSE 32794
// points := [ 32 , 120 , 70 ] ;
32775: LD_ADDR_VAR 0 9
32779: PUSH
32780: LD_INT 32
32782: PUSH
32783: LD_INT 120
32785: PUSH
32786: LD_INT 70
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
32794: LD_VAR 0 6
32798: PPUSH
32799: CALL_OW 264
32803: PUSH
32804: LD_INT 7
32806: PUSH
32807: LD_INT 28
32809: PUSH
32810: LD_INT 45
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: IN
32818: IFFALSE 32839
// points := [ 35 , 20 , 45 ] ;
32820: LD_ADDR_VAR 0 9
32824: PUSH
32825: LD_INT 35
32827: PUSH
32828: LD_INT 20
32830: PUSH
32831: LD_INT 45
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32839: LD_VAR 0 6
32843: PPUSH
32844: CALL_OW 264
32848: PUSH
32849: LD_INT 47
32851: PUSH
32852: EMPTY
32853: LIST
32854: IN
32855: IFFALSE 32876
// points := [ 67 , 45 , 75 ] ;
32857: LD_ADDR_VAR 0 9
32861: PUSH
32862: LD_INT 67
32864: PUSH
32865: LD_INT 45
32867: PUSH
32868: LD_INT 75
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: LIST
32875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32876: LD_VAR 0 6
32880: PPUSH
32881: CALL_OW 264
32885: PUSH
32886: LD_INT 26
32888: PUSH
32889: EMPTY
32890: LIST
32891: IN
32892: IFFALSE 32913
// points := [ 120 , 30 , 80 ] ;
32894: LD_ADDR_VAR 0 9
32898: PUSH
32899: LD_INT 120
32901: PUSH
32902: LD_INT 30
32904: PUSH
32905: LD_INT 80
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32913: LD_VAR 0 6
32917: PPUSH
32918: CALL_OW 264
32922: PUSH
32923: LD_INT 22
32925: PUSH
32926: EMPTY
32927: LIST
32928: IN
32929: IFFALSE 32950
// points := [ 40 , 1 , 1 ] ;
32931: LD_ADDR_VAR 0 9
32935: PUSH
32936: LD_INT 40
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32950: LD_VAR 0 6
32954: PPUSH
32955: CALL_OW 264
32959: PUSH
32960: LD_INT 29
32962: PUSH
32963: EMPTY
32964: LIST
32965: IN
32966: IFFALSE 32987
// points := [ 70 , 200 , 400 ] ;
32968: LD_ADDR_VAR 0 9
32972: PUSH
32973: LD_INT 70
32975: PUSH
32976: LD_INT 200
32978: PUSH
32979: LD_INT 400
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32987: LD_VAR 0 6
32991: PPUSH
32992: CALL_OW 264
32996: PUSH
32997: LD_INT 14
32999: PUSH
33000: LD_INT 53
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: IN
33007: IFFALSE 33028
// points := [ 40 , 10 , 20 ] ;
33009: LD_ADDR_VAR 0 9
33013: PUSH
33014: LD_INT 40
33016: PUSH
33017: LD_INT 10
33019: PUSH
33020: LD_INT 20
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33028: LD_VAR 0 6
33032: PPUSH
33033: CALL_OW 264
33037: PUSH
33038: LD_INT 9
33040: PUSH
33041: EMPTY
33042: LIST
33043: IN
33044: IFFALSE 33065
// points := [ 5 , 70 , 20 ] ;
33046: LD_ADDR_VAR 0 9
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: LD_INT 70
33056: PUSH
33057: LD_INT 20
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33065: LD_VAR 0 6
33069: PPUSH
33070: CALL_OW 264
33074: PUSH
33075: LD_INT 10
33077: PUSH
33078: EMPTY
33079: LIST
33080: IN
33081: IFFALSE 33102
// points := [ 35 , 110 , 70 ] ;
33083: LD_ADDR_VAR 0 9
33087: PUSH
33088: LD_INT 35
33090: PUSH
33091: LD_INT 110
33093: PUSH
33094: LD_INT 70
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33102: LD_VAR 0 6
33106: PPUSH
33107: CALL_OW 265
33111: PUSH
33112: LD_INT 25
33114: EQUAL
33115: IFFALSE 33136
// points := [ 80 , 65 , 100 ] ;
33117: LD_ADDR_VAR 0 9
33121: PUSH
33122: LD_INT 80
33124: PUSH
33125: LD_INT 65
33127: PUSH
33128: LD_INT 100
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33136: LD_VAR 0 6
33140: PPUSH
33141: CALL_OW 263
33145: PUSH
33146: LD_INT 1
33148: EQUAL
33149: IFFALSE 33184
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33151: LD_ADDR_VAR 0 10
33155: PUSH
33156: LD_VAR 0 10
33160: PUSH
33161: LD_VAR 0 6
33165: PPUSH
33166: CALL_OW 311
33170: PPUSH
33171: LD_INT 3
33173: PPUSH
33174: CALL_OW 259
33178: PUSH
33179: LD_INT 4
33181: MUL
33182: MUL
33183: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33184: LD_VAR 0 6
33188: PPUSH
33189: CALL_OW 263
33193: PUSH
33194: LD_INT 2
33196: EQUAL
33197: IFFALSE 33248
// begin j := IsControledBy ( i ) ;
33199: LD_ADDR_VAR 0 7
33203: PUSH
33204: LD_VAR 0 6
33208: PPUSH
33209: CALL_OW 312
33213: ST_TO_ADDR
// if j then
33214: LD_VAR 0 7
33218: IFFALSE 33248
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33220: LD_ADDR_VAR 0 10
33224: PUSH
33225: LD_VAR 0 10
33229: PUSH
33230: LD_VAR 0 7
33234: PPUSH
33235: LD_INT 3
33237: PPUSH
33238: CALL_OW 259
33242: PUSH
33243: LD_INT 3
33245: MUL
33246: MUL
33247: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33248: LD_VAR 0 6
33252: PPUSH
33253: CALL_OW 264
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: LD_INT 6
33263: PUSH
33264: LD_INT 46
33266: PUSH
33267: LD_INT 44
33269: PUSH
33270: LD_INT 47
33272: PUSH
33273: LD_INT 45
33275: PUSH
33276: LD_INT 28
33278: PUSH
33279: LD_INT 7
33281: PUSH
33282: LD_INT 27
33284: PUSH
33285: LD_INT 29
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: IN
33300: PUSH
33301: LD_VAR 0 1
33305: PPUSH
33306: LD_INT 52
33308: PPUSH
33309: CALL_OW 321
33313: PUSH
33314: LD_INT 2
33316: EQUAL
33317: AND
33318: IFFALSE 33335
// bpoints := bpoints * 1.2 ;
33320: LD_ADDR_VAR 0 10
33324: PUSH
33325: LD_VAR 0 10
33329: PUSH
33330: LD_REAL  1.20000000000000E+0000
33333: MUL
33334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33335: LD_VAR 0 6
33339: PPUSH
33340: CALL_OW 264
33344: PUSH
33345: LD_INT 6
33347: PUSH
33348: LD_INT 46
33350: PUSH
33351: LD_INT 47
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: IN
33359: IFFALSE 33376
// bpoints := bpoints * 1.2 ;
33361: LD_ADDR_VAR 0 10
33365: PUSH
33366: LD_VAR 0 10
33370: PUSH
33371: LD_REAL  1.20000000000000E+0000
33374: MUL
33375: ST_TO_ADDR
// end ; unit_building :
33376: GO 33390
33378: LD_INT 3
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33386
33384: GO 33389
33386: POP
// ; end ;
33387: GO 33390
33389: POP
// for j = 1 to 3 do
33390: LD_ADDR_VAR 0 7
33394: PUSH
33395: DOUBLE
33396: LD_INT 1
33398: DEC
33399: ST_TO_ADDR
33400: LD_INT 3
33402: PUSH
33403: FOR_TO
33404: IFFALSE 33457
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33406: LD_ADDR_VAR 0 5
33410: PUSH
33411: LD_VAR 0 5
33415: PPUSH
33416: LD_VAR 0 7
33420: PPUSH
33421: LD_VAR 0 5
33425: PUSH
33426: LD_VAR 0 7
33430: ARRAY
33431: PUSH
33432: LD_VAR 0 9
33436: PUSH
33437: LD_VAR 0 7
33441: ARRAY
33442: PUSH
33443: LD_VAR 0 10
33447: MUL
33448: PLUS
33449: PPUSH
33450: CALL_OW 1
33454: ST_TO_ADDR
33455: GO 33403
33457: POP
33458: POP
// end ;
33459: GO 31942
33461: POP
33462: POP
// result := Replace ( result , 4 , tmp ) ;
33463: LD_ADDR_VAR 0 5
33467: PUSH
33468: LD_VAR 0 5
33472: PPUSH
33473: LD_INT 4
33475: PPUSH
33476: LD_VAR 0 8
33480: PPUSH
33481: CALL_OW 1
33485: ST_TO_ADDR
// end ;
33486: LD_VAR 0 5
33490: RET
// export function DangerAtRange ( unit , range ) ; begin
33491: LD_INT 0
33493: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_VAR 0 1
33503: PPUSH
33504: CALL_OW 255
33508: PPUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: CALL_OW 250
33518: PPUSH
33519: LD_VAR 0 1
33523: PPUSH
33524: CALL_OW 251
33528: PPUSH
33529: LD_VAR 0 2
33533: PPUSH
33534: CALL 31794 0 4
33538: ST_TO_ADDR
// end ;
33539: LD_VAR 0 3
33543: RET
// export function DangerInArea ( side , area ) ; begin
33544: LD_INT 0
33546: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33547: LD_ADDR_VAR 0 3
33551: PUSH
33552: LD_VAR 0 2
33556: PPUSH
33557: LD_INT 81
33559: PUSH
33560: LD_VAR 0 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PPUSH
33569: CALL_OW 70
33573: ST_TO_ADDR
// end ;
33574: LD_VAR 0 3
33578: RET
// export function IsExtension ( b ) ; begin
33579: LD_INT 0
33581: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33582: LD_ADDR_VAR 0 2
33586: PUSH
33587: LD_VAR 0 1
33591: PUSH
33592: LD_INT 23
33594: PUSH
33595: LD_INT 20
33597: PUSH
33598: LD_INT 22
33600: PUSH
33601: LD_INT 17
33603: PUSH
33604: LD_INT 24
33606: PUSH
33607: LD_INT 21
33609: PUSH
33610: LD_INT 19
33612: PUSH
33613: LD_INT 16
33615: PUSH
33616: LD_INT 25
33618: PUSH
33619: LD_INT 18
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: IN
33634: ST_TO_ADDR
// end ;
33635: LD_VAR 0 2
33639: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33640: LD_INT 0
33642: PPUSH
33643: PPUSH
33644: PPUSH
// result := [ ] ;
33645: LD_ADDR_VAR 0 4
33649: PUSH
33650: EMPTY
33651: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33652: LD_ADDR_VAR 0 5
33656: PUSH
33657: LD_VAR 0 2
33661: PPUSH
33662: LD_INT 21
33664: PUSH
33665: LD_INT 3
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PPUSH
33672: CALL_OW 70
33676: ST_TO_ADDR
// if not tmp then
33677: LD_VAR 0 5
33681: NOT
33682: IFFALSE 33686
// exit ;
33684: GO 33750
// if checkLink then
33686: LD_VAR 0 3
33690: IFFALSE 33740
// begin for i in tmp do
33692: LD_ADDR_VAR 0 6
33696: PUSH
33697: LD_VAR 0 5
33701: PUSH
33702: FOR_IN
33703: IFFALSE 33738
// if GetBase ( i ) <> base then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 274
33714: PUSH
33715: LD_VAR 0 1
33719: NONEQUAL
33720: IFFALSE 33736
// ComLinkToBase ( base , i ) ;
33722: LD_VAR 0 1
33726: PPUSH
33727: LD_VAR 0 6
33731: PPUSH
33732: CALL_OW 169
33736: GO 33702
33738: POP
33739: POP
// end ; result := tmp ;
33740: LD_ADDR_VAR 0 4
33744: PUSH
33745: LD_VAR 0 5
33749: ST_TO_ADDR
// end ;
33750: LD_VAR 0 4
33754: RET
// export function ComComplete ( units , b ) ; var i ; begin
33755: LD_INT 0
33757: PPUSH
33758: PPUSH
// if not units then
33759: LD_VAR 0 1
33763: NOT
33764: IFFALSE 33768
// exit ;
33766: GO 33858
// for i in units do
33768: LD_ADDR_VAR 0 4
33772: PUSH
33773: LD_VAR 0 1
33777: PUSH
33778: FOR_IN
33779: IFFALSE 33856
// if BuildingStatus ( b ) = bs_build then
33781: LD_VAR 0 2
33785: PPUSH
33786: CALL_OW 461
33790: PUSH
33791: LD_INT 1
33793: EQUAL
33794: IFFALSE 33854
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33796: LD_VAR 0 4
33800: PPUSH
33801: LD_STRING h
33803: PUSH
33804: LD_VAR 0 2
33808: PPUSH
33809: CALL_OW 250
33813: PUSH
33814: LD_VAR 0 2
33818: PPUSH
33819: CALL_OW 251
33823: PUSH
33824: LD_VAR 0 2
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: PUSH
33847: EMPTY
33848: LIST
33849: PPUSH
33850: CALL_OW 446
33854: GO 33778
33856: POP
33857: POP
// end ;
33858: LD_VAR 0 3
33862: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33863: LD_INT 0
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33871: LD_VAR 0 1
33875: NOT
33876: PUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL_OW 263
33886: PUSH
33887: LD_INT 2
33889: EQUAL
33890: NOT
33891: OR
33892: IFFALSE 33896
// exit ;
33894: GO 34212
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33896: LD_ADDR_VAR 0 6
33900: PUSH
33901: LD_INT 22
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 255
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 30
33923: PUSH
33924: LD_INT 36
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 34
33933: PUSH
33934: LD_INT 31
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PPUSH
33950: CALL_OW 69
33954: ST_TO_ADDR
// if not tmp then
33955: LD_VAR 0 6
33959: NOT
33960: IFFALSE 33964
// exit ;
33962: GO 34212
// result := [ ] ;
33964: LD_ADDR_VAR 0 2
33968: PUSH
33969: EMPTY
33970: ST_TO_ADDR
// for i in tmp do
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_VAR 0 6
33980: PUSH
33981: FOR_IN
33982: IFFALSE 34053
// begin t := UnitsInside ( i ) ;
33984: LD_ADDR_VAR 0 4
33988: PUSH
33989: LD_VAR 0 3
33993: PPUSH
33994: CALL_OW 313
33998: ST_TO_ADDR
// if t then
33999: LD_VAR 0 4
34003: IFFALSE 34051
// for j in t do
34005: LD_ADDR_VAR 0 7
34009: PUSH
34010: LD_VAR 0 4
34014: PUSH
34015: FOR_IN
34016: IFFALSE 34049
// result := Insert ( result , result + 1 , j ) ;
34018: LD_ADDR_VAR 0 2
34022: PUSH
34023: LD_VAR 0 2
34027: PPUSH
34028: LD_VAR 0 2
34032: PUSH
34033: LD_INT 1
34035: PLUS
34036: PPUSH
34037: LD_VAR 0 7
34041: PPUSH
34042: CALL_OW 2
34046: ST_TO_ADDR
34047: GO 34015
34049: POP
34050: POP
// end ;
34051: GO 33981
34053: POP
34054: POP
// if not result then
34055: LD_VAR 0 2
34059: NOT
34060: IFFALSE 34064
// exit ;
34062: GO 34212
// mech := result [ 1 ] ;
34064: LD_ADDR_VAR 0 5
34068: PUSH
34069: LD_VAR 0 2
34073: PUSH
34074: LD_INT 1
34076: ARRAY
34077: ST_TO_ADDR
// if result > 1 then
34078: LD_VAR 0 2
34082: PUSH
34083: LD_INT 1
34085: GREATER
34086: IFFALSE 34198
// for i = 2 to result do
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: DOUBLE
34094: LD_INT 2
34096: DEC
34097: ST_TO_ADDR
34098: LD_VAR 0 2
34102: PUSH
34103: FOR_TO
34104: IFFALSE 34196
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34106: LD_ADDR_VAR 0 4
34110: PUSH
34111: LD_VAR 0 2
34115: PUSH
34116: LD_VAR 0 3
34120: ARRAY
34121: PPUSH
34122: LD_INT 3
34124: PPUSH
34125: CALL_OW 259
34129: PUSH
34130: LD_VAR 0 2
34134: PUSH
34135: LD_VAR 0 3
34139: ARRAY
34140: PPUSH
34141: CALL_OW 432
34145: MINUS
34146: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34147: LD_VAR 0 4
34151: PUSH
34152: LD_VAR 0 5
34156: PPUSH
34157: LD_INT 3
34159: PPUSH
34160: CALL_OW 259
34164: PUSH
34165: LD_VAR 0 5
34169: PPUSH
34170: CALL_OW 432
34174: MINUS
34175: GREATEREQUAL
34176: IFFALSE 34194
// mech := result [ i ] ;
34178: LD_ADDR_VAR 0 5
34182: PUSH
34183: LD_VAR 0 2
34187: PUSH
34188: LD_VAR 0 3
34192: ARRAY
34193: ST_TO_ADDR
// end ;
34194: GO 34103
34196: POP
34197: POP
// ComLinkTo ( vehicle , mech ) ;
34198: LD_VAR 0 1
34202: PPUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL_OW 135
// end ;
34212: LD_VAR 0 2
34216: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34217: LD_INT 0
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
// result := [ ] ;
34232: LD_ADDR_VAR 0 7
34236: PUSH
34237: EMPTY
34238: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 266
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: IN
34259: NOT
34260: IFFALSE 34264
// exit ;
34262: GO 35898
// if name then
34264: LD_VAR 0 3
34268: IFFALSE 34284
// SetBName ( base_dep , name ) ;
34270: LD_VAR 0 1
34274: PPUSH
34275: LD_VAR 0 3
34279: PPUSH
34280: CALL_OW 500
// base := GetBase ( base_dep ) ;
34284: LD_ADDR_VAR 0 15
34288: PUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 274
34298: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34299: LD_ADDR_VAR 0 16
34303: PUSH
34304: LD_VAR 0 1
34308: PPUSH
34309: CALL_OW 255
34313: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34314: LD_ADDR_VAR 0 17
34318: PUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 248
34328: ST_TO_ADDR
// if sources then
34329: LD_VAR 0 5
34333: IFFALSE 34380
// for i = 1 to 3 do
34335: LD_ADDR_VAR 0 8
34339: PUSH
34340: DOUBLE
34341: LD_INT 1
34343: DEC
34344: ST_TO_ADDR
34345: LD_INT 3
34347: PUSH
34348: FOR_TO
34349: IFFALSE 34378
// AddResourceType ( base , i , sources [ i ] ) ;
34351: LD_VAR 0 15
34355: PPUSH
34356: LD_VAR 0 8
34360: PPUSH
34361: LD_VAR 0 5
34365: PUSH
34366: LD_VAR 0 8
34370: ARRAY
34371: PPUSH
34372: CALL_OW 276
34376: GO 34348
34378: POP
34379: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34380: LD_ADDR_VAR 0 18
34384: PUSH
34385: LD_VAR 0 15
34389: PPUSH
34390: LD_VAR 0 2
34394: PPUSH
34395: LD_INT 1
34397: PPUSH
34398: CALL 33640 0 3
34402: ST_TO_ADDR
// InitHc ;
34403: CALL_OW 19
// InitUc ;
34407: CALL_OW 18
// uc_side := side ;
34411: LD_ADDR_OWVAR 20
34415: PUSH
34416: LD_VAR 0 16
34420: ST_TO_ADDR
// uc_nation := nation ;
34421: LD_ADDR_OWVAR 21
34425: PUSH
34426: LD_VAR 0 17
34430: ST_TO_ADDR
// if buildings then
34431: LD_VAR 0 18
34435: IFFALSE 35757
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34437: LD_ADDR_VAR 0 19
34441: PUSH
34442: LD_VAR 0 18
34446: PPUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 30
34452: PUSH
34453: LD_INT 29
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 30
34462: PUSH
34463: LD_INT 30
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: PPUSH
34475: CALL_OW 72
34479: ST_TO_ADDR
// if tmp then
34480: LD_VAR 0 19
34484: IFFALSE 34532
// for i in tmp do
34486: LD_ADDR_VAR 0 8
34490: PUSH
34491: LD_VAR 0 19
34495: PUSH
34496: FOR_IN
34497: IFFALSE 34530
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34499: LD_VAR 0 8
34503: PPUSH
34504: CALL_OW 250
34508: PPUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: CALL_OW 251
34518: PPUSH
34519: LD_VAR 0 16
34523: PPUSH
34524: CALL_OW 441
34528: GO 34496
34530: POP
34531: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34532: LD_VAR 0 18
34536: PPUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 30
34542: PUSH
34543: LD_INT 32
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 30
34552: PUSH
34553: LD_INT 33
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: PPUSH
34565: CALL_OW 72
34569: IFFALSE 34657
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34571: LD_ADDR_VAR 0 8
34575: PUSH
34576: LD_VAR 0 18
34580: PPUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 30
34586: PUSH
34587: LD_INT 32
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 30
34596: PUSH
34597: LD_INT 33
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: PPUSH
34609: CALL_OW 72
34613: PUSH
34614: FOR_IN
34615: IFFALSE 34655
// begin if not GetBWeapon ( i ) then
34617: LD_VAR 0 8
34621: PPUSH
34622: CALL_OW 269
34626: NOT
34627: IFFALSE 34653
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34629: LD_VAR 0 8
34633: PPUSH
34634: LD_VAR 0 8
34638: PPUSH
34639: LD_VAR 0 2
34643: PPUSH
34644: CALL 35903 0 2
34648: PPUSH
34649: CALL_OW 431
// end ;
34653: GO 34614
34655: POP
34656: POP
// end ; for i = 1 to personel do
34657: LD_ADDR_VAR 0 8
34661: PUSH
34662: DOUBLE
34663: LD_INT 1
34665: DEC
34666: ST_TO_ADDR
34667: LD_VAR 0 6
34671: PUSH
34672: FOR_TO
34673: IFFALSE 35737
// begin if i > 4 then
34675: LD_VAR 0 8
34679: PUSH
34680: LD_INT 4
34682: GREATER
34683: IFFALSE 34687
// break ;
34685: GO 35737
// case i of 1 :
34687: LD_VAR 0 8
34691: PUSH
34692: LD_INT 1
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34700
34698: GO 34780
34700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34701: LD_ADDR_VAR 0 12
34705: PUSH
34706: LD_VAR 0 18
34710: PPUSH
34711: LD_INT 22
34713: PUSH
34714: LD_VAR 0 16
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 58
34725: PUSH
34726: EMPTY
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 30
34734: PUSH
34735: LD_INT 32
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 30
34744: PUSH
34745: LD_INT 4
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 30
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PPUSH
34773: CALL_OW 72
34777: ST_TO_ADDR
34778: GO 35002
34780: LD_INT 2
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34788
34786: GO 34850
34788: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34789: LD_ADDR_VAR 0 12
34793: PUSH
34794: LD_VAR 0 18
34798: PPUSH
34799: LD_INT 22
34801: PUSH
34802: LD_VAR 0 16
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 30
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 30
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PPUSH
34843: CALL_OW 72
34847: ST_TO_ADDR
34848: GO 35002
34850: LD_INT 3
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34920
34858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34859: LD_ADDR_VAR 0 12
34863: PUSH
34864: LD_VAR 0 18
34868: PPUSH
34869: LD_INT 22
34871: PUSH
34872: LD_VAR 0 16
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: LD_INT 30
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 30
34896: PUSH
34897: LD_INT 3
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PPUSH
34913: CALL_OW 72
34917: ST_TO_ADDR
34918: GO 35002
34920: LD_INT 4
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 35001
34928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34929: LD_ADDR_VAR 0 12
34933: PUSH
34934: LD_VAR 0 18
34938: PPUSH
34939: LD_INT 22
34941: PUSH
34942: LD_VAR 0 16
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 30
34956: PUSH
34957: LD_INT 6
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 30
34966: PUSH
34967: LD_INT 7
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 30
34976: PUSH
34977: LD_INT 8
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PPUSH
34994: CALL_OW 72
34998: ST_TO_ADDR
34999: GO 35002
35001: POP
// if i = 1 then
35002: LD_VAR 0 8
35006: PUSH
35007: LD_INT 1
35009: EQUAL
35010: IFFALSE 35121
// begin tmp := [ ] ;
35012: LD_ADDR_VAR 0 19
35016: PUSH
35017: EMPTY
35018: ST_TO_ADDR
// for j in f do
35019: LD_ADDR_VAR 0 9
35023: PUSH
35024: LD_VAR 0 12
35028: PUSH
35029: FOR_IN
35030: IFFALSE 35103
// if GetBType ( j ) = b_bunker then
35032: LD_VAR 0 9
35036: PPUSH
35037: CALL_OW 266
35041: PUSH
35042: LD_INT 32
35044: EQUAL
35045: IFFALSE 35072
// tmp := Insert ( tmp , 1 , j ) else
35047: LD_ADDR_VAR 0 19
35051: PUSH
35052: LD_VAR 0 19
35056: PPUSH
35057: LD_INT 1
35059: PPUSH
35060: LD_VAR 0 9
35064: PPUSH
35065: CALL_OW 2
35069: ST_TO_ADDR
35070: GO 35101
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35072: LD_ADDR_VAR 0 19
35076: PUSH
35077: LD_VAR 0 19
35081: PPUSH
35082: LD_VAR 0 19
35086: PUSH
35087: LD_INT 1
35089: PLUS
35090: PPUSH
35091: LD_VAR 0 9
35095: PPUSH
35096: CALL_OW 2
35100: ST_TO_ADDR
35101: GO 35029
35103: POP
35104: POP
// if tmp then
35105: LD_VAR 0 19
35109: IFFALSE 35121
// f := tmp ;
35111: LD_ADDR_VAR 0 12
35115: PUSH
35116: LD_VAR 0 19
35120: ST_TO_ADDR
// end ; x := personel [ i ] ;
35121: LD_ADDR_VAR 0 13
35125: PUSH
35126: LD_VAR 0 6
35130: PUSH
35131: LD_VAR 0 8
35135: ARRAY
35136: ST_TO_ADDR
// if x = - 1 then
35137: LD_VAR 0 13
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: EQUAL
35146: IFFALSE 35355
// begin for j in f do
35148: LD_ADDR_VAR 0 9
35152: PUSH
35153: LD_VAR 0 12
35157: PUSH
35158: FOR_IN
35159: IFFALSE 35351
// repeat InitHc ;
35161: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35165: LD_VAR 0 9
35169: PPUSH
35170: CALL_OW 266
35174: PUSH
35175: LD_INT 5
35177: EQUAL
35178: IFFALSE 35248
// begin if UnitsInside ( j ) < 3 then
35180: LD_VAR 0 9
35184: PPUSH
35185: CALL_OW 313
35189: PUSH
35190: LD_INT 3
35192: LESS
35193: IFFALSE 35229
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35195: LD_INT 0
35197: PPUSH
35198: LD_INT 5
35200: PUSH
35201: LD_INT 8
35203: PUSH
35204: LD_INT 9
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: PUSH
35212: LD_VAR 0 17
35216: ARRAY
35217: PPUSH
35218: LD_VAR 0 4
35222: PPUSH
35223: CALL_OW 380
35227: GO 35246
// PrepareHuman ( false , i , skill ) ;
35229: LD_INT 0
35231: PPUSH
35232: LD_VAR 0 8
35236: PPUSH
35237: LD_VAR 0 4
35241: PPUSH
35242: CALL_OW 380
// end else
35246: GO 35265
// PrepareHuman ( false , i , skill ) ;
35248: LD_INT 0
35250: PPUSH
35251: LD_VAR 0 8
35255: PPUSH
35256: LD_VAR 0 4
35260: PPUSH
35261: CALL_OW 380
// un := CreateHuman ;
35265: LD_ADDR_VAR 0 14
35269: PUSH
35270: CALL_OW 44
35274: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35275: LD_ADDR_VAR 0 7
35279: PUSH
35280: LD_VAR 0 7
35284: PPUSH
35285: LD_INT 1
35287: PPUSH
35288: LD_VAR 0 14
35292: PPUSH
35293: CALL_OW 2
35297: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35298: LD_VAR 0 14
35302: PPUSH
35303: LD_VAR 0 9
35307: PPUSH
35308: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35312: LD_VAR 0 9
35316: PPUSH
35317: CALL_OW 313
35321: PUSH
35322: LD_INT 6
35324: EQUAL
35325: PUSH
35326: LD_VAR 0 9
35330: PPUSH
35331: CALL_OW 266
35335: PUSH
35336: LD_INT 32
35338: PUSH
35339: LD_INT 31
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: IN
35346: OR
35347: IFFALSE 35161
35349: GO 35158
35351: POP
35352: POP
// end else
35353: GO 35735
// for j = 1 to x do
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: DOUBLE
35361: LD_INT 1
35363: DEC
35364: ST_TO_ADDR
35365: LD_VAR 0 13
35369: PUSH
35370: FOR_TO
35371: IFFALSE 35733
// begin InitHc ;
35373: CALL_OW 19
// if not f then
35377: LD_VAR 0 12
35381: NOT
35382: IFFALSE 35471
// begin PrepareHuman ( false , i , skill ) ;
35384: LD_INT 0
35386: PPUSH
35387: LD_VAR 0 8
35391: PPUSH
35392: LD_VAR 0 4
35396: PPUSH
35397: CALL_OW 380
// un := CreateHuman ;
35401: LD_ADDR_VAR 0 14
35405: PUSH
35406: CALL_OW 44
35410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35411: LD_ADDR_VAR 0 7
35415: PUSH
35416: LD_VAR 0 7
35420: PPUSH
35421: LD_INT 1
35423: PPUSH
35424: LD_VAR 0 14
35428: PPUSH
35429: CALL_OW 2
35433: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35434: LD_VAR 0 14
35438: PPUSH
35439: LD_VAR 0 1
35443: PPUSH
35444: CALL_OW 250
35448: PPUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 251
35458: PPUSH
35459: LD_INT 10
35461: PPUSH
35462: LD_INT 0
35464: PPUSH
35465: CALL_OW 50
// continue ;
35469: GO 35370
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35471: LD_VAR 0 12
35475: PUSH
35476: LD_INT 1
35478: ARRAY
35479: PPUSH
35480: CALL_OW 313
35484: PUSH
35485: LD_VAR 0 12
35489: PUSH
35490: LD_INT 1
35492: ARRAY
35493: PPUSH
35494: CALL_OW 266
35498: PUSH
35499: LD_INT 32
35501: PUSH
35502: LD_INT 31
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: IN
35509: AND
35510: PUSH
35511: LD_VAR 0 12
35515: PUSH
35516: LD_INT 1
35518: ARRAY
35519: PPUSH
35520: CALL_OW 313
35524: PUSH
35525: LD_INT 6
35527: EQUAL
35528: OR
35529: IFFALSE 35549
// f := Delete ( f , 1 ) ;
35531: LD_ADDR_VAR 0 12
35535: PUSH
35536: LD_VAR 0 12
35540: PPUSH
35541: LD_INT 1
35543: PPUSH
35544: CALL_OW 3
35548: ST_TO_ADDR
// if not f then
35549: LD_VAR 0 12
35553: NOT
35554: IFFALSE 35572
// begin x := x + 2 ;
35556: LD_ADDR_VAR 0 13
35560: PUSH
35561: LD_VAR 0 13
35565: PUSH
35566: LD_INT 2
35568: PLUS
35569: ST_TO_ADDR
// continue ;
35570: GO 35370
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35572: LD_VAR 0 12
35576: PUSH
35577: LD_INT 1
35579: ARRAY
35580: PPUSH
35581: CALL_OW 266
35585: PUSH
35586: LD_INT 5
35588: EQUAL
35589: IFFALSE 35663
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35591: LD_VAR 0 12
35595: PUSH
35596: LD_INT 1
35598: ARRAY
35599: PPUSH
35600: CALL_OW 313
35604: PUSH
35605: LD_INT 3
35607: LESS
35608: IFFALSE 35644
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35610: LD_INT 0
35612: PPUSH
35613: LD_INT 5
35615: PUSH
35616: LD_INT 8
35618: PUSH
35619: LD_INT 9
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: PUSH
35627: LD_VAR 0 17
35631: ARRAY
35632: PPUSH
35633: LD_VAR 0 4
35637: PPUSH
35638: CALL_OW 380
35642: GO 35661
// PrepareHuman ( false , i , skill ) ;
35644: LD_INT 0
35646: PPUSH
35647: LD_VAR 0 8
35651: PPUSH
35652: LD_VAR 0 4
35656: PPUSH
35657: CALL_OW 380
// end else
35661: GO 35680
// PrepareHuman ( false , i , skill ) ;
35663: LD_INT 0
35665: PPUSH
35666: LD_VAR 0 8
35670: PPUSH
35671: LD_VAR 0 4
35675: PPUSH
35676: CALL_OW 380
// un := CreateHuman ;
35680: LD_ADDR_VAR 0 14
35684: PUSH
35685: CALL_OW 44
35689: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35690: LD_ADDR_VAR 0 7
35694: PUSH
35695: LD_VAR 0 7
35699: PPUSH
35700: LD_INT 1
35702: PPUSH
35703: LD_VAR 0 14
35707: PPUSH
35708: CALL_OW 2
35712: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35713: LD_VAR 0 14
35717: PPUSH
35718: LD_VAR 0 12
35722: PUSH
35723: LD_INT 1
35725: ARRAY
35726: PPUSH
35727: CALL_OW 52
// end ;
35731: GO 35370
35733: POP
35734: POP
// end ;
35735: GO 34672
35737: POP
35738: POP
// result := result ^ buildings ;
35739: LD_ADDR_VAR 0 7
35743: PUSH
35744: LD_VAR 0 7
35748: PUSH
35749: LD_VAR 0 18
35753: ADD
35754: ST_TO_ADDR
// end else
35755: GO 35898
// begin for i = 1 to personel do
35757: LD_ADDR_VAR 0 8
35761: PUSH
35762: DOUBLE
35763: LD_INT 1
35765: DEC
35766: ST_TO_ADDR
35767: LD_VAR 0 6
35771: PUSH
35772: FOR_TO
35773: IFFALSE 35896
// begin if i > 4 then
35775: LD_VAR 0 8
35779: PUSH
35780: LD_INT 4
35782: GREATER
35783: IFFALSE 35787
// break ;
35785: GO 35896
// x := personel [ i ] ;
35787: LD_ADDR_VAR 0 13
35791: PUSH
35792: LD_VAR 0 6
35796: PUSH
35797: LD_VAR 0 8
35801: ARRAY
35802: ST_TO_ADDR
// if x = - 1 then
35803: LD_VAR 0 13
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: EQUAL
35812: IFFALSE 35816
// continue ;
35814: GO 35772
// PrepareHuman ( false , i , skill ) ;
35816: LD_INT 0
35818: PPUSH
35819: LD_VAR 0 8
35823: PPUSH
35824: LD_VAR 0 4
35828: PPUSH
35829: CALL_OW 380
// un := CreateHuman ;
35833: LD_ADDR_VAR 0 14
35837: PUSH
35838: CALL_OW 44
35842: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35843: LD_VAR 0 14
35847: PPUSH
35848: LD_VAR 0 1
35852: PPUSH
35853: CALL_OW 250
35857: PPUSH
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 251
35867: PPUSH
35868: LD_INT 10
35870: PPUSH
35871: LD_INT 0
35873: PPUSH
35874: CALL_OW 50
// result := result ^ un ;
35878: LD_ADDR_VAR 0 7
35882: PUSH
35883: LD_VAR 0 7
35887: PUSH
35888: LD_VAR 0 14
35892: ADD
35893: ST_TO_ADDR
// end ;
35894: GO 35772
35896: POP
35897: POP
// end ; end ;
35898: LD_VAR 0 7
35902: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35903: LD_INT 0
35905: PPUSH
35906: PPUSH
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
35920: PPUSH
// result := false ;
35921: LD_ADDR_VAR 0 3
35925: PUSH
35926: LD_INT 0
35928: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35929: LD_VAR 0 1
35933: NOT
35934: PUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 266
35944: PUSH
35945: LD_INT 32
35947: PUSH
35948: LD_INT 33
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: IN
35955: NOT
35956: OR
35957: IFFALSE 35961
// exit ;
35959: GO 37100
// nat := GetNation ( tower ) ;
35961: LD_ADDR_VAR 0 12
35965: PUSH
35966: LD_VAR 0 1
35970: PPUSH
35971: CALL_OW 248
35975: ST_TO_ADDR
// side := GetSide ( tower ) ;
35976: LD_ADDR_VAR 0 16
35980: PUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 255
35990: ST_TO_ADDR
// x := GetX ( tower ) ;
35991: LD_ADDR_VAR 0 10
35995: PUSH
35996: LD_VAR 0 1
36000: PPUSH
36001: CALL_OW 250
36005: ST_TO_ADDR
// y := GetY ( tower ) ;
36006: LD_ADDR_VAR 0 11
36010: PUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: CALL_OW 251
36020: ST_TO_ADDR
// if not x or not y then
36021: LD_VAR 0 10
36025: NOT
36026: PUSH
36027: LD_VAR 0 11
36031: NOT
36032: OR
36033: IFFALSE 36037
// exit ;
36035: GO 37100
// weapon := 0 ;
36037: LD_ADDR_VAR 0 18
36041: PUSH
36042: LD_INT 0
36044: ST_TO_ADDR
// fac_list := [ ] ;
36045: LD_ADDR_VAR 0 17
36049: PUSH
36050: EMPTY
36051: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36052: LD_ADDR_VAR 0 6
36056: PUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 274
36066: PPUSH
36067: LD_VAR 0 2
36071: PPUSH
36072: LD_INT 0
36074: PPUSH
36075: CALL 33640 0 3
36079: PPUSH
36080: LD_INT 30
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PPUSH
36090: CALL_OW 72
36094: ST_TO_ADDR
// if not factories then
36095: LD_VAR 0 6
36099: NOT
36100: IFFALSE 36104
// exit ;
36102: GO 37100
// for i in factories do
36104: LD_ADDR_VAR 0 8
36108: PUSH
36109: LD_VAR 0 6
36113: PUSH
36114: FOR_IN
36115: IFFALSE 36140
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36117: LD_ADDR_VAR 0 17
36121: PUSH
36122: LD_VAR 0 17
36126: PUSH
36127: LD_VAR 0 8
36131: PPUSH
36132: CALL_OW 478
36136: UNION
36137: ST_TO_ADDR
36138: GO 36114
36140: POP
36141: POP
// if not fac_list then
36142: LD_VAR 0 17
36146: NOT
36147: IFFALSE 36151
// exit ;
36149: GO 37100
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36151: LD_ADDR_VAR 0 5
36155: PUSH
36156: LD_INT 4
36158: PUSH
36159: LD_INT 5
36161: PUSH
36162: LD_INT 9
36164: PUSH
36165: LD_INT 10
36167: PUSH
36168: LD_INT 6
36170: PUSH
36171: LD_INT 7
36173: PUSH
36174: LD_INT 11
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 27
36188: PUSH
36189: LD_INT 28
36191: PUSH
36192: LD_INT 26
36194: PUSH
36195: LD_INT 30
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 43
36206: PUSH
36207: LD_INT 44
36209: PUSH
36210: LD_INT 46
36212: PUSH
36213: LD_INT 45
36215: PUSH
36216: LD_INT 47
36218: PUSH
36219: LD_INT 49
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_VAR 0 12
36239: ARRAY
36240: ST_TO_ADDR
// for i in list do
36241: LD_ADDR_VAR 0 8
36245: PUSH
36246: LD_VAR 0 5
36250: PUSH
36251: FOR_IN
36252: IFFALSE 36285
// if not i in fac_list then
36254: LD_VAR 0 8
36258: PUSH
36259: LD_VAR 0 17
36263: IN
36264: NOT
36265: IFFALSE 36283
// list := list diff i ;
36267: LD_ADDR_VAR 0 5
36271: PUSH
36272: LD_VAR 0 5
36276: PUSH
36277: LD_VAR 0 8
36281: DIFF
36282: ST_TO_ADDR
36283: GO 36251
36285: POP
36286: POP
// if not list then
36287: LD_VAR 0 5
36291: NOT
36292: IFFALSE 36296
// exit ;
36294: GO 37100
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36296: LD_VAR 0 12
36300: PUSH
36301: LD_INT 3
36303: EQUAL
36304: PUSH
36305: LD_INT 49
36307: PUSH
36308: LD_VAR 0 5
36312: IN
36313: AND
36314: PUSH
36315: LD_INT 31
36317: PPUSH
36318: LD_VAR 0 16
36322: PPUSH
36323: CALL_OW 321
36327: PUSH
36328: LD_INT 2
36330: EQUAL
36331: AND
36332: IFFALSE 36392
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36334: LD_INT 22
36336: PUSH
36337: LD_VAR 0 16
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 35
36348: PUSH
36349: LD_INT 49
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 91
36358: PUSH
36359: LD_VAR 0 1
36363: PUSH
36364: LD_INT 10
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: PPUSH
36377: CALL_OW 69
36381: NOT
36382: IFFALSE 36392
// weapon := ru_time_lapser ;
36384: LD_ADDR_VAR 0 18
36388: PUSH
36389: LD_INT 49
36391: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36392: LD_VAR 0 12
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: IN
36407: PUSH
36408: LD_INT 11
36410: PUSH
36411: LD_VAR 0 5
36415: IN
36416: PUSH
36417: LD_INT 30
36419: PUSH
36420: LD_VAR 0 5
36424: IN
36425: OR
36426: AND
36427: PUSH
36428: LD_INT 6
36430: PPUSH
36431: LD_VAR 0 16
36435: PPUSH
36436: CALL_OW 321
36440: PUSH
36441: LD_INT 2
36443: EQUAL
36444: AND
36445: IFFALSE 36610
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36447: LD_INT 22
36449: PUSH
36450: LD_VAR 0 16
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: LD_INT 35
36464: PUSH
36465: LD_INT 11
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 35
36474: PUSH
36475: LD_INT 30
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 91
36489: PUSH
36490: LD_VAR 0 1
36494: PUSH
36495: LD_INT 18
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: PPUSH
36508: CALL_OW 69
36512: NOT
36513: PUSH
36514: LD_INT 22
36516: PUSH
36517: LD_VAR 0 16
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: LD_INT 30
36531: PUSH
36532: LD_INT 32
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 30
36541: PUSH
36542: LD_INT 33
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 91
36556: PUSH
36557: LD_VAR 0 1
36561: PUSH
36562: LD_INT 12
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: PPUSH
36578: CALL_OW 69
36582: PUSH
36583: LD_INT 2
36585: GREATER
36586: AND
36587: IFFALSE 36610
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36589: LD_ADDR_VAR 0 18
36593: PUSH
36594: LD_INT 11
36596: PUSH
36597: LD_INT 30
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_VAR 0 12
36608: ARRAY
36609: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36610: LD_VAR 0 18
36614: NOT
36615: PUSH
36616: LD_INT 40
36618: PPUSH
36619: LD_VAR 0 16
36623: PPUSH
36624: CALL_OW 321
36628: PUSH
36629: LD_INT 2
36631: EQUAL
36632: AND
36633: PUSH
36634: LD_INT 7
36636: PUSH
36637: LD_VAR 0 5
36641: IN
36642: PUSH
36643: LD_INT 28
36645: PUSH
36646: LD_VAR 0 5
36650: IN
36651: OR
36652: PUSH
36653: LD_INT 45
36655: PUSH
36656: LD_VAR 0 5
36660: IN
36661: OR
36662: AND
36663: IFFALSE 36917
// begin hex := GetHexInfo ( x , y ) ;
36665: LD_ADDR_VAR 0 4
36669: PUSH
36670: LD_VAR 0 10
36674: PPUSH
36675: LD_VAR 0 11
36679: PPUSH
36680: CALL_OW 546
36684: ST_TO_ADDR
// if hex [ 1 ] then
36685: LD_VAR 0 4
36689: PUSH
36690: LD_INT 1
36692: ARRAY
36693: IFFALSE 36697
// exit ;
36695: GO 37100
// height := hex [ 2 ] ;
36697: LD_ADDR_VAR 0 15
36701: PUSH
36702: LD_VAR 0 4
36706: PUSH
36707: LD_INT 2
36709: ARRAY
36710: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36711: LD_ADDR_VAR 0 14
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: LD_INT 5
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: ST_TO_ADDR
// for i in tmp do
36734: LD_ADDR_VAR 0 8
36738: PUSH
36739: LD_VAR 0 14
36743: PUSH
36744: FOR_IN
36745: IFFALSE 36915
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_VAR 0 10
36756: PPUSH
36757: LD_VAR 0 8
36761: PPUSH
36762: LD_INT 5
36764: PPUSH
36765: CALL_OW 272
36769: PUSH
36770: LD_VAR 0 11
36774: PPUSH
36775: LD_VAR 0 8
36779: PPUSH
36780: LD_INT 5
36782: PPUSH
36783: CALL_OW 273
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36792: LD_VAR 0 9
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PPUSH
36801: LD_VAR 0 9
36805: PUSH
36806: LD_INT 2
36808: ARRAY
36809: PPUSH
36810: CALL_OW 488
36814: IFFALSE 36913
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36816: LD_ADDR_VAR 0 4
36820: PUSH
36821: LD_VAR 0 9
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: PPUSH
36830: LD_VAR 0 9
36834: PUSH
36835: LD_INT 2
36837: ARRAY
36838: PPUSH
36839: CALL_OW 546
36843: ST_TO_ADDR
// if hex [ 1 ] then
36844: LD_VAR 0 4
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: IFFALSE 36856
// continue ;
36854: GO 36744
// h := hex [ 2 ] ;
36856: LD_ADDR_VAR 0 13
36860: PUSH
36861: LD_VAR 0 4
36865: PUSH
36866: LD_INT 2
36868: ARRAY
36869: ST_TO_ADDR
// if h + 7 < height then
36870: LD_VAR 0 13
36874: PUSH
36875: LD_INT 7
36877: PLUS
36878: PUSH
36879: LD_VAR 0 15
36883: LESS
36884: IFFALSE 36913
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36886: LD_ADDR_VAR 0 18
36890: PUSH
36891: LD_INT 7
36893: PUSH
36894: LD_INT 28
36896: PUSH
36897: LD_INT 45
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: PUSH
36905: LD_VAR 0 12
36909: ARRAY
36910: ST_TO_ADDR
// break ;
36911: GO 36915
// end ; end ; end ;
36913: GO 36744
36915: POP
36916: POP
// end ; if not weapon then
36917: LD_VAR 0 18
36921: NOT
36922: IFFALSE 36982
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36924: LD_ADDR_VAR 0 5
36928: PUSH
36929: LD_VAR 0 5
36933: PUSH
36934: LD_INT 11
36936: PUSH
36937: LD_INT 30
36939: PUSH
36940: LD_INT 49
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: DIFF
36948: ST_TO_ADDR
// if not list then
36949: LD_VAR 0 5
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 37100
// weapon := list [ rand ( 1 , list ) ] ;
36958: LD_ADDR_VAR 0 18
36962: PUSH
36963: LD_VAR 0 5
36967: PUSH
36968: LD_INT 1
36970: PPUSH
36971: LD_VAR 0 5
36975: PPUSH
36976: CALL_OW 12
36980: ARRAY
36981: ST_TO_ADDR
// end ; if weapon then
36982: LD_VAR 0 18
36986: IFFALSE 37100
// begin tmp := CostOfWeapon ( weapon ) ;
36988: LD_ADDR_VAR 0 14
36992: PUSH
36993: LD_VAR 0 18
36997: PPUSH
36998: CALL_OW 451
37002: ST_TO_ADDR
// j := GetBase ( tower ) ;
37003: LD_ADDR_VAR 0 9
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 274
37017: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37018: LD_VAR 0 9
37022: PPUSH
37023: LD_INT 1
37025: PPUSH
37026: CALL_OW 275
37030: PUSH
37031: LD_VAR 0 14
37035: PUSH
37036: LD_INT 1
37038: ARRAY
37039: GREATEREQUAL
37040: PUSH
37041: LD_VAR 0 9
37045: PPUSH
37046: LD_INT 2
37048: PPUSH
37049: CALL_OW 275
37053: PUSH
37054: LD_VAR 0 14
37058: PUSH
37059: LD_INT 2
37061: ARRAY
37062: GREATEREQUAL
37063: AND
37064: PUSH
37065: LD_VAR 0 9
37069: PPUSH
37070: LD_INT 3
37072: PPUSH
37073: CALL_OW 275
37077: PUSH
37078: LD_VAR 0 14
37082: PUSH
37083: LD_INT 3
37085: ARRAY
37086: GREATEREQUAL
37087: AND
37088: IFFALSE 37100
// result := weapon ;
37090: LD_ADDR_VAR 0 3
37094: PUSH
37095: LD_VAR 0 18
37099: ST_TO_ADDR
// end ; end ;
37100: LD_VAR 0 3
37104: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37105: LD_INT 0
37107: PPUSH
37108: PPUSH
// result := true ;
37109: LD_ADDR_VAR 0 3
37113: PUSH
37114: LD_INT 1
37116: ST_TO_ADDR
// if array1 = array2 then
37117: LD_VAR 0 1
37121: PUSH
37122: LD_VAR 0 2
37126: EQUAL
37127: IFFALSE 37187
// begin for i = 1 to array1 do
37129: LD_ADDR_VAR 0 4
37133: PUSH
37134: DOUBLE
37135: LD_INT 1
37137: DEC
37138: ST_TO_ADDR
37139: LD_VAR 0 1
37143: PUSH
37144: FOR_TO
37145: IFFALSE 37183
// if array1 [ i ] <> array2 [ i ] then
37147: LD_VAR 0 1
37151: PUSH
37152: LD_VAR 0 4
37156: ARRAY
37157: PUSH
37158: LD_VAR 0 2
37162: PUSH
37163: LD_VAR 0 4
37167: ARRAY
37168: NONEQUAL
37169: IFFALSE 37181
// begin result := false ;
37171: LD_ADDR_VAR 0 3
37175: PUSH
37176: LD_INT 0
37178: ST_TO_ADDR
// break ;
37179: GO 37183
// end ;
37181: GO 37144
37183: POP
37184: POP
// end else
37185: GO 37195
// result := false ;
37187: LD_ADDR_VAR 0 3
37191: PUSH
37192: LD_INT 0
37194: ST_TO_ADDR
// end ;
37195: LD_VAR 0 3
37199: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37200: LD_INT 0
37202: PPUSH
37203: PPUSH
// if not array1 or not array2 then
37204: LD_VAR 0 1
37208: NOT
37209: PUSH
37210: LD_VAR 0 2
37214: NOT
37215: OR
37216: IFFALSE 37220
// exit ;
37218: GO 37284
// result := true ;
37220: LD_ADDR_VAR 0 3
37224: PUSH
37225: LD_INT 1
37227: ST_TO_ADDR
// for i = 1 to array1 do
37228: LD_ADDR_VAR 0 4
37232: PUSH
37233: DOUBLE
37234: LD_INT 1
37236: DEC
37237: ST_TO_ADDR
37238: LD_VAR 0 1
37242: PUSH
37243: FOR_TO
37244: IFFALSE 37282
// if array1 [ i ] <> array2 [ i ] then
37246: LD_VAR 0 1
37250: PUSH
37251: LD_VAR 0 4
37255: ARRAY
37256: PUSH
37257: LD_VAR 0 2
37261: PUSH
37262: LD_VAR 0 4
37266: ARRAY
37267: NONEQUAL
37268: IFFALSE 37280
// begin result := false ;
37270: LD_ADDR_VAR 0 3
37274: PUSH
37275: LD_INT 0
37277: ST_TO_ADDR
// break ;
37278: GO 37282
// end ;
37280: GO 37243
37282: POP
37283: POP
// end ;
37284: LD_VAR 0 3
37288: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37289: LD_INT 0
37291: PPUSH
37292: PPUSH
37293: PPUSH
// pom := GetBase ( fac ) ;
37294: LD_ADDR_VAR 0 5
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 274
37308: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37309: LD_ADDR_VAR 0 4
37313: PUSH
37314: LD_VAR 0 2
37318: PUSH
37319: LD_INT 1
37321: ARRAY
37322: PPUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 2
37330: ARRAY
37331: PPUSH
37332: LD_VAR 0 2
37336: PUSH
37337: LD_INT 3
37339: ARRAY
37340: PPUSH
37341: LD_VAR 0 2
37345: PUSH
37346: LD_INT 4
37348: ARRAY
37349: PPUSH
37350: CALL_OW 449
37354: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_VAR 0 5
37364: PPUSH
37365: LD_INT 1
37367: PPUSH
37368: CALL_OW 275
37372: PUSH
37373: LD_VAR 0 4
37377: PUSH
37378: LD_INT 1
37380: ARRAY
37381: GREATEREQUAL
37382: PUSH
37383: LD_VAR 0 5
37387: PPUSH
37388: LD_INT 2
37390: PPUSH
37391: CALL_OW 275
37395: PUSH
37396: LD_VAR 0 4
37400: PUSH
37401: LD_INT 2
37403: ARRAY
37404: GREATEREQUAL
37405: AND
37406: PUSH
37407: LD_VAR 0 5
37411: PPUSH
37412: LD_INT 3
37414: PPUSH
37415: CALL_OW 275
37419: PUSH
37420: LD_VAR 0 4
37424: PUSH
37425: LD_INT 3
37427: ARRAY
37428: GREATEREQUAL
37429: AND
37430: ST_TO_ADDR
// end ;
37431: LD_VAR 0 3
37435: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37436: LD_INT 0
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
// pom := GetBase ( building ) ;
37442: LD_ADDR_VAR 0 3
37446: PUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL_OW 274
37456: ST_TO_ADDR
// if not pom then
37457: LD_VAR 0 3
37461: NOT
37462: IFFALSE 37466
// exit ;
37464: GO 37636
// btype := GetBType ( building ) ;
37466: LD_ADDR_VAR 0 5
37470: PUSH
37471: LD_VAR 0 1
37475: PPUSH
37476: CALL_OW 266
37480: ST_TO_ADDR
// if btype = b_armoury then
37481: LD_VAR 0 5
37485: PUSH
37486: LD_INT 4
37488: EQUAL
37489: IFFALSE 37499
// btype := b_barracks ;
37491: LD_ADDR_VAR 0 5
37495: PUSH
37496: LD_INT 5
37498: ST_TO_ADDR
// if btype = b_depot then
37499: LD_VAR 0 5
37503: PUSH
37504: LD_INT 0
37506: EQUAL
37507: IFFALSE 37517
// btype := b_warehouse ;
37509: LD_ADDR_VAR 0 5
37513: PUSH
37514: LD_INT 1
37516: ST_TO_ADDR
// if btype = b_workshop then
37517: LD_VAR 0 5
37521: PUSH
37522: LD_INT 2
37524: EQUAL
37525: IFFALSE 37535
// btype := b_factory ;
37527: LD_ADDR_VAR 0 5
37531: PUSH
37532: LD_INT 3
37534: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37535: LD_ADDR_VAR 0 4
37539: PUSH
37540: LD_VAR 0 5
37544: PPUSH
37545: LD_VAR 0 1
37549: PPUSH
37550: CALL_OW 248
37554: PPUSH
37555: CALL_OW 450
37559: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37560: LD_ADDR_VAR 0 2
37564: PUSH
37565: LD_VAR 0 3
37569: PPUSH
37570: LD_INT 1
37572: PPUSH
37573: CALL_OW 275
37577: PUSH
37578: LD_VAR 0 4
37582: PUSH
37583: LD_INT 1
37585: ARRAY
37586: GREATEREQUAL
37587: PUSH
37588: LD_VAR 0 3
37592: PPUSH
37593: LD_INT 2
37595: PPUSH
37596: CALL_OW 275
37600: PUSH
37601: LD_VAR 0 4
37605: PUSH
37606: LD_INT 2
37608: ARRAY
37609: GREATEREQUAL
37610: AND
37611: PUSH
37612: LD_VAR 0 3
37616: PPUSH
37617: LD_INT 3
37619: PPUSH
37620: CALL_OW 275
37624: PUSH
37625: LD_VAR 0 4
37629: PUSH
37630: LD_INT 3
37632: ARRAY
37633: GREATEREQUAL
37634: AND
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 2
37640: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
37645: PPUSH
// pom := GetBase ( building ) ;
37646: LD_ADDR_VAR 0 4
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 274
37660: ST_TO_ADDR
// if not pom then
37661: LD_VAR 0 4
37665: NOT
37666: IFFALSE 37670
// exit ;
37668: GO 37771
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37670: LD_ADDR_VAR 0 5
37674: PUSH
37675: LD_VAR 0 2
37679: PPUSH
37680: LD_VAR 0 1
37684: PPUSH
37685: CALL_OW 248
37689: PPUSH
37690: CALL_OW 450
37694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_VAR 0 4
37704: PPUSH
37705: LD_INT 1
37707: PPUSH
37708: CALL_OW 275
37712: PUSH
37713: LD_VAR 0 5
37717: PUSH
37718: LD_INT 1
37720: ARRAY
37721: GREATEREQUAL
37722: PUSH
37723: LD_VAR 0 4
37727: PPUSH
37728: LD_INT 2
37730: PPUSH
37731: CALL_OW 275
37735: PUSH
37736: LD_VAR 0 5
37740: PUSH
37741: LD_INT 2
37743: ARRAY
37744: GREATEREQUAL
37745: AND
37746: PUSH
37747: LD_VAR 0 4
37751: PPUSH
37752: LD_INT 3
37754: PPUSH
37755: CALL_OW 275
37759: PUSH
37760: LD_VAR 0 5
37764: PUSH
37765: LD_INT 3
37767: ARRAY
37768: GREATEREQUAL
37769: AND
37770: ST_TO_ADDR
// end ;
37771: LD_VAR 0 3
37775: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37776: LD_INT 0
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
// result := false ;
37789: LD_ADDR_VAR 0 8
37793: PUSH
37794: LD_INT 0
37796: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37797: LD_VAR 0 5
37801: NOT
37802: PUSH
37803: LD_VAR 0 1
37807: NOT
37808: OR
37809: PUSH
37810: LD_VAR 0 2
37814: NOT
37815: OR
37816: PUSH
37817: LD_VAR 0 3
37821: NOT
37822: OR
37823: IFFALSE 37827
// exit ;
37825: GO 38641
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37827: LD_ADDR_VAR 0 14
37831: PUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: LD_VAR 0 2
37841: PPUSH
37842: LD_VAR 0 3
37846: PPUSH
37847: LD_VAR 0 4
37851: PPUSH
37852: LD_VAR 0 5
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: PPUSH
37861: CALL_OW 248
37865: PPUSH
37866: LD_INT 0
37868: PPUSH
37869: CALL 39478 0 6
37873: ST_TO_ADDR
// if not hexes then
37874: LD_VAR 0 14
37878: NOT
37879: IFFALSE 37883
// exit ;
37881: GO 38641
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37883: LD_ADDR_VAR 0 17
37887: PUSH
37888: LD_VAR 0 5
37892: PPUSH
37893: LD_INT 22
37895: PUSH
37896: LD_VAR 0 13
37900: PPUSH
37901: CALL_OW 255
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 30
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 30
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PPUSH
37942: CALL_OW 72
37946: ST_TO_ADDR
// for i = 1 to hexes do
37947: LD_ADDR_VAR 0 9
37951: PUSH
37952: DOUBLE
37953: LD_INT 1
37955: DEC
37956: ST_TO_ADDR
37957: LD_VAR 0 14
37961: PUSH
37962: FOR_TO
37963: IFFALSE 38639
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37965: LD_ADDR_VAR 0 13
37969: PUSH
37970: LD_VAR 0 14
37974: PUSH
37975: LD_VAR 0 9
37979: ARRAY
37980: PUSH
37981: LD_INT 1
37983: ARRAY
37984: PPUSH
37985: LD_VAR 0 14
37989: PUSH
37990: LD_VAR 0 9
37994: ARRAY
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: PPUSH
38000: CALL_OW 428
38004: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38005: LD_VAR 0 14
38009: PUSH
38010: LD_VAR 0 9
38014: ARRAY
38015: PUSH
38016: LD_INT 1
38018: ARRAY
38019: PPUSH
38020: LD_VAR 0 14
38024: PUSH
38025: LD_VAR 0 9
38029: ARRAY
38030: PUSH
38031: LD_INT 2
38033: ARRAY
38034: PPUSH
38035: CALL_OW 351
38039: PUSH
38040: LD_VAR 0 14
38044: PUSH
38045: LD_VAR 0 9
38049: ARRAY
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: PPUSH
38055: LD_VAR 0 14
38059: PUSH
38060: LD_VAR 0 9
38064: ARRAY
38065: PUSH
38066: LD_INT 2
38068: ARRAY
38069: PPUSH
38070: CALL_OW 488
38074: NOT
38075: OR
38076: PUSH
38077: LD_VAR 0 13
38081: PPUSH
38082: CALL_OW 247
38086: PUSH
38087: LD_INT 3
38089: EQUAL
38090: OR
38091: IFFALSE 38097
// exit ;
38093: POP
38094: POP
38095: GO 38641
// if not tmp then
38097: LD_VAR 0 13
38101: NOT
38102: IFFALSE 38106
// continue ;
38104: GO 37962
// result := true ;
38106: LD_ADDR_VAR 0 8
38110: PUSH
38111: LD_INT 1
38113: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38114: LD_VAR 0 6
38118: PUSH
38119: LD_VAR 0 13
38123: PPUSH
38124: CALL_OW 247
38128: PUSH
38129: LD_INT 2
38131: EQUAL
38132: AND
38133: PUSH
38134: LD_VAR 0 13
38138: PPUSH
38139: CALL_OW 263
38143: PUSH
38144: LD_INT 1
38146: EQUAL
38147: AND
38148: IFFALSE 38312
// begin if IsDrivenBy ( tmp ) then
38150: LD_VAR 0 13
38154: PPUSH
38155: CALL_OW 311
38159: IFFALSE 38163
// continue ;
38161: GO 37962
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38163: LD_VAR 0 6
38167: PPUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 60
38173: PUSH
38174: EMPTY
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 55
38186: PUSH
38187: EMPTY
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PPUSH
38198: CALL_OW 72
38202: IFFALSE 38310
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38204: LD_ADDR_VAR 0 18
38208: PUSH
38209: LD_VAR 0 6
38213: PPUSH
38214: LD_INT 3
38216: PUSH
38217: LD_INT 60
38219: PUSH
38220: EMPTY
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: LD_INT 55
38232: PUSH
38233: EMPTY
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PPUSH
38244: CALL_OW 72
38248: PUSH
38249: LD_INT 1
38251: ARRAY
38252: ST_TO_ADDR
// if IsInUnit ( driver ) then
38253: LD_VAR 0 18
38257: PPUSH
38258: CALL_OW 310
38262: IFFALSE 38273
// ComExit ( driver ) ;
38264: LD_VAR 0 18
38268: PPUSH
38269: CALL 62662 0 1
// AddComEnterUnit ( driver , tmp ) ;
38273: LD_VAR 0 18
38277: PPUSH
38278: LD_VAR 0 13
38282: PPUSH
38283: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38287: LD_VAR 0 18
38291: PPUSH
38292: LD_VAR 0 7
38296: PPUSH
38297: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38301: LD_VAR 0 18
38305: PPUSH
38306: CALL_OW 181
// end ; continue ;
38310: GO 37962
// end ; if not cleaners or not tmp in cleaners then
38312: LD_VAR 0 6
38316: NOT
38317: PUSH
38318: LD_VAR 0 13
38322: PUSH
38323: LD_VAR 0 6
38327: IN
38328: NOT
38329: OR
38330: IFFALSE 38637
// begin if dep then
38332: LD_VAR 0 17
38336: IFFALSE 38472
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38338: LD_ADDR_VAR 0 16
38342: PUSH
38343: LD_VAR 0 17
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: PPUSH
38352: CALL_OW 250
38356: PPUSH
38357: LD_VAR 0 17
38361: PUSH
38362: LD_INT 1
38364: ARRAY
38365: PPUSH
38366: CALL_OW 254
38370: PPUSH
38371: LD_INT 5
38373: PPUSH
38374: CALL_OW 272
38378: PUSH
38379: LD_VAR 0 17
38383: PUSH
38384: LD_INT 1
38386: ARRAY
38387: PPUSH
38388: CALL_OW 251
38392: PPUSH
38393: LD_VAR 0 17
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: PPUSH
38402: CALL_OW 254
38406: PPUSH
38407: LD_INT 5
38409: PPUSH
38410: CALL_OW 273
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38419: LD_VAR 0 16
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: PPUSH
38428: LD_VAR 0 16
38432: PUSH
38433: LD_INT 2
38435: ARRAY
38436: PPUSH
38437: CALL_OW 488
38441: IFFALSE 38472
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38443: LD_VAR 0 13
38447: PPUSH
38448: LD_VAR 0 16
38452: PUSH
38453: LD_INT 1
38455: ARRAY
38456: PPUSH
38457: LD_VAR 0 16
38461: PUSH
38462: LD_INT 2
38464: ARRAY
38465: PPUSH
38466: CALL_OW 111
// continue ;
38470: GO 37962
// end ; end ; r := GetDir ( tmp ) ;
38472: LD_ADDR_VAR 0 15
38476: PUSH
38477: LD_VAR 0 13
38481: PPUSH
38482: CALL_OW 254
38486: ST_TO_ADDR
// if r = 5 then
38487: LD_VAR 0 15
38491: PUSH
38492: LD_INT 5
38494: EQUAL
38495: IFFALSE 38505
// r := 0 ;
38497: LD_ADDR_VAR 0 15
38501: PUSH
38502: LD_INT 0
38504: ST_TO_ADDR
// for j = r to 5 do
38505: LD_ADDR_VAR 0 10
38509: PUSH
38510: DOUBLE
38511: LD_VAR 0 15
38515: DEC
38516: ST_TO_ADDR
38517: LD_INT 5
38519: PUSH
38520: FOR_TO
38521: IFFALSE 38635
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38523: LD_ADDR_VAR 0 11
38527: PUSH
38528: LD_VAR 0 13
38532: PPUSH
38533: CALL_OW 250
38537: PPUSH
38538: LD_VAR 0 10
38542: PPUSH
38543: LD_INT 2
38545: PPUSH
38546: CALL_OW 272
38550: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38551: LD_ADDR_VAR 0 12
38555: PUSH
38556: LD_VAR 0 13
38560: PPUSH
38561: CALL_OW 251
38565: PPUSH
38566: LD_VAR 0 10
38570: PPUSH
38571: LD_INT 2
38573: PPUSH
38574: CALL_OW 273
38578: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38579: LD_VAR 0 11
38583: PPUSH
38584: LD_VAR 0 12
38588: PPUSH
38589: CALL_OW 488
38593: PUSH
38594: LD_VAR 0 11
38598: PPUSH
38599: LD_VAR 0 12
38603: PPUSH
38604: CALL_OW 428
38608: NOT
38609: AND
38610: IFFALSE 38633
// begin ComMoveXY ( tmp , _x , _y ) ;
38612: LD_VAR 0 13
38616: PPUSH
38617: LD_VAR 0 11
38621: PPUSH
38622: LD_VAR 0 12
38626: PPUSH
38627: CALL_OW 111
// break ;
38631: GO 38635
// end ; end ;
38633: GO 38520
38635: POP
38636: POP
// end ; end ;
38637: GO 37962
38639: POP
38640: POP
// end ;
38641: LD_VAR 0 8
38645: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
// result := false ;
38658: LD_ADDR_VAR 0 6
38662: PUSH
38663: LD_INT 0
38665: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38666: LD_VAR 0 1
38670: NOT
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 266
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: IN
38692: NOT
38693: OR
38694: PUSH
38695: LD_VAR 0 2
38699: NOT
38700: OR
38701: PUSH
38702: LD_VAR 0 5
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: LD_INT 4
38721: PUSH
38722: LD_INT 5
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: IN
38733: NOT
38734: OR
38735: PUSH
38736: LD_VAR 0 3
38740: PPUSH
38741: LD_VAR 0 4
38745: PPUSH
38746: CALL_OW 488
38750: NOT
38751: OR
38752: IFFALSE 38756
// exit ;
38754: GO 39473
// pom := GetBase ( depot ) ;
38756: LD_ADDR_VAR 0 10
38760: PUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL_OW 274
38770: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38771: LD_ADDR_VAR 0 11
38775: PUSH
38776: LD_VAR 0 2
38780: PPUSH
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 248
38790: PPUSH
38791: CALL_OW 450
38795: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38796: LD_VAR 0 10
38800: PPUSH
38801: LD_INT 1
38803: PPUSH
38804: CALL_OW 275
38808: PUSH
38809: LD_VAR 0 11
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: GREATEREQUAL
38818: PUSH
38819: LD_VAR 0 10
38823: PPUSH
38824: LD_INT 2
38826: PPUSH
38827: CALL_OW 275
38831: PUSH
38832: LD_VAR 0 11
38836: PUSH
38837: LD_INT 2
38839: ARRAY
38840: GREATEREQUAL
38841: AND
38842: PUSH
38843: LD_VAR 0 10
38847: PPUSH
38848: LD_INT 3
38850: PPUSH
38851: CALL_OW 275
38855: PUSH
38856: LD_VAR 0 11
38860: PUSH
38861: LD_INT 3
38863: ARRAY
38864: GREATEREQUAL
38865: AND
38866: NOT
38867: IFFALSE 38871
// exit ;
38869: GO 39473
// if GetBType ( depot ) = b_depot then
38871: LD_VAR 0 1
38875: PPUSH
38876: CALL_OW 266
38880: PUSH
38881: LD_INT 0
38883: EQUAL
38884: IFFALSE 38896
// dist := 28 else
38886: LD_ADDR_VAR 0 14
38890: PUSH
38891: LD_INT 28
38893: ST_TO_ADDR
38894: GO 38904
// dist := 36 ;
38896: LD_ADDR_VAR 0 14
38900: PUSH
38901: LD_INT 36
38903: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38904: LD_VAR 0 1
38908: PPUSH
38909: LD_VAR 0 3
38913: PPUSH
38914: LD_VAR 0 4
38918: PPUSH
38919: CALL_OW 297
38923: PUSH
38924: LD_VAR 0 14
38928: GREATER
38929: IFFALSE 38933
// exit ;
38931: GO 39473
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38933: LD_ADDR_VAR 0 12
38937: PUSH
38938: LD_VAR 0 2
38942: PPUSH
38943: LD_VAR 0 3
38947: PPUSH
38948: LD_VAR 0 4
38952: PPUSH
38953: LD_VAR 0 5
38957: PPUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 248
38967: PPUSH
38968: LD_INT 0
38970: PPUSH
38971: CALL 39478 0 6
38975: ST_TO_ADDR
// if not hexes then
38976: LD_VAR 0 12
38980: NOT
38981: IFFALSE 38985
// exit ;
38983: GO 39473
// hex := GetHexInfo ( x , y ) ;
38985: LD_ADDR_VAR 0 15
38989: PUSH
38990: LD_VAR 0 3
38994: PPUSH
38995: LD_VAR 0 4
38999: PPUSH
39000: CALL_OW 546
39004: ST_TO_ADDR
// if hex [ 1 ] then
39005: LD_VAR 0 15
39009: PUSH
39010: LD_INT 1
39012: ARRAY
39013: IFFALSE 39017
// exit ;
39015: GO 39473
// height := hex [ 2 ] ;
39017: LD_ADDR_VAR 0 13
39021: PUSH
39022: LD_VAR 0 15
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: ST_TO_ADDR
// for i = 1 to hexes do
39031: LD_ADDR_VAR 0 7
39035: PUSH
39036: DOUBLE
39037: LD_INT 1
39039: DEC
39040: ST_TO_ADDR
39041: LD_VAR 0 12
39045: PUSH
39046: FOR_TO
39047: IFFALSE 39377
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39049: LD_VAR 0 12
39053: PUSH
39054: LD_VAR 0 7
39058: ARRAY
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PPUSH
39064: LD_VAR 0 12
39068: PUSH
39069: LD_VAR 0 7
39073: ARRAY
39074: PUSH
39075: LD_INT 2
39077: ARRAY
39078: PPUSH
39079: CALL_OW 488
39083: NOT
39084: PUSH
39085: LD_VAR 0 12
39089: PUSH
39090: LD_VAR 0 7
39094: ARRAY
39095: PUSH
39096: LD_INT 1
39098: ARRAY
39099: PPUSH
39100: LD_VAR 0 12
39104: PUSH
39105: LD_VAR 0 7
39109: ARRAY
39110: PUSH
39111: LD_INT 2
39113: ARRAY
39114: PPUSH
39115: CALL_OW 428
39119: PUSH
39120: LD_INT 0
39122: GREATER
39123: OR
39124: PUSH
39125: LD_VAR 0 12
39129: PUSH
39130: LD_VAR 0 7
39134: ARRAY
39135: PUSH
39136: LD_INT 1
39138: ARRAY
39139: PPUSH
39140: LD_VAR 0 12
39144: PUSH
39145: LD_VAR 0 7
39149: ARRAY
39150: PUSH
39151: LD_INT 2
39153: ARRAY
39154: PPUSH
39155: CALL_OW 351
39159: OR
39160: IFFALSE 39166
// exit ;
39162: POP
39163: POP
39164: GO 39473
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39166: LD_ADDR_VAR 0 8
39170: PUSH
39171: LD_VAR 0 12
39175: PUSH
39176: LD_VAR 0 7
39180: ARRAY
39181: PUSH
39182: LD_INT 1
39184: ARRAY
39185: PPUSH
39186: LD_VAR 0 12
39190: PUSH
39191: LD_VAR 0 7
39195: ARRAY
39196: PUSH
39197: LD_INT 2
39199: ARRAY
39200: PPUSH
39201: CALL_OW 546
39205: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39206: LD_VAR 0 8
39210: PUSH
39211: LD_INT 1
39213: ARRAY
39214: PUSH
39215: LD_VAR 0 8
39219: PUSH
39220: LD_INT 2
39222: ARRAY
39223: PUSH
39224: LD_VAR 0 13
39228: PUSH
39229: LD_INT 2
39231: PLUS
39232: GREATER
39233: OR
39234: PUSH
39235: LD_VAR 0 8
39239: PUSH
39240: LD_INT 2
39242: ARRAY
39243: PUSH
39244: LD_VAR 0 13
39248: PUSH
39249: LD_INT 2
39251: MINUS
39252: LESS
39253: OR
39254: PUSH
39255: LD_VAR 0 8
39259: PUSH
39260: LD_INT 3
39262: ARRAY
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 8
39269: PUSH
39270: LD_INT 9
39272: PUSH
39273: LD_INT 10
39275: PUSH
39276: LD_INT 11
39278: PUSH
39279: LD_INT 12
39281: PUSH
39282: LD_INT 13
39284: PUSH
39285: LD_INT 16
39287: PUSH
39288: LD_INT 17
39290: PUSH
39291: LD_INT 18
39293: PUSH
39294: LD_INT 19
39296: PUSH
39297: LD_INT 20
39299: PUSH
39300: LD_INT 21
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: IN
39318: NOT
39319: OR
39320: PUSH
39321: LD_VAR 0 8
39325: PUSH
39326: LD_INT 5
39328: ARRAY
39329: NOT
39330: OR
39331: PUSH
39332: LD_VAR 0 8
39336: PUSH
39337: LD_INT 6
39339: ARRAY
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: LD_INT 7
39349: PUSH
39350: LD_INT 9
39352: PUSH
39353: LD_INT 10
39355: PUSH
39356: LD_INT 11
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: IN
39367: NOT
39368: OR
39369: IFFALSE 39375
// exit ;
39371: POP
39372: POP
39373: GO 39473
// end ;
39375: GO 39046
39377: POP
39378: POP
// side := GetSide ( depot ) ;
39379: LD_ADDR_VAR 0 9
39383: PUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 255
39393: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39394: LD_VAR 0 9
39398: PPUSH
39399: LD_VAR 0 3
39403: PPUSH
39404: LD_VAR 0 4
39408: PPUSH
39409: LD_INT 20
39411: PPUSH
39412: CALL 31794 0 4
39416: PUSH
39417: LD_INT 4
39419: ARRAY
39420: IFFALSE 39424
// exit ;
39422: GO 39473
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39424: LD_VAR 0 2
39428: PUSH
39429: LD_INT 29
39431: PUSH
39432: LD_INT 30
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: IN
39439: PUSH
39440: LD_VAR 0 3
39444: PPUSH
39445: LD_VAR 0 4
39449: PPUSH
39450: LD_VAR 0 9
39454: PPUSH
39455: CALL_OW 440
39459: NOT
39460: AND
39461: IFFALSE 39465
// exit ;
39463: GO 39473
// result := true ;
39465: LD_ADDR_VAR 0 6
39469: PUSH
39470: LD_INT 1
39472: ST_TO_ADDR
// end ;
39473: LD_VAR 0 6
39477: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39478: LD_INT 0
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
39487: PPUSH
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
39530: PPUSH
39531: PPUSH
39532: PPUSH
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
// result = [ ] ;
39538: LD_ADDR_VAR 0 7
39542: PUSH
39543: EMPTY
39544: ST_TO_ADDR
// temp_list = [ ] ;
39545: LD_ADDR_VAR 0 9
39549: PUSH
39550: EMPTY
39551: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39552: LD_VAR 0 4
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 5
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: IN
39583: NOT
39584: PUSH
39585: LD_VAR 0 1
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: IN
39600: PUSH
39601: LD_VAR 0 5
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: IN
39620: NOT
39621: AND
39622: OR
39623: IFFALSE 39627
// exit ;
39625: GO 58018
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39627: LD_VAR 0 1
39631: PUSH
39632: LD_INT 6
39634: PUSH
39635: LD_INT 7
39637: PUSH
39638: LD_INT 8
39640: PUSH
39641: LD_INT 13
39643: PUSH
39644: LD_INT 12
39646: PUSH
39647: LD_INT 15
39649: PUSH
39650: LD_INT 11
39652: PUSH
39653: LD_INT 14
39655: PUSH
39656: LD_INT 10
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: IN
39670: IFFALSE 39680
// btype = b_lab ;
39672: LD_ADDR_VAR 0 1
39676: PUSH
39677: LD_INT 6
39679: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39680: LD_VAR 0 6
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: IN
39699: NOT
39700: PUSH
39701: LD_VAR 0 1
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: LD_INT 6
39720: PUSH
39721: LD_INT 36
39723: PUSH
39724: LD_INT 4
39726: PUSH
39727: LD_INT 5
39729: PUSH
39730: LD_INT 31
39732: PUSH
39733: LD_INT 32
39735: PUSH
39736: LD_INT 33
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: IN
39752: NOT
39753: PUSH
39754: LD_VAR 0 6
39758: PUSH
39759: LD_INT 1
39761: EQUAL
39762: AND
39763: OR
39764: PUSH
39765: LD_VAR 0 1
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 3
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: IN
39780: NOT
39781: PUSH
39782: LD_VAR 0 6
39786: PUSH
39787: LD_INT 2
39789: EQUAL
39790: AND
39791: OR
39792: IFFALSE 39802
// mode = 0 ;
39794: LD_ADDR_VAR 0 6
39798: PUSH
39799: LD_INT 0
39801: ST_TO_ADDR
// case mode of 0 :
39802: LD_VAR 0 6
39806: PUSH
39807: LD_INT 0
39809: DOUBLE
39810: EQUAL
39811: IFTRUE 39815
39813: GO 51268
39815: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39816: LD_ADDR_VAR 0 11
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40009: LD_ADDR_VAR 0 12
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 3
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40205: LD_ADDR_VAR 0 13
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: LD_INT 3
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: LD_INT 3
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40404: LD_ADDR_VAR 0 14
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40600: LD_ADDR_VAR 0 15
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40793: LD_ADDR_VAR 0 16
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 3
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 3
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 3
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40986: LD_ADDR_VAR 0 17
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41216: LD_ADDR_VAR 0 18
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41446: LD_ADDR_VAR 0 19
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41676: LD_ADDR_VAR 0 20
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: LD_INT 2
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41906: LD_ADDR_VAR 0 21
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42136: LD_ADDR_VAR 0 22
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42366: LD_ADDR_VAR 0 23
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 3
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42646: LD_ADDR_VAR 0 24
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42922: LD_ADDR_VAR 0 25
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43196: LD_ADDR_VAR 0 26
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43472: LD_ADDR_VAR 0 27
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43752: LD_ADDR_VAR 0 28
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: LD_INT 3
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 3
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 3
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: NEG
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44034: LD_ADDR_VAR 0 29
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 3
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 3
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44313: LD_ADDR_VAR 0 30
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44591: LD_ADDR_VAR 0 31
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 3
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44869: LD_ADDR_VAR 0 32
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 3
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 3
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 3
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45147: LD_ADDR_VAR 0 33
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 3
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45426: LD_ADDR_VAR 0 34
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 3
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 3
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45706: LD_ADDR_VAR 0 35
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45818: LD_ADDR_VAR 0 36
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45930: LD_ADDR_VAR 0 37
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 38
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46154: LD_ADDR_VAR 0 39
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46266: LD_ADDR_VAR 0 40
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46378: LD_ADDR_VAR 0 41
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 3
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 3
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 3
46621: PUSH
46622: LD_INT 3
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: NEG
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46728: LD_ADDR_VAR 0 42
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: LD_INT 3
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 3
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: LD_INT 3
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47078: LD_ADDR_VAR 0 43
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 3
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 3
47374: NEG
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 3
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47426: LD_ADDR_VAR 0 44
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 3
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 3
47700: NEG
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: NEG
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47776: LD_ADDR_VAR 0 45
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 3
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48126: LD_ADDR_VAR 0 46
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48474: LD_ADDR_VAR 0 47
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48625: LD_ADDR_VAR 0 48
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48772: LD_ADDR_VAR 0 49
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48916: LD_ADDR_VAR 0 50
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49060: LD_ADDR_VAR 0 51
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49207: LD_ADDR_VAR 0 52
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49358: LD_ADDR_VAR 0 53
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49588: LD_ADDR_VAR 0 54
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49818: LD_ADDR_VAR 0 55
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50048: LD_ADDR_VAR 0 56
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50278: LD_ADDR_VAR 0 57
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50508: LD_ADDR_VAR 0 58
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50738: LD_ADDR_VAR 0 59
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50826: LD_ADDR_VAR 0 60
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50914: LD_ADDR_VAR 0 61
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51002: LD_ADDR_VAR 0 62
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51090: LD_ADDR_VAR 0 63
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51178: LD_ADDR_VAR 0 64
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// end ; 1 :
51266: GO 57163
51268: LD_INT 1
51270: DOUBLE
51271: EQUAL
51272: IFTRUE 51276
51274: GO 53899
51276: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51277: LD_ADDR_VAR 0 11
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 3
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51321: LD_ADDR_VAR 0 12
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51362: LD_ADDR_VAR 0 13
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51402: LD_ADDR_VAR 0 14
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51443: LD_ADDR_VAR 0 15
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51487: LD_ADDR_VAR 0 16
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51533: LD_ADDR_VAR 0 17
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51577: LD_ADDR_VAR 0 18
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51618: LD_ADDR_VAR 0 19
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51658: LD_ADDR_VAR 0 20
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51699: LD_ADDR_VAR 0 21
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51743: LD_ADDR_VAR 0 22
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51789: LD_ADDR_VAR 0 23
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 4
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51833: LD_ADDR_VAR 0 24
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 4
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51874: LD_ADDR_VAR 0 25
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 4
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: LD_INT 4
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51914: LD_ADDR_VAR 0 26
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51955: LD_ADDR_VAR 0 27
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 4
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51999: LD_ADDR_VAR 0 28
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: LD_INT 3
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: NEG
52019: PUSH
52020: LD_INT 4
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 4
52030: NEG
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52045: LD_ADDR_VAR 0 29
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 4
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 4
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 5
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 5
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 4
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 6
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 6
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 5
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52200: LD_ADDR_VAR 0 30
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 4
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 4
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 5
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 5
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 5
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 6
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 6
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52343: LD_ADDR_VAR 0 31
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 4
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 5
52410: PUSH
52411: LD_INT 4
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 5
52420: PUSH
52421: LD_INT 5
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: LD_INT 5
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 6
52440: PUSH
52441: LD_INT 5
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 6
52450: PUSH
52451: LD_INT 6
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 5
52460: PUSH
52461: LD_INT 6
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52482: LD_ADDR_VAR 0 32
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 4
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 4
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 5
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 5
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 4
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 6
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 6
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 5
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52625: LD_ADDR_VAR 0 33
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 3
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 4
52677: NEG
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 4
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 4
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 5
52711: NEG
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 5
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 5
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 6
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 6
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52780: LD_ADDR_VAR 0 34
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: NEG
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 4
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: NEG
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 4
52847: NEG
52848: PUSH
52849: LD_INT 4
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: LD_INT 5
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 5
52871: NEG
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 5
52883: NEG
52884: PUSH
52885: LD_INT 5
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 5
52895: NEG
52896: PUSH
52897: LD_INT 6
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 6
52907: NEG
52908: PUSH
52909: LD_INT 5
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 6
52919: NEG
52920: PUSH
52921: LD_INT 6
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52943: LD_ADDR_VAR 0 41
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52987: LD_ADDR_VAR 0 42
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53028: LD_ADDR_VAR 0 43
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53068: LD_ADDR_VAR 0 44
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53109: LD_ADDR_VAR 0 45
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53153: LD_ADDR_VAR 0 46
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53199: LD_ADDR_VAR 0 47
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 3
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53232: LD_ADDR_VAR 0 48
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53263: LD_ADDR_VAR 0 49
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53292: LD_ADDR_VAR 0 50
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53321: LD_ADDR_VAR 0 51
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53352: LD_ADDR_VAR 0 52
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53385: LD_ADDR_VAR 0 53
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53429: LD_ADDR_VAR 0 54
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53470: LD_ADDR_VAR 0 55
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53510: LD_ADDR_VAR 0 56
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53551: LD_ADDR_VAR 0 57
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53595: LD_ADDR_VAR 0 58
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53641: LD_ADDR_VAR 0 59
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53685: LD_ADDR_VAR 0 60
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53726: LD_ADDR_VAR 0 61
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53766: LD_ADDR_VAR 0 62
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53807: LD_ADDR_VAR 0 63
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53851: LD_ADDR_VAR 0 64
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// end ; 2 :
53897: GO 57163
53899: LD_INT 2
53901: DOUBLE
53902: EQUAL
53903: IFTRUE 53907
53905: GO 57162
53907: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53908: LD_ADDR_VAR 0 29
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 4
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 5
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 5
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 4
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 5
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 4
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 4
54038: PUSH
54039: LD_INT 4
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 4
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 4
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 4
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 4
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 4
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 5
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 5
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 4
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: LD_INT 5
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: NEG
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 4
54258: NEG
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 4
54293: NEG
54294: PUSH
54295: LD_INT 4
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: LD_INT 5
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: LD_INT 4
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 4
54341: NEG
54342: PUSH
54343: LD_INT 3
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 5
54353: NEG
54354: PUSH
54355: LD_INT 4
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 5
54365: NEG
54366: PUSH
54367: LD_INT 5
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: LD_INT 5
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 5
54389: NEG
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54446: LD_ADDR_VAR 0 30
54450: PUSH
54451: LD_INT 4
54453: PUSH
54454: LD_INT 4
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 4
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: LD_INT 4
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 5
54483: PUSH
54484: LD_INT 5
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 4
54493: PUSH
54494: LD_INT 5
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: LD_INT 4
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 5
54523: PUSH
54524: LD_INT 3
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: LD_INT 5
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 4
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 4
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 4
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 4
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 4
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 5
54692: NEG
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 3
54750: NEG
54751: PUSH
54752: LD_INT 4
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 3
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 4
54798: NEG
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: NEG
54811: PUSH
54812: LD_INT 4
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 4
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 4
54834: NEG
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 4
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 5
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 4
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 3
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 4
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 5
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 5
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54993: LD_ADDR_VAR 0 31
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 4
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 5
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 5
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 4
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 5
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 4
55195: NEG
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 4
55207: NEG
55208: PUSH
55209: LD_INT 5
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: LD_INT 4
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 4
55243: NEG
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 5
55255: NEG
55256: PUSH
55257: LD_INT 4
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 5
55267: NEG
55268: PUSH
55269: LD_INT 5
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: LD_INT 5
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 5
55291: NEG
55292: PUSH
55293: LD_INT 3
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 3
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 4
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 3
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 4
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 4
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 4
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 5
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 4
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 5
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55543: LD_ADDR_VAR 0 32
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 4
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 4
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 5
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 5
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 5
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: LD_INT 4
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 4
55712: NEG
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: NEG
55725: PUSH
55726: LD_INT 4
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 4
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 4
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 5
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 4
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 4
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 5
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 5
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 4
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 4
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 4
55955: PUSH
55956: LD_INT 4
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 5
55975: PUSH
55976: LD_INT 4
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 5
55985: PUSH
55986: LD_INT 5
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: LD_INT 5
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: LD_INT 4
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 5
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: LD_INT 5
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56090: LD_ADDR_VAR 0 33
56094: PUSH
56095: LD_INT 4
56097: NEG
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: LD_INT 5
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: NEG
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 4
56145: NEG
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 5
56157: NEG
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 5
56169: NEG
56170: PUSH
56171: LD_INT 5
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: LD_INT 5
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 5
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: LD_INT 3
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 4
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 4
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 5
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 4
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 5
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: LD_INT 3
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 4
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 4
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 5
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 5
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 4
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 5
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 3
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56628: LD_ADDR_VAR 0 34
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 4
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 5
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 5
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 5
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 4
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 4
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 4
56830: PUSH
56831: LD_INT 4
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 4
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 5
56850: PUSH
56851: LD_INT 4
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 5
56860: PUSH
56861: LD_INT 5
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: LD_INT 4
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 5
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: LD_INT 5
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 4
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 4
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 4
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 4
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 4
57058: NEG
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 5
57069: NEG
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 5
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 5
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: ST_TO_ADDR
// end ; end ;
57160: GO 57163
57162: POP
// case btype of b_depot , b_warehouse :
57163: LD_VAR 0 1
57167: PUSH
57168: LD_INT 0
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57182
57174: LD_INT 1
57176: DOUBLE
57177: EQUAL
57178: IFTRUE 57182
57180: GO 57383
57182: POP
// case nation of nation_american :
57183: LD_VAR 0 5
57187: PUSH
57188: LD_INT 1
57190: DOUBLE
57191: EQUAL
57192: IFTRUE 57196
57194: GO 57252
57196: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57197: LD_ADDR_VAR 0 9
57201: PUSH
57202: LD_VAR 0 11
57206: PUSH
57207: LD_VAR 0 12
57211: PUSH
57212: LD_VAR 0 13
57216: PUSH
57217: LD_VAR 0 14
57221: PUSH
57222: LD_VAR 0 15
57226: PUSH
57227: LD_VAR 0 16
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: PUSH
57240: LD_VAR 0 4
57244: PUSH
57245: LD_INT 1
57247: PLUS
57248: ARRAY
57249: ST_TO_ADDR
57250: GO 57381
57252: LD_INT 2
57254: DOUBLE
57255: EQUAL
57256: IFTRUE 57260
57258: GO 57316
57260: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57261: LD_ADDR_VAR 0 9
57265: PUSH
57266: LD_VAR 0 17
57270: PUSH
57271: LD_VAR 0 18
57275: PUSH
57276: LD_VAR 0 19
57280: PUSH
57281: LD_VAR 0 20
57285: PUSH
57286: LD_VAR 0 21
57290: PUSH
57291: LD_VAR 0 22
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: PUSH
57304: LD_VAR 0 4
57308: PUSH
57309: LD_INT 1
57311: PLUS
57312: ARRAY
57313: ST_TO_ADDR
57314: GO 57381
57316: LD_INT 3
57318: DOUBLE
57319: EQUAL
57320: IFTRUE 57324
57322: GO 57380
57324: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57325: LD_ADDR_VAR 0 9
57329: PUSH
57330: LD_VAR 0 23
57334: PUSH
57335: LD_VAR 0 24
57339: PUSH
57340: LD_VAR 0 25
57344: PUSH
57345: LD_VAR 0 26
57349: PUSH
57350: LD_VAR 0 27
57354: PUSH
57355: LD_VAR 0 28
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: PUSH
57368: LD_VAR 0 4
57372: PUSH
57373: LD_INT 1
57375: PLUS
57376: ARRAY
57377: ST_TO_ADDR
57378: GO 57381
57380: POP
57381: GO 57936
57383: LD_INT 2
57385: DOUBLE
57386: EQUAL
57387: IFTRUE 57397
57389: LD_INT 3
57391: DOUBLE
57392: EQUAL
57393: IFTRUE 57397
57395: GO 57453
57397: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57398: LD_ADDR_VAR 0 9
57402: PUSH
57403: LD_VAR 0 29
57407: PUSH
57408: LD_VAR 0 30
57412: PUSH
57413: LD_VAR 0 31
57417: PUSH
57418: LD_VAR 0 32
57422: PUSH
57423: LD_VAR 0 33
57427: PUSH
57428: LD_VAR 0 34
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: PUSH
57441: LD_VAR 0 4
57445: PUSH
57446: LD_INT 1
57448: PLUS
57449: ARRAY
57450: ST_TO_ADDR
57451: GO 57936
57453: LD_INT 16
57455: DOUBLE
57456: EQUAL
57457: IFTRUE 57515
57459: LD_INT 17
57461: DOUBLE
57462: EQUAL
57463: IFTRUE 57515
57465: LD_INT 18
57467: DOUBLE
57468: EQUAL
57469: IFTRUE 57515
57471: LD_INT 19
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57515
57477: LD_INT 22
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57515
57483: LD_INT 20
57485: DOUBLE
57486: EQUAL
57487: IFTRUE 57515
57489: LD_INT 21
57491: DOUBLE
57492: EQUAL
57493: IFTRUE 57515
57495: LD_INT 23
57497: DOUBLE
57498: EQUAL
57499: IFTRUE 57515
57501: LD_INT 24
57503: DOUBLE
57504: EQUAL
57505: IFTRUE 57515
57507: LD_INT 25
57509: DOUBLE
57510: EQUAL
57511: IFTRUE 57515
57513: GO 57571
57515: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57516: LD_ADDR_VAR 0 9
57520: PUSH
57521: LD_VAR 0 35
57525: PUSH
57526: LD_VAR 0 36
57530: PUSH
57531: LD_VAR 0 37
57535: PUSH
57536: LD_VAR 0 38
57540: PUSH
57541: LD_VAR 0 39
57545: PUSH
57546: LD_VAR 0 40
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: PUSH
57559: LD_VAR 0 4
57563: PUSH
57564: LD_INT 1
57566: PLUS
57567: ARRAY
57568: ST_TO_ADDR
57569: GO 57936
57571: LD_INT 6
57573: DOUBLE
57574: EQUAL
57575: IFTRUE 57627
57577: LD_INT 7
57579: DOUBLE
57580: EQUAL
57581: IFTRUE 57627
57583: LD_INT 8
57585: DOUBLE
57586: EQUAL
57587: IFTRUE 57627
57589: LD_INT 13
57591: DOUBLE
57592: EQUAL
57593: IFTRUE 57627
57595: LD_INT 12
57597: DOUBLE
57598: EQUAL
57599: IFTRUE 57627
57601: LD_INT 15
57603: DOUBLE
57604: EQUAL
57605: IFTRUE 57627
57607: LD_INT 11
57609: DOUBLE
57610: EQUAL
57611: IFTRUE 57627
57613: LD_INT 14
57615: DOUBLE
57616: EQUAL
57617: IFTRUE 57627
57619: LD_INT 10
57621: DOUBLE
57622: EQUAL
57623: IFTRUE 57627
57625: GO 57683
57627: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57628: LD_ADDR_VAR 0 9
57632: PUSH
57633: LD_VAR 0 41
57637: PUSH
57638: LD_VAR 0 42
57642: PUSH
57643: LD_VAR 0 43
57647: PUSH
57648: LD_VAR 0 44
57652: PUSH
57653: LD_VAR 0 45
57657: PUSH
57658: LD_VAR 0 46
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 4
57675: PUSH
57676: LD_INT 1
57678: PLUS
57679: ARRAY
57680: ST_TO_ADDR
57681: GO 57936
57683: LD_INT 36
57685: DOUBLE
57686: EQUAL
57687: IFTRUE 57691
57689: GO 57747
57691: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57692: LD_ADDR_VAR 0 9
57696: PUSH
57697: LD_VAR 0 47
57701: PUSH
57702: LD_VAR 0 48
57706: PUSH
57707: LD_VAR 0 49
57711: PUSH
57712: LD_VAR 0 50
57716: PUSH
57717: LD_VAR 0 51
57721: PUSH
57722: LD_VAR 0 52
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: PUSH
57735: LD_VAR 0 4
57739: PUSH
57740: LD_INT 1
57742: PLUS
57743: ARRAY
57744: ST_TO_ADDR
57745: GO 57936
57747: LD_INT 4
57749: DOUBLE
57750: EQUAL
57751: IFTRUE 57773
57753: LD_INT 5
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57773
57759: LD_INT 34
57761: DOUBLE
57762: EQUAL
57763: IFTRUE 57773
57765: LD_INT 37
57767: DOUBLE
57768: EQUAL
57769: IFTRUE 57773
57771: GO 57829
57773: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57774: LD_ADDR_VAR 0 9
57778: PUSH
57779: LD_VAR 0 53
57783: PUSH
57784: LD_VAR 0 54
57788: PUSH
57789: LD_VAR 0 55
57793: PUSH
57794: LD_VAR 0 56
57798: PUSH
57799: LD_VAR 0 57
57803: PUSH
57804: LD_VAR 0 58
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: PUSH
57817: LD_VAR 0 4
57821: PUSH
57822: LD_INT 1
57824: PLUS
57825: ARRAY
57826: ST_TO_ADDR
57827: GO 57936
57829: LD_INT 31
57831: DOUBLE
57832: EQUAL
57833: IFTRUE 57879
57835: LD_INT 32
57837: DOUBLE
57838: EQUAL
57839: IFTRUE 57879
57841: LD_INT 33
57843: DOUBLE
57844: EQUAL
57845: IFTRUE 57879
57847: LD_INT 27
57849: DOUBLE
57850: EQUAL
57851: IFTRUE 57879
57853: LD_INT 26
57855: DOUBLE
57856: EQUAL
57857: IFTRUE 57879
57859: LD_INT 28
57861: DOUBLE
57862: EQUAL
57863: IFTRUE 57879
57865: LD_INT 29
57867: DOUBLE
57868: EQUAL
57869: IFTRUE 57879
57871: LD_INT 30
57873: DOUBLE
57874: EQUAL
57875: IFTRUE 57879
57877: GO 57935
57879: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57880: LD_ADDR_VAR 0 9
57884: PUSH
57885: LD_VAR 0 59
57889: PUSH
57890: LD_VAR 0 60
57894: PUSH
57895: LD_VAR 0 61
57899: PUSH
57900: LD_VAR 0 62
57904: PUSH
57905: LD_VAR 0 63
57909: PUSH
57910: LD_VAR 0 64
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: PUSH
57923: LD_VAR 0 4
57927: PUSH
57928: LD_INT 1
57930: PLUS
57931: ARRAY
57932: ST_TO_ADDR
57933: GO 57936
57935: POP
// temp_list2 = [ ] ;
57936: LD_ADDR_VAR 0 10
57940: PUSH
57941: EMPTY
57942: ST_TO_ADDR
// for i in temp_list do
57943: LD_ADDR_VAR 0 8
57947: PUSH
57948: LD_VAR 0 9
57952: PUSH
57953: FOR_IN
57954: IFFALSE 58006
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57956: LD_ADDR_VAR 0 10
57960: PUSH
57961: LD_VAR 0 10
57965: PUSH
57966: LD_VAR 0 8
57970: PUSH
57971: LD_INT 1
57973: ARRAY
57974: PUSH
57975: LD_VAR 0 2
57979: PLUS
57980: PUSH
57981: LD_VAR 0 8
57985: PUSH
57986: LD_INT 2
57988: ARRAY
57989: PUSH
57990: LD_VAR 0 3
57994: PLUS
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: EMPTY
58001: LIST
58002: ADD
58003: ST_TO_ADDR
58004: GO 57953
58006: POP
58007: POP
// result = temp_list2 ;
58008: LD_ADDR_VAR 0 7
58012: PUSH
58013: LD_VAR 0 10
58017: ST_TO_ADDR
// end ;
58018: LD_VAR 0 7
58022: RET
// export function EnemyInRange ( unit , dist ) ; begin
58023: LD_INT 0
58025: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58026: LD_ADDR_VAR 0 3
58030: PUSH
58031: LD_VAR 0 1
58035: PPUSH
58036: CALL_OW 255
58040: PPUSH
58041: LD_VAR 0 1
58045: PPUSH
58046: CALL_OW 250
58050: PPUSH
58051: LD_VAR 0 1
58055: PPUSH
58056: CALL_OW 251
58060: PPUSH
58061: LD_VAR 0 2
58065: PPUSH
58066: CALL 31794 0 4
58070: PUSH
58071: LD_INT 4
58073: ARRAY
58074: ST_TO_ADDR
// end ;
58075: LD_VAR 0 3
58079: RET
// export function PlayerSeeMe ( unit ) ; begin
58080: LD_INT 0
58082: PPUSH
// result := See ( your_side , unit ) ;
58083: LD_ADDR_VAR 0 2
58087: PUSH
58088: LD_OWVAR 2
58092: PPUSH
58093: LD_VAR 0 1
58097: PPUSH
58098: CALL_OW 292
58102: ST_TO_ADDR
// end ;
58103: LD_VAR 0 2
58107: RET
// export function ReverseDir ( unit ) ; begin
58108: LD_INT 0
58110: PPUSH
// if not unit then
58111: LD_VAR 0 1
58115: NOT
58116: IFFALSE 58120
// exit ;
58118: GO 58143
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58120: LD_ADDR_VAR 0 2
58124: PUSH
58125: LD_VAR 0 1
58129: PPUSH
58130: CALL_OW 254
58134: PUSH
58135: LD_INT 3
58137: PLUS
58138: PUSH
58139: LD_INT 6
58141: MOD
58142: ST_TO_ADDR
// end ;
58143: LD_VAR 0 2
58147: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58148: LD_INT 0
58150: PPUSH
58151: PPUSH
58152: PPUSH
58153: PPUSH
58154: PPUSH
// if not hexes then
58155: LD_VAR 0 2
58159: NOT
58160: IFFALSE 58164
// exit ;
58162: GO 58312
// dist := 9999 ;
58164: LD_ADDR_VAR 0 5
58168: PUSH
58169: LD_INT 9999
58171: ST_TO_ADDR
// for i = 1 to hexes do
58172: LD_ADDR_VAR 0 4
58176: PUSH
58177: DOUBLE
58178: LD_INT 1
58180: DEC
58181: ST_TO_ADDR
58182: LD_VAR 0 2
58186: PUSH
58187: FOR_TO
58188: IFFALSE 58300
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58190: LD_VAR 0 1
58194: PPUSH
58195: LD_VAR 0 2
58199: PUSH
58200: LD_VAR 0 4
58204: ARRAY
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: PPUSH
58210: LD_VAR 0 2
58214: PUSH
58215: LD_VAR 0 4
58219: ARRAY
58220: PUSH
58221: LD_INT 2
58223: ARRAY
58224: PPUSH
58225: CALL_OW 297
58229: PUSH
58230: LD_VAR 0 5
58234: LESS
58235: IFFALSE 58298
// begin hex := hexes [ i ] ;
58237: LD_ADDR_VAR 0 7
58241: PUSH
58242: LD_VAR 0 2
58246: PUSH
58247: LD_VAR 0 4
58251: ARRAY
58252: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58253: LD_ADDR_VAR 0 5
58257: PUSH
58258: LD_VAR 0 1
58262: PPUSH
58263: LD_VAR 0 2
58267: PUSH
58268: LD_VAR 0 4
58272: ARRAY
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PPUSH
58278: LD_VAR 0 2
58282: PUSH
58283: LD_VAR 0 4
58287: ARRAY
58288: PUSH
58289: LD_INT 2
58291: ARRAY
58292: PPUSH
58293: CALL_OW 297
58297: ST_TO_ADDR
// end ; end ;
58298: GO 58187
58300: POP
58301: POP
// result := hex ;
58302: LD_ADDR_VAR 0 3
58306: PUSH
58307: LD_VAR 0 7
58311: ST_TO_ADDR
// end ;
58312: LD_VAR 0 3
58316: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58317: LD_INT 0
58319: PPUSH
58320: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58321: LD_VAR 0 1
58325: NOT
58326: PUSH
58327: LD_VAR 0 1
58331: PUSH
58332: LD_INT 21
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 23
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PPUSH
58356: CALL_OW 69
58360: IN
58361: NOT
58362: OR
58363: IFFALSE 58367
// exit ;
58365: GO 58414
// for i = 1 to 3 do
58367: LD_ADDR_VAR 0 3
58371: PUSH
58372: DOUBLE
58373: LD_INT 1
58375: DEC
58376: ST_TO_ADDR
58377: LD_INT 3
58379: PUSH
58380: FOR_TO
58381: IFFALSE 58412
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58383: LD_VAR 0 1
58387: PPUSH
58388: CALL_OW 250
58392: PPUSH
58393: LD_VAR 0 1
58397: PPUSH
58398: CALL_OW 251
58402: PPUSH
58403: LD_INT 1
58405: PPUSH
58406: CALL_OW 453
58410: GO 58380
58412: POP
58413: POP
// end ;
58414: LD_VAR 0 2
58418: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58419: LD_INT 0
58421: PPUSH
58422: PPUSH
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58427: LD_VAR 0 1
58431: NOT
58432: PUSH
58433: LD_VAR 0 2
58437: NOT
58438: OR
58439: PUSH
58440: LD_VAR 0 1
58444: PPUSH
58445: CALL_OW 314
58449: OR
58450: IFFALSE 58454
// exit ;
58452: GO 58895
// x := GetX ( enemy_unit ) ;
58454: LD_ADDR_VAR 0 7
58458: PUSH
58459: LD_VAR 0 2
58463: PPUSH
58464: CALL_OW 250
58468: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58469: LD_ADDR_VAR 0 8
58473: PUSH
58474: LD_VAR 0 2
58478: PPUSH
58479: CALL_OW 251
58483: ST_TO_ADDR
// if not x or not y then
58484: LD_VAR 0 7
58488: NOT
58489: PUSH
58490: LD_VAR 0 8
58494: NOT
58495: OR
58496: IFFALSE 58500
// exit ;
58498: GO 58895
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58500: LD_ADDR_VAR 0 6
58504: PUSH
58505: LD_VAR 0 7
58509: PPUSH
58510: LD_INT 0
58512: PPUSH
58513: LD_INT 4
58515: PPUSH
58516: CALL_OW 272
58520: PUSH
58521: LD_VAR 0 8
58525: PPUSH
58526: LD_INT 0
58528: PPUSH
58529: LD_INT 4
58531: PPUSH
58532: CALL_OW 273
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_VAR 0 7
58545: PPUSH
58546: LD_INT 1
58548: PPUSH
58549: LD_INT 4
58551: PPUSH
58552: CALL_OW 272
58556: PUSH
58557: LD_VAR 0 8
58561: PPUSH
58562: LD_INT 1
58564: PPUSH
58565: LD_INT 4
58567: PPUSH
58568: CALL_OW 273
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_VAR 0 7
58581: PPUSH
58582: LD_INT 2
58584: PPUSH
58585: LD_INT 4
58587: PPUSH
58588: CALL_OW 272
58592: PUSH
58593: LD_VAR 0 8
58597: PPUSH
58598: LD_INT 2
58600: PPUSH
58601: LD_INT 4
58603: PPUSH
58604: CALL_OW 273
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_VAR 0 7
58617: PPUSH
58618: LD_INT 3
58620: PPUSH
58621: LD_INT 4
58623: PPUSH
58624: CALL_OW 272
58628: PUSH
58629: LD_VAR 0 8
58633: PPUSH
58634: LD_INT 3
58636: PPUSH
58637: LD_INT 4
58639: PPUSH
58640: CALL_OW 273
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_VAR 0 7
58653: PPUSH
58654: LD_INT 4
58656: PPUSH
58657: LD_INT 4
58659: PPUSH
58660: CALL_OW 272
58664: PUSH
58665: LD_VAR 0 8
58669: PPUSH
58670: LD_INT 4
58672: PPUSH
58673: LD_INT 4
58675: PPUSH
58676: CALL_OW 273
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_VAR 0 7
58689: PPUSH
58690: LD_INT 5
58692: PPUSH
58693: LD_INT 4
58695: PPUSH
58696: CALL_OW 272
58700: PUSH
58701: LD_VAR 0 8
58705: PPUSH
58706: LD_INT 5
58708: PPUSH
58709: LD_INT 4
58711: PPUSH
58712: CALL_OW 273
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// for i = tmp downto 1 do
58729: LD_ADDR_VAR 0 4
58733: PUSH
58734: DOUBLE
58735: LD_VAR 0 6
58739: INC
58740: ST_TO_ADDR
58741: LD_INT 1
58743: PUSH
58744: FOR_DOWNTO
58745: IFFALSE 58846
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58747: LD_VAR 0 6
58751: PUSH
58752: LD_VAR 0 4
58756: ARRAY
58757: PUSH
58758: LD_INT 1
58760: ARRAY
58761: PPUSH
58762: LD_VAR 0 6
58766: PUSH
58767: LD_VAR 0 4
58771: ARRAY
58772: PUSH
58773: LD_INT 2
58775: ARRAY
58776: PPUSH
58777: CALL_OW 488
58781: NOT
58782: PUSH
58783: LD_VAR 0 6
58787: PUSH
58788: LD_VAR 0 4
58792: ARRAY
58793: PUSH
58794: LD_INT 1
58796: ARRAY
58797: PPUSH
58798: LD_VAR 0 6
58802: PUSH
58803: LD_VAR 0 4
58807: ARRAY
58808: PUSH
58809: LD_INT 2
58811: ARRAY
58812: PPUSH
58813: CALL_OW 428
58817: PUSH
58818: LD_INT 0
58820: NONEQUAL
58821: OR
58822: IFFALSE 58844
// tmp := Delete ( tmp , i ) ;
58824: LD_ADDR_VAR 0 6
58828: PUSH
58829: LD_VAR 0 6
58833: PPUSH
58834: LD_VAR 0 4
58838: PPUSH
58839: CALL_OW 3
58843: ST_TO_ADDR
58844: GO 58744
58846: POP
58847: POP
// j := GetClosestHex ( unit , tmp ) ;
58848: LD_ADDR_VAR 0 5
58852: PUSH
58853: LD_VAR 0 1
58857: PPUSH
58858: LD_VAR 0 6
58862: PPUSH
58863: CALL 58148 0 2
58867: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58868: LD_VAR 0 1
58872: PPUSH
58873: LD_VAR 0 5
58877: PUSH
58878: LD_INT 1
58880: ARRAY
58881: PPUSH
58882: LD_VAR 0 5
58886: PUSH
58887: LD_INT 2
58889: ARRAY
58890: PPUSH
58891: CALL_OW 111
// end ;
58895: LD_VAR 0 3
58899: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58900: LD_INT 0
58902: PPUSH
58903: PPUSH
58904: PPUSH
// uc_side = 0 ;
58905: LD_ADDR_OWVAR 20
58909: PUSH
58910: LD_INT 0
58912: ST_TO_ADDR
// uc_nation = 0 ;
58913: LD_ADDR_OWVAR 21
58917: PUSH
58918: LD_INT 0
58920: ST_TO_ADDR
// InitHc_All ( ) ;
58921: CALL_OW 584
// InitVc ;
58925: CALL_OW 20
// if mastodonts then
58929: LD_VAR 0 6
58933: IFFALSE 59000
// for i = 1 to mastodonts do
58935: LD_ADDR_VAR 0 11
58939: PUSH
58940: DOUBLE
58941: LD_INT 1
58943: DEC
58944: ST_TO_ADDR
58945: LD_VAR 0 6
58949: PUSH
58950: FOR_TO
58951: IFFALSE 58998
// begin vc_chassis := 31 ;
58953: LD_ADDR_OWVAR 37
58957: PUSH
58958: LD_INT 31
58960: ST_TO_ADDR
// vc_control := control_rider ;
58961: LD_ADDR_OWVAR 38
58965: PUSH
58966: LD_INT 4
58968: ST_TO_ADDR
// animal := CreateVehicle ;
58969: LD_ADDR_VAR 0 12
58973: PUSH
58974: CALL_OW 45
58978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58979: LD_VAR 0 12
58983: PPUSH
58984: LD_VAR 0 8
58988: PPUSH
58989: LD_INT 0
58991: PPUSH
58992: CALL 61188 0 3
// end ;
58996: GO 58950
58998: POP
58999: POP
// if horses then
59000: LD_VAR 0 5
59004: IFFALSE 59071
// for i = 1 to horses do
59006: LD_ADDR_VAR 0 11
59010: PUSH
59011: DOUBLE
59012: LD_INT 1
59014: DEC
59015: ST_TO_ADDR
59016: LD_VAR 0 5
59020: PUSH
59021: FOR_TO
59022: IFFALSE 59069
// begin hc_class := 21 ;
59024: LD_ADDR_OWVAR 28
59028: PUSH
59029: LD_INT 21
59031: ST_TO_ADDR
// hc_gallery :=  ;
59032: LD_ADDR_OWVAR 33
59036: PUSH
59037: LD_STRING 
59039: ST_TO_ADDR
// animal := CreateHuman ;
59040: LD_ADDR_VAR 0 12
59044: PUSH
59045: CALL_OW 44
59049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59050: LD_VAR 0 12
59054: PPUSH
59055: LD_VAR 0 8
59059: PPUSH
59060: LD_INT 0
59062: PPUSH
59063: CALL 61188 0 3
// end ;
59067: GO 59021
59069: POP
59070: POP
// if birds then
59071: LD_VAR 0 1
59075: IFFALSE 59142
// for i = 1 to birds do
59077: LD_ADDR_VAR 0 11
59081: PUSH
59082: DOUBLE
59083: LD_INT 1
59085: DEC
59086: ST_TO_ADDR
59087: LD_VAR 0 1
59091: PUSH
59092: FOR_TO
59093: IFFALSE 59140
// begin hc_class = 18 ;
59095: LD_ADDR_OWVAR 28
59099: PUSH
59100: LD_INT 18
59102: ST_TO_ADDR
// hc_gallery =  ;
59103: LD_ADDR_OWVAR 33
59107: PUSH
59108: LD_STRING 
59110: ST_TO_ADDR
// animal := CreateHuman ;
59111: LD_ADDR_VAR 0 12
59115: PUSH
59116: CALL_OW 44
59120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59121: LD_VAR 0 12
59125: PPUSH
59126: LD_VAR 0 8
59130: PPUSH
59131: LD_INT 0
59133: PPUSH
59134: CALL 61188 0 3
// end ;
59138: GO 59092
59140: POP
59141: POP
// if tigers then
59142: LD_VAR 0 2
59146: IFFALSE 59230
// for i = 1 to tigers do
59148: LD_ADDR_VAR 0 11
59152: PUSH
59153: DOUBLE
59154: LD_INT 1
59156: DEC
59157: ST_TO_ADDR
59158: LD_VAR 0 2
59162: PUSH
59163: FOR_TO
59164: IFFALSE 59228
// begin hc_class = class_tiger ;
59166: LD_ADDR_OWVAR 28
59170: PUSH
59171: LD_INT 14
59173: ST_TO_ADDR
// hc_gallery =  ;
59174: LD_ADDR_OWVAR 33
59178: PUSH
59179: LD_STRING 
59181: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59182: LD_ADDR_OWVAR 35
59186: PUSH
59187: LD_INT 7
59189: NEG
59190: PPUSH
59191: LD_INT 7
59193: PPUSH
59194: CALL_OW 12
59198: ST_TO_ADDR
// animal := CreateHuman ;
59199: LD_ADDR_VAR 0 12
59203: PUSH
59204: CALL_OW 44
59208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59209: LD_VAR 0 12
59213: PPUSH
59214: LD_VAR 0 8
59218: PPUSH
59219: LD_INT 0
59221: PPUSH
59222: CALL 61188 0 3
// end ;
59226: GO 59163
59228: POP
59229: POP
// if apemans then
59230: LD_VAR 0 3
59234: IFFALSE 59357
// for i = 1 to apemans do
59236: LD_ADDR_VAR 0 11
59240: PUSH
59241: DOUBLE
59242: LD_INT 1
59244: DEC
59245: ST_TO_ADDR
59246: LD_VAR 0 3
59250: PUSH
59251: FOR_TO
59252: IFFALSE 59355
// begin hc_class = class_apeman ;
59254: LD_ADDR_OWVAR 28
59258: PUSH
59259: LD_INT 12
59261: ST_TO_ADDR
// hc_gallery =  ;
59262: LD_ADDR_OWVAR 33
59266: PUSH
59267: LD_STRING 
59269: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59270: LD_ADDR_OWVAR 35
59274: PUSH
59275: LD_INT 5
59277: NEG
59278: PPUSH
59279: LD_INT 5
59281: PPUSH
59282: CALL_OW 12
59286: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59287: LD_ADDR_OWVAR 31
59291: PUSH
59292: LD_INT 1
59294: PPUSH
59295: LD_INT 3
59297: PPUSH
59298: CALL_OW 12
59302: PUSH
59303: LD_INT 1
59305: PPUSH
59306: LD_INT 3
59308: PPUSH
59309: CALL_OW 12
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// animal := CreateHuman ;
59326: LD_ADDR_VAR 0 12
59330: PUSH
59331: CALL_OW 44
59335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59336: LD_VAR 0 12
59340: PPUSH
59341: LD_VAR 0 8
59345: PPUSH
59346: LD_INT 0
59348: PPUSH
59349: CALL 61188 0 3
// end ;
59353: GO 59251
59355: POP
59356: POP
// if enchidnas then
59357: LD_VAR 0 4
59361: IFFALSE 59428
// for i = 1 to enchidnas do
59363: LD_ADDR_VAR 0 11
59367: PUSH
59368: DOUBLE
59369: LD_INT 1
59371: DEC
59372: ST_TO_ADDR
59373: LD_VAR 0 4
59377: PUSH
59378: FOR_TO
59379: IFFALSE 59426
// begin hc_class = 13 ;
59381: LD_ADDR_OWVAR 28
59385: PUSH
59386: LD_INT 13
59388: ST_TO_ADDR
// hc_gallery =  ;
59389: LD_ADDR_OWVAR 33
59393: PUSH
59394: LD_STRING 
59396: ST_TO_ADDR
// animal := CreateHuman ;
59397: LD_ADDR_VAR 0 12
59401: PUSH
59402: CALL_OW 44
59406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59407: LD_VAR 0 12
59411: PPUSH
59412: LD_VAR 0 8
59416: PPUSH
59417: LD_INT 0
59419: PPUSH
59420: CALL 61188 0 3
// end ;
59424: GO 59378
59426: POP
59427: POP
// if fishes then
59428: LD_VAR 0 7
59432: IFFALSE 59499
// for i = 1 to fishes do
59434: LD_ADDR_VAR 0 11
59438: PUSH
59439: DOUBLE
59440: LD_INT 1
59442: DEC
59443: ST_TO_ADDR
59444: LD_VAR 0 7
59448: PUSH
59449: FOR_TO
59450: IFFALSE 59497
// begin hc_class = 20 ;
59452: LD_ADDR_OWVAR 28
59456: PUSH
59457: LD_INT 20
59459: ST_TO_ADDR
// hc_gallery =  ;
59460: LD_ADDR_OWVAR 33
59464: PUSH
59465: LD_STRING 
59467: ST_TO_ADDR
// animal := CreateHuman ;
59468: LD_ADDR_VAR 0 12
59472: PUSH
59473: CALL_OW 44
59477: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59478: LD_VAR 0 12
59482: PPUSH
59483: LD_VAR 0 9
59487: PPUSH
59488: LD_INT 0
59490: PPUSH
59491: CALL 61188 0 3
// end ;
59495: GO 59449
59497: POP
59498: POP
// end ;
59499: LD_VAR 0 10
59503: RET
// export function WantHeal ( sci , unit ) ; begin
59504: LD_INT 0
59506: PPUSH
// if GetTaskList ( sci ) > 0 then
59507: LD_VAR 0 1
59511: PPUSH
59512: CALL_OW 437
59516: PUSH
59517: LD_INT 0
59519: GREATER
59520: IFFALSE 59590
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59522: LD_VAR 0 1
59526: PPUSH
59527: CALL_OW 437
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: PUSH
59536: LD_INT 1
59538: ARRAY
59539: PUSH
59540: LD_STRING l
59542: EQUAL
59543: PUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: CALL_OW 437
59553: PUSH
59554: LD_INT 1
59556: ARRAY
59557: PUSH
59558: LD_INT 4
59560: ARRAY
59561: PUSH
59562: LD_VAR 0 2
59566: EQUAL
59567: AND
59568: IFFALSE 59580
// result := true else
59570: LD_ADDR_VAR 0 3
59574: PUSH
59575: LD_INT 1
59577: ST_TO_ADDR
59578: GO 59588
// result := false ;
59580: LD_ADDR_VAR 0 3
59584: PUSH
59585: LD_INT 0
59587: ST_TO_ADDR
// end else
59588: GO 59598
// result := false ;
59590: LD_ADDR_VAR 0 3
59594: PUSH
59595: LD_INT 0
59597: ST_TO_ADDR
// end ;
59598: LD_VAR 0 3
59602: RET
// export function HealTarget ( sci ) ; begin
59603: LD_INT 0
59605: PPUSH
// if not sci then
59606: LD_VAR 0 1
59610: NOT
59611: IFFALSE 59615
// exit ;
59613: GO 59680
// result := 0 ;
59615: LD_ADDR_VAR 0 2
59619: PUSH
59620: LD_INT 0
59622: ST_TO_ADDR
// if GetTaskList ( sci ) then
59623: LD_VAR 0 1
59627: PPUSH
59628: CALL_OW 437
59632: IFFALSE 59680
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59634: LD_VAR 0 1
59638: PPUSH
59639: CALL_OW 437
59643: PUSH
59644: LD_INT 1
59646: ARRAY
59647: PUSH
59648: LD_INT 1
59650: ARRAY
59651: PUSH
59652: LD_STRING l
59654: EQUAL
59655: IFFALSE 59680
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59657: LD_ADDR_VAR 0 2
59661: PUSH
59662: LD_VAR 0 1
59666: PPUSH
59667: CALL_OW 437
59671: PUSH
59672: LD_INT 1
59674: ARRAY
59675: PUSH
59676: LD_INT 4
59678: ARRAY
59679: ST_TO_ADDR
// end ;
59680: LD_VAR 0 2
59684: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59685: LD_INT 0
59687: PPUSH
59688: PPUSH
59689: PPUSH
59690: PPUSH
// if not base_units then
59691: LD_VAR 0 1
59695: NOT
59696: IFFALSE 59700
// exit ;
59698: GO 59787
// result := false ;
59700: LD_ADDR_VAR 0 2
59704: PUSH
59705: LD_INT 0
59707: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59708: LD_ADDR_VAR 0 5
59712: PUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_INT 21
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PPUSH
59728: CALL_OW 72
59732: ST_TO_ADDR
// if not tmp then
59733: LD_VAR 0 5
59737: NOT
59738: IFFALSE 59742
// exit ;
59740: GO 59787
// for i in tmp do
59742: LD_ADDR_VAR 0 3
59746: PUSH
59747: LD_VAR 0 5
59751: PUSH
59752: FOR_IN
59753: IFFALSE 59785
// begin result := EnemyInRange ( i , 22 ) ;
59755: LD_ADDR_VAR 0 2
59759: PUSH
59760: LD_VAR 0 3
59764: PPUSH
59765: LD_INT 22
59767: PPUSH
59768: CALL 58023 0 2
59772: ST_TO_ADDR
// if result then
59773: LD_VAR 0 2
59777: IFFALSE 59783
// exit ;
59779: POP
59780: POP
59781: GO 59787
// end ;
59783: GO 59752
59785: POP
59786: POP
// end ;
59787: LD_VAR 0 2
59791: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59792: LD_INT 0
59794: PPUSH
59795: PPUSH
// if not units then
59796: LD_VAR 0 1
59800: NOT
59801: IFFALSE 59805
// exit ;
59803: GO 59875
// result := [ ] ;
59805: LD_ADDR_VAR 0 3
59809: PUSH
59810: EMPTY
59811: ST_TO_ADDR
// for i in units do
59812: LD_ADDR_VAR 0 4
59816: PUSH
59817: LD_VAR 0 1
59821: PUSH
59822: FOR_IN
59823: IFFALSE 59873
// if GetTag ( i ) = tag then
59825: LD_VAR 0 4
59829: PPUSH
59830: CALL_OW 110
59834: PUSH
59835: LD_VAR 0 2
59839: EQUAL
59840: IFFALSE 59871
// result := Insert ( result , result + 1 , i ) ;
59842: LD_ADDR_VAR 0 3
59846: PUSH
59847: LD_VAR 0 3
59851: PPUSH
59852: LD_VAR 0 3
59856: PUSH
59857: LD_INT 1
59859: PLUS
59860: PPUSH
59861: LD_VAR 0 4
59865: PPUSH
59866: CALL_OW 2
59870: ST_TO_ADDR
59871: GO 59822
59873: POP
59874: POP
// end ;
59875: LD_VAR 0 3
59879: RET
// export function IsDriver ( un ) ; begin
59880: LD_INT 0
59882: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59883: LD_ADDR_VAR 0 2
59887: PUSH
59888: LD_VAR 0 1
59892: PUSH
59893: LD_INT 55
59895: PUSH
59896: EMPTY
59897: LIST
59898: PPUSH
59899: CALL_OW 69
59903: IN
59904: ST_TO_ADDR
// end ;
59905: LD_VAR 0 2
59909: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59910: LD_INT 0
59912: PPUSH
59913: PPUSH
// list := [ ] ;
59914: LD_ADDR_VAR 0 5
59918: PUSH
59919: EMPTY
59920: ST_TO_ADDR
// case d of 0 :
59921: LD_VAR 0 3
59925: PUSH
59926: LD_INT 0
59928: DOUBLE
59929: EQUAL
59930: IFTRUE 59934
59932: GO 60067
59934: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59935: LD_ADDR_VAR 0 5
59939: PUSH
59940: LD_VAR 0 1
59944: PUSH
59945: LD_INT 4
59947: MINUS
59948: PUSH
59949: LD_VAR 0 2
59953: PUSH
59954: LD_INT 4
59956: MINUS
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: PUSH
59966: LD_VAR 0 1
59970: PUSH
59971: LD_INT 3
59973: MINUS
59974: PUSH
59975: LD_VAR 0 2
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: PUSH
59988: LD_VAR 0 1
59992: PUSH
59993: LD_INT 4
59995: PLUS
59996: PUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_INT 4
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: PUSH
60010: LD_VAR 0 1
60014: PUSH
60015: LD_INT 3
60017: PLUS
60018: PUSH
60019: LD_VAR 0 2
60023: PUSH
60024: LD_INT 3
60026: PLUS
60027: PUSH
60028: LD_INT 5
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: LIST
60035: PUSH
60036: LD_VAR 0 1
60040: PUSH
60041: LD_VAR 0 2
60045: PUSH
60046: LD_INT 4
60048: PLUS
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// end ; 1 :
60065: GO 60765
60067: LD_INT 1
60069: DOUBLE
60070: EQUAL
60071: IFTRUE 60075
60073: GO 60208
60075: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60076: LD_ADDR_VAR 0 5
60080: PUSH
60081: LD_VAR 0 1
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_INT 4
60093: MINUS
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: PUSH
60103: LD_VAR 0 1
60107: PUSH
60108: LD_INT 3
60110: MINUS
60111: PUSH
60112: LD_VAR 0 2
60116: PUSH
60117: LD_INT 3
60119: MINUS
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: LIST
60128: PUSH
60129: LD_VAR 0 1
60133: PUSH
60134: LD_INT 4
60136: MINUS
60137: PUSH
60138: LD_VAR 0 2
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: PUSH
60151: LD_VAR 0 1
60155: PUSH
60156: LD_VAR 0 2
60160: PUSH
60161: LD_INT 3
60163: PLUS
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: PUSH
60173: LD_VAR 0 1
60177: PUSH
60178: LD_INT 4
60180: PLUS
60181: PUSH
60182: LD_VAR 0 2
60186: PUSH
60187: LD_INT 4
60189: PLUS
60190: PUSH
60191: LD_INT 5
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: ST_TO_ADDR
// end ; 2 :
60206: GO 60765
60208: LD_INT 2
60210: DOUBLE
60211: EQUAL
60212: IFTRUE 60216
60214: GO 60345
60216: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60217: LD_ADDR_VAR 0 5
60221: PUSH
60222: LD_VAR 0 1
60226: PUSH
60227: LD_VAR 0 2
60231: PUSH
60232: LD_INT 3
60234: MINUS
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: PUSH
60244: LD_VAR 0 1
60248: PUSH
60249: LD_INT 4
60251: PLUS
60252: PUSH
60253: LD_VAR 0 2
60257: PUSH
60258: LD_INT 4
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: PUSH
60266: LD_VAR 0 1
60270: PUSH
60271: LD_VAR 0 2
60275: PUSH
60276: LD_INT 4
60278: PLUS
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: PUSH
60288: LD_VAR 0 1
60292: PUSH
60293: LD_INT 3
60295: MINUS
60296: PUSH
60297: LD_VAR 0 2
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: PUSH
60310: LD_VAR 0 1
60314: PUSH
60315: LD_INT 4
60317: MINUS
60318: PUSH
60319: LD_VAR 0 2
60323: PUSH
60324: LD_INT 4
60326: MINUS
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// end ; 3 :
60343: GO 60765
60345: LD_INT 3
60347: DOUBLE
60348: EQUAL
60349: IFTRUE 60353
60351: GO 60486
60353: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60354: LD_ADDR_VAR 0 5
60358: PUSH
60359: LD_VAR 0 1
60363: PUSH
60364: LD_INT 3
60366: PLUS
60367: PUSH
60368: LD_VAR 0 2
60372: PUSH
60373: LD_INT 4
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: PUSH
60381: LD_VAR 0 1
60385: PUSH
60386: LD_INT 4
60388: PLUS
60389: PUSH
60390: LD_VAR 0 2
60394: PUSH
60395: LD_INT 4
60397: PLUS
60398: PUSH
60399: LD_INT 5
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: PUSH
60407: LD_VAR 0 1
60411: PUSH
60412: LD_INT 4
60414: MINUS
60415: PUSH
60416: LD_VAR 0 2
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: PUSH
60429: LD_VAR 0 1
60433: PUSH
60434: LD_VAR 0 2
60438: PUSH
60439: LD_INT 4
60441: MINUS
60442: PUSH
60443: LD_INT 3
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: PUSH
60451: LD_VAR 0 1
60455: PUSH
60456: LD_INT 3
60458: MINUS
60459: PUSH
60460: LD_VAR 0 2
60464: PUSH
60465: LD_INT 3
60467: MINUS
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: ST_TO_ADDR
// end ; 4 :
60484: GO 60765
60486: LD_INT 4
60488: DOUBLE
60489: EQUAL
60490: IFTRUE 60494
60492: GO 60627
60494: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60495: LD_ADDR_VAR 0 5
60499: PUSH
60500: LD_VAR 0 1
60504: PUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_INT 4
60512: PLUS
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: PUSH
60522: LD_VAR 0 1
60526: PUSH
60527: LD_INT 3
60529: PLUS
60530: PUSH
60531: LD_VAR 0 2
60535: PUSH
60536: LD_INT 3
60538: PLUS
60539: PUSH
60540: LD_INT 5
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: PUSH
60548: LD_VAR 0 1
60552: PUSH
60553: LD_INT 4
60555: PLUS
60556: PUSH
60557: LD_VAR 0 2
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: PUSH
60570: LD_VAR 0 1
60574: PUSH
60575: LD_VAR 0 2
60579: PUSH
60580: LD_INT 3
60582: MINUS
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: LD_VAR 0 1
60596: PUSH
60597: LD_INT 4
60599: MINUS
60600: PUSH
60601: LD_VAR 0 2
60605: PUSH
60606: LD_INT 4
60608: MINUS
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: ST_TO_ADDR
// end ; 5 :
60625: GO 60765
60627: LD_INT 5
60629: DOUBLE
60630: EQUAL
60631: IFTRUE 60635
60633: GO 60764
60635: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60636: LD_ADDR_VAR 0 5
60640: PUSH
60641: LD_VAR 0 1
60645: PUSH
60646: LD_INT 4
60648: MINUS
60649: PUSH
60650: LD_VAR 0 2
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: PUSH
60663: LD_VAR 0 1
60667: PUSH
60668: LD_VAR 0 2
60672: PUSH
60673: LD_INT 4
60675: MINUS
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: PUSH
60685: LD_VAR 0 1
60689: PUSH
60690: LD_INT 4
60692: PLUS
60693: PUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_INT 4
60701: PLUS
60702: PUSH
60703: LD_INT 5
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_INT 3
60718: PLUS
60719: PUSH
60720: LD_VAR 0 2
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: PUSH
60733: LD_VAR 0 1
60737: PUSH
60738: LD_VAR 0 2
60742: PUSH
60743: LD_INT 3
60745: PLUS
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// end ; end ;
60762: GO 60765
60764: POP
// result := list ;
60765: LD_ADDR_VAR 0 4
60769: PUSH
60770: LD_VAR 0 5
60774: ST_TO_ADDR
// end ;
60775: LD_VAR 0 4
60779: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
60784: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60785: LD_VAR 0 1
60789: NOT
60790: PUSH
60791: LD_VAR 0 2
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: IN
60814: NOT
60815: OR
60816: IFFALSE 60820
// exit ;
60818: GO 60912
// tmp := [ ] ;
60820: LD_ADDR_VAR 0 5
60824: PUSH
60825: EMPTY
60826: ST_TO_ADDR
// for i in units do
60827: LD_ADDR_VAR 0 4
60831: PUSH
60832: LD_VAR 0 1
60836: PUSH
60837: FOR_IN
60838: IFFALSE 60881
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60840: LD_ADDR_VAR 0 5
60844: PUSH
60845: LD_VAR 0 5
60849: PPUSH
60850: LD_VAR 0 5
60854: PUSH
60855: LD_INT 1
60857: PLUS
60858: PPUSH
60859: LD_VAR 0 4
60863: PPUSH
60864: LD_VAR 0 2
60868: PPUSH
60869: CALL_OW 259
60873: PPUSH
60874: CALL_OW 2
60878: ST_TO_ADDR
60879: GO 60837
60881: POP
60882: POP
// if not tmp then
60883: LD_VAR 0 5
60887: NOT
60888: IFFALSE 60892
// exit ;
60890: GO 60912
// result := SortListByListDesc ( units , tmp ) ;
60892: LD_ADDR_VAR 0 3
60896: PUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: LD_VAR 0 5
60906: PPUSH
60907: CALL_OW 77
60911: ST_TO_ADDR
// end ;
60912: LD_VAR 0 3
60916: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60917: LD_INT 0
60919: PPUSH
60920: PPUSH
60921: PPUSH
// result := false ;
60922: LD_ADDR_VAR 0 3
60926: PUSH
60927: LD_INT 0
60929: ST_TO_ADDR
// x := GetX ( building ) ;
60930: LD_ADDR_VAR 0 4
60934: PUSH
60935: LD_VAR 0 2
60939: PPUSH
60940: CALL_OW 250
60944: ST_TO_ADDR
// y := GetY ( building ) ;
60945: LD_ADDR_VAR 0 5
60949: PUSH
60950: LD_VAR 0 2
60954: PPUSH
60955: CALL_OW 251
60959: ST_TO_ADDR
// if not building or not x or not y then
60960: LD_VAR 0 2
60964: NOT
60965: PUSH
60966: LD_VAR 0 4
60970: NOT
60971: OR
60972: PUSH
60973: LD_VAR 0 5
60977: NOT
60978: OR
60979: IFFALSE 60983
// exit ;
60981: GO 61075
// if GetTaskList ( unit ) then
60983: LD_VAR 0 1
60987: PPUSH
60988: CALL_OW 437
60992: IFFALSE 61075
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60994: LD_STRING e
60996: PUSH
60997: LD_VAR 0 1
61001: PPUSH
61002: CALL_OW 437
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PUSH
61011: LD_INT 1
61013: ARRAY
61014: EQUAL
61015: PUSH
61016: LD_VAR 0 4
61020: PUSH
61021: LD_VAR 0 1
61025: PPUSH
61026: CALL_OW 437
61030: PUSH
61031: LD_INT 1
61033: ARRAY
61034: PUSH
61035: LD_INT 2
61037: ARRAY
61038: EQUAL
61039: AND
61040: PUSH
61041: LD_VAR 0 5
61045: PUSH
61046: LD_VAR 0 1
61050: PPUSH
61051: CALL_OW 437
61055: PUSH
61056: LD_INT 1
61058: ARRAY
61059: PUSH
61060: LD_INT 3
61062: ARRAY
61063: EQUAL
61064: AND
61065: IFFALSE 61075
// result := true end ;
61067: LD_ADDR_VAR 0 3
61071: PUSH
61072: LD_INT 1
61074: ST_TO_ADDR
// end ;
61075: LD_VAR 0 3
61079: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61080: LD_INT 0
61082: PPUSH
// result := false ;
61083: LD_ADDR_VAR 0 4
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// if GetTaskList ( unit ) then
61091: LD_VAR 0 1
61095: PPUSH
61096: CALL_OW 437
61100: IFFALSE 61183
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61102: LD_STRING M
61104: PUSH
61105: LD_VAR 0 1
61109: PPUSH
61110: CALL_OW 437
61114: PUSH
61115: LD_INT 1
61117: ARRAY
61118: PUSH
61119: LD_INT 1
61121: ARRAY
61122: EQUAL
61123: PUSH
61124: LD_VAR 0 2
61128: PUSH
61129: LD_VAR 0 1
61133: PPUSH
61134: CALL_OW 437
61138: PUSH
61139: LD_INT 1
61141: ARRAY
61142: PUSH
61143: LD_INT 2
61145: ARRAY
61146: EQUAL
61147: AND
61148: PUSH
61149: LD_VAR 0 3
61153: PUSH
61154: LD_VAR 0 1
61158: PPUSH
61159: CALL_OW 437
61163: PUSH
61164: LD_INT 1
61166: ARRAY
61167: PUSH
61168: LD_INT 3
61170: ARRAY
61171: EQUAL
61172: AND
61173: IFFALSE 61183
// result := true ;
61175: LD_ADDR_VAR 0 4
61179: PUSH
61180: LD_INT 1
61182: ST_TO_ADDR
// end ; end ;
61183: LD_VAR 0 4
61187: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61188: LD_INT 0
61190: PPUSH
61191: PPUSH
61192: PPUSH
61193: PPUSH
// if not unit or not area then
61194: LD_VAR 0 1
61198: NOT
61199: PUSH
61200: LD_VAR 0 2
61204: NOT
61205: OR
61206: IFFALSE 61210
// exit ;
61208: GO 61374
// tmp := AreaToList ( area , i ) ;
61210: LD_ADDR_VAR 0 6
61214: PUSH
61215: LD_VAR 0 2
61219: PPUSH
61220: LD_VAR 0 5
61224: PPUSH
61225: CALL_OW 517
61229: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61230: LD_ADDR_VAR 0 5
61234: PUSH
61235: DOUBLE
61236: LD_INT 1
61238: DEC
61239: ST_TO_ADDR
61240: LD_VAR 0 6
61244: PUSH
61245: LD_INT 1
61247: ARRAY
61248: PUSH
61249: FOR_TO
61250: IFFALSE 61372
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61252: LD_ADDR_VAR 0 7
61256: PUSH
61257: LD_VAR 0 6
61261: PUSH
61262: LD_INT 1
61264: ARRAY
61265: PUSH
61266: LD_VAR 0 5
61270: ARRAY
61271: PUSH
61272: LD_VAR 0 6
61276: PUSH
61277: LD_INT 2
61279: ARRAY
61280: PUSH
61281: LD_VAR 0 5
61285: ARRAY
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61291: LD_VAR 0 7
61295: PUSH
61296: LD_INT 1
61298: ARRAY
61299: PPUSH
61300: LD_VAR 0 7
61304: PUSH
61305: LD_INT 2
61307: ARRAY
61308: PPUSH
61309: CALL_OW 428
61313: PUSH
61314: LD_INT 0
61316: EQUAL
61317: IFFALSE 61370
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61319: LD_VAR 0 1
61323: PPUSH
61324: LD_VAR 0 7
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PPUSH
61333: LD_VAR 0 7
61337: PUSH
61338: LD_INT 2
61340: ARRAY
61341: PPUSH
61342: LD_VAR 0 3
61346: PPUSH
61347: CALL_OW 48
// result := IsPlaced ( unit ) ;
61351: LD_ADDR_VAR 0 4
61355: PUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 305
61365: ST_TO_ADDR
// exit ;
61366: POP
61367: POP
61368: GO 61374
// end ; end ;
61370: GO 61249
61372: POP
61373: POP
// end ;
61374: LD_VAR 0 4
61378: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61379: LD_INT 0
61381: PPUSH
61382: PPUSH
61383: PPUSH
// if not side or side > 8 then
61384: LD_VAR 0 1
61388: NOT
61389: PUSH
61390: LD_VAR 0 1
61394: PUSH
61395: LD_INT 8
61397: GREATER
61398: OR
61399: IFFALSE 61403
// exit ;
61401: GO 61590
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61403: LD_ADDR_VAR 0 4
61407: PUSH
61408: LD_INT 22
61410: PUSH
61411: LD_VAR 0 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 21
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PPUSH
61434: CALL_OW 69
61438: ST_TO_ADDR
// if not tmp then
61439: LD_VAR 0 4
61443: NOT
61444: IFFALSE 61448
// exit ;
61446: GO 61590
// enable_addtolog := true ;
61448: LD_ADDR_OWVAR 81
61452: PUSH
61453: LD_INT 1
61455: ST_TO_ADDR
// AddToLog ( [ ) ;
61456: LD_STRING [
61458: PPUSH
61459: CALL_OW 561
// for i in tmp do
61463: LD_ADDR_VAR 0 3
61467: PUSH
61468: LD_VAR 0 4
61472: PUSH
61473: FOR_IN
61474: IFFALSE 61581
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61476: LD_STRING [
61478: PUSH
61479: LD_VAR 0 3
61483: PPUSH
61484: CALL_OW 266
61488: STR
61489: PUSH
61490: LD_STRING , 
61492: STR
61493: PUSH
61494: LD_VAR 0 3
61498: PPUSH
61499: CALL_OW 250
61503: STR
61504: PUSH
61505: LD_STRING , 
61507: STR
61508: PUSH
61509: LD_VAR 0 3
61513: PPUSH
61514: CALL_OW 251
61518: STR
61519: PUSH
61520: LD_STRING , 
61522: STR
61523: PUSH
61524: LD_VAR 0 3
61528: PPUSH
61529: CALL_OW 254
61533: STR
61534: PUSH
61535: LD_STRING , 
61537: STR
61538: PUSH
61539: LD_VAR 0 3
61543: PPUSH
61544: LD_INT 1
61546: PPUSH
61547: CALL_OW 268
61551: STR
61552: PUSH
61553: LD_STRING , 
61555: STR
61556: PUSH
61557: LD_VAR 0 3
61561: PPUSH
61562: LD_INT 2
61564: PPUSH
61565: CALL_OW 268
61569: STR
61570: PUSH
61571: LD_STRING ],
61573: STR
61574: PPUSH
61575: CALL_OW 561
// end ;
61579: GO 61473
61581: POP
61582: POP
// AddToLog ( ]; ) ;
61583: LD_STRING ];
61585: PPUSH
61586: CALL_OW 561
// end ;
61590: LD_VAR 0 2
61594: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61595: LD_INT 0
61597: PPUSH
61598: PPUSH
61599: PPUSH
61600: PPUSH
61601: PPUSH
// if not area or not rate or not max then
61602: LD_VAR 0 1
61606: NOT
61607: PUSH
61608: LD_VAR 0 2
61612: NOT
61613: OR
61614: PUSH
61615: LD_VAR 0 4
61619: NOT
61620: OR
61621: IFFALSE 61625
// exit ;
61623: GO 61817
// while 1 do
61625: LD_INT 1
61627: IFFALSE 61817
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61629: LD_ADDR_VAR 0 9
61633: PUSH
61634: LD_VAR 0 1
61638: PPUSH
61639: LD_INT 1
61641: PPUSH
61642: CALL_OW 287
61646: PUSH
61647: LD_INT 10
61649: MUL
61650: ST_TO_ADDR
// r := rate / 10 ;
61651: LD_ADDR_VAR 0 7
61655: PUSH
61656: LD_VAR 0 2
61660: PUSH
61661: LD_INT 10
61663: DIVREAL
61664: ST_TO_ADDR
// time := 1 1$00 ;
61665: LD_ADDR_VAR 0 8
61669: PUSH
61670: LD_INT 2100
61672: ST_TO_ADDR
// if amount < min then
61673: LD_VAR 0 9
61677: PUSH
61678: LD_VAR 0 3
61682: LESS
61683: IFFALSE 61701
// r := r * 2 else
61685: LD_ADDR_VAR 0 7
61689: PUSH
61690: LD_VAR 0 7
61694: PUSH
61695: LD_INT 2
61697: MUL
61698: ST_TO_ADDR
61699: GO 61727
// if amount > max then
61701: LD_VAR 0 9
61705: PUSH
61706: LD_VAR 0 4
61710: GREATER
61711: IFFALSE 61727
// r := r / 2 ;
61713: LD_ADDR_VAR 0 7
61717: PUSH
61718: LD_VAR 0 7
61722: PUSH
61723: LD_INT 2
61725: DIVREAL
61726: ST_TO_ADDR
// time := time / r ;
61727: LD_ADDR_VAR 0 8
61731: PUSH
61732: LD_VAR 0 8
61736: PUSH
61737: LD_VAR 0 7
61741: DIVREAL
61742: ST_TO_ADDR
// if time < 0 then
61743: LD_VAR 0 8
61747: PUSH
61748: LD_INT 0
61750: LESS
61751: IFFALSE 61768
// time := time * - 1 ;
61753: LD_ADDR_VAR 0 8
61757: PUSH
61758: LD_VAR 0 8
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: MUL
61767: ST_TO_ADDR
// wait ( time ) ;
61768: LD_VAR 0 8
61772: PPUSH
61773: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61777: LD_INT 35
61779: PPUSH
61780: LD_INT 875
61782: PPUSH
61783: CALL_OW 12
61787: PPUSH
61788: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61792: LD_INT 1
61794: PPUSH
61795: LD_INT 5
61797: PPUSH
61798: CALL_OW 12
61802: PPUSH
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_INT 1
61810: PPUSH
61811: CALL_OW 55
// end ;
61815: GO 61625
// end ;
61817: LD_VAR 0 5
61821: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61822: LD_INT 0
61824: PPUSH
61825: PPUSH
61826: PPUSH
61827: PPUSH
61828: PPUSH
61829: PPUSH
61830: PPUSH
61831: PPUSH
// if not turrets or not factories then
61832: LD_VAR 0 1
61836: NOT
61837: PUSH
61838: LD_VAR 0 2
61842: NOT
61843: OR
61844: IFFALSE 61848
// exit ;
61846: GO 62155
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61848: LD_ADDR_VAR 0 10
61852: PUSH
61853: LD_INT 5
61855: PUSH
61856: LD_INT 6
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: LD_INT 4
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 5
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 24
61890: PUSH
61891: LD_INT 25
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 23
61900: PUSH
61901: LD_INT 27
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 42
61914: PUSH
61915: LD_INT 43
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 44
61924: PUSH
61925: LD_INT 46
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 45
61934: PUSH
61935: LD_INT 47
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// result := [ ] ;
61952: LD_ADDR_VAR 0 3
61956: PUSH
61957: EMPTY
61958: ST_TO_ADDR
// for i in turrets do
61959: LD_ADDR_VAR 0 4
61963: PUSH
61964: LD_VAR 0 1
61968: PUSH
61969: FOR_IN
61970: IFFALSE 62153
// begin nat := GetNation ( i ) ;
61972: LD_ADDR_VAR 0 7
61976: PUSH
61977: LD_VAR 0 4
61981: PPUSH
61982: CALL_OW 248
61986: ST_TO_ADDR
// weapon := 0 ;
61987: LD_ADDR_VAR 0 8
61991: PUSH
61992: LD_INT 0
61994: ST_TO_ADDR
// if not nat then
61995: LD_VAR 0 7
61999: NOT
62000: IFFALSE 62004
// continue ;
62002: GO 61969
// for j in list [ nat ] do
62004: LD_ADDR_VAR 0 5
62008: PUSH
62009: LD_VAR 0 10
62013: PUSH
62014: LD_VAR 0 7
62018: ARRAY
62019: PUSH
62020: FOR_IN
62021: IFFALSE 62062
// if GetBWeapon ( i ) = j [ 1 ] then
62023: LD_VAR 0 4
62027: PPUSH
62028: CALL_OW 269
62032: PUSH
62033: LD_VAR 0 5
62037: PUSH
62038: LD_INT 1
62040: ARRAY
62041: EQUAL
62042: IFFALSE 62060
// begin weapon := j [ 2 ] ;
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_VAR 0 5
62053: PUSH
62054: LD_INT 2
62056: ARRAY
62057: ST_TO_ADDR
// break ;
62058: GO 62062
// end ;
62060: GO 62020
62062: POP
62063: POP
// if not weapon then
62064: LD_VAR 0 8
62068: NOT
62069: IFFALSE 62073
// continue ;
62071: GO 61969
// for k in factories do
62073: LD_ADDR_VAR 0 6
62077: PUSH
62078: LD_VAR 0 2
62082: PUSH
62083: FOR_IN
62084: IFFALSE 62149
// begin weapons := AvailableWeaponList ( k ) ;
62086: LD_ADDR_VAR 0 9
62090: PUSH
62091: LD_VAR 0 6
62095: PPUSH
62096: CALL_OW 478
62100: ST_TO_ADDR
// if not weapons then
62101: LD_VAR 0 9
62105: NOT
62106: IFFALSE 62110
// continue ;
62108: GO 62083
// if weapon in weapons then
62110: LD_VAR 0 8
62114: PUSH
62115: LD_VAR 0 9
62119: IN
62120: IFFALSE 62147
// begin result := [ i , weapon ] ;
62122: LD_ADDR_VAR 0 3
62126: PUSH
62127: LD_VAR 0 4
62131: PUSH
62132: LD_VAR 0 8
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: ST_TO_ADDR
// exit ;
62141: POP
62142: POP
62143: POP
62144: POP
62145: GO 62155
// end ; end ;
62147: GO 62083
62149: POP
62150: POP
// end ;
62151: GO 61969
62153: POP
62154: POP
// end ;
62155: LD_VAR 0 3
62159: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62160: LD_INT 0
62162: PPUSH
// if not side or side > 8 then
62163: LD_VAR 0 3
62167: NOT
62168: PUSH
62169: LD_VAR 0 3
62173: PUSH
62174: LD_INT 8
62176: GREATER
62177: OR
62178: IFFALSE 62182
// exit ;
62180: GO 62241
// if not range then
62182: LD_VAR 0 4
62186: NOT
62187: IFFALSE 62198
// range := - 12 ;
62189: LD_ADDR_VAR 0 4
62193: PUSH
62194: LD_INT 12
62196: NEG
62197: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62198: LD_VAR 0 1
62202: PPUSH
62203: LD_VAR 0 2
62207: PPUSH
62208: LD_VAR 0 3
62212: PPUSH
62213: LD_VAR 0 4
62217: PPUSH
62218: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62222: LD_VAR 0 1
62226: PPUSH
62227: LD_VAR 0 2
62231: PPUSH
62232: LD_VAR 0 3
62236: PPUSH
62237: CALL_OW 331
// end ;
62241: LD_VAR 0 5
62245: RET
// export function Video ( mode ) ; begin
62246: LD_INT 0
62248: PPUSH
// ingame_video = mode ;
62249: LD_ADDR_OWVAR 52
62253: PUSH
62254: LD_VAR 0 1
62258: ST_TO_ADDR
// interface_hidden = mode ;
62259: LD_ADDR_OWVAR 54
62263: PUSH
62264: LD_VAR 0 1
62268: ST_TO_ADDR
// end ;
62269: LD_VAR 0 2
62273: RET
// export function Join ( array , element ) ; begin
62274: LD_INT 0
62276: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62277: LD_ADDR_VAR 0 3
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 1
62294: PLUS
62295: PPUSH
62296: LD_VAR 0 2
62300: PPUSH
62301: CALL_OW 1
62305: ST_TO_ADDR
// end ;
62306: LD_VAR 0 3
62310: RET
// export function JoinUnion ( array , element ) ; begin
62311: LD_INT 0
62313: PPUSH
// result := array union element ;
62314: LD_ADDR_VAR 0 3
62318: PUSH
62319: LD_VAR 0 1
62323: PUSH
62324: LD_VAR 0 2
62328: UNION
62329: ST_TO_ADDR
// end ;
62330: LD_VAR 0 3
62334: RET
// export function GetBehemoths ( side ) ; begin
62335: LD_INT 0
62337: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62338: LD_ADDR_VAR 0 2
62342: PUSH
62343: LD_INT 22
62345: PUSH
62346: LD_VAR 0 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 31
62357: PUSH
62358: LD_INT 25
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PPUSH
62369: CALL_OW 69
62373: ST_TO_ADDR
// end ;
62374: LD_VAR 0 2
62378: RET
// export function Shuffle ( array ) ; var i , index ; begin
62379: LD_INT 0
62381: PPUSH
62382: PPUSH
62383: PPUSH
// result := [ ] ;
62384: LD_ADDR_VAR 0 2
62388: PUSH
62389: EMPTY
62390: ST_TO_ADDR
// if not array then
62391: LD_VAR 0 1
62395: NOT
62396: IFFALSE 62400
// exit ;
62398: GO 62499
// Randomize ;
62400: CALL_OW 10
// for i = array downto 1 do
62404: LD_ADDR_VAR 0 3
62408: PUSH
62409: DOUBLE
62410: LD_VAR 0 1
62414: INC
62415: ST_TO_ADDR
62416: LD_INT 1
62418: PUSH
62419: FOR_DOWNTO
62420: IFFALSE 62497
// begin index := rand ( 1 , array ) ;
62422: LD_ADDR_VAR 0 4
62426: PUSH
62427: LD_INT 1
62429: PPUSH
62430: LD_VAR 0 1
62434: PPUSH
62435: CALL_OW 12
62439: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62440: LD_ADDR_VAR 0 2
62444: PUSH
62445: LD_VAR 0 2
62449: PPUSH
62450: LD_VAR 0 2
62454: PUSH
62455: LD_INT 1
62457: PLUS
62458: PPUSH
62459: LD_VAR 0 1
62463: PUSH
62464: LD_VAR 0 4
62468: ARRAY
62469: PPUSH
62470: CALL_OW 2
62474: ST_TO_ADDR
// array := Delete ( array , index ) ;
62475: LD_ADDR_VAR 0 1
62479: PUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: LD_VAR 0 4
62489: PPUSH
62490: CALL_OW 3
62494: ST_TO_ADDR
// end ;
62495: GO 62419
62497: POP
62498: POP
// end ;
62499: LD_VAR 0 2
62503: RET
// export function GetBaseMaterials ( base ) ; begin
62504: LD_INT 0
62506: PPUSH
// result := [ 0 , 0 , 0 ] ;
62507: LD_ADDR_VAR 0 2
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// if not base then
62526: LD_VAR 0 1
62530: NOT
62531: IFFALSE 62535
// exit ;
62533: GO 62584
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62535: LD_ADDR_VAR 0 2
62539: PUSH
62540: LD_VAR 0 1
62544: PPUSH
62545: LD_INT 1
62547: PPUSH
62548: CALL_OW 275
62552: PUSH
62553: LD_VAR 0 1
62557: PPUSH
62558: LD_INT 2
62560: PPUSH
62561: CALL_OW 275
62565: PUSH
62566: LD_VAR 0 1
62570: PPUSH
62571: LD_INT 3
62573: PPUSH
62574: CALL_OW 275
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// end ;
62584: LD_VAR 0 2
62588: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62589: LD_INT 0
62591: PPUSH
62592: PPUSH
// result := array ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: LD_VAR 0 1
62602: ST_TO_ADDR
// if size > 0 then
62603: LD_VAR 0 2
62607: PUSH
62608: LD_INT 0
62610: GREATER
62611: IFFALSE 62657
// for i := array downto size do
62613: LD_ADDR_VAR 0 4
62617: PUSH
62618: DOUBLE
62619: LD_VAR 0 1
62623: INC
62624: ST_TO_ADDR
62625: LD_VAR 0 2
62629: PUSH
62630: FOR_DOWNTO
62631: IFFALSE 62655
// result := Delete ( result , result ) ;
62633: LD_ADDR_VAR 0 3
62637: PUSH
62638: LD_VAR 0 3
62642: PPUSH
62643: LD_VAR 0 3
62647: PPUSH
62648: CALL_OW 3
62652: ST_TO_ADDR
62653: GO 62630
62655: POP
62656: POP
// end ;
62657: LD_VAR 0 3
62661: RET
// export function ComExit ( unit ) ; var tmp ; begin
62662: LD_INT 0
62664: PPUSH
62665: PPUSH
// if not IsInUnit ( unit ) then
62666: LD_VAR 0 1
62670: PPUSH
62671: CALL_OW 310
62675: NOT
62676: IFFALSE 62680
// exit ;
62678: GO 62740
// tmp := IsInUnit ( unit ) ;
62680: LD_ADDR_VAR 0 3
62684: PUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: CALL_OW 310
62694: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62695: LD_VAR 0 3
62699: PPUSH
62700: CALL_OW 247
62704: PUSH
62705: LD_INT 2
62707: EQUAL
62708: IFFALSE 62721
// ComExitVehicle ( unit ) else
62710: LD_VAR 0 1
62714: PPUSH
62715: CALL_OW 121
62719: GO 62730
// ComExitBuilding ( unit ) ;
62721: LD_VAR 0 1
62725: PPUSH
62726: CALL_OW 122
// result := tmp ;
62730: LD_ADDR_VAR 0 2
62734: PUSH
62735: LD_VAR 0 3
62739: ST_TO_ADDR
// end ;
62740: LD_VAR 0 2
62744: RET
// export function ComExitAll ( units ) ; var i ; begin
62745: LD_INT 0
62747: PPUSH
62748: PPUSH
// if not units then
62749: LD_VAR 0 1
62753: NOT
62754: IFFALSE 62758
// exit ;
62756: GO 62784
// for i in units do
62758: LD_ADDR_VAR 0 3
62762: PUSH
62763: LD_VAR 0 1
62767: PUSH
62768: FOR_IN
62769: IFFALSE 62782
// ComExit ( i ) ;
62771: LD_VAR 0 3
62775: PPUSH
62776: CALL 62662 0 1
62780: GO 62768
62782: POP
62783: POP
// end ;
62784: LD_VAR 0 2
62788: RET
// export function ResetHc ; begin
62789: LD_INT 0
62791: PPUSH
// InitHc ;
62792: CALL_OW 19
// hc_importance := 0 ;
62796: LD_ADDR_OWVAR 32
62800: PUSH
62801: LD_INT 0
62803: ST_TO_ADDR
// end ;
62804: LD_VAR 0 1
62808: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62809: LD_INT 0
62811: PPUSH
62812: PPUSH
62813: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62814: LD_ADDR_VAR 0 6
62818: PUSH
62819: LD_VAR 0 1
62823: PUSH
62824: LD_VAR 0 3
62828: PLUS
62829: PUSH
62830: LD_INT 2
62832: DIV
62833: ST_TO_ADDR
// if _x < 0 then
62834: LD_VAR 0 6
62838: PUSH
62839: LD_INT 0
62841: LESS
62842: IFFALSE 62859
// _x := _x * - 1 ;
62844: LD_ADDR_VAR 0 6
62848: PUSH
62849: LD_VAR 0 6
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: MUL
62858: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62859: LD_ADDR_VAR 0 7
62863: PUSH
62864: LD_VAR 0 2
62868: PUSH
62869: LD_VAR 0 4
62873: PLUS
62874: PUSH
62875: LD_INT 2
62877: DIV
62878: ST_TO_ADDR
// if _y < 0 then
62879: LD_VAR 0 7
62883: PUSH
62884: LD_INT 0
62886: LESS
62887: IFFALSE 62904
// _y := _y * - 1 ;
62889: LD_ADDR_VAR 0 7
62893: PUSH
62894: LD_VAR 0 7
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: MUL
62903: ST_TO_ADDR
// result := [ _x , _y ] ;
62904: LD_ADDR_VAR 0 5
62908: PUSH
62909: LD_VAR 0 6
62913: PUSH
62914: LD_VAR 0 7
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// end ;
62923: LD_VAR 0 5
62927: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62928: LD_INT 0
62930: PPUSH
62931: PPUSH
62932: PPUSH
62933: PPUSH
// task := GetTaskList ( unit ) ;
62934: LD_ADDR_VAR 0 7
62938: PUSH
62939: LD_VAR 0 1
62943: PPUSH
62944: CALL_OW 437
62948: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62949: LD_VAR 0 7
62953: NOT
62954: PUSH
62955: LD_VAR 0 1
62959: PPUSH
62960: LD_VAR 0 2
62964: PPUSH
62965: CALL_OW 308
62969: NOT
62970: AND
62971: IFFALSE 62975
// exit ;
62973: GO 63093
// if IsInArea ( unit , area ) then
62975: LD_VAR 0 1
62979: PPUSH
62980: LD_VAR 0 2
62984: PPUSH
62985: CALL_OW 308
62989: IFFALSE 63007
// begin ComMoveToArea ( unit , goAway ) ;
62991: LD_VAR 0 1
62995: PPUSH
62996: LD_VAR 0 3
63000: PPUSH
63001: CALL_OW 113
// exit ;
63005: GO 63093
// end ; if task [ 1 ] [ 1 ] <> M then
63007: LD_VAR 0 7
63011: PUSH
63012: LD_INT 1
63014: ARRAY
63015: PUSH
63016: LD_INT 1
63018: ARRAY
63019: PUSH
63020: LD_STRING M
63022: NONEQUAL
63023: IFFALSE 63027
// exit ;
63025: GO 63093
// x := task [ 1 ] [ 2 ] ;
63027: LD_ADDR_VAR 0 5
63031: PUSH
63032: LD_VAR 0 7
63036: PUSH
63037: LD_INT 1
63039: ARRAY
63040: PUSH
63041: LD_INT 2
63043: ARRAY
63044: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63045: LD_ADDR_VAR 0 6
63049: PUSH
63050: LD_VAR 0 7
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PUSH
63059: LD_INT 3
63061: ARRAY
63062: ST_TO_ADDR
// if InArea ( x , y , area ) then
63063: LD_VAR 0 5
63067: PPUSH
63068: LD_VAR 0 6
63072: PPUSH
63073: LD_VAR 0 2
63077: PPUSH
63078: CALL_OW 309
63082: IFFALSE 63093
// ComStop ( unit ) ;
63084: LD_VAR 0 1
63088: PPUSH
63089: CALL_OW 141
// end ;
63093: LD_VAR 0 4
63097: RET
// export function Abs ( value ) ; begin
63098: LD_INT 0
63100: PPUSH
// result := value ;
63101: LD_ADDR_VAR 0 2
63105: PUSH
63106: LD_VAR 0 1
63110: ST_TO_ADDR
// if value < 0 then
63111: LD_VAR 0 1
63115: PUSH
63116: LD_INT 0
63118: LESS
63119: IFFALSE 63136
// result := value * - 1 ;
63121: LD_ADDR_VAR 0 2
63125: PUSH
63126: LD_VAR 0 1
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: MUL
63135: ST_TO_ADDR
// end ;
63136: LD_VAR 0 2
63140: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63141: LD_INT 0
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
63147: PPUSH
63148: PPUSH
63149: PPUSH
63150: PPUSH
// if not unit or not building then
63151: LD_VAR 0 1
63155: NOT
63156: PUSH
63157: LD_VAR 0 2
63161: NOT
63162: OR
63163: IFFALSE 63167
// exit ;
63165: GO 63393
// x := GetX ( building ) ;
63167: LD_ADDR_VAR 0 4
63171: PUSH
63172: LD_VAR 0 2
63176: PPUSH
63177: CALL_OW 250
63181: ST_TO_ADDR
// y := GetY ( building ) ;
63182: LD_ADDR_VAR 0 6
63186: PUSH
63187: LD_VAR 0 2
63191: PPUSH
63192: CALL_OW 251
63196: ST_TO_ADDR
// d := GetDir ( building ) ;
63197: LD_ADDR_VAR 0 8
63201: PUSH
63202: LD_VAR 0 2
63206: PPUSH
63207: CALL_OW 254
63211: ST_TO_ADDR
// r := 4 ;
63212: LD_ADDR_VAR 0 9
63216: PUSH
63217: LD_INT 4
63219: ST_TO_ADDR
// for i := 1 to 5 do
63220: LD_ADDR_VAR 0 10
63224: PUSH
63225: DOUBLE
63226: LD_INT 1
63228: DEC
63229: ST_TO_ADDR
63230: LD_INT 5
63232: PUSH
63233: FOR_TO
63234: IFFALSE 63391
// begin _x := ShiftX ( x , d , r + i ) ;
63236: LD_ADDR_VAR 0 5
63240: PUSH
63241: LD_VAR 0 4
63245: PPUSH
63246: LD_VAR 0 8
63250: PPUSH
63251: LD_VAR 0 9
63255: PUSH
63256: LD_VAR 0 10
63260: PLUS
63261: PPUSH
63262: CALL_OW 272
63266: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63267: LD_ADDR_VAR 0 7
63271: PUSH
63272: LD_VAR 0 6
63276: PPUSH
63277: LD_VAR 0 8
63281: PPUSH
63282: LD_VAR 0 9
63286: PUSH
63287: LD_VAR 0 10
63291: PLUS
63292: PPUSH
63293: CALL_OW 273
63297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63298: LD_VAR 0 5
63302: PPUSH
63303: LD_VAR 0 7
63307: PPUSH
63308: CALL_OW 488
63312: PUSH
63313: LD_VAR 0 5
63317: PPUSH
63318: LD_VAR 0 7
63322: PPUSH
63323: CALL_OW 428
63327: PPUSH
63328: CALL_OW 247
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: IN
63343: NOT
63344: AND
63345: IFFALSE 63389
// begin ComMoveXY ( unit , _x , _y ) ;
63347: LD_VAR 0 1
63351: PPUSH
63352: LD_VAR 0 5
63356: PPUSH
63357: LD_VAR 0 7
63361: PPUSH
63362: CALL_OW 111
// result := [ _x , _y ] ;
63366: LD_ADDR_VAR 0 3
63370: PUSH
63371: LD_VAR 0 5
63375: PUSH
63376: LD_VAR 0 7
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: ST_TO_ADDR
// exit ;
63385: POP
63386: POP
63387: GO 63393
// end ; end ;
63389: GO 63233
63391: POP
63392: POP
// end ;
63393: LD_VAR 0 3
63397: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63398: LD_INT 0
63400: PPUSH
63401: PPUSH
63402: PPUSH
// result := 0 ;
63403: LD_ADDR_VAR 0 3
63407: PUSH
63408: LD_INT 0
63410: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63411: LD_VAR 0 1
63415: PUSH
63416: LD_INT 0
63418: LESS
63419: PUSH
63420: LD_VAR 0 1
63424: PUSH
63425: LD_INT 8
63427: GREATER
63428: OR
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 0
63437: LESS
63438: OR
63439: PUSH
63440: LD_VAR 0 2
63444: PUSH
63445: LD_INT 8
63447: GREATER
63448: OR
63449: IFFALSE 63453
// exit ;
63451: GO 63528
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63453: LD_ADDR_VAR 0 4
63457: PUSH
63458: LD_INT 22
63460: PUSH
63461: LD_VAR 0 2
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PPUSH
63470: CALL_OW 69
63474: PUSH
63475: FOR_IN
63476: IFFALSE 63526
// begin un := UnitShoot ( i ) ;
63478: LD_ADDR_VAR 0 5
63482: PUSH
63483: LD_VAR 0 4
63487: PPUSH
63488: CALL_OW 504
63492: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63493: LD_VAR 0 5
63497: PPUSH
63498: CALL_OW 255
63502: PUSH
63503: LD_VAR 0 1
63507: EQUAL
63508: IFFALSE 63524
// begin result := un ;
63510: LD_ADDR_VAR 0 3
63514: PUSH
63515: LD_VAR 0 5
63519: ST_TO_ADDR
// exit ;
63520: POP
63521: POP
63522: GO 63528
// end ; end ;
63524: GO 63475
63526: POP
63527: POP
// end ;
63528: LD_VAR 0 3
63532: RET
// export function GetCargoBay ( units ) ; begin
63533: LD_INT 0
63535: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63536: LD_ADDR_VAR 0 2
63540: PUSH
63541: LD_VAR 0 1
63545: PPUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 34
63551: PUSH
63552: LD_INT 12
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 34
63561: PUSH
63562: LD_INT 51
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 34
63571: PUSH
63572: LD_INT 32
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 34
63581: PUSH
63582: LD_EXP 53
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: PPUSH
63598: CALL_OW 72
63602: ST_TO_ADDR
// end ; end_of_file
63603: LD_VAR 0 2
63607: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63608: LD_VAR 0 1
63612: PUSH
63613: LD_INT 200
63615: DOUBLE
63616: GREATEREQUAL
63617: IFFALSE 63625
63619: LD_INT 299
63621: DOUBLE
63622: LESSEQUAL
63623: IFTRUE 63627
63625: GO 63659
63627: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63628: LD_VAR 0 1
63632: PPUSH
63633: LD_VAR 0 2
63637: PPUSH
63638: LD_VAR 0 3
63642: PPUSH
63643: LD_VAR 0 4
63647: PPUSH
63648: LD_VAR 0 5
63652: PPUSH
63653: CALL 22069 0 5
63657: GO 63736
63659: LD_INT 300
63661: DOUBLE
63662: GREATEREQUAL
63663: IFFALSE 63671
63665: LD_INT 399
63667: DOUBLE
63668: LESSEQUAL
63669: IFTRUE 63673
63671: GO 63735
63673: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63674: LD_VAR 0 1
63678: PPUSH
63679: LD_VAR 0 2
63683: PPUSH
63684: LD_VAR 0 3
63688: PPUSH
63689: LD_VAR 0 4
63693: PPUSH
63694: LD_VAR 0 5
63698: PPUSH
63699: LD_VAR 0 6
63703: PPUSH
63704: LD_VAR 0 7
63708: PPUSH
63709: LD_VAR 0 8
63713: PPUSH
63714: LD_VAR 0 9
63718: PPUSH
63719: LD_VAR 0 10
63723: PPUSH
63724: LD_VAR 0 11
63728: PPUSH
63729: CALL 19957 0 11
63733: GO 63736
63735: POP
// end ;
63736: PPOPN 11
63738: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63739: LD_VAR 0 1
63743: PPUSH
63744: LD_VAR 0 2
63748: PPUSH
63749: LD_VAR 0 3
63753: PPUSH
63754: LD_VAR 0 4
63758: PPUSH
63759: LD_VAR 0 5
63763: PPUSH
63764: CALL 22051 0 5
// end ; end_of_file
63768: PPOPN 5
63770: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_VAR 0 2
63780: PPUSH
63781: LD_VAR 0 3
63785: PPUSH
63786: LD_VAR 0 4
63790: PPUSH
63791: LD_VAR 0 5
63795: PPUSH
63796: LD_VAR 0 6
63800: PPUSH
63801: CALL 8765 0 6
// end ;
63805: PPOPN 6
63807: END
