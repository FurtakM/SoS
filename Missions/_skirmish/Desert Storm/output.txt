// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3432 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3896 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7787 0 5
// PrepareComm ;
 110: CALL 8270 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_bio_bomb , us_art ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 36
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 28
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 29
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 30
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 31
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 32
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 22
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: LD_INT 7
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 24
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 8
 337: PUSH
 338: LD_INT 9
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 23
 356: PUSH
 357: LD_INT 7
 359: PUSH
 360: LD_INT 9
 362: PUSH
 363: LD_INT 10
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 34
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 35
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 39
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 40
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 41
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 42
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 43
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 38
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 44
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 45
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 33
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 37
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 46
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 47
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 27
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20300
 556: PUSH
 557: LD_INT 19250
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$10 , 6 6$20 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 25
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15050
 581: PUSH
 582: LD_INT 13300
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 26
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 91
 628: ST_TO_ADDR
// us_art := 97 ;
 629: LD_ADDR_EXP 18
 633: PUSH
 634: LD_INT 97
 636: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 637: LD_ADDR_EXP 19
 641: PUSH
 642: LD_INT 28
 644: PUSH
 645: LD_INT 27
 647: PUSH
 648: LD_INT 26
 650: PUSH
 651: LD_INT 29
 653: PUSH
 654: LD_EXP 17
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser ] ;
 666: LD_ADDR_EXP 21
 670: PUSH
 671: LD_INT 7
 673: PUSH
 674: LD_INT 6
 676: PUSH
 677: LD_INT 10
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun ] ;
 685: LD_ADDR_EXP 20
 689: PUSH
 690: LD_INT 45
 692: PUSH
 693: LD_INT 47
 695: PUSH
 696: LD_INT 46
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ;
 704: LD_VAR 0 1
 708: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 709: LD_EXP 1
 713: IFFALSE 3429
 715: GO 717
 717: DISABLE
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
 722: PPUSH
 723: PPUSH
// begin enable ;
 724: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 725: LD_ADDR_OWVAR 47
 729: PUSH
 730: LD_STRING #tick
 732: PUSH
 733: LD_EXP 3
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PUSH
 742: LD_EXP 6
 746: ADD
 747: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 748: LD_ADDR_EXP 3
 752: PUSH
 753: LD_EXP 3
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: CALL 6873 0 2
 765: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 766: LD_EXP 28
 770: PUSH
 771: LD_EXP 32
 775: PUSH
 776: LD_INT 0
 778: GREATER
 779: AND
 780: IFFALSE 817
// begin game_strings := [ #mtime , meeting_time ] ;
 782: LD_ADDR_EXP 6
 786: PUSH
 787: LD_STRING #mtime
 789: PUSH
 790: LD_EXP 32
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 799: LD_ADDR_EXP 32
 803: PUSH
 804: LD_EXP 32
 808: PPUSH
 809: LD_INT 0
 811: PPUSH
 812: CALL 6873 0 2
 816: ST_TO_ADDR
// end ; if meeting_arive then
 817: LD_EXP 29
 821: IFFALSE 841
// mission_time := RefreshTime ( mission_time , true ) ;
 823: LD_ADDR_EXP 36
 827: PUSH
 828: LD_EXP 36
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: CALL 6873 0 2
 840: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 841: LD_EXP 40
 845: PUSH
 846: LD_EXP 25
 850: PUSH
 851: LD_INT 0
 853: GREATER
 854: AND
 855: PUSH
 856: LD_EXP 29
 860: AND
 861: IFFALSE 881
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 863: LD_ADDR_EXP 25
 867: PUSH
 868: LD_EXP 25
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL 6873 0 2
 880: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 881: LD_EXP 41
 885: PUSH
 886: LD_EXP 26
 890: PUSH
 891: LD_INT 0
 893: GREATER
 894: AND
 895: PUSH
 896: LD_EXP 29
 900: AND
 901: IFFALSE 921
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 903: LD_ADDR_EXP 26
 907: PUSH
 908: LD_EXP 26
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL 6873 0 2
 920: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 921: LD_EXP 42
 925: PUSH
 926: LD_EXP 27
 930: PUSH
 931: LD_INT 0
 933: GREATER
 934: AND
 935: PUSH
 936: LD_EXP 29
 940: AND
 941: IFFALSE 961
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 943: LD_ADDR_EXP 27
 947: PUSH
 948: LD_EXP 27
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL 6873 0 2
 960: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 961: LD_EXP 45
 965: PUSH
 966: LD_EXP 33
 970: PUSH
 971: LD_INT 0
 973: GREATER
 974: AND
 975: IFFALSE 1012
// begin game_strings := [ #rtime , russian_timer ] ;
 977: LD_ADDR_EXP 6
 981: PUSH
 982: LD_STRING #rtime
 984: PUSH
 985: LD_EXP 33
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 994: LD_ADDR_EXP 33
 998: PUSH
 999: LD_EXP 33
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL 6873 0 2
1011: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1012: LD_EXP 45
1016: PUSH
1017: LD_EXP 33
1021: PUSH
1022: LD_INT 0
1024: EQUAL
1025: AND
1026: PUSH
1027: LD_EXP 37
1031: OR
1032: IFFALSE 1041
// game_strings := [ ] ;
1034: LD_ADDR_EXP 6
1038: PUSH
1039: EMPTY
1040: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1041: LD_EXP 39
1045: PUSH
1046: LD_INT 0
1048: EQUAL
1049: PUSH
1050: LD_OWVAR 1
1054: PUSH
1055: LD_INT 33600
1057: MOD
1058: PUSH
1059: LD_INT 0
1061: EQUAL
1062: AND
1063: IFFALSE 1123
// begin p := Rand ( 1 , 5 ) ;
1065: LD_ADDR_VAR 0 2
1069: PUSH
1070: LD_INT 1
1072: PPUSH
1073: LD_INT 5
1075: PPUSH
1076: CALL_OW 12
1080: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 4
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: LD_INT 3
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_EXP 2
1104: ARRAY
1105: LESSEQUAL
1106: IFFALSE 1123
// begin RaiseSailEvent ( 92 ) ;
1108: LD_INT 92
1110: PPUSH
1111: CALL_OW 427
// dezert := true ;
1115: LD_ADDR_EXP 39
1119: PUSH
1120: LD_INT 1
1122: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1123: LD_OWVAR 1
1127: PUSH
1128: LD_INT 8400
1130: MOD
1131: PUSH
1132: LD_INT 0
1134: EQUAL
1135: IFFALSE 1144
// RaiseSailEvent ( 101 ) ;
1137: LD_INT 101
1139: PPUSH
1140: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1144: LD_INT 8
1146: PPUSH
1147: CALL 6927 0 1
1151: PUSH
1152: LD_EXP 13
1156: PUSH
1157: LD_INT 0
1159: EQUAL
1160: AND
1161: IFFALSE 1178
// begin u_mine := true ;
1163: LD_ADDR_EXP 13
1167: PUSH
1168: LD_INT 1
1170: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1171: LD_STRING DS-T1m
1173: PPUSH
1174: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1178: LD_INT 8
1180: PPUSH
1181: CALL 6989 0 1
1185: PUSH
1186: LD_EXP 14
1190: PUSH
1191: LD_INT 0
1193: EQUAL
1194: AND
1195: IFFALSE 1212
// begin u_fac := true ;
1197: LD_ADDR_EXP 14
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1205: LD_STRING DS-T1f
1207: PPUSH
1208: CALL_OW 337
// end ; if hero_died then
1212: LD_EXP 35
1216: IFFALSE 1225
// YouLost ( DS-h1 ) ;
1218: LD_STRING DS-h1
1220: PPUSH
1221: CALL_OW 104
// if fort_destroyed then
1225: LD_EXP 34
1229: IFFALSE 1238
// YouLost ( DS-h2 ) ;
1231: LD_STRING DS-h2
1233: PPUSH
1234: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1238: LD_EXP 7
1242: PPUSH
1243: LD_EXP 51
1247: PPUSH
1248: CALL_OW 296
1252: PUSH
1253: LD_INT 6
1255: GREATER
1256: PUSH
1257: LD_EXP 28
1261: PUSH
1262: LD_INT 0
1264: EQUAL
1265: AND
1266: IFFALSE 1289
// begin if not HasTask ( leopold ) then
1268: LD_EXP 7
1272: PPUSH
1273: CALL_OW 314
1277: NOT
1278: IFFALSE 1287
// RaiseSailEvent ( 1 ) ;
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 427
// end else
1287: GO 1306
// if meeting_start = false then
1289: LD_EXP 28
1293: PUSH
1294: LD_INT 0
1296: EQUAL
1297: IFFALSE 1306
// begin RaiseSailEvent ( 2 ) ;
1299: LD_INT 2
1301: PPUSH
1302: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1306: LD_EXP 3
1310: PUSH
1311: LD_INT 105000
1313: PUSH
1314: LD_INT 131250
1316: PUSH
1317: LD_INT 157500
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: PUSH
1325: LD_EXP 2
1329: ARRAY
1330: GREATEREQUAL
1331: PUSH
1332: LD_EXP 31
1336: PUSH
1337: LD_INT 0
1339: EQUAL
1340: AND
1341: IFFALSE 1358
// begin meeting_end := true ;
1343: LD_ADDR_EXP 31
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1351: LD_INT 200
1353: PPUSH
1354: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1358: LD_EXP 32
1362: PUSH
1363: LD_INT 0
1365: EQUAL
1366: PUSH
1367: LD_EXP 29
1371: PUSH
1372: LD_INT 0
1374: EQUAL
1375: AND
1376: IFFALSE 1400
// begin meeting_arive := true ;
1378: LD_ADDR_EXP 29
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// game_strings := [ ] ;
1386: LD_ADDR_EXP 6
1390: PUSH
1391: EMPTY
1392: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1393: LD_INT 10
1395: PPUSH
1396: CALL_OW 427
// end ; if meeting_arive then
1400: LD_EXP 29
1404: IFFALSE 2149
// begin if arabian_attack = false and tick mod 4200 = 0 then
1406: LD_EXP 40
1410: PUSH
1411: LD_INT 0
1413: EQUAL
1414: PUSH
1415: LD_OWVAR 1
1419: PUSH
1420: LD_INT 4200
1422: MOD
1423: PUSH
1424: LD_INT 0
1426: EQUAL
1427: AND
1428: IFFALSE 1481
// begin p := Rand ( 1 , 100 ) ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 100
1440: PPUSH
1441: CALL_OW 12
1445: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1446: LD_VAR 0 2
1450: PUSH
1451: LD_INT 80
1453: PUSH
1454: LD_INT 85
1456: PUSH
1457: LD_INT 90
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: PUSH
1465: LD_EXP 2
1469: ARRAY
1470: LESSEQUAL
1471: IFFALSE 1481
// arabian_attack := true ;
1473: LD_ADDR_EXP 40
1477: PUSH
1478: LD_INT 1
1480: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1481: LD_EXP 45
1485: PUSH
1486: LD_INT 0
1488: EQUAL
1489: PUSH
1490: LD_EXP 41
1494: PUSH
1495: LD_INT 0
1497: EQUAL
1498: AND
1499: PUSH
1500: LD_OWVAR 1
1504: PUSH
1505: LD_INT 52500
1507: GREATER
1508: AND
1509: IFFALSE 1580
// begin russian_trade = true ;
1511: LD_ADDR_EXP 45
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// DialogueOn ;
1519: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1523: LD_EXP 49
1527: PPUSH
1528: LD_STRING DS-DR-RTr
1530: PPUSH
1531: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1535: LD_EXP 51
1539: PPUSH
1540: LD_STRING DS-DC-RTr
1542: PPUSH
1543: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1547: LD_EXP 49
1551: PPUSH
1552: LD_STRING DS-DR-RTr2
1554: PPUSH
1555: CALL_OW 94
// DialogueOff ;
1559: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1563: LD_STRING DS-T2
1565: PPUSH
1566: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1570: LD_INT 10
1572: PPUSH
1573: LD_INT 1
1575: PPUSH
1576: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1580: LD_EXP 45
1584: PUSH
1585: LD_EXP 37
1589: PUSH
1590: LD_INT 0
1592: EQUAL
1593: AND
1594: PUSH
1595: LD_EXP 33
1599: PUSH
1600: LD_INT 0
1602: GREATER
1603: AND
1604: IFFALSE 1799
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1606: LD_INT 10
1608: PPUSH
1609: LD_INT 58
1611: PUSH
1612: EMPTY
1613: LIST
1614: PUSH
1615: LD_INT 34
1617: PUSH
1618: LD_INT 32
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 3
1627: PUSH
1628: LD_INT 33
1630: PUSH
1631: LD_INT 2
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: PPUSH
1647: CALL_OW 70
1651: PUSH
1652: LD_INT 0
1654: GREATER
1655: IFFALSE 1799
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1657: LD_INT 10
1659: PPUSH
1660: LD_INT 58
1662: PUSH
1663: EMPTY
1664: LIST
1665: PUSH
1666: LD_INT 34
1668: PUSH
1669: LD_INT 32
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: LD_INT 3
1678: PUSH
1679: LD_INT 33
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PPUSH
1698: CALL_OW 70
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_INT 3
1709: PPUSH
1710: CALL_OW 289
1714: PUSH
1715: LD_INT 100
1717: EQUAL
1718: IFFALSE 1799
// begin cargo_ok := true ;
1720: LD_ADDR_EXP 37
1724: PUSH
1725: LD_INT 1
1727: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1728: LD_INT 10
1730: PPUSH
1731: LD_INT 58
1733: PUSH
1734: EMPTY
1735: LIST
1736: PUSH
1737: LD_INT 34
1739: PUSH
1740: LD_INT 32
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 3
1749: PUSH
1750: LD_INT 33
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: PPUSH
1769: CALL_OW 70
1773: PUSH
1774: LD_INT 1
1776: ARRAY
1777: PPUSH
1778: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1782: LD_STRING DS-T2-out
1784: PPUSH
1785: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1789: LD_INT 10
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1799: LD_EXP 41
1803: PUSH
1804: LD_INT 0
1806: EQUAL
1807: PUSH
1808: LD_EXP 45
1812: AND
1813: PUSH
1814: LD_EXP 37
1818: PUSH
1819: LD_INT 0
1821: EQUAL
1822: AND
1823: PUSH
1824: LD_EXP 33
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: AND
1833: IFFALSE 1860
// begin russian_attack := true ;
1835: LD_ADDR_EXP 41
1839: PUSH
1840: LD_INT 1
1842: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1843: LD_STRING DS-T2-out
1845: PPUSH
1846: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1850: LD_INT 10
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1860: LD_EXP 45
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: PUSH
1869: LD_EXP 41
1873: PUSH
1874: LD_INT 0
1876: EQUAL
1877: AND
1878: PUSH
1879: LD_EXP 42
1883: PUSH
1884: LD_INT 0
1886: EQUAL
1887: AND
1888: PUSH
1889: LD_OWVAR 1
1893: PUSH
1894: LD_INT 21000
1896: MOD
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: AND
1902: IFFALSE 1955
// begin p := Rand ( 1 , 100 ) ;
1904: LD_ADDR_VAR 0 2
1908: PUSH
1909: LD_INT 1
1911: PPUSH
1912: LD_INT 100
1914: PPUSH
1915: CALL_OW 12
1919: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1920: LD_VAR 0 2
1924: PUSH
1925: LD_INT 25
1927: PUSH
1928: LD_INT 35
1930: PUSH
1931: LD_INT 45
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_EXP 2
1943: ARRAY
1944: LESSEQUAL
1945: IFFALSE 1955
// russian_attack := true ;
1947: LD_ADDR_EXP 41
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1955: LD_EXP 43
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: PUSH
1964: LD_EXP 42
1968: PUSH
1969: LD_INT 0
1971: EQUAL
1972: AND
1973: PUSH
1974: LD_EXP 41
1978: PUSH
1979: LD_INT 0
1981: EQUAL
1982: AND
1983: PUSH
1984: LD_OWVAR 1
1988: PUSH
1989: LD_INT 31500
1991: MOD
1992: PUSH
1993: LD_INT 0
1995: EQUAL
1996: AND
1997: IFFALSE 2050
// begin p := Rand ( 1 , 100 ) ;
1999: LD_ADDR_VAR 0 2
2003: PUSH
2004: LD_INT 1
2006: PPUSH
2007: LD_INT 100
2009: PPUSH
2010: CALL_OW 12
2014: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
2015: LD_VAR 0 2
2019: PUSH
2020: LD_INT 22
2022: PUSH
2023: LD_INT 33
2025: PUSH
2026: LD_INT 44
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_EXP 2
2038: ARRAY
2039: LESSEQUAL
2040: IFFALSE 2050
// american_attack := true ;
2042: LD_ADDR_EXP 42
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2050: LD_EXP 42
2054: PUSH
2055: LD_INT 0
2057: EQUAL
2058: PUSH
2059: LD_EXP 41
2063: PUSH
2064: LD_INT 0
2066: EQUAL
2067: AND
2068: PUSH
2069: LD_EXP 43
2073: PUSH
2074: LD_INT 0
2076: EQUAL
2077: AND
2078: PUSH
2079: LD_OWVAR 1
2083: PUSH
2084: LD_INT 21200
2086: MOD
2087: PUSH
2088: LD_INT 0
2090: EQUAL
2091: AND
2092: IFFALSE 2149
// begin p := Rand ( 1 , 100 ) ;
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 100
2104: PPUSH
2105: CALL_OW 12
2109: ST_TO_ADDR
// if p <= american_hchan then
2110: LD_VAR 0 2
2114: PUSH
2115: LD_EXP 38
2119: LESSEQUAL
2120: IFFALSE 2149
// begin american_help := true ;
2122: LD_ADDR_EXP 43
2126: PUSH
2127: LD_INT 1
2129: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2130: LD_EXP 48
2134: PPUSH
2135: LD_STRING DS-amhelp
2137: PPUSH
2138: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2142: LD_INT 91
2144: PPUSH
2145: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2149: LD_EXP 42
2153: PUSH
2154: LD_EXP 27
2158: PUSH
2159: LD_INT 0
2161: EQUAL
2162: AND
2163: PUSH
2164: LD_INT 22
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: AND
2183: IFFALSE 2285
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2185: LD_ADDR_EXP 27
2189: PUSH
2190: LD_INT 35700
2192: PPUSH
2193: LD_INT 42000
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2201: LD_EXP 12
2205: PPUSH
2206: LD_STRING DS-DZ-U
2208: PPUSH
2209: CALL_OW 94
// Wait ( 0 0$33 ) ;
2213: LD_INT 1155
2215: PPUSH
2216: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: PPUSH
2228: LD_INT 2
2230: PPUSH
2231: CALL_OW 12
2235: ST_TO_ADDR
// case x of 1 :
2236: LD_VAR 0 3
2240: PUSH
2241: LD_INT 1
2243: DOUBLE
2244: EQUAL
2245: IFTRUE 2249
2247: GO 2259
2249: POP
// RaiseSailEvent ( 41 ) ; 2 :
2250: LD_INT 41
2252: PPUSH
2253: CALL_OW 427
2257: GO 2278
2259: LD_INT 2
2261: DOUBLE
2262: EQUAL
2263: IFTRUE 2267
2265: GO 2277
2267: POP
// RaiseSailEvent ( 42 ) ; end ;
2268: LD_INT 42
2270: PPUSH
2271: CALL_OW 427
2275: GO 2278
2277: POP
// RaiseSailEvent ( 42 ) ;
2278: LD_INT 42
2280: PPUSH
2281: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2285: LD_EXP 41
2289: PUSH
2290: LD_EXP 26
2294: PUSH
2295: LD_INT 0
2297: EQUAL
2298: AND
2299: PUSH
2300: LD_INT 22
2302: PUSH
2303: LD_INT 3
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PPUSH
2310: CALL_OW 69
2314: PUSH
2315: LD_INT 0
2317: EQUAL
2318: AND
2319: IFFALSE 2375
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2321: LD_ADDR_EXP 26
2325: PUSH
2326: LD_INT 35700
2328: PPUSH
2329: LD_INT 42000
2331: PPUSH
2332: CALL_OW 12
2336: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2337: LD_EXP 12
2341: PPUSH
2342: LD_STRING DS-DZ-R
2344: PPUSH
2345: CALL_OW 94
// Wait ( 0 0$45 ) ;
2349: LD_INT 1575
2351: PPUSH
2352: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2356: LD_EXP 49
2360: PPUSH
2361: LD_STRING DS-DR-R1
2363: PPUSH
2364: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2368: LD_INT 51
2370: PPUSH
2371: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2375: LD_EXP 36
2379: PUSH
2380: LD_INT 21000
2382: GREATEREQUAL
2383: PUSH
2384: LD_EXP 22
2388: PUSH
2389: LD_INT 10
2391: LESS
2392: AND
2393: IFFALSE 2417
// begin mission_time := 0 0$00 ;
2395: LD_ADDR_EXP 36
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2403: LD_ADDR_EXP 22
2407: PUSH
2408: LD_EXP 22
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2417: LD_EXP 25
2421: PUSH
2422: LD_INT 0
2424: EQUAL
2425: PUSH
2426: LD_INT 22
2428: PUSH
2429: LD_INT 2
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 34
2441: PUSH
2442: LD_INT 31
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PPUSH
2457: CALL_OW 69
2461: PUSH
2462: LD_INT 0
2464: EQUAL
2465: AND
2466: IFFALSE 2664
// begin arabian_timeing := 7 7$30 ;
2468: LD_ADDR_EXP 25
2472: PUSH
2473: LD_INT 15750
2475: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2476: LD_ADDR_VAR 0 3
2480: PUSH
2481: LD_INT 1
2483: PPUSH
2484: LD_INT 3
2486: PPUSH
2487: CALL_OW 12
2491: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2492: LD_EXP 12
2496: PPUSH
2497: LD_STRING DS-DZ-H
2499: PPUSH
2500: CALL_OW 94
// case x of 1 :
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: DOUBLE
2512: EQUAL
2513: IFTRUE 2517
2515: GO 2527
2517: POP
// RaiseSailEvent ( 31 ) ; 2 :
2518: LD_INT 31
2520: PPUSH
2521: CALL_OW 427
2525: GO 2564
2527: LD_INT 2
2529: DOUBLE
2530: EQUAL
2531: IFTRUE 2535
2533: GO 2545
2535: POP
// RaiseSailEvent ( 32 ) ; 3 :
2536: LD_INT 32
2538: PPUSH
2539: CALL_OW 427
2543: GO 2564
2545: LD_INT 3
2547: DOUBLE
2548: EQUAL
2549: IFTRUE 2553
2551: GO 2563
2553: POP
// RaiseSailEvent ( 33 ) ; end ;
2554: LD_INT 33
2556: PPUSH
2557: CALL_OW 427
2561: GO 2564
2563: POP
// RaiseSailEvent ( 33 ) ;
2564: LD_INT 33
2566: PPUSH
2567: CALL_OW 427
// if game_difficulty > 1 then
2571: LD_EXP 2
2575: PUSH
2576: LD_INT 1
2578: GREATER
2579: IFFALSE 2588
// RaiseSailEvent ( 33 ) ;
2581: LD_INT 33
2583: PPUSH
2584: CALL_OW 427
// if heike_dialog1 = false then
2588: LD_EXP 46
2592: PUSH
2593: LD_INT 0
2595: EQUAL
2596: IFFALSE 2627
// begin heike_dialog1 := true ;
2598: LD_ADDR_EXP 46
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2606: LD_INT 105
2608: PPUSH
2609: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2613: LD_EXP 50
2617: PPUSH
2618: LD_STRING heike1
2620: PPUSH
2621: CALL_OW 94
// end else
2625: GO 2664
// if heike_dialog2 = false then
2627: LD_EXP 47
2631: PUSH
2632: LD_INT 0
2634: EQUAL
2635: IFFALSE 2664
// begin heike_dialog2 := true ;
2637: LD_ADDR_EXP 47
2641: PUSH
2642: LD_INT 1
2644: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2645: LD_INT 105
2647: PPUSH
2648: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2652: LD_EXP 50
2656: PPUSH
2657: LD_STRING heike2
2659: PPUSH
2660: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2664: LD_INT 22
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 33
2676: PUSH
2677: LD_INT 2
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PUSH
2693: LD_INT 0
2695: GREATER
2696: IFFALSE 2705
// ConnectWithTower ( 2 ) ;
2698: LD_INT 2
2700: PPUSH
2701: CALL 7037 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2705: LD_INT 22
2707: PUSH
2708: LD_INT 2
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 3
2717: PUSH
2718: LD_INT 34
2720: PUSH
2721: LD_INT 31
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 3
2734: PUSH
2735: LD_INT 60
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: PPUSH
2753: CALL_OW 69
2757: PUSH
2758: LD_INT 0
2760: GREATER
2761: IFFALSE 2907
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2763: LD_ADDR_VAR 0 4
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 2
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 34
2783: PUSH
2784: LD_INT 31
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: PUSH
2795: LD_INT 3
2797: PUSH
2798: LD_INT 60
2800: PUSH
2801: EMPTY
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2821: LD_ADDR_VAR 0 3
2825: PUSH
2826: LD_INT 81
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PPUSH
2836: CALL_OW 69
2840: PPUSH
2841: LD_INT 20
2843: PPUSH
2844: CALL 8420 0 2
2848: ST_TO_ADDR
// for i = 1 to filter do
2849: LD_ADDR_VAR 0 1
2853: PUSH
2854: DOUBLE
2855: LD_INT 1
2857: DEC
2858: ST_TO_ADDR
2859: LD_VAR 0 4
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2905
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2867: LD_VAR 0 4
2871: PUSH
2872: LD_VAR 0 1
2876: ARRAY
2877: PPUSH
2878: LD_VAR 0 3
2882: PPUSH
2883: LD_VAR 0 4
2887: PUSH
2888: LD_VAR 0 1
2892: ARRAY
2893: PPUSH
2894: CALL_OW 74
2898: PPUSH
2899: CALL_OW 115
2903: GO 2864
2905: POP
2906: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2907: LD_INT 22
2909: PUSH
2910: LD_INT 3
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 3
2919: PUSH
2920: LD_INT 60
2922: PUSH
2923: EMPTY
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: EMPTY
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: PUSH
2942: LD_INT 0
2944: GREATER
2945: IFFALSE 3091
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: LD_INT 22
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: LD_INT 3
2964: PUSH
2965: LD_INT 34
2967: PUSH
2968: LD_INT 31
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: LD_INT 60
2984: PUSH
2985: EMPTY
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: EMPTY
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 81
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 69
3024: PPUSH
3025: LD_INT 20
3027: PPUSH
3028: CALL 8420 0 2
3032: ST_TO_ADDR
// for i = 1 to filter do
3033: LD_ADDR_VAR 0 1
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_VAR 0 4
3047: PUSH
3048: FOR_TO
3049: IFFALSE 3089
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3051: LD_VAR 0 4
3055: PUSH
3056: LD_VAR 0 1
3060: ARRAY
3061: PPUSH
3062: LD_VAR 0 3
3066: PPUSH
3067: LD_VAR 0 4
3071: PUSH
3072: LD_VAR 0 1
3076: ARRAY
3077: PPUSH
3078: CALL_OW 74
3082: PPUSH
3083: CALL_OW 115
3087: GO 3048
3089: POP
3090: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3091: LD_INT 22
3093: PUSH
3094: LD_INT 1
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: LD_INT 60
3106: PUSH
3107: EMPTY
3108: LIST
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: EMPTY
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: LD_INT 0
3128: GREATER
3129: IFFALSE 3275
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3131: LD_ADDR_VAR 0 4
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 3
3148: PUSH
3149: LD_INT 34
3151: PUSH
3152: LD_INT 31
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: LD_INT 60
3168: PUSH
3169: EMPTY
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3189: LD_ADDR_VAR 0 3
3193: PUSH
3194: LD_INT 81
3196: PUSH
3197: LD_INT 1
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 69
3208: PPUSH
3209: LD_INT 20
3211: PPUSH
3212: CALL 8420 0 2
3216: ST_TO_ADDR
// for i = 1 to filter do
3217: LD_ADDR_VAR 0 1
3221: PUSH
3222: DOUBLE
3223: LD_INT 1
3225: DEC
3226: ST_TO_ADDR
3227: LD_VAR 0 4
3231: PUSH
3232: FOR_TO
3233: IFFALSE 3273
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3235: LD_VAR 0 4
3239: PUSH
3240: LD_VAR 0 1
3244: ARRAY
3245: PPUSH
3246: LD_VAR 0 3
3250: PPUSH
3251: LD_VAR 0 4
3255: PUSH
3256: LD_VAR 0 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 74
3266: PPUSH
3267: CALL_OW 115
3271: GO 3232
3273: POP
3274: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3275: LD_INT 22
3277: PUSH
3278: LD_INT 2
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 34
3287: PUSH
3288: LD_EXP 17
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 3
3299: PUSH
3300: LD_INT 24
3302: PUSH
3303: LD_INT 700
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: PUSH
3319: EMPTY
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: PUSH
3327: LD_INT 0
3329: GREATER
3330: IFFALSE 3429
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3332: LD_ADDR_VAR 0 4
3336: PUSH
3337: LD_INT 22
3339: PUSH
3340: LD_INT 2
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 34
3349: PUSH
3350: LD_EXP 17
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 3
3361: PUSH
3362: LD_INT 24
3364: PUSH
3365: LD_INT 700
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: PUSH
3381: EMPTY
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: ST_TO_ADDR
// for i = 1 to filter do
3389: LD_ADDR_VAR 0 1
3393: PUSH
3394: DOUBLE
3395: LD_INT 1
3397: DEC
3398: ST_TO_ADDR
3399: LD_VAR 0 4
3403: PUSH
3404: FOR_TO
3405: IFFALSE 3427
// SetLives ( filter [ i ] , 1 ) ;
3407: LD_VAR 0 4
3411: PUSH
3412: LD_VAR 0 1
3416: ARRAY
3417: PPUSH
3418: LD_INT 1
3420: PPUSH
3421: CALL_OW 234
3425: GO 3404
3427: POP
3428: POP
// end ; end ; end_of_file
3429: PPOPN 4
3431: END
// export function Start_Mission ; begin
3432: LD_INT 0
3434: PPUSH
// PrepareLegion ;
3435: CALL 3476 0 0
// PrepareMeeting ;
3439: CALL 4090 0 0
// case Query ( DS-text-beg ) of 1 :
3443: LD_STRING DS-text-beg
3445: PPUSH
3446: CALL_OW 97
3450: PUSH
3451: LD_INT 1
3453: DOUBLE
3454: EQUAL
3455: IFTRUE 3459
3457: GO 3462
3459: POP
// ; end ;
3460: GO 3463
3462: POP
// game_on := true ;
3463: LD_ADDR_EXP 1
3467: PUSH
3468: LD_INT 1
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 1
3475: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
// uc_side := 8 ;
3483: LD_ADDR_OWVAR 20
3487: PUSH
3488: LD_INT 8
3490: ST_TO_ADDR
// uc_nation := 2 ;
3491: LD_ADDR_OWVAR 21
3495: PUSH
3496: LD_INT 2
3498: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3499: LD_ADDR_EXP 52
3503: PUSH
3504: LD_INT 7
3506: PUSH
3507: LD_INT 6
3509: PUSH
3510: LD_INT 5
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: LD_OWVAR 67
3522: ARRAY
3523: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3524: LD_ADDR_EXP 53
3528: PUSH
3529: LD_INT 8
3531: PUSH
3532: LD_INT 7
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: LIST
3542: PUSH
3543: LD_OWVAR 67
3547: ARRAY
3548: ST_TO_ADDR
// filter := [ ] ;
3549: LD_ADDR_VAR 0 4
3553: PUSH
3554: EMPTY
3555: ST_TO_ADDR
// hc_gallery := desert ;
3556: LD_ADDR_OWVAR 33
3560: PUSH
3561: LD_STRING desert
3563: ST_TO_ADDR
// hc_face_number := 1 ;
3564: LD_ADDR_OWVAR 34
3568: PUSH
3569: LD_INT 1
3571: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3572: LD_ADDR_OWVAR 31
3576: PUSH
3577: LD_EXP 52
3581: PUSH
3582: LD_INT 2
3584: PLUS
3585: PUSH
3586: LD_EXP 52
3590: PUSH
3591: LD_INT 1
3593: MINUS
3594: PUSH
3595: LD_EXP 52
3599: PUSH
3600: LD_EXP 52
3604: PUSH
3605: LD_INT 1
3607: PLUS
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// hc_sex := sex_male ;
3615: LD_ADDR_OWVAR 27
3619: PUSH
3620: LD_INT 1
3622: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3623: LD_ADDR_OWVAR 26
3627: PUSH
3628: LD_STRING Henri Ruotz
3630: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3631: LD_ADDR_OWVAR 29
3635: PUSH
3636: LD_INT 10
3638: PUSH
3639: LD_INT 10
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: ST_TO_ADDR
// hc_class := 1 ;
3646: LD_ADDR_OWVAR 28
3650: PUSH
3651: LD_INT 1
3653: ST_TO_ADDR
// hc_importance := 100 ;
3654: LD_ADDR_OWVAR 32
3658: PUSH
3659: LD_INT 100
3661: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3662: LD_ADDR_EXP 51
3666: PUSH
3667: CALL_OW 44
3671: ST_TO_ADDR
// hc_importance := 0 ;
3672: LD_ADDR_OWVAR 32
3676: PUSH
3677: LD_INT 0
3679: ST_TO_ADDR
// scout := CreateHumanWithClass ( 1 , 0 ) ;
3680: LD_ADDR_EXP 12
3684: PUSH
3685: LD_INT 1
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL 7221 0 2
3695: ST_TO_ADDR
// for i = 1 to 4 do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_INT 4
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3760
// for p = 1 to 6 do
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: DOUBLE
3718: LD_INT 1
3720: DEC
3721: ST_TO_ADDR
3722: LD_INT 6
3724: PUSH
3725: FOR_TO
3726: IFFALSE 3756
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3728: LD_ADDR_VAR 0 4
3732: PUSH
3733: LD_VAR 0 4
3737: PUSH
3738: LD_VAR 0 2
3742: PPUSH
3743: LD_EXP 52
3747: PPUSH
3748: CALL 7221 0 2
3752: ADD
3753: ST_TO_ADDR
3754: GO 3725
3756: POP
3757: POP
3758: GO 3709
3760: POP
3761: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3762: LD_ADDR_VAR 0 5
3766: PUSH
3767: LD_STRING text
3769: PPUSH
3770: LD_EXP 53
3774: PPUSH
3775: LD_EXP 53
3779: PPUSH
3780: LD_INT -5
3782: PUSH
3783: LD_EXP 51
3787: PUSH
3788: LD_INT -3
3790: PUSH
3791: LD_INT -2
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: PUSH
3800: LD_VAR 0 4
3804: ADD
3805: PPUSH
3806: LD_INT 1
3808: PUSH
3809: LD_INT 3
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: LD_INT 4
3817: PUSH
3818: LD_INT 8
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PPUSH
3828: CALL_OW 42
3832: ST_TO_ADDR
// for i = 1 to l_units do
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: DOUBLE
3839: LD_INT 1
3841: DEC
3842: ST_TO_ADDR
3843: LD_EXP 53
3847: PUSH
3848: FOR_TO
3849: IFFALSE 3874
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3851: LD_VAR 0 5
3855: PUSH
3856: LD_VAR 0 2
3860: ARRAY
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
3872: GO 3848
3874: POP
3875: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3876: LD_EXP 51
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 49
// end ;
3891: LD_VAR 0 1
3895: RET
// export function PlaceCamera ; begin
3896: LD_INT 0
3898: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3899: LD_INT 46
3901: PPUSH
3902: LD_INT 48
3904: PPUSH
3905: LD_INT 8
3907: PPUSH
3908: LD_INT 10
3910: PPUSH
3911: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3915: LD_INT 58
3917: PPUSH
3918: LD_INT 66
3920: PPUSH
3921: LD_INT 8
3923: PPUSH
3924: LD_INT 10
3926: PPUSH
3927: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3931: LD_INT 82
3933: PPUSH
3934: LD_INT 82
3936: PPUSH
3937: LD_INT 8
3939: PPUSH
3940: LD_INT 10
3942: PPUSH
3943: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3947: LD_INT 107
3949: PPUSH
3950: LD_INT 79
3952: PPUSH
3953: LD_INT 8
3955: PPUSH
3956: LD_INT 10
3958: PPUSH
3959: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
3963: LD_INT 101
3965: PPUSH
3966: LD_INT 57
3968: PPUSH
3969: LD_INT 8
3971: PPUSH
3972: LD_INT 10
3974: PPUSH
3975: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
3979: LD_INT 85
3981: PPUSH
3982: LD_INT 32
3984: PPUSH
3985: LD_INT 8
3987: PPUSH
3988: LD_INT 10
3990: PPUSH
3991: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
3995: LD_INT 108
3997: PPUSH
3998: LD_INT 72
4000: PPUSH
4001: LD_INT 8
4003: PPUSH
4004: LD_INT 10
4006: PPUSH
4007: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4011: LD_INT 124
4013: PPUSH
4014: LD_INT 74
4016: PPUSH
4017: LD_INT 8
4019: PPUSH
4020: LD_INT 10
4022: PPUSH
4023: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4027: LD_INT 67
4029: PPUSH
4030: LD_INT 33
4032: PPUSH
4033: LD_INT 8
4035: PPUSH
4036: LD_INT 20
4038: PPUSH
4039: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4043: LD_INT 67
4045: PPUSH
4046: LD_INT 33
4048: PPUSH
4049: LD_INT 8
4051: PPUSH
4052: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4056: LD_INT 94
4058: PPUSH
4059: LD_INT 84
4061: PPUSH
4062: LD_INT 8
4064: PPUSH
4065: LD_INT 20
4067: PPUSH
4068: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4072: LD_INT 94
4074: PPUSH
4075: LD_INT 84
4077: PPUSH
4078: LD_INT 8
4080: PPUSH
4081: CALL_OW 331
// end ;
4085: LD_VAR 0 1
4089: RET
// export function PrepareMeeting ; begin
4090: LD_INT 0
4092: PPUSH
// uc_side := 6 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 6
4100: ST_TO_ADDR
// hc_gallery := desert ;
4101: LD_ADDR_OWVAR 33
4105: PUSH
4106: LD_STRING desert
4108: ST_TO_ADDR
// hc_face_number := 2 ;
4109: LD_ADDR_OWVAR 34
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// hc_name := Leopold Drass ;
4117: LD_ADDR_OWVAR 26
4121: PUSH
4122: LD_STRING Leopold Drass
4124: ST_TO_ADDR
// hc_class := 1 ;
4125: LD_ADDR_OWVAR 28
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// hc_sex := sex_male ;
4133: LD_ADDR_OWVAR 27
4137: PUSH
4138: LD_INT 1
4140: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4141: LD_ADDR_OWVAR 29
4145: PUSH
4146: LD_INT 12
4148: PUSH
4149: LD_INT 12
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: ST_TO_ADDR
// Leopold := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4166: LD_EXP 7
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 49
// end ; end_of_file
4181: LD_VAR 0 1
4185: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4186: LD_INT 0
4188: PPUSH
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
// begin case num of 1 :
4193: LD_VAR 0 1
4197: PUSH
4198: LD_INT 1
4200: DOUBLE
4201: EQUAL
4202: IFTRUE 4206
4204: GO 4238
4206: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4207: LD_EXP 7
4211: PPUSH
4212: LD_EXP 51
4216: PPUSH
4217: CALL_OW 250
4221: PPUSH
4222: LD_EXP 51
4226: PPUSH
4227: CALL_OW 251
4231: PPUSH
4232: CALL_OW 111
// end ; 2 :
4236: GO 6607
4238: LD_INT 2
4240: DOUBLE
4241: EQUAL
4242: IFTRUE 4246
4244: GO 4355
4246: POP
// begin InGameOn ;
4247: CALL_OW 8
// meeting_start := true ;
4251: LD_ADDR_EXP 28
4255: PUSH
4256: LD_INT 1
4258: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4259: LD_EXP 7
4263: PPUSH
4264: LD_EXP 51
4268: PPUSH
4269: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4273: LD_EXP 51
4277: PPUSH
4278: LD_EXP 7
4282: PPUSH
4283: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4287: LD_EXP 7
4291: PPUSH
4292: LD_STRING DS-DL-1
4294: PPUSH
4295: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4299: LD_EXP 51
4303: PPUSH
4304: LD_STRING DS-DC-1
4306: PPUSH
4307: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4311: LD_EXP 7
4315: PPUSH
4316: LD_STRING DS-DL-2
4318: PPUSH
4319: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4323: LD_EXP 7
4327: PPUSH
4328: LD_INT 23
4330: PPUSH
4331: CALL_OW 120
// InGameOff ;
4335: CALL_OW 9
// Wait ( 0 0$01 ) ;
4339: LD_INT 35
4341: PPUSH
4342: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4346: LD_STRING DS-T1
4348: PPUSH
4349: CALL_OW 337
// end ; 10 :
4353: GO 6607
4355: LD_INT 10
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4575
4363: POP
// begin uc_side := 6 ;
4364: LD_ADDR_OWVAR 20
4368: PUSH
4369: LD_INT 6
4371: ST_TO_ADDR
// uc_nation := 2 ;
4372: LD_ADDR_OWVAR 21
4376: PUSH
4377: LD_INT 2
4379: ST_TO_ADDR
// hc_gallery :=  ;
4380: LD_ADDR_OWVAR 33
4384: PUSH
4385: LD_STRING 
4387: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4388: LD_ADDR_OWVAR 31
4392: PUSH
4393: LD_EXP 16
4397: PUSH
4398: LD_INT 2
4400: PLUS
4401: PUSH
4402: LD_EXP 16
4406: PUSH
4407: LD_INT 1
4409: MINUS
4410: PUSH
4411: LD_EXP 16
4415: PUSH
4416: LD_EXP 16
4420: PUSH
4421: LD_INT 1
4423: PLUS
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: ST_TO_ADDR
// hc_sex := sex_male ;
4431: LD_ADDR_OWVAR 27
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4439: LD_ADDR_OWVAR 26
4443: PUSH
4444: LD_STRING Samuel van Horn
4446: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4447: LD_ADDR_OWVAR 29
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 10
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: ST_TO_ADDR
// hc_class := 1 ;
4462: LD_ADDR_OWVAR 28
4466: PUSH
4467: LD_INT 1
4469: ST_TO_ADDR
// samuel := CreateHuman ;
4470: LD_ADDR_EXP 9
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4480: LD_EXP 9
4484: PPUSH
4485: LD_INT 4
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 49
// for i = 1 to 3 do
4495: LD_ADDR_VAR 0 2
4499: PUSH
4500: DOUBLE
4501: LD_INT 1
4503: DEC
4504: ST_TO_ADDR
4505: LD_INT 3
4507: PUSH
4508: FOR_TO
4509: IFFALSE 4536
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4511: LD_INT 8
4513: PPUSH
4514: LD_EXP 16
4518: PPUSH
4519: CALL 7221 0 2
4523: PPUSH
4524: LD_INT 4
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 49
4534: GO 4508
4536: POP
4537: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4538: LD_INT 22
4540: PUSH
4541: LD_INT 6
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PPUSH
4548: CALL_OW 69
4552: PUSH
4553: LD_EXP 7
4557: PUSH
4558: LD_INT 23
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: DIFF
4565: PPUSH
4566: LD_INT 23
4568: PPUSH
4569: CALL_OW 120
// end ; 3 :
4573: GO 6607
4575: LD_INT 3
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4594
4583: POP
// begin arabian_attack := true ;
4584: LD_ADDR_EXP 40
4588: PUSH
4589: LD_INT 1
4591: ST_TO_ADDR
// end ; 4 :
4592: GO 6607
4594: LD_INT 4
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4613
4602: POP
// begin american_attack := true ;
4603: LD_ADDR_EXP 42
4607: PUSH
4608: LD_INT 1
4610: ST_TO_ADDR
// end ; 5 :
4611: GO 6607
4613: LD_INT 5
4615: DOUBLE
4616: EQUAL
4617: IFTRUE 4621
4619: GO 4632
4621: POP
// begin russian_attack := true ;
4622: LD_ADDR_EXP 41
4626: PUSH
4627: LD_INT 1
4629: ST_TO_ADDR
// end ; 31 :
4630: GO 6607
4632: LD_INT 31
4634: DOUBLE
4635: EQUAL
4636: IFTRUE 4640
4638: GO 4915
4640: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4641: LD_ADDR_VAR 0 6
4645: PUSH
4646: LD_EXP 15
4650: PUSH
4651: LD_INT 1
4653: PPUSH
4654: LD_EXP 15
4658: PPUSH
4659: CALL_OW 12
4663: ARRAY
4664: ST_TO_ADDR
// uc_side := 2 ;
4665: LD_ADDR_OWVAR 20
4669: PUSH
4670: LD_INT 2
4672: ST_TO_ADDR
// uc_nation := 2 ;
4673: LD_ADDR_OWVAR 21
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// for i = 1 to arabian_force do
4681: LD_ADDR_VAR 0 2
4685: PUSH
4686: DOUBLE
4687: LD_INT 1
4689: DEC
4690: ST_TO_ADDR
4691: LD_EXP 22
4695: PUSH
4696: FOR_TO
4697: IFFALSE 4776
// begin vc_chassis := ar_half_tracked ;
4699: LD_ADDR_OWVAR 37
4703: PUSH
4704: LD_INT 14
4706: ST_TO_ADDR
// vc_engine := engine_siberite ;
4707: LD_ADDR_OWVAR 39
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// vc_control := control_remote ;
4715: LD_ADDR_OWVAR 38
4719: PUSH
4720: LD_INT 2
4722: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4723: LD_ADDR_OWVAR 40
4727: PUSH
4728: LD_EXP 19
4732: PUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_EXP 19
4740: PPUSH
4741: CALL_OW 12
4745: ARRAY
4746: ST_TO_ADDR
// un := CreateVehicle ;
4747: LD_ADDR_VAR 0 4
4751: PUSH
4752: CALL_OW 45
4756: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4757: LD_VAR 0 4
4761: PPUSH
4762: LD_VAR 0 6
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 49
// end ;
4774: GO 4696
4776: POP
4777: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4778: LD_INT 22
4780: PUSH
4781: LD_INT 2
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 33
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 69
4806: PUSH
4807: LD_INT 2
4809: LESS
4810: IFFALSE 4913
// for i = 1 to 2 do
4812: LD_ADDR_VAR 0 2
4816: PUSH
4817: DOUBLE
4818: LD_INT 1
4820: DEC
4821: ST_TO_ADDR
4822: LD_INT 2
4824: PUSH
4825: FOR_TO
4826: IFFALSE 4911
// begin vc_chassis := ar_half_tracked ;
4828: LD_ADDR_OWVAR 37
4832: PUSH
4833: LD_INT 14
4835: ST_TO_ADDR
// vc_engine := engine_siberite ;
4836: LD_ADDR_OWVAR 39
4840: PUSH
4841: LD_INT 3
4843: ST_TO_ADDR
// vc_control := control_manual ;
4844: LD_ADDR_OWVAR 38
4848: PUSH
4849: LD_INT 1
4851: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4852: LD_ADDR_OWVAR 40
4856: PUSH
4857: LD_INT 31
4859: ST_TO_ADDR
// un := CreateVehicle ;
4860: LD_ADDR_VAR 0 4
4864: PUSH
4865: CALL_OW 45
4869: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4870: LD_VAR 0 4
4874: PPUSH
4875: LD_VAR 0 6
4879: PPUSH
4880: LD_INT 0
4882: PPUSH
4883: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4887: LD_INT 3
4889: PPUSH
4890: LD_EXP 16
4894: PPUSH
4895: CALL 7221 0 2
4899: PPUSH
4900: LD_VAR 0 4
4904: PPUSH
4905: CALL_OW 52
// end ;
4909: GO 4825
4911: POP
4912: POP
// end ; 32 :
4913: GO 6607
4915: LD_INT 32
4917: DOUBLE
4918: EQUAL
4919: IFTRUE 4923
4921: GO 5296
4923: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4924: LD_ADDR_VAR 0 6
4928: PUSH
4929: LD_EXP 15
4933: PUSH
4934: LD_INT 1
4936: PPUSH
4937: LD_EXP 15
4941: PPUSH
4942: CALL_OW 12
4946: ARRAY
4947: ST_TO_ADDR
// uc_side := 2 ;
4948: LD_ADDR_OWVAR 20
4952: PUSH
4953: LD_INT 2
4955: ST_TO_ADDR
// uc_nation := 2 ;
4956: LD_ADDR_OWVAR 21
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
4964: LD_ADDR_VAR 0 2
4968: PUSH
4969: DOUBLE
4970: LD_INT 1
4972: DEC
4973: ST_TO_ADDR
4974: LD_EXP 22
4978: PUSH
4979: LD_INT 2
4981: MINUS
4982: PUSH
4983: FOR_TO
4984: IFFALSE 5067
// begin vc_chassis := ar_half_tracked ;
4986: LD_ADDR_OWVAR 37
4990: PUSH
4991: LD_INT 14
4993: ST_TO_ADDR
// vc_engine := engine_siberite ;
4994: LD_ADDR_OWVAR 39
4998: PUSH
4999: LD_INT 3
5001: ST_TO_ADDR
// vc_control := control_remote ;
5002: LD_ADDR_OWVAR 38
5006: PUSH
5007: LD_INT 2
5009: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5010: LD_ADDR_OWVAR 40
5014: PUSH
5015: LD_EXP 19
5019: PUSH
5020: LD_INT 1
5022: PPUSH
5023: LD_EXP 19
5027: PUSH
5028: LD_INT 1
5030: MINUS
5031: PPUSH
5032: CALL_OW 12
5036: ARRAY
5037: ST_TO_ADDR
// un := CreateVehicle ;
5038: LD_ADDR_VAR 0 4
5042: PUSH
5043: CALL_OW 45
5047: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5048: LD_VAR 0 4
5052: PPUSH
5053: LD_VAR 0 6
5057: PPUSH
5058: LD_INT 0
5060: PPUSH
5061: CALL_OW 49
// end ;
5065: GO 4983
5067: POP
5068: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5069: LD_ADDR_VAR 0 2
5073: PUSH
5074: DOUBLE
5075: LD_INT 1
5077: DEC
5078: ST_TO_ADDR
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 12
5089: PUSH
5090: LD_INT 3
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_EXP 2
5108: ARRAY
5109: PLUS
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5149
// begin uc_nation := 0 ;
5114: LD_ADDR_OWVAR 21
5118: PUSH
5119: LD_INT 0
5121: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5122: LD_INT 17
5124: PPUSH
5125: LD_EXP 16
5129: PPUSH
5130: CALL 7221 0 2
5134: PPUSH
5135: LD_VAR 0 6
5139: PPUSH
5140: LD_INT 0
5142: PPUSH
5143: CALL_OW 49
// end ;
5147: GO 5111
5149: POP
5150: POP
// uc_nation := 2 ;
5151: LD_ADDR_OWVAR 21
5155: PUSH
5156: LD_INT 2
5158: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5159: LD_INT 22
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 33
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PPUSH
5183: CALL_OW 69
5187: PUSH
5188: LD_INT 2
5190: LESS
5191: IFFALSE 5294
// for i = 1 to 2 do
5193: LD_ADDR_VAR 0 2
5197: PUSH
5198: DOUBLE
5199: LD_INT 1
5201: DEC
5202: ST_TO_ADDR
5203: LD_INT 2
5205: PUSH
5206: FOR_TO
5207: IFFALSE 5292
// begin vc_chassis := ar_half_tracked ;
5209: LD_ADDR_OWVAR 37
5213: PUSH
5214: LD_INT 14
5216: ST_TO_ADDR
// vc_engine := engine_siberite ;
5217: LD_ADDR_OWVAR 39
5221: PUSH
5222: LD_INT 3
5224: ST_TO_ADDR
// vc_control := control_manual ;
5225: LD_ADDR_OWVAR 38
5229: PUSH
5230: LD_INT 1
5232: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5233: LD_ADDR_OWVAR 40
5237: PUSH
5238: LD_INT 31
5240: ST_TO_ADDR
// un := CreateVehicle ;
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: CALL_OW 45
5250: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5251: LD_VAR 0 4
5255: PPUSH
5256: LD_VAR 0 6
5260: PPUSH
5261: LD_INT 0
5263: PPUSH
5264: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5268: LD_INT 3
5270: PPUSH
5271: LD_EXP 16
5275: PPUSH
5276: CALL 7221 0 2
5280: PPUSH
5281: LD_VAR 0 4
5285: PPUSH
5286: CALL_OW 52
// end ;
5290: GO 5206
5292: POP
5293: POP
// end ; 33 :
5294: GO 6607
5296: LD_INT 33
5298: DOUBLE
5299: EQUAL
5300: IFTRUE 5304
5302: GO 5575
5304: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5305: LD_ADDR_VAR 0 6
5309: PUSH
5310: LD_EXP 15
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_EXP 15
5322: PPUSH
5323: CALL_OW 12
5327: ARRAY
5328: ST_TO_ADDR
// uc_side := 2 ;
5329: LD_ADDR_OWVAR 20
5333: PUSH
5334: LD_INT 2
5336: ST_TO_ADDR
// uc_nation := 2 ;
5337: LD_ADDR_OWVAR 21
5341: PUSH
5342: LD_INT 2
5344: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: DOUBLE
5351: LD_INT 1
5353: DEC
5354: ST_TO_ADDR
5355: LD_EXP 22
5359: PUSH
5360: LD_INT 2
5362: DIVREAL
5363: PUSH
5364: FOR_TO
5365: IFFALSE 5470
// begin vc_chassis := ar_half_tracked ;
5367: LD_ADDR_OWVAR 37
5371: PUSH
5372: LD_INT 14
5374: ST_TO_ADDR
// vc_engine := engine_siberite ;
5375: LD_ADDR_OWVAR 39
5379: PUSH
5380: LD_INT 3
5382: ST_TO_ADDR
// vc_control := control_manual ;
5383: LD_ADDR_OWVAR 38
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5391: LD_ADDR_OWVAR 40
5395: PUSH
5396: LD_EXP 19
5400: PUSH
5401: LD_INT 1
5403: PPUSH
5404: LD_EXP 19
5408: PUSH
5409: LD_INT 2
5411: MINUS
5412: PPUSH
5413: CALL_OW 12
5417: ARRAY
5418: ST_TO_ADDR
// un := CreateVehicle ;
5419: LD_ADDR_VAR 0 4
5423: PUSH
5424: CALL_OW 45
5428: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5429: LD_VAR 0 4
5433: PPUSH
5434: LD_VAR 0 6
5438: PPUSH
5439: LD_INT 0
5441: PPUSH
5442: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5446: LD_INT 3
5448: PPUSH
5449: LD_EXP 16
5453: PPUSH
5454: CALL 7221 0 2
5458: PPUSH
5459: LD_VAR 0 4
5463: PPUSH
5464: CALL_OW 52
// end ;
5468: GO 5364
5470: POP
5471: POP
// for i = 1 to ( arabian_force / 2 ) do
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: DOUBLE
5478: LD_INT 1
5480: DEC
5481: ST_TO_ADDR
5482: LD_EXP 22
5486: PUSH
5487: LD_INT 2
5489: DIVREAL
5490: PUSH
5491: FOR_TO
5492: IFFALSE 5571
// begin vc_chassis := ar_half_tracked ;
5494: LD_ADDR_OWVAR 37
5498: PUSH
5499: LD_INT 14
5501: ST_TO_ADDR
// vc_engine := engine_siberite ;
5502: LD_ADDR_OWVAR 39
5506: PUSH
5507: LD_INT 3
5509: ST_TO_ADDR
// vc_control := control_apeman ;
5510: LD_ADDR_OWVAR 38
5514: PUSH
5515: LD_INT 5
5517: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5518: LD_ADDR_OWVAR 40
5522: PUSH
5523: LD_EXP 19
5527: PUSH
5528: LD_INT 2
5530: PPUSH
5531: LD_EXP 19
5535: PPUSH
5536: CALL_OW 12
5540: ARRAY
5541: ST_TO_ADDR
// un := CreateVehicle ;
5542: LD_ADDR_VAR 0 4
5546: PUSH
5547: CALL_OW 45
5551: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5552: LD_VAR 0 4
5556: PPUSH
5557: LD_VAR 0 6
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: CALL_OW 49
// end ;
5569: GO 5491
5571: POP
5572: POP
// end ; 41 :
5573: GO 6607
5575: LD_INT 41
5577: DOUBLE
5578: EQUAL
5579: IFTRUE 5583
5581: GO 5727
5583: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5584: LD_ADDR_VAR 0 6
5588: PUSH
5589: LD_EXP 15
5593: PUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_EXP 15
5601: PPUSH
5602: CALL_OW 12
5606: ARRAY
5607: ST_TO_ADDR
// uc_side := 1 ;
5608: LD_ADDR_OWVAR 20
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// uc_nation := 1 ;
5616: LD_ADDR_OWVAR 21
5620: PUSH
5621: LD_INT 1
5623: ST_TO_ADDR
// for i = 1 to american_force do
5624: LD_ADDR_VAR 0 2
5628: PUSH
5629: DOUBLE
5630: LD_INT 1
5632: DEC
5633: ST_TO_ADDR
5634: LD_EXP 24
5638: PUSH
5639: FOR_TO
5640: IFFALSE 5723
// begin vc_chassis := us_morphling ;
5642: LD_ADDR_OWVAR 37
5646: PUSH
5647: LD_INT 5
5649: ST_TO_ADDR
// vc_engine := engine_siberite ;
5650: LD_ADDR_OWVAR 39
5654: PUSH
5655: LD_INT 3
5657: ST_TO_ADDR
// vc_control := control_computer ;
5658: LD_ADDR_OWVAR 38
5662: PUSH
5663: LD_INT 3
5665: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5666: LD_ADDR_OWVAR 40
5670: PUSH
5671: LD_EXP 21
5675: PUSH
5676: LD_INT 1
5678: PPUSH
5679: LD_EXP 21
5683: PUSH
5684: LD_INT 1
5686: MINUS
5687: PPUSH
5688: CALL_OW 12
5692: ARRAY
5693: ST_TO_ADDR
// un := CreateVehicle ;
5694: LD_ADDR_VAR 0 4
5698: PUSH
5699: CALL_OW 45
5703: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5704: LD_VAR 0 4
5708: PPUSH
5709: LD_VAR 0 6
5713: PPUSH
5714: LD_INT 0
5716: PPUSH
5717: CALL_OW 49
// end ;
5721: GO 5639
5723: POP
5724: POP
// end ; 42 :
5725: GO 6607
5727: LD_INT 42
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5875
5735: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5736: LD_ADDR_VAR 0 6
5740: PUSH
5741: LD_EXP 15
5745: PUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_EXP 15
5753: PPUSH
5754: CALL_OW 12
5758: ARRAY
5759: ST_TO_ADDR
// uc_side := 1 ;
5760: LD_ADDR_OWVAR 20
5764: PUSH
5765: LD_INT 1
5767: ST_TO_ADDR
// uc_nation := 1 ;
5768: LD_ADDR_OWVAR 21
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// for i = 1 to american_force do
5776: LD_ADDR_VAR 0 2
5780: PUSH
5781: DOUBLE
5782: LD_INT 1
5784: DEC
5785: ST_TO_ADDR
5786: LD_EXP 24
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5871
// begin vc_chassis := us_morphling ;
5794: LD_ADDR_OWVAR 37
5798: PUSH
5799: LD_INT 5
5801: ST_TO_ADDR
// vc_engine := engine_siberite ;
5802: LD_ADDR_OWVAR 39
5806: PUSH
5807: LD_INT 3
5809: ST_TO_ADDR
// vc_control := control_computer ;
5810: LD_ADDR_OWVAR 38
5814: PUSH
5815: LD_INT 3
5817: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5818: LD_ADDR_OWVAR 40
5822: PUSH
5823: LD_EXP 21
5827: PUSH
5828: LD_INT 1
5830: PPUSH
5831: LD_EXP 21
5835: PPUSH
5836: CALL_OW 12
5840: ARRAY
5841: ST_TO_ADDR
// un := CreateVehicle ;
5842: LD_ADDR_VAR 0 4
5846: PUSH
5847: CALL_OW 45
5851: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5852: LD_VAR 0 4
5856: PPUSH
5857: LD_VAR 0 6
5861: PPUSH
5862: LD_INT 0
5864: PPUSH
5865: CALL_OW 49
// end ;
5869: GO 5791
5871: POP
5872: POP
// end ; 51 :
5873: GO 6607
5875: LD_INT 51
5877: DOUBLE
5878: EQUAL
5879: IFTRUE 5883
5881: GO 6023
5883: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5884: LD_ADDR_VAR 0 6
5888: PUSH
5889: LD_EXP 15
5893: PUSH
5894: LD_INT 1
5896: PPUSH
5897: LD_EXP 15
5901: PPUSH
5902: CALL_OW 12
5906: ARRAY
5907: ST_TO_ADDR
// uc_side := 3 ;
5908: LD_ADDR_OWVAR 20
5912: PUSH
5913: LD_INT 3
5915: ST_TO_ADDR
// uc_nation := 3 ;
5916: LD_ADDR_OWVAR 21
5920: PUSH
5921: LD_INT 3
5923: ST_TO_ADDR
// for i = 1 to russian_force do
5924: LD_ADDR_VAR 0 2
5928: PUSH
5929: DOUBLE
5930: LD_INT 1
5932: DEC
5933: ST_TO_ADDR
5934: LD_EXP 23
5938: PUSH
5939: FOR_TO
5940: IFFALSE 6019
// begin vc_chassis := ru_heavy_tracked ;
5942: LD_ADDR_OWVAR 37
5946: PUSH
5947: LD_INT 24
5949: ST_TO_ADDR
// vc_engine := engine_siberite ;
5950: LD_ADDR_OWVAR 39
5954: PUSH
5955: LD_INT 3
5957: ST_TO_ADDR
// vc_control := control_computer ;
5958: LD_ADDR_OWVAR 38
5962: PUSH
5963: LD_INT 3
5965: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
5966: LD_ADDR_OWVAR 40
5970: PUSH
5971: LD_EXP 20
5975: PUSH
5976: LD_INT 1
5978: PPUSH
5979: LD_EXP 20
5983: PPUSH
5984: CALL_OW 12
5988: ARRAY
5989: ST_TO_ADDR
// un := CreateVehicle ;
5990: LD_ADDR_VAR 0 4
5994: PUSH
5995: CALL_OW 45
5999: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6000: LD_VAR 0 4
6004: PPUSH
6005: LD_VAR 0 6
6009: PPUSH
6010: LD_INT 0
6012: PPUSH
6013: CALL_OW 49
// end ;
6017: GO 5939
6019: POP
6020: POP
// end ; 91 :
6021: GO 6607
6023: LD_INT 91
6025: DOUBLE
6026: EQUAL
6027: IFTRUE 6031
6029: GO 6169
6031: POP
// begin uc_side := 8 ;
6032: LD_ADDR_OWVAR 20
6036: PUSH
6037: LD_INT 8
6039: ST_TO_ADDR
// uc_nation := 1 ;
6040: LD_ADDR_OWVAR 21
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_INT 5
6060: PUSH
6061: LD_INT 4
6063: PUSH
6064: LD_INT 3
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_EXP 2
6076: ARRAY
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6165
// begin vc_chassis := us_heavy_tracked ;
6081: LD_ADDR_OWVAR 37
6085: PUSH
6086: LD_INT 4
6088: ST_TO_ADDR
// vc_engine := engine_siberite ;
6089: LD_ADDR_OWVAR 39
6093: PUSH
6094: LD_INT 3
6096: ST_TO_ADDR
// vc_control := control_computer ;
6097: LD_ADDR_OWVAR 38
6101: PUSH
6102: LD_INT 3
6104: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6105: LD_ADDR_OWVAR 40
6109: PUSH
6110: LD_INT 5
6112: PUSH
6113: LD_INT 6
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 1
6122: PPUSH
6123: LD_INT 2
6125: PPUSH
6126: CALL_OW 12
6130: ARRAY
6131: ST_TO_ADDR
// un := CreateVehicle ;
6132: LD_ADDR_VAR 0 4
6136: PUSH
6137: CALL_OW 45
6141: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6142: LD_VAR 0 4
6146: PPUSH
6147: LD_EXP 15
6151: PUSH
6152: LD_INT 1
6154: ARRAY
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// end ;
6163: GO 6078
6165: POP
6166: POP
// end ; 92 :
6167: GO 6607
6169: LD_INT 92
6171: DOUBLE
6172: EQUAL
6173: IFTRUE 6177
6175: GO 6482
6177: POP
// begin uc_side := 5 ;
6178: LD_ADDR_OWVAR 20
6182: PUSH
6183: LD_INT 5
6185: ST_TO_ADDR
// uc_nation := 2 ;
6186: LD_ADDR_OWVAR 21
6190: PUSH
6191: LD_INT 2
6193: ST_TO_ADDR
// filter := [ ] ;
6194: LD_ADDR_VAR 0 3
6198: PUSH
6199: EMPTY
6200: ST_TO_ADDR
// hc_sex := sex_male ;
6201: LD_ADDR_OWVAR 27
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// hc_gallery :=  ;
6209: LD_ADDR_OWVAR 33
6213: PUSH
6214: LD_STRING 
6216: ST_TO_ADDR
// hc_class := 1 ;
6217: LD_ADDR_OWVAR 28
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// hc_name :=  ;
6225: LD_ADDR_OWVAR 26
6229: PUSH
6230: LD_STRING 
6232: ST_TO_ADDR
// un := CreateHuman ;
6233: LD_ADDR_VAR 0 4
6237: PUSH
6238: CALL_OW 44
6242: ST_TO_ADDR
// filter := filter ^ un ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: LD_VAR 0 3
6252: PUSH
6253: LD_VAR 0 4
6257: ADD
6258: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6259: LD_ADDR_VAR 0 2
6263: PUSH
6264: DOUBLE
6265: LD_INT 1
6267: DEC
6268: ST_TO_ADDR
6269: LD_INT 4
6271: PUSH
6272: LD_INT 3
6274: PUSH
6275: LD_INT 2
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_EXP 2
6287: ARRAY
6288: PUSH
6289: FOR_TO
6290: IFFALSE 6328
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6292: LD_ADDR_VAR 0 4
6296: PUSH
6297: LD_INT 1
6299: PPUSH
6300: LD_EXP 52
6304: PPUSH
6305: CALL 7221 0 2
6309: ST_TO_ADDR
// filter := filter ^ un ;
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_VAR 0 3
6319: PUSH
6320: LD_VAR 0 4
6324: ADD
6325: ST_TO_ADDR
// end ;
6326: GO 6289
6328: POP
6329: POP
// DialogueOn ;
6330: CALL_OW 6
// SayRadio ( filter [ 1 ] , DS-DF-1 ) ;
6334: LD_VAR 0 3
6338: PUSH
6339: LD_INT 1
6341: ARRAY
6342: PPUSH
6343: LD_STRING DS-DF-1
6345: PPUSH
6346: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6350: LD_STRING DS-dezert
6352: PPUSH
6353: CALL_OW 97
6357: PUSH
6358: LD_INT 1
6360: DOUBLE
6361: EQUAL
6362: IFTRUE 6366
6364: GO 6381
6366: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6367: LD_EXP 51
6371: PPUSH
6372: LD_STRING DS-DC-dis
6374: PPUSH
6375: CALL_OW 88
6379: GO 6476
6381: LD_INT 2
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6475
6389: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6390: LD_EXP 51
6394: PPUSH
6395: LD_STRING DS-DC-acp
6397: PPUSH
6398: CALL_OW 88
// for i = 1 to filter do
6402: LD_ADDR_VAR 0 2
6406: PUSH
6407: DOUBLE
6408: LD_INT 1
6410: DEC
6411: ST_TO_ADDR
6412: LD_VAR 0 3
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6471
// begin SetSide ( filter [ i ] , 8 ) ;
6420: LD_VAR 0 3
6424: PUSH
6425: LD_VAR 0 2
6429: ARRAY
6430: PPUSH
6431: LD_INT 8
6433: PPUSH
6434: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6438: LD_VAR 0 3
6442: PUSH
6443: LD_VAR 0 2
6447: ARRAY
6448: PPUSH
6449: LD_INT 4
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6459: LD_INT 111
6461: PPUSH
6462: LD_INT 121
6464: PPUSH
6465: CALL_OW 86
// end ;
6469: GO 6417
6471: POP
6472: POP
// end ; end ;
6473: GO 6476
6475: POP
// DialogueOff ;
6476: CALL_OW 7
// end ; 101 :
6480: GO 6607
6482: LD_INT 101
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6542
6490: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6491: LD_INT 3
6493: PPUSH
6494: LD_INT 5
6496: PPUSH
6497: CALL_OW 12
6501: PPUSH
6502: LD_INT 9
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 55
// Wait ( 0 0$11 ) ;
6512: LD_INT 385
6514: PPUSH
6515: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6519: LD_INT 3
6521: PPUSH
6522: LD_INT 5
6524: PPUSH
6525: CALL_OW 12
6529: PPUSH
6530: LD_INT 9
6532: PPUSH
6533: LD_INT 1
6535: PPUSH
6536: CALL_OW 55
// end ; 200 :
6540: GO 6607
6542: LD_INT 200
6544: DOUBLE
6545: EQUAL
6546: IFTRUE 6550
6548: GO 6606
6550: POP
// begin Say ( Leopold , DS-end ) ;
6551: LD_EXP 7
6555: PPUSH
6556: LD_STRING DS-end
6558: PPUSH
6559: CALL_OW 88
// AddMedal ( dsmed1 , 1 ) ;
6563: LD_STRING dsmed1
6565: PPUSH
6566: LD_INT 1
6568: PPUSH
6569: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6573: LD_STRING dsmed1
6575: PPUSH
6576: LD_INT 1
6578: PPUSH
6579: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6583: LD_STRING dsmed1
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: CALL_OW 101
// GiveMedals ( MAIN ) ;
6593: LD_STRING MAIN
6595: PPUSH
6596: CALL_OW 102
// YouWin ;
6600: CALL_OW 103
// end ; end ;
6604: GO 6607
6606: POP
// end ;
6607: PPOPN 6
6609: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6610: LD_VAR 0 1
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: IN
6644: IFFALSE 6769
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6646: LD_INT 105
6648: PPUSH
6649: LD_INT 210
6651: PPUSH
6652: CALL_OW 12
6656: PPUSH
6657: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL_OW 250
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 251
6680: PPUSH
6681: LD_INT 3
6683: PPUSH
6684: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6688: LD_VAR 0 1
6692: PPUSH
6693: CALL_OW 250
6697: PPUSH
6698: LD_VAR 0 1
6702: PPUSH
6703: CALL_OW 251
6707: PPUSH
6708: LD_INT 3
6710: PPUSH
6711: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6715: LD_VAR 0 1
6719: PPUSH
6720: CALL_OW 250
6724: PPUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 251
6734: PPUSH
6735: LD_INT 3
6737: PPUSH
6738: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 250
6751: PPUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL_OW 251
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 453
// end ; end ;
6769: PPOPN 1
6771: END
// on UnitDestroyed ( un ) do begin if un = fort then
6772: LD_VAR 0 1
6776: PUSH
6777: LD_INT 23
6779: EQUAL
6780: IFFALSE 6790
// fort_destroyed := true ;
6782: LD_ADDR_EXP 34
6786: PUSH
6787: LD_INT 1
6789: ST_TO_ADDR
// if un = l_cmndr then
6790: LD_VAR 0 1
6794: PUSH
6795: LD_EXP 51
6799: EQUAL
6800: IFFALSE 6810
// hero_died := true ;
6802: LD_ADDR_EXP 35
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , ar_bio_bomb ] ) then
6810: LD_VAR 0 1
6814: PUSH
6815: LD_INT 34
6817: PUSH
6818: LD_EXP 17
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: IN
6832: IFFALSE 6870
// begin if Prob ( 70 ) then
6834: LD_INT 70
6836: PPUSH
6837: CALL_OW 13
6841: IFFALSE 6870
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
6843: LD_VAR 0 1
6847: PPUSH
6848: CALL_OW 250
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 251
6862: PPUSH
6863: LD_INT 10
6865: PPUSH
6866: CALL_OW 495
// end ; end ; end_of_file
6870: PPOPN 1
6872: END
// export function RefreshTime ( time , bool ) ; begin
6873: LD_INT 0
6875: PPUSH
// if bool then
6876: LD_VAR 0 2
6880: IFFALSE 6898
// time := time + 0 0$01 else
6882: LD_ADDR_VAR 0 1
6886: PUSH
6887: LD_VAR 0 1
6891: PUSH
6892: LD_INT 35
6894: PLUS
6895: ST_TO_ADDR
6896: GO 6912
// time := time - 0 0$01 ;
6898: LD_ADDR_VAR 0 1
6902: PUSH
6903: LD_VAR 0 1
6907: PUSH
6908: LD_INT 35
6910: MINUS
6911: ST_TO_ADDR
// result := time ;
6912: LD_ADDR_VAR 0 3
6916: PUSH
6917: LD_VAR 0 1
6921: ST_TO_ADDR
// end ;
6922: LD_VAR 0 3
6926: RET
// export function MineExist ( side ) ; begin
6927: LD_INT 0
6929: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
6930: LD_INT 22
6932: PUSH
6933: LD_VAR 0 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 30
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: PUSH
6961: LD_INT 0
6963: GREATER
6964: IFFALSE 6976
// result := true else
6966: LD_ADDR_VAR 0 2
6970: PUSH
6971: LD_INT 1
6973: ST_TO_ADDR
6974: GO 6984
// result := false ;
6976: LD_ADDR_VAR 0 2
6980: PUSH
6981: LD_INT 0
6983: ST_TO_ADDR
// end ;
6984: LD_VAR 0 2
6988: RET
// export function FacExist ( side ) ; begin
6989: LD_INT 0
6991: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_INT 22
6999: PUSH
7000: LD_VAR 0 1
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 30
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PPUSH
7023: CALL_OW 69
7027: PUSH
7028: LD_INT 0
7030: GREATER
7031: ST_TO_ADDR
// end ;
7032: LD_VAR 0 2
7036: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7043: LD_ADDR_VAR 0 4
7047: PUSH
7048: LD_INT 22
7050: PUSH
7051: LD_VAR 0 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 33
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 50
7072: PUSH
7073: EMPTY
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7086: LD_ADDR_VAR 0 5
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_VAR 0 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 34
7105: PUSH
7106: LD_INT 31
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PPUSH
7117: CALL_OW 69
7121: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7122: LD_VAR 0 5
7126: PUSH
7127: LD_INT 0
7129: GREATER
7130: PUSH
7131: LD_VAR 0 4
7135: PUSH
7136: LD_INT 0
7138: GREATER
7139: AND
7140: IFFALSE 7216
// for i = 1 to filter do
7142: LD_ADDR_VAR 0 3
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_VAR 0 4
7156: PUSH
7157: FOR_TO
7158: IFFALSE 7214
// if not IsControledBy ( filter [ i ] ) then
7160: LD_VAR 0 4
7164: PUSH
7165: LD_VAR 0 3
7169: ARRAY
7170: PPUSH
7171: CALL_OW 312
7175: NOT
7176: IFFALSE 7212
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7178: LD_VAR 0 4
7182: PUSH
7183: LD_VAR 0 3
7187: ARRAY
7188: PPUSH
7189: LD_VAR 0 5
7193: PUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_VAR 0 5
7201: PPUSH
7202: CALL_OW 12
7206: ARRAY
7207: PPUSH
7208: CALL_OW 135
7212: GO 7157
7214: POP
7215: POP
// end ;
7216: LD_VAR 0 2
7220: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7221: LD_INT 0
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
// hc_class := clas ;
7229: LD_ADDR_OWVAR 28
7233: PUSH
7234: LD_VAR 0 1
7238: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_INT 1
7251: NEG
7252: PPUSH
7253: LD_INT 1
7255: PPUSH
7256: CALL_OW 12
7260: PLUS
7261: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7262: LD_ADDR_VAR 0 5
7266: PUSH
7267: LD_VAR 0 2
7271: PUSH
7272: LD_INT 1
7274: NEG
7275: PPUSH
7276: LD_INT 1
7278: PPUSH
7279: CALL_OW 12
7283: PLUS
7284: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7285: LD_ADDR_VAR 0 6
7289: PUSH
7290: LD_VAR 0 2
7294: PUSH
7295: LD_INT 1
7297: NEG
7298: PPUSH
7299: LD_INT 1
7301: PPUSH
7302: CALL_OW 12
7306: PLUS
7307: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7308: LD_ADDR_VAR 0 7
7312: PUSH
7313: LD_VAR 0 2
7317: PUSH
7318: LD_INT 1
7320: NEG
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 12
7329: PLUS
7330: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7331: LD_VAR 0 1
7335: PUSH
7336: LD_INT 1
7338: EQUAL
7339: PUSH
7340: LD_VAR 0 1
7344: PUSH
7345: LD_INT 9
7347: EQUAL
7348: OR
7349: PUSH
7350: LD_VAR 0 1
7354: PUSH
7355: LD_INT 5
7357: EQUAL
7358: OR
7359: PUSH
7360: LD_VAR 0 1
7364: PUSH
7365: LD_INT 8
7367: EQUAL
7368: OR
7369: IFFALSE 7394
// bonus := [ 2 , 0 , 0 , 0 ] ;
7371: LD_ADDR_VAR 0 8
7375: PUSH
7376: LD_INT 2
7378: PUSH
7379: LD_INT 0
7381: PUSH
7382: LD_INT 0
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: ST_TO_ADDR
// if clas = 2 then
7394: LD_VAR 0 1
7398: PUSH
7399: LD_INT 2
7401: EQUAL
7402: IFFALSE 7427
// bonus := [ 0 , 2 , 0 , 0 ] ;
7404: LD_ADDR_VAR 0 8
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: LD_INT 2
7414: PUSH
7415: LD_INT 0
7417: PUSH
7418: LD_INT 0
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// if clas = 3 then
7427: LD_VAR 0 1
7431: PUSH
7432: LD_INT 3
7434: EQUAL
7435: IFFALSE 7460
// bonus := [ 0 , 0 , 2 , 0 ] ;
7437: LD_ADDR_VAR 0 8
7441: PUSH
7442: LD_INT 0
7444: PUSH
7445: LD_INT 0
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: ST_TO_ADDR
// if clas = 4 then
7460: LD_VAR 0 1
7464: PUSH
7465: LD_INT 4
7467: EQUAL
7468: IFFALSE 7493
// bonus := [ 0 , 0 , 0 , 2 ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: LD_INT 0
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7493: LD_VAR 0 1
7497: PUSH
7498: LD_INT 4
7500: GREATER
7501: PUSH
7502: LD_VAR 0 1
7506: PUSH
7507: LD_INT 9
7509: NONEQUAL
7510: AND
7511: PUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_INT 5
7519: NONEQUAL
7520: AND
7521: PUSH
7522: LD_VAR 0 1
7526: PUSH
7527: LD_INT 8
7529: NONEQUAL
7530: AND
7531: IFFALSE 7556
// bonus := [ 0 , 0 , 0 , 0 ] ;
7533: LD_ADDR_VAR 0 8
7537: PUSH
7538: LD_INT 0
7540: PUSH
7541: LD_INT 0
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7556: LD_ADDR_OWVAR 30
7560: PUSH
7561: LD_INT 0
7563: PPUSH
7564: LD_INT 2
7566: PPUSH
7567: CALL_OW 12
7571: PUSH
7572: LD_INT 0
7574: PPUSH
7575: LD_INT 2
7577: PPUSH
7578: CALL_OW 12
7582: PUSH
7583: LD_INT 0
7585: PPUSH
7586: LD_INT 2
7588: PPUSH
7589: CALL_OW 12
7593: PUSH
7594: LD_INT 0
7596: PPUSH
7597: LD_INT 2
7599: PPUSH
7600: CALL_OW 12
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7611: LD_ADDR_OWVAR 31
7615: PUSH
7616: LD_VAR 0 4
7620: PUSH
7621: LD_VAR 0 8
7625: PUSH
7626: LD_INT 1
7628: ARRAY
7629: PLUS
7630: PUSH
7631: LD_VAR 0 5
7635: PUSH
7636: LD_VAR 0 8
7640: PUSH
7641: LD_INT 2
7643: ARRAY
7644: PLUS
7645: PUSH
7646: LD_VAR 0 6
7650: PUSH
7651: LD_VAR 0 8
7655: PUSH
7656: LD_INT 3
7658: ARRAY
7659: PLUS
7660: PUSH
7661: LD_VAR 0 7
7665: PUSH
7666: LD_VAR 0 8
7670: PUSH
7671: LD_INT 4
7673: ARRAY
7674: PLUS
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7682: LD_ADDR_OWVAR 27
7686: PUSH
7687: LD_INT 1
7689: PPUSH
7690: LD_INT 2
7692: PPUSH
7693: CALL_OW 12
7697: ST_TO_ADDR
// hc_gallery :=  ;
7698: LD_ADDR_OWVAR 33
7702: PUSH
7703: LD_STRING 
7705: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7706: LD_ADDR_OWVAR 29
7710: PUSH
7711: LD_INT 8
7713: PPUSH
7714: LD_INT 12
7716: PPUSH
7717: CALL_OW 12
7721: PUSH
7722: LD_INT 9
7724: PPUSH
7725: LD_INT 11
7727: PPUSH
7728: CALL_OW 12
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// hc_name :=  ;
7737: LD_ADDR_OWVAR 26
7741: PUSH
7742: LD_STRING 
7744: ST_TO_ADDR
// result := CreateHuman ;
7745: LD_ADDR_VAR 0 3
7749: PUSH
7750: CALL_OW 44
7754: ST_TO_ADDR
// end ;
7755: LD_VAR 0 3
7759: RET
// export function GetSpeed ( unit ) ; begin
7760: LD_INT 0
7762: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7763: LD_ADDR_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 464
7777: PUSH
7778: LD_INT 1
7780: ARRAY
7781: ST_TO_ADDR
// end ;
7782: LD_VAR 0 2
7786: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
7791: PPUSH
7792: PPUSH
7793: PPUSH
7794: PPUSH
// uc_nation = nation_nature ;
7795: LD_ADDR_OWVAR 21
7799: PUSH
7800: LD_INT 0
7802: ST_TO_ADDR
// uc_side = 0 ;
7803: LD_ADDR_OWVAR 20
7807: PUSH
7808: LD_INT 0
7810: ST_TO_ADDR
// l = 0 ;
7811: LD_ADDR_VAR 0 7
7815: PUSH
7816: LD_INT 0
7818: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7819: LD_ADDR_OWVAR 24
7823: PUSH
7824: LD_INT 0
7826: PPUSH
7827: LD_INT 5
7829: PPUSH
7830: CALL_OW 12
7834: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7835: LD_ADDR_OWVAR 35
7839: PUSH
7840: LD_INT 5
7842: NEG
7843: PPUSH
7844: LD_INT 0
7846: PPUSH
7847: CALL_OW 12
7851: ST_TO_ADDR
// hc_gallery =  ;
7852: LD_ADDR_OWVAR 33
7856: PUSH
7857: LD_STRING 
7859: ST_TO_ADDR
// hc_class = class_apeman ;
7860: LD_ADDR_OWVAR 28
7864: PUSH
7865: LD_INT 12
7867: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7868: LD_ADDR_OWVAR 29
7872: PUSH
7873: LD_INT 11
7875: PPUSH
7876: LD_INT 13
7878: PPUSH
7879: CALL_OW 12
7883: PUSH
7884: LD_INT 10
7886: PPUSH
7887: LD_INT 11
7889: PPUSH
7890: CALL_OW 12
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: ST_TO_ADDR
// hc_sex = sex_male ;
7899: LD_ADDR_OWVAR 27
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7907: LD_ADDR_OWVAR 31
7911: PUSH
7912: LD_INT 0
7914: PPUSH
7915: LD_INT 2
7917: PPUSH
7918: CALL_OW 12
7922: PUSH
7923: LD_INT 0
7925: PUSH
7926: LD_INT 0
7928: PUSH
7929: LD_INT 0
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: ST_TO_ADDR
// apeman = CreateHuman ;
7938: LD_ADDR_VAR 0 8
7942: PUSH
7943: CALL_OW 44
7947: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7948: LD_VAR 0 8
7952: PPUSH
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_INT 0
7960: PPUSH
7961: CALL_OW 49
// l = l + 1 ;
7965: LD_ADDR_VAR 0 7
7969: PUSH
7970: LD_VAR 0 7
7974: PUSH
7975: LD_INT 1
7977: PLUS
7978: ST_TO_ADDR
// end until l = num1 ;
7979: LD_VAR 0 7
7983: PUSH
7984: LD_VAR 0 2
7988: EQUAL
7989: IFFALSE 7819
// l = 0 ;
7991: LD_ADDR_VAR 0 7
7995: PUSH
7996: LD_INT 0
7998: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7999: LD_ADDR_OWVAR 35
8003: PUSH
8004: LD_INT 0
8006: PPUSH
8007: LD_INT 25
8009: PPUSH
8010: CALL_OW 12
8014: ST_TO_ADDR
// hc_class = class_tiger ;
8015: LD_ADDR_OWVAR 28
8019: PUSH
8020: LD_INT 14
8022: ST_TO_ADDR
// hc_sex = sex_male ;
8023: LD_ADDR_OWVAR 27
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// hc_gallery = sandnature ;
8031: LD_ADDR_OWVAR 33
8035: PUSH
8036: LD_STRING sandnature
8038: ST_TO_ADDR
// hc_face_number = 3 ;
8039: LD_ADDR_OWVAR 34
8043: PUSH
8044: LD_INT 3
8046: ST_TO_ADDR
// tiger = CreateHuman ;
8047: LD_ADDR_VAR 0 9
8051: PUSH
8052: CALL_OW 44
8056: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8057: LD_VAR 0 9
8061: PPUSH
8062: LD_VAR 0 1
8066: PPUSH
8067: LD_INT 0
8069: PPUSH
8070: CALL_OW 49
// l = l + 1 ;
8074: LD_ADDR_VAR 0 7
8078: PUSH
8079: LD_VAR 0 7
8083: PUSH
8084: LD_INT 1
8086: PLUS
8087: ST_TO_ADDR
// end until l = num2 ;
8088: LD_VAR 0 7
8092: PUSH
8093: LD_VAR 0 3
8097: EQUAL
8098: IFFALSE 7999
// l = 0 ;
8100: LD_ADDR_VAR 0 7
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8108: LD_ADDR_OWVAR 28
8112: PUSH
8113: LD_INT 18
8115: ST_TO_ADDR
// hc_gallery = sandnature ;
8116: LD_ADDR_OWVAR 33
8120: PUSH
8121: LD_STRING sandnature
8123: ST_TO_ADDR
// hc_face_number = 1 ;
8124: LD_ADDR_OWVAR 34
8128: PUSH
8129: LD_INT 1
8131: ST_TO_ADDR
// bird = CreateHuman ;
8132: LD_ADDR_VAR 0 10
8136: PUSH
8137: CALL_OW 44
8141: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8142: LD_VAR 0 10
8146: PPUSH
8147: LD_INT 0
8149: PPUSH
8150: CALL_OW 51
// l = l + 1 ;
8154: LD_ADDR_VAR 0 7
8158: PUSH
8159: LD_VAR 0 7
8163: PUSH
8164: LD_INT 1
8166: PLUS
8167: ST_TO_ADDR
// end until l = num3 ;
8168: LD_VAR 0 7
8172: PUSH
8173: LD_VAR 0 4
8177: EQUAL
8178: IFFALSE 8108
// l = 0 ;
8180: LD_ADDR_VAR 0 7
8184: PUSH
8185: LD_INT 0
8187: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8188: LD_ADDR_OWVAR 28
8192: PUSH
8193: LD_INT 21
8195: ST_TO_ADDR
// hc_gallery = sandnature ;
8196: LD_ADDR_OWVAR 33
8200: PUSH
8201: LD_STRING sandnature
8203: ST_TO_ADDR
// hc_face_number = 5 ;
8204: LD_ADDR_OWVAR 34
8208: PUSH
8209: LD_INT 5
8211: ST_TO_ADDR
// horse := CreateHuman ;
8212: LD_ADDR_VAR 0 11
8216: PUSH
8217: CALL_OW 44
8221: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8222: LD_VAR 0 11
8226: PPUSH
8227: LD_VAR 0 1
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 49
// l = l + 1 ;
8239: LD_ADDR_VAR 0 7
8243: PUSH
8244: LD_VAR 0 7
8248: PUSH
8249: LD_INT 1
8251: PLUS
8252: ST_TO_ADDR
// end until l = num4 ;
8253: LD_VAR 0 7
8257: PUSH
8258: LD_VAR 0 5
8262: EQUAL
8263: IFFALSE 8188
// end ;
8265: LD_VAR 0 6
8269: RET
// export function PrepareComm ; begin
8270: LD_INT 0
8272: PPUSH
// uc_side := 1 ;
8273: LD_ADDR_OWVAR 20
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// uc_nation := 1 ;
8281: LD_ADDR_OWVAR 21
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// hc_gallery :=  ;
8289: LD_ADDR_OWVAR 33
8293: PUSH
8294: LD_STRING 
8296: ST_TO_ADDR
// hc_name :=  ;
8297: LD_ADDR_OWVAR 26
8301: PUSH
8302: LD_STRING 
8304: ST_TO_ADDR
// hc_class := 1 ;
8305: LD_ADDR_OWVAR 28
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// hc_sex := sex_male ;
8313: LD_ADDR_OWVAR 27
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// am_comander := CreateHuman ;
8321: LD_ADDR_EXP 48
8325: PUSH
8326: CALL_OW 44
8330: ST_TO_ADDR
// uc_side := 3 ;
8331: LD_ADDR_OWVAR 20
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// uc_nation := 3 ;
8339: LD_ADDR_OWVAR 21
8343: PUSH
8344: LD_INT 3
8346: ST_TO_ADDR
// ru_comander := CreateHuman ;
8347: LD_ADDR_EXP 49
8351: PUSH
8352: CALL_OW 44
8356: ST_TO_ADDR
// uc_side := 2 ;
8357: LD_ADDR_OWVAR 20
8361: PUSH
8362: LD_INT 2
8364: ST_TO_ADDR
// uc_nation := 2 ;
8365: LD_ADDR_OWVAR 21
8369: PUSH
8370: LD_INT 2
8372: ST_TO_ADDR
// hc_name := Heike Steyer ;
8373: LD_ADDR_OWVAR 26
8377: PUSH
8378: LD_STRING Heike Steyer
8380: ST_TO_ADDR
// hc_sex := sex_female ;
8381: LD_ADDR_OWVAR 27
8385: PUSH
8386: LD_INT 2
8388: ST_TO_ADDR
// hc_gallery := sandar ;
8389: LD_ADDR_OWVAR 33
8393: PUSH
8394: LD_STRING sandar
8396: ST_TO_ADDR
// hc_face_number := 14 ;
8397: LD_ADDR_OWVAR 34
8401: PUSH
8402: LD_INT 14
8404: ST_TO_ADDR
// ar_comander := CreateHuman ;
8405: LD_ADDR_EXP 50
8409: PUSH
8410: CALL_OW 44
8414: ST_TO_ADDR
// end ;
8415: LD_VAR 0 1
8419: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8420: LD_INT 0
8422: PPUSH
8423: PPUSH
8424: PPUSH
// list := [ ] ;
8425: LD_ADDR_VAR 0 4
8429: PUSH
8430: EMPTY
8431: ST_TO_ADDR
// for i = 1 to filter do
8432: LD_ADDR_VAR 0 5
8436: PUSH
8437: DOUBLE
8438: LD_INT 1
8440: DEC
8441: ST_TO_ADDR
8442: LD_VAR 0 1
8446: PUSH
8447: FOR_TO
8448: IFFALSE 8497
// if GetSpeed ( filter [ i ] ) < speed then
8450: LD_VAR 0 1
8454: PUSH
8455: LD_VAR 0 5
8459: ARRAY
8460: PPUSH
8461: CALL 7760 0 1
8465: PUSH
8466: LD_VAR 0 2
8470: LESS
8471: IFFALSE 8495
// list := list ^ filter [ i ] ;
8473: LD_ADDR_VAR 0 4
8477: PUSH
8478: LD_VAR 0 4
8482: PUSH
8483: LD_VAR 0 1
8487: PUSH
8488: LD_VAR 0 5
8492: ARRAY
8493: ADD
8494: ST_TO_ADDR
8495: GO 8447
8497: POP
8498: POP
// result := list ;
8499: LD_ADDR_VAR 0 3
8503: PUSH
8504: LD_VAR 0 4
8508: ST_TO_ADDR
// end ;
8509: LD_VAR 0 3
8513: RET
