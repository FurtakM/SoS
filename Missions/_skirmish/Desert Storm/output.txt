// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 19784 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 19882 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 19890 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ru_radar := 98 ;
8608: LD_ADDR_EXP 52
8612: PUSH
8613: LD_INT 98
8615: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8616: LD_ADDR_EXP 53
8620: PUSH
8621: LD_INT 89
8623: ST_TO_ADDR
// us_hack := 99 ;
8624: LD_ADDR_EXP 54
8628: PUSH
8629: LD_INT 99
8631: ST_TO_ADDR
// us_artillery := 97 ;
8632: LD_ADDR_EXP 55
8636: PUSH
8637: LD_INT 97
8639: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8640: LD_ADDR_EXP 56
8644: PUSH
8645: LD_INT 91
8647: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
8648: LD_ADDR_EXP 57
8652: PUSH
8653: LD_INT 92
8655: ST_TO_ADDR
// tech_Artillery := 80 ;
8656: LD_ADDR_EXP 58
8660: PUSH
8661: LD_INT 80
8663: ST_TO_ADDR
// tech_RadMat := 81 ;
8664: LD_ADDR_EXP 59
8668: PUSH
8669: LD_INT 81
8671: ST_TO_ADDR
// tech_BasicTools := 82 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 82
8679: ST_TO_ADDR
// tech_Cargo := 83 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 83
8687: ST_TO_ADDR
// tech_Track := 84 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 84
8695: ST_TO_ADDR
// tech_Crane := 85 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 85
8703: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 86
8711: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 87
8719: ST_TO_ADDR
// end ;
8720: LD_VAR 0 1
8724: RET
// every 1 do
8725: GO 8727
8727: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8728: CALL 8605 0 0
8732: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8733: GO 8735
8735: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8736: LD_STRING initStreamRollete();
8738: PPUSH
8739: CALL_OW 559
// InitStreamMode ;
8743: CALL 8752 0 0
// DefineStreamItems ( ) ;
8747: CALL 9192 0 0
// end ;
8751: END
// function InitStreamMode ; begin
8752: LD_INT 0
8754: PPUSH
// streamModeActive := false ;
8755: LD_ADDR_EXP 66
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// normalCounter := 36 ;
8763: LD_ADDR_EXP 67
8767: PUSH
8768: LD_INT 36
8770: ST_TO_ADDR
// hardcoreCounter := 16 ;
8771: LD_ADDR_EXP 68
8775: PUSH
8776: LD_INT 16
8778: ST_TO_ADDR
// sRocket := false ;
8779: LD_ADDR_EXP 71
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sSpeed := false ;
8787: LD_ADDR_EXP 70
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// sEngine := false ;
8795: LD_ADDR_EXP 72
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// sSpec := false ;
8803: LD_ADDR_EXP 69
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// sLevel := false ;
8811: LD_ADDR_EXP 73
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// sArmoury := false ;
8819: LD_ADDR_EXP 74
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// sRadar := false ;
8827: LD_ADDR_EXP 75
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// sBunker := false ;
8835: LD_ADDR_EXP 76
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// sHack := false ;
8843: LD_ADDR_EXP 77
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// sFire := false ;
8851: LD_ADDR_EXP 78
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// sRefresh := false ;
8859: LD_ADDR_EXP 79
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// sExp := false ;
8867: LD_ADDR_EXP 80
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// sDepot := false ;
8875: LD_ADDR_EXP 81
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// sFlag := false ;
8883: LD_ADDR_EXP 82
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// sKamikadze := false ;
8891: LD_ADDR_EXP 90
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// sTroll := false ;
8899: LD_ADDR_EXP 91
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// sSlow := false ;
8907: LD_ADDR_EXP 92
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// sLack := false ;
8915: LD_ADDR_EXP 93
8919: PUSH
8920: LD_INT 0
8922: ST_TO_ADDR
// sTank := false ;
8923: LD_ADDR_EXP 95
8927: PUSH
8928: LD_INT 0
8930: ST_TO_ADDR
// sRemote := false ;
8931: LD_ADDR_EXP 96
8935: PUSH
8936: LD_INT 0
8938: ST_TO_ADDR
// sPowell := false ;
8939: LD_ADDR_EXP 97
8943: PUSH
8944: LD_INT 0
8946: ST_TO_ADDR
// sTeleport := false ;
8947: LD_ADDR_EXP 100
8951: PUSH
8952: LD_INT 0
8954: ST_TO_ADDR
// sOilTower := false ;
8955: LD_ADDR_EXP 102
8959: PUSH
8960: LD_INT 0
8962: ST_TO_ADDR
// sShovel := false ;
8963: LD_ADDR_EXP 103
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// sSheik := false ;
8971: LD_ADDR_EXP 104
8975: PUSH
8976: LD_INT 0
8978: ST_TO_ADDR
// sEarthquake := false ;
8979: LD_ADDR_EXP 106
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// sAI := false ;
8987: LD_ADDR_EXP 107
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// sCargo := false ;
8995: LD_ADDR_EXP 110
8999: PUSH
9000: LD_INT 0
9002: ST_TO_ADDR
// sDLaser := false ;
9003: LD_ADDR_EXP 111
9007: PUSH
9008: LD_INT 0
9010: ST_TO_ADDR
// sExchange := false ;
9011: LD_ADDR_EXP 112
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// sFac := false ;
9019: LD_ADDR_EXP 113
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// sPower := false ;
9027: LD_ADDR_EXP 114
9031: PUSH
9032: LD_INT 0
9034: ST_TO_ADDR
// sRandom := false ;
9035: LD_ADDR_EXP 115
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// sShield := false ;
9043: LD_ADDR_EXP 116
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// sTime := false ;
9051: LD_ADDR_EXP 117
9055: PUSH
9056: LD_INT 0
9058: ST_TO_ADDR
// sTools := false ;
9059: LD_ADDR_EXP 118
9063: PUSH
9064: LD_INT 0
9066: ST_TO_ADDR
// sSold := false ;
9067: LD_ADDR_EXP 83
9071: PUSH
9072: LD_INT 0
9074: ST_TO_ADDR
// sDiff := false ;
9075: LD_ADDR_EXP 84
9079: PUSH
9080: LD_INT 0
9082: ST_TO_ADDR
// sFog := false ;
9083: LD_ADDR_EXP 87
9087: PUSH
9088: LD_INT 0
9090: ST_TO_ADDR
// sReset := false ;
9091: LD_ADDR_EXP 88
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// sSun := false ;
9099: LD_ADDR_EXP 89
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// sTiger := false ;
9107: LD_ADDR_EXP 85
9111: PUSH
9112: LD_INT 0
9114: ST_TO_ADDR
// sBomb := false ;
9115: LD_ADDR_EXP 86
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// sWound := false ;
9123: LD_ADDR_EXP 94
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sBetray := false ;
9131: LD_ADDR_EXP 98
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sContamin := false ;
9139: LD_ADDR_EXP 99
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sOil := false ;
9147: LD_ADDR_EXP 101
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sStu := false ;
9155: LD_ADDR_EXP 105
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sBazooka := false ;
9163: LD_ADDR_EXP 108
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sMortar := false ;
9171: LD_ADDR_EXP 109
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sRanger := false ;
9179: LD_ADDR_EXP 119
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// end ;
9187: LD_VAR 0 1
9191: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9192: LD_INT 0
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// result := [ ] ;
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: EMPTY
9205: ST_TO_ADDR
// if campaign_id = 1 then
9206: LD_OWVAR 69
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 12152
// begin case mission_number of 1 :
9216: LD_OWVAR 70
9220: PUSH
9221: LD_INT 1
9223: DOUBLE
9224: EQUAL
9225: IFTRUE 9229
9227: GO 9293
9229: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: LD_INT 4
9240: PUSH
9241: LD_INT 11
9243: PUSH
9244: LD_INT 12
9246: PUSH
9247: LD_INT 15
9249: PUSH
9250: LD_INT 16
9252: PUSH
9253: LD_INT 22
9255: PUSH
9256: LD_INT 23
9258: PUSH
9259: LD_INT 26
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 101
9275: PUSH
9276: LD_INT 102
9278: PUSH
9279: LD_INT 106
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: ST_TO_ADDR
9291: GO 12150
9293: LD_INT 2
9295: DOUBLE
9296: EQUAL
9297: IFTRUE 9301
9299: GO 9373
9301: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9302: LD_ADDR_VAR 0 1
9306: PUSH
9307: LD_INT 2
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 11
9315: PUSH
9316: LD_INT 12
9318: PUSH
9319: LD_INT 15
9321: PUSH
9322: LD_INT 16
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_INT 23
9330: PUSH
9331: LD_INT 26
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 101
9347: PUSH
9348: LD_INT 102
9350: PUSH
9351: LD_INT 105
9353: PUSH
9354: LD_INT 106
9356: PUSH
9357: LD_INT 108
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: ST_TO_ADDR
9371: GO 12150
9373: LD_INT 3
9375: DOUBLE
9376: EQUAL
9377: IFTRUE 9381
9379: GO 9457
9381: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9382: LD_ADDR_VAR 0 1
9386: PUSH
9387: LD_INT 2
9389: PUSH
9390: LD_INT 4
9392: PUSH
9393: LD_INT 5
9395: PUSH
9396: LD_INT 11
9398: PUSH
9399: LD_INT 12
9401: PUSH
9402: LD_INT 15
9404: PUSH
9405: LD_INT 16
9407: PUSH
9408: LD_INT 22
9410: PUSH
9411: LD_INT 26
9413: PUSH
9414: LD_INT 36
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 101
9431: PUSH
9432: LD_INT 102
9434: PUSH
9435: LD_INT 105
9437: PUSH
9438: LD_INT 106
9440: PUSH
9441: LD_INT 108
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: ST_TO_ADDR
9455: GO 12150
9457: LD_INT 4
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9549
9465: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9466: LD_ADDR_VAR 0 1
9470: PUSH
9471: LD_INT 2
9473: PUSH
9474: LD_INT 4
9476: PUSH
9477: LD_INT 5
9479: PUSH
9480: LD_INT 8
9482: PUSH
9483: LD_INT 11
9485: PUSH
9486: LD_INT 12
9488: PUSH
9489: LD_INT 15
9491: PUSH
9492: LD_INT 16
9494: PUSH
9495: LD_INT 22
9497: PUSH
9498: LD_INT 23
9500: PUSH
9501: LD_INT 26
9503: PUSH
9504: LD_INT 36
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 101
9523: PUSH
9524: LD_INT 102
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 108
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: ST_TO_ADDR
9547: GO 12150
9549: LD_INT 5
9551: DOUBLE
9552: EQUAL
9553: IFTRUE 9557
9555: GO 9657
9557: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9558: LD_ADDR_VAR 0 1
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 4
9568: PUSH
9569: LD_INT 5
9571: PUSH
9572: LD_INT 6
9574: PUSH
9575: LD_INT 8
9577: PUSH
9578: LD_INT 11
9580: PUSH
9581: LD_INT 12
9583: PUSH
9584: LD_INT 15
9586: PUSH
9587: LD_INT 16
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_INT 23
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 26
9601: PUSH
9602: LD_INT 36
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 101
9623: PUSH
9624: LD_INT 102
9626: PUSH
9627: LD_INT 105
9629: PUSH
9630: LD_INT 106
9632: PUSH
9633: LD_INT 108
9635: PUSH
9636: LD_INT 109
9638: PUSH
9639: LD_INT 112
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: ST_TO_ADDR
9655: GO 12150
9657: LD_INT 6
9659: DOUBLE
9660: EQUAL
9661: IFTRUE 9665
9663: GO 9785
9665: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9666: LD_ADDR_VAR 0 1
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: LD_INT 4
9676: PUSH
9677: LD_INT 5
9679: PUSH
9680: LD_INT 6
9682: PUSH
9683: LD_INT 8
9685: PUSH
9686: LD_INT 11
9688: PUSH
9689: LD_INT 12
9691: PUSH
9692: LD_INT 15
9694: PUSH
9695: LD_INT 16
9697: PUSH
9698: LD_INT 20
9700: PUSH
9701: LD_INT 21
9703: PUSH
9704: LD_INT 22
9706: PUSH
9707: LD_INT 23
9709: PUSH
9710: LD_INT 25
9712: PUSH
9713: LD_INT 26
9715: PUSH
9716: LD_INT 30
9718: PUSH
9719: LD_INT 31
9721: PUSH
9722: LD_INT 32
9724: PUSH
9725: LD_INT 36
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 101
9751: PUSH
9752: LD_INT 102
9754: PUSH
9755: LD_INT 105
9757: PUSH
9758: LD_INT 106
9760: PUSH
9761: LD_INT 108
9763: PUSH
9764: LD_INT 109
9766: PUSH
9767: LD_INT 112
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: ST_TO_ADDR
9783: GO 12150
9785: LD_INT 7
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9893
9793: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9794: LD_ADDR_VAR 0 1
9798: PUSH
9799: LD_INT 2
9801: PUSH
9802: LD_INT 4
9804: PUSH
9805: LD_INT 5
9807: PUSH
9808: LD_INT 7
9810: PUSH
9811: LD_INT 11
9813: PUSH
9814: LD_INT 12
9816: PUSH
9817: LD_INT 15
9819: PUSH
9820: LD_INT 16
9822: PUSH
9823: LD_INT 20
9825: PUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 22
9831: PUSH
9832: LD_INT 23
9834: PUSH
9835: LD_INT 25
9837: PUSH
9838: LD_INT 26
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 101
9859: PUSH
9860: LD_INT 102
9862: PUSH
9863: LD_INT 103
9865: PUSH
9866: LD_INT 105
9868: PUSH
9869: LD_INT 106
9871: PUSH
9872: LD_INT 108
9874: PUSH
9875: LD_INT 112
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: ST_TO_ADDR
9891: GO 12150
9893: LD_INT 8
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9901
9899: GO 10029
9901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9902: LD_ADDR_VAR 0 1
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 4
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: LD_INT 6
9918: PUSH
9919: LD_INT 7
9921: PUSH
9922: LD_INT 8
9924: PUSH
9925: LD_INT 11
9927: PUSH
9928: LD_INT 12
9930: PUSH
9931: LD_INT 15
9933: PUSH
9934: LD_INT 16
9936: PUSH
9937: LD_INT 20
9939: PUSH
9940: LD_INT 21
9942: PUSH
9943: LD_INT 22
9945: PUSH
9946: LD_INT 23
9948: PUSH
9949: LD_INT 25
9951: PUSH
9952: LD_INT 26
9954: PUSH
9955: LD_INT 30
9957: PUSH
9958: LD_INT 31
9960: PUSH
9961: LD_INT 32
9963: PUSH
9964: LD_INT 36
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 101
9991: PUSH
9992: LD_INT 102
9994: PUSH
9995: LD_INT 103
9997: PUSH
9998: LD_INT 105
10000: PUSH
10001: LD_INT 106
10003: PUSH
10004: LD_INT 108
10006: PUSH
10007: LD_INT 109
10009: PUSH
10010: LD_INT 112
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: ST_TO_ADDR
10027: GO 12150
10029: LD_INT 9
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10173
10037: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10038: LD_ADDR_VAR 0 1
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 4
10048: PUSH
10049: LD_INT 5
10051: PUSH
10052: LD_INT 6
10054: PUSH
10055: LD_INT 7
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: LD_INT 11
10063: PUSH
10064: LD_INT 12
10066: PUSH
10067: LD_INT 15
10069: PUSH
10070: LD_INT 16
10072: PUSH
10073: LD_INT 20
10075: PUSH
10076: LD_INT 21
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 23
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 26
10090: PUSH
10091: LD_INT 28
10093: PUSH
10094: LD_INT 30
10096: PUSH
10097: LD_INT 31
10099: PUSH
10100: LD_INT 32
10102: PUSH
10103: LD_INT 36
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 101
10131: PUSH
10132: LD_INT 102
10134: PUSH
10135: LD_INT 103
10137: PUSH
10138: LD_INT 105
10140: PUSH
10141: LD_INT 106
10143: PUSH
10144: LD_INT 108
10146: PUSH
10147: LD_INT 109
10149: PUSH
10150: LD_INT 112
10152: PUSH
10153: LD_INT 114
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: ST_TO_ADDR
10171: GO 12150
10173: LD_INT 10
10175: DOUBLE
10176: EQUAL
10177: IFTRUE 10181
10179: GO 10365
10181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10182: LD_ADDR_VAR 0 1
10186: PUSH
10187: LD_INT 2
10189: PUSH
10190: LD_INT 4
10192: PUSH
10193: LD_INT 5
10195: PUSH
10196: LD_INT 6
10198: PUSH
10199: LD_INT 7
10201: PUSH
10202: LD_INT 8
10204: PUSH
10205: LD_INT 9
10207: PUSH
10208: LD_INT 10
10210: PUSH
10211: LD_INT 11
10213: PUSH
10214: LD_INT 12
10216: PUSH
10217: LD_INT 13
10219: PUSH
10220: LD_INT 14
10222: PUSH
10223: LD_INT 15
10225: PUSH
10226: LD_INT 16
10228: PUSH
10229: LD_INT 17
10231: PUSH
10232: LD_INT 18
10234: PUSH
10235: LD_INT 19
10237: PUSH
10238: LD_INT 20
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_INT 23
10249: PUSH
10250: LD_INT 24
10252: PUSH
10253: LD_INT 25
10255: PUSH
10256: LD_INT 26
10258: PUSH
10259: LD_INT 28
10261: PUSH
10262: LD_INT 30
10264: PUSH
10265: LD_INT 31
10267: PUSH
10268: LD_INT 32
10270: PUSH
10271: LD_INT 36
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 101
10307: PUSH
10308: LD_INT 102
10310: PUSH
10311: LD_INT 103
10313: PUSH
10314: LD_INT 104
10316: PUSH
10317: LD_INT 105
10319: PUSH
10320: LD_INT 106
10322: PUSH
10323: LD_INT 107
10325: PUSH
10326: LD_INT 108
10328: PUSH
10329: LD_INT 109
10331: PUSH
10332: LD_INT 110
10334: PUSH
10335: LD_INT 111
10337: PUSH
10338: LD_INT 112
10340: PUSH
10341: LD_INT 114
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: ST_TO_ADDR
10363: GO 12150
10365: LD_INT 11
10367: DOUBLE
10368: EQUAL
10369: IFTRUE 10373
10371: GO 10565
10373: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10374: LD_ADDR_VAR 0 1
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: LD_INT 3
10384: PUSH
10385: LD_INT 4
10387: PUSH
10388: LD_INT 5
10390: PUSH
10391: LD_INT 6
10393: PUSH
10394: LD_INT 7
10396: PUSH
10397: LD_INT 8
10399: PUSH
10400: LD_INT 9
10402: PUSH
10403: LD_INT 10
10405: PUSH
10406: LD_INT 11
10408: PUSH
10409: LD_INT 12
10411: PUSH
10412: LD_INT 13
10414: PUSH
10415: LD_INT 14
10417: PUSH
10418: LD_INT 15
10420: PUSH
10421: LD_INT 16
10423: PUSH
10424: LD_INT 17
10426: PUSH
10427: LD_INT 18
10429: PUSH
10430: LD_INT 19
10432: PUSH
10433: LD_INT 20
10435: PUSH
10436: LD_INT 21
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 23
10444: PUSH
10445: LD_INT 24
10447: PUSH
10448: LD_INT 25
10450: PUSH
10451: LD_INT 26
10453: PUSH
10454: LD_INT 28
10456: PUSH
10457: LD_INT 30
10459: PUSH
10460: LD_INT 31
10462: PUSH
10463: LD_INT 32
10465: PUSH
10466: LD_INT 34
10468: PUSH
10469: LD_INT 36
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 101
10507: PUSH
10508: LD_INT 102
10510: PUSH
10511: LD_INT 103
10513: PUSH
10514: LD_INT 104
10516: PUSH
10517: LD_INT 105
10519: PUSH
10520: LD_INT 106
10522: PUSH
10523: LD_INT 107
10525: PUSH
10526: LD_INT 108
10528: PUSH
10529: LD_INT 109
10531: PUSH
10532: LD_INT 110
10534: PUSH
10535: LD_INT 111
10537: PUSH
10538: LD_INT 112
10540: PUSH
10541: LD_INT 114
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: ST_TO_ADDR
10563: GO 12150
10565: LD_INT 12
10567: DOUBLE
10568: EQUAL
10569: IFTRUE 10573
10571: GO 10781
10573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10574: LD_ADDR_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: LD_INT 2
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 4
10590: PUSH
10591: LD_INT 5
10593: PUSH
10594: LD_INT 6
10596: PUSH
10597: LD_INT 7
10599: PUSH
10600: LD_INT 8
10602: PUSH
10603: LD_INT 9
10605: PUSH
10606: LD_INT 10
10608: PUSH
10609: LD_INT 11
10611: PUSH
10612: LD_INT 12
10614: PUSH
10615: LD_INT 13
10617: PUSH
10618: LD_INT 14
10620: PUSH
10621: LD_INT 15
10623: PUSH
10624: LD_INT 16
10626: PUSH
10627: LD_INT 17
10629: PUSH
10630: LD_INT 18
10632: PUSH
10633: LD_INT 19
10635: PUSH
10636: LD_INT 20
10638: PUSH
10639: LD_INT 21
10641: PUSH
10642: LD_INT 22
10644: PUSH
10645: LD_INT 23
10647: PUSH
10648: LD_INT 24
10650: PUSH
10651: LD_INT 25
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 27
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 30
10665: PUSH
10666: LD_INT 31
10668: PUSH
10669: LD_INT 32
10671: PUSH
10672: LD_INT 33
10674: PUSH
10675: LD_INT 34
10677: PUSH
10678: LD_INT 36
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 101
10719: PUSH
10720: LD_INT 102
10722: PUSH
10723: LD_INT 103
10725: PUSH
10726: LD_INT 104
10728: PUSH
10729: LD_INT 105
10731: PUSH
10732: LD_INT 106
10734: PUSH
10735: LD_INT 107
10737: PUSH
10738: LD_INT 108
10740: PUSH
10741: LD_INT 109
10743: PUSH
10744: LD_INT 110
10746: PUSH
10747: LD_INT 111
10749: PUSH
10750: LD_INT 112
10752: PUSH
10753: LD_INT 113
10755: PUSH
10756: LD_INT 114
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: ST_TO_ADDR
10779: GO 12150
10781: LD_INT 13
10783: DOUBLE
10784: EQUAL
10785: IFTRUE 10789
10787: GO 10985
10789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10790: LD_ADDR_VAR 0 1
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: LD_INT 2
10800: PUSH
10801: LD_INT 3
10803: PUSH
10804: LD_INT 4
10806: PUSH
10807: LD_INT 5
10809: PUSH
10810: LD_INT 8
10812: PUSH
10813: LD_INT 9
10815: PUSH
10816: LD_INT 10
10818: PUSH
10819: LD_INT 11
10821: PUSH
10822: LD_INT 12
10824: PUSH
10825: LD_INT 14
10827: PUSH
10828: LD_INT 15
10830: PUSH
10831: LD_INT 16
10833: PUSH
10834: LD_INT 17
10836: PUSH
10837: LD_INT 18
10839: PUSH
10840: LD_INT 19
10842: PUSH
10843: LD_INT 20
10845: PUSH
10846: LD_INT 21
10848: PUSH
10849: LD_INT 22
10851: PUSH
10852: LD_INT 23
10854: PUSH
10855: LD_INT 24
10857: PUSH
10858: LD_INT 25
10860: PUSH
10861: LD_INT 26
10863: PUSH
10864: LD_INT 27
10866: PUSH
10867: LD_INT 28
10869: PUSH
10870: LD_INT 30
10872: PUSH
10873: LD_INT 31
10875: PUSH
10876: LD_INT 32
10878: PUSH
10879: LD_INT 33
10881: PUSH
10882: LD_INT 34
10884: PUSH
10885: LD_INT 36
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 101
10923: PUSH
10924: LD_INT 102
10926: PUSH
10927: LD_INT 103
10929: PUSH
10930: LD_INT 104
10932: PUSH
10933: LD_INT 105
10935: PUSH
10936: LD_INT 106
10938: PUSH
10939: LD_INT 107
10941: PUSH
10942: LD_INT 108
10944: PUSH
10945: LD_INT 109
10947: PUSH
10948: LD_INT 110
10950: PUSH
10951: LD_INT 111
10953: PUSH
10954: LD_INT 112
10956: PUSH
10957: LD_INT 113
10959: PUSH
10960: LD_INT 114
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: ST_TO_ADDR
10983: GO 12150
10985: LD_INT 14
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11205
10993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10994: LD_ADDR_VAR 0 1
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: LD_INT 2
11004: PUSH
11005: LD_INT 3
11007: PUSH
11008: LD_INT 4
11010: PUSH
11011: LD_INT 5
11013: PUSH
11014: LD_INT 6
11016: PUSH
11017: LD_INT 7
11019: PUSH
11020: LD_INT 8
11022: PUSH
11023: LD_INT 9
11025: PUSH
11026: LD_INT 10
11028: PUSH
11029: LD_INT 11
11031: PUSH
11032: LD_INT 12
11034: PUSH
11035: LD_INT 13
11037: PUSH
11038: LD_INT 14
11040: PUSH
11041: LD_INT 15
11043: PUSH
11044: LD_INT 16
11046: PUSH
11047: LD_INT 17
11049: PUSH
11050: LD_INT 18
11052: PUSH
11053: LD_INT 19
11055: PUSH
11056: LD_INT 20
11058: PUSH
11059: LD_INT 21
11061: PUSH
11062: LD_INT 22
11064: PUSH
11065: LD_INT 23
11067: PUSH
11068: LD_INT 24
11070: PUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 26
11076: PUSH
11077: LD_INT 27
11079: PUSH
11080: LD_INT 28
11082: PUSH
11083: LD_INT 29
11085: PUSH
11086: LD_INT 30
11088: PUSH
11089: LD_INT 31
11091: PUSH
11092: LD_INT 32
11094: PUSH
11095: LD_INT 33
11097: PUSH
11098: LD_INT 34
11100: PUSH
11101: LD_INT 36
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 101
11143: PUSH
11144: LD_INT 102
11146: PUSH
11147: LD_INT 103
11149: PUSH
11150: LD_INT 104
11152: PUSH
11153: LD_INT 105
11155: PUSH
11156: LD_INT 106
11158: PUSH
11159: LD_INT 107
11161: PUSH
11162: LD_INT 108
11164: PUSH
11165: LD_INT 109
11167: PUSH
11168: LD_INT 110
11170: PUSH
11171: LD_INT 111
11173: PUSH
11174: LD_INT 112
11176: PUSH
11177: LD_INT 113
11179: PUSH
11180: LD_INT 114
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: ST_TO_ADDR
11203: GO 12150
11205: LD_INT 15
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11425
11213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11214: LD_ADDR_VAR 0 1
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 3
11227: PUSH
11228: LD_INT 4
11230: PUSH
11231: LD_INT 5
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: LD_INT 7
11239: PUSH
11240: LD_INT 8
11242: PUSH
11243: LD_INT 9
11245: PUSH
11246: LD_INT 10
11248: PUSH
11249: LD_INT 11
11251: PUSH
11252: LD_INT 12
11254: PUSH
11255: LD_INT 13
11257: PUSH
11258: LD_INT 14
11260: PUSH
11261: LD_INT 15
11263: PUSH
11264: LD_INT 16
11266: PUSH
11267: LD_INT 17
11269: PUSH
11270: LD_INT 18
11272: PUSH
11273: LD_INT 19
11275: PUSH
11276: LD_INT 20
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 22
11284: PUSH
11285: LD_INT 23
11287: PUSH
11288: LD_INT 24
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 26
11296: PUSH
11297: LD_INT 27
11299: PUSH
11300: LD_INT 28
11302: PUSH
11303: LD_INT 29
11305: PUSH
11306: LD_INT 30
11308: PUSH
11309: LD_INT 31
11311: PUSH
11312: LD_INT 32
11314: PUSH
11315: LD_INT 33
11317: PUSH
11318: LD_INT 34
11320: PUSH
11321: LD_INT 36
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 101
11363: PUSH
11364: LD_INT 102
11366: PUSH
11367: LD_INT 103
11369: PUSH
11370: LD_INT 104
11372: PUSH
11373: LD_INT 105
11375: PUSH
11376: LD_INT 106
11378: PUSH
11379: LD_INT 107
11381: PUSH
11382: LD_INT 108
11384: PUSH
11385: LD_INT 109
11387: PUSH
11388: LD_INT 110
11390: PUSH
11391: LD_INT 111
11393: PUSH
11394: LD_INT 112
11396: PUSH
11397: LD_INT 113
11399: PUSH
11400: LD_INT 114
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: ST_TO_ADDR
11423: GO 12150
11425: LD_INT 16
11427: DOUBLE
11428: EQUAL
11429: IFTRUE 11433
11431: GO 11557
11433: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: LD_INT 2
11441: PUSH
11442: LD_INT 4
11444: PUSH
11445: LD_INT 5
11447: PUSH
11448: LD_INT 7
11450: PUSH
11451: LD_INT 11
11453: PUSH
11454: LD_INT 12
11456: PUSH
11457: LD_INT 15
11459: PUSH
11460: LD_INT 16
11462: PUSH
11463: LD_INT 20
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 22
11471: PUSH
11472: LD_INT 23
11474: PUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 26
11480: PUSH
11481: LD_INT 30
11483: PUSH
11484: LD_INT 31
11486: PUSH
11487: LD_INT 32
11489: PUSH
11490: LD_INT 33
11492: PUSH
11493: LD_INT 34
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 101
11519: PUSH
11520: LD_INT 102
11522: PUSH
11523: LD_INT 103
11525: PUSH
11526: LD_INT 106
11528: PUSH
11529: LD_INT 108
11531: PUSH
11532: LD_INT 112
11534: PUSH
11535: LD_INT 113
11537: PUSH
11538: LD_INT 114
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: ST_TO_ADDR
11555: GO 12150
11557: LD_INT 17
11559: DOUBLE
11560: EQUAL
11561: IFTRUE 11565
11563: GO 11777
11565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11566: LD_ADDR_VAR 0 1
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 2
11576: PUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 4
11582: PUSH
11583: LD_INT 5
11585: PUSH
11586: LD_INT 6
11588: PUSH
11589: LD_INT 7
11591: PUSH
11592: LD_INT 8
11594: PUSH
11595: LD_INT 9
11597: PUSH
11598: LD_INT 10
11600: PUSH
11601: LD_INT 11
11603: PUSH
11604: LD_INT 12
11606: PUSH
11607: LD_INT 13
11609: PUSH
11610: LD_INT 14
11612: PUSH
11613: LD_INT 15
11615: PUSH
11616: LD_INT 16
11618: PUSH
11619: LD_INT 17
11621: PUSH
11622: LD_INT 18
11624: PUSH
11625: LD_INT 19
11627: PUSH
11628: LD_INT 20
11630: PUSH
11631: LD_INT 21
11633: PUSH
11634: LD_INT 22
11636: PUSH
11637: LD_INT 23
11639: PUSH
11640: LD_INT 24
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 26
11648: PUSH
11649: LD_INT 27
11651: PUSH
11652: LD_INT 28
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: LD_INT 30
11660: PUSH
11661: LD_INT 31
11663: PUSH
11664: LD_INT 32
11666: PUSH
11667: LD_INT 33
11669: PUSH
11670: LD_INT 34
11672: PUSH
11673: LD_INT 36
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 101
11715: PUSH
11716: LD_INT 102
11718: PUSH
11719: LD_INT 103
11721: PUSH
11722: LD_INT 104
11724: PUSH
11725: LD_INT 105
11727: PUSH
11728: LD_INT 106
11730: PUSH
11731: LD_INT 107
11733: PUSH
11734: LD_INT 108
11736: PUSH
11737: LD_INT 109
11739: PUSH
11740: LD_INT 110
11742: PUSH
11743: LD_INT 111
11745: PUSH
11746: LD_INT 112
11748: PUSH
11749: LD_INT 113
11751: PUSH
11752: LD_INT 114
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: ST_TO_ADDR
11775: GO 12150
11777: LD_INT 18
11779: DOUBLE
11780: EQUAL
11781: IFTRUE 11785
11783: GO 11921
11785: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11786: LD_ADDR_VAR 0 1
11790: PUSH
11791: LD_INT 2
11793: PUSH
11794: LD_INT 4
11796: PUSH
11797: LD_INT 5
11799: PUSH
11800: LD_INT 7
11802: PUSH
11803: LD_INT 11
11805: PUSH
11806: LD_INT 12
11808: PUSH
11809: LD_INT 15
11811: PUSH
11812: LD_INT 16
11814: PUSH
11815: LD_INT 20
11817: PUSH
11818: LD_INT 21
11820: PUSH
11821: LD_INT 22
11823: PUSH
11824: LD_INT 23
11826: PUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 26
11832: PUSH
11833: LD_INT 30
11835: PUSH
11836: LD_INT 31
11838: PUSH
11839: LD_INT 32
11841: PUSH
11842: LD_INT 33
11844: PUSH
11845: LD_INT 34
11847: PUSH
11848: LD_INT 35
11850: PUSH
11851: LD_INT 36
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 101
11879: PUSH
11880: LD_INT 102
11882: PUSH
11883: LD_INT 103
11885: PUSH
11886: LD_INT 106
11888: PUSH
11889: LD_INT 108
11891: PUSH
11892: LD_INT 112
11894: PUSH
11895: LD_INT 113
11897: PUSH
11898: LD_INT 114
11900: PUSH
11901: LD_INT 115
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: ST_TO_ADDR
11919: GO 12150
11921: LD_INT 19
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 12149
11929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11930: LD_ADDR_VAR 0 1
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 3
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: LD_INT 6
11952: PUSH
11953: LD_INT 7
11955: PUSH
11956: LD_INT 8
11958: PUSH
11959: LD_INT 9
11961: PUSH
11962: LD_INT 10
11964: PUSH
11965: LD_INT 11
11967: PUSH
11968: LD_INT 12
11970: PUSH
11971: LD_INT 13
11973: PUSH
11974: LD_INT 14
11976: PUSH
11977: LD_INT 15
11979: PUSH
11980: LD_INT 16
11982: PUSH
11983: LD_INT 17
11985: PUSH
11986: LD_INT 18
11988: PUSH
11989: LD_INT 19
11991: PUSH
11992: LD_INT 20
11994: PUSH
11995: LD_INT 21
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_INT 23
12003: PUSH
12004: LD_INT 24
12006: PUSH
12007: LD_INT 25
12009: PUSH
12010: LD_INT 26
12012: PUSH
12013: LD_INT 27
12015: PUSH
12016: LD_INT 28
12018: PUSH
12019: LD_INT 29
12021: PUSH
12022: LD_INT 30
12024: PUSH
12025: LD_INT 31
12027: PUSH
12028: LD_INT 32
12030: PUSH
12031: LD_INT 33
12033: PUSH
12034: LD_INT 34
12036: PUSH
12037: LD_INT 35
12039: PUSH
12040: LD_INT 36
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 101
12083: PUSH
12084: LD_INT 102
12086: PUSH
12087: LD_INT 103
12089: PUSH
12090: LD_INT 104
12092: PUSH
12093: LD_INT 105
12095: PUSH
12096: LD_INT 106
12098: PUSH
12099: LD_INT 107
12101: PUSH
12102: LD_INT 108
12104: PUSH
12105: LD_INT 109
12107: PUSH
12108: LD_INT 110
12110: PUSH
12111: LD_INT 111
12113: PUSH
12114: LD_INT 112
12116: PUSH
12117: LD_INT 113
12119: PUSH
12120: LD_INT 114
12122: PUSH
12123: LD_INT 115
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: ST_TO_ADDR
12147: GO 12150
12149: POP
// end else
12150: GO 12369
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12152: LD_ADDR_VAR 0 1
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: LD_INT 4
12168: PUSH
12169: LD_INT 5
12171: PUSH
12172: LD_INT 6
12174: PUSH
12175: LD_INT 7
12177: PUSH
12178: LD_INT 8
12180: PUSH
12181: LD_INT 9
12183: PUSH
12184: LD_INT 10
12186: PUSH
12187: LD_INT 11
12189: PUSH
12190: LD_INT 12
12192: PUSH
12193: LD_INT 13
12195: PUSH
12196: LD_INT 14
12198: PUSH
12199: LD_INT 15
12201: PUSH
12202: LD_INT 16
12204: PUSH
12205: LD_INT 17
12207: PUSH
12208: LD_INT 18
12210: PUSH
12211: LD_INT 19
12213: PUSH
12214: LD_INT 20
12216: PUSH
12217: LD_INT 21
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 23
12225: PUSH
12226: LD_INT 24
12228: PUSH
12229: LD_INT 25
12231: PUSH
12232: LD_INT 26
12234: PUSH
12235: LD_INT 27
12237: PUSH
12238: LD_INT 28
12240: PUSH
12241: LD_INT 29
12243: PUSH
12244: LD_INT 30
12246: PUSH
12247: LD_INT 31
12249: PUSH
12250: LD_INT 32
12252: PUSH
12253: LD_INT 33
12255: PUSH
12256: LD_INT 34
12258: PUSH
12259: LD_INT 35
12261: PUSH
12262: LD_INT 36
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 101
12305: PUSH
12306: LD_INT 102
12308: PUSH
12309: LD_INT 103
12311: PUSH
12312: LD_INT 104
12314: PUSH
12315: LD_INT 105
12317: PUSH
12318: LD_INT 106
12320: PUSH
12321: LD_INT 107
12323: PUSH
12324: LD_INT 108
12326: PUSH
12327: LD_INT 109
12329: PUSH
12330: LD_INT 110
12332: PUSH
12333: LD_INT 111
12335: PUSH
12336: LD_INT 112
12338: PUSH
12339: LD_INT 113
12341: PUSH
12342: LD_INT 114
12344: PUSH
12345: LD_INT 115
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: ST_TO_ADDR
// if result then
12369: LD_VAR 0 1
12373: IFFALSE 12662
// begin normal :=  ;
12375: LD_ADDR_VAR 0 3
12379: PUSH
12380: LD_STRING 
12382: ST_TO_ADDR
// hardcore :=  ;
12383: LD_ADDR_VAR 0 4
12387: PUSH
12388: LD_STRING 
12390: ST_TO_ADDR
// for i = 1 to normalCounter do
12391: LD_ADDR_VAR 0 5
12395: PUSH
12396: DOUBLE
12397: LD_INT 1
12399: DEC
12400: ST_TO_ADDR
12401: LD_EXP 67
12405: PUSH
12406: FOR_TO
12407: IFFALSE 12508
// begin tmp := 0 ;
12409: LD_ADDR_VAR 0 2
12413: PUSH
12414: LD_STRING 0
12416: ST_TO_ADDR
// if result [ 1 ] then
12417: LD_VAR 0 1
12421: PUSH
12422: LD_INT 1
12424: ARRAY
12425: IFFALSE 12490
// if result [ 1 ] [ 1 ] = i then
12427: LD_VAR 0 1
12431: PUSH
12432: LD_INT 1
12434: ARRAY
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PUSH
12440: LD_VAR 0 5
12444: EQUAL
12445: IFFALSE 12490
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12447: LD_ADDR_VAR 0 1
12451: PUSH
12452: LD_VAR 0 1
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: LD_VAR 0 1
12464: PUSH
12465: LD_INT 1
12467: ARRAY
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 3
12476: PPUSH
12477: CALL_OW 1
12481: ST_TO_ADDR
// tmp := 1 ;
12482: LD_ADDR_VAR 0 2
12486: PUSH
12487: LD_STRING 1
12489: ST_TO_ADDR
// end ; normal := normal & tmp ;
12490: LD_ADDR_VAR 0 3
12494: PUSH
12495: LD_VAR 0 3
12499: PUSH
12500: LD_VAR 0 2
12504: STR
12505: ST_TO_ADDR
// end ;
12506: GO 12406
12508: POP
12509: POP
// for i = 1 to hardcoreCounter do
12510: LD_ADDR_VAR 0 5
12514: PUSH
12515: DOUBLE
12516: LD_INT 1
12518: DEC
12519: ST_TO_ADDR
12520: LD_EXP 68
12524: PUSH
12525: FOR_TO
12526: IFFALSE 12631
// begin tmp := 0 ;
12528: LD_ADDR_VAR 0 2
12532: PUSH
12533: LD_STRING 0
12535: ST_TO_ADDR
// if result [ 2 ] then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 2
12543: ARRAY
12544: IFFALSE 12613
// if result [ 2 ] [ 1 ] = 100 + i then
12546: LD_VAR 0 1
12550: PUSH
12551: LD_INT 2
12553: ARRAY
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PUSH
12559: LD_INT 100
12561: PUSH
12562: LD_VAR 0 5
12566: PLUS
12567: EQUAL
12568: IFFALSE 12613
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12570: LD_ADDR_VAR 0 1
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_INT 2
12582: PPUSH
12583: LD_VAR 0 1
12587: PUSH
12588: LD_INT 2
12590: ARRAY
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 3
12599: PPUSH
12600: CALL_OW 1
12604: ST_TO_ADDR
// tmp := 1 ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_STRING 1
12612: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12613: LD_ADDR_VAR 0 4
12617: PUSH
12618: LD_VAR 0 4
12622: PUSH
12623: LD_VAR 0 2
12627: STR
12628: ST_TO_ADDR
// end ;
12629: GO 12525
12631: POP
12632: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12633: LD_STRING getStreamItemsFromMission("
12635: PUSH
12636: LD_VAR 0 3
12640: STR
12641: PUSH
12642: LD_STRING ","
12644: STR
12645: PUSH
12646: LD_VAR 0 4
12650: STR
12651: PUSH
12652: LD_STRING ")
12654: STR
12655: PPUSH
12656: CALL_OW 559
// end else
12660: GO 12669
// ToLua ( getStreamItemsFromMission("","") ) ;
12662: LD_STRING getStreamItemsFromMission("","")
12664: PPUSH
12665: CALL_OW 559
// end ;
12669: LD_VAR 0 1
12673: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 100
12681: EQUAL
12682: IFFALSE 13631
// begin if not StreamModeActive then
12684: LD_EXP 66
12688: NOT
12689: IFFALSE 12699
// StreamModeActive := true ;
12691: LD_ADDR_EXP 66
12695: PUSH
12696: LD_INT 1
12698: ST_TO_ADDR
// if p3 = 0 then
12699: LD_VAR 0 3
12703: PUSH
12704: LD_INT 0
12706: EQUAL
12707: IFFALSE 12713
// InitStreamMode ;
12709: CALL 8752 0 0
// if p3 = 1 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12731
// sRocket := true ;
12723: LD_ADDR_EXP 71
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 2 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 2
12738: EQUAL
12739: IFFALSE 12749
// sSpeed := true ;
12741: LD_ADDR_EXP 70
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 3 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 3
12756: EQUAL
12757: IFFALSE 12767
// sEngine := true ;
12759: LD_ADDR_EXP 72
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 4 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 4
12774: EQUAL
12775: IFFALSE 12785
// sSpec := true ;
12777: LD_ADDR_EXP 69
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 5 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 5
12792: EQUAL
12793: IFFALSE 12803
// sLevel := true ;
12795: LD_ADDR_EXP 73
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 6 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 6
12810: EQUAL
12811: IFFALSE 12821
// sArmoury := true ;
12813: LD_ADDR_EXP 74
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 7 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 7
12828: EQUAL
12829: IFFALSE 12839
// sRadar := true ;
12831: LD_ADDR_EXP 75
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 8 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 8
12846: EQUAL
12847: IFFALSE 12857
// sBunker := true ;
12849: LD_ADDR_EXP 76
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// if p3 = 9 then
12857: LD_VAR 0 3
12861: PUSH
12862: LD_INT 9
12864: EQUAL
12865: IFFALSE 12875
// sHack := true ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// if p3 = 10 then
12875: LD_VAR 0 3
12879: PUSH
12880: LD_INT 10
12882: EQUAL
12883: IFFALSE 12893
// sFire := true ;
12885: LD_ADDR_EXP 78
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if p3 = 11 then
12893: LD_VAR 0 3
12897: PUSH
12898: LD_INT 11
12900: EQUAL
12901: IFFALSE 12911
// sRefresh := true ;
12903: LD_ADDR_EXP 79
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// if p3 = 12 then
12911: LD_VAR 0 3
12915: PUSH
12916: LD_INT 12
12918: EQUAL
12919: IFFALSE 12929
// sExp := true ;
12921: LD_ADDR_EXP 80
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// if p3 = 13 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 13
12936: EQUAL
12937: IFFALSE 12947
// sDepot := true ;
12939: LD_ADDR_EXP 81
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// if p3 = 14 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 14
12954: EQUAL
12955: IFFALSE 12965
// sFlag := true ;
12957: LD_ADDR_EXP 82
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 15 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 15
12972: EQUAL
12973: IFFALSE 12983
// sKamikadze := true ;
12975: LD_ADDR_EXP 90
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 16 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 16
12990: EQUAL
12991: IFFALSE 13001
// sTroll := true ;
12993: LD_ADDR_EXP 91
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 17 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 17
13008: EQUAL
13009: IFFALSE 13019
// sSlow := true ;
13011: LD_ADDR_EXP 92
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 18 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 18
13026: EQUAL
13027: IFFALSE 13037
// sLack := true ;
13029: LD_ADDR_EXP 93
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 19 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 19
13044: EQUAL
13045: IFFALSE 13055
// sTank := true ;
13047: LD_ADDR_EXP 95
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 20 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 20
13062: EQUAL
13063: IFFALSE 13073
// sRemote := true ;
13065: LD_ADDR_EXP 96
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 21 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 21
13080: EQUAL
13081: IFFALSE 13091
// sPowell := true ;
13083: LD_ADDR_EXP 97
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 22 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 22
13098: EQUAL
13099: IFFALSE 13109
// sTeleport := true ;
13101: LD_ADDR_EXP 100
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 23 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 23
13116: EQUAL
13117: IFFALSE 13127
// sOilTower := true ;
13119: LD_ADDR_EXP 102
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 24 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 24
13134: EQUAL
13135: IFFALSE 13145
// sShovel := true ;
13137: LD_ADDR_EXP 103
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// if p3 = 25 then
13145: LD_VAR 0 3
13149: PUSH
13150: LD_INT 25
13152: EQUAL
13153: IFFALSE 13163
// sSheik := true ;
13155: LD_ADDR_EXP 104
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// if p3 = 26 then
13163: LD_VAR 0 3
13167: PUSH
13168: LD_INT 26
13170: EQUAL
13171: IFFALSE 13181
// sEarthquake := true ;
13173: LD_ADDR_EXP 106
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// if p3 = 27 then
13181: LD_VAR 0 3
13185: PUSH
13186: LD_INT 27
13188: EQUAL
13189: IFFALSE 13199
// sAI := true ;
13191: LD_ADDR_EXP 107
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if p3 = 28 then
13199: LD_VAR 0 3
13203: PUSH
13204: LD_INT 28
13206: EQUAL
13207: IFFALSE 13217
// sCargo := true ;
13209: LD_ADDR_EXP 110
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// if p3 = 29 then
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 29
13224: EQUAL
13225: IFFALSE 13235
// sDLaser := true ;
13227: LD_ADDR_EXP 111
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// if p3 = 30 then
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 30
13242: EQUAL
13243: IFFALSE 13253
// sExchange := true ;
13245: LD_ADDR_EXP 112
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// if p3 = 31 then
13253: LD_VAR 0 3
13257: PUSH
13258: LD_INT 31
13260: EQUAL
13261: IFFALSE 13271
// sFac := true ;
13263: LD_ADDR_EXP 113
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// if p3 = 32 then
13271: LD_VAR 0 3
13275: PUSH
13276: LD_INT 32
13278: EQUAL
13279: IFFALSE 13289
// sPower := true ;
13281: LD_ADDR_EXP 114
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// if p3 = 33 then
13289: LD_VAR 0 3
13293: PUSH
13294: LD_INT 33
13296: EQUAL
13297: IFFALSE 13307
// sRandom := true ;
13299: LD_ADDR_EXP 115
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// if p3 = 34 then
13307: LD_VAR 0 3
13311: PUSH
13312: LD_INT 34
13314: EQUAL
13315: IFFALSE 13325
// sShield := true ;
13317: LD_ADDR_EXP 116
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// if p3 = 35 then
13325: LD_VAR 0 3
13329: PUSH
13330: LD_INT 35
13332: EQUAL
13333: IFFALSE 13343
// sTime := true ;
13335: LD_ADDR_EXP 117
13339: PUSH
13340: LD_INT 1
13342: ST_TO_ADDR
// if p3 = 36 then
13343: LD_VAR 0 3
13347: PUSH
13348: LD_INT 36
13350: EQUAL
13351: IFFALSE 13361
// sTools := true ;
13353: LD_ADDR_EXP 118
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// if p3 = 101 then
13361: LD_VAR 0 3
13365: PUSH
13366: LD_INT 101
13368: EQUAL
13369: IFFALSE 13379
// sSold := true ;
13371: LD_ADDR_EXP 83
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// if p3 = 102 then
13379: LD_VAR 0 3
13383: PUSH
13384: LD_INT 102
13386: EQUAL
13387: IFFALSE 13397
// sDiff := true ;
13389: LD_ADDR_EXP 84
13393: PUSH
13394: LD_INT 1
13396: ST_TO_ADDR
// if p3 = 103 then
13397: LD_VAR 0 3
13401: PUSH
13402: LD_INT 103
13404: EQUAL
13405: IFFALSE 13415
// sFog := true ;
13407: LD_ADDR_EXP 87
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// if p3 = 104 then
13415: LD_VAR 0 3
13419: PUSH
13420: LD_INT 104
13422: EQUAL
13423: IFFALSE 13433
// sReset := true ;
13425: LD_ADDR_EXP 88
13429: PUSH
13430: LD_INT 1
13432: ST_TO_ADDR
// if p3 = 105 then
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 105
13440: EQUAL
13441: IFFALSE 13451
// sSun := true ;
13443: LD_ADDR_EXP 89
13447: PUSH
13448: LD_INT 1
13450: ST_TO_ADDR
// if p3 = 106 then
13451: LD_VAR 0 3
13455: PUSH
13456: LD_INT 106
13458: EQUAL
13459: IFFALSE 13469
// sTiger := true ;
13461: LD_ADDR_EXP 85
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// if p3 = 107 then
13469: LD_VAR 0 3
13473: PUSH
13474: LD_INT 107
13476: EQUAL
13477: IFFALSE 13487
// sBomb := true ;
13479: LD_ADDR_EXP 86
13483: PUSH
13484: LD_INT 1
13486: ST_TO_ADDR
// if p3 = 108 then
13487: LD_VAR 0 3
13491: PUSH
13492: LD_INT 108
13494: EQUAL
13495: IFFALSE 13505
// sWound := true ;
13497: LD_ADDR_EXP 94
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// if p3 = 109 then
13505: LD_VAR 0 3
13509: PUSH
13510: LD_INT 109
13512: EQUAL
13513: IFFALSE 13523
// sBetray := true ;
13515: LD_ADDR_EXP 98
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// if p3 = 110 then
13523: LD_VAR 0 3
13527: PUSH
13528: LD_INT 110
13530: EQUAL
13531: IFFALSE 13541
// sContamin := true ;
13533: LD_ADDR_EXP 99
13537: PUSH
13538: LD_INT 1
13540: ST_TO_ADDR
// if p3 = 111 then
13541: LD_VAR 0 3
13545: PUSH
13546: LD_INT 111
13548: EQUAL
13549: IFFALSE 13559
// sOil := true ;
13551: LD_ADDR_EXP 101
13555: PUSH
13556: LD_INT 1
13558: ST_TO_ADDR
// if p3 = 112 then
13559: LD_VAR 0 3
13563: PUSH
13564: LD_INT 112
13566: EQUAL
13567: IFFALSE 13577
// sStu := true ;
13569: LD_ADDR_EXP 105
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// if p3 = 113 then
13577: LD_VAR 0 3
13581: PUSH
13582: LD_INT 113
13584: EQUAL
13585: IFFALSE 13595
// sBazooka := true ;
13587: LD_ADDR_EXP 108
13591: PUSH
13592: LD_INT 1
13594: ST_TO_ADDR
// if p3 = 114 then
13595: LD_VAR 0 3
13599: PUSH
13600: LD_INT 114
13602: EQUAL
13603: IFFALSE 13613
// sMortar := true ;
13605: LD_ADDR_EXP 109
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// if p3 = 115 then
13613: LD_VAR 0 3
13617: PUSH
13618: LD_INT 115
13620: EQUAL
13621: IFFALSE 13631
// sRanger := true ;
13623: LD_ADDR_EXP 119
13627: PUSH
13628: LD_INT 1
13630: ST_TO_ADDR
// end ; end ;
13631: PPOPN 6
13633: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13634: LD_EXP 66
13638: PUSH
13639: LD_EXP 71
13643: AND
13644: IFFALSE 13768
13646: GO 13648
13648: DISABLE
13649: LD_INT 0
13651: PPUSH
13652: PPUSH
// begin enable ;
13653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13654: LD_ADDR_VAR 0 2
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 2
13673: PUSH
13674: LD_INT 34
13676: PUSH
13677: LD_INT 7
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 34
13686: PUSH
13687: LD_INT 45
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 34
13696: PUSH
13697: LD_INT 28
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 34
13706: PUSH
13707: LD_INT 47
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PPUSH
13725: CALL_OW 69
13729: ST_TO_ADDR
// if not tmp then
13730: LD_VAR 0 2
13734: NOT
13735: IFFALSE 13739
// exit ;
13737: GO 13768
// for i in tmp do
13739: LD_ADDR_VAR 0 1
13743: PUSH
13744: LD_VAR 0 2
13748: PUSH
13749: FOR_IN
13750: IFFALSE 13766
// begin SetLives ( i , 0 ) ;
13752: LD_VAR 0 1
13756: PPUSH
13757: LD_INT 0
13759: PPUSH
13760: CALL_OW 234
// end ;
13764: GO 13749
13766: POP
13767: POP
// end ;
13768: PPOPN 2
13770: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13771: LD_EXP 66
13775: PUSH
13776: LD_EXP 72
13780: AND
13781: IFFALSE 13865
13783: GO 13785
13785: DISABLE
13786: LD_INT 0
13788: PPUSH
13789: PPUSH
// begin enable ;
13790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13791: LD_ADDR_VAR 0 2
13795: PUSH
13796: LD_INT 22
13798: PUSH
13799: LD_OWVAR 2
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 32
13810: PUSH
13811: LD_INT 3
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: ST_TO_ADDR
// if not tmp then
13827: LD_VAR 0 2
13831: NOT
13832: IFFALSE 13836
// exit ;
13834: GO 13865
// for i in tmp do
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_VAR 0 2
13845: PUSH
13846: FOR_IN
13847: IFFALSE 13863
// begin SetLives ( i , 0 ) ;
13849: LD_VAR 0 1
13853: PPUSH
13854: LD_INT 0
13856: PPUSH
13857: CALL_OW 234
// end ;
13861: GO 13846
13863: POP
13864: POP
// end ;
13865: PPOPN 2
13867: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13868: LD_EXP 66
13872: PUSH
13873: LD_EXP 69
13877: AND
13878: IFFALSE 13971
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
// begin enable ;
13886: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13887: LD_ADDR_VAR 0 1
13891: PUSH
13892: LD_INT 22
13894: PUSH
13895: LD_OWVAR 2
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: LD_INT 25
13909: PUSH
13910: LD_INT 5
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 25
13919: PUSH
13920: LD_INT 9
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 25
13929: PUSH
13930: LD_INT 8
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 69
13951: PUSH
13952: FOR_IN
13953: IFFALSE 13969
// begin SetClass ( i , 1 ) ;
13955: LD_VAR 0 1
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 336
// end ;
13967: GO 13952
13969: POP
13970: POP
// end ;
13971: PPOPN 1
13973: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13974: LD_EXP 66
13978: PUSH
13979: LD_EXP 70
13983: AND
13984: PUSH
13985: LD_OWVAR 65
13989: PUSH
13990: LD_INT 7
13992: LESS
13993: AND
13994: IFFALSE 14008
13996: GO 13998
13998: DISABLE
// begin enable ;
13999: ENABLE
// game_speed := 7 ;
14000: LD_ADDR_OWVAR 65
14004: PUSH
14005: LD_INT 7
14007: ST_TO_ADDR
// end ;
14008: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14009: LD_EXP 66
14013: PUSH
14014: LD_EXP 73
14018: AND
14019: IFFALSE 14221
14021: GO 14023
14023: DISABLE
14024: LD_INT 0
14026: PPUSH
14027: PPUSH
14028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 81
14036: PUSH
14037: LD_OWVAR 2
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 21
14048: PUSH
14049: LD_INT 1
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: ST_TO_ADDR
// if not tmp then
14065: LD_VAR 0 3
14069: NOT
14070: IFFALSE 14074
// exit ;
14072: GO 14221
// if tmp > 5 then
14074: LD_VAR 0 3
14078: PUSH
14079: LD_INT 5
14081: GREATER
14082: IFFALSE 14094
// k := 5 else
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 5
14091: ST_TO_ADDR
14092: GO 14104
// k := tmp ;
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_VAR 0 3
14103: ST_TO_ADDR
// for i := 1 to k do
14104: LD_ADDR_VAR 0 1
14108: PUSH
14109: DOUBLE
14110: LD_INT 1
14112: DEC
14113: ST_TO_ADDR
14114: LD_VAR 0 2
14118: PUSH
14119: FOR_TO
14120: IFFALSE 14219
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14122: LD_VAR 0 3
14126: PUSH
14127: LD_VAR 0 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 1
14137: PUSH
14138: LD_INT 4
14140: MOD
14141: PUSH
14142: LD_INT 1
14144: PLUS
14145: PPUSH
14146: CALL_OW 259
14150: PUSH
14151: LD_INT 10
14153: LESS
14154: IFFALSE 14217
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14156: LD_VAR 0 3
14160: PUSH
14161: LD_VAR 0 1
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 1
14171: PUSH
14172: LD_INT 4
14174: MOD
14175: PUSH
14176: LD_INT 1
14178: PLUS
14179: PPUSH
14180: LD_VAR 0 3
14184: PUSH
14185: LD_VAR 0 1
14189: ARRAY
14190: PPUSH
14191: LD_VAR 0 1
14195: PUSH
14196: LD_INT 4
14198: MOD
14199: PUSH
14200: LD_INT 1
14202: PLUS
14203: PPUSH
14204: CALL_OW 259
14208: PUSH
14209: LD_INT 1
14211: PLUS
14212: PPUSH
14213: CALL_OW 237
14217: GO 14119
14219: POP
14220: POP
// end ;
14221: PPOPN 3
14223: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14224: LD_EXP 66
14228: PUSH
14229: LD_EXP 74
14233: AND
14234: IFFALSE 14254
14236: GO 14238
14238: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14239: LD_INT 4
14241: PPUSH
14242: LD_OWVAR 2
14246: PPUSH
14247: LD_INT 0
14249: PPUSH
14250: CALL_OW 324
14254: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14255: LD_EXP 66
14259: PUSH
14260: LD_EXP 103
14264: AND
14265: IFFALSE 14285
14267: GO 14269
14269: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14270: LD_INT 19
14272: PPUSH
14273: LD_OWVAR 2
14277: PPUSH
14278: LD_INT 0
14280: PPUSH
14281: CALL_OW 324
14285: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14286: LD_EXP 66
14290: PUSH
14291: LD_EXP 75
14295: AND
14296: IFFALSE 14398
14298: GO 14300
14300: DISABLE
14301: LD_INT 0
14303: PPUSH
14304: PPUSH
// begin enable ;
14305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14306: LD_ADDR_VAR 0 2
14310: PUSH
14311: LD_INT 22
14313: PUSH
14314: LD_OWVAR 2
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 2
14325: PUSH
14326: LD_INT 34
14328: PUSH
14329: LD_INT 11
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 34
14338: PUSH
14339: LD_INT 30
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: ST_TO_ADDR
// if not tmp then
14360: LD_VAR 0 2
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14398
// for i in tmp do
14369: LD_ADDR_VAR 0 1
14373: PUSH
14374: LD_VAR 0 2
14378: PUSH
14379: FOR_IN
14380: IFFALSE 14396
// begin SetLives ( i , 0 ) ;
14382: LD_VAR 0 1
14386: PPUSH
14387: LD_INT 0
14389: PPUSH
14390: CALL_OW 234
// end ;
14394: GO 14379
14396: POP
14397: POP
// end ;
14398: PPOPN 2
14400: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14401: LD_EXP 66
14405: PUSH
14406: LD_EXP 76
14410: AND
14411: IFFALSE 14431
14413: GO 14415
14415: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14416: LD_INT 32
14418: PPUSH
14419: LD_OWVAR 2
14423: PPUSH
14424: LD_INT 0
14426: PPUSH
14427: CALL_OW 324
14431: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14432: LD_EXP 66
14436: PUSH
14437: LD_EXP 77
14441: AND
14442: IFFALSE 14623
14444: GO 14446
14446: DISABLE
14447: LD_INT 0
14449: PPUSH
14450: PPUSH
14451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14452: LD_ADDR_VAR 0 2
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_OWVAR 2
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 33
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PPUSH
14483: CALL_OW 69
14487: ST_TO_ADDR
// if not tmp then
14488: LD_VAR 0 2
14492: NOT
14493: IFFALSE 14497
// exit ;
14495: GO 14623
// side := 0 ;
14497: LD_ADDR_VAR 0 3
14501: PUSH
14502: LD_INT 0
14504: ST_TO_ADDR
// for i := 1 to 8 do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_INT 8
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14567
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14521: LD_OWVAR 2
14525: PUSH
14526: LD_VAR 0 1
14530: NONEQUAL
14531: PUSH
14532: LD_OWVAR 2
14536: PPUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 81
14546: PUSH
14547: LD_INT 2
14549: EQUAL
14550: AND
14551: IFFALSE 14565
// begin side := i ;
14553: LD_ADDR_VAR 0 3
14557: PUSH
14558: LD_VAR 0 1
14562: ST_TO_ADDR
// break ;
14563: GO 14567
// end ;
14565: GO 14518
14567: POP
14568: POP
// if not side then
14569: LD_VAR 0 3
14573: NOT
14574: IFFALSE 14578
// exit ;
14576: GO 14623
// for i := 1 to tmp do
14578: LD_ADDR_VAR 0 1
14582: PUSH
14583: DOUBLE
14584: LD_INT 1
14586: DEC
14587: ST_TO_ADDR
14588: LD_VAR 0 2
14592: PUSH
14593: FOR_TO
14594: IFFALSE 14621
// if Prob ( 60 ) then
14596: LD_INT 60
14598: PPUSH
14599: CALL_OW 13
14603: IFFALSE 14619
// SetSide ( i , side ) ;
14605: LD_VAR 0 1
14609: PPUSH
14610: LD_VAR 0 3
14614: PPUSH
14615: CALL_OW 235
14619: GO 14593
14621: POP
14622: POP
// end ;
14623: PPOPN 3
14625: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14626: LD_EXP 66
14630: PUSH
14631: LD_EXP 79
14635: AND
14636: IFFALSE 14755
14638: GO 14640
14640: DISABLE
14641: LD_INT 0
14643: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14644: LD_ADDR_VAR 0 1
14648: PUSH
14649: LD_INT 22
14651: PUSH
14652: LD_OWVAR 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: LD_INT 1
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 23
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: PUSH
14698: FOR_IN
14699: IFFALSE 14753
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14701: LD_VAR 0 1
14705: PPUSH
14706: CALL_OW 257
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: LD_INT 2
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: LD_INT 4
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: IN
14729: IFFALSE 14751
// SetClass ( un , rand ( 1 , 4 ) ) ;
14731: LD_VAR 0 1
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: LD_INT 4
14741: PPUSH
14742: CALL_OW 12
14746: PPUSH
14747: CALL_OW 336
14751: GO 14698
14753: POP
14754: POP
// end ;
14755: PPOPN 1
14757: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14758: LD_EXP 66
14762: PUSH
14763: LD_EXP 78
14767: AND
14768: IFFALSE 14847
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14776: LD_ADDR_VAR 0 1
14780: PUSH
14781: LD_INT 22
14783: PUSH
14784: LD_OWVAR 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 21
14795: PUSH
14796: LD_INT 3
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: ST_TO_ADDR
// if not tmp then
14812: LD_VAR 0 1
14816: NOT
14817: IFFALSE 14821
// exit ;
14819: GO 14847
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14821: LD_VAR 0 1
14825: PUSH
14826: LD_INT 1
14828: PPUSH
14829: LD_VAR 0 1
14833: PPUSH
14834: CALL_OW 12
14838: ARRAY
14839: PPUSH
14840: LD_INT 100
14842: PPUSH
14843: CALL_OW 234
// end ;
14847: PPOPN 1
14849: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14850: LD_EXP 66
14854: PUSH
14855: LD_EXP 80
14859: AND
14860: IFFALSE 14958
14862: GO 14864
14864: DISABLE
14865: LD_INT 0
14867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14868: LD_ADDR_VAR 0 1
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_OWVAR 2
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 21
14887: PUSH
14888: LD_INT 1
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: ST_TO_ADDR
// if not tmp then
14904: LD_VAR 0 1
14908: NOT
14909: IFFALSE 14913
// exit ;
14911: GO 14958
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14913: LD_VAR 0 1
14917: PUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 12
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: LD_INT 4
14937: PPUSH
14938: CALL_OW 12
14942: PPUSH
14943: LD_INT 3000
14945: PPUSH
14946: LD_INT 9000
14948: PPUSH
14949: CALL_OW 12
14953: PPUSH
14954: CALL_OW 492
// end ;
14958: PPOPN 1
14960: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14961: LD_EXP 66
14965: PUSH
14966: LD_EXP 81
14970: AND
14971: IFFALSE 14991
14973: GO 14975
14975: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14976: LD_INT 1
14978: PPUSH
14979: LD_OWVAR 2
14983: PPUSH
14984: LD_INT 0
14986: PPUSH
14987: CALL_OW 324
14991: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14992: LD_EXP 66
14996: PUSH
14997: LD_EXP 82
15001: AND
15002: IFFALSE 15085
15004: GO 15006
15006: DISABLE
15007: LD_INT 0
15009: PPUSH
15010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: LD_INT 22
15018: PUSH
15019: LD_OWVAR 2
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 21
15030: PUSH
15031: LD_INT 3
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PPUSH
15042: CALL_OW 69
15046: ST_TO_ADDR
// if not tmp then
15047: LD_VAR 0 2
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15085
// for i in tmp do
15056: LD_ADDR_VAR 0 1
15060: PUSH
15061: LD_VAR 0 2
15065: PUSH
15066: FOR_IN
15067: IFFALSE 15083
// SetBLevel ( i , 10 ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: LD_INT 10
15076: PPUSH
15077: CALL_OW 241
15081: GO 15066
15083: POP
15084: POP
// end ;
15085: PPOPN 2
15087: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15088: LD_EXP 66
15092: PUSH
15093: LD_EXP 83
15097: AND
15098: IFFALSE 15209
15100: GO 15102
15102: DISABLE
15103: LD_INT 0
15105: PPUSH
15106: PPUSH
15107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15108: LD_ADDR_VAR 0 3
15112: PUSH
15113: LD_INT 22
15115: PUSH
15116: LD_OWVAR 2
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 25
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 69
15143: ST_TO_ADDR
// if not tmp then
15144: LD_VAR 0 3
15148: NOT
15149: IFFALSE 15153
// exit ;
15151: GO 15209
// un := tmp [ rand ( 1 , tmp ) ] ;
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: LD_VAR 0 3
15162: PUSH
15163: LD_INT 1
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: CALL_OW 12
15175: ARRAY
15176: ST_TO_ADDR
// if Crawls ( un ) then
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL_OW 318
15186: IFFALSE 15197
// ComWalk ( un ) ;
15188: LD_VAR 0 2
15192: PPUSH
15193: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15197: LD_VAR 0 2
15201: PPUSH
15202: LD_INT 5
15204: PPUSH
15205: CALL_OW 336
// end ;
15209: PPOPN 3
15211: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15212: LD_EXP 66
15216: PUSH
15217: LD_EXP 84
15221: AND
15222: PUSH
15223: LD_OWVAR 67
15227: PUSH
15228: LD_INT 3
15230: LESS
15231: AND
15232: IFFALSE 15251
15234: GO 15236
15236: DISABLE
// Difficulty := Difficulty + 1 ;
15237: LD_ADDR_OWVAR 67
15241: PUSH
15242: LD_OWVAR 67
15246: PUSH
15247: LD_INT 1
15249: PLUS
15250: ST_TO_ADDR
15251: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15252: LD_EXP 66
15256: PUSH
15257: LD_EXP 85
15261: AND
15262: IFFALSE 15365
15264: GO 15266
15266: DISABLE
15267: LD_INT 0
15269: PPUSH
// begin for i := 1 to 5 do
15270: LD_ADDR_VAR 0 1
15274: PUSH
15275: DOUBLE
15276: LD_INT 1
15278: DEC
15279: ST_TO_ADDR
15280: LD_INT 5
15282: PUSH
15283: FOR_TO
15284: IFFALSE 15363
// begin uc_nation := nation_nature ;
15286: LD_ADDR_OWVAR 21
15290: PUSH
15291: LD_INT 0
15293: ST_TO_ADDR
// uc_side := 0 ;
15294: LD_ADDR_OWVAR 20
15298: PUSH
15299: LD_INT 0
15301: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15302: LD_ADDR_OWVAR 29
15306: PUSH
15307: LD_INT 12
15309: PUSH
15310: LD_INT 12
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: ST_TO_ADDR
// hc_agressivity := 20 ;
15317: LD_ADDR_OWVAR 35
15321: PUSH
15322: LD_INT 20
15324: ST_TO_ADDR
// hc_class := class_tiger ;
15325: LD_ADDR_OWVAR 28
15329: PUSH
15330: LD_INT 14
15332: ST_TO_ADDR
// hc_gallery :=  ;
15333: LD_ADDR_OWVAR 33
15337: PUSH
15338: LD_STRING 
15340: ST_TO_ADDR
// hc_name :=  ;
15341: LD_ADDR_OWVAR 26
15345: PUSH
15346: LD_STRING 
15348: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15349: CALL_OW 44
15353: PPUSH
15354: LD_INT 0
15356: PPUSH
15357: CALL_OW 51
// end ;
15361: GO 15283
15363: POP
15364: POP
// end ;
15365: PPOPN 1
15367: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15368: LD_EXP 66
15372: PUSH
15373: LD_EXP 86
15377: AND
15378: IFFALSE 15387
15380: GO 15382
15382: DISABLE
// StreamSibBomb ;
15383: CALL 15388 0 0
15387: END
// export function StreamSibBomb ; var i , x , y ; begin
15388: LD_INT 0
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
// result := false ;
15394: LD_ADDR_VAR 0 1
15398: PUSH
15399: LD_INT 0
15401: ST_TO_ADDR
// for i := 1 to 16 do
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: DOUBLE
15408: LD_INT 1
15410: DEC
15411: ST_TO_ADDR
15412: LD_INT 16
15414: PUSH
15415: FOR_TO
15416: IFFALSE 15615
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15418: LD_ADDR_VAR 0 3
15422: PUSH
15423: LD_INT 10
15425: PUSH
15426: LD_INT 20
15428: PUSH
15429: LD_INT 30
15431: PUSH
15432: LD_INT 40
15434: PUSH
15435: LD_INT 50
15437: PUSH
15438: LD_INT 60
15440: PUSH
15441: LD_INT 70
15443: PUSH
15444: LD_INT 80
15446: PUSH
15447: LD_INT 90
15449: PUSH
15450: LD_INT 100
15452: PUSH
15453: LD_INT 110
15455: PUSH
15456: LD_INT 120
15458: PUSH
15459: LD_INT 130
15461: PUSH
15462: LD_INT 140
15464: PUSH
15465: LD_INT 150
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 1
15487: PPUSH
15488: LD_INT 15
15490: PPUSH
15491: CALL_OW 12
15495: ARRAY
15496: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15497: LD_ADDR_VAR 0 4
15501: PUSH
15502: LD_INT 10
15504: PUSH
15505: LD_INT 20
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 40
15513: PUSH
15514: LD_INT 50
15516: PUSH
15517: LD_INT 60
15519: PUSH
15520: LD_INT 70
15522: PUSH
15523: LD_INT 80
15525: PUSH
15526: LD_INT 90
15528: PUSH
15529: LD_INT 100
15531: PUSH
15532: LD_INT 110
15534: PUSH
15535: LD_INT 120
15537: PUSH
15538: LD_INT 130
15540: PUSH
15541: LD_INT 140
15543: PUSH
15544: LD_INT 150
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: PPUSH
15567: LD_INT 15
15569: PPUSH
15570: CALL_OW 12
15574: ARRAY
15575: ST_TO_ADDR
// if ValidHex ( x , y ) then
15576: LD_VAR 0 3
15580: PPUSH
15581: LD_VAR 0 4
15585: PPUSH
15586: CALL_OW 488
15590: IFFALSE 15613
// begin result := [ x , y ] ;
15592: LD_ADDR_VAR 0 1
15596: PUSH
15597: LD_VAR 0 3
15601: PUSH
15602: LD_VAR 0 4
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: ST_TO_ADDR
// break ;
15611: GO 15615
// end ; end ;
15613: GO 15415
15615: POP
15616: POP
// if result then
15617: LD_VAR 0 1
15621: IFFALSE 15681
// begin ToLua ( playSibBomb() ) ;
15623: LD_STRING playSibBomb()
15625: PPUSH
15626: CALL_OW 559
// wait ( 0 0$14 ) ;
15630: LD_INT 490
15632: PPUSH
15633: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15637: LD_VAR 0 1
15641: PUSH
15642: LD_INT 1
15644: ARRAY
15645: PPUSH
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 2
15653: ARRAY
15654: PPUSH
15655: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15659: LD_VAR 0 1
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: LD_VAR 0 1
15672: PUSH
15673: LD_INT 2
15675: ARRAY
15676: PPUSH
15677: CALL_OW 429
// end ; end ;
15681: LD_VAR 0 1
15685: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15686: LD_EXP 66
15690: PUSH
15691: LD_EXP 88
15695: AND
15696: IFFALSE 15708
15698: GO 15700
15700: DISABLE
// YouLost (  ) ;
15701: LD_STRING 
15703: PPUSH
15704: CALL_OW 104
15708: END
// every 0 0$1 trigger StreamModeActive and sFog do
15709: LD_EXP 66
15713: PUSH
15714: LD_EXP 87
15718: AND
15719: IFFALSE 15733
15721: GO 15723
15723: DISABLE
// FogOff ( your_side ) ;
15724: LD_OWVAR 2
15728: PPUSH
15729: CALL_OW 344
15733: END
// every 0 0$1 trigger StreamModeActive and sSun do
15734: LD_EXP 66
15738: PUSH
15739: LD_EXP 89
15743: AND
15744: IFFALSE 15772
15746: GO 15748
15748: DISABLE
// begin solar_recharge_percent := 0 ;
15749: LD_ADDR_OWVAR 79
15753: PUSH
15754: LD_INT 0
15756: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15757: LD_INT 10500
15759: PPUSH
15760: CALL_OW 67
// solar_recharge_percent := 100 ;
15764: LD_ADDR_OWVAR 79
15768: PUSH
15769: LD_INT 100
15771: ST_TO_ADDR
// end ;
15772: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15773: LD_EXP 66
15777: PUSH
15778: LD_EXP 90
15782: AND
15783: IFFALSE 16022
15785: GO 15787
15787: DISABLE
15788: LD_INT 0
15790: PPUSH
15791: PPUSH
15792: PPUSH
// begin tmp := [ ] ;
15793: LD_ADDR_VAR 0 3
15797: PUSH
15798: EMPTY
15799: ST_TO_ADDR
// for i := 1 to 6 do
15800: LD_ADDR_VAR 0 1
15804: PUSH
15805: DOUBLE
15806: LD_INT 1
15808: DEC
15809: ST_TO_ADDR
15810: LD_INT 6
15812: PUSH
15813: FOR_TO
15814: IFFALSE 15919
// begin uc_nation := nation_nature ;
15816: LD_ADDR_OWVAR 21
15820: PUSH
15821: LD_INT 0
15823: ST_TO_ADDR
// uc_side := 0 ;
15824: LD_ADDR_OWVAR 20
15828: PUSH
15829: LD_INT 0
15831: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15832: LD_ADDR_OWVAR 29
15836: PUSH
15837: LD_INT 12
15839: PUSH
15840: LD_INT 12
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: ST_TO_ADDR
// hc_agressivity := 20 ;
15847: LD_ADDR_OWVAR 35
15851: PUSH
15852: LD_INT 20
15854: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15855: LD_ADDR_OWVAR 28
15859: PUSH
15860: LD_INT 17
15862: ST_TO_ADDR
// hc_gallery :=  ;
15863: LD_ADDR_OWVAR 33
15867: PUSH
15868: LD_STRING 
15870: ST_TO_ADDR
// hc_name :=  ;
15871: LD_ADDR_OWVAR 26
15875: PUSH
15876: LD_STRING 
15878: ST_TO_ADDR
// un := CreateHuman ;
15879: LD_ADDR_VAR 0 2
15883: PUSH
15884: CALL_OW 44
15888: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15889: LD_VAR 0 2
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 51
// tmp := tmp ^ un ;
15901: LD_ADDR_VAR 0 3
15905: PUSH
15906: LD_VAR 0 3
15910: PUSH
15911: LD_VAR 0 2
15915: ADD
15916: ST_TO_ADDR
// end ;
15917: GO 15813
15919: POP
15920: POP
// repeat wait ( 0 0$1 ) ;
15921: LD_INT 35
15923: PPUSH
15924: CALL_OW 67
// for un in tmp do
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_VAR 0 3
15937: PUSH
15938: FOR_IN
15939: IFFALSE 16013
// begin if IsDead ( un ) then
15941: LD_VAR 0 2
15945: PPUSH
15946: CALL_OW 301
15950: IFFALSE 15970
// begin tmp := tmp diff un ;
15952: LD_ADDR_VAR 0 3
15956: PUSH
15957: LD_VAR 0 3
15961: PUSH
15962: LD_VAR 0 2
15966: DIFF
15967: ST_TO_ADDR
// continue ;
15968: GO 15938
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15970: LD_VAR 0 2
15974: PPUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 22
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: PPUSH
15997: LD_VAR 0 2
16001: PPUSH
16002: CALL_OW 74
16006: PPUSH
16007: CALL_OW 115
// end ;
16011: GO 15938
16013: POP
16014: POP
// until not tmp ;
16015: LD_VAR 0 3
16019: NOT
16020: IFFALSE 15921
// end ;
16022: PPOPN 3
16024: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16025: LD_EXP 66
16029: PUSH
16030: LD_EXP 91
16034: AND
16035: IFFALSE 16089
16037: GO 16039
16039: DISABLE
// begin ToLua ( displayTroll(); ) ;
16040: LD_STRING displayTroll();
16042: PPUSH
16043: CALL_OW 559
// wait ( 3 3$00 ) ;
16047: LD_INT 6300
16049: PPUSH
16050: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16054: LD_STRING hideTroll();
16056: PPUSH
16057: CALL_OW 559
// wait ( 1 1$00 ) ;
16061: LD_INT 2100
16063: PPUSH
16064: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16068: LD_STRING displayTroll();
16070: PPUSH
16071: CALL_OW 559
// wait ( 1 1$00 ) ;
16075: LD_INT 2100
16077: PPUSH
16078: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16082: LD_STRING hideTroll();
16084: PPUSH
16085: CALL_OW 559
// end ;
16089: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16090: LD_EXP 66
16094: PUSH
16095: LD_EXP 92
16099: AND
16100: IFFALSE 16163
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
// begin p := 0 ;
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: LD_INT 0
16115: ST_TO_ADDR
// repeat game_speed := 1 ;
16116: LD_ADDR_OWVAR 65
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16124: LD_INT 35
16126: PPUSH
16127: CALL_OW 67
// p := p + 1 ;
16131: LD_ADDR_VAR 0 1
16135: PUSH
16136: LD_VAR 0 1
16140: PUSH
16141: LD_INT 1
16143: PLUS
16144: ST_TO_ADDR
// until p >= 60 ;
16145: LD_VAR 0 1
16149: PUSH
16150: LD_INT 60
16152: GREATEREQUAL
16153: IFFALSE 16116
// game_speed := 4 ;
16155: LD_ADDR_OWVAR 65
16159: PUSH
16160: LD_INT 4
16162: ST_TO_ADDR
// end ;
16163: PPOPN 1
16165: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16166: LD_EXP 66
16170: PUSH
16171: LD_EXP 93
16175: AND
16176: IFFALSE 16322
16178: GO 16180
16180: DISABLE
16181: LD_INT 0
16183: PPUSH
16184: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16185: LD_ADDR_VAR 0 1
16189: PUSH
16190: LD_INT 22
16192: PUSH
16193: LD_OWVAR 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 2
16204: PUSH
16205: LD_INT 30
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 30
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: ST_TO_ADDR
// if not depot then
16239: LD_VAR 0 1
16243: NOT
16244: IFFALSE 16248
// exit ;
16246: GO 16322
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16248: LD_ADDR_VAR 0 2
16252: PUSH
16253: LD_VAR 0 1
16257: PUSH
16258: LD_INT 1
16260: PPUSH
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 12
16270: ARRAY
16271: PPUSH
16272: CALL_OW 274
16276: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16277: LD_VAR 0 2
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: LD_INT 0
16287: PPUSH
16288: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16292: LD_VAR 0 2
16296: PPUSH
16297: LD_INT 2
16299: PPUSH
16300: LD_INT 0
16302: PPUSH
16303: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16307: LD_VAR 0 2
16311: PPUSH
16312: LD_INT 3
16314: PPUSH
16315: LD_INT 0
16317: PPUSH
16318: CALL_OW 277
// end ;
16322: PPOPN 2
16324: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16325: LD_EXP 66
16329: PUSH
16330: LD_EXP 94
16334: AND
16335: IFFALSE 16432
16337: GO 16339
16339: DISABLE
16340: LD_INT 0
16342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16343: LD_ADDR_VAR 0 1
16347: PUSH
16348: LD_INT 22
16350: PUSH
16351: LD_OWVAR 2
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 21
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 3
16372: PUSH
16373: LD_INT 23
16375: PUSH
16376: LD_INT 0
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: PPUSH
16392: CALL_OW 69
16396: ST_TO_ADDR
// if not tmp then
16397: LD_VAR 0 1
16401: NOT
16402: IFFALSE 16406
// exit ;
16404: GO 16432
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16406: LD_VAR 0 1
16410: PUSH
16411: LD_INT 1
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 12
16423: ARRAY
16424: PPUSH
16425: LD_INT 200
16427: PPUSH
16428: CALL_OW 234
// end ;
16432: PPOPN 1
16434: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16435: LD_EXP 66
16439: PUSH
16440: LD_EXP 95
16444: AND
16445: IFFALSE 16524
16447: GO 16449
16449: DISABLE
16450: LD_INT 0
16452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16453: LD_ADDR_VAR 0 1
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_OWVAR 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 21
16472: PUSH
16473: LD_INT 2
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: ST_TO_ADDR
// if not tmp then
16489: LD_VAR 0 1
16493: NOT
16494: IFFALSE 16498
// exit ;
16496: GO 16524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16498: LD_VAR 0 1
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 12
16515: ARRAY
16516: PPUSH
16517: LD_INT 60
16519: PPUSH
16520: CALL_OW 234
// end ;
16524: PPOPN 1
16526: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16527: LD_EXP 66
16531: PUSH
16532: LD_EXP 96
16536: AND
16537: IFFALSE 16636
16539: GO 16541
16541: DISABLE
16542: LD_INT 0
16544: PPUSH
16545: PPUSH
// begin enable ;
16546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16547: LD_ADDR_VAR 0 1
16551: PUSH
16552: LD_INT 22
16554: PUSH
16555: LD_OWVAR 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 61
16566: PUSH
16567: EMPTY
16568: LIST
16569: PUSH
16570: LD_INT 33
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: ST_TO_ADDR
// if not tmp then
16590: LD_VAR 0 1
16594: NOT
16595: IFFALSE 16599
// exit ;
16597: GO 16636
// for i in tmp do
16599: LD_ADDR_VAR 0 2
16603: PUSH
16604: LD_VAR 0 1
16608: PUSH
16609: FOR_IN
16610: IFFALSE 16634
// if IsControledBy ( i ) then
16612: LD_VAR 0 2
16616: PPUSH
16617: CALL_OW 312
16621: IFFALSE 16632
// ComUnlink ( i ) ;
16623: LD_VAR 0 2
16627: PPUSH
16628: CALL_OW 136
16632: GO 16609
16634: POP
16635: POP
// end ;
16636: PPOPN 2
16638: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16639: LD_EXP 66
16643: PUSH
16644: LD_EXP 97
16648: AND
16649: IFFALSE 16789
16651: GO 16653
16653: DISABLE
16654: LD_INT 0
16656: PPUSH
16657: PPUSH
// begin ToLua ( displayPowell(); ) ;
16658: LD_STRING displayPowell();
16660: PPUSH
16661: CALL_OW 559
// uc_side := 0 ;
16665: LD_ADDR_OWVAR 20
16669: PUSH
16670: LD_INT 0
16672: ST_TO_ADDR
// uc_nation := 2 ;
16673: LD_ADDR_OWVAR 21
16677: PUSH
16678: LD_INT 2
16680: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16681: LD_ADDR_OWVAR 37
16685: PUSH
16686: LD_INT 14
16688: ST_TO_ADDR
// vc_engine := engine_siberite ;
16689: LD_ADDR_OWVAR 39
16693: PUSH
16694: LD_INT 3
16696: ST_TO_ADDR
// vc_control := control_apeman ;
16697: LD_ADDR_OWVAR 38
16701: PUSH
16702: LD_INT 5
16704: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16705: LD_ADDR_OWVAR 40
16709: PUSH
16710: LD_INT 29
16712: ST_TO_ADDR
// un := CreateVehicle ;
16713: LD_ADDR_VAR 0 2
16717: PUSH
16718: CALL_OW 45
16722: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16723: LD_VAR 0 2
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16735: LD_INT 35
16737: PPUSH
16738: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 22
16749: PUSH
16750: LD_OWVAR 2
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PPUSH
16759: CALL_OW 69
16763: PPUSH
16764: LD_VAR 0 2
16768: PPUSH
16769: CALL_OW 74
16773: PPUSH
16774: CALL_OW 115
// until IsDead ( un ) ;
16778: LD_VAR 0 2
16782: PPUSH
16783: CALL_OW 301
16787: IFFALSE 16735
// end ;
16789: PPOPN 2
16791: END
// every 0 0$1 trigger StreamModeActive and sStu do
16792: LD_EXP 66
16796: PUSH
16797: LD_EXP 105
16801: AND
16802: IFFALSE 16818
16804: GO 16806
16806: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16807: LD_STRING displayStucuk();
16809: PPUSH
16810: CALL_OW 559
// ResetFog ;
16814: CALL_OW 335
// end ;
16818: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16819: LD_EXP 66
16823: PUSH
16824: LD_EXP 98
16828: AND
16829: IFFALSE 16970
16831: GO 16833
16833: DISABLE
16834: LD_INT 0
16836: PPUSH
16837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16838: LD_ADDR_VAR 0 2
16842: PUSH
16843: LD_INT 22
16845: PUSH
16846: LD_OWVAR 2
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 21
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PPUSH
16869: CALL_OW 69
16873: ST_TO_ADDR
// if not tmp then
16874: LD_VAR 0 2
16878: NOT
16879: IFFALSE 16883
// exit ;
16881: GO 16970
// un := tmp [ rand ( 1 , tmp ) ] ;
16883: LD_ADDR_VAR 0 1
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_INT 1
16895: PPUSH
16896: LD_VAR 0 2
16900: PPUSH
16901: CALL_OW 12
16905: ARRAY
16906: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_INT 0
16914: PPUSH
16915: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16919: LD_VAR 0 1
16923: PPUSH
16924: LD_OWVAR 3
16928: PUSH
16929: LD_VAR 0 1
16933: DIFF
16934: PPUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 74
16944: PPUSH
16945: CALL_OW 115
// wait ( 0 0$20 ) ;
16949: LD_INT 700
16951: PPUSH
16952: CALL_OW 67
// SetSide ( un , your_side ) ;
16956: LD_VAR 0 1
16960: PPUSH
16961: LD_OWVAR 2
16965: PPUSH
16966: CALL_OW 235
// end ;
16970: PPOPN 2
16972: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16973: LD_EXP 66
16977: PUSH
16978: LD_EXP 99
16982: AND
16983: IFFALSE 17089
16985: GO 16987
16987: DISABLE
16988: LD_INT 0
16990: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16991: LD_ADDR_VAR 0 1
16995: PUSH
16996: LD_INT 22
16998: PUSH
16999: LD_OWVAR 2
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 30
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 30
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: ST_TO_ADDR
// if not depot then
17045: LD_VAR 0 1
17049: NOT
17050: IFFALSE 17054
// exit ;
17052: GO 17089
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17054: LD_VAR 0 1
17058: PUSH
17059: LD_INT 1
17061: ARRAY
17062: PPUSH
17063: CALL_OW 250
17067: PPUSH
17068: LD_VAR 0 1
17072: PUSH
17073: LD_INT 1
17075: ARRAY
17076: PPUSH
17077: CALL_OW 251
17081: PPUSH
17082: LD_INT 70
17084: PPUSH
17085: CALL_OW 495
// end ;
17089: PPOPN 1
17091: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17092: LD_EXP 66
17096: PUSH
17097: LD_EXP 100
17101: AND
17102: IFFALSE 17313
17104: GO 17106
17106: DISABLE
17107: LD_INT 0
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17114: LD_ADDR_VAR 0 5
17118: PUSH
17119: LD_INT 22
17121: PUSH
17122: LD_OWVAR 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 21
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 69
17149: ST_TO_ADDR
// if not tmp then
17150: LD_VAR 0 5
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17313
// for i in tmp do
17159: LD_ADDR_VAR 0 1
17163: PUSH
17164: LD_VAR 0 5
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17311
// begin d := rand ( 0 , 5 ) ;
17172: LD_ADDR_VAR 0 4
17176: PUSH
17177: LD_INT 0
17179: PPUSH
17180: LD_INT 5
17182: PPUSH
17183: CALL_OW 12
17187: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17188: LD_ADDR_VAR 0 2
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 250
17202: PPUSH
17203: LD_VAR 0 4
17207: PPUSH
17208: LD_INT 3
17210: PPUSH
17211: LD_INT 12
17213: PPUSH
17214: CALL_OW 12
17218: PPUSH
17219: CALL_OW 272
17223: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17224: LD_ADDR_VAR 0 3
17228: PUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 251
17238: PPUSH
17239: LD_VAR 0 4
17243: PPUSH
17244: LD_INT 3
17246: PPUSH
17247: LD_INT 12
17249: PPUSH
17250: CALL_OW 12
17254: PPUSH
17255: CALL_OW 273
17259: ST_TO_ADDR
// if ValidHex ( x , y ) then
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: CALL_OW 488
17274: IFFALSE 17309
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17276: LD_VAR 0 1
17280: PPUSH
17281: LD_VAR 0 2
17285: PPUSH
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 3
17293: PPUSH
17294: LD_INT 6
17296: PPUSH
17297: CALL_OW 12
17301: PPUSH
17302: LD_INT 1
17304: PPUSH
17305: CALL_OW 483
// end ;
17309: GO 17169
17311: POP
17312: POP
// end ;
17313: PPOPN 5
17315: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17316: LD_EXP 66
17320: PUSH
17321: LD_EXP 101
17325: AND
17326: IFFALSE 17420
17328: GO 17330
17330: DISABLE
17331: LD_INT 0
17333: PPUSH
17334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_INT 22
17342: PUSH
17343: LD_OWVAR 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 32
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 21
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: ST_TO_ADDR
// if not tmp then
17382: LD_VAR 0 2
17386: NOT
17387: IFFALSE 17391
// exit ;
17389: GO 17420
// for i in tmp do
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: LD_VAR 0 2
17400: PUSH
17401: FOR_IN
17402: IFFALSE 17418
// SetFuel ( i , 0 ) ;
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_INT 0
17411: PPUSH
17412: CALL_OW 240
17416: GO 17401
17418: POP
17419: POP
// end ;
17420: PPOPN 2
17422: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17423: LD_EXP 66
17427: PUSH
17428: LD_EXP 102
17432: AND
17433: IFFALSE 17499
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_INT 22
17448: PUSH
17449: LD_OWVAR 2
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 30
17460: PUSH
17461: LD_INT 29
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PPUSH
17472: CALL_OW 69
17476: ST_TO_ADDR
// if not tmp then
17477: LD_VAR 0 1
17481: NOT
17482: IFFALSE 17486
// exit ;
17484: GO 17499
// DestroyUnit ( tmp [ 1 ] ) ;
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 1
17493: ARRAY
17494: PPUSH
17495: CALL_OW 65
// end ;
17499: PPOPN 1
17501: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17502: LD_EXP 66
17506: PUSH
17507: LD_EXP 104
17511: AND
17512: IFFALSE 17641
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
// begin uc_side := 0 ;
17520: LD_ADDR_OWVAR 20
17524: PUSH
17525: LD_INT 0
17527: ST_TO_ADDR
// uc_nation := nation_arabian ;
17528: LD_ADDR_OWVAR 21
17532: PUSH
17533: LD_INT 2
17535: ST_TO_ADDR
// hc_gallery :=  ;
17536: LD_ADDR_OWVAR 33
17540: PUSH
17541: LD_STRING 
17543: ST_TO_ADDR
// hc_name :=  ;
17544: LD_ADDR_OWVAR 26
17548: PUSH
17549: LD_STRING 
17551: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17552: LD_INT 1
17554: PPUSH
17555: LD_INT 11
17557: PPUSH
17558: LD_INT 10
17560: PPUSH
17561: CALL_OW 380
// un := CreateHuman ;
17565: LD_ADDR_VAR 0 1
17569: PUSH
17570: CALL_OW 44
17574: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17575: LD_VAR 0 1
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17594: LD_VAR 0 1
17598: PPUSH
17599: LD_INT 22
17601: PUSH
17602: LD_OWVAR 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: PPUSH
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 74
17625: PPUSH
17626: CALL_OW 115
// until IsDead ( un ) ;
17630: LD_VAR 0 1
17634: PPUSH
17635: CALL_OW 301
17639: IFFALSE 17587
// end ;
17641: PPOPN 1
17643: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17644: LD_EXP 66
17648: PUSH
17649: LD_EXP 106
17653: AND
17654: IFFALSE 17666
17656: GO 17658
17658: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17659: LD_STRING earthquake(getX(game), 0, 32)
17661: PPUSH
17662: CALL_OW 559
17666: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17667: LD_EXP 66
17671: PUSH
17672: LD_EXP 107
17676: AND
17677: IFFALSE 17768
17679: GO 17681
17681: DISABLE
17682: LD_INT 0
17684: PPUSH
// begin enable ;
17685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17686: LD_ADDR_VAR 0 1
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 2
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 33
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: PPUSH
17728: CALL_OW 69
17732: ST_TO_ADDR
// if not tmp then
17733: LD_VAR 0 1
17737: NOT
17738: IFFALSE 17742
// exit ;
17740: GO 17768
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17742: LD_VAR 0 1
17746: PUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_VAR 0 1
17754: PPUSH
17755: CALL_OW 12
17759: ARRAY
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 234
// end ;
17768: PPOPN 1
17770: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17771: LD_EXP 66
17775: PUSH
17776: LD_EXP 108
17780: AND
17781: IFFALSE 17922
17783: GO 17785
17785: DISABLE
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
17790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17791: LD_ADDR_VAR 0 3
17795: PUSH
17796: LD_INT 22
17798: PUSH
17799: LD_OWVAR 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 25
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: ST_TO_ADDR
// if not tmp then
17827: LD_VAR 0 3
17831: NOT
17832: IFFALSE 17836
// exit ;
17834: GO 17922
// un := tmp [ rand ( 1 , tmp ) ] ;
17836: LD_ADDR_VAR 0 2
17840: PUSH
17841: LD_VAR 0 3
17845: PUSH
17846: LD_INT 1
17848: PPUSH
17849: LD_VAR 0 3
17853: PPUSH
17854: CALL_OW 12
17858: ARRAY
17859: ST_TO_ADDR
// if Crawls ( un ) then
17860: LD_VAR 0 2
17864: PPUSH
17865: CALL_OW 318
17869: IFFALSE 17880
// ComWalk ( un ) ;
17871: LD_VAR 0 2
17875: PPUSH
17876: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17880: LD_VAR 0 2
17884: PPUSH
17885: LD_INT 9
17887: PPUSH
17888: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17892: LD_INT 28
17894: PPUSH
17895: LD_OWVAR 2
17899: PPUSH
17900: LD_INT 2
17902: PPUSH
17903: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17907: LD_INT 29
17909: PPUSH
17910: LD_OWVAR 2
17914: PPUSH
17915: LD_INT 2
17917: PPUSH
17918: CALL_OW 322
// end ;
17922: PPOPN 3
17924: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17925: LD_EXP 66
17929: PUSH
17930: LD_EXP 109
17934: AND
17935: IFFALSE 18046
17937: GO 17939
17939: DISABLE
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
17944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17945: LD_ADDR_VAR 0 3
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 25
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: ST_TO_ADDR
// if not tmp then
17981: LD_VAR 0 3
17985: NOT
17986: IFFALSE 17990
// exit ;
17988: GO 18046
// un := tmp [ rand ( 1 , tmp ) ] ;
17990: LD_ADDR_VAR 0 2
17994: PUSH
17995: LD_VAR 0 3
17999: PUSH
18000: LD_INT 1
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: CALL_OW 12
18012: ARRAY
18013: ST_TO_ADDR
// if Crawls ( un ) then
18014: LD_VAR 0 2
18018: PPUSH
18019: CALL_OW 318
18023: IFFALSE 18034
// ComWalk ( un ) ;
18025: LD_VAR 0 2
18029: PPUSH
18030: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_INT 8
18041: PPUSH
18042: CALL_OW 336
// end ;
18046: PPOPN 3
18048: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18049: LD_EXP 66
18053: PUSH
18054: LD_EXP 110
18058: AND
18059: IFFALSE 18203
18061: GO 18063
18063: DISABLE
18064: LD_INT 0
18066: PPUSH
18067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18068: LD_ADDR_VAR 0 2
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_OWVAR 2
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 21
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 34
18100: PUSH
18101: LD_INT 12
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 34
18110: PUSH
18111: LD_INT 51
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 34
18120: PUSH
18121: LD_INT 32
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: ST_TO_ADDR
// if not tmp then
18144: LD_VAR 0 2
18148: NOT
18149: IFFALSE 18153
// exit ;
18151: GO 18203
// for i in tmp do
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_VAR 0 2
18162: PUSH
18163: FOR_IN
18164: IFFALSE 18201
// if GetCargo ( i , mat_artifact ) = 0 then
18166: LD_VAR 0 1
18170: PPUSH
18171: LD_INT 4
18173: PPUSH
18174: CALL_OW 289
18178: PUSH
18179: LD_INT 0
18181: EQUAL
18182: IFFALSE 18199
// SetCargo ( i , mat_siberit , 100 ) ;
18184: LD_VAR 0 1
18188: PPUSH
18189: LD_INT 3
18191: PPUSH
18192: LD_INT 100
18194: PPUSH
18195: CALL_OW 290
18199: GO 18163
18201: POP
18202: POP
// end ;
18203: PPOPN 2
18205: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18206: LD_EXP 66
18210: PUSH
18211: LD_EXP 111
18215: AND
18216: IFFALSE 18399
18218: GO 18220
18220: DISABLE
18221: LD_INT 0
18223: PPUSH
18224: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18225: LD_ADDR_VAR 0 2
18229: PUSH
18230: LD_INT 22
18232: PUSH
18233: LD_OWVAR 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PPUSH
18242: CALL_OW 69
18246: ST_TO_ADDR
// if not tmp then
18247: LD_VAR 0 2
18251: NOT
18252: IFFALSE 18256
// exit ;
18254: GO 18399
// for i := 1 to 2 do
18256: LD_ADDR_VAR 0 1
18260: PUSH
18261: DOUBLE
18262: LD_INT 1
18264: DEC
18265: ST_TO_ADDR
18266: LD_INT 2
18268: PUSH
18269: FOR_TO
18270: IFFALSE 18397
// begin uc_side := your_side ;
18272: LD_ADDR_OWVAR 20
18276: PUSH
18277: LD_OWVAR 2
18281: ST_TO_ADDR
// uc_nation := nation_american ;
18282: LD_ADDR_OWVAR 21
18286: PUSH
18287: LD_INT 1
18289: ST_TO_ADDR
// vc_chassis := us_morphling ;
18290: LD_ADDR_OWVAR 37
18294: PUSH
18295: LD_INT 5
18297: ST_TO_ADDR
// vc_engine := engine_siberite ;
18298: LD_ADDR_OWVAR 39
18302: PUSH
18303: LD_INT 3
18305: ST_TO_ADDR
// vc_control := control_computer ;
18306: LD_ADDR_OWVAR 38
18310: PUSH
18311: LD_INT 3
18313: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18314: LD_ADDR_OWVAR 40
18318: PUSH
18319: LD_INT 10
18321: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18322: LD_VAR 0 2
18326: PUSH
18327: LD_INT 1
18329: ARRAY
18330: PPUSH
18331: CALL_OW 310
18335: NOT
18336: IFFALSE 18383
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18338: CALL_OW 45
18342: PPUSH
18343: LD_VAR 0 2
18347: PUSH
18348: LD_INT 1
18350: ARRAY
18351: PPUSH
18352: CALL_OW 250
18356: PPUSH
18357: LD_VAR 0 2
18361: PUSH
18362: LD_INT 1
18364: ARRAY
18365: PPUSH
18366: CALL_OW 251
18370: PPUSH
18371: LD_INT 12
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 50
18381: GO 18395
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18383: CALL_OW 45
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL_OW 51
// end ;
18395: GO 18269
18397: POP
18398: POP
// end ;
18399: PPOPN 2
18401: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18402: LD_EXP 66
18406: PUSH
18407: LD_EXP 112
18411: AND
18412: IFFALSE 18634
18414: GO 18416
18416: DISABLE
18417: LD_INT 0
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18425: LD_ADDR_VAR 0 6
18429: PUSH
18430: LD_INT 22
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 3
18454: PUSH
18455: LD_INT 23
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 6
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18634
// s1 := rand ( 1 , 4 ) ;
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_INT 1
18495: PPUSH
18496: LD_INT 4
18498: PPUSH
18499: CALL_OW 12
18503: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18504: LD_ADDR_VAR 0 4
18508: PUSH
18509: LD_VAR 0 6
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: LD_VAR 0 2
18522: PPUSH
18523: CALL_OW 259
18527: ST_TO_ADDR
// if s1 = 1 then
18528: LD_VAR 0 2
18532: PUSH
18533: LD_INT 1
18535: EQUAL
18536: IFFALSE 18556
// s2 := rand ( 2 , 4 ) else
18538: LD_ADDR_VAR 0 3
18542: PUSH
18543: LD_INT 2
18545: PPUSH
18546: LD_INT 4
18548: PPUSH
18549: CALL_OW 12
18553: ST_TO_ADDR
18554: GO 18564
// s2 := 1 ;
18556: LD_ADDR_VAR 0 3
18560: PUSH
18561: LD_INT 1
18563: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18564: LD_ADDR_VAR 0 5
18568: PUSH
18569: LD_VAR 0 6
18573: PUSH
18574: LD_INT 1
18576: ARRAY
18577: PPUSH
18578: LD_VAR 0 3
18582: PPUSH
18583: CALL_OW 259
18587: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18588: LD_VAR 0 6
18592: PUSH
18593: LD_INT 1
18595: ARRAY
18596: PPUSH
18597: LD_VAR 0 2
18601: PPUSH
18602: LD_VAR 0 5
18606: PPUSH
18607: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18611: LD_VAR 0 6
18615: PUSH
18616: LD_INT 1
18618: ARRAY
18619: PPUSH
18620: LD_VAR 0 3
18624: PPUSH
18625: LD_VAR 0 4
18629: PPUSH
18630: CALL_OW 237
// end ;
18634: PPOPN 6
18636: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18637: LD_EXP 66
18641: PUSH
18642: LD_EXP 113
18646: AND
18647: IFFALSE 18726
18649: GO 18651
18651: DISABLE
18652: LD_INT 0
18654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18655: LD_ADDR_VAR 0 1
18659: PUSH
18660: LD_INT 22
18662: PUSH
18663: LD_OWVAR 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 30
18674: PUSH
18675: LD_INT 3
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PPUSH
18686: CALL_OW 69
18690: ST_TO_ADDR
// if not tmp then
18691: LD_VAR 0 1
18695: NOT
18696: IFFALSE 18700
// exit ;
18698: GO 18726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18700: LD_VAR 0 1
18704: PUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_VAR 0 1
18712: PPUSH
18713: CALL_OW 12
18717: ARRAY
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL_OW 234
// end ;
18726: PPOPN 1
18728: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18729: LD_EXP 66
18733: PUSH
18734: LD_EXP 114
18738: AND
18739: IFFALSE 18851
18741: GO 18743
18743: DISABLE
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18748: LD_ADDR_VAR 0 2
18752: PUSH
18753: LD_INT 22
18755: PUSH
18756: LD_OWVAR 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 27
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 30
18780: PUSH
18781: LD_INT 26
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 30
18790: PUSH
18791: LD_INT 28
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: ST_TO_ADDR
// if not tmp then
18813: LD_VAR 0 2
18817: NOT
18818: IFFALSE 18822
// exit ;
18820: GO 18851
// for i in tmp do
18822: LD_ADDR_VAR 0 1
18826: PUSH
18827: LD_VAR 0 2
18831: PUSH
18832: FOR_IN
18833: IFFALSE 18849
// SetLives ( i , 1 ) ;
18835: LD_VAR 0 1
18839: PPUSH
18840: LD_INT 1
18842: PPUSH
18843: CALL_OW 234
18847: GO 18832
18849: POP
18850: POP
// end ;
18851: PPOPN 2
18853: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18854: LD_EXP 66
18858: PUSH
18859: LD_EXP 115
18863: AND
18864: IFFALSE 19138
18866: GO 18868
18868: DISABLE
18869: LD_INT 0
18871: PPUSH
18872: PPUSH
18873: PPUSH
// begin i := rand ( 1 , 7 ) ;
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_INT 1
18881: PPUSH
18882: LD_INT 7
18884: PPUSH
18885: CALL_OW 12
18889: ST_TO_ADDR
// case i of 1 :
18890: LD_VAR 0 1
18894: PUSH
18895: LD_INT 1
18897: DOUBLE
18898: EQUAL
18899: IFTRUE 18903
18901: GO 18913
18903: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18904: LD_STRING earthquake(getX(game), 0, 32)
18906: PPUSH
18907: CALL_OW 559
18911: GO 19138
18913: LD_INT 2
18915: DOUBLE
18916: EQUAL
18917: IFTRUE 18921
18919: GO 18935
18921: POP
// begin ToLua ( displayStucuk(); ) ;
18922: LD_STRING displayStucuk();
18924: PPUSH
18925: CALL_OW 559
// ResetFog ;
18929: CALL_OW 335
// end ; 3 :
18933: GO 19138
18935: LD_INT 3
18937: DOUBLE
18938: EQUAL
18939: IFTRUE 18943
18941: GO 19047
18943: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18944: LD_ADDR_VAR 0 2
18948: PUSH
18949: LD_INT 22
18951: PUSH
18952: LD_OWVAR 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 25
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PPUSH
18975: CALL_OW 69
18979: ST_TO_ADDR
// if not tmp then
18980: LD_VAR 0 2
18984: NOT
18985: IFFALSE 18989
// exit ;
18987: GO 19138
// un := tmp [ rand ( 1 , tmp ) ] ;
18989: LD_ADDR_VAR 0 3
18993: PUSH
18994: LD_VAR 0 2
18998: PUSH
18999: LD_INT 1
19001: PPUSH
19002: LD_VAR 0 2
19006: PPUSH
19007: CALL_OW 12
19011: ARRAY
19012: ST_TO_ADDR
// if Crawls ( un ) then
19013: LD_VAR 0 3
19017: PPUSH
19018: CALL_OW 318
19022: IFFALSE 19033
// ComWalk ( un ) ;
19024: LD_VAR 0 3
19028: PPUSH
19029: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19033: LD_VAR 0 3
19037: PPUSH
19038: LD_INT 8
19040: PPUSH
19041: CALL_OW 336
// end ; 4 :
19045: GO 19138
19047: LD_INT 4
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19116
19055: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_OWVAR 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 30
19075: PUSH
19076: LD_INT 29
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PPUSH
19087: CALL_OW 69
19091: ST_TO_ADDR
// if not tmp then
19092: LD_VAR 0 2
19096: NOT
19097: IFFALSE 19101
// exit ;
19099: GO 19138
// DestroyUnit ( tmp [ 1 ] ) ;
19101: LD_VAR 0 2
19105: PUSH
19106: LD_INT 1
19108: ARRAY
19109: PPUSH
19110: CALL_OW 65
// end ; 5 .. 7 :
19114: GO 19138
19116: LD_INT 5
19118: DOUBLE
19119: GREATEREQUAL
19120: IFFALSE 19128
19122: LD_INT 7
19124: DOUBLE
19125: LESSEQUAL
19126: IFTRUE 19130
19128: GO 19137
19130: POP
// StreamSibBomb ; end ;
19131: CALL 15388 0 0
19135: GO 19138
19137: POP
// end ;
19138: PPOPN 3
19140: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19141: LD_EXP 66
19145: PUSH
19146: LD_EXP 116
19150: AND
19151: IFFALSE 19307
19153: GO 19155
19155: DISABLE
19156: LD_INT 0
19158: PPUSH
19159: PPUSH
19160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19161: LD_ADDR_VAR 0 2
19165: PUSH
19166: LD_INT 81
19168: PUSH
19169: LD_OWVAR 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 2
19180: PUSH
19181: LD_INT 21
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 21
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 69
19214: ST_TO_ADDR
// if not tmp then
19215: LD_VAR 0 2
19219: NOT
19220: IFFALSE 19224
// exit ;
19222: GO 19307
// p := 0 ;
19224: LD_ADDR_VAR 0 3
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19232: LD_INT 35
19234: PPUSH
19235: CALL_OW 67
// p := p + 1 ;
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_VAR 0 3
19248: PUSH
19249: LD_INT 1
19251: PLUS
19252: ST_TO_ADDR
// for i in tmp do
19253: LD_ADDR_VAR 0 1
19257: PUSH
19258: LD_VAR 0 2
19262: PUSH
19263: FOR_IN
19264: IFFALSE 19295
// if GetLives ( i ) < 1000 then
19266: LD_VAR 0 1
19270: PPUSH
19271: CALL_OW 256
19275: PUSH
19276: LD_INT 1000
19278: LESS
19279: IFFALSE 19293
// SetLives ( i , 1000 ) ;
19281: LD_VAR 0 1
19285: PPUSH
19286: LD_INT 1000
19288: PPUSH
19289: CALL_OW 234
19293: GO 19263
19295: POP
19296: POP
// until p > 20 ;
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 20
19304: GREATER
19305: IFFALSE 19232
// end ;
19307: PPOPN 3
19309: END
// every 0 0$1 trigger StreamModeActive and sTime do
19310: LD_EXP 66
19314: PUSH
19315: LD_EXP 117
19319: AND
19320: IFFALSE 19355
19322: GO 19324
19324: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19325: LD_INT 28
19327: PPUSH
19328: LD_OWVAR 2
19332: PPUSH
19333: LD_INT 2
19335: PPUSH
19336: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19340: LD_INT 30
19342: PPUSH
19343: LD_OWVAR 2
19347: PPUSH
19348: LD_INT 2
19350: PPUSH
19351: CALL_OW 322
// end ;
19355: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19356: LD_EXP 66
19360: PUSH
19361: LD_EXP 118
19365: AND
19366: IFFALSE 19487
19368: GO 19370
19370: DISABLE
19371: LD_INT 0
19373: PPUSH
19374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19375: LD_ADDR_VAR 0 2
19379: PUSH
19380: LD_INT 22
19382: PUSH
19383: LD_OWVAR 2
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 21
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: LD_INT 23
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: LIST
19423: PPUSH
19424: CALL_OW 69
19428: ST_TO_ADDR
// if not tmp then
19429: LD_VAR 0 2
19433: NOT
19434: IFFALSE 19438
// exit ;
19436: GO 19487
// for i in tmp do
19438: LD_ADDR_VAR 0 1
19442: PUSH
19443: LD_VAR 0 2
19447: PUSH
19448: FOR_IN
19449: IFFALSE 19485
// begin if Crawls ( i ) then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 318
19460: IFFALSE 19471
// ComWalk ( i ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 138
// SetClass ( i , 2 ) ;
19471: LD_VAR 0 1
19475: PPUSH
19476: LD_INT 2
19478: PPUSH
19479: CALL_OW 336
// end ;
19483: GO 19448
19485: POP
19486: POP
// end ;
19487: PPOPN 2
19489: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19490: LD_EXP 66
19494: PUSH
19495: LD_EXP 119
19499: AND
19500: IFFALSE 19781
19502: GO 19504
19504: DISABLE
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19510: LD_OWVAR 2
19514: PPUSH
19515: LD_INT 9
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: LD_INT 1
19523: PPUSH
19524: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19528: LD_INT 9
19530: PPUSH
19531: LD_OWVAR 2
19535: PPUSH
19536: CALL_OW 343
// uc_side := 9 ;
19540: LD_ADDR_OWVAR 20
19544: PUSH
19545: LD_INT 9
19547: ST_TO_ADDR
// uc_nation := 2 ;
19548: LD_ADDR_OWVAR 21
19552: PUSH
19553: LD_INT 2
19555: ST_TO_ADDR
// hc_name := Dark Warrior ;
19556: LD_ADDR_OWVAR 26
19560: PUSH
19561: LD_STRING Dark Warrior
19563: ST_TO_ADDR
// hc_gallery :=  ;
19564: LD_ADDR_OWVAR 33
19568: PUSH
19569: LD_STRING 
19571: ST_TO_ADDR
// hc_noskilllimit := true ;
19572: LD_ADDR_OWVAR 76
19576: PUSH
19577: LD_INT 1
19579: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19580: LD_ADDR_OWVAR 31
19584: PUSH
19585: LD_INT 30
19587: PUSH
19588: LD_INT 30
19590: PUSH
19591: LD_INT 30
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: ST_TO_ADDR
// un := CreateHuman ;
19603: LD_ADDR_VAR 0 3
19607: PUSH
19608: CALL_OW 44
19612: ST_TO_ADDR
// hc_noskilllimit := false ;
19613: LD_ADDR_OWVAR 76
19617: PUSH
19618: LD_INT 0
19620: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19621: LD_VAR 0 3
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: CALL_OW 51
// p := 0 ;
19633: LD_ADDR_VAR 0 2
19637: PUSH
19638: LD_INT 0
19640: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19641: LD_INT 35
19643: PPUSH
19644: CALL_OW 67
// p := p + 1 ;
19648: LD_ADDR_VAR 0 2
19652: PUSH
19653: LD_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: PLUS
19661: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19662: LD_VAR 0 3
19666: PPUSH
19667: CALL_OW 256
19671: PUSH
19672: LD_INT 1000
19674: LESS
19675: IFFALSE 19689
// SetLives ( un , 1000 ) ;
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_INT 1000
19684: PPUSH
19685: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19689: LD_VAR 0 3
19693: PPUSH
19694: LD_INT 81
19696: PUSH
19697: LD_OWVAR 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 91
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_INT 30
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: PPUSH
19731: LD_VAR 0 3
19735: PPUSH
19736: CALL_OW 74
19740: PPUSH
19741: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19745: LD_VAR 0 2
19749: PUSH
19750: LD_INT 60
19752: GREATER
19753: PUSH
19754: LD_VAR 0 3
19758: PPUSH
19759: CALL_OW 301
19763: OR
19764: IFFALSE 19641
// if un then
19766: LD_VAR 0 3
19770: IFFALSE 19781
// RemoveUnit ( un ) ;
19772: LD_VAR 0 3
19776: PPUSH
19777: CALL_OW 64
// end ; end_of_file
19781: PPOPN 3
19783: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19784: LD_INT 0
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 264
19799: PUSH
19800: LD_EXP 56
19804: EQUAL
19805: IFFALSE 19877
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19807: LD_INT 68
19809: PPUSH
19810: LD_VAR 0 1
19814: PPUSH
19815: CALL_OW 255
19819: PPUSH
19820: CALL_OW 321
19824: PUSH
19825: LD_INT 2
19827: EQUAL
19828: IFFALSE 19840
// eff := 70 else
19830: LD_ADDR_VAR 0 4
19834: PUSH
19835: LD_INT 70
19837: ST_TO_ADDR
19838: GO 19848
// eff := 30 ;
19840: LD_ADDR_VAR 0 4
19844: PUSH
19845: LD_INT 30
19847: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 250
19857: PPUSH
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL_OW 251
19867: PPUSH
19868: LD_VAR 0 4
19872: PPUSH
19873: CALL_OW 495
// end ; end ;
19877: LD_VAR 0 2
19881: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19882: LD_INT 0
19884: PPUSH
// end ;
19885: LD_VAR 0 4
19889: RET
// export function SOS_Command ( cmd ) ; begin
19890: LD_INT 0
19892: PPUSH
// end ;
19893: LD_VAR 0 2
19897: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19898: LD_VAR 0 1
19902: PUSH
19903: LD_INT 254
19905: EQUAL
19906: PUSH
19907: LD_VAR 0 2
19911: PPUSH
19912: CALL_OW 264
19916: PUSH
19917: LD_EXP 54
19921: EQUAL
19922: AND
19923: PUSH
19924: LD_VAR 0 3
19928: PPUSH
19929: CALL_OW 263
19933: PUSH
19934: LD_INT 3
19936: EQUAL
19937: AND
19938: IFFALSE 19949
// DestroyUnit ( selectedUnit ) ;
19940: LD_VAR 0 3
19944: PPUSH
19945: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19949: LD_VAR 0 1
19953: PUSH
19954: LD_INT 255
19956: EQUAL
19957: PUSH
19958: LD_VAR 0 2
19962: PPUSH
19963: CALL_OW 264
19967: PUSH
19968: LD_INT 14
19970: PUSH
19971: LD_INT 53
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: IN
19978: AND
19979: PUSH
19980: LD_VAR 0 4
19984: PPUSH
19985: LD_VAR 0 5
19989: PPUSH
19990: CALL_OW 488
19994: AND
19995: IFFALSE 20019
// CutTreeXYR ( unit , x , y , 12 ) ;
19997: LD_VAR 0 2
20001: PPUSH
20002: LD_VAR 0 4
20006: PPUSH
20007: LD_VAR 0 5
20011: PPUSH
20012: LD_INT 12
20014: PPUSH
20015: CALL 20022 0 4
// end ;
20019: PPOPN 5
20021: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20022: LD_INT 0
20024: PPUSH
20025: PPUSH
20026: PPUSH
20027: PPUSH
20028: PPUSH
20029: PPUSH
20030: PPUSH
20031: PPUSH
20032: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20033: LD_VAR 0 1
20037: NOT
20038: PUSH
20039: LD_VAR 0 2
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: CALL_OW 488
20053: NOT
20054: OR
20055: PUSH
20056: LD_VAR 0 4
20060: NOT
20061: OR
20062: IFFALSE 20066
// exit ;
20064: GO 20406
// list := [ ] ;
20066: LD_ADDR_VAR 0 13
20070: PUSH
20071: EMPTY
20072: ST_TO_ADDR
// if x - r < 0 then
20073: LD_VAR 0 2
20077: PUSH
20078: LD_VAR 0 4
20082: MINUS
20083: PUSH
20084: LD_INT 0
20086: LESS
20087: IFFALSE 20099
// min_x := 0 else
20089: LD_ADDR_VAR 0 7
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
20097: GO 20115
// min_x := x - r ;
20099: LD_ADDR_VAR 0 7
20103: PUSH
20104: LD_VAR 0 2
20108: PUSH
20109: LD_VAR 0 4
20113: MINUS
20114: ST_TO_ADDR
// if y - r < 0 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_VAR 0 4
20124: MINUS
20125: PUSH
20126: LD_INT 0
20128: LESS
20129: IFFALSE 20141
// min_y := 0 else
20131: LD_ADDR_VAR 0 8
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
20139: GO 20157
// min_y := y - r ;
20141: LD_ADDR_VAR 0 8
20145: PUSH
20146: LD_VAR 0 3
20150: PUSH
20151: LD_VAR 0 4
20155: MINUS
20156: ST_TO_ADDR
// max_x := x + r ;
20157: LD_ADDR_VAR 0 9
20161: PUSH
20162: LD_VAR 0 2
20166: PUSH
20167: LD_VAR 0 4
20171: PLUS
20172: ST_TO_ADDR
// max_y := y + r ;
20173: LD_ADDR_VAR 0 10
20177: PUSH
20178: LD_VAR 0 3
20182: PUSH
20183: LD_VAR 0 4
20187: PLUS
20188: ST_TO_ADDR
// for _x = min_x to max_x do
20189: LD_ADDR_VAR 0 11
20193: PUSH
20194: DOUBLE
20195: LD_VAR 0 7
20199: DEC
20200: ST_TO_ADDR
20201: LD_VAR 0 9
20205: PUSH
20206: FOR_TO
20207: IFFALSE 20324
// for _y = min_y to max_y do
20209: LD_ADDR_VAR 0 12
20213: PUSH
20214: DOUBLE
20215: LD_VAR 0 8
20219: DEC
20220: ST_TO_ADDR
20221: LD_VAR 0 10
20225: PUSH
20226: FOR_TO
20227: IFFALSE 20320
// begin if not ValidHex ( _x , _y ) then
20229: LD_VAR 0 11
20233: PPUSH
20234: LD_VAR 0 12
20238: PPUSH
20239: CALL_OW 488
20243: NOT
20244: IFFALSE 20248
// continue ;
20246: GO 20226
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20248: LD_VAR 0 11
20252: PPUSH
20253: LD_VAR 0 12
20257: PPUSH
20258: CALL_OW 351
20262: PUSH
20263: LD_VAR 0 11
20267: PPUSH
20268: LD_VAR 0 12
20272: PPUSH
20273: CALL_OW 554
20277: AND
20278: IFFALSE 20318
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20280: LD_ADDR_VAR 0 13
20284: PUSH
20285: LD_VAR 0 13
20289: PPUSH
20290: LD_VAR 0 13
20294: PUSH
20295: LD_INT 1
20297: PLUS
20298: PPUSH
20299: LD_VAR 0 11
20303: PUSH
20304: LD_VAR 0 12
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 2
20317: ST_TO_ADDR
// end ;
20318: GO 20226
20320: POP
20321: POP
20322: GO 20206
20324: POP
20325: POP
// if not list then
20326: LD_VAR 0 13
20330: NOT
20331: IFFALSE 20335
// exit ;
20333: GO 20406
// for i in list do
20335: LD_ADDR_VAR 0 6
20339: PUSH
20340: LD_VAR 0 13
20344: PUSH
20345: FOR_IN
20346: IFFALSE 20404
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20348: LD_VAR 0 1
20352: PPUSH
20353: LD_STRING M
20355: PUSH
20356: LD_VAR 0 6
20360: PUSH
20361: LD_INT 1
20363: ARRAY
20364: PUSH
20365: LD_VAR 0 6
20369: PUSH
20370: LD_INT 2
20372: ARRAY
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: PUSH
20395: EMPTY
20396: LIST
20397: PPUSH
20398: CALL_OW 447
20402: GO 20345
20404: POP
20405: POP
// end ;
20406: LD_VAR 0 5
20410: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
20411: LD_EXP 120
20415: NOT
20416: IFFALSE 20459
20418: GO 20420
20420: DISABLE
// begin initHack := true ;
20421: LD_ADDR_EXP 120
20425: PUSH
20426: LD_INT 1
20428: ST_TO_ADDR
// hackTanks := [ ] ;
20429: LD_ADDR_EXP 121
20433: PUSH
20434: EMPTY
20435: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20436: LD_ADDR_EXP 122
20440: PUSH
20441: EMPTY
20442: ST_TO_ADDR
// hackLimit := 3 ;
20443: LD_ADDR_EXP 123
20447: PUSH
20448: LD_INT 3
20450: ST_TO_ADDR
// hackDist := 12 ;
20451: LD_ADDR_EXP 124
20455: PUSH
20456: LD_INT 12
20458: ST_TO_ADDR
// end ;
20459: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20460: LD_EXP 120
20464: PUSH
20465: LD_INT 34
20467: PUSH
20468: LD_EXP 54
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PPUSH
20477: CALL_OW 69
20481: AND
20482: IFFALSE 20711
20484: GO 20486
20486: DISABLE
20487: LD_INT 0
20489: PPUSH
20490: PPUSH
// begin enable ;
20491: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20492: LD_ADDR_VAR 0 1
20496: PUSH
20497: LD_INT 34
20499: PUSH
20500: LD_EXP 54
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PPUSH
20509: CALL_OW 69
20513: PUSH
20514: FOR_IN
20515: IFFALSE 20709
// begin if not i in hackTanks then
20517: LD_VAR 0 1
20521: PUSH
20522: LD_EXP 121
20526: IN
20527: NOT
20528: IFFALSE 20585
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20530: LD_ADDR_EXP 121
20534: PUSH
20535: LD_EXP 121
20539: PPUSH
20540: LD_EXP 121
20544: PUSH
20545: LD_INT 1
20547: PLUS
20548: PPUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: CALL_OW 1
20558: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20559: LD_ADDR_EXP 122
20563: PUSH
20564: LD_EXP 122
20568: PPUSH
20569: LD_EXP 122
20573: PUSH
20574: LD_INT 1
20576: PLUS
20577: PPUSH
20578: EMPTY
20579: PPUSH
20580: CALL_OW 1
20584: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 302
20594: NOT
20595: IFFALSE 20608
// begin HackUnlinkAll ( i ) ;
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL 20714 0 1
// continue ;
20606: GO 20514
// end ; HackCheckCapturedStatus ( i ) ;
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL 21132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: LD_INT 81
20624: PUSH
20625: LD_VAR 0 1
20629: PPUSH
20630: CALL_OW 255
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 33
20641: PUSH
20642: LD_INT 3
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 91
20651: PUSH
20652: LD_VAR 0 1
20656: PUSH
20657: LD_EXP 124
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 50
20669: PUSH
20670: EMPTY
20671: LIST
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 69
20683: ST_TO_ADDR
// if not tmp then
20684: LD_VAR 0 2
20688: NOT
20689: IFFALSE 20693
// continue ;
20691: GO 20514
// HackLink ( i , tmp ) ;
20693: LD_VAR 0 1
20697: PPUSH
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL 20850 0 2
// end ;
20707: GO 20514
20709: POP
20710: POP
// end ;
20711: PPOPN 2
20713: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20714: LD_INT 0
20716: PPUSH
20717: PPUSH
20718: PPUSH
// if not hack in hackTanks then
20719: LD_VAR 0 1
20723: PUSH
20724: LD_EXP 121
20728: IN
20729: NOT
20730: IFFALSE 20734
// exit ;
20732: GO 20845
// index := GetElementIndex ( hackTanks , hack ) ;
20734: LD_ADDR_VAR 0 4
20738: PUSH
20739: LD_EXP 121
20743: PPUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL 26129 0 2
20753: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20754: LD_EXP 122
20758: PUSH
20759: LD_VAR 0 4
20763: ARRAY
20764: IFFALSE 20845
// begin for i in hackTanksCaptured [ index ] do
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: LD_EXP 122
20775: PUSH
20776: LD_VAR 0 4
20780: ARRAY
20781: PUSH
20782: FOR_IN
20783: IFFALSE 20809
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20785: LD_VAR 0 3
20789: PUSH
20790: LD_INT 1
20792: ARRAY
20793: PPUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 2
20801: ARRAY
20802: PPUSH
20803: CALL_OW 235
20807: GO 20782
20809: POP
20810: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20811: LD_ADDR_EXP 122
20815: PUSH
20816: LD_EXP 122
20820: PPUSH
20821: LD_VAR 0 4
20825: PPUSH
20826: EMPTY
20827: PPUSH
20828: CALL_OW 1
20832: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_INT 0
20840: PPUSH
20841: CALL_OW 505
// end ; end ;
20845: LD_VAR 0 2
20849: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20850: LD_INT 0
20852: PPUSH
20853: PPUSH
20854: PPUSH
// if not hack in hackTanks or not vehicles then
20855: LD_VAR 0 1
20859: PUSH
20860: LD_EXP 121
20864: IN
20865: NOT
20866: PUSH
20867: LD_VAR 0 2
20871: NOT
20872: OR
20873: IFFALSE 20877
// exit ;
20875: GO 21127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20877: LD_ADDR_VAR 0 2
20881: PUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: LD_VAR 0 2
20891: PPUSH
20892: LD_INT 1
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: CALL 26779 0 4
20902: ST_TO_ADDR
// display_strings := vehicles ;
20903: LD_ADDR_OWVAR 47
20907: PUSH
20908: LD_VAR 0 2
20912: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_EXP 121
20922: PPUSH
20923: LD_VAR 0 1
20927: PPUSH
20928: CALL 26129 0 2
20932: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20933: LD_EXP 122
20937: PUSH
20938: LD_VAR 0 5
20942: ARRAY
20943: PUSH
20944: LD_EXP 123
20948: LESS
20949: IFFALSE 21103
// begin for i := 1 to vehicles do
20951: LD_ADDR_VAR 0 4
20955: PUSH
20956: DOUBLE
20957: LD_INT 1
20959: DEC
20960: ST_TO_ADDR
20961: LD_VAR 0 2
20965: PUSH
20966: FOR_TO
20967: IFFALSE 21101
// begin if hackTanksCaptured [ index ] = hackLimit then
20969: LD_EXP 122
20973: PUSH
20974: LD_VAR 0 5
20978: ARRAY
20979: PUSH
20980: LD_EXP 123
20984: EQUAL
20985: IFFALSE 20989
// break ;
20987: GO 21101
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20989: LD_ADDR_EXP 122
20993: PUSH
20994: LD_EXP 122
20998: PPUSH
20999: LD_VAR 0 5
21003: PUSH
21004: LD_EXP 122
21008: PUSH
21009: LD_VAR 0 5
21013: ARRAY
21014: PUSH
21015: LD_INT 1
21017: PLUS
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PPUSH
21023: LD_VAR 0 2
21027: PUSH
21028: LD_VAR 0 4
21032: ARRAY
21033: PUSH
21034: LD_VAR 0 2
21038: PUSH
21039: LD_VAR 0 4
21043: ARRAY
21044: PPUSH
21045: CALL_OW 255
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PPUSH
21054: CALL 26344 0 3
21058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21059: LD_VAR 0 2
21063: PUSH
21064: LD_VAR 0 4
21068: ARRAY
21069: PPUSH
21070: LD_VAR 0 1
21074: PPUSH
21075: CALL_OW 255
21079: PPUSH
21080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21084: LD_VAR 0 2
21088: PUSH
21089: LD_VAR 0 4
21093: ARRAY
21094: PPUSH
21095: CALL_OW 141
// end ;
21099: GO 20966
21101: POP
21102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21103: LD_VAR 0 1
21107: PPUSH
21108: LD_EXP 122
21112: PUSH
21113: LD_VAR 0 5
21117: ARRAY
21118: PUSH
21119: LD_INT 0
21121: PLUS
21122: PPUSH
21123: CALL_OW 505
// end ;
21127: LD_VAR 0 3
21131: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21132: LD_INT 0
21134: PPUSH
21135: PPUSH
21136: PPUSH
21137: PPUSH
// if not hack in hackTanks then
21138: LD_VAR 0 1
21142: PUSH
21143: LD_EXP 121
21147: IN
21148: NOT
21149: IFFALSE 21153
// exit ;
21151: GO 21393
// index := GetElementIndex ( hackTanks , hack ) ;
21153: LD_ADDR_VAR 0 4
21157: PUSH
21158: LD_EXP 121
21162: PPUSH
21163: LD_VAR 0 1
21167: PPUSH
21168: CALL 26129 0 2
21172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21173: LD_ADDR_VAR 0 3
21177: PUSH
21178: DOUBLE
21179: LD_EXP 122
21183: PUSH
21184: LD_VAR 0 4
21188: ARRAY
21189: INC
21190: ST_TO_ADDR
21191: LD_INT 1
21193: PUSH
21194: FOR_DOWNTO
21195: IFFALSE 21367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21197: LD_ADDR_VAR 0 5
21201: PUSH
21202: LD_EXP 122
21206: PUSH
21207: LD_VAR 0 4
21211: ARRAY
21212: PUSH
21213: LD_VAR 0 3
21217: ARRAY
21218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21219: LD_VAR 0 5
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PPUSH
21228: CALL_OW 302
21232: NOT
21233: PUSH
21234: LD_VAR 0 5
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: CALL_OW 255
21247: PUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 255
21257: NONEQUAL
21258: OR
21259: IFFALSE 21365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21261: LD_VAR 0 5
21265: PUSH
21266: LD_INT 1
21268: ARRAY
21269: PPUSH
21270: CALL_OW 305
21274: PUSH
21275: LD_VAR 0 5
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: CALL_OW 255
21288: PUSH
21289: LD_VAR 0 1
21293: PPUSH
21294: CALL_OW 255
21298: EQUAL
21299: AND
21300: IFFALSE 21324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21302: LD_VAR 0 5
21306: PUSH
21307: LD_INT 1
21309: ARRAY
21310: PPUSH
21311: LD_VAR 0 5
21315: PUSH
21316: LD_INT 2
21318: ARRAY
21319: PPUSH
21320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21324: LD_ADDR_EXP 122
21328: PUSH
21329: LD_EXP 122
21333: PPUSH
21334: LD_VAR 0 4
21338: PPUSH
21339: LD_EXP 122
21343: PUSH
21344: LD_VAR 0 4
21348: ARRAY
21349: PPUSH
21350: LD_VAR 0 3
21354: PPUSH
21355: CALL_OW 3
21359: PPUSH
21360: CALL_OW 1
21364: ST_TO_ADDR
// end ; end ;
21365: GO 21194
21367: POP
21368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21369: LD_VAR 0 1
21373: PPUSH
21374: LD_EXP 122
21378: PUSH
21379: LD_VAR 0 4
21383: ARRAY
21384: PUSH
21385: LD_INT 0
21387: PLUS
21388: PPUSH
21389: CALL_OW 505
// end ; end_of_file
21393: LD_VAR 0 2
21397: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21398: LD_INT 0
21400: PPUSH
21401: PPUSH
// if exist_mode then
21402: LD_VAR 0 2
21406: IFFALSE 21431
// unit := CreateCharacter ( prefix & ident ) else
21408: LD_ADDR_VAR 0 5
21412: PUSH
21413: LD_VAR 0 3
21417: PUSH
21418: LD_VAR 0 1
21422: STR
21423: PPUSH
21424: CALL_OW 34
21428: ST_TO_ADDR
21429: GO 21446
// unit := NewCharacter ( ident ) ;
21431: LD_ADDR_VAR 0 5
21435: PUSH
21436: LD_VAR 0 1
21440: PPUSH
21441: CALL_OW 25
21445: ST_TO_ADDR
// result := unit ;
21446: LD_ADDR_VAR 0 4
21450: PUSH
21451: LD_VAR 0 5
21455: ST_TO_ADDR
// end ;
21456: LD_VAR 0 4
21460: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
// if not side or not nation then
21465: LD_VAR 0 1
21469: NOT
21470: PUSH
21471: LD_VAR 0 2
21475: NOT
21476: OR
21477: IFFALSE 21481
// exit ;
21479: GO 22245
// case nation of nation_american :
21481: LD_VAR 0 2
21485: PUSH
21486: LD_INT 1
21488: DOUBLE
21489: EQUAL
21490: IFTRUE 21494
21492: GO 21708
21494: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21495: LD_ADDR_VAR 0 4
21499: PUSH
21500: LD_INT 35
21502: PUSH
21503: LD_INT 45
21505: PUSH
21506: LD_INT 46
21508: PUSH
21509: LD_INT 47
21511: PUSH
21512: LD_INT 82
21514: PUSH
21515: LD_INT 83
21517: PUSH
21518: LD_INT 84
21520: PUSH
21521: LD_INT 85
21523: PUSH
21524: LD_INT 86
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 6
21535: PUSH
21536: LD_INT 15
21538: PUSH
21539: LD_INT 16
21541: PUSH
21542: LD_INT 7
21544: PUSH
21545: LD_INT 12
21547: PUSH
21548: LD_INT 13
21550: PUSH
21551: LD_INT 10
21553: PUSH
21554: LD_INT 14
21556: PUSH
21557: LD_INT 20
21559: PUSH
21560: LD_INT 21
21562: PUSH
21563: LD_INT 22
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 32
21571: PUSH
21572: LD_INT 27
21574: PUSH
21575: LD_INT 36
21577: PUSH
21578: LD_INT 69
21580: PUSH
21581: LD_INT 39
21583: PUSH
21584: LD_INT 34
21586: PUSH
21587: LD_INT 40
21589: PUSH
21590: LD_INT 48
21592: PUSH
21593: LD_INT 49
21595: PUSH
21596: LD_INT 50
21598: PUSH
21599: LD_INT 51
21601: PUSH
21602: LD_INT 52
21604: PUSH
21605: LD_INT 53
21607: PUSH
21608: LD_INT 54
21610: PUSH
21611: LD_INT 55
21613: PUSH
21614: LD_INT 56
21616: PUSH
21617: LD_INT 57
21619: PUSH
21620: LD_INT 58
21622: PUSH
21623: LD_INT 59
21625: PUSH
21626: LD_INT 60
21628: PUSH
21629: LD_INT 61
21631: PUSH
21632: LD_INT 62
21634: PUSH
21635: LD_INT 80
21637: PUSH
21638: LD_INT 82
21640: PUSH
21641: LD_INT 83
21643: PUSH
21644: LD_INT 84
21646: PUSH
21647: LD_INT 85
21649: PUSH
21650: LD_INT 86
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: ST_TO_ADDR
21706: GO 22169
21708: LD_INT 2
21710: DOUBLE
21711: EQUAL
21712: IFTRUE 21716
21714: GO 21938
21716: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21717: LD_ADDR_VAR 0 4
21721: PUSH
21722: LD_INT 35
21724: PUSH
21725: LD_INT 45
21727: PUSH
21728: LD_INT 46
21730: PUSH
21731: LD_INT 47
21733: PUSH
21734: LD_INT 82
21736: PUSH
21737: LD_INT 83
21739: PUSH
21740: LD_INT 84
21742: PUSH
21743: LD_INT 85
21745: PUSH
21746: LD_INT 87
21748: PUSH
21749: LD_INT 70
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 11
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: LD_INT 4
21763: PUSH
21764: LD_INT 5
21766: PUSH
21767: LD_INT 6
21769: PUSH
21770: LD_INT 15
21772: PUSH
21773: LD_INT 18
21775: PUSH
21776: LD_INT 7
21778: PUSH
21779: LD_INT 17
21781: PUSH
21782: LD_INT 8
21784: PUSH
21785: LD_INT 20
21787: PUSH
21788: LD_INT 21
21790: PUSH
21791: LD_INT 22
21793: PUSH
21794: LD_INT 72
21796: PUSH
21797: LD_INT 26
21799: PUSH
21800: LD_INT 69
21802: PUSH
21803: LD_INT 39
21805: PUSH
21806: LD_INT 40
21808: PUSH
21809: LD_INT 41
21811: PUSH
21812: LD_INT 42
21814: PUSH
21815: LD_INT 43
21817: PUSH
21818: LD_INT 48
21820: PUSH
21821: LD_INT 49
21823: PUSH
21824: LD_INT 50
21826: PUSH
21827: LD_INT 51
21829: PUSH
21830: LD_INT 52
21832: PUSH
21833: LD_INT 53
21835: PUSH
21836: LD_INT 54
21838: PUSH
21839: LD_INT 55
21841: PUSH
21842: LD_INT 56
21844: PUSH
21845: LD_INT 60
21847: PUSH
21848: LD_INT 61
21850: PUSH
21851: LD_INT 62
21853: PUSH
21854: LD_INT 66
21856: PUSH
21857: LD_INT 67
21859: PUSH
21860: LD_INT 68
21862: PUSH
21863: LD_INT 81
21865: PUSH
21866: LD_INT 82
21868: PUSH
21869: LD_INT 83
21871: PUSH
21872: LD_INT 84
21874: PUSH
21875: LD_INT 85
21877: PUSH
21878: LD_INT 87
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: ST_TO_ADDR
21936: GO 22169
21938: LD_INT 3
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 22168
21946: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: LD_INT 46
21954: PUSH
21955: LD_INT 47
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 82
21966: PUSH
21967: LD_INT 83
21969: PUSH
21970: LD_INT 84
21972: PUSH
21973: LD_INT 85
21975: PUSH
21976: LD_INT 86
21978: PUSH
21979: LD_INT 11
21981: PUSH
21982: LD_INT 9
21984: PUSH
21985: LD_INT 20
21987: PUSH
21988: LD_INT 19
21990: PUSH
21991: LD_INT 21
21993: PUSH
21994: LD_INT 24
21996: PUSH
21997: LD_INT 22
21999: PUSH
22000: LD_INT 25
22002: PUSH
22003: LD_INT 28
22005: PUSH
22006: LD_INT 29
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 31
22014: PUSH
22015: LD_INT 37
22017: PUSH
22018: LD_INT 38
22020: PUSH
22021: LD_INT 32
22023: PUSH
22024: LD_INT 27
22026: PUSH
22027: LD_INT 33
22029: PUSH
22030: LD_INT 69
22032: PUSH
22033: LD_INT 39
22035: PUSH
22036: LD_INT 34
22038: PUSH
22039: LD_INT 40
22041: PUSH
22042: LD_INT 71
22044: PUSH
22045: LD_INT 23
22047: PUSH
22048: LD_INT 44
22050: PUSH
22051: LD_INT 48
22053: PUSH
22054: LD_INT 49
22056: PUSH
22057: LD_INT 50
22059: PUSH
22060: LD_INT 51
22062: PUSH
22063: LD_INT 52
22065: PUSH
22066: LD_INT 53
22068: PUSH
22069: LD_INT 54
22071: PUSH
22072: LD_INT 55
22074: PUSH
22075: LD_INT 56
22077: PUSH
22078: LD_INT 57
22080: PUSH
22081: LD_INT 58
22083: PUSH
22084: LD_INT 59
22086: PUSH
22087: LD_INT 63
22089: PUSH
22090: LD_INT 64
22092: PUSH
22093: LD_INT 65
22095: PUSH
22096: LD_INT 82
22098: PUSH
22099: LD_INT 83
22101: PUSH
22102: LD_INT 84
22104: PUSH
22105: LD_INT 85
22107: PUSH
22108: LD_INT 86
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: ST_TO_ADDR
22166: GO 22169
22168: POP
// if state > - 1 and state < 3 then
22169: LD_VAR 0 3
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: GREATER
22178: PUSH
22179: LD_VAR 0 3
22183: PUSH
22184: LD_INT 3
22186: LESS
22187: AND
22188: IFFALSE 22245
// for i in result do
22190: LD_ADDR_VAR 0 5
22194: PUSH
22195: LD_VAR 0 4
22199: PUSH
22200: FOR_IN
22201: IFFALSE 22243
// if GetTech ( i , side ) <> state then
22203: LD_VAR 0 5
22207: PPUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 321
22217: PUSH
22218: LD_VAR 0 3
22222: NONEQUAL
22223: IFFALSE 22241
// result := result diff i ;
22225: LD_ADDR_VAR 0 4
22229: PUSH
22230: LD_VAR 0 4
22234: PUSH
22235: LD_VAR 0 5
22239: DIFF
22240: ST_TO_ADDR
22241: GO 22200
22243: POP
22244: POP
// end ;
22245: LD_VAR 0 4
22249: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22250: LD_INT 0
22252: PPUSH
22253: PPUSH
22254: PPUSH
// result := true ;
22255: LD_ADDR_VAR 0 3
22259: PUSH
22260: LD_INT 1
22262: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22263: LD_ADDR_VAR 0 5
22267: PUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: CALL_OW 480
22277: ST_TO_ADDR
// if not tmp then
22278: LD_VAR 0 5
22282: NOT
22283: IFFALSE 22287
// exit ;
22285: GO 22336
// for i in tmp do
22287: LD_ADDR_VAR 0 4
22291: PUSH
22292: LD_VAR 0 5
22296: PUSH
22297: FOR_IN
22298: IFFALSE 22334
// if GetTech ( i , side ) <> state_researched then
22300: LD_VAR 0 4
22304: PPUSH
22305: LD_VAR 0 1
22309: PPUSH
22310: CALL_OW 321
22314: PUSH
22315: LD_INT 2
22317: NONEQUAL
22318: IFFALSE 22332
// begin result := false ;
22320: LD_ADDR_VAR 0 3
22324: PUSH
22325: LD_INT 0
22327: ST_TO_ADDR
// exit ;
22328: POP
22329: POP
22330: GO 22336
// end ;
22332: GO 22297
22334: POP
22335: POP
// end ;
22336: LD_VAR 0 3
22340: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22341: LD_INT 0
22343: PPUSH
22344: PPUSH
22345: PPUSH
22346: PPUSH
22347: PPUSH
22348: PPUSH
22349: PPUSH
22350: PPUSH
22351: PPUSH
22352: PPUSH
22353: PPUSH
22354: PPUSH
22355: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22356: LD_VAR 0 1
22360: NOT
22361: PUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: CALL_OW 257
22371: PUSH
22372: LD_INT 9
22374: NONEQUAL
22375: OR
22376: IFFALSE 22380
// exit ;
22378: GO 22953
// side := GetSide ( unit ) ;
22380: LD_ADDR_VAR 0 9
22384: PUSH
22385: LD_VAR 0 1
22389: PPUSH
22390: CALL_OW 255
22394: ST_TO_ADDR
// tech_space := tech_spacanom ;
22395: LD_ADDR_VAR 0 12
22399: PUSH
22400: LD_INT 29
22402: ST_TO_ADDR
// tech_time := tech_taurad ;
22403: LD_ADDR_VAR 0 13
22407: PUSH
22408: LD_INT 28
22410: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22411: LD_ADDR_VAR 0 11
22415: PUSH
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 310
22425: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22426: LD_VAR 0 11
22430: PPUSH
22431: CALL_OW 247
22435: PUSH
22436: LD_INT 2
22438: EQUAL
22439: IFFALSE 22443
// exit ;
22441: GO 22953
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22443: LD_ADDR_VAR 0 8
22447: PUSH
22448: LD_INT 81
22450: PUSH
22451: LD_VAR 0 9
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 3
22462: PUSH
22463: LD_INT 21
22465: PUSH
22466: LD_INT 3
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 69
22485: ST_TO_ADDR
// if not tmp then
22486: LD_VAR 0 8
22490: NOT
22491: IFFALSE 22495
// exit ;
22493: GO 22953
// if in_unit then
22495: LD_VAR 0 11
22499: IFFALSE 22523
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22501: LD_ADDR_VAR 0 10
22505: PUSH
22506: LD_VAR 0 8
22510: PPUSH
22511: LD_VAR 0 11
22515: PPUSH
22516: CALL_OW 74
22520: ST_TO_ADDR
22521: GO 22543
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22523: LD_ADDR_VAR 0 10
22527: PUSH
22528: LD_VAR 0 8
22532: PPUSH
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL_OW 74
22542: ST_TO_ADDR
// if not enemy then
22543: LD_VAR 0 10
22547: NOT
22548: IFFALSE 22552
// exit ;
22550: GO 22953
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22552: LD_VAR 0 11
22556: PUSH
22557: LD_VAR 0 11
22561: PPUSH
22562: LD_VAR 0 10
22566: PPUSH
22567: CALL_OW 296
22571: PUSH
22572: LD_INT 13
22574: GREATER
22575: AND
22576: PUSH
22577: LD_VAR 0 1
22581: PPUSH
22582: LD_VAR 0 10
22586: PPUSH
22587: CALL_OW 296
22591: PUSH
22592: LD_INT 12
22594: GREATER
22595: OR
22596: IFFALSE 22600
// exit ;
22598: GO 22953
// missile := [ 1 ] ;
22600: LD_ADDR_VAR 0 14
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22611: LD_VAR 0 9
22615: PPUSH
22616: LD_VAR 0 12
22620: PPUSH
22621: CALL_OW 325
22625: IFFALSE 22654
// missile := Insert ( missile , missile + 1 , 2 ) ;
22627: LD_ADDR_VAR 0 14
22631: PUSH
22632: LD_VAR 0 14
22636: PPUSH
22637: LD_VAR 0 14
22641: PUSH
22642: LD_INT 1
22644: PLUS
22645: PPUSH
22646: LD_INT 2
22648: PPUSH
22649: CALL_OW 2
22653: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22654: LD_VAR 0 9
22658: PPUSH
22659: LD_VAR 0 13
22663: PPUSH
22664: CALL_OW 325
22668: PUSH
22669: LD_VAR 0 10
22673: PPUSH
22674: CALL_OW 255
22678: PPUSH
22679: LD_VAR 0 13
22683: PPUSH
22684: CALL_OW 325
22688: NOT
22689: AND
22690: IFFALSE 22719
// missile := Insert ( missile , missile + 1 , 3 ) ;
22692: LD_ADDR_VAR 0 14
22696: PUSH
22697: LD_VAR 0 14
22701: PPUSH
22702: LD_VAR 0 14
22706: PUSH
22707: LD_INT 1
22709: PLUS
22710: PPUSH
22711: LD_INT 3
22713: PPUSH
22714: CALL_OW 2
22718: ST_TO_ADDR
// if missile < 2 then
22719: LD_VAR 0 14
22723: PUSH
22724: LD_INT 2
22726: LESS
22727: IFFALSE 22731
// exit ;
22729: GO 22953
// x := GetX ( enemy ) ;
22731: LD_ADDR_VAR 0 4
22735: PUSH
22736: LD_VAR 0 10
22740: PPUSH
22741: CALL_OW 250
22745: ST_TO_ADDR
// y := GetY ( enemy ) ;
22746: LD_ADDR_VAR 0 5
22750: PUSH
22751: LD_VAR 0 10
22755: PPUSH
22756: CALL_OW 251
22760: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22761: LD_ADDR_VAR 0 6
22765: PUSH
22766: LD_VAR 0 4
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PPUSH
22775: LD_INT 1
22777: PPUSH
22778: CALL_OW 12
22782: PLUS
22783: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22784: LD_ADDR_VAR 0 7
22788: PUSH
22789: LD_VAR 0 5
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 12
22805: PLUS
22806: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22807: LD_VAR 0 6
22811: PPUSH
22812: LD_VAR 0 7
22816: PPUSH
22817: CALL_OW 488
22821: NOT
22822: IFFALSE 22844
// begin _x := x ;
22824: LD_ADDR_VAR 0 6
22828: PUSH
22829: LD_VAR 0 4
22833: ST_TO_ADDR
// _y := y ;
22834: LD_ADDR_VAR 0 7
22838: PUSH
22839: LD_VAR 0 5
22843: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22844: LD_ADDR_VAR 0 3
22848: PUSH
22849: LD_INT 1
22851: PPUSH
22852: LD_VAR 0 14
22856: PPUSH
22857: CALL_OW 12
22861: ST_TO_ADDR
// case i of 1 :
22862: LD_VAR 0 3
22866: PUSH
22867: LD_INT 1
22869: DOUBLE
22870: EQUAL
22871: IFTRUE 22875
22873: GO 22892
22875: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22876: LD_VAR 0 1
22880: PPUSH
22881: LD_VAR 0 10
22885: PPUSH
22886: CALL_OW 115
22890: GO 22953
22892: LD_INT 2
22894: DOUBLE
22895: EQUAL
22896: IFTRUE 22900
22898: GO 22922
22900: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22901: LD_VAR 0 1
22905: PPUSH
22906: LD_VAR 0 6
22910: PPUSH
22911: LD_VAR 0 7
22915: PPUSH
22916: CALL_OW 153
22920: GO 22953
22922: LD_INT 3
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 22952
22930: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22931: LD_VAR 0 1
22935: PPUSH
22936: LD_VAR 0 6
22940: PPUSH
22941: LD_VAR 0 7
22945: PPUSH
22946: CALL_OW 154
22950: GO 22953
22952: POP
// end ;
22953: LD_VAR 0 2
22957: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22958: LD_INT 0
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
// if not unit or not building then
22966: LD_VAR 0 1
22970: NOT
22971: PUSH
22972: LD_VAR 0 2
22976: NOT
22977: OR
22978: IFFALSE 22982
// exit ;
22980: GO 23140
// x := GetX ( building ) ;
22982: LD_ADDR_VAR 0 5
22986: PUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 250
22996: ST_TO_ADDR
// y := GetY ( building ) ;
22997: LD_ADDR_VAR 0 6
23001: PUSH
23002: LD_VAR 0 2
23006: PPUSH
23007: CALL_OW 251
23011: ST_TO_ADDR
// for i = 0 to 5 do
23012: LD_ADDR_VAR 0 4
23016: PUSH
23017: DOUBLE
23018: LD_INT 0
23020: DEC
23021: ST_TO_ADDR
23022: LD_INT 5
23024: PUSH
23025: FOR_TO
23026: IFFALSE 23138
// begin _x := ShiftX ( x , i , 3 ) ;
23028: LD_ADDR_VAR 0 7
23032: PUSH
23033: LD_VAR 0 5
23037: PPUSH
23038: LD_VAR 0 4
23042: PPUSH
23043: LD_INT 3
23045: PPUSH
23046: CALL_OW 272
23050: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23051: LD_ADDR_VAR 0 8
23055: PUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: LD_VAR 0 4
23065: PPUSH
23066: LD_INT 3
23068: PPUSH
23069: CALL_OW 273
23073: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23074: LD_VAR 0 7
23078: PPUSH
23079: LD_VAR 0 8
23083: PPUSH
23084: CALL_OW 488
23088: NOT
23089: IFFALSE 23093
// continue ;
23091: GO 23025
// if HexInfo ( _x , _y ) = 0 then
23093: LD_VAR 0 7
23097: PPUSH
23098: LD_VAR 0 8
23102: PPUSH
23103: CALL_OW 428
23107: PUSH
23108: LD_INT 0
23110: EQUAL
23111: IFFALSE 23136
// begin ComMoveXY ( unit , _x , _y ) ;
23113: LD_VAR 0 1
23117: PPUSH
23118: LD_VAR 0 7
23122: PPUSH
23123: LD_VAR 0 8
23127: PPUSH
23128: CALL_OW 111
// exit ;
23132: POP
23133: POP
23134: GO 23140
// end ; end ;
23136: GO 23025
23138: POP
23139: POP
// end ;
23140: LD_VAR 0 3
23144: RET
// export function ScanBase ( side , base_area ) ; begin
23145: LD_INT 0
23147: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23148: LD_ADDR_VAR 0 3
23152: PUSH
23153: LD_VAR 0 2
23157: PPUSH
23158: LD_INT 81
23160: PUSH
23161: LD_VAR 0 1
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PPUSH
23170: CALL_OW 70
23174: ST_TO_ADDR
// end ;
23175: LD_VAR 0 3
23179: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23180: LD_INT 0
23182: PPUSH
23183: PPUSH
23184: PPUSH
23185: PPUSH
// result := false ;
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_INT 0
23193: ST_TO_ADDR
// side := GetSide ( unit ) ;
23194: LD_ADDR_VAR 0 3
23198: PUSH
23199: LD_VAR 0 1
23203: PPUSH
23204: CALL_OW 255
23208: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 248
23223: ST_TO_ADDR
// case nat of 1 :
23224: LD_VAR 0 4
23228: PUSH
23229: LD_INT 1
23231: DOUBLE
23232: EQUAL
23233: IFTRUE 23237
23235: GO 23248
23237: POP
// tech := tech_lassight ; 2 :
23238: LD_ADDR_VAR 0 5
23242: PUSH
23243: LD_INT 12
23245: ST_TO_ADDR
23246: GO 23287
23248: LD_INT 2
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23267
23256: POP
// tech := tech_mortar ; 3 :
23257: LD_ADDR_VAR 0 5
23261: PUSH
23262: LD_INT 41
23264: ST_TO_ADDR
23265: GO 23287
23267: LD_INT 3
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23286
23275: POP
// tech := tech_bazooka ; end ;
23276: LD_ADDR_VAR 0 5
23280: PUSH
23281: LD_INT 44
23283: ST_TO_ADDR
23284: GO 23287
23286: POP
// if Researched ( side , tech ) then
23287: LD_VAR 0 3
23291: PPUSH
23292: LD_VAR 0 5
23296: PPUSH
23297: CALL_OW 325
23301: IFFALSE 23328
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: LD_INT 5
23310: PUSH
23311: LD_INT 8
23313: PUSH
23314: LD_INT 9
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: PUSH
23322: LD_VAR 0 4
23326: ARRAY
23327: ST_TO_ADDR
// end ;
23328: LD_VAR 0 2
23332: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23333: LD_INT 0
23335: PPUSH
23336: PPUSH
23337: PPUSH
// if not mines then
23338: LD_VAR 0 2
23342: NOT
23343: IFFALSE 23347
// exit ;
23345: GO 23491
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23347: LD_ADDR_VAR 0 5
23351: PUSH
23352: LD_INT 81
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 3
23366: PUSH
23367: LD_INT 21
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// for i in mines do
23390: LD_ADDR_VAR 0 4
23394: PUSH
23395: LD_VAR 0 2
23399: PUSH
23400: FOR_IN
23401: IFFALSE 23489
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23403: LD_VAR 0 4
23407: PUSH
23408: LD_INT 1
23410: ARRAY
23411: PPUSH
23412: LD_VAR 0 4
23416: PUSH
23417: LD_INT 2
23419: ARRAY
23420: PPUSH
23421: CALL_OW 458
23425: NOT
23426: IFFALSE 23430
// continue ;
23428: GO 23400
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23430: LD_VAR 0 4
23434: PUSH
23435: LD_INT 1
23437: ARRAY
23438: PPUSH
23439: LD_VAR 0 4
23443: PUSH
23444: LD_INT 2
23446: ARRAY
23447: PPUSH
23448: CALL_OW 428
23452: PUSH
23453: LD_VAR 0 5
23457: IN
23458: IFFALSE 23487
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23460: LD_VAR 0 4
23464: PUSH
23465: LD_INT 1
23467: ARRAY
23468: PPUSH
23469: LD_VAR 0 4
23473: PUSH
23474: LD_INT 2
23476: ARRAY
23477: PPUSH
23478: LD_VAR 0 1
23482: PPUSH
23483: CALL_OW 456
// end ;
23487: GO 23400
23489: POP
23490: POP
// end ;
23491: LD_VAR 0 3
23495: RET
// export function Count ( array ) ; var i ; begin
23496: LD_INT 0
23498: PPUSH
23499: PPUSH
// result := 0 ;
23500: LD_ADDR_VAR 0 2
23504: PUSH
23505: LD_INT 0
23507: ST_TO_ADDR
// for i in array do
23508: LD_ADDR_VAR 0 3
23512: PUSH
23513: LD_VAR 0 1
23517: PUSH
23518: FOR_IN
23519: IFFALSE 23543
// if i then
23521: LD_VAR 0 3
23525: IFFALSE 23541
// result := result + 1 ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_VAR 0 2
23536: PUSH
23537: LD_INT 1
23539: PLUS
23540: ST_TO_ADDR
23541: GO 23518
23543: POP
23544: POP
// end ;
23545: LD_VAR 0 2
23549: RET
// export function IsEmpty ( building ) ; begin
23550: LD_INT 0
23552: PPUSH
// if not building then
23553: LD_VAR 0 1
23557: NOT
23558: IFFALSE 23562
// exit ;
23560: GO 23605
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23562: LD_ADDR_VAR 0 2
23566: PUSH
23567: LD_VAR 0 1
23571: PUSH
23572: LD_INT 22
23574: PUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 255
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 58
23591: PUSH
23592: EMPTY
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PPUSH
23599: CALL_OW 69
23603: IN
23604: ST_TO_ADDR
// end ;
23605: LD_VAR 0 2
23609: RET
// export function IsNotFull ( building ) ; begin
23610: LD_INT 0
23612: PPUSH
// if not building then
23613: LD_VAR 0 1
23617: NOT
23618: IFFALSE 23622
// exit ;
23620: GO 23641
// result := UnitsInside ( building ) < 6 ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_VAR 0 1
23631: PPUSH
23632: CALL_OW 313
23636: PUSH
23637: LD_INT 6
23639: LESS
23640: ST_TO_ADDR
// end ;
23641: LD_VAR 0 2
23645: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23646: LD_INT 0
23648: PPUSH
23649: PPUSH
23650: PPUSH
23651: PPUSH
// tmp := [ ] ;
23652: LD_ADDR_VAR 0 3
23656: PUSH
23657: EMPTY
23658: ST_TO_ADDR
// list := [ ] ;
23659: LD_ADDR_VAR 0 5
23663: PUSH
23664: EMPTY
23665: ST_TO_ADDR
// for i = 16 to 25 do
23666: LD_ADDR_VAR 0 4
23670: PUSH
23671: DOUBLE
23672: LD_INT 16
23674: DEC
23675: ST_TO_ADDR
23676: LD_INT 25
23678: PUSH
23679: FOR_TO
23680: IFFALSE 23753
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23682: LD_ADDR_VAR 0 3
23686: PUSH
23687: LD_VAR 0 3
23691: PUSH
23692: LD_INT 22
23694: PUSH
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 255
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 91
23711: PUSH
23712: LD_VAR 0 1
23716: PUSH
23717: LD_INT 6
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 30
23727: PUSH
23728: LD_VAR 0 4
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: PPUSH
23745: CALL_OW 69
23749: ADD
23750: ST_TO_ADDR
23751: GO 23679
23753: POP
23754: POP
// for i = 1 to tmp do
23755: LD_ADDR_VAR 0 4
23759: PUSH
23760: DOUBLE
23761: LD_INT 1
23763: DEC
23764: ST_TO_ADDR
23765: LD_VAR 0 3
23769: PUSH
23770: FOR_TO
23771: IFFALSE 23859
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23773: LD_ADDR_VAR 0 5
23777: PUSH
23778: LD_VAR 0 5
23782: PUSH
23783: LD_VAR 0 3
23787: PUSH
23788: LD_VAR 0 4
23792: ARRAY
23793: PPUSH
23794: CALL_OW 266
23798: PUSH
23799: LD_VAR 0 3
23803: PUSH
23804: LD_VAR 0 4
23808: ARRAY
23809: PPUSH
23810: CALL_OW 250
23814: PUSH
23815: LD_VAR 0 3
23819: PUSH
23820: LD_VAR 0 4
23824: ARRAY
23825: PPUSH
23826: CALL_OW 251
23830: PUSH
23831: LD_VAR 0 3
23835: PUSH
23836: LD_VAR 0 4
23840: ARRAY
23841: PPUSH
23842: CALL_OW 254
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: ADD
23856: ST_TO_ADDR
23857: GO 23770
23859: POP
23860: POP
// result := list ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: LD_VAR 0 5
23870: ST_TO_ADDR
// end ;
23871: LD_VAR 0 2
23875: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23876: LD_INT 0
23878: PPUSH
23879: PPUSH
23880: PPUSH
23881: PPUSH
23882: PPUSH
23883: PPUSH
23884: PPUSH
// if not factory then
23885: LD_VAR 0 1
23889: NOT
23890: IFFALSE 23894
// exit ;
23892: GO 24487
// if control = control_apeman then
23894: LD_VAR 0 4
23898: PUSH
23899: LD_INT 5
23901: EQUAL
23902: IFFALSE 24011
// begin tmp := UnitsInside ( factory ) ;
23904: LD_ADDR_VAR 0 8
23908: PUSH
23909: LD_VAR 0 1
23913: PPUSH
23914: CALL_OW 313
23918: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23919: LD_VAR 0 8
23923: PPUSH
23924: LD_INT 25
23926: PUSH
23927: LD_INT 12
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PPUSH
23934: CALL_OW 72
23938: NOT
23939: IFFALSE 23949
// control := control_manual ;
23941: LD_ADDR_VAR 0 4
23945: PUSH
23946: LD_INT 1
23948: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23949: LD_ADDR_VAR 0 8
23953: PUSH
23954: LD_VAR 0 1
23958: PPUSH
23959: CALL 23646 0 1
23963: ST_TO_ADDR
// if tmp then
23964: LD_VAR 0 8
23968: IFFALSE 24011
// begin for i in tmp do
23970: LD_ADDR_VAR 0 7
23974: PUSH
23975: LD_VAR 0 8
23979: PUSH
23980: FOR_IN
23981: IFFALSE 24009
// if i [ 1 ] = b_ext_radio then
23983: LD_VAR 0 7
23987: PUSH
23988: LD_INT 1
23990: ARRAY
23991: PUSH
23992: LD_INT 22
23994: EQUAL
23995: IFFALSE 24007
// begin control := control_remote ;
23997: LD_ADDR_VAR 0 4
24001: PUSH
24002: LD_INT 2
24004: ST_TO_ADDR
// break ;
24005: GO 24009
// end ;
24007: GO 23980
24009: POP
24010: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: LD_VAR 0 4
24030: PPUSH
24031: LD_VAR 0 5
24035: PPUSH
24036: CALL_OW 448
24040: IFFALSE 24075
// begin result := [ chassis , engine , control , weapon ] ;
24042: LD_ADDR_VAR 0 6
24046: PUSH
24047: LD_VAR 0 2
24051: PUSH
24052: LD_VAR 0 3
24056: PUSH
24057: LD_VAR 0 4
24061: PUSH
24062: LD_VAR 0 5
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: ST_TO_ADDR
// exit ;
24073: GO 24487
// end ; _chassis := AvailableChassisList ( factory ) ;
24075: LD_ADDR_VAR 0 9
24079: PUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL_OW 475
24089: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24090: LD_ADDR_VAR 0 11
24094: PUSH
24095: LD_VAR 0 1
24099: PPUSH
24100: CALL_OW 476
24104: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24105: LD_ADDR_VAR 0 12
24109: PUSH
24110: LD_VAR 0 1
24114: PPUSH
24115: CALL_OW 477
24119: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24120: LD_ADDR_VAR 0 10
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 478
24134: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24135: LD_VAR 0 9
24139: NOT
24140: PUSH
24141: LD_VAR 0 11
24145: NOT
24146: OR
24147: PUSH
24148: LD_VAR 0 12
24152: NOT
24153: OR
24154: PUSH
24155: LD_VAR 0 10
24159: NOT
24160: OR
24161: IFFALSE 24196
// begin result := [ chassis , engine , control , weapon ] ;
24163: LD_ADDR_VAR 0 6
24167: PUSH
24168: LD_VAR 0 2
24172: PUSH
24173: LD_VAR 0 3
24177: PUSH
24178: LD_VAR 0 4
24182: PUSH
24183: LD_VAR 0 5
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: ST_TO_ADDR
// exit ;
24194: GO 24487
// end ; if not chassis in _chassis then
24196: LD_VAR 0 2
24200: PUSH
24201: LD_VAR 0 9
24205: IN
24206: NOT
24207: IFFALSE 24233
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24209: LD_ADDR_VAR 0 2
24213: PUSH
24214: LD_VAR 0 9
24218: PUSH
24219: LD_INT 1
24221: PPUSH
24222: LD_VAR 0 9
24226: PPUSH
24227: CALL_OW 12
24231: ARRAY
24232: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24233: LD_VAR 0 2
24237: PPUSH
24238: LD_VAR 0 3
24242: PPUSH
24243: CALL 24492 0 2
24247: NOT
24248: IFFALSE 24307
// repeat engine := _engine [ 1 ] ;
24250: LD_ADDR_VAR 0 3
24254: PUSH
24255: LD_VAR 0 11
24259: PUSH
24260: LD_INT 1
24262: ARRAY
24263: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24264: LD_ADDR_VAR 0 11
24268: PUSH
24269: LD_VAR 0 11
24273: PPUSH
24274: LD_INT 1
24276: PPUSH
24277: CALL_OW 3
24281: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24282: LD_VAR 0 2
24286: PPUSH
24287: LD_VAR 0 3
24291: PPUSH
24292: CALL 24492 0 2
24296: PUSH
24297: LD_VAR 0 11
24301: PUSH
24302: EMPTY
24303: EQUAL
24304: OR
24305: IFFALSE 24250
// if not control in _control then
24307: LD_VAR 0 4
24311: PUSH
24312: LD_VAR 0 12
24316: IN
24317: NOT
24318: IFFALSE 24344
// control := _control [ rand ( 1 , _control ) ] ;
24320: LD_ADDR_VAR 0 4
24324: PUSH
24325: LD_VAR 0 12
24329: PUSH
24330: LD_INT 1
24332: PPUSH
24333: LD_VAR 0 12
24337: PPUSH
24338: CALL_OW 12
24342: ARRAY
24343: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24344: LD_VAR 0 2
24348: PPUSH
24349: LD_VAR 0 5
24353: PPUSH
24354: CALL 24712 0 2
24358: NOT
24359: IFFALSE 24418
// repeat weapon := _weapon [ 1 ] ;
24361: LD_ADDR_VAR 0 5
24365: PUSH
24366: LD_VAR 0 10
24370: PUSH
24371: LD_INT 1
24373: ARRAY
24374: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24375: LD_ADDR_VAR 0 10
24379: PUSH
24380: LD_VAR 0 10
24384: PPUSH
24385: LD_INT 1
24387: PPUSH
24388: CALL_OW 3
24392: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24393: LD_VAR 0 2
24397: PPUSH
24398: LD_VAR 0 5
24402: PPUSH
24403: CALL 24712 0 2
24407: PUSH
24408: LD_VAR 0 10
24412: PUSH
24413: EMPTY
24414: EQUAL
24415: OR
24416: IFFALSE 24361
// result := [ ] ;
24418: LD_ADDR_VAR 0 6
24422: PUSH
24423: EMPTY
24424: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24425: LD_VAR 0 1
24429: PPUSH
24430: LD_VAR 0 2
24434: PPUSH
24435: LD_VAR 0 3
24439: PPUSH
24440: LD_VAR 0 4
24444: PPUSH
24445: LD_VAR 0 5
24449: PPUSH
24450: CALL_OW 448
24454: IFFALSE 24487
// result := [ chassis , engine , control , weapon ] ;
24456: LD_ADDR_VAR 0 6
24460: PUSH
24461: LD_VAR 0 2
24465: PUSH
24466: LD_VAR 0 3
24470: PUSH
24471: LD_VAR 0 4
24475: PUSH
24476: LD_VAR 0 5
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: ST_TO_ADDR
// end ;
24487: LD_VAR 0 6
24491: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24492: LD_INT 0
24494: PPUSH
// if not chassis or not engine then
24495: LD_VAR 0 1
24499: NOT
24500: PUSH
24501: LD_VAR 0 2
24505: NOT
24506: OR
24507: IFFALSE 24511
// exit ;
24509: GO 24707
// case engine of engine_solar :
24511: LD_VAR 0 2
24515: PUSH
24516: LD_INT 2
24518: DOUBLE
24519: EQUAL
24520: IFTRUE 24524
24522: GO 24562
24524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24525: LD_ADDR_VAR 0 3
24529: PUSH
24530: LD_INT 11
24532: PUSH
24533: LD_INT 12
24535: PUSH
24536: LD_INT 13
24538: PUSH
24539: LD_INT 14
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: LD_INT 2
24547: PUSH
24548: LD_INT 3
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: ST_TO_ADDR
24560: GO 24691
24562: LD_INT 1
24564: DOUBLE
24565: EQUAL
24566: IFTRUE 24570
24568: GO 24632
24570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24571: LD_ADDR_VAR 0 3
24575: PUSH
24576: LD_INT 11
24578: PUSH
24579: LD_INT 12
24581: PUSH
24582: LD_INT 13
24584: PUSH
24585: LD_INT 14
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: LD_INT 4
24599: PUSH
24600: LD_INT 5
24602: PUSH
24603: LD_INT 21
24605: PUSH
24606: LD_INT 23
24608: PUSH
24609: LD_INT 22
24611: PUSH
24612: LD_INT 24
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
24630: GO 24691
24632: LD_INT 3
24634: DOUBLE
24635: EQUAL
24636: IFTRUE 24640
24638: GO 24690
24640: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_INT 13
24648: PUSH
24649: LD_INT 14
24651: PUSH
24652: LD_INT 2
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: LD_INT 4
24660: PUSH
24661: LD_INT 5
24663: PUSH
24664: LD_INT 21
24666: PUSH
24667: LD_INT 22
24669: PUSH
24670: LD_INT 23
24672: PUSH
24673: LD_INT 24
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: ST_TO_ADDR
24688: GO 24691
24690: POP
// result := ( chassis in result ) ;
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_VAR 0 1
24700: PUSH
24701: LD_VAR 0 3
24705: IN
24706: ST_TO_ADDR
// end ;
24707: LD_VAR 0 3
24711: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24712: LD_INT 0
24714: PPUSH
// if not chassis or not weapon then
24715: LD_VAR 0 1
24719: NOT
24720: PUSH
24721: LD_VAR 0 2
24725: NOT
24726: OR
24727: IFFALSE 24731
// exit ;
24729: GO 25757
// case weapon of us_machine_gun :
24731: LD_VAR 0 2
24735: PUSH
24736: LD_INT 2
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24774
24744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24745: LD_ADDR_VAR 0 3
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 3
24758: PUSH
24759: LD_INT 4
24761: PUSH
24762: LD_INT 5
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: ST_TO_ADDR
24772: GO 25741
24774: LD_INT 3
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24812
24782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24783: LD_ADDR_VAR 0 3
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: LD_INT 4
24799: PUSH
24800: LD_INT 5
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: ST_TO_ADDR
24810: GO 25741
24812: LD_INT 11
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24850
24820: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 3
24834: PUSH
24835: LD_INT 4
24837: PUSH
24838: LD_INT 5
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: ST_TO_ADDR
24848: GO 25741
24850: LD_INT 4
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24884
24858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24859: LD_ADDR_VAR 0 3
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 3
24869: PUSH
24870: LD_INT 4
24872: PUSH
24873: LD_INT 5
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: ST_TO_ADDR
24882: GO 25741
24884: LD_INT 5
24886: DOUBLE
24887: EQUAL
24888: IFTRUE 24892
24890: GO 24918
24892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24893: LD_ADDR_VAR 0 3
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 4
24906: PUSH
24907: LD_INT 5
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 25741
24918: LD_INT 9
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24952
24926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 3
24937: PUSH
24938: LD_INT 4
24940: PUSH
24941: LD_INT 5
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: ST_TO_ADDR
24950: GO 25741
24952: LD_INT 7
24954: DOUBLE
24955: EQUAL
24956: IFTRUE 24960
24958: GO 24986
24960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24961: LD_ADDR_VAR 0 3
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 4
24974: PUSH
24975: LD_INT 5
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: ST_TO_ADDR
24984: GO 25741
24986: LD_INT 12
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25020
24994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24995: LD_ADDR_VAR 0 3
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 4
25008: PUSH
25009: LD_INT 5
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: ST_TO_ADDR
25018: GO 25741
25020: LD_INT 13
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25054
25028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 3
25039: PUSH
25040: LD_INT 4
25042: PUSH
25043: LD_INT 5
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: ST_TO_ADDR
25052: GO 25741
25054: LD_INT 14
25056: DOUBLE
25057: EQUAL
25058: IFTRUE 25062
25060: GO 25080
25062: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: LD_INT 4
25070: PUSH
25071: LD_INT 5
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: ST_TO_ADDR
25078: GO 25741
25080: LD_INT 6
25082: DOUBLE
25083: EQUAL
25084: IFTRUE 25088
25086: GO 25106
25088: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25089: LD_ADDR_VAR 0 3
25093: PUSH
25094: LD_INT 4
25096: PUSH
25097: LD_INT 5
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: ST_TO_ADDR
25104: GO 25741
25106: LD_INT 10
25108: DOUBLE
25109: EQUAL
25110: IFTRUE 25114
25112: GO 25132
25114: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_INT 4
25122: PUSH
25123: LD_INT 5
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: ST_TO_ADDR
25130: GO 25741
25132: LD_INT 22
25134: DOUBLE
25135: EQUAL
25136: IFTRUE 25140
25138: GO 25166
25140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25141: LD_ADDR_VAR 0 3
25145: PUSH
25146: LD_INT 11
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 13
25154: PUSH
25155: LD_INT 14
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
25164: GO 25741
25166: LD_INT 23
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25200
25174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_INT 11
25182: PUSH
25183: LD_INT 12
25185: PUSH
25186: LD_INT 13
25188: PUSH
25189: LD_INT 14
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 25741
25200: LD_INT 24
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25234
25208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_INT 11
25216: PUSH
25217: LD_INT 12
25219: PUSH
25220: LD_INT 13
25222: PUSH
25223: LD_INT 14
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: ST_TO_ADDR
25232: GO 25741
25234: LD_INT 30
25236: DOUBLE
25237: EQUAL
25238: IFTRUE 25242
25240: GO 25268
25242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: LD_INT 11
25250: PUSH
25251: LD_INT 12
25253: PUSH
25254: LD_INT 13
25256: PUSH
25257: LD_INT 14
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
25266: GO 25741
25268: LD_INT 25
25270: DOUBLE
25271: EQUAL
25272: IFTRUE 25276
25274: GO 25294
25276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_INT 13
25284: PUSH
25285: LD_INT 14
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: ST_TO_ADDR
25292: GO 25741
25294: LD_INT 27
25296: DOUBLE
25297: EQUAL
25298: IFTRUE 25302
25300: GO 25320
25302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_INT 13
25310: PUSH
25311: LD_INT 14
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 25741
25320: LD_INT 28
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25346
25328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 13
25336: PUSH
25337: LD_INT 14
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: ST_TO_ADDR
25344: GO 25741
25346: LD_INT 29
25348: DOUBLE
25349: EQUAL
25350: IFTRUE 25354
25352: GO 25372
25354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_INT 13
25362: PUSH
25363: LD_INT 14
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: ST_TO_ADDR
25370: GO 25741
25372: LD_INT 31
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25398
25380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25381: LD_ADDR_VAR 0 3
25385: PUSH
25386: LD_INT 13
25388: PUSH
25389: LD_INT 14
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: ST_TO_ADDR
25396: GO 25741
25398: LD_INT 26
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25406
25404: GO 25424
25406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25407: LD_ADDR_VAR 0 3
25411: PUSH
25412: LD_INT 13
25414: PUSH
25415: LD_INT 14
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: ST_TO_ADDR
25422: GO 25741
25424: LD_INT 42
25426: DOUBLE
25427: EQUAL
25428: IFTRUE 25432
25430: GO 25458
25432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25433: LD_ADDR_VAR 0 3
25437: PUSH
25438: LD_INT 21
25440: PUSH
25441: LD_INT 22
25443: PUSH
25444: LD_INT 23
25446: PUSH
25447: LD_INT 24
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: ST_TO_ADDR
25456: GO 25741
25458: LD_INT 43
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25492
25466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_INT 21
25474: PUSH
25475: LD_INT 22
25477: PUSH
25478: LD_INT 23
25480: PUSH
25481: LD_INT 24
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
25490: GO 25741
25492: LD_INT 44
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25526
25500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: LD_INT 21
25508: PUSH
25509: LD_INT 22
25511: PUSH
25512: LD_INT 23
25514: PUSH
25515: LD_INT 24
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: ST_TO_ADDR
25524: GO 25741
25526: LD_INT 45
25528: DOUBLE
25529: EQUAL
25530: IFTRUE 25534
25532: GO 25560
25534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25535: LD_ADDR_VAR 0 3
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 22
25545: PUSH
25546: LD_INT 23
25548: PUSH
25549: LD_INT 24
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
25558: GO 25741
25560: LD_INT 49
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 25594
25568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25569: LD_ADDR_VAR 0 3
25573: PUSH
25574: LD_INT 21
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_INT 23
25582: PUSH
25583: LD_INT 24
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: ST_TO_ADDR
25592: GO 25741
25594: LD_INT 51
25596: DOUBLE
25597: EQUAL
25598: IFTRUE 25602
25600: GO 25628
25602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25603: LD_ADDR_VAR 0 3
25607: PUSH
25608: LD_INT 21
25610: PUSH
25611: LD_INT 22
25613: PUSH
25614: LD_INT 23
25616: PUSH
25617: LD_INT 24
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: ST_TO_ADDR
25626: GO 25741
25628: LD_INT 52
25630: DOUBLE
25631: EQUAL
25632: IFTRUE 25636
25634: GO 25662
25636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25637: LD_ADDR_VAR 0 3
25641: PUSH
25642: LD_INT 21
25644: PUSH
25645: LD_INT 22
25647: PUSH
25648: LD_INT 23
25650: PUSH
25651: LD_INT 24
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: ST_TO_ADDR
25660: GO 25741
25662: LD_INT 53
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25688
25670: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 23
25678: PUSH
25679: LD_INT 24
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: ST_TO_ADDR
25686: GO 25741
25688: LD_INT 46
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25714
25696: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25697: LD_ADDR_VAR 0 3
25701: PUSH
25702: LD_INT 23
25704: PUSH
25705: LD_INT 24
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: ST_TO_ADDR
25712: GO 25741
25714: LD_INT 47
25716: DOUBLE
25717: EQUAL
25718: IFTRUE 25722
25720: GO 25740
25722: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_INT 23
25730: PUSH
25731: LD_INT 24
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: ST_TO_ADDR
25738: GO 25741
25740: POP
// result := ( chassis in result ) ;
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_VAR 0 1
25750: PUSH
25751: LD_VAR 0 3
25755: IN
25756: ST_TO_ADDR
// end ;
25757: LD_VAR 0 3
25761: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25762: LD_INT 0
25764: PPUSH
25765: PPUSH
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
25770: PPUSH
// result := array ;
25771: LD_ADDR_VAR 0 5
25775: PUSH
25776: LD_VAR 0 1
25780: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25781: LD_VAR 0 1
25785: NOT
25786: PUSH
25787: LD_VAR 0 2
25791: NOT
25792: OR
25793: PUSH
25794: LD_VAR 0 3
25798: NOT
25799: OR
25800: PUSH
25801: LD_VAR 0 2
25805: PUSH
25806: LD_VAR 0 1
25810: GREATER
25811: OR
25812: PUSH
25813: LD_VAR 0 3
25817: PUSH
25818: LD_VAR 0 1
25822: GREATER
25823: OR
25824: IFFALSE 25828
// exit ;
25826: GO 26124
// if direction then
25828: LD_VAR 0 4
25832: IFFALSE 25896
// begin d := 1 ;
25834: LD_ADDR_VAR 0 9
25838: PUSH
25839: LD_INT 1
25841: ST_TO_ADDR
// if i_from > i_to then
25842: LD_VAR 0 2
25846: PUSH
25847: LD_VAR 0 3
25851: GREATER
25852: IFFALSE 25878
// length := ( array - i_from ) + i_to else
25854: LD_ADDR_VAR 0 11
25858: PUSH
25859: LD_VAR 0 1
25863: PUSH
25864: LD_VAR 0 2
25868: MINUS
25869: PUSH
25870: LD_VAR 0 3
25874: PLUS
25875: ST_TO_ADDR
25876: GO 25894
// length := i_to - i_from ;
25878: LD_ADDR_VAR 0 11
25882: PUSH
25883: LD_VAR 0 3
25887: PUSH
25888: LD_VAR 0 2
25892: MINUS
25893: ST_TO_ADDR
// end else
25894: GO 25957
// begin d := - 1 ;
25896: LD_ADDR_VAR 0 9
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: ST_TO_ADDR
// if i_from > i_to then
25905: LD_VAR 0 2
25909: PUSH
25910: LD_VAR 0 3
25914: GREATER
25915: IFFALSE 25935
// length := i_from - i_to else
25917: LD_ADDR_VAR 0 11
25921: PUSH
25922: LD_VAR 0 2
25926: PUSH
25927: LD_VAR 0 3
25931: MINUS
25932: ST_TO_ADDR
25933: GO 25957
// length := ( array - i_to ) + i_from ;
25935: LD_ADDR_VAR 0 11
25939: PUSH
25940: LD_VAR 0 1
25944: PUSH
25945: LD_VAR 0 3
25949: MINUS
25950: PUSH
25951: LD_VAR 0 2
25955: PLUS
25956: ST_TO_ADDR
// end ; if not length then
25957: LD_VAR 0 11
25961: NOT
25962: IFFALSE 25966
// exit ;
25964: GO 26124
// tmp := array ;
25966: LD_ADDR_VAR 0 10
25970: PUSH
25971: LD_VAR 0 1
25975: ST_TO_ADDR
// for i = 1 to length do
25976: LD_ADDR_VAR 0 6
25980: PUSH
25981: DOUBLE
25982: LD_INT 1
25984: DEC
25985: ST_TO_ADDR
25986: LD_VAR 0 11
25990: PUSH
25991: FOR_TO
25992: IFFALSE 26112
// begin for j = 1 to array do
25994: LD_ADDR_VAR 0 7
25998: PUSH
25999: DOUBLE
26000: LD_INT 1
26002: DEC
26003: ST_TO_ADDR
26004: LD_VAR 0 1
26008: PUSH
26009: FOR_TO
26010: IFFALSE 26098
// begin k := j + d ;
26012: LD_ADDR_VAR 0 8
26016: PUSH
26017: LD_VAR 0 7
26021: PUSH
26022: LD_VAR 0 9
26026: PLUS
26027: ST_TO_ADDR
// if k > array then
26028: LD_VAR 0 8
26032: PUSH
26033: LD_VAR 0 1
26037: GREATER
26038: IFFALSE 26048
// k := 1 ;
26040: LD_ADDR_VAR 0 8
26044: PUSH
26045: LD_INT 1
26047: ST_TO_ADDR
// if not k then
26048: LD_VAR 0 8
26052: NOT
26053: IFFALSE 26065
// k := array ;
26055: LD_ADDR_VAR 0 8
26059: PUSH
26060: LD_VAR 0 1
26064: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26065: LD_ADDR_VAR 0 10
26069: PUSH
26070: LD_VAR 0 10
26074: PPUSH
26075: LD_VAR 0 8
26079: PPUSH
26080: LD_VAR 0 1
26084: PUSH
26085: LD_VAR 0 7
26089: ARRAY
26090: PPUSH
26091: CALL_OW 1
26095: ST_TO_ADDR
// end ;
26096: GO 26009
26098: POP
26099: POP
// array := tmp ;
26100: LD_ADDR_VAR 0 1
26104: PUSH
26105: LD_VAR 0 10
26109: ST_TO_ADDR
// end ;
26110: GO 25991
26112: POP
26113: POP
// result := array ;
26114: LD_ADDR_VAR 0 5
26118: PUSH
26119: LD_VAR 0 1
26123: ST_TO_ADDR
// end ;
26124: LD_VAR 0 5
26128: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26129: LD_INT 0
26131: PPUSH
26132: PPUSH
// result := 0 ;
26133: LD_ADDR_VAR 0 3
26137: PUSH
26138: LD_INT 0
26140: ST_TO_ADDR
// if not array or not value in array then
26141: LD_VAR 0 1
26145: NOT
26146: PUSH
26147: LD_VAR 0 2
26151: PUSH
26152: LD_VAR 0 1
26156: IN
26157: NOT
26158: OR
26159: IFFALSE 26163
// exit ;
26161: GO 26217
// for i = 1 to array do
26163: LD_ADDR_VAR 0 4
26167: PUSH
26168: DOUBLE
26169: LD_INT 1
26171: DEC
26172: ST_TO_ADDR
26173: LD_VAR 0 1
26177: PUSH
26178: FOR_TO
26179: IFFALSE 26215
// if value = array [ i ] then
26181: LD_VAR 0 2
26185: PUSH
26186: LD_VAR 0 1
26190: PUSH
26191: LD_VAR 0 4
26195: ARRAY
26196: EQUAL
26197: IFFALSE 26213
// begin result := i ;
26199: LD_ADDR_VAR 0 3
26203: PUSH
26204: LD_VAR 0 4
26208: ST_TO_ADDR
// exit ;
26209: POP
26210: POP
26211: GO 26217
// end ;
26213: GO 26178
26215: POP
26216: POP
// end ;
26217: LD_VAR 0 3
26221: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26222: LD_INT 0
26224: PPUSH
// vc_chassis := chassis ;
26225: LD_ADDR_OWVAR 37
26229: PUSH
26230: LD_VAR 0 1
26234: ST_TO_ADDR
// vc_engine := engine ;
26235: LD_ADDR_OWVAR 39
26239: PUSH
26240: LD_VAR 0 2
26244: ST_TO_ADDR
// vc_control := control ;
26245: LD_ADDR_OWVAR 38
26249: PUSH
26250: LD_VAR 0 3
26254: ST_TO_ADDR
// vc_weapon := weapon ;
26255: LD_ADDR_OWVAR 40
26259: PUSH
26260: LD_VAR 0 4
26264: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26265: LD_ADDR_OWVAR 41
26269: PUSH
26270: LD_VAR 0 5
26274: ST_TO_ADDR
// end ;
26275: LD_VAR 0 6
26279: RET
// export function WantPlant ( unit ) ; var task ; begin
26280: LD_INT 0
26282: PPUSH
26283: PPUSH
// result := false ;
26284: LD_ADDR_VAR 0 2
26288: PUSH
26289: LD_INT 0
26291: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26292: LD_ADDR_VAR 0 3
26296: PUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 437
26306: ST_TO_ADDR
// if task then
26307: LD_VAR 0 3
26311: IFFALSE 26339
// if task [ 1 ] [ 1 ] = p then
26313: LD_VAR 0 3
26317: PUSH
26318: LD_INT 1
26320: ARRAY
26321: PUSH
26322: LD_INT 1
26324: ARRAY
26325: PUSH
26326: LD_STRING p
26328: EQUAL
26329: IFFALSE 26339
// result := true ;
26331: LD_ADDR_VAR 0 2
26335: PUSH
26336: LD_INT 1
26338: ST_TO_ADDR
// end ;
26339: LD_VAR 0 2
26343: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
26348: PPUSH
26349: PPUSH
// if pos < 1 then
26350: LD_VAR 0 2
26354: PUSH
26355: LD_INT 1
26357: LESS
26358: IFFALSE 26362
// exit ;
26360: GO 26665
// if pos = 1 then
26362: LD_VAR 0 2
26366: PUSH
26367: LD_INT 1
26369: EQUAL
26370: IFFALSE 26403
// result := Replace ( arr , pos [ 1 ] , value ) else
26372: LD_ADDR_VAR 0 4
26376: PUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: LD_VAR 0 2
26386: PUSH
26387: LD_INT 1
26389: ARRAY
26390: PPUSH
26391: LD_VAR 0 3
26395: PPUSH
26396: CALL_OW 1
26400: ST_TO_ADDR
26401: GO 26665
// begin tmp := arr ;
26403: LD_ADDR_VAR 0 6
26407: PUSH
26408: LD_VAR 0 1
26412: ST_TO_ADDR
// s_arr := [ tmp ] ;
26413: LD_ADDR_VAR 0 7
26417: PUSH
26418: LD_VAR 0 6
26422: PUSH
26423: EMPTY
26424: LIST
26425: ST_TO_ADDR
// for i = 1 to pos - 1 do
26426: LD_ADDR_VAR 0 5
26430: PUSH
26431: DOUBLE
26432: LD_INT 1
26434: DEC
26435: ST_TO_ADDR
26436: LD_VAR 0 2
26440: PUSH
26441: LD_INT 1
26443: MINUS
26444: PUSH
26445: FOR_TO
26446: IFFALSE 26491
// begin tmp := tmp [ pos [ i ] ] ;
26448: LD_ADDR_VAR 0 6
26452: PUSH
26453: LD_VAR 0 6
26457: PUSH
26458: LD_VAR 0 2
26462: PUSH
26463: LD_VAR 0 5
26467: ARRAY
26468: ARRAY
26469: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26470: LD_ADDR_VAR 0 7
26474: PUSH
26475: LD_VAR 0 7
26479: PUSH
26480: LD_VAR 0 6
26484: PUSH
26485: EMPTY
26486: LIST
26487: ADD
26488: ST_TO_ADDR
// end ;
26489: GO 26445
26491: POP
26492: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26493: LD_ADDR_VAR 0 6
26497: PUSH
26498: LD_VAR 0 6
26502: PPUSH
26503: LD_VAR 0 2
26507: PUSH
26508: LD_VAR 0 2
26512: ARRAY
26513: PPUSH
26514: LD_VAR 0 3
26518: PPUSH
26519: CALL_OW 1
26523: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26524: LD_ADDR_VAR 0 7
26528: PUSH
26529: LD_VAR 0 7
26533: PPUSH
26534: LD_VAR 0 7
26538: PPUSH
26539: LD_VAR 0 6
26543: PPUSH
26544: CALL_OW 1
26548: ST_TO_ADDR
// for i = s_arr downto 2 do
26549: LD_ADDR_VAR 0 5
26553: PUSH
26554: DOUBLE
26555: LD_VAR 0 7
26559: INC
26560: ST_TO_ADDR
26561: LD_INT 2
26563: PUSH
26564: FOR_DOWNTO
26565: IFFALSE 26649
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26567: LD_ADDR_VAR 0 6
26571: PUSH
26572: LD_VAR 0 7
26576: PUSH
26577: LD_VAR 0 5
26581: PUSH
26582: LD_INT 1
26584: MINUS
26585: ARRAY
26586: PPUSH
26587: LD_VAR 0 2
26591: PUSH
26592: LD_VAR 0 5
26596: PUSH
26597: LD_INT 1
26599: MINUS
26600: ARRAY
26601: PPUSH
26602: LD_VAR 0 7
26606: PUSH
26607: LD_VAR 0 5
26611: ARRAY
26612: PPUSH
26613: CALL_OW 1
26617: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26618: LD_ADDR_VAR 0 7
26622: PUSH
26623: LD_VAR 0 7
26627: PPUSH
26628: LD_VAR 0 5
26632: PUSH
26633: LD_INT 1
26635: MINUS
26636: PPUSH
26637: LD_VAR 0 6
26641: PPUSH
26642: CALL_OW 1
26646: ST_TO_ADDR
// end ;
26647: GO 26564
26649: POP
26650: POP
// result := s_arr [ 1 ] ;
26651: LD_ADDR_VAR 0 4
26655: PUSH
26656: LD_VAR 0 7
26660: PUSH
26661: LD_INT 1
26663: ARRAY
26664: ST_TO_ADDR
// end ; end ;
26665: LD_VAR 0 4
26669: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
// if not list then
26674: LD_VAR 0 1
26678: NOT
26679: IFFALSE 26683
// exit ;
26681: GO 26774
// i := list [ pos1 ] ;
26683: LD_ADDR_VAR 0 5
26687: PUSH
26688: LD_VAR 0 1
26692: PUSH
26693: LD_VAR 0 2
26697: ARRAY
26698: ST_TO_ADDR
// if not i then
26699: LD_VAR 0 5
26703: NOT
26704: IFFALSE 26708
// exit ;
26706: GO 26774
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26708: LD_ADDR_VAR 0 1
26712: PUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: LD_VAR 0 1
26727: PUSH
26728: LD_VAR 0 3
26732: ARRAY
26733: PPUSH
26734: CALL_OW 1
26738: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26739: LD_ADDR_VAR 0 1
26743: PUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: LD_VAR 0 5
26758: PPUSH
26759: CALL_OW 1
26763: ST_TO_ADDR
// result := list ;
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: LD_VAR 0 1
26773: ST_TO_ADDR
// end ;
26774: LD_VAR 0 4
26778: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26779: LD_INT 0
26781: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26782: LD_ADDR_VAR 0 5
26786: PUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 250
26796: PPUSH
26797: LD_VAR 0 1
26801: PPUSH
26802: CALL_OW 251
26806: PPUSH
26807: LD_VAR 0 2
26811: PPUSH
26812: LD_VAR 0 3
26816: PPUSH
26817: LD_VAR 0 4
26821: PPUSH
26822: CALL 26832 0 5
26826: ST_TO_ADDR
// end ;
26827: LD_VAR 0 5
26831: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
// if not list then
26838: LD_VAR 0 3
26842: NOT
26843: IFFALSE 26847
// exit ;
26845: GO 27235
// result := [ ] ;
26847: LD_ADDR_VAR 0 6
26851: PUSH
26852: EMPTY
26853: ST_TO_ADDR
// for i in list do
26854: LD_ADDR_VAR 0 7
26858: PUSH
26859: LD_VAR 0 3
26863: PUSH
26864: FOR_IN
26865: IFFALSE 27067
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26867: LD_ADDR_VAR 0 9
26871: PUSH
26872: LD_VAR 0 7
26876: PPUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: LD_VAR 0 2
26886: PPUSH
26887: CALL_OW 297
26891: ST_TO_ADDR
// if not result then
26892: LD_VAR 0 6
26896: NOT
26897: IFFALSE 26923
// result := [ [ i , tmp ] ] else
26899: LD_ADDR_VAR 0 6
26903: PUSH
26904: LD_VAR 0 7
26908: PUSH
26909: LD_VAR 0 9
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: ST_TO_ADDR
26921: GO 27065
// begin if result [ result ] [ 2 ] < tmp then
26923: LD_VAR 0 6
26927: PUSH
26928: LD_VAR 0 6
26932: ARRAY
26933: PUSH
26934: LD_INT 2
26936: ARRAY
26937: PUSH
26938: LD_VAR 0 9
26942: LESS
26943: IFFALSE 26985
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26945: LD_ADDR_VAR 0 6
26949: PUSH
26950: LD_VAR 0 6
26954: PPUSH
26955: LD_VAR 0 6
26959: PUSH
26960: LD_INT 1
26962: PLUS
26963: PPUSH
26964: LD_VAR 0 7
26968: PUSH
26969: LD_VAR 0 9
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 2
26982: ST_TO_ADDR
26983: GO 27065
// for j = 1 to result do
26985: LD_ADDR_VAR 0 8
26989: PUSH
26990: DOUBLE
26991: LD_INT 1
26993: DEC
26994: ST_TO_ADDR
26995: LD_VAR 0 6
26999: PUSH
27000: FOR_TO
27001: IFFALSE 27063
// begin if tmp < result [ j ] [ 2 ] then
27003: LD_VAR 0 9
27007: PUSH
27008: LD_VAR 0 6
27012: PUSH
27013: LD_VAR 0 8
27017: ARRAY
27018: PUSH
27019: LD_INT 2
27021: ARRAY
27022: LESS
27023: IFFALSE 27061
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27025: LD_ADDR_VAR 0 6
27029: PUSH
27030: LD_VAR 0 6
27034: PPUSH
27035: LD_VAR 0 8
27039: PPUSH
27040: LD_VAR 0 7
27044: PUSH
27045: LD_VAR 0 9
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PPUSH
27054: CALL_OW 2
27058: ST_TO_ADDR
// break ;
27059: GO 27063
// end ; end ;
27061: GO 27000
27063: POP
27064: POP
// end ; end ;
27065: GO 26864
27067: POP
27068: POP
// if result and not asc then
27069: LD_VAR 0 6
27073: PUSH
27074: LD_VAR 0 4
27078: NOT
27079: AND
27080: IFFALSE 27155
// begin tmp := result ;
27082: LD_ADDR_VAR 0 9
27086: PUSH
27087: LD_VAR 0 6
27091: ST_TO_ADDR
// for i = tmp downto 1 do
27092: LD_ADDR_VAR 0 7
27096: PUSH
27097: DOUBLE
27098: LD_VAR 0 9
27102: INC
27103: ST_TO_ADDR
27104: LD_INT 1
27106: PUSH
27107: FOR_DOWNTO
27108: IFFALSE 27153
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27110: LD_ADDR_VAR 0 6
27114: PUSH
27115: LD_VAR 0 6
27119: PPUSH
27120: LD_VAR 0 9
27124: PUSH
27125: LD_VAR 0 7
27129: MINUS
27130: PUSH
27131: LD_INT 1
27133: PLUS
27134: PPUSH
27135: LD_VAR 0 9
27139: PUSH
27140: LD_VAR 0 7
27144: ARRAY
27145: PPUSH
27146: CALL_OW 1
27150: ST_TO_ADDR
27151: GO 27107
27153: POP
27154: POP
// end ; tmp := [ ] ;
27155: LD_ADDR_VAR 0 9
27159: PUSH
27160: EMPTY
27161: ST_TO_ADDR
// if mode then
27162: LD_VAR 0 5
27166: IFFALSE 27235
// begin for i = 1 to result do
27168: LD_ADDR_VAR 0 7
27172: PUSH
27173: DOUBLE
27174: LD_INT 1
27176: DEC
27177: ST_TO_ADDR
27178: LD_VAR 0 6
27182: PUSH
27183: FOR_TO
27184: IFFALSE 27223
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27186: LD_ADDR_VAR 0 9
27190: PUSH
27191: LD_VAR 0 9
27195: PPUSH
27196: LD_VAR 0 7
27200: PPUSH
27201: LD_VAR 0 6
27205: PUSH
27206: LD_VAR 0 7
27210: ARRAY
27211: PUSH
27212: LD_INT 1
27214: ARRAY
27215: PPUSH
27216: CALL_OW 1
27220: ST_TO_ADDR
27221: GO 27183
27223: POP
27224: POP
// result := tmp ;
27225: LD_ADDR_VAR 0 6
27229: PUSH
27230: LD_VAR 0 9
27234: ST_TO_ADDR
// end ; end ;
27235: LD_VAR 0 6
27239: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// if not x or not y then
27270: LD_VAR 0 2
27274: NOT
27275: PUSH
27276: LD_VAR 0 3
27280: NOT
27281: OR
27282: IFFALSE 27286
// exit ;
27284: GO 28932
// if not range then
27286: LD_VAR 0 4
27290: NOT
27291: IFFALSE 27301
// range := 10 ;
27293: LD_ADDR_VAR 0 4
27297: PUSH
27298: LD_INT 10
27300: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27301: LD_ADDR_VAR 0 8
27305: PUSH
27306: LD_INT 81
27308: PUSH
27309: LD_VAR 0 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 92
27320: PUSH
27321: LD_VAR 0 2
27325: PUSH
27326: LD_VAR 0 3
27330: PUSH
27331: LD_VAR 0 4
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 3
27344: PUSH
27345: LD_INT 21
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: PPUSH
27364: CALL_OW 69
27368: ST_TO_ADDR
// if not tmp then
27369: LD_VAR 0 8
27373: NOT
27374: IFFALSE 27378
// exit ;
27376: GO 28932
// for i in tmp do
27378: LD_ADDR_VAR 0 6
27382: PUSH
27383: LD_VAR 0 8
27387: PUSH
27388: FOR_IN
27389: IFFALSE 28907
// begin points := [ 0 , 0 , 0 ] ;
27391: LD_ADDR_VAR 0 9
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: ST_TO_ADDR
// bpoints := 1 ;
27410: LD_ADDR_VAR 0 10
27414: PUSH
27415: LD_INT 1
27417: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27418: LD_VAR 0 6
27422: PPUSH
27423: CALL_OW 247
27427: PUSH
27428: LD_INT 1
27430: DOUBLE
27431: EQUAL
27432: IFTRUE 27436
27434: GO 28014
27436: POP
// begin if GetClass ( i ) = 1 then
27437: LD_VAR 0 6
27441: PPUSH
27442: CALL_OW 257
27446: PUSH
27447: LD_INT 1
27449: EQUAL
27450: IFFALSE 27471
// points := [ 10 , 5 , 3 ] ;
27452: LD_ADDR_VAR 0 9
27456: PUSH
27457: LD_INT 10
27459: PUSH
27460: LD_INT 5
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27471: LD_VAR 0 6
27475: PPUSH
27476: CALL_OW 257
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 4
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: IN
27495: IFFALSE 27516
// points := [ 3 , 2 , 1 ] ;
27497: LD_ADDR_VAR 0 9
27501: PUSH
27502: LD_INT 3
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27516: LD_VAR 0 6
27520: PPUSH
27521: CALL_OW 257
27525: PUSH
27526: LD_INT 5
27528: EQUAL
27529: IFFALSE 27550
// points := [ 130 , 5 , 2 ] ;
27531: LD_ADDR_VAR 0 9
27535: PUSH
27536: LD_INT 130
27538: PUSH
27539: LD_INT 5
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27550: LD_VAR 0 6
27554: PPUSH
27555: CALL_OW 257
27559: PUSH
27560: LD_INT 8
27562: EQUAL
27563: IFFALSE 27584
// points := [ 35 , 35 , 30 ] ;
27565: LD_ADDR_VAR 0 9
27569: PUSH
27570: LD_INT 35
27572: PUSH
27573: LD_INT 35
27575: PUSH
27576: LD_INT 30
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: LIST
27583: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27584: LD_VAR 0 6
27588: PPUSH
27589: CALL_OW 257
27593: PUSH
27594: LD_INT 9
27596: EQUAL
27597: IFFALSE 27618
// points := [ 20 , 55 , 40 ] ;
27599: LD_ADDR_VAR 0 9
27603: PUSH
27604: LD_INT 20
27606: PUSH
27607: LD_INT 55
27609: PUSH
27610: LD_INT 40
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27618: LD_VAR 0 6
27622: PPUSH
27623: CALL_OW 257
27627: PUSH
27628: LD_INT 12
27630: PUSH
27631: LD_INT 16
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: IN
27638: IFFALSE 27659
// points := [ 5 , 3 , 2 ] ;
27640: LD_ADDR_VAR 0 9
27644: PUSH
27645: LD_INT 5
27647: PUSH
27648: LD_INT 3
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27659: LD_VAR 0 6
27663: PPUSH
27664: CALL_OW 257
27668: PUSH
27669: LD_INT 17
27671: EQUAL
27672: IFFALSE 27693
// points := [ 100 , 50 , 75 ] ;
27674: LD_ADDR_VAR 0 9
27678: PUSH
27679: LD_INT 100
27681: PUSH
27682: LD_INT 50
27684: PUSH
27685: LD_INT 75
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27693: LD_VAR 0 6
27697: PPUSH
27698: CALL_OW 257
27702: PUSH
27703: LD_INT 15
27705: EQUAL
27706: IFFALSE 27727
// points := [ 10 , 5 , 3 ] ;
27708: LD_ADDR_VAR 0 9
27712: PUSH
27713: LD_INT 10
27715: PUSH
27716: LD_INT 5
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: LIST
27726: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27727: LD_VAR 0 6
27731: PPUSH
27732: CALL_OW 257
27736: PUSH
27737: LD_INT 14
27739: EQUAL
27740: IFFALSE 27761
// points := [ 10 , 0 , 0 ] ;
27742: LD_ADDR_VAR 0 9
27746: PUSH
27747: LD_INT 10
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27761: LD_VAR 0 6
27765: PPUSH
27766: CALL_OW 257
27770: PUSH
27771: LD_INT 11
27773: EQUAL
27774: IFFALSE 27795
// points := [ 30 , 10 , 5 ] ;
27776: LD_ADDR_VAR 0 9
27780: PUSH
27781: LD_INT 30
27783: PUSH
27784: LD_INT 10
27786: PUSH
27787: LD_INT 5
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27795: LD_VAR 0 1
27799: PPUSH
27800: LD_INT 5
27802: PPUSH
27803: CALL_OW 321
27807: PUSH
27808: LD_INT 2
27810: EQUAL
27811: IFFALSE 27828
// bpoints := bpoints * 1.8 ;
27813: LD_ADDR_VAR 0 10
27817: PUSH
27818: LD_VAR 0 10
27822: PUSH
27823: LD_REAL  1.80000000000000E+0000
27826: MUL
27827: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27828: LD_VAR 0 6
27832: PPUSH
27833: CALL_OW 257
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 4
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: IN
27856: PUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: LD_INT 51
27864: PPUSH
27865: CALL_OW 321
27869: PUSH
27870: LD_INT 2
27872: EQUAL
27873: AND
27874: IFFALSE 27891
// bpoints := bpoints * 1.2 ;
27876: LD_ADDR_VAR 0 10
27880: PUSH
27881: LD_VAR 0 10
27885: PUSH
27886: LD_REAL  1.20000000000000E+0000
27889: MUL
27890: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 257
27900: PUSH
27901: LD_INT 5
27903: PUSH
27904: LD_INT 7
27906: PUSH
27907: LD_INT 9
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: IN
27915: PUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 52
27923: PPUSH
27924: CALL_OW 321
27928: PUSH
27929: LD_INT 2
27931: EQUAL
27932: AND
27933: IFFALSE 27950
// bpoints := bpoints * 1.5 ;
27935: LD_ADDR_VAR 0 10
27939: PUSH
27940: LD_VAR 0 10
27944: PUSH
27945: LD_REAL  1.50000000000000E+0000
27948: MUL
27949: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27950: LD_VAR 0 1
27954: PPUSH
27955: LD_INT 66
27957: PPUSH
27958: CALL_OW 321
27962: PUSH
27963: LD_INT 2
27965: EQUAL
27966: IFFALSE 27983
// bpoints := bpoints * 1.1 ;
27968: LD_ADDR_VAR 0 10
27972: PUSH
27973: LD_VAR 0 10
27977: PUSH
27978: LD_REAL  1.10000000000000E+0000
27981: MUL
27982: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27983: LD_ADDR_VAR 0 10
27987: PUSH
27988: LD_VAR 0 10
27992: PUSH
27993: LD_VAR 0 6
27997: PPUSH
27998: LD_INT 1
28000: PPUSH
28001: CALL_OW 259
28005: PUSH
28006: LD_REAL  1.15000000000000E+0000
28009: MUL
28010: MUL
28011: ST_TO_ADDR
// end ; unit_vehicle :
28012: GO 28836
28014: LD_INT 2
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28824
28022: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28023: LD_VAR 0 6
28027: PPUSH
28028: CALL_OW 264
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 42
28038: PUSH
28039: LD_INT 24
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: IN
28047: IFFALSE 28068
// points := [ 25 , 5 , 3 ] ;
28049: LD_ADDR_VAR 0 9
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 5
28059: PUSH
28060: LD_INT 3
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28068: LD_VAR 0 6
28072: PPUSH
28073: CALL_OW 264
28077: PUSH
28078: LD_INT 4
28080: PUSH
28081: LD_INT 43
28083: PUSH
28084: LD_INT 25
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: IN
28092: IFFALSE 28113
// points := [ 40 , 15 , 5 ] ;
28094: LD_ADDR_VAR 0 9
28098: PUSH
28099: LD_INT 40
28101: PUSH
28102: LD_INT 15
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 264
28122: PUSH
28123: LD_INT 3
28125: PUSH
28126: LD_INT 23
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: IN
28133: IFFALSE 28154
// points := [ 7 , 25 , 8 ] ;
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: LD_INT 7
28142: PUSH
28143: LD_INT 25
28145: PUSH
28146: LD_INT 8
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28154: LD_VAR 0 6
28158: PPUSH
28159: CALL_OW 264
28163: PUSH
28164: LD_INT 5
28166: PUSH
28167: LD_INT 27
28169: PUSH
28170: LD_INT 44
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: IN
28178: IFFALSE 28199
// points := [ 14 , 50 , 16 ] ;
28180: LD_ADDR_VAR 0 9
28184: PUSH
28185: LD_INT 14
28187: PUSH
28188: LD_INT 50
28190: PUSH
28191: LD_INT 16
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28199: LD_VAR 0 6
28203: PPUSH
28204: CALL_OW 264
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: LD_INT 46
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: IN
28219: IFFALSE 28240
// points := [ 32 , 120 , 70 ] ;
28221: LD_ADDR_VAR 0 9
28225: PUSH
28226: LD_INT 32
28228: PUSH
28229: LD_INT 120
28231: PUSH
28232: LD_INT 70
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28240: LD_VAR 0 6
28244: PPUSH
28245: CALL_OW 264
28249: PUSH
28250: LD_INT 7
28252: PUSH
28253: LD_INT 28
28255: PUSH
28256: LD_INT 45
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: IN
28264: IFFALSE 28285
// points := [ 35 , 20 , 45 ] ;
28266: LD_ADDR_VAR 0 9
28270: PUSH
28271: LD_INT 35
28273: PUSH
28274: LD_INT 20
28276: PUSH
28277: LD_INT 45
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28285: LD_VAR 0 6
28289: PPUSH
28290: CALL_OW 264
28294: PUSH
28295: LD_INT 47
28297: PUSH
28298: EMPTY
28299: LIST
28300: IN
28301: IFFALSE 28322
// points := [ 67 , 45 , 75 ] ;
28303: LD_ADDR_VAR 0 9
28307: PUSH
28308: LD_INT 67
28310: PUSH
28311: LD_INT 45
28313: PUSH
28314: LD_INT 75
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28322: LD_VAR 0 6
28326: PPUSH
28327: CALL_OW 264
28331: PUSH
28332: LD_INT 26
28334: PUSH
28335: EMPTY
28336: LIST
28337: IN
28338: IFFALSE 28359
// points := [ 120 , 30 , 80 ] ;
28340: LD_ADDR_VAR 0 9
28344: PUSH
28345: LD_INT 120
28347: PUSH
28348: LD_INT 30
28350: PUSH
28351: LD_INT 80
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28359: LD_VAR 0 6
28363: PPUSH
28364: CALL_OW 264
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: EMPTY
28373: LIST
28374: IN
28375: IFFALSE 28396
// points := [ 40 , 1 , 1 ] ;
28377: LD_ADDR_VAR 0 9
28381: PUSH
28382: LD_INT 40
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28396: LD_VAR 0 6
28400: PPUSH
28401: CALL_OW 264
28405: PUSH
28406: LD_INT 29
28408: PUSH
28409: EMPTY
28410: LIST
28411: IN
28412: IFFALSE 28433
// points := [ 70 , 200 , 400 ] ;
28414: LD_ADDR_VAR 0 9
28418: PUSH
28419: LD_INT 70
28421: PUSH
28422: LD_INT 200
28424: PUSH
28425: LD_INT 400
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28433: LD_VAR 0 6
28437: PPUSH
28438: CALL_OW 264
28442: PUSH
28443: LD_INT 14
28445: PUSH
28446: LD_INT 53
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: IN
28453: IFFALSE 28474
// points := [ 40 , 10 , 20 ] ;
28455: LD_ADDR_VAR 0 9
28459: PUSH
28460: LD_INT 40
28462: PUSH
28463: LD_INT 10
28465: PUSH
28466: LD_INT 20
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 264
28483: PUSH
28484: LD_INT 9
28486: PUSH
28487: EMPTY
28488: LIST
28489: IN
28490: IFFALSE 28511
// points := [ 5 , 70 , 20 ] ;
28492: LD_ADDR_VAR 0 9
28496: PUSH
28497: LD_INT 5
28499: PUSH
28500: LD_INT 70
28502: PUSH
28503: LD_INT 20
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28511: LD_VAR 0 6
28515: PPUSH
28516: CALL_OW 264
28520: PUSH
28521: LD_INT 10
28523: PUSH
28524: EMPTY
28525: LIST
28526: IN
28527: IFFALSE 28548
// points := [ 35 , 110 , 70 ] ;
28529: LD_ADDR_VAR 0 9
28533: PUSH
28534: LD_INT 35
28536: PUSH
28537: LD_INT 110
28539: PUSH
28540: LD_INT 70
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28548: LD_VAR 0 6
28552: PPUSH
28553: CALL_OW 265
28557: PUSH
28558: LD_INT 25
28560: EQUAL
28561: IFFALSE 28582
// points := [ 80 , 65 , 100 ] ;
28563: LD_ADDR_VAR 0 9
28567: PUSH
28568: LD_INT 80
28570: PUSH
28571: LD_INT 65
28573: PUSH
28574: LD_INT 100
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28582: LD_VAR 0 6
28586: PPUSH
28587: CALL_OW 263
28591: PUSH
28592: LD_INT 1
28594: EQUAL
28595: IFFALSE 28630
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28597: LD_ADDR_VAR 0 10
28601: PUSH
28602: LD_VAR 0 10
28606: PUSH
28607: LD_VAR 0 6
28611: PPUSH
28612: CALL_OW 311
28616: PPUSH
28617: LD_INT 3
28619: PPUSH
28620: CALL_OW 259
28624: PUSH
28625: LD_INT 4
28627: MUL
28628: MUL
28629: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28630: LD_VAR 0 6
28634: PPUSH
28635: CALL_OW 263
28639: PUSH
28640: LD_INT 2
28642: EQUAL
28643: IFFALSE 28694
// begin j := IsControledBy ( i ) ;
28645: LD_ADDR_VAR 0 7
28649: PUSH
28650: LD_VAR 0 6
28654: PPUSH
28655: CALL_OW 312
28659: ST_TO_ADDR
// if j then
28660: LD_VAR 0 7
28664: IFFALSE 28694
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28666: LD_ADDR_VAR 0 10
28670: PUSH
28671: LD_VAR 0 10
28675: PUSH
28676: LD_VAR 0 7
28680: PPUSH
28681: LD_INT 3
28683: PPUSH
28684: CALL_OW 259
28688: PUSH
28689: LD_INT 3
28691: MUL
28692: MUL
28693: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28694: LD_VAR 0 6
28698: PPUSH
28699: CALL_OW 264
28703: PUSH
28704: LD_INT 5
28706: PUSH
28707: LD_INT 6
28709: PUSH
28710: LD_INT 46
28712: PUSH
28713: LD_INT 44
28715: PUSH
28716: LD_INT 47
28718: PUSH
28719: LD_INT 45
28721: PUSH
28722: LD_INT 28
28724: PUSH
28725: LD_INT 7
28727: PUSH
28728: LD_INT 27
28730: PUSH
28731: LD_INT 29
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: IN
28746: PUSH
28747: LD_VAR 0 1
28751: PPUSH
28752: LD_INT 52
28754: PPUSH
28755: CALL_OW 321
28759: PUSH
28760: LD_INT 2
28762: EQUAL
28763: AND
28764: IFFALSE 28781
// bpoints := bpoints * 1.2 ;
28766: LD_ADDR_VAR 0 10
28770: PUSH
28771: LD_VAR 0 10
28775: PUSH
28776: LD_REAL  1.20000000000000E+0000
28779: MUL
28780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28781: LD_VAR 0 6
28785: PPUSH
28786: CALL_OW 264
28790: PUSH
28791: LD_INT 6
28793: PUSH
28794: LD_INT 46
28796: PUSH
28797: LD_INT 47
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: IN
28805: IFFALSE 28822
// bpoints := bpoints * 1.2 ;
28807: LD_ADDR_VAR 0 10
28811: PUSH
28812: LD_VAR 0 10
28816: PUSH
28817: LD_REAL  1.20000000000000E+0000
28820: MUL
28821: ST_TO_ADDR
// end ; unit_building :
28822: GO 28836
28824: LD_INT 3
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28835
28832: POP
// ; end ;
28833: GO 28836
28835: POP
// for j = 1 to 3 do
28836: LD_ADDR_VAR 0 7
28840: PUSH
28841: DOUBLE
28842: LD_INT 1
28844: DEC
28845: ST_TO_ADDR
28846: LD_INT 3
28848: PUSH
28849: FOR_TO
28850: IFFALSE 28903
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28852: LD_ADDR_VAR 0 5
28856: PUSH
28857: LD_VAR 0 5
28861: PPUSH
28862: LD_VAR 0 7
28866: PPUSH
28867: LD_VAR 0 5
28871: PUSH
28872: LD_VAR 0 7
28876: ARRAY
28877: PUSH
28878: LD_VAR 0 9
28882: PUSH
28883: LD_VAR 0 7
28887: ARRAY
28888: PUSH
28889: LD_VAR 0 10
28893: MUL
28894: PLUS
28895: PPUSH
28896: CALL_OW 1
28900: ST_TO_ADDR
28901: GO 28849
28903: POP
28904: POP
// end ;
28905: GO 27388
28907: POP
28908: POP
// result := Replace ( result , 4 , tmp ) ;
28909: LD_ADDR_VAR 0 5
28913: PUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: LD_INT 4
28921: PPUSH
28922: LD_VAR 0 8
28926: PPUSH
28927: CALL_OW 1
28931: ST_TO_ADDR
// end ;
28932: LD_VAR 0 5
28936: RET
// export function DangerAtRange ( unit , range ) ; begin
28937: LD_INT 0
28939: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28940: LD_ADDR_VAR 0 3
28944: PUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 255
28954: PPUSH
28955: LD_VAR 0 1
28959: PPUSH
28960: CALL_OW 250
28964: PPUSH
28965: LD_VAR 0 1
28969: PPUSH
28970: CALL_OW 251
28974: PPUSH
28975: LD_VAR 0 2
28979: PPUSH
28980: CALL 27240 0 4
28984: ST_TO_ADDR
// end ;
28985: LD_VAR 0 3
28989: RET
// export function DangerInArea ( side , area ) ; begin
28990: LD_INT 0
28992: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28993: LD_ADDR_VAR 0 3
28997: PUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: LD_INT 81
29005: PUSH
29006: LD_VAR 0 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 70
29019: ST_TO_ADDR
// end ;
29020: LD_VAR 0 3
29024: RET
// export function IsExtension ( b ) ; begin
29025: LD_INT 0
29027: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: LD_VAR 0 1
29037: PUSH
29038: LD_INT 23
29040: PUSH
29041: LD_INT 20
29043: PUSH
29044: LD_INT 22
29046: PUSH
29047: LD_INT 17
29049: PUSH
29050: LD_INT 24
29052: PUSH
29053: LD_INT 21
29055: PUSH
29056: LD_INT 19
29058: PUSH
29059: LD_INT 16
29061: PUSH
29062: LD_INT 25
29064: PUSH
29065: LD_INT 18
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: IN
29080: ST_TO_ADDR
// end ;
29081: LD_VAR 0 2
29085: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29086: LD_INT 0
29088: PPUSH
29089: PPUSH
29090: PPUSH
// result := [ ] ;
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: EMPTY
29097: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29098: LD_ADDR_VAR 0 4
29102: PUSH
29103: LD_VAR 0 2
29107: PPUSH
29108: LD_INT 21
29110: PUSH
29111: LD_INT 3
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 70
29122: ST_TO_ADDR
// if not tmp then
29123: LD_VAR 0 4
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29190
// for i in tmp do
29132: LD_ADDR_VAR 0 5
29136: PUSH
29137: LD_VAR 0 4
29141: PUSH
29142: FOR_IN
29143: IFFALSE 29178
// if GetBase ( i ) <> base then
29145: LD_VAR 0 5
29149: PPUSH
29150: CALL_OW 274
29154: PUSH
29155: LD_VAR 0 1
29159: NONEQUAL
29160: IFFALSE 29176
// ComLinkToBase ( base , i ) ;
29162: LD_VAR 0 1
29166: PPUSH
29167: LD_VAR 0 5
29171: PPUSH
29172: CALL_OW 169
29176: GO 29142
29178: POP
29179: POP
// result := tmp ;
29180: LD_ADDR_VAR 0 3
29184: PUSH
29185: LD_VAR 0 4
29189: ST_TO_ADDR
// end ;
29190: LD_VAR 0 3
29194: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29195: LD_INT 0
29197: PPUSH
29198: PPUSH
// if BuildingStatus ( b ) = bs_build then
29199: LD_VAR 0 2
29203: PPUSH
29204: CALL_OW 461
29208: PUSH
29209: LD_INT 1
29211: EQUAL
29212: IFFALSE 29272
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29214: LD_VAR 0 1
29218: PPUSH
29219: LD_STRING h
29221: PUSH
29222: LD_VAR 0 2
29226: PPUSH
29227: CALL_OW 250
29231: PUSH
29232: LD_VAR 0 2
29236: PPUSH
29237: CALL_OW 251
29241: PUSH
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: PPUSH
29268: CALL_OW 446
// end ;
29272: LD_VAR 0 3
29276: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29277: LD_INT 0
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29285: LD_VAR 0 1
29289: NOT
29290: PUSH
29291: LD_VAR 0 1
29295: PPUSH
29296: CALL_OW 263
29300: PUSH
29301: LD_INT 2
29303: EQUAL
29304: NOT
29305: OR
29306: IFFALSE 29310
// exit ;
29308: GO 29626
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29310: LD_ADDR_VAR 0 6
29314: PUSH
29315: LD_INT 22
29317: PUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 255
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: LD_INT 30
29337: PUSH
29338: LD_INT 36
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 34
29347: PUSH
29348: LD_INT 31
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PPUSH
29364: CALL_OW 69
29368: ST_TO_ADDR
// if not tmp then
29369: LD_VAR 0 6
29373: NOT
29374: IFFALSE 29378
// exit ;
29376: GO 29626
// result := [ ] ;
29378: LD_ADDR_VAR 0 2
29382: PUSH
29383: EMPTY
29384: ST_TO_ADDR
// for i in tmp do
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_VAR 0 6
29394: PUSH
29395: FOR_IN
29396: IFFALSE 29467
// begin t := UnitsInside ( i ) ;
29398: LD_ADDR_VAR 0 4
29402: PUSH
29403: LD_VAR 0 3
29407: PPUSH
29408: CALL_OW 313
29412: ST_TO_ADDR
// if t then
29413: LD_VAR 0 4
29417: IFFALSE 29465
// for j in t do
29419: LD_ADDR_VAR 0 7
29423: PUSH
29424: LD_VAR 0 4
29428: PUSH
29429: FOR_IN
29430: IFFALSE 29463
// result := Insert ( result , result + 1 , j ) ;
29432: LD_ADDR_VAR 0 2
29436: PUSH
29437: LD_VAR 0 2
29441: PPUSH
29442: LD_VAR 0 2
29446: PUSH
29447: LD_INT 1
29449: PLUS
29450: PPUSH
29451: LD_VAR 0 7
29455: PPUSH
29456: CALL_OW 2
29460: ST_TO_ADDR
29461: GO 29429
29463: POP
29464: POP
// end ;
29465: GO 29395
29467: POP
29468: POP
// if not result then
29469: LD_VAR 0 2
29473: NOT
29474: IFFALSE 29478
// exit ;
29476: GO 29626
// mech := result [ 1 ] ;
29478: LD_ADDR_VAR 0 5
29482: PUSH
29483: LD_VAR 0 2
29487: PUSH
29488: LD_INT 1
29490: ARRAY
29491: ST_TO_ADDR
// if result > 1 then
29492: LD_VAR 0 2
29496: PUSH
29497: LD_INT 1
29499: GREATER
29500: IFFALSE 29612
// for i = 2 to result do
29502: LD_ADDR_VAR 0 3
29506: PUSH
29507: DOUBLE
29508: LD_INT 2
29510: DEC
29511: ST_TO_ADDR
29512: LD_VAR 0 2
29516: PUSH
29517: FOR_TO
29518: IFFALSE 29610
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29520: LD_ADDR_VAR 0 4
29524: PUSH
29525: LD_VAR 0 2
29529: PUSH
29530: LD_VAR 0 3
29534: ARRAY
29535: PPUSH
29536: LD_INT 3
29538: PPUSH
29539: CALL_OW 259
29543: PUSH
29544: LD_VAR 0 2
29548: PUSH
29549: LD_VAR 0 3
29553: ARRAY
29554: PPUSH
29555: CALL_OW 432
29559: MINUS
29560: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29561: LD_VAR 0 4
29565: PUSH
29566: LD_VAR 0 5
29570: PPUSH
29571: LD_INT 3
29573: PPUSH
29574: CALL_OW 259
29578: PUSH
29579: LD_VAR 0 5
29583: PPUSH
29584: CALL_OW 432
29588: MINUS
29589: GREATEREQUAL
29590: IFFALSE 29608
// mech := result [ i ] ;
29592: LD_ADDR_VAR 0 5
29596: PUSH
29597: LD_VAR 0 2
29601: PUSH
29602: LD_VAR 0 3
29606: ARRAY
29607: ST_TO_ADDR
// end ;
29608: GO 29517
29610: POP
29611: POP
// ComLinkTo ( vehicle , mech ) ;
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_VAR 0 5
29621: PPUSH
29622: CALL_OW 135
// end ;
29626: LD_VAR 0 2
29630: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29631: LD_INT 0
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
29644: PPUSH
29645: PPUSH
// result := [ ] ;
29646: LD_ADDR_VAR 0 7
29650: PUSH
29651: EMPTY
29652: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 266
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: IN
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 31309
// if name then
29678: LD_VAR 0 3
29682: IFFALSE 29698
// SetBName ( base_dep , name ) ;
29684: LD_VAR 0 1
29688: PPUSH
29689: LD_VAR 0 3
29693: PPUSH
29694: CALL_OW 500
// base := GetBase ( base_dep ) ;
29698: LD_ADDR_VAR 0 15
29702: PUSH
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 274
29712: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29713: LD_ADDR_VAR 0 16
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 255
29727: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29728: LD_ADDR_VAR 0 17
29732: PUSH
29733: LD_VAR 0 1
29737: PPUSH
29738: CALL_OW 248
29742: ST_TO_ADDR
// if sources then
29743: LD_VAR 0 5
29747: IFFALSE 29794
// for i = 1 to 3 do
29749: LD_ADDR_VAR 0 8
29753: PUSH
29754: DOUBLE
29755: LD_INT 1
29757: DEC
29758: ST_TO_ADDR
29759: LD_INT 3
29761: PUSH
29762: FOR_TO
29763: IFFALSE 29792
// AddResourceType ( base , i , sources [ i ] ) ;
29765: LD_VAR 0 15
29769: PPUSH
29770: LD_VAR 0 8
29774: PPUSH
29775: LD_VAR 0 5
29779: PUSH
29780: LD_VAR 0 8
29784: ARRAY
29785: PPUSH
29786: CALL_OW 276
29790: GO 29762
29792: POP
29793: POP
// buildings := GetBaseBuildings ( base , area ) ;
29794: LD_ADDR_VAR 0 18
29798: PUSH
29799: LD_VAR 0 15
29803: PPUSH
29804: LD_VAR 0 2
29808: PPUSH
29809: CALL 29086 0 2
29813: ST_TO_ADDR
// InitHc ;
29814: CALL_OW 19
// InitUc ;
29818: CALL_OW 18
// uc_side := side ;
29822: LD_ADDR_OWVAR 20
29826: PUSH
29827: LD_VAR 0 16
29831: ST_TO_ADDR
// uc_nation := nation ;
29832: LD_ADDR_OWVAR 21
29836: PUSH
29837: LD_VAR 0 17
29841: ST_TO_ADDR
// if buildings then
29842: LD_VAR 0 18
29846: IFFALSE 31168
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29848: LD_ADDR_VAR 0 19
29852: PUSH
29853: LD_VAR 0 18
29857: PPUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 30
29863: PUSH
29864: LD_INT 29
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 30
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 72
29890: ST_TO_ADDR
// if tmp then
29891: LD_VAR 0 19
29895: IFFALSE 29943
// for i in tmp do
29897: LD_ADDR_VAR 0 8
29901: PUSH
29902: LD_VAR 0 19
29906: PUSH
29907: FOR_IN
29908: IFFALSE 29941
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29910: LD_VAR 0 8
29914: PPUSH
29915: CALL_OW 250
29919: PPUSH
29920: LD_VAR 0 8
29924: PPUSH
29925: CALL_OW 251
29929: PPUSH
29930: LD_VAR 0 16
29934: PPUSH
29935: CALL_OW 441
29939: GO 29907
29941: POP
29942: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29943: LD_VAR 0 18
29947: PPUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 30
29953: PUSH
29954: LD_INT 32
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: LD_INT 33
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 72
29980: IFFALSE 30068
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29982: LD_ADDR_VAR 0 8
29986: PUSH
29987: LD_VAR 0 18
29991: PPUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 30
29997: PUSH
29998: LD_INT 32
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 30
30007: PUSH
30008: LD_INT 33
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: PPUSH
30020: CALL_OW 72
30024: PUSH
30025: FOR_IN
30026: IFFALSE 30066
// begin if not GetBWeapon ( i ) then
30028: LD_VAR 0 8
30032: PPUSH
30033: CALL_OW 269
30037: NOT
30038: IFFALSE 30064
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30040: LD_VAR 0 8
30044: PPUSH
30045: LD_VAR 0 8
30049: PPUSH
30050: LD_VAR 0 2
30054: PPUSH
30055: CALL 31314 0 2
30059: PPUSH
30060: CALL_OW 431
// end ;
30064: GO 30025
30066: POP
30067: POP
// end ; for i = 1 to personel do
30068: LD_ADDR_VAR 0 8
30072: PUSH
30073: DOUBLE
30074: LD_INT 1
30076: DEC
30077: ST_TO_ADDR
30078: LD_VAR 0 6
30082: PUSH
30083: FOR_TO
30084: IFFALSE 31148
// begin if i > 4 then
30086: LD_VAR 0 8
30090: PUSH
30091: LD_INT 4
30093: GREATER
30094: IFFALSE 30098
// break ;
30096: GO 31148
// case i of 1 :
30098: LD_VAR 0 8
30102: PUSH
30103: LD_INT 1
30105: DOUBLE
30106: EQUAL
30107: IFTRUE 30111
30109: GO 30191
30111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30112: LD_ADDR_VAR 0 12
30116: PUSH
30117: LD_VAR 0 18
30121: PPUSH
30122: LD_INT 22
30124: PUSH
30125: LD_VAR 0 16
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 58
30136: PUSH
30137: EMPTY
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: LD_INT 30
30145: PUSH
30146: LD_INT 32
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 30
30155: PUSH
30156: LD_INT 4
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 30
30165: PUSH
30166: LD_INT 5
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: PPUSH
30184: CALL_OW 72
30188: ST_TO_ADDR
30189: GO 30413
30191: LD_INT 2
30193: DOUBLE
30194: EQUAL
30195: IFTRUE 30199
30197: GO 30261
30199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30200: LD_ADDR_VAR 0 12
30204: PUSH
30205: LD_VAR 0 18
30209: PPUSH
30210: LD_INT 22
30212: PUSH
30213: LD_VAR 0 16
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 30
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 72
30258: ST_TO_ADDR
30259: GO 30413
30261: LD_INT 3
30263: DOUBLE
30264: EQUAL
30265: IFTRUE 30269
30267: GO 30331
30269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30270: LD_ADDR_VAR 0 12
30274: PUSH
30275: LD_VAR 0 18
30279: PPUSH
30280: LD_INT 22
30282: PUSH
30283: LD_VAR 0 16
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 30
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 30
30307: PUSH
30308: LD_INT 3
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 72
30328: ST_TO_ADDR
30329: GO 30413
30331: LD_INT 4
30333: DOUBLE
30334: EQUAL
30335: IFTRUE 30339
30337: GO 30412
30339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30340: LD_ADDR_VAR 0 12
30344: PUSH
30345: LD_VAR 0 18
30349: PPUSH
30350: LD_INT 22
30352: PUSH
30353: LD_VAR 0 16
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: LD_INT 30
30367: PUSH
30368: LD_INT 6
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 30
30377: PUSH
30378: LD_INT 7
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 30
30387: PUSH
30388: LD_INT 8
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PPUSH
30405: CALL_OW 72
30409: ST_TO_ADDR
30410: GO 30413
30412: POP
// if i = 1 then
30413: LD_VAR 0 8
30417: PUSH
30418: LD_INT 1
30420: EQUAL
30421: IFFALSE 30532
// begin tmp := [ ] ;
30423: LD_ADDR_VAR 0 19
30427: PUSH
30428: EMPTY
30429: ST_TO_ADDR
// for j in f do
30430: LD_ADDR_VAR 0 9
30434: PUSH
30435: LD_VAR 0 12
30439: PUSH
30440: FOR_IN
30441: IFFALSE 30514
// if GetBType ( j ) = b_bunker then
30443: LD_VAR 0 9
30447: PPUSH
30448: CALL_OW 266
30452: PUSH
30453: LD_INT 32
30455: EQUAL
30456: IFFALSE 30483
// tmp := Insert ( tmp , 1 , j ) else
30458: LD_ADDR_VAR 0 19
30462: PUSH
30463: LD_VAR 0 19
30467: PPUSH
30468: LD_INT 1
30470: PPUSH
30471: LD_VAR 0 9
30475: PPUSH
30476: CALL_OW 2
30480: ST_TO_ADDR
30481: GO 30512
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30483: LD_ADDR_VAR 0 19
30487: PUSH
30488: LD_VAR 0 19
30492: PPUSH
30493: LD_VAR 0 19
30497: PUSH
30498: LD_INT 1
30500: PLUS
30501: PPUSH
30502: LD_VAR 0 9
30506: PPUSH
30507: CALL_OW 2
30511: ST_TO_ADDR
30512: GO 30440
30514: POP
30515: POP
// if tmp then
30516: LD_VAR 0 19
30520: IFFALSE 30532
// f := tmp ;
30522: LD_ADDR_VAR 0 12
30526: PUSH
30527: LD_VAR 0 19
30531: ST_TO_ADDR
// end ; x := personel [ i ] ;
30532: LD_ADDR_VAR 0 13
30536: PUSH
30537: LD_VAR 0 6
30541: PUSH
30542: LD_VAR 0 8
30546: ARRAY
30547: ST_TO_ADDR
// if x = - 1 then
30548: LD_VAR 0 13
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: EQUAL
30557: IFFALSE 30766
// begin for j in f do
30559: LD_ADDR_VAR 0 9
30563: PUSH
30564: LD_VAR 0 12
30568: PUSH
30569: FOR_IN
30570: IFFALSE 30762
// repeat InitHc ;
30572: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30576: LD_VAR 0 9
30580: PPUSH
30581: CALL_OW 266
30585: PUSH
30586: LD_INT 5
30588: EQUAL
30589: IFFALSE 30659
// begin if UnitsInside ( j ) < 3 then
30591: LD_VAR 0 9
30595: PPUSH
30596: CALL_OW 313
30600: PUSH
30601: LD_INT 3
30603: LESS
30604: IFFALSE 30640
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30606: LD_INT 0
30608: PPUSH
30609: LD_INT 5
30611: PUSH
30612: LD_INT 8
30614: PUSH
30615: LD_INT 9
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: PUSH
30623: LD_VAR 0 17
30627: ARRAY
30628: PPUSH
30629: LD_VAR 0 4
30633: PPUSH
30634: CALL_OW 380
30638: GO 30657
// PrepareHuman ( false , i , skill ) ;
30640: LD_INT 0
30642: PPUSH
30643: LD_VAR 0 8
30647: PPUSH
30648: LD_VAR 0 4
30652: PPUSH
30653: CALL_OW 380
// end else
30657: GO 30676
// PrepareHuman ( false , i , skill ) ;
30659: LD_INT 0
30661: PPUSH
30662: LD_VAR 0 8
30666: PPUSH
30667: LD_VAR 0 4
30671: PPUSH
30672: CALL_OW 380
// un := CreateHuman ;
30676: LD_ADDR_VAR 0 14
30680: PUSH
30681: CALL_OW 44
30685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30686: LD_ADDR_VAR 0 7
30690: PUSH
30691: LD_VAR 0 7
30695: PPUSH
30696: LD_INT 1
30698: PPUSH
30699: LD_VAR 0 14
30703: PPUSH
30704: CALL_OW 2
30708: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30709: LD_VAR 0 14
30713: PPUSH
30714: LD_VAR 0 9
30718: PPUSH
30719: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30723: LD_VAR 0 9
30727: PPUSH
30728: CALL_OW 313
30732: PUSH
30733: LD_INT 6
30735: EQUAL
30736: PUSH
30737: LD_VAR 0 9
30741: PPUSH
30742: CALL_OW 266
30746: PUSH
30747: LD_INT 32
30749: PUSH
30750: LD_INT 31
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: IN
30757: OR
30758: IFFALSE 30572
30760: GO 30569
30762: POP
30763: POP
// end else
30764: GO 31146
// for j = 1 to x do
30766: LD_ADDR_VAR 0 9
30770: PUSH
30771: DOUBLE
30772: LD_INT 1
30774: DEC
30775: ST_TO_ADDR
30776: LD_VAR 0 13
30780: PUSH
30781: FOR_TO
30782: IFFALSE 31144
// begin InitHc ;
30784: CALL_OW 19
// if not f then
30788: LD_VAR 0 12
30792: NOT
30793: IFFALSE 30882
// begin PrepareHuman ( false , i , skill ) ;
30795: LD_INT 0
30797: PPUSH
30798: LD_VAR 0 8
30802: PPUSH
30803: LD_VAR 0 4
30807: PPUSH
30808: CALL_OW 380
// un := CreateHuman ;
30812: LD_ADDR_VAR 0 14
30816: PUSH
30817: CALL_OW 44
30821: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30822: LD_ADDR_VAR 0 7
30826: PUSH
30827: LD_VAR 0 7
30831: PPUSH
30832: LD_INT 1
30834: PPUSH
30835: LD_VAR 0 14
30839: PPUSH
30840: CALL_OW 2
30844: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30845: LD_VAR 0 14
30849: PPUSH
30850: LD_VAR 0 1
30854: PPUSH
30855: CALL_OW 250
30859: PPUSH
30860: LD_VAR 0 1
30864: PPUSH
30865: CALL_OW 251
30869: PPUSH
30870: LD_INT 10
30872: PPUSH
30873: LD_INT 0
30875: PPUSH
30876: CALL_OW 50
// continue ;
30880: GO 30781
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30882: LD_VAR 0 12
30886: PUSH
30887: LD_INT 1
30889: ARRAY
30890: PPUSH
30891: CALL_OW 313
30895: PUSH
30896: LD_VAR 0 12
30900: PUSH
30901: LD_INT 1
30903: ARRAY
30904: PPUSH
30905: CALL_OW 266
30909: PUSH
30910: LD_INT 32
30912: PUSH
30913: LD_INT 31
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: IN
30920: AND
30921: PUSH
30922: LD_VAR 0 12
30926: PUSH
30927: LD_INT 1
30929: ARRAY
30930: PPUSH
30931: CALL_OW 313
30935: PUSH
30936: LD_INT 6
30938: EQUAL
30939: OR
30940: IFFALSE 30960
// f := Delete ( f , 1 ) ;
30942: LD_ADDR_VAR 0 12
30946: PUSH
30947: LD_VAR 0 12
30951: PPUSH
30952: LD_INT 1
30954: PPUSH
30955: CALL_OW 3
30959: ST_TO_ADDR
// if not f then
30960: LD_VAR 0 12
30964: NOT
30965: IFFALSE 30983
// begin x := x + 2 ;
30967: LD_ADDR_VAR 0 13
30971: PUSH
30972: LD_VAR 0 13
30976: PUSH
30977: LD_INT 2
30979: PLUS
30980: ST_TO_ADDR
// continue ;
30981: GO 30781
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30983: LD_VAR 0 12
30987: PUSH
30988: LD_INT 1
30990: ARRAY
30991: PPUSH
30992: CALL_OW 266
30996: PUSH
30997: LD_INT 5
30999: EQUAL
31000: IFFALSE 31074
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31002: LD_VAR 0 12
31006: PUSH
31007: LD_INT 1
31009: ARRAY
31010: PPUSH
31011: CALL_OW 313
31015: PUSH
31016: LD_INT 3
31018: LESS
31019: IFFALSE 31055
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31021: LD_INT 0
31023: PPUSH
31024: LD_INT 5
31026: PUSH
31027: LD_INT 8
31029: PUSH
31030: LD_INT 9
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: PUSH
31038: LD_VAR 0 17
31042: ARRAY
31043: PPUSH
31044: LD_VAR 0 4
31048: PPUSH
31049: CALL_OW 380
31053: GO 31072
// PrepareHuman ( false , i , skill ) ;
31055: LD_INT 0
31057: PPUSH
31058: LD_VAR 0 8
31062: PPUSH
31063: LD_VAR 0 4
31067: PPUSH
31068: CALL_OW 380
// end else
31072: GO 31091
// PrepareHuman ( false , i , skill ) ;
31074: LD_INT 0
31076: PPUSH
31077: LD_VAR 0 8
31081: PPUSH
31082: LD_VAR 0 4
31086: PPUSH
31087: CALL_OW 380
// un := CreateHuman ;
31091: LD_ADDR_VAR 0 14
31095: PUSH
31096: CALL_OW 44
31100: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31101: LD_ADDR_VAR 0 7
31105: PUSH
31106: LD_VAR 0 7
31110: PPUSH
31111: LD_INT 1
31113: PPUSH
31114: LD_VAR 0 14
31118: PPUSH
31119: CALL_OW 2
31123: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31124: LD_VAR 0 14
31128: PPUSH
31129: LD_VAR 0 12
31133: PUSH
31134: LD_INT 1
31136: ARRAY
31137: PPUSH
31138: CALL_OW 52
// end ;
31142: GO 30781
31144: POP
31145: POP
// end ;
31146: GO 30083
31148: POP
31149: POP
// result := result ^ buildings ;
31150: LD_ADDR_VAR 0 7
31154: PUSH
31155: LD_VAR 0 7
31159: PUSH
31160: LD_VAR 0 18
31164: ADD
31165: ST_TO_ADDR
// end else
31166: GO 31309
// begin for i = 1 to personel do
31168: LD_ADDR_VAR 0 8
31172: PUSH
31173: DOUBLE
31174: LD_INT 1
31176: DEC
31177: ST_TO_ADDR
31178: LD_VAR 0 6
31182: PUSH
31183: FOR_TO
31184: IFFALSE 31307
// begin if i > 4 then
31186: LD_VAR 0 8
31190: PUSH
31191: LD_INT 4
31193: GREATER
31194: IFFALSE 31198
// break ;
31196: GO 31307
// x := personel [ i ] ;
31198: LD_ADDR_VAR 0 13
31202: PUSH
31203: LD_VAR 0 6
31207: PUSH
31208: LD_VAR 0 8
31212: ARRAY
31213: ST_TO_ADDR
// if x = - 1 then
31214: LD_VAR 0 13
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: EQUAL
31223: IFFALSE 31227
// continue ;
31225: GO 31183
// PrepareHuman ( false , i , skill ) ;
31227: LD_INT 0
31229: PPUSH
31230: LD_VAR 0 8
31234: PPUSH
31235: LD_VAR 0 4
31239: PPUSH
31240: CALL_OW 380
// un := CreateHuman ;
31244: LD_ADDR_VAR 0 14
31248: PUSH
31249: CALL_OW 44
31253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31254: LD_VAR 0 14
31258: PPUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 250
31268: PPUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 251
31278: PPUSH
31279: LD_INT 10
31281: PPUSH
31282: LD_INT 0
31284: PPUSH
31285: CALL_OW 50
// result := result ^ un ;
31289: LD_ADDR_VAR 0 7
31293: PUSH
31294: LD_VAR 0 7
31298: PUSH
31299: LD_VAR 0 14
31303: ADD
31304: ST_TO_ADDR
// end ;
31305: GO 31183
31307: POP
31308: POP
// end ; end ;
31309: LD_VAR 0 7
31313: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31314: LD_INT 0
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
// result := false ;
31332: LD_ADDR_VAR 0 3
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31340: LD_VAR 0 1
31344: NOT
31345: PUSH
31346: LD_VAR 0 1
31350: PPUSH
31351: CALL_OW 266
31355: PUSH
31356: LD_INT 32
31358: PUSH
31359: LD_INT 33
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: IN
31366: NOT
31367: OR
31368: IFFALSE 31372
// exit ;
31370: GO 32508
// nat := GetNation ( tower ) ;
31372: LD_ADDR_VAR 0 12
31376: PUSH
31377: LD_VAR 0 1
31381: PPUSH
31382: CALL_OW 248
31386: ST_TO_ADDR
// side := GetSide ( tower ) ;
31387: LD_ADDR_VAR 0 16
31391: PUSH
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 255
31401: ST_TO_ADDR
// x := GetX ( tower ) ;
31402: LD_ADDR_VAR 0 10
31406: PUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: CALL_OW 250
31416: ST_TO_ADDR
// y := GetY ( tower ) ;
31417: LD_ADDR_VAR 0 11
31421: PUSH
31422: LD_VAR 0 1
31426: PPUSH
31427: CALL_OW 251
31431: ST_TO_ADDR
// if not x or not y then
31432: LD_VAR 0 10
31436: NOT
31437: PUSH
31438: LD_VAR 0 11
31442: NOT
31443: OR
31444: IFFALSE 31448
// exit ;
31446: GO 32508
// weapon := 0 ;
31448: LD_ADDR_VAR 0 18
31452: PUSH
31453: LD_INT 0
31455: ST_TO_ADDR
// fac_list := [ ] ;
31456: LD_ADDR_VAR 0 17
31460: PUSH
31461: EMPTY
31462: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31463: LD_ADDR_VAR 0 6
31467: PUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: CALL_OW 274
31477: PPUSH
31478: LD_VAR 0 2
31482: PPUSH
31483: CALL 29086 0 2
31487: PPUSH
31488: LD_INT 30
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PPUSH
31498: CALL_OW 72
31502: ST_TO_ADDR
// if not factories then
31503: LD_VAR 0 6
31507: NOT
31508: IFFALSE 31512
// exit ;
31510: GO 32508
// for i in factories do
31512: LD_ADDR_VAR 0 8
31516: PUSH
31517: LD_VAR 0 6
31521: PUSH
31522: FOR_IN
31523: IFFALSE 31548
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31525: LD_ADDR_VAR 0 17
31529: PUSH
31530: LD_VAR 0 17
31534: PUSH
31535: LD_VAR 0 8
31539: PPUSH
31540: CALL_OW 478
31544: UNION
31545: ST_TO_ADDR
31546: GO 31522
31548: POP
31549: POP
// if not fac_list then
31550: LD_VAR 0 17
31554: NOT
31555: IFFALSE 31559
// exit ;
31557: GO 32508
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31559: LD_ADDR_VAR 0 5
31563: PUSH
31564: LD_INT 4
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: LD_INT 9
31572: PUSH
31573: LD_INT 10
31575: PUSH
31576: LD_INT 6
31578: PUSH
31579: LD_INT 7
31581: PUSH
31582: LD_INT 11
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 27
31596: PUSH
31597: LD_INT 28
31599: PUSH
31600: LD_INT 26
31602: PUSH
31603: LD_INT 30
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 43
31614: PUSH
31615: LD_INT 44
31617: PUSH
31618: LD_INT 46
31620: PUSH
31621: LD_INT 45
31623: PUSH
31624: LD_INT 47
31626: PUSH
31627: LD_INT 49
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: PUSH
31643: LD_VAR 0 12
31647: ARRAY
31648: ST_TO_ADDR
// for i in list do
31649: LD_ADDR_VAR 0 8
31653: PUSH
31654: LD_VAR 0 5
31658: PUSH
31659: FOR_IN
31660: IFFALSE 31693
// if not i in fac_list then
31662: LD_VAR 0 8
31666: PUSH
31667: LD_VAR 0 17
31671: IN
31672: NOT
31673: IFFALSE 31691
// list := list diff i ;
31675: LD_ADDR_VAR 0 5
31679: PUSH
31680: LD_VAR 0 5
31684: PUSH
31685: LD_VAR 0 8
31689: DIFF
31690: ST_TO_ADDR
31691: GO 31659
31693: POP
31694: POP
// if not list then
31695: LD_VAR 0 5
31699: NOT
31700: IFFALSE 31704
// exit ;
31702: GO 32508
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31704: LD_VAR 0 12
31708: PUSH
31709: LD_INT 3
31711: EQUAL
31712: PUSH
31713: LD_INT 49
31715: PUSH
31716: LD_VAR 0 5
31720: IN
31721: AND
31722: PUSH
31723: LD_INT 31
31725: PPUSH
31726: LD_VAR 0 16
31730: PPUSH
31731: CALL_OW 321
31735: PUSH
31736: LD_INT 2
31738: EQUAL
31739: AND
31740: IFFALSE 31800
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31742: LD_INT 22
31744: PUSH
31745: LD_VAR 0 16
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 35
31756: PUSH
31757: LD_INT 49
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 91
31766: PUSH
31767: LD_VAR 0 1
31771: PUSH
31772: LD_INT 10
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: PPUSH
31785: CALL_OW 69
31789: NOT
31790: IFFALSE 31800
// weapon := ru_time_lapser ;
31792: LD_ADDR_VAR 0 18
31796: PUSH
31797: LD_INT 49
31799: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31800: LD_VAR 0 12
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: IN
31815: PUSH
31816: LD_INT 11
31818: PUSH
31819: LD_VAR 0 5
31823: IN
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_VAR 0 5
31832: IN
31833: OR
31834: AND
31835: PUSH
31836: LD_INT 6
31838: PPUSH
31839: LD_VAR 0 16
31843: PPUSH
31844: CALL_OW 321
31848: PUSH
31849: LD_INT 2
31851: EQUAL
31852: AND
31853: IFFALSE 32018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31855: LD_INT 22
31857: PUSH
31858: LD_VAR 0 16
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 35
31872: PUSH
31873: LD_INT 11
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 35
31882: PUSH
31883: LD_INT 30
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 91
31897: PUSH
31898: LD_VAR 0 1
31902: PUSH
31903: LD_INT 18
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: PPUSH
31916: CALL_OW 69
31920: NOT
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_VAR 0 16
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: LD_INT 30
31939: PUSH
31940: LD_INT 32
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 30
31949: PUSH
31950: LD_INT 33
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 91
31964: PUSH
31965: LD_VAR 0 1
31969: PUSH
31970: LD_INT 12
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: PUSH
31983: EMPTY
31984: LIST
31985: PPUSH
31986: CALL_OW 69
31990: PUSH
31991: LD_INT 2
31993: GREATER
31994: AND
31995: IFFALSE 32018
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31997: LD_ADDR_VAR 0 18
32001: PUSH
32002: LD_INT 11
32004: PUSH
32005: LD_INT 30
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_VAR 0 12
32016: ARRAY
32017: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32018: LD_VAR 0 18
32022: NOT
32023: PUSH
32024: LD_INT 40
32026: PPUSH
32027: LD_VAR 0 16
32031: PPUSH
32032: CALL_OW 321
32036: PUSH
32037: LD_INT 2
32039: EQUAL
32040: AND
32041: PUSH
32042: LD_INT 7
32044: PUSH
32045: LD_VAR 0 5
32049: IN
32050: PUSH
32051: LD_INT 28
32053: PUSH
32054: LD_VAR 0 5
32058: IN
32059: OR
32060: PUSH
32061: LD_INT 45
32063: PUSH
32064: LD_VAR 0 5
32068: IN
32069: OR
32070: AND
32071: IFFALSE 32325
// begin hex := GetHexInfo ( x , y ) ;
32073: LD_ADDR_VAR 0 4
32077: PUSH
32078: LD_VAR 0 10
32082: PPUSH
32083: LD_VAR 0 11
32087: PPUSH
32088: CALL_OW 546
32092: ST_TO_ADDR
// if hex [ 1 ] then
32093: LD_VAR 0 4
32097: PUSH
32098: LD_INT 1
32100: ARRAY
32101: IFFALSE 32105
// exit ;
32103: GO 32508
// height := hex [ 2 ] ;
32105: LD_ADDR_VAR 0 15
32109: PUSH
32110: LD_VAR 0 4
32114: PUSH
32115: LD_INT 2
32117: ARRAY
32118: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32119: LD_ADDR_VAR 0 14
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: ST_TO_ADDR
// for i in tmp do
32142: LD_ADDR_VAR 0 8
32146: PUSH
32147: LD_VAR 0 14
32151: PUSH
32152: FOR_IN
32153: IFFALSE 32323
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32155: LD_ADDR_VAR 0 9
32159: PUSH
32160: LD_VAR 0 10
32164: PPUSH
32165: LD_VAR 0 8
32169: PPUSH
32170: LD_INT 5
32172: PPUSH
32173: CALL_OW 272
32177: PUSH
32178: LD_VAR 0 11
32182: PPUSH
32183: LD_VAR 0 8
32187: PPUSH
32188: LD_INT 5
32190: PPUSH
32191: CALL_OW 273
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32200: LD_VAR 0 9
32204: PUSH
32205: LD_INT 1
32207: ARRAY
32208: PPUSH
32209: LD_VAR 0 9
32213: PUSH
32214: LD_INT 2
32216: ARRAY
32217: PPUSH
32218: CALL_OW 488
32222: IFFALSE 32321
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32224: LD_ADDR_VAR 0 4
32228: PUSH
32229: LD_VAR 0 9
32233: PUSH
32234: LD_INT 1
32236: ARRAY
32237: PPUSH
32238: LD_VAR 0 9
32242: PUSH
32243: LD_INT 2
32245: ARRAY
32246: PPUSH
32247: CALL_OW 546
32251: ST_TO_ADDR
// if hex [ 1 ] then
32252: LD_VAR 0 4
32256: PUSH
32257: LD_INT 1
32259: ARRAY
32260: IFFALSE 32264
// continue ;
32262: GO 32152
// h := hex [ 2 ] ;
32264: LD_ADDR_VAR 0 13
32268: PUSH
32269: LD_VAR 0 4
32273: PUSH
32274: LD_INT 2
32276: ARRAY
32277: ST_TO_ADDR
// if h + 7 < height then
32278: LD_VAR 0 13
32282: PUSH
32283: LD_INT 7
32285: PLUS
32286: PUSH
32287: LD_VAR 0 15
32291: LESS
32292: IFFALSE 32321
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32294: LD_ADDR_VAR 0 18
32298: PUSH
32299: LD_INT 7
32301: PUSH
32302: LD_INT 28
32304: PUSH
32305: LD_INT 45
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: PUSH
32313: LD_VAR 0 12
32317: ARRAY
32318: ST_TO_ADDR
// break ;
32319: GO 32323
// end ; end ; end ;
32321: GO 32152
32323: POP
32324: POP
// end ; if not weapon then
32325: LD_VAR 0 18
32329: NOT
32330: IFFALSE 32390
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32332: LD_ADDR_VAR 0 5
32336: PUSH
32337: LD_VAR 0 5
32341: PUSH
32342: LD_INT 11
32344: PUSH
32345: LD_INT 30
32347: PUSH
32348: LD_INT 49
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: DIFF
32356: ST_TO_ADDR
// if not list then
32357: LD_VAR 0 5
32361: NOT
32362: IFFALSE 32366
// exit ;
32364: GO 32508
// weapon := list [ rand ( 1 , list ) ] ;
32366: LD_ADDR_VAR 0 18
32370: PUSH
32371: LD_VAR 0 5
32375: PUSH
32376: LD_INT 1
32378: PPUSH
32379: LD_VAR 0 5
32383: PPUSH
32384: CALL_OW 12
32388: ARRAY
32389: ST_TO_ADDR
// end ; if weapon then
32390: LD_VAR 0 18
32394: IFFALSE 32508
// begin tmp := CostOfWeapon ( weapon ) ;
32396: LD_ADDR_VAR 0 14
32400: PUSH
32401: LD_VAR 0 18
32405: PPUSH
32406: CALL_OW 451
32410: ST_TO_ADDR
// j := GetBase ( tower ) ;
32411: LD_ADDR_VAR 0 9
32415: PUSH
32416: LD_VAR 0 1
32420: PPUSH
32421: CALL_OW 274
32425: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32426: LD_VAR 0 9
32430: PPUSH
32431: LD_INT 1
32433: PPUSH
32434: CALL_OW 275
32438: PUSH
32439: LD_VAR 0 14
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: GREATEREQUAL
32448: PUSH
32449: LD_VAR 0 9
32453: PPUSH
32454: LD_INT 2
32456: PPUSH
32457: CALL_OW 275
32461: PUSH
32462: LD_VAR 0 14
32466: PUSH
32467: LD_INT 2
32469: ARRAY
32470: GREATEREQUAL
32471: AND
32472: PUSH
32473: LD_VAR 0 9
32477: PPUSH
32478: LD_INT 3
32480: PPUSH
32481: CALL_OW 275
32485: PUSH
32486: LD_VAR 0 14
32490: PUSH
32491: LD_INT 3
32493: ARRAY
32494: GREATEREQUAL
32495: AND
32496: IFFALSE 32508
// result := weapon ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: LD_VAR 0 18
32507: ST_TO_ADDR
// end ; end ;
32508: LD_VAR 0 3
32512: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32513: LD_INT 0
32515: PPUSH
32516: PPUSH
// result := true ;
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 1
32524: ST_TO_ADDR
// if array1 = array2 then
32525: LD_VAR 0 1
32529: PUSH
32530: LD_VAR 0 2
32534: EQUAL
32535: IFFALSE 32595
// begin for i = 1 to array1 do
32537: LD_ADDR_VAR 0 4
32541: PUSH
32542: DOUBLE
32543: LD_INT 1
32545: DEC
32546: ST_TO_ADDR
32547: LD_VAR 0 1
32551: PUSH
32552: FOR_TO
32553: IFFALSE 32591
// if array1 [ i ] <> array2 [ i ] then
32555: LD_VAR 0 1
32559: PUSH
32560: LD_VAR 0 4
32564: ARRAY
32565: PUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_VAR 0 4
32575: ARRAY
32576: NONEQUAL
32577: IFFALSE 32589
// begin result := false ;
32579: LD_ADDR_VAR 0 3
32583: PUSH
32584: LD_INT 0
32586: ST_TO_ADDR
// break ;
32587: GO 32591
// end ;
32589: GO 32552
32591: POP
32592: POP
// end else
32593: GO 32603
// result := false ;
32595: LD_ADDR_VAR 0 3
32599: PUSH
32600: LD_INT 0
32602: ST_TO_ADDR
// end ;
32603: LD_VAR 0 3
32607: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32608: LD_INT 0
32610: PPUSH
32611: PPUSH
32612: PPUSH
// pom := GetBase ( fac ) ;
32613: LD_ADDR_VAR 0 5
32617: PUSH
32618: LD_VAR 0 1
32622: PPUSH
32623: CALL_OW 274
32627: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32628: LD_ADDR_VAR 0 4
32632: PUSH
32633: LD_VAR 0 2
32637: PUSH
32638: LD_INT 1
32640: ARRAY
32641: PPUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_INT 2
32649: ARRAY
32650: PPUSH
32651: LD_VAR 0 2
32655: PUSH
32656: LD_INT 3
32658: ARRAY
32659: PPUSH
32660: LD_VAR 0 2
32664: PUSH
32665: LD_INT 4
32667: ARRAY
32668: PPUSH
32669: CALL_OW 449
32673: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32674: LD_ADDR_VAR 0 3
32678: PUSH
32679: LD_VAR 0 5
32683: PPUSH
32684: LD_INT 1
32686: PPUSH
32687: CALL_OW 275
32691: PUSH
32692: LD_VAR 0 4
32696: PUSH
32697: LD_INT 1
32699: ARRAY
32700: GREATEREQUAL
32701: PUSH
32702: LD_VAR 0 5
32706: PPUSH
32707: LD_INT 2
32709: PPUSH
32710: CALL_OW 275
32714: PUSH
32715: LD_VAR 0 4
32719: PUSH
32720: LD_INT 2
32722: ARRAY
32723: GREATEREQUAL
32724: AND
32725: PUSH
32726: LD_VAR 0 5
32730: PPUSH
32731: LD_INT 3
32733: PPUSH
32734: CALL_OW 275
32738: PUSH
32739: LD_VAR 0 4
32743: PUSH
32744: LD_INT 3
32746: ARRAY
32747: GREATEREQUAL
32748: AND
32749: ST_TO_ADDR
// end ;
32750: LD_VAR 0 3
32754: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32755: LD_INT 0
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
// pom := GetBase ( building ) ;
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 274
32775: ST_TO_ADDR
// if not pom then
32776: LD_VAR 0 3
32780: NOT
32781: IFFALSE 32785
// exit ;
32783: GO 32955
// btype := GetBType ( building ) ;
32785: LD_ADDR_VAR 0 5
32789: PUSH
32790: LD_VAR 0 1
32794: PPUSH
32795: CALL_OW 266
32799: ST_TO_ADDR
// if btype = b_armoury then
32800: LD_VAR 0 5
32804: PUSH
32805: LD_INT 4
32807: EQUAL
32808: IFFALSE 32818
// btype := b_barracks ;
32810: LD_ADDR_VAR 0 5
32814: PUSH
32815: LD_INT 5
32817: ST_TO_ADDR
// if btype = b_depot then
32818: LD_VAR 0 5
32822: PUSH
32823: LD_INT 0
32825: EQUAL
32826: IFFALSE 32836
// btype := b_warehouse ;
32828: LD_ADDR_VAR 0 5
32832: PUSH
32833: LD_INT 1
32835: ST_TO_ADDR
// if btype = b_workshop then
32836: LD_VAR 0 5
32840: PUSH
32841: LD_INT 2
32843: EQUAL
32844: IFFALSE 32854
// btype := b_factory ;
32846: LD_ADDR_VAR 0 5
32850: PUSH
32851: LD_INT 3
32853: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32854: LD_ADDR_VAR 0 4
32858: PUSH
32859: LD_VAR 0 5
32863: PPUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 248
32873: PPUSH
32874: CALL_OW 450
32878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32879: LD_ADDR_VAR 0 2
32883: PUSH
32884: LD_VAR 0 3
32888: PPUSH
32889: LD_INT 1
32891: PPUSH
32892: CALL_OW 275
32896: PUSH
32897: LD_VAR 0 4
32901: PUSH
32902: LD_INT 1
32904: ARRAY
32905: GREATEREQUAL
32906: PUSH
32907: LD_VAR 0 3
32911: PPUSH
32912: LD_INT 2
32914: PPUSH
32915: CALL_OW 275
32919: PUSH
32920: LD_VAR 0 4
32924: PUSH
32925: LD_INT 2
32927: ARRAY
32928: GREATEREQUAL
32929: AND
32930: PUSH
32931: LD_VAR 0 3
32935: PPUSH
32936: LD_INT 3
32938: PPUSH
32939: CALL_OW 275
32943: PUSH
32944: LD_VAR 0 4
32948: PUSH
32949: LD_INT 3
32951: ARRAY
32952: GREATEREQUAL
32953: AND
32954: ST_TO_ADDR
// end ;
32955: LD_VAR 0 2
32959: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32960: LD_INT 0
32962: PPUSH
32963: PPUSH
32964: PPUSH
// pom := GetBase ( building ) ;
32965: LD_ADDR_VAR 0 4
32969: PUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 274
32979: ST_TO_ADDR
// if not pom then
32980: LD_VAR 0 4
32984: NOT
32985: IFFALSE 32989
// exit ;
32987: GO 33090
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32989: LD_ADDR_VAR 0 5
32993: PUSH
32994: LD_VAR 0 2
32998: PPUSH
32999: LD_VAR 0 1
33003: PPUSH
33004: CALL_OW 248
33008: PPUSH
33009: CALL_OW 450
33013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33014: LD_ADDR_VAR 0 3
33018: PUSH
33019: LD_VAR 0 4
33023: PPUSH
33024: LD_INT 1
33026: PPUSH
33027: CALL_OW 275
33031: PUSH
33032: LD_VAR 0 5
33036: PUSH
33037: LD_INT 1
33039: ARRAY
33040: GREATEREQUAL
33041: PUSH
33042: LD_VAR 0 4
33046: PPUSH
33047: LD_INT 2
33049: PPUSH
33050: CALL_OW 275
33054: PUSH
33055: LD_VAR 0 5
33059: PUSH
33060: LD_INT 2
33062: ARRAY
33063: GREATEREQUAL
33064: AND
33065: PUSH
33066: LD_VAR 0 4
33070: PPUSH
33071: LD_INT 3
33073: PPUSH
33074: CALL_OW 275
33078: PUSH
33079: LD_VAR 0 5
33083: PUSH
33084: LD_INT 3
33086: ARRAY
33087: GREATEREQUAL
33088: AND
33089: ST_TO_ADDR
// end ;
33090: LD_VAR 0 3
33094: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33095: LD_INT 0
33097: PPUSH
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
33103: PPUSH
33104: PPUSH
33105: PPUSH
33106: PPUSH
// result := false ;
33107: LD_ADDR_VAR 0 6
33111: PUSH
33112: LD_INT 0
33114: ST_TO_ADDR
// if not base or not btype or not x or not y then
33115: LD_VAR 0 1
33119: NOT
33120: PUSH
33121: LD_VAR 0 2
33125: NOT
33126: OR
33127: PUSH
33128: LD_VAR 0 3
33132: NOT
33133: OR
33134: PUSH
33135: LD_VAR 0 4
33139: NOT
33140: OR
33141: IFFALSE 33145
// exit ;
33143: GO 33754
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33145: LD_ADDR_VAR 0 12
33149: PUSH
33150: LD_VAR 0 2
33154: PPUSH
33155: LD_VAR 0 3
33159: PPUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: LD_VAR 0 5
33169: PPUSH
33170: LD_VAR 0 1
33174: PUSH
33175: LD_INT 1
33177: ARRAY
33178: PPUSH
33179: CALL_OW 248
33183: PPUSH
33184: LD_INT 0
33186: PPUSH
33187: CALL 34591 0 6
33191: ST_TO_ADDR
// if not hexes then
33192: LD_VAR 0 12
33196: NOT
33197: IFFALSE 33201
// exit ;
33199: GO 33754
// for i = 1 to hexes do
33201: LD_ADDR_VAR 0 7
33205: PUSH
33206: DOUBLE
33207: LD_INT 1
33209: DEC
33210: ST_TO_ADDR
33211: LD_VAR 0 12
33215: PUSH
33216: FOR_TO
33217: IFFALSE 33752
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33219: LD_ADDR_VAR 0 11
33223: PUSH
33224: LD_VAR 0 12
33228: PUSH
33229: LD_VAR 0 7
33233: ARRAY
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: PPUSH
33239: LD_VAR 0 12
33243: PUSH
33244: LD_VAR 0 7
33248: ARRAY
33249: PUSH
33250: LD_INT 2
33252: ARRAY
33253: PPUSH
33254: CALL_OW 428
33258: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33259: LD_VAR 0 12
33263: PUSH
33264: LD_VAR 0 7
33268: ARRAY
33269: PUSH
33270: LD_INT 1
33272: ARRAY
33273: PPUSH
33274: LD_VAR 0 12
33278: PUSH
33279: LD_VAR 0 7
33283: ARRAY
33284: PUSH
33285: LD_INT 2
33287: ARRAY
33288: PPUSH
33289: CALL_OW 351
33293: PUSH
33294: LD_VAR 0 12
33298: PUSH
33299: LD_VAR 0 7
33303: ARRAY
33304: PUSH
33305: LD_INT 1
33307: ARRAY
33308: PPUSH
33309: LD_VAR 0 12
33313: PUSH
33314: LD_VAR 0 7
33318: ARRAY
33319: PUSH
33320: LD_INT 2
33322: ARRAY
33323: PPUSH
33324: CALL_OW 488
33328: NOT
33329: OR
33330: PUSH
33331: LD_VAR 0 11
33335: PPUSH
33336: CALL_OW 247
33340: PUSH
33341: LD_INT 3
33343: EQUAL
33344: OR
33345: IFFALSE 33351
// exit ;
33347: POP
33348: POP
33349: GO 33754
// if not tmp or not tmp in base then
33351: LD_VAR 0 11
33355: NOT
33356: PUSH
33357: LD_VAR 0 11
33361: PUSH
33362: LD_VAR 0 1
33366: IN
33367: NOT
33368: OR
33369: IFFALSE 33373
// continue ;
33371: GO 33216
// result := true ;
33373: LD_ADDR_VAR 0 6
33377: PUSH
33378: LD_INT 1
33380: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33381: LD_ADDR_VAR 0 15
33385: PUSH
33386: LD_VAR 0 1
33390: PPUSH
33391: LD_INT 22
33393: PUSH
33394: LD_VAR 0 11
33398: PPUSH
33399: CALL_OW 255
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 30
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 30
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PPUSH
33440: CALL_OW 72
33444: ST_TO_ADDR
// if dep then
33445: LD_VAR 0 15
33449: IFFALSE 33585
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33451: LD_ADDR_VAR 0 14
33455: PUSH
33456: LD_VAR 0 15
33460: PUSH
33461: LD_INT 1
33463: ARRAY
33464: PPUSH
33465: CALL_OW 250
33469: PPUSH
33470: LD_VAR 0 15
33474: PUSH
33475: LD_INT 1
33477: ARRAY
33478: PPUSH
33479: CALL_OW 254
33483: PPUSH
33484: LD_INT 5
33486: PPUSH
33487: CALL_OW 272
33491: PUSH
33492: LD_VAR 0 15
33496: PUSH
33497: LD_INT 1
33499: ARRAY
33500: PPUSH
33501: CALL_OW 251
33505: PPUSH
33506: LD_VAR 0 15
33510: PUSH
33511: LD_INT 1
33513: ARRAY
33514: PPUSH
33515: CALL_OW 254
33519: PPUSH
33520: LD_INT 5
33522: PPUSH
33523: CALL_OW 273
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33532: LD_VAR 0 14
33536: PUSH
33537: LD_INT 1
33539: ARRAY
33540: PPUSH
33541: LD_VAR 0 14
33545: PUSH
33546: LD_INT 2
33548: ARRAY
33549: PPUSH
33550: CALL_OW 488
33554: IFFALSE 33585
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33556: LD_VAR 0 11
33560: PPUSH
33561: LD_VAR 0 14
33565: PUSH
33566: LD_INT 1
33568: ARRAY
33569: PPUSH
33570: LD_VAR 0 14
33574: PUSH
33575: LD_INT 2
33577: ARRAY
33578: PPUSH
33579: CALL_OW 111
// continue ;
33583: GO 33216
// end ; end ; r := GetDir ( tmp ) ;
33585: LD_ADDR_VAR 0 13
33589: PUSH
33590: LD_VAR 0 11
33594: PPUSH
33595: CALL_OW 254
33599: ST_TO_ADDR
// if r = 5 then
33600: LD_VAR 0 13
33604: PUSH
33605: LD_INT 5
33607: EQUAL
33608: IFFALSE 33618
// r := 0 ;
33610: LD_ADDR_VAR 0 13
33614: PUSH
33615: LD_INT 0
33617: ST_TO_ADDR
// for j = r to 5 do
33618: LD_ADDR_VAR 0 8
33622: PUSH
33623: DOUBLE
33624: LD_VAR 0 13
33628: DEC
33629: ST_TO_ADDR
33630: LD_INT 5
33632: PUSH
33633: FOR_TO
33634: IFFALSE 33748
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33636: LD_ADDR_VAR 0 9
33640: PUSH
33641: LD_VAR 0 11
33645: PPUSH
33646: CALL_OW 250
33650: PPUSH
33651: LD_VAR 0 8
33655: PPUSH
33656: LD_INT 2
33658: PPUSH
33659: CALL_OW 272
33663: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33664: LD_ADDR_VAR 0 10
33668: PUSH
33669: LD_VAR 0 11
33673: PPUSH
33674: CALL_OW 251
33678: PPUSH
33679: LD_VAR 0 8
33683: PPUSH
33684: LD_INT 2
33686: PPUSH
33687: CALL_OW 273
33691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33692: LD_VAR 0 9
33696: PPUSH
33697: LD_VAR 0 10
33701: PPUSH
33702: CALL_OW 488
33706: PUSH
33707: LD_VAR 0 9
33711: PPUSH
33712: LD_VAR 0 10
33716: PPUSH
33717: CALL_OW 428
33721: NOT
33722: AND
33723: IFFALSE 33746
// begin ComMoveXY ( tmp , _x , _y ) ;
33725: LD_VAR 0 11
33729: PPUSH
33730: LD_VAR 0 9
33734: PPUSH
33735: LD_VAR 0 10
33739: PPUSH
33740: CALL_OW 111
// break ;
33744: GO 33748
// end ; end ;
33746: GO 33633
33748: POP
33749: POP
// end ;
33750: GO 33216
33752: POP
33753: POP
// end ;
33754: LD_VAR 0 6
33758: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33759: LD_INT 0
33761: PPUSH
33762: PPUSH
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
// result := false ;
33771: LD_ADDR_VAR 0 6
33775: PUSH
33776: LD_INT 0
33778: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33779: LD_VAR 0 1
33783: NOT
33784: PUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 266
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: IN
33805: NOT
33806: OR
33807: PUSH
33808: LD_VAR 0 2
33812: NOT
33813: OR
33814: PUSH
33815: LD_VAR 0 5
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: IN
33846: NOT
33847: OR
33848: PUSH
33849: LD_VAR 0 3
33853: PPUSH
33854: LD_VAR 0 4
33858: PPUSH
33859: CALL_OW 488
33863: NOT
33864: OR
33865: IFFALSE 33869
// exit ;
33867: GO 34586
// pom := GetBase ( depot ) ;
33869: LD_ADDR_VAR 0 10
33873: PUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 274
33883: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33884: LD_ADDR_VAR 0 11
33888: PUSH
33889: LD_VAR 0 2
33893: PPUSH
33894: LD_VAR 0 1
33898: PPUSH
33899: CALL_OW 248
33903: PPUSH
33904: CALL_OW 450
33908: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33909: LD_VAR 0 10
33913: PPUSH
33914: LD_INT 1
33916: PPUSH
33917: CALL_OW 275
33921: PUSH
33922: LD_VAR 0 11
33926: PUSH
33927: LD_INT 1
33929: ARRAY
33930: GREATEREQUAL
33931: PUSH
33932: LD_VAR 0 10
33936: PPUSH
33937: LD_INT 2
33939: PPUSH
33940: CALL_OW 275
33944: PUSH
33945: LD_VAR 0 11
33949: PUSH
33950: LD_INT 2
33952: ARRAY
33953: GREATEREQUAL
33954: AND
33955: PUSH
33956: LD_VAR 0 10
33960: PPUSH
33961: LD_INT 3
33963: PPUSH
33964: CALL_OW 275
33968: PUSH
33969: LD_VAR 0 11
33973: PUSH
33974: LD_INT 3
33976: ARRAY
33977: GREATEREQUAL
33978: AND
33979: NOT
33980: IFFALSE 33984
// exit ;
33982: GO 34586
// if GetBType ( depot ) = b_depot then
33984: LD_VAR 0 1
33988: PPUSH
33989: CALL_OW 266
33993: PUSH
33994: LD_INT 0
33996: EQUAL
33997: IFFALSE 34009
// dist := 28 else
33999: LD_ADDR_VAR 0 14
34003: PUSH
34004: LD_INT 28
34006: ST_TO_ADDR
34007: GO 34017
// dist := 36 ;
34009: LD_ADDR_VAR 0 14
34013: PUSH
34014: LD_INT 36
34016: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34017: LD_VAR 0 1
34021: PPUSH
34022: LD_VAR 0 3
34026: PPUSH
34027: LD_VAR 0 4
34031: PPUSH
34032: CALL_OW 297
34036: PUSH
34037: LD_VAR 0 14
34041: GREATER
34042: IFFALSE 34046
// exit ;
34044: GO 34586
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34046: LD_ADDR_VAR 0 12
34050: PUSH
34051: LD_VAR 0 2
34055: PPUSH
34056: LD_VAR 0 3
34060: PPUSH
34061: LD_VAR 0 4
34065: PPUSH
34066: LD_VAR 0 5
34070: PPUSH
34071: LD_VAR 0 1
34075: PPUSH
34076: CALL_OW 248
34080: PPUSH
34081: LD_INT 0
34083: PPUSH
34084: CALL 34591 0 6
34088: ST_TO_ADDR
// if not hexes then
34089: LD_VAR 0 12
34093: NOT
34094: IFFALSE 34098
// exit ;
34096: GO 34586
// hex := GetHexInfo ( x , y ) ;
34098: LD_ADDR_VAR 0 15
34102: PUSH
34103: LD_VAR 0 3
34107: PPUSH
34108: LD_VAR 0 4
34112: PPUSH
34113: CALL_OW 546
34117: ST_TO_ADDR
// if hex [ 1 ] then
34118: LD_VAR 0 15
34122: PUSH
34123: LD_INT 1
34125: ARRAY
34126: IFFALSE 34130
// exit ;
34128: GO 34586
// height := hex [ 2 ] ;
34130: LD_ADDR_VAR 0 13
34134: PUSH
34135: LD_VAR 0 15
34139: PUSH
34140: LD_INT 2
34142: ARRAY
34143: ST_TO_ADDR
// for i = 1 to hexes do
34144: LD_ADDR_VAR 0 7
34148: PUSH
34149: DOUBLE
34150: LD_INT 1
34152: DEC
34153: ST_TO_ADDR
34154: LD_VAR 0 12
34158: PUSH
34159: FOR_TO
34160: IFFALSE 34490
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34162: LD_VAR 0 12
34166: PUSH
34167: LD_VAR 0 7
34171: ARRAY
34172: PUSH
34173: LD_INT 1
34175: ARRAY
34176: PPUSH
34177: LD_VAR 0 12
34181: PUSH
34182: LD_VAR 0 7
34186: ARRAY
34187: PUSH
34188: LD_INT 2
34190: ARRAY
34191: PPUSH
34192: CALL_OW 488
34196: NOT
34197: PUSH
34198: LD_VAR 0 12
34202: PUSH
34203: LD_VAR 0 7
34207: ARRAY
34208: PUSH
34209: LD_INT 1
34211: ARRAY
34212: PPUSH
34213: LD_VAR 0 12
34217: PUSH
34218: LD_VAR 0 7
34222: ARRAY
34223: PUSH
34224: LD_INT 2
34226: ARRAY
34227: PPUSH
34228: CALL_OW 428
34232: PUSH
34233: LD_INT 0
34235: GREATER
34236: OR
34237: PUSH
34238: LD_VAR 0 12
34242: PUSH
34243: LD_VAR 0 7
34247: ARRAY
34248: PUSH
34249: LD_INT 1
34251: ARRAY
34252: PPUSH
34253: LD_VAR 0 12
34257: PUSH
34258: LD_VAR 0 7
34262: ARRAY
34263: PUSH
34264: LD_INT 2
34266: ARRAY
34267: PPUSH
34268: CALL_OW 351
34272: OR
34273: IFFALSE 34279
// exit ;
34275: POP
34276: POP
34277: GO 34586
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34279: LD_ADDR_VAR 0 8
34283: PUSH
34284: LD_VAR 0 12
34288: PUSH
34289: LD_VAR 0 7
34293: ARRAY
34294: PUSH
34295: LD_INT 1
34297: ARRAY
34298: PPUSH
34299: LD_VAR 0 12
34303: PUSH
34304: LD_VAR 0 7
34308: ARRAY
34309: PUSH
34310: LD_INT 2
34312: ARRAY
34313: PPUSH
34314: CALL_OW 546
34318: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34319: LD_VAR 0 8
34323: PUSH
34324: LD_INT 1
34326: ARRAY
34327: PUSH
34328: LD_VAR 0 8
34332: PUSH
34333: LD_INT 2
34335: ARRAY
34336: PUSH
34337: LD_VAR 0 13
34341: PUSH
34342: LD_INT 2
34344: PLUS
34345: GREATER
34346: OR
34347: PUSH
34348: LD_VAR 0 8
34352: PUSH
34353: LD_INT 2
34355: ARRAY
34356: PUSH
34357: LD_VAR 0 13
34361: PUSH
34362: LD_INT 2
34364: MINUS
34365: LESS
34366: OR
34367: PUSH
34368: LD_VAR 0 8
34372: PUSH
34373: LD_INT 3
34375: ARRAY
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 8
34382: PUSH
34383: LD_INT 9
34385: PUSH
34386: LD_INT 10
34388: PUSH
34389: LD_INT 11
34391: PUSH
34392: LD_INT 12
34394: PUSH
34395: LD_INT 13
34397: PUSH
34398: LD_INT 16
34400: PUSH
34401: LD_INT 17
34403: PUSH
34404: LD_INT 18
34406: PUSH
34407: LD_INT 19
34409: PUSH
34410: LD_INT 20
34412: PUSH
34413: LD_INT 21
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: IN
34431: NOT
34432: OR
34433: PUSH
34434: LD_VAR 0 8
34438: PUSH
34439: LD_INT 5
34441: ARRAY
34442: NOT
34443: OR
34444: PUSH
34445: LD_VAR 0 8
34449: PUSH
34450: LD_INT 6
34452: ARRAY
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 7
34462: PUSH
34463: LD_INT 9
34465: PUSH
34466: LD_INT 10
34468: PUSH
34469: LD_INT 11
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: IN
34480: NOT
34481: OR
34482: IFFALSE 34488
// exit ;
34484: POP
34485: POP
34486: GO 34586
// end ;
34488: GO 34159
34490: POP
34491: POP
// side := GetSide ( depot ) ;
34492: LD_ADDR_VAR 0 9
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 255
34506: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34507: LD_VAR 0 9
34511: PPUSH
34512: LD_VAR 0 3
34516: PPUSH
34517: LD_VAR 0 4
34521: PPUSH
34522: LD_INT 20
34524: PPUSH
34525: CALL 27240 0 4
34529: PUSH
34530: LD_INT 4
34532: ARRAY
34533: IFFALSE 34537
// exit ;
34535: GO 34586
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34537: LD_VAR 0 2
34541: PUSH
34542: LD_INT 29
34544: PUSH
34545: LD_INT 30
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: IN
34552: PUSH
34553: LD_VAR 0 3
34557: PPUSH
34558: LD_VAR 0 4
34562: PPUSH
34563: LD_VAR 0 9
34567: PPUSH
34568: CALL_OW 440
34572: NOT
34573: AND
34574: IFFALSE 34578
// exit ;
34576: GO 34586
// result := true ;
34578: LD_ADDR_VAR 0 6
34582: PUSH
34583: LD_INT 1
34585: ST_TO_ADDR
// end ;
34586: LD_VAR 0 6
34590: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34591: LD_INT 0
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
34604: PPUSH
34605: PPUSH
34606: PPUSH
34607: PPUSH
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
// result = [ ] ;
34651: LD_ADDR_VAR 0 7
34655: PUSH
34656: EMPTY
34657: ST_TO_ADDR
// temp_list = [ ] ;
34658: LD_ADDR_VAR 0 9
34662: PUSH
34663: EMPTY
34664: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34665: LD_VAR 0 4
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: IN
34696: NOT
34697: PUSH
34698: LD_VAR 0 1
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: IN
34713: PUSH
34714: LD_VAR 0 5
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: LIST
34732: IN
34733: NOT
34734: AND
34735: OR
34736: IFFALSE 34740
// exit ;
34738: GO 53131
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34740: LD_VAR 0 1
34744: PUSH
34745: LD_INT 6
34747: PUSH
34748: LD_INT 7
34750: PUSH
34751: LD_INT 8
34753: PUSH
34754: LD_INT 13
34756: PUSH
34757: LD_INT 12
34759: PUSH
34760: LD_INT 15
34762: PUSH
34763: LD_INT 11
34765: PUSH
34766: LD_INT 14
34768: PUSH
34769: LD_INT 10
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: IN
34783: IFFALSE 34793
// btype = b_lab ;
34785: LD_ADDR_VAR 0 1
34789: PUSH
34790: LD_INT 6
34792: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34793: LD_VAR 0 6
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: IN
34812: NOT
34813: PUSH
34814: LD_VAR 0 1
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 6
34833: PUSH
34834: LD_INT 36
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 5
34842: PUSH
34843: LD_INT 31
34845: PUSH
34846: LD_INT 32
34848: PUSH
34849: LD_INT 33
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: IN
34865: NOT
34866: PUSH
34867: LD_VAR 0 6
34871: PUSH
34872: LD_INT 1
34874: EQUAL
34875: AND
34876: OR
34877: PUSH
34878: LD_VAR 0 1
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: IN
34893: NOT
34894: PUSH
34895: LD_VAR 0 6
34899: PUSH
34900: LD_INT 2
34902: EQUAL
34903: AND
34904: OR
34905: IFFALSE 34915
// mode = 0 ;
34907: LD_ADDR_VAR 0 6
34911: PUSH
34912: LD_INT 0
34914: ST_TO_ADDR
// case mode of 0 :
34915: LD_VAR 0 6
34919: PUSH
34920: LD_INT 0
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 46381
34928: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34929: LD_ADDR_VAR 0 11
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 3
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35122: LD_ADDR_VAR 0 12
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 3
35279: NEG
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 3
35290: NEG
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35318: LD_ADDR_VAR 0 13
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 2
35465: NEG
35466: PUSH
35467: LD_INT 3
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 3
35477: NEG
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 3
35489: NEG
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35517: LD_ADDR_VAR 0 14
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 3
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 3
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35713: LD_ADDR_VAR 0 15
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 3
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35906: LD_ADDR_VAR 0 16
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: LD_INT 2
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: LD_INT 3
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 3
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36099: LD_ADDR_VAR 0 17
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 2
36298: NEG
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36329: LD_ADDR_VAR 0 18
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: LD_INT 2
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 2
36516: NEG
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: NEG
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36559: LD_ADDR_VAR 0 19
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: LD_INT 2
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36789: LD_ADDR_VAR 0 20
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: LD_INT 2
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37019: LD_ADDR_VAR 0 21
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: LD_INT 2
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37249: LD_ADDR_VAR 0 22
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 2
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: NEG
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37479: LD_ADDR_VAR 0 23
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 2
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: NEG
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: LD_INT 2
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 3
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: LD_INT 3
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37759: LD_ADDR_VAR 0 24
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38035: LD_ADDR_VAR 0 25
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 3
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38309: LD_ADDR_VAR 0 26
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 2
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 3
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38585: LD_ADDR_VAR 0 27
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 2
38761: NEG
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38865: LD_ADDR_VAR 0 28
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 2
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: LD_INT 3
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 3
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: NEG
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39147: LD_ADDR_VAR 0 29
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: LD_INT 3
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 3
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39426: LD_ADDR_VAR 0 30
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 2
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39704: LD_ADDR_VAR 0 31
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 3
39947: NEG
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39982: LD_ADDR_VAR 0 32
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 3
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 3
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 3
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40260: LD_ADDR_VAR 0 33
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: LD_INT 3
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40539: LD_ADDR_VAR 0 34
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 2
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 3
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 3
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 3
40784: NEG
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40819: LD_ADDR_VAR 0 35
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40931: LD_ADDR_VAR 0 36
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41043: LD_ADDR_VAR 0 37
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41155: LD_ADDR_VAR 0 38
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41267: LD_ADDR_VAR 0 39
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41379: LD_ADDR_VAR 0 40
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41491: LD_ADDR_VAR 0 41
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: LD_INT 3
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: LD_INT 3
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41841: LD_ADDR_VAR 0 42
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 3
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 3
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 3
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 3
42138: NEG
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 3
42150: NEG
42151: PUSH
42152: LD_INT 3
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42191: LD_ADDR_VAR 0 43
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 3
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 3
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 3
42498: NEG
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42539: LD_ADDR_VAR 0 44
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: LD_INT 3
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: NEG
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42889: LD_ADDR_VAR 0 45
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 3
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 3
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 3
43198: NEG
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43239: LD_ADDR_VAR 0 46
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 3
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: NEG
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43587: LD_ADDR_VAR 0 47
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43738: LD_ADDR_VAR 0 48
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43885: LD_ADDR_VAR 0 49
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44029: LD_ADDR_VAR 0 50
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44173: LD_ADDR_VAR 0 51
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44320: LD_ADDR_VAR 0 52
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44471: LD_ADDR_VAR 0 53
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44701: LD_ADDR_VAR 0 54
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44931: LD_ADDR_VAR 0 55
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45161: LD_ADDR_VAR 0 56
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45391: LD_ADDR_VAR 0 57
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45621: LD_ADDR_VAR 0 58
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45851: LD_ADDR_VAR 0 59
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45939: LD_ADDR_VAR 0 60
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46027: LD_ADDR_VAR 0 61
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46115: LD_ADDR_VAR 0 62
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46203: LD_ADDR_VAR 0 63
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46291: LD_ADDR_VAR 0 64
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: ST_TO_ADDR
// end ; 1 :
46379: GO 52276
46381: LD_INT 1
46383: DOUBLE
46384: EQUAL
46385: IFTRUE 46389
46387: GO 49012
46389: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46390: LD_ADDR_VAR 0 11
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 3
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46434: LD_ADDR_VAR 0 12
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46475: LD_ADDR_VAR 0 13
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46515: LD_ADDR_VAR 0 14
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46556: LD_ADDR_VAR 0 15
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46600: LD_ADDR_VAR 0 16
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: LD_INT 3
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: LIST
46645: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46646: LD_ADDR_VAR 0 17
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 3
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46690: LD_ADDR_VAR 0 18
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46731: LD_ADDR_VAR 0 19
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 3
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46771: LD_ADDR_VAR 0 20
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46812: LD_ADDR_VAR 0 21
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 3
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46856: LD_ADDR_VAR 0 22
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46902: LD_ADDR_VAR 0 23
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 4
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46946: LD_ADDR_VAR 0 24
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46987: LD_ADDR_VAR 0 25
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: LD_INT 4
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47027: LD_ADDR_VAR 0 26
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 4
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47068: LD_ADDR_VAR 0 27
47072: PUSH
47073: LD_INT 3
47075: NEG
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47112: LD_ADDR_VAR 0 28
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: LD_INT 3
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: LD_INT 4
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 4
47143: NEG
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47158: LD_ADDR_VAR 0 29
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 4
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 4
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 5
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 5
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 4
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 6
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 6
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 5
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47313: LD_ADDR_VAR 0 30
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 4
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 4
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 4
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 5
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 5
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 5
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 6
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 6
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47456: LD_ADDR_VAR 0 31
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 4
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 4
47503: PUSH
47504: LD_INT 4
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: LD_INT 4
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 5
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 5
47533: PUSH
47534: LD_INT 5
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: LD_INT 5
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 6
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 6
47563: PUSH
47564: LD_INT 6
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 5
47573: PUSH
47574: LD_INT 6
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47595: LD_ADDR_VAR 0 32
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 4
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 5
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 5
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 6
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 6
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 5
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47738: LD_ADDR_VAR 0 33
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 3
47767: NEG
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 4
47790: NEG
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 4
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 4
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 5
47824: NEG
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 5
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 5
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 6
47858: NEG
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 6
47869: NEG
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47893: LD_ADDR_VAR 0 34
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: LD_INT 3
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 3
47936: NEG
47937: PUSH
47938: LD_INT 4
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 4
47960: NEG
47961: PUSH
47962: LD_INT 4
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 4
47972: NEG
47973: PUSH
47974: LD_INT 5
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 5
47984: NEG
47985: PUSH
47986: LD_INT 4
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 5
47996: NEG
47997: PUSH
47998: LD_INT 5
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 5
48008: NEG
48009: PUSH
48010: LD_INT 6
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 6
48020: NEG
48021: PUSH
48022: LD_INT 5
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 6
48032: NEG
48033: PUSH
48034: LD_INT 6
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48056: LD_ADDR_VAR 0 41
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48100: LD_ADDR_VAR 0 42
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48141: LD_ADDR_VAR 0 43
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 3
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48181: LD_ADDR_VAR 0 44
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48222: LD_ADDR_VAR 0 45
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48266: LD_ADDR_VAR 0 46
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 3
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48312: LD_ADDR_VAR 0 47
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48345: LD_ADDR_VAR 0 48
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48376: LD_ADDR_VAR 0 49
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48405: LD_ADDR_VAR 0 50
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48434: LD_ADDR_VAR 0 51
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48465: LD_ADDR_VAR 0 52
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 3
48484: NEG
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48498: LD_ADDR_VAR 0 53
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48542: LD_ADDR_VAR 0 54
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48583: LD_ADDR_VAR 0 55
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48623: LD_ADDR_VAR 0 56
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48664: LD_ADDR_VAR 0 57
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: NEG
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 3
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48708: LD_ADDR_VAR 0 58
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48754: LD_ADDR_VAR 0 59
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48798: LD_ADDR_VAR 0 60
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48839: LD_ADDR_VAR 0 61
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48879: LD_ADDR_VAR 0 62
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48920: LD_ADDR_VAR 0 63
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48964: LD_ADDR_VAR 0 64
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// end ; 2 :
49010: GO 52276
49012: LD_INT 2
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49020
49018: GO 52275
49020: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49021: LD_ADDR_VAR 0 29
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 4
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 5
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 5
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 4
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 5
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 4
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 4
49151: PUSH
49152: LD_INT 4
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: LD_INT 4
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 4
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 4
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 4
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: LD_INT 4
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 5
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 5
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 4
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 5
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 3
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 4
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 4
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 4
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: NEG
49407: PUSH
49408: LD_INT 4
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 4
49418: NEG
49419: PUSH
49420: LD_INT 5
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 3
49430: NEG
49431: PUSH
49432: LD_INT 4
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 4
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 5
49466: NEG
49467: PUSH
49468: LD_INT 4
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 5
49478: NEG
49479: PUSH
49480: LD_INT 5
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 5
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 5
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49559: LD_ADDR_VAR 0 30
49563: PUSH
49564: LD_INT 4
49566: PUSH
49567: LD_INT 4
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 4
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 5
49586: PUSH
49587: LD_INT 4
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 5
49596: PUSH
49597: LD_INT 5
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 4
49606: PUSH
49607: LD_INT 5
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 4
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 5
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: LD_INT 5
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 4
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 4
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 4
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 4
49749: NEG
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 4
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 4
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 5
49805: NEG
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 5
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 5
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 3
49863: NEG
49864: PUSH
49865: LD_INT 4
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 4
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 4
49923: NEG
49924: PUSH
49925: LD_INT 4
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 4
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 4
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 5
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 4
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 4
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 5
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 5
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50106: LD_ADDR_VAR 0 31
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 4
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 5
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 5
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 3
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 5
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: NEG
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 4
50262: NEG
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 4
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 4
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 4
50308: NEG
50309: PUSH
50310: LD_INT 4
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 4
50320: NEG
50321: PUSH
50322: LD_INT 5
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: LD_INT 4
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 5
50368: NEG
50369: PUSH
50370: LD_INT 4
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 5
50380: NEG
50381: PUSH
50382: LD_INT 5
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: LD_INT 5
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 5
50404: NEG
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 3
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 4
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 3
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 4
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: LD_INT 4
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 4
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 4
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 5
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 5
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 4
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 3
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 5
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50656: LD_ADDR_VAR 0 32
50660: PUSH
50661: LD_INT 4
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 4
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 3
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 5
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 5
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 5
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 3
50754: NEG
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 4
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 4
50825: NEG
50826: PUSH
50827: LD_INT 3
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 4
50837: NEG
50838: PUSH
50839: LD_INT 4
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 4
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 4
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 5
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 4
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 4
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 5
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: LD_INT 5
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 4
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 4
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 4
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 4
51068: PUSH
51069: LD_INT 4
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 4
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 5
51088: PUSH
51089: LD_INT 4
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 5
51098: PUSH
51099: LD_INT 5
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 4
51108: PUSH
51109: LD_INT 5
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 5
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 5
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51203: LD_ADDR_VAR 0 33
51207: PUSH
51208: LD_INT 4
51210: NEG
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 4
51222: NEG
51223: PUSH
51224: LD_INT 5
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 4
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: NEG
51259: PUSH
51260: LD_INT 3
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 5
51270: NEG
51271: PUSH
51272: LD_INT 4
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 5
51282: NEG
51283: PUSH
51284: LD_INT 5
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 5
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 5
51306: NEG
51307: PUSH
51308: LD_INT 3
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 4
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 4
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 4
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 5
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 5
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 4
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 5
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 4
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 4
51543: PUSH
51544: LD_INT 4
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 4
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 4
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: LD_INT 4
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 4
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 4
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 5
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 5
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 5
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51741: LD_ADDR_VAR 0 34
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 4
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 5
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 4
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 4
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 5
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 5
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 4
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 4
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 4
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: LD_INT 4
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 4
51953: PUSH
51954: LD_INT 3
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 5
51963: PUSH
51964: LD_INT 4
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 5
51973: PUSH
51974: LD_INT 5
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 4
51983: PUSH
51984: LD_INT 5
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: LD_INT 4
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 5
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 5
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 3
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 4
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 4
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: NEG
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 4
52137: NEG
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 4
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 5
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 5
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 5
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: ST_TO_ADDR
// end ; end ;
52273: GO 52276
52275: POP
// case btype of b_depot , b_warehouse :
52276: LD_VAR 0 1
52280: PUSH
52281: LD_INT 0
52283: DOUBLE
52284: EQUAL
52285: IFTRUE 52295
52287: LD_INT 1
52289: DOUBLE
52290: EQUAL
52291: IFTRUE 52295
52293: GO 52496
52295: POP
// case nation of nation_american :
52296: LD_VAR 0 5
52300: PUSH
52301: LD_INT 1
52303: DOUBLE
52304: EQUAL
52305: IFTRUE 52309
52307: GO 52365
52309: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52310: LD_ADDR_VAR 0 9
52314: PUSH
52315: LD_VAR 0 11
52319: PUSH
52320: LD_VAR 0 12
52324: PUSH
52325: LD_VAR 0 13
52329: PUSH
52330: LD_VAR 0 14
52334: PUSH
52335: LD_VAR 0 15
52339: PUSH
52340: LD_VAR 0 16
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: LD_VAR 0 4
52357: PUSH
52358: LD_INT 1
52360: PLUS
52361: ARRAY
52362: ST_TO_ADDR
52363: GO 52494
52365: LD_INT 2
52367: DOUBLE
52368: EQUAL
52369: IFTRUE 52373
52371: GO 52429
52373: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52374: LD_ADDR_VAR 0 9
52378: PUSH
52379: LD_VAR 0 17
52383: PUSH
52384: LD_VAR 0 18
52388: PUSH
52389: LD_VAR 0 19
52393: PUSH
52394: LD_VAR 0 20
52398: PUSH
52399: LD_VAR 0 21
52403: PUSH
52404: LD_VAR 0 22
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: PUSH
52417: LD_VAR 0 4
52421: PUSH
52422: LD_INT 1
52424: PLUS
52425: ARRAY
52426: ST_TO_ADDR
52427: GO 52494
52429: LD_INT 3
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52437
52435: GO 52493
52437: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52438: LD_ADDR_VAR 0 9
52442: PUSH
52443: LD_VAR 0 23
52447: PUSH
52448: LD_VAR 0 24
52452: PUSH
52453: LD_VAR 0 25
52457: PUSH
52458: LD_VAR 0 26
52462: PUSH
52463: LD_VAR 0 27
52467: PUSH
52468: LD_VAR 0 28
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: PUSH
52481: LD_VAR 0 4
52485: PUSH
52486: LD_INT 1
52488: PLUS
52489: ARRAY
52490: ST_TO_ADDR
52491: GO 52494
52493: POP
52494: GO 53049
52496: LD_INT 2
52498: DOUBLE
52499: EQUAL
52500: IFTRUE 52510
52502: LD_INT 3
52504: DOUBLE
52505: EQUAL
52506: IFTRUE 52510
52508: GO 52566
52510: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52511: LD_ADDR_VAR 0 9
52515: PUSH
52516: LD_VAR 0 29
52520: PUSH
52521: LD_VAR 0 30
52525: PUSH
52526: LD_VAR 0 31
52530: PUSH
52531: LD_VAR 0 32
52535: PUSH
52536: LD_VAR 0 33
52540: PUSH
52541: LD_VAR 0 34
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: PUSH
52554: LD_VAR 0 4
52558: PUSH
52559: LD_INT 1
52561: PLUS
52562: ARRAY
52563: ST_TO_ADDR
52564: GO 53049
52566: LD_INT 16
52568: DOUBLE
52569: EQUAL
52570: IFTRUE 52628
52572: LD_INT 17
52574: DOUBLE
52575: EQUAL
52576: IFTRUE 52628
52578: LD_INT 18
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52628
52584: LD_INT 19
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52628
52590: LD_INT 22
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52628
52596: LD_INT 20
52598: DOUBLE
52599: EQUAL
52600: IFTRUE 52628
52602: LD_INT 21
52604: DOUBLE
52605: EQUAL
52606: IFTRUE 52628
52608: LD_INT 23
52610: DOUBLE
52611: EQUAL
52612: IFTRUE 52628
52614: LD_INT 24
52616: DOUBLE
52617: EQUAL
52618: IFTRUE 52628
52620: LD_INT 25
52622: DOUBLE
52623: EQUAL
52624: IFTRUE 52628
52626: GO 52684
52628: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52629: LD_ADDR_VAR 0 9
52633: PUSH
52634: LD_VAR 0 35
52638: PUSH
52639: LD_VAR 0 36
52643: PUSH
52644: LD_VAR 0 37
52648: PUSH
52649: LD_VAR 0 38
52653: PUSH
52654: LD_VAR 0 39
52658: PUSH
52659: LD_VAR 0 40
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: PUSH
52672: LD_VAR 0 4
52676: PUSH
52677: LD_INT 1
52679: PLUS
52680: ARRAY
52681: ST_TO_ADDR
52682: GO 53049
52684: LD_INT 6
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52740
52690: LD_INT 7
52692: DOUBLE
52693: EQUAL
52694: IFTRUE 52740
52696: LD_INT 8
52698: DOUBLE
52699: EQUAL
52700: IFTRUE 52740
52702: LD_INT 13
52704: DOUBLE
52705: EQUAL
52706: IFTRUE 52740
52708: LD_INT 12
52710: DOUBLE
52711: EQUAL
52712: IFTRUE 52740
52714: LD_INT 15
52716: DOUBLE
52717: EQUAL
52718: IFTRUE 52740
52720: LD_INT 11
52722: DOUBLE
52723: EQUAL
52724: IFTRUE 52740
52726: LD_INT 14
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52740
52732: LD_INT 10
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52740
52738: GO 52796
52740: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52741: LD_ADDR_VAR 0 9
52745: PUSH
52746: LD_VAR 0 41
52750: PUSH
52751: LD_VAR 0 42
52755: PUSH
52756: LD_VAR 0 43
52760: PUSH
52761: LD_VAR 0 44
52765: PUSH
52766: LD_VAR 0 45
52770: PUSH
52771: LD_VAR 0 46
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: PUSH
52784: LD_VAR 0 4
52788: PUSH
52789: LD_INT 1
52791: PLUS
52792: ARRAY
52793: ST_TO_ADDR
52794: GO 53049
52796: LD_INT 36
52798: DOUBLE
52799: EQUAL
52800: IFTRUE 52804
52802: GO 52860
52804: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52805: LD_ADDR_VAR 0 9
52809: PUSH
52810: LD_VAR 0 47
52814: PUSH
52815: LD_VAR 0 48
52819: PUSH
52820: LD_VAR 0 49
52824: PUSH
52825: LD_VAR 0 50
52829: PUSH
52830: LD_VAR 0 51
52834: PUSH
52835: LD_VAR 0 52
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: PUSH
52848: LD_VAR 0 4
52852: PUSH
52853: LD_INT 1
52855: PLUS
52856: ARRAY
52857: ST_TO_ADDR
52858: GO 53049
52860: LD_INT 4
52862: DOUBLE
52863: EQUAL
52864: IFTRUE 52886
52866: LD_INT 5
52868: DOUBLE
52869: EQUAL
52870: IFTRUE 52886
52872: LD_INT 34
52874: DOUBLE
52875: EQUAL
52876: IFTRUE 52886
52878: LD_INT 37
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52886
52884: GO 52942
52886: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52887: LD_ADDR_VAR 0 9
52891: PUSH
52892: LD_VAR 0 53
52896: PUSH
52897: LD_VAR 0 54
52901: PUSH
52902: LD_VAR 0 55
52906: PUSH
52907: LD_VAR 0 56
52911: PUSH
52912: LD_VAR 0 57
52916: PUSH
52917: LD_VAR 0 58
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: PUSH
52930: LD_VAR 0 4
52934: PUSH
52935: LD_INT 1
52937: PLUS
52938: ARRAY
52939: ST_TO_ADDR
52940: GO 53049
52942: LD_INT 31
52944: DOUBLE
52945: EQUAL
52946: IFTRUE 52992
52948: LD_INT 32
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52992
52954: LD_INT 33
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52992
52960: LD_INT 27
52962: DOUBLE
52963: EQUAL
52964: IFTRUE 52992
52966: LD_INT 26
52968: DOUBLE
52969: EQUAL
52970: IFTRUE 52992
52972: LD_INT 28
52974: DOUBLE
52975: EQUAL
52976: IFTRUE 52992
52978: LD_INT 29
52980: DOUBLE
52981: EQUAL
52982: IFTRUE 52992
52984: LD_INT 30
52986: DOUBLE
52987: EQUAL
52988: IFTRUE 52992
52990: GO 53048
52992: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52993: LD_ADDR_VAR 0 9
52997: PUSH
52998: LD_VAR 0 59
53002: PUSH
53003: LD_VAR 0 60
53007: PUSH
53008: LD_VAR 0 61
53012: PUSH
53013: LD_VAR 0 62
53017: PUSH
53018: LD_VAR 0 63
53022: PUSH
53023: LD_VAR 0 64
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: PUSH
53036: LD_VAR 0 4
53040: PUSH
53041: LD_INT 1
53043: PLUS
53044: ARRAY
53045: ST_TO_ADDR
53046: GO 53049
53048: POP
// temp_list2 = [ ] ;
53049: LD_ADDR_VAR 0 10
53053: PUSH
53054: EMPTY
53055: ST_TO_ADDR
// for i in temp_list do
53056: LD_ADDR_VAR 0 8
53060: PUSH
53061: LD_VAR 0 9
53065: PUSH
53066: FOR_IN
53067: IFFALSE 53119
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53069: LD_ADDR_VAR 0 10
53073: PUSH
53074: LD_VAR 0 10
53078: PUSH
53079: LD_VAR 0 8
53083: PUSH
53084: LD_INT 1
53086: ARRAY
53087: PUSH
53088: LD_VAR 0 2
53092: PLUS
53093: PUSH
53094: LD_VAR 0 8
53098: PUSH
53099: LD_INT 2
53101: ARRAY
53102: PUSH
53103: LD_VAR 0 3
53107: PLUS
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: ADD
53116: ST_TO_ADDR
53117: GO 53066
53119: POP
53120: POP
// result = temp_list2 ;
53121: LD_ADDR_VAR 0 7
53125: PUSH
53126: LD_VAR 0 10
53130: ST_TO_ADDR
// end ;
53131: LD_VAR 0 7
53135: RET
// export function EnemyInRange ( unit , dist ) ; begin
53136: LD_INT 0
53138: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53139: LD_ADDR_VAR 0 3
53143: PUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 255
53153: PPUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: CALL_OW 250
53163: PPUSH
53164: LD_VAR 0 1
53168: PPUSH
53169: CALL_OW 251
53173: PPUSH
53174: LD_VAR 0 2
53178: PPUSH
53179: CALL 27240 0 4
53183: PUSH
53184: LD_INT 4
53186: ARRAY
53187: ST_TO_ADDR
// end ;
53188: LD_VAR 0 3
53192: RET
// export function PlayerSeeMe ( unit ) ; begin
53193: LD_INT 0
53195: PPUSH
// result := See ( your_side , unit ) ;
53196: LD_ADDR_VAR 0 2
53200: PUSH
53201: LD_OWVAR 2
53205: PPUSH
53206: LD_VAR 0 1
53210: PPUSH
53211: CALL_OW 292
53215: ST_TO_ADDR
// end ;
53216: LD_VAR 0 2
53220: RET
// export function ReverseDir ( unit ) ; begin
53221: LD_INT 0
53223: PPUSH
// if not unit then
53224: LD_VAR 0 1
53228: NOT
53229: IFFALSE 53233
// exit ;
53231: GO 53256
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53233: LD_ADDR_VAR 0 2
53237: PUSH
53238: LD_VAR 0 1
53242: PPUSH
53243: CALL_OW 254
53247: PUSH
53248: LD_INT 3
53250: PLUS
53251: PUSH
53252: LD_INT 6
53254: MOD
53255: ST_TO_ADDR
// end ;
53256: LD_VAR 0 2
53260: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53261: LD_INT 0
53263: PPUSH
53264: PPUSH
53265: PPUSH
53266: PPUSH
53267: PPUSH
// if not hexes then
53268: LD_VAR 0 2
53272: NOT
53273: IFFALSE 53277
// exit ;
53275: GO 53425
// dist := 9999 ;
53277: LD_ADDR_VAR 0 5
53281: PUSH
53282: LD_INT 9999
53284: ST_TO_ADDR
// for i = 1 to hexes do
53285: LD_ADDR_VAR 0 4
53289: PUSH
53290: DOUBLE
53291: LD_INT 1
53293: DEC
53294: ST_TO_ADDR
53295: LD_VAR 0 2
53299: PUSH
53300: FOR_TO
53301: IFFALSE 53413
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53303: LD_VAR 0 1
53307: PPUSH
53308: LD_VAR 0 2
53312: PUSH
53313: LD_VAR 0 4
53317: ARRAY
53318: PUSH
53319: LD_INT 1
53321: ARRAY
53322: PPUSH
53323: LD_VAR 0 2
53327: PUSH
53328: LD_VAR 0 4
53332: ARRAY
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PPUSH
53338: CALL_OW 297
53342: PUSH
53343: LD_VAR 0 5
53347: LESS
53348: IFFALSE 53411
// begin hex := hexes [ i ] ;
53350: LD_ADDR_VAR 0 7
53354: PUSH
53355: LD_VAR 0 2
53359: PUSH
53360: LD_VAR 0 4
53364: ARRAY
53365: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53366: LD_ADDR_VAR 0 5
53370: PUSH
53371: LD_VAR 0 1
53375: PPUSH
53376: LD_VAR 0 2
53380: PUSH
53381: LD_VAR 0 4
53385: ARRAY
53386: PUSH
53387: LD_INT 1
53389: ARRAY
53390: PPUSH
53391: LD_VAR 0 2
53395: PUSH
53396: LD_VAR 0 4
53400: ARRAY
53401: PUSH
53402: LD_INT 2
53404: ARRAY
53405: PPUSH
53406: CALL_OW 297
53410: ST_TO_ADDR
// end ; end ;
53411: GO 53300
53413: POP
53414: POP
// result := hex ;
53415: LD_ADDR_VAR 0 3
53419: PUSH
53420: LD_VAR 0 7
53424: ST_TO_ADDR
// end ;
53425: LD_VAR 0 3
53429: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53430: LD_INT 0
53432: PPUSH
53433: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53434: LD_VAR 0 1
53438: NOT
53439: PUSH
53440: LD_VAR 0 1
53444: PUSH
53445: LD_INT 21
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 23
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PPUSH
53469: CALL_OW 69
53473: IN
53474: NOT
53475: OR
53476: IFFALSE 53480
// exit ;
53478: GO 53527
// for i = 1 to 3 do
53480: LD_ADDR_VAR 0 3
53484: PUSH
53485: DOUBLE
53486: LD_INT 1
53488: DEC
53489: ST_TO_ADDR
53490: LD_INT 3
53492: PUSH
53493: FOR_TO
53494: IFFALSE 53525
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 250
53505: PPUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 251
53515: PPUSH
53516: LD_INT 1
53518: PPUSH
53519: CALL_OW 453
53523: GO 53493
53525: POP
53526: POP
// end ;
53527: LD_VAR 0 2
53531: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53532: LD_INT 0
53534: PPUSH
53535: PPUSH
53536: PPUSH
53537: PPUSH
53538: PPUSH
53539: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53540: LD_VAR 0 1
53544: NOT
53545: PUSH
53546: LD_VAR 0 2
53550: NOT
53551: OR
53552: PUSH
53553: LD_VAR 0 1
53557: PPUSH
53558: CALL_OW 314
53562: OR
53563: IFFALSE 53567
// exit ;
53565: GO 54008
// x := GetX ( enemy_unit ) ;
53567: LD_ADDR_VAR 0 7
53571: PUSH
53572: LD_VAR 0 2
53576: PPUSH
53577: CALL_OW 250
53581: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53582: LD_ADDR_VAR 0 8
53586: PUSH
53587: LD_VAR 0 2
53591: PPUSH
53592: CALL_OW 251
53596: ST_TO_ADDR
// if not x or not y then
53597: LD_VAR 0 7
53601: NOT
53602: PUSH
53603: LD_VAR 0 8
53607: NOT
53608: OR
53609: IFFALSE 53613
// exit ;
53611: GO 54008
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53613: LD_ADDR_VAR 0 6
53617: PUSH
53618: LD_VAR 0 7
53622: PPUSH
53623: LD_INT 0
53625: PPUSH
53626: LD_INT 4
53628: PPUSH
53629: CALL_OW 272
53633: PUSH
53634: LD_VAR 0 8
53638: PPUSH
53639: LD_INT 0
53641: PPUSH
53642: LD_INT 4
53644: PPUSH
53645: CALL_OW 273
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_VAR 0 7
53658: PPUSH
53659: LD_INT 1
53661: PPUSH
53662: LD_INT 4
53664: PPUSH
53665: CALL_OW 272
53669: PUSH
53670: LD_VAR 0 8
53674: PPUSH
53675: LD_INT 1
53677: PPUSH
53678: LD_INT 4
53680: PPUSH
53681: CALL_OW 273
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_VAR 0 7
53694: PPUSH
53695: LD_INT 2
53697: PPUSH
53698: LD_INT 4
53700: PPUSH
53701: CALL_OW 272
53705: PUSH
53706: LD_VAR 0 8
53710: PPUSH
53711: LD_INT 2
53713: PPUSH
53714: LD_INT 4
53716: PPUSH
53717: CALL_OW 273
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_VAR 0 7
53730: PPUSH
53731: LD_INT 3
53733: PPUSH
53734: LD_INT 4
53736: PPUSH
53737: CALL_OW 272
53741: PUSH
53742: LD_VAR 0 8
53746: PPUSH
53747: LD_INT 3
53749: PPUSH
53750: LD_INT 4
53752: PPUSH
53753: CALL_OW 273
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_VAR 0 7
53766: PPUSH
53767: LD_INT 4
53769: PPUSH
53770: LD_INT 4
53772: PPUSH
53773: CALL_OW 272
53777: PUSH
53778: LD_VAR 0 8
53782: PPUSH
53783: LD_INT 4
53785: PPUSH
53786: LD_INT 4
53788: PPUSH
53789: CALL_OW 273
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_VAR 0 7
53802: PPUSH
53803: LD_INT 5
53805: PPUSH
53806: LD_INT 4
53808: PPUSH
53809: CALL_OW 272
53813: PUSH
53814: LD_VAR 0 8
53818: PPUSH
53819: LD_INT 5
53821: PPUSH
53822: LD_INT 4
53824: PPUSH
53825: CALL_OW 273
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
// for i = tmp downto 1 do
53842: LD_ADDR_VAR 0 4
53846: PUSH
53847: DOUBLE
53848: LD_VAR 0 6
53852: INC
53853: ST_TO_ADDR
53854: LD_INT 1
53856: PUSH
53857: FOR_DOWNTO
53858: IFFALSE 53959
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53860: LD_VAR 0 6
53864: PUSH
53865: LD_VAR 0 4
53869: ARRAY
53870: PUSH
53871: LD_INT 1
53873: ARRAY
53874: PPUSH
53875: LD_VAR 0 6
53879: PUSH
53880: LD_VAR 0 4
53884: ARRAY
53885: PUSH
53886: LD_INT 2
53888: ARRAY
53889: PPUSH
53890: CALL_OW 488
53894: NOT
53895: PUSH
53896: LD_VAR 0 6
53900: PUSH
53901: LD_VAR 0 4
53905: ARRAY
53906: PUSH
53907: LD_INT 1
53909: ARRAY
53910: PPUSH
53911: LD_VAR 0 6
53915: PUSH
53916: LD_VAR 0 4
53920: ARRAY
53921: PUSH
53922: LD_INT 2
53924: ARRAY
53925: PPUSH
53926: CALL_OW 428
53930: PUSH
53931: LD_INT 0
53933: NONEQUAL
53934: OR
53935: IFFALSE 53957
// tmp := Delete ( tmp , i ) ;
53937: LD_ADDR_VAR 0 6
53941: PUSH
53942: LD_VAR 0 6
53946: PPUSH
53947: LD_VAR 0 4
53951: PPUSH
53952: CALL_OW 3
53956: ST_TO_ADDR
53957: GO 53857
53959: POP
53960: POP
// j := GetClosestHex ( unit , tmp ) ;
53961: LD_ADDR_VAR 0 5
53965: PUSH
53966: LD_VAR 0 1
53970: PPUSH
53971: LD_VAR 0 6
53975: PPUSH
53976: CALL 53261 0 2
53980: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53981: LD_VAR 0 1
53985: PPUSH
53986: LD_VAR 0 5
53990: PUSH
53991: LD_INT 1
53993: ARRAY
53994: PPUSH
53995: LD_VAR 0 5
53999: PUSH
54000: LD_INT 2
54002: ARRAY
54003: PPUSH
54004: CALL_OW 111
// end ;
54008: LD_VAR 0 3
54012: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54013: LD_INT 0
54015: PPUSH
54016: PPUSH
54017: PPUSH
// uc_side = 0 ;
54018: LD_ADDR_OWVAR 20
54022: PUSH
54023: LD_INT 0
54025: ST_TO_ADDR
// uc_nation = 0 ;
54026: LD_ADDR_OWVAR 21
54030: PUSH
54031: LD_INT 0
54033: ST_TO_ADDR
// InitHc ;
54034: CALL_OW 19
// InitVc ;
54038: CALL_OW 20
// if mastodonts then
54042: LD_VAR 0 6
54046: IFFALSE 54113
// for i = 1 to mastodonts do
54048: LD_ADDR_VAR 0 11
54052: PUSH
54053: DOUBLE
54054: LD_INT 1
54056: DEC
54057: ST_TO_ADDR
54058: LD_VAR 0 6
54062: PUSH
54063: FOR_TO
54064: IFFALSE 54111
// begin vc_chassis := 31 ;
54066: LD_ADDR_OWVAR 37
54070: PUSH
54071: LD_INT 31
54073: ST_TO_ADDR
// vc_control := control_rider ;
54074: LD_ADDR_OWVAR 38
54078: PUSH
54079: LD_INT 4
54081: ST_TO_ADDR
// animal := CreateVehicle ;
54082: LD_ADDR_VAR 0 12
54086: PUSH
54087: CALL_OW 45
54091: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54092: LD_VAR 0 12
54096: PPUSH
54097: LD_VAR 0 8
54101: PPUSH
54102: LD_INT 0
54104: PPUSH
54105: CALL 56182 0 3
// end ;
54109: GO 54063
54111: POP
54112: POP
// if horses then
54113: LD_VAR 0 5
54117: IFFALSE 54184
// for i = 1 to horses do
54119: LD_ADDR_VAR 0 11
54123: PUSH
54124: DOUBLE
54125: LD_INT 1
54127: DEC
54128: ST_TO_ADDR
54129: LD_VAR 0 5
54133: PUSH
54134: FOR_TO
54135: IFFALSE 54182
// begin hc_class := 21 ;
54137: LD_ADDR_OWVAR 28
54141: PUSH
54142: LD_INT 21
54144: ST_TO_ADDR
// hc_gallery :=  ;
54145: LD_ADDR_OWVAR 33
54149: PUSH
54150: LD_STRING 
54152: ST_TO_ADDR
// animal := CreateHuman ;
54153: LD_ADDR_VAR 0 12
54157: PUSH
54158: CALL_OW 44
54162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54163: LD_VAR 0 12
54167: PPUSH
54168: LD_VAR 0 8
54172: PPUSH
54173: LD_INT 0
54175: PPUSH
54176: CALL 56182 0 3
// end ;
54180: GO 54134
54182: POP
54183: POP
// if birds then
54184: LD_VAR 0 1
54188: IFFALSE 54255
// for i = 1 to birds do
54190: LD_ADDR_VAR 0 11
54194: PUSH
54195: DOUBLE
54196: LD_INT 1
54198: DEC
54199: ST_TO_ADDR
54200: LD_VAR 0 1
54204: PUSH
54205: FOR_TO
54206: IFFALSE 54253
// begin hc_class = 18 ;
54208: LD_ADDR_OWVAR 28
54212: PUSH
54213: LD_INT 18
54215: ST_TO_ADDR
// hc_gallery =  ;
54216: LD_ADDR_OWVAR 33
54220: PUSH
54221: LD_STRING 
54223: ST_TO_ADDR
// animal := CreateHuman ;
54224: LD_ADDR_VAR 0 12
54228: PUSH
54229: CALL_OW 44
54233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54234: LD_VAR 0 12
54238: PPUSH
54239: LD_VAR 0 8
54243: PPUSH
54244: LD_INT 0
54246: PPUSH
54247: CALL 56182 0 3
// end ;
54251: GO 54205
54253: POP
54254: POP
// if tigers then
54255: LD_VAR 0 2
54259: IFFALSE 54343
// for i = 1 to tigers do
54261: LD_ADDR_VAR 0 11
54265: PUSH
54266: DOUBLE
54267: LD_INT 1
54269: DEC
54270: ST_TO_ADDR
54271: LD_VAR 0 2
54275: PUSH
54276: FOR_TO
54277: IFFALSE 54341
// begin hc_class = class_tiger ;
54279: LD_ADDR_OWVAR 28
54283: PUSH
54284: LD_INT 14
54286: ST_TO_ADDR
// hc_gallery =  ;
54287: LD_ADDR_OWVAR 33
54291: PUSH
54292: LD_STRING 
54294: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54295: LD_ADDR_OWVAR 35
54299: PUSH
54300: LD_INT 7
54302: NEG
54303: PPUSH
54304: LD_INT 7
54306: PPUSH
54307: CALL_OW 12
54311: ST_TO_ADDR
// animal := CreateHuman ;
54312: LD_ADDR_VAR 0 12
54316: PUSH
54317: CALL_OW 44
54321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54322: LD_VAR 0 12
54326: PPUSH
54327: LD_VAR 0 8
54331: PPUSH
54332: LD_INT 0
54334: PPUSH
54335: CALL 56182 0 3
// end ;
54339: GO 54276
54341: POP
54342: POP
// if apemans then
54343: LD_VAR 0 3
54347: IFFALSE 54470
// for i = 1 to apemans do
54349: LD_ADDR_VAR 0 11
54353: PUSH
54354: DOUBLE
54355: LD_INT 1
54357: DEC
54358: ST_TO_ADDR
54359: LD_VAR 0 3
54363: PUSH
54364: FOR_TO
54365: IFFALSE 54468
// begin hc_class = class_apeman ;
54367: LD_ADDR_OWVAR 28
54371: PUSH
54372: LD_INT 12
54374: ST_TO_ADDR
// hc_gallery =  ;
54375: LD_ADDR_OWVAR 33
54379: PUSH
54380: LD_STRING 
54382: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54383: LD_ADDR_OWVAR 35
54387: PUSH
54388: LD_INT 5
54390: NEG
54391: PPUSH
54392: LD_INT 5
54394: PPUSH
54395: CALL_OW 12
54399: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54400: LD_ADDR_OWVAR 31
54404: PUSH
54405: LD_INT 1
54407: PPUSH
54408: LD_INT 3
54410: PPUSH
54411: CALL_OW 12
54415: PUSH
54416: LD_INT 1
54418: PPUSH
54419: LD_INT 3
54421: PPUSH
54422: CALL_OW 12
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// animal := CreateHuman ;
54439: LD_ADDR_VAR 0 12
54443: PUSH
54444: CALL_OW 44
54448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54449: LD_VAR 0 12
54453: PPUSH
54454: LD_VAR 0 8
54458: PPUSH
54459: LD_INT 0
54461: PPUSH
54462: CALL 56182 0 3
// end ;
54466: GO 54364
54468: POP
54469: POP
// if enchidnas then
54470: LD_VAR 0 4
54474: IFFALSE 54541
// for i = 1 to enchidnas do
54476: LD_ADDR_VAR 0 11
54480: PUSH
54481: DOUBLE
54482: LD_INT 1
54484: DEC
54485: ST_TO_ADDR
54486: LD_VAR 0 4
54490: PUSH
54491: FOR_TO
54492: IFFALSE 54539
// begin hc_class = 13 ;
54494: LD_ADDR_OWVAR 28
54498: PUSH
54499: LD_INT 13
54501: ST_TO_ADDR
// hc_gallery =  ;
54502: LD_ADDR_OWVAR 33
54506: PUSH
54507: LD_STRING 
54509: ST_TO_ADDR
// animal := CreateHuman ;
54510: LD_ADDR_VAR 0 12
54514: PUSH
54515: CALL_OW 44
54519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54520: LD_VAR 0 12
54524: PPUSH
54525: LD_VAR 0 8
54529: PPUSH
54530: LD_INT 0
54532: PPUSH
54533: CALL 56182 0 3
// end ;
54537: GO 54491
54539: POP
54540: POP
// if fishes then
54541: LD_VAR 0 7
54545: IFFALSE 54612
// for i = 1 to fishes do
54547: LD_ADDR_VAR 0 11
54551: PUSH
54552: DOUBLE
54553: LD_INT 1
54555: DEC
54556: ST_TO_ADDR
54557: LD_VAR 0 7
54561: PUSH
54562: FOR_TO
54563: IFFALSE 54610
// begin hc_class = 20 ;
54565: LD_ADDR_OWVAR 28
54569: PUSH
54570: LD_INT 20
54572: ST_TO_ADDR
// hc_gallery =  ;
54573: LD_ADDR_OWVAR 33
54577: PUSH
54578: LD_STRING 
54580: ST_TO_ADDR
// animal := CreateHuman ;
54581: LD_ADDR_VAR 0 12
54585: PUSH
54586: CALL_OW 44
54590: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54591: LD_VAR 0 12
54595: PPUSH
54596: LD_VAR 0 9
54600: PPUSH
54601: LD_INT 0
54603: PPUSH
54604: CALL 56182 0 3
// end ;
54608: GO 54562
54610: POP
54611: POP
// end ;
54612: LD_VAR 0 10
54616: RET
// export function WantHeal ( sci , unit ) ; begin
54617: LD_INT 0
54619: PPUSH
// if GetTaskList ( sci ) > 0 then
54620: LD_VAR 0 1
54624: PPUSH
54625: CALL_OW 437
54629: PUSH
54630: LD_INT 0
54632: GREATER
54633: IFFALSE 54703
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54635: LD_VAR 0 1
54639: PPUSH
54640: CALL_OW 437
54644: PUSH
54645: LD_INT 1
54647: ARRAY
54648: PUSH
54649: LD_INT 1
54651: ARRAY
54652: PUSH
54653: LD_STRING l
54655: EQUAL
54656: PUSH
54657: LD_VAR 0 1
54661: PPUSH
54662: CALL_OW 437
54666: PUSH
54667: LD_INT 1
54669: ARRAY
54670: PUSH
54671: LD_INT 4
54673: ARRAY
54674: PUSH
54675: LD_VAR 0 2
54679: EQUAL
54680: AND
54681: IFFALSE 54693
// result := true else
54683: LD_ADDR_VAR 0 3
54687: PUSH
54688: LD_INT 1
54690: ST_TO_ADDR
54691: GO 54701
// result := false ;
54693: LD_ADDR_VAR 0 3
54697: PUSH
54698: LD_INT 0
54700: ST_TO_ADDR
// end else
54701: GO 54711
// result := false ;
54703: LD_ADDR_VAR 0 3
54707: PUSH
54708: LD_INT 0
54710: ST_TO_ADDR
// end ;
54711: LD_VAR 0 3
54715: RET
// export function HealTarget ( sci ) ; begin
54716: LD_INT 0
54718: PPUSH
// if not sci then
54719: LD_VAR 0 1
54723: NOT
54724: IFFALSE 54728
// exit ;
54726: GO 54793
// result := 0 ;
54728: LD_ADDR_VAR 0 2
54732: PUSH
54733: LD_INT 0
54735: ST_TO_ADDR
// if GetTaskList ( sci ) then
54736: LD_VAR 0 1
54740: PPUSH
54741: CALL_OW 437
54745: IFFALSE 54793
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54747: LD_VAR 0 1
54751: PPUSH
54752: CALL_OW 437
54756: PUSH
54757: LD_INT 1
54759: ARRAY
54760: PUSH
54761: LD_INT 1
54763: ARRAY
54764: PUSH
54765: LD_STRING l
54767: EQUAL
54768: IFFALSE 54793
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54770: LD_ADDR_VAR 0 2
54774: PUSH
54775: LD_VAR 0 1
54779: PPUSH
54780: CALL_OW 437
54784: PUSH
54785: LD_INT 1
54787: ARRAY
54788: PUSH
54789: LD_INT 4
54791: ARRAY
54792: ST_TO_ADDR
// end ;
54793: LD_VAR 0 2
54797: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54798: LD_INT 0
54800: PPUSH
54801: PPUSH
54802: PPUSH
54803: PPUSH
// if not base_units then
54804: LD_VAR 0 1
54808: NOT
54809: IFFALSE 54813
// exit ;
54811: GO 54900
// result := false ;
54813: LD_ADDR_VAR 0 2
54817: PUSH
54818: LD_INT 0
54820: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54821: LD_ADDR_VAR 0 5
54825: PUSH
54826: LD_VAR 0 1
54830: PPUSH
54831: LD_INT 21
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PPUSH
54841: CALL_OW 72
54845: ST_TO_ADDR
// if not tmp then
54846: LD_VAR 0 5
54850: NOT
54851: IFFALSE 54855
// exit ;
54853: GO 54900
// for i in tmp do
54855: LD_ADDR_VAR 0 3
54859: PUSH
54860: LD_VAR 0 5
54864: PUSH
54865: FOR_IN
54866: IFFALSE 54898
// begin result := EnemyInRange ( i , 22 ) ;
54868: LD_ADDR_VAR 0 2
54872: PUSH
54873: LD_VAR 0 3
54877: PPUSH
54878: LD_INT 22
54880: PPUSH
54881: CALL 53136 0 2
54885: ST_TO_ADDR
// if result then
54886: LD_VAR 0 2
54890: IFFALSE 54896
// exit ;
54892: POP
54893: POP
54894: GO 54900
// end ;
54896: GO 54865
54898: POP
54899: POP
// end ;
54900: LD_VAR 0 2
54904: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54905: LD_INT 0
54907: PPUSH
54908: PPUSH
// if not units then
54909: LD_VAR 0 1
54913: NOT
54914: IFFALSE 54918
// exit ;
54916: GO 54988
// result := [ ] ;
54918: LD_ADDR_VAR 0 3
54922: PUSH
54923: EMPTY
54924: ST_TO_ADDR
// for i in units do
54925: LD_ADDR_VAR 0 4
54929: PUSH
54930: LD_VAR 0 1
54934: PUSH
54935: FOR_IN
54936: IFFALSE 54986
// if GetTag ( i ) = tag then
54938: LD_VAR 0 4
54942: PPUSH
54943: CALL_OW 110
54947: PUSH
54948: LD_VAR 0 2
54952: EQUAL
54953: IFFALSE 54984
// result := Insert ( result , result + 1 , i ) ;
54955: LD_ADDR_VAR 0 3
54959: PUSH
54960: LD_VAR 0 3
54964: PPUSH
54965: LD_VAR 0 3
54969: PUSH
54970: LD_INT 1
54972: PLUS
54973: PPUSH
54974: LD_VAR 0 4
54978: PPUSH
54979: CALL_OW 2
54983: ST_TO_ADDR
54984: GO 54935
54986: POP
54987: POP
// end ;
54988: LD_VAR 0 3
54992: RET
// export function IsDriver ( un ) ; begin
54993: LD_INT 0
54995: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54996: LD_ADDR_VAR 0 2
55000: PUSH
55001: LD_VAR 0 1
55005: PUSH
55006: LD_INT 55
55008: PUSH
55009: EMPTY
55010: LIST
55011: PPUSH
55012: CALL_OW 69
55016: IN
55017: ST_TO_ADDR
// end ;
55018: LD_VAR 0 2
55022: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55023: LD_INT 0
55025: PPUSH
55026: PPUSH
// list := [ ] ;
55027: LD_ADDR_VAR 0 5
55031: PUSH
55032: EMPTY
55033: ST_TO_ADDR
// case d of 0 :
55034: LD_VAR 0 3
55038: PUSH
55039: LD_INT 0
55041: DOUBLE
55042: EQUAL
55043: IFTRUE 55047
55045: GO 55180
55047: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55048: LD_ADDR_VAR 0 5
55052: PUSH
55053: LD_VAR 0 1
55057: PUSH
55058: LD_INT 4
55060: MINUS
55061: PUSH
55062: LD_VAR 0 2
55066: PUSH
55067: LD_INT 4
55069: MINUS
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: PUSH
55079: LD_VAR 0 1
55083: PUSH
55084: LD_INT 3
55086: MINUS
55087: PUSH
55088: LD_VAR 0 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: PUSH
55101: LD_VAR 0 1
55105: PUSH
55106: LD_INT 4
55108: PLUS
55109: PUSH
55110: LD_VAR 0 2
55114: PUSH
55115: LD_INT 4
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: PUSH
55123: LD_VAR 0 1
55127: PUSH
55128: LD_INT 3
55130: PLUS
55131: PUSH
55132: LD_VAR 0 2
55136: PUSH
55137: LD_INT 3
55139: PLUS
55140: PUSH
55141: LD_INT 5
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: PUSH
55149: LD_VAR 0 1
55153: PUSH
55154: LD_VAR 0 2
55158: PUSH
55159: LD_INT 4
55161: PLUS
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// end ; 1 :
55178: GO 55878
55180: LD_INT 1
55182: DOUBLE
55183: EQUAL
55184: IFTRUE 55188
55186: GO 55321
55188: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55189: LD_ADDR_VAR 0 5
55193: PUSH
55194: LD_VAR 0 1
55198: PUSH
55199: LD_VAR 0 2
55203: PUSH
55204: LD_INT 4
55206: MINUS
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: PUSH
55216: LD_VAR 0 1
55220: PUSH
55221: LD_INT 3
55223: MINUS
55224: PUSH
55225: LD_VAR 0 2
55229: PUSH
55230: LD_INT 3
55232: MINUS
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: PUSH
55242: LD_VAR 0 1
55246: PUSH
55247: LD_INT 4
55249: MINUS
55250: PUSH
55251: LD_VAR 0 2
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: PUSH
55264: LD_VAR 0 1
55268: PUSH
55269: LD_VAR 0 2
55273: PUSH
55274: LD_INT 3
55276: PLUS
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_INT 4
55293: PLUS
55294: PUSH
55295: LD_VAR 0 2
55299: PUSH
55300: LD_INT 4
55302: PLUS
55303: PUSH
55304: LD_INT 5
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: ST_TO_ADDR
// end ; 2 :
55319: GO 55878
55321: LD_INT 2
55323: DOUBLE
55324: EQUAL
55325: IFTRUE 55329
55327: GO 55458
55329: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55330: LD_ADDR_VAR 0 5
55334: PUSH
55335: LD_VAR 0 1
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: LD_INT 3
55347: MINUS
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: PUSH
55357: LD_VAR 0 1
55361: PUSH
55362: LD_INT 4
55364: PLUS
55365: PUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_INT 4
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: PUSH
55379: LD_VAR 0 1
55383: PUSH
55384: LD_VAR 0 2
55388: PUSH
55389: LD_INT 4
55391: PLUS
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: LIST
55400: PUSH
55401: LD_VAR 0 1
55405: PUSH
55406: LD_INT 3
55408: MINUS
55409: PUSH
55410: LD_VAR 0 2
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: LD_VAR 0 1
55427: PUSH
55428: LD_INT 4
55430: MINUS
55431: PUSH
55432: LD_VAR 0 2
55436: PUSH
55437: LD_INT 4
55439: MINUS
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// end ; 3 :
55456: GO 55878
55458: LD_INT 3
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55466
55464: GO 55599
55466: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55467: LD_ADDR_VAR 0 5
55471: PUSH
55472: LD_VAR 0 1
55476: PUSH
55477: LD_INT 3
55479: PLUS
55480: PUSH
55481: LD_VAR 0 2
55485: PUSH
55486: LD_INT 4
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: PUSH
55494: LD_VAR 0 1
55498: PUSH
55499: LD_INT 4
55501: PLUS
55502: PUSH
55503: LD_VAR 0 2
55507: PUSH
55508: LD_INT 4
55510: PLUS
55511: PUSH
55512: LD_INT 5
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: PUSH
55520: LD_VAR 0 1
55524: PUSH
55525: LD_INT 4
55527: MINUS
55528: PUSH
55529: LD_VAR 0 2
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: PUSH
55542: LD_VAR 0 1
55546: PUSH
55547: LD_VAR 0 2
55551: PUSH
55552: LD_INT 4
55554: MINUS
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: PUSH
55564: LD_VAR 0 1
55568: PUSH
55569: LD_INT 3
55571: MINUS
55572: PUSH
55573: LD_VAR 0 2
55577: PUSH
55578: LD_INT 3
55580: MINUS
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// end ; 4 :
55597: GO 55878
55599: LD_INT 4
55601: DOUBLE
55602: EQUAL
55603: IFTRUE 55607
55605: GO 55740
55607: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55608: LD_ADDR_VAR 0 5
55612: PUSH
55613: LD_VAR 0 1
55617: PUSH
55618: LD_VAR 0 2
55622: PUSH
55623: LD_INT 4
55625: PLUS
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: PUSH
55635: LD_VAR 0 1
55639: PUSH
55640: LD_INT 3
55642: PLUS
55643: PUSH
55644: LD_VAR 0 2
55648: PUSH
55649: LD_INT 3
55651: PLUS
55652: PUSH
55653: LD_INT 5
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: PUSH
55661: LD_VAR 0 1
55665: PUSH
55666: LD_INT 4
55668: PLUS
55669: PUSH
55670: LD_VAR 0 2
55674: PUSH
55675: LD_INT 4
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: PUSH
55683: LD_VAR 0 1
55687: PUSH
55688: LD_VAR 0 2
55692: PUSH
55693: LD_INT 3
55695: MINUS
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: PUSH
55705: LD_VAR 0 1
55709: PUSH
55710: LD_INT 4
55712: MINUS
55713: PUSH
55714: LD_VAR 0 2
55718: PUSH
55719: LD_INT 4
55721: MINUS
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: ST_TO_ADDR
// end ; 5 :
55738: GO 55878
55740: LD_INT 5
55742: DOUBLE
55743: EQUAL
55744: IFTRUE 55748
55746: GO 55877
55748: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55749: LD_ADDR_VAR 0 5
55753: PUSH
55754: LD_VAR 0 1
55758: PUSH
55759: LD_INT 4
55761: MINUS
55762: PUSH
55763: LD_VAR 0 2
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: PUSH
55776: LD_VAR 0 1
55780: PUSH
55781: LD_VAR 0 2
55785: PUSH
55786: LD_INT 4
55788: MINUS
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: PUSH
55798: LD_VAR 0 1
55802: PUSH
55803: LD_INT 4
55805: PLUS
55806: PUSH
55807: LD_VAR 0 2
55811: PUSH
55812: LD_INT 4
55814: PLUS
55815: PUSH
55816: LD_INT 5
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: LIST
55823: PUSH
55824: LD_VAR 0 1
55828: PUSH
55829: LD_INT 3
55831: PLUS
55832: PUSH
55833: LD_VAR 0 2
55837: PUSH
55838: LD_INT 4
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_VAR 0 2
55855: PUSH
55856: LD_INT 3
55858: PLUS
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// end ; end ;
55875: GO 55878
55877: POP
// result := list ;
55878: LD_ADDR_VAR 0 4
55882: PUSH
55883: LD_VAR 0 5
55887: ST_TO_ADDR
// end ;
55888: LD_VAR 0 4
55892: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55893: LD_INT 0
55895: PPUSH
55896: PPUSH
55897: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55898: LD_VAR 0 1
55902: NOT
55903: PUSH
55904: LD_VAR 0 2
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: LD_INT 4
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: IN
55927: NOT
55928: OR
55929: IFFALSE 55933
// exit ;
55931: GO 56025
// tmp := [ ] ;
55933: LD_ADDR_VAR 0 5
55937: PUSH
55938: EMPTY
55939: ST_TO_ADDR
// for i in units do
55940: LD_ADDR_VAR 0 4
55944: PUSH
55945: LD_VAR 0 1
55949: PUSH
55950: FOR_IN
55951: IFFALSE 55994
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55953: LD_ADDR_VAR 0 5
55957: PUSH
55958: LD_VAR 0 5
55962: PPUSH
55963: LD_VAR 0 5
55967: PUSH
55968: LD_INT 1
55970: PLUS
55971: PPUSH
55972: LD_VAR 0 4
55976: PPUSH
55977: LD_VAR 0 2
55981: PPUSH
55982: CALL_OW 259
55986: PPUSH
55987: CALL_OW 2
55991: ST_TO_ADDR
55992: GO 55950
55994: POP
55995: POP
// if not tmp then
55996: LD_VAR 0 5
56000: NOT
56001: IFFALSE 56005
// exit ;
56003: GO 56025
// result := SortListByListDesc ( units , tmp ) ;
56005: LD_ADDR_VAR 0 3
56009: PUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_VAR 0 5
56019: PPUSH
56020: CALL_OW 77
56024: ST_TO_ADDR
// end ;
56025: LD_VAR 0 3
56029: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56030: LD_INT 0
56032: PPUSH
56033: PPUSH
56034: PPUSH
// x := GetX ( building ) ;
56035: LD_ADDR_VAR 0 4
56039: PUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: CALL_OW 250
56049: ST_TO_ADDR
// y := GetY ( building ) ;
56050: LD_ADDR_VAR 0 5
56054: PUSH
56055: LD_VAR 0 2
56059: PPUSH
56060: CALL_OW 251
56064: ST_TO_ADDR
// if GetTaskList ( unit ) then
56065: LD_VAR 0 1
56069: PPUSH
56070: CALL_OW 437
56074: IFFALSE 56169
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56076: LD_STRING e
56078: PUSH
56079: LD_VAR 0 1
56083: PPUSH
56084: CALL_OW 437
56088: PUSH
56089: LD_INT 1
56091: ARRAY
56092: PUSH
56093: LD_INT 1
56095: ARRAY
56096: EQUAL
56097: PUSH
56098: LD_VAR 0 4
56102: PUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: CALL_OW 437
56112: PUSH
56113: LD_INT 1
56115: ARRAY
56116: PUSH
56117: LD_INT 2
56119: ARRAY
56120: EQUAL
56121: AND
56122: PUSH
56123: LD_VAR 0 5
56127: PUSH
56128: LD_VAR 0 1
56132: PPUSH
56133: CALL_OW 437
56137: PUSH
56138: LD_INT 1
56140: ARRAY
56141: PUSH
56142: LD_INT 3
56144: ARRAY
56145: EQUAL
56146: AND
56147: IFFALSE 56159
// result := true else
56149: LD_ADDR_VAR 0 3
56153: PUSH
56154: LD_INT 1
56156: ST_TO_ADDR
56157: GO 56167
// result := false ;
56159: LD_ADDR_VAR 0 3
56163: PUSH
56164: LD_INT 0
56166: ST_TO_ADDR
// end else
56167: GO 56177
// result := false ;
56169: LD_ADDR_VAR 0 3
56173: PUSH
56174: LD_INT 0
56176: ST_TO_ADDR
// end ;
56177: LD_VAR 0 3
56181: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56182: LD_INT 0
56184: PPUSH
56185: PPUSH
56186: PPUSH
56187: PPUSH
// if not unit or not area then
56188: LD_VAR 0 1
56192: NOT
56193: PUSH
56194: LD_VAR 0 2
56198: NOT
56199: OR
56200: IFFALSE 56204
// exit ;
56202: GO 56368
// tmp := AreaToList ( area , i ) ;
56204: LD_ADDR_VAR 0 6
56208: PUSH
56209: LD_VAR 0 2
56213: PPUSH
56214: LD_VAR 0 5
56218: PPUSH
56219: CALL_OW 517
56223: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56224: LD_ADDR_VAR 0 5
56228: PUSH
56229: DOUBLE
56230: LD_INT 1
56232: DEC
56233: ST_TO_ADDR
56234: LD_VAR 0 6
56238: PUSH
56239: LD_INT 1
56241: ARRAY
56242: PUSH
56243: FOR_TO
56244: IFFALSE 56366
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56246: LD_ADDR_VAR 0 7
56250: PUSH
56251: LD_VAR 0 6
56255: PUSH
56256: LD_INT 1
56258: ARRAY
56259: PUSH
56260: LD_VAR 0 5
56264: ARRAY
56265: PUSH
56266: LD_VAR 0 6
56270: PUSH
56271: LD_INT 2
56273: ARRAY
56274: PUSH
56275: LD_VAR 0 5
56279: ARRAY
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56285: LD_VAR 0 7
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PPUSH
56294: LD_VAR 0 7
56298: PUSH
56299: LD_INT 2
56301: ARRAY
56302: PPUSH
56303: CALL_OW 428
56307: PUSH
56308: LD_INT 0
56310: EQUAL
56311: IFFALSE 56364
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56313: LD_VAR 0 1
56317: PPUSH
56318: LD_VAR 0 7
56322: PUSH
56323: LD_INT 1
56325: ARRAY
56326: PPUSH
56327: LD_VAR 0 7
56331: PUSH
56332: LD_INT 2
56334: ARRAY
56335: PPUSH
56336: LD_VAR 0 3
56340: PPUSH
56341: CALL_OW 48
// result := IsPlaced ( unit ) ;
56345: LD_ADDR_VAR 0 4
56349: PUSH
56350: LD_VAR 0 1
56354: PPUSH
56355: CALL_OW 305
56359: ST_TO_ADDR
// exit ;
56360: POP
56361: POP
56362: GO 56368
// end ; end ;
56364: GO 56243
56366: POP
56367: POP
// end ;
56368: LD_VAR 0 4
56372: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56373: LD_INT 0
56375: PPUSH
56376: PPUSH
56377: PPUSH
// if not side or side > 8 then
56378: LD_VAR 0 1
56382: NOT
56383: PUSH
56384: LD_VAR 0 1
56388: PUSH
56389: LD_INT 8
56391: GREATER
56392: OR
56393: IFFALSE 56397
// exit ;
56395: GO 56584
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56397: LD_ADDR_VAR 0 4
56401: PUSH
56402: LD_INT 22
56404: PUSH
56405: LD_VAR 0 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 21
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PPUSH
56428: CALL_OW 69
56432: ST_TO_ADDR
// if not tmp then
56433: LD_VAR 0 4
56437: NOT
56438: IFFALSE 56442
// exit ;
56440: GO 56584
// enable_addtolog := true ;
56442: LD_ADDR_OWVAR 81
56446: PUSH
56447: LD_INT 1
56449: ST_TO_ADDR
// AddToLog ( [ ) ;
56450: LD_STRING [
56452: PPUSH
56453: CALL_OW 561
// for i in tmp do
56457: LD_ADDR_VAR 0 3
56461: PUSH
56462: LD_VAR 0 4
56466: PUSH
56467: FOR_IN
56468: IFFALSE 56575
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56470: LD_STRING [
56472: PUSH
56473: LD_VAR 0 3
56477: PPUSH
56478: CALL_OW 266
56482: STR
56483: PUSH
56484: LD_STRING , 
56486: STR
56487: PUSH
56488: LD_VAR 0 3
56492: PPUSH
56493: CALL_OW 250
56497: STR
56498: PUSH
56499: LD_STRING , 
56501: STR
56502: PUSH
56503: LD_VAR 0 3
56507: PPUSH
56508: CALL_OW 251
56512: STR
56513: PUSH
56514: LD_STRING , 
56516: STR
56517: PUSH
56518: LD_VAR 0 3
56522: PPUSH
56523: CALL_OW 254
56527: STR
56528: PUSH
56529: LD_STRING , 
56531: STR
56532: PUSH
56533: LD_VAR 0 3
56537: PPUSH
56538: LD_INT 1
56540: PPUSH
56541: CALL_OW 268
56545: STR
56546: PUSH
56547: LD_STRING , 
56549: STR
56550: PUSH
56551: LD_VAR 0 3
56555: PPUSH
56556: LD_INT 2
56558: PPUSH
56559: CALL_OW 268
56563: STR
56564: PUSH
56565: LD_STRING ],
56567: STR
56568: PPUSH
56569: CALL_OW 561
// end ;
56573: GO 56467
56575: POP
56576: POP
// AddToLog ( ]; ) ;
56577: LD_STRING ];
56579: PPUSH
56580: CALL_OW 561
// end ;
56584: LD_VAR 0 2
56588: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56589: LD_INT 0
56591: PPUSH
56592: PPUSH
56593: PPUSH
56594: PPUSH
56595: PPUSH
// if not area or not rate or not max then
56596: LD_VAR 0 1
56600: NOT
56601: PUSH
56602: LD_VAR 0 2
56606: NOT
56607: OR
56608: PUSH
56609: LD_VAR 0 4
56613: NOT
56614: OR
56615: IFFALSE 56619
// exit ;
56617: GO 56811
// while 1 do
56619: LD_INT 1
56621: IFFALSE 56811
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56623: LD_ADDR_VAR 0 9
56627: PUSH
56628: LD_VAR 0 1
56632: PPUSH
56633: LD_INT 1
56635: PPUSH
56636: CALL_OW 287
56640: PUSH
56641: LD_INT 10
56643: MUL
56644: ST_TO_ADDR
// r := rate / 10 ;
56645: LD_ADDR_VAR 0 7
56649: PUSH
56650: LD_VAR 0 2
56654: PUSH
56655: LD_INT 10
56657: DIVREAL
56658: ST_TO_ADDR
// time := 1 1$00 ;
56659: LD_ADDR_VAR 0 8
56663: PUSH
56664: LD_INT 2100
56666: ST_TO_ADDR
// if amount < min then
56667: LD_VAR 0 9
56671: PUSH
56672: LD_VAR 0 3
56676: LESS
56677: IFFALSE 56695
// r := r * 2 else
56679: LD_ADDR_VAR 0 7
56683: PUSH
56684: LD_VAR 0 7
56688: PUSH
56689: LD_INT 2
56691: MUL
56692: ST_TO_ADDR
56693: GO 56721
// if amount > max then
56695: LD_VAR 0 9
56699: PUSH
56700: LD_VAR 0 4
56704: GREATER
56705: IFFALSE 56721
// r := r / 2 ;
56707: LD_ADDR_VAR 0 7
56711: PUSH
56712: LD_VAR 0 7
56716: PUSH
56717: LD_INT 2
56719: DIVREAL
56720: ST_TO_ADDR
// time := time / r ;
56721: LD_ADDR_VAR 0 8
56725: PUSH
56726: LD_VAR 0 8
56730: PUSH
56731: LD_VAR 0 7
56735: DIVREAL
56736: ST_TO_ADDR
// if time < 0 then
56737: LD_VAR 0 8
56741: PUSH
56742: LD_INT 0
56744: LESS
56745: IFFALSE 56762
// time := time * - 1 ;
56747: LD_ADDR_VAR 0 8
56751: PUSH
56752: LD_VAR 0 8
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: MUL
56761: ST_TO_ADDR
// wait ( time ) ;
56762: LD_VAR 0 8
56766: PPUSH
56767: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56771: LD_INT 35
56773: PPUSH
56774: LD_INT 875
56776: PPUSH
56777: CALL_OW 12
56781: PPUSH
56782: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56786: LD_INT 1
56788: PPUSH
56789: LD_INT 5
56791: PPUSH
56792: CALL_OW 12
56796: PPUSH
56797: LD_VAR 0 1
56801: PPUSH
56802: LD_INT 1
56804: PPUSH
56805: CALL_OW 55
// end ;
56809: GO 56619
// end ;
56811: LD_VAR 0 5
56815: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56816: LD_INT 0
56818: PPUSH
56819: PPUSH
56820: PPUSH
56821: PPUSH
56822: PPUSH
56823: PPUSH
56824: PPUSH
56825: PPUSH
// if not turrets or not factories then
56826: LD_VAR 0 1
56830: NOT
56831: PUSH
56832: LD_VAR 0 2
56836: NOT
56837: OR
56838: IFFALSE 56842
// exit ;
56840: GO 57149
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56842: LD_ADDR_VAR 0 10
56846: PUSH
56847: LD_INT 5
56849: PUSH
56850: LD_INT 6
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 24
56884: PUSH
56885: LD_INT 25
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 23
56894: PUSH
56895: LD_INT 27
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 42
56908: PUSH
56909: LD_INT 43
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 44
56918: PUSH
56919: LD_INT 46
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 45
56928: PUSH
56929: LD_INT 47
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// result := [ ] ;
56946: LD_ADDR_VAR 0 3
56950: PUSH
56951: EMPTY
56952: ST_TO_ADDR
// for i in turrets do
56953: LD_ADDR_VAR 0 4
56957: PUSH
56958: LD_VAR 0 1
56962: PUSH
56963: FOR_IN
56964: IFFALSE 57147
// begin nat := GetNation ( i ) ;
56966: LD_ADDR_VAR 0 7
56970: PUSH
56971: LD_VAR 0 4
56975: PPUSH
56976: CALL_OW 248
56980: ST_TO_ADDR
// weapon := 0 ;
56981: LD_ADDR_VAR 0 8
56985: PUSH
56986: LD_INT 0
56988: ST_TO_ADDR
// if not nat then
56989: LD_VAR 0 7
56993: NOT
56994: IFFALSE 56998
// continue ;
56996: GO 56963
// for j in list [ nat ] do
56998: LD_ADDR_VAR 0 5
57002: PUSH
57003: LD_VAR 0 10
57007: PUSH
57008: LD_VAR 0 7
57012: ARRAY
57013: PUSH
57014: FOR_IN
57015: IFFALSE 57056
// if GetBWeapon ( i ) = j [ 1 ] then
57017: LD_VAR 0 4
57021: PPUSH
57022: CALL_OW 269
57026: PUSH
57027: LD_VAR 0 5
57031: PUSH
57032: LD_INT 1
57034: ARRAY
57035: EQUAL
57036: IFFALSE 57054
// begin weapon := j [ 2 ] ;
57038: LD_ADDR_VAR 0 8
57042: PUSH
57043: LD_VAR 0 5
57047: PUSH
57048: LD_INT 2
57050: ARRAY
57051: ST_TO_ADDR
// break ;
57052: GO 57056
// end ;
57054: GO 57014
57056: POP
57057: POP
// if not weapon then
57058: LD_VAR 0 8
57062: NOT
57063: IFFALSE 57067
// continue ;
57065: GO 56963
// for k in factories do
57067: LD_ADDR_VAR 0 6
57071: PUSH
57072: LD_VAR 0 2
57076: PUSH
57077: FOR_IN
57078: IFFALSE 57143
// begin weapons := AvailableWeaponList ( k ) ;
57080: LD_ADDR_VAR 0 9
57084: PUSH
57085: LD_VAR 0 6
57089: PPUSH
57090: CALL_OW 478
57094: ST_TO_ADDR
// if not weapons then
57095: LD_VAR 0 9
57099: NOT
57100: IFFALSE 57104
// continue ;
57102: GO 57077
// if weapon in weapons then
57104: LD_VAR 0 8
57108: PUSH
57109: LD_VAR 0 9
57113: IN
57114: IFFALSE 57141
// begin result := [ i , weapon ] ;
57116: LD_ADDR_VAR 0 3
57120: PUSH
57121: LD_VAR 0 4
57125: PUSH
57126: LD_VAR 0 8
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: ST_TO_ADDR
// exit ;
57135: POP
57136: POP
57137: POP
57138: POP
57139: GO 57149
// end ; end ;
57141: GO 57077
57143: POP
57144: POP
// end ;
57145: GO 56963
57147: POP
57148: POP
// end ;
57149: LD_VAR 0 3
57153: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57154: LD_INT 0
57156: PPUSH
// if not side or side > 8 then
57157: LD_VAR 0 3
57161: NOT
57162: PUSH
57163: LD_VAR 0 3
57167: PUSH
57168: LD_INT 8
57170: GREATER
57171: OR
57172: IFFALSE 57176
// exit ;
57174: GO 57235
// if not range then
57176: LD_VAR 0 4
57180: NOT
57181: IFFALSE 57192
// range := - 12 ;
57183: LD_ADDR_VAR 0 4
57187: PUSH
57188: LD_INT 12
57190: NEG
57191: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57192: LD_VAR 0 1
57196: PPUSH
57197: LD_VAR 0 2
57201: PPUSH
57202: LD_VAR 0 3
57206: PPUSH
57207: LD_VAR 0 4
57211: PPUSH
57212: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57216: LD_VAR 0 1
57220: PPUSH
57221: LD_VAR 0 2
57225: PPUSH
57226: LD_VAR 0 3
57230: PPUSH
57231: CALL_OW 331
// end ;
57235: LD_VAR 0 5
57239: RET
// export function Video ( mode ) ; begin
57240: LD_INT 0
57242: PPUSH
// ingame_video = mode ;
57243: LD_ADDR_OWVAR 52
57247: PUSH
57248: LD_VAR 0 1
57252: ST_TO_ADDR
// interface_hidden = mode ;
57253: LD_ADDR_OWVAR 54
57257: PUSH
57258: LD_VAR 0 1
57262: ST_TO_ADDR
// end ;
57263: LD_VAR 0 2
57267: RET
// export function Join ( array , element ) ; begin
57268: LD_INT 0
57270: PPUSH
// result := array ^ element ;
57271: LD_ADDR_VAR 0 3
57275: PUSH
57276: LD_VAR 0 1
57280: PUSH
57281: LD_VAR 0 2
57285: ADD
57286: ST_TO_ADDR
// end ;
57287: LD_VAR 0 3
57291: RET
// export function JoinUnion ( array , element ) ; begin
57292: LD_INT 0
57294: PPUSH
// result := array union element ;
57295: LD_ADDR_VAR 0 3
57299: PUSH
57300: LD_VAR 0 1
57304: PUSH
57305: LD_VAR 0 2
57309: UNION
57310: ST_TO_ADDR
// end ;
57311: LD_VAR 0 3
57315: RET
// export function GetBehemoths ( side ) ; begin
57316: LD_INT 0
57318: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57319: LD_ADDR_VAR 0 2
57323: PUSH
57324: LD_INT 22
57326: PUSH
57327: LD_VAR 0 1
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 31
57338: PUSH
57339: LD_INT 25
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PPUSH
57350: CALL_OW 69
57354: ST_TO_ADDR
// end ;
57355: LD_VAR 0 2
57359: RET
// export function Shuffle ( array ) ; var i , index ; begin
57360: LD_INT 0
57362: PPUSH
57363: PPUSH
57364: PPUSH
// result := [ ] ;
57365: LD_ADDR_VAR 0 2
57369: PUSH
57370: EMPTY
57371: ST_TO_ADDR
// if not array then
57372: LD_VAR 0 1
57376: NOT
57377: IFFALSE 57381
// exit ;
57379: GO 57480
// Randomize ;
57381: CALL_OW 10
// for i = array downto 1 do
57385: LD_ADDR_VAR 0 3
57389: PUSH
57390: DOUBLE
57391: LD_VAR 0 1
57395: INC
57396: ST_TO_ADDR
57397: LD_INT 1
57399: PUSH
57400: FOR_DOWNTO
57401: IFFALSE 57478
// begin index := rand ( 1 , array ) ;
57403: LD_ADDR_VAR 0 4
57407: PUSH
57408: LD_INT 1
57410: PPUSH
57411: LD_VAR 0 1
57415: PPUSH
57416: CALL_OW 12
57420: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57421: LD_ADDR_VAR 0 2
57425: PUSH
57426: LD_VAR 0 2
57430: PPUSH
57431: LD_VAR 0 2
57435: PUSH
57436: LD_INT 1
57438: PLUS
57439: PPUSH
57440: LD_VAR 0 1
57444: PUSH
57445: LD_VAR 0 4
57449: ARRAY
57450: PPUSH
57451: CALL_OW 2
57455: ST_TO_ADDR
// array := Delete ( array , index ) ;
57456: LD_ADDR_VAR 0 1
57460: PUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: LD_VAR 0 4
57470: PPUSH
57471: CALL_OW 3
57475: ST_TO_ADDR
// end ;
57476: GO 57400
57478: POP
57479: POP
// end ;
57480: LD_VAR 0 2
57484: RET
// export function GetBaseMaterials ( base ) ; begin
57485: LD_INT 0
57487: PPUSH
// result := [ 0 , 0 , 0 ] ;
57488: LD_ADDR_VAR 0 2
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// if not base then
57507: LD_VAR 0 1
57511: NOT
57512: IFFALSE 57516
// exit ;
57514: GO 57565
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57516: LD_ADDR_VAR 0 2
57520: PUSH
57521: LD_VAR 0 1
57525: PPUSH
57526: LD_INT 1
57528: PPUSH
57529: CALL_OW 275
57533: PUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: LD_INT 2
57541: PPUSH
57542: CALL_OW 275
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: LD_INT 3
57554: PPUSH
57555: CALL_OW 275
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// end ;
57565: LD_VAR 0 2
57569: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57570: LD_INT 0
57572: PPUSH
57573: PPUSH
// result := array ;
57574: LD_ADDR_VAR 0 3
57578: PUSH
57579: LD_VAR 0 1
57583: ST_TO_ADDR
// if size > 0 then
57584: LD_VAR 0 2
57588: PUSH
57589: LD_INT 0
57591: GREATER
57592: IFFALSE 57638
// for i := array downto size do
57594: LD_ADDR_VAR 0 4
57598: PUSH
57599: DOUBLE
57600: LD_VAR 0 1
57604: INC
57605: ST_TO_ADDR
57606: LD_VAR 0 2
57610: PUSH
57611: FOR_DOWNTO
57612: IFFALSE 57636
// result := Delete ( result , result ) ;
57614: LD_ADDR_VAR 0 3
57618: PUSH
57619: LD_VAR 0 3
57623: PPUSH
57624: LD_VAR 0 3
57628: PPUSH
57629: CALL_OW 3
57633: ST_TO_ADDR
57634: GO 57611
57636: POP
57637: POP
// end ;
57638: LD_VAR 0 3
57642: RET
// export function ComExit ( unit ) ; var tmp ; begin
57643: LD_INT 0
57645: PPUSH
57646: PPUSH
// if not IsInUnit ( unit ) then
57647: LD_VAR 0 1
57651: PPUSH
57652: CALL_OW 310
57656: NOT
57657: IFFALSE 57661
// exit ;
57659: GO 57721
// tmp := IsInUnit ( unit ) ;
57661: LD_ADDR_VAR 0 3
57665: PUSH
57666: LD_VAR 0 1
57670: PPUSH
57671: CALL_OW 310
57675: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57676: LD_VAR 0 3
57680: PPUSH
57681: CALL_OW 247
57685: PUSH
57686: LD_INT 2
57688: EQUAL
57689: IFFALSE 57702
// ComExitVehicle ( unit ) else
57691: LD_VAR 0 1
57695: PPUSH
57696: CALL_OW 121
57700: GO 57711
// ComExitBuilding ( unit ) ;
57702: LD_VAR 0 1
57706: PPUSH
57707: CALL_OW 122
// result := tmp ;
57711: LD_ADDR_VAR 0 2
57715: PUSH
57716: LD_VAR 0 3
57720: ST_TO_ADDR
// end ;
57721: LD_VAR 0 2
57725: RET
// export function ResetHc ; begin
57726: LD_INT 0
57728: PPUSH
// InitHc ;
57729: CALL_OW 19
// hc_importance := 0 ;
57733: LD_ADDR_OWVAR 32
57737: PUSH
57738: LD_INT 0
57740: ST_TO_ADDR
// end ;
57741: LD_VAR 0 1
57745: RET
