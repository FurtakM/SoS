// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3472 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3939 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7889 0 5
// PrepareComm ;
 110: CALL 8372 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3469
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 6975 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: PUSH
 761: LD_EXP 30
 765: PUSH
 766: LD_INT 0
 768: GREATER
 769: AND
 770: IFFALSE 807
// begin game_strings := [ #mtime , meeting_time ] ;
 772: LD_ADDR_EXP 6
 776: PUSH
 777: LD_STRING #mtime
 779: PUSH
 780: LD_EXP 30
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 789: LD_ADDR_EXP 30
 793: PUSH
 794: LD_EXP 30
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 6975 0 2
 806: ST_TO_ADDR
// end ; if meeting_arive then
 807: LD_EXP 27
 811: IFFALSE 831
// mission_time := RefreshTime ( mission_time , true ) ;
 813: LD_ADDR_EXP 34
 817: PUSH
 818: LD_EXP 34
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6975 0 2
 830: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 831: LD_EXP 38
 835: PUSH
 836: LD_EXP 23
 840: PUSH
 841: LD_INT 0
 843: GREATER
 844: AND
 845: PUSH
 846: LD_EXP 27
 850: AND
 851: IFFALSE 871
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 853: LD_ADDR_EXP 23
 857: PUSH
 858: LD_EXP 23
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL 6975 0 2
 870: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 871: LD_EXP 39
 875: PUSH
 876: LD_EXP 24
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: AND
 885: PUSH
 886: LD_EXP 27
 890: AND
 891: IFFALSE 911
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 893: LD_ADDR_EXP 24
 897: PUSH
 898: LD_EXP 24
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL 6975 0 2
 910: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 911: LD_EXP 40
 915: PUSH
 916: LD_EXP 25
 920: PUSH
 921: LD_INT 0
 923: GREATER
 924: AND
 925: PUSH
 926: LD_EXP 27
 930: AND
 931: IFFALSE 951
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_EXP 25
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL 6975 0 2
 950: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 951: LD_EXP 43
 955: PUSH
 956: LD_EXP 31
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: AND
 965: IFFALSE 1002
// begin game_strings := [ #rtime , russian_timer ] ;
 967: LD_ADDR_EXP 6
 971: PUSH
 972: LD_STRING #rtime
 974: PUSH
 975: LD_EXP 31
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 984: LD_ADDR_EXP 31
 988: PUSH
 989: LD_EXP 31
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL 6975 0 2
1001: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1002: LD_EXP 43
1006: PUSH
1007: LD_EXP 31
1011: PUSH
1012: LD_INT 0
1014: EQUAL
1015: AND
1016: PUSH
1017: LD_EXP 35
1021: OR
1022: IFFALSE 1031
// game_strings := [ ] ;
1024: LD_ADDR_EXP 6
1028: PUSH
1029: EMPTY
1030: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1031: LD_EXP 37
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: PUSH
1040: LD_OWVAR 1
1044: PUSH
1045: LD_INT 33600
1047: MOD
1048: PUSH
1049: LD_INT 0
1051: EQUAL
1052: AND
1053: IFFALSE 1113
// begin p := Rand ( 1 , 5 ) ;
1055: LD_ADDR_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 12
1070: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1071: LD_VAR 0 2
1075: PUSH
1076: LD_INT 4
1078: PUSH
1079: LD_INT 3
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_EXP 2
1094: ARRAY
1095: LESSEQUAL
1096: IFFALSE 1113
// begin RaiseSailEvent ( 92 ) ;
1098: LD_INT 92
1100: PPUSH
1101: CALL_OW 427
// dezert := true ;
1105: LD_ADDR_EXP 37
1109: PUSH
1110: LD_INT 1
1112: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1113: LD_OWVAR 1
1117: PUSH
1118: LD_INT 8400
1120: MOD
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: IFFALSE 1134
// RaiseSailEvent ( 101 ) ;
1127: LD_INT 101
1129: PPUSH
1130: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1134: LD_INT 8
1136: PPUSH
1137: CALL 7029 0 1
1141: PUSH
1142: LD_EXP 13
1146: PUSH
1147: LD_INT 0
1149: EQUAL
1150: AND
1151: IFFALSE 1168
// begin u_mine := true ;
1153: LD_ADDR_EXP 13
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1161: LD_STRING DS-T1m
1163: PPUSH
1164: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1168: LD_INT 8
1170: PPUSH
1171: CALL 7091 0 1
1175: PUSH
1176: LD_EXP 14
1180: PUSH
1181: LD_INT 0
1183: EQUAL
1184: AND
1185: IFFALSE 1202
// begin u_fac := true ;
1187: LD_ADDR_EXP 14
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1195: LD_STRING DS-T1f
1197: PPUSH
1198: CALL_OW 337
// end ; if hero_died then
1202: LD_EXP 33
1206: IFFALSE 1215
// YouLost ( DS-h1 ) ;
1208: LD_STRING DS-h1
1210: PPUSH
1211: CALL_OW 104
// if fort_destroyed then
1215: LD_EXP 32
1219: IFFALSE 1228
// YouLost ( DS-h2 ) ;
1221: LD_STRING DS-h2
1223: PPUSH
1224: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1228: LD_EXP 7
1232: PPUSH
1233: LD_EXP 49
1237: PPUSH
1238: CALL_OW 296
1242: PUSH
1243: LD_INT 6
1245: GREATER
1246: PUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 0
1254: EQUAL
1255: AND
1256: IFFALSE 1279
// begin if not HasTask ( leopold ) then
1258: LD_EXP 7
1262: PPUSH
1263: CALL_OW 314
1267: NOT
1268: IFFALSE 1277
// RaiseSailEvent ( 1 ) ;
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 427
// end else
1277: GO 1296
// if meeting_start = false then
1279: LD_EXP 26
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: IFFALSE 1296
// begin RaiseSailEvent ( 2 ) ;
1289: LD_INT 2
1291: PPUSH
1292: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1296: LD_EXP 3
1300: PUSH
1301: LD_INT 105000
1303: PUSH
1304: LD_INT 131250
1306: PUSH
1307: LD_INT 151200
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_EXP 2
1319: ARRAY
1320: GREATEREQUAL
1321: PUSH
1322: LD_EXP 29
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: AND
1331: IFFALSE 1348
// begin meeting_end := true ;
1333: LD_ADDR_EXP 29
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1341: LD_INT 200
1343: PPUSH
1344: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1348: LD_EXP 30
1352: PUSH
1353: LD_INT 0
1355: EQUAL
1356: PUSH
1357: LD_EXP 27
1361: PUSH
1362: LD_INT 0
1364: EQUAL
1365: AND
1366: IFFALSE 1390
// begin meeting_arive := true ;
1368: LD_ADDR_EXP 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// game_strings := [ ] ;
1376: LD_ADDR_EXP 6
1380: PUSH
1381: EMPTY
1382: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1383: LD_INT 10
1385: PPUSH
1386: CALL_OW 427
// end ; if meeting_arive then
1390: LD_EXP 27
1394: IFFALSE 2193
// begin if arabian_attack = false and tick mod 4200 = 0 then
1396: LD_EXP 38
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: PUSH
1405: LD_OWVAR 1
1409: PUSH
1410: LD_INT 4200
1412: MOD
1413: PUSH
1414: LD_INT 0
1416: EQUAL
1417: AND
1418: IFFALSE 1471
// begin p := Rand ( 1 , 100 ) ;
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_INT 100
1430: PPUSH
1431: CALL_OW 12
1435: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 85
1443: PUSH
1444: LD_INT 90
1446: PUSH
1447: LD_INT 95
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_EXP 2
1459: ARRAY
1460: LESSEQUAL
1461: IFFALSE 1471
// arabian_attack := true ;
1463: LD_ADDR_EXP 38
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1471: LD_EXP 43
1475: PUSH
1476: LD_INT 0
1478: EQUAL
1479: PUSH
1480: LD_EXP 39
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: AND
1489: PUSH
1490: LD_OWVAR 1
1494: PUSH
1495: LD_INT 52500
1497: GREATER
1498: AND
1499: IFFALSE 1570
// begin russian_trade = true ;
1501: LD_ADDR_EXP 43
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// DialogueOn ;
1509: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1513: LD_EXP 47
1517: PPUSH
1518: LD_STRING DS-DR-RTr
1520: PPUSH
1521: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1525: LD_EXP 49
1529: PPUSH
1530: LD_STRING DS-DC-RTr
1532: PPUSH
1533: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1537: LD_EXP 47
1541: PPUSH
1542: LD_STRING DS-DR-RTr2
1544: PPUSH
1545: CALL_OW 94
// DialogueOff ;
1549: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1553: LD_STRING DS-T2
1555: PPUSH
1556: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1560: LD_INT 10
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1570: LD_EXP 43
1574: PUSH
1575: LD_EXP 35
1579: PUSH
1580: LD_INT 0
1582: EQUAL
1583: AND
1584: PUSH
1585: LD_EXP 31
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: AND
1594: IFFALSE 1843
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1596: LD_INT 10
1598: PPUSH
1599: LD_INT 58
1601: PUSH
1602: EMPTY
1603: LIST
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 34
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 12
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 33
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 70
1659: PUSH
1660: LD_INT 0
1662: GREATER
1663: IFFALSE 1843
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1665: LD_INT 10
1667: PPUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 34
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 33
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 70
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 289
1740: PUSH
1741: LD_INT 100
1743: EQUAL
1744: IFFALSE 1843
// begin cargo_ok := true ;
1746: LD_ADDR_EXP 35
1750: PUSH
1751: LD_INT 1
1753: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1754: LD_INT 10
1756: PPUSH
1757: LD_INT 58
1759: PUSH
1760: EMPTY
1761: LIST
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 32
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 34
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 33
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 70
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: PPUSH
1822: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1826: LD_STRING DS-T2-out
1828: PPUSH
1829: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1833: LD_INT 10
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1843: LD_EXP 39
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: PUSH
1852: LD_EXP 43
1856: AND
1857: PUSH
1858: LD_EXP 35
1862: PUSH
1863: LD_INT 0
1865: EQUAL
1866: AND
1867: PUSH
1868: LD_EXP 31
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: AND
1877: IFFALSE 1904
// begin russian_attack := true ;
1879: LD_ADDR_EXP 39
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1887: LD_STRING DS-T2-out
1889: PPUSH
1890: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1894: LD_INT 10
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1904: LD_EXP 43
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: PUSH
1913: LD_EXP 39
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: AND
1922: PUSH
1923: LD_EXP 40
1927: PUSH
1928: LD_INT 0
1930: EQUAL
1931: AND
1932: PUSH
1933: LD_OWVAR 1
1937: PUSH
1938: LD_INT 21000
1940: MOD
1941: PUSH
1942: LD_INT 0
1944: EQUAL
1945: AND
1946: IFFALSE 1999
// begin p := Rand ( 1 , 100 ) ;
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 100
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: LD_INT 45
1974: PUSH
1975: LD_INT 55
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: LD_EXP 2
1987: ARRAY
1988: LESSEQUAL
1989: IFFALSE 1999
// russian_attack := true ;
1991: LD_ADDR_EXP 39
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: PUSH
2008: LD_EXP 40
2012: PUSH
2013: LD_INT 0
2015: EQUAL
2016: AND
2017: PUSH
2018: LD_EXP 39
2022: PUSH
2023: LD_INT 0
2025: EQUAL
2026: AND
2027: PUSH
2028: LD_OWVAR 1
2032: PUSH
2033: LD_INT 31500
2035: MOD
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: AND
2041: IFFALSE 2094
// begin p := Rand ( 1 , 100 ) ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 100
2053: PPUSH
2054: CALL_OW 12
2058: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 33
2066: PUSH
2067: LD_INT 44
2069: PUSH
2070: LD_INT 55
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 2
2082: ARRAY
2083: LESSEQUAL
2084: IFFALSE 2094
// american_attack := true ;
2086: LD_ADDR_EXP 40
2090: PUSH
2091: LD_INT 1
2093: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2094: LD_EXP 40
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: PUSH
2103: LD_EXP 39
2107: PUSH
2108: LD_INT 0
2110: EQUAL
2111: AND
2112: PUSH
2113: LD_EXP 41
2117: PUSH
2118: LD_INT 0
2120: EQUAL
2121: AND
2122: PUSH
2123: LD_OWVAR 1
2127: PUSH
2128: LD_INT 21200
2130: MOD
2131: PUSH
2132: LD_INT 0
2134: EQUAL
2135: AND
2136: IFFALSE 2193
// begin p := Rand ( 1 , 100 ) ;
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 100
2148: PPUSH
2149: CALL_OW 12
2153: ST_TO_ADDR
// if p <= american_hchan then
2154: LD_VAR 0 2
2158: PUSH
2159: LD_EXP 36
2163: LESSEQUAL
2164: IFFALSE 2193
// begin american_help := true ;
2166: LD_ADDR_EXP 41
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2174: LD_EXP 46
2178: PPUSH
2179: LD_STRING DS-amhelp
2181: PPUSH
2182: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2186: LD_INT 91
2188: PPUSH
2189: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 25
2202: PUSH
2203: LD_INT 0
2205: EQUAL
2206: AND
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: AND
2227: IFFALSE 2329
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2229: LD_ADDR_EXP 25
2233: PUSH
2234: LD_INT 35700
2236: PPUSH
2237: LD_INT 42000
2239: PPUSH
2240: CALL_OW 12
2244: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2245: LD_EXP 12
2249: PPUSH
2250: LD_STRING DS-DZ-U
2252: PPUSH
2253: CALL_OW 94
// Wait ( 0 0$33 ) ;
2257: LD_INT 1155
2259: PPUSH
2260: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 2
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// case x of 1 :
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 1
2287: DOUBLE
2288: EQUAL
2289: IFTRUE 2293
2291: GO 2303
2293: POP
// RaiseSailEvent ( 41 ) ; 2 :
2294: LD_INT 41
2296: PPUSH
2297: CALL_OW 427
2301: GO 2322
2303: LD_INT 2
2305: DOUBLE
2306: EQUAL
2307: IFTRUE 2311
2309: GO 2321
2311: POP
// RaiseSailEvent ( 42 ) ; end ;
2312: LD_INT 42
2314: PPUSH
2315: CALL_OW 427
2319: GO 2322
2321: POP
// RaiseSailEvent ( 42 ) ;
2322: LD_INT 42
2324: PPUSH
2325: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2329: LD_EXP 39
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_INT 0
2341: EQUAL
2342: AND
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: AND
2363: IFFALSE 2419
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2365: LD_ADDR_EXP 24
2369: PUSH
2370: LD_INT 35700
2372: PPUSH
2373: LD_INT 42000
2375: PPUSH
2376: CALL_OW 12
2380: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2381: LD_EXP 12
2385: PPUSH
2386: LD_STRING DS-DZ-R
2388: PPUSH
2389: CALL_OW 94
// Wait ( 0 0$45 ) ;
2393: LD_INT 1575
2395: PPUSH
2396: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2400: LD_EXP 47
2404: PPUSH
2405: LD_STRING DS-DR-R1
2407: PPUSH
2408: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2412: LD_INT 51
2414: PPUSH
2415: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2419: LD_EXP 34
2423: PUSH
2424: LD_INT 52500
2426: GREATEREQUAL
2427: PUSH
2428: LD_EXP 20
2432: PUSH
2433: LD_INT 10
2435: LESS
2436: AND
2437: IFFALSE 2461
// begin mission_time := 0 0$00 ;
2439: LD_ADDR_EXP 34
2443: PUSH
2444: LD_INT 0
2446: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2447: LD_ADDR_EXP 20
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2461: LD_EXP 23
2465: PUSH
2466: LD_INT 0
2468: EQUAL
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 34
2485: PUSH
2486: LD_INT 31
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_INT 0
2508: EQUAL
2509: AND
2510: IFFALSE 2708
// begin arabian_timeing := 7 7$30 ;
2512: LD_ADDR_EXP 23
2516: PUSH
2517: LD_INT 15750
2519: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2536: LD_EXP 12
2540: PPUSH
2541: LD_STRING DS-DZ-H
2543: PPUSH
2544: CALL_OW 94
// case x of 1 :
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: DOUBLE
2556: EQUAL
2557: IFTRUE 2561
2559: GO 2571
2561: POP
// RaiseSailEvent ( 31 ) ; 2 :
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 427
2569: GO 2608
2571: LD_INT 2
2573: DOUBLE
2574: EQUAL
2575: IFTRUE 2579
2577: GO 2589
2579: POP
// RaiseSailEvent ( 32 ) ; 3 :
2580: LD_INT 32
2582: PPUSH
2583: CALL_OW 427
2587: GO 2608
2589: LD_INT 3
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2607
2597: POP
// RaiseSailEvent ( 33 ) ; end ;
2598: LD_INT 33
2600: PPUSH
2601: CALL_OW 427
2605: GO 2608
2607: POP
// RaiseSailEvent ( 33 ) ;
2608: LD_INT 33
2610: PPUSH
2611: CALL_OW 427
// if game_difficulty > 1 then
2615: LD_EXP 2
2619: PUSH
2620: LD_INT 1
2622: GREATER
2623: IFFALSE 2632
// RaiseSailEvent ( 33 ) ;
2625: LD_INT 33
2627: PPUSH
2628: CALL_OW 427
// if heike_dialog1 = false then
2632: LD_EXP 44
2636: PUSH
2637: LD_INT 0
2639: EQUAL
2640: IFFALSE 2671
// begin heike_dialog1 := true ;
2642: LD_ADDR_EXP 44
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2657: LD_EXP 48
2661: PPUSH
2662: LD_STRING heike1
2664: PPUSH
2665: CALL_OW 94
// end else
2669: GO 2708
// if heike_dialog2 = false then
2671: LD_EXP 45
2675: PUSH
2676: LD_INT 0
2678: EQUAL
2679: IFFALSE 2708
// begin heike_dialog2 := true ;
2681: LD_ADDR_EXP 45
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2696: LD_EXP 48
2700: PPUSH
2701: LD_STRING heike2
2703: PPUSH
2704: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2708: LD_INT 22
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 33
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: LD_INT 0
2739: GREATER
2740: IFFALSE 2749
// ConnectWithTower ( 2 ) ;
2742: LD_INT 2
2744: PPUSH
2745: CALL 7139 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 34
2764: PUSH
2765: LD_INT 31
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 60
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: PUSH
2802: LD_INT 0
2804: GREATER
2805: IFFALSE 2951
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 34
2827: PUSH
2828: LD_INT 31
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 60
2844: PUSH
2845: EMPTY
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2865: LD_ADDR_VAR 0 3
2869: PUSH
2870: LD_INT 81
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PPUSH
2885: LD_INT 20
2887: PPUSH
2888: CALL 8522 0 2
2892: ST_TO_ADDR
// for i = 1 to filter do
2893: LD_ADDR_VAR 0 1
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_VAR 0 4
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2949
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2911: LD_VAR 0 4
2915: PUSH
2916: LD_VAR 0 1
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_VAR 0 1
2936: ARRAY
2937: PPUSH
2938: CALL_OW 74
2942: PPUSH
2943: CALL_OW 115
2947: GO 2908
2949: POP
2950: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2951: LD_INT 22
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 3
2963: PUSH
2964: LD_INT 60
2966: PUSH
2967: EMPTY
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: GREATER
2989: IFFALSE 3135
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 60
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 81
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_INT 20
3071: PPUSH
3072: CALL 8522 0 2
3076: ST_TO_ADDR
// for i = 1 to filter do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_VAR 0 4
3091: PUSH
3092: FOR_TO
3093: IFFALSE 3133
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3095: LD_VAR 0 4
3099: PUSH
3100: LD_VAR 0 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_VAR 0 4
3115: PUSH
3116: LD_VAR 0 1
3120: ARRAY
3121: PPUSH
3122: CALL_OW 74
3126: PPUSH
3127: CALL_OW 115
3131: GO 3092
3133: POP
3134: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: LD_INT 60
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3319
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 22
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 31
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 3
3209: PUSH
3210: LD_INT 60
3212: PUSH
3213: EMPTY
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_INT 20
3255: PPUSH
3256: CALL 8522 0 2
3260: ST_TO_ADDR
// for i = 1 to filter do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3279: LD_VAR 0 4
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PPUSH
3295: LD_VAR 0 4
3299: PUSH
3300: LD_VAR 0 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 74
3310: PPUSH
3311: CALL_OW 115
3315: GO 3276
3317: POP
3318: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3319: LD_INT 22
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 34
3331: PUSH
3332: LD_INT 91
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 24
3344: PUSH
3345: LD_INT 700
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PUSH
3369: LD_INT 0
3371: GREATER
3372: IFFALSE 3469
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 91
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: LD_INT 24
3404: PUSH
3405: LD_INT 700
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: ST_TO_ADDR
// for i = 1 to filter do
3429: LD_ADDR_VAR 0 1
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_VAR 0 4
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3467
// SetLives ( filter [ i ] , 1 ) ;
3447: LD_VAR 0 4
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 234
3465: GO 3444
3467: POP
3468: POP
// end ; end ; end_of_file
3469: PPOPN 4
3471: END
// export function Start_Mission ; begin
3472: LD_INT 0
3474: PPUSH
// PrepareLegion ;
3475: CALL 3516 0 0
// PrepareMeeting ;
3479: CALL 4133 0 0
// case Query ( DS-text-beg ) of 1 :
3483: LD_STRING DS-text-beg
3485: PPUSH
3486: CALL_OW 97
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3502
3499: POP
// ; end ;
3500: GO 3503
3502: POP
// game_on := true ;
3503: LD_ADDR_EXP 1
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 1
3515: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
// uc_side := 8 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 8
3530: ST_TO_ADDR
// uc_nation := 2 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3539: LD_ADDR_EXP 50
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3564: LD_ADDR_EXP 51
3568: PUSH
3569: LD_INT 9
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: ST_TO_ADDR
// filter := [ ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// hc_gallery := desert ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING desert
3603: ST_TO_ADDR
// hc_face_number := 1 ;
3604: LD_ADDR_OWVAR 34
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3612: LD_ADDR_OWVAR 31
3616: PUSH
3617: LD_EXP 50
3621: PUSH
3622: LD_INT 2
3624: PLUS
3625: PUSH
3626: LD_EXP 50
3630: PUSH
3631: LD_INT 1
3633: MINUS
3634: PUSH
3635: LD_EXP 50
3639: PUSH
3640: LD_EXP 50
3644: PUSH
3645: LD_INT 1
3647: PLUS
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: ST_TO_ADDR
// hc_sex := sex_male ;
3655: LD_ADDR_OWVAR 27
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3663: LD_ADDR_OWVAR 26
3667: PUSH
3668: LD_STRING Henri Ruotz
3670: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3671: LD_ADDR_OWVAR 29
3675: PUSH
3676: LD_INT 10
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
// hc_class := 1 ;
3686: LD_ADDR_OWVAR 28
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// hc_importance := 100 ;
3694: LD_ADDR_OWVAR 32
3698: PUSH
3699: LD_INT 100
3701: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3702: LD_ADDR_EXP 49
3706: PUSH
3707: CALL_OW 44
3711: ST_TO_ADDR
// hc_importance := 0 ;
3712: LD_ADDR_OWVAR 32
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3720: LD_ADDR_EXP 12
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 380
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 50
3790: PPUSH
3791: CALL 7323 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 51
3817: PPUSH
3818: LD_EXP 51
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 49
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 51
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 49
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 49
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 49
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6699
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 26
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 49
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 49
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 49
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6699
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7323 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6699
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 38
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6699
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 40
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6699
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 39
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6699
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 20
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 17
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 17
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7323 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6699
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 20
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 17
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 17
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7323 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7323 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6699
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 20
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 17
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 17
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7323 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 20
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 17
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6699
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 22
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 19
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6699
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 22
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 19
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 19
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6699
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 21
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 18
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6699
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6699
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6549
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// InitHc ;
6244: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_EXP 50
6258: PPUSH
6259: CALL_OW 380
// un := CreateHuman ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// filter := filter ^ un ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_VAR 0 4
6287: ADD
6288: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 4
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_EXP 2
6317: ARRAY
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6358
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_EXP 50
6334: PPUSH
6335: CALL 7323 0 2
6339: ST_TO_ADDR
// filter := filter ^ un ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_VAR 0 3
6349: PUSH
6350: LD_VAR 0 4
6354: ADD
6355: ST_TO_ADDR
// end ;
6356: GO 6319
6358: POP
6359: POP
// DialogueOn ;
6360: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: CALL_OW 258
6377: PUSH
6378: LD_INT 1
6380: EQUAL
6381: IFFALSE 6401
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: LD_STRING DS-DF-1
6394: PPUSH
6395: CALL_OW 94
6399: GO 6417
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_STRING DS-DF-f1
6412: PPUSH
6413: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6417: LD_STRING DS-dezert
6419: PPUSH
6420: CALL_OW 97
6424: PUSH
6425: LD_INT 1
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6448
6433: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6434: LD_EXP 49
6438: PPUSH
6439: LD_STRING DS-DC-dis
6441: PPUSH
6442: CALL_OW 88
6446: GO 6543
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6542
6456: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_STRING DS-DC-acp
6464: PPUSH
6465: CALL_OW 88
// for i = 1 to filter do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_TO
6485: IFFALSE 6538
// begin SetSide ( filter [ i ] , 8 ) ;
6487: LD_VAR 0 3
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6505: LD_VAR 0 3
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_INT 4
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6526: LD_INT 111
6528: PPUSH
6529: LD_INT 121
6531: PPUSH
6532: CALL_OW 86
// end ;
6536: GO 6484
6538: POP
6539: POP
// end ; end ;
6540: GO 6543
6542: POP
// DialogueOff ;
6543: CALL_OW 7
// end ; 101 :
6547: GO 6699
6549: LD_INT 101
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6609
6557: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6558: LD_INT 3
6560: PPUSH
6561: LD_INT 5
6563: PPUSH
6564: CALL_OW 12
6568: PPUSH
6569: LD_INT 9
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// Wait ( 0 0$11 ) ;
6579: LD_INT 385
6581: PPUSH
6582: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: PPUSH
6597: LD_INT 9
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 55
// end ; 200 :
6607: GO 6699
6609: LD_INT 200
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6698
6617: POP
// begin Say ( Leopold , DS-end ) ;
6618: LD_EXP 7
6622: PPUSH
6623: LD_STRING DS-end
6625: PPUSH
6626: CALL_OW 88
// if Difficulty = 3 then
6630: LD_OWVAR 67
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: IFFALSE 6647
// SetAchievement ( ACH_DESERT ) ;
6640: LD_STRING ACH_DESERT
6642: PPUSH
6643: CALL_OW 543
// music_nat := 5 ;
6647: LD_ADDR_OWVAR 71
6651: PUSH
6652: LD_INT 5
6654: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6655: LD_STRING med
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 101
// AddMedal ( med , 1 ) ;
6665: LD_STRING med
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 101
// AddMedal ( med , 1 ) ;
6675: LD_STRING med
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 101
// GiveMedals ( MAIN ) ;
6685: LD_STRING MAIN
6687: PPUSH
6688: CALL_OW 102
// YouWin ;
6692: CALL_OW 103
// end ; end ;
6696: GO 6699
6698: POP
// end ;
6699: PPOPN 6
6701: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6702: LD_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: IN
6736: IFFALSE 6861
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6738: LD_INT 105
6740: PPUSH
6741: LD_INT 210
6743: PPUSH
6744: CALL_OW 12
6748: PPUSH
6749: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 3
6775: PPUSH
6776: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 250
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 251
6826: PPUSH
6827: LD_INT 3
6829: PPUSH
6830: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 250
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 453
// end ; end ;
6861: PPOPN 1
6863: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 24265 0 1
// if un = fort then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 23
6880: EQUAL
6881: IFFALSE 6891
// fort_destroyed := true ;
6883: LD_ADDR_EXP 32
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if un = l_cmndr then
6891: LD_VAR 0 1
6895: PUSH
6896: LD_EXP 49
6900: EQUAL
6901: IFFALSE 6911
// hero_died := true ;
6903: LD_ADDR_EXP 33
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// end ;
6911: PPOPN 1
6913: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6914: LD_ADDR_OWVAR 48
6918: PUSH
6919: LD_VAR 0 1
6923: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL 24361 0 3
// end ;
6943: PPOPN 3
6945: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL 24369 0 1
// end ;
6955: PPOPN 1
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 24385 0 2
// end ; end_of_file
6972: PPOPN 2
6974: END
// export function RefreshTime ( time , bool ) ; begin
6975: LD_INT 0
6977: PPUSH
// if bool then
6978: LD_VAR 0 2
6982: IFFALSE 7000
// time := time + 0 0$01 else
6984: LD_ADDR_VAR 0 1
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 35
6996: PLUS
6997: ST_TO_ADDR
6998: GO 7014
// time := time - 0 0$01 ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_INT 35
7012: MINUS
7013: ST_TO_ADDR
// result := time ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function MineExist ( side ) ; begin
7029: LD_INT 0
7031: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: IFFALSE 7078
// result := true else
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
7076: GO 7086
// result := false ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 2
7090: RET
// export function FacExist ( side ) ; begin
7091: LD_INT 0
7093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: GREATER
7133: ST_TO_ADDR
// end ;
7134: LD_VAR 0 2
7138: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_VAR 0 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 34
7207: PUSH
7208: LD_INT 31
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: AND
7242: IFFALSE 7318
// for i = 1 to filter do
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 4
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7316
// if not IsControledBy ( filter [ i ] ) then
7262: LD_VAR 0 4
7266: PUSH
7267: LD_VAR 0 3
7271: ARRAY
7272: PPUSH
7273: CALL_OW 312
7277: NOT
7278: IFFALSE 7314
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: CALL_OW 12
7308: ARRAY
7309: PPUSH
7310: CALL_OW 135
7314: GO 7259
7316: POP
7317: POP
// end ;
7318: LD_VAR 0 2
7322: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// hc_class := clas ;
7331: LD_ADDR_OWVAR 28
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: NEG
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 12
7362: PLUS
7363: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: NEG
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 12
7385: PLUS
7386: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 12
7408: PLUS
7409: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 1
7422: NEG
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 12
7431: PLUS
7432: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 8
7469: EQUAL
7470: OR
7471: IFFALSE 7496
// bonus := [ 2 , 0 , 0 , 0 ] ;
7473: LD_ADDR_VAR 0 8
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// if clas = 2 then
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: IFFALSE 7529
// bonus := [ 0 , 2 , 0 , 0 ] ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if clas = 3 then
7529: LD_VAR 0 1
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7562
// bonus := [ 0 , 0 , 2 , 0 ] ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if clas = 4 then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: EQUAL
7570: IFFALSE 7595
// bonus := [ 0 , 0 , 0 , 2 ] ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 4
7602: GREATER
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 9
7611: NONEQUAL
7612: AND
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: LD_INT 5
7621: NONEQUAL
7622: AND
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 8
7631: NONEQUAL
7632: AND
7633: IFFALSE 7658
// bonus := [ 0 , 0 , 0 , 0 ] ;
7635: LD_ADDR_VAR 0 8
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7658: LD_ADDR_OWVAR 30
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: LD_INT 0
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 12
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7713: LD_ADDR_OWVAR 31
7717: PUSH
7718: LD_VAR 0 4
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PLUS
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: LD_INT 2
7745: ARRAY
7746: PLUS
7747: PUSH
7748: LD_VAR 0 6
7752: PUSH
7753: LD_VAR 0 8
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PLUS
7762: PUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 8
7772: PUSH
7773: LD_INT 4
7775: ARRAY
7776: PLUS
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7784: LD_ADDR_OWVAR 27
7788: PUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 2
7794: PPUSH
7795: CALL_OW 12
7799: ST_TO_ADDR
// hc_gallery :=  ;
7800: LD_ADDR_OWVAR 33
7804: PUSH
7805: LD_STRING 
7807: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7808: LD_ADDR_OWVAR 29
7812: PUSH
7813: LD_INT 8
7815: PPUSH
7816: LD_INT 12
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: LD_INT 9
7826: PPUSH
7827: LD_INT 11
7829: PPUSH
7830: CALL_OW 12
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// hc_name :=  ;
7839: LD_ADDR_OWVAR 26
7843: PUSH
7844: LD_STRING 
7846: ST_TO_ADDR
// result := CreateHuman ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: CALL_OW 44
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function GetSpeed ( unit ) ; begin
7862: LD_INT 0
7864: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 464
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 2
7888: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// uc_nation = nation_nature ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// uc_side = 0 ;
7905: LD_ADDR_OWVAR 20
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// l = 0 ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7921: LD_ADDR_OWVAR 24
7925: PUSH
7926: LD_INT 0
7928: PPUSH
7929: LD_INT 5
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7937: LD_ADDR_OWVAR 35
7941: PUSH
7942: LD_INT 5
7944: NEG
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 12
7953: ST_TO_ADDR
// hc_gallery =  ;
7954: LD_ADDR_OWVAR 33
7958: PUSH
7959: LD_STRING 
7961: ST_TO_ADDR
// hc_class = class_apeman ;
7962: LD_ADDR_OWVAR 28
7966: PUSH
7967: LD_INT 12
7969: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7970: LD_ADDR_OWVAR 29
7974: PUSH
7975: LD_INT 11
7977: PPUSH
7978: LD_INT 13
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 11
7991: PPUSH
7992: CALL_OW 12
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// hc_sex = sex_male ;
8001: LD_ADDR_OWVAR 27
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8009: LD_ADDR_OWVAR 31
8013: PUSH
8014: LD_INT 0
8016: PPUSH
8017: LD_INT 2
8019: PPUSH
8020: CALL_OW 12
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// apeman = CreateHuman ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// l = l + 1 ;
8067: LD_ADDR_VAR 0 7
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 1
8079: PLUS
8080: ST_TO_ADDR
// end until l = num1 ;
8081: LD_VAR 0 7
8085: PUSH
8086: LD_VAR 0 2
8090: EQUAL
8091: IFFALSE 7921
// l = 0 ;
8093: LD_ADDR_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8101: LD_ADDR_OWVAR 35
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 25
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// hc_class = class_tiger ;
8117: LD_ADDR_OWVAR 28
8121: PUSH
8122: LD_INT 14
8124: ST_TO_ADDR
// hc_sex = sex_male ;
8125: LD_ADDR_OWVAR 27
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// hc_gallery = sandnature ;
8133: LD_ADDR_OWVAR 33
8137: PUSH
8138: LD_STRING sandnature
8140: ST_TO_ADDR
// hc_face_number = 3 ;
8141: LD_ADDR_OWVAR 34
8145: PUSH
8146: LD_INT 3
8148: ST_TO_ADDR
// tiger = CreateHuman ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 49
// l = l + 1 ;
8176: LD_ADDR_VAR 0 7
8180: PUSH
8181: LD_VAR 0 7
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ST_TO_ADDR
// end until l = num2 ;
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 3
8199: EQUAL
8200: IFFALSE 8101
// l = 0 ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8210: LD_ADDR_OWVAR 28
8214: PUSH
8215: LD_INT 18
8217: ST_TO_ADDR
// hc_gallery = sandnature ;
8218: LD_ADDR_OWVAR 33
8222: PUSH
8223: LD_STRING sandnature
8225: ST_TO_ADDR
// hc_face_number = 1 ;
8226: LD_ADDR_OWVAR 34
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// bird = CreateHuman ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: CALL_OW 44
8243: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8244: LD_VAR 0 10
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 51
// l = l + 1 ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ST_TO_ADDR
// end until l = num3 ;
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 4
8279: EQUAL
8280: IFFALSE 8210
// l = 0 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8290: LD_ADDR_OWVAR 28
8294: PUSH
8295: LD_INT 21
8297: ST_TO_ADDR
// hc_gallery = sandnature ;
8298: LD_ADDR_OWVAR 33
8302: PUSH
8303: LD_STRING sandnature
8305: ST_TO_ADDR
// hc_face_number = 5 ;
8306: LD_ADDR_OWVAR 34
8310: PUSH
8311: LD_INT 5
8313: ST_TO_ADDR
// horse := CreateHuman ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8324: LD_VAR 0 11
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 0
8336: PPUSH
8337: CALL_OW 49
// l = l + 1 ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ST_TO_ADDR
// end until l = num4 ;
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: EQUAL
8365: IFFALSE 8290
// end ;
8367: LD_VAR 0 6
8371: RET
// export function PrepareComm ; begin
8372: LD_INT 0
8374: PPUSH
// uc_side := 1 ;
8375: LD_ADDR_OWVAR 20
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// uc_nation := 1 ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_male ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// am_comander := CreateHuman ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// uc_side := 3 ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_INT 3
8440: ST_TO_ADDR
// uc_nation := 3 ;
8441: LD_ADDR_OWVAR 21
8445: PUSH
8446: LD_INT 3
8448: ST_TO_ADDR
// ru_comander := CreateHuman ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// uc_side := 2 ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_INT 2
8466: ST_TO_ADDR
// uc_nation := 2 ;
8467: LD_ADDR_OWVAR 21
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// hc_name := Heike Steyer ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING Heike Steyer
8482: ST_TO_ADDR
// hc_sex := sex_female ;
8483: LD_ADDR_OWVAR 27
8487: PUSH
8488: LD_INT 2
8490: ST_TO_ADDR
// hc_gallery := sandar ;
8491: LD_ADDR_OWVAR 33
8495: PUSH
8496: LD_STRING sandar
8498: ST_TO_ADDR
// hc_face_number := 14 ;
8499: LD_ADDR_OWVAR 34
8503: PUSH
8504: LD_INT 14
8506: ST_TO_ADDR
// ar_comander := CreateHuman ;
8507: LD_ADDR_EXP 48
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// list := [ ] ;
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i = 1 to filter do
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 1
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8599
// if GetSpeed ( filter [ i ] ) < speed then
8552: LD_VAR 0 1
8556: PUSH
8557: LD_VAR 0 5
8561: ARRAY
8562: PPUSH
8563: CALL 7862 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: LESS
8573: IFFALSE 8597
// list := list ^ filter [ i ] ;
8575: LD_ADDR_VAR 0 4
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 5
8594: ARRAY
8595: ADD
8596: ST_TO_ADDR
8597: GO 8549
8599: POP
8600: POP
// result := list ;
8601: LD_ADDR_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// end ; end_of_file end_of_file
8611: LD_VAR 0 3
8615: RET
// every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin enable ;
8619: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8620: LD_STRING updateTimer(
8622: PUSH
8623: LD_OWVAR 1
8627: STR
8628: PUSH
8629: LD_STRING );
8631: STR
8632: PPUSH
8633: CALL_OW 559
// end ;
8637: END
// export function SOS_MapStart ( ) ; begin
8638: LD_INT 0
8640: PPUSH
// if streamModeActive then
8641: LD_EXP 52
8645: IFFALSE 8654
// DefineStreamItems ( true ) ;
8647: LD_INT 1
8649: PPUSH
8650: CALL 10308 0 1
// UpdateFactoryWaypoints ( ) ;
8654: CALL 23169 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8658: CALL 23426 0 0
// end ;
8662: LD_VAR 0 1
8666: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8667: LD_INT 0
8669: PPUSH
// if p2 = 100 then
8670: LD_VAR 0 2
8674: PUSH
8675: LD_INT 100
8677: EQUAL
8678: IFFALSE 9681
// begin if not StreamModeActive then
8680: LD_EXP 52
8684: NOT
8685: IFFALSE 8695
// StreamModeActive := true ;
8687: LD_ADDR_EXP 52
8691: PUSH
8692: LD_INT 1
8694: ST_TO_ADDR
// if p3 = 0 then
8695: LD_VAR 0 3
8699: PUSH
8700: LD_INT 0
8702: EQUAL
8703: IFFALSE 8709
// InitStreamMode ;
8705: CALL 9844 0 0
// if p3 = 1 then
8709: LD_VAR 0 3
8713: PUSH
8714: LD_INT 1
8716: EQUAL
8717: IFFALSE 8727
// sRocket := true ;
8719: LD_ADDR_EXP 57
8723: PUSH
8724: LD_INT 1
8726: ST_TO_ADDR
// if p3 = 2 then
8727: LD_VAR 0 3
8731: PUSH
8732: LD_INT 2
8734: EQUAL
8735: IFFALSE 8745
// sSpeed := true ;
8737: LD_ADDR_EXP 56
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// if p3 = 3 then
8745: LD_VAR 0 3
8749: PUSH
8750: LD_INT 3
8752: EQUAL
8753: IFFALSE 8763
// sEngine := true ;
8755: LD_ADDR_EXP 58
8759: PUSH
8760: LD_INT 1
8762: ST_TO_ADDR
// if p3 = 4 then
8763: LD_VAR 0 3
8767: PUSH
8768: LD_INT 4
8770: EQUAL
8771: IFFALSE 8781
// sSpec := true ;
8773: LD_ADDR_EXP 55
8777: PUSH
8778: LD_INT 1
8780: ST_TO_ADDR
// if p3 = 5 then
8781: LD_VAR 0 3
8785: PUSH
8786: LD_INT 5
8788: EQUAL
8789: IFFALSE 8799
// sLevel := true ;
8791: LD_ADDR_EXP 59
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// if p3 = 6 then
8799: LD_VAR 0 3
8803: PUSH
8804: LD_INT 6
8806: EQUAL
8807: IFFALSE 8817
// sArmoury := true ;
8809: LD_ADDR_EXP 60
8813: PUSH
8814: LD_INT 1
8816: ST_TO_ADDR
// if p3 = 7 then
8817: LD_VAR 0 3
8821: PUSH
8822: LD_INT 7
8824: EQUAL
8825: IFFALSE 8835
// sRadar := true ;
8827: LD_ADDR_EXP 61
8831: PUSH
8832: LD_INT 1
8834: ST_TO_ADDR
// if p3 = 8 then
8835: LD_VAR 0 3
8839: PUSH
8840: LD_INT 8
8842: EQUAL
8843: IFFALSE 8853
// sBunker := true ;
8845: LD_ADDR_EXP 62
8849: PUSH
8850: LD_INT 1
8852: ST_TO_ADDR
// if p3 = 9 then
8853: LD_VAR 0 3
8857: PUSH
8858: LD_INT 9
8860: EQUAL
8861: IFFALSE 8871
// sHack := true ;
8863: LD_ADDR_EXP 63
8867: PUSH
8868: LD_INT 1
8870: ST_TO_ADDR
// if p3 = 10 then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_INT 10
8878: EQUAL
8879: IFFALSE 8889
// sFire := true ;
8881: LD_ADDR_EXP 64
8885: PUSH
8886: LD_INT 1
8888: ST_TO_ADDR
// if p3 = 11 then
8889: LD_VAR 0 3
8893: PUSH
8894: LD_INT 11
8896: EQUAL
8897: IFFALSE 8907
// sRefresh := true ;
8899: LD_ADDR_EXP 65
8903: PUSH
8904: LD_INT 1
8906: ST_TO_ADDR
// if p3 = 12 then
8907: LD_VAR 0 3
8911: PUSH
8912: LD_INT 12
8914: EQUAL
8915: IFFALSE 8925
// sExp := true ;
8917: LD_ADDR_EXP 66
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// if p3 = 13 then
8925: LD_VAR 0 3
8929: PUSH
8930: LD_INT 13
8932: EQUAL
8933: IFFALSE 8943
// sDepot := true ;
8935: LD_ADDR_EXP 67
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// if p3 = 14 then
8943: LD_VAR 0 3
8947: PUSH
8948: LD_INT 14
8950: EQUAL
8951: IFFALSE 8961
// sFlag := true ;
8953: LD_ADDR_EXP 68
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if p3 = 15 then
8961: LD_VAR 0 3
8965: PUSH
8966: LD_INT 15
8968: EQUAL
8969: IFFALSE 8979
// sKamikadze := true ;
8971: LD_ADDR_EXP 76
8975: PUSH
8976: LD_INT 1
8978: ST_TO_ADDR
// if p3 = 16 then
8979: LD_VAR 0 3
8983: PUSH
8984: LD_INT 16
8986: EQUAL
8987: IFFALSE 8997
// sTroll := true ;
8989: LD_ADDR_EXP 77
8993: PUSH
8994: LD_INT 1
8996: ST_TO_ADDR
// if p3 = 17 then
8997: LD_VAR 0 3
9001: PUSH
9002: LD_INT 17
9004: EQUAL
9005: IFFALSE 9015
// sSlow := true ;
9007: LD_ADDR_EXP 78
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// if p3 = 18 then
9015: LD_VAR 0 3
9019: PUSH
9020: LD_INT 18
9022: EQUAL
9023: IFFALSE 9033
// sLack := true ;
9025: LD_ADDR_EXP 79
9029: PUSH
9030: LD_INT 1
9032: ST_TO_ADDR
// if p3 = 19 then
9033: LD_VAR 0 3
9037: PUSH
9038: LD_INT 19
9040: EQUAL
9041: IFFALSE 9051
// sTank := true ;
9043: LD_ADDR_EXP 81
9047: PUSH
9048: LD_INT 1
9050: ST_TO_ADDR
// if p3 = 20 then
9051: LD_VAR 0 3
9055: PUSH
9056: LD_INT 20
9058: EQUAL
9059: IFFALSE 9069
// sRemote := true ;
9061: LD_ADDR_EXP 82
9065: PUSH
9066: LD_INT 1
9068: ST_TO_ADDR
// if p3 = 21 then
9069: LD_VAR 0 3
9073: PUSH
9074: LD_INT 21
9076: EQUAL
9077: IFFALSE 9087
// sPowell := true ;
9079: LD_ADDR_EXP 83
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// if p3 = 22 then
9087: LD_VAR 0 3
9091: PUSH
9092: LD_INT 22
9094: EQUAL
9095: IFFALSE 9105
// sTeleport := true ;
9097: LD_ADDR_EXP 86
9101: PUSH
9102: LD_INT 1
9104: ST_TO_ADDR
// if p3 = 23 then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_INT 23
9112: EQUAL
9113: IFFALSE 9123
// sOilTower := true ;
9115: LD_ADDR_EXP 88
9119: PUSH
9120: LD_INT 1
9122: ST_TO_ADDR
// if p3 = 24 then
9123: LD_VAR 0 3
9127: PUSH
9128: LD_INT 24
9130: EQUAL
9131: IFFALSE 9141
// sShovel := true ;
9133: LD_ADDR_EXP 89
9137: PUSH
9138: LD_INT 1
9140: ST_TO_ADDR
// if p3 = 25 then
9141: LD_VAR 0 3
9145: PUSH
9146: LD_INT 25
9148: EQUAL
9149: IFFALSE 9159
// sSheik := true ;
9151: LD_ADDR_EXP 90
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// if p3 = 26 then
9159: LD_VAR 0 3
9163: PUSH
9164: LD_INT 26
9166: EQUAL
9167: IFFALSE 9177
// sEarthquake := true ;
9169: LD_ADDR_EXP 92
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// if p3 = 27 then
9177: LD_VAR 0 3
9181: PUSH
9182: LD_INT 27
9184: EQUAL
9185: IFFALSE 9195
// sAI := true ;
9187: LD_ADDR_EXP 93
9191: PUSH
9192: LD_INT 1
9194: ST_TO_ADDR
// if p3 = 28 then
9195: LD_VAR 0 3
9199: PUSH
9200: LD_INT 28
9202: EQUAL
9203: IFFALSE 9213
// sCargo := true ;
9205: LD_ADDR_EXP 96
9209: PUSH
9210: LD_INT 1
9212: ST_TO_ADDR
// if p3 = 29 then
9213: LD_VAR 0 3
9217: PUSH
9218: LD_INT 29
9220: EQUAL
9221: IFFALSE 9231
// sDLaser := true ;
9223: LD_ADDR_EXP 97
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// if p3 = 30 then
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 30
9238: EQUAL
9239: IFFALSE 9249
// sExchange := true ;
9241: LD_ADDR_EXP 98
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// if p3 = 31 then
9249: LD_VAR 0 3
9253: PUSH
9254: LD_INT 31
9256: EQUAL
9257: IFFALSE 9267
// sFac := true ;
9259: LD_ADDR_EXP 99
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// if p3 = 32 then
9267: LD_VAR 0 3
9271: PUSH
9272: LD_INT 32
9274: EQUAL
9275: IFFALSE 9285
// sPower := true ;
9277: LD_ADDR_EXP 100
9281: PUSH
9282: LD_INT 1
9284: ST_TO_ADDR
// if p3 = 33 then
9285: LD_VAR 0 3
9289: PUSH
9290: LD_INT 33
9292: EQUAL
9293: IFFALSE 9303
// sRandom := true ;
9295: LD_ADDR_EXP 101
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// if p3 = 34 then
9303: LD_VAR 0 3
9307: PUSH
9308: LD_INT 34
9310: EQUAL
9311: IFFALSE 9321
// sShield := true ;
9313: LD_ADDR_EXP 102
9317: PUSH
9318: LD_INT 1
9320: ST_TO_ADDR
// if p3 = 35 then
9321: LD_VAR 0 3
9325: PUSH
9326: LD_INT 35
9328: EQUAL
9329: IFFALSE 9339
// sTime := true ;
9331: LD_ADDR_EXP 103
9335: PUSH
9336: LD_INT 1
9338: ST_TO_ADDR
// if p3 = 36 then
9339: LD_VAR 0 3
9343: PUSH
9344: LD_INT 36
9346: EQUAL
9347: IFFALSE 9357
// sTools := true ;
9349: LD_ADDR_EXP 104
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// if p3 = 101 then
9357: LD_VAR 0 3
9361: PUSH
9362: LD_INT 101
9364: EQUAL
9365: IFFALSE 9375
// sSold := true ;
9367: LD_ADDR_EXP 69
9371: PUSH
9372: LD_INT 1
9374: ST_TO_ADDR
// if p3 = 102 then
9375: LD_VAR 0 3
9379: PUSH
9380: LD_INT 102
9382: EQUAL
9383: IFFALSE 9393
// sDiff := true ;
9385: LD_ADDR_EXP 70
9389: PUSH
9390: LD_INT 1
9392: ST_TO_ADDR
// if p3 = 103 then
9393: LD_VAR 0 3
9397: PUSH
9398: LD_INT 103
9400: EQUAL
9401: IFFALSE 9411
// sFog := true ;
9403: LD_ADDR_EXP 73
9407: PUSH
9408: LD_INT 1
9410: ST_TO_ADDR
// if p3 = 104 then
9411: LD_VAR 0 3
9415: PUSH
9416: LD_INT 104
9418: EQUAL
9419: IFFALSE 9429
// sReset := true ;
9421: LD_ADDR_EXP 74
9425: PUSH
9426: LD_INT 1
9428: ST_TO_ADDR
// if p3 = 105 then
9429: LD_VAR 0 3
9433: PUSH
9434: LD_INT 105
9436: EQUAL
9437: IFFALSE 9447
// sSun := true ;
9439: LD_ADDR_EXP 75
9443: PUSH
9444: LD_INT 1
9446: ST_TO_ADDR
// if p3 = 106 then
9447: LD_VAR 0 3
9451: PUSH
9452: LD_INT 106
9454: EQUAL
9455: IFFALSE 9465
// sTiger := true ;
9457: LD_ADDR_EXP 71
9461: PUSH
9462: LD_INT 1
9464: ST_TO_ADDR
// if p3 = 107 then
9465: LD_VAR 0 3
9469: PUSH
9470: LD_INT 107
9472: EQUAL
9473: IFFALSE 9483
// sBomb := true ;
9475: LD_ADDR_EXP 72
9479: PUSH
9480: LD_INT 1
9482: ST_TO_ADDR
// if p3 = 108 then
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 108
9490: EQUAL
9491: IFFALSE 9501
// sWound := true ;
9493: LD_ADDR_EXP 80
9497: PUSH
9498: LD_INT 1
9500: ST_TO_ADDR
// if p3 = 109 then
9501: LD_VAR 0 3
9505: PUSH
9506: LD_INT 109
9508: EQUAL
9509: IFFALSE 9519
// sBetray := true ;
9511: LD_ADDR_EXP 84
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// if p3 = 110 then
9519: LD_VAR 0 3
9523: PUSH
9524: LD_INT 110
9526: EQUAL
9527: IFFALSE 9537
// sContamin := true ;
9529: LD_ADDR_EXP 85
9533: PUSH
9534: LD_INT 1
9536: ST_TO_ADDR
// if p3 = 111 then
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 111
9544: EQUAL
9545: IFFALSE 9555
// sOil := true ;
9547: LD_ADDR_EXP 87
9551: PUSH
9552: LD_INT 1
9554: ST_TO_ADDR
// if p3 = 112 then
9555: LD_VAR 0 3
9559: PUSH
9560: LD_INT 112
9562: EQUAL
9563: IFFALSE 9573
// sStu := true ;
9565: LD_ADDR_EXP 91
9569: PUSH
9570: LD_INT 1
9572: ST_TO_ADDR
// if p3 = 113 then
9573: LD_VAR 0 3
9577: PUSH
9578: LD_INT 113
9580: EQUAL
9581: IFFALSE 9591
// sBazooka := true ;
9583: LD_ADDR_EXP 94
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// if p3 = 114 then
9591: LD_VAR 0 3
9595: PUSH
9596: LD_INT 114
9598: EQUAL
9599: IFFALSE 9609
// sMortar := true ;
9601: LD_ADDR_EXP 95
9605: PUSH
9606: LD_INT 1
9608: ST_TO_ADDR
// if p3 = 115 then
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 115
9616: EQUAL
9617: IFFALSE 9627
// sRanger := true ;
9619: LD_ADDR_EXP 105
9623: PUSH
9624: LD_INT 1
9626: ST_TO_ADDR
// if p3 = 116 then
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 116
9634: EQUAL
9635: IFFALSE 9645
// sComputer := true ;
9637: LD_ADDR_EXP 106
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// if p3 = 117 then
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 117
9652: EQUAL
9653: IFFALSE 9663
// s30 := true ;
9655: LD_ADDR_EXP 107
9659: PUSH
9660: LD_INT 1
9662: ST_TO_ADDR
// if p3 = 118 then
9663: LD_VAR 0 3
9667: PUSH
9668: LD_INT 118
9670: EQUAL
9671: IFFALSE 9681
// s60 := true ;
9673: LD_ADDR_EXP 108
9677: PUSH
9678: LD_INT 1
9680: ST_TO_ADDR
// end ; if p2 = 101 then
9681: LD_VAR 0 2
9685: PUSH
9686: LD_INT 101
9688: EQUAL
9689: IFFALSE 9817
// begin case p3 of 1 :
9691: LD_VAR 0 3
9695: PUSH
9696: LD_INT 1
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9711
9704: POP
// hHackUnlimitedResources ; 2 :
9705: CALL 21915 0 0
9709: GO 9817
9711: LD_INT 2
9713: DOUBLE
9714: EQUAL
9715: IFTRUE 9719
9717: GO 9726
9719: POP
// hHackSetLevel10 ; 3 :
9720: CALL 22048 0 0
9724: GO 9817
9726: LD_INT 3
9728: DOUBLE
9729: EQUAL
9730: IFTRUE 9734
9732: GO 9741
9734: POP
// hHackSetLevel10YourUnits ; 4 :
9735: CALL 22133 0 0
9739: GO 9817
9741: LD_INT 4
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9756
9749: POP
// hHackInvincible ; 5 :
9750: CALL 22581 0 0
9754: GO 9817
9756: LD_INT 5
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9771
9764: POP
// hHackInvisible ; 6 :
9765: CALL 22692 0 0
9769: GO 9817
9771: LD_INT 6
9773: DOUBLE
9774: EQUAL
9775: IFTRUE 9779
9777: GO 9786
9779: POP
// hHackChangeYourSide ; 7 :
9780: CALL 22749 0 0
9784: GO 9817
9786: LD_INT 7
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9801
9794: POP
// hHackChangeUnitSide ; 8 :
9795: CALL 22791 0 0
9799: GO 9817
9801: LD_INT 8
9803: DOUBLE
9804: EQUAL
9805: IFTRUE 9809
9807: GO 9816
9809: POP
// hHackFog ; end ;
9810: CALL 22892 0 0
9814: GO 9817
9816: POP
// end ; end ;
9817: LD_VAR 0 7
9821: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9822: GO 9824
9824: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9825: LD_STRING initStreamRollete();
9827: PPUSH
9828: CALL_OW 559
// InitStreamMode ;
9832: CALL 9844 0 0
// DefineStreamItems ( false ) ;
9836: LD_INT 0
9838: PPUSH
9839: CALL 10308 0 1
// end ;
9843: END
// function InitStreamMode ; begin
9844: LD_INT 0
9846: PPUSH
// streamModeActive := false ;
9847: LD_ADDR_EXP 52
9851: PUSH
9852: LD_INT 0
9854: ST_TO_ADDR
// normalCounter := 36 ;
9855: LD_ADDR_EXP 53
9859: PUSH
9860: LD_INT 36
9862: ST_TO_ADDR
// hardcoreCounter := 18 ;
9863: LD_ADDR_EXP 54
9867: PUSH
9868: LD_INT 18
9870: ST_TO_ADDR
// sRocket := false ;
9871: LD_ADDR_EXP 57
9875: PUSH
9876: LD_INT 0
9878: ST_TO_ADDR
// sSpeed := false ;
9879: LD_ADDR_EXP 56
9883: PUSH
9884: LD_INT 0
9886: ST_TO_ADDR
// sEngine := false ;
9887: LD_ADDR_EXP 58
9891: PUSH
9892: LD_INT 0
9894: ST_TO_ADDR
// sSpec := false ;
9895: LD_ADDR_EXP 55
9899: PUSH
9900: LD_INT 0
9902: ST_TO_ADDR
// sLevel := false ;
9903: LD_ADDR_EXP 59
9907: PUSH
9908: LD_INT 0
9910: ST_TO_ADDR
// sArmoury := false ;
9911: LD_ADDR_EXP 60
9915: PUSH
9916: LD_INT 0
9918: ST_TO_ADDR
// sRadar := false ;
9919: LD_ADDR_EXP 61
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// sBunker := false ;
9927: LD_ADDR_EXP 62
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// sHack := false ;
9935: LD_ADDR_EXP 63
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// sFire := false ;
9943: LD_ADDR_EXP 64
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// sRefresh := false ;
9951: LD_ADDR_EXP 65
9955: PUSH
9956: LD_INT 0
9958: ST_TO_ADDR
// sExp := false ;
9959: LD_ADDR_EXP 66
9963: PUSH
9964: LD_INT 0
9966: ST_TO_ADDR
// sDepot := false ;
9967: LD_ADDR_EXP 67
9971: PUSH
9972: LD_INT 0
9974: ST_TO_ADDR
// sFlag := false ;
9975: LD_ADDR_EXP 68
9979: PUSH
9980: LD_INT 0
9982: ST_TO_ADDR
// sKamikadze := false ;
9983: LD_ADDR_EXP 76
9987: PUSH
9988: LD_INT 0
9990: ST_TO_ADDR
// sTroll := false ;
9991: LD_ADDR_EXP 77
9995: PUSH
9996: LD_INT 0
9998: ST_TO_ADDR
// sSlow := false ;
9999: LD_ADDR_EXP 78
10003: PUSH
10004: LD_INT 0
10006: ST_TO_ADDR
// sLack := false ;
10007: LD_ADDR_EXP 79
10011: PUSH
10012: LD_INT 0
10014: ST_TO_ADDR
// sTank := false ;
10015: LD_ADDR_EXP 81
10019: PUSH
10020: LD_INT 0
10022: ST_TO_ADDR
// sRemote := false ;
10023: LD_ADDR_EXP 82
10027: PUSH
10028: LD_INT 0
10030: ST_TO_ADDR
// sPowell := false ;
10031: LD_ADDR_EXP 83
10035: PUSH
10036: LD_INT 0
10038: ST_TO_ADDR
// sTeleport := false ;
10039: LD_ADDR_EXP 86
10043: PUSH
10044: LD_INT 0
10046: ST_TO_ADDR
// sOilTower := false ;
10047: LD_ADDR_EXP 88
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// sShovel := false ;
10055: LD_ADDR_EXP 89
10059: PUSH
10060: LD_INT 0
10062: ST_TO_ADDR
// sSheik := false ;
10063: LD_ADDR_EXP 90
10067: PUSH
10068: LD_INT 0
10070: ST_TO_ADDR
// sEarthquake := false ;
10071: LD_ADDR_EXP 92
10075: PUSH
10076: LD_INT 0
10078: ST_TO_ADDR
// sAI := false ;
10079: LD_ADDR_EXP 93
10083: PUSH
10084: LD_INT 0
10086: ST_TO_ADDR
// sCargo := false ;
10087: LD_ADDR_EXP 96
10091: PUSH
10092: LD_INT 0
10094: ST_TO_ADDR
// sDLaser := false ;
10095: LD_ADDR_EXP 97
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// sExchange := false ;
10103: LD_ADDR_EXP 98
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// sFac := false ;
10111: LD_ADDR_EXP 99
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// sPower := false ;
10119: LD_ADDR_EXP 100
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// sRandom := false ;
10127: LD_ADDR_EXP 101
10131: PUSH
10132: LD_INT 0
10134: ST_TO_ADDR
// sShield := false ;
10135: LD_ADDR_EXP 102
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// sTime := false ;
10143: LD_ADDR_EXP 103
10147: PUSH
10148: LD_INT 0
10150: ST_TO_ADDR
// sTools := false ;
10151: LD_ADDR_EXP 104
10155: PUSH
10156: LD_INT 0
10158: ST_TO_ADDR
// sSold := false ;
10159: LD_ADDR_EXP 69
10163: PUSH
10164: LD_INT 0
10166: ST_TO_ADDR
// sDiff := false ;
10167: LD_ADDR_EXP 70
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// sFog := false ;
10175: LD_ADDR_EXP 73
10179: PUSH
10180: LD_INT 0
10182: ST_TO_ADDR
// sReset := false ;
10183: LD_ADDR_EXP 74
10187: PUSH
10188: LD_INT 0
10190: ST_TO_ADDR
// sSun := false ;
10191: LD_ADDR_EXP 75
10195: PUSH
10196: LD_INT 0
10198: ST_TO_ADDR
// sTiger := false ;
10199: LD_ADDR_EXP 71
10203: PUSH
10204: LD_INT 0
10206: ST_TO_ADDR
// sBomb := false ;
10207: LD_ADDR_EXP 72
10211: PUSH
10212: LD_INT 0
10214: ST_TO_ADDR
// sWound := false ;
10215: LD_ADDR_EXP 80
10219: PUSH
10220: LD_INT 0
10222: ST_TO_ADDR
// sBetray := false ;
10223: LD_ADDR_EXP 84
10227: PUSH
10228: LD_INT 0
10230: ST_TO_ADDR
// sContamin := false ;
10231: LD_ADDR_EXP 85
10235: PUSH
10236: LD_INT 0
10238: ST_TO_ADDR
// sOil := false ;
10239: LD_ADDR_EXP 87
10243: PUSH
10244: LD_INT 0
10246: ST_TO_ADDR
// sStu := false ;
10247: LD_ADDR_EXP 91
10251: PUSH
10252: LD_INT 0
10254: ST_TO_ADDR
// sBazooka := false ;
10255: LD_ADDR_EXP 94
10259: PUSH
10260: LD_INT 0
10262: ST_TO_ADDR
// sMortar := false ;
10263: LD_ADDR_EXP 95
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// sRanger := false ;
10271: LD_ADDR_EXP 105
10275: PUSH
10276: LD_INT 0
10278: ST_TO_ADDR
// sComputer := false ;
10279: LD_ADDR_EXP 106
10283: PUSH
10284: LD_INT 0
10286: ST_TO_ADDR
// s30 := false ;
10287: LD_ADDR_EXP 107
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// s60 := false ;
10295: LD_ADDR_EXP 108
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// end ;
10303: LD_VAR 0 1
10307: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
// result := [ ] ;
10317: LD_ADDR_VAR 0 2
10321: PUSH
10322: EMPTY
10323: ST_TO_ADDR
// if campaign_id = 1 then
10324: LD_OWVAR 69
10328: PUSH
10329: LD_INT 1
10331: EQUAL
10332: IFFALSE 13498
// begin case mission_number of 1 :
10334: LD_OWVAR 70
10338: PUSH
10339: LD_INT 1
10341: DOUBLE
10342: EQUAL
10343: IFTRUE 10347
10345: GO 10423
10347: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 4
10358: PUSH
10359: LD_INT 11
10361: PUSH
10362: LD_INT 12
10364: PUSH
10365: LD_INT 15
10367: PUSH
10368: LD_INT 16
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 23
10376: PUSH
10377: LD_INT 26
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 101
10393: PUSH
10394: LD_INT 102
10396: PUSH
10397: LD_INT 106
10399: PUSH
10400: LD_INT 116
10402: PUSH
10403: LD_INT 117
10405: PUSH
10406: LD_INT 118
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: ST_TO_ADDR
10421: GO 13496
10423: LD_INT 2
10425: DOUBLE
10426: EQUAL
10427: IFTRUE 10431
10429: GO 10515
10431: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10432: LD_ADDR_VAR 0 2
10436: PUSH
10437: LD_INT 2
10439: PUSH
10440: LD_INT 4
10442: PUSH
10443: LD_INT 11
10445: PUSH
10446: LD_INT 12
10448: PUSH
10449: LD_INT 15
10451: PUSH
10452: LD_INT 16
10454: PUSH
10455: LD_INT 22
10457: PUSH
10458: LD_INT 23
10460: PUSH
10461: LD_INT 26
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 101
10477: PUSH
10478: LD_INT 102
10480: PUSH
10481: LD_INT 105
10483: PUSH
10484: LD_INT 106
10486: PUSH
10487: LD_INT 108
10489: PUSH
10490: LD_INT 116
10492: PUSH
10493: LD_INT 117
10495: PUSH
10496: LD_INT 118
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: ST_TO_ADDR
10513: GO 13496
10515: LD_INT 3
10517: DOUBLE
10518: EQUAL
10519: IFTRUE 10523
10521: GO 10611
10523: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10524: LD_ADDR_VAR 0 2
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 4
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 11
10540: PUSH
10541: LD_INT 12
10543: PUSH
10544: LD_INT 15
10546: PUSH
10547: LD_INT 16
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 26
10555: PUSH
10556: LD_INT 36
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 101
10573: PUSH
10574: LD_INT 102
10576: PUSH
10577: LD_INT 105
10579: PUSH
10580: LD_INT 106
10582: PUSH
10583: LD_INT 108
10585: PUSH
10586: LD_INT 116
10588: PUSH
10589: LD_INT 117
10591: PUSH
10592: LD_INT 118
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: ST_TO_ADDR
10609: GO 13496
10611: LD_INT 4
10613: DOUBLE
10614: EQUAL
10615: IFTRUE 10619
10617: GO 10715
10619: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10620: LD_ADDR_VAR 0 2
10624: PUSH
10625: LD_INT 2
10627: PUSH
10628: LD_INT 4
10630: PUSH
10631: LD_INT 5
10633: PUSH
10634: LD_INT 8
10636: PUSH
10637: LD_INT 11
10639: PUSH
10640: LD_INT 12
10642: PUSH
10643: LD_INT 15
10645: PUSH
10646: LD_INT 16
10648: PUSH
10649: LD_INT 22
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 26
10657: PUSH
10658: LD_INT 36
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 101
10677: PUSH
10678: LD_INT 102
10680: PUSH
10681: LD_INT 105
10683: PUSH
10684: LD_INT 106
10686: PUSH
10687: LD_INT 108
10689: PUSH
10690: LD_INT 116
10692: PUSH
10693: LD_INT 117
10695: PUSH
10696: LD_INT 118
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: ST_TO_ADDR
10713: GO 13496
10715: LD_INT 5
10717: DOUBLE
10718: EQUAL
10719: IFTRUE 10723
10721: GO 10835
10723: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10724: LD_ADDR_VAR 0 2
10728: PUSH
10729: LD_INT 2
10731: PUSH
10732: LD_INT 4
10734: PUSH
10735: LD_INT 5
10737: PUSH
10738: LD_INT 6
10740: PUSH
10741: LD_INT 8
10743: PUSH
10744: LD_INT 11
10746: PUSH
10747: LD_INT 12
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 22
10758: PUSH
10759: LD_INT 23
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 26
10767: PUSH
10768: LD_INT 36
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 101
10789: PUSH
10790: LD_INT 102
10792: PUSH
10793: LD_INT 105
10795: PUSH
10796: LD_INT 106
10798: PUSH
10799: LD_INT 108
10801: PUSH
10802: LD_INT 109
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: LD_INT 116
10810: PUSH
10811: LD_INT 117
10813: PUSH
10814: LD_INT 118
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: ST_TO_ADDR
10833: GO 13496
10835: LD_INT 6
10837: DOUBLE
10838: EQUAL
10839: IFTRUE 10843
10841: GO 10975
10843: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10844: LD_ADDR_VAR 0 2
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: LD_INT 4
10854: PUSH
10855: LD_INT 5
10857: PUSH
10858: LD_INT 6
10860: PUSH
10861: LD_INT 8
10863: PUSH
10864: LD_INT 11
10866: PUSH
10867: LD_INT 12
10869: PUSH
10870: LD_INT 15
10872: PUSH
10873: LD_INT 16
10875: PUSH
10876: LD_INT 20
10878: PUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 22
10884: PUSH
10885: LD_INT 23
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 26
10893: PUSH
10894: LD_INT 30
10896: PUSH
10897: LD_INT 31
10899: PUSH
10900: LD_INT 32
10902: PUSH
10903: LD_INT 36
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 101
10929: PUSH
10930: LD_INT 102
10932: PUSH
10933: LD_INT 105
10935: PUSH
10936: LD_INT 106
10938: PUSH
10939: LD_INT 108
10941: PUSH
10942: LD_INT 109
10944: PUSH
10945: LD_INT 112
10947: PUSH
10948: LD_INT 116
10950: PUSH
10951: LD_INT 117
10953: PUSH
10954: LD_INT 118
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: ST_TO_ADDR
10973: GO 13496
10975: LD_INT 7
10977: DOUBLE
10978: EQUAL
10979: IFTRUE 10983
10981: GO 11095
10983: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10984: LD_ADDR_VAR 0 2
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 4
10994: PUSH
10995: LD_INT 5
10997: PUSH
10998: LD_INT 7
11000: PUSH
11001: LD_INT 11
11003: PUSH
11004: LD_INT 12
11006: PUSH
11007: LD_INT 15
11009: PUSH
11010: LD_INT 16
11012: PUSH
11013: LD_INT 20
11015: PUSH
11016: LD_INT 21
11018: PUSH
11019: LD_INT 22
11021: PUSH
11022: LD_INT 23
11024: PUSH
11025: LD_INT 25
11027: PUSH
11028: LD_INT 26
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 101
11049: PUSH
11050: LD_INT 102
11052: PUSH
11053: LD_INT 103
11055: PUSH
11056: LD_INT 105
11058: PUSH
11059: LD_INT 106
11061: PUSH
11062: LD_INT 108
11064: PUSH
11065: LD_INT 112
11067: PUSH
11068: LD_INT 116
11070: PUSH
11071: LD_INT 117
11073: PUSH
11074: LD_INT 118
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: ST_TO_ADDR
11093: GO 13496
11095: LD_INT 8
11097: DOUBLE
11098: EQUAL
11099: IFTRUE 11103
11101: GO 11243
11103: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11104: LD_ADDR_VAR 0 2
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: LD_INT 4
11114: PUSH
11115: LD_INT 5
11117: PUSH
11118: LD_INT 6
11120: PUSH
11121: LD_INT 7
11123: PUSH
11124: LD_INT 8
11126: PUSH
11127: LD_INT 11
11129: PUSH
11130: LD_INT 12
11132: PUSH
11133: LD_INT 15
11135: PUSH
11136: LD_INT 16
11138: PUSH
11139: LD_INT 20
11141: PUSH
11142: LD_INT 21
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_INT 23
11150: PUSH
11151: LD_INT 25
11153: PUSH
11154: LD_INT 26
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 31
11162: PUSH
11163: LD_INT 32
11165: PUSH
11166: LD_INT 36
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 101
11193: PUSH
11194: LD_INT 102
11196: PUSH
11197: LD_INT 103
11199: PUSH
11200: LD_INT 105
11202: PUSH
11203: LD_INT 106
11205: PUSH
11206: LD_INT 108
11208: PUSH
11209: LD_INT 109
11211: PUSH
11212: LD_INT 112
11214: PUSH
11215: LD_INT 116
11217: PUSH
11218: LD_INT 117
11220: PUSH
11221: LD_INT 118
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: ST_TO_ADDR
11241: GO 13496
11243: LD_INT 9
11245: DOUBLE
11246: EQUAL
11247: IFTRUE 11251
11249: GO 11399
11251: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: LD_INT 5
11265: PUSH
11266: LD_INT 6
11268: PUSH
11269: LD_INT 7
11271: PUSH
11272: LD_INT 8
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 12
11280: PUSH
11281: LD_INT 15
11283: PUSH
11284: LD_INT 16
11286: PUSH
11287: LD_INT 20
11289: PUSH
11290: LD_INT 21
11292: PUSH
11293: LD_INT 22
11295: PUSH
11296: LD_INT 23
11298: PUSH
11299: LD_INT 25
11301: PUSH
11302: LD_INT 26
11304: PUSH
11305: LD_INT 28
11307: PUSH
11308: LD_INT 30
11310: PUSH
11311: LD_INT 31
11313: PUSH
11314: LD_INT 32
11316: PUSH
11317: LD_INT 36
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 101
11345: PUSH
11346: LD_INT 102
11348: PUSH
11349: LD_INT 103
11351: PUSH
11352: LD_INT 105
11354: PUSH
11355: LD_INT 106
11357: PUSH
11358: LD_INT 108
11360: PUSH
11361: LD_INT 109
11363: PUSH
11364: LD_INT 112
11366: PUSH
11367: LD_INT 114
11369: PUSH
11370: LD_INT 116
11372: PUSH
11373: LD_INT 117
11375: PUSH
11376: LD_INT 118
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: ST_TO_ADDR
11397: GO 13496
11399: LD_INT 10
11401: DOUBLE
11402: EQUAL
11403: IFTRUE 11407
11405: GO 11603
11407: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11408: LD_ADDR_VAR 0 2
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: LD_INT 4
11418: PUSH
11419: LD_INT 5
11421: PUSH
11422: LD_INT 6
11424: PUSH
11425: LD_INT 7
11427: PUSH
11428: LD_INT 8
11430: PUSH
11431: LD_INT 9
11433: PUSH
11434: LD_INT 10
11436: PUSH
11437: LD_INT 11
11439: PUSH
11440: LD_INT 12
11442: PUSH
11443: LD_INT 13
11445: PUSH
11446: LD_INT 14
11448: PUSH
11449: LD_INT 15
11451: PUSH
11452: LD_INT 16
11454: PUSH
11455: LD_INT 17
11457: PUSH
11458: LD_INT 18
11460: PUSH
11461: LD_INT 19
11463: PUSH
11464: LD_INT 20
11466: PUSH
11467: LD_INT 21
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 23
11475: PUSH
11476: LD_INT 24
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: LD_INT 26
11484: PUSH
11485: LD_INT 28
11487: PUSH
11488: LD_INT 30
11490: PUSH
11491: LD_INT 31
11493: PUSH
11494: LD_INT 32
11496: PUSH
11497: LD_INT 36
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 101
11533: PUSH
11534: LD_INT 102
11536: PUSH
11537: LD_INT 103
11539: PUSH
11540: LD_INT 104
11542: PUSH
11543: LD_INT 105
11545: PUSH
11546: LD_INT 106
11548: PUSH
11549: LD_INT 107
11551: PUSH
11552: LD_INT 108
11554: PUSH
11555: LD_INT 109
11557: PUSH
11558: LD_INT 110
11560: PUSH
11561: LD_INT 111
11563: PUSH
11564: LD_INT 112
11566: PUSH
11567: LD_INT 114
11569: PUSH
11570: LD_INT 116
11572: PUSH
11573: LD_INT 117
11575: PUSH
11576: LD_INT 118
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: ST_TO_ADDR
11601: GO 13496
11603: LD_INT 11
11605: DOUBLE
11606: EQUAL
11607: IFTRUE 11611
11609: GO 11815
11611: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11612: LD_ADDR_VAR 0 2
11616: PUSH
11617: LD_INT 2
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: LD_INT 4
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: LD_INT 6
11631: PUSH
11632: LD_INT 7
11634: PUSH
11635: LD_INT 8
11637: PUSH
11638: LD_INT 9
11640: PUSH
11641: LD_INT 10
11643: PUSH
11644: LD_INT 11
11646: PUSH
11647: LD_INT 12
11649: PUSH
11650: LD_INT 13
11652: PUSH
11653: LD_INT 14
11655: PUSH
11656: LD_INT 15
11658: PUSH
11659: LD_INT 16
11661: PUSH
11662: LD_INT 17
11664: PUSH
11665: LD_INT 18
11667: PUSH
11668: LD_INT 19
11670: PUSH
11671: LD_INT 20
11673: PUSH
11674: LD_INT 21
11676: PUSH
11677: LD_INT 22
11679: PUSH
11680: LD_INT 23
11682: PUSH
11683: LD_INT 24
11685: PUSH
11686: LD_INT 25
11688: PUSH
11689: LD_INT 26
11691: PUSH
11692: LD_INT 28
11694: PUSH
11695: LD_INT 30
11697: PUSH
11698: LD_INT 31
11700: PUSH
11701: LD_INT 32
11703: PUSH
11704: LD_INT 34
11706: PUSH
11707: LD_INT 36
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 101
11745: PUSH
11746: LD_INT 102
11748: PUSH
11749: LD_INT 103
11751: PUSH
11752: LD_INT 104
11754: PUSH
11755: LD_INT 105
11757: PUSH
11758: LD_INT 106
11760: PUSH
11761: LD_INT 107
11763: PUSH
11764: LD_INT 108
11766: PUSH
11767: LD_INT 109
11769: PUSH
11770: LD_INT 110
11772: PUSH
11773: LD_INT 111
11775: PUSH
11776: LD_INT 112
11778: PUSH
11779: LD_INT 114
11781: PUSH
11782: LD_INT 116
11784: PUSH
11785: LD_INT 117
11787: PUSH
11788: LD_INT 118
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: ST_TO_ADDR
11813: GO 13496
11815: LD_INT 12
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 12043
11823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: LD_INT 2
11834: PUSH
11835: LD_INT 3
11837: PUSH
11838: LD_INT 4
11840: PUSH
11841: LD_INT 5
11843: PUSH
11844: LD_INT 6
11846: PUSH
11847: LD_INT 7
11849: PUSH
11850: LD_INT 8
11852: PUSH
11853: LD_INT 9
11855: PUSH
11856: LD_INT 10
11858: PUSH
11859: LD_INT 11
11861: PUSH
11862: LD_INT 12
11864: PUSH
11865: LD_INT 13
11867: PUSH
11868: LD_INT 14
11870: PUSH
11871: LD_INT 15
11873: PUSH
11874: LD_INT 16
11876: PUSH
11877: LD_INT 17
11879: PUSH
11880: LD_INT 18
11882: PUSH
11883: LD_INT 19
11885: PUSH
11886: LD_INT 20
11888: PUSH
11889: LD_INT 21
11891: PUSH
11892: LD_INT 22
11894: PUSH
11895: LD_INT 23
11897: PUSH
11898: LD_INT 24
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 26
11906: PUSH
11907: LD_INT 27
11909: PUSH
11910: LD_INT 28
11912: PUSH
11913: LD_INT 30
11915: PUSH
11916: LD_INT 31
11918: PUSH
11919: LD_INT 32
11921: PUSH
11922: LD_INT 33
11924: PUSH
11925: LD_INT 34
11927: PUSH
11928: LD_INT 36
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 101
11969: PUSH
11970: LD_INT 102
11972: PUSH
11973: LD_INT 103
11975: PUSH
11976: LD_INT 104
11978: PUSH
11979: LD_INT 105
11981: PUSH
11982: LD_INT 106
11984: PUSH
11985: LD_INT 107
11987: PUSH
11988: LD_INT 108
11990: PUSH
11991: LD_INT 109
11993: PUSH
11994: LD_INT 110
11996: PUSH
11997: LD_INT 111
11999: PUSH
12000: LD_INT 112
12002: PUSH
12003: LD_INT 113
12005: PUSH
12006: LD_INT 114
12008: PUSH
12009: LD_INT 116
12011: PUSH
12012: LD_INT 117
12014: PUSH
12015: LD_INT 118
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: ST_TO_ADDR
12041: GO 13496
12043: LD_INT 13
12045: DOUBLE
12046: EQUAL
12047: IFTRUE 12051
12049: GO 12259
12051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12052: LD_ADDR_VAR 0 2
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 3
12065: PUSH
12066: LD_INT 4
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: LD_INT 8
12074: PUSH
12075: LD_INT 9
12077: PUSH
12078: LD_INT 10
12080: PUSH
12081: LD_INT 11
12083: PUSH
12084: LD_INT 12
12086: PUSH
12087: LD_INT 14
12089: PUSH
12090: LD_INT 15
12092: PUSH
12093: LD_INT 16
12095: PUSH
12096: LD_INT 17
12098: PUSH
12099: LD_INT 18
12101: PUSH
12102: LD_INT 19
12104: PUSH
12105: LD_INT 20
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 24
12119: PUSH
12120: LD_INT 25
12122: PUSH
12123: LD_INT 26
12125: PUSH
12126: LD_INT 27
12128: PUSH
12129: LD_INT 28
12131: PUSH
12132: LD_INT 30
12134: PUSH
12135: LD_INT 31
12137: PUSH
12138: LD_INT 32
12140: PUSH
12141: LD_INT 33
12143: PUSH
12144: LD_INT 34
12146: PUSH
12147: LD_INT 36
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 101
12185: PUSH
12186: LD_INT 102
12188: PUSH
12189: LD_INT 103
12191: PUSH
12192: LD_INT 104
12194: PUSH
12195: LD_INT 105
12197: PUSH
12198: LD_INT 106
12200: PUSH
12201: LD_INT 107
12203: PUSH
12204: LD_INT 108
12206: PUSH
12207: LD_INT 109
12209: PUSH
12210: LD_INT 110
12212: PUSH
12213: LD_INT 111
12215: PUSH
12216: LD_INT 112
12218: PUSH
12219: LD_INT 113
12221: PUSH
12222: LD_INT 114
12224: PUSH
12225: LD_INT 116
12227: PUSH
12228: LD_INT 117
12230: PUSH
12231: LD_INT 118
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: ST_TO_ADDR
12257: GO 13496
12259: LD_INT 14
12261: DOUBLE
12262: EQUAL
12263: IFTRUE 12267
12265: GO 12491
12267: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12268: LD_ADDR_VAR 0 2
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: LD_INT 3
12281: PUSH
12282: LD_INT 4
12284: PUSH
12285: LD_INT 5
12287: PUSH
12288: LD_INT 6
12290: PUSH
12291: LD_INT 7
12293: PUSH
12294: LD_INT 8
12296: PUSH
12297: LD_INT 9
12299: PUSH
12300: LD_INT 10
12302: PUSH
12303: LD_INT 11
12305: PUSH
12306: LD_INT 12
12308: PUSH
12309: LD_INT 13
12311: PUSH
12312: LD_INT 14
12314: PUSH
12315: LD_INT 15
12317: PUSH
12318: LD_INT 16
12320: PUSH
12321: LD_INT 17
12323: PUSH
12324: LD_INT 18
12326: PUSH
12327: LD_INT 19
12329: PUSH
12330: LD_INT 20
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 22
12338: PUSH
12339: LD_INT 23
12341: PUSH
12342: LD_INT 24
12344: PUSH
12345: LD_INT 25
12347: PUSH
12348: LD_INT 26
12350: PUSH
12351: LD_INT 27
12353: PUSH
12354: LD_INT 28
12356: PUSH
12357: LD_INT 29
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 31
12365: PUSH
12366: LD_INT 32
12368: PUSH
12369: LD_INT 33
12371: PUSH
12372: LD_INT 34
12374: PUSH
12375: LD_INT 36
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 101
12417: PUSH
12418: LD_INT 102
12420: PUSH
12421: LD_INT 103
12423: PUSH
12424: LD_INT 104
12426: PUSH
12427: LD_INT 105
12429: PUSH
12430: LD_INT 106
12432: PUSH
12433: LD_INT 107
12435: PUSH
12436: LD_INT 108
12438: PUSH
12439: LD_INT 109
12441: PUSH
12442: LD_INT 110
12444: PUSH
12445: LD_INT 111
12447: PUSH
12448: LD_INT 112
12450: PUSH
12451: LD_INT 113
12453: PUSH
12454: LD_INT 114
12456: PUSH
12457: LD_INT 116
12459: PUSH
12460: LD_INT 117
12462: PUSH
12463: LD_INT 118
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: ST_TO_ADDR
12489: GO 13496
12491: LD_INT 15
12493: DOUBLE
12494: EQUAL
12495: IFTRUE 12499
12497: GO 12723
12499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12500: LD_ADDR_VAR 0 2
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: LD_INT 2
12510: PUSH
12511: LD_INT 3
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: LD_INT 5
12519: PUSH
12520: LD_INT 6
12522: PUSH
12523: LD_INT 7
12525: PUSH
12526: LD_INT 8
12528: PUSH
12529: LD_INT 9
12531: PUSH
12532: LD_INT 10
12534: PUSH
12535: LD_INT 11
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: LD_INT 13
12543: PUSH
12544: LD_INT 14
12546: PUSH
12547: LD_INT 15
12549: PUSH
12550: LD_INT 16
12552: PUSH
12553: LD_INT 17
12555: PUSH
12556: LD_INT 18
12558: PUSH
12559: LD_INT 19
12561: PUSH
12562: LD_INT 20
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 22
12570: PUSH
12571: LD_INT 23
12573: PUSH
12574: LD_INT 24
12576: PUSH
12577: LD_INT 25
12579: PUSH
12580: LD_INT 26
12582: PUSH
12583: LD_INT 27
12585: PUSH
12586: LD_INT 28
12588: PUSH
12589: LD_INT 29
12591: PUSH
12592: LD_INT 30
12594: PUSH
12595: LD_INT 31
12597: PUSH
12598: LD_INT 32
12600: PUSH
12601: LD_INT 33
12603: PUSH
12604: LD_INT 34
12606: PUSH
12607: LD_INT 36
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 101
12649: PUSH
12650: LD_INT 102
12652: PUSH
12653: LD_INT 103
12655: PUSH
12656: LD_INT 104
12658: PUSH
12659: LD_INT 105
12661: PUSH
12662: LD_INT 106
12664: PUSH
12665: LD_INT 107
12667: PUSH
12668: LD_INT 108
12670: PUSH
12671: LD_INT 109
12673: PUSH
12674: LD_INT 110
12676: PUSH
12677: LD_INT 111
12679: PUSH
12680: LD_INT 112
12682: PUSH
12683: LD_INT 113
12685: PUSH
12686: LD_INT 114
12688: PUSH
12689: LD_INT 116
12691: PUSH
12692: LD_INT 117
12694: PUSH
12695: LD_INT 118
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: ST_TO_ADDR
12721: GO 13496
12723: LD_INT 16
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12867
12731: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12732: LD_ADDR_VAR 0 2
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: LD_INT 4
12742: PUSH
12743: LD_INT 5
12745: PUSH
12746: LD_INT 7
12748: PUSH
12749: LD_INT 11
12751: PUSH
12752: LD_INT 12
12754: PUSH
12755: LD_INT 15
12757: PUSH
12758: LD_INT 16
12760: PUSH
12761: LD_INT 20
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 23
12772: PUSH
12773: LD_INT 25
12775: PUSH
12776: LD_INT 26
12778: PUSH
12779: LD_INT 30
12781: PUSH
12782: LD_INT 31
12784: PUSH
12785: LD_INT 32
12787: PUSH
12788: LD_INT 33
12790: PUSH
12791: LD_INT 34
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 101
12817: PUSH
12818: LD_INT 102
12820: PUSH
12821: LD_INT 103
12823: PUSH
12824: LD_INT 106
12826: PUSH
12827: LD_INT 108
12829: PUSH
12830: LD_INT 112
12832: PUSH
12833: LD_INT 113
12835: PUSH
12836: LD_INT 114
12838: PUSH
12839: LD_INT 116
12841: PUSH
12842: LD_INT 117
12844: PUSH
12845: LD_INT 118
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: ST_TO_ADDR
12865: GO 13496
12867: LD_INT 17
12869: DOUBLE
12870: EQUAL
12871: IFTRUE 12875
12873: GO 13099
12875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: LD_INT 1
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: LD_INT 3
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 5
12895: PUSH
12896: LD_INT 6
12898: PUSH
12899: LD_INT 7
12901: PUSH
12902: LD_INT 8
12904: PUSH
12905: LD_INT 9
12907: PUSH
12908: LD_INT 10
12910: PUSH
12911: LD_INT 11
12913: PUSH
12914: LD_INT 12
12916: PUSH
12917: LD_INT 13
12919: PUSH
12920: LD_INT 14
12922: PUSH
12923: LD_INT 15
12925: PUSH
12926: LD_INT 16
12928: PUSH
12929: LD_INT 17
12931: PUSH
12932: LD_INT 18
12934: PUSH
12935: LD_INT 19
12937: PUSH
12938: LD_INT 20
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_INT 23
12949: PUSH
12950: LD_INT 24
12952: PUSH
12953: LD_INT 25
12955: PUSH
12956: LD_INT 26
12958: PUSH
12959: LD_INT 27
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 29
12967: PUSH
12968: LD_INT 30
12970: PUSH
12971: LD_INT 31
12973: PUSH
12974: LD_INT 32
12976: PUSH
12977: LD_INT 33
12979: PUSH
12980: LD_INT 34
12982: PUSH
12983: LD_INT 36
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 101
13025: PUSH
13026: LD_INT 102
13028: PUSH
13029: LD_INT 103
13031: PUSH
13032: LD_INT 104
13034: PUSH
13035: LD_INT 105
13037: PUSH
13038: LD_INT 106
13040: PUSH
13041: LD_INT 107
13043: PUSH
13044: LD_INT 108
13046: PUSH
13047: LD_INT 109
13049: PUSH
13050: LD_INT 110
13052: PUSH
13053: LD_INT 111
13055: PUSH
13056: LD_INT 112
13058: PUSH
13059: LD_INT 113
13061: PUSH
13062: LD_INT 114
13064: PUSH
13065: LD_INT 116
13067: PUSH
13068: LD_INT 117
13070: PUSH
13071: LD_INT 118
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: ST_TO_ADDR
13097: GO 13496
13099: LD_INT 18
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13255
13107: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13108: LD_ADDR_VAR 0 2
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: LD_INT 4
13118: PUSH
13119: LD_INT 5
13121: PUSH
13122: LD_INT 7
13124: PUSH
13125: LD_INT 11
13127: PUSH
13128: LD_INT 12
13130: PUSH
13131: LD_INT 15
13133: PUSH
13134: LD_INT 16
13136: PUSH
13137: LD_INT 20
13139: PUSH
13140: LD_INT 21
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: LD_INT 23
13148: PUSH
13149: LD_INT 25
13151: PUSH
13152: LD_INT 26
13154: PUSH
13155: LD_INT 30
13157: PUSH
13158: LD_INT 31
13160: PUSH
13161: LD_INT 32
13163: PUSH
13164: LD_INT 33
13166: PUSH
13167: LD_INT 34
13169: PUSH
13170: LD_INT 35
13172: PUSH
13173: LD_INT 36
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 101
13201: PUSH
13202: LD_INT 102
13204: PUSH
13205: LD_INT 103
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 108
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 113
13219: PUSH
13220: LD_INT 114
13222: PUSH
13223: LD_INT 115
13225: PUSH
13226: LD_INT 116
13228: PUSH
13229: LD_INT 117
13231: PUSH
13232: LD_INT 118
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
13253: GO 13496
13255: LD_INT 19
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13495
13263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13264: LD_ADDR_VAR 0 2
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: LD_INT 3
13277: PUSH
13278: LD_INT 4
13280: PUSH
13281: LD_INT 5
13283: PUSH
13284: LD_INT 6
13286: PUSH
13287: LD_INT 7
13289: PUSH
13290: LD_INT 8
13292: PUSH
13293: LD_INT 9
13295: PUSH
13296: LD_INT 10
13298: PUSH
13299: LD_INT 11
13301: PUSH
13302: LD_INT 12
13304: PUSH
13305: LD_INT 13
13307: PUSH
13308: LD_INT 14
13310: PUSH
13311: LD_INT 15
13313: PUSH
13314: LD_INT 16
13316: PUSH
13317: LD_INT 17
13319: PUSH
13320: LD_INT 18
13322: PUSH
13323: LD_INT 19
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 23
13337: PUSH
13338: LD_INT 24
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 27
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 30
13358: PUSH
13359: LD_INT 31
13361: PUSH
13362: LD_INT 32
13364: PUSH
13365: LD_INT 33
13367: PUSH
13368: LD_INT 34
13370: PUSH
13371: LD_INT 35
13373: PUSH
13374: LD_INT 36
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 101
13417: PUSH
13418: LD_INT 102
13420: PUSH
13421: LD_INT 103
13423: PUSH
13424: LD_INT 104
13426: PUSH
13427: LD_INT 105
13429: PUSH
13430: LD_INT 106
13432: PUSH
13433: LD_INT 107
13435: PUSH
13436: LD_INT 108
13438: PUSH
13439: LD_INT 109
13441: PUSH
13442: LD_INT 110
13444: PUSH
13445: LD_INT 111
13447: PUSH
13448: LD_INT 112
13450: PUSH
13451: LD_INT 113
13453: PUSH
13454: LD_INT 114
13456: PUSH
13457: LD_INT 115
13459: PUSH
13460: LD_INT 116
13462: PUSH
13463: LD_INT 117
13465: PUSH
13466: LD_INT 118
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: ST_TO_ADDR
13493: GO 13496
13495: POP
// end else
13496: GO 13727
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: LD_INT 6
13520: PUSH
13521: LD_INT 7
13523: PUSH
13524: LD_INT 8
13526: PUSH
13527: LD_INT 9
13529: PUSH
13530: LD_INT 10
13532: PUSH
13533: LD_INT 11
13535: PUSH
13536: LD_INT 12
13538: PUSH
13539: LD_INT 13
13541: PUSH
13542: LD_INT 14
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 17
13553: PUSH
13554: LD_INT 18
13556: PUSH
13557: LD_INT 19
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 21
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 23
13571: PUSH
13572: LD_INT 24
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 27
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_INT 29
13589: PUSH
13590: LD_INT 30
13592: PUSH
13593: LD_INT 31
13595: PUSH
13596: LD_INT 32
13598: PUSH
13599: LD_INT 33
13601: PUSH
13602: LD_INT 34
13604: PUSH
13605: LD_INT 35
13607: PUSH
13608: LD_INT 36
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 101
13651: PUSH
13652: LD_INT 102
13654: PUSH
13655: LD_INT 103
13657: PUSH
13658: LD_INT 104
13660: PUSH
13661: LD_INT 105
13663: PUSH
13664: LD_INT 106
13666: PUSH
13667: LD_INT 107
13669: PUSH
13670: LD_INT 108
13672: PUSH
13673: LD_INT 109
13675: PUSH
13676: LD_INT 110
13678: PUSH
13679: LD_INT 111
13681: PUSH
13682: LD_INT 112
13684: PUSH
13685: LD_INT 113
13687: PUSH
13688: LD_INT 114
13690: PUSH
13691: LD_INT 115
13693: PUSH
13694: LD_INT 116
13696: PUSH
13697: LD_INT 117
13699: PUSH
13700: LD_INT 118
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: ST_TO_ADDR
// if result then
13727: LD_VAR 0 2
13731: IFFALSE 14517
// begin normal :=  ;
13733: LD_ADDR_VAR 0 5
13737: PUSH
13738: LD_STRING 
13740: ST_TO_ADDR
// hardcore :=  ;
13741: LD_ADDR_VAR 0 6
13745: PUSH
13746: LD_STRING 
13748: ST_TO_ADDR
// active :=  ;
13749: LD_ADDR_VAR 0 7
13753: PUSH
13754: LD_STRING 
13756: ST_TO_ADDR
// for i = 1 to normalCounter do
13757: LD_ADDR_VAR 0 8
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 53
13771: PUSH
13772: FOR_TO
13773: IFFALSE 13874
// begin tmp := 0 ;
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_STRING 0
13782: ST_TO_ADDR
// if result [ 1 ] then
13783: LD_VAR 0 2
13787: PUSH
13788: LD_INT 1
13790: ARRAY
13791: IFFALSE 13856
// if result [ 1 ] [ 1 ] = i then
13793: LD_VAR 0 2
13797: PUSH
13798: LD_INT 1
13800: ARRAY
13801: PUSH
13802: LD_INT 1
13804: ARRAY
13805: PUSH
13806: LD_VAR 0 8
13810: EQUAL
13811: IFFALSE 13856
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: LD_VAR 0 2
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: LD_VAR 0 2
13830: PUSH
13831: LD_INT 1
13833: ARRAY
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 3
13842: PPUSH
13843: CALL_OW 1
13847: ST_TO_ADDR
// tmp := 1 ;
13848: LD_ADDR_VAR 0 3
13852: PUSH
13853: LD_STRING 1
13855: ST_TO_ADDR
// end ; normal := normal & tmp ;
13856: LD_ADDR_VAR 0 5
13860: PUSH
13861: LD_VAR 0 5
13865: PUSH
13866: LD_VAR 0 3
13870: STR
13871: ST_TO_ADDR
// end ;
13872: GO 13772
13874: POP
13875: POP
// for i = 1 to hardcoreCounter do
13876: LD_ADDR_VAR 0 8
13880: PUSH
13881: DOUBLE
13882: LD_INT 1
13884: DEC
13885: ST_TO_ADDR
13886: LD_EXP 54
13890: PUSH
13891: FOR_TO
13892: IFFALSE 13997
// begin tmp := 0 ;
13894: LD_ADDR_VAR 0 3
13898: PUSH
13899: LD_STRING 0
13901: ST_TO_ADDR
// if result [ 2 ] then
13902: LD_VAR 0 2
13906: PUSH
13907: LD_INT 2
13909: ARRAY
13910: IFFALSE 13979
// if result [ 2 ] [ 1 ] = 100 + i then
13912: LD_VAR 0 2
13916: PUSH
13917: LD_INT 2
13919: ARRAY
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PUSH
13925: LD_INT 100
13927: PUSH
13928: LD_VAR 0 8
13932: PLUS
13933: EQUAL
13934: IFFALSE 13979
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_VAR 0 2
13945: PPUSH
13946: LD_INT 2
13948: PPUSH
13949: LD_VAR 0 2
13953: PUSH
13954: LD_INT 2
13956: ARRAY
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: CALL_OW 3
13965: PPUSH
13966: CALL_OW 1
13970: ST_TO_ADDR
// tmp := 1 ;
13971: LD_ADDR_VAR 0 3
13975: PUSH
13976: LD_STRING 1
13978: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13979: LD_ADDR_VAR 0 6
13983: PUSH
13984: LD_VAR 0 6
13988: PUSH
13989: LD_VAR 0 3
13993: STR
13994: ST_TO_ADDR
// end ;
13995: GO 13891
13997: POP
13998: POP
// if isGameLoad then
13999: LD_VAR 0 1
14003: IFFALSE 14478
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14005: LD_ADDR_VAR 0 4
14009: PUSH
14010: LD_EXP 57
14014: PUSH
14015: LD_EXP 56
14019: PUSH
14020: LD_EXP 58
14024: PUSH
14025: LD_EXP 55
14029: PUSH
14030: LD_EXP 59
14034: PUSH
14035: LD_EXP 60
14039: PUSH
14040: LD_EXP 61
14044: PUSH
14045: LD_EXP 62
14049: PUSH
14050: LD_EXP 63
14054: PUSH
14055: LD_EXP 64
14059: PUSH
14060: LD_EXP 65
14064: PUSH
14065: LD_EXP 66
14069: PUSH
14070: LD_EXP 67
14074: PUSH
14075: LD_EXP 68
14079: PUSH
14080: LD_EXP 76
14084: PUSH
14085: LD_EXP 77
14089: PUSH
14090: LD_EXP 78
14094: PUSH
14095: LD_EXP 79
14099: PUSH
14100: LD_EXP 81
14104: PUSH
14105: LD_EXP 82
14109: PUSH
14110: LD_EXP 83
14114: PUSH
14115: LD_EXP 86
14119: PUSH
14120: LD_EXP 88
14124: PUSH
14125: LD_EXP 89
14129: PUSH
14130: LD_EXP 90
14134: PUSH
14135: LD_EXP 92
14139: PUSH
14140: LD_EXP 93
14144: PUSH
14145: LD_EXP 96
14149: PUSH
14150: LD_EXP 97
14154: PUSH
14155: LD_EXP 98
14159: PUSH
14160: LD_EXP 99
14164: PUSH
14165: LD_EXP 100
14169: PUSH
14170: LD_EXP 101
14174: PUSH
14175: LD_EXP 102
14179: PUSH
14180: LD_EXP 103
14184: PUSH
14185: LD_EXP 104
14189: PUSH
14190: LD_EXP 69
14194: PUSH
14195: LD_EXP 70
14199: PUSH
14200: LD_EXP 73
14204: PUSH
14205: LD_EXP 74
14209: PUSH
14210: LD_EXP 75
14214: PUSH
14215: LD_EXP 71
14219: PUSH
14220: LD_EXP 72
14224: PUSH
14225: LD_EXP 80
14229: PUSH
14230: LD_EXP 84
14234: PUSH
14235: LD_EXP 85
14239: PUSH
14240: LD_EXP 87
14244: PUSH
14245: LD_EXP 91
14249: PUSH
14250: LD_EXP 94
14254: PUSH
14255: LD_EXP 95
14259: PUSH
14260: LD_EXP 105
14264: PUSH
14265: LD_EXP 106
14269: PUSH
14270: LD_EXP 107
14274: PUSH
14275: LD_EXP 108
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: ST_TO_ADDR
// tmp :=  ;
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_STRING 
14343: ST_TO_ADDR
// for i = 1 to normalCounter do
14344: LD_ADDR_VAR 0 8
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 53
14358: PUSH
14359: FOR_TO
14360: IFFALSE 14396
// begin if flags [ i ] then
14362: LD_VAR 0 4
14366: PUSH
14367: LD_VAR 0 8
14371: ARRAY
14372: IFFALSE 14394
// tmp := tmp & i & ; ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_VAR 0 3
14383: PUSH
14384: LD_VAR 0 8
14388: STR
14389: PUSH
14390: LD_STRING ;
14392: STR
14393: ST_TO_ADDR
// end ;
14394: GO 14359
14396: POP
14397: POP
// for i = 1 to hardcoreCounter do
14398: LD_ADDR_VAR 0 8
14402: PUSH
14403: DOUBLE
14404: LD_INT 1
14406: DEC
14407: ST_TO_ADDR
14408: LD_EXP 54
14412: PUSH
14413: FOR_TO
14414: IFFALSE 14460
// begin if flags [ normalCounter + i ] then
14416: LD_VAR 0 4
14420: PUSH
14421: LD_EXP 53
14425: PUSH
14426: LD_VAR 0 8
14430: PLUS
14431: ARRAY
14432: IFFALSE 14458
// tmp := tmp & ( 100 + i ) & ; ;
14434: LD_ADDR_VAR 0 3
14438: PUSH
14439: LD_VAR 0 3
14443: PUSH
14444: LD_INT 100
14446: PUSH
14447: LD_VAR 0 8
14451: PLUS
14452: STR
14453: PUSH
14454: LD_STRING ;
14456: STR
14457: ST_TO_ADDR
// end ;
14458: GO 14413
14460: POP
14461: POP
// if tmp then
14462: LD_VAR 0 3
14466: IFFALSE 14478
// active := tmp ;
14468: LD_ADDR_VAR 0 7
14472: PUSH
14473: LD_VAR 0 3
14477: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14478: LD_STRING getStreamItemsFromMission("
14480: PUSH
14481: LD_VAR 0 5
14485: STR
14486: PUSH
14487: LD_STRING ","
14489: STR
14490: PUSH
14491: LD_VAR 0 6
14495: STR
14496: PUSH
14497: LD_STRING ","
14499: STR
14500: PUSH
14501: LD_VAR 0 7
14505: STR
14506: PUSH
14507: LD_STRING ")
14509: STR
14510: PPUSH
14511: CALL_OW 559
// end else
14515: GO 14524
// ToLua ( getStreamItemsFromMission("","","") ) ;
14517: LD_STRING getStreamItemsFromMission("","","")
14519: PPUSH
14520: CALL_OW 559
// end ;
14524: LD_VAR 0 2
14528: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14529: LD_EXP 52
14533: PUSH
14534: LD_EXP 57
14538: AND
14539: IFFALSE 14663
14541: GO 14543
14543: DISABLE
14544: LD_INT 0
14546: PPUSH
14547: PPUSH
// begin enable ;
14548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_INT 22
14556: PUSH
14557: LD_OWVAR 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: LD_INT 34
14571: PUSH
14572: LD_INT 7
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 34
14581: PUSH
14582: LD_INT 45
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 34
14591: PUSH
14592: LD_INT 28
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 34
14601: PUSH
14602: LD_INT 47
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 69
14624: ST_TO_ADDR
// if not tmp then
14625: LD_VAR 0 2
14629: NOT
14630: IFFALSE 14634
// exit ;
14632: GO 14663
// for i in tmp do
14634: LD_ADDR_VAR 0 1
14638: PUSH
14639: LD_VAR 0 2
14643: PUSH
14644: FOR_IN
14645: IFFALSE 14661
// begin SetLives ( i , 0 ) ;
14647: LD_VAR 0 1
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: CALL_OW 234
// end ;
14659: GO 14644
14661: POP
14662: POP
// end ;
14663: PPOPN 2
14665: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14666: LD_EXP 52
14670: PUSH
14671: LD_EXP 58
14675: AND
14676: IFFALSE 14760
14678: GO 14680
14680: DISABLE
14681: LD_INT 0
14683: PPUSH
14684: PPUSH
// begin enable ;
14685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14686: LD_ADDR_VAR 0 2
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_OWVAR 2
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 32
14705: PUSH
14706: LD_INT 3
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: ST_TO_ADDR
// if not tmp then
14722: LD_VAR 0 2
14726: NOT
14727: IFFALSE 14731
// exit ;
14729: GO 14760
// for i in tmp do
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_VAR 0 2
14740: PUSH
14741: FOR_IN
14742: IFFALSE 14758
// begin SetLives ( i , 0 ) ;
14744: LD_VAR 0 1
14748: PPUSH
14749: LD_INT 0
14751: PPUSH
14752: CALL_OW 234
// end ;
14756: GO 14741
14758: POP
14759: POP
// end ;
14760: PPOPN 2
14762: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14763: LD_EXP 52
14767: PUSH
14768: LD_EXP 55
14772: AND
14773: IFFALSE 14866
14775: GO 14777
14777: DISABLE
14778: LD_INT 0
14780: PPUSH
// begin enable ;
14781: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14782: LD_ADDR_VAR 0 1
14786: PUSH
14787: LD_INT 22
14789: PUSH
14790: LD_OWVAR 2
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 2
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 5
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 25
14814: PUSH
14815: LD_INT 9
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 25
14824: PUSH
14825: LD_INT 8
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 69
14846: PUSH
14847: FOR_IN
14848: IFFALSE 14864
// begin SetClass ( i , 1 ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_INT 1
14857: PPUSH
14858: CALL_OW 336
// end ;
14862: GO 14847
14864: POP
14865: POP
// end ;
14866: PPOPN 1
14868: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14869: LD_EXP 52
14873: PUSH
14874: LD_EXP 56
14878: AND
14879: PUSH
14880: LD_OWVAR 65
14884: PUSH
14885: LD_INT 7
14887: LESS
14888: AND
14889: IFFALSE 14903
14891: GO 14893
14893: DISABLE
// begin enable ;
14894: ENABLE
// game_speed := 7 ;
14895: LD_ADDR_OWVAR 65
14899: PUSH
14900: LD_INT 7
14902: ST_TO_ADDR
// end ;
14903: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14904: LD_EXP 52
14908: PUSH
14909: LD_EXP 59
14913: AND
14914: IFFALSE 15116
14916: GO 14918
14918: DISABLE
14919: LD_INT 0
14921: PPUSH
14922: PPUSH
14923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 81
14931: PUSH
14932: LD_OWVAR 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 21
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 3
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 15116
// if tmp > 5 then
14969: LD_VAR 0 3
14973: PUSH
14974: LD_INT 5
14976: GREATER
14977: IFFALSE 14989
// k := 5 else
14979: LD_ADDR_VAR 0 2
14983: PUSH
14984: LD_INT 5
14986: ST_TO_ADDR
14987: GO 14999
// k := tmp ;
14989: LD_ADDR_VAR 0 2
14993: PUSH
14994: LD_VAR 0 3
14998: ST_TO_ADDR
// for i := 1 to k do
14999: LD_ADDR_VAR 0 1
15003: PUSH
15004: DOUBLE
15005: LD_INT 1
15007: DEC
15008: ST_TO_ADDR
15009: LD_VAR 0 2
15013: PUSH
15014: FOR_TO
15015: IFFALSE 15114
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15017: LD_VAR 0 3
15021: PUSH
15022: LD_VAR 0 1
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 1
15032: PUSH
15033: LD_INT 4
15035: MOD
15036: PUSH
15037: LD_INT 1
15039: PLUS
15040: PPUSH
15041: CALL_OW 259
15045: PUSH
15046: LD_INT 10
15048: LESS
15049: IFFALSE 15112
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15051: LD_VAR 0 3
15055: PUSH
15056: LD_VAR 0 1
15060: ARRAY
15061: PPUSH
15062: LD_VAR 0 1
15066: PUSH
15067: LD_INT 4
15069: MOD
15070: PUSH
15071: LD_INT 1
15073: PLUS
15074: PPUSH
15075: LD_VAR 0 3
15079: PUSH
15080: LD_VAR 0 1
15084: ARRAY
15085: PPUSH
15086: LD_VAR 0 1
15090: PUSH
15091: LD_INT 4
15093: MOD
15094: PUSH
15095: LD_INT 1
15097: PLUS
15098: PPUSH
15099: CALL_OW 259
15103: PUSH
15104: LD_INT 1
15106: PLUS
15107: PPUSH
15108: CALL_OW 237
15112: GO 15014
15114: POP
15115: POP
// end ;
15116: PPOPN 3
15118: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15119: LD_EXP 52
15123: PUSH
15124: LD_EXP 60
15128: AND
15129: IFFALSE 15149
15131: GO 15133
15133: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15134: LD_INT 4
15136: PPUSH
15137: LD_OWVAR 2
15141: PPUSH
15142: LD_INT 0
15144: PPUSH
15145: CALL_OW 324
15149: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15150: LD_EXP 52
15154: PUSH
15155: LD_EXP 89
15159: AND
15160: IFFALSE 15180
15162: GO 15164
15164: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15165: LD_INT 19
15167: PPUSH
15168: LD_OWVAR 2
15172: PPUSH
15173: LD_INT 0
15175: PPUSH
15176: CALL_OW 324
15180: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15181: LD_EXP 52
15185: PUSH
15186: LD_EXP 61
15190: AND
15191: IFFALSE 15293
15193: GO 15195
15195: DISABLE
15196: LD_INT 0
15198: PPUSH
15199: PPUSH
// begin enable ;
15200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15201: LD_ADDR_VAR 0 2
15205: PUSH
15206: LD_INT 22
15208: PUSH
15209: LD_OWVAR 2
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 2
15220: PUSH
15221: LD_INT 34
15223: PUSH
15224: LD_INT 11
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 34
15233: PUSH
15234: LD_INT 30
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL_OW 69
15254: ST_TO_ADDR
// if not tmp then
15255: LD_VAR 0 2
15259: NOT
15260: IFFALSE 15264
// exit ;
15262: GO 15293
// for i in tmp do
15264: LD_ADDR_VAR 0 1
15268: PUSH
15269: LD_VAR 0 2
15273: PUSH
15274: FOR_IN
15275: IFFALSE 15291
// begin SetLives ( i , 0 ) ;
15277: LD_VAR 0 1
15281: PPUSH
15282: LD_INT 0
15284: PPUSH
15285: CALL_OW 234
// end ;
15289: GO 15274
15291: POP
15292: POP
// end ;
15293: PPOPN 2
15295: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15296: LD_EXP 52
15300: PUSH
15301: LD_EXP 62
15305: AND
15306: IFFALSE 15326
15308: GO 15310
15310: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15311: LD_INT 32
15313: PPUSH
15314: LD_OWVAR 2
15318: PPUSH
15319: LD_INT 0
15321: PPUSH
15322: CALL_OW 324
15326: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15327: LD_EXP 52
15331: PUSH
15332: LD_EXP 63
15336: AND
15337: IFFALSE 15518
15339: GO 15341
15341: DISABLE
15342: LD_INT 0
15344: PPUSH
15345: PPUSH
15346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15347: LD_ADDR_VAR 0 2
15351: PUSH
15352: LD_INT 22
15354: PUSH
15355: LD_OWVAR 2
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 33
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PPUSH
15378: CALL_OW 69
15382: ST_TO_ADDR
// if not tmp then
15383: LD_VAR 0 2
15387: NOT
15388: IFFALSE 15392
// exit ;
15390: GO 15518
// side := 0 ;
15392: LD_ADDR_VAR 0 3
15396: PUSH
15397: LD_INT 0
15399: ST_TO_ADDR
// for i := 1 to 8 do
15400: LD_ADDR_VAR 0 1
15404: PUSH
15405: DOUBLE
15406: LD_INT 1
15408: DEC
15409: ST_TO_ADDR
15410: LD_INT 8
15412: PUSH
15413: FOR_TO
15414: IFFALSE 15462
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15416: LD_OWVAR 2
15420: PUSH
15421: LD_VAR 0 1
15425: NONEQUAL
15426: PUSH
15427: LD_OWVAR 2
15431: PPUSH
15432: LD_VAR 0 1
15436: PPUSH
15437: CALL_OW 81
15441: PUSH
15442: LD_INT 2
15444: EQUAL
15445: AND
15446: IFFALSE 15460
// begin side := i ;
15448: LD_ADDR_VAR 0 3
15452: PUSH
15453: LD_VAR 0 1
15457: ST_TO_ADDR
// break ;
15458: GO 15462
// end ;
15460: GO 15413
15462: POP
15463: POP
// if not side then
15464: LD_VAR 0 3
15468: NOT
15469: IFFALSE 15473
// exit ;
15471: GO 15518
// for i := 1 to tmp do
15473: LD_ADDR_VAR 0 1
15477: PUSH
15478: DOUBLE
15479: LD_INT 1
15481: DEC
15482: ST_TO_ADDR
15483: LD_VAR 0 2
15487: PUSH
15488: FOR_TO
15489: IFFALSE 15516
// if Prob ( 60 ) then
15491: LD_INT 60
15493: PPUSH
15494: CALL_OW 13
15498: IFFALSE 15514
// SetSide ( i , side ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_VAR 0 3
15509: PPUSH
15510: CALL_OW 235
15514: GO 15488
15516: POP
15517: POP
// end ;
15518: PPOPN 3
15520: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15521: LD_EXP 52
15525: PUSH
15526: LD_EXP 65
15530: AND
15531: IFFALSE 15650
15533: GO 15535
15535: DISABLE
15536: LD_INT 0
15538: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15539: LD_ADDR_VAR 0 1
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_OWVAR 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 21
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 3
15568: PUSH
15569: LD_INT 23
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: PPUSH
15588: CALL_OW 69
15592: PUSH
15593: FOR_IN
15594: IFFALSE 15648
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15596: LD_VAR 0 1
15600: PPUSH
15601: CALL_OW 257
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: LD_INT 2
15611: PUSH
15612: LD_INT 3
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: IN
15624: IFFALSE 15646
// SetClass ( un , rand ( 1 , 4 ) ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: LD_INT 4
15636: PPUSH
15637: CALL_OW 12
15641: PPUSH
15642: CALL_OW 336
15646: GO 15593
15648: POP
15649: POP
// end ;
15650: PPOPN 1
15652: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15653: LD_EXP 52
15657: PUSH
15658: LD_EXP 64
15662: AND
15663: IFFALSE 15742
15665: GO 15667
15667: DISABLE
15668: LD_INT 0
15670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15671: LD_ADDR_VAR 0 1
15675: PUSH
15676: LD_INT 22
15678: PUSH
15679: LD_OWVAR 2
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 21
15690: PUSH
15691: LD_INT 3
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// if not tmp then
15707: LD_VAR 0 1
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15716: LD_VAR 0 1
15720: PUSH
15721: LD_INT 1
15723: PPUSH
15724: LD_VAR 0 1
15728: PPUSH
15729: CALL_OW 12
15733: ARRAY
15734: PPUSH
15735: LD_INT 100
15737: PPUSH
15738: CALL_OW 234
// end ;
15742: PPOPN 1
15744: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15745: LD_EXP 52
15749: PUSH
15750: LD_EXP 66
15754: AND
15755: IFFALSE 15853
15757: GO 15759
15759: DISABLE
15760: LD_INT 0
15762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_OWVAR 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 21
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: ST_TO_ADDR
// if not tmp then
15799: LD_VAR 0 1
15803: NOT
15804: IFFALSE 15808
// exit ;
15806: GO 15853
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15808: LD_VAR 0 1
15812: PUSH
15813: LD_INT 1
15815: PPUSH
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 12
15825: ARRAY
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: LD_INT 4
15832: PPUSH
15833: CALL_OW 12
15837: PPUSH
15838: LD_INT 3000
15840: PPUSH
15841: LD_INT 9000
15843: PPUSH
15844: CALL_OW 12
15848: PPUSH
15849: CALL_OW 492
// end ;
15853: PPOPN 1
15855: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15856: LD_EXP 52
15860: PUSH
15861: LD_EXP 67
15865: AND
15866: IFFALSE 15886
15868: GO 15870
15870: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15871: LD_INT 1
15873: PPUSH
15874: LD_OWVAR 2
15878: PPUSH
15879: LD_INT 0
15881: PPUSH
15882: CALL_OW 324
15886: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15887: LD_EXP 52
15891: PUSH
15892: LD_EXP 68
15896: AND
15897: IFFALSE 15980
15899: GO 15901
15901: DISABLE
15902: LD_INT 0
15904: PPUSH
15905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_OWVAR 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 3
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: ST_TO_ADDR
// if not tmp then
15942: LD_VAR 0 2
15946: NOT
15947: IFFALSE 15951
// exit ;
15949: GO 15980
// for i in tmp do
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 2
15960: PUSH
15961: FOR_IN
15962: IFFALSE 15978
// SetBLevel ( i , 10 ) ;
15964: LD_VAR 0 1
15968: PPUSH
15969: LD_INT 10
15971: PPUSH
15972: CALL_OW 241
15976: GO 15961
15978: POP
15979: POP
// end ;
15980: PPOPN 2
15982: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15983: LD_EXP 52
15987: PUSH
15988: LD_EXP 69
15992: AND
15993: IFFALSE 16104
15995: GO 15997
15997: DISABLE
15998: LD_INT 0
16000: PPUSH
16001: PPUSH
16002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16003: LD_ADDR_VAR 0 3
16007: PUSH
16008: LD_INT 22
16010: PUSH
16011: LD_OWVAR 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 25
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PPUSH
16034: CALL_OW 69
16038: ST_TO_ADDR
// if not tmp then
16039: LD_VAR 0 3
16043: NOT
16044: IFFALSE 16048
// exit ;
16046: GO 16104
// un := tmp [ rand ( 1 , tmp ) ] ;
16048: LD_ADDR_VAR 0 2
16052: PUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 1
16060: PPUSH
16061: LD_VAR 0 3
16065: PPUSH
16066: CALL_OW 12
16070: ARRAY
16071: ST_TO_ADDR
// if Crawls ( un ) then
16072: LD_VAR 0 2
16076: PPUSH
16077: CALL_OW 318
16081: IFFALSE 16092
// ComWalk ( un ) ;
16083: LD_VAR 0 2
16087: PPUSH
16088: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16092: LD_VAR 0 2
16096: PPUSH
16097: LD_INT 5
16099: PPUSH
16100: CALL_OW 336
// end ;
16104: PPOPN 3
16106: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16107: LD_EXP 52
16111: PUSH
16112: LD_EXP 70
16116: AND
16117: PUSH
16118: LD_OWVAR 67
16122: PUSH
16123: LD_INT 4
16125: LESS
16126: AND
16127: IFFALSE 16146
16129: GO 16131
16131: DISABLE
// begin Difficulty := Difficulty + 1 ;
16132: LD_ADDR_OWVAR 67
16136: PUSH
16137: LD_OWVAR 67
16141: PUSH
16142: LD_INT 1
16144: PLUS
16145: ST_TO_ADDR
// end ;
16146: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16147: LD_EXP 52
16151: PUSH
16152: LD_EXP 71
16156: AND
16157: IFFALSE 16260
16159: GO 16161
16161: DISABLE
16162: LD_INT 0
16164: PPUSH
// begin for i := 1 to 5 do
16165: LD_ADDR_VAR 0 1
16169: PUSH
16170: DOUBLE
16171: LD_INT 1
16173: DEC
16174: ST_TO_ADDR
16175: LD_INT 5
16177: PUSH
16178: FOR_TO
16179: IFFALSE 16258
// begin uc_nation := nation_nature ;
16181: LD_ADDR_OWVAR 21
16185: PUSH
16186: LD_INT 0
16188: ST_TO_ADDR
// uc_side := 0 ;
16189: LD_ADDR_OWVAR 20
16193: PUSH
16194: LD_INT 0
16196: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16197: LD_ADDR_OWVAR 29
16201: PUSH
16202: LD_INT 12
16204: PUSH
16205: LD_INT 12
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: ST_TO_ADDR
// hc_agressivity := 20 ;
16212: LD_ADDR_OWVAR 35
16216: PUSH
16217: LD_INT 20
16219: ST_TO_ADDR
// hc_class := class_tiger ;
16220: LD_ADDR_OWVAR 28
16224: PUSH
16225: LD_INT 14
16227: ST_TO_ADDR
// hc_gallery :=  ;
16228: LD_ADDR_OWVAR 33
16232: PUSH
16233: LD_STRING 
16235: ST_TO_ADDR
// hc_name :=  ;
16236: LD_ADDR_OWVAR 26
16240: PUSH
16241: LD_STRING 
16243: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16244: CALL_OW 44
16248: PPUSH
16249: LD_INT 0
16251: PPUSH
16252: CALL_OW 51
// end ;
16256: GO 16178
16258: POP
16259: POP
// end ;
16260: PPOPN 1
16262: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16263: LD_EXP 52
16267: PUSH
16268: LD_EXP 72
16272: AND
16273: IFFALSE 16282
16275: GO 16277
16277: DISABLE
// StreamSibBomb ;
16278: CALL 16283 0 0
16282: END
// export function StreamSibBomb ; var i , x , y ; begin
16283: LD_INT 0
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
// result := false ;
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// for i := 1 to 16 do
16297: LD_ADDR_VAR 0 2
16301: PUSH
16302: DOUBLE
16303: LD_INT 1
16305: DEC
16306: ST_TO_ADDR
16307: LD_INT 16
16309: PUSH
16310: FOR_TO
16311: IFFALSE 16510
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_INT 10
16320: PUSH
16321: LD_INT 20
16323: PUSH
16324: LD_INT 30
16326: PUSH
16327: LD_INT 40
16329: PUSH
16330: LD_INT 50
16332: PUSH
16333: LD_INT 60
16335: PUSH
16336: LD_INT 70
16338: PUSH
16339: LD_INT 80
16341: PUSH
16342: LD_INT 90
16344: PUSH
16345: LD_INT 100
16347: PUSH
16348: LD_INT 110
16350: PUSH
16351: LD_INT 120
16353: PUSH
16354: LD_INT 130
16356: PUSH
16357: LD_INT 140
16359: PUSH
16360: LD_INT 150
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 1
16382: PPUSH
16383: LD_INT 15
16385: PPUSH
16386: CALL_OW 12
16390: ARRAY
16391: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16392: LD_ADDR_VAR 0 4
16396: PUSH
16397: LD_INT 10
16399: PUSH
16400: LD_INT 20
16402: PUSH
16403: LD_INT 30
16405: PUSH
16406: LD_INT 40
16408: PUSH
16409: LD_INT 50
16411: PUSH
16412: LD_INT 60
16414: PUSH
16415: LD_INT 70
16417: PUSH
16418: LD_INT 80
16420: PUSH
16421: LD_INT 90
16423: PUSH
16424: LD_INT 100
16426: PUSH
16427: LD_INT 110
16429: PUSH
16430: LD_INT 120
16432: PUSH
16433: LD_INT 130
16435: PUSH
16436: LD_INT 140
16438: PUSH
16439: LD_INT 150
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 1
16461: PPUSH
16462: LD_INT 15
16464: PPUSH
16465: CALL_OW 12
16469: ARRAY
16470: ST_TO_ADDR
// if ValidHex ( x , y ) then
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_VAR 0 4
16480: PPUSH
16481: CALL_OW 488
16485: IFFALSE 16508
// begin result := [ x , y ] ;
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_VAR 0 3
16496: PUSH
16497: LD_VAR 0 4
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: ST_TO_ADDR
// break ;
16506: GO 16510
// end ; end ;
16508: GO 16310
16510: POP
16511: POP
// if result then
16512: LD_VAR 0 1
16516: IFFALSE 16576
// begin ToLua ( playSibBomb() ) ;
16518: LD_STRING playSibBomb()
16520: PPUSH
16521: CALL_OW 559
// wait ( 0 0$14 ) ;
16525: LD_INT 490
16527: PPUSH
16528: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16532: LD_VAR 0 1
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: PPUSH
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 2
16548: ARRAY
16549: PPUSH
16550: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 1
16561: ARRAY
16562: PPUSH
16563: LD_VAR 0 1
16567: PUSH
16568: LD_INT 2
16570: ARRAY
16571: PPUSH
16572: CALL_OW 429
// end ; end ;
16576: LD_VAR 0 1
16580: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16581: LD_EXP 52
16585: PUSH
16586: LD_EXP 74
16590: AND
16591: IFFALSE 16603
16593: GO 16595
16595: DISABLE
// YouLost (  ) ;
16596: LD_STRING 
16598: PPUSH
16599: CALL_OW 104
16603: END
// every 0 0$1 trigger StreamModeActive and sFog do
16604: LD_EXP 52
16608: PUSH
16609: LD_EXP 73
16613: AND
16614: IFFALSE 16628
16616: GO 16618
16618: DISABLE
// FogOff ( your_side ) ;
16619: LD_OWVAR 2
16623: PPUSH
16624: CALL_OW 344
16628: END
// every 0 0$1 trigger StreamModeActive and sSun do
16629: LD_EXP 52
16633: PUSH
16634: LD_EXP 75
16638: AND
16639: IFFALSE 16667
16641: GO 16643
16643: DISABLE
// begin solar_recharge_percent := 0 ;
16644: LD_ADDR_OWVAR 79
16648: PUSH
16649: LD_INT 0
16651: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16652: LD_INT 10500
16654: PPUSH
16655: CALL_OW 67
// solar_recharge_percent := 100 ;
16659: LD_ADDR_OWVAR 79
16663: PUSH
16664: LD_INT 100
16666: ST_TO_ADDR
// end ;
16667: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16668: LD_EXP 52
16672: PUSH
16673: LD_EXP 76
16677: AND
16678: IFFALSE 16917
16680: GO 16682
16682: DISABLE
16683: LD_INT 0
16685: PPUSH
16686: PPUSH
16687: PPUSH
// begin tmp := [ ] ;
16688: LD_ADDR_VAR 0 3
16692: PUSH
16693: EMPTY
16694: ST_TO_ADDR
// for i := 1 to 6 do
16695: LD_ADDR_VAR 0 1
16699: PUSH
16700: DOUBLE
16701: LD_INT 1
16703: DEC
16704: ST_TO_ADDR
16705: LD_INT 6
16707: PUSH
16708: FOR_TO
16709: IFFALSE 16814
// begin uc_nation := nation_nature ;
16711: LD_ADDR_OWVAR 21
16715: PUSH
16716: LD_INT 0
16718: ST_TO_ADDR
// uc_side := 0 ;
16719: LD_ADDR_OWVAR 20
16723: PUSH
16724: LD_INT 0
16726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16727: LD_ADDR_OWVAR 29
16731: PUSH
16732: LD_INT 12
16734: PUSH
16735: LD_INT 12
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: ST_TO_ADDR
// hc_agressivity := 20 ;
16742: LD_ADDR_OWVAR 35
16746: PUSH
16747: LD_INT 20
16749: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16750: LD_ADDR_OWVAR 28
16754: PUSH
16755: LD_INT 17
16757: ST_TO_ADDR
// hc_gallery :=  ;
16758: LD_ADDR_OWVAR 33
16762: PUSH
16763: LD_STRING 
16765: ST_TO_ADDR
// hc_name :=  ;
16766: LD_ADDR_OWVAR 26
16770: PUSH
16771: LD_STRING 
16773: ST_TO_ADDR
// un := CreateHuman ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: CALL_OW 44
16783: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16784: LD_VAR 0 2
16788: PPUSH
16789: LD_INT 1
16791: PPUSH
16792: CALL_OW 51
// tmp := tmp ^ un ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_VAR 0 3
16805: PUSH
16806: LD_VAR 0 2
16810: ADD
16811: ST_TO_ADDR
// end ;
16812: GO 16708
16814: POP
16815: POP
// repeat wait ( 0 0$1 ) ;
16816: LD_INT 35
16818: PPUSH
16819: CALL_OW 67
// for un in tmp do
16823: LD_ADDR_VAR 0 2
16827: PUSH
16828: LD_VAR 0 3
16832: PUSH
16833: FOR_IN
16834: IFFALSE 16908
// begin if IsDead ( un ) then
16836: LD_VAR 0 2
16840: PPUSH
16841: CALL_OW 301
16845: IFFALSE 16865
// begin tmp := tmp diff un ;
16847: LD_ADDR_VAR 0 3
16851: PUSH
16852: LD_VAR 0 3
16856: PUSH
16857: LD_VAR 0 2
16861: DIFF
16862: ST_TO_ADDR
// continue ;
16863: GO 16833
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16865: LD_VAR 0 2
16869: PPUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 22
16875: PUSH
16876: LD_INT 0
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PPUSH
16887: CALL_OW 69
16891: PPUSH
16892: LD_VAR 0 2
16896: PPUSH
16897: CALL_OW 74
16901: PPUSH
16902: CALL_OW 115
// end ;
16906: GO 16833
16908: POP
16909: POP
// until not tmp ;
16910: LD_VAR 0 3
16914: NOT
16915: IFFALSE 16816
// end ;
16917: PPOPN 3
16919: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16920: LD_EXP 52
16924: PUSH
16925: LD_EXP 77
16929: AND
16930: IFFALSE 16984
16932: GO 16934
16934: DISABLE
// begin ToLua ( displayTroll(); ) ;
16935: LD_STRING displayTroll();
16937: PPUSH
16938: CALL_OW 559
// wait ( 3 3$00 ) ;
16942: LD_INT 6300
16944: PPUSH
16945: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16949: LD_STRING hideTroll();
16951: PPUSH
16952: CALL_OW 559
// wait ( 1 1$00 ) ;
16956: LD_INT 2100
16958: PPUSH
16959: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16963: LD_STRING displayTroll();
16965: PPUSH
16966: CALL_OW 559
// wait ( 1 1$00 ) ;
16970: LD_INT 2100
16972: PPUSH
16973: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16977: LD_STRING hideTroll();
16979: PPUSH
16980: CALL_OW 559
// end ;
16984: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16985: LD_EXP 52
16989: PUSH
16990: LD_EXP 78
16994: AND
16995: IFFALSE 17058
16997: GO 16999
16999: DISABLE
17000: LD_INT 0
17002: PPUSH
// begin p := 0 ;
17003: LD_ADDR_VAR 0 1
17007: PUSH
17008: LD_INT 0
17010: ST_TO_ADDR
// repeat game_speed := 1 ;
17011: LD_ADDR_OWVAR 65
17015: PUSH
17016: LD_INT 1
17018: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17019: LD_INT 35
17021: PPUSH
17022: CALL_OW 67
// p := p + 1 ;
17026: LD_ADDR_VAR 0 1
17030: PUSH
17031: LD_VAR 0 1
17035: PUSH
17036: LD_INT 1
17038: PLUS
17039: ST_TO_ADDR
// until p >= 60 ;
17040: LD_VAR 0 1
17044: PUSH
17045: LD_INT 60
17047: GREATEREQUAL
17048: IFFALSE 17011
// game_speed := 4 ;
17050: LD_ADDR_OWVAR 65
17054: PUSH
17055: LD_INT 4
17057: ST_TO_ADDR
// end ;
17058: PPOPN 1
17060: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17061: LD_EXP 52
17065: PUSH
17066: LD_EXP 79
17070: AND
17071: IFFALSE 17217
17073: GO 17075
17075: DISABLE
17076: LD_INT 0
17078: PPUSH
17079: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17080: LD_ADDR_VAR 0 1
17084: PUSH
17085: LD_INT 22
17087: PUSH
17088: LD_OWVAR 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 30
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 30
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: ST_TO_ADDR
// if not depot then
17134: LD_VAR 0 1
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17217
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_VAR 0 1
17152: PUSH
17153: LD_INT 1
17155: PPUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 12
17165: ARRAY
17166: PPUSH
17167: CALL_OW 274
17171: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17172: LD_VAR 0 2
17176: PPUSH
17177: LD_INT 1
17179: PPUSH
17180: LD_INT 0
17182: PPUSH
17183: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17187: LD_VAR 0 2
17191: PPUSH
17192: LD_INT 2
17194: PPUSH
17195: LD_INT 0
17197: PPUSH
17198: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17202: LD_VAR 0 2
17206: PPUSH
17207: LD_INT 3
17209: PPUSH
17210: LD_INT 0
17212: PPUSH
17213: CALL_OW 277
// end ;
17217: PPOPN 2
17219: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17220: LD_EXP 52
17224: PUSH
17225: LD_EXP 80
17229: AND
17230: IFFALSE 17327
17232: GO 17234
17234: DISABLE
17235: LD_INT 0
17237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17238: LD_ADDR_VAR 0 1
17242: PUSH
17243: LD_INT 22
17245: PUSH
17246: LD_OWVAR 2
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 21
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 3
17267: PUSH
17268: LD_INT 23
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: PPUSH
17287: CALL_OW 69
17291: ST_TO_ADDR
// if not tmp then
17292: LD_VAR 0 1
17296: NOT
17297: IFFALSE 17301
// exit ;
17299: GO 17327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 1
17308: PPUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 12
17318: ARRAY
17319: PPUSH
17320: LD_INT 200
17322: PPUSH
17323: CALL_OW 234
// end ;
17327: PPOPN 1
17329: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17330: LD_EXP 52
17334: PUSH
17335: LD_EXP 81
17339: AND
17340: IFFALSE 17419
17342: GO 17344
17344: DISABLE
17345: LD_INT 0
17347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17348: LD_ADDR_VAR 0 1
17352: PUSH
17353: LD_INT 22
17355: PUSH
17356: LD_OWVAR 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 21
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: ST_TO_ADDR
// if not tmp then
17384: LD_VAR 0 1
17388: NOT
17389: IFFALSE 17393
// exit ;
17391: GO 17419
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17393: LD_VAR 0 1
17397: PUSH
17398: LD_INT 1
17400: PPUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 12
17410: ARRAY
17411: PPUSH
17412: LD_INT 60
17414: PPUSH
17415: CALL_OW 234
// end ;
17419: PPOPN 1
17421: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17422: LD_EXP 52
17426: PUSH
17427: LD_EXP 82
17431: AND
17432: IFFALSE 17531
17434: GO 17436
17436: DISABLE
17437: LD_INT 0
17439: PPUSH
17440: PPUSH
// begin enable ;
17441: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_INT 22
17449: PUSH
17450: LD_OWVAR 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 61
17461: PUSH
17462: EMPTY
17463: LIST
17464: PUSH
17465: LD_INT 33
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 69
17484: ST_TO_ADDR
// if not tmp then
17485: LD_VAR 0 1
17489: NOT
17490: IFFALSE 17494
// exit ;
17492: GO 17531
// for i in tmp do
17494: LD_ADDR_VAR 0 2
17498: PUSH
17499: LD_VAR 0 1
17503: PUSH
17504: FOR_IN
17505: IFFALSE 17529
// if IsControledBy ( i ) then
17507: LD_VAR 0 2
17511: PPUSH
17512: CALL_OW 312
17516: IFFALSE 17527
// ComUnlink ( i ) ;
17518: LD_VAR 0 2
17522: PPUSH
17523: CALL_OW 136
17527: GO 17504
17529: POP
17530: POP
// end ;
17531: PPOPN 2
17533: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17534: LD_EXP 52
17538: PUSH
17539: LD_EXP 83
17543: AND
17544: IFFALSE 17684
17546: GO 17548
17548: DISABLE
17549: LD_INT 0
17551: PPUSH
17552: PPUSH
// begin ToLua ( displayPowell(); ) ;
17553: LD_STRING displayPowell();
17555: PPUSH
17556: CALL_OW 559
// uc_side := 0 ;
17560: LD_ADDR_OWVAR 20
17564: PUSH
17565: LD_INT 0
17567: ST_TO_ADDR
// uc_nation := 2 ;
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 2
17575: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17576: LD_ADDR_OWVAR 37
17580: PUSH
17581: LD_INT 14
17583: ST_TO_ADDR
// vc_engine := engine_siberite ;
17584: LD_ADDR_OWVAR 39
17588: PUSH
17589: LD_INT 3
17591: ST_TO_ADDR
// vc_control := control_apeman ;
17592: LD_ADDR_OWVAR 38
17596: PUSH
17597: LD_INT 5
17599: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17600: LD_ADDR_OWVAR 40
17604: PUSH
17605: LD_INT 29
17607: ST_TO_ADDR
// un := CreateVehicle ;
17608: LD_ADDR_VAR 0 2
17612: PUSH
17613: CALL_OW 45
17617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17630: LD_INT 35
17632: PPUSH
17633: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_INT 22
17644: PUSH
17645: LD_OWVAR 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: PPUSH
17659: LD_VAR 0 2
17663: PPUSH
17664: CALL_OW 74
17668: PPUSH
17669: CALL_OW 115
// until IsDead ( un ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: CALL_OW 301
17682: IFFALSE 17630
// end ;
17684: PPOPN 2
17686: END
// every 0 0$1 trigger StreamModeActive and sStu do
17687: LD_EXP 52
17691: PUSH
17692: LD_EXP 91
17696: AND
17697: IFFALSE 17713
17699: GO 17701
17701: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17702: LD_STRING displayStucuk();
17704: PPUSH
17705: CALL_OW 559
// ResetFog ;
17709: CALL_OW 335
// end ;
17713: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17714: LD_EXP 52
17718: PUSH
17719: LD_EXP 84
17723: AND
17724: IFFALSE 17865
17726: GO 17728
17728: DISABLE
17729: LD_INT 0
17731: PPUSH
17732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17733: LD_ADDR_VAR 0 2
17737: PUSH
17738: LD_INT 22
17740: PUSH
17741: LD_OWVAR 2
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 21
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: ST_TO_ADDR
// if not tmp then
17769: LD_VAR 0 2
17773: NOT
17774: IFFALSE 17778
// exit ;
17776: GO 17865
// un := tmp [ rand ( 1 , tmp ) ] ;
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_VAR 0 2
17787: PUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_VAR 0 2
17795: PPUSH
17796: CALL_OW 12
17800: ARRAY
17801: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17802: LD_VAR 0 1
17806: PPUSH
17807: LD_INT 0
17809: PPUSH
17810: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17814: LD_VAR 0 1
17818: PPUSH
17819: LD_OWVAR 3
17823: PUSH
17824: LD_VAR 0 1
17828: DIFF
17829: PPUSH
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 74
17839: PPUSH
17840: CALL_OW 115
// wait ( 0 0$20 ) ;
17844: LD_INT 700
17846: PPUSH
17847: CALL_OW 67
// SetSide ( un , your_side ) ;
17851: LD_VAR 0 1
17855: PPUSH
17856: LD_OWVAR 2
17860: PPUSH
17861: CALL_OW 235
// end ;
17865: PPOPN 2
17867: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17868: LD_EXP 52
17872: PUSH
17873: LD_EXP 85
17877: AND
17878: IFFALSE 17984
17880: GO 17882
17882: DISABLE
17883: LD_INT 0
17885: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17886: LD_ADDR_VAR 0 1
17890: PUSH
17891: LD_INT 22
17893: PUSH
17894: LD_OWVAR 2
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 30
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: ST_TO_ADDR
// if not depot then
17940: LD_VAR 0 1
17944: NOT
17945: IFFALSE 17949
// exit ;
17947: GO 17984
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17949: LD_VAR 0 1
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: PPUSH
17958: CALL_OW 250
17962: PPUSH
17963: LD_VAR 0 1
17967: PUSH
17968: LD_INT 1
17970: ARRAY
17971: PPUSH
17972: CALL_OW 251
17976: PPUSH
17977: LD_INT 70
17979: PPUSH
17980: CALL_OW 495
// end ;
17984: PPOPN 1
17986: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17987: LD_EXP 52
17991: PUSH
17992: LD_EXP 86
17996: AND
17997: IFFALSE 18208
17999: GO 18001
18001: DISABLE
18002: LD_INT 0
18004: PPUSH
18005: PPUSH
18006: PPUSH
18007: PPUSH
18008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18009: LD_ADDR_VAR 0 5
18013: PUSH
18014: LD_INT 22
18016: PUSH
18017: LD_OWVAR 2
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 21
18028: PUSH
18029: LD_INT 1
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL_OW 69
18044: ST_TO_ADDR
// if not tmp then
18045: LD_VAR 0 5
18049: NOT
18050: IFFALSE 18054
// exit ;
18052: GO 18208
// for i in tmp do
18054: LD_ADDR_VAR 0 1
18058: PUSH
18059: LD_VAR 0 5
18063: PUSH
18064: FOR_IN
18065: IFFALSE 18206
// begin d := rand ( 0 , 5 ) ;
18067: LD_ADDR_VAR 0 4
18071: PUSH
18072: LD_INT 0
18074: PPUSH
18075: LD_INT 5
18077: PPUSH
18078: CALL_OW 12
18082: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18083: LD_ADDR_VAR 0 2
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 250
18097: PPUSH
18098: LD_VAR 0 4
18102: PPUSH
18103: LD_INT 3
18105: PPUSH
18106: LD_INT 12
18108: PPUSH
18109: CALL_OW 12
18113: PPUSH
18114: CALL_OW 272
18118: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 251
18133: PPUSH
18134: LD_VAR 0 4
18138: PPUSH
18139: LD_INT 3
18141: PPUSH
18142: LD_INT 12
18144: PPUSH
18145: CALL_OW 12
18149: PPUSH
18150: CALL_OW 273
18154: ST_TO_ADDR
// if ValidHex ( x , y ) then
18155: LD_VAR 0 2
18159: PPUSH
18160: LD_VAR 0 3
18164: PPUSH
18165: CALL_OW 488
18169: IFFALSE 18204
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18171: LD_VAR 0 1
18175: PPUSH
18176: LD_VAR 0 2
18180: PPUSH
18181: LD_VAR 0 3
18185: PPUSH
18186: LD_INT 3
18188: PPUSH
18189: LD_INT 6
18191: PPUSH
18192: CALL_OW 12
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 483
// end ;
18204: GO 18064
18206: POP
18207: POP
// end ;
18208: PPOPN 5
18210: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18211: LD_EXP 52
18215: PUSH
18216: LD_EXP 87
18220: AND
18221: IFFALSE 18315
18223: GO 18225
18225: DISABLE
18226: LD_INT 0
18228: PPUSH
18229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_OWVAR 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 32
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 21
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: PPUSH
18272: CALL_OW 69
18276: ST_TO_ADDR
// if not tmp then
18277: LD_VAR 0 2
18281: NOT
18282: IFFALSE 18286
// exit ;
18284: GO 18315
// for i in tmp do
18286: LD_ADDR_VAR 0 1
18290: PUSH
18291: LD_VAR 0 2
18295: PUSH
18296: FOR_IN
18297: IFFALSE 18313
// SetFuel ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 240
18311: GO 18296
18313: POP
18314: POP
// end ;
18315: PPOPN 2
18317: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18318: LD_EXP 52
18322: PUSH
18323: LD_EXP 88
18327: AND
18328: IFFALSE 18394
18330: GO 18332
18332: DISABLE
18333: LD_INT 0
18335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: LD_INT 22
18343: PUSH
18344: LD_OWVAR 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 30
18355: PUSH
18356: LD_INT 29
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PPUSH
18367: CALL_OW 69
18371: ST_TO_ADDR
// if not tmp then
18372: LD_VAR 0 1
18376: NOT
18377: IFFALSE 18381
// exit ;
18379: GO 18394
// DestroyUnit ( tmp [ 1 ] ) ;
18381: LD_VAR 0 1
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: CALL_OW 65
// end ;
18394: PPOPN 1
18396: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18397: LD_EXP 52
18401: PUSH
18402: LD_EXP 90
18406: AND
18407: IFFALSE 18536
18409: GO 18411
18411: DISABLE
18412: LD_INT 0
18414: PPUSH
// begin uc_side := 0 ;
18415: LD_ADDR_OWVAR 20
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// uc_nation := nation_arabian ;
18423: LD_ADDR_OWVAR 21
18427: PUSH
18428: LD_INT 2
18430: ST_TO_ADDR
// hc_gallery :=  ;
18431: LD_ADDR_OWVAR 33
18435: PUSH
18436: LD_STRING 
18438: ST_TO_ADDR
// hc_name :=  ;
18439: LD_ADDR_OWVAR 26
18443: PUSH
18444: LD_STRING 
18446: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18447: LD_INT 1
18449: PPUSH
18450: LD_INT 11
18452: PPUSH
18453: LD_INT 10
18455: PPUSH
18456: CALL_OW 380
// un := CreateHuman ;
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: CALL_OW 44
18469: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18470: LD_VAR 0 1
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18482: LD_INT 35
18484: PPUSH
18485: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18489: LD_VAR 0 1
18493: PPUSH
18494: LD_INT 22
18496: PUSH
18497: LD_OWVAR 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PPUSH
18506: CALL_OW 69
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 74
18520: PPUSH
18521: CALL_OW 115
// until IsDead ( un ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 301
18534: IFFALSE 18482
// end ;
18536: PPOPN 1
18538: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18539: LD_EXP 52
18543: PUSH
18544: LD_EXP 92
18548: AND
18549: IFFALSE 18561
18551: GO 18553
18553: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18554: LD_STRING earthquake(getX(game), 0, 32)
18556: PPUSH
18557: CALL_OW 559
18561: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18562: LD_EXP 52
18566: PUSH
18567: LD_EXP 93
18571: AND
18572: IFFALSE 18663
18574: GO 18576
18576: DISABLE
18577: LD_INT 0
18579: PPUSH
// begin enable ;
18580: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18581: LD_ADDR_VAR 0 1
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_OWVAR 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 21
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 33
18610: PUSH
18611: LD_INT 3
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: LIST
18622: PPUSH
18623: CALL_OW 69
18627: ST_TO_ADDR
// if not tmp then
18628: LD_VAR 0 1
18632: NOT
18633: IFFALSE 18637
// exit ;
18635: GO 18663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18637: LD_VAR 0 1
18641: PUSH
18642: LD_INT 1
18644: PPUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 12
18654: ARRAY
18655: PPUSH
18656: LD_INT 1
18658: PPUSH
18659: CALL_OW 234
// end ;
18663: PPOPN 1
18665: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18666: LD_EXP 52
18670: PUSH
18671: LD_EXP 94
18675: AND
18676: IFFALSE 18817
18678: GO 18680
18680: DISABLE
18681: LD_INT 0
18683: PPUSH
18684: PPUSH
18685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_INT 22
18693: PUSH
18694: LD_OWVAR 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 25
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 69
18721: ST_TO_ADDR
// if not tmp then
18722: LD_VAR 0 3
18726: NOT
18727: IFFALSE 18731
// exit ;
18729: GO 18817
// un := tmp [ rand ( 1 , tmp ) ] ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_INT 1
18743: PPUSH
18744: LD_VAR 0 3
18748: PPUSH
18749: CALL_OW 12
18753: ARRAY
18754: ST_TO_ADDR
// if Crawls ( un ) then
18755: LD_VAR 0 2
18759: PPUSH
18760: CALL_OW 318
18764: IFFALSE 18775
// ComWalk ( un ) ;
18766: LD_VAR 0 2
18770: PPUSH
18771: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18775: LD_VAR 0 2
18779: PPUSH
18780: LD_INT 9
18782: PPUSH
18783: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18787: LD_INT 28
18789: PPUSH
18790: LD_OWVAR 2
18794: PPUSH
18795: LD_INT 2
18797: PPUSH
18798: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18802: LD_INT 29
18804: PPUSH
18805: LD_OWVAR 2
18809: PPUSH
18810: LD_INT 2
18812: PPUSH
18813: CALL_OW 322
// end ;
18817: PPOPN 3
18819: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18820: LD_EXP 52
18824: PUSH
18825: LD_EXP 95
18829: AND
18830: IFFALSE 18941
18832: GO 18834
18834: DISABLE
18835: LD_INT 0
18837: PPUSH
18838: PPUSH
18839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18840: LD_ADDR_VAR 0 3
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_OWVAR 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 25
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PPUSH
18871: CALL_OW 69
18875: ST_TO_ADDR
// if not tmp then
18876: LD_VAR 0 3
18880: NOT
18881: IFFALSE 18885
// exit ;
18883: GO 18941
// un := tmp [ rand ( 1 , tmp ) ] ;
18885: LD_ADDR_VAR 0 2
18889: PUSH
18890: LD_VAR 0 3
18894: PUSH
18895: LD_INT 1
18897: PPUSH
18898: LD_VAR 0 3
18902: PPUSH
18903: CALL_OW 12
18907: ARRAY
18908: ST_TO_ADDR
// if Crawls ( un ) then
18909: LD_VAR 0 2
18913: PPUSH
18914: CALL_OW 318
18918: IFFALSE 18929
// ComWalk ( un ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18929: LD_VAR 0 2
18933: PPUSH
18934: LD_INT 8
18936: PPUSH
18937: CALL_OW 336
// end ;
18941: PPOPN 3
18943: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18944: LD_EXP 52
18948: PUSH
18949: LD_EXP 96
18953: AND
18954: IFFALSE 19098
18956: GO 18958
18958: DISABLE
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18963: LD_ADDR_VAR 0 2
18967: PUSH
18968: LD_INT 22
18970: PUSH
18971: LD_OWVAR 2
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 21
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 34
18995: PUSH
18996: LD_INT 12
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 34
19005: PUSH
19006: LD_INT 51
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 34
19015: PUSH
19016: LD_INT 32
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL_OW 69
19038: ST_TO_ADDR
// if not tmp then
19039: LD_VAR 0 2
19043: NOT
19044: IFFALSE 19048
// exit ;
19046: GO 19098
// for i in tmp do
19048: LD_ADDR_VAR 0 1
19052: PUSH
19053: LD_VAR 0 2
19057: PUSH
19058: FOR_IN
19059: IFFALSE 19096
// if GetCargo ( i , mat_artifact ) = 0 then
19061: LD_VAR 0 1
19065: PPUSH
19066: LD_INT 4
19068: PPUSH
19069: CALL_OW 289
19073: PUSH
19074: LD_INT 0
19076: EQUAL
19077: IFFALSE 19094
// SetCargo ( i , mat_siberit , 100 ) ;
19079: LD_VAR 0 1
19083: PPUSH
19084: LD_INT 3
19086: PPUSH
19087: LD_INT 100
19089: PPUSH
19090: CALL_OW 290
19094: GO 19058
19096: POP
19097: POP
// end ;
19098: PPOPN 2
19100: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19101: LD_EXP 52
19105: PUSH
19106: LD_EXP 97
19110: AND
19111: IFFALSE 19294
19113: GO 19115
19115: DISABLE
19116: LD_INT 0
19118: PPUSH
19119: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19120: LD_ADDR_VAR 0 2
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PPUSH
19137: CALL_OW 69
19141: ST_TO_ADDR
// if not tmp then
19142: LD_VAR 0 2
19146: NOT
19147: IFFALSE 19151
// exit ;
19149: GO 19294
// for i := 1 to 2 do
19151: LD_ADDR_VAR 0 1
19155: PUSH
19156: DOUBLE
19157: LD_INT 1
19159: DEC
19160: ST_TO_ADDR
19161: LD_INT 2
19163: PUSH
19164: FOR_TO
19165: IFFALSE 19292
// begin uc_side := your_side ;
19167: LD_ADDR_OWVAR 20
19171: PUSH
19172: LD_OWVAR 2
19176: ST_TO_ADDR
// uc_nation := nation_american ;
19177: LD_ADDR_OWVAR 21
19181: PUSH
19182: LD_INT 1
19184: ST_TO_ADDR
// vc_chassis := us_morphling ;
19185: LD_ADDR_OWVAR 37
19189: PUSH
19190: LD_INT 5
19192: ST_TO_ADDR
// vc_engine := engine_siberite ;
19193: LD_ADDR_OWVAR 39
19197: PUSH
19198: LD_INT 3
19200: ST_TO_ADDR
// vc_control := control_computer ;
19201: LD_ADDR_OWVAR 38
19205: PUSH
19206: LD_INT 3
19208: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19209: LD_ADDR_OWVAR 40
19213: PUSH
19214: LD_INT 10
19216: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19217: LD_VAR 0 2
19221: PUSH
19222: LD_INT 1
19224: ARRAY
19225: PPUSH
19226: CALL_OW 310
19230: NOT
19231: IFFALSE 19278
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19233: CALL_OW 45
19237: PPUSH
19238: LD_VAR 0 2
19242: PUSH
19243: LD_INT 1
19245: ARRAY
19246: PPUSH
19247: CALL_OW 250
19251: PPUSH
19252: LD_VAR 0 2
19256: PUSH
19257: LD_INT 1
19259: ARRAY
19260: PPUSH
19261: CALL_OW 251
19265: PPUSH
19266: LD_INT 12
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 50
19276: GO 19290
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19278: CALL_OW 45
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 51
// end ;
19290: GO 19164
19292: POP
19293: POP
// end ;
19294: PPOPN 2
19296: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19297: LD_EXP 52
19301: PUSH
19302: LD_EXP 98
19306: AND
19307: IFFALSE 19529
19309: GO 19311
19311: DISABLE
19312: LD_INT 0
19314: PPUSH
19315: PPUSH
19316: PPUSH
19317: PPUSH
19318: PPUSH
19319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19320: LD_ADDR_VAR 0 6
19324: PUSH
19325: LD_INT 22
19327: PUSH
19328: LD_OWVAR 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 21
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 3
19349: PUSH
19350: LD_INT 23
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: ST_TO_ADDR
// if not tmp then
19374: LD_VAR 0 6
19378: NOT
19379: IFFALSE 19383
// exit ;
19381: GO 19529
// s1 := rand ( 1 , 4 ) ;
19383: LD_ADDR_VAR 0 2
19387: PUSH
19388: LD_INT 1
19390: PPUSH
19391: LD_INT 4
19393: PPUSH
19394: CALL_OW 12
19398: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19399: LD_ADDR_VAR 0 4
19403: PUSH
19404: LD_VAR 0 6
19408: PUSH
19409: LD_INT 1
19411: ARRAY
19412: PPUSH
19413: LD_VAR 0 2
19417: PPUSH
19418: CALL_OW 259
19422: ST_TO_ADDR
// if s1 = 1 then
19423: LD_VAR 0 2
19427: PUSH
19428: LD_INT 1
19430: EQUAL
19431: IFFALSE 19451
// s2 := rand ( 2 , 4 ) else
19433: LD_ADDR_VAR 0 3
19437: PUSH
19438: LD_INT 2
19440: PPUSH
19441: LD_INT 4
19443: PPUSH
19444: CALL_OW 12
19448: ST_TO_ADDR
19449: GO 19459
// s2 := 1 ;
19451: LD_ADDR_VAR 0 3
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19459: LD_ADDR_VAR 0 5
19463: PUSH
19464: LD_VAR 0 6
19468: PUSH
19469: LD_INT 1
19471: ARRAY
19472: PPUSH
19473: LD_VAR 0 3
19477: PPUSH
19478: CALL_OW 259
19482: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19483: LD_VAR 0 6
19487: PUSH
19488: LD_INT 1
19490: ARRAY
19491: PPUSH
19492: LD_VAR 0 2
19496: PPUSH
19497: LD_VAR 0 5
19501: PPUSH
19502: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19506: LD_VAR 0 6
19510: PUSH
19511: LD_INT 1
19513: ARRAY
19514: PPUSH
19515: LD_VAR 0 3
19519: PPUSH
19520: LD_VAR 0 4
19524: PPUSH
19525: CALL_OW 237
// end ;
19529: PPOPN 6
19531: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19532: LD_EXP 52
19536: PUSH
19537: LD_EXP 99
19541: AND
19542: IFFALSE 19621
19544: GO 19546
19546: DISABLE
19547: LD_INT 0
19549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19550: LD_ADDR_VAR 0 1
19554: PUSH
19555: LD_INT 22
19557: PUSH
19558: LD_OWVAR 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 30
19569: PUSH
19570: LD_INT 3
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: ST_TO_ADDR
// if not tmp then
19586: LD_VAR 0 1
19590: NOT
19591: IFFALSE 19595
// exit ;
19593: GO 19621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 1
19602: PPUSH
19603: LD_VAR 0 1
19607: PPUSH
19608: CALL_OW 12
19612: ARRAY
19613: PPUSH
19614: LD_INT 1
19616: PPUSH
19617: CALL_OW 234
// end ;
19621: PPOPN 1
19623: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19624: LD_EXP 52
19628: PUSH
19629: LD_EXP 100
19633: AND
19634: IFFALSE 19746
19636: GO 19638
19638: DISABLE
19639: LD_INT 0
19641: PPUSH
19642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19643: LD_ADDR_VAR 0 2
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_OWVAR 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 2
19662: PUSH
19663: LD_INT 30
19665: PUSH
19666: LD_INT 27
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 30
19675: PUSH
19676: LD_INT 26
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 30
19685: PUSH
19686: LD_INT 28
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PPUSH
19703: CALL_OW 69
19707: ST_TO_ADDR
// if not tmp then
19708: LD_VAR 0 2
19712: NOT
19713: IFFALSE 19717
// exit ;
19715: GO 19746
// for i in tmp do
19717: LD_ADDR_VAR 0 1
19721: PUSH
19722: LD_VAR 0 2
19726: PUSH
19727: FOR_IN
19728: IFFALSE 19744
// SetLives ( i , 1 ) ;
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 234
19742: GO 19727
19744: POP
19745: POP
// end ;
19746: PPOPN 2
19748: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19749: LD_EXP 52
19753: PUSH
19754: LD_EXP 101
19758: AND
19759: IFFALSE 20046
19761: GO 19763
19763: DISABLE
19764: LD_INT 0
19766: PPUSH
19767: PPUSH
19768: PPUSH
// begin i := rand ( 1 , 7 ) ;
19769: LD_ADDR_VAR 0 1
19773: PUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_INT 7
19779: PPUSH
19780: CALL_OW 12
19784: ST_TO_ADDR
// case i of 1 :
19785: LD_VAR 0 1
19789: PUSH
19790: LD_INT 1
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19808
19798: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19799: LD_STRING earthquake(getX(game), 0, 32)
19801: PPUSH
19802: CALL_OW 559
19806: GO 20046
19808: LD_INT 2
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19830
19816: POP
// begin ToLua ( displayStucuk(); ) ;
19817: LD_STRING displayStucuk();
19819: PPUSH
19820: CALL_OW 559
// ResetFog ;
19824: CALL_OW 335
// end ; 3 :
19828: GO 20046
19830: LD_INT 3
19832: DOUBLE
19833: EQUAL
19834: IFTRUE 19838
19836: GO 19942
19838: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19839: LD_ADDR_VAR 0 2
19843: PUSH
19844: LD_INT 22
19846: PUSH
19847: LD_OWVAR 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 25
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: ST_TO_ADDR
// if not tmp then
19875: LD_VAR 0 2
19879: NOT
19880: IFFALSE 19884
// exit ;
19882: GO 20046
// un := tmp [ rand ( 1 , tmp ) ] ;
19884: LD_ADDR_VAR 0 3
19888: PUSH
19889: LD_VAR 0 2
19893: PUSH
19894: LD_INT 1
19896: PPUSH
19897: LD_VAR 0 2
19901: PPUSH
19902: CALL_OW 12
19906: ARRAY
19907: ST_TO_ADDR
// if Crawls ( un ) then
19908: LD_VAR 0 3
19912: PPUSH
19913: CALL_OW 318
19917: IFFALSE 19928
// ComWalk ( un ) ;
19919: LD_VAR 0 3
19923: PPUSH
19924: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19928: LD_VAR 0 3
19932: PPUSH
19933: LD_INT 8
19935: PPUSH
19936: CALL_OW 336
// end ; 4 :
19940: GO 20046
19942: LD_INT 4
19944: DOUBLE
19945: EQUAL
19946: IFTRUE 19950
19948: GO 20024
19950: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 22
19958: PUSH
19959: LD_OWVAR 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 30
19970: PUSH
19971: LD_INT 29
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PPUSH
19982: CALL_OW 69
19986: ST_TO_ADDR
// if not tmp then
19987: LD_VAR 0 2
19991: NOT
19992: IFFALSE 19996
// exit ;
19994: GO 20046
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19996: LD_VAR 0 2
20000: PUSH
20001: LD_INT 1
20003: ARRAY
20004: PPUSH
20005: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20009: LD_VAR 0 2
20013: PUSH
20014: LD_INT 1
20016: ARRAY
20017: PPUSH
20018: CALL_OW 65
// end ; 5 .. 7 :
20022: GO 20046
20024: LD_INT 5
20026: DOUBLE
20027: GREATEREQUAL
20028: IFFALSE 20036
20030: LD_INT 7
20032: DOUBLE
20033: LESSEQUAL
20034: IFTRUE 20038
20036: GO 20045
20038: POP
// StreamSibBomb ; end ;
20039: CALL 16283 0 0
20043: GO 20046
20045: POP
// end ;
20046: PPOPN 3
20048: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20049: LD_EXP 52
20053: PUSH
20054: LD_EXP 102
20058: AND
20059: IFFALSE 20215
20061: GO 20063
20063: DISABLE
20064: LD_INT 0
20066: PPUSH
20067: PPUSH
20068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20069: LD_ADDR_VAR 0 2
20073: PUSH
20074: LD_INT 81
20076: PUSH
20077: LD_OWVAR 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: LD_INT 21
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 21
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PPUSH
20118: CALL_OW 69
20122: ST_TO_ADDR
// if not tmp then
20123: LD_VAR 0 2
20127: NOT
20128: IFFALSE 20132
// exit ;
20130: GO 20215
// p := 0 ;
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20140: LD_INT 35
20142: PPUSH
20143: CALL_OW 67
// p := p + 1 ;
20147: LD_ADDR_VAR 0 3
20151: PUSH
20152: LD_VAR 0 3
20156: PUSH
20157: LD_INT 1
20159: PLUS
20160: ST_TO_ADDR
// for i in tmp do
20161: LD_ADDR_VAR 0 1
20165: PUSH
20166: LD_VAR 0 2
20170: PUSH
20171: FOR_IN
20172: IFFALSE 20203
// if GetLives ( i ) < 1000 then
20174: LD_VAR 0 1
20178: PPUSH
20179: CALL_OW 256
20183: PUSH
20184: LD_INT 1000
20186: LESS
20187: IFFALSE 20201
// SetLives ( i , 1000 ) ;
20189: LD_VAR 0 1
20193: PPUSH
20194: LD_INT 1000
20196: PPUSH
20197: CALL_OW 234
20201: GO 20171
20203: POP
20204: POP
// until p > 20 ;
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 20
20212: GREATER
20213: IFFALSE 20140
// end ;
20215: PPOPN 3
20217: END
// every 0 0$1 trigger StreamModeActive and sTime do
20218: LD_EXP 52
20222: PUSH
20223: LD_EXP 103
20227: AND
20228: IFFALSE 20263
20230: GO 20232
20232: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20233: LD_INT 28
20235: PPUSH
20236: LD_OWVAR 2
20240: PPUSH
20241: LD_INT 2
20243: PPUSH
20244: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20248: LD_INT 30
20250: PPUSH
20251: LD_OWVAR 2
20255: PPUSH
20256: LD_INT 2
20258: PPUSH
20259: CALL_OW 322
// end ;
20263: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20264: LD_EXP 52
20268: PUSH
20269: LD_EXP 104
20273: AND
20274: IFFALSE 20395
20276: GO 20278
20278: DISABLE
20279: LD_INT 0
20281: PPUSH
20282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20283: LD_ADDR_VAR 0 2
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_OWVAR 2
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 21
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 23
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: PPUSH
20332: CALL_OW 69
20336: ST_TO_ADDR
// if not tmp then
20337: LD_VAR 0 2
20341: NOT
20342: IFFALSE 20346
// exit ;
20344: GO 20395
// for i in tmp do
20346: LD_ADDR_VAR 0 1
20350: PUSH
20351: LD_VAR 0 2
20355: PUSH
20356: FOR_IN
20357: IFFALSE 20393
// begin if Crawls ( i ) then
20359: LD_VAR 0 1
20363: PPUSH
20364: CALL_OW 318
20368: IFFALSE 20379
// ComWalk ( i ) ;
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL_OW 138
// SetClass ( i , 2 ) ;
20379: LD_VAR 0 1
20383: PPUSH
20384: LD_INT 2
20386: PPUSH
20387: CALL_OW 336
// end ;
20391: GO 20356
20393: POP
20394: POP
// end ;
20395: PPOPN 2
20397: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20398: LD_EXP 52
20402: PUSH
20403: LD_EXP 105
20407: AND
20408: IFFALSE 20696
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
20417: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20418: LD_OWVAR 2
20422: PPUSH
20423: LD_INT 9
20425: PPUSH
20426: LD_INT 1
20428: PPUSH
20429: LD_INT 1
20431: PPUSH
20432: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20436: LD_INT 9
20438: PPUSH
20439: LD_OWVAR 2
20443: PPUSH
20444: CALL_OW 343
// uc_side := 9 ;
20448: LD_ADDR_OWVAR 20
20452: PUSH
20453: LD_INT 9
20455: ST_TO_ADDR
// uc_nation := 2 ;
20456: LD_ADDR_OWVAR 21
20460: PUSH
20461: LD_INT 2
20463: ST_TO_ADDR
// hc_name := Dark Warrior ;
20464: LD_ADDR_OWVAR 26
20468: PUSH
20469: LD_STRING Dark Warrior
20471: ST_TO_ADDR
// hc_gallery :=  ;
20472: LD_ADDR_OWVAR 33
20476: PUSH
20477: LD_STRING 
20479: ST_TO_ADDR
// hc_noskilllimit := true ;
20480: LD_ADDR_OWVAR 76
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20488: LD_ADDR_OWVAR 31
20492: PUSH
20493: LD_INT 30
20495: PUSH
20496: LD_INT 30
20498: PUSH
20499: LD_INT 30
20501: PUSH
20502: LD_INT 30
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: ST_TO_ADDR
// un := CreateHuman ;
20511: LD_ADDR_VAR 0 3
20515: PUSH
20516: CALL_OW 44
20520: ST_TO_ADDR
// hc_noskilllimit := false ;
20521: LD_ADDR_OWVAR 76
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20529: LD_VAR 0 3
20533: PPUSH
20534: LD_INT 1
20536: PPUSH
20537: CALL_OW 51
// ToLua ( playRanger() ) ;
20541: LD_STRING playRanger()
20543: PPUSH
20544: CALL_OW 559
// p := 0 ;
20548: LD_ADDR_VAR 0 2
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20556: LD_INT 35
20558: PPUSH
20559: CALL_OW 67
// p := p + 1 ;
20563: LD_ADDR_VAR 0 2
20567: PUSH
20568: LD_VAR 0 2
20572: PUSH
20573: LD_INT 1
20575: PLUS
20576: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20577: LD_VAR 0 3
20581: PPUSH
20582: CALL_OW 256
20586: PUSH
20587: LD_INT 1000
20589: LESS
20590: IFFALSE 20604
// SetLives ( un , 1000 ) ;
20592: LD_VAR 0 3
20596: PPUSH
20597: LD_INT 1000
20599: PPUSH
20600: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20604: LD_VAR 0 3
20608: PPUSH
20609: LD_INT 81
20611: PUSH
20612: LD_OWVAR 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 91
20623: PUSH
20624: LD_VAR 0 3
20628: PUSH
20629: LD_INT 30
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PPUSH
20641: CALL_OW 69
20645: PPUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: CALL_OW 74
20655: PPUSH
20656: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20660: LD_VAR 0 2
20664: PUSH
20665: LD_INT 80
20667: GREATER
20668: PUSH
20669: LD_VAR 0 3
20673: PPUSH
20674: CALL_OW 301
20678: OR
20679: IFFALSE 20556
// if un then
20681: LD_VAR 0 3
20685: IFFALSE 20696
// RemoveUnit ( un ) ;
20687: LD_VAR 0 3
20691: PPUSH
20692: CALL_OW 64
// end ;
20696: PPOPN 3
20698: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20699: LD_EXP 106
20703: IFFALSE 20819
20705: GO 20707
20707: DISABLE
20708: LD_INT 0
20710: PPUSH
20711: PPUSH
20712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 81
20720: PUSH
20721: LD_OWVAR 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 21
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PPUSH
20744: CALL_OW 69
20748: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20749: LD_STRING playComputer()
20751: PPUSH
20752: CALL_OW 559
// if not tmp then
20756: LD_VAR 0 2
20760: NOT
20761: IFFALSE 20765
// exit ;
20763: GO 20819
// for i in tmp do
20765: LD_ADDR_VAR 0 1
20769: PUSH
20770: LD_VAR 0 2
20774: PUSH
20775: FOR_IN
20776: IFFALSE 20817
// for j := 1 to 4 do
20778: LD_ADDR_VAR 0 3
20782: PUSH
20783: DOUBLE
20784: LD_INT 1
20786: DEC
20787: ST_TO_ADDR
20788: LD_INT 4
20790: PUSH
20791: FOR_TO
20792: IFFALSE 20813
// SetSkill ( i , j , 10 ) ;
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_VAR 0 3
20803: PPUSH
20804: LD_INT 10
20806: PPUSH
20807: CALL_OW 237
20811: GO 20791
20813: POP
20814: POP
20815: GO 20775
20817: POP
20818: POP
// end ;
20819: PPOPN 3
20821: END
// every 0 0$1 trigger s30 do var i , tmp ;
20822: LD_EXP 107
20826: IFFALSE 20895
20828: GO 20830
20830: DISABLE
20831: LD_INT 0
20833: PPUSH
20834: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_INT 22
20842: PUSH
20843: LD_OWVAR 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PPUSH
20852: CALL_OW 69
20856: ST_TO_ADDR
// if not tmp then
20857: LD_VAR 0 2
20861: NOT
20862: IFFALSE 20866
// exit ;
20864: GO 20895
// for i in tmp do
20866: LD_ADDR_VAR 0 1
20870: PUSH
20871: LD_VAR 0 2
20875: PUSH
20876: FOR_IN
20877: IFFALSE 20893
// SetLives ( i , 300 ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 300
20886: PPUSH
20887: CALL_OW 234
20891: GO 20876
20893: POP
20894: POP
// end ;
20895: PPOPN 2
20897: END
// every 0 0$1 trigger s60 do var i , tmp ;
20898: LD_EXP 108
20902: IFFALSE 20971
20904: GO 20906
20906: DISABLE
20907: LD_INT 0
20909: PPUSH
20910: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 22
20918: PUSH
20919: LD_OWVAR 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PPUSH
20928: CALL_OW 69
20932: ST_TO_ADDR
// if not tmp then
20933: LD_VAR 0 2
20937: NOT
20938: IFFALSE 20942
// exit ;
20940: GO 20971
// for i in tmp do
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: LD_VAR 0 2
20951: PUSH
20952: FOR_IN
20953: IFFALSE 20969
// SetLives ( i , 600 ) ;
20955: LD_VAR 0 1
20959: PPUSH
20960: LD_INT 600
20962: PPUSH
20963: CALL_OW 234
20967: GO 20952
20969: POP
20970: POP
// end ;
20971: PPOPN 2
20973: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20974: LD_INT 0
20976: PPUSH
// case cmd of 301 :
20977: LD_VAR 0 1
20981: PUSH
20982: LD_INT 301
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 21022
20990: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20991: LD_VAR 0 6
20995: PPUSH
20996: LD_VAR 0 7
21000: PPUSH
21001: LD_VAR 0 8
21005: PPUSH
21006: LD_VAR 0 4
21010: PPUSH
21011: LD_VAR 0 5
21015: PPUSH
21016: CALL 22223 0 5
21020: GO 21143
21022: LD_INT 302
21024: DOUBLE
21025: EQUAL
21026: IFTRUE 21030
21028: GO 21067
21030: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21031: LD_VAR 0 6
21035: PPUSH
21036: LD_VAR 0 7
21040: PPUSH
21041: LD_VAR 0 8
21045: PPUSH
21046: LD_VAR 0 9
21050: PPUSH
21051: LD_VAR 0 4
21055: PPUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: CALL 22314 0 6
21065: GO 21143
21067: LD_INT 303
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21112
21075: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21076: LD_VAR 0 6
21080: PPUSH
21081: LD_VAR 0 7
21085: PPUSH
21086: LD_VAR 0 8
21090: PPUSH
21091: LD_VAR 0 9
21095: PPUSH
21096: LD_VAR 0 4
21100: PPUSH
21101: LD_VAR 0 5
21105: PPUSH
21106: CALL 21148 0 6
21110: GO 21143
21112: LD_INT 304
21114: DOUBLE
21115: EQUAL
21116: IFTRUE 21120
21118: GO 21142
21120: POP
// hHackTeleport ( unit , x , y ) ; end ;
21121: LD_VAR 0 2
21125: PPUSH
21126: LD_VAR 0 4
21130: PPUSH
21131: LD_VAR 0 5
21135: PPUSH
21136: CALL 22907 0 3
21140: GO 21143
21142: POP
// end ;
21143: LD_VAR 0 12
21147: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21152: LD_VAR 0 1
21156: PUSH
21157: LD_INT 1
21159: LESS
21160: PUSH
21161: LD_VAR 0 1
21165: PUSH
21166: LD_INT 3
21168: GREATER
21169: OR
21170: PUSH
21171: LD_VAR 0 5
21175: PPUSH
21176: LD_VAR 0 6
21180: PPUSH
21181: CALL_OW 428
21185: OR
21186: IFFALSE 21190
// exit ;
21188: GO 21910
// uc_side := your_side ;
21190: LD_ADDR_OWVAR 20
21194: PUSH
21195: LD_OWVAR 2
21199: ST_TO_ADDR
// uc_nation := nation ;
21200: LD_ADDR_OWVAR 21
21204: PUSH
21205: LD_VAR 0 1
21209: ST_TO_ADDR
// bc_level = 1 ;
21210: LD_ADDR_OWVAR 43
21214: PUSH
21215: LD_INT 1
21217: ST_TO_ADDR
// case btype of 1 :
21218: LD_VAR 0 2
21222: PUSH
21223: LD_INT 1
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21242
21231: POP
// bc_type := b_depot ; 2 :
21232: LD_ADDR_OWVAR 42
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
21240: GO 21854
21242: LD_INT 2
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21261
21250: POP
// bc_type := b_warehouse ; 3 :
21251: LD_ADDR_OWVAR 42
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
21259: GO 21854
21261: LD_INT 3
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21280
21269: POP
// bc_type := b_lab ; 4 .. 9 :
21270: LD_ADDR_OWVAR 42
21274: PUSH
21275: LD_INT 6
21277: ST_TO_ADDR
21278: GO 21854
21280: LD_INT 4
21282: DOUBLE
21283: GREATEREQUAL
21284: IFFALSE 21292
21286: LD_INT 9
21288: DOUBLE
21289: LESSEQUAL
21290: IFTRUE 21294
21292: GO 21346
21294: POP
// begin bc_type := b_lab_half ;
21295: LD_ADDR_OWVAR 42
21299: PUSH
21300: LD_INT 7
21302: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21303: LD_ADDR_OWVAR 44
21307: PUSH
21308: LD_INT 10
21310: PUSH
21311: LD_INT 11
21313: PUSH
21314: LD_INT 12
21316: PUSH
21317: LD_INT 15
21319: PUSH
21320: LD_INT 14
21322: PUSH
21323: LD_INT 13
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: LD_VAR 0 2
21338: PUSH
21339: LD_INT 3
21341: MINUS
21342: ARRAY
21343: ST_TO_ADDR
// end ; 10 .. 13 :
21344: GO 21854
21346: LD_INT 10
21348: DOUBLE
21349: GREATEREQUAL
21350: IFFALSE 21358
21352: LD_INT 13
21354: DOUBLE
21355: LESSEQUAL
21356: IFTRUE 21360
21358: GO 21437
21360: POP
// begin bc_type := b_lab_full ;
21361: LD_ADDR_OWVAR 42
21365: PUSH
21366: LD_INT 8
21368: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21369: LD_ADDR_OWVAR 44
21373: PUSH
21374: LD_INT 10
21376: PUSH
21377: LD_INT 12
21379: PUSH
21380: LD_INT 14
21382: PUSH
21383: LD_INT 13
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: LD_VAR 0 2
21396: PUSH
21397: LD_INT 9
21399: MINUS
21400: ARRAY
21401: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21402: LD_ADDR_OWVAR 45
21406: PUSH
21407: LD_INT 11
21409: PUSH
21410: LD_INT 15
21412: PUSH
21413: LD_INT 12
21415: PUSH
21416: LD_INT 15
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: PUSH
21425: LD_VAR 0 2
21429: PUSH
21430: LD_INT 9
21432: MINUS
21433: ARRAY
21434: ST_TO_ADDR
// end ; 14 :
21435: GO 21854
21437: LD_INT 14
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 21456
21445: POP
// bc_type := b_workshop ; 15 :
21446: LD_ADDR_OWVAR 42
21450: PUSH
21451: LD_INT 2
21453: ST_TO_ADDR
21454: GO 21854
21456: LD_INT 15
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21475
21464: POP
// bc_type := b_factory ; 16 :
21465: LD_ADDR_OWVAR 42
21469: PUSH
21470: LD_INT 3
21472: ST_TO_ADDR
21473: GO 21854
21475: LD_INT 16
21477: DOUBLE
21478: EQUAL
21479: IFTRUE 21483
21481: GO 21494
21483: POP
// bc_type := b_ext_gun ; 17 :
21484: LD_ADDR_OWVAR 42
21488: PUSH
21489: LD_INT 17
21491: ST_TO_ADDR
21492: GO 21854
21494: LD_INT 17
21496: DOUBLE
21497: EQUAL
21498: IFTRUE 21502
21500: GO 21530
21502: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21503: LD_ADDR_OWVAR 42
21507: PUSH
21508: LD_INT 19
21510: PUSH
21511: LD_INT 23
21513: PUSH
21514: LD_INT 19
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: LD_VAR 0 1
21526: ARRAY
21527: ST_TO_ADDR
21528: GO 21854
21530: LD_INT 18
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21549
21538: POP
// bc_type := b_ext_radar ; 19 :
21539: LD_ADDR_OWVAR 42
21543: PUSH
21544: LD_INT 20
21546: ST_TO_ADDR
21547: GO 21854
21549: LD_INT 19
21551: DOUBLE
21552: EQUAL
21553: IFTRUE 21557
21555: GO 21568
21557: POP
// bc_type := b_ext_radio ; 20 :
21558: LD_ADDR_OWVAR 42
21562: PUSH
21563: LD_INT 22
21565: ST_TO_ADDR
21566: GO 21854
21568: LD_INT 20
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21587
21576: POP
// bc_type := b_ext_siberium ; 21 :
21577: LD_ADDR_OWVAR 42
21581: PUSH
21582: LD_INT 21
21584: ST_TO_ADDR
21585: GO 21854
21587: LD_INT 21
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21606
21595: POP
// bc_type := b_ext_computer ; 22 :
21596: LD_ADDR_OWVAR 42
21600: PUSH
21601: LD_INT 24
21603: ST_TO_ADDR
21604: GO 21854
21606: LD_INT 22
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21625
21614: POP
// bc_type := b_ext_track ; 23 :
21615: LD_ADDR_OWVAR 42
21619: PUSH
21620: LD_INT 16
21622: ST_TO_ADDR
21623: GO 21854
21625: LD_INT 23
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21644
21633: POP
// bc_type := b_ext_laser ; 24 :
21634: LD_ADDR_OWVAR 42
21638: PUSH
21639: LD_INT 25
21641: ST_TO_ADDR
21642: GO 21854
21644: LD_INT 24
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21663
21652: POP
// bc_type := b_control_tower ; 25 :
21653: LD_ADDR_OWVAR 42
21657: PUSH
21658: LD_INT 36
21660: ST_TO_ADDR
21661: GO 21854
21663: LD_INT 25
21665: DOUBLE
21666: EQUAL
21667: IFTRUE 21671
21669: GO 21682
21671: POP
// bc_type := b_breastwork ; 26 :
21672: LD_ADDR_OWVAR 42
21676: PUSH
21677: LD_INT 31
21679: ST_TO_ADDR
21680: GO 21854
21682: LD_INT 26
21684: DOUBLE
21685: EQUAL
21686: IFTRUE 21690
21688: GO 21701
21690: POP
// bc_type := b_bunker ; 27 :
21691: LD_ADDR_OWVAR 42
21695: PUSH
21696: LD_INT 32
21698: ST_TO_ADDR
21699: GO 21854
21701: LD_INT 27
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21720
21709: POP
// bc_type := b_turret ; 28 :
21710: LD_ADDR_OWVAR 42
21714: PUSH
21715: LD_INT 33
21717: ST_TO_ADDR
21718: GO 21854
21720: LD_INT 28
21722: DOUBLE
21723: EQUAL
21724: IFTRUE 21728
21726: GO 21739
21728: POP
// bc_type := b_armoury ; 29 :
21729: LD_ADDR_OWVAR 42
21733: PUSH
21734: LD_INT 4
21736: ST_TO_ADDR
21737: GO 21854
21739: LD_INT 29
21741: DOUBLE
21742: EQUAL
21743: IFTRUE 21747
21745: GO 21758
21747: POP
// bc_type := b_barracks ; 30 :
21748: LD_ADDR_OWVAR 42
21752: PUSH
21753: LD_INT 5
21755: ST_TO_ADDR
21756: GO 21854
21758: LD_INT 30
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21777
21766: POP
// bc_type := b_solar_power ; 31 :
21767: LD_ADDR_OWVAR 42
21771: PUSH
21772: LD_INT 27
21774: ST_TO_ADDR
21775: GO 21854
21777: LD_INT 31
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21796
21785: POP
// bc_type := b_oil_power ; 32 :
21786: LD_ADDR_OWVAR 42
21790: PUSH
21791: LD_INT 26
21793: ST_TO_ADDR
21794: GO 21854
21796: LD_INT 32
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 21815
21804: POP
// bc_type := b_siberite_power ; 33 :
21805: LD_ADDR_OWVAR 42
21809: PUSH
21810: LD_INT 28
21812: ST_TO_ADDR
21813: GO 21854
21815: LD_INT 33
21817: DOUBLE
21818: EQUAL
21819: IFTRUE 21823
21821: GO 21834
21823: POP
// bc_type := b_oil_mine ; 34 :
21824: LD_ADDR_OWVAR 42
21828: PUSH
21829: LD_INT 29
21831: ST_TO_ADDR
21832: GO 21854
21834: LD_INT 34
21836: DOUBLE
21837: EQUAL
21838: IFTRUE 21842
21840: GO 21853
21842: POP
// bc_type := b_siberite_mine ; end ;
21843: LD_ADDR_OWVAR 42
21847: PUSH
21848: LD_INT 30
21850: ST_TO_ADDR
21851: GO 21854
21853: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21854: LD_ADDR_VAR 0 8
21858: PUSH
21859: LD_VAR 0 5
21863: PPUSH
21864: LD_VAR 0 6
21868: PPUSH
21869: LD_VAR 0 3
21873: PPUSH
21874: CALL_OW 47
21878: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21879: LD_OWVAR 42
21883: PUSH
21884: LD_INT 32
21886: PUSH
21887: LD_INT 33
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: IN
21894: IFFALSE 21910
// PlaceWeaponTurret ( b , weapon ) ;
21896: LD_VAR 0 8
21900: PPUSH
21901: LD_VAR 0 4
21905: PPUSH
21906: CALL_OW 431
// end ;
21910: LD_VAR 0 7
21914: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_OWVAR 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 30
21943: PUSH
21944: LD_INT 0
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 30
21953: PUSH
21954: LD_INT 1
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PPUSH
21970: CALL_OW 69
21974: ST_TO_ADDR
// if not tmp then
21975: LD_VAR 0 4
21979: NOT
21980: IFFALSE 21984
// exit ;
21982: GO 22043
// for i in tmp do
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: LD_VAR 0 4
21993: PUSH
21994: FOR_IN
21995: IFFALSE 22041
// for j = 1 to 3 do
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: DOUBLE
22003: LD_INT 1
22005: DEC
22006: ST_TO_ADDR
22007: LD_INT 3
22009: PUSH
22010: FOR_TO
22011: IFFALSE 22037
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22013: LD_VAR 0 2
22017: PPUSH
22018: CALL_OW 274
22022: PPUSH
22023: LD_VAR 0 3
22027: PPUSH
22028: LD_INT 99999
22030: PPUSH
22031: CALL_OW 277
22035: GO 22010
22037: POP
22038: POP
22039: GO 21994
22041: POP
22042: POP
// end ;
22043: LD_VAR 0 1
22047: RET
// export function hHackSetLevel10 ; var i , j ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
22052: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: LD_INT 21
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: PUSH
22073: FOR_IN
22074: IFFALSE 22126
// if IsSelected ( i ) then
22076: LD_VAR 0 2
22080: PPUSH
22081: CALL_OW 306
22085: IFFALSE 22124
// begin for j := 1 to 4 do
22087: LD_ADDR_VAR 0 3
22091: PUSH
22092: DOUBLE
22093: LD_INT 1
22095: DEC
22096: ST_TO_ADDR
22097: LD_INT 4
22099: PUSH
22100: FOR_TO
22101: IFFALSE 22122
// SetSkill ( i , j , 10 ) ;
22103: LD_VAR 0 2
22107: PPUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_INT 10
22115: PPUSH
22116: CALL_OW 237
22120: GO 22100
22122: POP
22123: POP
// end ;
22124: GO 22073
22126: POP
22127: POP
// end ;
22128: LD_VAR 0 1
22132: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22133: LD_INT 0
22135: PPUSH
22136: PPUSH
22137: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22138: LD_ADDR_VAR 0 2
22142: PUSH
22143: LD_INT 22
22145: PUSH
22146: LD_OWVAR 2
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 21
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PPUSH
22169: CALL_OW 69
22173: PUSH
22174: FOR_IN
22175: IFFALSE 22216
// begin for j := 1 to 4 do
22177: LD_ADDR_VAR 0 3
22181: PUSH
22182: DOUBLE
22183: LD_INT 1
22185: DEC
22186: ST_TO_ADDR
22187: LD_INT 4
22189: PUSH
22190: FOR_TO
22191: IFFALSE 22212
// SetSkill ( i , j , 10 ) ;
22193: LD_VAR 0 2
22197: PPUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: LD_INT 10
22205: PPUSH
22206: CALL_OW 237
22210: GO 22190
22212: POP
22213: POP
// end ;
22214: GO 22174
22216: POP
22217: POP
// end ;
22218: LD_VAR 0 1
22222: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22223: LD_INT 0
22225: PPUSH
// uc_side := your_side ;
22226: LD_ADDR_OWVAR 20
22230: PUSH
22231: LD_OWVAR 2
22235: ST_TO_ADDR
// uc_nation := nation ;
22236: LD_ADDR_OWVAR 21
22240: PUSH
22241: LD_VAR 0 1
22245: ST_TO_ADDR
// InitHc ;
22246: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22250: LD_INT 0
22252: PPUSH
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22267: LD_VAR 0 4
22271: PPUSH
22272: LD_VAR 0 5
22276: PPUSH
22277: CALL_OW 428
22281: PUSH
22282: LD_INT 0
22284: EQUAL
22285: IFFALSE 22309
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22287: CALL_OW 44
22291: PPUSH
22292: LD_VAR 0 4
22296: PPUSH
22297: LD_VAR 0 5
22301: PPUSH
22302: LD_INT 1
22304: PPUSH
22305: CALL_OW 48
// end ;
22309: LD_VAR 0 6
22313: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22314: LD_INT 0
22316: PPUSH
22317: PPUSH
// uc_side := your_side ;
22318: LD_ADDR_OWVAR 20
22322: PUSH
22323: LD_OWVAR 2
22327: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22328: LD_VAR 0 1
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 3
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: LD_INT 5
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: IN
22355: IFFALSE 22367
// uc_nation := nation_american else
22357: LD_ADDR_OWVAR 21
22361: PUSH
22362: LD_INT 1
22364: ST_TO_ADDR
22365: GO 22410
// if chassis in [ 11 , 12 , 13 , 14 ] then
22367: LD_VAR 0 1
22371: PUSH
22372: LD_INT 11
22374: PUSH
22375: LD_INT 12
22377: PUSH
22378: LD_INT 13
22380: PUSH
22381: LD_INT 14
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: IN
22390: IFFALSE 22402
// uc_nation := nation_arabian else
22392: LD_ADDR_OWVAR 21
22396: PUSH
22397: LD_INT 2
22399: ST_TO_ADDR
22400: GO 22410
// uc_nation := nation_russian ;
22402: LD_ADDR_OWVAR 21
22406: PUSH
22407: LD_INT 3
22409: ST_TO_ADDR
// vc_chassis := chassis ;
22410: LD_ADDR_OWVAR 37
22414: PUSH
22415: LD_VAR 0 1
22419: ST_TO_ADDR
// vc_engine := engine ;
22420: LD_ADDR_OWVAR 39
22424: PUSH
22425: LD_VAR 0 2
22429: ST_TO_ADDR
// vc_control := control ;
22430: LD_ADDR_OWVAR 38
22434: PUSH
22435: LD_VAR 0 3
22439: ST_TO_ADDR
// vc_weapon := weapon ;
22440: LD_ADDR_OWVAR 40
22444: PUSH
22445: LD_VAR 0 4
22449: ST_TO_ADDR
// un := CreateVehicle ;
22450: LD_ADDR_VAR 0 8
22454: PUSH
22455: CALL_OW 45
22459: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22460: LD_VAR 0 8
22464: PPUSH
22465: LD_INT 0
22467: PPUSH
22468: LD_INT 5
22470: PPUSH
22471: CALL_OW 12
22475: PPUSH
22476: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22480: LD_VAR 0 8
22484: PPUSH
22485: LD_VAR 0 5
22489: PPUSH
22490: LD_VAR 0 6
22494: PPUSH
22495: LD_INT 1
22497: PPUSH
22498: CALL_OW 48
// end ;
22502: LD_VAR 0 7
22506: RET
// export hInvincible ; every 1 do
22507: GO 22509
22509: DISABLE
// hInvincible := [ ] ;
22510: LD_ADDR_EXP 109
22514: PUSH
22515: EMPTY
22516: ST_TO_ADDR
22517: END
// every 10 do var i ;
22518: GO 22520
22520: DISABLE
22521: LD_INT 0
22523: PPUSH
// begin enable ;
22524: ENABLE
// if not hInvincible then
22525: LD_EXP 109
22529: NOT
22530: IFFALSE 22534
// exit ;
22532: GO 22578
// for i in hInvincible do
22534: LD_ADDR_VAR 0 1
22538: PUSH
22539: LD_EXP 109
22543: PUSH
22544: FOR_IN
22545: IFFALSE 22576
// if GetLives ( i ) < 1000 then
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 256
22556: PUSH
22557: LD_INT 1000
22559: LESS
22560: IFFALSE 22574
// SetLives ( i , 1000 ) ;
22562: LD_VAR 0 1
22566: PPUSH
22567: LD_INT 1000
22569: PPUSH
22570: CALL_OW 234
22574: GO 22544
22576: POP
22577: POP
// end ;
22578: PPOPN 1
22580: END
// export function hHackInvincible ; var i ; begin
22581: LD_INT 0
22583: PPUSH
22584: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 21
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 21
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: PPUSH
22618: CALL_OW 69
22622: PUSH
22623: FOR_IN
22624: IFFALSE 22685
// if IsSelected ( i ) then
22626: LD_VAR 0 2
22630: PPUSH
22631: CALL_OW 306
22635: IFFALSE 22683
// begin if i in hInvincible then
22637: LD_VAR 0 2
22641: PUSH
22642: LD_EXP 109
22646: IN
22647: IFFALSE 22667
// hInvincible := hInvincible diff i else
22649: LD_ADDR_EXP 109
22653: PUSH
22654: LD_EXP 109
22658: PUSH
22659: LD_VAR 0 2
22663: DIFF
22664: ST_TO_ADDR
22665: GO 22683
// hInvincible := hInvincible union i ;
22667: LD_ADDR_EXP 109
22671: PUSH
22672: LD_EXP 109
22676: PUSH
22677: LD_VAR 0 2
22681: UNION
22682: ST_TO_ADDR
// end ;
22683: GO 22623
22685: POP
22686: POP
// end ;
22687: LD_VAR 0 1
22691: RET
// export function hHackInvisible ; var i , j ; begin
22692: LD_INT 0
22694: PPUSH
22695: PPUSH
22696: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22697: LD_ADDR_VAR 0 2
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 69
22716: PUSH
22717: FOR_IN
22718: IFFALSE 22742
// if IsSelected ( i ) then
22720: LD_VAR 0 2
22724: PPUSH
22725: CALL_OW 306
22729: IFFALSE 22740
// ComForceInvisible ( i ) ;
22731: LD_VAR 0 2
22735: PPUSH
22736: CALL_OW 496
22740: GO 22717
22742: POP
22743: POP
// end ;
22744: LD_VAR 0 1
22748: RET
// export function hHackChangeYourSide ; begin
22749: LD_INT 0
22751: PPUSH
// if your_side = 8 then
22752: LD_OWVAR 2
22756: PUSH
22757: LD_INT 8
22759: EQUAL
22760: IFFALSE 22772
// your_side := 0 else
22762: LD_ADDR_OWVAR 2
22766: PUSH
22767: LD_INT 0
22769: ST_TO_ADDR
22770: GO 22786
// your_side := your_side + 1 ;
22772: LD_ADDR_OWVAR 2
22776: PUSH
22777: LD_OWVAR 2
22781: PUSH
22782: LD_INT 1
22784: PLUS
22785: ST_TO_ADDR
// end ;
22786: LD_VAR 0 1
22790: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22791: LD_INT 0
22793: PPUSH
22794: PPUSH
22795: PPUSH
// for i in all_units do
22796: LD_ADDR_VAR 0 2
22800: PUSH
22801: LD_OWVAR 3
22805: PUSH
22806: FOR_IN
22807: IFFALSE 22885
// if IsSelected ( i ) then
22809: LD_VAR 0 2
22813: PPUSH
22814: CALL_OW 306
22818: IFFALSE 22883
// begin j := GetSide ( i ) ;
22820: LD_ADDR_VAR 0 3
22824: PUSH
22825: LD_VAR 0 2
22829: PPUSH
22830: CALL_OW 255
22834: ST_TO_ADDR
// if j = 8 then
22835: LD_VAR 0 3
22839: PUSH
22840: LD_INT 8
22842: EQUAL
22843: IFFALSE 22855
// j := 0 else
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: LD_INT 0
22852: ST_TO_ADDR
22853: GO 22869
// j := j + 1 ;
22855: LD_ADDR_VAR 0 3
22859: PUSH
22860: LD_VAR 0 3
22864: PUSH
22865: LD_INT 1
22867: PLUS
22868: ST_TO_ADDR
// SetSide ( i , j ) ;
22869: LD_VAR 0 2
22873: PPUSH
22874: LD_VAR 0 3
22878: PPUSH
22879: CALL_OW 235
// end ;
22883: GO 22806
22885: POP
22886: POP
// end ;
22887: LD_VAR 0 1
22891: RET
// export function hHackFog ; begin
22892: LD_INT 0
22894: PPUSH
// FogOff ( true ) ;
22895: LD_INT 1
22897: PPUSH
22898: CALL_OW 344
// end ;
22902: LD_VAR 0 1
22906: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22907: LD_INT 0
22909: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22910: LD_VAR 0 1
22914: PPUSH
22915: LD_VAR 0 2
22919: PPUSH
22920: LD_VAR 0 3
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: LD_INT 1
22930: PPUSH
22931: CALL_OW 483
// CenterOnXY ( x , y ) ;
22935: LD_VAR 0 2
22939: PPUSH
22940: LD_VAR 0 3
22944: PPUSH
22945: CALL_OW 84
// end ;
22949: LD_VAR 0 4
22953: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22954: LD_INT 0
22956: PPUSH
22957: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22958: LD_VAR 0 1
22962: NOT
22963: PUSH
22964: LD_VAR 0 2
22968: PPUSH
22969: LD_VAR 0 3
22973: PPUSH
22974: CALL_OW 488
22978: NOT
22979: OR
22980: PUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 266
22990: PUSH
22991: LD_INT 3
22993: NONEQUAL
22994: PUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 247
23004: PUSH
23005: LD_INT 1
23007: EQUAL
23008: NOT
23009: AND
23010: OR
23011: IFFALSE 23015
// exit ;
23013: GO 23164
// if GetType ( factory ) = unit_human then
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 247
23024: PUSH
23025: LD_INT 1
23027: EQUAL
23028: IFFALSE 23045
// factory := IsInUnit ( factory ) ;
23030: LD_ADDR_VAR 0 1
23034: PUSH
23035: LD_VAR 0 1
23039: PPUSH
23040: CALL_OW 310
23044: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23045: LD_VAR 0 1
23049: PPUSH
23050: CALL_OW 266
23054: PUSH
23055: LD_INT 3
23057: NONEQUAL
23058: IFFALSE 23062
// exit ;
23060: GO 23164
// if HexInfo ( x , y ) = factory then
23062: LD_VAR 0 2
23066: PPUSH
23067: LD_VAR 0 3
23071: PPUSH
23072: CALL_OW 428
23076: PUSH
23077: LD_VAR 0 1
23081: EQUAL
23082: IFFALSE 23109
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23084: LD_ADDR_EXP 110
23088: PUSH
23089: LD_EXP 110
23093: PPUSH
23094: LD_VAR 0 1
23098: PPUSH
23099: LD_INT 0
23101: PPUSH
23102: CALL_OW 1
23106: ST_TO_ADDR
23107: GO 23160
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23109: LD_ADDR_EXP 110
23113: PUSH
23114: LD_EXP 110
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_VAR 0 1
23128: PPUSH
23129: CALL_OW 255
23133: PUSH
23134: LD_VAR 0 1
23138: PUSH
23139: LD_VAR 0 2
23143: PUSH
23144: LD_VAR 0 3
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PPUSH
23155: CALL_OW 1
23159: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23160: CALL 23169 0 0
// end ;
23164: LD_VAR 0 4
23168: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23169: LD_INT 0
23171: PPUSH
23172: PPUSH
23173: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23174: LD_STRING resetFactoryWaypoint();
23176: PPUSH
23177: CALL_OW 559
// if factoryWaypoints then
23181: LD_EXP 110
23185: IFFALSE 23311
// begin list := PrepareArray ( factoryWaypoints ) ;
23187: LD_ADDR_VAR 0 3
23191: PUSH
23192: LD_EXP 110
23196: PPUSH
23197: CALL 69688 0 1
23201: ST_TO_ADDR
// for i := 1 to list do
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: DOUBLE
23208: LD_INT 1
23210: DEC
23211: ST_TO_ADDR
23212: LD_VAR 0 3
23216: PUSH
23217: FOR_TO
23218: IFFALSE 23309
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23220: LD_STRING setFactoryWaypointXY(
23222: PUSH
23223: LD_VAR 0 3
23227: PUSH
23228: LD_VAR 0 2
23232: ARRAY
23233: PUSH
23234: LD_INT 1
23236: ARRAY
23237: STR
23238: PUSH
23239: LD_STRING ,
23241: STR
23242: PUSH
23243: LD_VAR 0 3
23247: PUSH
23248: LD_VAR 0 2
23252: ARRAY
23253: PUSH
23254: LD_INT 2
23256: ARRAY
23257: STR
23258: PUSH
23259: LD_STRING ,
23261: STR
23262: PUSH
23263: LD_VAR 0 3
23267: PUSH
23268: LD_VAR 0 2
23272: ARRAY
23273: PUSH
23274: LD_INT 3
23276: ARRAY
23277: STR
23278: PUSH
23279: LD_STRING ,
23281: STR
23282: PUSH
23283: LD_VAR 0 3
23287: PUSH
23288: LD_VAR 0 2
23292: ARRAY
23293: PUSH
23294: LD_INT 4
23296: ARRAY
23297: STR
23298: PUSH
23299: LD_STRING )
23301: STR
23302: PPUSH
23303: CALL_OW 559
23307: GO 23217
23309: POP
23310: POP
// end ; end ;
23311: LD_VAR 0 1
23315: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23316: LD_INT 0
23318: PPUSH
// if HexInfo ( x , y ) = warehouse then
23319: LD_VAR 0 2
23323: PPUSH
23324: LD_VAR 0 3
23328: PPUSH
23329: CALL_OW 428
23333: PUSH
23334: LD_VAR 0 1
23338: EQUAL
23339: IFFALSE 23366
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23341: LD_ADDR_EXP 111
23345: PUSH
23346: LD_EXP 111
23350: PPUSH
23351: LD_VAR 0 1
23355: PPUSH
23356: LD_INT 0
23358: PPUSH
23359: CALL_OW 1
23363: ST_TO_ADDR
23364: GO 23417
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23366: LD_ADDR_EXP 111
23370: PUSH
23371: LD_EXP 111
23375: PPUSH
23376: LD_VAR 0 1
23380: PPUSH
23381: LD_VAR 0 1
23385: PPUSH
23386: CALL_OW 255
23390: PUSH
23391: LD_VAR 0 1
23395: PUSH
23396: LD_VAR 0 2
23400: PUSH
23401: LD_VAR 0 3
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: PPUSH
23412: CALL_OW 1
23416: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23417: CALL 23426 0 0
// end ;
23421: LD_VAR 0 4
23425: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23426: LD_INT 0
23428: PPUSH
23429: PPUSH
23430: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23431: LD_STRING resetWarehouseGatheringPoints();
23433: PPUSH
23434: CALL_OW 559
// if warehouseGatheringPoints then
23438: LD_EXP 111
23442: IFFALSE 23568
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23444: LD_ADDR_VAR 0 3
23448: PUSH
23449: LD_EXP 111
23453: PPUSH
23454: CALL 69688 0 1
23458: ST_TO_ADDR
// for i := 1 to list do
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: DOUBLE
23465: LD_INT 1
23467: DEC
23468: ST_TO_ADDR
23469: LD_VAR 0 3
23473: PUSH
23474: FOR_TO
23475: IFFALSE 23566
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23477: LD_STRING setWarehouseGatheringPointXY(
23479: PUSH
23480: LD_VAR 0 3
23484: PUSH
23485: LD_VAR 0 2
23489: ARRAY
23490: PUSH
23491: LD_INT 1
23493: ARRAY
23494: STR
23495: PUSH
23496: LD_STRING ,
23498: STR
23499: PUSH
23500: LD_VAR 0 3
23504: PUSH
23505: LD_VAR 0 2
23509: ARRAY
23510: PUSH
23511: LD_INT 2
23513: ARRAY
23514: STR
23515: PUSH
23516: LD_STRING ,
23518: STR
23519: PUSH
23520: LD_VAR 0 3
23524: PUSH
23525: LD_VAR 0 2
23529: ARRAY
23530: PUSH
23531: LD_INT 3
23533: ARRAY
23534: STR
23535: PUSH
23536: LD_STRING ,
23538: STR
23539: PUSH
23540: LD_VAR 0 3
23544: PUSH
23545: LD_VAR 0 2
23549: ARRAY
23550: PUSH
23551: LD_INT 4
23553: ARRAY
23554: STR
23555: PUSH
23556: LD_STRING )
23558: STR
23559: PPUSH
23560: CALL_OW 559
23564: GO 23474
23566: POP
23567: POP
// end ; end ;
23568: LD_VAR 0 1
23572: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23573: LD_EXP 111
23577: IFFALSE 24262
23579: GO 23581
23581: DISABLE
23582: LD_INT 0
23584: PPUSH
23585: PPUSH
23586: PPUSH
23587: PPUSH
23588: PPUSH
23589: PPUSH
23590: PPUSH
23591: PPUSH
23592: PPUSH
// begin enable ;
23593: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_EXP 111
23603: PPUSH
23604: CALL 69688 0 1
23608: ST_TO_ADDR
// if not list then
23609: LD_VAR 0 3
23613: NOT
23614: IFFALSE 23618
// exit ;
23616: GO 24262
// for i := 1 to list do
23618: LD_ADDR_VAR 0 1
23622: PUSH
23623: DOUBLE
23624: LD_INT 1
23626: DEC
23627: ST_TO_ADDR
23628: LD_VAR 0 3
23632: PUSH
23633: FOR_TO
23634: IFFALSE 24260
// begin depot := list [ i ] [ 2 ] ;
23636: LD_ADDR_VAR 0 8
23640: PUSH
23641: LD_VAR 0 3
23645: PUSH
23646: LD_VAR 0 1
23650: ARRAY
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23656: LD_ADDR_VAR 0 5
23660: PUSH
23661: LD_VAR 0 3
23665: PUSH
23666: LD_VAR 0 1
23670: ARRAY
23671: PUSH
23672: LD_INT 1
23674: ARRAY
23675: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23676: LD_VAR 0 8
23680: PPUSH
23681: CALL_OW 301
23685: PUSH
23686: LD_VAR 0 5
23690: PUSH
23691: LD_VAR 0 8
23695: PPUSH
23696: CALL_OW 255
23700: NONEQUAL
23701: OR
23702: IFFALSE 23731
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23704: LD_ADDR_EXP 111
23708: PUSH
23709: LD_EXP 111
23713: PPUSH
23714: LD_VAR 0 8
23718: PPUSH
23719: LD_INT 0
23721: PPUSH
23722: CALL_OW 1
23726: ST_TO_ADDR
// exit ;
23727: POP
23728: POP
23729: GO 24262
// end ; x := list [ i ] [ 3 ] ;
23731: LD_ADDR_VAR 0 6
23735: PUSH
23736: LD_VAR 0 3
23740: PUSH
23741: LD_VAR 0 1
23745: ARRAY
23746: PUSH
23747: LD_INT 3
23749: ARRAY
23750: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23751: LD_ADDR_VAR 0 7
23755: PUSH
23756: LD_VAR 0 3
23760: PUSH
23761: LD_VAR 0 1
23765: ARRAY
23766: PUSH
23767: LD_INT 4
23769: ARRAY
23770: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_VAR 0 6
23780: PPUSH
23781: LD_VAR 0 7
23785: PPUSH
23786: LD_INT 16
23788: PPUSH
23789: CALL 68276 0 3
23793: ST_TO_ADDR
// if not cratesNearbyPoint then
23794: LD_VAR 0 9
23798: NOT
23799: IFFALSE 23805
// exit ;
23801: POP
23802: POP
23803: GO 24262
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23805: LD_ADDR_VAR 0 4
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_VAR 0 5
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 60
23827: PUSH
23828: EMPTY
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 91
23837: PUSH
23838: LD_VAR 0 8
23842: PUSH
23843: LD_INT 6
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: LD_INT 25
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 25
23866: PUSH
23867: LD_INT 16
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: PPUSH
23885: CALL_OW 69
23889: PUSH
23890: LD_VAR 0 8
23894: PPUSH
23895: CALL_OW 313
23899: PPUSH
23900: LD_INT 3
23902: PUSH
23903: LD_INT 60
23905: PUSH
23906: EMPTY
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: LD_INT 25
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 25
23928: PUSH
23929: LD_INT 16
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 72
23949: UNION
23950: ST_TO_ADDR
// if tmp then
23951: LD_VAR 0 4
23955: IFFALSE 24035
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23957: LD_ADDR_VAR 0 4
23961: PUSH
23962: LD_VAR 0 4
23966: PPUSH
23967: LD_INT 3
23969: PPUSH
23970: CALL 66245 0 2
23974: ST_TO_ADDR
// for j in tmp do
23975: LD_ADDR_VAR 0 2
23979: PUSH
23980: LD_VAR 0 4
23984: PUSH
23985: FOR_IN
23986: IFFALSE 24029
// begin if IsInUnit ( j ) then
23988: LD_VAR 0 2
23992: PPUSH
23993: CALL_OW 310
23997: IFFALSE 24008
// ComExit ( j ) ;
23999: LD_VAR 0 2
24003: PPUSH
24004: CALL 66328 0 1
// AddComCollect ( j , x , y ) ;
24008: LD_VAR 0 2
24012: PPUSH
24013: LD_VAR 0 6
24017: PPUSH
24018: LD_VAR 0 7
24022: PPUSH
24023: CALL_OW 177
// end ;
24027: GO 23985
24029: POP
24030: POP
// exit ;
24031: POP
24032: POP
24033: GO 24262
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24035: LD_ADDR_VAR 0 4
24039: PUSH
24040: LD_INT 22
24042: PUSH
24043: LD_VAR 0 5
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 91
24054: PUSH
24055: LD_VAR 0 8
24059: PUSH
24060: LD_INT 8
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 34
24073: PUSH
24074: LD_INT 12
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 34
24083: PUSH
24084: LD_INT 51
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 34
24093: PUSH
24094: LD_INT 32
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 34
24103: PUSH
24104: LD_INT 89
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: PPUSH
24123: CALL_OW 69
24127: ST_TO_ADDR
// if tmp then
24128: LD_VAR 0 4
24132: IFFALSE 24258
// begin for j in tmp do
24134: LD_ADDR_VAR 0 2
24138: PUSH
24139: LD_VAR 0 4
24143: PUSH
24144: FOR_IN
24145: IFFALSE 24256
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24147: LD_VAR 0 2
24151: PPUSH
24152: CALL_OW 262
24156: PUSH
24157: LD_INT 3
24159: EQUAL
24160: PUSH
24161: LD_VAR 0 2
24165: PPUSH
24166: CALL_OW 261
24170: PUSH
24171: LD_INT 20
24173: GREATER
24174: OR
24175: PUSH
24176: LD_VAR 0 2
24180: PPUSH
24181: CALL_OW 314
24185: NOT
24186: AND
24187: PUSH
24188: LD_VAR 0 2
24192: PPUSH
24193: CALL_OW 263
24197: PUSH
24198: LD_INT 1
24200: NONEQUAL
24201: PUSH
24202: LD_VAR 0 2
24206: PPUSH
24207: CALL_OW 311
24211: OR
24212: AND
24213: IFFALSE 24254
// begin ComCollect ( j , x , y ) ;
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_VAR 0 6
24224: PPUSH
24225: LD_VAR 0 7
24229: PPUSH
24230: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24234: LD_VAR 0 2
24238: PPUSH
24239: LD_VAR 0 8
24243: PPUSH
24244: CALL_OW 172
// exit ;
24248: POP
24249: POP
24250: POP
24251: POP
24252: GO 24262
// end ;
24254: GO 24144
24256: POP
24257: POP
// end ; end ;
24258: GO 23633
24260: POP
24261: POP
// end ; end_of_file
24262: PPOPN 9
24264: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24265: LD_INT 0
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24271: LD_VAR 0 1
24275: PPUSH
24276: CALL_OW 264
24280: PUSH
24281: LD_INT 91
24283: EQUAL
24284: IFFALSE 24356
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24286: LD_INT 68
24288: PPUSH
24289: LD_VAR 0 1
24293: PPUSH
24294: CALL_OW 255
24298: PPUSH
24299: CALL_OW 321
24303: PUSH
24304: LD_INT 2
24306: EQUAL
24307: IFFALSE 24319
// eff := 70 else
24309: LD_ADDR_VAR 0 4
24313: PUSH
24314: LD_INT 70
24316: ST_TO_ADDR
24317: GO 24327
// eff := 30 ;
24319: LD_ADDR_VAR 0 4
24323: PUSH
24324: LD_INT 30
24326: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24327: LD_VAR 0 1
24331: PPUSH
24332: CALL_OW 250
24336: PPUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 251
24346: PPUSH
24347: LD_VAR 0 4
24351: PPUSH
24352: CALL_OW 495
// end ; end ;
24356: LD_VAR 0 2
24360: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24361: LD_INT 0
24363: PPUSH
// end ;
24364: LD_VAR 0 4
24368: RET
// export function SOS_Command ( cmd ) ; begin
24369: LD_INT 0
24371: PPUSH
// end ;
24372: LD_VAR 0 2
24376: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24377: LD_INT 0
24379: PPUSH
// end ;
24380: LD_VAR 0 6
24384: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24385: LD_INT 0
24387: PPUSH
24388: PPUSH
// if not vehicle or not factory then
24389: LD_VAR 0 1
24393: NOT
24394: PUSH
24395: LD_VAR 0 2
24399: NOT
24400: OR
24401: IFFALSE 24405
// exit ;
24403: GO 24636
// if factoryWaypoints >= factory then
24405: LD_EXP 110
24409: PUSH
24410: LD_VAR 0 2
24414: GREATEREQUAL
24415: IFFALSE 24636
// if factoryWaypoints [ factory ] then
24417: LD_EXP 110
24421: PUSH
24422: LD_VAR 0 2
24426: ARRAY
24427: IFFALSE 24636
// begin if GetControl ( vehicle ) = control_manual then
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 263
24438: PUSH
24439: LD_INT 1
24441: EQUAL
24442: IFFALSE 24523
// begin driver := IsDrivenBy ( vehicle ) ;
24444: LD_ADDR_VAR 0 4
24448: PUSH
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 311
24458: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24459: LD_VAR 0 4
24463: PPUSH
24464: LD_EXP 110
24468: PUSH
24469: LD_VAR 0 2
24473: ARRAY
24474: PUSH
24475: LD_INT 3
24477: ARRAY
24478: PPUSH
24479: LD_EXP 110
24483: PUSH
24484: LD_VAR 0 2
24488: ARRAY
24489: PUSH
24490: LD_INT 4
24492: ARRAY
24493: PPUSH
24494: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24498: LD_VAR 0 4
24502: PPUSH
24503: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24507: LD_VAR 0 4
24511: PPUSH
24512: LD_VAR 0 2
24516: PPUSH
24517: CALL_OW 180
// end else
24521: GO 24636
// if GetControl ( vehicle ) = control_remote then
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 263
24532: PUSH
24533: LD_INT 2
24535: EQUAL
24536: IFFALSE 24597
// begin wait ( 0 0$2 ) ;
24538: LD_INT 70
24540: PPUSH
24541: CALL_OW 67
// if Connect ( vehicle ) then
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL 36660 0 1
24554: IFFALSE 24595
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24556: LD_VAR 0 1
24560: PPUSH
24561: LD_EXP 110
24565: PUSH
24566: LD_VAR 0 2
24570: ARRAY
24571: PUSH
24572: LD_INT 3
24574: ARRAY
24575: PPUSH
24576: LD_EXP 110
24580: PUSH
24581: LD_VAR 0 2
24585: ARRAY
24586: PUSH
24587: LD_INT 4
24589: ARRAY
24590: PPUSH
24591: CALL_OW 171
// end else
24595: GO 24636
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24597: LD_VAR 0 1
24601: PPUSH
24602: LD_EXP 110
24606: PUSH
24607: LD_VAR 0 2
24611: ARRAY
24612: PUSH
24613: LD_INT 3
24615: ARRAY
24616: PPUSH
24617: LD_EXP 110
24621: PUSH
24622: LD_VAR 0 2
24626: ARRAY
24627: PUSH
24628: LD_INT 4
24630: ARRAY
24631: PPUSH
24632: CALL_OW 171
// end ; end ;
24636: LD_VAR 0 3
24640: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24641: LD_INT 0
24643: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24644: LD_VAR 0 1
24648: PUSH
24649: LD_INT 250
24651: EQUAL
24652: PUSH
24653: LD_VAR 0 2
24657: PPUSH
24658: CALL_OW 264
24662: PUSH
24663: LD_INT 81
24665: EQUAL
24666: AND
24667: IFFALSE 24688
// MinerPlaceMine ( unit , x , y ) ;
24669: LD_VAR 0 2
24673: PPUSH
24674: LD_VAR 0 4
24678: PPUSH
24679: LD_VAR 0 5
24683: PPUSH
24684: CALL 27073 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24688: LD_VAR 0 1
24692: PUSH
24693: LD_INT 251
24695: EQUAL
24696: PUSH
24697: LD_VAR 0 2
24701: PPUSH
24702: CALL_OW 264
24706: PUSH
24707: LD_INT 81
24709: EQUAL
24710: AND
24711: IFFALSE 24732
// MinerDetonateMine ( unit , x , y ) ;
24713: LD_VAR 0 2
24717: PPUSH
24718: LD_VAR 0 4
24722: PPUSH
24723: LD_VAR 0 5
24727: PPUSH
24728: CALL 27348 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24732: LD_VAR 0 1
24736: PUSH
24737: LD_INT 252
24739: EQUAL
24740: PUSH
24741: LD_VAR 0 2
24745: PPUSH
24746: CALL_OW 264
24750: PUSH
24751: LD_INT 81
24753: EQUAL
24754: AND
24755: IFFALSE 24776
// MinerCreateMinefield ( unit , x , y ) ;
24757: LD_VAR 0 2
24761: PPUSH
24762: LD_VAR 0 4
24766: PPUSH
24767: LD_VAR 0 5
24771: PPUSH
24772: CALL 27765 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 253
24783: EQUAL
24784: PUSH
24785: LD_VAR 0 2
24789: PPUSH
24790: CALL_OW 257
24794: PUSH
24795: LD_INT 5
24797: EQUAL
24798: AND
24799: IFFALSE 24820
// ComBinocular ( unit , x , y ) ;
24801: LD_VAR 0 2
24805: PPUSH
24806: LD_VAR 0 4
24810: PPUSH
24811: LD_VAR 0 5
24815: PPUSH
24816: CALL 28134 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24820: LD_VAR 0 1
24824: PUSH
24825: LD_INT 254
24827: EQUAL
24828: PUSH
24829: LD_VAR 0 2
24833: PPUSH
24834: CALL_OW 264
24838: PUSH
24839: LD_INT 99
24841: EQUAL
24842: AND
24843: PUSH
24844: LD_VAR 0 3
24848: PPUSH
24849: CALL_OW 263
24853: PUSH
24854: LD_INT 3
24856: EQUAL
24857: AND
24858: IFFALSE 24874
// HackDestroyVehicle ( unit , selectedUnit ) ;
24860: LD_VAR 0 2
24864: PPUSH
24865: LD_VAR 0 3
24869: PPUSH
24870: CALL 26437 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24874: LD_VAR 0 1
24878: PUSH
24879: LD_INT 255
24881: EQUAL
24882: PUSH
24883: LD_VAR 0 2
24887: PPUSH
24888: CALL_OW 264
24892: PUSH
24893: LD_INT 14
24895: PUSH
24896: LD_INT 53
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: IN
24903: AND
24904: PUSH
24905: LD_VAR 0 4
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL_OW 488
24919: AND
24920: IFFALSE 24944
// CutTreeXYR ( unit , x , y , 12 ) ;
24922: LD_VAR 0 2
24926: PPUSH
24927: LD_VAR 0 4
24931: PPUSH
24932: LD_VAR 0 5
24936: PPUSH
24937: LD_INT 12
24939: PPUSH
24940: CALL 25007 0 4
// if cmd = 256 then
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 256
24951: EQUAL
24952: IFFALSE 24973
// SetFactoryWaypoint ( unit , x , y ) ;
24954: LD_VAR 0 2
24958: PPUSH
24959: LD_VAR 0 4
24963: PPUSH
24964: LD_VAR 0 5
24968: PPUSH
24969: CALL 22954 0 3
// if cmd = 257 then
24973: LD_VAR 0 1
24977: PUSH
24978: LD_INT 257
24980: EQUAL
24981: IFFALSE 25002
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24983: LD_VAR 0 2
24987: PPUSH
24988: LD_VAR 0 4
24992: PPUSH
24993: LD_VAR 0 5
24997: PPUSH
24998: CALL 23316 0 3
// end ;
25002: LD_VAR 0 6
25006: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25007: LD_INT 0
25009: PPUSH
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25018: LD_VAR 0 1
25022: NOT
25023: PUSH
25024: LD_VAR 0 2
25028: PPUSH
25029: LD_VAR 0 3
25033: PPUSH
25034: CALL_OW 488
25038: NOT
25039: OR
25040: PUSH
25041: LD_VAR 0 4
25045: NOT
25046: OR
25047: IFFALSE 25051
// exit ;
25049: GO 25391
// list := [ ] ;
25051: LD_ADDR_VAR 0 13
25055: PUSH
25056: EMPTY
25057: ST_TO_ADDR
// if x - r < 0 then
25058: LD_VAR 0 2
25062: PUSH
25063: LD_VAR 0 4
25067: MINUS
25068: PUSH
25069: LD_INT 0
25071: LESS
25072: IFFALSE 25084
// min_x := 0 else
25074: LD_ADDR_VAR 0 7
25078: PUSH
25079: LD_INT 0
25081: ST_TO_ADDR
25082: GO 25100
// min_x := x - r ;
25084: LD_ADDR_VAR 0 7
25088: PUSH
25089: LD_VAR 0 2
25093: PUSH
25094: LD_VAR 0 4
25098: MINUS
25099: ST_TO_ADDR
// if y - r < 0 then
25100: LD_VAR 0 3
25104: PUSH
25105: LD_VAR 0 4
25109: MINUS
25110: PUSH
25111: LD_INT 0
25113: LESS
25114: IFFALSE 25126
// min_y := 0 else
25116: LD_ADDR_VAR 0 8
25120: PUSH
25121: LD_INT 0
25123: ST_TO_ADDR
25124: GO 25142
// min_y := y - r ;
25126: LD_ADDR_VAR 0 8
25130: PUSH
25131: LD_VAR 0 3
25135: PUSH
25136: LD_VAR 0 4
25140: MINUS
25141: ST_TO_ADDR
// max_x := x + r ;
25142: LD_ADDR_VAR 0 9
25146: PUSH
25147: LD_VAR 0 2
25151: PUSH
25152: LD_VAR 0 4
25156: PLUS
25157: ST_TO_ADDR
// max_y := y + r ;
25158: LD_ADDR_VAR 0 10
25162: PUSH
25163: LD_VAR 0 3
25167: PUSH
25168: LD_VAR 0 4
25172: PLUS
25173: ST_TO_ADDR
// for _x = min_x to max_x do
25174: LD_ADDR_VAR 0 11
25178: PUSH
25179: DOUBLE
25180: LD_VAR 0 7
25184: DEC
25185: ST_TO_ADDR
25186: LD_VAR 0 9
25190: PUSH
25191: FOR_TO
25192: IFFALSE 25309
// for _y = min_y to max_y do
25194: LD_ADDR_VAR 0 12
25198: PUSH
25199: DOUBLE
25200: LD_VAR 0 8
25204: DEC
25205: ST_TO_ADDR
25206: LD_VAR 0 10
25210: PUSH
25211: FOR_TO
25212: IFFALSE 25305
// begin if not ValidHex ( _x , _y ) then
25214: LD_VAR 0 11
25218: PPUSH
25219: LD_VAR 0 12
25223: PPUSH
25224: CALL_OW 488
25228: NOT
25229: IFFALSE 25233
// continue ;
25231: GO 25211
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25233: LD_VAR 0 11
25237: PPUSH
25238: LD_VAR 0 12
25242: PPUSH
25243: CALL_OW 351
25247: PUSH
25248: LD_VAR 0 11
25252: PPUSH
25253: LD_VAR 0 12
25257: PPUSH
25258: CALL_OW 554
25262: AND
25263: IFFALSE 25303
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25265: LD_ADDR_VAR 0 13
25269: PUSH
25270: LD_VAR 0 13
25274: PPUSH
25275: LD_VAR 0 13
25279: PUSH
25280: LD_INT 1
25282: PLUS
25283: PPUSH
25284: LD_VAR 0 11
25288: PUSH
25289: LD_VAR 0 12
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 2
25302: ST_TO_ADDR
// end ;
25303: GO 25211
25305: POP
25306: POP
25307: GO 25191
25309: POP
25310: POP
// if not list then
25311: LD_VAR 0 13
25315: NOT
25316: IFFALSE 25320
// exit ;
25318: GO 25391
// for i in list do
25320: LD_ADDR_VAR 0 6
25324: PUSH
25325: LD_VAR 0 13
25329: PUSH
25330: FOR_IN
25331: IFFALSE 25389
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25333: LD_VAR 0 1
25337: PPUSH
25338: LD_STRING M
25340: PUSH
25341: LD_VAR 0 6
25345: PUSH
25346: LD_INT 1
25348: ARRAY
25349: PUSH
25350: LD_VAR 0 6
25354: PUSH
25355: LD_INT 2
25357: ARRAY
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PUSH
25380: EMPTY
25381: LIST
25382: PPUSH
25383: CALL_OW 447
25387: GO 25330
25389: POP
25390: POP
// end ;
25391: LD_VAR 0 5
25395: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25396: LD_EXP 113
25400: NOT
25401: IFFALSE 25451
25403: GO 25405
25405: DISABLE
// begin initHack := true ;
25406: LD_ADDR_EXP 113
25410: PUSH
25411: LD_INT 1
25413: ST_TO_ADDR
// hackTanks := [ ] ;
25414: LD_ADDR_EXP 114
25418: PUSH
25419: EMPTY
25420: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25421: LD_ADDR_EXP 115
25425: PUSH
25426: EMPTY
25427: ST_TO_ADDR
// hackLimit := 3 ;
25428: LD_ADDR_EXP 116
25432: PUSH
25433: LD_INT 3
25435: ST_TO_ADDR
// hackDist := 12 ;
25436: LD_ADDR_EXP 117
25440: PUSH
25441: LD_INT 12
25443: ST_TO_ADDR
// hackCounter := [ ] ;
25444: LD_ADDR_EXP 118
25448: PUSH
25449: EMPTY
25450: ST_TO_ADDR
// end ;
25451: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25452: LD_EXP 113
25456: PUSH
25457: LD_INT 34
25459: PUSH
25460: LD_INT 99
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PPUSH
25467: CALL_OW 69
25471: AND
25472: IFFALSE 25725
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
25480: PPUSH
// begin enable ;
25481: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25482: LD_ADDR_VAR 0 1
25486: PUSH
25487: LD_INT 34
25489: PUSH
25490: LD_INT 99
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PPUSH
25497: CALL_OW 69
25501: PUSH
25502: FOR_IN
25503: IFFALSE 25723
// begin if not i in hackTanks then
25505: LD_VAR 0 1
25509: PUSH
25510: LD_EXP 114
25514: IN
25515: NOT
25516: IFFALSE 25599
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25518: LD_ADDR_EXP 114
25522: PUSH
25523: LD_EXP 114
25527: PPUSH
25528: LD_EXP 114
25532: PUSH
25533: LD_INT 1
25535: PLUS
25536: PPUSH
25537: LD_VAR 0 1
25541: PPUSH
25542: CALL_OW 1
25546: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25547: LD_ADDR_EXP 115
25551: PUSH
25552: LD_EXP 115
25556: PPUSH
25557: LD_EXP 115
25561: PUSH
25562: LD_INT 1
25564: PLUS
25565: PPUSH
25566: EMPTY
25567: PPUSH
25568: CALL_OW 1
25572: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25573: LD_ADDR_EXP 118
25577: PUSH
25578: LD_EXP 118
25582: PPUSH
25583: LD_EXP 118
25587: PUSH
25588: LD_INT 1
25590: PLUS
25591: PPUSH
25592: EMPTY
25593: PPUSH
25594: CALL_OW 1
25598: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 302
25608: NOT
25609: IFFALSE 25622
// begin HackUnlinkAll ( i ) ;
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL 25728 0 1
// continue ;
25620: GO 25502
// end ; HackCheckCapturedStatus ( i ) ;
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL 26171 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25631: LD_ADDR_VAR 0 2
25635: PUSH
25636: LD_INT 81
25638: PUSH
25639: LD_VAR 0 1
25643: PPUSH
25644: CALL_OW 255
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 33
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 91
25665: PUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_EXP 117
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 50
25683: PUSH
25684: EMPTY
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: ST_TO_ADDR
// if not tmp then
25698: LD_VAR 0 2
25702: NOT
25703: IFFALSE 25707
// continue ;
25705: GO 25502
// HackLink ( i , tmp ) ;
25707: LD_VAR 0 1
25711: PPUSH
25712: LD_VAR 0 2
25716: PPUSH
25717: CALL 25864 0 2
// end ;
25721: GO 25502
25723: POP
25724: POP
// end ;
25725: PPOPN 2
25727: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25728: LD_INT 0
25730: PPUSH
25731: PPUSH
25732: PPUSH
// if not hack in hackTanks then
25733: LD_VAR 0 1
25737: PUSH
25738: LD_EXP 114
25742: IN
25743: NOT
25744: IFFALSE 25748
// exit ;
25746: GO 25859
// index := GetElementIndex ( hackTanks , hack ) ;
25748: LD_ADDR_VAR 0 4
25752: PUSH
25753: LD_EXP 114
25757: PPUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL 33476 0 2
25767: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25768: LD_EXP 115
25772: PUSH
25773: LD_VAR 0 4
25777: ARRAY
25778: IFFALSE 25859
// begin for i in hackTanksCaptured [ index ] do
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: LD_EXP 115
25789: PUSH
25790: LD_VAR 0 4
25794: ARRAY
25795: PUSH
25796: FOR_IN
25797: IFFALSE 25823
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25799: LD_VAR 0 3
25803: PUSH
25804: LD_INT 1
25806: ARRAY
25807: PPUSH
25808: LD_VAR 0 3
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: PPUSH
25817: CALL_OW 235
25821: GO 25796
25823: POP
25824: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25825: LD_ADDR_EXP 115
25829: PUSH
25830: LD_EXP 115
25834: PPUSH
25835: LD_VAR 0 4
25839: PPUSH
25840: EMPTY
25841: PPUSH
25842: CALL_OW 1
25846: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25847: LD_VAR 0 1
25851: PPUSH
25852: LD_INT 0
25854: PPUSH
25855: CALL_OW 505
// end ; end ;
25859: LD_VAR 0 2
25863: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25864: LD_INT 0
25866: PPUSH
25867: PPUSH
25868: PPUSH
// if not hack in hackTanks or not vehicles then
25869: LD_VAR 0 1
25873: PUSH
25874: LD_EXP 114
25878: IN
25879: NOT
25880: PUSH
25881: LD_VAR 0 2
25885: NOT
25886: OR
25887: IFFALSE 25891
// exit ;
25889: GO 26166
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_VAR 0 1
25900: PPUSH
25901: LD_VAR 0 2
25905: PPUSH
25906: LD_INT 1
25908: PPUSH
25909: LD_INT 1
25911: PPUSH
25912: CALL 34126 0 4
25916: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25917: LD_ADDR_VAR 0 5
25921: PUSH
25922: LD_EXP 114
25926: PPUSH
25927: LD_VAR 0 1
25931: PPUSH
25932: CALL 33476 0 2
25936: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25937: LD_EXP 115
25941: PUSH
25942: LD_VAR 0 5
25946: ARRAY
25947: PUSH
25948: LD_EXP 116
25952: LESS
25953: IFFALSE 26142
// begin for i := 1 to vehicles do
25955: LD_ADDR_VAR 0 4
25959: PUSH
25960: DOUBLE
25961: LD_INT 1
25963: DEC
25964: ST_TO_ADDR
25965: LD_VAR 0 2
25969: PUSH
25970: FOR_TO
25971: IFFALSE 26140
// begin if hackTanksCaptured [ index ] = hackLimit then
25973: LD_EXP 115
25977: PUSH
25978: LD_VAR 0 5
25982: ARRAY
25983: PUSH
25984: LD_EXP 116
25988: EQUAL
25989: IFFALSE 25993
// break ;
25991: GO 26140
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25993: LD_ADDR_EXP 118
25997: PUSH
25998: LD_EXP 118
26002: PPUSH
26003: LD_VAR 0 5
26007: PPUSH
26008: LD_EXP 118
26012: PUSH
26013: LD_VAR 0 5
26017: ARRAY
26018: PUSH
26019: LD_INT 1
26021: PLUS
26022: PPUSH
26023: CALL_OW 1
26027: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26028: LD_ADDR_EXP 115
26032: PUSH
26033: LD_EXP 115
26037: PPUSH
26038: LD_VAR 0 5
26042: PUSH
26043: LD_EXP 115
26047: PUSH
26048: LD_VAR 0 5
26052: ARRAY
26053: PUSH
26054: LD_INT 1
26056: PLUS
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PPUSH
26062: LD_VAR 0 2
26066: PUSH
26067: LD_VAR 0 4
26071: ARRAY
26072: PUSH
26073: LD_VAR 0 2
26077: PUSH
26078: LD_VAR 0 4
26082: ARRAY
26083: PPUSH
26084: CALL_OW 255
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PPUSH
26093: CALL 33691 0 3
26097: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26098: LD_VAR 0 2
26102: PUSH
26103: LD_VAR 0 4
26107: ARRAY
26108: PPUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL_OW 255
26118: PPUSH
26119: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26123: LD_VAR 0 2
26127: PUSH
26128: LD_VAR 0 4
26132: ARRAY
26133: PPUSH
26134: CALL_OW 141
// end ;
26138: GO 25970
26140: POP
26141: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26142: LD_VAR 0 1
26146: PPUSH
26147: LD_EXP 115
26151: PUSH
26152: LD_VAR 0 5
26156: ARRAY
26157: PUSH
26158: LD_INT 0
26160: PLUS
26161: PPUSH
26162: CALL_OW 505
// end ;
26166: LD_VAR 0 3
26170: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26171: LD_INT 0
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
// if not hack in hackTanks then
26177: LD_VAR 0 1
26181: PUSH
26182: LD_EXP 114
26186: IN
26187: NOT
26188: IFFALSE 26192
// exit ;
26190: GO 26432
// index := GetElementIndex ( hackTanks , hack ) ;
26192: LD_ADDR_VAR 0 4
26196: PUSH
26197: LD_EXP 114
26201: PPUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL 33476 0 2
26211: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26212: LD_ADDR_VAR 0 3
26216: PUSH
26217: DOUBLE
26218: LD_EXP 115
26222: PUSH
26223: LD_VAR 0 4
26227: ARRAY
26228: INC
26229: ST_TO_ADDR
26230: LD_INT 1
26232: PUSH
26233: FOR_DOWNTO
26234: IFFALSE 26406
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26236: LD_ADDR_VAR 0 5
26240: PUSH
26241: LD_EXP 115
26245: PUSH
26246: LD_VAR 0 4
26250: ARRAY
26251: PUSH
26252: LD_VAR 0 3
26256: ARRAY
26257: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26258: LD_VAR 0 5
26262: PUSH
26263: LD_INT 1
26265: ARRAY
26266: PPUSH
26267: CALL_OW 302
26271: NOT
26272: PUSH
26273: LD_VAR 0 5
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: PPUSH
26282: CALL_OW 255
26286: PUSH
26287: LD_VAR 0 1
26291: PPUSH
26292: CALL_OW 255
26296: NONEQUAL
26297: OR
26298: IFFALSE 26404
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26300: LD_VAR 0 5
26304: PUSH
26305: LD_INT 1
26307: ARRAY
26308: PPUSH
26309: CALL_OW 305
26313: PUSH
26314: LD_VAR 0 5
26318: PUSH
26319: LD_INT 1
26321: ARRAY
26322: PPUSH
26323: CALL_OW 255
26327: PUSH
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL_OW 255
26337: EQUAL
26338: AND
26339: IFFALSE 26363
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26341: LD_VAR 0 5
26345: PUSH
26346: LD_INT 1
26348: ARRAY
26349: PPUSH
26350: LD_VAR 0 5
26354: PUSH
26355: LD_INT 2
26357: ARRAY
26358: PPUSH
26359: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26363: LD_ADDR_EXP 115
26367: PUSH
26368: LD_EXP 115
26372: PPUSH
26373: LD_VAR 0 4
26377: PPUSH
26378: LD_EXP 115
26382: PUSH
26383: LD_VAR 0 4
26387: ARRAY
26388: PPUSH
26389: LD_VAR 0 3
26393: PPUSH
26394: CALL_OW 3
26398: PPUSH
26399: CALL_OW 1
26403: ST_TO_ADDR
// end ; end ;
26404: GO 26233
26406: POP
26407: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_EXP 115
26417: PUSH
26418: LD_VAR 0 4
26422: ARRAY
26423: PUSH
26424: LD_INT 0
26426: PLUS
26427: PPUSH
26428: CALL_OW 505
// end ;
26432: LD_VAR 0 2
26436: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
// if not hack in hackTanks then
26443: LD_VAR 0 1
26447: PUSH
26448: LD_EXP 114
26452: IN
26453: NOT
26454: IFFALSE 26458
// exit ;
26456: GO 26543
// index := GetElementIndex ( hackTanks , hack ) ;
26458: LD_ADDR_VAR 0 5
26462: PUSH
26463: LD_EXP 114
26467: PPUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: CALL 33476 0 2
26477: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26478: LD_ADDR_VAR 0 4
26482: PUSH
26483: DOUBLE
26484: LD_INT 1
26486: DEC
26487: ST_TO_ADDR
26488: LD_EXP 115
26492: PUSH
26493: LD_VAR 0 5
26497: ARRAY
26498: PUSH
26499: FOR_TO
26500: IFFALSE 26541
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26502: LD_EXP 115
26506: PUSH
26507: LD_VAR 0 5
26511: ARRAY
26512: PUSH
26513: LD_VAR 0 4
26517: ARRAY
26518: PUSH
26519: LD_INT 1
26521: ARRAY
26522: PUSH
26523: LD_VAR 0 2
26527: EQUAL
26528: IFFALSE 26539
// KillUnit ( vehicle ) ;
26530: LD_VAR 0 2
26534: PPUSH
26535: CALL_OW 66
26539: GO 26499
26541: POP
26542: POP
// end ;
26543: LD_VAR 0 3
26547: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26548: LD_EXP 119
26552: NOT
26553: IFFALSE 26588
26555: GO 26557
26557: DISABLE
// begin initMiner := true ;
26558: LD_ADDR_EXP 119
26562: PUSH
26563: LD_INT 1
26565: ST_TO_ADDR
// minersList := [ ] ;
26566: LD_ADDR_EXP 120
26570: PUSH
26571: EMPTY
26572: ST_TO_ADDR
// minerMinesList := [ ] ;
26573: LD_ADDR_EXP 121
26577: PUSH
26578: EMPTY
26579: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26580: LD_ADDR_EXP 122
26584: PUSH
26585: LD_INT 5
26587: ST_TO_ADDR
// end ;
26588: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26589: LD_EXP 119
26593: PUSH
26594: LD_INT 34
26596: PUSH
26597: LD_INT 81
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: AND
26609: IFFALSE 27070
26611: GO 26613
26613: DISABLE
26614: LD_INT 0
26616: PPUSH
26617: PPUSH
26618: PPUSH
26619: PPUSH
// begin enable ;
26620: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26621: LD_ADDR_VAR 0 1
26625: PUSH
26626: LD_INT 34
26628: PUSH
26629: LD_INT 81
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: PUSH
26641: FOR_IN
26642: IFFALSE 26714
// begin if not i in minersList then
26644: LD_VAR 0 1
26648: PUSH
26649: LD_EXP 120
26653: IN
26654: NOT
26655: IFFALSE 26712
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26657: LD_ADDR_EXP 120
26661: PUSH
26662: LD_EXP 120
26666: PPUSH
26667: LD_EXP 120
26671: PUSH
26672: LD_INT 1
26674: PLUS
26675: PPUSH
26676: LD_VAR 0 1
26680: PPUSH
26681: CALL_OW 1
26685: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26686: LD_ADDR_EXP 121
26690: PUSH
26691: LD_EXP 121
26695: PPUSH
26696: LD_EXP 121
26700: PUSH
26701: LD_INT 1
26703: PLUS
26704: PPUSH
26705: EMPTY
26706: PPUSH
26707: CALL_OW 1
26711: ST_TO_ADDR
// end end ;
26712: GO 26641
26714: POP
26715: POP
// for i := minerMinesList downto 1 do
26716: LD_ADDR_VAR 0 1
26720: PUSH
26721: DOUBLE
26722: LD_EXP 121
26726: INC
26727: ST_TO_ADDR
26728: LD_INT 1
26730: PUSH
26731: FOR_DOWNTO
26732: IFFALSE 27068
// begin if IsLive ( minersList [ i ] ) then
26734: LD_EXP 120
26738: PUSH
26739: LD_VAR 0 1
26743: ARRAY
26744: PPUSH
26745: CALL_OW 300
26749: IFFALSE 26777
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26751: LD_EXP 120
26755: PUSH
26756: LD_VAR 0 1
26760: ARRAY
26761: PPUSH
26762: LD_EXP 121
26766: PUSH
26767: LD_VAR 0 1
26771: ARRAY
26772: PPUSH
26773: CALL_OW 505
// if not minerMinesList [ i ] then
26777: LD_EXP 121
26781: PUSH
26782: LD_VAR 0 1
26786: ARRAY
26787: NOT
26788: IFFALSE 26792
// continue ;
26790: GO 26731
// for j := minerMinesList [ i ] downto 1 do
26792: LD_ADDR_VAR 0 2
26796: PUSH
26797: DOUBLE
26798: LD_EXP 121
26802: PUSH
26803: LD_VAR 0 1
26807: ARRAY
26808: INC
26809: ST_TO_ADDR
26810: LD_INT 1
26812: PUSH
26813: FOR_DOWNTO
26814: IFFALSE 27064
// begin side := GetSide ( minersList [ i ] ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_EXP 120
26825: PUSH
26826: LD_VAR 0 1
26830: ARRAY
26831: PPUSH
26832: CALL_OW 255
26836: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26837: LD_ADDR_VAR 0 4
26841: PUSH
26842: LD_EXP 121
26846: PUSH
26847: LD_VAR 0 1
26851: ARRAY
26852: PUSH
26853: LD_VAR 0 2
26857: ARRAY
26858: PUSH
26859: LD_INT 1
26861: ARRAY
26862: PPUSH
26863: LD_EXP 121
26867: PUSH
26868: LD_VAR 0 1
26872: ARRAY
26873: PUSH
26874: LD_VAR 0 2
26878: ARRAY
26879: PUSH
26880: LD_INT 2
26882: ARRAY
26883: PPUSH
26884: CALL_OW 428
26888: ST_TO_ADDR
// if not tmp then
26889: LD_VAR 0 4
26893: NOT
26894: IFFALSE 26898
// continue ;
26896: GO 26813
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26898: LD_VAR 0 4
26902: PUSH
26903: LD_INT 81
26905: PUSH
26906: LD_VAR 0 3
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PPUSH
26915: CALL_OW 69
26919: IN
26920: PUSH
26921: LD_EXP 121
26925: PUSH
26926: LD_VAR 0 1
26930: ARRAY
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: PUSH
26938: LD_INT 1
26940: ARRAY
26941: PPUSH
26942: LD_EXP 121
26946: PUSH
26947: LD_VAR 0 1
26951: ARRAY
26952: PUSH
26953: LD_VAR 0 2
26957: ARRAY
26958: PUSH
26959: LD_INT 2
26961: ARRAY
26962: PPUSH
26963: CALL_OW 458
26967: AND
26968: IFFALSE 27062
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26970: LD_EXP 121
26974: PUSH
26975: LD_VAR 0 1
26979: ARRAY
26980: PUSH
26981: LD_VAR 0 2
26985: ARRAY
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PPUSH
26991: LD_EXP 121
26995: PUSH
26996: LD_VAR 0 1
27000: ARRAY
27001: PUSH
27002: LD_VAR 0 2
27006: ARRAY
27007: PUSH
27008: LD_INT 2
27010: ARRAY
27011: PPUSH
27012: LD_VAR 0 3
27016: PPUSH
27017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27021: LD_ADDR_EXP 121
27025: PUSH
27026: LD_EXP 121
27030: PPUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: LD_EXP 121
27040: PUSH
27041: LD_VAR 0 1
27045: ARRAY
27046: PPUSH
27047: LD_VAR 0 2
27051: PPUSH
27052: CALL_OW 3
27056: PPUSH
27057: CALL_OW 1
27061: ST_TO_ADDR
// end ; end ;
27062: GO 26813
27064: POP
27065: POP
// end ;
27066: GO 26731
27068: POP
27069: POP
// end ;
27070: PPOPN 4
27072: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27073: LD_INT 0
27075: PPUSH
27076: PPUSH
// result := false ;
27077: LD_ADDR_VAR 0 4
27081: PUSH
27082: LD_INT 0
27084: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 264
27094: PUSH
27095: LD_INT 81
27097: EQUAL
27098: NOT
27099: IFFALSE 27103
// exit ;
27101: GO 27343
// index := GetElementIndex ( minersList , unit ) ;
27103: LD_ADDR_VAR 0 5
27107: PUSH
27108: LD_EXP 120
27112: PPUSH
27113: LD_VAR 0 1
27117: PPUSH
27118: CALL 33476 0 2
27122: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27123: LD_EXP 121
27127: PUSH
27128: LD_VAR 0 5
27132: ARRAY
27133: PUSH
27134: LD_EXP 122
27138: GREATEREQUAL
27139: IFFALSE 27143
// exit ;
27141: GO 27343
// ComMoveXY ( unit , x , y ) ;
27143: LD_VAR 0 1
27147: PPUSH
27148: LD_VAR 0 2
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27162: LD_INT 35
27164: PPUSH
27165: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27169: LD_VAR 0 1
27173: PPUSH
27174: LD_VAR 0 2
27178: PPUSH
27179: LD_VAR 0 3
27183: PPUSH
27184: CALL 64739 0 3
27188: NOT
27189: PUSH
27190: LD_VAR 0 1
27194: PPUSH
27195: CALL_OW 314
27199: AND
27200: IFFALSE 27204
// exit ;
27202: GO 27343
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27204: LD_VAR 0 2
27208: PPUSH
27209: LD_VAR 0 3
27213: PPUSH
27214: CALL_OW 428
27218: PUSH
27219: LD_VAR 0 1
27223: EQUAL
27224: PUSH
27225: LD_VAR 0 1
27229: PPUSH
27230: CALL_OW 314
27234: NOT
27235: AND
27236: IFFALSE 27162
// PlaySoundXY ( x , y , PlantMine ) ;
27238: LD_VAR 0 2
27242: PPUSH
27243: LD_VAR 0 3
27247: PPUSH
27248: LD_STRING PlantMine
27250: PPUSH
27251: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27255: LD_VAR 0 2
27259: PPUSH
27260: LD_VAR 0 3
27264: PPUSH
27265: LD_VAR 0 1
27269: PPUSH
27270: CALL_OW 255
27274: PPUSH
27275: LD_INT 0
27277: PPUSH
27278: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27282: LD_ADDR_EXP 121
27286: PUSH
27287: LD_EXP 121
27291: PPUSH
27292: LD_VAR 0 5
27296: PUSH
27297: LD_EXP 121
27301: PUSH
27302: LD_VAR 0 5
27306: ARRAY
27307: PUSH
27308: LD_INT 1
27310: PLUS
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PPUSH
27316: LD_VAR 0 2
27320: PUSH
27321: LD_VAR 0 3
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL 33691 0 3
27334: ST_TO_ADDR
// result := true ;
27335: LD_ADDR_VAR 0 4
27339: PUSH
27340: LD_INT 1
27342: ST_TO_ADDR
// end ;
27343: LD_VAR 0 4
27347: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27348: LD_INT 0
27350: PPUSH
27351: PPUSH
27352: PPUSH
// if not unit in minersList then
27353: LD_VAR 0 1
27357: PUSH
27358: LD_EXP 120
27362: IN
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27760
// index := GetElementIndex ( minersList , unit ) ;
27368: LD_ADDR_VAR 0 6
27372: PUSH
27373: LD_EXP 120
27377: PPUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL 33476 0 2
27387: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27388: LD_ADDR_VAR 0 5
27392: PUSH
27393: DOUBLE
27394: LD_EXP 121
27398: PUSH
27399: LD_VAR 0 6
27403: ARRAY
27404: INC
27405: ST_TO_ADDR
27406: LD_INT 1
27408: PUSH
27409: FOR_DOWNTO
27410: IFFALSE 27571
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27412: LD_EXP 121
27416: PUSH
27417: LD_VAR 0 6
27421: ARRAY
27422: PUSH
27423: LD_VAR 0 5
27427: ARRAY
27428: PUSH
27429: LD_INT 1
27431: ARRAY
27432: PUSH
27433: LD_VAR 0 2
27437: EQUAL
27438: PUSH
27439: LD_EXP 121
27443: PUSH
27444: LD_VAR 0 6
27448: ARRAY
27449: PUSH
27450: LD_VAR 0 5
27454: ARRAY
27455: PUSH
27456: LD_INT 2
27458: ARRAY
27459: PUSH
27460: LD_VAR 0 3
27464: EQUAL
27465: AND
27466: IFFALSE 27569
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27468: LD_EXP 121
27472: PUSH
27473: LD_VAR 0 6
27477: ARRAY
27478: PUSH
27479: LD_VAR 0 5
27483: ARRAY
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: PPUSH
27489: LD_EXP 121
27493: PUSH
27494: LD_VAR 0 6
27498: ARRAY
27499: PUSH
27500: LD_VAR 0 5
27504: ARRAY
27505: PUSH
27506: LD_INT 2
27508: ARRAY
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 255
27519: PPUSH
27520: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27524: LD_ADDR_EXP 121
27528: PUSH
27529: LD_EXP 121
27533: PPUSH
27534: LD_VAR 0 6
27538: PPUSH
27539: LD_EXP 121
27543: PUSH
27544: LD_VAR 0 6
27548: ARRAY
27549: PPUSH
27550: LD_VAR 0 5
27554: PPUSH
27555: CALL_OW 3
27559: PPUSH
27560: CALL_OW 1
27564: ST_TO_ADDR
// exit ;
27565: POP
27566: POP
27567: GO 27760
// end ; end ;
27569: GO 27409
27571: POP
27572: POP
// for i := minerMinesList [ index ] downto 1 do
27573: LD_ADDR_VAR 0 5
27577: PUSH
27578: DOUBLE
27579: LD_EXP 121
27583: PUSH
27584: LD_VAR 0 6
27588: ARRAY
27589: INC
27590: ST_TO_ADDR
27591: LD_INT 1
27593: PUSH
27594: FOR_DOWNTO
27595: IFFALSE 27758
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27597: LD_EXP 121
27601: PUSH
27602: LD_VAR 0 6
27606: ARRAY
27607: PUSH
27608: LD_VAR 0 5
27612: ARRAY
27613: PUSH
27614: LD_INT 1
27616: ARRAY
27617: PPUSH
27618: LD_EXP 121
27622: PUSH
27623: LD_VAR 0 6
27627: ARRAY
27628: PUSH
27629: LD_VAR 0 5
27633: ARRAY
27634: PUSH
27635: LD_INT 2
27637: ARRAY
27638: PPUSH
27639: LD_VAR 0 2
27643: PPUSH
27644: LD_VAR 0 3
27648: PPUSH
27649: CALL_OW 298
27653: PUSH
27654: LD_INT 6
27656: LESS
27657: IFFALSE 27756
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27659: LD_EXP 121
27663: PUSH
27664: LD_VAR 0 6
27668: ARRAY
27669: PUSH
27670: LD_VAR 0 5
27674: ARRAY
27675: PUSH
27676: LD_INT 1
27678: ARRAY
27679: PPUSH
27680: LD_EXP 121
27684: PUSH
27685: LD_VAR 0 6
27689: ARRAY
27690: PUSH
27691: LD_VAR 0 5
27695: ARRAY
27696: PUSH
27697: LD_INT 2
27699: ARRAY
27700: PPUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 255
27710: PPUSH
27711: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27715: LD_ADDR_EXP 121
27719: PUSH
27720: LD_EXP 121
27724: PPUSH
27725: LD_VAR 0 6
27729: PPUSH
27730: LD_EXP 121
27734: PUSH
27735: LD_VAR 0 6
27739: ARRAY
27740: PPUSH
27741: LD_VAR 0 5
27745: PPUSH
27746: CALL_OW 3
27750: PPUSH
27751: CALL_OW 1
27755: ST_TO_ADDR
// end ; end ;
27756: GO 27594
27758: POP
27759: POP
// end ;
27760: LD_VAR 0 4
27764: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL_OW 264
27785: PUSH
27786: LD_INT 81
27788: EQUAL
27789: NOT
27790: PUSH
27791: LD_VAR 0 1
27795: PUSH
27796: LD_EXP 120
27800: IN
27801: NOT
27802: OR
27803: IFFALSE 27807
// exit ;
27805: GO 28129
// index := GetElementIndex ( minersList , unit ) ;
27807: LD_ADDR_VAR 0 6
27811: PUSH
27812: LD_EXP 120
27816: PPUSH
27817: LD_VAR 0 1
27821: PPUSH
27822: CALL 33476 0 2
27826: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27827: LD_ADDR_VAR 0 8
27831: PUSH
27832: LD_EXP 122
27836: PUSH
27837: LD_EXP 121
27841: PUSH
27842: LD_VAR 0 6
27846: ARRAY
27847: MINUS
27848: ST_TO_ADDR
// if not minesFreeAmount then
27849: LD_VAR 0 8
27853: NOT
27854: IFFALSE 27858
// exit ;
27856: GO 28129
// tmp := [ ] ;
27858: LD_ADDR_VAR 0 7
27862: PUSH
27863: EMPTY
27864: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27865: LD_ADDR_VAR 0 5
27869: PUSH
27870: DOUBLE
27871: LD_INT 1
27873: DEC
27874: ST_TO_ADDR
27875: LD_VAR 0 8
27879: PUSH
27880: FOR_TO
27881: IFFALSE 28076
// begin _d := rand ( 0 , 5 ) ;
27883: LD_ADDR_VAR 0 11
27887: PUSH
27888: LD_INT 0
27890: PPUSH
27891: LD_INT 5
27893: PPUSH
27894: CALL_OW 12
27898: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27899: LD_ADDR_VAR 0 12
27903: PUSH
27904: LD_INT 2
27906: PPUSH
27907: LD_INT 6
27909: PPUSH
27910: CALL_OW 12
27914: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27915: LD_ADDR_VAR 0 9
27919: PUSH
27920: LD_VAR 0 2
27924: PPUSH
27925: LD_VAR 0 11
27929: PPUSH
27930: LD_VAR 0 12
27934: PPUSH
27935: CALL_OW 272
27939: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27940: LD_ADDR_VAR 0 10
27944: PUSH
27945: LD_VAR 0 3
27949: PPUSH
27950: LD_VAR 0 11
27954: PPUSH
27955: LD_VAR 0 12
27959: PPUSH
27960: CALL_OW 273
27964: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27965: LD_VAR 0 9
27969: PPUSH
27970: LD_VAR 0 10
27974: PPUSH
27975: CALL_OW 488
27979: PUSH
27980: LD_VAR 0 9
27984: PUSH
27985: LD_VAR 0 10
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_VAR 0 7
27998: IN
27999: NOT
28000: AND
28001: PUSH
28002: LD_VAR 0 9
28006: PPUSH
28007: LD_VAR 0 10
28011: PPUSH
28012: CALL_OW 458
28016: NOT
28017: AND
28018: IFFALSE 28060
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28020: LD_ADDR_VAR 0 7
28024: PUSH
28025: LD_VAR 0 7
28029: PPUSH
28030: LD_VAR 0 7
28034: PUSH
28035: LD_INT 1
28037: PLUS
28038: PPUSH
28039: LD_VAR 0 9
28043: PUSH
28044: LD_VAR 0 10
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 1
28057: ST_TO_ADDR
28058: GO 28074
// i := i - 1 ;
28060: LD_ADDR_VAR 0 5
28064: PUSH
28065: LD_VAR 0 5
28069: PUSH
28070: LD_INT 1
28072: MINUS
28073: ST_TO_ADDR
// end ;
28074: GO 27880
28076: POP
28077: POP
// for i in tmp do
28078: LD_ADDR_VAR 0 5
28082: PUSH
28083: LD_VAR 0 7
28087: PUSH
28088: FOR_IN
28089: IFFALSE 28127
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28091: LD_VAR 0 1
28095: PPUSH
28096: LD_VAR 0 5
28100: PUSH
28101: LD_INT 1
28103: ARRAY
28104: PPUSH
28105: LD_VAR 0 5
28109: PUSH
28110: LD_INT 2
28112: ARRAY
28113: PPUSH
28114: CALL 27073 0 3
28118: NOT
28119: IFFALSE 28125
// exit ;
28121: POP
28122: POP
28123: GO 28129
28125: GO 28088
28127: POP
28128: POP
// end ;
28129: LD_VAR 0 4
28133: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
// if not GetClass ( unit ) = class_sniper then
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 257
28152: PUSH
28153: LD_INT 5
28155: EQUAL
28156: NOT
28157: IFFALSE 28161
// exit ;
28159: GO 28549
// dist := 8 ;
28161: LD_ADDR_VAR 0 5
28165: PUSH
28166: LD_INT 8
28168: ST_TO_ADDR
// viewRange := 12 ;
28169: LD_ADDR_VAR 0 7
28173: PUSH
28174: LD_INT 12
28176: ST_TO_ADDR
// side := GetSide ( unit ) ;
28177: LD_ADDR_VAR 0 6
28181: PUSH
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 255
28191: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28192: LD_INT 61
28194: PPUSH
28195: LD_VAR 0 6
28199: PPUSH
28200: CALL_OW 321
28204: PUSH
28205: LD_INT 2
28207: EQUAL
28208: IFFALSE 28218
// viewRange := 16 ;
28210: LD_ADDR_VAR 0 7
28214: PUSH
28215: LD_INT 16
28217: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28218: LD_VAR 0 1
28222: PPUSH
28223: LD_VAR 0 2
28227: PPUSH
28228: LD_VAR 0 3
28232: PPUSH
28233: CALL_OW 297
28237: PUSH
28238: LD_VAR 0 5
28242: GREATER
28243: IFFALSE 28322
// begin ComMoveXY ( unit , x , y ) ;
28245: LD_VAR 0 1
28249: PPUSH
28250: LD_VAR 0 2
28254: PPUSH
28255: LD_VAR 0 3
28259: PPUSH
28260: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28264: LD_INT 35
28266: PPUSH
28267: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28271: LD_VAR 0 1
28275: PPUSH
28276: LD_VAR 0 2
28280: PPUSH
28281: LD_VAR 0 3
28285: PPUSH
28286: CALL 64739 0 3
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28549
// until GetDistUnitXY ( unit , x , y ) < dist ;
28295: LD_VAR 0 1
28299: PPUSH
28300: LD_VAR 0 2
28304: PPUSH
28305: LD_VAR 0 3
28309: PPUSH
28310: CALL_OW 297
28314: PUSH
28315: LD_VAR 0 5
28319: LESS
28320: IFFALSE 28264
// end ; ComTurnXY ( unit , x , y ) ;
28322: LD_VAR 0 1
28326: PPUSH
28327: LD_VAR 0 2
28331: PPUSH
28332: LD_VAR 0 3
28336: PPUSH
28337: CALL_OW 118
// wait ( 5 ) ;
28341: LD_INT 5
28343: PPUSH
28344: CALL_OW 67
// _d := GetDir ( unit ) ;
28348: LD_ADDR_VAR 0 10
28352: PUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 254
28362: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28363: LD_ADDR_VAR 0 8
28367: PUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 250
28377: PPUSH
28378: LD_VAR 0 10
28382: PPUSH
28383: LD_VAR 0 5
28387: PPUSH
28388: CALL_OW 272
28392: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28393: LD_ADDR_VAR 0 9
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 251
28407: PPUSH
28408: LD_VAR 0 10
28412: PPUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: CALL_OW 273
28422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28423: LD_VAR 0 8
28427: PPUSH
28428: LD_VAR 0 9
28432: PPUSH
28433: CALL_OW 488
28437: NOT
28438: IFFALSE 28442
// exit ;
28440: GO 28549
// ComAnimCustom ( unit , 1 ) ;
28442: LD_VAR 0 1
28446: PPUSH
28447: LD_INT 1
28449: PPUSH
28450: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28454: LD_VAR 0 8
28458: PPUSH
28459: LD_VAR 0 9
28463: PPUSH
28464: LD_VAR 0 6
28468: PPUSH
28469: LD_VAR 0 7
28473: PPUSH
28474: CALL_OW 330
// repeat wait ( 1 ) ;
28478: LD_INT 1
28480: PPUSH
28481: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28485: LD_VAR 0 1
28489: PPUSH
28490: CALL_OW 316
28494: PUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: CALL_OW 314
28504: OR
28505: PUSH
28506: LD_VAR 0 1
28510: PPUSH
28511: CALL_OW 302
28515: NOT
28516: OR
28517: PUSH
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL_OW 301
28527: OR
28528: IFFALSE 28478
// RemoveSeeing ( _x , _y , side ) ;
28530: LD_VAR 0 8
28534: PPUSH
28535: LD_VAR 0 9
28539: PPUSH
28540: LD_VAR 0 6
28544: PPUSH
28545: CALL_OW 331
// end ; end_of_file
28549: LD_VAR 0 4
28553: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28554: LD_INT 0
28556: PPUSH
28557: PPUSH
// if exist_mode then
28558: LD_VAR 0 2
28562: IFFALSE 28587
// unit := CreateCharacter ( prefix & ident ) else
28564: LD_ADDR_VAR 0 5
28568: PUSH
28569: LD_VAR 0 3
28573: PUSH
28574: LD_VAR 0 1
28578: STR
28579: PPUSH
28580: CALL_OW 34
28584: ST_TO_ADDR
28585: GO 28602
// unit := NewCharacter ( ident ) ;
28587: LD_ADDR_VAR 0 5
28591: PUSH
28592: LD_VAR 0 1
28596: PPUSH
28597: CALL_OW 25
28601: ST_TO_ADDR
// result := unit ;
28602: LD_ADDR_VAR 0 4
28606: PUSH
28607: LD_VAR 0 5
28611: ST_TO_ADDR
// end ;
28612: LD_VAR 0 4
28616: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28617: LD_INT 0
28619: PPUSH
28620: PPUSH
// if not side or not nation then
28621: LD_VAR 0 1
28625: NOT
28626: PUSH
28627: LD_VAR 0 2
28631: NOT
28632: OR
28633: IFFALSE 28637
// exit ;
28635: GO 29405
// case nation of nation_american :
28637: LD_VAR 0 2
28641: PUSH
28642: LD_INT 1
28644: DOUBLE
28645: EQUAL
28646: IFTRUE 28650
28648: GO 28864
28650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: LD_INT 35
28658: PUSH
28659: LD_INT 45
28661: PUSH
28662: LD_INT 46
28664: PUSH
28665: LD_INT 47
28667: PUSH
28668: LD_INT 82
28670: PUSH
28671: LD_INT 83
28673: PUSH
28674: LD_INT 84
28676: PUSH
28677: LD_INT 85
28679: PUSH
28680: LD_INT 86
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: LD_INT 6
28691: PUSH
28692: LD_INT 15
28694: PUSH
28695: LD_INT 16
28697: PUSH
28698: LD_INT 7
28700: PUSH
28701: LD_INT 12
28703: PUSH
28704: LD_INT 13
28706: PUSH
28707: LD_INT 10
28709: PUSH
28710: LD_INT 14
28712: PUSH
28713: LD_INT 20
28715: PUSH
28716: LD_INT 21
28718: PUSH
28719: LD_INT 22
28721: PUSH
28722: LD_INT 25
28724: PUSH
28725: LD_INT 32
28727: PUSH
28728: LD_INT 27
28730: PUSH
28731: LD_INT 36
28733: PUSH
28734: LD_INT 69
28736: PUSH
28737: LD_INT 39
28739: PUSH
28740: LD_INT 34
28742: PUSH
28743: LD_INT 40
28745: PUSH
28746: LD_INT 48
28748: PUSH
28749: LD_INT 49
28751: PUSH
28752: LD_INT 50
28754: PUSH
28755: LD_INT 51
28757: PUSH
28758: LD_INT 52
28760: PUSH
28761: LD_INT 53
28763: PUSH
28764: LD_INT 54
28766: PUSH
28767: LD_INT 55
28769: PUSH
28770: LD_INT 56
28772: PUSH
28773: LD_INT 57
28775: PUSH
28776: LD_INT 58
28778: PUSH
28779: LD_INT 59
28781: PUSH
28782: LD_INT 60
28784: PUSH
28785: LD_INT 61
28787: PUSH
28788: LD_INT 62
28790: PUSH
28791: LD_INT 80
28793: PUSH
28794: LD_INT 82
28796: PUSH
28797: LD_INT 83
28799: PUSH
28800: LD_INT 84
28802: PUSH
28803: LD_INT 85
28805: PUSH
28806: LD_INT 86
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
28862: GO 29329
28864: LD_INT 2
28866: DOUBLE
28867: EQUAL
28868: IFTRUE 28872
28870: GO 29098
28872: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28873: LD_ADDR_VAR 0 4
28877: PUSH
28878: LD_INT 35
28880: PUSH
28881: LD_INT 45
28883: PUSH
28884: LD_INT 46
28886: PUSH
28887: LD_INT 47
28889: PUSH
28890: LD_INT 82
28892: PUSH
28893: LD_INT 83
28895: PUSH
28896: LD_INT 84
28898: PUSH
28899: LD_INT 85
28901: PUSH
28902: LD_INT 87
28904: PUSH
28905: LD_INT 70
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 11
28913: PUSH
28914: LD_INT 3
28916: PUSH
28917: LD_INT 4
28919: PUSH
28920: LD_INT 5
28922: PUSH
28923: LD_INT 6
28925: PUSH
28926: LD_INT 15
28928: PUSH
28929: LD_INT 18
28931: PUSH
28932: LD_INT 7
28934: PUSH
28935: LD_INT 17
28937: PUSH
28938: LD_INT 8
28940: PUSH
28941: LD_INT 20
28943: PUSH
28944: LD_INT 21
28946: PUSH
28947: LD_INT 22
28949: PUSH
28950: LD_INT 72
28952: PUSH
28953: LD_INT 26
28955: PUSH
28956: LD_INT 69
28958: PUSH
28959: LD_INT 39
28961: PUSH
28962: LD_INT 40
28964: PUSH
28965: LD_INT 41
28967: PUSH
28968: LD_INT 42
28970: PUSH
28971: LD_INT 43
28973: PUSH
28974: LD_INT 48
28976: PUSH
28977: LD_INT 49
28979: PUSH
28980: LD_INT 50
28982: PUSH
28983: LD_INT 51
28985: PUSH
28986: LD_INT 52
28988: PUSH
28989: LD_INT 53
28991: PUSH
28992: LD_INT 54
28994: PUSH
28995: LD_INT 55
28997: PUSH
28998: LD_INT 56
29000: PUSH
29001: LD_INT 60
29003: PUSH
29004: LD_INT 61
29006: PUSH
29007: LD_INT 62
29009: PUSH
29010: LD_INT 66
29012: PUSH
29013: LD_INT 67
29015: PUSH
29016: LD_INT 68
29018: PUSH
29019: LD_INT 81
29021: PUSH
29022: LD_INT 82
29024: PUSH
29025: LD_INT 83
29027: PUSH
29028: LD_INT 84
29030: PUSH
29031: LD_INT 85
29033: PUSH
29034: LD_INT 87
29036: PUSH
29037: LD_INT 88
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: ST_TO_ADDR
29096: GO 29329
29098: LD_INT 3
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29328
29106: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29107: LD_ADDR_VAR 0 4
29111: PUSH
29112: LD_INT 46
29114: PUSH
29115: LD_INT 47
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 82
29126: PUSH
29127: LD_INT 83
29129: PUSH
29130: LD_INT 84
29132: PUSH
29133: LD_INT 85
29135: PUSH
29136: LD_INT 86
29138: PUSH
29139: LD_INT 11
29141: PUSH
29142: LD_INT 9
29144: PUSH
29145: LD_INT 20
29147: PUSH
29148: LD_INT 19
29150: PUSH
29151: LD_INT 21
29153: PUSH
29154: LD_INT 24
29156: PUSH
29157: LD_INT 22
29159: PUSH
29160: LD_INT 25
29162: PUSH
29163: LD_INT 28
29165: PUSH
29166: LD_INT 29
29168: PUSH
29169: LD_INT 30
29171: PUSH
29172: LD_INT 31
29174: PUSH
29175: LD_INT 37
29177: PUSH
29178: LD_INT 38
29180: PUSH
29181: LD_INT 32
29183: PUSH
29184: LD_INT 27
29186: PUSH
29187: LD_INT 33
29189: PUSH
29190: LD_INT 69
29192: PUSH
29193: LD_INT 39
29195: PUSH
29196: LD_INT 34
29198: PUSH
29199: LD_INT 40
29201: PUSH
29202: LD_INT 71
29204: PUSH
29205: LD_INT 23
29207: PUSH
29208: LD_INT 44
29210: PUSH
29211: LD_INT 48
29213: PUSH
29214: LD_INT 49
29216: PUSH
29217: LD_INT 50
29219: PUSH
29220: LD_INT 51
29222: PUSH
29223: LD_INT 52
29225: PUSH
29226: LD_INT 53
29228: PUSH
29229: LD_INT 54
29231: PUSH
29232: LD_INT 55
29234: PUSH
29235: LD_INT 56
29237: PUSH
29238: LD_INT 57
29240: PUSH
29241: LD_INT 58
29243: PUSH
29244: LD_INT 59
29246: PUSH
29247: LD_INT 63
29249: PUSH
29250: LD_INT 64
29252: PUSH
29253: LD_INT 65
29255: PUSH
29256: LD_INT 82
29258: PUSH
29259: LD_INT 83
29261: PUSH
29262: LD_INT 84
29264: PUSH
29265: LD_INT 85
29267: PUSH
29268: LD_INT 86
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: ST_TO_ADDR
29326: GO 29329
29328: POP
// if state > - 1 and state < 3 then
29329: LD_VAR 0 3
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: GREATER
29338: PUSH
29339: LD_VAR 0 3
29343: PUSH
29344: LD_INT 3
29346: LESS
29347: AND
29348: IFFALSE 29405
// for i in result do
29350: LD_ADDR_VAR 0 5
29354: PUSH
29355: LD_VAR 0 4
29359: PUSH
29360: FOR_IN
29361: IFFALSE 29403
// if GetTech ( i , side ) <> state then
29363: LD_VAR 0 5
29367: PPUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: CALL_OW 321
29377: PUSH
29378: LD_VAR 0 3
29382: NONEQUAL
29383: IFFALSE 29401
// result := result diff i ;
29385: LD_ADDR_VAR 0 4
29389: PUSH
29390: LD_VAR 0 4
29394: PUSH
29395: LD_VAR 0 5
29399: DIFF
29400: ST_TO_ADDR
29401: GO 29360
29403: POP
29404: POP
// end ;
29405: LD_VAR 0 4
29409: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29410: LD_INT 0
29412: PPUSH
29413: PPUSH
29414: PPUSH
// result := true ;
29415: LD_ADDR_VAR 0 3
29419: PUSH
29420: LD_INT 1
29422: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29423: LD_ADDR_VAR 0 5
29427: PUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL_OW 480
29437: ST_TO_ADDR
// if not tmp then
29438: LD_VAR 0 5
29442: NOT
29443: IFFALSE 29447
// exit ;
29445: GO 29496
// for i in tmp do
29447: LD_ADDR_VAR 0 4
29451: PUSH
29452: LD_VAR 0 5
29456: PUSH
29457: FOR_IN
29458: IFFALSE 29494
// if GetTech ( i , side ) <> state_researched then
29460: LD_VAR 0 4
29464: PPUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 321
29474: PUSH
29475: LD_INT 2
29477: NONEQUAL
29478: IFFALSE 29492
// begin result := false ;
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: LD_INT 0
29487: ST_TO_ADDR
// exit ;
29488: POP
29489: POP
29490: GO 29496
// end ;
29492: GO 29457
29494: POP
29495: POP
// end ;
29496: LD_VAR 0 3
29500: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29501: LD_INT 0
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
29514: PPUSH
29515: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29516: LD_VAR 0 1
29520: NOT
29521: PUSH
29522: LD_VAR 0 1
29526: PPUSH
29527: CALL_OW 257
29531: PUSH
29532: LD_INT 9
29534: NONEQUAL
29535: OR
29536: IFFALSE 29540
// exit ;
29538: GO 30113
// side := GetSide ( unit ) ;
29540: LD_ADDR_VAR 0 9
29544: PUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL_OW 255
29554: ST_TO_ADDR
// tech_space := tech_spacanom ;
29555: LD_ADDR_VAR 0 12
29559: PUSH
29560: LD_INT 29
29562: ST_TO_ADDR
// tech_time := tech_taurad ;
29563: LD_ADDR_VAR 0 13
29567: PUSH
29568: LD_INT 28
29570: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29571: LD_ADDR_VAR 0 11
29575: PUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 310
29585: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29586: LD_VAR 0 11
29590: PPUSH
29591: CALL_OW 247
29595: PUSH
29596: LD_INT 2
29598: EQUAL
29599: IFFALSE 29603
// exit ;
29601: GO 30113
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29603: LD_ADDR_VAR 0 8
29607: PUSH
29608: LD_INT 81
29610: PUSH
29611: LD_VAR 0 9
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: LD_INT 21
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PPUSH
29641: CALL_OW 69
29645: ST_TO_ADDR
// if not tmp then
29646: LD_VAR 0 8
29650: NOT
29651: IFFALSE 29655
// exit ;
29653: GO 30113
// if in_unit then
29655: LD_VAR 0 11
29659: IFFALSE 29683
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29661: LD_ADDR_VAR 0 10
29665: PUSH
29666: LD_VAR 0 8
29670: PPUSH
29671: LD_VAR 0 11
29675: PPUSH
29676: CALL_OW 74
29680: ST_TO_ADDR
29681: GO 29703
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29683: LD_ADDR_VAR 0 10
29687: PUSH
29688: LD_VAR 0 8
29692: PPUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 74
29702: ST_TO_ADDR
// if not enemy then
29703: LD_VAR 0 10
29707: NOT
29708: IFFALSE 29712
// exit ;
29710: GO 30113
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29712: LD_VAR 0 11
29716: PUSH
29717: LD_VAR 0 11
29721: PPUSH
29722: LD_VAR 0 10
29726: PPUSH
29727: CALL_OW 296
29731: PUSH
29732: LD_INT 13
29734: GREATER
29735: AND
29736: PUSH
29737: LD_VAR 0 1
29741: PPUSH
29742: LD_VAR 0 10
29746: PPUSH
29747: CALL_OW 296
29751: PUSH
29752: LD_INT 12
29754: GREATER
29755: OR
29756: IFFALSE 29760
// exit ;
29758: GO 30113
// missile := [ 1 ] ;
29760: LD_ADDR_VAR 0 14
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29771: LD_VAR 0 9
29775: PPUSH
29776: LD_VAR 0 12
29780: PPUSH
29781: CALL_OW 325
29785: IFFALSE 29814
// missile := Replace ( missile , missile + 1 , 2 ) ;
29787: LD_ADDR_VAR 0 14
29791: PUSH
29792: LD_VAR 0 14
29796: PPUSH
29797: LD_VAR 0 14
29801: PUSH
29802: LD_INT 1
29804: PLUS
29805: PPUSH
29806: LD_INT 2
29808: PPUSH
29809: CALL_OW 1
29813: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29814: LD_VAR 0 9
29818: PPUSH
29819: LD_VAR 0 13
29823: PPUSH
29824: CALL_OW 325
29828: PUSH
29829: LD_VAR 0 10
29833: PPUSH
29834: CALL_OW 255
29838: PPUSH
29839: LD_VAR 0 13
29843: PPUSH
29844: CALL_OW 325
29848: NOT
29849: AND
29850: IFFALSE 29879
// missile := Replace ( missile , missile + 1 , 3 ) ;
29852: LD_ADDR_VAR 0 14
29856: PUSH
29857: LD_VAR 0 14
29861: PPUSH
29862: LD_VAR 0 14
29866: PUSH
29867: LD_INT 1
29869: PLUS
29870: PPUSH
29871: LD_INT 3
29873: PPUSH
29874: CALL_OW 1
29878: ST_TO_ADDR
// if missile < 2 then
29879: LD_VAR 0 14
29883: PUSH
29884: LD_INT 2
29886: LESS
29887: IFFALSE 29891
// exit ;
29889: GO 30113
// x := GetX ( enemy ) ;
29891: LD_ADDR_VAR 0 4
29895: PUSH
29896: LD_VAR 0 10
29900: PPUSH
29901: CALL_OW 250
29905: ST_TO_ADDR
// y := GetY ( enemy ) ;
29906: LD_ADDR_VAR 0 5
29910: PUSH
29911: LD_VAR 0 10
29915: PPUSH
29916: CALL_OW 251
29920: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29921: LD_ADDR_VAR 0 6
29925: PUSH
29926: LD_VAR 0 4
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PPUSH
29935: LD_INT 1
29937: PPUSH
29938: CALL_OW 12
29942: PLUS
29943: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29944: LD_ADDR_VAR 0 7
29948: PUSH
29949: LD_VAR 0 5
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PPUSH
29958: LD_INT 1
29960: PPUSH
29961: CALL_OW 12
29965: PLUS
29966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29967: LD_VAR 0 6
29971: PPUSH
29972: LD_VAR 0 7
29976: PPUSH
29977: CALL_OW 488
29981: NOT
29982: IFFALSE 30004
// begin _x := x ;
29984: LD_ADDR_VAR 0 6
29988: PUSH
29989: LD_VAR 0 4
29993: ST_TO_ADDR
// _y := y ;
29994: LD_ADDR_VAR 0 7
29998: PUSH
29999: LD_VAR 0 5
30003: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_INT 1
30011: PPUSH
30012: LD_VAR 0 14
30016: PPUSH
30017: CALL_OW 12
30021: ST_TO_ADDR
// case i of 1 :
30022: LD_VAR 0 3
30026: PUSH
30027: LD_INT 1
30029: DOUBLE
30030: EQUAL
30031: IFTRUE 30035
30033: GO 30052
30035: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30036: LD_VAR 0 1
30040: PPUSH
30041: LD_VAR 0 10
30045: PPUSH
30046: CALL_OW 115
30050: GO 30113
30052: LD_INT 2
30054: DOUBLE
30055: EQUAL
30056: IFTRUE 30060
30058: GO 30082
30060: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30061: LD_VAR 0 1
30065: PPUSH
30066: LD_VAR 0 6
30070: PPUSH
30071: LD_VAR 0 7
30075: PPUSH
30076: CALL_OW 153
30080: GO 30113
30082: LD_INT 3
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30112
30090: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30091: LD_VAR 0 1
30095: PPUSH
30096: LD_VAR 0 6
30100: PPUSH
30101: LD_VAR 0 7
30105: PPUSH
30106: CALL_OW 154
30110: GO 30113
30112: POP
// end ;
30113: LD_VAR 0 2
30117: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30118: LD_INT 0
30120: PPUSH
30121: PPUSH
30122: PPUSH
30123: PPUSH
30124: PPUSH
30125: PPUSH
// if not unit or not building then
30126: LD_VAR 0 1
30130: NOT
30131: PUSH
30132: LD_VAR 0 2
30136: NOT
30137: OR
30138: IFFALSE 30142
// exit ;
30140: GO 30300
// x := GetX ( building ) ;
30142: LD_ADDR_VAR 0 5
30146: PUSH
30147: LD_VAR 0 2
30151: PPUSH
30152: CALL_OW 250
30156: ST_TO_ADDR
// y := GetY ( building ) ;
30157: LD_ADDR_VAR 0 6
30161: PUSH
30162: LD_VAR 0 2
30166: PPUSH
30167: CALL_OW 251
30171: ST_TO_ADDR
// for i = 0 to 5 do
30172: LD_ADDR_VAR 0 4
30176: PUSH
30177: DOUBLE
30178: LD_INT 0
30180: DEC
30181: ST_TO_ADDR
30182: LD_INT 5
30184: PUSH
30185: FOR_TO
30186: IFFALSE 30298
// begin _x := ShiftX ( x , i , 3 ) ;
30188: LD_ADDR_VAR 0 7
30192: PUSH
30193: LD_VAR 0 5
30197: PPUSH
30198: LD_VAR 0 4
30202: PPUSH
30203: LD_INT 3
30205: PPUSH
30206: CALL_OW 272
30210: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30211: LD_ADDR_VAR 0 8
30215: PUSH
30216: LD_VAR 0 6
30220: PPUSH
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 3
30228: PPUSH
30229: CALL_OW 273
30233: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30234: LD_VAR 0 7
30238: PPUSH
30239: LD_VAR 0 8
30243: PPUSH
30244: CALL_OW 488
30248: NOT
30249: IFFALSE 30253
// continue ;
30251: GO 30185
// if HexInfo ( _x , _y ) = 0 then
30253: LD_VAR 0 7
30257: PPUSH
30258: LD_VAR 0 8
30262: PPUSH
30263: CALL_OW 428
30267: PUSH
30268: LD_INT 0
30270: EQUAL
30271: IFFALSE 30296
// begin ComMoveXY ( unit , _x , _y ) ;
30273: LD_VAR 0 1
30277: PPUSH
30278: LD_VAR 0 7
30282: PPUSH
30283: LD_VAR 0 8
30287: PPUSH
30288: CALL_OW 111
// exit ;
30292: POP
30293: POP
30294: GO 30300
// end ; end ;
30296: GO 30185
30298: POP
30299: POP
// end ;
30300: LD_VAR 0 3
30304: RET
// export function ScanBase ( side , base_area ) ; begin
30305: LD_INT 0
30307: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30308: LD_ADDR_VAR 0 3
30312: PUSH
30313: LD_VAR 0 2
30317: PPUSH
30318: LD_INT 81
30320: PUSH
30321: LD_VAR 0 1
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PPUSH
30330: CALL_OW 70
30334: ST_TO_ADDR
// end ;
30335: LD_VAR 0 3
30339: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30340: LD_INT 0
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
// result := false ;
30346: LD_ADDR_VAR 0 2
30350: PUSH
30351: LD_INT 0
30353: ST_TO_ADDR
// side := GetSide ( unit ) ;
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 255
30368: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30369: LD_ADDR_VAR 0 4
30373: PUSH
30374: LD_VAR 0 1
30378: PPUSH
30379: CALL_OW 248
30383: ST_TO_ADDR
// case nat of 1 :
30384: LD_VAR 0 4
30388: PUSH
30389: LD_INT 1
30391: DOUBLE
30392: EQUAL
30393: IFTRUE 30397
30395: GO 30408
30397: POP
// tech := tech_lassight ; 2 :
30398: LD_ADDR_VAR 0 5
30402: PUSH
30403: LD_INT 12
30405: ST_TO_ADDR
30406: GO 30447
30408: LD_INT 2
30410: DOUBLE
30411: EQUAL
30412: IFTRUE 30416
30414: GO 30427
30416: POP
// tech := tech_mortar ; 3 :
30417: LD_ADDR_VAR 0 5
30421: PUSH
30422: LD_INT 41
30424: ST_TO_ADDR
30425: GO 30447
30427: LD_INT 3
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30446
30435: POP
// tech := tech_bazooka ; end ;
30436: LD_ADDR_VAR 0 5
30440: PUSH
30441: LD_INT 44
30443: ST_TO_ADDR
30444: GO 30447
30446: POP
// if Researched ( side , tech ) then
30447: LD_VAR 0 3
30451: PPUSH
30452: LD_VAR 0 5
30456: PPUSH
30457: CALL_OW 325
30461: IFFALSE 30488
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30463: LD_ADDR_VAR 0 2
30467: PUSH
30468: LD_INT 5
30470: PUSH
30471: LD_INT 8
30473: PUSH
30474: LD_INT 9
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: PUSH
30482: LD_VAR 0 4
30486: ARRAY
30487: ST_TO_ADDR
// end ;
30488: LD_VAR 0 2
30492: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30493: LD_INT 0
30495: PPUSH
30496: PPUSH
30497: PPUSH
// if not mines then
30498: LD_VAR 0 2
30502: NOT
30503: IFFALSE 30507
// exit ;
30505: GO 30651
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30507: LD_ADDR_VAR 0 5
30511: PUSH
30512: LD_INT 81
30514: PUSH
30515: LD_VAR 0 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: LD_INT 21
30529: PUSH
30530: LD_INT 3
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PPUSH
30545: CALL_OW 69
30549: ST_TO_ADDR
// for i in mines do
30550: LD_ADDR_VAR 0 4
30554: PUSH
30555: LD_VAR 0 2
30559: PUSH
30560: FOR_IN
30561: IFFALSE 30649
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30563: LD_VAR 0 4
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: PPUSH
30572: LD_VAR 0 4
30576: PUSH
30577: LD_INT 2
30579: ARRAY
30580: PPUSH
30581: CALL_OW 458
30585: NOT
30586: IFFALSE 30590
// continue ;
30588: GO 30560
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30590: LD_VAR 0 4
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_VAR 0 4
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: PPUSH
30608: CALL_OW 428
30612: PUSH
30613: LD_VAR 0 5
30617: IN
30618: IFFALSE 30647
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30620: LD_VAR 0 4
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PPUSH
30629: LD_VAR 0 4
30633: PUSH
30634: LD_INT 2
30636: ARRAY
30637: PPUSH
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL_OW 456
// end ;
30647: GO 30560
30649: POP
30650: POP
// end ;
30651: LD_VAR 0 3
30655: RET
// export function Count ( array ) ; var i ; begin
30656: LD_INT 0
30658: PPUSH
30659: PPUSH
// result := 0 ;
30660: LD_ADDR_VAR 0 2
30664: PUSH
30665: LD_INT 0
30667: ST_TO_ADDR
// for i in array do
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_VAR 0 1
30677: PUSH
30678: FOR_IN
30679: IFFALSE 30703
// if i then
30681: LD_VAR 0 3
30685: IFFALSE 30701
// result := result + 1 ;
30687: LD_ADDR_VAR 0 2
30691: PUSH
30692: LD_VAR 0 2
30696: PUSH
30697: LD_INT 1
30699: PLUS
30700: ST_TO_ADDR
30701: GO 30678
30703: POP
30704: POP
// end ;
30705: LD_VAR 0 2
30709: RET
// export function IsEmpty ( building ) ; begin
30710: LD_INT 0
30712: PPUSH
// if not building then
30713: LD_VAR 0 1
30717: NOT
30718: IFFALSE 30722
// exit ;
30720: GO 30765
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30722: LD_ADDR_VAR 0 2
30726: PUSH
30727: LD_VAR 0 1
30731: PUSH
30732: LD_INT 22
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 255
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 58
30751: PUSH
30752: EMPTY
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL_OW 69
30763: IN
30764: ST_TO_ADDR
// end ;
30765: LD_VAR 0 2
30769: RET
// export function IsNotFull ( building ) ; var places ; begin
30770: LD_INT 0
30772: PPUSH
30773: PPUSH
// if not building then
30774: LD_VAR 0 1
30778: NOT
30779: IFFALSE 30783
// exit ;
30781: GO 30954
// result := false ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_INT 0
30790: ST_TO_ADDR
// places := 0 ;
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_INT 0
30798: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 266
30808: PUSH
30809: LD_INT 0
30811: DOUBLE
30812: EQUAL
30813: IFTRUE 30871
30815: LD_INT 1
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30871
30821: LD_INT 6
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30871
30827: LD_INT 7
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30871
30833: LD_INT 8
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30871
30839: LD_INT 4
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30871
30845: LD_INT 5
30847: DOUBLE
30848: EQUAL
30849: IFTRUE 30871
30851: LD_INT 2
30853: DOUBLE
30854: EQUAL
30855: IFTRUE 30871
30857: LD_INT 3
30859: DOUBLE
30860: EQUAL
30861: IFTRUE 30871
30863: LD_INT 35
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30882
30871: POP
// places := 6 ; b_bunker , b_breastwork :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 6
30879: ST_TO_ADDR
30880: GO 30927
30882: LD_INT 32
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30896
30888: LD_INT 31
30890: DOUBLE
30891: EQUAL
30892: IFTRUE 30896
30894: GO 30907
30896: POP
// places := 1 ; b_control_tower :
30897: LD_ADDR_VAR 0 3
30901: PUSH
30902: LD_INT 1
30904: ST_TO_ADDR
30905: GO 30927
30907: LD_INT 36
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30926
30915: POP
// places := 3 ; end ;
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 3
30923: ST_TO_ADDR
30924: GO 30927
30926: POP
// if places then
30927: LD_VAR 0 3
30931: IFFALSE 30954
// result := UnitsInside ( building ) < places ;
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 313
30947: PUSH
30948: LD_VAR 0 3
30952: LESS
30953: ST_TO_ADDR
// end ;
30954: LD_VAR 0 2
30958: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30959: LD_INT 0
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
// tmp := [ ] ;
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: EMPTY
30971: ST_TO_ADDR
// list := [ ] ;
30972: LD_ADDR_VAR 0 5
30976: PUSH
30977: EMPTY
30978: ST_TO_ADDR
// for i = 16 to 25 do
30979: LD_ADDR_VAR 0 4
30983: PUSH
30984: DOUBLE
30985: LD_INT 16
30987: DEC
30988: ST_TO_ADDR
30989: LD_INT 25
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31066
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30995: LD_ADDR_VAR 0 3
30999: PUSH
31000: LD_VAR 0 3
31004: PUSH
31005: LD_INT 22
31007: PUSH
31008: LD_VAR 0 1
31012: PPUSH
31013: CALL_OW 255
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 91
31024: PUSH
31025: LD_VAR 0 1
31029: PUSH
31030: LD_INT 6
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 30
31040: PUSH
31041: LD_VAR 0 4
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: PPUSH
31058: CALL_OW 69
31062: ADD
31063: ST_TO_ADDR
31064: GO 30992
31066: POP
31067: POP
// for i = 1 to tmp do
31068: LD_ADDR_VAR 0 4
31072: PUSH
31073: DOUBLE
31074: LD_INT 1
31076: DEC
31077: ST_TO_ADDR
31078: LD_VAR 0 3
31082: PUSH
31083: FOR_TO
31084: IFFALSE 31172
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31086: LD_ADDR_VAR 0 5
31090: PUSH
31091: LD_VAR 0 5
31095: PUSH
31096: LD_VAR 0 3
31100: PUSH
31101: LD_VAR 0 4
31105: ARRAY
31106: PPUSH
31107: CALL_OW 266
31111: PUSH
31112: LD_VAR 0 3
31116: PUSH
31117: LD_VAR 0 4
31121: ARRAY
31122: PPUSH
31123: CALL_OW 250
31127: PUSH
31128: LD_VAR 0 3
31132: PUSH
31133: LD_VAR 0 4
31137: ARRAY
31138: PPUSH
31139: CALL_OW 251
31143: PUSH
31144: LD_VAR 0 3
31148: PUSH
31149: LD_VAR 0 4
31153: ARRAY
31154: PPUSH
31155: CALL_OW 254
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: ADD
31169: ST_TO_ADDR
31170: GO 31083
31172: POP
31173: POP
// result := list ;
31174: LD_ADDR_VAR 0 2
31178: PUSH
31179: LD_VAR 0 5
31183: ST_TO_ADDR
// end ;
31184: LD_VAR 0 2
31188: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31189: LD_INT 0
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
// if not factory then
31198: LD_VAR 0 1
31202: NOT
31203: IFFALSE 31207
// exit ;
31205: GO 31800
// if control = control_apeman then
31207: LD_VAR 0 4
31211: PUSH
31212: LD_INT 5
31214: EQUAL
31215: IFFALSE 31324
// begin tmp := UnitsInside ( factory ) ;
31217: LD_ADDR_VAR 0 8
31221: PUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 313
31231: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31232: LD_VAR 0 8
31236: PPUSH
31237: LD_INT 25
31239: PUSH
31240: LD_INT 12
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PPUSH
31247: CALL_OW 72
31251: NOT
31252: IFFALSE 31262
// control := control_manual ;
31254: LD_ADDR_VAR 0 4
31258: PUSH
31259: LD_INT 1
31261: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31262: LD_ADDR_VAR 0 8
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL 30959 0 1
31276: ST_TO_ADDR
// if tmp then
31277: LD_VAR 0 8
31281: IFFALSE 31324
// begin for i in tmp do
31283: LD_ADDR_VAR 0 7
31287: PUSH
31288: LD_VAR 0 8
31292: PUSH
31293: FOR_IN
31294: IFFALSE 31322
// if i [ 1 ] = b_ext_radio then
31296: LD_VAR 0 7
31300: PUSH
31301: LD_INT 1
31303: ARRAY
31304: PUSH
31305: LD_INT 22
31307: EQUAL
31308: IFFALSE 31320
// begin control := control_remote ;
31310: LD_ADDR_VAR 0 4
31314: PUSH
31315: LD_INT 2
31317: ST_TO_ADDR
// break ;
31318: GO 31322
// end ;
31320: GO 31293
31322: POP
31323: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31324: LD_VAR 0 1
31328: PPUSH
31329: LD_VAR 0 2
31333: PPUSH
31334: LD_VAR 0 3
31338: PPUSH
31339: LD_VAR 0 4
31343: PPUSH
31344: LD_VAR 0 5
31348: PPUSH
31349: CALL_OW 448
31353: IFFALSE 31388
// begin result := [ chassis , engine , control , weapon ] ;
31355: LD_ADDR_VAR 0 6
31359: PUSH
31360: LD_VAR 0 2
31364: PUSH
31365: LD_VAR 0 3
31369: PUSH
31370: LD_VAR 0 4
31374: PUSH
31375: LD_VAR 0 5
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// exit ;
31386: GO 31800
// end ; _chassis := AvailableChassisList ( factory ) ;
31388: LD_ADDR_VAR 0 9
31392: PUSH
31393: LD_VAR 0 1
31397: PPUSH
31398: CALL_OW 475
31402: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31403: LD_ADDR_VAR 0 11
31407: PUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: CALL_OW 476
31417: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31418: LD_ADDR_VAR 0 12
31422: PUSH
31423: LD_VAR 0 1
31427: PPUSH
31428: CALL_OW 477
31432: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31433: LD_ADDR_VAR 0 10
31437: PUSH
31438: LD_VAR 0 1
31442: PPUSH
31443: CALL_OW 478
31447: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31448: LD_VAR 0 9
31452: NOT
31453: PUSH
31454: LD_VAR 0 11
31458: NOT
31459: OR
31460: PUSH
31461: LD_VAR 0 12
31465: NOT
31466: OR
31467: PUSH
31468: LD_VAR 0 10
31472: NOT
31473: OR
31474: IFFALSE 31509
// begin result := [ chassis , engine , control , weapon ] ;
31476: LD_ADDR_VAR 0 6
31480: PUSH
31481: LD_VAR 0 2
31485: PUSH
31486: LD_VAR 0 3
31490: PUSH
31491: LD_VAR 0 4
31495: PUSH
31496: LD_VAR 0 5
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// exit ;
31507: GO 31800
// end ; if not chassis in _chassis then
31509: LD_VAR 0 2
31513: PUSH
31514: LD_VAR 0 9
31518: IN
31519: NOT
31520: IFFALSE 31546
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31522: LD_ADDR_VAR 0 2
31526: PUSH
31527: LD_VAR 0 9
31531: PUSH
31532: LD_INT 1
31534: PPUSH
31535: LD_VAR 0 9
31539: PPUSH
31540: CALL_OW 12
31544: ARRAY
31545: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31546: LD_VAR 0 2
31550: PPUSH
31551: LD_VAR 0 3
31555: PPUSH
31556: CALL 31805 0 2
31560: NOT
31561: IFFALSE 31620
// repeat engine := _engine [ 1 ] ;
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_VAR 0 11
31572: PUSH
31573: LD_INT 1
31575: ARRAY
31576: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31577: LD_ADDR_VAR 0 11
31581: PUSH
31582: LD_VAR 0 11
31586: PPUSH
31587: LD_INT 1
31589: PPUSH
31590: CALL_OW 3
31594: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31595: LD_VAR 0 2
31599: PPUSH
31600: LD_VAR 0 3
31604: PPUSH
31605: CALL 31805 0 2
31609: PUSH
31610: LD_VAR 0 11
31614: PUSH
31615: EMPTY
31616: EQUAL
31617: OR
31618: IFFALSE 31563
// if not control in _control then
31620: LD_VAR 0 4
31624: PUSH
31625: LD_VAR 0 12
31629: IN
31630: NOT
31631: IFFALSE 31657
// control := _control [ rand ( 1 , _control ) ] ;
31633: LD_ADDR_VAR 0 4
31637: PUSH
31638: LD_VAR 0 12
31642: PUSH
31643: LD_INT 1
31645: PPUSH
31646: LD_VAR 0 12
31650: PPUSH
31651: CALL_OW 12
31655: ARRAY
31656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31657: LD_VAR 0 2
31661: PPUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: CALL 32025 0 2
31671: NOT
31672: IFFALSE 31731
// repeat weapon := _weapon [ 1 ] ;
31674: LD_ADDR_VAR 0 5
31678: PUSH
31679: LD_VAR 0 10
31683: PUSH
31684: LD_INT 1
31686: ARRAY
31687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31688: LD_ADDR_VAR 0 10
31692: PUSH
31693: LD_VAR 0 10
31697: PPUSH
31698: LD_INT 1
31700: PPUSH
31701: CALL_OW 3
31705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31706: LD_VAR 0 2
31710: PPUSH
31711: LD_VAR 0 5
31715: PPUSH
31716: CALL 32025 0 2
31720: PUSH
31721: LD_VAR 0 10
31725: PUSH
31726: EMPTY
31727: EQUAL
31728: OR
31729: IFFALSE 31674
// result := [ ] ;
31731: LD_ADDR_VAR 0 6
31735: PUSH
31736: EMPTY
31737: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31738: LD_VAR 0 1
31742: PPUSH
31743: LD_VAR 0 2
31747: PPUSH
31748: LD_VAR 0 3
31752: PPUSH
31753: LD_VAR 0 4
31757: PPUSH
31758: LD_VAR 0 5
31762: PPUSH
31763: CALL_OW 448
31767: IFFALSE 31800
// result := [ chassis , engine , control , weapon ] ;
31769: LD_ADDR_VAR 0 6
31773: PUSH
31774: LD_VAR 0 2
31778: PUSH
31779: LD_VAR 0 3
31783: PUSH
31784: LD_VAR 0 4
31788: PUSH
31789: LD_VAR 0 5
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
// end ;
31800: LD_VAR 0 6
31804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31805: LD_INT 0
31807: PPUSH
// if not chassis or not engine then
31808: LD_VAR 0 1
31812: NOT
31813: PUSH
31814: LD_VAR 0 2
31818: NOT
31819: OR
31820: IFFALSE 31824
// exit ;
31822: GO 32020
// case engine of engine_solar :
31824: LD_VAR 0 2
31828: PUSH
31829: LD_INT 2
31831: DOUBLE
31832: EQUAL
31833: IFTRUE 31837
31835: GO 31875
31837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_INT 11
31845: PUSH
31846: LD_INT 12
31848: PUSH
31849: LD_INT 13
31851: PUSH
31852: LD_INT 14
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: ST_TO_ADDR
31873: GO 32004
31875: LD_INT 1
31877: DOUBLE
31878: EQUAL
31879: IFTRUE 31883
31881: GO 31945
31883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31884: LD_ADDR_VAR 0 3
31888: PUSH
31889: LD_INT 11
31891: PUSH
31892: LD_INT 12
31894: PUSH
31895: LD_INT 13
31897: PUSH
31898: LD_INT 14
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 3
31909: PUSH
31910: LD_INT 4
31912: PUSH
31913: LD_INT 5
31915: PUSH
31916: LD_INT 21
31918: PUSH
31919: LD_INT 23
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_INT 24
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
31943: GO 32004
31945: LD_INT 3
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 32003
31953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31954: LD_ADDR_VAR 0 3
31958: PUSH
31959: LD_INT 13
31961: PUSH
31962: LD_INT 14
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: LD_INT 3
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: LD_INT 5
31976: PUSH
31977: LD_INT 21
31979: PUSH
31980: LD_INT 22
31982: PUSH
31983: LD_INT 23
31985: PUSH
31986: LD_INT 24
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
32001: GO 32004
32003: POP
// result := ( chassis in result ) ;
32004: LD_ADDR_VAR 0 3
32008: PUSH
32009: LD_VAR 0 1
32013: PUSH
32014: LD_VAR 0 3
32018: IN
32019: ST_TO_ADDR
// end ;
32020: LD_VAR 0 3
32024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32025: LD_INT 0
32027: PPUSH
// if not chassis or not weapon then
32028: LD_VAR 0 1
32032: NOT
32033: PUSH
32034: LD_VAR 0 2
32038: NOT
32039: OR
32040: IFFALSE 32044
// exit ;
32042: GO 33104
// case weapon of us_machine_gun :
32044: LD_VAR 0 2
32048: PUSH
32049: LD_INT 2
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 32087
32057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32058: LD_ADDR_VAR 0 3
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: LD_INT 3
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: ST_TO_ADDR
32085: GO 33088
32087: LD_INT 3
32089: DOUBLE
32090: EQUAL
32091: IFTRUE 32095
32093: GO 32125
32095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32096: LD_ADDR_VAR 0 3
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 4
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: ST_TO_ADDR
32123: GO 33088
32125: LD_INT 11
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32163
32133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32134: LD_ADDR_VAR 0 3
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: LD_INT 4
32150: PUSH
32151: LD_INT 5
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: ST_TO_ADDR
32161: GO 33088
32163: LD_INT 4
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32197
32171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32172: LD_ADDR_VAR 0 3
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: LD_INT 5
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
32195: GO 33088
32197: LD_INT 5
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32231
32205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32206: LD_ADDR_VAR 0 3
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 5
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: ST_TO_ADDR
32229: GO 33088
32231: LD_INT 9
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32265
32239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32240: LD_ADDR_VAR 0 3
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 3
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: LD_INT 5
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: ST_TO_ADDR
32263: GO 33088
32265: LD_INT 7
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32299
32273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
32297: GO 33088
32299: LD_INT 12
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32307
32305: GO 32333
32307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: LD_INT 5
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
32331: GO 33088
32333: LD_INT 13
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32367
32341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32342: LD_ADDR_VAR 0 3
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 4
32355: PUSH
32356: LD_INT 5
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
32365: GO 33088
32367: LD_INT 14
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32393
32375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 4
32383: PUSH
32384: LD_INT 5
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 33088
32393: LD_INT 6
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32419
32401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: LD_INT 5
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: ST_TO_ADDR
32417: GO 33088
32419: LD_INT 10
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32445
32427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_INT 4
32435: PUSH
32436: LD_INT 5
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: ST_TO_ADDR
32443: GO 33088
32445: LD_INT 22
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32479
32453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32454: LD_ADDR_VAR 0 3
32458: PUSH
32459: LD_INT 11
32461: PUSH
32462: LD_INT 12
32464: PUSH
32465: LD_INT 13
32467: PUSH
32468: LD_INT 14
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: ST_TO_ADDR
32477: GO 33088
32479: LD_INT 23
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32513
32487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_INT 11
32495: PUSH
32496: LD_INT 12
32498: PUSH
32499: LD_INT 13
32501: PUSH
32502: LD_INT 14
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: ST_TO_ADDR
32511: GO 33088
32513: LD_INT 24
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32547
32521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_INT 11
32529: PUSH
32530: LD_INT 12
32532: PUSH
32533: LD_INT 13
32535: PUSH
32536: LD_INT 14
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
32545: GO 33088
32547: LD_INT 30
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32581
32555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: LD_INT 11
32563: PUSH
32564: LD_INT 12
32566: PUSH
32567: LD_INT 13
32569: PUSH
32570: LD_INT 14
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: ST_TO_ADDR
32579: GO 33088
32581: LD_INT 25
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32607
32589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32590: LD_ADDR_VAR 0 3
32594: PUSH
32595: LD_INT 13
32597: PUSH
32598: LD_INT 14
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: ST_TO_ADDR
32605: GO 33088
32607: LD_INT 27
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32615
32613: GO 32633
32615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32616: LD_ADDR_VAR 0 3
32620: PUSH
32621: LD_INT 13
32623: PUSH
32624: LD_INT 14
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: ST_TO_ADDR
32631: GO 33088
32633: LD_INT 92
32635: DOUBLE
32636: EQUAL
32637: IFTRUE 32641
32639: GO 32667
32641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32642: LD_ADDR_VAR 0 3
32646: PUSH
32647: LD_INT 11
32649: PUSH
32650: LD_INT 12
32652: PUSH
32653: LD_INT 13
32655: PUSH
32656: LD_INT 14
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33088
32667: LD_INT 28
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32693
32675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 13
32683: PUSH
32684: LD_INT 14
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: ST_TO_ADDR
32691: GO 33088
32693: LD_INT 29
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32719
32701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: LD_INT 13
32709: PUSH
32710: LD_INT 14
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: ST_TO_ADDR
32717: GO 33088
32719: LD_INT 31
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32745
32727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32728: LD_ADDR_VAR 0 3
32732: PUSH
32733: LD_INT 13
32735: PUSH
32736: LD_INT 14
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: ST_TO_ADDR
32743: GO 33088
32745: LD_INT 26
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32771
32753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_INT 13
32761: PUSH
32762: LD_INT 14
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: ST_TO_ADDR
32769: GO 33088
32771: LD_INT 42
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32805
32779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_INT 21
32787: PUSH
32788: LD_INT 22
32790: PUSH
32791: LD_INT 23
32793: PUSH
32794: LD_INT 24
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: ST_TO_ADDR
32803: GO 33088
32805: LD_INT 43
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32813
32811: GO 32839
32813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32814: LD_ADDR_VAR 0 3
32818: PUSH
32819: LD_INT 21
32821: PUSH
32822: LD_INT 22
32824: PUSH
32825: LD_INT 23
32827: PUSH
32828: LD_INT 24
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: ST_TO_ADDR
32837: GO 33088
32839: LD_INT 44
32841: DOUBLE
32842: EQUAL
32843: IFTRUE 32847
32845: GO 32873
32847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32848: LD_ADDR_VAR 0 3
32852: PUSH
32853: LD_INT 21
32855: PUSH
32856: LD_INT 22
32858: PUSH
32859: LD_INT 23
32861: PUSH
32862: LD_INT 24
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: ST_TO_ADDR
32871: GO 33088
32873: LD_INT 45
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32907
32881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32882: LD_ADDR_VAR 0 3
32886: PUSH
32887: LD_INT 21
32889: PUSH
32890: LD_INT 22
32892: PUSH
32893: LD_INT 23
32895: PUSH
32896: LD_INT 24
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: ST_TO_ADDR
32905: GO 33088
32907: LD_INT 49
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32941
32915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32916: LD_ADDR_VAR 0 3
32920: PUSH
32921: LD_INT 21
32923: PUSH
32924: LD_INT 22
32926: PUSH
32927: LD_INT 23
32929: PUSH
32930: LD_INT 24
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
32939: GO 33088
32941: LD_INT 51
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32975
32949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 21
32957: PUSH
32958: LD_INT 22
32960: PUSH
32961: LD_INT 23
32963: PUSH
32964: LD_INT 24
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: ST_TO_ADDR
32973: GO 33088
32975: LD_INT 52
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33009
32983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_INT 21
32991: PUSH
32992: LD_INT 22
32994: PUSH
32995: LD_INT 23
32997: PUSH
32998: LD_INT 24
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
33007: GO 33088
33009: LD_INT 53
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33035
33017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33018: LD_ADDR_VAR 0 3
33022: PUSH
33023: LD_INT 23
33025: PUSH
33026: LD_INT 24
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: ST_TO_ADDR
33033: GO 33088
33035: LD_INT 46
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33061
33043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33044: LD_ADDR_VAR 0 3
33048: PUSH
33049: LD_INT 23
33051: PUSH
33052: LD_INT 24
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: ST_TO_ADDR
33059: GO 33088
33061: LD_INT 47
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33087
33069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 23
33077: PUSH
33078: LD_INT 24
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: ST_TO_ADDR
33085: GO 33088
33087: POP
// result := ( chassis in result ) ;
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_VAR 0 1
33097: PUSH
33098: LD_VAR 0 3
33102: IN
33103: ST_TO_ADDR
// end ;
33104: LD_VAR 0 3
33108: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33109: LD_INT 0
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
// result := array ;
33118: LD_ADDR_VAR 0 5
33122: PUSH
33123: LD_VAR 0 1
33127: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33128: LD_VAR 0 1
33132: NOT
33133: PUSH
33134: LD_VAR 0 2
33138: NOT
33139: OR
33140: PUSH
33141: LD_VAR 0 3
33145: NOT
33146: OR
33147: PUSH
33148: LD_VAR 0 2
33152: PUSH
33153: LD_VAR 0 1
33157: GREATER
33158: OR
33159: PUSH
33160: LD_VAR 0 3
33164: PUSH
33165: LD_VAR 0 1
33169: GREATER
33170: OR
33171: IFFALSE 33175
// exit ;
33173: GO 33471
// if direction then
33175: LD_VAR 0 4
33179: IFFALSE 33243
// begin d := 1 ;
33181: LD_ADDR_VAR 0 9
33185: PUSH
33186: LD_INT 1
33188: ST_TO_ADDR
// if i_from > i_to then
33189: LD_VAR 0 2
33193: PUSH
33194: LD_VAR 0 3
33198: GREATER
33199: IFFALSE 33225
// length := ( array - i_from ) + i_to else
33201: LD_ADDR_VAR 0 11
33205: PUSH
33206: LD_VAR 0 1
33210: PUSH
33211: LD_VAR 0 2
33215: MINUS
33216: PUSH
33217: LD_VAR 0 3
33221: PLUS
33222: ST_TO_ADDR
33223: GO 33241
// length := i_to - i_from ;
33225: LD_ADDR_VAR 0 11
33229: PUSH
33230: LD_VAR 0 3
33234: PUSH
33235: LD_VAR 0 2
33239: MINUS
33240: ST_TO_ADDR
// end else
33241: GO 33304
// begin d := - 1 ;
33243: LD_ADDR_VAR 0 9
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: ST_TO_ADDR
// if i_from > i_to then
33252: LD_VAR 0 2
33256: PUSH
33257: LD_VAR 0 3
33261: GREATER
33262: IFFALSE 33282
// length := i_from - i_to else
33264: LD_ADDR_VAR 0 11
33268: PUSH
33269: LD_VAR 0 2
33273: PUSH
33274: LD_VAR 0 3
33278: MINUS
33279: ST_TO_ADDR
33280: GO 33304
// length := ( array - i_to ) + i_from ;
33282: LD_ADDR_VAR 0 11
33286: PUSH
33287: LD_VAR 0 1
33291: PUSH
33292: LD_VAR 0 3
33296: MINUS
33297: PUSH
33298: LD_VAR 0 2
33302: PLUS
33303: ST_TO_ADDR
// end ; if not length then
33304: LD_VAR 0 11
33308: NOT
33309: IFFALSE 33313
// exit ;
33311: GO 33471
// tmp := array ;
33313: LD_ADDR_VAR 0 10
33317: PUSH
33318: LD_VAR 0 1
33322: ST_TO_ADDR
// for i = 1 to length do
33323: LD_ADDR_VAR 0 6
33327: PUSH
33328: DOUBLE
33329: LD_INT 1
33331: DEC
33332: ST_TO_ADDR
33333: LD_VAR 0 11
33337: PUSH
33338: FOR_TO
33339: IFFALSE 33459
// begin for j = 1 to array do
33341: LD_ADDR_VAR 0 7
33345: PUSH
33346: DOUBLE
33347: LD_INT 1
33349: DEC
33350: ST_TO_ADDR
33351: LD_VAR 0 1
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33445
// begin k := j + d ;
33359: LD_ADDR_VAR 0 8
33363: PUSH
33364: LD_VAR 0 7
33368: PUSH
33369: LD_VAR 0 9
33373: PLUS
33374: ST_TO_ADDR
// if k > array then
33375: LD_VAR 0 8
33379: PUSH
33380: LD_VAR 0 1
33384: GREATER
33385: IFFALSE 33395
// k := 1 ;
33387: LD_ADDR_VAR 0 8
33391: PUSH
33392: LD_INT 1
33394: ST_TO_ADDR
// if not k then
33395: LD_VAR 0 8
33399: NOT
33400: IFFALSE 33412
// k := array ;
33402: LD_ADDR_VAR 0 8
33406: PUSH
33407: LD_VAR 0 1
33411: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33412: LD_ADDR_VAR 0 10
33416: PUSH
33417: LD_VAR 0 10
33421: PPUSH
33422: LD_VAR 0 8
33426: PPUSH
33427: LD_VAR 0 1
33431: PUSH
33432: LD_VAR 0 7
33436: ARRAY
33437: PPUSH
33438: CALL_OW 1
33442: ST_TO_ADDR
// end ;
33443: GO 33356
33445: POP
33446: POP
// array := tmp ;
33447: LD_ADDR_VAR 0 1
33451: PUSH
33452: LD_VAR 0 10
33456: ST_TO_ADDR
// end ;
33457: GO 33338
33459: POP
33460: POP
// result := array ;
33461: LD_ADDR_VAR 0 5
33465: PUSH
33466: LD_VAR 0 1
33470: ST_TO_ADDR
// end ;
33471: LD_VAR 0 5
33475: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33476: LD_INT 0
33478: PPUSH
33479: PPUSH
// result := 0 ;
33480: LD_ADDR_VAR 0 3
33484: PUSH
33485: LD_INT 0
33487: ST_TO_ADDR
// if not array or not value in array then
33488: LD_VAR 0 1
33492: NOT
33493: PUSH
33494: LD_VAR 0 2
33498: PUSH
33499: LD_VAR 0 1
33503: IN
33504: NOT
33505: OR
33506: IFFALSE 33510
// exit ;
33508: GO 33564
// for i = 1 to array do
33510: LD_ADDR_VAR 0 4
33514: PUSH
33515: DOUBLE
33516: LD_INT 1
33518: DEC
33519: ST_TO_ADDR
33520: LD_VAR 0 1
33524: PUSH
33525: FOR_TO
33526: IFFALSE 33562
// if value = array [ i ] then
33528: LD_VAR 0 2
33532: PUSH
33533: LD_VAR 0 1
33537: PUSH
33538: LD_VAR 0 4
33542: ARRAY
33543: EQUAL
33544: IFFALSE 33560
// begin result := i ;
33546: LD_ADDR_VAR 0 3
33550: PUSH
33551: LD_VAR 0 4
33555: ST_TO_ADDR
// exit ;
33556: POP
33557: POP
33558: GO 33564
// end ;
33560: GO 33525
33562: POP
33563: POP
// end ;
33564: LD_VAR 0 3
33568: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33569: LD_INT 0
33571: PPUSH
// vc_chassis := chassis ;
33572: LD_ADDR_OWVAR 37
33576: PUSH
33577: LD_VAR 0 1
33581: ST_TO_ADDR
// vc_engine := engine ;
33582: LD_ADDR_OWVAR 39
33586: PUSH
33587: LD_VAR 0 2
33591: ST_TO_ADDR
// vc_control := control ;
33592: LD_ADDR_OWVAR 38
33596: PUSH
33597: LD_VAR 0 3
33601: ST_TO_ADDR
// vc_weapon := weapon ;
33602: LD_ADDR_OWVAR 40
33606: PUSH
33607: LD_VAR 0 4
33611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33612: LD_ADDR_OWVAR 41
33616: PUSH
33617: LD_VAR 0 5
33621: ST_TO_ADDR
// end ;
33622: LD_VAR 0 6
33626: RET
// export function WantPlant ( unit ) ; var task ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
// result := false ;
33631: LD_ADDR_VAR 0 2
33635: PUSH
33636: LD_INT 0
33638: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33639: LD_ADDR_VAR 0 3
33643: PUSH
33644: LD_VAR 0 1
33648: PPUSH
33649: CALL_OW 437
33653: ST_TO_ADDR
// if task then
33654: LD_VAR 0 3
33658: IFFALSE 33686
// if task [ 1 ] [ 1 ] = p then
33660: LD_VAR 0 3
33664: PUSH
33665: LD_INT 1
33667: ARRAY
33668: PUSH
33669: LD_INT 1
33671: ARRAY
33672: PUSH
33673: LD_STRING p
33675: EQUAL
33676: IFFALSE 33686
// result := true ;
33678: LD_ADDR_VAR 0 2
33682: PUSH
33683: LD_INT 1
33685: ST_TO_ADDR
// end ;
33686: LD_VAR 0 2
33690: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
// if pos < 1 then
33697: LD_VAR 0 2
33701: PUSH
33702: LD_INT 1
33704: LESS
33705: IFFALSE 33709
// exit ;
33707: GO 34012
// if pos = 1 then
33709: LD_VAR 0 2
33713: PUSH
33714: LD_INT 1
33716: EQUAL
33717: IFFALSE 33750
// result := Replace ( arr , pos [ 1 ] , value ) else
33719: LD_ADDR_VAR 0 4
33723: PUSH
33724: LD_VAR 0 1
33728: PPUSH
33729: LD_VAR 0 2
33733: PUSH
33734: LD_INT 1
33736: ARRAY
33737: PPUSH
33738: LD_VAR 0 3
33742: PPUSH
33743: CALL_OW 1
33747: ST_TO_ADDR
33748: GO 34012
// begin tmp := arr ;
33750: LD_ADDR_VAR 0 6
33754: PUSH
33755: LD_VAR 0 1
33759: ST_TO_ADDR
// s_arr := [ tmp ] ;
33760: LD_ADDR_VAR 0 7
33764: PUSH
33765: LD_VAR 0 6
33769: PUSH
33770: EMPTY
33771: LIST
33772: ST_TO_ADDR
// for i = 1 to pos - 1 do
33773: LD_ADDR_VAR 0 5
33777: PUSH
33778: DOUBLE
33779: LD_INT 1
33781: DEC
33782: ST_TO_ADDR
33783: LD_VAR 0 2
33787: PUSH
33788: LD_INT 1
33790: MINUS
33791: PUSH
33792: FOR_TO
33793: IFFALSE 33838
// begin tmp := tmp [ pos [ i ] ] ;
33795: LD_ADDR_VAR 0 6
33799: PUSH
33800: LD_VAR 0 6
33804: PUSH
33805: LD_VAR 0 2
33809: PUSH
33810: LD_VAR 0 5
33814: ARRAY
33815: ARRAY
33816: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33817: LD_ADDR_VAR 0 7
33821: PUSH
33822: LD_VAR 0 7
33826: PUSH
33827: LD_VAR 0 6
33831: PUSH
33832: EMPTY
33833: LIST
33834: ADD
33835: ST_TO_ADDR
// end ;
33836: GO 33792
33838: POP
33839: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33840: LD_ADDR_VAR 0 6
33844: PUSH
33845: LD_VAR 0 6
33849: PPUSH
33850: LD_VAR 0 2
33854: PUSH
33855: LD_VAR 0 2
33859: ARRAY
33860: PPUSH
33861: LD_VAR 0 3
33865: PPUSH
33866: CALL_OW 1
33870: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33871: LD_ADDR_VAR 0 7
33875: PUSH
33876: LD_VAR 0 7
33880: PPUSH
33881: LD_VAR 0 7
33885: PPUSH
33886: LD_VAR 0 6
33890: PPUSH
33891: CALL_OW 1
33895: ST_TO_ADDR
// for i = s_arr downto 2 do
33896: LD_ADDR_VAR 0 5
33900: PUSH
33901: DOUBLE
33902: LD_VAR 0 7
33906: INC
33907: ST_TO_ADDR
33908: LD_INT 2
33910: PUSH
33911: FOR_DOWNTO
33912: IFFALSE 33996
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33914: LD_ADDR_VAR 0 6
33918: PUSH
33919: LD_VAR 0 7
33923: PUSH
33924: LD_VAR 0 5
33928: PUSH
33929: LD_INT 1
33931: MINUS
33932: ARRAY
33933: PPUSH
33934: LD_VAR 0 2
33938: PUSH
33939: LD_VAR 0 5
33943: PUSH
33944: LD_INT 1
33946: MINUS
33947: ARRAY
33948: PPUSH
33949: LD_VAR 0 7
33953: PUSH
33954: LD_VAR 0 5
33958: ARRAY
33959: PPUSH
33960: CALL_OW 1
33964: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33965: LD_ADDR_VAR 0 7
33969: PUSH
33970: LD_VAR 0 7
33974: PPUSH
33975: LD_VAR 0 5
33979: PUSH
33980: LD_INT 1
33982: MINUS
33983: PPUSH
33984: LD_VAR 0 6
33988: PPUSH
33989: CALL_OW 1
33993: ST_TO_ADDR
// end ;
33994: GO 33911
33996: POP
33997: POP
// result := s_arr [ 1 ] ;
33998: LD_ADDR_VAR 0 4
34002: PUSH
34003: LD_VAR 0 7
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: ST_TO_ADDR
// end ; end ;
34012: LD_VAR 0 4
34016: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34017: LD_INT 0
34019: PPUSH
34020: PPUSH
// if not list then
34021: LD_VAR 0 1
34025: NOT
34026: IFFALSE 34030
// exit ;
34028: GO 34121
// i := list [ pos1 ] ;
34030: LD_ADDR_VAR 0 5
34034: PUSH
34035: LD_VAR 0 1
34039: PUSH
34040: LD_VAR 0 2
34044: ARRAY
34045: ST_TO_ADDR
// if not i then
34046: LD_VAR 0 5
34050: NOT
34051: IFFALSE 34055
// exit ;
34053: GO 34121
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34055: LD_ADDR_VAR 0 1
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: LD_VAR 0 2
34069: PPUSH
34070: LD_VAR 0 1
34074: PUSH
34075: LD_VAR 0 3
34079: ARRAY
34080: PPUSH
34081: CALL_OW 1
34085: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34086: LD_ADDR_VAR 0 1
34090: PUSH
34091: LD_VAR 0 1
34095: PPUSH
34096: LD_VAR 0 3
34100: PPUSH
34101: LD_VAR 0 5
34105: PPUSH
34106: CALL_OW 1
34110: ST_TO_ADDR
// result := list ;
34111: LD_ADDR_VAR 0 4
34115: PUSH
34116: LD_VAR 0 1
34120: ST_TO_ADDR
// end ;
34121: LD_VAR 0 4
34125: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34126: LD_INT 0
34128: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34129: LD_ADDR_VAR 0 5
34133: PUSH
34134: LD_VAR 0 1
34138: PPUSH
34139: CALL_OW 250
34143: PPUSH
34144: LD_VAR 0 1
34148: PPUSH
34149: CALL_OW 251
34153: PPUSH
34154: LD_VAR 0 2
34158: PPUSH
34159: LD_VAR 0 3
34163: PPUSH
34164: LD_VAR 0 4
34168: PPUSH
34169: CALL 34179 0 5
34173: ST_TO_ADDR
// end ;
34174: LD_VAR 0 5
34178: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34179: LD_INT 0
34181: PPUSH
34182: PPUSH
34183: PPUSH
34184: PPUSH
// if not list then
34185: LD_VAR 0 3
34189: NOT
34190: IFFALSE 34194
// exit ;
34192: GO 34582
// result := [ ] ;
34194: LD_ADDR_VAR 0 6
34198: PUSH
34199: EMPTY
34200: ST_TO_ADDR
// for i in list do
34201: LD_ADDR_VAR 0 7
34205: PUSH
34206: LD_VAR 0 3
34210: PUSH
34211: FOR_IN
34212: IFFALSE 34414
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34214: LD_ADDR_VAR 0 9
34218: PUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: LD_VAR 0 2
34233: PPUSH
34234: CALL_OW 297
34238: ST_TO_ADDR
// if not result then
34239: LD_VAR 0 6
34243: NOT
34244: IFFALSE 34270
// result := [ [ i , tmp ] ] else
34246: LD_ADDR_VAR 0 6
34250: PUSH
34251: LD_VAR 0 7
34255: PUSH
34256: LD_VAR 0 9
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: ST_TO_ADDR
34268: GO 34412
// begin if result [ result ] [ 2 ] < tmp then
34270: LD_VAR 0 6
34274: PUSH
34275: LD_VAR 0 6
34279: ARRAY
34280: PUSH
34281: LD_INT 2
34283: ARRAY
34284: PUSH
34285: LD_VAR 0 9
34289: LESS
34290: IFFALSE 34332
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 6
34301: PPUSH
34302: LD_VAR 0 6
34306: PUSH
34307: LD_INT 1
34309: PLUS
34310: PPUSH
34311: LD_VAR 0 7
34315: PUSH
34316: LD_VAR 0 9
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PPUSH
34325: CALL_OW 2
34329: ST_TO_ADDR
34330: GO 34412
// for j = 1 to result do
34332: LD_ADDR_VAR 0 8
34336: PUSH
34337: DOUBLE
34338: LD_INT 1
34340: DEC
34341: ST_TO_ADDR
34342: LD_VAR 0 6
34346: PUSH
34347: FOR_TO
34348: IFFALSE 34410
// begin if tmp < result [ j ] [ 2 ] then
34350: LD_VAR 0 9
34354: PUSH
34355: LD_VAR 0 6
34359: PUSH
34360: LD_VAR 0 8
34364: ARRAY
34365: PUSH
34366: LD_INT 2
34368: ARRAY
34369: LESS
34370: IFFALSE 34408
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34372: LD_ADDR_VAR 0 6
34376: PUSH
34377: LD_VAR 0 6
34381: PPUSH
34382: LD_VAR 0 8
34386: PPUSH
34387: LD_VAR 0 7
34391: PUSH
34392: LD_VAR 0 9
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PPUSH
34401: CALL_OW 2
34405: ST_TO_ADDR
// break ;
34406: GO 34410
// end ; end ;
34408: GO 34347
34410: POP
34411: POP
// end ; end ;
34412: GO 34211
34414: POP
34415: POP
// if result and not asc then
34416: LD_VAR 0 6
34420: PUSH
34421: LD_VAR 0 4
34425: NOT
34426: AND
34427: IFFALSE 34502
// begin tmp := result ;
34429: LD_ADDR_VAR 0 9
34433: PUSH
34434: LD_VAR 0 6
34438: ST_TO_ADDR
// for i = tmp downto 1 do
34439: LD_ADDR_VAR 0 7
34443: PUSH
34444: DOUBLE
34445: LD_VAR 0 9
34449: INC
34450: ST_TO_ADDR
34451: LD_INT 1
34453: PUSH
34454: FOR_DOWNTO
34455: IFFALSE 34500
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34457: LD_ADDR_VAR 0 6
34461: PUSH
34462: LD_VAR 0 6
34466: PPUSH
34467: LD_VAR 0 9
34471: PUSH
34472: LD_VAR 0 7
34476: MINUS
34477: PUSH
34478: LD_INT 1
34480: PLUS
34481: PPUSH
34482: LD_VAR 0 9
34486: PUSH
34487: LD_VAR 0 7
34491: ARRAY
34492: PPUSH
34493: CALL_OW 1
34497: ST_TO_ADDR
34498: GO 34454
34500: POP
34501: POP
// end ; tmp := [ ] ;
34502: LD_ADDR_VAR 0 9
34506: PUSH
34507: EMPTY
34508: ST_TO_ADDR
// if mode then
34509: LD_VAR 0 5
34513: IFFALSE 34582
// begin for i = 1 to result do
34515: LD_ADDR_VAR 0 7
34519: PUSH
34520: DOUBLE
34521: LD_INT 1
34523: DEC
34524: ST_TO_ADDR
34525: LD_VAR 0 6
34529: PUSH
34530: FOR_TO
34531: IFFALSE 34570
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34533: LD_ADDR_VAR 0 9
34537: PUSH
34538: LD_VAR 0 9
34542: PPUSH
34543: LD_VAR 0 7
34547: PPUSH
34548: LD_VAR 0 6
34552: PUSH
34553: LD_VAR 0 7
34557: ARRAY
34558: PUSH
34559: LD_INT 1
34561: ARRAY
34562: PPUSH
34563: CALL_OW 1
34567: ST_TO_ADDR
34568: GO 34530
34570: POP
34571: POP
// result := tmp ;
34572: LD_ADDR_VAR 0 6
34576: PUSH
34577: LD_VAR 0 9
34581: ST_TO_ADDR
// end ; end ;
34582: LD_VAR 0 6
34586: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34587: LD_INT 0
34589: PPUSH
34590: PPUSH
34591: PPUSH
34592: PPUSH
34593: PPUSH
34594: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34595: LD_ADDR_VAR 0 5
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: ST_TO_ADDR
// if not x or not y then
34617: LD_VAR 0 2
34621: NOT
34622: PUSH
34623: LD_VAR 0 3
34627: NOT
34628: OR
34629: IFFALSE 34633
// exit ;
34631: GO 36283
// if not range then
34633: LD_VAR 0 4
34637: NOT
34638: IFFALSE 34648
// range := 10 ;
34640: LD_ADDR_VAR 0 4
34644: PUSH
34645: LD_INT 10
34647: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34648: LD_ADDR_VAR 0 8
34652: PUSH
34653: LD_INT 81
34655: PUSH
34656: LD_VAR 0 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 92
34667: PUSH
34668: LD_VAR 0 2
34672: PUSH
34673: LD_VAR 0 3
34677: PUSH
34678: LD_VAR 0 4
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 21
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: PPUSH
34711: CALL_OW 69
34715: ST_TO_ADDR
// if not tmp then
34716: LD_VAR 0 8
34720: NOT
34721: IFFALSE 34725
// exit ;
34723: GO 36283
// for i in tmp do
34725: LD_ADDR_VAR 0 6
34729: PUSH
34730: LD_VAR 0 8
34734: PUSH
34735: FOR_IN
34736: IFFALSE 36258
// begin points := [ 0 , 0 , 0 ] ;
34738: LD_ADDR_VAR 0 9
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// bpoints := 1 ;
34757: LD_ADDR_VAR 0 10
34761: PUSH
34762: LD_INT 1
34764: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34765: LD_VAR 0 6
34769: PPUSH
34770: CALL_OW 247
34774: PUSH
34775: LD_INT 1
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 35361
34783: POP
// begin if GetClass ( i ) = 1 then
34784: LD_VAR 0 6
34788: PPUSH
34789: CALL_OW 257
34793: PUSH
34794: LD_INT 1
34796: EQUAL
34797: IFFALSE 34818
// points := [ 10 , 5 , 3 ] ;
34799: LD_ADDR_VAR 0 9
34803: PUSH
34804: LD_INT 10
34806: PUSH
34807: LD_INT 5
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34818: LD_VAR 0 6
34822: PPUSH
34823: CALL_OW 257
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: IN
34842: IFFALSE 34863
// points := [ 3 , 2 , 1 ] ;
34844: LD_ADDR_VAR 0 9
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34863: LD_VAR 0 6
34867: PPUSH
34868: CALL_OW 257
34872: PUSH
34873: LD_INT 5
34875: EQUAL
34876: IFFALSE 34897
// points := [ 130 , 5 , 2 ] ;
34878: LD_ADDR_VAR 0 9
34882: PUSH
34883: LD_INT 130
34885: PUSH
34886: LD_INT 5
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34897: LD_VAR 0 6
34901: PPUSH
34902: CALL_OW 257
34906: PUSH
34907: LD_INT 8
34909: EQUAL
34910: IFFALSE 34931
// points := [ 35 , 35 , 30 ] ;
34912: LD_ADDR_VAR 0 9
34916: PUSH
34917: LD_INT 35
34919: PUSH
34920: LD_INT 35
34922: PUSH
34923: LD_INT 30
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34931: LD_VAR 0 6
34935: PPUSH
34936: CALL_OW 257
34940: PUSH
34941: LD_INT 9
34943: EQUAL
34944: IFFALSE 34965
// points := [ 20 , 55 , 40 ] ;
34946: LD_ADDR_VAR 0 9
34950: PUSH
34951: LD_INT 20
34953: PUSH
34954: LD_INT 55
34956: PUSH
34957: LD_INT 40
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34965: LD_VAR 0 6
34969: PPUSH
34970: CALL_OW 257
34974: PUSH
34975: LD_INT 12
34977: PUSH
34978: LD_INT 16
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: IN
34985: IFFALSE 35006
// points := [ 5 , 3 , 2 ] ;
34987: LD_ADDR_VAR 0 9
34991: PUSH
34992: LD_INT 5
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 2
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35006: LD_VAR 0 6
35010: PPUSH
35011: CALL_OW 257
35015: PUSH
35016: LD_INT 17
35018: EQUAL
35019: IFFALSE 35040
// points := [ 100 , 50 , 75 ] ;
35021: LD_ADDR_VAR 0 9
35025: PUSH
35026: LD_INT 100
35028: PUSH
35029: LD_INT 50
35031: PUSH
35032: LD_INT 75
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 257
35049: PUSH
35050: LD_INT 15
35052: EQUAL
35053: IFFALSE 35074
// points := [ 10 , 5 , 3 ] ;
35055: LD_ADDR_VAR 0 9
35059: PUSH
35060: LD_INT 10
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35074: LD_VAR 0 6
35078: PPUSH
35079: CALL_OW 257
35083: PUSH
35084: LD_INT 14
35086: EQUAL
35087: IFFALSE 35108
// points := [ 10 , 0 , 0 ] ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_INT 10
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35108: LD_VAR 0 6
35112: PPUSH
35113: CALL_OW 257
35117: PUSH
35118: LD_INT 11
35120: EQUAL
35121: IFFALSE 35142
// points := [ 30 , 10 , 5 ] ;
35123: LD_ADDR_VAR 0 9
35127: PUSH
35128: LD_INT 30
35130: PUSH
35131: LD_INT 10
35133: PUSH
35134: LD_INT 5
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35142: LD_VAR 0 1
35146: PPUSH
35147: LD_INT 5
35149: PPUSH
35150: CALL_OW 321
35154: PUSH
35155: LD_INT 2
35157: EQUAL
35158: IFFALSE 35175
// bpoints := bpoints * 1.8 ;
35160: LD_ADDR_VAR 0 10
35164: PUSH
35165: LD_VAR 0 10
35169: PUSH
35170: LD_REAL  1.80000000000000E+0000
35173: MUL
35174: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35175: LD_VAR 0 6
35179: PPUSH
35180: CALL_OW 257
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: LD_INT 3
35193: PUSH
35194: LD_INT 4
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: IN
35203: PUSH
35204: LD_VAR 0 1
35208: PPUSH
35209: LD_INT 51
35211: PPUSH
35212: CALL_OW 321
35216: PUSH
35217: LD_INT 2
35219: EQUAL
35220: AND
35221: IFFALSE 35238
// bpoints := bpoints * 1.2 ;
35223: LD_ADDR_VAR 0 10
35227: PUSH
35228: LD_VAR 0 10
35232: PUSH
35233: LD_REAL  1.20000000000000E+0000
35236: MUL
35237: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35238: LD_VAR 0 6
35242: PPUSH
35243: CALL_OW 257
35247: PUSH
35248: LD_INT 5
35250: PUSH
35251: LD_INT 7
35253: PUSH
35254: LD_INT 9
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: IN
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: LD_INT 52
35270: PPUSH
35271: CALL_OW 321
35275: PUSH
35276: LD_INT 2
35278: EQUAL
35279: AND
35280: IFFALSE 35297
// bpoints := bpoints * 1.5 ;
35282: LD_ADDR_VAR 0 10
35286: PUSH
35287: LD_VAR 0 10
35291: PUSH
35292: LD_REAL  1.50000000000000E+0000
35295: MUL
35296: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35297: LD_VAR 0 1
35301: PPUSH
35302: LD_INT 66
35304: PPUSH
35305: CALL_OW 321
35309: PUSH
35310: LD_INT 2
35312: EQUAL
35313: IFFALSE 35330
// bpoints := bpoints * 1.1 ;
35315: LD_ADDR_VAR 0 10
35319: PUSH
35320: LD_VAR 0 10
35324: PUSH
35325: LD_REAL  1.10000000000000E+0000
35328: MUL
35329: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35330: LD_ADDR_VAR 0 10
35334: PUSH
35335: LD_VAR 0 10
35339: PUSH
35340: LD_VAR 0 6
35344: PPUSH
35345: LD_INT 1
35347: PPUSH
35348: CALL_OW 259
35352: PUSH
35353: LD_REAL  1.15000000000000E+0000
35356: MUL
35357: MUL
35358: ST_TO_ADDR
// end ; unit_vehicle :
35359: GO 36187
35361: LD_INT 2
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35369
35367: GO 36175
35369: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35370: LD_VAR 0 6
35374: PPUSH
35375: CALL_OW 264
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 42
35385: PUSH
35386: LD_INT 24
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: IN
35394: IFFALSE 35415
// points := [ 25 , 5 , 3 ] ;
35396: LD_ADDR_VAR 0 9
35400: PUSH
35401: LD_INT 25
35403: PUSH
35404: LD_INT 5
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35415: LD_VAR 0 6
35419: PPUSH
35420: CALL_OW 264
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: LD_INT 43
35430: PUSH
35431: LD_INT 25
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: IN
35439: IFFALSE 35460
// points := [ 40 , 15 , 5 ] ;
35441: LD_ADDR_VAR 0 9
35445: PUSH
35446: LD_INT 40
35448: PUSH
35449: LD_INT 15
35451: PUSH
35452: LD_INT 5
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35460: LD_VAR 0 6
35464: PPUSH
35465: CALL_OW 264
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 23
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: IN
35480: IFFALSE 35501
// points := [ 7 , 25 , 8 ] ;
35482: LD_ADDR_VAR 0 9
35486: PUSH
35487: LD_INT 7
35489: PUSH
35490: LD_INT 25
35492: PUSH
35493: LD_INT 8
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35501: LD_VAR 0 6
35505: PPUSH
35506: CALL_OW 264
35510: PUSH
35511: LD_INT 5
35513: PUSH
35514: LD_INT 27
35516: PUSH
35517: LD_INT 44
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: IN
35525: IFFALSE 35546
// points := [ 14 , 50 , 16 ] ;
35527: LD_ADDR_VAR 0 9
35531: PUSH
35532: LD_INT 14
35534: PUSH
35535: LD_INT 50
35537: PUSH
35538: LD_INT 16
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35546: LD_VAR 0 6
35550: PPUSH
35551: CALL_OW 264
35555: PUSH
35556: LD_INT 6
35558: PUSH
35559: LD_INT 46
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: IN
35566: IFFALSE 35587
// points := [ 32 , 120 , 70 ] ;
35568: LD_ADDR_VAR 0 9
35572: PUSH
35573: LD_INT 32
35575: PUSH
35576: LD_INT 120
35578: PUSH
35579: LD_INT 70
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35587: LD_VAR 0 6
35591: PPUSH
35592: CALL_OW 264
35596: PUSH
35597: LD_INT 7
35599: PUSH
35600: LD_INT 28
35602: PUSH
35603: LD_INT 45
35605: PUSH
35606: LD_INT 92
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: IN
35615: IFFALSE 35636
// points := [ 35 , 20 , 45 ] ;
35617: LD_ADDR_VAR 0 9
35621: PUSH
35622: LD_INT 35
35624: PUSH
35625: LD_INT 20
35627: PUSH
35628: LD_INT 45
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35636: LD_VAR 0 6
35640: PPUSH
35641: CALL_OW 264
35645: PUSH
35646: LD_INT 47
35648: PUSH
35649: EMPTY
35650: LIST
35651: IN
35652: IFFALSE 35673
// points := [ 67 , 45 , 75 ] ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: LD_INT 67
35661: PUSH
35662: LD_INT 45
35664: PUSH
35665: LD_INT 75
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35673: LD_VAR 0 6
35677: PPUSH
35678: CALL_OW 264
35682: PUSH
35683: LD_INT 26
35685: PUSH
35686: EMPTY
35687: LIST
35688: IN
35689: IFFALSE 35710
// points := [ 120 , 30 , 80 ] ;
35691: LD_ADDR_VAR 0 9
35695: PUSH
35696: LD_INT 120
35698: PUSH
35699: LD_INT 30
35701: PUSH
35702: LD_INT 80
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35710: LD_VAR 0 6
35714: PPUSH
35715: CALL_OW 264
35719: PUSH
35720: LD_INT 22
35722: PUSH
35723: EMPTY
35724: LIST
35725: IN
35726: IFFALSE 35747
// points := [ 40 , 1 , 1 ] ;
35728: LD_ADDR_VAR 0 9
35732: PUSH
35733: LD_INT 40
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35747: LD_VAR 0 6
35751: PPUSH
35752: CALL_OW 264
35756: PUSH
35757: LD_INT 29
35759: PUSH
35760: EMPTY
35761: LIST
35762: IN
35763: IFFALSE 35784
// points := [ 70 , 200 , 400 ] ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_INT 70
35772: PUSH
35773: LD_INT 200
35775: PUSH
35776: LD_INT 400
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35784: LD_VAR 0 6
35788: PPUSH
35789: CALL_OW 264
35793: PUSH
35794: LD_INT 14
35796: PUSH
35797: LD_INT 53
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: IN
35804: IFFALSE 35825
// points := [ 40 , 10 , 20 ] ;
35806: LD_ADDR_VAR 0 9
35810: PUSH
35811: LD_INT 40
35813: PUSH
35814: LD_INT 10
35816: PUSH
35817: LD_INT 20
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35825: LD_VAR 0 6
35829: PPUSH
35830: CALL_OW 264
35834: PUSH
35835: LD_INT 9
35837: PUSH
35838: EMPTY
35839: LIST
35840: IN
35841: IFFALSE 35862
// points := [ 5 , 70 , 20 ] ;
35843: LD_ADDR_VAR 0 9
35847: PUSH
35848: LD_INT 5
35850: PUSH
35851: LD_INT 70
35853: PUSH
35854: LD_INT 20
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35862: LD_VAR 0 6
35866: PPUSH
35867: CALL_OW 264
35871: PUSH
35872: LD_INT 10
35874: PUSH
35875: EMPTY
35876: LIST
35877: IN
35878: IFFALSE 35899
// points := [ 35 , 110 , 70 ] ;
35880: LD_ADDR_VAR 0 9
35884: PUSH
35885: LD_INT 35
35887: PUSH
35888: LD_INT 110
35890: PUSH
35891: LD_INT 70
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35899: LD_VAR 0 6
35903: PPUSH
35904: CALL_OW 265
35908: PUSH
35909: LD_INT 25
35911: EQUAL
35912: IFFALSE 35933
// points := [ 80 , 65 , 100 ] ;
35914: LD_ADDR_VAR 0 9
35918: PUSH
35919: LD_INT 80
35921: PUSH
35922: LD_INT 65
35924: PUSH
35925: LD_INT 100
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35933: LD_VAR 0 6
35937: PPUSH
35938: CALL_OW 263
35942: PUSH
35943: LD_INT 1
35945: EQUAL
35946: IFFALSE 35981
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35948: LD_ADDR_VAR 0 10
35952: PUSH
35953: LD_VAR 0 10
35957: PUSH
35958: LD_VAR 0 6
35962: PPUSH
35963: CALL_OW 311
35967: PPUSH
35968: LD_INT 3
35970: PPUSH
35971: CALL_OW 259
35975: PUSH
35976: LD_INT 4
35978: MUL
35979: MUL
35980: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35981: LD_VAR 0 6
35985: PPUSH
35986: CALL_OW 263
35990: PUSH
35991: LD_INT 2
35993: EQUAL
35994: IFFALSE 36045
// begin j := IsControledBy ( i ) ;
35996: LD_ADDR_VAR 0 7
36000: PUSH
36001: LD_VAR 0 6
36005: PPUSH
36006: CALL_OW 312
36010: ST_TO_ADDR
// if j then
36011: LD_VAR 0 7
36015: IFFALSE 36045
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36017: LD_ADDR_VAR 0 10
36021: PUSH
36022: LD_VAR 0 10
36026: PUSH
36027: LD_VAR 0 7
36031: PPUSH
36032: LD_INT 3
36034: PPUSH
36035: CALL_OW 259
36039: PUSH
36040: LD_INT 3
36042: MUL
36043: MUL
36044: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36045: LD_VAR 0 6
36049: PPUSH
36050: CALL_OW 264
36054: PUSH
36055: LD_INT 5
36057: PUSH
36058: LD_INT 6
36060: PUSH
36061: LD_INT 46
36063: PUSH
36064: LD_INT 44
36066: PUSH
36067: LD_INT 47
36069: PUSH
36070: LD_INT 45
36072: PUSH
36073: LD_INT 28
36075: PUSH
36076: LD_INT 7
36078: PUSH
36079: LD_INT 27
36081: PUSH
36082: LD_INT 29
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: IN
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: LD_INT 52
36105: PPUSH
36106: CALL_OW 321
36110: PUSH
36111: LD_INT 2
36113: EQUAL
36114: AND
36115: IFFALSE 36132
// bpoints := bpoints * 1.2 ;
36117: LD_ADDR_VAR 0 10
36121: PUSH
36122: LD_VAR 0 10
36126: PUSH
36127: LD_REAL  1.20000000000000E+0000
36130: MUL
36131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36132: LD_VAR 0 6
36136: PPUSH
36137: CALL_OW 264
36141: PUSH
36142: LD_INT 6
36144: PUSH
36145: LD_INT 46
36147: PUSH
36148: LD_INT 47
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: IN
36156: IFFALSE 36173
// bpoints := bpoints * 1.2 ;
36158: LD_ADDR_VAR 0 10
36162: PUSH
36163: LD_VAR 0 10
36167: PUSH
36168: LD_REAL  1.20000000000000E+0000
36171: MUL
36172: ST_TO_ADDR
// end ; unit_building :
36173: GO 36187
36175: LD_INT 3
36177: DOUBLE
36178: EQUAL
36179: IFTRUE 36183
36181: GO 36186
36183: POP
// ; end ;
36184: GO 36187
36186: POP
// for j = 1 to 3 do
36187: LD_ADDR_VAR 0 7
36191: PUSH
36192: DOUBLE
36193: LD_INT 1
36195: DEC
36196: ST_TO_ADDR
36197: LD_INT 3
36199: PUSH
36200: FOR_TO
36201: IFFALSE 36254
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36203: LD_ADDR_VAR 0 5
36207: PUSH
36208: LD_VAR 0 5
36212: PPUSH
36213: LD_VAR 0 7
36217: PPUSH
36218: LD_VAR 0 5
36222: PUSH
36223: LD_VAR 0 7
36227: ARRAY
36228: PUSH
36229: LD_VAR 0 9
36233: PUSH
36234: LD_VAR 0 7
36238: ARRAY
36239: PUSH
36240: LD_VAR 0 10
36244: MUL
36245: PLUS
36246: PPUSH
36247: CALL_OW 1
36251: ST_TO_ADDR
36252: GO 36200
36254: POP
36255: POP
// end ;
36256: GO 34735
36258: POP
36259: POP
// result := Replace ( result , 4 , tmp ) ;
36260: LD_ADDR_VAR 0 5
36264: PUSH
36265: LD_VAR 0 5
36269: PPUSH
36270: LD_INT 4
36272: PPUSH
36273: LD_VAR 0 8
36277: PPUSH
36278: CALL_OW 1
36282: ST_TO_ADDR
// end ;
36283: LD_VAR 0 5
36287: RET
// export function DangerAtRange ( unit , range ) ; begin
36288: LD_INT 0
36290: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36291: LD_ADDR_VAR 0 3
36295: PUSH
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 255
36305: PPUSH
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 250
36315: PPUSH
36316: LD_VAR 0 1
36320: PPUSH
36321: CALL_OW 251
36325: PPUSH
36326: LD_VAR 0 2
36330: PPUSH
36331: CALL 34587 0 4
36335: ST_TO_ADDR
// end ;
36336: LD_VAR 0 3
36340: RET
// export function DangerInArea ( side , area ) ; begin
36341: LD_INT 0
36343: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36344: LD_ADDR_VAR 0 3
36348: PUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_INT 81
36356: PUSH
36357: LD_VAR 0 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PPUSH
36366: CALL_OW 70
36370: ST_TO_ADDR
// end ;
36371: LD_VAR 0 3
36375: RET
// export function IsExtension ( b ) ; begin
36376: LD_INT 0
36378: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36379: LD_ADDR_VAR 0 2
36383: PUSH
36384: LD_VAR 0 1
36388: PUSH
36389: LD_INT 23
36391: PUSH
36392: LD_INT 20
36394: PUSH
36395: LD_INT 22
36397: PUSH
36398: LD_INT 17
36400: PUSH
36401: LD_INT 24
36403: PUSH
36404: LD_INT 21
36406: PUSH
36407: LD_INT 19
36409: PUSH
36410: LD_INT 16
36412: PUSH
36413: LD_INT 25
36415: PUSH
36416: LD_INT 18
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: IN
36431: ST_TO_ADDR
// end ;
36432: LD_VAR 0 2
36436: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36437: LD_INT 0
36439: PPUSH
36440: PPUSH
36441: PPUSH
// result := [ ] ;
36442: LD_ADDR_VAR 0 4
36446: PUSH
36447: EMPTY
36448: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36449: LD_ADDR_VAR 0 5
36453: PUSH
36454: LD_VAR 0 2
36458: PPUSH
36459: LD_INT 21
36461: PUSH
36462: LD_INT 3
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PPUSH
36469: CALL_OW 70
36473: ST_TO_ADDR
// if not tmp then
36474: LD_VAR 0 5
36478: NOT
36479: IFFALSE 36483
// exit ;
36481: GO 36547
// if checkLink then
36483: LD_VAR 0 3
36487: IFFALSE 36537
// begin for i in tmp do
36489: LD_ADDR_VAR 0 6
36493: PUSH
36494: LD_VAR 0 5
36498: PUSH
36499: FOR_IN
36500: IFFALSE 36535
// if GetBase ( i ) <> base then
36502: LD_VAR 0 6
36506: PPUSH
36507: CALL_OW 274
36511: PUSH
36512: LD_VAR 0 1
36516: NONEQUAL
36517: IFFALSE 36533
// ComLinkToBase ( base , i ) ;
36519: LD_VAR 0 1
36523: PPUSH
36524: LD_VAR 0 6
36528: PPUSH
36529: CALL_OW 169
36533: GO 36499
36535: POP
36536: POP
// end ; result := tmp ;
36537: LD_ADDR_VAR 0 4
36541: PUSH
36542: LD_VAR 0 5
36546: ST_TO_ADDR
// end ;
36547: LD_VAR 0 4
36551: RET
// export function ComComplete ( units , b ) ; var i ; begin
36552: LD_INT 0
36554: PPUSH
36555: PPUSH
// if not units then
36556: LD_VAR 0 1
36560: NOT
36561: IFFALSE 36565
// exit ;
36563: GO 36655
// for i in units do
36565: LD_ADDR_VAR 0 4
36569: PUSH
36570: LD_VAR 0 1
36574: PUSH
36575: FOR_IN
36576: IFFALSE 36653
// if BuildingStatus ( b ) = bs_build then
36578: LD_VAR 0 2
36582: PPUSH
36583: CALL_OW 461
36587: PUSH
36588: LD_INT 1
36590: EQUAL
36591: IFFALSE 36651
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36593: LD_VAR 0 4
36597: PPUSH
36598: LD_STRING h
36600: PUSH
36601: LD_VAR 0 2
36605: PPUSH
36606: CALL_OW 250
36610: PUSH
36611: LD_VAR 0 2
36615: PPUSH
36616: CALL_OW 251
36620: PUSH
36621: LD_VAR 0 2
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: PUSH
36644: EMPTY
36645: LIST
36646: PPUSH
36647: CALL_OW 446
36651: GO 36575
36653: POP
36654: POP
// end ;
36655: LD_VAR 0 3
36659: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36668: LD_VAR 0 1
36672: NOT
36673: PUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 263
36683: PUSH
36684: LD_INT 2
36686: NONEQUAL
36687: OR
36688: IFFALSE 36692
// exit ;
36690: GO 37008
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36692: LD_ADDR_VAR 0 6
36696: PUSH
36697: LD_INT 22
36699: PUSH
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 255
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 30
36719: PUSH
36720: LD_INT 36
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 34
36729: PUSH
36730: LD_INT 31
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: CALL_OW 69
36750: ST_TO_ADDR
// if not tmp then
36751: LD_VAR 0 6
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 37008
// result := [ ] ;
36760: LD_ADDR_VAR 0 2
36764: PUSH
36765: EMPTY
36766: ST_TO_ADDR
// for i in tmp do
36767: LD_ADDR_VAR 0 3
36771: PUSH
36772: LD_VAR 0 6
36776: PUSH
36777: FOR_IN
36778: IFFALSE 36849
// begin t := UnitsInside ( i ) ;
36780: LD_ADDR_VAR 0 4
36784: PUSH
36785: LD_VAR 0 3
36789: PPUSH
36790: CALL_OW 313
36794: ST_TO_ADDR
// if t then
36795: LD_VAR 0 4
36799: IFFALSE 36847
// for j in t do
36801: LD_ADDR_VAR 0 7
36805: PUSH
36806: LD_VAR 0 4
36810: PUSH
36811: FOR_IN
36812: IFFALSE 36845
// result := Replace ( result , result + 1 , j ) ;
36814: LD_ADDR_VAR 0 2
36818: PUSH
36819: LD_VAR 0 2
36823: PPUSH
36824: LD_VAR 0 2
36828: PUSH
36829: LD_INT 1
36831: PLUS
36832: PPUSH
36833: LD_VAR 0 7
36837: PPUSH
36838: CALL_OW 1
36842: ST_TO_ADDR
36843: GO 36811
36845: POP
36846: POP
// end ;
36847: GO 36777
36849: POP
36850: POP
// if not result then
36851: LD_VAR 0 2
36855: NOT
36856: IFFALSE 36860
// exit ;
36858: GO 37008
// mech := result [ 1 ] ;
36860: LD_ADDR_VAR 0 5
36864: PUSH
36865: LD_VAR 0 2
36869: PUSH
36870: LD_INT 1
36872: ARRAY
36873: ST_TO_ADDR
// if result > 1 then
36874: LD_VAR 0 2
36878: PUSH
36879: LD_INT 1
36881: GREATER
36882: IFFALSE 36994
// begin for i = 2 to result do
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: DOUBLE
36890: LD_INT 2
36892: DEC
36893: ST_TO_ADDR
36894: LD_VAR 0 2
36898: PUSH
36899: FOR_TO
36900: IFFALSE 36992
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36902: LD_ADDR_VAR 0 4
36906: PUSH
36907: LD_VAR 0 2
36911: PUSH
36912: LD_VAR 0 3
36916: ARRAY
36917: PPUSH
36918: LD_INT 3
36920: PPUSH
36921: CALL_OW 259
36925: PUSH
36926: LD_VAR 0 2
36930: PUSH
36931: LD_VAR 0 3
36935: ARRAY
36936: PPUSH
36937: CALL_OW 432
36941: MINUS
36942: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36943: LD_VAR 0 4
36947: PUSH
36948: LD_VAR 0 5
36952: PPUSH
36953: LD_INT 3
36955: PPUSH
36956: CALL_OW 259
36960: PUSH
36961: LD_VAR 0 5
36965: PPUSH
36966: CALL_OW 432
36970: MINUS
36971: GREATEREQUAL
36972: IFFALSE 36990
// mech := result [ i ] ;
36974: LD_ADDR_VAR 0 5
36978: PUSH
36979: LD_VAR 0 2
36983: PUSH
36984: LD_VAR 0 3
36988: ARRAY
36989: ST_TO_ADDR
// end ;
36990: GO 36899
36992: POP
36993: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36994: LD_VAR 0 1
36998: PPUSH
36999: LD_VAR 0 5
37003: PPUSH
37004: CALL_OW 135
// end ;
37008: LD_VAR 0 2
37012: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
// result := [ ] ;
37028: LD_ADDR_VAR 0 7
37032: PUSH
37033: EMPTY
37034: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 266
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: IN
37055: NOT
37056: IFFALSE 37060
// exit ;
37058: GO 38694
// if name then
37060: LD_VAR 0 3
37064: IFFALSE 37080
// SetBName ( base_dep , name ) ;
37066: LD_VAR 0 1
37070: PPUSH
37071: LD_VAR 0 3
37075: PPUSH
37076: CALL_OW 500
// base := GetBase ( base_dep ) ;
37080: LD_ADDR_VAR 0 15
37084: PUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 274
37094: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37095: LD_ADDR_VAR 0 16
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 255
37109: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37110: LD_ADDR_VAR 0 17
37114: PUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 248
37124: ST_TO_ADDR
// if sources then
37125: LD_VAR 0 5
37129: IFFALSE 37176
// for i = 1 to 3 do
37131: LD_ADDR_VAR 0 8
37135: PUSH
37136: DOUBLE
37137: LD_INT 1
37139: DEC
37140: ST_TO_ADDR
37141: LD_INT 3
37143: PUSH
37144: FOR_TO
37145: IFFALSE 37174
// AddResourceType ( base , i , sources [ i ] ) ;
37147: LD_VAR 0 15
37151: PPUSH
37152: LD_VAR 0 8
37156: PPUSH
37157: LD_VAR 0 5
37161: PUSH
37162: LD_VAR 0 8
37166: ARRAY
37167: PPUSH
37168: CALL_OW 276
37172: GO 37144
37174: POP
37175: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37176: LD_ADDR_VAR 0 18
37180: PUSH
37181: LD_VAR 0 15
37185: PPUSH
37186: LD_VAR 0 2
37190: PPUSH
37191: LD_INT 1
37193: PPUSH
37194: CALL 36437 0 3
37198: ST_TO_ADDR
// InitHc ;
37199: CALL_OW 19
// InitUc ;
37203: CALL_OW 18
// uc_side := side ;
37207: LD_ADDR_OWVAR 20
37211: PUSH
37212: LD_VAR 0 16
37216: ST_TO_ADDR
// uc_nation := nation ;
37217: LD_ADDR_OWVAR 21
37221: PUSH
37222: LD_VAR 0 17
37226: ST_TO_ADDR
// if buildings then
37227: LD_VAR 0 18
37231: IFFALSE 38553
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37233: LD_ADDR_VAR 0 19
37237: PUSH
37238: LD_VAR 0 18
37242: PPUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: LD_INT 29
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 30
37258: PUSH
37259: LD_INT 30
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: PPUSH
37271: CALL_OW 72
37275: ST_TO_ADDR
// if tmp then
37276: LD_VAR 0 19
37280: IFFALSE 37328
// for i in tmp do
37282: LD_ADDR_VAR 0 8
37286: PUSH
37287: LD_VAR 0 19
37291: PUSH
37292: FOR_IN
37293: IFFALSE 37326
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37295: LD_VAR 0 8
37299: PPUSH
37300: CALL_OW 250
37304: PPUSH
37305: LD_VAR 0 8
37309: PPUSH
37310: CALL_OW 251
37314: PPUSH
37315: LD_VAR 0 16
37319: PPUSH
37320: CALL_OW 441
37324: GO 37292
37326: POP
37327: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37328: LD_VAR 0 18
37332: PPUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 30
37338: PUSH
37339: LD_INT 32
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 30
37348: PUSH
37349: LD_INT 33
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: PPUSH
37361: CALL_OW 72
37365: IFFALSE 37453
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37367: LD_ADDR_VAR 0 8
37371: PUSH
37372: LD_VAR 0 18
37376: PPUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 30
37382: PUSH
37383: LD_INT 32
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 30
37392: PUSH
37393: LD_INT 33
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: PPUSH
37405: CALL_OW 72
37409: PUSH
37410: FOR_IN
37411: IFFALSE 37451
// begin if not GetBWeapon ( i ) then
37413: LD_VAR 0 8
37417: PPUSH
37418: CALL_OW 269
37422: NOT
37423: IFFALSE 37449
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37425: LD_VAR 0 8
37429: PPUSH
37430: LD_VAR 0 8
37434: PPUSH
37435: LD_VAR 0 2
37439: PPUSH
37440: CALL 38699 0 2
37444: PPUSH
37445: CALL_OW 431
// end ;
37449: GO 37410
37451: POP
37452: POP
// end ; for i = 1 to personel do
37453: LD_ADDR_VAR 0 8
37457: PUSH
37458: DOUBLE
37459: LD_INT 1
37461: DEC
37462: ST_TO_ADDR
37463: LD_VAR 0 6
37467: PUSH
37468: FOR_TO
37469: IFFALSE 38533
// begin if i > 4 then
37471: LD_VAR 0 8
37475: PUSH
37476: LD_INT 4
37478: GREATER
37479: IFFALSE 37483
// break ;
37481: GO 38533
// case i of 1 :
37483: LD_VAR 0 8
37487: PUSH
37488: LD_INT 1
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37496
37494: GO 37576
37496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37497: LD_ADDR_VAR 0 12
37501: PUSH
37502: LD_VAR 0 18
37506: PPUSH
37507: LD_INT 22
37509: PUSH
37510: LD_VAR 0 16
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 58
37521: PUSH
37522: EMPTY
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 30
37530: PUSH
37531: LD_INT 32
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 30
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 30
37550: PUSH
37551: LD_INT 5
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: PPUSH
37569: CALL_OW 72
37573: ST_TO_ADDR
37574: GO 37798
37576: LD_INT 2
37578: DOUBLE
37579: EQUAL
37580: IFTRUE 37584
37582: GO 37646
37584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37585: LD_ADDR_VAR 0 12
37589: PUSH
37590: LD_VAR 0 18
37594: PPUSH
37595: LD_INT 22
37597: PUSH
37598: LD_VAR 0 16
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 30
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 30
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PPUSH
37639: CALL_OW 72
37643: ST_TO_ADDR
37644: GO 37798
37646: LD_INT 3
37648: DOUBLE
37649: EQUAL
37650: IFTRUE 37654
37652: GO 37716
37654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37655: LD_ADDR_VAR 0 12
37659: PUSH
37660: LD_VAR 0 18
37664: PPUSH
37665: LD_INT 22
37667: PUSH
37668: LD_VAR 0 16
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: LD_INT 30
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 30
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PPUSH
37709: CALL_OW 72
37713: ST_TO_ADDR
37714: GO 37798
37716: LD_INT 4
37718: DOUBLE
37719: EQUAL
37720: IFTRUE 37724
37722: GO 37797
37724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37725: LD_ADDR_VAR 0 12
37729: PUSH
37730: LD_VAR 0 18
37734: PPUSH
37735: LD_INT 22
37737: PUSH
37738: LD_VAR 0 16
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 30
37752: PUSH
37753: LD_INT 6
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 30
37762: PUSH
37763: LD_INT 7
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 30
37772: PUSH
37773: LD_INT 8
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PPUSH
37790: CALL_OW 72
37794: ST_TO_ADDR
37795: GO 37798
37797: POP
// if i = 1 then
37798: LD_VAR 0 8
37802: PUSH
37803: LD_INT 1
37805: EQUAL
37806: IFFALSE 37917
// begin tmp := [ ] ;
37808: LD_ADDR_VAR 0 19
37812: PUSH
37813: EMPTY
37814: ST_TO_ADDR
// for j in f do
37815: LD_ADDR_VAR 0 9
37819: PUSH
37820: LD_VAR 0 12
37824: PUSH
37825: FOR_IN
37826: IFFALSE 37899
// if GetBType ( j ) = b_bunker then
37828: LD_VAR 0 9
37832: PPUSH
37833: CALL_OW 266
37837: PUSH
37838: LD_INT 32
37840: EQUAL
37841: IFFALSE 37868
// tmp := Insert ( tmp , 1 , j ) else
37843: LD_ADDR_VAR 0 19
37847: PUSH
37848: LD_VAR 0 19
37852: PPUSH
37853: LD_INT 1
37855: PPUSH
37856: LD_VAR 0 9
37860: PPUSH
37861: CALL_OW 2
37865: ST_TO_ADDR
37866: GO 37897
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37868: LD_ADDR_VAR 0 19
37872: PUSH
37873: LD_VAR 0 19
37877: PPUSH
37878: LD_VAR 0 19
37882: PUSH
37883: LD_INT 1
37885: PLUS
37886: PPUSH
37887: LD_VAR 0 9
37891: PPUSH
37892: CALL_OW 2
37896: ST_TO_ADDR
37897: GO 37825
37899: POP
37900: POP
// if tmp then
37901: LD_VAR 0 19
37905: IFFALSE 37917
// f := tmp ;
37907: LD_ADDR_VAR 0 12
37911: PUSH
37912: LD_VAR 0 19
37916: ST_TO_ADDR
// end ; x := personel [ i ] ;
37917: LD_ADDR_VAR 0 13
37921: PUSH
37922: LD_VAR 0 6
37926: PUSH
37927: LD_VAR 0 8
37931: ARRAY
37932: ST_TO_ADDR
// if x = - 1 then
37933: LD_VAR 0 13
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: EQUAL
37942: IFFALSE 38151
// begin for j in f do
37944: LD_ADDR_VAR 0 9
37948: PUSH
37949: LD_VAR 0 12
37953: PUSH
37954: FOR_IN
37955: IFFALSE 38147
// repeat InitHc ;
37957: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37961: LD_VAR 0 9
37965: PPUSH
37966: CALL_OW 266
37970: PUSH
37971: LD_INT 5
37973: EQUAL
37974: IFFALSE 38044
// begin if UnitsInside ( j ) < 3 then
37976: LD_VAR 0 9
37980: PPUSH
37981: CALL_OW 313
37985: PUSH
37986: LD_INT 3
37988: LESS
37989: IFFALSE 38025
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37991: LD_INT 0
37993: PPUSH
37994: LD_INT 5
37996: PUSH
37997: LD_INT 8
37999: PUSH
38000: LD_INT 9
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: PUSH
38008: LD_VAR 0 17
38012: ARRAY
38013: PPUSH
38014: LD_VAR 0 4
38018: PPUSH
38019: CALL_OW 380
38023: GO 38042
// PrepareHuman ( false , i , skill ) ;
38025: LD_INT 0
38027: PPUSH
38028: LD_VAR 0 8
38032: PPUSH
38033: LD_VAR 0 4
38037: PPUSH
38038: CALL_OW 380
// end else
38042: GO 38061
// PrepareHuman ( false , i , skill ) ;
38044: LD_INT 0
38046: PPUSH
38047: LD_VAR 0 8
38051: PPUSH
38052: LD_VAR 0 4
38056: PPUSH
38057: CALL_OW 380
// un := CreateHuman ;
38061: LD_ADDR_VAR 0 14
38065: PUSH
38066: CALL_OW 44
38070: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38071: LD_ADDR_VAR 0 7
38075: PUSH
38076: LD_VAR 0 7
38080: PPUSH
38081: LD_INT 1
38083: PPUSH
38084: LD_VAR 0 14
38088: PPUSH
38089: CALL_OW 2
38093: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38094: LD_VAR 0 14
38098: PPUSH
38099: LD_VAR 0 9
38103: PPUSH
38104: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38108: LD_VAR 0 9
38112: PPUSH
38113: CALL_OW 313
38117: PUSH
38118: LD_INT 6
38120: EQUAL
38121: PUSH
38122: LD_VAR 0 9
38126: PPUSH
38127: CALL_OW 266
38131: PUSH
38132: LD_INT 32
38134: PUSH
38135: LD_INT 31
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: IN
38142: OR
38143: IFFALSE 37957
38145: GO 37954
38147: POP
38148: POP
// end else
38149: GO 38531
// for j = 1 to x do
38151: LD_ADDR_VAR 0 9
38155: PUSH
38156: DOUBLE
38157: LD_INT 1
38159: DEC
38160: ST_TO_ADDR
38161: LD_VAR 0 13
38165: PUSH
38166: FOR_TO
38167: IFFALSE 38529
// begin InitHc ;
38169: CALL_OW 19
// if not f then
38173: LD_VAR 0 12
38177: NOT
38178: IFFALSE 38267
// begin PrepareHuman ( false , i , skill ) ;
38180: LD_INT 0
38182: PPUSH
38183: LD_VAR 0 8
38187: PPUSH
38188: LD_VAR 0 4
38192: PPUSH
38193: CALL_OW 380
// un := CreateHuman ;
38197: LD_ADDR_VAR 0 14
38201: PUSH
38202: CALL_OW 44
38206: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: LD_VAR 0 7
38216: PPUSH
38217: LD_INT 1
38219: PPUSH
38220: LD_VAR 0 14
38224: PPUSH
38225: CALL_OW 2
38229: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38230: LD_VAR 0 14
38234: PPUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: CALL_OW 250
38244: PPUSH
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 251
38254: PPUSH
38255: LD_INT 10
38257: PPUSH
38258: LD_INT 0
38260: PPUSH
38261: CALL_OW 50
// continue ;
38265: GO 38166
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38267: LD_VAR 0 12
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: PPUSH
38276: CALL_OW 313
38280: PUSH
38281: LD_VAR 0 12
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PPUSH
38290: CALL_OW 266
38294: PUSH
38295: LD_INT 32
38297: PUSH
38298: LD_INT 31
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: IN
38305: AND
38306: PUSH
38307: LD_VAR 0 12
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: PPUSH
38316: CALL_OW 313
38320: PUSH
38321: LD_INT 6
38323: EQUAL
38324: OR
38325: IFFALSE 38345
// f := Delete ( f , 1 ) ;
38327: LD_ADDR_VAR 0 12
38331: PUSH
38332: LD_VAR 0 12
38336: PPUSH
38337: LD_INT 1
38339: PPUSH
38340: CALL_OW 3
38344: ST_TO_ADDR
// if not f then
38345: LD_VAR 0 12
38349: NOT
38350: IFFALSE 38368
// begin x := x + 2 ;
38352: LD_ADDR_VAR 0 13
38356: PUSH
38357: LD_VAR 0 13
38361: PUSH
38362: LD_INT 2
38364: PLUS
38365: ST_TO_ADDR
// continue ;
38366: GO 38166
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38368: LD_VAR 0 12
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PPUSH
38377: CALL_OW 266
38381: PUSH
38382: LD_INT 5
38384: EQUAL
38385: IFFALSE 38459
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38387: LD_VAR 0 12
38391: PUSH
38392: LD_INT 1
38394: ARRAY
38395: PPUSH
38396: CALL_OW 313
38400: PUSH
38401: LD_INT 3
38403: LESS
38404: IFFALSE 38440
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38406: LD_INT 0
38408: PPUSH
38409: LD_INT 5
38411: PUSH
38412: LD_INT 8
38414: PUSH
38415: LD_INT 9
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: PUSH
38423: LD_VAR 0 17
38427: ARRAY
38428: PPUSH
38429: LD_VAR 0 4
38433: PPUSH
38434: CALL_OW 380
38438: GO 38457
// PrepareHuman ( false , i , skill ) ;
38440: LD_INT 0
38442: PPUSH
38443: LD_VAR 0 8
38447: PPUSH
38448: LD_VAR 0 4
38452: PPUSH
38453: CALL_OW 380
// end else
38457: GO 38476
// PrepareHuman ( false , i , skill ) ;
38459: LD_INT 0
38461: PPUSH
38462: LD_VAR 0 8
38466: PPUSH
38467: LD_VAR 0 4
38471: PPUSH
38472: CALL_OW 380
// un := CreateHuman ;
38476: LD_ADDR_VAR 0 14
38480: PUSH
38481: CALL_OW 44
38485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38486: LD_ADDR_VAR 0 7
38490: PUSH
38491: LD_VAR 0 7
38495: PPUSH
38496: LD_INT 1
38498: PPUSH
38499: LD_VAR 0 14
38503: PPUSH
38504: CALL_OW 2
38508: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38509: LD_VAR 0 14
38513: PPUSH
38514: LD_VAR 0 12
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PPUSH
38523: CALL_OW 52
// end ;
38527: GO 38166
38529: POP
38530: POP
// end ;
38531: GO 37468
38533: POP
38534: POP
// result := result ^ buildings ;
38535: LD_ADDR_VAR 0 7
38539: PUSH
38540: LD_VAR 0 7
38544: PUSH
38545: LD_VAR 0 18
38549: ADD
38550: ST_TO_ADDR
// end else
38551: GO 38694
// begin for i = 1 to personel do
38553: LD_ADDR_VAR 0 8
38557: PUSH
38558: DOUBLE
38559: LD_INT 1
38561: DEC
38562: ST_TO_ADDR
38563: LD_VAR 0 6
38567: PUSH
38568: FOR_TO
38569: IFFALSE 38692
// begin if i > 4 then
38571: LD_VAR 0 8
38575: PUSH
38576: LD_INT 4
38578: GREATER
38579: IFFALSE 38583
// break ;
38581: GO 38692
// x := personel [ i ] ;
38583: LD_ADDR_VAR 0 13
38587: PUSH
38588: LD_VAR 0 6
38592: PUSH
38593: LD_VAR 0 8
38597: ARRAY
38598: ST_TO_ADDR
// if x = - 1 then
38599: LD_VAR 0 13
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: EQUAL
38608: IFFALSE 38612
// continue ;
38610: GO 38568
// PrepareHuman ( false , i , skill ) ;
38612: LD_INT 0
38614: PPUSH
38615: LD_VAR 0 8
38619: PPUSH
38620: LD_VAR 0 4
38624: PPUSH
38625: CALL_OW 380
// un := CreateHuman ;
38629: LD_ADDR_VAR 0 14
38633: PUSH
38634: CALL_OW 44
38638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38639: LD_VAR 0 14
38643: PPUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 250
38653: PPUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 251
38663: PPUSH
38664: LD_INT 10
38666: PPUSH
38667: LD_INT 0
38669: PPUSH
38670: CALL_OW 50
// result := result ^ un ;
38674: LD_ADDR_VAR 0 7
38678: PUSH
38679: LD_VAR 0 7
38683: PUSH
38684: LD_VAR 0 14
38688: ADD
38689: ST_TO_ADDR
// end ;
38690: GO 38568
38692: POP
38693: POP
// end ; end ;
38694: LD_VAR 0 7
38698: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
// result := false ;
38717: LD_ADDR_VAR 0 3
38721: PUSH
38722: LD_INT 0
38724: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38725: LD_VAR 0 1
38729: NOT
38730: PUSH
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 266
38740: PUSH
38741: LD_INT 32
38743: PUSH
38744: LD_INT 33
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: IN
38751: NOT
38752: OR
38753: IFFALSE 38757
// exit ;
38755: GO 39866
// nat := GetNation ( tower ) ;
38757: LD_ADDR_VAR 0 12
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: CALL_OW 248
38771: ST_TO_ADDR
// side := GetSide ( tower ) ;
38772: LD_ADDR_VAR 0 16
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 255
38786: ST_TO_ADDR
// x := GetX ( tower ) ;
38787: LD_ADDR_VAR 0 10
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 250
38801: ST_TO_ADDR
// y := GetY ( tower ) ;
38802: LD_ADDR_VAR 0 11
38806: PUSH
38807: LD_VAR 0 1
38811: PPUSH
38812: CALL_OW 251
38816: ST_TO_ADDR
// if not x or not y then
38817: LD_VAR 0 10
38821: NOT
38822: PUSH
38823: LD_VAR 0 11
38827: NOT
38828: OR
38829: IFFALSE 38833
// exit ;
38831: GO 39866
// weapon := 0 ;
38833: LD_ADDR_VAR 0 18
38837: PUSH
38838: LD_INT 0
38840: ST_TO_ADDR
// fac_list := [ ] ;
38841: LD_ADDR_VAR 0 17
38845: PUSH
38846: EMPTY
38847: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38848: LD_ADDR_VAR 0 6
38852: PUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 274
38862: PPUSH
38863: LD_VAR 0 2
38867: PPUSH
38868: LD_INT 0
38870: PPUSH
38871: CALL 36437 0 3
38875: PPUSH
38876: LD_INT 30
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PPUSH
38886: CALL_OW 72
38890: ST_TO_ADDR
// if not factories then
38891: LD_VAR 0 6
38895: NOT
38896: IFFALSE 38900
// exit ;
38898: GO 39866
// for i in factories do
38900: LD_ADDR_VAR 0 8
38904: PUSH
38905: LD_VAR 0 6
38909: PUSH
38910: FOR_IN
38911: IFFALSE 38936
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38913: LD_ADDR_VAR 0 17
38917: PUSH
38918: LD_VAR 0 17
38922: PUSH
38923: LD_VAR 0 8
38927: PPUSH
38928: CALL_OW 478
38932: UNION
38933: ST_TO_ADDR
38934: GO 38910
38936: POP
38937: POP
// if not fac_list then
38938: LD_VAR 0 17
38942: NOT
38943: IFFALSE 38947
// exit ;
38945: GO 39866
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38947: LD_ADDR_VAR 0 5
38951: PUSH
38952: LD_INT 4
38954: PUSH
38955: LD_INT 5
38957: PUSH
38958: LD_INT 9
38960: PUSH
38961: LD_INT 10
38963: PUSH
38964: LD_INT 6
38966: PUSH
38967: LD_INT 7
38969: PUSH
38970: LD_INT 11
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 27
38984: PUSH
38985: LD_INT 28
38987: PUSH
38988: LD_INT 26
38990: PUSH
38991: LD_INT 30
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 43
39002: PUSH
39003: LD_INT 44
39005: PUSH
39006: LD_INT 46
39008: PUSH
39009: LD_INT 45
39011: PUSH
39012: LD_INT 47
39014: PUSH
39015: LD_INT 49
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 12
39035: ARRAY
39036: ST_TO_ADDR
// list := list isect fac_list ;
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_VAR 0 5
39046: PUSH
39047: LD_VAR 0 17
39051: ISECT
39052: ST_TO_ADDR
// if not list then
39053: LD_VAR 0 5
39057: NOT
39058: IFFALSE 39062
// exit ;
39060: GO 39866
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39062: LD_VAR 0 12
39066: PUSH
39067: LD_INT 3
39069: EQUAL
39070: PUSH
39071: LD_INT 49
39073: PUSH
39074: LD_VAR 0 5
39078: IN
39079: AND
39080: PUSH
39081: LD_INT 31
39083: PPUSH
39084: LD_VAR 0 16
39088: PPUSH
39089: CALL_OW 321
39093: PUSH
39094: LD_INT 2
39096: EQUAL
39097: AND
39098: IFFALSE 39158
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39100: LD_INT 22
39102: PUSH
39103: LD_VAR 0 16
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 35
39114: PUSH
39115: LD_INT 49
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 91
39124: PUSH
39125: LD_VAR 0 1
39129: PUSH
39130: LD_INT 10
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PPUSH
39143: CALL_OW 69
39147: NOT
39148: IFFALSE 39158
// weapon := ru_time_lapser ;
39150: LD_ADDR_VAR 0 18
39154: PUSH
39155: LD_INT 49
39157: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39158: LD_VAR 0 12
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: IN
39173: PUSH
39174: LD_INT 11
39176: PUSH
39177: LD_VAR 0 5
39181: IN
39182: PUSH
39183: LD_INT 30
39185: PUSH
39186: LD_VAR 0 5
39190: IN
39191: OR
39192: AND
39193: PUSH
39194: LD_INT 6
39196: PPUSH
39197: LD_VAR 0 16
39201: PPUSH
39202: CALL_OW 321
39206: PUSH
39207: LD_INT 2
39209: EQUAL
39210: AND
39211: IFFALSE 39376
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39213: LD_INT 22
39215: PUSH
39216: LD_VAR 0 16
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: LD_INT 35
39230: PUSH
39231: LD_INT 11
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 35
39240: PUSH
39241: LD_INT 30
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 91
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: LD_INT 18
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: PPUSH
39274: CALL_OW 69
39278: NOT
39279: PUSH
39280: LD_INT 22
39282: PUSH
39283: LD_VAR 0 16
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 30
39297: PUSH
39298: LD_INT 32
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 30
39307: PUSH
39308: LD_INT 33
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 91
39322: PUSH
39323: LD_VAR 0 1
39327: PUSH
39328: LD_INT 12
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: PUSH
39341: EMPTY
39342: LIST
39343: PPUSH
39344: CALL_OW 69
39348: PUSH
39349: LD_INT 2
39351: GREATER
39352: AND
39353: IFFALSE 39376
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39355: LD_ADDR_VAR 0 18
39359: PUSH
39360: LD_INT 11
39362: PUSH
39363: LD_INT 30
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_VAR 0 12
39374: ARRAY
39375: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39376: LD_VAR 0 18
39380: NOT
39381: PUSH
39382: LD_INT 40
39384: PPUSH
39385: LD_VAR 0 16
39389: PPUSH
39390: CALL_OW 321
39394: PUSH
39395: LD_INT 2
39397: EQUAL
39398: AND
39399: PUSH
39400: LD_INT 7
39402: PUSH
39403: LD_VAR 0 5
39407: IN
39408: PUSH
39409: LD_INT 28
39411: PUSH
39412: LD_VAR 0 5
39416: IN
39417: OR
39418: PUSH
39419: LD_INT 45
39421: PUSH
39422: LD_VAR 0 5
39426: IN
39427: OR
39428: AND
39429: IFFALSE 39683
// begin hex := GetHexInfo ( x , y ) ;
39431: LD_ADDR_VAR 0 4
39435: PUSH
39436: LD_VAR 0 10
39440: PPUSH
39441: LD_VAR 0 11
39445: PPUSH
39446: CALL_OW 546
39450: ST_TO_ADDR
// if hex [ 1 ] then
39451: LD_VAR 0 4
39455: PUSH
39456: LD_INT 1
39458: ARRAY
39459: IFFALSE 39463
// exit ;
39461: GO 39866
// height := hex [ 2 ] ;
39463: LD_ADDR_VAR 0 15
39467: PUSH
39468: LD_VAR 0 4
39472: PUSH
39473: LD_INT 2
39475: ARRAY
39476: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39477: LD_ADDR_VAR 0 14
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: LD_INT 5
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// for i in tmp do
39500: LD_ADDR_VAR 0 8
39504: PUSH
39505: LD_VAR 0 14
39509: PUSH
39510: FOR_IN
39511: IFFALSE 39681
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39513: LD_ADDR_VAR 0 9
39517: PUSH
39518: LD_VAR 0 10
39522: PPUSH
39523: LD_VAR 0 8
39527: PPUSH
39528: LD_INT 5
39530: PPUSH
39531: CALL_OW 272
39535: PUSH
39536: LD_VAR 0 11
39540: PPUSH
39541: LD_VAR 0 8
39545: PPUSH
39546: LD_INT 5
39548: PPUSH
39549: CALL_OW 273
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39558: LD_VAR 0 9
39562: PUSH
39563: LD_INT 1
39565: ARRAY
39566: PPUSH
39567: LD_VAR 0 9
39571: PUSH
39572: LD_INT 2
39574: ARRAY
39575: PPUSH
39576: CALL_OW 488
39580: IFFALSE 39679
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39582: LD_ADDR_VAR 0 4
39586: PUSH
39587: LD_VAR 0 9
39591: PUSH
39592: LD_INT 1
39594: ARRAY
39595: PPUSH
39596: LD_VAR 0 9
39600: PUSH
39601: LD_INT 2
39603: ARRAY
39604: PPUSH
39605: CALL_OW 546
39609: ST_TO_ADDR
// if hex [ 1 ] then
39610: LD_VAR 0 4
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: IFFALSE 39622
// continue ;
39620: GO 39510
// h := hex [ 2 ] ;
39622: LD_ADDR_VAR 0 13
39626: PUSH
39627: LD_VAR 0 4
39631: PUSH
39632: LD_INT 2
39634: ARRAY
39635: ST_TO_ADDR
// if h + 7 < height then
39636: LD_VAR 0 13
39640: PUSH
39641: LD_INT 7
39643: PLUS
39644: PUSH
39645: LD_VAR 0 15
39649: LESS
39650: IFFALSE 39679
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39652: LD_ADDR_VAR 0 18
39656: PUSH
39657: LD_INT 7
39659: PUSH
39660: LD_INT 28
39662: PUSH
39663: LD_INT 45
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: PUSH
39671: LD_VAR 0 12
39675: ARRAY
39676: ST_TO_ADDR
// break ;
39677: GO 39681
// end ; end ; end ;
39679: GO 39510
39681: POP
39682: POP
// end ; if not weapon then
39683: LD_VAR 0 18
39687: NOT
39688: IFFALSE 39748
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39690: LD_ADDR_VAR 0 5
39694: PUSH
39695: LD_VAR 0 5
39699: PUSH
39700: LD_INT 11
39702: PUSH
39703: LD_INT 30
39705: PUSH
39706: LD_INT 49
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: DIFF
39714: ST_TO_ADDR
// if not list then
39715: LD_VAR 0 5
39719: NOT
39720: IFFALSE 39724
// exit ;
39722: GO 39866
// weapon := list [ rand ( 1 , list ) ] ;
39724: LD_ADDR_VAR 0 18
39728: PUSH
39729: LD_VAR 0 5
39733: PUSH
39734: LD_INT 1
39736: PPUSH
39737: LD_VAR 0 5
39741: PPUSH
39742: CALL_OW 12
39746: ARRAY
39747: ST_TO_ADDR
// end ; if weapon then
39748: LD_VAR 0 18
39752: IFFALSE 39866
// begin tmp := CostOfWeapon ( weapon ) ;
39754: LD_ADDR_VAR 0 14
39758: PUSH
39759: LD_VAR 0 18
39763: PPUSH
39764: CALL_OW 451
39768: ST_TO_ADDR
// j := GetBase ( tower ) ;
39769: LD_ADDR_VAR 0 9
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 274
39783: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39784: LD_VAR 0 9
39788: PPUSH
39789: LD_INT 1
39791: PPUSH
39792: CALL_OW 275
39796: PUSH
39797: LD_VAR 0 14
39801: PUSH
39802: LD_INT 1
39804: ARRAY
39805: GREATEREQUAL
39806: PUSH
39807: LD_VAR 0 9
39811: PPUSH
39812: LD_INT 2
39814: PPUSH
39815: CALL_OW 275
39819: PUSH
39820: LD_VAR 0 14
39824: PUSH
39825: LD_INT 2
39827: ARRAY
39828: GREATEREQUAL
39829: AND
39830: PUSH
39831: LD_VAR 0 9
39835: PPUSH
39836: LD_INT 3
39838: PPUSH
39839: CALL_OW 275
39843: PUSH
39844: LD_VAR 0 14
39848: PUSH
39849: LD_INT 3
39851: ARRAY
39852: GREATEREQUAL
39853: AND
39854: IFFALSE 39866
// result := weapon ;
39856: LD_ADDR_VAR 0 3
39860: PUSH
39861: LD_VAR 0 18
39865: ST_TO_ADDR
// end ; end ;
39866: LD_VAR 0 3
39870: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39871: LD_INT 0
39873: PPUSH
39874: PPUSH
// result := true ;
39875: LD_ADDR_VAR 0 3
39879: PUSH
39880: LD_INT 1
39882: ST_TO_ADDR
// if array1 = array2 then
39883: LD_VAR 0 1
39887: PUSH
39888: LD_VAR 0 2
39892: EQUAL
39893: IFFALSE 39953
// begin for i = 1 to array1 do
39895: LD_ADDR_VAR 0 4
39899: PUSH
39900: DOUBLE
39901: LD_INT 1
39903: DEC
39904: ST_TO_ADDR
39905: LD_VAR 0 1
39909: PUSH
39910: FOR_TO
39911: IFFALSE 39949
// if array1 [ i ] <> array2 [ i ] then
39913: LD_VAR 0 1
39917: PUSH
39918: LD_VAR 0 4
39922: ARRAY
39923: PUSH
39924: LD_VAR 0 2
39928: PUSH
39929: LD_VAR 0 4
39933: ARRAY
39934: NONEQUAL
39935: IFFALSE 39947
// begin result := false ;
39937: LD_ADDR_VAR 0 3
39941: PUSH
39942: LD_INT 0
39944: ST_TO_ADDR
// break ;
39945: GO 39949
// end ;
39947: GO 39910
39949: POP
39950: POP
// end else
39951: GO 39961
// result := false ;
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_INT 0
39960: ST_TO_ADDR
// end ;
39961: LD_VAR 0 3
39965: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39966: LD_INT 0
39968: PPUSH
39969: PPUSH
// if not array1 or not array2 then
39970: LD_VAR 0 1
39974: NOT
39975: PUSH
39976: LD_VAR 0 2
39980: NOT
39981: OR
39982: IFFALSE 39986
// exit ;
39984: GO 40050
// result := true ;
39986: LD_ADDR_VAR 0 3
39990: PUSH
39991: LD_INT 1
39993: ST_TO_ADDR
// for i = 1 to array1 do
39994: LD_ADDR_VAR 0 4
39998: PUSH
39999: DOUBLE
40000: LD_INT 1
40002: DEC
40003: ST_TO_ADDR
40004: LD_VAR 0 1
40008: PUSH
40009: FOR_TO
40010: IFFALSE 40048
// if array1 [ i ] <> array2 [ i ] then
40012: LD_VAR 0 1
40016: PUSH
40017: LD_VAR 0 4
40021: ARRAY
40022: PUSH
40023: LD_VAR 0 2
40027: PUSH
40028: LD_VAR 0 4
40032: ARRAY
40033: NONEQUAL
40034: IFFALSE 40046
// begin result := false ;
40036: LD_ADDR_VAR 0 3
40040: PUSH
40041: LD_INT 0
40043: ST_TO_ADDR
// break ;
40044: GO 40048
// end ;
40046: GO 40009
40048: POP
40049: POP
// end ;
40050: LD_VAR 0 3
40054: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40055: LD_INT 0
40057: PPUSH
40058: PPUSH
40059: PPUSH
// pom := GetBase ( fac ) ;
40060: LD_ADDR_VAR 0 5
40064: PUSH
40065: LD_VAR 0 1
40069: PPUSH
40070: CALL_OW 274
40074: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40075: LD_ADDR_VAR 0 4
40079: PUSH
40080: LD_VAR 0 2
40084: PUSH
40085: LD_INT 1
40087: ARRAY
40088: PPUSH
40089: LD_VAR 0 2
40093: PUSH
40094: LD_INT 2
40096: ARRAY
40097: PPUSH
40098: LD_VAR 0 2
40102: PUSH
40103: LD_INT 3
40105: ARRAY
40106: PPUSH
40107: LD_VAR 0 2
40111: PUSH
40112: LD_INT 4
40114: ARRAY
40115: PPUSH
40116: CALL_OW 449
40120: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40121: LD_ADDR_VAR 0 3
40125: PUSH
40126: LD_VAR 0 5
40130: PPUSH
40131: LD_INT 1
40133: PPUSH
40134: CALL_OW 275
40138: PUSH
40139: LD_VAR 0 4
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: GREATEREQUAL
40148: PUSH
40149: LD_VAR 0 5
40153: PPUSH
40154: LD_INT 2
40156: PPUSH
40157: CALL_OW 275
40161: PUSH
40162: LD_VAR 0 4
40166: PUSH
40167: LD_INT 2
40169: ARRAY
40170: GREATEREQUAL
40171: AND
40172: PUSH
40173: LD_VAR 0 5
40177: PPUSH
40178: LD_INT 3
40180: PPUSH
40181: CALL_OW 275
40185: PUSH
40186: LD_VAR 0 4
40190: PUSH
40191: LD_INT 3
40193: ARRAY
40194: GREATEREQUAL
40195: AND
40196: ST_TO_ADDR
// end ;
40197: LD_VAR 0 3
40201: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40202: LD_INT 0
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
// pom := GetBase ( building ) ;
40208: LD_ADDR_VAR 0 3
40212: PUSH
40213: LD_VAR 0 1
40217: PPUSH
40218: CALL_OW 274
40222: ST_TO_ADDR
// if not pom then
40223: LD_VAR 0 3
40227: NOT
40228: IFFALSE 40232
// exit ;
40230: GO 40402
// btype := GetBType ( building ) ;
40232: LD_ADDR_VAR 0 5
40236: PUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 266
40246: ST_TO_ADDR
// if btype = b_armoury then
40247: LD_VAR 0 5
40251: PUSH
40252: LD_INT 4
40254: EQUAL
40255: IFFALSE 40265
// btype := b_barracks ;
40257: LD_ADDR_VAR 0 5
40261: PUSH
40262: LD_INT 5
40264: ST_TO_ADDR
// if btype = b_depot then
40265: LD_VAR 0 5
40269: PUSH
40270: LD_INT 0
40272: EQUAL
40273: IFFALSE 40283
// btype := b_warehouse ;
40275: LD_ADDR_VAR 0 5
40279: PUSH
40280: LD_INT 1
40282: ST_TO_ADDR
// if btype = b_workshop then
40283: LD_VAR 0 5
40287: PUSH
40288: LD_INT 2
40290: EQUAL
40291: IFFALSE 40301
// btype := b_factory ;
40293: LD_ADDR_VAR 0 5
40297: PUSH
40298: LD_INT 3
40300: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40301: LD_ADDR_VAR 0 4
40305: PUSH
40306: LD_VAR 0 5
40310: PPUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 248
40320: PPUSH
40321: CALL_OW 450
40325: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40326: LD_ADDR_VAR 0 2
40330: PUSH
40331: LD_VAR 0 3
40335: PPUSH
40336: LD_INT 1
40338: PPUSH
40339: CALL_OW 275
40343: PUSH
40344: LD_VAR 0 4
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: GREATEREQUAL
40353: PUSH
40354: LD_VAR 0 3
40358: PPUSH
40359: LD_INT 2
40361: PPUSH
40362: CALL_OW 275
40366: PUSH
40367: LD_VAR 0 4
40371: PUSH
40372: LD_INT 2
40374: ARRAY
40375: GREATEREQUAL
40376: AND
40377: PUSH
40378: LD_VAR 0 3
40382: PPUSH
40383: LD_INT 3
40385: PPUSH
40386: CALL_OW 275
40390: PUSH
40391: LD_VAR 0 4
40395: PUSH
40396: LD_INT 3
40398: ARRAY
40399: GREATEREQUAL
40400: AND
40401: ST_TO_ADDR
// end ;
40402: LD_VAR 0 2
40406: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
40411: PPUSH
// pom := GetBase ( building ) ;
40412: LD_ADDR_VAR 0 4
40416: PUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: CALL_OW 274
40426: ST_TO_ADDR
// if not pom then
40427: LD_VAR 0 4
40431: NOT
40432: IFFALSE 40436
// exit ;
40434: GO 40537
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40436: LD_ADDR_VAR 0 5
40440: PUSH
40441: LD_VAR 0 2
40445: PPUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 248
40455: PPUSH
40456: CALL_OW 450
40460: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40461: LD_ADDR_VAR 0 3
40465: PUSH
40466: LD_VAR 0 4
40470: PPUSH
40471: LD_INT 1
40473: PPUSH
40474: CALL_OW 275
40478: PUSH
40479: LD_VAR 0 5
40483: PUSH
40484: LD_INT 1
40486: ARRAY
40487: GREATEREQUAL
40488: PUSH
40489: LD_VAR 0 4
40493: PPUSH
40494: LD_INT 2
40496: PPUSH
40497: CALL_OW 275
40501: PUSH
40502: LD_VAR 0 5
40506: PUSH
40507: LD_INT 2
40509: ARRAY
40510: GREATEREQUAL
40511: AND
40512: PUSH
40513: LD_VAR 0 4
40517: PPUSH
40518: LD_INT 3
40520: PPUSH
40521: CALL_OW 275
40525: PUSH
40526: LD_VAR 0 5
40530: PUSH
40531: LD_INT 3
40533: ARRAY
40534: GREATEREQUAL
40535: AND
40536: ST_TO_ADDR
// end ;
40537: LD_VAR 0 3
40541: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40542: LD_INT 0
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
// result := false ;
40555: LD_ADDR_VAR 0 8
40559: PUSH
40560: LD_INT 0
40562: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40563: LD_VAR 0 5
40567: NOT
40568: PUSH
40569: LD_VAR 0 1
40573: NOT
40574: OR
40575: PUSH
40576: LD_VAR 0 2
40580: NOT
40581: OR
40582: PUSH
40583: LD_VAR 0 3
40587: NOT
40588: OR
40589: IFFALSE 40593
// exit ;
40591: GO 41407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40593: LD_ADDR_VAR 0 14
40597: PUSH
40598: LD_VAR 0 1
40602: PPUSH
40603: LD_VAR 0 2
40607: PPUSH
40608: LD_VAR 0 3
40612: PPUSH
40613: LD_VAR 0 4
40617: PPUSH
40618: LD_VAR 0 5
40622: PUSH
40623: LD_INT 1
40625: ARRAY
40626: PPUSH
40627: CALL_OW 248
40631: PPUSH
40632: LD_INT 0
40634: PPUSH
40635: CALL 42640 0 6
40639: ST_TO_ADDR
// if not hexes then
40640: LD_VAR 0 14
40644: NOT
40645: IFFALSE 40649
// exit ;
40647: GO 41407
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40649: LD_ADDR_VAR 0 17
40653: PUSH
40654: LD_VAR 0 5
40658: PPUSH
40659: LD_INT 22
40661: PUSH
40662: LD_VAR 0 13
40666: PPUSH
40667: CALL_OW 255
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 30
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 30
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PPUSH
40708: CALL_OW 72
40712: ST_TO_ADDR
// for i = 1 to hexes do
40713: LD_ADDR_VAR 0 9
40717: PUSH
40718: DOUBLE
40719: LD_INT 1
40721: DEC
40722: ST_TO_ADDR
40723: LD_VAR 0 14
40727: PUSH
40728: FOR_TO
40729: IFFALSE 41405
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40731: LD_ADDR_VAR 0 13
40735: PUSH
40736: LD_VAR 0 14
40740: PUSH
40741: LD_VAR 0 9
40745: ARRAY
40746: PUSH
40747: LD_INT 1
40749: ARRAY
40750: PPUSH
40751: LD_VAR 0 14
40755: PUSH
40756: LD_VAR 0 9
40760: ARRAY
40761: PUSH
40762: LD_INT 2
40764: ARRAY
40765: PPUSH
40766: CALL_OW 428
40770: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40771: LD_VAR 0 14
40775: PUSH
40776: LD_VAR 0 9
40780: ARRAY
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: PPUSH
40786: LD_VAR 0 14
40790: PUSH
40791: LD_VAR 0 9
40795: ARRAY
40796: PUSH
40797: LD_INT 2
40799: ARRAY
40800: PPUSH
40801: CALL_OW 351
40805: PUSH
40806: LD_VAR 0 14
40810: PUSH
40811: LD_VAR 0 9
40815: ARRAY
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: PPUSH
40821: LD_VAR 0 14
40825: PUSH
40826: LD_VAR 0 9
40830: ARRAY
40831: PUSH
40832: LD_INT 2
40834: ARRAY
40835: PPUSH
40836: CALL_OW 488
40840: NOT
40841: OR
40842: PUSH
40843: LD_VAR 0 13
40847: PPUSH
40848: CALL_OW 247
40852: PUSH
40853: LD_INT 3
40855: EQUAL
40856: OR
40857: IFFALSE 40863
// exit ;
40859: POP
40860: POP
40861: GO 41407
// if not tmp then
40863: LD_VAR 0 13
40867: NOT
40868: IFFALSE 40872
// continue ;
40870: GO 40728
// result := true ;
40872: LD_ADDR_VAR 0 8
40876: PUSH
40877: LD_INT 1
40879: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40880: LD_VAR 0 6
40884: PUSH
40885: LD_VAR 0 13
40889: PPUSH
40890: CALL_OW 247
40894: PUSH
40895: LD_INT 2
40897: EQUAL
40898: AND
40899: PUSH
40900: LD_VAR 0 13
40904: PPUSH
40905: CALL_OW 263
40909: PUSH
40910: LD_INT 1
40912: EQUAL
40913: AND
40914: IFFALSE 41078
// begin if IsDrivenBy ( tmp ) then
40916: LD_VAR 0 13
40920: PPUSH
40921: CALL_OW 311
40925: IFFALSE 40929
// continue ;
40927: GO 40728
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40929: LD_VAR 0 6
40933: PPUSH
40934: LD_INT 3
40936: PUSH
40937: LD_INT 60
40939: PUSH
40940: EMPTY
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: LD_INT 55
40952: PUSH
40953: EMPTY
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PPUSH
40964: CALL_OW 72
40968: IFFALSE 41076
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40970: LD_ADDR_VAR 0 18
40974: PUSH
40975: LD_VAR 0 6
40979: PPUSH
40980: LD_INT 3
40982: PUSH
40983: LD_INT 60
40985: PUSH
40986: EMPTY
40987: LIST
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: LD_INT 55
40998: PUSH
40999: EMPTY
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PPUSH
41010: CALL_OW 72
41014: PUSH
41015: LD_INT 1
41017: ARRAY
41018: ST_TO_ADDR
// if IsInUnit ( driver ) then
41019: LD_VAR 0 18
41023: PPUSH
41024: CALL_OW 310
41028: IFFALSE 41039
// ComExit ( driver ) ;
41030: LD_VAR 0 18
41034: PPUSH
41035: CALL 66328 0 1
// AddComEnterUnit ( driver , tmp ) ;
41039: LD_VAR 0 18
41043: PPUSH
41044: LD_VAR 0 13
41048: PPUSH
41049: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41053: LD_VAR 0 18
41057: PPUSH
41058: LD_VAR 0 7
41062: PPUSH
41063: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41067: LD_VAR 0 18
41071: PPUSH
41072: CALL_OW 181
// end ; continue ;
41076: GO 40728
// end ; if not cleaners or not tmp in cleaners then
41078: LD_VAR 0 6
41082: NOT
41083: PUSH
41084: LD_VAR 0 13
41088: PUSH
41089: LD_VAR 0 6
41093: IN
41094: NOT
41095: OR
41096: IFFALSE 41403
// begin if dep then
41098: LD_VAR 0 17
41102: IFFALSE 41238
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41104: LD_ADDR_VAR 0 16
41108: PUSH
41109: LD_VAR 0 17
41113: PUSH
41114: LD_INT 1
41116: ARRAY
41117: PPUSH
41118: CALL_OW 250
41122: PPUSH
41123: LD_VAR 0 17
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PPUSH
41132: CALL_OW 254
41136: PPUSH
41137: LD_INT 5
41139: PPUSH
41140: CALL_OW 272
41144: PUSH
41145: LD_VAR 0 17
41149: PUSH
41150: LD_INT 1
41152: ARRAY
41153: PPUSH
41154: CALL_OW 251
41158: PPUSH
41159: LD_VAR 0 17
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: PPUSH
41168: CALL_OW 254
41172: PPUSH
41173: LD_INT 5
41175: PPUSH
41176: CALL_OW 273
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41185: LD_VAR 0 16
41189: PUSH
41190: LD_INT 1
41192: ARRAY
41193: PPUSH
41194: LD_VAR 0 16
41198: PUSH
41199: LD_INT 2
41201: ARRAY
41202: PPUSH
41203: CALL_OW 488
41207: IFFALSE 41238
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41209: LD_VAR 0 13
41213: PPUSH
41214: LD_VAR 0 16
41218: PUSH
41219: LD_INT 1
41221: ARRAY
41222: PPUSH
41223: LD_VAR 0 16
41227: PUSH
41228: LD_INT 2
41230: ARRAY
41231: PPUSH
41232: CALL_OW 111
// continue ;
41236: GO 40728
// end ; end ; r := GetDir ( tmp ) ;
41238: LD_ADDR_VAR 0 15
41242: PUSH
41243: LD_VAR 0 13
41247: PPUSH
41248: CALL_OW 254
41252: ST_TO_ADDR
// if r = 5 then
41253: LD_VAR 0 15
41257: PUSH
41258: LD_INT 5
41260: EQUAL
41261: IFFALSE 41271
// r := 0 ;
41263: LD_ADDR_VAR 0 15
41267: PUSH
41268: LD_INT 0
41270: ST_TO_ADDR
// for j = r to 5 do
41271: LD_ADDR_VAR 0 10
41275: PUSH
41276: DOUBLE
41277: LD_VAR 0 15
41281: DEC
41282: ST_TO_ADDR
41283: LD_INT 5
41285: PUSH
41286: FOR_TO
41287: IFFALSE 41401
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41289: LD_ADDR_VAR 0 11
41293: PUSH
41294: LD_VAR 0 13
41298: PPUSH
41299: CALL_OW 250
41303: PPUSH
41304: LD_VAR 0 10
41308: PPUSH
41309: LD_INT 2
41311: PPUSH
41312: CALL_OW 272
41316: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41317: LD_ADDR_VAR 0 12
41321: PUSH
41322: LD_VAR 0 13
41326: PPUSH
41327: CALL_OW 251
41331: PPUSH
41332: LD_VAR 0 10
41336: PPUSH
41337: LD_INT 2
41339: PPUSH
41340: CALL_OW 273
41344: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41345: LD_VAR 0 11
41349: PPUSH
41350: LD_VAR 0 12
41354: PPUSH
41355: CALL_OW 488
41359: PUSH
41360: LD_VAR 0 11
41364: PPUSH
41365: LD_VAR 0 12
41369: PPUSH
41370: CALL_OW 428
41374: NOT
41375: AND
41376: IFFALSE 41399
// begin ComMoveXY ( tmp , _x , _y ) ;
41378: LD_VAR 0 13
41382: PPUSH
41383: LD_VAR 0 11
41387: PPUSH
41388: LD_VAR 0 12
41392: PPUSH
41393: CALL_OW 111
// break ;
41397: GO 41401
// end ; end ;
41399: GO 41286
41401: POP
41402: POP
// end ; end ;
41403: GO 40728
41405: POP
41406: POP
// end ;
41407: LD_VAR 0 8
41411: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41412: LD_INT 0
41414: PPUSH
// result := true ;
41415: LD_ADDR_VAR 0 3
41419: PUSH
41420: LD_INT 1
41422: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41423: LD_VAR 0 2
41427: PUSH
41428: LD_INT 24
41430: DOUBLE
41431: EQUAL
41432: IFTRUE 41442
41434: LD_INT 33
41436: DOUBLE
41437: EQUAL
41438: IFTRUE 41442
41440: GO 41467
41442: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_INT 32
41450: PPUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 321
41460: PUSH
41461: LD_INT 2
41463: EQUAL
41464: ST_TO_ADDR
41465: GO 41783
41467: LD_INT 20
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41475
41473: GO 41500
41475: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_INT 6
41483: PPUSH
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 321
41493: PUSH
41494: LD_INT 2
41496: EQUAL
41497: ST_TO_ADDR
41498: GO 41783
41500: LD_INT 22
41502: DOUBLE
41503: EQUAL
41504: IFTRUE 41514
41506: LD_INT 36
41508: DOUBLE
41509: EQUAL
41510: IFTRUE 41514
41512: GO 41539
41514: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41515: LD_ADDR_VAR 0 3
41519: PUSH
41520: LD_INT 15
41522: PPUSH
41523: LD_VAR 0 1
41527: PPUSH
41528: CALL_OW 321
41532: PUSH
41533: LD_INT 2
41535: EQUAL
41536: ST_TO_ADDR
41537: GO 41783
41539: LD_INT 30
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41547
41545: GO 41572
41547: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41548: LD_ADDR_VAR 0 3
41552: PUSH
41553: LD_INT 20
41555: PPUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: CALL_OW 321
41565: PUSH
41566: LD_INT 2
41568: EQUAL
41569: ST_TO_ADDR
41570: GO 41783
41572: LD_INT 28
41574: DOUBLE
41575: EQUAL
41576: IFTRUE 41586
41578: LD_INT 21
41580: DOUBLE
41581: EQUAL
41582: IFTRUE 41586
41584: GO 41611
41586: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41587: LD_ADDR_VAR 0 3
41591: PUSH
41592: LD_INT 21
41594: PPUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 321
41604: PUSH
41605: LD_INT 2
41607: EQUAL
41608: ST_TO_ADDR
41609: GO 41783
41611: LD_INT 16
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41619
41617: GO 41644
41619: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 84
41627: PPUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 321
41637: PUSH
41638: LD_INT 2
41640: EQUAL
41641: ST_TO_ADDR
41642: GO 41783
41644: LD_INT 19
41646: DOUBLE
41647: EQUAL
41648: IFTRUE 41658
41650: LD_INT 23
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41658
41656: GO 41683
41658: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41659: LD_ADDR_VAR 0 3
41663: PUSH
41664: LD_INT 83
41666: PPUSH
41667: LD_VAR 0 1
41671: PPUSH
41672: CALL_OW 321
41676: PUSH
41677: LD_INT 2
41679: EQUAL
41680: ST_TO_ADDR
41681: GO 41783
41683: LD_INT 17
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41691
41689: GO 41716
41691: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_INT 39
41699: PPUSH
41700: LD_VAR 0 1
41704: PPUSH
41705: CALL_OW 321
41709: PUSH
41710: LD_INT 2
41712: EQUAL
41713: ST_TO_ADDR
41714: GO 41783
41716: LD_INT 18
41718: DOUBLE
41719: EQUAL
41720: IFTRUE 41724
41722: GO 41749
41724: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41725: LD_ADDR_VAR 0 3
41729: PUSH
41730: LD_INT 40
41732: PPUSH
41733: LD_VAR 0 1
41737: PPUSH
41738: CALL_OW 321
41742: PUSH
41743: LD_INT 2
41745: EQUAL
41746: ST_TO_ADDR
41747: GO 41783
41749: LD_INT 27
41751: DOUBLE
41752: EQUAL
41753: IFTRUE 41757
41755: GO 41782
41757: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41758: LD_ADDR_VAR 0 3
41762: PUSH
41763: LD_INT 35
41765: PPUSH
41766: LD_VAR 0 1
41770: PPUSH
41771: CALL_OW 321
41775: PUSH
41776: LD_INT 2
41778: EQUAL
41779: ST_TO_ADDR
41780: GO 41783
41782: POP
// end ;
41783: LD_VAR 0 3
41787: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41788: LD_INT 0
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
41795: PPUSH
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
// result := false ;
41801: LD_ADDR_VAR 0 6
41805: PUSH
41806: LD_INT 0
41808: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41809: LD_VAR 0 1
41813: NOT
41814: PUSH
41815: LD_VAR 0 1
41819: PPUSH
41820: CALL_OW 266
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: IN
41835: NOT
41836: OR
41837: PUSH
41838: LD_VAR 0 2
41842: NOT
41843: OR
41844: PUSH
41845: LD_VAR 0 5
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: LD_INT 4
41864: PUSH
41865: LD_INT 5
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: IN
41876: NOT
41877: OR
41878: PUSH
41879: LD_VAR 0 3
41883: PPUSH
41884: LD_VAR 0 4
41888: PPUSH
41889: CALL_OW 488
41893: NOT
41894: OR
41895: IFFALSE 41899
// exit ;
41897: GO 42635
// side := GetSide ( depot ) ;
41899: LD_ADDR_VAR 0 9
41903: PUSH
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 255
41913: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41914: LD_VAR 0 9
41918: PPUSH
41919: LD_VAR 0 2
41923: PPUSH
41924: CALL 41412 0 2
41928: NOT
41929: IFFALSE 41933
// exit ;
41931: GO 42635
// pom := GetBase ( depot ) ;
41933: LD_ADDR_VAR 0 10
41937: PUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: CALL_OW 274
41947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41948: LD_ADDR_VAR 0 11
41952: PUSH
41953: LD_VAR 0 2
41957: PPUSH
41958: LD_VAR 0 1
41962: PPUSH
41963: CALL_OW 248
41967: PPUSH
41968: CALL_OW 450
41972: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41973: LD_VAR 0 10
41977: PPUSH
41978: LD_INT 1
41980: PPUSH
41981: CALL_OW 275
41985: PUSH
41986: LD_VAR 0 11
41990: PUSH
41991: LD_INT 1
41993: ARRAY
41994: GREATEREQUAL
41995: PUSH
41996: LD_VAR 0 10
42000: PPUSH
42001: LD_INT 2
42003: PPUSH
42004: CALL_OW 275
42008: PUSH
42009: LD_VAR 0 11
42013: PUSH
42014: LD_INT 2
42016: ARRAY
42017: GREATEREQUAL
42018: AND
42019: PUSH
42020: LD_VAR 0 10
42024: PPUSH
42025: LD_INT 3
42027: PPUSH
42028: CALL_OW 275
42032: PUSH
42033: LD_VAR 0 11
42037: PUSH
42038: LD_INT 3
42040: ARRAY
42041: GREATEREQUAL
42042: AND
42043: NOT
42044: IFFALSE 42048
// exit ;
42046: GO 42635
// if GetBType ( depot ) = b_depot then
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 266
42057: PUSH
42058: LD_INT 0
42060: EQUAL
42061: IFFALSE 42073
// dist := 28 else
42063: LD_ADDR_VAR 0 14
42067: PUSH
42068: LD_INT 28
42070: ST_TO_ADDR
42071: GO 42081
// dist := 36 ;
42073: LD_ADDR_VAR 0 14
42077: PUSH
42078: LD_INT 36
42080: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42081: LD_VAR 0 1
42085: PPUSH
42086: LD_VAR 0 3
42090: PPUSH
42091: LD_VAR 0 4
42095: PPUSH
42096: CALL_OW 297
42100: PUSH
42101: LD_VAR 0 14
42105: GREATER
42106: IFFALSE 42110
// exit ;
42108: GO 42635
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42110: LD_ADDR_VAR 0 12
42114: PUSH
42115: LD_VAR 0 2
42119: PPUSH
42120: LD_VAR 0 3
42124: PPUSH
42125: LD_VAR 0 4
42129: PPUSH
42130: LD_VAR 0 5
42134: PPUSH
42135: LD_VAR 0 1
42139: PPUSH
42140: CALL_OW 248
42144: PPUSH
42145: LD_INT 0
42147: PPUSH
42148: CALL 42640 0 6
42152: ST_TO_ADDR
// if not hexes then
42153: LD_VAR 0 12
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42635
// hex := GetHexInfo ( x , y ) ;
42162: LD_ADDR_VAR 0 15
42166: PUSH
42167: LD_VAR 0 3
42171: PPUSH
42172: LD_VAR 0 4
42176: PPUSH
42177: CALL_OW 546
42181: ST_TO_ADDR
// if hex [ 1 ] then
42182: LD_VAR 0 15
42186: PUSH
42187: LD_INT 1
42189: ARRAY
42190: IFFALSE 42194
// exit ;
42192: GO 42635
// height := hex [ 2 ] ;
42194: LD_ADDR_VAR 0 13
42198: PUSH
42199: LD_VAR 0 15
42203: PUSH
42204: LD_INT 2
42206: ARRAY
42207: ST_TO_ADDR
// for i = 1 to hexes do
42208: LD_ADDR_VAR 0 7
42212: PUSH
42213: DOUBLE
42214: LD_INT 1
42216: DEC
42217: ST_TO_ADDR
42218: LD_VAR 0 12
42222: PUSH
42223: FOR_TO
42224: IFFALSE 42554
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42226: LD_VAR 0 12
42230: PUSH
42231: LD_VAR 0 7
42235: ARRAY
42236: PUSH
42237: LD_INT 1
42239: ARRAY
42240: PPUSH
42241: LD_VAR 0 12
42245: PUSH
42246: LD_VAR 0 7
42250: ARRAY
42251: PUSH
42252: LD_INT 2
42254: ARRAY
42255: PPUSH
42256: CALL_OW 488
42260: NOT
42261: PUSH
42262: LD_VAR 0 12
42266: PUSH
42267: LD_VAR 0 7
42271: ARRAY
42272: PUSH
42273: LD_INT 1
42275: ARRAY
42276: PPUSH
42277: LD_VAR 0 12
42281: PUSH
42282: LD_VAR 0 7
42286: ARRAY
42287: PUSH
42288: LD_INT 2
42290: ARRAY
42291: PPUSH
42292: CALL_OW 428
42296: PUSH
42297: LD_INT 0
42299: GREATER
42300: OR
42301: PUSH
42302: LD_VAR 0 12
42306: PUSH
42307: LD_VAR 0 7
42311: ARRAY
42312: PUSH
42313: LD_INT 1
42315: ARRAY
42316: PPUSH
42317: LD_VAR 0 12
42321: PUSH
42322: LD_VAR 0 7
42326: ARRAY
42327: PUSH
42328: LD_INT 2
42330: ARRAY
42331: PPUSH
42332: CALL_OW 351
42336: OR
42337: IFFALSE 42343
// exit ;
42339: POP
42340: POP
42341: GO 42635
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42343: LD_ADDR_VAR 0 8
42347: PUSH
42348: LD_VAR 0 12
42352: PUSH
42353: LD_VAR 0 7
42357: ARRAY
42358: PUSH
42359: LD_INT 1
42361: ARRAY
42362: PPUSH
42363: LD_VAR 0 12
42367: PUSH
42368: LD_VAR 0 7
42372: ARRAY
42373: PUSH
42374: LD_INT 2
42376: ARRAY
42377: PPUSH
42378: CALL_OW 546
42382: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42383: LD_VAR 0 8
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: PUSH
42392: LD_VAR 0 8
42396: PUSH
42397: LD_INT 2
42399: ARRAY
42400: PUSH
42401: LD_VAR 0 13
42405: PUSH
42406: LD_INT 2
42408: PLUS
42409: GREATER
42410: OR
42411: PUSH
42412: LD_VAR 0 8
42416: PUSH
42417: LD_INT 2
42419: ARRAY
42420: PUSH
42421: LD_VAR 0 13
42425: PUSH
42426: LD_INT 2
42428: MINUS
42429: LESS
42430: OR
42431: PUSH
42432: LD_VAR 0 8
42436: PUSH
42437: LD_INT 3
42439: ARRAY
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 8
42446: PUSH
42447: LD_INT 9
42449: PUSH
42450: LD_INT 10
42452: PUSH
42453: LD_INT 11
42455: PUSH
42456: LD_INT 12
42458: PUSH
42459: LD_INT 13
42461: PUSH
42462: LD_INT 16
42464: PUSH
42465: LD_INT 17
42467: PUSH
42468: LD_INT 18
42470: PUSH
42471: LD_INT 19
42473: PUSH
42474: LD_INT 20
42476: PUSH
42477: LD_INT 21
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: IN
42495: NOT
42496: OR
42497: PUSH
42498: LD_VAR 0 8
42502: PUSH
42503: LD_INT 5
42505: ARRAY
42506: NOT
42507: OR
42508: PUSH
42509: LD_VAR 0 8
42513: PUSH
42514: LD_INT 6
42516: ARRAY
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 7
42526: PUSH
42527: LD_INT 9
42529: PUSH
42530: LD_INT 10
42532: PUSH
42533: LD_INT 11
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: IN
42544: NOT
42545: OR
42546: IFFALSE 42552
// exit ;
42548: POP
42549: POP
42550: GO 42635
// end ;
42552: GO 42223
42554: POP
42555: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42556: LD_VAR 0 9
42560: PPUSH
42561: LD_VAR 0 3
42565: PPUSH
42566: LD_VAR 0 4
42570: PPUSH
42571: LD_INT 20
42573: PPUSH
42574: CALL 34587 0 4
42578: PUSH
42579: LD_INT 4
42581: ARRAY
42582: IFFALSE 42586
// exit ;
42584: GO 42635
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42586: LD_VAR 0 2
42590: PUSH
42591: LD_INT 29
42593: PUSH
42594: LD_INT 30
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: IN
42601: PUSH
42602: LD_VAR 0 3
42606: PPUSH
42607: LD_VAR 0 4
42611: PPUSH
42612: LD_VAR 0 9
42616: PPUSH
42617: CALL_OW 440
42621: NOT
42622: AND
42623: IFFALSE 42627
// exit ;
42625: GO 42635
// result := true ;
42627: LD_ADDR_VAR 0 6
42631: PUSH
42632: LD_INT 1
42634: ST_TO_ADDR
// end ;
42635: LD_VAR 0 6
42639: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42640: LD_INT 0
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
42655: PPUSH
42656: PPUSH
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
// result = [ ] ;
42700: LD_ADDR_VAR 0 7
42704: PUSH
42705: EMPTY
42706: ST_TO_ADDR
// temp_list = [ ] ;
42707: LD_ADDR_VAR 0 9
42711: PUSH
42712: EMPTY
42713: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42714: LD_VAR 0 4
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: LD_INT 3
42730: PUSH
42731: LD_INT 4
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: IN
42745: NOT
42746: PUSH
42747: LD_VAR 0 1
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: IN
42762: PUSH
42763: LD_VAR 0 5
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: IN
42782: NOT
42783: AND
42784: OR
42785: IFFALSE 42789
// exit ;
42787: GO 61180
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42789: LD_VAR 0 1
42793: PUSH
42794: LD_INT 6
42796: PUSH
42797: LD_INT 7
42799: PUSH
42800: LD_INT 8
42802: PUSH
42803: LD_INT 13
42805: PUSH
42806: LD_INT 12
42808: PUSH
42809: LD_INT 15
42811: PUSH
42812: LD_INT 11
42814: PUSH
42815: LD_INT 14
42817: PUSH
42818: LD_INT 10
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: IN
42832: IFFALSE 42842
// btype = b_lab ;
42834: LD_ADDR_VAR 0 1
42838: PUSH
42839: LD_INT 6
42841: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42842: LD_VAR 0 6
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: IN
42861: NOT
42862: PUSH
42863: LD_VAR 0 1
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 6
42882: PUSH
42883: LD_INT 36
42885: PUSH
42886: LD_INT 4
42888: PUSH
42889: LD_INT 5
42891: PUSH
42892: LD_INT 31
42894: PUSH
42895: LD_INT 32
42897: PUSH
42898: LD_INT 33
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: IN
42914: NOT
42915: PUSH
42916: LD_VAR 0 6
42920: PUSH
42921: LD_INT 1
42923: EQUAL
42924: AND
42925: OR
42926: PUSH
42927: LD_VAR 0 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: IN
42942: NOT
42943: PUSH
42944: LD_VAR 0 6
42948: PUSH
42949: LD_INT 2
42951: EQUAL
42952: AND
42953: OR
42954: IFFALSE 42964
// mode = 0 ;
42956: LD_ADDR_VAR 0 6
42960: PUSH
42961: LD_INT 0
42963: ST_TO_ADDR
// case mode of 0 :
42964: LD_VAR 0 6
42968: PUSH
42969: LD_INT 0
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 42977
42975: GO 54430
42977: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42978: LD_ADDR_VAR 0 11
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43171: LD_ADDR_VAR 0 12
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43367: LD_ADDR_VAR 0 13
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 3
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: NEG
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43566: LD_ADDR_VAR 0 14
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 3
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43762: LD_ADDR_VAR 0 15
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43955: LD_ADDR_VAR 0 16
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 3
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44148: LD_ADDR_VAR 0 17
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44378: LD_ADDR_VAR 0 18
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44608: LD_ADDR_VAR 0 19
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 2
44784: NEG
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44838: LD_ADDR_VAR 0 20
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45068: LD_ADDR_VAR 0 21
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45298: LD_ADDR_VAR 0 22
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45528: LD_ADDR_VAR 0 23
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 3
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45808: LD_ADDR_VAR 0 24
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46084: LD_ADDR_VAR 0 25
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46358: LD_ADDR_VAR 0 26
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46634: LD_ADDR_VAR 0 27
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46914: LD_ADDR_VAR 0 28
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47196: LD_ADDR_VAR 0 29
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47475: LD_ADDR_VAR 0 30
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 3
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 3
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47753: LD_ADDR_VAR 0 31
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 3
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48031: LD_ADDR_VAR 0 32
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48309: LD_ADDR_VAR 0 33
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48588: LD_ADDR_VAR 0 34
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48868: LD_ADDR_VAR 0 35
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48980: LD_ADDR_VAR 0 36
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49092: LD_ADDR_VAR 0 37
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49204: LD_ADDR_VAR 0 38
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49316: LD_ADDR_VAR 0 39
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49428: LD_ADDR_VAR 0 40
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49540: LD_ADDR_VAR 0 41
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49890: LD_ADDR_VAR 0 42
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 3
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50240: LD_ADDR_VAR 0 43
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50588: LD_ADDR_VAR 0 44
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50938: LD_ADDR_VAR 0 45
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51288: LD_ADDR_VAR 0 46
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 3
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51636: LD_ADDR_VAR 0 47
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51787: LD_ADDR_VAR 0 48
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51934: LD_ADDR_VAR 0 49
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52078: LD_ADDR_VAR 0 50
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52222: LD_ADDR_VAR 0 51
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52369: LD_ADDR_VAR 0 52
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52520: LD_ADDR_VAR 0 53
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52750: LD_ADDR_VAR 0 54
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52980: LD_ADDR_VAR 0 55
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53210: LD_ADDR_VAR 0 56
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53440: LD_ADDR_VAR 0 57
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53670: LD_ADDR_VAR 0 58
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 59
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53988: LD_ADDR_VAR 0 60
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54076: LD_ADDR_VAR 0 61
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54164: LD_ADDR_VAR 0 62
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54252: LD_ADDR_VAR 0 63
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54340: LD_ADDR_VAR 0 64
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// end ; 1 :
54428: GO 60325
54430: LD_INT 1
54432: DOUBLE
54433: EQUAL
54434: IFTRUE 54438
54436: GO 57061
54438: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54439: LD_ADDR_VAR 0 11
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: LIST
54482: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54483: LD_ADDR_VAR 0 12
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54524: LD_ADDR_VAR 0 13
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54564: LD_ADDR_VAR 0 14
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54605: LD_ADDR_VAR 0 15
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54649: LD_ADDR_VAR 0 16
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54695: LD_ADDR_VAR 0 17
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: LIST
54738: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54739: LD_ADDR_VAR 0 18
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54780: LD_ADDR_VAR 0 19
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54820: LD_ADDR_VAR 0 20
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54861: LD_ADDR_VAR 0 21
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54905: LD_ADDR_VAR 0 22
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54951: LD_ADDR_VAR 0 23
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 4
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54995: LD_ADDR_VAR 0 24
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55036: LD_ADDR_VAR 0 25
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 4
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: LD_INT 4
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55076: LD_ADDR_VAR 0 26
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 4
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55117: LD_ADDR_VAR 0 27
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 4
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55161: LD_ADDR_VAR 0 28
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 4
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: LIST
55206: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55207: LD_ADDR_VAR 0 29
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 4
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 4
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 3
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 5
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 5
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 4
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 6
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 6
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 5
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55362: LD_ADDR_VAR 0 30
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 4
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 5
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 5
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 5
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 6
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 6
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55505: LD_ADDR_VAR 0 31
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: LD_INT 4
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 5
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 5
55582: PUSH
55583: LD_INT 5
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 4
55592: PUSH
55593: LD_INT 5
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 6
55602: PUSH
55603: LD_INT 5
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 6
55612: PUSH
55613: LD_INT 6
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 5
55622: PUSH
55623: LD_INT 6
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55644: LD_ADDR_VAR 0 32
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 4
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 5
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 5
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 6
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 6
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 5
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55787: LD_ADDR_VAR 0 33
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: NEG
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 5
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 5
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 5
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 6
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 6
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55942: LD_ADDR_VAR 0 34
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 4
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: NEG
56010: PUSH
56011: LD_INT 4
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: NEG
56022: PUSH
56023: LD_INT 5
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: NEG
56034: PUSH
56035: LD_INT 4
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 5
56045: NEG
56046: PUSH
56047: LD_INT 5
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: NEG
56058: PUSH
56059: LD_INT 6
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 6
56069: NEG
56070: PUSH
56071: LD_INT 5
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 6
56081: NEG
56082: PUSH
56083: LD_INT 6
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56105: LD_ADDR_VAR 0 41
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56149: LD_ADDR_VAR 0 42
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56190: LD_ADDR_VAR 0 43
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56230: LD_ADDR_VAR 0 44
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56271: LD_ADDR_VAR 0 45
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56315: LD_ADDR_VAR 0 46
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56361: LD_ADDR_VAR 0 47
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 3
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56394: LD_ADDR_VAR 0 48
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56425: LD_ADDR_VAR 0 49
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56454: LD_ADDR_VAR 0 50
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56483: LD_ADDR_VAR 0 51
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56514: LD_ADDR_VAR 0 52
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56547: LD_ADDR_VAR 0 53
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56591: LD_ADDR_VAR 0 54
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56632: LD_ADDR_VAR 0 55
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56672: LD_ADDR_VAR 0 56
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56713: LD_ADDR_VAR 0 57
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56757: LD_ADDR_VAR 0 58
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56803: LD_ADDR_VAR 0 59
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56847: LD_ADDR_VAR 0 60
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56888: LD_ADDR_VAR 0 61
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56928: LD_ADDR_VAR 0 62
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56969: LD_ADDR_VAR 0 63
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57013: LD_ADDR_VAR 0 64
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// end ; 2 :
57059: GO 60325
57061: LD_INT 2
57063: DOUBLE
57064: EQUAL
57065: IFTRUE 57069
57067: GO 60324
57069: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57070: LD_ADDR_VAR 0 29
57074: PUSH
57075: LD_INT 4
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 4
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 5
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 5
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: PUSH
57171: LD_INT 3
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 4
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 4
57200: PUSH
57201: LD_INT 4
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: NEG
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 4
57455: NEG
57456: PUSH
57457: LD_INT 4
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 4
57467: NEG
57468: PUSH
57469: LD_INT 5
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 4
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 5
57515: NEG
57516: PUSH
57517: LD_INT 4
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 5
57527: NEG
57528: PUSH
57529: LD_INT 5
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 5
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 5
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57608: LD_ADDR_VAR 0 30
57612: PUSH
57613: LD_INT 4
57615: PUSH
57616: LD_INT 4
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 4
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 5
57635: PUSH
57636: LD_INT 4
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 5
57645: PUSH
57646: LD_INT 5
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: PUSH
57656: LD_INT 5
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: LD_INT 4
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 5
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: LD_INT 5
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 4
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 4
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 5
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 5
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 4
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 4
57972: NEG
57973: PUSH
57974: LD_INT 4
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 4
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 4
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 5
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 4
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 4
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 5
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 5
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58155: LD_ADDR_VAR 0 31
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 4
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 4
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 5
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 5
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 5
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 4
58311: NEG
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: LD_INT 4
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: NEG
58370: PUSH
58371: LD_INT 5
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: LD_INT 4
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: LD_INT 4
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 5
58429: NEG
58430: PUSH
58431: LD_INT 5
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 5
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 5
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 5
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 5
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58705: LD_ADDR_VAR 0 32
58709: PUSH
58710: LD_INT 4
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 4
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 4
58757: NEG
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 5
58768: NEG
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 5
58779: NEG
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 5
58791: NEG
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: LD_INT 4
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 4
58874: NEG
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 4
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: NEG
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 5
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 3
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 4
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 5
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 5
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 4
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 4
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 4
59117: PUSH
59118: LD_INT 4
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 4
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 5
59137: PUSH
59138: LD_INT 4
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 5
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 4
59157: PUSH
59158: LD_INT 5
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 4
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 5
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: PUSH
59198: LD_INT 5
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59252: LD_ADDR_VAR 0 33
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: LD_INT 5
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: LD_INT 4
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 4
59307: NEG
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: NEG
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 5
59331: NEG
59332: PUSH
59333: LD_INT 5
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 5
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 5
59355: NEG
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 3
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 4
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 4
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 4
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 5
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 5
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 5
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 4
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 4
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 5
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 5
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59790: LD_ADDR_VAR 0 34
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 5
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 4
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 4
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 5
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 5
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 4
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 4
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 4
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 4
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 4
60002: PUSH
60003: LD_INT 3
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 5
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 5
60022: PUSH
60023: LD_INT 5
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 4
60032: PUSH
60033: LD_INT 5
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: LD_INT 4
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 5
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: LD_INT 5
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 4
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 4
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 5
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 5
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 5
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 3
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// end ; end ;
60322: GO 60325
60324: POP
// case btype of b_depot , b_warehouse :
60325: LD_VAR 0 1
60329: PUSH
60330: LD_INT 0
60332: DOUBLE
60333: EQUAL
60334: IFTRUE 60344
60336: LD_INT 1
60338: DOUBLE
60339: EQUAL
60340: IFTRUE 60344
60342: GO 60545
60344: POP
// case nation of nation_american :
60345: LD_VAR 0 5
60349: PUSH
60350: LD_INT 1
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60358
60356: GO 60414
60358: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60359: LD_ADDR_VAR 0 9
60363: PUSH
60364: LD_VAR 0 11
60368: PUSH
60369: LD_VAR 0 12
60373: PUSH
60374: LD_VAR 0 13
60378: PUSH
60379: LD_VAR 0 14
60383: PUSH
60384: LD_VAR 0 15
60388: PUSH
60389: LD_VAR 0 16
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: PUSH
60402: LD_VAR 0 4
60406: PUSH
60407: LD_INT 1
60409: PLUS
60410: ARRAY
60411: ST_TO_ADDR
60412: GO 60543
60414: LD_INT 2
60416: DOUBLE
60417: EQUAL
60418: IFTRUE 60422
60420: GO 60478
60422: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60423: LD_ADDR_VAR 0 9
60427: PUSH
60428: LD_VAR 0 17
60432: PUSH
60433: LD_VAR 0 18
60437: PUSH
60438: LD_VAR 0 19
60442: PUSH
60443: LD_VAR 0 20
60447: PUSH
60448: LD_VAR 0 21
60452: PUSH
60453: LD_VAR 0 22
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: PUSH
60466: LD_VAR 0 4
60470: PUSH
60471: LD_INT 1
60473: PLUS
60474: ARRAY
60475: ST_TO_ADDR
60476: GO 60543
60478: LD_INT 3
60480: DOUBLE
60481: EQUAL
60482: IFTRUE 60486
60484: GO 60542
60486: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60487: LD_ADDR_VAR 0 9
60491: PUSH
60492: LD_VAR 0 23
60496: PUSH
60497: LD_VAR 0 24
60501: PUSH
60502: LD_VAR 0 25
60506: PUSH
60507: LD_VAR 0 26
60511: PUSH
60512: LD_VAR 0 27
60516: PUSH
60517: LD_VAR 0 28
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: PUSH
60530: LD_VAR 0 4
60534: PUSH
60535: LD_INT 1
60537: PLUS
60538: ARRAY
60539: ST_TO_ADDR
60540: GO 60543
60542: POP
60543: GO 61098
60545: LD_INT 2
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60559
60551: LD_INT 3
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60559
60557: GO 60615
60559: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60560: LD_ADDR_VAR 0 9
60564: PUSH
60565: LD_VAR 0 29
60569: PUSH
60570: LD_VAR 0 30
60574: PUSH
60575: LD_VAR 0 31
60579: PUSH
60580: LD_VAR 0 32
60584: PUSH
60585: LD_VAR 0 33
60589: PUSH
60590: LD_VAR 0 34
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: PUSH
60603: LD_VAR 0 4
60607: PUSH
60608: LD_INT 1
60610: PLUS
60611: ARRAY
60612: ST_TO_ADDR
60613: GO 61098
60615: LD_INT 16
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60677
60621: LD_INT 17
60623: DOUBLE
60624: EQUAL
60625: IFTRUE 60677
60627: LD_INT 18
60629: DOUBLE
60630: EQUAL
60631: IFTRUE 60677
60633: LD_INT 19
60635: DOUBLE
60636: EQUAL
60637: IFTRUE 60677
60639: LD_INT 22
60641: DOUBLE
60642: EQUAL
60643: IFTRUE 60677
60645: LD_INT 20
60647: DOUBLE
60648: EQUAL
60649: IFTRUE 60677
60651: LD_INT 21
60653: DOUBLE
60654: EQUAL
60655: IFTRUE 60677
60657: LD_INT 23
60659: DOUBLE
60660: EQUAL
60661: IFTRUE 60677
60663: LD_INT 24
60665: DOUBLE
60666: EQUAL
60667: IFTRUE 60677
60669: LD_INT 25
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60677
60675: GO 60733
60677: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60678: LD_ADDR_VAR 0 9
60682: PUSH
60683: LD_VAR 0 35
60687: PUSH
60688: LD_VAR 0 36
60692: PUSH
60693: LD_VAR 0 37
60697: PUSH
60698: LD_VAR 0 38
60702: PUSH
60703: LD_VAR 0 39
60707: PUSH
60708: LD_VAR 0 40
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: PUSH
60721: LD_VAR 0 4
60725: PUSH
60726: LD_INT 1
60728: PLUS
60729: ARRAY
60730: ST_TO_ADDR
60731: GO 61098
60733: LD_INT 6
60735: DOUBLE
60736: EQUAL
60737: IFTRUE 60789
60739: LD_INT 7
60741: DOUBLE
60742: EQUAL
60743: IFTRUE 60789
60745: LD_INT 8
60747: DOUBLE
60748: EQUAL
60749: IFTRUE 60789
60751: LD_INT 13
60753: DOUBLE
60754: EQUAL
60755: IFTRUE 60789
60757: LD_INT 12
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60789
60763: LD_INT 15
60765: DOUBLE
60766: EQUAL
60767: IFTRUE 60789
60769: LD_INT 11
60771: DOUBLE
60772: EQUAL
60773: IFTRUE 60789
60775: LD_INT 14
60777: DOUBLE
60778: EQUAL
60779: IFTRUE 60789
60781: LD_INT 10
60783: DOUBLE
60784: EQUAL
60785: IFTRUE 60789
60787: GO 60845
60789: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60790: LD_ADDR_VAR 0 9
60794: PUSH
60795: LD_VAR 0 41
60799: PUSH
60800: LD_VAR 0 42
60804: PUSH
60805: LD_VAR 0 43
60809: PUSH
60810: LD_VAR 0 44
60814: PUSH
60815: LD_VAR 0 45
60819: PUSH
60820: LD_VAR 0 46
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: PUSH
60833: LD_VAR 0 4
60837: PUSH
60838: LD_INT 1
60840: PLUS
60841: ARRAY
60842: ST_TO_ADDR
60843: GO 61098
60845: LD_INT 36
60847: DOUBLE
60848: EQUAL
60849: IFTRUE 60853
60851: GO 60909
60853: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60854: LD_ADDR_VAR 0 9
60858: PUSH
60859: LD_VAR 0 47
60863: PUSH
60864: LD_VAR 0 48
60868: PUSH
60869: LD_VAR 0 49
60873: PUSH
60874: LD_VAR 0 50
60878: PUSH
60879: LD_VAR 0 51
60883: PUSH
60884: LD_VAR 0 52
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: PUSH
60897: LD_VAR 0 4
60901: PUSH
60902: LD_INT 1
60904: PLUS
60905: ARRAY
60906: ST_TO_ADDR
60907: GO 61098
60909: LD_INT 4
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60935
60915: LD_INT 5
60917: DOUBLE
60918: EQUAL
60919: IFTRUE 60935
60921: LD_INT 34
60923: DOUBLE
60924: EQUAL
60925: IFTRUE 60935
60927: LD_INT 37
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60935
60933: GO 60991
60935: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60936: LD_ADDR_VAR 0 9
60940: PUSH
60941: LD_VAR 0 53
60945: PUSH
60946: LD_VAR 0 54
60950: PUSH
60951: LD_VAR 0 55
60955: PUSH
60956: LD_VAR 0 56
60960: PUSH
60961: LD_VAR 0 57
60965: PUSH
60966: LD_VAR 0 58
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: PUSH
60979: LD_VAR 0 4
60983: PUSH
60984: LD_INT 1
60986: PLUS
60987: ARRAY
60988: ST_TO_ADDR
60989: GO 61098
60991: LD_INT 31
60993: DOUBLE
60994: EQUAL
60995: IFTRUE 61041
60997: LD_INT 32
60999: DOUBLE
61000: EQUAL
61001: IFTRUE 61041
61003: LD_INT 33
61005: DOUBLE
61006: EQUAL
61007: IFTRUE 61041
61009: LD_INT 27
61011: DOUBLE
61012: EQUAL
61013: IFTRUE 61041
61015: LD_INT 26
61017: DOUBLE
61018: EQUAL
61019: IFTRUE 61041
61021: LD_INT 28
61023: DOUBLE
61024: EQUAL
61025: IFTRUE 61041
61027: LD_INT 29
61029: DOUBLE
61030: EQUAL
61031: IFTRUE 61041
61033: LD_INT 30
61035: DOUBLE
61036: EQUAL
61037: IFTRUE 61041
61039: GO 61097
61041: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61042: LD_ADDR_VAR 0 9
61046: PUSH
61047: LD_VAR 0 59
61051: PUSH
61052: LD_VAR 0 60
61056: PUSH
61057: LD_VAR 0 61
61061: PUSH
61062: LD_VAR 0 62
61066: PUSH
61067: LD_VAR 0 63
61071: PUSH
61072: LD_VAR 0 64
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: PUSH
61085: LD_VAR 0 4
61089: PUSH
61090: LD_INT 1
61092: PLUS
61093: ARRAY
61094: ST_TO_ADDR
61095: GO 61098
61097: POP
// temp_list2 = [ ] ;
61098: LD_ADDR_VAR 0 10
61102: PUSH
61103: EMPTY
61104: ST_TO_ADDR
// for i in temp_list do
61105: LD_ADDR_VAR 0 8
61109: PUSH
61110: LD_VAR 0 9
61114: PUSH
61115: FOR_IN
61116: IFFALSE 61168
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61118: LD_ADDR_VAR 0 10
61122: PUSH
61123: LD_VAR 0 10
61127: PUSH
61128: LD_VAR 0 8
61132: PUSH
61133: LD_INT 1
61135: ARRAY
61136: PUSH
61137: LD_VAR 0 2
61141: PLUS
61142: PUSH
61143: LD_VAR 0 8
61147: PUSH
61148: LD_INT 2
61150: ARRAY
61151: PUSH
61152: LD_VAR 0 3
61156: PLUS
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: ADD
61165: ST_TO_ADDR
61166: GO 61115
61168: POP
61169: POP
// result = temp_list2 ;
61170: LD_ADDR_VAR 0 7
61174: PUSH
61175: LD_VAR 0 10
61179: ST_TO_ADDR
// end ;
61180: LD_VAR 0 7
61184: RET
// export function EnemyInRange ( unit , dist ) ; begin
61185: LD_INT 0
61187: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61188: LD_ADDR_VAR 0 3
61192: PUSH
61193: LD_VAR 0 1
61197: PPUSH
61198: CALL_OW 255
61202: PPUSH
61203: LD_VAR 0 1
61207: PPUSH
61208: CALL_OW 250
61212: PPUSH
61213: LD_VAR 0 1
61217: PPUSH
61218: CALL_OW 251
61222: PPUSH
61223: LD_VAR 0 2
61227: PPUSH
61228: CALL 34587 0 4
61232: PUSH
61233: LD_INT 4
61235: ARRAY
61236: ST_TO_ADDR
// end ;
61237: LD_VAR 0 3
61241: RET
// export function PlayerSeeMe ( unit ) ; begin
61242: LD_INT 0
61244: PPUSH
// result := See ( your_side , unit ) ;
61245: LD_ADDR_VAR 0 2
61249: PUSH
61250: LD_OWVAR 2
61254: PPUSH
61255: LD_VAR 0 1
61259: PPUSH
61260: CALL_OW 292
61264: ST_TO_ADDR
// end ;
61265: LD_VAR 0 2
61269: RET
// export function ReverseDir ( unit ) ; begin
61270: LD_INT 0
61272: PPUSH
// if not unit then
61273: LD_VAR 0 1
61277: NOT
61278: IFFALSE 61282
// exit ;
61280: GO 61305
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61282: LD_ADDR_VAR 0 2
61286: PUSH
61287: LD_VAR 0 1
61291: PPUSH
61292: CALL_OW 254
61296: PUSH
61297: LD_INT 3
61299: PLUS
61300: PUSH
61301: LD_INT 6
61303: MOD
61304: ST_TO_ADDR
// end ;
61305: LD_VAR 0 2
61309: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61310: LD_INT 0
61312: PPUSH
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
61317: PPUSH
// if not unit or not hexes then
61318: LD_VAR 0 1
61322: NOT
61323: PUSH
61324: LD_VAR 0 2
61328: NOT
61329: OR
61330: IFFALSE 61334
// exit ;
61332: GO 61457
// dist := 9999 ;
61334: LD_ADDR_VAR 0 5
61338: PUSH
61339: LD_INT 9999
61341: ST_TO_ADDR
// for i = 1 to hexes do
61342: LD_ADDR_VAR 0 4
61346: PUSH
61347: DOUBLE
61348: LD_INT 1
61350: DEC
61351: ST_TO_ADDR
61352: LD_VAR 0 2
61356: PUSH
61357: FOR_TO
61358: IFFALSE 61445
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61360: LD_ADDR_VAR 0 6
61364: PUSH
61365: LD_VAR 0 1
61369: PPUSH
61370: LD_VAR 0 2
61374: PUSH
61375: LD_VAR 0 4
61379: ARRAY
61380: PUSH
61381: LD_INT 1
61383: ARRAY
61384: PPUSH
61385: LD_VAR 0 2
61389: PUSH
61390: LD_VAR 0 4
61394: ARRAY
61395: PUSH
61396: LD_INT 2
61398: ARRAY
61399: PPUSH
61400: CALL_OW 297
61404: ST_TO_ADDR
// if tdist < dist then
61405: LD_VAR 0 6
61409: PUSH
61410: LD_VAR 0 5
61414: LESS
61415: IFFALSE 61443
// begin hex := hexes [ i ] ;
61417: LD_ADDR_VAR 0 8
61421: PUSH
61422: LD_VAR 0 2
61426: PUSH
61427: LD_VAR 0 4
61431: ARRAY
61432: ST_TO_ADDR
// dist := tdist ;
61433: LD_ADDR_VAR 0 5
61437: PUSH
61438: LD_VAR 0 6
61442: ST_TO_ADDR
// end ; end ;
61443: GO 61357
61445: POP
61446: POP
// result := hex ;
61447: LD_ADDR_VAR 0 3
61451: PUSH
61452: LD_VAR 0 8
61456: ST_TO_ADDR
// end ;
61457: LD_VAR 0 3
61461: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61462: LD_INT 0
61464: PPUSH
61465: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61466: LD_VAR 0 1
61470: NOT
61471: PUSH
61472: LD_VAR 0 1
61476: PUSH
61477: LD_INT 21
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 23
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PPUSH
61501: CALL_OW 69
61505: IN
61506: NOT
61507: OR
61508: IFFALSE 61512
// exit ;
61510: GO 61559
// for i = 1 to 3 do
61512: LD_ADDR_VAR 0 3
61516: PUSH
61517: DOUBLE
61518: LD_INT 1
61520: DEC
61521: ST_TO_ADDR
61522: LD_INT 3
61524: PUSH
61525: FOR_TO
61526: IFFALSE 61557
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61528: LD_VAR 0 1
61532: PPUSH
61533: CALL_OW 250
61537: PPUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 251
61547: PPUSH
61548: LD_INT 1
61550: PPUSH
61551: CALL_OW 453
61555: GO 61525
61557: POP
61558: POP
// end ;
61559: LD_VAR 0 2
61563: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61564: LD_INT 0
61566: PPUSH
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
61571: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61572: LD_VAR 0 1
61576: NOT
61577: PUSH
61578: LD_VAR 0 2
61582: NOT
61583: OR
61584: PUSH
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 314
61594: OR
61595: IFFALSE 61599
// exit ;
61597: GO 62040
// x := GetX ( enemy_unit ) ;
61599: LD_ADDR_VAR 0 7
61603: PUSH
61604: LD_VAR 0 2
61608: PPUSH
61609: CALL_OW 250
61613: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61614: LD_ADDR_VAR 0 8
61618: PUSH
61619: LD_VAR 0 2
61623: PPUSH
61624: CALL_OW 251
61628: ST_TO_ADDR
// if not x or not y then
61629: LD_VAR 0 7
61633: NOT
61634: PUSH
61635: LD_VAR 0 8
61639: NOT
61640: OR
61641: IFFALSE 61645
// exit ;
61643: GO 62040
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61645: LD_ADDR_VAR 0 6
61649: PUSH
61650: LD_VAR 0 7
61654: PPUSH
61655: LD_INT 0
61657: PPUSH
61658: LD_INT 4
61660: PPUSH
61661: CALL_OW 272
61665: PUSH
61666: LD_VAR 0 8
61670: PPUSH
61671: LD_INT 0
61673: PPUSH
61674: LD_INT 4
61676: PPUSH
61677: CALL_OW 273
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_VAR 0 7
61690: PPUSH
61691: LD_INT 1
61693: PPUSH
61694: LD_INT 4
61696: PPUSH
61697: CALL_OW 272
61701: PUSH
61702: LD_VAR 0 8
61706: PPUSH
61707: LD_INT 1
61709: PPUSH
61710: LD_INT 4
61712: PPUSH
61713: CALL_OW 273
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_VAR 0 7
61726: PPUSH
61727: LD_INT 2
61729: PPUSH
61730: LD_INT 4
61732: PPUSH
61733: CALL_OW 272
61737: PUSH
61738: LD_VAR 0 8
61742: PPUSH
61743: LD_INT 2
61745: PPUSH
61746: LD_INT 4
61748: PPUSH
61749: CALL_OW 273
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_VAR 0 7
61762: PPUSH
61763: LD_INT 3
61765: PPUSH
61766: LD_INT 4
61768: PPUSH
61769: CALL_OW 272
61773: PUSH
61774: LD_VAR 0 8
61778: PPUSH
61779: LD_INT 3
61781: PPUSH
61782: LD_INT 4
61784: PPUSH
61785: CALL_OW 273
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_VAR 0 7
61798: PPUSH
61799: LD_INT 4
61801: PPUSH
61802: LD_INT 4
61804: PPUSH
61805: CALL_OW 272
61809: PUSH
61810: LD_VAR 0 8
61814: PPUSH
61815: LD_INT 4
61817: PPUSH
61818: LD_INT 4
61820: PPUSH
61821: CALL_OW 273
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_VAR 0 7
61834: PPUSH
61835: LD_INT 5
61837: PPUSH
61838: LD_INT 4
61840: PPUSH
61841: CALL_OW 272
61845: PUSH
61846: LD_VAR 0 8
61850: PPUSH
61851: LD_INT 5
61853: PPUSH
61854: LD_INT 4
61856: PPUSH
61857: CALL_OW 273
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: ST_TO_ADDR
// for i = tmp downto 1 do
61874: LD_ADDR_VAR 0 4
61878: PUSH
61879: DOUBLE
61880: LD_VAR 0 6
61884: INC
61885: ST_TO_ADDR
61886: LD_INT 1
61888: PUSH
61889: FOR_DOWNTO
61890: IFFALSE 61991
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61892: LD_VAR 0 6
61896: PUSH
61897: LD_VAR 0 4
61901: ARRAY
61902: PUSH
61903: LD_INT 1
61905: ARRAY
61906: PPUSH
61907: LD_VAR 0 6
61911: PUSH
61912: LD_VAR 0 4
61916: ARRAY
61917: PUSH
61918: LD_INT 2
61920: ARRAY
61921: PPUSH
61922: CALL_OW 488
61926: NOT
61927: PUSH
61928: LD_VAR 0 6
61932: PUSH
61933: LD_VAR 0 4
61937: ARRAY
61938: PUSH
61939: LD_INT 1
61941: ARRAY
61942: PPUSH
61943: LD_VAR 0 6
61947: PUSH
61948: LD_VAR 0 4
61952: ARRAY
61953: PUSH
61954: LD_INT 2
61956: ARRAY
61957: PPUSH
61958: CALL_OW 428
61962: PUSH
61963: LD_INT 0
61965: NONEQUAL
61966: OR
61967: IFFALSE 61989
// tmp := Delete ( tmp , i ) ;
61969: LD_ADDR_VAR 0 6
61973: PUSH
61974: LD_VAR 0 6
61978: PPUSH
61979: LD_VAR 0 4
61983: PPUSH
61984: CALL_OW 3
61988: ST_TO_ADDR
61989: GO 61889
61991: POP
61992: POP
// j := GetClosestHex ( unit , tmp ) ;
61993: LD_ADDR_VAR 0 5
61997: PUSH
61998: LD_VAR 0 1
62002: PPUSH
62003: LD_VAR 0 6
62007: PPUSH
62008: CALL 61310 0 2
62012: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62013: LD_VAR 0 1
62017: PPUSH
62018: LD_VAR 0 5
62022: PUSH
62023: LD_INT 1
62025: ARRAY
62026: PPUSH
62027: LD_VAR 0 5
62031: PUSH
62032: LD_INT 2
62034: ARRAY
62035: PPUSH
62036: CALL_OW 111
// end ;
62040: LD_VAR 0 3
62044: RET
// export function PrepareApemanSoldier ( ) ; begin
62045: LD_INT 0
62047: PPUSH
// uc_nation := 0 ;
62048: LD_ADDR_OWVAR 21
62052: PUSH
62053: LD_INT 0
62055: ST_TO_ADDR
// hc_sex := sex_male ;
62056: LD_ADDR_OWVAR 27
62060: PUSH
62061: LD_INT 1
62063: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62064: LD_ADDR_OWVAR 28
62068: PUSH
62069: LD_INT 15
62071: ST_TO_ADDR
// hc_gallery :=  ;
62072: LD_ADDR_OWVAR 33
62076: PUSH
62077: LD_STRING 
62079: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62080: LD_ADDR_OWVAR 31
62084: PUSH
62085: LD_INT 0
62087: PPUSH
62088: LD_INT 3
62090: PPUSH
62091: CALL_OW 12
62095: PUSH
62096: LD_INT 0
62098: PPUSH
62099: LD_INT 3
62101: PPUSH
62102: CALL_OW 12
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// end ;
62119: LD_VAR 0 1
62123: RET
// export function PrepareApemanEngineer ( ) ; begin
62124: LD_INT 0
62126: PPUSH
// uc_nation := 0 ;
62127: LD_ADDR_OWVAR 21
62131: PUSH
62132: LD_INT 0
62134: ST_TO_ADDR
// hc_sex := sex_male ;
62135: LD_ADDR_OWVAR 27
62139: PUSH
62140: LD_INT 1
62142: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62143: LD_ADDR_OWVAR 28
62147: PUSH
62148: LD_INT 16
62150: ST_TO_ADDR
// hc_gallery :=  ;
62151: LD_ADDR_OWVAR 33
62155: PUSH
62156: LD_STRING 
62158: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62159: LD_ADDR_OWVAR 31
62163: PUSH
62164: LD_INT 0
62166: PPUSH
62167: LD_INT 3
62169: PPUSH
62170: CALL_OW 12
62174: PUSH
62175: LD_INT 0
62177: PPUSH
62178: LD_INT 3
62180: PPUSH
62181: CALL_OW 12
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// end ;
62198: LD_VAR 0 1
62202: RET
// export function PrepareApeman ( agressivity ) ; begin
62203: LD_INT 0
62205: PPUSH
// uc_side := 0 ;
62206: LD_ADDR_OWVAR 20
62210: PUSH
62211: LD_INT 0
62213: ST_TO_ADDR
// uc_nation := 0 ;
62214: LD_ADDR_OWVAR 21
62218: PUSH
62219: LD_INT 0
62221: ST_TO_ADDR
// hc_sex := sex_male ;
62222: LD_ADDR_OWVAR 27
62226: PUSH
62227: LD_INT 1
62229: ST_TO_ADDR
// hc_class := class_apeman ;
62230: LD_ADDR_OWVAR 28
62234: PUSH
62235: LD_INT 12
62237: ST_TO_ADDR
// hc_gallery :=  ;
62238: LD_ADDR_OWVAR 33
62242: PUSH
62243: LD_STRING 
62245: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62246: LD_ADDR_OWVAR 35
62250: PUSH
62251: LD_VAR 0 1
62255: NEG
62256: PPUSH
62257: LD_VAR 0 1
62261: PPUSH
62262: CALL_OW 12
62266: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62267: LD_ADDR_OWVAR 31
62271: PUSH
62272: LD_INT 0
62274: PPUSH
62275: LD_INT 3
62277: PPUSH
62278: CALL_OW 12
62282: PUSH
62283: LD_INT 0
62285: PPUSH
62286: LD_INT 3
62288: PPUSH
62289: CALL_OW 12
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: ST_TO_ADDR
// end ;
62306: LD_VAR 0 2
62310: RET
// export function PrepareTiger ( agressivity ) ; begin
62311: LD_INT 0
62313: PPUSH
// uc_side := 0 ;
62314: LD_ADDR_OWVAR 20
62318: PUSH
62319: LD_INT 0
62321: ST_TO_ADDR
// uc_nation := 0 ;
62322: LD_ADDR_OWVAR 21
62326: PUSH
62327: LD_INT 0
62329: ST_TO_ADDR
// hc_class := class_tiger ;
62330: LD_ADDR_OWVAR 28
62334: PUSH
62335: LD_INT 14
62337: ST_TO_ADDR
// hc_gallery :=  ;
62338: LD_ADDR_OWVAR 33
62342: PUSH
62343: LD_STRING 
62345: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62346: LD_ADDR_OWVAR 35
62350: PUSH
62351: LD_VAR 0 1
62355: NEG
62356: PPUSH
62357: LD_VAR 0 1
62361: PPUSH
62362: CALL_OW 12
62366: ST_TO_ADDR
// end ;
62367: LD_VAR 0 2
62371: RET
// export function PrepareEnchidna ( ) ; begin
62372: LD_INT 0
62374: PPUSH
// uc_side := 0 ;
62375: LD_ADDR_OWVAR 20
62379: PUSH
62380: LD_INT 0
62382: ST_TO_ADDR
// uc_nation := 0 ;
62383: LD_ADDR_OWVAR 21
62387: PUSH
62388: LD_INT 0
62390: ST_TO_ADDR
// hc_class := class_baggie ;
62391: LD_ADDR_OWVAR 28
62395: PUSH
62396: LD_INT 13
62398: ST_TO_ADDR
// hc_gallery :=  ;
62399: LD_ADDR_OWVAR 33
62403: PUSH
62404: LD_STRING 
62406: ST_TO_ADDR
// end ;
62407: LD_VAR 0 1
62411: RET
// export function PrepareFrog ( ) ; begin
62412: LD_INT 0
62414: PPUSH
// uc_side := 0 ;
62415: LD_ADDR_OWVAR 20
62419: PUSH
62420: LD_INT 0
62422: ST_TO_ADDR
// uc_nation := 0 ;
62423: LD_ADDR_OWVAR 21
62427: PUSH
62428: LD_INT 0
62430: ST_TO_ADDR
// hc_class := class_frog ;
62431: LD_ADDR_OWVAR 28
62435: PUSH
62436: LD_INT 19
62438: ST_TO_ADDR
// hc_gallery :=  ;
62439: LD_ADDR_OWVAR 33
62443: PUSH
62444: LD_STRING 
62446: ST_TO_ADDR
// end ;
62447: LD_VAR 0 1
62451: RET
// export function PrepareFish ( ) ; begin
62452: LD_INT 0
62454: PPUSH
// uc_side := 0 ;
62455: LD_ADDR_OWVAR 20
62459: PUSH
62460: LD_INT 0
62462: ST_TO_ADDR
// uc_nation := 0 ;
62463: LD_ADDR_OWVAR 21
62467: PUSH
62468: LD_INT 0
62470: ST_TO_ADDR
// hc_class := class_fish ;
62471: LD_ADDR_OWVAR 28
62475: PUSH
62476: LD_INT 20
62478: ST_TO_ADDR
// hc_gallery :=  ;
62479: LD_ADDR_OWVAR 33
62483: PUSH
62484: LD_STRING 
62486: ST_TO_ADDR
// end ;
62487: LD_VAR 0 1
62491: RET
// export function PrepareBird ( ) ; begin
62492: LD_INT 0
62494: PPUSH
// uc_side := 0 ;
62495: LD_ADDR_OWVAR 20
62499: PUSH
62500: LD_INT 0
62502: ST_TO_ADDR
// uc_nation := 0 ;
62503: LD_ADDR_OWVAR 21
62507: PUSH
62508: LD_INT 0
62510: ST_TO_ADDR
// hc_class := class_phororhacos ;
62511: LD_ADDR_OWVAR 28
62515: PUSH
62516: LD_INT 18
62518: ST_TO_ADDR
// hc_gallery :=  ;
62519: LD_ADDR_OWVAR 33
62523: PUSH
62524: LD_STRING 
62526: ST_TO_ADDR
// end ;
62527: LD_VAR 0 1
62531: RET
// export function PrepareHorse ( ) ; begin
62532: LD_INT 0
62534: PPUSH
// uc_side := 0 ;
62535: LD_ADDR_OWVAR 20
62539: PUSH
62540: LD_INT 0
62542: ST_TO_ADDR
// uc_nation := 0 ;
62543: LD_ADDR_OWVAR 21
62547: PUSH
62548: LD_INT 0
62550: ST_TO_ADDR
// hc_class := class_horse ;
62551: LD_ADDR_OWVAR 28
62555: PUSH
62556: LD_INT 21
62558: ST_TO_ADDR
// hc_gallery :=  ;
62559: LD_ADDR_OWVAR 33
62563: PUSH
62564: LD_STRING 
62566: ST_TO_ADDR
// end ;
62567: LD_VAR 0 1
62571: RET
// export function PrepareMastodont ( ) ; begin
62572: LD_INT 0
62574: PPUSH
// uc_side := 0 ;
62575: LD_ADDR_OWVAR 20
62579: PUSH
62580: LD_INT 0
62582: ST_TO_ADDR
// uc_nation := 0 ;
62583: LD_ADDR_OWVAR 21
62587: PUSH
62588: LD_INT 0
62590: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62591: LD_ADDR_OWVAR 37
62595: PUSH
62596: LD_INT 31
62598: ST_TO_ADDR
// vc_control := control_rider ;
62599: LD_ADDR_OWVAR 38
62603: PUSH
62604: LD_INT 4
62606: ST_TO_ADDR
// end ;
62607: LD_VAR 0 1
62611: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62612: LD_INT 0
62614: PPUSH
62615: PPUSH
62616: PPUSH
// uc_side = 0 ;
62617: LD_ADDR_OWVAR 20
62621: PUSH
62622: LD_INT 0
62624: ST_TO_ADDR
// uc_nation = 0 ;
62625: LD_ADDR_OWVAR 21
62629: PUSH
62630: LD_INT 0
62632: ST_TO_ADDR
// InitHc_All ( ) ;
62633: CALL_OW 584
// InitVc ;
62637: CALL_OW 20
// if mastodonts then
62641: LD_VAR 0 6
62645: IFFALSE 62712
// for i = 1 to mastodonts do
62647: LD_ADDR_VAR 0 11
62651: PUSH
62652: DOUBLE
62653: LD_INT 1
62655: DEC
62656: ST_TO_ADDR
62657: LD_VAR 0 6
62661: PUSH
62662: FOR_TO
62663: IFFALSE 62710
// begin vc_chassis := 31 ;
62665: LD_ADDR_OWVAR 37
62669: PUSH
62670: LD_INT 31
62672: ST_TO_ADDR
// vc_control := control_rider ;
62673: LD_ADDR_OWVAR 38
62677: PUSH
62678: LD_INT 4
62680: ST_TO_ADDR
// animal := CreateVehicle ;
62681: LD_ADDR_VAR 0 12
62685: PUSH
62686: CALL_OW 45
62690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62691: LD_VAR 0 12
62695: PPUSH
62696: LD_VAR 0 8
62700: PPUSH
62701: LD_INT 0
62703: PPUSH
62704: CALL 64847 0 3
// end ;
62708: GO 62662
62710: POP
62711: POP
// if horses then
62712: LD_VAR 0 5
62716: IFFALSE 62783
// for i = 1 to horses do
62718: LD_ADDR_VAR 0 11
62722: PUSH
62723: DOUBLE
62724: LD_INT 1
62726: DEC
62727: ST_TO_ADDR
62728: LD_VAR 0 5
62732: PUSH
62733: FOR_TO
62734: IFFALSE 62781
// begin hc_class := 21 ;
62736: LD_ADDR_OWVAR 28
62740: PUSH
62741: LD_INT 21
62743: ST_TO_ADDR
// hc_gallery :=  ;
62744: LD_ADDR_OWVAR 33
62748: PUSH
62749: LD_STRING 
62751: ST_TO_ADDR
// animal := CreateHuman ;
62752: LD_ADDR_VAR 0 12
62756: PUSH
62757: CALL_OW 44
62761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62762: LD_VAR 0 12
62766: PPUSH
62767: LD_VAR 0 8
62771: PPUSH
62772: LD_INT 0
62774: PPUSH
62775: CALL 64847 0 3
// end ;
62779: GO 62733
62781: POP
62782: POP
// if birds then
62783: LD_VAR 0 1
62787: IFFALSE 62854
// for i = 1 to birds do
62789: LD_ADDR_VAR 0 11
62793: PUSH
62794: DOUBLE
62795: LD_INT 1
62797: DEC
62798: ST_TO_ADDR
62799: LD_VAR 0 1
62803: PUSH
62804: FOR_TO
62805: IFFALSE 62852
// begin hc_class = 18 ;
62807: LD_ADDR_OWVAR 28
62811: PUSH
62812: LD_INT 18
62814: ST_TO_ADDR
// hc_gallery =  ;
62815: LD_ADDR_OWVAR 33
62819: PUSH
62820: LD_STRING 
62822: ST_TO_ADDR
// animal := CreateHuman ;
62823: LD_ADDR_VAR 0 12
62827: PUSH
62828: CALL_OW 44
62832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62833: LD_VAR 0 12
62837: PPUSH
62838: LD_VAR 0 8
62842: PPUSH
62843: LD_INT 0
62845: PPUSH
62846: CALL 64847 0 3
// end ;
62850: GO 62804
62852: POP
62853: POP
// if tigers then
62854: LD_VAR 0 2
62858: IFFALSE 62942
// for i = 1 to tigers do
62860: LD_ADDR_VAR 0 11
62864: PUSH
62865: DOUBLE
62866: LD_INT 1
62868: DEC
62869: ST_TO_ADDR
62870: LD_VAR 0 2
62874: PUSH
62875: FOR_TO
62876: IFFALSE 62940
// begin hc_class = class_tiger ;
62878: LD_ADDR_OWVAR 28
62882: PUSH
62883: LD_INT 14
62885: ST_TO_ADDR
// hc_gallery =  ;
62886: LD_ADDR_OWVAR 33
62890: PUSH
62891: LD_STRING 
62893: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62894: LD_ADDR_OWVAR 35
62898: PUSH
62899: LD_INT 7
62901: NEG
62902: PPUSH
62903: LD_INT 7
62905: PPUSH
62906: CALL_OW 12
62910: ST_TO_ADDR
// animal := CreateHuman ;
62911: LD_ADDR_VAR 0 12
62915: PUSH
62916: CALL_OW 44
62920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62921: LD_VAR 0 12
62925: PPUSH
62926: LD_VAR 0 8
62930: PPUSH
62931: LD_INT 0
62933: PPUSH
62934: CALL 64847 0 3
// end ;
62938: GO 62875
62940: POP
62941: POP
// if apemans then
62942: LD_VAR 0 3
62946: IFFALSE 63069
// for i = 1 to apemans do
62948: LD_ADDR_VAR 0 11
62952: PUSH
62953: DOUBLE
62954: LD_INT 1
62956: DEC
62957: ST_TO_ADDR
62958: LD_VAR 0 3
62962: PUSH
62963: FOR_TO
62964: IFFALSE 63067
// begin hc_class = class_apeman ;
62966: LD_ADDR_OWVAR 28
62970: PUSH
62971: LD_INT 12
62973: ST_TO_ADDR
// hc_gallery =  ;
62974: LD_ADDR_OWVAR 33
62978: PUSH
62979: LD_STRING 
62981: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62982: LD_ADDR_OWVAR 35
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PPUSH
62991: LD_INT 2
62993: PPUSH
62994: CALL_OW 12
62998: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62999: LD_ADDR_OWVAR 31
63003: PUSH
63004: LD_INT 1
63006: PPUSH
63007: LD_INT 3
63009: PPUSH
63010: CALL_OW 12
63014: PUSH
63015: LD_INT 1
63017: PPUSH
63018: LD_INT 3
63020: PPUSH
63021: CALL_OW 12
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: ST_TO_ADDR
// animal := CreateHuman ;
63038: LD_ADDR_VAR 0 12
63042: PUSH
63043: CALL_OW 44
63047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63048: LD_VAR 0 12
63052: PPUSH
63053: LD_VAR 0 8
63057: PPUSH
63058: LD_INT 0
63060: PPUSH
63061: CALL 64847 0 3
// end ;
63065: GO 62963
63067: POP
63068: POP
// if enchidnas then
63069: LD_VAR 0 4
63073: IFFALSE 63140
// for i = 1 to enchidnas do
63075: LD_ADDR_VAR 0 11
63079: PUSH
63080: DOUBLE
63081: LD_INT 1
63083: DEC
63084: ST_TO_ADDR
63085: LD_VAR 0 4
63089: PUSH
63090: FOR_TO
63091: IFFALSE 63138
// begin hc_class = 13 ;
63093: LD_ADDR_OWVAR 28
63097: PUSH
63098: LD_INT 13
63100: ST_TO_ADDR
// hc_gallery =  ;
63101: LD_ADDR_OWVAR 33
63105: PUSH
63106: LD_STRING 
63108: ST_TO_ADDR
// animal := CreateHuman ;
63109: LD_ADDR_VAR 0 12
63113: PUSH
63114: CALL_OW 44
63118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63119: LD_VAR 0 12
63123: PPUSH
63124: LD_VAR 0 8
63128: PPUSH
63129: LD_INT 0
63131: PPUSH
63132: CALL 64847 0 3
// end ;
63136: GO 63090
63138: POP
63139: POP
// if fishes then
63140: LD_VAR 0 7
63144: IFFALSE 63211
// for i = 1 to fishes do
63146: LD_ADDR_VAR 0 11
63150: PUSH
63151: DOUBLE
63152: LD_INT 1
63154: DEC
63155: ST_TO_ADDR
63156: LD_VAR 0 7
63160: PUSH
63161: FOR_TO
63162: IFFALSE 63209
// begin hc_class = 20 ;
63164: LD_ADDR_OWVAR 28
63168: PUSH
63169: LD_INT 20
63171: ST_TO_ADDR
// hc_gallery =  ;
63172: LD_ADDR_OWVAR 33
63176: PUSH
63177: LD_STRING 
63179: ST_TO_ADDR
// animal := CreateHuman ;
63180: LD_ADDR_VAR 0 12
63184: PUSH
63185: CALL_OW 44
63189: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63190: LD_VAR 0 12
63194: PPUSH
63195: LD_VAR 0 9
63199: PPUSH
63200: LD_INT 0
63202: PPUSH
63203: CALL 64847 0 3
// end ;
63207: GO 63161
63209: POP
63210: POP
// end ;
63211: LD_VAR 0 10
63215: RET
// export function WantHeal ( sci , unit ) ; begin
63216: LD_INT 0
63218: PPUSH
// if GetTaskList ( sci ) > 0 then
63219: LD_VAR 0 1
63223: PPUSH
63224: CALL_OW 437
63228: PUSH
63229: LD_INT 0
63231: GREATER
63232: IFFALSE 63302
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 437
63243: PUSH
63244: LD_INT 1
63246: ARRAY
63247: PUSH
63248: LD_INT 1
63250: ARRAY
63251: PUSH
63252: LD_STRING l
63254: EQUAL
63255: PUSH
63256: LD_VAR 0 1
63260: PPUSH
63261: CALL_OW 437
63265: PUSH
63266: LD_INT 1
63268: ARRAY
63269: PUSH
63270: LD_INT 4
63272: ARRAY
63273: PUSH
63274: LD_VAR 0 2
63278: EQUAL
63279: AND
63280: IFFALSE 63292
// result := true else
63282: LD_ADDR_VAR 0 3
63286: PUSH
63287: LD_INT 1
63289: ST_TO_ADDR
63290: GO 63300
// result := false ;
63292: LD_ADDR_VAR 0 3
63296: PUSH
63297: LD_INT 0
63299: ST_TO_ADDR
// end else
63300: GO 63310
// result := false ;
63302: LD_ADDR_VAR 0 3
63306: PUSH
63307: LD_INT 0
63309: ST_TO_ADDR
// end ;
63310: LD_VAR 0 3
63314: RET
// export function HealTarget ( sci ) ; begin
63315: LD_INT 0
63317: PPUSH
// if not sci then
63318: LD_VAR 0 1
63322: NOT
63323: IFFALSE 63327
// exit ;
63325: GO 63392
// result := 0 ;
63327: LD_ADDR_VAR 0 2
63331: PUSH
63332: LD_INT 0
63334: ST_TO_ADDR
// if GetTaskList ( sci ) then
63335: LD_VAR 0 1
63339: PPUSH
63340: CALL_OW 437
63344: IFFALSE 63392
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63346: LD_VAR 0 1
63350: PPUSH
63351: CALL_OW 437
63355: PUSH
63356: LD_INT 1
63358: ARRAY
63359: PUSH
63360: LD_INT 1
63362: ARRAY
63363: PUSH
63364: LD_STRING l
63366: EQUAL
63367: IFFALSE 63392
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63369: LD_ADDR_VAR 0 2
63373: PUSH
63374: LD_VAR 0 1
63378: PPUSH
63379: CALL_OW 437
63383: PUSH
63384: LD_INT 1
63386: ARRAY
63387: PUSH
63388: LD_INT 4
63390: ARRAY
63391: ST_TO_ADDR
// end ;
63392: LD_VAR 0 2
63396: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63397: LD_INT 0
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
// if not base_units then
63403: LD_VAR 0 1
63407: NOT
63408: IFFALSE 63412
// exit ;
63410: GO 63499
// result := false ;
63412: LD_ADDR_VAR 0 2
63416: PUSH
63417: LD_INT 0
63419: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63420: LD_ADDR_VAR 0 5
63424: PUSH
63425: LD_VAR 0 1
63429: PPUSH
63430: LD_INT 21
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PPUSH
63440: CALL_OW 72
63444: ST_TO_ADDR
// if not tmp then
63445: LD_VAR 0 5
63449: NOT
63450: IFFALSE 63454
// exit ;
63452: GO 63499
// for i in tmp do
63454: LD_ADDR_VAR 0 3
63458: PUSH
63459: LD_VAR 0 5
63463: PUSH
63464: FOR_IN
63465: IFFALSE 63497
// begin result := EnemyInRange ( i , 22 ) ;
63467: LD_ADDR_VAR 0 2
63471: PUSH
63472: LD_VAR 0 3
63476: PPUSH
63477: LD_INT 22
63479: PPUSH
63480: CALL 61185 0 2
63484: ST_TO_ADDR
// if result then
63485: LD_VAR 0 2
63489: IFFALSE 63495
// exit ;
63491: POP
63492: POP
63493: GO 63499
// end ;
63495: GO 63464
63497: POP
63498: POP
// end ;
63499: LD_VAR 0 2
63503: RET
// export function FilterByTag ( units , tag ) ; begin
63504: LD_INT 0
63506: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63507: LD_ADDR_VAR 0 3
63511: PUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: LD_INT 120
63519: PUSH
63520: LD_VAR 0 2
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PPUSH
63529: CALL_OW 72
63533: ST_TO_ADDR
// end ;
63534: LD_VAR 0 3
63538: RET
// export function IsDriver ( un ) ; begin
63539: LD_INT 0
63541: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63542: LD_ADDR_VAR 0 2
63546: PUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_INT 55
63554: PUSH
63555: EMPTY
63556: LIST
63557: PPUSH
63558: CALL_OW 69
63562: IN
63563: ST_TO_ADDR
// end ;
63564: LD_VAR 0 2
63568: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63569: LD_INT 0
63571: PPUSH
63572: PPUSH
// list := [ ] ;
63573: LD_ADDR_VAR 0 5
63577: PUSH
63578: EMPTY
63579: ST_TO_ADDR
// case d of 0 :
63580: LD_VAR 0 3
63584: PUSH
63585: LD_INT 0
63587: DOUBLE
63588: EQUAL
63589: IFTRUE 63593
63591: GO 63726
63593: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63594: LD_ADDR_VAR 0 5
63598: PUSH
63599: LD_VAR 0 1
63603: PUSH
63604: LD_INT 4
63606: MINUS
63607: PUSH
63608: LD_VAR 0 2
63612: PUSH
63613: LD_INT 4
63615: MINUS
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: PUSH
63625: LD_VAR 0 1
63629: PUSH
63630: LD_INT 3
63632: MINUS
63633: PUSH
63634: LD_VAR 0 2
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: PUSH
63647: LD_VAR 0 1
63651: PUSH
63652: LD_INT 4
63654: PLUS
63655: PUSH
63656: LD_VAR 0 2
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: PUSH
63669: LD_VAR 0 1
63673: PUSH
63674: LD_INT 3
63676: PLUS
63677: PUSH
63678: LD_VAR 0 2
63682: PUSH
63683: LD_INT 3
63685: PLUS
63686: PUSH
63687: LD_INT 5
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: PUSH
63695: LD_VAR 0 1
63699: PUSH
63700: LD_VAR 0 2
63704: PUSH
63705: LD_INT 4
63707: PLUS
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: ST_TO_ADDR
// end ; 1 :
63724: GO 64424
63726: LD_INT 1
63728: DOUBLE
63729: EQUAL
63730: IFTRUE 63734
63732: GO 63867
63734: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63735: LD_ADDR_VAR 0 5
63739: PUSH
63740: LD_VAR 0 1
63744: PUSH
63745: LD_VAR 0 2
63749: PUSH
63750: LD_INT 4
63752: MINUS
63753: PUSH
63754: LD_INT 3
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: LIST
63761: PUSH
63762: LD_VAR 0 1
63766: PUSH
63767: LD_INT 3
63769: MINUS
63770: PUSH
63771: LD_VAR 0 2
63775: PUSH
63776: LD_INT 3
63778: MINUS
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: LD_INT 4
63795: MINUS
63796: PUSH
63797: LD_VAR 0 2
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: PUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_VAR 0 2
63819: PUSH
63820: LD_INT 3
63822: PLUS
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: PUSH
63832: LD_VAR 0 1
63836: PUSH
63837: LD_INT 4
63839: PLUS
63840: PUSH
63841: LD_VAR 0 2
63845: PUSH
63846: LD_INT 4
63848: PLUS
63849: PUSH
63850: LD_INT 5
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// end ; 2 :
63865: GO 64424
63867: LD_INT 2
63869: DOUBLE
63870: EQUAL
63871: IFTRUE 63875
63873: GO 64004
63875: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63876: LD_ADDR_VAR 0 5
63880: PUSH
63881: LD_VAR 0 1
63885: PUSH
63886: LD_VAR 0 2
63890: PUSH
63891: LD_INT 3
63893: MINUS
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: PUSH
63903: LD_VAR 0 1
63907: PUSH
63908: LD_INT 4
63910: PLUS
63911: PUSH
63912: LD_VAR 0 2
63916: PUSH
63917: LD_INT 4
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: PUSH
63925: LD_VAR 0 1
63929: PUSH
63930: LD_VAR 0 2
63934: PUSH
63935: LD_INT 4
63937: PLUS
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: LIST
63946: PUSH
63947: LD_VAR 0 1
63951: PUSH
63952: LD_INT 3
63954: MINUS
63955: PUSH
63956: LD_VAR 0 2
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: PUSH
63969: LD_VAR 0 1
63973: PUSH
63974: LD_INT 4
63976: MINUS
63977: PUSH
63978: LD_VAR 0 2
63982: PUSH
63983: LD_INT 4
63985: MINUS
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: ST_TO_ADDR
// end ; 3 :
64002: GO 64424
64004: LD_INT 3
64006: DOUBLE
64007: EQUAL
64008: IFTRUE 64012
64010: GO 64145
64012: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64013: LD_ADDR_VAR 0 5
64017: PUSH
64018: LD_VAR 0 1
64022: PUSH
64023: LD_INT 3
64025: PLUS
64026: PUSH
64027: LD_VAR 0 2
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: LIST
64039: PUSH
64040: LD_VAR 0 1
64044: PUSH
64045: LD_INT 4
64047: PLUS
64048: PUSH
64049: LD_VAR 0 2
64053: PUSH
64054: LD_INT 4
64056: PLUS
64057: PUSH
64058: LD_INT 5
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: PUSH
64066: LD_VAR 0 1
64070: PUSH
64071: LD_INT 4
64073: MINUS
64074: PUSH
64075: LD_VAR 0 2
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: LD_VAR 0 1
64092: PUSH
64093: LD_VAR 0 2
64097: PUSH
64098: LD_INT 4
64100: MINUS
64101: PUSH
64102: LD_INT 3
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: PUSH
64110: LD_VAR 0 1
64114: PUSH
64115: LD_INT 3
64117: MINUS
64118: PUSH
64119: LD_VAR 0 2
64123: PUSH
64124: LD_INT 3
64126: MINUS
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: ST_TO_ADDR
// end ; 4 :
64143: GO 64424
64145: LD_INT 4
64147: DOUBLE
64148: EQUAL
64149: IFTRUE 64153
64151: GO 64286
64153: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64154: LD_ADDR_VAR 0 5
64158: PUSH
64159: LD_VAR 0 1
64163: PUSH
64164: LD_VAR 0 2
64168: PUSH
64169: LD_INT 4
64171: PLUS
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: PUSH
64181: LD_VAR 0 1
64185: PUSH
64186: LD_INT 3
64188: PLUS
64189: PUSH
64190: LD_VAR 0 2
64194: PUSH
64195: LD_INT 3
64197: PLUS
64198: PUSH
64199: LD_INT 5
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: PUSH
64207: LD_VAR 0 1
64211: PUSH
64212: LD_INT 4
64214: PLUS
64215: PUSH
64216: LD_VAR 0 2
64220: PUSH
64221: LD_INT 4
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: PUSH
64229: LD_VAR 0 1
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 3
64241: MINUS
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: PUSH
64251: LD_VAR 0 1
64255: PUSH
64256: LD_INT 4
64258: MINUS
64259: PUSH
64260: LD_VAR 0 2
64264: PUSH
64265: LD_INT 4
64267: MINUS
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: ST_TO_ADDR
// end ; 5 :
64284: GO 64424
64286: LD_INT 5
64288: DOUBLE
64289: EQUAL
64290: IFTRUE 64294
64292: GO 64423
64294: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64295: LD_ADDR_VAR 0 5
64299: PUSH
64300: LD_VAR 0 1
64304: PUSH
64305: LD_INT 4
64307: MINUS
64308: PUSH
64309: LD_VAR 0 2
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: PUSH
64322: LD_VAR 0 1
64326: PUSH
64327: LD_VAR 0 2
64331: PUSH
64332: LD_INT 4
64334: MINUS
64335: PUSH
64336: LD_INT 3
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: PUSH
64344: LD_VAR 0 1
64348: PUSH
64349: LD_INT 4
64351: PLUS
64352: PUSH
64353: LD_VAR 0 2
64357: PUSH
64358: LD_INT 4
64360: PLUS
64361: PUSH
64362: LD_INT 5
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: PUSH
64370: LD_VAR 0 1
64374: PUSH
64375: LD_INT 3
64377: PLUS
64378: PUSH
64379: LD_VAR 0 2
64383: PUSH
64384: LD_INT 4
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: PUSH
64392: LD_VAR 0 1
64396: PUSH
64397: LD_VAR 0 2
64401: PUSH
64402: LD_INT 3
64404: PLUS
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: ST_TO_ADDR
// end ; end ;
64421: GO 64424
64423: POP
// result := list ;
64424: LD_ADDR_VAR 0 4
64428: PUSH
64429: LD_VAR 0 5
64433: ST_TO_ADDR
// end ;
64434: LD_VAR 0 4
64438: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64439: LD_INT 0
64441: PPUSH
64442: PPUSH
64443: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64444: LD_VAR 0 1
64448: NOT
64449: PUSH
64450: LD_VAR 0 2
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: LD_INT 4
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: IN
64473: NOT
64474: OR
64475: IFFALSE 64479
// exit ;
64477: GO 64571
// tmp := [ ] ;
64479: LD_ADDR_VAR 0 5
64483: PUSH
64484: EMPTY
64485: ST_TO_ADDR
// for i in units do
64486: LD_ADDR_VAR 0 4
64490: PUSH
64491: LD_VAR 0 1
64495: PUSH
64496: FOR_IN
64497: IFFALSE 64540
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64499: LD_ADDR_VAR 0 5
64503: PUSH
64504: LD_VAR 0 5
64508: PPUSH
64509: LD_VAR 0 5
64513: PUSH
64514: LD_INT 1
64516: PLUS
64517: PPUSH
64518: LD_VAR 0 4
64522: PPUSH
64523: LD_VAR 0 2
64527: PPUSH
64528: CALL_OW 259
64532: PPUSH
64533: CALL_OW 2
64537: ST_TO_ADDR
64538: GO 64496
64540: POP
64541: POP
// if not tmp then
64542: LD_VAR 0 5
64546: NOT
64547: IFFALSE 64551
// exit ;
64549: GO 64571
// result := SortListByListDesc ( units , tmp ) ;
64551: LD_ADDR_VAR 0 3
64555: PUSH
64556: LD_VAR 0 1
64560: PPUSH
64561: LD_VAR 0 5
64565: PPUSH
64566: CALL_OW 77
64570: ST_TO_ADDR
// end ;
64571: LD_VAR 0 3
64575: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64576: LD_INT 0
64578: PPUSH
64579: PPUSH
64580: PPUSH
// result := false ;
64581: LD_ADDR_VAR 0 3
64585: PUSH
64586: LD_INT 0
64588: ST_TO_ADDR
// x := GetX ( building ) ;
64589: LD_ADDR_VAR 0 4
64593: PUSH
64594: LD_VAR 0 2
64598: PPUSH
64599: CALL_OW 250
64603: ST_TO_ADDR
// y := GetY ( building ) ;
64604: LD_ADDR_VAR 0 5
64608: PUSH
64609: LD_VAR 0 2
64613: PPUSH
64614: CALL_OW 251
64618: ST_TO_ADDR
// if not building or not x or not y then
64619: LD_VAR 0 2
64623: NOT
64624: PUSH
64625: LD_VAR 0 4
64629: NOT
64630: OR
64631: PUSH
64632: LD_VAR 0 5
64636: NOT
64637: OR
64638: IFFALSE 64642
// exit ;
64640: GO 64734
// if GetTaskList ( unit ) then
64642: LD_VAR 0 1
64646: PPUSH
64647: CALL_OW 437
64651: IFFALSE 64734
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64653: LD_STRING e
64655: PUSH
64656: LD_VAR 0 1
64660: PPUSH
64661: CALL_OW 437
64665: PUSH
64666: LD_INT 1
64668: ARRAY
64669: PUSH
64670: LD_INT 1
64672: ARRAY
64673: EQUAL
64674: PUSH
64675: LD_VAR 0 4
64679: PUSH
64680: LD_VAR 0 1
64684: PPUSH
64685: CALL_OW 437
64689: PUSH
64690: LD_INT 1
64692: ARRAY
64693: PUSH
64694: LD_INT 2
64696: ARRAY
64697: EQUAL
64698: AND
64699: PUSH
64700: LD_VAR 0 5
64704: PUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: CALL_OW 437
64714: PUSH
64715: LD_INT 1
64717: ARRAY
64718: PUSH
64719: LD_INT 3
64721: ARRAY
64722: EQUAL
64723: AND
64724: IFFALSE 64734
// result := true end ;
64726: LD_ADDR_VAR 0 3
64730: PUSH
64731: LD_INT 1
64733: ST_TO_ADDR
// end ;
64734: LD_VAR 0 3
64738: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64739: LD_INT 0
64741: PPUSH
// result := false ;
64742: LD_ADDR_VAR 0 4
64746: PUSH
64747: LD_INT 0
64749: ST_TO_ADDR
// if GetTaskList ( unit ) then
64750: LD_VAR 0 1
64754: PPUSH
64755: CALL_OW 437
64759: IFFALSE 64842
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64761: LD_STRING M
64763: PUSH
64764: LD_VAR 0 1
64768: PPUSH
64769: CALL_OW 437
64773: PUSH
64774: LD_INT 1
64776: ARRAY
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: EQUAL
64782: PUSH
64783: LD_VAR 0 2
64787: PUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 437
64797: PUSH
64798: LD_INT 1
64800: ARRAY
64801: PUSH
64802: LD_INT 2
64804: ARRAY
64805: EQUAL
64806: AND
64807: PUSH
64808: LD_VAR 0 3
64812: PUSH
64813: LD_VAR 0 1
64817: PPUSH
64818: CALL_OW 437
64822: PUSH
64823: LD_INT 1
64825: ARRAY
64826: PUSH
64827: LD_INT 3
64829: ARRAY
64830: EQUAL
64831: AND
64832: IFFALSE 64842
// result := true ;
64834: LD_ADDR_VAR 0 4
64838: PUSH
64839: LD_INT 1
64841: ST_TO_ADDR
// end ; end ;
64842: LD_VAR 0 4
64846: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64847: LD_INT 0
64849: PPUSH
64850: PPUSH
64851: PPUSH
64852: PPUSH
// if not unit or not area then
64853: LD_VAR 0 1
64857: NOT
64858: PUSH
64859: LD_VAR 0 2
64863: NOT
64864: OR
64865: IFFALSE 64869
// exit ;
64867: GO 65033
// tmp := AreaToList ( area , i ) ;
64869: LD_ADDR_VAR 0 6
64873: PUSH
64874: LD_VAR 0 2
64878: PPUSH
64879: LD_VAR 0 5
64883: PPUSH
64884: CALL_OW 517
64888: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64889: LD_ADDR_VAR 0 5
64893: PUSH
64894: DOUBLE
64895: LD_INT 1
64897: DEC
64898: ST_TO_ADDR
64899: LD_VAR 0 6
64903: PUSH
64904: LD_INT 1
64906: ARRAY
64907: PUSH
64908: FOR_TO
64909: IFFALSE 65031
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64911: LD_ADDR_VAR 0 7
64915: PUSH
64916: LD_VAR 0 6
64920: PUSH
64921: LD_INT 1
64923: ARRAY
64924: PUSH
64925: LD_VAR 0 5
64929: ARRAY
64930: PUSH
64931: LD_VAR 0 6
64935: PUSH
64936: LD_INT 2
64938: ARRAY
64939: PUSH
64940: LD_VAR 0 5
64944: ARRAY
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64950: LD_VAR 0 7
64954: PUSH
64955: LD_INT 1
64957: ARRAY
64958: PPUSH
64959: LD_VAR 0 7
64963: PUSH
64964: LD_INT 2
64966: ARRAY
64967: PPUSH
64968: CALL_OW 428
64972: PUSH
64973: LD_INT 0
64975: EQUAL
64976: IFFALSE 65029
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64978: LD_VAR 0 1
64982: PPUSH
64983: LD_VAR 0 7
64987: PUSH
64988: LD_INT 1
64990: ARRAY
64991: PPUSH
64992: LD_VAR 0 7
64996: PUSH
64997: LD_INT 2
64999: ARRAY
65000: PPUSH
65001: LD_VAR 0 3
65005: PPUSH
65006: CALL_OW 48
// result := IsPlaced ( unit ) ;
65010: LD_ADDR_VAR 0 4
65014: PUSH
65015: LD_VAR 0 1
65019: PPUSH
65020: CALL_OW 305
65024: ST_TO_ADDR
// exit ;
65025: POP
65026: POP
65027: GO 65033
// end ; end ;
65029: GO 64908
65031: POP
65032: POP
// end ;
65033: LD_VAR 0 4
65037: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65038: LD_INT 0
65040: PPUSH
65041: PPUSH
65042: PPUSH
// if not side or side > 8 then
65043: LD_VAR 0 1
65047: NOT
65048: PUSH
65049: LD_VAR 0 1
65053: PUSH
65054: LD_INT 8
65056: GREATER
65057: OR
65058: IFFALSE 65062
// exit ;
65060: GO 65249
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65062: LD_ADDR_VAR 0 4
65066: PUSH
65067: LD_INT 22
65069: PUSH
65070: LD_VAR 0 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 21
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PPUSH
65093: CALL_OW 69
65097: ST_TO_ADDR
// if not tmp then
65098: LD_VAR 0 4
65102: NOT
65103: IFFALSE 65107
// exit ;
65105: GO 65249
// enable_addtolog := true ;
65107: LD_ADDR_OWVAR 81
65111: PUSH
65112: LD_INT 1
65114: ST_TO_ADDR
// AddToLog ( [ ) ;
65115: LD_STRING [
65117: PPUSH
65118: CALL_OW 561
// for i in tmp do
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_VAR 0 4
65131: PUSH
65132: FOR_IN
65133: IFFALSE 65240
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65135: LD_STRING [
65137: PUSH
65138: LD_VAR 0 3
65142: PPUSH
65143: CALL_OW 266
65147: STR
65148: PUSH
65149: LD_STRING , 
65151: STR
65152: PUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: CALL_OW 250
65162: STR
65163: PUSH
65164: LD_STRING , 
65166: STR
65167: PUSH
65168: LD_VAR 0 3
65172: PPUSH
65173: CALL_OW 251
65177: STR
65178: PUSH
65179: LD_STRING , 
65181: STR
65182: PUSH
65183: LD_VAR 0 3
65187: PPUSH
65188: CALL_OW 254
65192: STR
65193: PUSH
65194: LD_STRING , 
65196: STR
65197: PUSH
65198: LD_VAR 0 3
65202: PPUSH
65203: LD_INT 1
65205: PPUSH
65206: CALL_OW 268
65210: STR
65211: PUSH
65212: LD_STRING , 
65214: STR
65215: PUSH
65216: LD_VAR 0 3
65220: PPUSH
65221: LD_INT 2
65223: PPUSH
65224: CALL_OW 268
65228: STR
65229: PUSH
65230: LD_STRING ],
65232: STR
65233: PPUSH
65234: CALL_OW 561
// end ;
65238: GO 65132
65240: POP
65241: POP
// AddToLog ( ]; ) ;
65242: LD_STRING ];
65244: PPUSH
65245: CALL_OW 561
// end ;
65249: LD_VAR 0 2
65253: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
65258: PPUSH
65259: PPUSH
65260: PPUSH
// if not area or not rate or not max then
65261: LD_VAR 0 1
65265: NOT
65266: PUSH
65267: LD_VAR 0 2
65271: NOT
65272: OR
65273: PUSH
65274: LD_VAR 0 4
65278: NOT
65279: OR
65280: IFFALSE 65284
// exit ;
65282: GO 65473
// while 1 do
65284: LD_INT 1
65286: IFFALSE 65473
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65288: LD_ADDR_VAR 0 9
65292: PUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: LD_INT 1
65300: PPUSH
65301: CALL_OW 287
65305: PUSH
65306: LD_INT 10
65308: MUL
65309: ST_TO_ADDR
// r := rate / 10 ;
65310: LD_ADDR_VAR 0 7
65314: PUSH
65315: LD_VAR 0 2
65319: PUSH
65320: LD_INT 10
65322: DIVREAL
65323: ST_TO_ADDR
// time := 1 1$00 ;
65324: LD_ADDR_VAR 0 8
65328: PUSH
65329: LD_INT 2100
65331: ST_TO_ADDR
// if amount < min then
65332: LD_VAR 0 9
65336: PUSH
65337: LD_VAR 0 3
65341: LESS
65342: IFFALSE 65360
// r := r * 2 else
65344: LD_ADDR_VAR 0 7
65348: PUSH
65349: LD_VAR 0 7
65353: PUSH
65354: LD_INT 2
65356: MUL
65357: ST_TO_ADDR
65358: GO 65386
// if amount > max then
65360: LD_VAR 0 9
65364: PUSH
65365: LD_VAR 0 4
65369: GREATER
65370: IFFALSE 65386
// r := r / 2 ;
65372: LD_ADDR_VAR 0 7
65376: PUSH
65377: LD_VAR 0 7
65381: PUSH
65382: LD_INT 2
65384: DIVREAL
65385: ST_TO_ADDR
// time := time / r ;
65386: LD_ADDR_VAR 0 8
65390: PUSH
65391: LD_VAR 0 8
65395: PUSH
65396: LD_VAR 0 7
65400: DIVREAL
65401: ST_TO_ADDR
// if time < 0 then
65402: LD_VAR 0 8
65406: PUSH
65407: LD_INT 0
65409: LESS
65410: IFFALSE 65427
// time := time * - 1 ;
65412: LD_ADDR_VAR 0 8
65416: PUSH
65417: LD_VAR 0 8
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: MUL
65426: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65427: LD_VAR 0 8
65431: PUSH
65432: LD_INT 35
65434: PPUSH
65435: LD_INT 875
65437: PPUSH
65438: CALL_OW 12
65442: PLUS
65443: PPUSH
65444: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65448: LD_INT 1
65450: PPUSH
65451: LD_INT 5
65453: PPUSH
65454: CALL_OW 12
65458: PPUSH
65459: LD_VAR 0 1
65463: PPUSH
65464: LD_INT 1
65466: PPUSH
65467: CALL_OW 55
// end ;
65471: GO 65284
// end ;
65473: LD_VAR 0 5
65477: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65478: LD_INT 0
65480: PPUSH
65481: PPUSH
65482: PPUSH
65483: PPUSH
65484: PPUSH
65485: PPUSH
65486: PPUSH
65487: PPUSH
// if not turrets or not factories then
65488: LD_VAR 0 1
65492: NOT
65493: PUSH
65494: LD_VAR 0 2
65498: NOT
65499: OR
65500: IFFALSE 65504
// exit ;
65502: GO 65811
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65504: LD_ADDR_VAR 0 10
65508: PUSH
65509: LD_INT 5
65511: PUSH
65512: LD_INT 6
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 2
65521: PUSH
65522: LD_INT 4
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 3
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 24
65546: PUSH
65547: LD_INT 25
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 23
65556: PUSH
65557: LD_INT 27
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 42
65570: PUSH
65571: LD_INT 43
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 44
65580: PUSH
65581: LD_INT 46
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 45
65590: PUSH
65591: LD_INT 47
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: LIST
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: LIST
65607: ST_TO_ADDR
// result := [ ] ;
65608: LD_ADDR_VAR 0 3
65612: PUSH
65613: EMPTY
65614: ST_TO_ADDR
// for i in turrets do
65615: LD_ADDR_VAR 0 4
65619: PUSH
65620: LD_VAR 0 1
65624: PUSH
65625: FOR_IN
65626: IFFALSE 65809
// begin nat := GetNation ( i ) ;
65628: LD_ADDR_VAR 0 7
65632: PUSH
65633: LD_VAR 0 4
65637: PPUSH
65638: CALL_OW 248
65642: ST_TO_ADDR
// weapon := 0 ;
65643: LD_ADDR_VAR 0 8
65647: PUSH
65648: LD_INT 0
65650: ST_TO_ADDR
// if not nat then
65651: LD_VAR 0 7
65655: NOT
65656: IFFALSE 65660
// continue ;
65658: GO 65625
// for j in list [ nat ] do
65660: LD_ADDR_VAR 0 5
65664: PUSH
65665: LD_VAR 0 10
65669: PUSH
65670: LD_VAR 0 7
65674: ARRAY
65675: PUSH
65676: FOR_IN
65677: IFFALSE 65718
// if GetBWeapon ( i ) = j [ 1 ] then
65679: LD_VAR 0 4
65683: PPUSH
65684: CALL_OW 269
65688: PUSH
65689: LD_VAR 0 5
65693: PUSH
65694: LD_INT 1
65696: ARRAY
65697: EQUAL
65698: IFFALSE 65716
// begin weapon := j [ 2 ] ;
65700: LD_ADDR_VAR 0 8
65704: PUSH
65705: LD_VAR 0 5
65709: PUSH
65710: LD_INT 2
65712: ARRAY
65713: ST_TO_ADDR
// break ;
65714: GO 65718
// end ;
65716: GO 65676
65718: POP
65719: POP
// if not weapon then
65720: LD_VAR 0 8
65724: NOT
65725: IFFALSE 65729
// continue ;
65727: GO 65625
// for k in factories do
65729: LD_ADDR_VAR 0 6
65733: PUSH
65734: LD_VAR 0 2
65738: PUSH
65739: FOR_IN
65740: IFFALSE 65805
// begin weapons := AvailableWeaponList ( k ) ;
65742: LD_ADDR_VAR 0 9
65746: PUSH
65747: LD_VAR 0 6
65751: PPUSH
65752: CALL_OW 478
65756: ST_TO_ADDR
// if not weapons then
65757: LD_VAR 0 9
65761: NOT
65762: IFFALSE 65766
// continue ;
65764: GO 65739
// if weapon in weapons then
65766: LD_VAR 0 8
65770: PUSH
65771: LD_VAR 0 9
65775: IN
65776: IFFALSE 65803
// begin result := [ i , weapon ] ;
65778: LD_ADDR_VAR 0 3
65782: PUSH
65783: LD_VAR 0 4
65787: PUSH
65788: LD_VAR 0 8
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: ST_TO_ADDR
// exit ;
65797: POP
65798: POP
65799: POP
65800: POP
65801: GO 65811
// end ; end ;
65803: GO 65739
65805: POP
65806: POP
// end ;
65807: GO 65625
65809: POP
65810: POP
// end ;
65811: LD_VAR 0 3
65815: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65816: LD_INT 0
65818: PPUSH
// if not side or side > 8 then
65819: LD_VAR 0 3
65823: NOT
65824: PUSH
65825: LD_VAR 0 3
65829: PUSH
65830: LD_INT 8
65832: GREATER
65833: OR
65834: IFFALSE 65838
// exit ;
65836: GO 65897
// if not range then
65838: LD_VAR 0 4
65842: NOT
65843: IFFALSE 65854
// range := - 12 ;
65845: LD_ADDR_VAR 0 4
65849: PUSH
65850: LD_INT 12
65852: NEG
65853: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65854: LD_VAR 0 1
65858: PPUSH
65859: LD_VAR 0 2
65863: PPUSH
65864: LD_VAR 0 3
65868: PPUSH
65869: LD_VAR 0 4
65873: PPUSH
65874: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65878: LD_VAR 0 1
65882: PPUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: LD_VAR 0 3
65892: PPUSH
65893: CALL_OW 331
// end ;
65897: LD_VAR 0 5
65901: RET
// export function Video ( mode ) ; begin
65902: LD_INT 0
65904: PPUSH
// ingame_video = mode ;
65905: LD_ADDR_OWVAR 52
65909: PUSH
65910: LD_VAR 0 1
65914: ST_TO_ADDR
// interface_hidden = mode ;
65915: LD_ADDR_OWVAR 54
65919: PUSH
65920: LD_VAR 0 1
65924: ST_TO_ADDR
// end ;
65925: LD_VAR 0 2
65929: RET
// export function Join ( array , element ) ; begin
65930: LD_INT 0
65932: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65933: LD_ADDR_VAR 0 3
65937: PUSH
65938: LD_VAR 0 1
65942: PPUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_INT 1
65950: PLUS
65951: PPUSH
65952: LD_VAR 0 2
65956: PPUSH
65957: CALL_OW 1
65961: ST_TO_ADDR
// end ;
65962: LD_VAR 0 3
65966: RET
// export function JoinUnion ( array , element ) ; begin
65967: LD_INT 0
65969: PPUSH
// result := array union element ;
65970: LD_ADDR_VAR 0 3
65974: PUSH
65975: LD_VAR 0 1
65979: PUSH
65980: LD_VAR 0 2
65984: UNION
65985: ST_TO_ADDR
// end ;
65986: LD_VAR 0 3
65990: RET
// export function GetBehemoths ( side ) ; begin
65991: LD_INT 0
65993: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65994: LD_ADDR_VAR 0 2
65998: PUSH
65999: LD_INT 22
66001: PUSH
66002: LD_VAR 0 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 31
66013: PUSH
66014: LD_INT 25
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PPUSH
66025: CALL_OW 69
66029: ST_TO_ADDR
// end ;
66030: LD_VAR 0 2
66034: RET
// export function Shuffle ( array ) ; var i , index ; begin
66035: LD_INT 0
66037: PPUSH
66038: PPUSH
66039: PPUSH
// result := [ ] ;
66040: LD_ADDR_VAR 0 2
66044: PUSH
66045: EMPTY
66046: ST_TO_ADDR
// if not array then
66047: LD_VAR 0 1
66051: NOT
66052: IFFALSE 66056
// exit ;
66054: GO 66155
// Randomize ;
66056: CALL_OW 10
// for i = array downto 1 do
66060: LD_ADDR_VAR 0 3
66064: PUSH
66065: DOUBLE
66066: LD_VAR 0 1
66070: INC
66071: ST_TO_ADDR
66072: LD_INT 1
66074: PUSH
66075: FOR_DOWNTO
66076: IFFALSE 66153
// begin index := rand ( 1 , array ) ;
66078: LD_ADDR_VAR 0 4
66082: PUSH
66083: LD_INT 1
66085: PPUSH
66086: LD_VAR 0 1
66090: PPUSH
66091: CALL_OW 12
66095: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66096: LD_ADDR_VAR 0 2
66100: PUSH
66101: LD_VAR 0 2
66105: PPUSH
66106: LD_VAR 0 2
66110: PUSH
66111: LD_INT 1
66113: PLUS
66114: PPUSH
66115: LD_VAR 0 1
66119: PUSH
66120: LD_VAR 0 4
66124: ARRAY
66125: PPUSH
66126: CALL_OW 2
66130: ST_TO_ADDR
// array := Delete ( array , index ) ;
66131: LD_ADDR_VAR 0 1
66135: PUSH
66136: LD_VAR 0 1
66140: PPUSH
66141: LD_VAR 0 4
66145: PPUSH
66146: CALL_OW 3
66150: ST_TO_ADDR
// end ;
66151: GO 66075
66153: POP
66154: POP
// end ;
66155: LD_VAR 0 2
66159: RET
// export function GetBaseMaterials ( base ) ; begin
66160: LD_INT 0
66162: PPUSH
// result := [ 0 , 0 , 0 ] ;
66163: LD_ADDR_VAR 0 2
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// if not base then
66182: LD_VAR 0 1
66186: NOT
66187: IFFALSE 66191
// exit ;
66189: GO 66240
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66191: LD_ADDR_VAR 0 2
66195: PUSH
66196: LD_VAR 0 1
66200: PPUSH
66201: LD_INT 1
66203: PPUSH
66204: CALL_OW 275
66208: PUSH
66209: LD_VAR 0 1
66213: PPUSH
66214: LD_INT 2
66216: PPUSH
66217: CALL_OW 275
66221: PUSH
66222: LD_VAR 0 1
66226: PPUSH
66227: LD_INT 3
66229: PPUSH
66230: CALL_OW 275
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: ST_TO_ADDR
// end ;
66240: LD_VAR 0 2
66244: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66245: LD_INT 0
66247: PPUSH
66248: PPUSH
// result := array ;
66249: LD_ADDR_VAR 0 3
66253: PUSH
66254: LD_VAR 0 1
66258: ST_TO_ADDR
// if size >= result then
66259: LD_VAR 0 2
66263: PUSH
66264: LD_VAR 0 3
66268: GREATEREQUAL
66269: IFFALSE 66273
// exit ;
66271: GO 66323
// if size then
66273: LD_VAR 0 2
66277: IFFALSE 66323
// for i := array downto size do
66279: LD_ADDR_VAR 0 4
66283: PUSH
66284: DOUBLE
66285: LD_VAR 0 1
66289: INC
66290: ST_TO_ADDR
66291: LD_VAR 0 2
66295: PUSH
66296: FOR_DOWNTO
66297: IFFALSE 66321
// result := Delete ( result , result ) ;
66299: LD_ADDR_VAR 0 3
66303: PUSH
66304: LD_VAR 0 3
66308: PPUSH
66309: LD_VAR 0 3
66313: PPUSH
66314: CALL_OW 3
66318: ST_TO_ADDR
66319: GO 66296
66321: POP
66322: POP
// end ;
66323: LD_VAR 0 3
66327: RET
// export function ComExit ( unit ) ; var tmp ; begin
66328: LD_INT 0
66330: PPUSH
66331: PPUSH
// if not IsInUnit ( unit ) then
66332: LD_VAR 0 1
66336: PPUSH
66337: CALL_OW 310
66341: NOT
66342: IFFALSE 66346
// exit ;
66344: GO 66406
// tmp := IsInUnit ( unit ) ;
66346: LD_ADDR_VAR 0 3
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: CALL_OW 310
66360: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66361: LD_VAR 0 3
66365: PPUSH
66366: CALL_OW 247
66370: PUSH
66371: LD_INT 2
66373: EQUAL
66374: IFFALSE 66387
// ComExitVehicle ( unit ) else
66376: LD_VAR 0 1
66380: PPUSH
66381: CALL_OW 121
66385: GO 66396
// ComExitBuilding ( unit ) ;
66387: LD_VAR 0 1
66391: PPUSH
66392: CALL_OW 122
// result := tmp ;
66396: LD_ADDR_VAR 0 2
66400: PUSH
66401: LD_VAR 0 3
66405: ST_TO_ADDR
// end ;
66406: LD_VAR 0 2
66410: RET
// export function ComExitAll ( units ) ; var i ; begin
66411: LD_INT 0
66413: PPUSH
66414: PPUSH
// if not units then
66415: LD_VAR 0 1
66419: NOT
66420: IFFALSE 66424
// exit ;
66422: GO 66450
// for i in units do
66424: LD_ADDR_VAR 0 3
66428: PUSH
66429: LD_VAR 0 1
66433: PUSH
66434: FOR_IN
66435: IFFALSE 66448
// ComExit ( i ) ;
66437: LD_VAR 0 3
66441: PPUSH
66442: CALL 66328 0 1
66446: GO 66434
66448: POP
66449: POP
// end ;
66450: LD_VAR 0 2
66454: RET
// export function ResetHc ; begin
66455: LD_INT 0
66457: PPUSH
// InitHc ;
66458: CALL_OW 19
// hc_importance := 0 ;
66462: LD_ADDR_OWVAR 32
66466: PUSH
66467: LD_INT 0
66469: ST_TO_ADDR
// end ;
66470: LD_VAR 0 1
66474: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66475: LD_INT 0
66477: PPUSH
66478: PPUSH
66479: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66480: LD_ADDR_VAR 0 6
66484: PUSH
66485: LD_VAR 0 1
66489: PUSH
66490: LD_VAR 0 3
66494: PLUS
66495: PUSH
66496: LD_INT 2
66498: DIV
66499: ST_TO_ADDR
// if _x < 0 then
66500: LD_VAR 0 6
66504: PUSH
66505: LD_INT 0
66507: LESS
66508: IFFALSE 66525
// _x := _x * - 1 ;
66510: LD_ADDR_VAR 0 6
66514: PUSH
66515: LD_VAR 0 6
66519: PUSH
66520: LD_INT 1
66522: NEG
66523: MUL
66524: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66525: LD_ADDR_VAR 0 7
66529: PUSH
66530: LD_VAR 0 2
66534: PUSH
66535: LD_VAR 0 4
66539: PLUS
66540: PUSH
66541: LD_INT 2
66543: DIV
66544: ST_TO_ADDR
// if _y < 0 then
66545: LD_VAR 0 7
66549: PUSH
66550: LD_INT 0
66552: LESS
66553: IFFALSE 66570
// _y := _y * - 1 ;
66555: LD_ADDR_VAR 0 7
66559: PUSH
66560: LD_VAR 0 7
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: MUL
66569: ST_TO_ADDR
// result := [ _x , _y ] ;
66570: LD_ADDR_VAR 0 5
66574: PUSH
66575: LD_VAR 0 6
66579: PUSH
66580: LD_VAR 0 7
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// end ;
66589: LD_VAR 0 5
66593: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66594: LD_INT 0
66596: PPUSH
66597: PPUSH
66598: PPUSH
66599: PPUSH
// task := GetTaskList ( unit ) ;
66600: LD_ADDR_VAR 0 7
66604: PUSH
66605: LD_VAR 0 1
66609: PPUSH
66610: CALL_OW 437
66614: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66615: LD_VAR 0 7
66619: NOT
66620: PUSH
66621: LD_VAR 0 1
66625: PPUSH
66626: LD_VAR 0 2
66630: PPUSH
66631: CALL_OW 308
66635: NOT
66636: AND
66637: IFFALSE 66641
// exit ;
66639: GO 66759
// if IsInArea ( unit , area ) then
66641: LD_VAR 0 1
66645: PPUSH
66646: LD_VAR 0 2
66650: PPUSH
66651: CALL_OW 308
66655: IFFALSE 66673
// begin ComMoveToArea ( unit , goAway ) ;
66657: LD_VAR 0 1
66661: PPUSH
66662: LD_VAR 0 3
66666: PPUSH
66667: CALL_OW 113
// exit ;
66671: GO 66759
// end ; if task [ 1 ] [ 1 ] <> M then
66673: LD_VAR 0 7
66677: PUSH
66678: LD_INT 1
66680: ARRAY
66681: PUSH
66682: LD_INT 1
66684: ARRAY
66685: PUSH
66686: LD_STRING M
66688: NONEQUAL
66689: IFFALSE 66693
// exit ;
66691: GO 66759
// x := task [ 1 ] [ 2 ] ;
66693: LD_ADDR_VAR 0 5
66697: PUSH
66698: LD_VAR 0 7
66702: PUSH
66703: LD_INT 1
66705: ARRAY
66706: PUSH
66707: LD_INT 2
66709: ARRAY
66710: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66711: LD_ADDR_VAR 0 6
66715: PUSH
66716: LD_VAR 0 7
66720: PUSH
66721: LD_INT 1
66723: ARRAY
66724: PUSH
66725: LD_INT 3
66727: ARRAY
66728: ST_TO_ADDR
// if InArea ( x , y , area ) then
66729: LD_VAR 0 5
66733: PPUSH
66734: LD_VAR 0 6
66738: PPUSH
66739: LD_VAR 0 2
66743: PPUSH
66744: CALL_OW 309
66748: IFFALSE 66759
// ComStop ( unit ) ;
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 141
// end ;
66759: LD_VAR 0 4
66763: RET
// export function Abs ( value ) ; begin
66764: LD_INT 0
66766: PPUSH
// result := value ;
66767: LD_ADDR_VAR 0 2
66771: PUSH
66772: LD_VAR 0 1
66776: ST_TO_ADDR
// if value < 0 then
66777: LD_VAR 0 1
66781: PUSH
66782: LD_INT 0
66784: LESS
66785: IFFALSE 66802
// result := value * - 1 ;
66787: LD_ADDR_VAR 0 2
66791: PUSH
66792: LD_VAR 0 1
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: MUL
66801: ST_TO_ADDR
// end ;
66802: LD_VAR 0 2
66806: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66807: LD_INT 0
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
66813: PPUSH
66814: PPUSH
66815: PPUSH
66816: PPUSH
// if not unit or not building then
66817: LD_VAR 0 1
66821: NOT
66822: PUSH
66823: LD_VAR 0 2
66827: NOT
66828: OR
66829: IFFALSE 66833
// exit ;
66831: GO 67059
// x := GetX ( building ) ;
66833: LD_ADDR_VAR 0 4
66837: PUSH
66838: LD_VAR 0 2
66842: PPUSH
66843: CALL_OW 250
66847: ST_TO_ADDR
// y := GetY ( building ) ;
66848: LD_ADDR_VAR 0 6
66852: PUSH
66853: LD_VAR 0 2
66857: PPUSH
66858: CALL_OW 251
66862: ST_TO_ADDR
// d := GetDir ( building ) ;
66863: LD_ADDR_VAR 0 8
66867: PUSH
66868: LD_VAR 0 2
66872: PPUSH
66873: CALL_OW 254
66877: ST_TO_ADDR
// r := 4 ;
66878: LD_ADDR_VAR 0 9
66882: PUSH
66883: LD_INT 4
66885: ST_TO_ADDR
// for i := 1 to 5 do
66886: LD_ADDR_VAR 0 10
66890: PUSH
66891: DOUBLE
66892: LD_INT 1
66894: DEC
66895: ST_TO_ADDR
66896: LD_INT 5
66898: PUSH
66899: FOR_TO
66900: IFFALSE 67057
// begin _x := ShiftX ( x , d , r + i ) ;
66902: LD_ADDR_VAR 0 5
66906: PUSH
66907: LD_VAR 0 4
66911: PPUSH
66912: LD_VAR 0 8
66916: PPUSH
66917: LD_VAR 0 9
66921: PUSH
66922: LD_VAR 0 10
66926: PLUS
66927: PPUSH
66928: CALL_OW 272
66932: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66933: LD_ADDR_VAR 0 7
66937: PUSH
66938: LD_VAR 0 6
66942: PPUSH
66943: LD_VAR 0 8
66947: PPUSH
66948: LD_VAR 0 9
66952: PUSH
66953: LD_VAR 0 10
66957: PLUS
66958: PPUSH
66959: CALL_OW 273
66963: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66964: LD_VAR 0 5
66968: PPUSH
66969: LD_VAR 0 7
66973: PPUSH
66974: CALL_OW 488
66978: PUSH
66979: LD_VAR 0 5
66983: PPUSH
66984: LD_VAR 0 7
66988: PPUSH
66989: CALL_OW 428
66993: PPUSH
66994: CALL_OW 247
66998: PUSH
66999: LD_INT 3
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: IN
67009: NOT
67010: AND
67011: IFFALSE 67055
// begin ComMoveXY ( unit , _x , _y ) ;
67013: LD_VAR 0 1
67017: PPUSH
67018: LD_VAR 0 5
67022: PPUSH
67023: LD_VAR 0 7
67027: PPUSH
67028: CALL_OW 111
// result := [ _x , _y ] ;
67032: LD_ADDR_VAR 0 3
67036: PUSH
67037: LD_VAR 0 5
67041: PUSH
67042: LD_VAR 0 7
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: ST_TO_ADDR
// exit ;
67051: POP
67052: POP
67053: GO 67059
// end ; end ;
67055: GO 66899
67057: POP
67058: POP
// end ;
67059: LD_VAR 0 3
67063: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67064: LD_INT 0
67066: PPUSH
67067: PPUSH
67068: PPUSH
// result := 0 ;
67069: LD_ADDR_VAR 0 3
67073: PUSH
67074: LD_INT 0
67076: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67077: LD_VAR 0 1
67081: PUSH
67082: LD_INT 0
67084: LESS
67085: PUSH
67086: LD_VAR 0 1
67090: PUSH
67091: LD_INT 8
67093: GREATER
67094: OR
67095: PUSH
67096: LD_VAR 0 2
67100: PUSH
67101: LD_INT 0
67103: LESS
67104: OR
67105: PUSH
67106: LD_VAR 0 2
67110: PUSH
67111: LD_INT 8
67113: GREATER
67114: OR
67115: IFFALSE 67119
// exit ;
67117: GO 67194
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67119: LD_ADDR_VAR 0 4
67123: PUSH
67124: LD_INT 22
67126: PUSH
67127: LD_VAR 0 2
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PPUSH
67136: CALL_OW 69
67140: PUSH
67141: FOR_IN
67142: IFFALSE 67192
// begin un := UnitShoot ( i ) ;
67144: LD_ADDR_VAR 0 5
67148: PUSH
67149: LD_VAR 0 4
67153: PPUSH
67154: CALL_OW 504
67158: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67159: LD_VAR 0 5
67163: PPUSH
67164: CALL_OW 255
67168: PUSH
67169: LD_VAR 0 1
67173: EQUAL
67174: IFFALSE 67190
// begin result := un ;
67176: LD_ADDR_VAR 0 3
67180: PUSH
67181: LD_VAR 0 5
67185: ST_TO_ADDR
// exit ;
67186: POP
67187: POP
67188: GO 67194
// end ; end ;
67190: GO 67141
67192: POP
67193: POP
// end ;
67194: LD_VAR 0 3
67198: RET
// export function GetCargoBay ( units ) ; begin
67199: LD_INT 0
67201: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67202: LD_ADDR_VAR 0 2
67206: PUSH
67207: LD_VAR 0 1
67211: PPUSH
67212: LD_INT 2
67214: PUSH
67215: LD_INT 34
67217: PUSH
67218: LD_INT 12
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 34
67227: PUSH
67228: LD_INT 51
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 34
67237: PUSH
67238: LD_INT 32
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 34
67247: PUSH
67248: LD_INT 89
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: PPUSH
67262: CALL_OW 72
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 2
67271: RET
// export function Negate ( value ) ; begin
67272: LD_INT 0
67274: PPUSH
// result := not value ;
67275: LD_ADDR_VAR 0 2
67279: PUSH
67280: LD_VAR 0 1
67284: NOT
67285: ST_TO_ADDR
// end ;
67286: LD_VAR 0 2
67290: RET
// export function Inc ( value ) ; begin
67291: LD_INT 0
67293: PPUSH
// result := value + 1 ;
67294: LD_ADDR_VAR 0 2
67298: PUSH
67299: LD_VAR 0 1
67303: PUSH
67304: LD_INT 1
67306: PLUS
67307: ST_TO_ADDR
// end ;
67308: LD_VAR 0 2
67312: RET
// export function Dec ( value ) ; begin
67313: LD_INT 0
67315: PPUSH
// result := value - 1 ;
67316: LD_ADDR_VAR 0 2
67320: PUSH
67321: LD_VAR 0 1
67325: PUSH
67326: LD_INT 1
67328: MINUS
67329: ST_TO_ADDR
// end ;
67330: LD_VAR 0 2
67334: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67335: LD_INT 0
67337: PPUSH
67338: PPUSH
67339: PPUSH
67340: PPUSH
67341: PPUSH
67342: PPUSH
67343: PPUSH
67344: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67345: LD_VAR 0 1
67349: PPUSH
67350: LD_VAR 0 2
67354: PPUSH
67355: CALL_OW 488
67359: NOT
67360: PUSH
67361: LD_VAR 0 3
67365: PPUSH
67366: LD_VAR 0 4
67370: PPUSH
67371: CALL_OW 488
67375: NOT
67376: OR
67377: IFFALSE 67390
// begin result := - 1 ;
67379: LD_ADDR_VAR 0 5
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: ST_TO_ADDR
// exit ;
67388: GO 67625
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67390: LD_ADDR_VAR 0 12
67394: PUSH
67395: LD_VAR 0 1
67399: PPUSH
67400: LD_VAR 0 2
67404: PPUSH
67405: LD_VAR 0 3
67409: PPUSH
67410: LD_VAR 0 4
67414: PPUSH
67415: CALL 66475 0 4
67419: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67420: LD_ADDR_VAR 0 11
67424: PUSH
67425: LD_VAR 0 1
67429: PPUSH
67430: LD_VAR 0 2
67434: PPUSH
67435: LD_VAR 0 12
67439: PUSH
67440: LD_INT 1
67442: ARRAY
67443: PPUSH
67444: LD_VAR 0 12
67448: PUSH
67449: LD_INT 2
67451: ARRAY
67452: PPUSH
67453: CALL_OW 298
67457: ST_TO_ADDR
// distance := 9999 ;
67458: LD_ADDR_VAR 0 10
67462: PUSH
67463: LD_INT 9999
67465: ST_TO_ADDR
// for i := 0 to 5 do
67466: LD_ADDR_VAR 0 6
67470: PUSH
67471: DOUBLE
67472: LD_INT 0
67474: DEC
67475: ST_TO_ADDR
67476: LD_INT 5
67478: PUSH
67479: FOR_TO
67480: IFFALSE 67623
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67482: LD_ADDR_VAR 0 7
67486: PUSH
67487: LD_VAR 0 1
67491: PPUSH
67492: LD_VAR 0 6
67496: PPUSH
67497: LD_VAR 0 11
67501: PPUSH
67502: CALL_OW 272
67506: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67507: LD_ADDR_VAR 0 8
67511: PUSH
67512: LD_VAR 0 2
67516: PPUSH
67517: LD_VAR 0 6
67521: PPUSH
67522: LD_VAR 0 11
67526: PPUSH
67527: CALL_OW 273
67531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67532: LD_VAR 0 7
67536: PPUSH
67537: LD_VAR 0 8
67541: PPUSH
67542: CALL_OW 488
67546: NOT
67547: IFFALSE 67551
// continue ;
67549: GO 67479
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67551: LD_ADDR_VAR 0 9
67555: PUSH
67556: LD_VAR 0 12
67560: PUSH
67561: LD_INT 1
67563: ARRAY
67564: PPUSH
67565: LD_VAR 0 12
67569: PUSH
67570: LD_INT 2
67572: ARRAY
67573: PPUSH
67574: LD_VAR 0 7
67578: PPUSH
67579: LD_VAR 0 8
67583: PPUSH
67584: CALL_OW 298
67588: ST_TO_ADDR
// if tmp < distance then
67589: LD_VAR 0 9
67593: PUSH
67594: LD_VAR 0 10
67598: LESS
67599: IFFALSE 67621
// begin result := i ;
67601: LD_ADDR_VAR 0 5
67605: PUSH
67606: LD_VAR 0 6
67610: ST_TO_ADDR
// distance := tmp ;
67611: LD_ADDR_VAR 0 10
67615: PUSH
67616: LD_VAR 0 9
67620: ST_TO_ADDR
// end ; end ;
67621: GO 67479
67623: POP
67624: POP
// end ;
67625: LD_VAR 0 5
67629: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67630: LD_INT 0
67632: PPUSH
67633: PPUSH
// if not driver or not IsInUnit ( driver ) then
67634: LD_VAR 0 1
67638: NOT
67639: PUSH
67640: LD_VAR 0 1
67644: PPUSH
67645: CALL_OW 310
67649: NOT
67650: OR
67651: IFFALSE 67655
// exit ;
67653: GO 67745
// vehicle := IsInUnit ( driver ) ;
67655: LD_ADDR_VAR 0 3
67659: PUSH
67660: LD_VAR 0 1
67664: PPUSH
67665: CALL_OW 310
67669: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67670: LD_VAR 0 1
67674: PPUSH
67675: LD_STRING \
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: PUSH
67705: LD_STRING E
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_VAR 0 3
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PPUSH
67741: CALL_OW 446
// end ;
67745: LD_VAR 0 2
67749: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67750: LD_INT 0
67752: PPUSH
67753: PPUSH
// if not driver or not IsInUnit ( driver ) then
67754: LD_VAR 0 1
67758: NOT
67759: PUSH
67760: LD_VAR 0 1
67764: PPUSH
67765: CALL_OW 310
67769: NOT
67770: OR
67771: IFFALSE 67775
// exit ;
67773: GO 67865
// vehicle := IsInUnit ( driver ) ;
67775: LD_ADDR_VAR 0 3
67779: PUSH
67780: LD_VAR 0 1
67784: PPUSH
67785: CALL_OW 310
67789: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67790: LD_VAR 0 1
67794: PPUSH
67795: LD_STRING \
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: PUSH
67825: LD_STRING E
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_VAR 0 3
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PPUSH
67861: CALL_OW 447
// end ;
67865: LD_VAR 0 2
67869: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67870: LD_INT 0
67872: PPUSH
67873: PPUSH
67874: PPUSH
// tmp := [ ] ;
67875: LD_ADDR_VAR 0 5
67879: PUSH
67880: EMPTY
67881: ST_TO_ADDR
// for i in units do
67882: LD_ADDR_VAR 0 4
67886: PUSH
67887: LD_VAR 0 1
67891: PUSH
67892: FOR_IN
67893: IFFALSE 67931
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67895: LD_ADDR_VAR 0 5
67899: PUSH
67900: LD_VAR 0 5
67904: PPUSH
67905: LD_VAR 0 5
67909: PUSH
67910: LD_INT 1
67912: PLUS
67913: PPUSH
67914: LD_VAR 0 4
67918: PPUSH
67919: CALL_OW 256
67923: PPUSH
67924: CALL_OW 2
67928: ST_TO_ADDR
67929: GO 67892
67931: POP
67932: POP
// if not tmp then
67933: LD_VAR 0 5
67937: NOT
67938: IFFALSE 67942
// exit ;
67940: GO 67990
// if asc then
67942: LD_VAR 0 2
67946: IFFALSE 67970
// result := SortListByListAsc ( units , tmp ) else
67948: LD_ADDR_VAR 0 3
67952: PUSH
67953: LD_VAR 0 1
67957: PPUSH
67958: LD_VAR 0 5
67962: PPUSH
67963: CALL_OW 76
67967: ST_TO_ADDR
67968: GO 67990
// result := SortListByListDesc ( units , tmp ) ;
67970: LD_ADDR_VAR 0 3
67974: PUSH
67975: LD_VAR 0 1
67979: PPUSH
67980: LD_VAR 0 5
67984: PPUSH
67985: CALL_OW 77
67989: ST_TO_ADDR
// end ;
67990: LD_VAR 0 3
67994: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67995: LD_INT 0
67997: PPUSH
67998: PPUSH
// task := GetTaskList ( mech ) ;
67999: LD_ADDR_VAR 0 4
68003: PUSH
68004: LD_VAR 0 1
68008: PPUSH
68009: CALL_OW 437
68013: ST_TO_ADDR
// if not task then
68014: LD_VAR 0 4
68018: NOT
68019: IFFALSE 68023
// exit ;
68021: GO 68065
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68023: LD_ADDR_VAR 0 3
68027: PUSH
68028: LD_VAR 0 4
68032: PUSH
68033: LD_INT 1
68035: ARRAY
68036: PUSH
68037: LD_INT 1
68039: ARRAY
68040: PUSH
68041: LD_STRING r
68043: EQUAL
68044: PUSH
68045: LD_VAR 0 4
68049: PUSH
68050: LD_INT 1
68052: ARRAY
68053: PUSH
68054: LD_INT 4
68056: ARRAY
68057: PUSH
68058: LD_VAR 0 2
68062: EQUAL
68063: AND
68064: ST_TO_ADDR
// end ;
68065: LD_VAR 0 3
68069: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68070: LD_INT 0
68072: PPUSH
// SetDir ( unit , d ) ;
68073: LD_VAR 0 1
68077: PPUSH
68078: LD_VAR 0 4
68082: PPUSH
68083: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68087: LD_VAR 0 1
68091: PPUSH
68092: LD_VAR 0 2
68096: PPUSH
68097: LD_VAR 0 3
68101: PPUSH
68102: LD_VAR 0 5
68106: PPUSH
68107: CALL_OW 48
// end ;
68111: LD_VAR 0 6
68115: RET
// export function ToNaturalNumber ( number ) ; begin
68116: LD_INT 0
68118: PPUSH
// result := number div 1 ;
68119: LD_ADDR_VAR 0 2
68123: PUSH
68124: LD_VAR 0 1
68128: PUSH
68129: LD_INT 1
68131: DIV
68132: ST_TO_ADDR
// if number < 0 then
68133: LD_VAR 0 1
68137: PUSH
68138: LD_INT 0
68140: LESS
68141: IFFALSE 68151
// result := 0 ;
68143: LD_ADDR_VAR 0 2
68147: PUSH
68148: LD_INT 0
68150: ST_TO_ADDR
// end ;
68151: LD_VAR 0 2
68155: RET
// export function SortByClass ( units , class ) ; var un ; begin
68156: LD_INT 0
68158: PPUSH
68159: PPUSH
// if not units or not class then
68160: LD_VAR 0 1
68164: NOT
68165: PUSH
68166: LD_VAR 0 2
68170: NOT
68171: OR
68172: IFFALSE 68176
// exit ;
68174: GO 68271
// result := [ ] ;
68176: LD_ADDR_VAR 0 3
68180: PUSH
68181: EMPTY
68182: ST_TO_ADDR
// for un in units do
68183: LD_ADDR_VAR 0 4
68187: PUSH
68188: LD_VAR 0 1
68192: PUSH
68193: FOR_IN
68194: IFFALSE 68269
// if GetClass ( un ) = class then
68196: LD_VAR 0 4
68200: PPUSH
68201: CALL_OW 257
68205: PUSH
68206: LD_VAR 0 2
68210: EQUAL
68211: IFFALSE 68238
// result := Insert ( result , 1 , un ) else
68213: LD_ADDR_VAR 0 3
68217: PUSH
68218: LD_VAR 0 3
68222: PPUSH
68223: LD_INT 1
68225: PPUSH
68226: LD_VAR 0 4
68230: PPUSH
68231: CALL_OW 2
68235: ST_TO_ADDR
68236: GO 68267
// result := Replace ( result , result + 1 , un ) ;
68238: LD_ADDR_VAR 0 3
68242: PUSH
68243: LD_VAR 0 3
68247: PPUSH
68248: LD_VAR 0 3
68252: PUSH
68253: LD_INT 1
68255: PLUS
68256: PPUSH
68257: LD_VAR 0 4
68261: PPUSH
68262: CALL_OW 1
68266: ST_TO_ADDR
68267: GO 68193
68269: POP
68270: POP
// end ;
68271: LD_VAR 0 3
68275: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68276: LD_INT 0
68278: PPUSH
68279: PPUSH
68280: PPUSH
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
// result := [ ] ;
68285: LD_ADDR_VAR 0 4
68289: PUSH
68290: EMPTY
68291: ST_TO_ADDR
// if x - r < 0 then
68292: LD_VAR 0 1
68296: PUSH
68297: LD_VAR 0 3
68301: MINUS
68302: PUSH
68303: LD_INT 0
68305: LESS
68306: IFFALSE 68318
// min_x := 0 else
68308: LD_ADDR_VAR 0 8
68312: PUSH
68313: LD_INT 0
68315: ST_TO_ADDR
68316: GO 68334
// min_x := x - r ;
68318: LD_ADDR_VAR 0 8
68322: PUSH
68323: LD_VAR 0 1
68327: PUSH
68328: LD_VAR 0 3
68332: MINUS
68333: ST_TO_ADDR
// if y - r < 0 then
68334: LD_VAR 0 2
68338: PUSH
68339: LD_VAR 0 3
68343: MINUS
68344: PUSH
68345: LD_INT 0
68347: LESS
68348: IFFALSE 68360
// min_y := 0 else
68350: LD_ADDR_VAR 0 7
68354: PUSH
68355: LD_INT 0
68357: ST_TO_ADDR
68358: GO 68376
// min_y := y - r ;
68360: LD_ADDR_VAR 0 7
68364: PUSH
68365: LD_VAR 0 2
68369: PUSH
68370: LD_VAR 0 3
68374: MINUS
68375: ST_TO_ADDR
// max_x := x + r ;
68376: LD_ADDR_VAR 0 9
68380: PUSH
68381: LD_VAR 0 1
68385: PUSH
68386: LD_VAR 0 3
68390: PLUS
68391: ST_TO_ADDR
// max_y := y + r ;
68392: LD_ADDR_VAR 0 10
68396: PUSH
68397: LD_VAR 0 2
68401: PUSH
68402: LD_VAR 0 3
68406: PLUS
68407: ST_TO_ADDR
// for _x = min_x to max_x do
68408: LD_ADDR_VAR 0 5
68412: PUSH
68413: DOUBLE
68414: LD_VAR 0 8
68418: DEC
68419: ST_TO_ADDR
68420: LD_VAR 0 9
68424: PUSH
68425: FOR_TO
68426: IFFALSE 68527
// for _y = min_y to max_y do
68428: LD_ADDR_VAR 0 6
68432: PUSH
68433: DOUBLE
68434: LD_VAR 0 7
68438: DEC
68439: ST_TO_ADDR
68440: LD_VAR 0 10
68444: PUSH
68445: FOR_TO
68446: IFFALSE 68523
// begin if not ValidHex ( _x , _y ) then
68448: LD_VAR 0 5
68452: PPUSH
68453: LD_VAR 0 6
68457: PPUSH
68458: CALL_OW 488
68462: NOT
68463: IFFALSE 68467
// continue ;
68465: GO 68445
// if GetResourceTypeXY ( _x , _y ) then
68467: LD_VAR 0 5
68471: PPUSH
68472: LD_VAR 0 6
68476: PPUSH
68477: CALL_OW 283
68481: IFFALSE 68521
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68483: LD_ADDR_VAR 0 4
68487: PUSH
68488: LD_VAR 0 4
68492: PPUSH
68493: LD_VAR 0 4
68497: PUSH
68498: LD_INT 1
68500: PLUS
68501: PPUSH
68502: LD_VAR 0 5
68506: PUSH
68507: LD_VAR 0 6
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PPUSH
68516: CALL_OW 1
68520: ST_TO_ADDR
// end ;
68521: GO 68445
68523: POP
68524: POP
68525: GO 68425
68527: POP
68528: POP
// end ;
68529: LD_VAR 0 4
68533: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68534: LD_INT 0
68536: PPUSH
68537: PPUSH
68538: PPUSH
68539: PPUSH
68540: PPUSH
68541: PPUSH
68542: PPUSH
68543: PPUSH
// if not units then
68544: LD_VAR 0 1
68548: NOT
68549: IFFALSE 68553
// exit ;
68551: GO 69077
// result := UnitFilter ( units , [ f_ok ] ) ;
68553: LD_ADDR_VAR 0 3
68557: PUSH
68558: LD_VAR 0 1
68562: PPUSH
68563: LD_INT 50
68565: PUSH
68566: EMPTY
68567: LIST
68568: PPUSH
68569: CALL_OW 72
68573: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68574: LD_ADDR_VAR 0 8
68578: PUSH
68579: LD_VAR 0 1
68583: PUSH
68584: LD_INT 1
68586: ARRAY
68587: PPUSH
68588: CALL_OW 255
68592: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68593: LD_ADDR_VAR 0 10
68597: PUSH
68598: LD_INT 29
68600: PUSH
68601: LD_INT 91
68603: PUSH
68604: LD_INT 49
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: ST_TO_ADDR
// if not result then
68612: LD_VAR 0 3
68616: NOT
68617: IFFALSE 68621
// exit ;
68619: GO 69077
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68621: LD_ADDR_VAR 0 5
68625: PUSH
68626: LD_INT 81
68628: PUSH
68629: LD_VAR 0 8
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PPUSH
68638: CALL_OW 69
68642: ST_TO_ADDR
// for i in result do
68643: LD_ADDR_VAR 0 4
68647: PUSH
68648: LD_VAR 0 3
68652: PUSH
68653: FOR_IN
68654: IFFALSE 69075
// begin tag := GetTag ( i ) + 1 ;
68656: LD_ADDR_VAR 0 9
68660: PUSH
68661: LD_VAR 0 4
68665: PPUSH
68666: CALL_OW 110
68670: PUSH
68671: LD_INT 1
68673: PLUS
68674: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68675: LD_ADDR_VAR 0 7
68679: PUSH
68680: LD_VAR 0 4
68684: PPUSH
68685: CALL_OW 250
68689: PPUSH
68690: LD_VAR 0 4
68694: PPUSH
68695: CALL_OW 251
68699: PPUSH
68700: LD_INT 6
68702: PPUSH
68703: CALL 68276 0 3
68707: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68708: LD_VAR 0 4
68712: PPUSH
68713: CALL_OW 247
68717: PUSH
68718: LD_INT 2
68720: EQUAL
68721: PUSH
68722: LD_VAR 0 7
68726: AND
68727: PUSH
68728: LD_VAR 0 4
68732: PPUSH
68733: CALL_OW 264
68737: PUSH
68738: LD_VAR 0 10
68742: IN
68743: NOT
68744: AND
68745: IFFALSE 68784
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68747: LD_VAR 0 4
68751: PPUSH
68752: LD_VAR 0 7
68756: PUSH
68757: LD_INT 1
68759: ARRAY
68760: PUSH
68761: LD_INT 1
68763: ARRAY
68764: PPUSH
68765: LD_VAR 0 7
68769: PUSH
68770: LD_INT 1
68772: ARRAY
68773: PUSH
68774: LD_INT 2
68776: ARRAY
68777: PPUSH
68778: CALL_OW 116
68782: GO 69073
// if path > tag then
68784: LD_VAR 0 2
68788: PUSH
68789: LD_VAR 0 9
68793: GREATER
68794: IFFALSE 69002
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68796: LD_ADDR_VAR 0 6
68800: PUSH
68801: LD_VAR 0 5
68805: PPUSH
68806: LD_INT 91
68808: PUSH
68809: LD_VAR 0 4
68813: PUSH
68814: LD_INT 8
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: LIST
68821: PPUSH
68822: CALL_OW 72
68826: ST_TO_ADDR
// if nearEnemy then
68827: LD_VAR 0 6
68831: IFFALSE 68900
// begin if GetWeapon ( i ) = ru_time_lapser then
68833: LD_VAR 0 4
68837: PPUSH
68838: CALL_OW 264
68842: PUSH
68843: LD_INT 49
68845: EQUAL
68846: IFFALSE 68874
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68848: LD_VAR 0 4
68852: PPUSH
68853: LD_VAR 0 6
68857: PPUSH
68858: LD_VAR 0 4
68862: PPUSH
68863: CALL_OW 74
68867: PPUSH
68868: CALL_OW 112
68872: GO 68898
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68874: LD_VAR 0 4
68878: PPUSH
68879: LD_VAR 0 6
68883: PPUSH
68884: LD_VAR 0 4
68888: PPUSH
68889: CALL_OW 74
68893: PPUSH
68894: CALL_OW 115
// end else
68898: GO 69000
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68900: LD_VAR 0 4
68904: PPUSH
68905: LD_VAR 0 2
68909: PUSH
68910: LD_VAR 0 9
68914: ARRAY
68915: PUSH
68916: LD_INT 1
68918: ARRAY
68919: PPUSH
68920: LD_VAR 0 2
68924: PUSH
68925: LD_VAR 0 9
68929: ARRAY
68930: PUSH
68931: LD_INT 2
68933: ARRAY
68934: PPUSH
68935: CALL_OW 297
68939: PUSH
68940: LD_INT 6
68942: GREATER
68943: IFFALSE 68986
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68945: LD_VAR 0 4
68949: PPUSH
68950: LD_VAR 0 2
68954: PUSH
68955: LD_VAR 0 9
68959: ARRAY
68960: PUSH
68961: LD_INT 1
68963: ARRAY
68964: PPUSH
68965: LD_VAR 0 2
68969: PUSH
68970: LD_VAR 0 9
68974: ARRAY
68975: PUSH
68976: LD_INT 2
68978: ARRAY
68979: PPUSH
68980: CALL_OW 114
68984: GO 69000
// SetTag ( i , tag ) ;
68986: LD_VAR 0 4
68990: PPUSH
68991: LD_VAR 0 9
68995: PPUSH
68996: CALL_OW 109
// end else
69000: GO 69073
// if enemy then
69002: LD_VAR 0 5
69006: IFFALSE 69073
// begin if GetWeapon ( i ) = ru_time_lapser then
69008: LD_VAR 0 4
69012: PPUSH
69013: CALL_OW 264
69017: PUSH
69018: LD_INT 49
69020: EQUAL
69021: IFFALSE 69049
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69023: LD_VAR 0 4
69027: PPUSH
69028: LD_VAR 0 5
69032: PPUSH
69033: LD_VAR 0 4
69037: PPUSH
69038: CALL_OW 74
69042: PPUSH
69043: CALL_OW 112
69047: GO 69073
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69049: LD_VAR 0 4
69053: PPUSH
69054: LD_VAR 0 5
69058: PPUSH
69059: LD_VAR 0 4
69063: PPUSH
69064: CALL_OW 74
69068: PPUSH
69069: CALL_OW 115
// end ; end ;
69073: GO 68653
69075: POP
69076: POP
// end ;
69077: LD_VAR 0 3
69081: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69082: LD_INT 0
69084: PPUSH
69085: PPUSH
69086: PPUSH
// if not unit or IsInUnit ( unit ) then
69087: LD_VAR 0 1
69091: NOT
69092: PUSH
69093: LD_VAR 0 1
69097: PPUSH
69098: CALL_OW 310
69102: OR
69103: IFFALSE 69107
// exit ;
69105: GO 69198
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69107: LD_ADDR_VAR 0 4
69111: PUSH
69112: LD_VAR 0 1
69116: PPUSH
69117: CALL_OW 250
69121: PPUSH
69122: LD_VAR 0 2
69126: PPUSH
69127: LD_INT 1
69129: PPUSH
69130: CALL_OW 272
69134: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69135: LD_ADDR_VAR 0 5
69139: PUSH
69140: LD_VAR 0 1
69144: PPUSH
69145: CALL_OW 251
69149: PPUSH
69150: LD_VAR 0 2
69154: PPUSH
69155: LD_INT 1
69157: PPUSH
69158: CALL_OW 273
69162: ST_TO_ADDR
// if ValidHex ( x , y ) then
69163: LD_VAR 0 4
69167: PPUSH
69168: LD_VAR 0 5
69172: PPUSH
69173: CALL_OW 488
69177: IFFALSE 69198
// ComTurnXY ( unit , x , y ) ;
69179: LD_VAR 0 1
69183: PPUSH
69184: LD_VAR 0 4
69188: PPUSH
69189: LD_VAR 0 5
69193: PPUSH
69194: CALL_OW 118
// end ;
69198: LD_VAR 0 3
69202: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69203: LD_INT 0
69205: PPUSH
69206: PPUSH
// result := false ;
69207: LD_ADDR_VAR 0 3
69211: PUSH
69212: LD_INT 0
69214: ST_TO_ADDR
// if not units then
69215: LD_VAR 0 2
69219: NOT
69220: IFFALSE 69224
// exit ;
69222: GO 69269
// for i in units do
69224: LD_ADDR_VAR 0 4
69228: PUSH
69229: LD_VAR 0 2
69233: PUSH
69234: FOR_IN
69235: IFFALSE 69267
// if See ( side , i ) then
69237: LD_VAR 0 1
69241: PPUSH
69242: LD_VAR 0 4
69246: PPUSH
69247: CALL_OW 292
69251: IFFALSE 69265
// begin result := true ;
69253: LD_ADDR_VAR 0 3
69257: PUSH
69258: LD_INT 1
69260: ST_TO_ADDR
// exit ;
69261: POP
69262: POP
69263: GO 69269
// end ;
69265: GO 69234
69267: POP
69268: POP
// end ;
69269: LD_VAR 0 3
69273: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69274: LD_INT 0
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
// if not unit or not points then
69280: LD_VAR 0 1
69284: NOT
69285: PUSH
69286: LD_VAR 0 2
69290: NOT
69291: OR
69292: IFFALSE 69296
// exit ;
69294: GO 69386
// dist := 99999 ;
69296: LD_ADDR_VAR 0 5
69300: PUSH
69301: LD_INT 99999
69303: ST_TO_ADDR
// for i in points do
69304: LD_ADDR_VAR 0 4
69308: PUSH
69309: LD_VAR 0 2
69313: PUSH
69314: FOR_IN
69315: IFFALSE 69384
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69317: LD_ADDR_VAR 0 6
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 4
69331: PUSH
69332: LD_INT 1
69334: ARRAY
69335: PPUSH
69336: LD_VAR 0 4
69340: PUSH
69341: LD_INT 2
69343: ARRAY
69344: PPUSH
69345: CALL_OW 297
69349: ST_TO_ADDR
// if tmpDist < dist then
69350: LD_VAR 0 6
69354: PUSH
69355: LD_VAR 0 5
69359: LESS
69360: IFFALSE 69382
// begin result := i ;
69362: LD_ADDR_VAR 0 3
69366: PUSH
69367: LD_VAR 0 4
69371: ST_TO_ADDR
// dist := tmpDist ;
69372: LD_ADDR_VAR 0 5
69376: PUSH
69377: LD_VAR 0 6
69381: ST_TO_ADDR
// end ; end ;
69382: GO 69314
69384: POP
69385: POP
// end ;
69386: LD_VAR 0 3
69390: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69391: LD_INT 0
69393: PPUSH
// uc_side := side ;
69394: LD_ADDR_OWVAR 20
69398: PUSH
69399: LD_VAR 0 1
69403: ST_TO_ADDR
// uc_nation := 3 ;
69404: LD_ADDR_OWVAR 21
69408: PUSH
69409: LD_INT 3
69411: ST_TO_ADDR
// vc_chassis := 25 ;
69412: LD_ADDR_OWVAR 37
69416: PUSH
69417: LD_INT 25
69419: ST_TO_ADDR
// vc_engine := engine_siberite ;
69420: LD_ADDR_OWVAR 39
69424: PUSH
69425: LD_INT 3
69427: ST_TO_ADDR
// vc_control := control_computer ;
69428: LD_ADDR_OWVAR 38
69432: PUSH
69433: LD_INT 3
69435: ST_TO_ADDR
// vc_weapon := 59 ;
69436: LD_ADDR_OWVAR 40
69440: PUSH
69441: LD_INT 59
69443: ST_TO_ADDR
// result := CreateVehicle ;
69444: LD_ADDR_VAR 0 5
69448: PUSH
69449: CALL_OW 45
69453: ST_TO_ADDR
// SetDir ( result , d ) ;
69454: LD_VAR 0 5
69458: PPUSH
69459: LD_VAR 0 4
69463: PPUSH
69464: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69468: LD_VAR 0 5
69472: PPUSH
69473: LD_VAR 0 2
69477: PPUSH
69478: LD_VAR 0 3
69482: PPUSH
69483: LD_INT 0
69485: PPUSH
69486: CALL_OW 48
// end ;
69490: LD_VAR 0 5
69494: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
69499: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69523: LD_VAR 0 1
69527: NOT
69528: PUSH
69529: LD_VAR 0 1
69533: PPUSH
69534: CALL_OW 264
69538: PUSH
69539: LD_INT 12
69541: PUSH
69542: LD_INT 51
69544: PUSH
69545: LD_INT 32
69547: PUSH
69548: LD_INT 89
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: IN
69557: NOT
69558: OR
69559: IFFALSE 69563
// exit ;
69561: GO 69661
// for i := 1 to 3 do
69563: LD_ADDR_VAR 0 3
69567: PUSH
69568: DOUBLE
69569: LD_INT 1
69571: DEC
69572: ST_TO_ADDR
69573: LD_INT 3
69575: PUSH
69576: FOR_TO
69577: IFFALSE 69659
// begin tmp := GetCargo ( cargo , i ) ;
69579: LD_ADDR_VAR 0 4
69583: PUSH
69584: LD_VAR 0 1
69588: PPUSH
69589: LD_VAR 0 3
69593: PPUSH
69594: CALL_OW 289
69598: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69599: LD_ADDR_VAR 0 2
69603: PUSH
69604: LD_VAR 0 2
69608: PPUSH
69609: LD_VAR 0 3
69613: PPUSH
69614: LD_VAR 0 4
69618: PPUSH
69619: CALL_OW 1
69623: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69624: LD_ADDR_VAR 0 2
69628: PUSH
69629: LD_VAR 0 2
69633: PPUSH
69634: LD_INT 4
69636: PPUSH
69637: LD_VAR 0 2
69641: PUSH
69642: LD_INT 4
69644: ARRAY
69645: PUSH
69646: LD_VAR 0 4
69650: PLUS
69651: PPUSH
69652: CALL_OW 1
69656: ST_TO_ADDR
// end ;
69657: GO 69576
69659: POP
69660: POP
// end ;
69661: LD_VAR 0 2
69665: RET
// export function Length ( array ) ; begin
69666: LD_INT 0
69668: PPUSH
// result := array + 0 ;
69669: LD_ADDR_VAR 0 2
69673: PUSH
69674: LD_VAR 0 1
69678: PUSH
69679: LD_INT 0
69681: PLUS
69682: ST_TO_ADDR
// end ;
69683: LD_VAR 0 2
69687: RET
// export function PrepareArray ( array ) ; begin
69688: LD_INT 0
69690: PPUSH
// result := array diff 0 ;
69691: LD_ADDR_VAR 0 2
69695: PUSH
69696: LD_VAR 0 1
69700: PUSH
69701: LD_INT 0
69703: DIFF
69704: ST_TO_ADDR
// if not result [ 1 ] then
69705: LD_VAR 0 2
69709: PUSH
69710: LD_INT 1
69712: ARRAY
69713: NOT
69714: IFFALSE 69734
// result := Delete ( result , 1 ) ;
69716: LD_ADDR_VAR 0 2
69720: PUSH
69721: LD_VAR 0 2
69725: PPUSH
69726: LD_INT 1
69728: PPUSH
69729: CALL_OW 3
69733: ST_TO_ADDR
// end ; end_of_file
69734: LD_VAR 0 2
69738: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69739: LD_VAR 0 1
69743: PUSH
69744: LD_INT 200
69746: DOUBLE
69747: GREATEREQUAL
69748: IFFALSE 69756
69750: LD_INT 299
69752: DOUBLE
69753: LESSEQUAL
69754: IFTRUE 69758
69756: GO 69790
69758: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69759: LD_VAR 0 1
69763: PPUSH
69764: LD_VAR 0 2
69768: PPUSH
69769: LD_VAR 0 3
69773: PPUSH
69774: LD_VAR 0 4
69778: PPUSH
69779: LD_VAR 0 5
69783: PPUSH
69784: CALL 24641 0 5
69788: GO 69867
69790: LD_INT 300
69792: DOUBLE
69793: GREATEREQUAL
69794: IFFALSE 69802
69796: LD_INT 399
69798: DOUBLE
69799: LESSEQUAL
69800: IFTRUE 69804
69802: GO 69866
69804: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69805: LD_VAR 0 1
69809: PPUSH
69810: LD_VAR 0 2
69814: PPUSH
69815: LD_VAR 0 3
69819: PPUSH
69820: LD_VAR 0 4
69824: PPUSH
69825: LD_VAR 0 5
69829: PPUSH
69830: LD_VAR 0 6
69834: PPUSH
69835: LD_VAR 0 7
69839: PPUSH
69840: LD_VAR 0 8
69844: PPUSH
69845: LD_VAR 0 9
69849: PPUSH
69850: LD_VAR 0 10
69854: PPUSH
69855: LD_VAR 0 11
69859: PPUSH
69860: CALL 20974 0 11
69864: GO 69867
69866: POP
// end ;
69867: PPOPN 11
69869: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69870: LD_VAR 0 1
69874: PPUSH
69875: LD_VAR 0 2
69879: PPUSH
69880: LD_VAR 0 3
69884: PPUSH
69885: LD_VAR 0 4
69889: PPUSH
69890: LD_VAR 0 5
69894: PPUSH
69895: CALL 24377 0 5
// end ; end_of_file
69899: PPOPN 5
69901: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69902: LD_VAR 0 1
69906: PPUSH
69907: LD_VAR 0 2
69911: PPUSH
69912: LD_VAR 0 3
69916: PPUSH
69917: LD_VAR 0 4
69921: PPUSH
69922: LD_VAR 0 5
69926: PPUSH
69927: LD_VAR 0 6
69931: PPUSH
69932: CALL 8667 0 6
// end ;
69936: PPOPN 6
69938: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69939: LD_INT 0
69941: PPUSH
// begin if not units then
69942: LD_VAR 0 1
69946: NOT
69947: IFFALSE 69951
// exit ;
69949: GO 69951
// end ;
69951: PPOPN 7
69953: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69954: CALL 8638 0 0
// end ;
69958: PPOPN 1
69960: END
