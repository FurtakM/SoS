// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 21399 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 21497 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 21505 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_crane := 88 ;
8608: LD_ADDR_EXP 58
8612: PUSH
8613: LD_INT 88
8615: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8616: LD_ADDR_EXP 53
8620: PUSH
8621: LD_INT 89
8623: ST_TO_ADDR
// us_hack := 99 ;
8624: LD_ADDR_EXP 54
8628: PUSH
8629: LD_INT 99
8631: ST_TO_ADDR
// us_artillery := 97 ;
8632: LD_ADDR_EXP 55
8636: PUSH
8637: LD_INT 97
8639: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8640: LD_ADDR_EXP 56
8644: PUSH
8645: LD_INT 91
8647: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
8648: LD_ADDR_EXP 57
8652: PUSH
8653: LD_INT 92
8655: ST_TO_ADDR
// ru_radar := 98 ;
8656: LD_ADDR_EXP 52
8660: PUSH
8661: LD_INT 98
8663: ST_TO_ADDR
// tech_Artillery := 80 ;
8664: LD_ADDR_EXP 59
8668: PUSH
8669: LD_INT 80
8671: ST_TO_ADDR
// tech_RadMat := 81 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 81
8679: ST_TO_ADDR
// tech_BasicTools := 82 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 82
8687: ST_TO_ADDR
// tech_Cargo := 83 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 83
8695: ST_TO_ADDR
// tech_Track := 84 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 84
8703: ST_TO_ADDR
// tech_Crane := 85 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 85
8711: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 86
8719: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 87
8727: ST_TO_ADDR
// end ;
8728: LD_VAR 0 1
8732: RET
// every 1 do
8733: GO 8735
8735: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8736: CALL 8605 0 0
8740: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8741: LD_VAR 0 2
8745: PUSH
8746: LD_INT 100
8748: EQUAL
8749: IFFALSE 9698
// begin if not StreamModeActive then
8751: LD_EXP 67
8755: NOT
8756: IFFALSE 8766
// StreamModeActive := true ;
8758: LD_ADDR_EXP 67
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// if p3 = 0 then
8766: LD_VAR 0 3
8770: PUSH
8771: LD_INT 0
8773: EQUAL
8774: IFFALSE 8780
// InitStreamMode ;
8776: CALL 9931 0 0
// if p3 = 1 then
8780: LD_VAR 0 3
8784: PUSH
8785: LD_INT 1
8787: EQUAL
8788: IFFALSE 8798
// sRocket := true ;
8790: LD_ADDR_EXP 72
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
// if p3 = 2 then
8798: LD_VAR 0 3
8802: PUSH
8803: LD_INT 2
8805: EQUAL
8806: IFFALSE 8816
// sSpeed := true ;
8808: LD_ADDR_EXP 71
8812: PUSH
8813: LD_INT 1
8815: ST_TO_ADDR
// if p3 = 3 then
8816: LD_VAR 0 3
8820: PUSH
8821: LD_INT 3
8823: EQUAL
8824: IFFALSE 8834
// sEngine := true ;
8826: LD_ADDR_EXP 73
8830: PUSH
8831: LD_INT 1
8833: ST_TO_ADDR
// if p3 = 4 then
8834: LD_VAR 0 3
8838: PUSH
8839: LD_INT 4
8841: EQUAL
8842: IFFALSE 8852
// sSpec := true ;
8844: LD_ADDR_EXP 70
8848: PUSH
8849: LD_INT 1
8851: ST_TO_ADDR
// if p3 = 5 then
8852: LD_VAR 0 3
8856: PUSH
8857: LD_INT 5
8859: EQUAL
8860: IFFALSE 8870
// sLevel := true ;
8862: LD_ADDR_EXP 74
8866: PUSH
8867: LD_INT 1
8869: ST_TO_ADDR
// if p3 = 6 then
8870: LD_VAR 0 3
8874: PUSH
8875: LD_INT 6
8877: EQUAL
8878: IFFALSE 8888
// sArmoury := true ;
8880: LD_ADDR_EXP 75
8884: PUSH
8885: LD_INT 1
8887: ST_TO_ADDR
// if p3 = 7 then
8888: LD_VAR 0 3
8892: PUSH
8893: LD_INT 7
8895: EQUAL
8896: IFFALSE 8906
// sRadar := true ;
8898: LD_ADDR_EXP 76
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// if p3 = 8 then
8906: LD_VAR 0 3
8910: PUSH
8911: LD_INT 8
8913: EQUAL
8914: IFFALSE 8924
// sBunker := true ;
8916: LD_ADDR_EXP 77
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// if p3 = 9 then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_INT 9
8931: EQUAL
8932: IFFALSE 8942
// sHack := true ;
8934: LD_ADDR_EXP 78
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// if p3 = 10 then
8942: LD_VAR 0 3
8946: PUSH
8947: LD_INT 10
8949: EQUAL
8950: IFFALSE 8960
// sFire := true ;
8952: LD_ADDR_EXP 79
8956: PUSH
8957: LD_INT 1
8959: ST_TO_ADDR
// if p3 = 11 then
8960: LD_VAR 0 3
8964: PUSH
8965: LD_INT 11
8967: EQUAL
8968: IFFALSE 8978
// sRefresh := true ;
8970: LD_ADDR_EXP 80
8974: PUSH
8975: LD_INT 1
8977: ST_TO_ADDR
// if p3 = 12 then
8978: LD_VAR 0 3
8982: PUSH
8983: LD_INT 12
8985: EQUAL
8986: IFFALSE 8996
// sExp := true ;
8988: LD_ADDR_EXP 81
8992: PUSH
8993: LD_INT 1
8995: ST_TO_ADDR
// if p3 = 13 then
8996: LD_VAR 0 3
9000: PUSH
9001: LD_INT 13
9003: EQUAL
9004: IFFALSE 9014
// sDepot := true ;
9006: LD_ADDR_EXP 82
9010: PUSH
9011: LD_INT 1
9013: ST_TO_ADDR
// if p3 = 14 then
9014: LD_VAR 0 3
9018: PUSH
9019: LD_INT 14
9021: EQUAL
9022: IFFALSE 9032
// sFlag := true ;
9024: LD_ADDR_EXP 83
9028: PUSH
9029: LD_INT 1
9031: ST_TO_ADDR
// if p3 = 15 then
9032: LD_VAR 0 3
9036: PUSH
9037: LD_INT 15
9039: EQUAL
9040: IFFALSE 9050
// sKamikadze := true ;
9042: LD_ADDR_EXP 91
9046: PUSH
9047: LD_INT 1
9049: ST_TO_ADDR
// if p3 = 16 then
9050: LD_VAR 0 3
9054: PUSH
9055: LD_INT 16
9057: EQUAL
9058: IFFALSE 9068
// sTroll := true ;
9060: LD_ADDR_EXP 92
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// if p3 = 17 then
9068: LD_VAR 0 3
9072: PUSH
9073: LD_INT 17
9075: EQUAL
9076: IFFALSE 9086
// sSlow := true ;
9078: LD_ADDR_EXP 93
9082: PUSH
9083: LD_INT 1
9085: ST_TO_ADDR
// if p3 = 18 then
9086: LD_VAR 0 3
9090: PUSH
9091: LD_INT 18
9093: EQUAL
9094: IFFALSE 9104
// sLack := true ;
9096: LD_ADDR_EXP 94
9100: PUSH
9101: LD_INT 1
9103: ST_TO_ADDR
// if p3 = 19 then
9104: LD_VAR 0 3
9108: PUSH
9109: LD_INT 19
9111: EQUAL
9112: IFFALSE 9122
// sTank := true ;
9114: LD_ADDR_EXP 96
9118: PUSH
9119: LD_INT 1
9121: ST_TO_ADDR
// if p3 = 20 then
9122: LD_VAR 0 3
9126: PUSH
9127: LD_INT 20
9129: EQUAL
9130: IFFALSE 9140
// sRemote := true ;
9132: LD_ADDR_EXP 97
9136: PUSH
9137: LD_INT 1
9139: ST_TO_ADDR
// if p3 = 21 then
9140: LD_VAR 0 3
9144: PUSH
9145: LD_INT 21
9147: EQUAL
9148: IFFALSE 9158
// sPowell := true ;
9150: LD_ADDR_EXP 98
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// if p3 = 22 then
9158: LD_VAR 0 3
9162: PUSH
9163: LD_INT 22
9165: EQUAL
9166: IFFALSE 9176
// sTeleport := true ;
9168: LD_ADDR_EXP 101
9172: PUSH
9173: LD_INT 1
9175: ST_TO_ADDR
// if p3 = 23 then
9176: LD_VAR 0 3
9180: PUSH
9181: LD_INT 23
9183: EQUAL
9184: IFFALSE 9194
// sOilTower := true ;
9186: LD_ADDR_EXP 103
9190: PUSH
9191: LD_INT 1
9193: ST_TO_ADDR
// if p3 = 24 then
9194: LD_VAR 0 3
9198: PUSH
9199: LD_INT 24
9201: EQUAL
9202: IFFALSE 9212
// sShovel := true ;
9204: LD_ADDR_EXP 104
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// if p3 = 25 then
9212: LD_VAR 0 3
9216: PUSH
9217: LD_INT 25
9219: EQUAL
9220: IFFALSE 9230
// sSheik := true ;
9222: LD_ADDR_EXP 105
9226: PUSH
9227: LD_INT 1
9229: ST_TO_ADDR
// if p3 = 26 then
9230: LD_VAR 0 3
9234: PUSH
9235: LD_INT 26
9237: EQUAL
9238: IFFALSE 9248
// sEarthquake := true ;
9240: LD_ADDR_EXP 107
9244: PUSH
9245: LD_INT 1
9247: ST_TO_ADDR
// if p3 = 27 then
9248: LD_VAR 0 3
9252: PUSH
9253: LD_INT 27
9255: EQUAL
9256: IFFALSE 9266
// sAI := true ;
9258: LD_ADDR_EXP 108
9262: PUSH
9263: LD_INT 1
9265: ST_TO_ADDR
// if p3 = 28 then
9266: LD_VAR 0 3
9270: PUSH
9271: LD_INT 28
9273: EQUAL
9274: IFFALSE 9284
// sCargo := true ;
9276: LD_ADDR_EXP 111
9280: PUSH
9281: LD_INT 1
9283: ST_TO_ADDR
// if p3 = 29 then
9284: LD_VAR 0 3
9288: PUSH
9289: LD_INT 29
9291: EQUAL
9292: IFFALSE 9302
// sDLaser := true ;
9294: LD_ADDR_EXP 112
9298: PUSH
9299: LD_INT 1
9301: ST_TO_ADDR
// if p3 = 30 then
9302: LD_VAR 0 3
9306: PUSH
9307: LD_INT 30
9309: EQUAL
9310: IFFALSE 9320
// sExchange := true ;
9312: LD_ADDR_EXP 113
9316: PUSH
9317: LD_INT 1
9319: ST_TO_ADDR
// if p3 = 31 then
9320: LD_VAR 0 3
9324: PUSH
9325: LD_INT 31
9327: EQUAL
9328: IFFALSE 9338
// sFac := true ;
9330: LD_ADDR_EXP 114
9334: PUSH
9335: LD_INT 1
9337: ST_TO_ADDR
// if p3 = 32 then
9338: LD_VAR 0 3
9342: PUSH
9343: LD_INT 32
9345: EQUAL
9346: IFFALSE 9356
// sPower := true ;
9348: LD_ADDR_EXP 115
9352: PUSH
9353: LD_INT 1
9355: ST_TO_ADDR
// if p3 = 33 then
9356: LD_VAR 0 3
9360: PUSH
9361: LD_INT 33
9363: EQUAL
9364: IFFALSE 9374
// sRandom := true ;
9366: LD_ADDR_EXP 116
9370: PUSH
9371: LD_INT 1
9373: ST_TO_ADDR
// if p3 = 34 then
9374: LD_VAR 0 3
9378: PUSH
9379: LD_INT 34
9381: EQUAL
9382: IFFALSE 9392
// sShield := true ;
9384: LD_ADDR_EXP 117
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// if p3 = 35 then
9392: LD_VAR 0 3
9396: PUSH
9397: LD_INT 35
9399: EQUAL
9400: IFFALSE 9410
// sTime := true ;
9402: LD_ADDR_EXP 118
9406: PUSH
9407: LD_INT 1
9409: ST_TO_ADDR
// if p3 = 36 then
9410: LD_VAR 0 3
9414: PUSH
9415: LD_INT 36
9417: EQUAL
9418: IFFALSE 9428
// sTools := true ;
9420: LD_ADDR_EXP 119
9424: PUSH
9425: LD_INT 1
9427: ST_TO_ADDR
// if p3 = 101 then
9428: LD_VAR 0 3
9432: PUSH
9433: LD_INT 101
9435: EQUAL
9436: IFFALSE 9446
// sSold := true ;
9438: LD_ADDR_EXP 84
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// if p3 = 102 then
9446: LD_VAR 0 3
9450: PUSH
9451: LD_INT 102
9453: EQUAL
9454: IFFALSE 9464
// sDiff := true ;
9456: LD_ADDR_EXP 85
9460: PUSH
9461: LD_INT 1
9463: ST_TO_ADDR
// if p3 = 103 then
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 103
9471: EQUAL
9472: IFFALSE 9482
// sFog := true ;
9474: LD_ADDR_EXP 88
9478: PUSH
9479: LD_INT 1
9481: ST_TO_ADDR
// if p3 = 104 then
9482: LD_VAR 0 3
9486: PUSH
9487: LD_INT 104
9489: EQUAL
9490: IFFALSE 9500
// sReset := true ;
9492: LD_ADDR_EXP 89
9496: PUSH
9497: LD_INT 1
9499: ST_TO_ADDR
// if p3 = 105 then
9500: LD_VAR 0 3
9504: PUSH
9505: LD_INT 105
9507: EQUAL
9508: IFFALSE 9518
// sSun := true ;
9510: LD_ADDR_EXP 90
9514: PUSH
9515: LD_INT 1
9517: ST_TO_ADDR
// if p3 = 106 then
9518: LD_VAR 0 3
9522: PUSH
9523: LD_INT 106
9525: EQUAL
9526: IFFALSE 9536
// sTiger := true ;
9528: LD_ADDR_EXP 86
9532: PUSH
9533: LD_INT 1
9535: ST_TO_ADDR
// if p3 = 107 then
9536: LD_VAR 0 3
9540: PUSH
9541: LD_INT 107
9543: EQUAL
9544: IFFALSE 9554
// sBomb := true ;
9546: LD_ADDR_EXP 87
9550: PUSH
9551: LD_INT 1
9553: ST_TO_ADDR
// if p3 = 108 then
9554: LD_VAR 0 3
9558: PUSH
9559: LD_INT 108
9561: EQUAL
9562: IFFALSE 9572
// sWound := true ;
9564: LD_ADDR_EXP 95
9568: PUSH
9569: LD_INT 1
9571: ST_TO_ADDR
// if p3 = 109 then
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 109
9579: EQUAL
9580: IFFALSE 9590
// sBetray := true ;
9582: LD_ADDR_EXP 99
9586: PUSH
9587: LD_INT 1
9589: ST_TO_ADDR
// if p3 = 110 then
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 110
9597: EQUAL
9598: IFFALSE 9608
// sContamin := true ;
9600: LD_ADDR_EXP 100
9604: PUSH
9605: LD_INT 1
9607: ST_TO_ADDR
// if p3 = 111 then
9608: LD_VAR 0 3
9612: PUSH
9613: LD_INT 111
9615: EQUAL
9616: IFFALSE 9626
// sOil := true ;
9618: LD_ADDR_EXP 102
9622: PUSH
9623: LD_INT 1
9625: ST_TO_ADDR
// if p3 = 112 then
9626: LD_VAR 0 3
9630: PUSH
9631: LD_INT 112
9633: EQUAL
9634: IFFALSE 9644
// sStu := true ;
9636: LD_ADDR_EXP 106
9640: PUSH
9641: LD_INT 1
9643: ST_TO_ADDR
// if p3 = 113 then
9644: LD_VAR 0 3
9648: PUSH
9649: LD_INT 113
9651: EQUAL
9652: IFFALSE 9662
// sBazooka := true ;
9654: LD_ADDR_EXP 109
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// if p3 = 114 then
9662: LD_VAR 0 3
9666: PUSH
9667: LD_INT 114
9669: EQUAL
9670: IFFALSE 9680
// sMortar := true ;
9672: LD_ADDR_EXP 110
9676: PUSH
9677: LD_INT 1
9679: ST_TO_ADDR
// if p3 = 115 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 115
9687: EQUAL
9688: IFFALSE 9698
// sRanger := true ;
9690: LD_ADDR_EXP 120
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
// end ; if p2 = 101 then
9698: LD_VAR 0 2
9702: PUSH
9703: LD_INT 101
9705: EQUAL
9706: IFFALSE 9909
// begin case p3 of 1 :
9708: LD_VAR 0 3
9712: PUSH
9713: LD_INT 1
9715: DOUBLE
9716: EQUAL
9717: IFTRUE 9721
9719: GO 9728
9721: POP
// hHackUnlimitedResources ; 2 :
9722: CALL 20003 0 0
9726: GO 9909
9728: LD_INT 2
9730: DOUBLE
9731: EQUAL
9732: IFTRUE 9736
9734: GO 9743
9736: POP
// hHackSetLevel10 ; 3 :
9737: CALL 20136 0 0
9741: GO 9909
9743: LD_INT 3
9745: DOUBLE
9746: EQUAL
9747: IFTRUE 9751
9749: GO 9758
9751: POP
// hHackSetLevel10YourUnits ; 4 :
9752: CALL 20221 0 0
9756: GO 9909
9758: LD_INT 4
9760: DOUBLE
9761: EQUAL
9762: IFTRUE 9766
9764: GO 9788
9766: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
9767: LD_VAR 0 4
9771: PPUSH
9772: LD_VAR 0 5
9776: PPUSH
9777: LD_VAR 0 6
9781: PPUSH
9782: CALL 20311 0 3
9786: GO 9909
9788: LD_INT 5
9790: DOUBLE
9791: EQUAL
9792: IFTRUE 9796
9794: GO 9803
9796: POP
// hHackSpawnVehicle ; 6 :
9797: CALL 20372 0 0
9801: GO 9909
9803: LD_INT 6
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9818
9811: POP
// hHackInvincible ; 7 :
9812: CALL 20918 0 0
9816: GO 9909
9818: LD_INT 7
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9833
9826: POP
// hHackInvisible ; 8 :
9827: CALL 21029 0 0
9831: GO 9909
9833: LD_INT 8
9835: DOUBLE
9836: EQUAL
9837: IFTRUE 9841
9839: GO 9848
9841: POP
// hHackChangeYourSide ; 9 :
9842: CALL 21086 0 0
9846: GO 9909
9848: LD_INT 9
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 9863
9856: POP
// hHackChangeUnitSide ; 10 :
9857: CALL 21128 0 0
9861: GO 9909
9863: LD_INT 10
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9878
9871: POP
// hHackFog ; 11 :
9872: CALL 21229 0 0
9876: GO 9909
9878: LD_INT 11
9880: DOUBLE
9881: EQUAL
9882: IFTRUE 9886
9884: GO 9893
9886: POP
// hHackApeman ; 12 :
9887: CALL 21244 0 0
9891: GO 9909
9893: LD_INT 12
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9901
9899: GO 9908
9901: POP
// hHackBoom ; end ;
9902: CALL 21329 0 0
9906: GO 9909
9908: POP
// end ; end ;
9909: PPOPN 6
9911: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
9912: GO 9914
9914: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9915: LD_STRING initStreamRollete();
9917: PPUSH
9918: CALL_OW 559
// InitStreamMode ;
9922: CALL 9931 0 0
// DefineStreamItems ( ) ;
9926: CALL 10371 0 0
// end ;
9930: END
// function InitStreamMode ; begin
9931: LD_INT 0
9933: PPUSH
// streamModeActive := false ;
9934: LD_ADDR_EXP 67
9938: PUSH
9939: LD_INT 0
9941: ST_TO_ADDR
// normalCounter := 36 ;
9942: LD_ADDR_EXP 68
9946: PUSH
9947: LD_INT 36
9949: ST_TO_ADDR
// hardcoreCounter := 16 ;
9950: LD_ADDR_EXP 69
9954: PUSH
9955: LD_INT 16
9957: ST_TO_ADDR
// sRocket := false ;
9958: LD_ADDR_EXP 72
9962: PUSH
9963: LD_INT 0
9965: ST_TO_ADDR
// sSpeed := false ;
9966: LD_ADDR_EXP 71
9970: PUSH
9971: LD_INT 0
9973: ST_TO_ADDR
// sEngine := false ;
9974: LD_ADDR_EXP 73
9978: PUSH
9979: LD_INT 0
9981: ST_TO_ADDR
// sSpec := false ;
9982: LD_ADDR_EXP 70
9986: PUSH
9987: LD_INT 0
9989: ST_TO_ADDR
// sLevel := false ;
9990: LD_ADDR_EXP 74
9994: PUSH
9995: LD_INT 0
9997: ST_TO_ADDR
// sArmoury := false ;
9998: LD_ADDR_EXP 75
10002: PUSH
10003: LD_INT 0
10005: ST_TO_ADDR
// sRadar := false ;
10006: LD_ADDR_EXP 76
10010: PUSH
10011: LD_INT 0
10013: ST_TO_ADDR
// sBunker := false ;
10014: LD_ADDR_EXP 77
10018: PUSH
10019: LD_INT 0
10021: ST_TO_ADDR
// sHack := false ;
10022: LD_ADDR_EXP 78
10026: PUSH
10027: LD_INT 0
10029: ST_TO_ADDR
// sFire := false ;
10030: LD_ADDR_EXP 79
10034: PUSH
10035: LD_INT 0
10037: ST_TO_ADDR
// sRefresh := false ;
10038: LD_ADDR_EXP 80
10042: PUSH
10043: LD_INT 0
10045: ST_TO_ADDR
// sExp := false ;
10046: LD_ADDR_EXP 81
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// sDepot := false ;
10054: LD_ADDR_EXP 82
10058: PUSH
10059: LD_INT 0
10061: ST_TO_ADDR
// sFlag := false ;
10062: LD_ADDR_EXP 83
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// sKamikadze := false ;
10070: LD_ADDR_EXP 91
10074: PUSH
10075: LD_INT 0
10077: ST_TO_ADDR
// sTroll := false ;
10078: LD_ADDR_EXP 92
10082: PUSH
10083: LD_INT 0
10085: ST_TO_ADDR
// sSlow := false ;
10086: LD_ADDR_EXP 93
10090: PUSH
10091: LD_INT 0
10093: ST_TO_ADDR
// sLack := false ;
10094: LD_ADDR_EXP 94
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// sTank := false ;
10102: LD_ADDR_EXP 96
10106: PUSH
10107: LD_INT 0
10109: ST_TO_ADDR
// sRemote := false ;
10110: LD_ADDR_EXP 97
10114: PUSH
10115: LD_INT 0
10117: ST_TO_ADDR
// sPowell := false ;
10118: LD_ADDR_EXP 98
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// sTeleport := false ;
10126: LD_ADDR_EXP 101
10130: PUSH
10131: LD_INT 0
10133: ST_TO_ADDR
// sOilTower := false ;
10134: LD_ADDR_EXP 103
10138: PUSH
10139: LD_INT 0
10141: ST_TO_ADDR
// sShovel := false ;
10142: LD_ADDR_EXP 104
10146: PUSH
10147: LD_INT 0
10149: ST_TO_ADDR
// sSheik := false ;
10150: LD_ADDR_EXP 105
10154: PUSH
10155: LD_INT 0
10157: ST_TO_ADDR
// sEarthquake := false ;
10158: LD_ADDR_EXP 107
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// sAI := false ;
10166: LD_ADDR_EXP 108
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// sCargo := false ;
10174: LD_ADDR_EXP 111
10178: PUSH
10179: LD_INT 0
10181: ST_TO_ADDR
// sDLaser := false ;
10182: LD_ADDR_EXP 112
10186: PUSH
10187: LD_INT 0
10189: ST_TO_ADDR
// sExchange := false ;
10190: LD_ADDR_EXP 113
10194: PUSH
10195: LD_INT 0
10197: ST_TO_ADDR
// sFac := false ;
10198: LD_ADDR_EXP 114
10202: PUSH
10203: LD_INT 0
10205: ST_TO_ADDR
// sPower := false ;
10206: LD_ADDR_EXP 115
10210: PUSH
10211: LD_INT 0
10213: ST_TO_ADDR
// sRandom := false ;
10214: LD_ADDR_EXP 116
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// sShield := false ;
10222: LD_ADDR_EXP 117
10226: PUSH
10227: LD_INT 0
10229: ST_TO_ADDR
// sTime := false ;
10230: LD_ADDR_EXP 118
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// sTools := false ;
10238: LD_ADDR_EXP 119
10242: PUSH
10243: LD_INT 0
10245: ST_TO_ADDR
// sSold := false ;
10246: LD_ADDR_EXP 84
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// sDiff := false ;
10254: LD_ADDR_EXP 85
10258: PUSH
10259: LD_INT 0
10261: ST_TO_ADDR
// sFog := false ;
10262: LD_ADDR_EXP 88
10266: PUSH
10267: LD_INT 0
10269: ST_TO_ADDR
// sReset := false ;
10270: LD_ADDR_EXP 89
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// sSun := false ;
10278: LD_ADDR_EXP 90
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// sTiger := false ;
10286: LD_ADDR_EXP 86
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// sBomb := false ;
10294: LD_ADDR_EXP 87
10298: PUSH
10299: LD_INT 0
10301: ST_TO_ADDR
// sWound := false ;
10302: LD_ADDR_EXP 95
10306: PUSH
10307: LD_INT 0
10309: ST_TO_ADDR
// sBetray := false ;
10310: LD_ADDR_EXP 99
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// sContamin := false ;
10318: LD_ADDR_EXP 100
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// sOil := false ;
10326: LD_ADDR_EXP 102
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// sStu := false ;
10334: LD_ADDR_EXP 106
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// sBazooka := false ;
10342: LD_ADDR_EXP 109
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// sMortar := false ;
10350: LD_ADDR_EXP 110
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
// sRanger := false ;
10358: LD_ADDR_EXP 120
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// end ;
10366: LD_VAR 0 1
10370: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10371: LD_INT 0
10373: PPUSH
10374: PPUSH
10375: PPUSH
10376: PPUSH
10377: PPUSH
// result := [ ] ;
10378: LD_ADDR_VAR 0 1
10382: PUSH
10383: EMPTY
10384: ST_TO_ADDR
// if campaign_id = 1 then
10385: LD_OWVAR 69
10389: PUSH
10390: LD_INT 1
10392: EQUAL
10393: IFFALSE 13331
// begin case mission_number of 1 :
10395: LD_OWVAR 70
10399: PUSH
10400: LD_INT 1
10402: DOUBLE
10403: EQUAL
10404: IFTRUE 10408
10406: GO 10472
10408: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
10409: LD_ADDR_VAR 0 1
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: LD_INT 4
10419: PUSH
10420: LD_INT 11
10422: PUSH
10423: LD_INT 12
10425: PUSH
10426: LD_INT 15
10428: PUSH
10429: LD_INT 16
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_INT 23
10437: PUSH
10438: LD_INT 26
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 102
10457: PUSH
10458: LD_INT 106
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: ST_TO_ADDR
10470: GO 13329
10472: LD_INT 2
10474: DOUBLE
10475: EQUAL
10476: IFTRUE 10480
10478: GO 10552
10480: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: LD_INT 4
10491: PUSH
10492: LD_INT 11
10494: PUSH
10495: LD_INT 12
10497: PUSH
10498: LD_INT 15
10500: PUSH
10501: LD_INT 16
10503: PUSH
10504: LD_INT 22
10506: PUSH
10507: LD_INT 23
10509: PUSH
10510: LD_INT 26
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 101
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 105
10532: PUSH
10533: LD_INT 106
10535: PUSH
10536: LD_INT 108
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: ST_TO_ADDR
10550: GO 13329
10552: LD_INT 3
10554: DOUBLE
10555: EQUAL
10556: IFTRUE 10560
10558: GO 10636
10560: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
10561: LD_ADDR_VAR 0 1
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: LD_INT 5
10574: PUSH
10575: LD_INT 11
10577: PUSH
10578: LD_INT 12
10580: PUSH
10581: LD_INT 15
10583: PUSH
10584: LD_INT 16
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_INT 26
10592: PUSH
10593: LD_INT 36
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 101
10610: PUSH
10611: LD_INT 102
10613: PUSH
10614: LD_INT 105
10616: PUSH
10617: LD_INT 106
10619: PUSH
10620: LD_INT 108
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: ST_TO_ADDR
10634: GO 13329
10636: LD_INT 4
10638: DOUBLE
10639: EQUAL
10640: IFTRUE 10644
10642: GO 10728
10644: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 2
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: LD_INT 5
10658: PUSH
10659: LD_INT 8
10661: PUSH
10662: LD_INT 11
10664: PUSH
10665: LD_INT 12
10667: PUSH
10668: LD_INT 15
10670: PUSH
10671: LD_INT 16
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_INT 23
10679: PUSH
10680: LD_INT 26
10682: PUSH
10683: LD_INT 36
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 101
10702: PUSH
10703: LD_INT 102
10705: PUSH
10706: LD_INT 105
10708: PUSH
10709: LD_INT 106
10711: PUSH
10712: LD_INT 108
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: ST_TO_ADDR
10726: GO 13329
10728: LD_INT 5
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10836
10736: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
10737: LD_ADDR_VAR 0 1
10741: PUSH
10742: LD_INT 2
10744: PUSH
10745: LD_INT 4
10747: PUSH
10748: LD_INT 5
10750: PUSH
10751: LD_INT 6
10753: PUSH
10754: LD_INT 8
10756: PUSH
10757: LD_INT 11
10759: PUSH
10760: LD_INT 12
10762: PUSH
10763: LD_INT 15
10765: PUSH
10766: LD_INT 16
10768: PUSH
10769: LD_INT 22
10771: PUSH
10772: LD_INT 23
10774: PUSH
10775: LD_INT 25
10777: PUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 36
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 101
10802: PUSH
10803: LD_INT 102
10805: PUSH
10806: LD_INT 105
10808: PUSH
10809: LD_INT 106
10811: PUSH
10812: LD_INT 108
10814: PUSH
10815: LD_INT 109
10817: PUSH
10818: LD_INT 112
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: ST_TO_ADDR
10834: GO 13329
10836: LD_INT 6
10838: DOUBLE
10839: EQUAL
10840: IFTRUE 10844
10842: GO 10964
10844: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
10845: LD_ADDR_VAR 0 1
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: LD_INT 4
10855: PUSH
10856: LD_INT 5
10858: PUSH
10859: LD_INT 6
10861: PUSH
10862: LD_INT 8
10864: PUSH
10865: LD_INT 11
10867: PUSH
10868: LD_INT 12
10870: PUSH
10871: LD_INT 15
10873: PUSH
10874: LD_INT 16
10876: PUSH
10877: LD_INT 20
10879: PUSH
10880: LD_INT 21
10882: PUSH
10883: LD_INT 22
10885: PUSH
10886: LD_INT 23
10888: PUSH
10889: LD_INT 25
10891: PUSH
10892: LD_INT 26
10894: PUSH
10895: LD_INT 30
10897: PUSH
10898: LD_INT 31
10900: PUSH
10901: LD_INT 32
10903: PUSH
10904: LD_INT 36
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 101
10930: PUSH
10931: LD_INT 102
10933: PUSH
10934: LD_INT 105
10936: PUSH
10937: LD_INT 106
10939: PUSH
10940: LD_INT 108
10942: PUSH
10943: LD_INT 109
10945: PUSH
10946: LD_INT 112
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: ST_TO_ADDR
10962: GO 13329
10964: LD_INT 7
10966: DOUBLE
10967: EQUAL
10968: IFTRUE 10972
10970: GO 11072
10972: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: LD_INT 2
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: LD_INT 5
10986: PUSH
10987: LD_INT 7
10989: PUSH
10990: LD_INT 11
10992: PUSH
10993: LD_INT 12
10995: PUSH
10996: LD_INT 15
10998: PUSH
10999: LD_INT 16
11001: PUSH
11002: LD_INT 20
11004: PUSH
11005: LD_INT 21
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_INT 23
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 26
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 101
11038: PUSH
11039: LD_INT 102
11041: PUSH
11042: LD_INT 103
11044: PUSH
11045: LD_INT 105
11047: PUSH
11048: LD_INT 106
11050: PUSH
11051: LD_INT 108
11053: PUSH
11054: LD_INT 112
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: ST_TO_ADDR
11070: GO 13329
11072: LD_INT 8
11074: DOUBLE
11075: EQUAL
11076: IFTRUE 11080
11078: GO 11208
11080: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: LD_INT 2
11088: PUSH
11089: LD_INT 4
11091: PUSH
11092: LD_INT 5
11094: PUSH
11095: LD_INT 6
11097: PUSH
11098: LD_INT 7
11100: PUSH
11101: LD_INT 8
11103: PUSH
11104: LD_INT 11
11106: PUSH
11107: LD_INT 12
11109: PUSH
11110: LD_INT 15
11112: PUSH
11113: LD_INT 16
11115: PUSH
11116: LD_INT 20
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_INT 23
11127: PUSH
11128: LD_INT 25
11130: PUSH
11131: LD_INT 26
11133: PUSH
11134: LD_INT 30
11136: PUSH
11137: LD_INT 31
11139: PUSH
11140: LD_INT 32
11142: PUSH
11143: LD_INT 36
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 101
11170: PUSH
11171: LD_INT 102
11173: PUSH
11174: LD_INT 103
11176: PUSH
11177: LD_INT 105
11179: PUSH
11180: LD_INT 106
11182: PUSH
11183: LD_INT 108
11185: PUSH
11186: LD_INT 109
11188: PUSH
11189: LD_INT 112
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: ST_TO_ADDR
11206: GO 13329
11208: LD_INT 9
11210: DOUBLE
11211: EQUAL
11212: IFTRUE 11216
11214: GO 11352
11216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 4
11227: PUSH
11228: LD_INT 5
11230: PUSH
11231: LD_INT 6
11233: PUSH
11234: LD_INT 7
11236: PUSH
11237: LD_INT 8
11239: PUSH
11240: LD_INT 11
11242: PUSH
11243: LD_INT 12
11245: PUSH
11246: LD_INT 15
11248: PUSH
11249: LD_INT 16
11251: PUSH
11252: LD_INT 20
11254: PUSH
11255: LD_INT 21
11257: PUSH
11258: LD_INT 22
11260: PUSH
11261: LD_INT 23
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 26
11269: PUSH
11270: LD_INT 28
11272: PUSH
11273: LD_INT 30
11275: PUSH
11276: LD_INT 31
11278: PUSH
11279: LD_INT 32
11281: PUSH
11282: LD_INT 36
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 101
11310: PUSH
11311: LD_INT 102
11313: PUSH
11314: LD_INT 103
11316: PUSH
11317: LD_INT 105
11319: PUSH
11320: LD_INT 106
11322: PUSH
11323: LD_INT 108
11325: PUSH
11326: LD_INT 109
11328: PUSH
11329: LD_INT 112
11331: PUSH
11332: LD_INT 114
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: ST_TO_ADDR
11350: GO 13329
11352: LD_INT 10
11354: DOUBLE
11355: EQUAL
11356: IFTRUE 11360
11358: GO 11544
11360: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
11361: LD_ADDR_VAR 0 1
11365: PUSH
11366: LD_INT 2
11368: PUSH
11369: LD_INT 4
11371: PUSH
11372: LD_INT 5
11374: PUSH
11375: LD_INT 6
11377: PUSH
11378: LD_INT 7
11380: PUSH
11381: LD_INT 8
11383: PUSH
11384: LD_INT 9
11386: PUSH
11387: LD_INT 10
11389: PUSH
11390: LD_INT 11
11392: PUSH
11393: LD_INT 12
11395: PUSH
11396: LD_INT 13
11398: PUSH
11399: LD_INT 14
11401: PUSH
11402: LD_INT 15
11404: PUSH
11405: LD_INT 16
11407: PUSH
11408: LD_INT 17
11410: PUSH
11411: LD_INT 18
11413: PUSH
11414: LD_INT 19
11416: PUSH
11417: LD_INT 20
11419: PUSH
11420: LD_INT 21
11422: PUSH
11423: LD_INT 22
11425: PUSH
11426: LD_INT 23
11428: PUSH
11429: LD_INT 24
11431: PUSH
11432: LD_INT 25
11434: PUSH
11435: LD_INT 26
11437: PUSH
11438: LD_INT 28
11440: PUSH
11441: LD_INT 30
11443: PUSH
11444: LD_INT 31
11446: PUSH
11447: LD_INT 32
11449: PUSH
11450: LD_INT 36
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 101
11486: PUSH
11487: LD_INT 102
11489: PUSH
11490: LD_INT 103
11492: PUSH
11493: LD_INT 104
11495: PUSH
11496: LD_INT 105
11498: PUSH
11499: LD_INT 106
11501: PUSH
11502: LD_INT 107
11504: PUSH
11505: LD_INT 108
11507: PUSH
11508: LD_INT 109
11510: PUSH
11511: LD_INT 110
11513: PUSH
11514: LD_INT 111
11516: PUSH
11517: LD_INT 112
11519: PUSH
11520: LD_INT 114
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: ST_TO_ADDR
11542: GO 13329
11544: LD_INT 11
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11744
11552: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
11553: LD_ADDR_VAR 0 1
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 3
11563: PUSH
11564: LD_INT 4
11566: PUSH
11567: LD_INT 5
11569: PUSH
11570: LD_INT 6
11572: PUSH
11573: LD_INT 7
11575: PUSH
11576: LD_INT 8
11578: PUSH
11579: LD_INT 9
11581: PUSH
11582: LD_INT 10
11584: PUSH
11585: LD_INT 11
11587: PUSH
11588: LD_INT 12
11590: PUSH
11591: LD_INT 13
11593: PUSH
11594: LD_INT 14
11596: PUSH
11597: LD_INT 15
11599: PUSH
11600: LD_INT 16
11602: PUSH
11603: LD_INT 17
11605: PUSH
11606: LD_INT 18
11608: PUSH
11609: LD_INT 19
11611: PUSH
11612: LD_INT 20
11614: PUSH
11615: LD_INT 21
11617: PUSH
11618: LD_INT 22
11620: PUSH
11621: LD_INT 23
11623: PUSH
11624: LD_INT 24
11626: PUSH
11627: LD_INT 25
11629: PUSH
11630: LD_INT 26
11632: PUSH
11633: LD_INT 28
11635: PUSH
11636: LD_INT 30
11638: PUSH
11639: LD_INT 31
11641: PUSH
11642: LD_INT 32
11644: PUSH
11645: LD_INT 34
11647: PUSH
11648: LD_INT 36
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 101
11686: PUSH
11687: LD_INT 102
11689: PUSH
11690: LD_INT 103
11692: PUSH
11693: LD_INT 104
11695: PUSH
11696: LD_INT 105
11698: PUSH
11699: LD_INT 106
11701: PUSH
11702: LD_INT 107
11704: PUSH
11705: LD_INT 108
11707: PUSH
11708: LD_INT 109
11710: PUSH
11711: LD_INT 110
11713: PUSH
11714: LD_INT 111
11716: PUSH
11717: LD_INT 112
11719: PUSH
11720: LD_INT 114
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: ST_TO_ADDR
11742: GO 13329
11744: LD_INT 12
11746: DOUBLE
11747: EQUAL
11748: IFTRUE 11752
11750: GO 11960
11752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
11753: LD_ADDR_VAR 0 1
11757: PUSH
11758: LD_INT 1
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: LD_INT 3
11766: PUSH
11767: LD_INT 4
11769: PUSH
11770: LD_INT 5
11772: PUSH
11773: LD_INT 6
11775: PUSH
11776: LD_INT 7
11778: PUSH
11779: LD_INT 8
11781: PUSH
11782: LD_INT 9
11784: PUSH
11785: LD_INT 10
11787: PUSH
11788: LD_INT 11
11790: PUSH
11791: LD_INT 12
11793: PUSH
11794: LD_INT 13
11796: PUSH
11797: LD_INT 14
11799: PUSH
11800: LD_INT 15
11802: PUSH
11803: LD_INT 16
11805: PUSH
11806: LD_INT 17
11808: PUSH
11809: LD_INT 18
11811: PUSH
11812: LD_INT 19
11814: PUSH
11815: LD_INT 20
11817: PUSH
11818: LD_INT 21
11820: PUSH
11821: LD_INT 22
11823: PUSH
11824: LD_INT 23
11826: PUSH
11827: LD_INT 24
11829: PUSH
11830: LD_INT 25
11832: PUSH
11833: LD_INT 26
11835: PUSH
11836: LD_INT 27
11838: PUSH
11839: LD_INT 28
11841: PUSH
11842: LD_INT 30
11844: PUSH
11845: LD_INT 31
11847: PUSH
11848: LD_INT 32
11850: PUSH
11851: LD_INT 33
11853: PUSH
11854: LD_INT 34
11856: PUSH
11857: LD_INT 36
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 101
11898: PUSH
11899: LD_INT 102
11901: PUSH
11902: LD_INT 103
11904: PUSH
11905: LD_INT 104
11907: PUSH
11908: LD_INT 105
11910: PUSH
11911: LD_INT 106
11913: PUSH
11914: LD_INT 107
11916: PUSH
11917: LD_INT 108
11919: PUSH
11920: LD_INT 109
11922: PUSH
11923: LD_INT 110
11925: PUSH
11926: LD_INT 111
11928: PUSH
11929: LD_INT 112
11931: PUSH
11932: LD_INT 113
11934: PUSH
11935: LD_INT 114
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: ST_TO_ADDR
11958: GO 13329
11960: LD_INT 13
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12164
11968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
11969: LD_ADDR_VAR 0 1
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: LD_INT 3
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: LD_INT 5
11988: PUSH
11989: LD_INT 8
11991: PUSH
11992: LD_INT 9
11994: PUSH
11995: LD_INT 10
11997: PUSH
11998: LD_INT 11
12000: PUSH
12001: LD_INT 12
12003: PUSH
12004: LD_INT 14
12006: PUSH
12007: LD_INT 15
12009: PUSH
12010: LD_INT 16
12012: PUSH
12013: LD_INT 17
12015: PUSH
12016: LD_INT 18
12018: PUSH
12019: LD_INT 19
12021: PUSH
12022: LD_INT 20
12024: PUSH
12025: LD_INT 21
12027: PUSH
12028: LD_INT 22
12030: PUSH
12031: LD_INT 23
12033: PUSH
12034: LD_INT 24
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 26
12042: PUSH
12043: LD_INT 27
12045: PUSH
12046: LD_INT 28
12048: PUSH
12049: LD_INT 30
12051: PUSH
12052: LD_INT 31
12054: PUSH
12055: LD_INT 32
12057: PUSH
12058: LD_INT 33
12060: PUSH
12061: LD_INT 34
12063: PUSH
12064: LD_INT 36
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 101
12102: PUSH
12103: LD_INT 102
12105: PUSH
12106: LD_INT 103
12108: PUSH
12109: LD_INT 104
12111: PUSH
12112: LD_INT 105
12114: PUSH
12115: LD_INT 106
12117: PUSH
12118: LD_INT 107
12120: PUSH
12121: LD_INT 108
12123: PUSH
12124: LD_INT 109
12126: PUSH
12127: LD_INT 110
12129: PUSH
12130: LD_INT 111
12132: PUSH
12133: LD_INT 112
12135: PUSH
12136: LD_INT 113
12138: PUSH
12139: LD_INT 114
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: ST_TO_ADDR
12162: GO 13329
12164: LD_INT 14
12166: DOUBLE
12167: EQUAL
12168: IFTRUE 12172
12170: GO 12384
12172: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12173: LD_ADDR_VAR 0 1
12177: PUSH
12178: LD_INT 1
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: LD_INT 4
12189: PUSH
12190: LD_INT 5
12192: PUSH
12193: LD_INT 6
12195: PUSH
12196: LD_INT 7
12198: PUSH
12199: LD_INT 8
12201: PUSH
12202: LD_INT 9
12204: PUSH
12205: LD_INT 10
12207: PUSH
12208: LD_INT 11
12210: PUSH
12211: LD_INT 12
12213: PUSH
12214: LD_INT 13
12216: PUSH
12217: LD_INT 14
12219: PUSH
12220: LD_INT 15
12222: PUSH
12223: LD_INT 16
12225: PUSH
12226: LD_INT 17
12228: PUSH
12229: LD_INT 18
12231: PUSH
12232: LD_INT 19
12234: PUSH
12235: LD_INT 20
12237: PUSH
12238: LD_INT 21
12240: PUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 23
12246: PUSH
12247: LD_INT 24
12249: PUSH
12250: LD_INT 25
12252: PUSH
12253: LD_INT 26
12255: PUSH
12256: LD_INT 27
12258: PUSH
12259: LD_INT 28
12261: PUSH
12262: LD_INT 29
12264: PUSH
12265: LD_INT 30
12267: PUSH
12268: LD_INT 31
12270: PUSH
12271: LD_INT 32
12273: PUSH
12274: LD_INT 33
12276: PUSH
12277: LD_INT 34
12279: PUSH
12280: LD_INT 36
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 101
12322: PUSH
12323: LD_INT 102
12325: PUSH
12326: LD_INT 103
12328: PUSH
12329: LD_INT 104
12331: PUSH
12332: LD_INT 105
12334: PUSH
12335: LD_INT 106
12337: PUSH
12338: LD_INT 107
12340: PUSH
12341: LD_INT 108
12343: PUSH
12344: LD_INT 109
12346: PUSH
12347: LD_INT 110
12349: PUSH
12350: LD_INT 111
12352: PUSH
12353: LD_INT 112
12355: PUSH
12356: LD_INT 113
12358: PUSH
12359: LD_INT 114
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: ST_TO_ADDR
12382: GO 13329
12384: LD_INT 15
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12604
12392: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
12393: LD_ADDR_VAR 0 1
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 3
12406: PUSH
12407: LD_INT 4
12409: PUSH
12410: LD_INT 5
12412: PUSH
12413: LD_INT 6
12415: PUSH
12416: LD_INT 7
12418: PUSH
12419: LD_INT 8
12421: PUSH
12422: LD_INT 9
12424: PUSH
12425: LD_INT 10
12427: PUSH
12428: LD_INT 11
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: LD_INT 13
12436: PUSH
12437: LD_INT 14
12439: PUSH
12440: LD_INT 15
12442: PUSH
12443: LD_INT 16
12445: PUSH
12446: LD_INT 17
12448: PUSH
12449: LD_INT 18
12451: PUSH
12452: LD_INT 19
12454: PUSH
12455: LD_INT 20
12457: PUSH
12458: LD_INT 21
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 23
12466: PUSH
12467: LD_INT 24
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 26
12475: PUSH
12476: LD_INT 27
12478: PUSH
12479: LD_INT 28
12481: PUSH
12482: LD_INT 29
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 31
12490: PUSH
12491: LD_INT 32
12493: PUSH
12494: LD_INT 33
12496: PUSH
12497: LD_INT 34
12499: PUSH
12500: LD_INT 36
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 102
12545: PUSH
12546: LD_INT 103
12548: PUSH
12549: LD_INT 104
12551: PUSH
12552: LD_INT 105
12554: PUSH
12555: LD_INT 106
12557: PUSH
12558: LD_INT 107
12560: PUSH
12561: LD_INT 108
12563: PUSH
12564: LD_INT 109
12566: PUSH
12567: LD_INT 110
12569: PUSH
12570: LD_INT 111
12572: PUSH
12573: LD_INT 112
12575: PUSH
12576: LD_INT 113
12578: PUSH
12579: LD_INT 114
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: ST_TO_ADDR
12602: GO 13329
12604: LD_INT 16
12606: DOUBLE
12607: EQUAL
12608: IFTRUE 12612
12610: GO 12736
12612: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 4
12623: PUSH
12624: LD_INT 5
12626: PUSH
12627: LD_INT 7
12629: PUSH
12630: LD_INT 11
12632: PUSH
12633: LD_INT 12
12635: PUSH
12636: LD_INT 15
12638: PUSH
12639: LD_INT 16
12641: PUSH
12642: LD_INT 20
12644: PUSH
12645: LD_INT 21
12647: PUSH
12648: LD_INT 22
12650: PUSH
12651: LD_INT 23
12653: PUSH
12654: LD_INT 25
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 30
12662: PUSH
12663: LD_INT 31
12665: PUSH
12666: LD_INT 32
12668: PUSH
12669: LD_INT 33
12671: PUSH
12672: LD_INT 34
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 101
12698: PUSH
12699: LD_INT 102
12701: PUSH
12702: LD_INT 103
12704: PUSH
12705: LD_INT 106
12707: PUSH
12708: LD_INT 108
12710: PUSH
12711: LD_INT 112
12713: PUSH
12714: LD_INT 113
12716: PUSH
12717: LD_INT 114
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 13329
12736: LD_INT 17
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12956
12744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: LD_INT 3
12758: PUSH
12759: LD_INT 4
12761: PUSH
12762: LD_INT 5
12764: PUSH
12765: LD_INT 6
12767: PUSH
12768: LD_INT 7
12770: PUSH
12771: LD_INT 8
12773: PUSH
12774: LD_INT 9
12776: PUSH
12777: LD_INT 10
12779: PUSH
12780: LD_INT 11
12782: PUSH
12783: LD_INT 12
12785: PUSH
12786: LD_INT 13
12788: PUSH
12789: LD_INT 14
12791: PUSH
12792: LD_INT 15
12794: PUSH
12795: LD_INT 16
12797: PUSH
12798: LD_INT 17
12800: PUSH
12801: LD_INT 18
12803: PUSH
12804: LD_INT 19
12806: PUSH
12807: LD_INT 20
12809: PUSH
12810: LD_INT 21
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 23
12818: PUSH
12819: LD_INT 24
12821: PUSH
12822: LD_INT 25
12824: PUSH
12825: LD_INT 26
12827: PUSH
12828: LD_INT 27
12830: PUSH
12831: LD_INT 28
12833: PUSH
12834: LD_INT 29
12836: PUSH
12837: LD_INT 30
12839: PUSH
12840: LD_INT 31
12842: PUSH
12843: LD_INT 32
12845: PUSH
12846: LD_INT 33
12848: PUSH
12849: LD_INT 34
12851: PUSH
12852: LD_INT 36
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 101
12894: PUSH
12895: LD_INT 102
12897: PUSH
12898: LD_INT 103
12900: PUSH
12901: LD_INT 104
12903: PUSH
12904: LD_INT 105
12906: PUSH
12907: LD_INT 106
12909: PUSH
12910: LD_INT 107
12912: PUSH
12913: LD_INT 108
12915: PUSH
12916: LD_INT 109
12918: PUSH
12919: LD_INT 110
12921: PUSH
12922: LD_INT 111
12924: PUSH
12925: LD_INT 112
12927: PUSH
12928: LD_INT 113
12930: PUSH
12931: LD_INT 114
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: ST_TO_ADDR
12954: GO 13329
12956: LD_INT 18
12958: DOUBLE
12959: EQUAL
12960: IFTRUE 12964
12962: GO 13100
12964: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_INT 2
12972: PUSH
12973: LD_INT 4
12975: PUSH
12976: LD_INT 5
12978: PUSH
12979: LD_INT 7
12981: PUSH
12982: LD_INT 11
12984: PUSH
12985: LD_INT 12
12987: PUSH
12988: LD_INT 15
12990: PUSH
12991: LD_INT 16
12993: PUSH
12994: LD_INT 20
12996: PUSH
12997: LD_INT 21
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 23
13005: PUSH
13006: LD_INT 25
13008: PUSH
13009: LD_INT 26
13011: PUSH
13012: LD_INT 30
13014: PUSH
13015: LD_INT 31
13017: PUSH
13018: LD_INT 32
13020: PUSH
13021: LD_INT 33
13023: PUSH
13024: LD_INT 34
13026: PUSH
13027: LD_INT 35
13029: PUSH
13030: LD_INT 36
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 101
13058: PUSH
13059: LD_INT 102
13061: PUSH
13062: LD_INT 103
13064: PUSH
13065: LD_INT 106
13067: PUSH
13068: LD_INT 108
13070: PUSH
13071: LD_INT 112
13073: PUSH
13074: LD_INT 113
13076: PUSH
13077: LD_INT 114
13079: PUSH
13080: LD_INT 115
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: ST_TO_ADDR
13098: GO 13329
13100: LD_INT 19
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13328
13108: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_INT 1
13116: PUSH
13117: LD_INT 2
13119: PUSH
13120: LD_INT 3
13122: PUSH
13123: LD_INT 4
13125: PUSH
13126: LD_INT 5
13128: PUSH
13129: LD_INT 6
13131: PUSH
13132: LD_INT 7
13134: PUSH
13135: LD_INT 8
13137: PUSH
13138: LD_INT 9
13140: PUSH
13141: LD_INT 10
13143: PUSH
13144: LD_INT 11
13146: PUSH
13147: LD_INT 12
13149: PUSH
13150: LD_INT 13
13152: PUSH
13153: LD_INT 14
13155: PUSH
13156: LD_INT 15
13158: PUSH
13159: LD_INT 16
13161: PUSH
13162: LD_INT 17
13164: PUSH
13165: LD_INT 18
13167: PUSH
13168: LD_INT 19
13170: PUSH
13171: LD_INT 20
13173: PUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 22
13179: PUSH
13180: LD_INT 23
13182: PUSH
13183: LD_INT 24
13185: PUSH
13186: LD_INT 25
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 27
13194: PUSH
13195: LD_INT 28
13197: PUSH
13198: LD_INT 29
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: LD_INT 31
13206: PUSH
13207: LD_INT 32
13209: PUSH
13210: LD_INT 33
13212: PUSH
13213: LD_INT 34
13215: PUSH
13216: LD_INT 35
13218: PUSH
13219: LD_INT 36
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 101
13262: PUSH
13263: LD_INT 102
13265: PUSH
13266: LD_INT 103
13268: PUSH
13269: LD_INT 104
13271: PUSH
13272: LD_INT 105
13274: PUSH
13275: LD_INT 106
13277: PUSH
13278: LD_INT 107
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 109
13286: PUSH
13287: LD_INT 110
13289: PUSH
13290: LD_INT 111
13292: PUSH
13293: LD_INT 112
13295: PUSH
13296: LD_INT 113
13298: PUSH
13299: LD_INT 114
13301: PUSH
13302: LD_INT 115
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
13326: GO 13329
13328: POP
// end else
13329: GO 13548
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
13331: LD_ADDR_VAR 0 1
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: LD_INT 3
13344: PUSH
13345: LD_INT 4
13347: PUSH
13348: LD_INT 5
13350: PUSH
13351: LD_INT 6
13353: PUSH
13354: LD_INT 7
13356: PUSH
13357: LD_INT 8
13359: PUSH
13360: LD_INT 9
13362: PUSH
13363: LD_INT 10
13365: PUSH
13366: LD_INT 11
13368: PUSH
13369: LD_INT 12
13371: PUSH
13372: LD_INT 13
13374: PUSH
13375: LD_INT 14
13377: PUSH
13378: LD_INT 15
13380: PUSH
13381: LD_INT 16
13383: PUSH
13384: LD_INT 17
13386: PUSH
13387: LD_INT 18
13389: PUSH
13390: LD_INT 19
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 24
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 26
13413: PUSH
13414: LD_INT 27
13416: PUSH
13417: LD_INT 28
13419: PUSH
13420: LD_INT 29
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: LD_INT 31
13428: PUSH
13429: LD_INT 32
13431: PUSH
13432: LD_INT 33
13434: PUSH
13435: LD_INT 34
13437: PUSH
13438: LD_INT 35
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 101
13484: PUSH
13485: LD_INT 102
13487: PUSH
13488: LD_INT 103
13490: PUSH
13491: LD_INT 104
13493: PUSH
13494: LD_INT 105
13496: PUSH
13497: LD_INT 106
13499: PUSH
13500: LD_INT 107
13502: PUSH
13503: LD_INT 108
13505: PUSH
13506: LD_INT 109
13508: PUSH
13509: LD_INT 110
13511: PUSH
13512: LD_INT 111
13514: PUSH
13515: LD_INT 112
13517: PUSH
13518: LD_INT 113
13520: PUSH
13521: LD_INT 114
13523: PUSH
13524: LD_INT 115
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: ST_TO_ADDR
// if result then
13548: LD_VAR 0 1
13552: IFFALSE 13841
// begin normal :=  ;
13554: LD_ADDR_VAR 0 3
13558: PUSH
13559: LD_STRING 
13561: ST_TO_ADDR
// hardcore :=  ;
13562: LD_ADDR_VAR 0 4
13566: PUSH
13567: LD_STRING 
13569: ST_TO_ADDR
// for i = 1 to normalCounter do
13570: LD_ADDR_VAR 0 5
13574: PUSH
13575: DOUBLE
13576: LD_INT 1
13578: DEC
13579: ST_TO_ADDR
13580: LD_EXP 68
13584: PUSH
13585: FOR_TO
13586: IFFALSE 13687
// begin tmp := 0 ;
13588: LD_ADDR_VAR 0 2
13592: PUSH
13593: LD_STRING 0
13595: ST_TO_ADDR
// if result [ 1 ] then
13596: LD_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: IFFALSE 13669
// if result [ 1 ] [ 1 ] = i then
13606: LD_VAR 0 1
13610: PUSH
13611: LD_INT 1
13613: ARRAY
13614: PUSH
13615: LD_INT 1
13617: ARRAY
13618: PUSH
13619: LD_VAR 0 5
13623: EQUAL
13624: IFFALSE 13669
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_INT 1
13638: PPUSH
13639: LD_VAR 0 1
13643: PUSH
13644: LD_INT 1
13646: ARRAY
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: CALL_OW 3
13655: PPUSH
13656: CALL_OW 1
13660: ST_TO_ADDR
// tmp := 1 ;
13661: LD_ADDR_VAR 0 2
13665: PUSH
13666: LD_STRING 1
13668: ST_TO_ADDR
// end ; normal := normal & tmp ;
13669: LD_ADDR_VAR 0 3
13673: PUSH
13674: LD_VAR 0 3
13678: PUSH
13679: LD_VAR 0 2
13683: STR
13684: ST_TO_ADDR
// end ;
13685: GO 13585
13687: POP
13688: POP
// for i = 1 to hardcoreCounter do
13689: LD_ADDR_VAR 0 5
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_EXP 69
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13810
// begin tmp := 0 ;
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_STRING 0
13714: ST_TO_ADDR
// if result [ 2 ] then
13715: LD_VAR 0 1
13719: PUSH
13720: LD_INT 2
13722: ARRAY
13723: IFFALSE 13792
// if result [ 2 ] [ 1 ] = 100 + i then
13725: LD_VAR 0 1
13729: PUSH
13730: LD_INT 2
13732: ARRAY
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PUSH
13738: LD_INT 100
13740: PUSH
13741: LD_VAR 0 5
13745: PLUS
13746: EQUAL
13747: IFFALSE 13792
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13749: LD_ADDR_VAR 0 1
13753: PUSH
13754: LD_VAR 0 1
13758: PPUSH
13759: LD_INT 2
13761: PPUSH
13762: LD_VAR 0 1
13766: PUSH
13767: LD_INT 2
13769: ARRAY
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 3
13778: PPUSH
13779: CALL_OW 1
13783: ST_TO_ADDR
// tmp := 1 ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_STRING 1
13791: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_VAR 0 4
13801: PUSH
13802: LD_VAR 0 2
13806: STR
13807: ST_TO_ADDR
// end ;
13808: GO 13704
13810: POP
13811: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13812: LD_STRING getStreamItemsFromMission("
13814: PUSH
13815: LD_VAR 0 3
13819: STR
13820: PUSH
13821: LD_STRING ","
13823: STR
13824: PUSH
13825: LD_VAR 0 4
13829: STR
13830: PUSH
13831: LD_STRING ")
13833: STR
13834: PPUSH
13835: CALL_OW 559
// end else
13839: GO 13848
// ToLua ( getStreamItemsFromMission("","") ) ;
13841: LD_STRING getStreamItemsFromMission("","")
13843: PPUSH
13844: CALL_OW 559
// end ;
13848: LD_VAR 0 1
13852: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13853: LD_EXP 67
13857: PUSH
13858: LD_EXP 72
13862: AND
13863: IFFALSE 13987
13865: GO 13867
13867: DISABLE
13868: LD_INT 0
13870: PPUSH
13871: PPUSH
// begin enable ;
13872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13873: LD_ADDR_VAR 0 2
13877: PUSH
13878: LD_INT 22
13880: PUSH
13881: LD_OWVAR 2
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 2
13892: PUSH
13893: LD_INT 34
13895: PUSH
13896: LD_INT 7
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 34
13905: PUSH
13906: LD_INT 45
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 34
13915: PUSH
13916: LD_INT 28
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 34
13925: PUSH
13926: LD_INT 47
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 69
13948: ST_TO_ADDR
// if not tmp then
13949: LD_VAR 0 2
13953: NOT
13954: IFFALSE 13958
// exit ;
13956: GO 13987
// for i in tmp do
13958: LD_ADDR_VAR 0 1
13962: PUSH
13963: LD_VAR 0 2
13967: PUSH
13968: FOR_IN
13969: IFFALSE 13985
// begin SetLives ( i , 0 ) ;
13971: LD_VAR 0 1
13975: PPUSH
13976: LD_INT 0
13978: PPUSH
13979: CALL_OW 234
// end ;
13983: GO 13968
13985: POP
13986: POP
// end ;
13987: PPOPN 2
13989: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13990: LD_EXP 67
13994: PUSH
13995: LD_EXP 73
13999: AND
14000: IFFALSE 14084
14002: GO 14004
14004: DISABLE
14005: LD_INT 0
14007: PPUSH
14008: PPUSH
// begin enable ;
14009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14010: LD_ADDR_VAR 0 2
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_OWVAR 2
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 32
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: ST_TO_ADDR
// if not tmp then
14046: LD_VAR 0 2
14050: NOT
14051: IFFALSE 14055
// exit ;
14053: GO 14084
// for i in tmp do
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: LD_VAR 0 2
14064: PUSH
14065: FOR_IN
14066: IFFALSE 14082
// begin SetLives ( i , 0 ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_INT 0
14075: PPUSH
14076: CALL_OW 234
// end ;
14080: GO 14065
14082: POP
14083: POP
// end ;
14084: PPOPN 2
14086: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14087: LD_EXP 67
14091: PUSH
14092: LD_EXP 70
14096: AND
14097: IFFALSE 14190
14099: GO 14101
14101: DISABLE
14102: LD_INT 0
14104: PPUSH
// begin enable ;
14105: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_INT 22
14113: PUSH
14114: LD_OWVAR 2
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 2
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 5
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 9
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 8
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 69
14170: PUSH
14171: FOR_IN
14172: IFFALSE 14188
// begin SetClass ( i , 1 ) ;
14174: LD_VAR 0 1
14178: PPUSH
14179: LD_INT 1
14181: PPUSH
14182: CALL_OW 336
// end ;
14186: GO 14171
14188: POP
14189: POP
// end ;
14190: PPOPN 1
14192: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14193: LD_EXP 67
14197: PUSH
14198: LD_EXP 71
14202: AND
14203: PUSH
14204: LD_OWVAR 65
14208: PUSH
14209: LD_INT 7
14211: LESS
14212: AND
14213: IFFALSE 14227
14215: GO 14217
14217: DISABLE
// begin enable ;
14218: ENABLE
// game_speed := 7 ;
14219: LD_ADDR_OWVAR 65
14223: PUSH
14224: LD_INT 7
14226: ST_TO_ADDR
// end ;
14227: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14228: LD_EXP 67
14232: PUSH
14233: LD_EXP 74
14237: AND
14238: IFFALSE 14440
14240: GO 14242
14242: DISABLE
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
14247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14248: LD_ADDR_VAR 0 3
14252: PUSH
14253: LD_INT 81
14255: PUSH
14256: LD_OWVAR 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 1
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: ST_TO_ADDR
// if not tmp then
14284: LD_VAR 0 3
14288: NOT
14289: IFFALSE 14293
// exit ;
14291: GO 14440
// if tmp > 5 then
14293: LD_VAR 0 3
14297: PUSH
14298: LD_INT 5
14300: GREATER
14301: IFFALSE 14313
// k := 5 else
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_INT 5
14310: ST_TO_ADDR
14311: GO 14323
// k := tmp ;
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: LD_VAR 0 3
14322: ST_TO_ADDR
// for i := 1 to k do
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: DOUBLE
14329: LD_INT 1
14331: DEC
14332: ST_TO_ADDR
14333: LD_VAR 0 2
14337: PUSH
14338: FOR_TO
14339: IFFALSE 14438
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14341: LD_VAR 0 3
14345: PUSH
14346: LD_VAR 0 1
14350: ARRAY
14351: PPUSH
14352: LD_VAR 0 1
14356: PUSH
14357: LD_INT 4
14359: MOD
14360: PUSH
14361: LD_INT 1
14363: PLUS
14364: PPUSH
14365: CALL_OW 259
14369: PUSH
14370: LD_INT 10
14372: LESS
14373: IFFALSE 14436
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14375: LD_VAR 0 3
14379: PUSH
14380: LD_VAR 0 1
14384: ARRAY
14385: PPUSH
14386: LD_VAR 0 1
14390: PUSH
14391: LD_INT 4
14393: MOD
14394: PUSH
14395: LD_INT 1
14397: PLUS
14398: PPUSH
14399: LD_VAR 0 3
14403: PUSH
14404: LD_VAR 0 1
14408: ARRAY
14409: PPUSH
14410: LD_VAR 0 1
14414: PUSH
14415: LD_INT 4
14417: MOD
14418: PUSH
14419: LD_INT 1
14421: PLUS
14422: PPUSH
14423: CALL_OW 259
14427: PUSH
14428: LD_INT 1
14430: PLUS
14431: PPUSH
14432: CALL_OW 237
14436: GO 14338
14438: POP
14439: POP
// end ;
14440: PPOPN 3
14442: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14443: LD_EXP 67
14447: PUSH
14448: LD_EXP 75
14452: AND
14453: IFFALSE 14473
14455: GO 14457
14457: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14458: LD_INT 4
14460: PPUSH
14461: LD_OWVAR 2
14465: PPUSH
14466: LD_INT 0
14468: PPUSH
14469: CALL_OW 324
14473: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14474: LD_EXP 67
14478: PUSH
14479: LD_EXP 104
14483: AND
14484: IFFALSE 14504
14486: GO 14488
14488: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14489: LD_INT 19
14491: PPUSH
14492: LD_OWVAR 2
14496: PPUSH
14497: LD_INT 0
14499: PPUSH
14500: CALL_OW 324
14504: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14505: LD_EXP 67
14509: PUSH
14510: LD_EXP 76
14514: AND
14515: IFFALSE 14617
14517: GO 14519
14519: DISABLE
14520: LD_INT 0
14522: PPUSH
14523: PPUSH
// begin enable ;
14524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_INT 22
14532: PUSH
14533: LD_OWVAR 2
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: LD_INT 34
14547: PUSH
14548: LD_INT 11
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 34
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: ST_TO_ADDR
// if not tmp then
14579: LD_VAR 0 2
14583: NOT
14584: IFFALSE 14588
// exit ;
14586: GO 14617
// for i in tmp do
14588: LD_ADDR_VAR 0 1
14592: PUSH
14593: LD_VAR 0 2
14597: PUSH
14598: FOR_IN
14599: IFFALSE 14615
// begin SetLives ( i , 0 ) ;
14601: LD_VAR 0 1
14605: PPUSH
14606: LD_INT 0
14608: PPUSH
14609: CALL_OW 234
// end ;
14613: GO 14598
14615: POP
14616: POP
// end ;
14617: PPOPN 2
14619: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14620: LD_EXP 67
14624: PUSH
14625: LD_EXP 77
14629: AND
14630: IFFALSE 14650
14632: GO 14634
14634: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14635: LD_INT 32
14637: PPUSH
14638: LD_OWVAR 2
14642: PPUSH
14643: LD_INT 0
14645: PPUSH
14646: CALL_OW 324
14650: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14651: LD_EXP 67
14655: PUSH
14656: LD_EXP 78
14660: AND
14661: IFFALSE 14842
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
14670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14671: LD_ADDR_VAR 0 2
14675: PUSH
14676: LD_INT 22
14678: PUSH
14679: LD_OWVAR 2
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 33
14690: PUSH
14691: LD_INT 3
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PPUSH
14702: CALL_OW 69
14706: ST_TO_ADDR
// if not tmp then
14707: LD_VAR 0 2
14711: NOT
14712: IFFALSE 14716
// exit ;
14714: GO 14842
// side := 0 ;
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
// for i := 1 to 8 do
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: DOUBLE
14730: LD_INT 1
14732: DEC
14733: ST_TO_ADDR
14734: LD_INT 8
14736: PUSH
14737: FOR_TO
14738: IFFALSE 14786
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14740: LD_OWVAR 2
14744: PUSH
14745: LD_VAR 0 1
14749: NONEQUAL
14750: PUSH
14751: LD_OWVAR 2
14755: PPUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 81
14765: PUSH
14766: LD_INT 2
14768: EQUAL
14769: AND
14770: IFFALSE 14784
// begin side := i ;
14772: LD_ADDR_VAR 0 3
14776: PUSH
14777: LD_VAR 0 1
14781: ST_TO_ADDR
// break ;
14782: GO 14786
// end ;
14784: GO 14737
14786: POP
14787: POP
// if not side then
14788: LD_VAR 0 3
14792: NOT
14793: IFFALSE 14797
// exit ;
14795: GO 14842
// for i := 1 to tmp do
14797: LD_ADDR_VAR 0 1
14801: PUSH
14802: DOUBLE
14803: LD_INT 1
14805: DEC
14806: ST_TO_ADDR
14807: LD_VAR 0 2
14811: PUSH
14812: FOR_TO
14813: IFFALSE 14840
// if Prob ( 60 ) then
14815: LD_INT 60
14817: PPUSH
14818: CALL_OW 13
14822: IFFALSE 14838
// SetSide ( i , side ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: CALL_OW 235
14838: GO 14812
14840: POP
14841: POP
// end ;
14842: PPOPN 3
14844: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14845: LD_EXP 67
14849: PUSH
14850: LD_EXP 80
14854: AND
14855: IFFALSE 14974
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14863: LD_ADDR_VAR 0 1
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_OWVAR 2
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 21
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: LD_INT 23
14895: PUSH
14896: LD_INT 0
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: PUSH
14917: FOR_IN
14918: IFFALSE 14972
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 257
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: LD_INT 2
14935: PUSH
14936: LD_INT 3
14938: PUSH
14939: LD_INT 4
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: IN
14948: IFFALSE 14970
// SetClass ( un , rand ( 1 , 4 ) ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_INT 1
14957: PPUSH
14958: LD_INT 4
14960: PPUSH
14961: CALL_OW 12
14965: PPUSH
14966: CALL_OW 336
14970: GO 14917
14972: POP
14973: POP
// end ;
14974: PPOPN 1
14976: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14977: LD_EXP 67
14981: PUSH
14982: LD_EXP 79
14986: AND
14987: IFFALSE 15066
14989: GO 14991
14991: DISABLE
14992: LD_INT 0
14994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14995: LD_ADDR_VAR 0 1
14999: PUSH
15000: LD_INT 22
15002: PUSH
15003: LD_OWVAR 2
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 3
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PPUSH
15026: CALL_OW 69
15030: ST_TO_ADDR
// if not tmp then
15031: LD_VAR 0 1
15035: NOT
15036: IFFALSE 15040
// exit ;
15038: GO 15066
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 1
15047: PPUSH
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL_OW 12
15057: ARRAY
15058: PPUSH
15059: LD_INT 100
15061: PPUSH
15062: CALL_OW 234
// end ;
15066: PPOPN 1
15068: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15069: LD_EXP 67
15073: PUSH
15074: LD_EXP 81
15078: AND
15079: IFFALSE 15177
15081: GO 15083
15083: DISABLE
15084: LD_INT 0
15086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: LD_INT 22
15094: PUSH
15095: LD_OWVAR 2
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// if not tmp then
15123: LD_VAR 0 1
15127: NOT
15128: IFFALSE 15132
// exit ;
15130: GO 15177
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15132: LD_VAR 0 1
15136: PUSH
15137: LD_INT 1
15139: PPUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 12
15149: ARRAY
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_INT 4
15156: PPUSH
15157: CALL_OW 12
15161: PPUSH
15162: LD_INT 3000
15164: PPUSH
15165: LD_INT 9000
15167: PPUSH
15168: CALL_OW 12
15172: PPUSH
15173: CALL_OW 492
// end ;
15177: PPOPN 1
15179: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15180: LD_EXP 67
15184: PUSH
15185: LD_EXP 82
15189: AND
15190: IFFALSE 15210
15192: GO 15194
15194: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15195: LD_INT 1
15197: PPUSH
15198: LD_OWVAR 2
15202: PPUSH
15203: LD_INT 0
15205: PPUSH
15206: CALL_OW 324
15210: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15211: LD_EXP 67
15215: PUSH
15216: LD_EXP 83
15220: AND
15221: IFFALSE 15304
15223: GO 15225
15225: DISABLE
15226: LD_INT 0
15228: PPUSH
15229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15230: LD_ADDR_VAR 0 2
15234: PUSH
15235: LD_INT 22
15237: PUSH
15238: LD_OWVAR 2
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 21
15249: PUSH
15250: LD_INT 3
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: ST_TO_ADDR
// if not tmp then
15266: LD_VAR 0 2
15270: NOT
15271: IFFALSE 15275
// exit ;
15273: GO 15304
// for i in tmp do
15275: LD_ADDR_VAR 0 1
15279: PUSH
15280: LD_VAR 0 2
15284: PUSH
15285: FOR_IN
15286: IFFALSE 15302
// SetBLevel ( i , 10 ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_INT 10
15295: PPUSH
15296: CALL_OW 241
15300: GO 15285
15302: POP
15303: POP
// end ;
15304: PPOPN 2
15306: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15307: LD_EXP 67
15311: PUSH
15312: LD_EXP 84
15316: AND
15317: IFFALSE 15428
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
15325: PPUSH
15326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 22
15334: PUSH
15335: LD_OWVAR 2
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 25
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PPUSH
15358: CALL_OW 69
15362: ST_TO_ADDR
// if not tmp then
15363: LD_VAR 0 3
15367: NOT
15368: IFFALSE 15372
// exit ;
15370: GO 15428
// un := tmp [ rand ( 1 , tmp ) ] ;
15372: LD_ADDR_VAR 0 2
15376: PUSH
15377: LD_VAR 0 3
15381: PUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_VAR 0 3
15389: PPUSH
15390: CALL_OW 12
15394: ARRAY
15395: ST_TO_ADDR
// if Crawls ( un ) then
15396: LD_VAR 0 2
15400: PPUSH
15401: CALL_OW 318
15405: IFFALSE 15416
// ComWalk ( un ) ;
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15416: LD_VAR 0 2
15420: PPUSH
15421: LD_INT 5
15423: PPUSH
15424: CALL_OW 336
// end ;
15428: PPOPN 3
15430: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15431: LD_EXP 67
15435: PUSH
15436: LD_EXP 85
15440: AND
15441: PUSH
15442: LD_OWVAR 67
15446: PUSH
15447: LD_INT 3
15449: LESS
15450: AND
15451: IFFALSE 15470
15453: GO 15455
15455: DISABLE
// Difficulty := Difficulty + 1 ;
15456: LD_ADDR_OWVAR 67
15460: PUSH
15461: LD_OWVAR 67
15465: PUSH
15466: LD_INT 1
15468: PLUS
15469: ST_TO_ADDR
15470: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15471: LD_EXP 67
15475: PUSH
15476: LD_EXP 86
15480: AND
15481: IFFALSE 15584
15483: GO 15485
15485: DISABLE
15486: LD_INT 0
15488: PPUSH
// begin for i := 1 to 5 do
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 5
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15582
// begin uc_nation := nation_nature ;
15505: LD_ADDR_OWVAR 21
15509: PUSH
15510: LD_INT 0
15512: ST_TO_ADDR
// uc_side := 0 ;
15513: LD_ADDR_OWVAR 20
15517: PUSH
15518: LD_INT 0
15520: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15521: LD_ADDR_OWVAR 29
15525: PUSH
15526: LD_INT 12
15528: PUSH
15529: LD_INT 12
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: ST_TO_ADDR
// hc_agressivity := 20 ;
15536: LD_ADDR_OWVAR 35
15540: PUSH
15541: LD_INT 20
15543: ST_TO_ADDR
// hc_class := class_tiger ;
15544: LD_ADDR_OWVAR 28
15548: PUSH
15549: LD_INT 14
15551: ST_TO_ADDR
// hc_gallery :=  ;
15552: LD_ADDR_OWVAR 33
15556: PUSH
15557: LD_STRING 
15559: ST_TO_ADDR
// hc_name :=  ;
15560: LD_ADDR_OWVAR 26
15564: PUSH
15565: LD_STRING 
15567: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15568: CALL_OW 44
15572: PPUSH
15573: LD_INT 0
15575: PPUSH
15576: CALL_OW 51
// end ;
15580: GO 15502
15582: POP
15583: POP
// end ;
15584: PPOPN 1
15586: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15587: LD_EXP 67
15591: PUSH
15592: LD_EXP 87
15596: AND
15597: IFFALSE 15606
15599: GO 15601
15601: DISABLE
// StreamSibBomb ;
15602: CALL 15607 0 0
15606: END
// export function StreamSibBomb ; var i , x , y ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
// result := false ;
15613: LD_ADDR_VAR 0 1
15617: PUSH
15618: LD_INT 0
15620: ST_TO_ADDR
// for i := 1 to 16 do
15621: LD_ADDR_VAR 0 2
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_INT 16
15633: PUSH
15634: FOR_TO
15635: IFFALSE 15834
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15637: LD_ADDR_VAR 0 3
15641: PUSH
15642: LD_INT 10
15644: PUSH
15645: LD_INT 20
15647: PUSH
15648: LD_INT 30
15650: PUSH
15651: LD_INT 40
15653: PUSH
15654: LD_INT 50
15656: PUSH
15657: LD_INT 60
15659: PUSH
15660: LD_INT 70
15662: PUSH
15663: LD_INT 80
15665: PUSH
15666: LD_INT 90
15668: PUSH
15669: LD_INT 100
15671: PUSH
15672: LD_INT 110
15674: PUSH
15675: LD_INT 120
15677: PUSH
15678: LD_INT 130
15680: PUSH
15681: LD_INT 140
15683: PUSH
15684: LD_INT 150
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PPUSH
15707: LD_INT 15
15709: PPUSH
15710: CALL_OW 12
15714: ARRAY
15715: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15716: LD_ADDR_VAR 0 4
15720: PUSH
15721: LD_INT 10
15723: PUSH
15724: LD_INT 20
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 40
15732: PUSH
15733: LD_INT 50
15735: PUSH
15736: LD_INT 60
15738: PUSH
15739: LD_INT 70
15741: PUSH
15742: LD_INT 80
15744: PUSH
15745: LD_INT 90
15747: PUSH
15748: LD_INT 100
15750: PUSH
15751: LD_INT 110
15753: PUSH
15754: LD_INT 120
15756: PUSH
15757: LD_INT 130
15759: PUSH
15760: LD_INT 140
15762: PUSH
15763: LD_INT 150
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 1
15785: PPUSH
15786: LD_INT 15
15788: PPUSH
15789: CALL_OW 12
15793: ARRAY
15794: ST_TO_ADDR
// if ValidHex ( x , y ) then
15795: LD_VAR 0 3
15799: PPUSH
15800: LD_VAR 0 4
15804: PPUSH
15805: CALL_OW 488
15809: IFFALSE 15832
// begin result := [ x , y ] ;
15811: LD_ADDR_VAR 0 1
15815: PUSH
15816: LD_VAR 0 3
15820: PUSH
15821: LD_VAR 0 4
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
// break ;
15830: GO 15834
// end ; end ;
15832: GO 15634
15834: POP
15835: POP
// if result then
15836: LD_VAR 0 1
15840: IFFALSE 15900
// begin ToLua ( playSibBomb() ) ;
15842: LD_STRING playSibBomb()
15844: PPUSH
15845: CALL_OW 559
// wait ( 0 0$14 ) ;
15849: LD_INT 490
15851: PPUSH
15852: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: LD_VAR 0 1
15869: PUSH
15870: LD_INT 2
15872: ARRAY
15873: PPUSH
15874: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15878: LD_VAR 0 1
15882: PUSH
15883: LD_INT 1
15885: ARRAY
15886: PPUSH
15887: LD_VAR 0 1
15891: PUSH
15892: LD_INT 2
15894: ARRAY
15895: PPUSH
15896: CALL_OW 429
// end ; end ;
15900: LD_VAR 0 1
15904: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15905: LD_EXP 67
15909: PUSH
15910: LD_EXP 89
15914: AND
15915: IFFALSE 15927
15917: GO 15919
15919: DISABLE
// YouLost (  ) ;
15920: LD_STRING 
15922: PPUSH
15923: CALL_OW 104
15927: END
// every 0 0$1 trigger StreamModeActive and sFog do
15928: LD_EXP 67
15932: PUSH
15933: LD_EXP 88
15937: AND
15938: IFFALSE 15952
15940: GO 15942
15942: DISABLE
// FogOff ( your_side ) ;
15943: LD_OWVAR 2
15947: PPUSH
15948: CALL_OW 344
15952: END
// every 0 0$1 trigger StreamModeActive and sSun do
15953: LD_EXP 67
15957: PUSH
15958: LD_EXP 90
15962: AND
15963: IFFALSE 15991
15965: GO 15967
15967: DISABLE
// begin solar_recharge_percent := 0 ;
15968: LD_ADDR_OWVAR 79
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15976: LD_INT 10500
15978: PPUSH
15979: CALL_OW 67
// solar_recharge_percent := 100 ;
15983: LD_ADDR_OWVAR 79
15987: PUSH
15988: LD_INT 100
15990: ST_TO_ADDR
// end ;
15991: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15992: LD_EXP 67
15996: PUSH
15997: LD_EXP 91
16001: AND
16002: IFFALSE 16241
16004: GO 16006
16006: DISABLE
16007: LD_INT 0
16009: PPUSH
16010: PPUSH
16011: PPUSH
// begin tmp := [ ] ;
16012: LD_ADDR_VAR 0 3
16016: PUSH
16017: EMPTY
16018: ST_TO_ADDR
// for i := 1 to 6 do
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: DOUBLE
16025: LD_INT 1
16027: DEC
16028: ST_TO_ADDR
16029: LD_INT 6
16031: PUSH
16032: FOR_TO
16033: IFFALSE 16138
// begin uc_nation := nation_nature ;
16035: LD_ADDR_OWVAR 21
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// uc_side := 0 ;
16043: LD_ADDR_OWVAR 20
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16051: LD_ADDR_OWVAR 29
16055: PUSH
16056: LD_INT 12
16058: PUSH
16059: LD_INT 12
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: ST_TO_ADDR
// hc_agressivity := 20 ;
16066: LD_ADDR_OWVAR 35
16070: PUSH
16071: LD_INT 20
16073: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16074: LD_ADDR_OWVAR 28
16078: PUSH
16079: LD_INT 17
16081: ST_TO_ADDR
// hc_gallery :=  ;
16082: LD_ADDR_OWVAR 33
16086: PUSH
16087: LD_STRING 
16089: ST_TO_ADDR
// hc_name :=  ;
16090: LD_ADDR_OWVAR 26
16094: PUSH
16095: LD_STRING 
16097: ST_TO_ADDR
// un := CreateHuman ;
16098: LD_ADDR_VAR 0 2
16102: PUSH
16103: CALL_OW 44
16107: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16108: LD_VAR 0 2
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 51
// tmp := tmp ^ un ;
16120: LD_ADDR_VAR 0 3
16124: PUSH
16125: LD_VAR 0 3
16129: PUSH
16130: LD_VAR 0 2
16134: ADD
16135: ST_TO_ADDR
// end ;
16136: GO 16032
16138: POP
16139: POP
// repeat wait ( 0 0$1 ) ;
16140: LD_INT 35
16142: PPUSH
16143: CALL_OW 67
// for un in tmp do
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 3
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16232
// begin if IsDead ( un ) then
16160: LD_VAR 0 2
16164: PPUSH
16165: CALL_OW 301
16169: IFFALSE 16189
// begin tmp := tmp diff un ;
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: LD_VAR 0 3
16180: PUSH
16181: LD_VAR 0 2
16185: DIFF
16186: ST_TO_ADDR
// continue ;
16187: GO 16157
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16189: LD_VAR 0 2
16193: PPUSH
16194: LD_INT 3
16196: PUSH
16197: LD_INT 22
16199: PUSH
16200: LD_INT 0
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PPUSH
16211: CALL_OW 69
16215: PPUSH
16216: LD_VAR 0 2
16220: PPUSH
16221: CALL_OW 74
16225: PPUSH
16226: CALL_OW 115
// end ;
16230: GO 16157
16232: POP
16233: POP
// until not tmp ;
16234: LD_VAR 0 3
16238: NOT
16239: IFFALSE 16140
// end ;
16241: PPOPN 3
16243: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16244: LD_EXP 67
16248: PUSH
16249: LD_EXP 92
16253: AND
16254: IFFALSE 16308
16256: GO 16258
16258: DISABLE
// begin ToLua ( displayTroll(); ) ;
16259: LD_STRING displayTroll();
16261: PPUSH
16262: CALL_OW 559
// wait ( 3 3$00 ) ;
16266: LD_INT 6300
16268: PPUSH
16269: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16273: LD_STRING hideTroll();
16275: PPUSH
16276: CALL_OW 559
// wait ( 1 1$00 ) ;
16280: LD_INT 2100
16282: PPUSH
16283: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16287: LD_STRING displayTroll();
16289: PPUSH
16290: CALL_OW 559
// wait ( 1 1$00 ) ;
16294: LD_INT 2100
16296: PPUSH
16297: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16301: LD_STRING hideTroll();
16303: PPUSH
16304: CALL_OW 559
// end ;
16308: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16309: LD_EXP 67
16313: PUSH
16314: LD_EXP 93
16318: AND
16319: IFFALSE 16382
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
// begin p := 0 ;
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: LD_INT 0
16334: ST_TO_ADDR
// repeat game_speed := 1 ;
16335: LD_ADDR_OWVAR 65
16339: PUSH
16340: LD_INT 1
16342: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16343: LD_INT 35
16345: PPUSH
16346: CALL_OW 67
// p := p + 1 ;
16350: LD_ADDR_VAR 0 1
16354: PUSH
16355: LD_VAR 0 1
16359: PUSH
16360: LD_INT 1
16362: PLUS
16363: ST_TO_ADDR
// until p >= 60 ;
16364: LD_VAR 0 1
16368: PUSH
16369: LD_INT 60
16371: GREATEREQUAL
16372: IFFALSE 16335
// game_speed := 4 ;
16374: LD_ADDR_OWVAR 65
16378: PUSH
16379: LD_INT 4
16381: ST_TO_ADDR
// end ;
16382: PPOPN 1
16384: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16385: LD_EXP 67
16389: PUSH
16390: LD_EXP 94
16394: AND
16395: IFFALSE 16541
16397: GO 16399
16399: DISABLE
16400: LD_INT 0
16402: PPUSH
16403: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16404: LD_ADDR_VAR 0 1
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_OWVAR 2
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 2
16423: PUSH
16424: LD_INT 30
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 30
16436: PUSH
16437: LD_INT 1
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PPUSH
16453: CALL_OW 69
16457: ST_TO_ADDR
// if not depot then
16458: LD_VAR 0 1
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16541
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_VAR 0 1
16476: PUSH
16477: LD_INT 1
16479: PPUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 12
16489: ARRAY
16490: PPUSH
16491: CALL_OW 274
16495: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16496: LD_VAR 0 2
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 0
16506: PPUSH
16507: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16511: LD_VAR 0 2
16515: PPUSH
16516: LD_INT 2
16518: PPUSH
16519: LD_INT 0
16521: PPUSH
16522: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16526: LD_VAR 0 2
16530: PPUSH
16531: LD_INT 3
16533: PPUSH
16534: LD_INT 0
16536: PPUSH
16537: CALL_OW 277
// end ;
16541: PPOPN 2
16543: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16544: LD_EXP 67
16548: PUSH
16549: LD_EXP 95
16553: AND
16554: IFFALSE 16651
16556: GO 16558
16558: DISABLE
16559: LD_INT 0
16561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_INT 22
16569: PUSH
16570: LD_OWVAR 2
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 23
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 69
16615: ST_TO_ADDR
// if not tmp then
16616: LD_VAR 0 1
16620: NOT
16621: IFFALSE 16625
// exit ;
16623: GO 16651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16625: LD_VAR 0 1
16629: PUSH
16630: LD_INT 1
16632: PPUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 12
16642: ARRAY
16643: PPUSH
16644: LD_INT 200
16646: PPUSH
16647: CALL_OW 234
// end ;
16651: PPOPN 1
16653: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16654: LD_EXP 67
16658: PUSH
16659: LD_EXP 96
16663: AND
16664: IFFALSE 16743
16666: GO 16668
16668: DISABLE
16669: LD_INT 0
16671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16672: LD_ADDR_VAR 0 1
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_OWVAR 2
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 21
16691: PUSH
16692: LD_INT 2
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PPUSH
16703: CALL_OW 69
16707: ST_TO_ADDR
// if not tmp then
16708: LD_VAR 0 1
16712: NOT
16713: IFFALSE 16717
// exit ;
16715: GO 16743
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16717: LD_VAR 0 1
16721: PUSH
16722: LD_INT 1
16724: PPUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: PPUSH
16736: LD_INT 60
16738: PPUSH
16739: CALL_OW 234
// end ;
16743: PPOPN 1
16745: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16746: LD_EXP 67
16750: PUSH
16751: LD_EXP 97
16755: AND
16756: IFFALSE 16855
16758: GO 16760
16760: DISABLE
16761: LD_INT 0
16763: PPUSH
16764: PPUSH
// begin enable ;
16765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16766: LD_ADDR_VAR 0 1
16770: PUSH
16771: LD_INT 22
16773: PUSH
16774: LD_OWVAR 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 61
16785: PUSH
16786: EMPTY
16787: LIST
16788: PUSH
16789: LD_INT 33
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 69
16808: ST_TO_ADDR
// if not tmp then
16809: LD_VAR 0 1
16813: NOT
16814: IFFALSE 16818
// exit ;
16816: GO 16855
// for i in tmp do
16818: LD_ADDR_VAR 0 2
16822: PUSH
16823: LD_VAR 0 1
16827: PUSH
16828: FOR_IN
16829: IFFALSE 16853
// if IsControledBy ( i ) then
16831: LD_VAR 0 2
16835: PPUSH
16836: CALL_OW 312
16840: IFFALSE 16851
// ComUnlink ( i ) ;
16842: LD_VAR 0 2
16846: PPUSH
16847: CALL_OW 136
16851: GO 16828
16853: POP
16854: POP
// end ;
16855: PPOPN 2
16857: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16858: LD_EXP 67
16862: PUSH
16863: LD_EXP 98
16867: AND
16868: IFFALSE 17008
16870: GO 16872
16872: DISABLE
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
// begin ToLua ( displayPowell(); ) ;
16877: LD_STRING displayPowell();
16879: PPUSH
16880: CALL_OW 559
// uc_side := 0 ;
16884: LD_ADDR_OWVAR 20
16888: PUSH
16889: LD_INT 0
16891: ST_TO_ADDR
// uc_nation := 2 ;
16892: LD_ADDR_OWVAR 21
16896: PUSH
16897: LD_INT 2
16899: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16900: LD_ADDR_OWVAR 37
16904: PUSH
16905: LD_INT 14
16907: ST_TO_ADDR
// vc_engine := engine_siberite ;
16908: LD_ADDR_OWVAR 39
16912: PUSH
16913: LD_INT 3
16915: ST_TO_ADDR
// vc_control := control_apeman ;
16916: LD_ADDR_OWVAR 38
16920: PUSH
16921: LD_INT 5
16923: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16924: LD_ADDR_OWVAR 40
16928: PUSH
16929: LD_INT 29
16931: ST_TO_ADDR
// un := CreateVehicle ;
16932: LD_ADDR_VAR 0 2
16936: PUSH
16937: CALL_OW 45
16941: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16942: LD_VAR 0 2
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16954: LD_INT 35
16956: PPUSH
16957: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16961: LD_VAR 0 2
16965: PPUSH
16966: LD_INT 22
16968: PUSH
16969: LD_OWVAR 2
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PPUSH
16978: CALL_OW 69
16982: PPUSH
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL_OW 74
16992: PPUSH
16993: CALL_OW 115
// until IsDead ( un ) ;
16997: LD_VAR 0 2
17001: PPUSH
17002: CALL_OW 301
17006: IFFALSE 16954
// end ;
17008: PPOPN 2
17010: END
// every 0 0$1 trigger StreamModeActive and sStu do
17011: LD_EXP 67
17015: PUSH
17016: LD_EXP 106
17020: AND
17021: IFFALSE 17037
17023: GO 17025
17025: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17026: LD_STRING displayStucuk();
17028: PPUSH
17029: CALL_OW 559
// ResetFog ;
17033: CALL_OW 335
// end ;
17037: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17038: LD_EXP 67
17042: PUSH
17043: LD_EXP 99
17047: AND
17048: IFFALSE 17189
17050: GO 17052
17052: DISABLE
17053: LD_INT 0
17055: PPUSH
17056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17057: LD_ADDR_VAR 0 2
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_OWVAR 2
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 21
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: ST_TO_ADDR
// if not tmp then
17093: LD_VAR 0 2
17097: NOT
17098: IFFALSE 17102
// exit ;
17100: GO 17189
// un := tmp [ rand ( 1 , tmp ) ] ;
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_VAR 0 2
17111: PUSH
17112: LD_INT 1
17114: PPUSH
17115: LD_VAR 0 2
17119: PPUSH
17120: CALL_OW 12
17124: ARRAY
17125: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17126: LD_VAR 0 1
17130: PPUSH
17131: LD_INT 0
17133: PPUSH
17134: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17138: LD_VAR 0 1
17142: PPUSH
17143: LD_OWVAR 3
17147: PUSH
17148: LD_VAR 0 1
17152: DIFF
17153: PPUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 74
17163: PPUSH
17164: CALL_OW 115
// wait ( 0 0$20 ) ;
17168: LD_INT 700
17170: PPUSH
17171: CALL_OW 67
// SetSide ( un , your_side ) ;
17175: LD_VAR 0 1
17179: PPUSH
17180: LD_OWVAR 2
17184: PPUSH
17185: CALL_OW 235
// end ;
17189: PPOPN 2
17191: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17192: LD_EXP 67
17196: PUSH
17197: LD_EXP 100
17201: AND
17202: IFFALSE 17308
17204: GO 17206
17206: DISABLE
17207: LD_INT 0
17209: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17210: LD_ADDR_VAR 0 1
17214: PUSH
17215: LD_INT 22
17217: PUSH
17218: LD_OWVAR 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 30
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: ST_TO_ADDR
// if not depot then
17264: LD_VAR 0 1
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 17308
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17273: LD_VAR 0 1
17277: PUSH
17278: LD_INT 1
17280: ARRAY
17281: PPUSH
17282: CALL_OW 250
17286: PPUSH
17287: LD_VAR 0 1
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: PPUSH
17296: CALL_OW 251
17300: PPUSH
17301: LD_INT 70
17303: PPUSH
17304: CALL_OW 495
// end ;
17308: PPOPN 1
17310: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17311: LD_EXP 67
17315: PUSH
17316: LD_EXP 101
17320: AND
17321: IFFALSE 17532
17323: GO 17325
17325: DISABLE
17326: LD_INT 0
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17333: LD_ADDR_VAR 0 5
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_OWVAR 2
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 21
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PPUSH
17364: CALL_OW 69
17368: ST_TO_ADDR
// if not tmp then
17369: LD_VAR 0 5
17373: NOT
17374: IFFALSE 17378
// exit ;
17376: GO 17532
// for i in tmp do
17378: LD_ADDR_VAR 0 1
17382: PUSH
17383: LD_VAR 0 5
17387: PUSH
17388: FOR_IN
17389: IFFALSE 17530
// begin d := rand ( 0 , 5 ) ;
17391: LD_ADDR_VAR 0 4
17395: PUSH
17396: LD_INT 0
17398: PPUSH
17399: LD_INT 5
17401: PPUSH
17402: CALL_OW 12
17406: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17407: LD_ADDR_VAR 0 2
17411: PUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 250
17421: PPUSH
17422: LD_VAR 0 4
17426: PPUSH
17427: LD_INT 3
17429: PPUSH
17430: LD_INT 12
17432: PPUSH
17433: CALL_OW 12
17437: PPUSH
17438: CALL_OW 272
17442: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17443: LD_ADDR_VAR 0 3
17447: PUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 251
17457: PPUSH
17458: LD_VAR 0 4
17462: PPUSH
17463: LD_INT 3
17465: PPUSH
17466: LD_INT 12
17468: PPUSH
17469: CALL_OW 12
17473: PPUSH
17474: CALL_OW 273
17478: ST_TO_ADDR
// if ValidHex ( x , y ) then
17479: LD_VAR 0 2
17483: PPUSH
17484: LD_VAR 0 3
17488: PPUSH
17489: CALL_OW 488
17493: IFFALSE 17528
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17495: LD_VAR 0 1
17499: PPUSH
17500: LD_VAR 0 2
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 3
17512: PPUSH
17513: LD_INT 6
17515: PPUSH
17516: CALL_OW 12
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: CALL_OW 483
// end ;
17528: GO 17388
17530: POP
17531: POP
// end ;
17532: PPOPN 5
17534: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17535: LD_EXP 67
17539: PUSH
17540: LD_EXP 102
17544: AND
17545: IFFALSE 17639
17547: GO 17549
17549: DISABLE
17550: LD_INT 0
17552: PPUSH
17553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17554: LD_ADDR_VAR 0 2
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_OWVAR 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 32
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 21
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 2
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17639
// for i in tmp do
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_VAR 0 2
17619: PUSH
17620: FOR_IN
17621: IFFALSE 17637
// SetFuel ( i , 0 ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_INT 0
17630: PPUSH
17631: CALL_OW 240
17635: GO 17620
17637: POP
17638: POP
// end ;
17639: PPOPN 2
17641: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17642: LD_EXP 67
17646: PUSH
17647: LD_EXP 103
17651: AND
17652: IFFALSE 17718
17654: GO 17656
17656: DISABLE
17657: LD_INT 0
17659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17660: LD_ADDR_VAR 0 1
17664: PUSH
17665: LD_INT 22
17667: PUSH
17668: LD_OWVAR 2
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 30
17679: PUSH
17680: LD_INT 29
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PPUSH
17691: CALL_OW 69
17695: ST_TO_ADDR
// if not tmp then
17696: LD_VAR 0 1
17700: NOT
17701: IFFALSE 17705
// exit ;
17703: GO 17718
// DestroyUnit ( tmp [ 1 ] ) ;
17705: LD_VAR 0 1
17709: PUSH
17710: LD_INT 1
17712: ARRAY
17713: PPUSH
17714: CALL_OW 65
// end ;
17718: PPOPN 1
17720: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17721: LD_EXP 67
17725: PUSH
17726: LD_EXP 105
17730: AND
17731: IFFALSE 17860
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
// begin uc_side := 0 ;
17739: LD_ADDR_OWVAR 20
17743: PUSH
17744: LD_INT 0
17746: ST_TO_ADDR
// uc_nation := nation_arabian ;
17747: LD_ADDR_OWVAR 21
17751: PUSH
17752: LD_INT 2
17754: ST_TO_ADDR
// hc_gallery :=  ;
17755: LD_ADDR_OWVAR 33
17759: PUSH
17760: LD_STRING 
17762: ST_TO_ADDR
// hc_name :=  ;
17763: LD_ADDR_OWVAR 26
17767: PUSH
17768: LD_STRING 
17770: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 11
17776: PPUSH
17777: LD_INT 10
17779: PPUSH
17780: CALL_OW 380
// un := CreateHuman ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: CALL_OW 44
17793: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17806: LD_INT 35
17808: PPUSH
17809: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_INT 22
17820: PUSH
17821: LD_OWVAR 2
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 69
17834: PPUSH
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 74
17844: PPUSH
17845: CALL_OW 115
// until IsDead ( un ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 301
17858: IFFALSE 17806
// end ;
17860: PPOPN 1
17862: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17863: LD_EXP 67
17867: PUSH
17868: LD_EXP 107
17872: AND
17873: IFFALSE 17885
17875: GO 17877
17877: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17878: LD_STRING earthquake(getX(game), 0, 32)
17880: PPUSH
17881: CALL_OW 559
17885: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17886: LD_EXP 67
17890: PUSH
17891: LD_EXP 108
17895: AND
17896: IFFALSE 17987
17898: GO 17900
17900: DISABLE
17901: LD_INT 0
17903: PPUSH
// begin enable ;
17904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: LD_INT 22
17912: PUSH
17913: LD_OWVAR 2
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 21
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 33
17934: PUSH
17935: LD_INT 3
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: LIST
17946: PPUSH
17947: CALL_OW 69
17951: ST_TO_ADDR
// if not tmp then
17952: LD_VAR 0 1
17956: NOT
17957: IFFALSE 17961
// exit ;
17959: GO 17987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17961: LD_VAR 0 1
17965: PUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 12
17978: ARRAY
17979: PPUSH
17980: LD_INT 1
17982: PPUSH
17983: CALL_OW 234
// end ;
17987: PPOPN 1
17989: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17990: LD_EXP 67
17994: PUSH
17995: LD_EXP 109
17999: AND
18000: IFFALSE 18141
18002: GO 18004
18004: DISABLE
18005: LD_INT 0
18007: PPUSH
18008: PPUSH
18009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_INT 22
18017: PUSH
18018: LD_OWVAR 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 25
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: ST_TO_ADDR
// if not tmp then
18046: LD_VAR 0 3
18050: NOT
18051: IFFALSE 18055
// exit ;
18053: GO 18141
// un := tmp [ rand ( 1 , tmp ) ] ;
18055: LD_ADDR_VAR 0 2
18059: PUSH
18060: LD_VAR 0 3
18064: PUSH
18065: LD_INT 1
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: CALL_OW 12
18077: ARRAY
18078: ST_TO_ADDR
// if Crawls ( un ) then
18079: LD_VAR 0 2
18083: PPUSH
18084: CALL_OW 318
18088: IFFALSE 18099
// ComWalk ( un ) ;
18090: LD_VAR 0 2
18094: PPUSH
18095: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18099: LD_VAR 0 2
18103: PPUSH
18104: LD_INT 9
18106: PPUSH
18107: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18111: LD_INT 28
18113: PPUSH
18114: LD_OWVAR 2
18118: PPUSH
18119: LD_INT 2
18121: PPUSH
18122: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18126: LD_INT 29
18128: PPUSH
18129: LD_OWVAR 2
18133: PPUSH
18134: LD_INT 2
18136: PPUSH
18137: CALL_OW 322
// end ;
18141: PPOPN 3
18143: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18144: LD_EXP 67
18148: PUSH
18149: LD_EXP 110
18153: AND
18154: IFFALSE 18265
18156: GO 18158
18158: DISABLE
18159: LD_INT 0
18161: PPUSH
18162: PPUSH
18163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18164: LD_ADDR_VAR 0 3
18168: PUSH
18169: LD_INT 22
18171: PUSH
18172: LD_OWVAR 2
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 25
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PPUSH
18195: CALL_OW 69
18199: ST_TO_ADDR
// if not tmp then
18200: LD_VAR 0 3
18204: NOT
18205: IFFALSE 18209
// exit ;
18207: GO 18265
// un := tmp [ rand ( 1 , tmp ) ] ;
18209: LD_ADDR_VAR 0 2
18213: PUSH
18214: LD_VAR 0 3
18218: PUSH
18219: LD_INT 1
18221: PPUSH
18222: LD_VAR 0 3
18226: PPUSH
18227: CALL_OW 12
18231: ARRAY
18232: ST_TO_ADDR
// if Crawls ( un ) then
18233: LD_VAR 0 2
18237: PPUSH
18238: CALL_OW 318
18242: IFFALSE 18253
// ComWalk ( un ) ;
18244: LD_VAR 0 2
18248: PPUSH
18249: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18253: LD_VAR 0 2
18257: PPUSH
18258: LD_INT 8
18260: PPUSH
18261: CALL_OW 336
// end ;
18265: PPOPN 3
18267: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18268: LD_EXP 67
18272: PUSH
18273: LD_EXP 111
18277: AND
18278: IFFALSE 18422
18280: GO 18282
18282: DISABLE
18283: LD_INT 0
18285: PPUSH
18286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: LD_INT 22
18294: PUSH
18295: LD_OWVAR 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 21
18306: PUSH
18307: LD_INT 2
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: LD_INT 34
18319: PUSH
18320: LD_INT 12
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 34
18329: PUSH
18330: LD_INT 51
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 34
18339: PUSH
18340: LD_INT 32
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: PPUSH
18358: CALL_OW 69
18362: ST_TO_ADDR
// if not tmp then
18363: LD_VAR 0 2
18367: NOT
18368: IFFALSE 18372
// exit ;
18370: GO 18422
// for i in tmp do
18372: LD_ADDR_VAR 0 1
18376: PUSH
18377: LD_VAR 0 2
18381: PUSH
18382: FOR_IN
18383: IFFALSE 18420
// if GetCargo ( i , mat_artifact ) = 0 then
18385: LD_VAR 0 1
18389: PPUSH
18390: LD_INT 4
18392: PPUSH
18393: CALL_OW 289
18397: PUSH
18398: LD_INT 0
18400: EQUAL
18401: IFFALSE 18418
// SetCargo ( i , mat_siberit , 100 ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_INT 3
18410: PPUSH
18411: LD_INT 100
18413: PPUSH
18414: CALL_OW 290
18418: GO 18382
18420: POP
18421: POP
// end ;
18422: PPOPN 2
18424: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18425: LD_EXP 67
18429: PUSH
18430: LD_EXP 112
18434: AND
18435: IFFALSE 18618
18437: GO 18439
18439: DISABLE
18440: LD_INT 0
18442: PPUSH
18443: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18444: LD_ADDR_VAR 0 2
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_OWVAR 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 69
18465: ST_TO_ADDR
// if not tmp then
18466: LD_VAR 0 2
18470: NOT
18471: IFFALSE 18475
// exit ;
18473: GO 18618
// for i := 1 to 2 do
18475: LD_ADDR_VAR 0 1
18479: PUSH
18480: DOUBLE
18481: LD_INT 1
18483: DEC
18484: ST_TO_ADDR
18485: LD_INT 2
18487: PUSH
18488: FOR_TO
18489: IFFALSE 18616
// begin uc_side := your_side ;
18491: LD_ADDR_OWVAR 20
18495: PUSH
18496: LD_OWVAR 2
18500: ST_TO_ADDR
// uc_nation := nation_american ;
18501: LD_ADDR_OWVAR 21
18505: PUSH
18506: LD_INT 1
18508: ST_TO_ADDR
// vc_chassis := us_morphling ;
18509: LD_ADDR_OWVAR 37
18513: PUSH
18514: LD_INT 5
18516: ST_TO_ADDR
// vc_engine := engine_siberite ;
18517: LD_ADDR_OWVAR 39
18521: PUSH
18522: LD_INT 3
18524: ST_TO_ADDR
// vc_control := control_computer ;
18525: LD_ADDR_OWVAR 38
18529: PUSH
18530: LD_INT 3
18532: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18533: LD_ADDR_OWVAR 40
18537: PUSH
18538: LD_INT 10
18540: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18541: LD_VAR 0 2
18545: PUSH
18546: LD_INT 1
18548: ARRAY
18549: PPUSH
18550: CALL_OW 310
18554: NOT
18555: IFFALSE 18602
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18557: CALL_OW 45
18561: PPUSH
18562: LD_VAR 0 2
18566: PUSH
18567: LD_INT 1
18569: ARRAY
18570: PPUSH
18571: CALL_OW 250
18575: PPUSH
18576: LD_VAR 0 2
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: CALL_OW 251
18589: PPUSH
18590: LD_INT 12
18592: PPUSH
18593: LD_INT 1
18595: PPUSH
18596: CALL_OW 50
18600: GO 18614
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18602: CALL_OW 45
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: CALL_OW 51
// end ;
18614: GO 18488
18616: POP
18617: POP
// end ;
18618: PPOPN 2
18620: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18621: LD_EXP 67
18625: PUSH
18626: LD_EXP 113
18630: AND
18631: IFFALSE 18853
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18644: LD_ADDR_VAR 0 6
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_OWVAR 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 21
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 3
18673: PUSH
18674: LD_INT 23
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: PPUSH
18693: CALL_OW 69
18697: ST_TO_ADDR
// if not tmp then
18698: LD_VAR 0 6
18702: NOT
18703: IFFALSE 18707
// exit ;
18705: GO 18853
// s1 := rand ( 1 , 4 ) ;
18707: LD_ADDR_VAR 0 2
18711: PUSH
18712: LD_INT 1
18714: PPUSH
18715: LD_INT 4
18717: PPUSH
18718: CALL_OW 12
18722: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_VAR 0 6
18732: PUSH
18733: LD_INT 1
18735: ARRAY
18736: PPUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: CALL_OW 259
18746: ST_TO_ADDR
// if s1 = 1 then
18747: LD_VAR 0 2
18751: PUSH
18752: LD_INT 1
18754: EQUAL
18755: IFFALSE 18775
// s2 := rand ( 2 , 4 ) else
18757: LD_ADDR_VAR 0 3
18761: PUSH
18762: LD_INT 2
18764: PPUSH
18765: LD_INT 4
18767: PPUSH
18768: CALL_OW 12
18772: ST_TO_ADDR
18773: GO 18783
// s2 := 1 ;
18775: LD_ADDR_VAR 0 3
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18783: LD_ADDR_VAR 0 5
18787: PUSH
18788: LD_VAR 0 6
18792: PUSH
18793: LD_INT 1
18795: ARRAY
18796: PPUSH
18797: LD_VAR 0 3
18801: PPUSH
18802: CALL_OW 259
18806: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18807: LD_VAR 0 6
18811: PUSH
18812: LD_INT 1
18814: ARRAY
18815: PPUSH
18816: LD_VAR 0 2
18820: PPUSH
18821: LD_VAR 0 5
18825: PPUSH
18826: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18830: LD_VAR 0 6
18834: PUSH
18835: LD_INT 1
18837: ARRAY
18838: PPUSH
18839: LD_VAR 0 3
18843: PPUSH
18844: LD_VAR 0 4
18848: PPUSH
18849: CALL_OW 237
// end ;
18853: PPOPN 6
18855: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18856: LD_EXP 67
18860: PUSH
18861: LD_EXP 114
18865: AND
18866: IFFALSE 18945
18868: GO 18870
18870: DISABLE
18871: LD_INT 0
18873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_INT 22
18881: PUSH
18882: LD_OWVAR 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PPUSH
18905: CALL_OW 69
18909: ST_TO_ADDR
// if not tmp then
18910: LD_VAR 0 1
18914: NOT
18915: IFFALSE 18919
// exit ;
18917: GO 18945
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18919: LD_VAR 0 1
18923: PUSH
18924: LD_INT 1
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 12
18936: ARRAY
18937: PPUSH
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 234
// end ;
18945: PPOPN 1
18947: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18948: LD_EXP 67
18952: PUSH
18953: LD_EXP 115
18957: AND
18958: IFFALSE 19070
18960: GO 18962
18962: DISABLE
18963: LD_INT 0
18965: PPUSH
18966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18967: LD_ADDR_VAR 0 2
18971: PUSH
18972: LD_INT 22
18974: PUSH
18975: LD_OWVAR 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: LD_INT 30
18989: PUSH
18990: LD_INT 27
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 30
18999: PUSH
19000: LD_INT 26
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 30
19009: PUSH
19010: LD_INT 28
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: ST_TO_ADDR
// if not tmp then
19032: LD_VAR 0 2
19036: NOT
19037: IFFALSE 19041
// exit ;
19039: GO 19070
// for i in tmp do
19041: LD_ADDR_VAR 0 1
19045: PUSH
19046: LD_VAR 0 2
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19068
// SetLives ( i , 1 ) ;
19054: LD_VAR 0 1
19058: PPUSH
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 234
19066: GO 19051
19068: POP
19069: POP
// end ;
19070: PPOPN 2
19072: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19073: LD_EXP 67
19077: PUSH
19078: LD_EXP 116
19082: AND
19083: IFFALSE 19357
19085: GO 19087
19087: DISABLE
19088: LD_INT 0
19090: PPUSH
19091: PPUSH
19092: PPUSH
// begin i := rand ( 1 , 7 ) ;
19093: LD_ADDR_VAR 0 1
19097: PUSH
19098: LD_INT 1
19100: PPUSH
19101: LD_INT 7
19103: PPUSH
19104: CALL_OW 12
19108: ST_TO_ADDR
// case i of 1 :
19109: LD_VAR 0 1
19113: PUSH
19114: LD_INT 1
19116: DOUBLE
19117: EQUAL
19118: IFTRUE 19122
19120: GO 19132
19122: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19123: LD_STRING earthquake(getX(game), 0, 32)
19125: PPUSH
19126: CALL_OW 559
19130: GO 19357
19132: LD_INT 2
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19154
19140: POP
// begin ToLua ( displayStucuk(); ) ;
19141: LD_STRING displayStucuk();
19143: PPUSH
19144: CALL_OW 559
// ResetFog ;
19148: CALL_OW 335
// end ; 3 :
19152: GO 19357
19154: LD_INT 3
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19266
19162: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19163: LD_ADDR_VAR 0 2
19167: PUSH
19168: LD_INT 22
19170: PUSH
19171: LD_OWVAR 2
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 25
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PPUSH
19194: CALL_OW 69
19198: ST_TO_ADDR
// if not tmp then
19199: LD_VAR 0 2
19203: NOT
19204: IFFALSE 19208
// exit ;
19206: GO 19357
// un := tmp [ rand ( 1 , tmp ) ] ;
19208: LD_ADDR_VAR 0 3
19212: PUSH
19213: LD_VAR 0 2
19217: PUSH
19218: LD_INT 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: CALL_OW 12
19230: ARRAY
19231: ST_TO_ADDR
// if Crawls ( un ) then
19232: LD_VAR 0 3
19236: PPUSH
19237: CALL_OW 318
19241: IFFALSE 19252
// ComWalk ( un ) ;
19243: LD_VAR 0 3
19247: PPUSH
19248: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19252: LD_VAR 0 3
19256: PPUSH
19257: LD_INT 8
19259: PPUSH
19260: CALL_OW 336
// end ; 4 :
19264: GO 19357
19266: LD_INT 4
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19335
19274: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19275: LD_ADDR_VAR 0 2
19279: PUSH
19280: LD_INT 22
19282: PUSH
19283: LD_OWVAR 2
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 30
19294: PUSH
19295: LD_INT 29
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PPUSH
19306: CALL_OW 69
19310: ST_TO_ADDR
// if not tmp then
19311: LD_VAR 0 2
19315: NOT
19316: IFFALSE 19320
// exit ;
19318: GO 19357
// DestroyUnit ( tmp [ 1 ] ) ;
19320: LD_VAR 0 2
19324: PUSH
19325: LD_INT 1
19327: ARRAY
19328: PPUSH
19329: CALL_OW 65
// end ; 5 .. 7 :
19333: GO 19357
19335: LD_INT 5
19337: DOUBLE
19338: GREATEREQUAL
19339: IFFALSE 19347
19341: LD_INT 7
19343: DOUBLE
19344: LESSEQUAL
19345: IFTRUE 19349
19347: GO 19356
19349: POP
// StreamSibBomb ; end ;
19350: CALL 15607 0 0
19354: GO 19357
19356: POP
// end ;
19357: PPOPN 3
19359: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19360: LD_EXP 67
19364: PUSH
19365: LD_EXP 117
19369: AND
19370: IFFALSE 19526
19372: GO 19374
19374: DISABLE
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
19379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: LD_INT 81
19387: PUSH
19388: LD_OWVAR 2
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PPUSH
19429: CALL_OW 69
19433: ST_TO_ADDR
// if not tmp then
19434: LD_VAR 0 2
19438: NOT
19439: IFFALSE 19443
// exit ;
19441: GO 19526
// p := 0 ;
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 0
19450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19451: LD_INT 35
19453: PPUSH
19454: CALL_OW 67
// p := p + 1 ;
19458: LD_ADDR_VAR 0 3
19462: PUSH
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 1
19470: PLUS
19471: ST_TO_ADDR
// for i in tmp do
19472: LD_ADDR_VAR 0 1
19476: PUSH
19477: LD_VAR 0 2
19481: PUSH
19482: FOR_IN
19483: IFFALSE 19514
// if GetLives ( i ) < 1000 then
19485: LD_VAR 0 1
19489: PPUSH
19490: CALL_OW 256
19494: PUSH
19495: LD_INT 1000
19497: LESS
19498: IFFALSE 19512
// SetLives ( i , 1000 ) ;
19500: LD_VAR 0 1
19504: PPUSH
19505: LD_INT 1000
19507: PPUSH
19508: CALL_OW 234
19512: GO 19482
19514: POP
19515: POP
// until p > 20 ;
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 20
19523: GREATER
19524: IFFALSE 19451
// end ;
19526: PPOPN 3
19528: END
// every 0 0$1 trigger StreamModeActive and sTime do
19529: LD_EXP 67
19533: PUSH
19534: LD_EXP 118
19538: AND
19539: IFFALSE 19574
19541: GO 19543
19543: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19544: LD_INT 28
19546: PPUSH
19547: LD_OWVAR 2
19551: PPUSH
19552: LD_INT 2
19554: PPUSH
19555: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19559: LD_INT 30
19561: PPUSH
19562: LD_OWVAR 2
19566: PPUSH
19567: LD_INT 2
19569: PPUSH
19570: CALL_OW 322
// end ;
19574: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19575: LD_EXP 67
19579: PUSH
19580: LD_EXP 119
19584: AND
19585: IFFALSE 19706
19587: GO 19589
19589: DISABLE
19590: LD_INT 0
19592: PPUSH
19593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19594: LD_ADDR_VAR 0 2
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_OWVAR 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 21
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: LD_INT 23
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: PPUSH
19643: CALL_OW 69
19647: ST_TO_ADDR
// if not tmp then
19648: LD_VAR 0 2
19652: NOT
19653: IFFALSE 19657
// exit ;
19655: GO 19706
// for i in tmp do
19657: LD_ADDR_VAR 0 1
19661: PUSH
19662: LD_VAR 0 2
19666: PUSH
19667: FOR_IN
19668: IFFALSE 19704
// begin if Crawls ( i ) then
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 318
19679: IFFALSE 19690
// ComWalk ( i ) ;
19681: LD_VAR 0 1
19685: PPUSH
19686: CALL_OW 138
// SetClass ( i , 2 ) ;
19690: LD_VAR 0 1
19694: PPUSH
19695: LD_INT 2
19697: PPUSH
19698: CALL_OW 336
// end ;
19702: GO 19667
19704: POP
19705: POP
// end ;
19706: PPOPN 2
19708: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19709: LD_EXP 67
19713: PUSH
19714: LD_EXP 120
19718: AND
19719: IFFALSE 20000
19721: GO 19723
19723: DISABLE
19724: LD_INT 0
19726: PPUSH
19727: PPUSH
19728: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19729: LD_OWVAR 2
19733: PPUSH
19734: LD_INT 9
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: LD_INT 1
19742: PPUSH
19743: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19747: LD_INT 9
19749: PPUSH
19750: LD_OWVAR 2
19754: PPUSH
19755: CALL_OW 343
// uc_side := 9 ;
19759: LD_ADDR_OWVAR 20
19763: PUSH
19764: LD_INT 9
19766: ST_TO_ADDR
// uc_nation := 2 ;
19767: LD_ADDR_OWVAR 21
19771: PUSH
19772: LD_INT 2
19774: ST_TO_ADDR
// hc_name := Dark Warrior ;
19775: LD_ADDR_OWVAR 26
19779: PUSH
19780: LD_STRING Dark Warrior
19782: ST_TO_ADDR
// hc_gallery :=  ;
19783: LD_ADDR_OWVAR 33
19787: PUSH
19788: LD_STRING 
19790: ST_TO_ADDR
// hc_noskilllimit := true ;
19791: LD_ADDR_OWVAR 76
19795: PUSH
19796: LD_INT 1
19798: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19799: LD_ADDR_OWVAR 31
19803: PUSH
19804: LD_INT 30
19806: PUSH
19807: LD_INT 30
19809: PUSH
19810: LD_INT 30
19812: PUSH
19813: LD_INT 30
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: ST_TO_ADDR
// un := CreateHuman ;
19822: LD_ADDR_VAR 0 3
19826: PUSH
19827: CALL_OW 44
19831: ST_TO_ADDR
// hc_noskilllimit := false ;
19832: LD_ADDR_OWVAR 76
19836: PUSH
19837: LD_INT 0
19839: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19840: LD_VAR 0 3
19844: PPUSH
19845: LD_INT 1
19847: PPUSH
19848: CALL_OW 51
// p := 0 ;
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19860: LD_INT 35
19862: PPUSH
19863: CALL_OW 67
// p := p + 1 ;
19867: LD_ADDR_VAR 0 2
19871: PUSH
19872: LD_VAR 0 2
19876: PUSH
19877: LD_INT 1
19879: PLUS
19880: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19881: LD_VAR 0 3
19885: PPUSH
19886: CALL_OW 256
19890: PUSH
19891: LD_INT 1000
19893: LESS
19894: IFFALSE 19908
// SetLives ( un , 1000 ) ;
19896: LD_VAR 0 3
19900: PPUSH
19901: LD_INT 1000
19903: PPUSH
19904: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19908: LD_VAR 0 3
19912: PPUSH
19913: LD_INT 81
19915: PUSH
19916: LD_OWVAR 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 91
19927: PUSH
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 69
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: CALL_OW 74
19959: PPUSH
19960: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19964: LD_VAR 0 2
19968: PUSH
19969: LD_INT 60
19971: GREATER
19972: PUSH
19973: LD_VAR 0 3
19977: PPUSH
19978: CALL_OW 301
19982: OR
19983: IFFALSE 19860
// if un then
19985: LD_VAR 0 3
19989: IFFALSE 20000
// RemoveUnit ( un ) ;
19991: LD_VAR 0 3
19995: PPUSH
19996: CALL_OW 64
// end ;
20000: PPOPN 3
20002: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20003: LD_INT 0
20005: PPUSH
20006: PPUSH
20007: PPUSH
20008: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20009: LD_ADDR_VAR 0 4
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: LD_INT 30
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 30
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 69
20062: ST_TO_ADDR
// if not tmp then
20063: LD_VAR 0 4
20067: NOT
20068: IFFALSE 20072
// exit ;
20070: GO 20131
// for i in tmp do
20072: LD_ADDR_VAR 0 2
20076: PUSH
20077: LD_VAR 0 4
20081: PUSH
20082: FOR_IN
20083: IFFALSE 20129
// for j = 1 to 3 do
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: DOUBLE
20091: LD_INT 1
20093: DEC
20094: ST_TO_ADDR
20095: LD_INT 3
20097: PUSH
20098: FOR_TO
20099: IFFALSE 20125
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20101: LD_VAR 0 2
20105: PPUSH
20106: CALL_OW 274
20110: PPUSH
20111: LD_VAR 0 3
20115: PPUSH
20116: LD_INT 99999
20118: PPUSH
20119: CALL_OW 277
20123: GO 20098
20125: POP
20126: POP
20127: GO 20082
20129: POP
20130: POP
// end ;
20131: LD_VAR 0 1
20135: RET
// export function hHackSetLevel10 ; var i , j ; begin
20136: LD_INT 0
20138: PPUSH
20139: PPUSH
20140: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_INT 21
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PPUSH
20156: CALL_OW 69
20160: PUSH
20161: FOR_IN
20162: IFFALSE 20214
// if IsSelected ( i ) then
20164: LD_VAR 0 2
20168: PPUSH
20169: CALL_OW 306
20173: IFFALSE 20212
// begin for j := 1 to 4 do
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: DOUBLE
20181: LD_INT 1
20183: DEC
20184: ST_TO_ADDR
20185: LD_INT 4
20187: PUSH
20188: FOR_TO
20189: IFFALSE 20210
// SetSkill ( i , j , 10 ) ;
20191: LD_VAR 0 2
20195: PPUSH
20196: LD_VAR 0 3
20200: PPUSH
20201: LD_INT 10
20203: PPUSH
20204: CALL_OW 237
20208: GO 20188
20210: POP
20211: POP
// end ;
20212: GO 20161
20214: POP
20215: POP
// end ;
20216: LD_VAR 0 1
20220: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20221: LD_INT 0
20223: PPUSH
20224: PPUSH
20225: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_INT 22
20233: PUSH
20234: LD_OWVAR 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 21
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PPUSH
20257: CALL_OW 69
20261: PUSH
20262: FOR_IN
20263: IFFALSE 20304
// begin for j := 1 to 4 do
20265: LD_ADDR_VAR 0 3
20269: PUSH
20270: DOUBLE
20271: LD_INT 1
20273: DEC
20274: ST_TO_ADDR
20275: LD_INT 4
20277: PUSH
20278: FOR_TO
20279: IFFALSE 20300
// SetSkill ( i , j , 10 ) ;
20281: LD_VAR 0 2
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: LD_INT 10
20293: PPUSH
20294: CALL_OW 237
20298: GO 20278
20300: POP
20301: POP
// end ;
20302: GO 20262
20304: POP
20305: POP
// end ;
20306: LD_VAR 0 1
20310: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
20311: LD_INT 0
20313: PPUSH
// uc_side := your_side ;
20314: LD_ADDR_OWVAR 20
20318: PUSH
20319: LD_OWVAR 2
20323: ST_TO_ADDR
// uc_nation := nation ;
20324: LD_ADDR_OWVAR 21
20328: PUSH
20329: LD_VAR 0 1
20333: ST_TO_ADDR
// InitHc ;
20334: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20338: LD_INT 0
20340: PPUSH
20341: LD_VAR 0 2
20345: PPUSH
20346: LD_VAR 0 3
20350: PPUSH
20351: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
20355: CALL_OW 44
20359: PPUSH
20360: LD_INT 1
20362: PPUSH
20363: CALL_OW 51
// end ;
20367: LD_VAR 0 4
20371: RET
// export function hHackSpawnVehicle ; begin
20372: LD_INT 0
20374: PPUSH
// uc_side := your_side ;
20375: LD_ADDR_OWVAR 20
20379: PUSH
20380: LD_OWVAR 2
20384: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
20385: LD_ADDR_OWVAR 21
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_INT 3
20395: PPUSH
20396: CALL_OW 12
20400: ST_TO_ADDR
// InitVc ;
20401: CALL_OW 20
// case uc_nation of 1 :
20405: LD_OWVAR 21
20409: PUSH
20410: LD_INT 1
20412: DOUBLE
20413: EQUAL
20414: IFTRUE 20418
20416: GO 20562
20418: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
20419: LD_ADDR_OWVAR 37
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 3
20432: PUSH
20433: LD_INT 4
20435: PUSH
20436: LD_INT 5
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: PPUSH
20449: LD_INT 5
20451: PPUSH
20452: CALL_OW 12
20456: ARRAY
20457: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
20458: LD_ADDR_OWVAR 39
20462: PUSH
20463: LD_INT 1
20465: PPUSH
20466: LD_INT 3
20468: PPUSH
20469: CALL_OW 12
20473: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
20474: LD_ADDR_OWVAR 38
20478: PUSH
20479: LD_INT 1
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 3
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: PPUSH
20496: LD_INT 3
20498: PPUSH
20499: CALL_OW 12
20503: ARRAY
20504: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
20505: LD_ADDR_OWVAR 40
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: LD_INT 4
20515: PUSH
20516: LD_INT 5
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 7
20524: PUSH
20525: LD_INT 8
20527: PUSH
20528: LD_INT 9
20530: PUSH
20531: LD_INT 10
20533: PUSH
20534: LD_INT 6
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: PPUSH
20551: LD_INT 9
20553: PPUSH
20554: CALL_OW 12
20558: ARRAY
20559: ST_TO_ADDR
// end ; 2 :
20560: GO 20827
20562: LD_INT 2
20564: DOUBLE
20565: EQUAL
20566: IFTRUE 20570
20568: GO 20694
20570: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
20571: LD_ADDR_OWVAR 37
20575: PUSH
20576: LD_INT 11
20578: PUSH
20579: LD_INT 12
20581: PUSH
20582: LD_INT 13
20584: PUSH
20585: LD_INT 14
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: PPUSH
20597: LD_INT 4
20599: PPUSH
20600: CALL_OW 12
20604: ARRAY
20605: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
20606: LD_ADDR_OWVAR 39
20610: PUSH
20611: LD_INT 1
20613: PPUSH
20614: LD_INT 3
20616: PPUSH
20617: CALL_OW 12
20621: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
20622: LD_ADDR_OWVAR 38
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 5
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: PPUSH
20644: LD_INT 3
20646: PPUSH
20647: CALL_OW 12
20651: ARRAY
20652: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
20653: LD_ADDR_OWVAR 40
20657: PUSH
20658: LD_INT 24
20660: PUSH
20661: LD_INT 26
20663: PUSH
20664: LD_INT 27
20666: PUSH
20667: LD_INT 28
20669: PUSH
20670: LD_INT 29
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 1
20682: PPUSH
20683: LD_INT 5
20685: PPUSH
20686: CALL_OW 12
20690: ARRAY
20691: ST_TO_ADDR
// end ; 3 :
20692: GO 20827
20694: LD_INT 3
20696: DOUBLE
20697: EQUAL
20698: IFTRUE 20702
20700: GO 20826
20702: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
20703: LD_ADDR_OWVAR 37
20707: PUSH
20708: LD_INT 21
20710: PUSH
20711: LD_INT 23
20713: PUSH
20714: LD_INT 22
20716: PUSH
20717: LD_INT 24
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: PPUSH
20729: LD_INT 4
20731: PPUSH
20732: CALL_OW 12
20736: ARRAY
20737: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
20738: LD_ADDR_OWVAR 39
20742: PUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_INT 3
20748: PPUSH
20749: CALL_OW 12
20753: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
20754: LD_ADDR_OWVAR 38
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 3
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: PPUSH
20772: LD_INT 2
20774: PPUSH
20775: CALL_OW 12
20779: ARRAY
20780: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
20781: LD_ADDR_OWVAR 40
20785: PUSH
20786: LD_INT 42
20788: PUSH
20789: LD_INT 43
20791: PUSH
20792: LD_INT 44
20794: PUSH
20795: LD_INT 46
20797: PUSH
20798: LD_INT 48
20800: PUSH
20801: LD_INT 47
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: PPUSH
20815: LD_INT 6
20817: PPUSH
20818: CALL_OW 12
20822: ARRAY
20823: ST_TO_ADDR
// end ; end ;
20824: GO 20827
20826: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20827: CALL_OW 45
20831: PPUSH
20832: LD_INT 1
20834: PPUSH
20835: CALL_OW 51
// end ;
20839: LD_VAR 0 1
20843: RET
// export hInvincible ; every 1 do
20844: GO 20846
20846: DISABLE
// hInvincible := [ ] ;
20847: LD_ADDR_EXP 121
20851: PUSH
20852: EMPTY
20853: ST_TO_ADDR
20854: END
// every 10 do var i ;
20855: GO 20857
20857: DISABLE
20858: LD_INT 0
20860: PPUSH
// begin enable ;
20861: ENABLE
// if not hInvincible then
20862: LD_EXP 121
20866: NOT
20867: IFFALSE 20871
// exit ;
20869: GO 20915
// for i in hInvincible do
20871: LD_ADDR_VAR 0 1
20875: PUSH
20876: LD_EXP 121
20880: PUSH
20881: FOR_IN
20882: IFFALSE 20913
// if GetLives ( i ) < 1000 then
20884: LD_VAR 0 1
20888: PPUSH
20889: CALL_OW 256
20893: PUSH
20894: LD_INT 1000
20896: LESS
20897: IFFALSE 20911
// SetLives ( i , 1000 ) ;
20899: LD_VAR 0 1
20903: PPUSH
20904: LD_INT 1000
20906: PPUSH
20907: CALL_OW 234
20911: GO 20881
20913: POP
20914: POP
// end ;
20915: PPOPN 1
20917: END
// export function hHackInvincible ; var i ; begin
20918: LD_INT 0
20920: PPUSH
20921: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 21
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: PUSH
20960: FOR_IN
20961: IFFALSE 21022
// if IsSelected ( i ) then
20963: LD_VAR 0 2
20967: PPUSH
20968: CALL_OW 306
20972: IFFALSE 21020
// begin if i in hInvincible then
20974: LD_VAR 0 2
20978: PUSH
20979: LD_EXP 121
20983: IN
20984: IFFALSE 21004
// hInvincible := hInvincible diff i else
20986: LD_ADDR_EXP 121
20990: PUSH
20991: LD_EXP 121
20995: PUSH
20996: LD_VAR 0 2
21000: DIFF
21001: ST_TO_ADDR
21002: GO 21020
// hInvincible := hInvincible union i ;
21004: LD_ADDR_EXP 121
21008: PUSH
21009: LD_EXP 121
21013: PUSH
21014: LD_VAR 0 2
21018: UNION
21019: ST_TO_ADDR
// end ;
21020: GO 20960
21022: POP
21023: POP
// end ;
21024: LD_VAR 0 1
21028: RET
// export function hHackInvisible ; var i , j ; begin
21029: LD_INT 0
21031: PPUSH
21032: PPUSH
21033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21034: LD_ADDR_VAR 0 2
21038: PUSH
21039: LD_INT 21
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PPUSH
21049: CALL_OW 69
21053: PUSH
21054: FOR_IN
21055: IFFALSE 21079
// if IsSelected ( i ) then
21057: LD_VAR 0 2
21061: PPUSH
21062: CALL_OW 306
21066: IFFALSE 21077
// ComForceInvisible ( i ) ;
21068: LD_VAR 0 2
21072: PPUSH
21073: CALL_OW 496
21077: GO 21054
21079: POP
21080: POP
// end ;
21081: LD_VAR 0 1
21085: RET
// export function hHackChangeYourSide ; begin
21086: LD_INT 0
21088: PPUSH
// if your_side = 8 then
21089: LD_OWVAR 2
21093: PUSH
21094: LD_INT 8
21096: EQUAL
21097: IFFALSE 21109
// your_side := 0 else
21099: LD_ADDR_OWVAR 2
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
21107: GO 21123
// your_side := your_side + 1 ;
21109: LD_ADDR_OWVAR 2
21113: PUSH
21114: LD_OWVAR 2
21118: PUSH
21119: LD_INT 1
21121: PLUS
21122: ST_TO_ADDR
// end ;
21123: LD_VAR 0 1
21127: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21128: LD_INT 0
21130: PPUSH
21131: PPUSH
21132: PPUSH
// for i in all_units do
21133: LD_ADDR_VAR 0 2
21137: PUSH
21138: LD_OWVAR 3
21142: PUSH
21143: FOR_IN
21144: IFFALSE 21222
// if IsSelected ( i ) then
21146: LD_VAR 0 2
21150: PPUSH
21151: CALL_OW 306
21155: IFFALSE 21220
// begin j := GetSide ( i ) ;
21157: LD_ADDR_VAR 0 3
21161: PUSH
21162: LD_VAR 0 2
21166: PPUSH
21167: CALL_OW 255
21171: ST_TO_ADDR
// if j = 8 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 8
21179: EQUAL
21180: IFFALSE 21192
// j := 0 else
21182: LD_ADDR_VAR 0 3
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
21190: GO 21206
// j := j + 1 ;
21192: LD_ADDR_VAR 0 3
21196: PUSH
21197: LD_VAR 0 3
21201: PUSH
21202: LD_INT 1
21204: PLUS
21205: ST_TO_ADDR
// SetSide ( i , j ) ;
21206: LD_VAR 0 2
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: CALL_OW 235
// end ;
21220: GO 21143
21222: POP
21223: POP
// end ;
21224: LD_VAR 0 1
21228: RET
// export function hHackFog ; begin
21229: LD_INT 0
21231: PPUSH
// FogOff ( true ) ;
21232: LD_INT 1
21234: PPUSH
21235: CALL_OW 344
// end ;
21239: LD_VAR 0 1
21243: RET
// export function hHackApeman ; begin
21244: LD_INT 0
21246: PPUSH
// uc_side := your_side ;
21247: LD_ADDR_OWVAR 20
21251: PUSH
21252: LD_OWVAR 2
21256: ST_TO_ADDR
// uc_nation := 0 ;
21257: LD_ADDR_OWVAR 21
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// hc_name :=  ;
21265: LD_ADDR_OWVAR 26
21269: PUSH
21270: LD_STRING 
21272: ST_TO_ADDR
// hc_gallery :=  ;
21273: LD_ADDR_OWVAR 33
21277: PUSH
21278: LD_STRING 
21280: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
21281: LD_ADDR_OWVAR 31
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: ST_TO_ADDR
// hc_class := class_apeman ;
21304: LD_ADDR_OWVAR 28
21308: PUSH
21309: LD_INT 12
21311: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
21312: CALL_OW 44
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: CALL_OW 51
// end ;
21324: LD_VAR 0 1
21328: RET
// export function hHackBoom ; begin
21329: LD_INT 0
21331: PPUSH
// uc_side := your_side ;
21332: LD_ADDR_OWVAR 20
21336: PUSH
21337: LD_OWVAR 2
21341: ST_TO_ADDR
// uc_nation := 1 ;
21342: LD_ADDR_OWVAR 21
21346: PUSH
21347: LD_INT 1
21349: ST_TO_ADDR
// vc_chassis := us_morphling ;
21350: LD_ADDR_OWVAR 37
21354: PUSH
21355: LD_INT 5
21357: ST_TO_ADDR
// vc_engine := engine_siberite ;
21358: LD_ADDR_OWVAR 39
21362: PUSH
21363: LD_INT 3
21365: ST_TO_ADDR
// vc_control := control_computer ;
21366: LD_ADDR_OWVAR 38
21370: PUSH
21371: LD_INT 3
21373: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
21374: LD_ADDR_OWVAR 40
21378: PUSH
21379: LD_INT 8
21381: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21382: CALL_OW 45
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 51
// end ; end_of_file
21394: LD_VAR 0 1
21398: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21399: LD_INT 0
21401: PPUSH
21402: PPUSH
21403: PPUSH
21404: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21405: LD_VAR 0 1
21409: PPUSH
21410: CALL_OW 264
21414: PUSH
21415: LD_EXP 56
21419: EQUAL
21420: IFFALSE 21492
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21422: LD_INT 68
21424: PPUSH
21425: LD_VAR 0 1
21429: PPUSH
21430: CALL_OW 255
21434: PPUSH
21435: CALL_OW 321
21439: PUSH
21440: LD_INT 2
21442: EQUAL
21443: IFFALSE 21455
// eff := 70 else
21445: LD_ADDR_VAR 0 4
21449: PUSH
21450: LD_INT 70
21452: ST_TO_ADDR
21453: GO 21463
// eff := 30 ;
21455: LD_ADDR_VAR 0 4
21459: PUSH
21460: LD_INT 30
21462: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21463: LD_VAR 0 1
21467: PPUSH
21468: CALL_OW 250
21472: PPUSH
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL_OW 251
21482: PPUSH
21483: LD_VAR 0 4
21487: PPUSH
21488: CALL_OW 495
// end ; end ;
21492: LD_VAR 0 2
21496: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21497: LD_INT 0
21499: PPUSH
// end ;
21500: LD_VAR 0 4
21504: RET
// export function SOS_Command ( cmd ) ; begin
21505: LD_INT 0
21507: PPUSH
// end ;
21508: LD_VAR 0 2
21512: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21513: LD_VAR 0 1
21517: PUSH
21518: LD_INT 254
21520: EQUAL
21521: PUSH
21522: LD_VAR 0 2
21526: PPUSH
21527: CALL_OW 264
21531: PUSH
21532: LD_EXP 54
21536: EQUAL
21537: AND
21538: PUSH
21539: LD_VAR 0 3
21543: PPUSH
21544: CALL_OW 263
21548: PUSH
21549: LD_INT 3
21551: EQUAL
21552: AND
21553: IFFALSE 21569
// HackDestroyVehicle ( unit , selectedUnit ) ;
21555: LD_VAR 0 2
21559: PPUSH
21560: LD_VAR 0 3
21564: PPUSH
21565: CALL 23076 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21569: LD_VAR 0 1
21573: PUSH
21574: LD_INT 255
21576: EQUAL
21577: PUSH
21578: LD_VAR 0 2
21582: PPUSH
21583: CALL_OW 264
21587: PUSH
21588: LD_INT 14
21590: PUSH
21591: LD_INT 53
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: IN
21598: AND
21599: PUSH
21600: LD_VAR 0 4
21604: PPUSH
21605: LD_VAR 0 5
21609: PPUSH
21610: CALL_OW 488
21614: AND
21615: IFFALSE 21639
// CutTreeXYR ( unit , x , y , 12 ) ;
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 4
21626: PPUSH
21627: LD_VAR 0 5
21631: PPUSH
21632: LD_INT 12
21634: PPUSH
21635: CALL 21642 0 4
// end ;
21639: PPOPN 5
21641: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
21652: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21653: LD_VAR 0 1
21657: NOT
21658: PUSH
21659: LD_VAR 0 2
21663: PPUSH
21664: LD_VAR 0 3
21668: PPUSH
21669: CALL_OW 488
21673: NOT
21674: OR
21675: PUSH
21676: LD_VAR 0 4
21680: NOT
21681: OR
21682: IFFALSE 21686
// exit ;
21684: GO 22026
// list := [ ] ;
21686: LD_ADDR_VAR 0 13
21690: PUSH
21691: EMPTY
21692: ST_TO_ADDR
// if x - r < 0 then
21693: LD_VAR 0 2
21697: PUSH
21698: LD_VAR 0 4
21702: MINUS
21703: PUSH
21704: LD_INT 0
21706: LESS
21707: IFFALSE 21719
// min_x := 0 else
21709: LD_ADDR_VAR 0 7
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
21717: GO 21735
// min_x := x - r ;
21719: LD_ADDR_VAR 0 7
21723: PUSH
21724: LD_VAR 0 2
21728: PUSH
21729: LD_VAR 0 4
21733: MINUS
21734: ST_TO_ADDR
// if y - r < 0 then
21735: LD_VAR 0 3
21739: PUSH
21740: LD_VAR 0 4
21744: MINUS
21745: PUSH
21746: LD_INT 0
21748: LESS
21749: IFFALSE 21761
// min_y := 0 else
21751: LD_ADDR_VAR 0 8
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
21759: GO 21777
// min_y := y - r ;
21761: LD_ADDR_VAR 0 8
21765: PUSH
21766: LD_VAR 0 3
21770: PUSH
21771: LD_VAR 0 4
21775: MINUS
21776: ST_TO_ADDR
// max_x := x + r ;
21777: LD_ADDR_VAR 0 9
21781: PUSH
21782: LD_VAR 0 2
21786: PUSH
21787: LD_VAR 0 4
21791: PLUS
21792: ST_TO_ADDR
// max_y := y + r ;
21793: LD_ADDR_VAR 0 10
21797: PUSH
21798: LD_VAR 0 3
21802: PUSH
21803: LD_VAR 0 4
21807: PLUS
21808: ST_TO_ADDR
// for _x = min_x to max_x do
21809: LD_ADDR_VAR 0 11
21813: PUSH
21814: DOUBLE
21815: LD_VAR 0 7
21819: DEC
21820: ST_TO_ADDR
21821: LD_VAR 0 9
21825: PUSH
21826: FOR_TO
21827: IFFALSE 21944
// for _y = min_y to max_y do
21829: LD_ADDR_VAR 0 12
21833: PUSH
21834: DOUBLE
21835: LD_VAR 0 8
21839: DEC
21840: ST_TO_ADDR
21841: LD_VAR 0 10
21845: PUSH
21846: FOR_TO
21847: IFFALSE 21940
// begin if not ValidHex ( _x , _y ) then
21849: LD_VAR 0 11
21853: PPUSH
21854: LD_VAR 0 12
21858: PPUSH
21859: CALL_OW 488
21863: NOT
21864: IFFALSE 21868
// continue ;
21866: GO 21846
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21868: LD_VAR 0 11
21872: PPUSH
21873: LD_VAR 0 12
21877: PPUSH
21878: CALL_OW 351
21882: PUSH
21883: LD_VAR 0 11
21887: PPUSH
21888: LD_VAR 0 12
21892: PPUSH
21893: CALL_OW 554
21897: AND
21898: IFFALSE 21938
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21900: LD_ADDR_VAR 0 13
21904: PUSH
21905: LD_VAR 0 13
21909: PPUSH
21910: LD_VAR 0 13
21914: PUSH
21915: LD_INT 1
21917: PLUS
21918: PPUSH
21919: LD_VAR 0 11
21923: PUSH
21924: LD_VAR 0 12
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PPUSH
21933: CALL_OW 2
21937: ST_TO_ADDR
// end ;
21938: GO 21846
21940: POP
21941: POP
21942: GO 21826
21944: POP
21945: POP
// if not list then
21946: LD_VAR 0 13
21950: NOT
21951: IFFALSE 21955
// exit ;
21953: GO 22026
// for i in list do
21955: LD_ADDR_VAR 0 6
21959: PUSH
21960: LD_VAR 0 13
21964: PUSH
21965: FOR_IN
21966: IFFALSE 22024
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_STRING M
21975: PUSH
21976: LD_VAR 0 6
21980: PUSH
21981: LD_INT 1
21983: ARRAY
21984: PUSH
21985: LD_VAR 0 6
21989: PUSH
21990: LD_INT 2
21992: ARRAY
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: LD_INT 0
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: PUSH
22015: EMPTY
22016: LIST
22017: PPUSH
22018: CALL_OW 447
22022: GO 21965
22024: POP
22025: POP
// end ;
22026: LD_VAR 0 5
22030: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22031: LD_EXP 122
22035: NOT
22036: IFFALSE 22086
22038: GO 22040
22040: DISABLE
// begin initHack := true ;
22041: LD_ADDR_EXP 122
22045: PUSH
22046: LD_INT 1
22048: ST_TO_ADDR
// hackTanks := [ ] ;
22049: LD_ADDR_EXP 123
22053: PUSH
22054: EMPTY
22055: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22056: LD_ADDR_EXP 124
22060: PUSH
22061: EMPTY
22062: ST_TO_ADDR
// hackLimit := 3 ;
22063: LD_ADDR_EXP 125
22067: PUSH
22068: LD_INT 3
22070: ST_TO_ADDR
// hackDist := 12 ;
22071: LD_ADDR_EXP 126
22075: PUSH
22076: LD_INT 12
22078: ST_TO_ADDR
// hackCounter := [ ] ;
22079: LD_ADDR_EXP 127
22083: PUSH
22084: EMPTY
22085: ST_TO_ADDR
// end ;
22086: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22087: LD_EXP 122
22091: PUSH
22092: LD_INT 34
22094: PUSH
22095: LD_EXP 54
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PPUSH
22104: CALL_OW 69
22108: AND
22109: IFFALSE 22364
22111: GO 22113
22113: DISABLE
22114: LD_INT 0
22116: PPUSH
22117: PPUSH
// begin enable ;
22118: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_INT 34
22126: PUSH
22127: LD_EXP 54
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 69
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22362
// begin if not i in hackTanks then
22144: LD_VAR 0 1
22148: PUSH
22149: LD_EXP 123
22153: IN
22154: NOT
22155: IFFALSE 22238
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22157: LD_ADDR_EXP 123
22161: PUSH
22162: LD_EXP 123
22166: PPUSH
22167: LD_EXP 123
22171: PUSH
22172: LD_INT 1
22174: PLUS
22175: PPUSH
22176: LD_VAR 0 1
22180: PPUSH
22181: CALL_OW 1
22185: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22186: LD_ADDR_EXP 124
22190: PUSH
22191: LD_EXP 124
22195: PPUSH
22196: LD_EXP 124
22200: PUSH
22201: LD_INT 1
22203: PLUS
22204: PPUSH
22205: EMPTY
22206: PPUSH
22207: CALL_OW 1
22211: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22212: LD_ADDR_EXP 127
22216: PUSH
22217: LD_EXP 127
22221: PPUSH
22222: LD_EXP 127
22226: PUSH
22227: LD_INT 1
22229: PLUS
22230: PPUSH
22231: EMPTY
22232: PPUSH
22233: CALL_OW 1
22237: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22238: LD_VAR 0 1
22242: PPUSH
22243: CALL_OW 302
22247: NOT
22248: IFFALSE 22261
// begin HackUnlinkAll ( i ) ;
22250: LD_VAR 0 1
22254: PPUSH
22255: CALL 22367 0 1
// continue ;
22259: GO 22141
// end ; HackCheckCapturedStatus ( i ) ;
22261: LD_VAR 0 1
22265: PPUSH
22266: CALL 22810 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_INT 81
22277: PUSH
22278: LD_VAR 0 1
22282: PPUSH
22283: CALL_OW 255
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 33
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 91
22304: PUSH
22305: LD_VAR 0 1
22309: PUSH
22310: LD_EXP 126
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 50
22322: PUSH
22323: EMPTY
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PPUSH
22332: CALL_OW 69
22336: ST_TO_ADDR
// if not tmp then
22337: LD_VAR 0 2
22341: NOT
22342: IFFALSE 22346
// continue ;
22344: GO 22141
// HackLink ( i , tmp ) ;
22346: LD_VAR 0 1
22350: PPUSH
22351: LD_VAR 0 2
22355: PPUSH
22356: CALL 22503 0 2
// end ;
22360: GO 22141
22362: POP
22363: POP
// end ;
22364: PPOPN 2
22366: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22367: LD_INT 0
22369: PPUSH
22370: PPUSH
22371: PPUSH
// if not hack in hackTanks then
22372: LD_VAR 0 1
22376: PUSH
22377: LD_EXP 123
22381: IN
22382: NOT
22383: IFFALSE 22387
// exit ;
22385: GO 22498
// index := GetElementIndex ( hackTanks , hack ) ;
22387: LD_ADDR_VAR 0 4
22391: PUSH
22392: LD_EXP 123
22396: PPUSH
22397: LD_VAR 0 1
22401: PPUSH
22402: CALL 27918 0 2
22406: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22407: LD_EXP 124
22411: PUSH
22412: LD_VAR 0 4
22416: ARRAY
22417: IFFALSE 22498
// begin for i in hackTanksCaptured [ index ] do
22419: LD_ADDR_VAR 0 3
22423: PUSH
22424: LD_EXP 124
22428: PUSH
22429: LD_VAR 0 4
22433: ARRAY
22434: PUSH
22435: FOR_IN
22436: IFFALSE 22462
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22438: LD_VAR 0 3
22442: PUSH
22443: LD_INT 1
22445: ARRAY
22446: PPUSH
22447: LD_VAR 0 3
22451: PUSH
22452: LD_INT 2
22454: ARRAY
22455: PPUSH
22456: CALL_OW 235
22460: GO 22435
22462: POP
22463: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22464: LD_ADDR_EXP 124
22468: PUSH
22469: LD_EXP 124
22473: PPUSH
22474: LD_VAR 0 4
22478: PPUSH
22479: EMPTY
22480: PPUSH
22481: CALL_OW 1
22485: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22486: LD_VAR 0 1
22490: PPUSH
22491: LD_INT 0
22493: PPUSH
22494: CALL_OW 505
// end ; end ;
22498: LD_VAR 0 2
22502: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22503: LD_INT 0
22505: PPUSH
22506: PPUSH
22507: PPUSH
// if not hack in hackTanks or not vehicles then
22508: LD_VAR 0 1
22512: PUSH
22513: LD_EXP 123
22517: IN
22518: NOT
22519: PUSH
22520: LD_VAR 0 2
22524: NOT
22525: OR
22526: IFFALSE 22530
// exit ;
22528: GO 22805
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22530: LD_ADDR_VAR 0 2
22534: PUSH
22535: LD_VAR 0 1
22539: PPUSH
22540: LD_VAR 0 2
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL 28568 0 4
22555: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22556: LD_ADDR_VAR 0 5
22560: PUSH
22561: LD_EXP 123
22565: PPUSH
22566: LD_VAR 0 1
22570: PPUSH
22571: CALL 27918 0 2
22575: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22576: LD_EXP 124
22580: PUSH
22581: LD_VAR 0 5
22585: ARRAY
22586: PUSH
22587: LD_EXP 125
22591: LESS
22592: IFFALSE 22781
// begin for i := 1 to vehicles do
22594: LD_ADDR_VAR 0 4
22598: PUSH
22599: DOUBLE
22600: LD_INT 1
22602: DEC
22603: ST_TO_ADDR
22604: LD_VAR 0 2
22608: PUSH
22609: FOR_TO
22610: IFFALSE 22779
// begin if hackTanksCaptured [ index ] = hackLimit then
22612: LD_EXP 124
22616: PUSH
22617: LD_VAR 0 5
22621: ARRAY
22622: PUSH
22623: LD_EXP 125
22627: EQUAL
22628: IFFALSE 22632
// break ;
22630: GO 22779
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22632: LD_ADDR_EXP 127
22636: PUSH
22637: LD_EXP 127
22641: PPUSH
22642: LD_VAR 0 5
22646: PPUSH
22647: LD_EXP 127
22651: PUSH
22652: LD_VAR 0 5
22656: ARRAY
22657: PUSH
22658: LD_INT 1
22660: PLUS
22661: PPUSH
22662: CALL_OW 1
22666: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22667: LD_ADDR_EXP 124
22671: PUSH
22672: LD_EXP 124
22676: PPUSH
22677: LD_VAR 0 5
22681: PUSH
22682: LD_EXP 124
22686: PUSH
22687: LD_VAR 0 5
22691: ARRAY
22692: PUSH
22693: LD_INT 1
22695: PLUS
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: LD_VAR 0 2
22705: PUSH
22706: LD_VAR 0 4
22710: ARRAY
22711: PUSH
22712: LD_VAR 0 2
22716: PUSH
22717: LD_VAR 0 4
22721: ARRAY
22722: PPUSH
22723: CALL_OW 255
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PPUSH
22732: CALL 28133 0 3
22736: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22737: LD_VAR 0 2
22741: PUSH
22742: LD_VAR 0 4
22746: ARRAY
22747: PPUSH
22748: LD_VAR 0 1
22752: PPUSH
22753: CALL_OW 255
22757: PPUSH
22758: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22762: LD_VAR 0 2
22766: PUSH
22767: LD_VAR 0 4
22771: ARRAY
22772: PPUSH
22773: CALL_OW 141
// end ;
22777: GO 22609
22779: POP
22780: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22781: LD_VAR 0 1
22785: PPUSH
22786: LD_EXP 124
22790: PUSH
22791: LD_VAR 0 5
22795: ARRAY
22796: PUSH
22797: LD_INT 0
22799: PLUS
22800: PPUSH
22801: CALL_OW 505
// end ;
22805: LD_VAR 0 3
22809: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22810: LD_INT 0
22812: PPUSH
22813: PPUSH
22814: PPUSH
22815: PPUSH
// if not hack in hackTanks then
22816: LD_VAR 0 1
22820: PUSH
22821: LD_EXP 123
22825: IN
22826: NOT
22827: IFFALSE 22831
// exit ;
22829: GO 23071
// index := GetElementIndex ( hackTanks , hack ) ;
22831: LD_ADDR_VAR 0 4
22835: PUSH
22836: LD_EXP 123
22840: PPUSH
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL 27918 0 2
22850: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: DOUBLE
22857: LD_EXP 124
22861: PUSH
22862: LD_VAR 0 4
22866: ARRAY
22867: INC
22868: ST_TO_ADDR
22869: LD_INT 1
22871: PUSH
22872: FOR_DOWNTO
22873: IFFALSE 23045
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22875: LD_ADDR_VAR 0 5
22879: PUSH
22880: LD_EXP 124
22884: PUSH
22885: LD_VAR 0 4
22889: ARRAY
22890: PUSH
22891: LD_VAR 0 3
22895: ARRAY
22896: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22897: LD_VAR 0 5
22901: PUSH
22902: LD_INT 1
22904: ARRAY
22905: PPUSH
22906: CALL_OW 302
22910: NOT
22911: PUSH
22912: LD_VAR 0 5
22916: PUSH
22917: LD_INT 1
22919: ARRAY
22920: PPUSH
22921: CALL_OW 255
22925: PUSH
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL_OW 255
22935: NONEQUAL
22936: OR
22937: IFFALSE 23043
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22939: LD_VAR 0 5
22943: PUSH
22944: LD_INT 1
22946: ARRAY
22947: PPUSH
22948: CALL_OW 305
22952: PUSH
22953: LD_VAR 0 5
22957: PUSH
22958: LD_INT 1
22960: ARRAY
22961: PPUSH
22962: CALL_OW 255
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 255
22976: EQUAL
22977: AND
22978: IFFALSE 23002
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22980: LD_VAR 0 5
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: PPUSH
22989: LD_VAR 0 5
22993: PUSH
22994: LD_INT 2
22996: ARRAY
22997: PPUSH
22998: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23002: LD_ADDR_EXP 124
23006: PUSH
23007: LD_EXP 124
23011: PPUSH
23012: LD_VAR 0 4
23016: PPUSH
23017: LD_EXP 124
23021: PUSH
23022: LD_VAR 0 4
23026: ARRAY
23027: PPUSH
23028: LD_VAR 0 3
23032: PPUSH
23033: CALL_OW 3
23037: PPUSH
23038: CALL_OW 1
23042: ST_TO_ADDR
// end ; end ;
23043: GO 22872
23045: POP
23046: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23047: LD_VAR 0 1
23051: PPUSH
23052: LD_EXP 124
23056: PUSH
23057: LD_VAR 0 4
23061: ARRAY
23062: PUSH
23063: LD_INT 0
23065: PLUS
23066: PPUSH
23067: CALL_OW 505
// end ;
23071: LD_VAR 0 2
23075: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23076: LD_INT 0
23078: PPUSH
23079: PPUSH
23080: PPUSH
23081: PPUSH
// if not hack in hackTanks then
23082: LD_VAR 0 1
23086: PUSH
23087: LD_EXP 123
23091: IN
23092: NOT
23093: IFFALSE 23097
// exit ;
23095: GO 23182
// index := GetElementIndex ( hackTanks , hack ) ;
23097: LD_ADDR_VAR 0 5
23101: PUSH
23102: LD_EXP 123
23106: PPUSH
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL 27918 0 2
23116: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23117: LD_ADDR_VAR 0 4
23121: PUSH
23122: DOUBLE
23123: LD_INT 1
23125: DEC
23126: ST_TO_ADDR
23127: LD_EXP 124
23131: PUSH
23132: LD_VAR 0 5
23136: ARRAY
23137: PUSH
23138: FOR_TO
23139: IFFALSE 23180
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23141: LD_EXP 124
23145: PUSH
23146: LD_VAR 0 5
23150: ARRAY
23151: PUSH
23152: LD_VAR 0 4
23156: ARRAY
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PUSH
23162: LD_VAR 0 2
23166: EQUAL
23167: IFFALSE 23178
// KillUnit ( vehicle ) ;
23169: LD_VAR 0 2
23173: PPUSH
23174: CALL_OW 66
23178: GO 23138
23180: POP
23181: POP
// end ; end_of_file
23182: LD_VAR 0 3
23186: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23187: LD_INT 0
23189: PPUSH
23190: PPUSH
// if exist_mode then
23191: LD_VAR 0 2
23195: IFFALSE 23220
// unit := CreateCharacter ( prefix & ident ) else
23197: LD_ADDR_VAR 0 5
23201: PUSH
23202: LD_VAR 0 3
23206: PUSH
23207: LD_VAR 0 1
23211: STR
23212: PPUSH
23213: CALL_OW 34
23217: ST_TO_ADDR
23218: GO 23235
// unit := NewCharacter ( ident ) ;
23220: LD_ADDR_VAR 0 5
23224: PUSH
23225: LD_VAR 0 1
23229: PPUSH
23230: CALL_OW 25
23234: ST_TO_ADDR
// result := unit ;
23235: LD_ADDR_VAR 0 4
23239: PUSH
23240: LD_VAR 0 5
23244: ST_TO_ADDR
// end ;
23245: LD_VAR 0 4
23249: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23250: LD_INT 0
23252: PPUSH
23253: PPUSH
// if not side or not nation then
23254: LD_VAR 0 1
23258: NOT
23259: PUSH
23260: LD_VAR 0 2
23264: NOT
23265: OR
23266: IFFALSE 23270
// exit ;
23268: GO 24034
// case nation of nation_american :
23270: LD_VAR 0 2
23274: PUSH
23275: LD_INT 1
23277: DOUBLE
23278: EQUAL
23279: IFTRUE 23283
23281: GO 23497
23283: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23284: LD_ADDR_VAR 0 4
23288: PUSH
23289: LD_INT 35
23291: PUSH
23292: LD_INT 45
23294: PUSH
23295: LD_INT 46
23297: PUSH
23298: LD_INT 47
23300: PUSH
23301: LD_INT 82
23303: PUSH
23304: LD_INT 83
23306: PUSH
23307: LD_INT 84
23309: PUSH
23310: LD_INT 85
23312: PUSH
23313: LD_INT 86
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 6
23324: PUSH
23325: LD_INT 15
23327: PUSH
23328: LD_INT 16
23330: PUSH
23331: LD_INT 7
23333: PUSH
23334: LD_INT 12
23336: PUSH
23337: LD_INT 13
23339: PUSH
23340: LD_INT 10
23342: PUSH
23343: LD_INT 14
23345: PUSH
23346: LD_INT 20
23348: PUSH
23349: LD_INT 21
23351: PUSH
23352: LD_INT 22
23354: PUSH
23355: LD_INT 25
23357: PUSH
23358: LD_INT 32
23360: PUSH
23361: LD_INT 27
23363: PUSH
23364: LD_INT 36
23366: PUSH
23367: LD_INT 69
23369: PUSH
23370: LD_INT 39
23372: PUSH
23373: LD_INT 34
23375: PUSH
23376: LD_INT 40
23378: PUSH
23379: LD_INT 48
23381: PUSH
23382: LD_INT 49
23384: PUSH
23385: LD_INT 50
23387: PUSH
23388: LD_INT 51
23390: PUSH
23391: LD_INT 52
23393: PUSH
23394: LD_INT 53
23396: PUSH
23397: LD_INT 54
23399: PUSH
23400: LD_INT 55
23402: PUSH
23403: LD_INT 56
23405: PUSH
23406: LD_INT 57
23408: PUSH
23409: LD_INT 58
23411: PUSH
23412: LD_INT 59
23414: PUSH
23415: LD_INT 60
23417: PUSH
23418: LD_INT 61
23420: PUSH
23421: LD_INT 62
23423: PUSH
23424: LD_INT 80
23426: PUSH
23427: LD_INT 82
23429: PUSH
23430: LD_INT 83
23432: PUSH
23433: LD_INT 84
23435: PUSH
23436: LD_INT 85
23438: PUSH
23439: LD_INT 86
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
23495: GO 23958
23497: LD_INT 2
23499: DOUBLE
23500: EQUAL
23501: IFTRUE 23505
23503: GO 23727
23505: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
23506: LD_ADDR_VAR 0 4
23510: PUSH
23511: LD_INT 35
23513: PUSH
23514: LD_INT 45
23516: PUSH
23517: LD_INT 46
23519: PUSH
23520: LD_INT 47
23522: PUSH
23523: LD_INT 82
23525: PUSH
23526: LD_INT 83
23528: PUSH
23529: LD_INT 84
23531: PUSH
23532: LD_INT 85
23534: PUSH
23535: LD_INT 87
23537: PUSH
23538: LD_INT 70
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 11
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: LD_INT 6
23558: PUSH
23559: LD_INT 15
23561: PUSH
23562: LD_INT 18
23564: PUSH
23565: LD_INT 7
23567: PUSH
23568: LD_INT 17
23570: PUSH
23571: LD_INT 8
23573: PUSH
23574: LD_INT 20
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 72
23585: PUSH
23586: LD_INT 26
23588: PUSH
23589: LD_INT 69
23591: PUSH
23592: LD_INT 39
23594: PUSH
23595: LD_INT 40
23597: PUSH
23598: LD_INT 41
23600: PUSH
23601: LD_INT 42
23603: PUSH
23604: LD_INT 43
23606: PUSH
23607: LD_INT 48
23609: PUSH
23610: LD_INT 49
23612: PUSH
23613: LD_INT 50
23615: PUSH
23616: LD_INT 51
23618: PUSH
23619: LD_INT 52
23621: PUSH
23622: LD_INT 53
23624: PUSH
23625: LD_INT 54
23627: PUSH
23628: LD_INT 55
23630: PUSH
23631: LD_INT 56
23633: PUSH
23634: LD_INT 60
23636: PUSH
23637: LD_INT 61
23639: PUSH
23640: LD_INT 62
23642: PUSH
23643: LD_INT 66
23645: PUSH
23646: LD_INT 67
23648: PUSH
23649: LD_INT 68
23651: PUSH
23652: LD_INT 81
23654: PUSH
23655: LD_INT 82
23657: PUSH
23658: LD_INT 83
23660: PUSH
23661: LD_INT 84
23663: PUSH
23664: LD_INT 85
23666: PUSH
23667: LD_INT 87
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: ST_TO_ADDR
23725: GO 23958
23727: LD_INT 3
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23957
23735: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23736: LD_ADDR_VAR 0 4
23740: PUSH
23741: LD_INT 46
23743: PUSH
23744: LD_INT 47
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 82
23755: PUSH
23756: LD_INT 83
23758: PUSH
23759: LD_INT 84
23761: PUSH
23762: LD_INT 85
23764: PUSH
23765: LD_INT 86
23767: PUSH
23768: LD_INT 11
23770: PUSH
23771: LD_INT 9
23773: PUSH
23774: LD_INT 20
23776: PUSH
23777: LD_INT 19
23779: PUSH
23780: LD_INT 21
23782: PUSH
23783: LD_INT 24
23785: PUSH
23786: LD_INT 22
23788: PUSH
23789: LD_INT 25
23791: PUSH
23792: LD_INT 28
23794: PUSH
23795: LD_INT 29
23797: PUSH
23798: LD_INT 30
23800: PUSH
23801: LD_INT 31
23803: PUSH
23804: LD_INT 37
23806: PUSH
23807: LD_INT 38
23809: PUSH
23810: LD_INT 32
23812: PUSH
23813: LD_INT 27
23815: PUSH
23816: LD_INT 33
23818: PUSH
23819: LD_INT 69
23821: PUSH
23822: LD_INT 39
23824: PUSH
23825: LD_INT 34
23827: PUSH
23828: LD_INT 40
23830: PUSH
23831: LD_INT 71
23833: PUSH
23834: LD_INT 23
23836: PUSH
23837: LD_INT 44
23839: PUSH
23840: LD_INT 48
23842: PUSH
23843: LD_INT 49
23845: PUSH
23846: LD_INT 50
23848: PUSH
23849: LD_INT 51
23851: PUSH
23852: LD_INT 52
23854: PUSH
23855: LD_INT 53
23857: PUSH
23858: LD_INT 54
23860: PUSH
23861: LD_INT 55
23863: PUSH
23864: LD_INT 56
23866: PUSH
23867: LD_INT 57
23869: PUSH
23870: LD_INT 58
23872: PUSH
23873: LD_INT 59
23875: PUSH
23876: LD_INT 63
23878: PUSH
23879: LD_INT 64
23881: PUSH
23882: LD_INT 65
23884: PUSH
23885: LD_INT 82
23887: PUSH
23888: LD_INT 83
23890: PUSH
23891: LD_INT 84
23893: PUSH
23894: LD_INT 85
23896: PUSH
23897: LD_INT 86
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: ST_TO_ADDR
23955: GO 23958
23957: POP
// if state > - 1 and state < 3 then
23958: LD_VAR 0 3
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: GREATER
23967: PUSH
23968: LD_VAR 0 3
23972: PUSH
23973: LD_INT 3
23975: LESS
23976: AND
23977: IFFALSE 24034
// for i in result do
23979: LD_ADDR_VAR 0 5
23983: PUSH
23984: LD_VAR 0 4
23988: PUSH
23989: FOR_IN
23990: IFFALSE 24032
// if GetTech ( i , side ) <> state then
23992: LD_VAR 0 5
23996: PPUSH
23997: LD_VAR 0 1
24001: PPUSH
24002: CALL_OW 321
24006: PUSH
24007: LD_VAR 0 3
24011: NONEQUAL
24012: IFFALSE 24030
// result := result diff i ;
24014: LD_ADDR_VAR 0 4
24018: PUSH
24019: LD_VAR 0 4
24023: PUSH
24024: LD_VAR 0 5
24028: DIFF
24029: ST_TO_ADDR
24030: GO 23989
24032: POP
24033: POP
// end ;
24034: LD_VAR 0 4
24038: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24039: LD_INT 0
24041: PPUSH
24042: PPUSH
24043: PPUSH
// result := true ;
24044: LD_ADDR_VAR 0 3
24048: PUSH
24049: LD_INT 1
24051: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24052: LD_ADDR_VAR 0 5
24056: PUSH
24057: LD_VAR 0 2
24061: PPUSH
24062: CALL_OW 480
24066: ST_TO_ADDR
// if not tmp then
24067: LD_VAR 0 5
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24125
// for i in tmp do
24076: LD_ADDR_VAR 0 4
24080: PUSH
24081: LD_VAR 0 5
24085: PUSH
24086: FOR_IN
24087: IFFALSE 24123
// if GetTech ( i , side ) <> state_researched then
24089: LD_VAR 0 4
24093: PPUSH
24094: LD_VAR 0 1
24098: PPUSH
24099: CALL_OW 321
24103: PUSH
24104: LD_INT 2
24106: NONEQUAL
24107: IFFALSE 24121
// begin result := false ;
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_INT 0
24116: ST_TO_ADDR
// exit ;
24117: POP
24118: POP
24119: GO 24125
// end ;
24121: GO 24086
24123: POP
24124: POP
// end ;
24125: LD_VAR 0 3
24129: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24130: LD_INT 0
24132: PPUSH
24133: PPUSH
24134: PPUSH
24135: PPUSH
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24145: LD_VAR 0 1
24149: NOT
24150: PUSH
24151: LD_VAR 0 1
24155: PPUSH
24156: CALL_OW 257
24160: PUSH
24161: LD_INT 9
24163: NONEQUAL
24164: OR
24165: IFFALSE 24169
// exit ;
24167: GO 24742
// side := GetSide ( unit ) ;
24169: LD_ADDR_VAR 0 9
24173: PUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 255
24183: ST_TO_ADDR
// tech_space := tech_spacanom ;
24184: LD_ADDR_VAR 0 12
24188: PUSH
24189: LD_INT 29
24191: ST_TO_ADDR
// tech_time := tech_taurad ;
24192: LD_ADDR_VAR 0 13
24196: PUSH
24197: LD_INT 28
24199: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24200: LD_ADDR_VAR 0 11
24204: PUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 310
24214: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24215: LD_VAR 0 11
24219: PPUSH
24220: CALL_OW 247
24224: PUSH
24225: LD_INT 2
24227: EQUAL
24228: IFFALSE 24232
// exit ;
24230: GO 24742
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24232: LD_ADDR_VAR 0 8
24236: PUSH
24237: LD_INT 81
24239: PUSH
24240: LD_VAR 0 9
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: LD_INT 21
24254: PUSH
24255: LD_INT 3
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL_OW 69
24274: ST_TO_ADDR
// if not tmp then
24275: LD_VAR 0 8
24279: NOT
24280: IFFALSE 24284
// exit ;
24282: GO 24742
// if in_unit then
24284: LD_VAR 0 11
24288: IFFALSE 24312
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24290: LD_ADDR_VAR 0 10
24294: PUSH
24295: LD_VAR 0 8
24299: PPUSH
24300: LD_VAR 0 11
24304: PPUSH
24305: CALL_OW 74
24309: ST_TO_ADDR
24310: GO 24332
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24312: LD_ADDR_VAR 0 10
24316: PUSH
24317: LD_VAR 0 8
24321: PPUSH
24322: LD_VAR 0 1
24326: PPUSH
24327: CALL_OW 74
24331: ST_TO_ADDR
// if not enemy then
24332: LD_VAR 0 10
24336: NOT
24337: IFFALSE 24341
// exit ;
24339: GO 24742
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24341: LD_VAR 0 11
24345: PUSH
24346: LD_VAR 0 11
24350: PPUSH
24351: LD_VAR 0 10
24355: PPUSH
24356: CALL_OW 296
24360: PUSH
24361: LD_INT 13
24363: GREATER
24364: AND
24365: PUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: LD_VAR 0 10
24375: PPUSH
24376: CALL_OW 296
24380: PUSH
24381: LD_INT 12
24383: GREATER
24384: OR
24385: IFFALSE 24389
// exit ;
24387: GO 24742
// missile := [ 1 ] ;
24389: LD_ADDR_VAR 0 14
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24400: LD_VAR 0 9
24404: PPUSH
24405: LD_VAR 0 12
24409: PPUSH
24410: CALL_OW 325
24414: IFFALSE 24443
// missile := Insert ( missile , missile + 1 , 2 ) ;
24416: LD_ADDR_VAR 0 14
24420: PUSH
24421: LD_VAR 0 14
24425: PPUSH
24426: LD_VAR 0 14
24430: PUSH
24431: LD_INT 1
24433: PLUS
24434: PPUSH
24435: LD_INT 2
24437: PPUSH
24438: CALL_OW 2
24442: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24443: LD_VAR 0 9
24447: PPUSH
24448: LD_VAR 0 13
24452: PPUSH
24453: CALL_OW 325
24457: PUSH
24458: LD_VAR 0 10
24462: PPUSH
24463: CALL_OW 255
24467: PPUSH
24468: LD_VAR 0 13
24472: PPUSH
24473: CALL_OW 325
24477: NOT
24478: AND
24479: IFFALSE 24508
// missile := Insert ( missile , missile + 1 , 3 ) ;
24481: LD_ADDR_VAR 0 14
24485: PUSH
24486: LD_VAR 0 14
24490: PPUSH
24491: LD_VAR 0 14
24495: PUSH
24496: LD_INT 1
24498: PLUS
24499: PPUSH
24500: LD_INT 3
24502: PPUSH
24503: CALL_OW 2
24507: ST_TO_ADDR
// if missile < 2 then
24508: LD_VAR 0 14
24512: PUSH
24513: LD_INT 2
24515: LESS
24516: IFFALSE 24520
// exit ;
24518: GO 24742
// x := GetX ( enemy ) ;
24520: LD_ADDR_VAR 0 4
24524: PUSH
24525: LD_VAR 0 10
24529: PPUSH
24530: CALL_OW 250
24534: ST_TO_ADDR
// y := GetY ( enemy ) ;
24535: LD_ADDR_VAR 0 5
24539: PUSH
24540: LD_VAR 0 10
24544: PPUSH
24545: CALL_OW 251
24549: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24550: LD_ADDR_VAR 0 6
24554: PUSH
24555: LD_VAR 0 4
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PPUSH
24564: LD_INT 1
24566: PPUSH
24567: CALL_OW 12
24571: PLUS
24572: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24573: LD_ADDR_VAR 0 7
24577: PUSH
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PPUSH
24587: LD_INT 1
24589: PPUSH
24590: CALL_OW 12
24594: PLUS
24595: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24596: LD_VAR 0 6
24600: PPUSH
24601: LD_VAR 0 7
24605: PPUSH
24606: CALL_OW 488
24610: NOT
24611: IFFALSE 24633
// begin _x := x ;
24613: LD_ADDR_VAR 0 6
24617: PUSH
24618: LD_VAR 0 4
24622: ST_TO_ADDR
// _y := y ;
24623: LD_ADDR_VAR 0 7
24627: PUSH
24628: LD_VAR 0 5
24632: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24633: LD_ADDR_VAR 0 3
24637: PUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_VAR 0 14
24645: PPUSH
24646: CALL_OW 12
24650: ST_TO_ADDR
// case i of 1 :
24651: LD_VAR 0 3
24655: PUSH
24656: LD_INT 1
24658: DOUBLE
24659: EQUAL
24660: IFTRUE 24664
24662: GO 24681
24664: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24665: LD_VAR 0 1
24669: PPUSH
24670: LD_VAR 0 10
24674: PPUSH
24675: CALL_OW 115
24679: GO 24742
24681: LD_INT 2
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24711
24689: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24690: LD_VAR 0 1
24694: PPUSH
24695: LD_VAR 0 6
24699: PPUSH
24700: LD_VAR 0 7
24704: PPUSH
24705: CALL_OW 153
24709: GO 24742
24711: LD_INT 3
24713: DOUBLE
24714: EQUAL
24715: IFTRUE 24719
24717: GO 24741
24719: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24720: LD_VAR 0 1
24724: PPUSH
24725: LD_VAR 0 6
24729: PPUSH
24730: LD_VAR 0 7
24734: PPUSH
24735: CALL_OW 154
24739: GO 24742
24741: POP
// end ;
24742: LD_VAR 0 2
24746: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24747: LD_INT 0
24749: PPUSH
24750: PPUSH
24751: PPUSH
24752: PPUSH
24753: PPUSH
24754: PPUSH
// if not unit or not building then
24755: LD_VAR 0 1
24759: NOT
24760: PUSH
24761: LD_VAR 0 2
24765: NOT
24766: OR
24767: IFFALSE 24771
// exit ;
24769: GO 24929
// x := GetX ( building ) ;
24771: LD_ADDR_VAR 0 5
24775: PUSH
24776: LD_VAR 0 2
24780: PPUSH
24781: CALL_OW 250
24785: ST_TO_ADDR
// y := GetY ( building ) ;
24786: LD_ADDR_VAR 0 6
24790: PUSH
24791: LD_VAR 0 2
24795: PPUSH
24796: CALL_OW 251
24800: ST_TO_ADDR
// for i = 0 to 5 do
24801: LD_ADDR_VAR 0 4
24805: PUSH
24806: DOUBLE
24807: LD_INT 0
24809: DEC
24810: ST_TO_ADDR
24811: LD_INT 5
24813: PUSH
24814: FOR_TO
24815: IFFALSE 24927
// begin _x := ShiftX ( x , i , 3 ) ;
24817: LD_ADDR_VAR 0 7
24821: PUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_INT 3
24834: PPUSH
24835: CALL_OW 272
24839: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24840: LD_ADDR_VAR 0 8
24844: PUSH
24845: LD_VAR 0 6
24849: PPUSH
24850: LD_VAR 0 4
24854: PPUSH
24855: LD_INT 3
24857: PPUSH
24858: CALL_OW 273
24862: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24863: LD_VAR 0 7
24867: PPUSH
24868: LD_VAR 0 8
24872: PPUSH
24873: CALL_OW 488
24877: NOT
24878: IFFALSE 24882
// continue ;
24880: GO 24814
// if HexInfo ( _x , _y ) = 0 then
24882: LD_VAR 0 7
24886: PPUSH
24887: LD_VAR 0 8
24891: PPUSH
24892: CALL_OW 428
24896: PUSH
24897: LD_INT 0
24899: EQUAL
24900: IFFALSE 24925
// begin ComMoveXY ( unit , _x , _y ) ;
24902: LD_VAR 0 1
24906: PPUSH
24907: LD_VAR 0 7
24911: PPUSH
24912: LD_VAR 0 8
24916: PPUSH
24917: CALL_OW 111
// exit ;
24921: POP
24922: POP
24923: GO 24929
// end ; end ;
24925: GO 24814
24927: POP
24928: POP
// end ;
24929: LD_VAR 0 3
24933: RET
// export function ScanBase ( side , base_area ) ; begin
24934: LD_INT 0
24936: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24937: LD_ADDR_VAR 0 3
24941: PUSH
24942: LD_VAR 0 2
24946: PPUSH
24947: LD_INT 81
24949: PUSH
24950: LD_VAR 0 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PPUSH
24959: CALL_OW 70
24963: ST_TO_ADDR
// end ;
24964: LD_VAR 0 3
24968: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24969: LD_INT 0
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
// result := false ;
24975: LD_ADDR_VAR 0 2
24979: PUSH
24980: LD_INT 0
24982: ST_TO_ADDR
// side := GetSide ( unit ) ;
24983: LD_ADDR_VAR 0 3
24987: PUSH
24988: LD_VAR 0 1
24992: PPUSH
24993: CALL_OW 255
24997: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24998: LD_ADDR_VAR 0 4
25002: PUSH
25003: LD_VAR 0 1
25007: PPUSH
25008: CALL_OW 248
25012: ST_TO_ADDR
// case nat of 1 :
25013: LD_VAR 0 4
25017: PUSH
25018: LD_INT 1
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25037
25026: POP
// tech := tech_lassight ; 2 :
25027: LD_ADDR_VAR 0 5
25031: PUSH
25032: LD_INT 12
25034: ST_TO_ADDR
25035: GO 25076
25037: LD_INT 2
25039: DOUBLE
25040: EQUAL
25041: IFTRUE 25045
25043: GO 25056
25045: POP
// tech := tech_mortar ; 3 :
25046: LD_ADDR_VAR 0 5
25050: PUSH
25051: LD_INT 41
25053: ST_TO_ADDR
25054: GO 25076
25056: LD_INT 3
25058: DOUBLE
25059: EQUAL
25060: IFTRUE 25064
25062: GO 25075
25064: POP
// tech := tech_bazooka ; end ;
25065: LD_ADDR_VAR 0 5
25069: PUSH
25070: LD_INT 44
25072: ST_TO_ADDR
25073: GO 25076
25075: POP
// if Researched ( side , tech ) then
25076: LD_VAR 0 3
25080: PPUSH
25081: LD_VAR 0 5
25085: PPUSH
25086: CALL_OW 325
25090: IFFALSE 25117
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_INT 5
25099: PUSH
25100: LD_INT 8
25102: PUSH
25103: LD_INT 9
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: PUSH
25111: LD_VAR 0 4
25115: ARRAY
25116: ST_TO_ADDR
// end ;
25117: LD_VAR 0 2
25121: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25122: LD_INT 0
25124: PPUSH
25125: PPUSH
25126: PPUSH
// if not mines then
25127: LD_VAR 0 2
25131: NOT
25132: IFFALSE 25136
// exit ;
25134: GO 25280
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25136: LD_ADDR_VAR 0 5
25140: PUSH
25141: LD_INT 81
25143: PUSH
25144: LD_VAR 0 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: LD_INT 21
25158: PUSH
25159: LD_INT 3
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 69
25178: ST_TO_ADDR
// for i in mines do
25179: LD_ADDR_VAR 0 4
25183: PUSH
25184: LD_VAR 0 2
25188: PUSH
25189: FOR_IN
25190: IFFALSE 25278
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25192: LD_VAR 0 4
25196: PUSH
25197: LD_INT 1
25199: ARRAY
25200: PPUSH
25201: LD_VAR 0 4
25205: PUSH
25206: LD_INT 2
25208: ARRAY
25209: PPUSH
25210: CALL_OW 458
25214: NOT
25215: IFFALSE 25219
// continue ;
25217: GO 25189
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25219: LD_VAR 0 4
25223: PUSH
25224: LD_INT 1
25226: ARRAY
25227: PPUSH
25228: LD_VAR 0 4
25232: PUSH
25233: LD_INT 2
25235: ARRAY
25236: PPUSH
25237: CALL_OW 428
25241: PUSH
25242: LD_VAR 0 5
25246: IN
25247: IFFALSE 25276
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25249: LD_VAR 0 4
25253: PUSH
25254: LD_INT 1
25256: ARRAY
25257: PPUSH
25258: LD_VAR 0 4
25262: PUSH
25263: LD_INT 2
25265: ARRAY
25266: PPUSH
25267: LD_VAR 0 1
25271: PPUSH
25272: CALL_OW 456
// end ;
25276: GO 25189
25278: POP
25279: POP
// end ;
25280: LD_VAR 0 3
25284: RET
// export function Count ( array ) ; var i ; begin
25285: LD_INT 0
25287: PPUSH
25288: PPUSH
// result := 0 ;
25289: LD_ADDR_VAR 0 2
25293: PUSH
25294: LD_INT 0
25296: ST_TO_ADDR
// for i in array do
25297: LD_ADDR_VAR 0 3
25301: PUSH
25302: LD_VAR 0 1
25306: PUSH
25307: FOR_IN
25308: IFFALSE 25332
// if i then
25310: LD_VAR 0 3
25314: IFFALSE 25330
// result := result + 1 ;
25316: LD_ADDR_VAR 0 2
25320: PUSH
25321: LD_VAR 0 2
25325: PUSH
25326: LD_INT 1
25328: PLUS
25329: ST_TO_ADDR
25330: GO 25307
25332: POP
25333: POP
// end ;
25334: LD_VAR 0 2
25338: RET
// export function IsEmpty ( building ) ; begin
25339: LD_INT 0
25341: PPUSH
// if not building then
25342: LD_VAR 0 1
25346: NOT
25347: IFFALSE 25351
// exit ;
25349: GO 25394
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25351: LD_ADDR_VAR 0 2
25355: PUSH
25356: LD_VAR 0 1
25360: PUSH
25361: LD_INT 22
25363: PUSH
25364: LD_VAR 0 1
25368: PPUSH
25369: CALL_OW 255
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 58
25380: PUSH
25381: EMPTY
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PPUSH
25388: CALL_OW 69
25392: IN
25393: ST_TO_ADDR
// end ;
25394: LD_VAR 0 2
25398: RET
// export function IsNotFull ( building ) ; begin
25399: LD_INT 0
25401: PPUSH
// if not building then
25402: LD_VAR 0 1
25406: NOT
25407: IFFALSE 25411
// exit ;
25409: GO 25430
// result := UnitsInside ( building ) < 6 ;
25411: LD_ADDR_VAR 0 2
25415: PUSH
25416: LD_VAR 0 1
25420: PPUSH
25421: CALL_OW 313
25425: PUSH
25426: LD_INT 6
25428: LESS
25429: ST_TO_ADDR
// end ;
25430: LD_VAR 0 2
25434: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
25440: PPUSH
// tmp := [ ] ;
25441: LD_ADDR_VAR 0 3
25445: PUSH
25446: EMPTY
25447: ST_TO_ADDR
// list := [ ] ;
25448: LD_ADDR_VAR 0 5
25452: PUSH
25453: EMPTY
25454: ST_TO_ADDR
// for i = 16 to 25 do
25455: LD_ADDR_VAR 0 4
25459: PUSH
25460: DOUBLE
25461: LD_INT 16
25463: DEC
25464: ST_TO_ADDR
25465: LD_INT 25
25467: PUSH
25468: FOR_TO
25469: IFFALSE 25542
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_VAR 0 3
25480: PUSH
25481: LD_INT 22
25483: PUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 255
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 91
25500: PUSH
25501: LD_VAR 0 1
25505: PUSH
25506: LD_INT 6
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 30
25516: PUSH
25517: LD_VAR 0 4
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: PPUSH
25534: CALL_OW 69
25538: ADD
25539: ST_TO_ADDR
25540: GO 25468
25542: POP
25543: POP
// for i = 1 to tmp do
25544: LD_ADDR_VAR 0 4
25548: PUSH
25549: DOUBLE
25550: LD_INT 1
25552: DEC
25553: ST_TO_ADDR
25554: LD_VAR 0 3
25558: PUSH
25559: FOR_TO
25560: IFFALSE 25648
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25562: LD_ADDR_VAR 0 5
25566: PUSH
25567: LD_VAR 0 5
25571: PUSH
25572: LD_VAR 0 3
25576: PUSH
25577: LD_VAR 0 4
25581: ARRAY
25582: PPUSH
25583: CALL_OW 266
25587: PUSH
25588: LD_VAR 0 3
25592: PUSH
25593: LD_VAR 0 4
25597: ARRAY
25598: PPUSH
25599: CALL_OW 250
25603: PUSH
25604: LD_VAR 0 3
25608: PUSH
25609: LD_VAR 0 4
25613: ARRAY
25614: PPUSH
25615: CALL_OW 251
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_VAR 0 4
25629: ARRAY
25630: PPUSH
25631: CALL_OW 254
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: ADD
25645: ST_TO_ADDR
25646: GO 25559
25648: POP
25649: POP
// result := list ;
25650: LD_ADDR_VAR 0 2
25654: PUSH
25655: LD_VAR 0 5
25659: ST_TO_ADDR
// end ;
25660: LD_VAR 0 2
25664: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25665: LD_INT 0
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
// if not factory then
25674: LD_VAR 0 1
25678: NOT
25679: IFFALSE 25683
// exit ;
25681: GO 26276
// if control = control_apeman then
25683: LD_VAR 0 4
25687: PUSH
25688: LD_INT 5
25690: EQUAL
25691: IFFALSE 25800
// begin tmp := UnitsInside ( factory ) ;
25693: LD_ADDR_VAR 0 8
25697: PUSH
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 313
25707: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25708: LD_VAR 0 8
25712: PPUSH
25713: LD_INT 25
25715: PUSH
25716: LD_INT 12
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 72
25727: NOT
25728: IFFALSE 25738
// control := control_manual ;
25730: LD_ADDR_VAR 0 4
25734: PUSH
25735: LD_INT 1
25737: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25738: LD_ADDR_VAR 0 8
25742: PUSH
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL 25435 0 1
25752: ST_TO_ADDR
// if tmp then
25753: LD_VAR 0 8
25757: IFFALSE 25800
// begin for i in tmp do
25759: LD_ADDR_VAR 0 7
25763: PUSH
25764: LD_VAR 0 8
25768: PUSH
25769: FOR_IN
25770: IFFALSE 25798
// if i [ 1 ] = b_ext_radio then
25772: LD_VAR 0 7
25776: PUSH
25777: LD_INT 1
25779: ARRAY
25780: PUSH
25781: LD_INT 22
25783: EQUAL
25784: IFFALSE 25796
// begin control := control_remote ;
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: LD_INT 2
25793: ST_TO_ADDR
// break ;
25794: GO 25798
// end ;
25796: GO 25769
25798: POP
25799: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: LD_VAR 0 3
25814: PPUSH
25815: LD_VAR 0 4
25819: PPUSH
25820: LD_VAR 0 5
25824: PPUSH
25825: CALL_OW 448
25829: IFFALSE 25864
// begin result := [ chassis , engine , control , weapon ] ;
25831: LD_ADDR_VAR 0 6
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: LD_VAR 0 3
25845: PUSH
25846: LD_VAR 0 4
25850: PUSH
25851: LD_VAR 0 5
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// exit ;
25862: GO 26276
// end ; _chassis := AvailableChassisList ( factory ) ;
25864: LD_ADDR_VAR 0 9
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 475
25878: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25879: LD_ADDR_VAR 0 11
25883: PUSH
25884: LD_VAR 0 1
25888: PPUSH
25889: CALL_OW 476
25893: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25894: LD_ADDR_VAR 0 12
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 477
25908: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25909: LD_ADDR_VAR 0 10
25913: PUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 478
25923: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25924: LD_VAR 0 9
25928: NOT
25929: PUSH
25930: LD_VAR 0 11
25934: NOT
25935: OR
25936: PUSH
25937: LD_VAR 0 12
25941: NOT
25942: OR
25943: PUSH
25944: LD_VAR 0 10
25948: NOT
25949: OR
25950: IFFALSE 25985
// begin result := [ chassis , engine , control , weapon ] ;
25952: LD_ADDR_VAR 0 6
25956: PUSH
25957: LD_VAR 0 2
25961: PUSH
25962: LD_VAR 0 3
25966: PUSH
25967: LD_VAR 0 4
25971: PUSH
25972: LD_VAR 0 5
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: ST_TO_ADDR
// exit ;
25983: GO 26276
// end ; if not chassis in _chassis then
25985: LD_VAR 0 2
25989: PUSH
25990: LD_VAR 0 9
25994: IN
25995: NOT
25996: IFFALSE 26022
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25998: LD_ADDR_VAR 0 2
26002: PUSH
26003: LD_VAR 0 9
26007: PUSH
26008: LD_INT 1
26010: PPUSH
26011: LD_VAR 0 9
26015: PPUSH
26016: CALL_OW 12
26020: ARRAY
26021: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_VAR 0 3
26031: PPUSH
26032: CALL 26281 0 2
26036: NOT
26037: IFFALSE 26096
// repeat engine := _engine [ 1 ] ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_VAR 0 11
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26053: LD_ADDR_VAR 0 11
26057: PUSH
26058: LD_VAR 0 11
26062: PPUSH
26063: LD_INT 1
26065: PPUSH
26066: CALL_OW 3
26070: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26071: LD_VAR 0 2
26075: PPUSH
26076: LD_VAR 0 3
26080: PPUSH
26081: CALL 26281 0 2
26085: PUSH
26086: LD_VAR 0 11
26090: PUSH
26091: EMPTY
26092: EQUAL
26093: OR
26094: IFFALSE 26039
// if not control in _control then
26096: LD_VAR 0 4
26100: PUSH
26101: LD_VAR 0 12
26105: IN
26106: NOT
26107: IFFALSE 26133
// control := _control [ rand ( 1 , _control ) ] ;
26109: LD_ADDR_VAR 0 4
26113: PUSH
26114: LD_VAR 0 12
26118: PUSH
26119: LD_INT 1
26121: PPUSH
26122: LD_VAR 0 12
26126: PPUSH
26127: CALL_OW 12
26131: ARRAY
26132: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26133: LD_VAR 0 2
26137: PPUSH
26138: LD_VAR 0 5
26142: PPUSH
26143: CALL 26501 0 2
26147: NOT
26148: IFFALSE 26207
// repeat weapon := _weapon [ 1 ] ;
26150: LD_ADDR_VAR 0 5
26154: PUSH
26155: LD_VAR 0 10
26159: PUSH
26160: LD_INT 1
26162: ARRAY
26163: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26164: LD_ADDR_VAR 0 10
26168: PUSH
26169: LD_VAR 0 10
26173: PPUSH
26174: LD_INT 1
26176: PPUSH
26177: CALL_OW 3
26181: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26182: LD_VAR 0 2
26186: PPUSH
26187: LD_VAR 0 5
26191: PPUSH
26192: CALL 26501 0 2
26196: PUSH
26197: LD_VAR 0 10
26201: PUSH
26202: EMPTY
26203: EQUAL
26204: OR
26205: IFFALSE 26150
// result := [ ] ;
26207: LD_ADDR_VAR 0 6
26211: PUSH
26212: EMPTY
26213: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_VAR 0 2
26223: PPUSH
26224: LD_VAR 0 3
26228: PPUSH
26229: LD_VAR 0 4
26233: PPUSH
26234: LD_VAR 0 5
26238: PPUSH
26239: CALL_OW 448
26243: IFFALSE 26276
// result := [ chassis , engine , control , weapon ] ;
26245: LD_ADDR_VAR 0 6
26249: PUSH
26250: LD_VAR 0 2
26254: PUSH
26255: LD_VAR 0 3
26259: PUSH
26260: LD_VAR 0 4
26264: PUSH
26265: LD_VAR 0 5
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: ST_TO_ADDR
// end ;
26276: LD_VAR 0 6
26280: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26281: LD_INT 0
26283: PPUSH
// if not chassis or not engine then
26284: LD_VAR 0 1
26288: NOT
26289: PUSH
26290: LD_VAR 0 2
26294: NOT
26295: OR
26296: IFFALSE 26300
// exit ;
26298: GO 26496
// case engine of engine_solar :
26300: LD_VAR 0 2
26304: PUSH
26305: LD_INT 2
26307: DOUBLE
26308: EQUAL
26309: IFTRUE 26313
26311: GO 26351
26313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_INT 11
26321: PUSH
26322: LD_INT 12
26324: PUSH
26325: LD_INT 13
26327: PUSH
26328: LD_INT 14
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: ST_TO_ADDR
26349: GO 26480
26351: LD_INT 1
26353: DOUBLE
26354: EQUAL
26355: IFTRUE 26359
26357: GO 26421
26359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26360: LD_ADDR_VAR 0 3
26364: PUSH
26365: LD_INT 11
26367: PUSH
26368: LD_INT 12
26370: PUSH
26371: LD_INT 13
26373: PUSH
26374: LD_INT 14
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 3
26385: PUSH
26386: LD_INT 4
26388: PUSH
26389: LD_INT 5
26391: PUSH
26392: LD_INT 21
26394: PUSH
26395: LD_INT 23
26397: PUSH
26398: LD_INT 22
26400: PUSH
26401: LD_INT 24
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: ST_TO_ADDR
26419: GO 26480
26421: LD_INT 3
26423: DOUBLE
26424: EQUAL
26425: IFTRUE 26429
26427: GO 26479
26429: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26430: LD_ADDR_VAR 0 3
26434: PUSH
26435: LD_INT 13
26437: PUSH
26438: LD_INT 14
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 3
26446: PUSH
26447: LD_INT 4
26449: PUSH
26450: LD_INT 5
26452: PUSH
26453: LD_INT 21
26455: PUSH
26456: LD_INT 22
26458: PUSH
26459: LD_INT 23
26461: PUSH
26462: LD_INT 24
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: ST_TO_ADDR
26477: GO 26480
26479: POP
// result := ( chassis in result ) ;
26480: LD_ADDR_VAR 0 3
26484: PUSH
26485: LD_VAR 0 1
26489: PUSH
26490: LD_VAR 0 3
26494: IN
26495: ST_TO_ADDR
// end ;
26496: LD_VAR 0 3
26500: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26501: LD_INT 0
26503: PPUSH
// if not chassis or not weapon then
26504: LD_VAR 0 1
26508: NOT
26509: PUSH
26510: LD_VAR 0 2
26514: NOT
26515: OR
26516: IFFALSE 26520
// exit ;
26518: GO 27546
// case weapon of us_machine_gun :
26520: LD_VAR 0 2
26524: PUSH
26525: LD_INT 2
26527: DOUBLE
26528: EQUAL
26529: IFTRUE 26533
26531: GO 26563
26533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 3
26547: PUSH
26548: LD_INT 4
26550: PUSH
26551: LD_INT 5
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: ST_TO_ADDR
26561: GO 27530
26563: LD_INT 3
26565: DOUBLE
26566: EQUAL
26567: IFTRUE 26571
26569: GO 26601
26571: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26572: LD_ADDR_VAR 0 3
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 3
26585: PUSH
26586: LD_INT 4
26588: PUSH
26589: LD_INT 5
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: ST_TO_ADDR
26599: GO 27530
26601: LD_INT 11
26603: DOUBLE
26604: EQUAL
26605: IFTRUE 26609
26607: GO 26639
26609: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 3
26623: PUSH
26624: LD_INT 4
26626: PUSH
26627: LD_INT 5
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: ST_TO_ADDR
26637: GO 27530
26639: LD_INT 4
26641: DOUBLE
26642: EQUAL
26643: IFTRUE 26647
26645: GO 26673
26647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 3
26658: PUSH
26659: LD_INT 4
26661: PUSH
26662: LD_INT 5
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
26671: GO 27530
26673: LD_INT 5
26675: DOUBLE
26676: EQUAL
26677: IFTRUE 26681
26679: GO 26707
26681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 3
26692: PUSH
26693: LD_INT 4
26695: PUSH
26696: LD_INT 5
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: ST_TO_ADDR
26705: GO 27530
26707: LD_INT 9
26709: DOUBLE
26710: EQUAL
26711: IFTRUE 26715
26713: GO 26741
26715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26716: LD_ADDR_VAR 0 3
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 3
26726: PUSH
26727: LD_INT 4
26729: PUSH
26730: LD_INT 5
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
26739: GO 27530
26741: LD_INT 7
26743: DOUBLE
26744: EQUAL
26745: IFTRUE 26749
26747: GO 26775
26749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26750: LD_ADDR_VAR 0 3
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 4
26763: PUSH
26764: LD_INT 5
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
26773: GO 27530
26775: LD_INT 12
26777: DOUBLE
26778: EQUAL
26779: IFTRUE 26783
26781: GO 26809
26783: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26784: LD_ADDR_VAR 0 3
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 3
26794: PUSH
26795: LD_INT 4
26797: PUSH
26798: LD_INT 5
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: ST_TO_ADDR
26807: GO 27530
26809: LD_INT 13
26811: DOUBLE
26812: EQUAL
26813: IFTRUE 26817
26815: GO 26843
26817: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26818: LD_ADDR_VAR 0 3
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: LD_INT 3
26828: PUSH
26829: LD_INT 4
26831: PUSH
26832: LD_INT 5
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: ST_TO_ADDR
26841: GO 27530
26843: LD_INT 14
26845: DOUBLE
26846: EQUAL
26847: IFTRUE 26851
26849: GO 26869
26851: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26852: LD_ADDR_VAR 0 3
26856: PUSH
26857: LD_INT 4
26859: PUSH
26860: LD_INT 5
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: ST_TO_ADDR
26867: GO 27530
26869: LD_INT 6
26871: DOUBLE
26872: EQUAL
26873: IFTRUE 26877
26875: GO 26895
26877: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26878: LD_ADDR_VAR 0 3
26882: PUSH
26883: LD_INT 4
26885: PUSH
26886: LD_INT 5
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: ST_TO_ADDR
26893: GO 27530
26895: LD_INT 10
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 26921
26903: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26904: LD_ADDR_VAR 0 3
26908: PUSH
26909: LD_INT 4
26911: PUSH
26912: LD_INT 5
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: ST_TO_ADDR
26919: GO 27530
26921: LD_INT 22
26923: DOUBLE
26924: EQUAL
26925: IFTRUE 26929
26927: GO 26955
26929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_INT 11
26937: PUSH
26938: LD_INT 12
26940: PUSH
26941: LD_INT 13
26943: PUSH
26944: LD_INT 14
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: ST_TO_ADDR
26953: GO 27530
26955: LD_INT 23
26957: DOUBLE
26958: EQUAL
26959: IFTRUE 26963
26961: GO 26989
26963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_INT 11
26971: PUSH
26972: LD_INT 12
26974: PUSH
26975: LD_INT 13
26977: PUSH
26978: LD_INT 14
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: ST_TO_ADDR
26987: GO 27530
26989: LD_INT 24
26991: DOUBLE
26992: EQUAL
26993: IFTRUE 26997
26995: GO 27023
26997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26998: LD_ADDR_VAR 0 3
27002: PUSH
27003: LD_INT 11
27005: PUSH
27006: LD_INT 12
27008: PUSH
27009: LD_INT 13
27011: PUSH
27012: LD_INT 14
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: ST_TO_ADDR
27021: GO 27530
27023: LD_INT 30
27025: DOUBLE
27026: EQUAL
27027: IFTRUE 27031
27029: GO 27057
27031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27032: LD_ADDR_VAR 0 3
27036: PUSH
27037: LD_INT 11
27039: PUSH
27040: LD_INT 12
27042: PUSH
27043: LD_INT 13
27045: PUSH
27046: LD_INT 14
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: ST_TO_ADDR
27055: GO 27530
27057: LD_INT 25
27059: DOUBLE
27060: EQUAL
27061: IFTRUE 27065
27063: GO 27083
27065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27066: LD_ADDR_VAR 0 3
27070: PUSH
27071: LD_INT 13
27073: PUSH
27074: LD_INT 14
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: ST_TO_ADDR
27081: GO 27530
27083: LD_INT 27
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27109
27091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27092: LD_ADDR_VAR 0 3
27096: PUSH
27097: LD_INT 13
27099: PUSH
27100: LD_INT 14
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: ST_TO_ADDR
27107: GO 27530
27109: LD_INT 28
27111: DOUBLE
27112: EQUAL
27113: IFTRUE 27117
27115: GO 27135
27117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27118: LD_ADDR_VAR 0 3
27122: PUSH
27123: LD_INT 13
27125: PUSH
27126: LD_INT 14
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: ST_TO_ADDR
27133: GO 27530
27135: LD_INT 29
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27143
27141: GO 27161
27143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27144: LD_ADDR_VAR 0 3
27148: PUSH
27149: LD_INT 13
27151: PUSH
27152: LD_INT 14
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: ST_TO_ADDR
27159: GO 27530
27161: LD_INT 31
27163: DOUBLE
27164: EQUAL
27165: IFTRUE 27169
27167: GO 27187
27169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27170: LD_ADDR_VAR 0 3
27174: PUSH
27175: LD_INT 13
27177: PUSH
27178: LD_INT 14
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: ST_TO_ADDR
27185: GO 27530
27187: LD_INT 26
27189: DOUBLE
27190: EQUAL
27191: IFTRUE 27195
27193: GO 27213
27195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27196: LD_ADDR_VAR 0 3
27200: PUSH
27201: LD_INT 13
27203: PUSH
27204: LD_INT 14
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: ST_TO_ADDR
27211: GO 27530
27213: LD_INT 42
27215: DOUBLE
27216: EQUAL
27217: IFTRUE 27221
27219: GO 27247
27221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27222: LD_ADDR_VAR 0 3
27226: PUSH
27227: LD_INT 21
27229: PUSH
27230: LD_INT 22
27232: PUSH
27233: LD_INT 23
27235: PUSH
27236: LD_INT 24
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: ST_TO_ADDR
27245: GO 27530
27247: LD_INT 43
27249: DOUBLE
27250: EQUAL
27251: IFTRUE 27255
27253: GO 27281
27255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27256: LD_ADDR_VAR 0 3
27260: PUSH
27261: LD_INT 21
27263: PUSH
27264: LD_INT 22
27266: PUSH
27267: LD_INT 23
27269: PUSH
27270: LD_INT 24
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: ST_TO_ADDR
27279: GO 27530
27281: LD_INT 44
27283: DOUBLE
27284: EQUAL
27285: IFTRUE 27289
27287: GO 27315
27289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_INT 21
27297: PUSH
27298: LD_INT 22
27300: PUSH
27301: LD_INT 23
27303: PUSH
27304: LD_INT 24
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: ST_TO_ADDR
27313: GO 27530
27315: LD_INT 45
27317: DOUBLE
27318: EQUAL
27319: IFTRUE 27323
27321: GO 27349
27323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27324: LD_ADDR_VAR 0 3
27328: PUSH
27329: LD_INT 21
27331: PUSH
27332: LD_INT 22
27334: PUSH
27335: LD_INT 23
27337: PUSH
27338: LD_INT 24
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: ST_TO_ADDR
27347: GO 27530
27349: LD_INT 49
27351: DOUBLE
27352: EQUAL
27353: IFTRUE 27357
27355: GO 27383
27357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27358: LD_ADDR_VAR 0 3
27362: PUSH
27363: LD_INT 21
27365: PUSH
27366: LD_INT 22
27368: PUSH
27369: LD_INT 23
27371: PUSH
27372: LD_INT 24
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: ST_TO_ADDR
27381: GO 27530
27383: LD_INT 51
27385: DOUBLE
27386: EQUAL
27387: IFTRUE 27391
27389: GO 27417
27391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27392: LD_ADDR_VAR 0 3
27396: PUSH
27397: LD_INT 21
27399: PUSH
27400: LD_INT 22
27402: PUSH
27403: LD_INT 23
27405: PUSH
27406: LD_INT 24
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: ST_TO_ADDR
27415: GO 27530
27417: LD_INT 52
27419: DOUBLE
27420: EQUAL
27421: IFTRUE 27425
27423: GO 27451
27425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27426: LD_ADDR_VAR 0 3
27430: PUSH
27431: LD_INT 21
27433: PUSH
27434: LD_INT 22
27436: PUSH
27437: LD_INT 23
27439: PUSH
27440: LD_INT 24
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
27449: GO 27530
27451: LD_INT 53
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27477
27459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_INT 23
27467: PUSH
27468: LD_INT 24
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: ST_TO_ADDR
27475: GO 27530
27477: LD_INT 46
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27485
27483: GO 27503
27485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27486: LD_ADDR_VAR 0 3
27490: PUSH
27491: LD_INT 23
27493: PUSH
27494: LD_INT 24
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 27530
27503: LD_INT 47
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27511
27509: GO 27529
27511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_INT 23
27519: PUSH
27520: LD_INT 24
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: ST_TO_ADDR
27527: GO 27530
27529: POP
// result := ( chassis in result ) ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_VAR 0 3
27544: IN
27545: ST_TO_ADDR
// end ;
27546: LD_VAR 0 3
27550: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27551: LD_INT 0
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
// result := array ;
27560: LD_ADDR_VAR 0 5
27564: PUSH
27565: LD_VAR 0 1
27569: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27570: LD_VAR 0 1
27574: NOT
27575: PUSH
27576: LD_VAR 0 2
27580: NOT
27581: OR
27582: PUSH
27583: LD_VAR 0 3
27587: NOT
27588: OR
27589: PUSH
27590: LD_VAR 0 2
27594: PUSH
27595: LD_VAR 0 1
27599: GREATER
27600: OR
27601: PUSH
27602: LD_VAR 0 3
27606: PUSH
27607: LD_VAR 0 1
27611: GREATER
27612: OR
27613: IFFALSE 27617
// exit ;
27615: GO 27913
// if direction then
27617: LD_VAR 0 4
27621: IFFALSE 27685
// begin d := 1 ;
27623: LD_ADDR_VAR 0 9
27627: PUSH
27628: LD_INT 1
27630: ST_TO_ADDR
// if i_from > i_to then
27631: LD_VAR 0 2
27635: PUSH
27636: LD_VAR 0 3
27640: GREATER
27641: IFFALSE 27667
// length := ( array - i_from ) + i_to else
27643: LD_ADDR_VAR 0 11
27647: PUSH
27648: LD_VAR 0 1
27652: PUSH
27653: LD_VAR 0 2
27657: MINUS
27658: PUSH
27659: LD_VAR 0 3
27663: PLUS
27664: ST_TO_ADDR
27665: GO 27683
// length := i_to - i_from ;
27667: LD_ADDR_VAR 0 11
27671: PUSH
27672: LD_VAR 0 3
27676: PUSH
27677: LD_VAR 0 2
27681: MINUS
27682: ST_TO_ADDR
// end else
27683: GO 27746
// begin d := - 1 ;
27685: LD_ADDR_VAR 0 9
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: ST_TO_ADDR
// if i_from > i_to then
27694: LD_VAR 0 2
27698: PUSH
27699: LD_VAR 0 3
27703: GREATER
27704: IFFALSE 27724
// length := i_from - i_to else
27706: LD_ADDR_VAR 0 11
27710: PUSH
27711: LD_VAR 0 2
27715: PUSH
27716: LD_VAR 0 3
27720: MINUS
27721: ST_TO_ADDR
27722: GO 27746
// length := ( array - i_to ) + i_from ;
27724: LD_ADDR_VAR 0 11
27728: PUSH
27729: LD_VAR 0 1
27733: PUSH
27734: LD_VAR 0 3
27738: MINUS
27739: PUSH
27740: LD_VAR 0 2
27744: PLUS
27745: ST_TO_ADDR
// end ; if not length then
27746: LD_VAR 0 11
27750: NOT
27751: IFFALSE 27755
// exit ;
27753: GO 27913
// tmp := array ;
27755: LD_ADDR_VAR 0 10
27759: PUSH
27760: LD_VAR 0 1
27764: ST_TO_ADDR
// for i = 1 to length do
27765: LD_ADDR_VAR 0 6
27769: PUSH
27770: DOUBLE
27771: LD_INT 1
27773: DEC
27774: ST_TO_ADDR
27775: LD_VAR 0 11
27779: PUSH
27780: FOR_TO
27781: IFFALSE 27901
// begin for j = 1 to array do
27783: LD_ADDR_VAR 0 7
27787: PUSH
27788: DOUBLE
27789: LD_INT 1
27791: DEC
27792: ST_TO_ADDR
27793: LD_VAR 0 1
27797: PUSH
27798: FOR_TO
27799: IFFALSE 27887
// begin k := j + d ;
27801: LD_ADDR_VAR 0 8
27805: PUSH
27806: LD_VAR 0 7
27810: PUSH
27811: LD_VAR 0 9
27815: PLUS
27816: ST_TO_ADDR
// if k > array then
27817: LD_VAR 0 8
27821: PUSH
27822: LD_VAR 0 1
27826: GREATER
27827: IFFALSE 27837
// k := 1 ;
27829: LD_ADDR_VAR 0 8
27833: PUSH
27834: LD_INT 1
27836: ST_TO_ADDR
// if not k then
27837: LD_VAR 0 8
27841: NOT
27842: IFFALSE 27854
// k := array ;
27844: LD_ADDR_VAR 0 8
27848: PUSH
27849: LD_VAR 0 1
27853: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27854: LD_ADDR_VAR 0 10
27858: PUSH
27859: LD_VAR 0 10
27863: PPUSH
27864: LD_VAR 0 8
27868: PPUSH
27869: LD_VAR 0 1
27873: PUSH
27874: LD_VAR 0 7
27878: ARRAY
27879: PPUSH
27880: CALL_OW 1
27884: ST_TO_ADDR
// end ;
27885: GO 27798
27887: POP
27888: POP
// array := tmp ;
27889: LD_ADDR_VAR 0 1
27893: PUSH
27894: LD_VAR 0 10
27898: ST_TO_ADDR
// end ;
27899: GO 27780
27901: POP
27902: POP
// result := array ;
27903: LD_ADDR_VAR 0 5
27907: PUSH
27908: LD_VAR 0 1
27912: ST_TO_ADDR
// end ;
27913: LD_VAR 0 5
27917: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
// result := 0 ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_INT 0
27929: ST_TO_ADDR
// if not array or not value in array then
27930: LD_VAR 0 1
27934: NOT
27935: PUSH
27936: LD_VAR 0 2
27940: PUSH
27941: LD_VAR 0 1
27945: IN
27946: NOT
27947: OR
27948: IFFALSE 27952
// exit ;
27950: GO 28006
// for i = 1 to array do
27952: LD_ADDR_VAR 0 4
27956: PUSH
27957: DOUBLE
27958: LD_INT 1
27960: DEC
27961: ST_TO_ADDR
27962: LD_VAR 0 1
27966: PUSH
27967: FOR_TO
27968: IFFALSE 28004
// if value = array [ i ] then
27970: LD_VAR 0 2
27974: PUSH
27975: LD_VAR 0 1
27979: PUSH
27980: LD_VAR 0 4
27984: ARRAY
27985: EQUAL
27986: IFFALSE 28002
// begin result := i ;
27988: LD_ADDR_VAR 0 3
27992: PUSH
27993: LD_VAR 0 4
27997: ST_TO_ADDR
// exit ;
27998: POP
27999: POP
28000: GO 28006
// end ;
28002: GO 27967
28004: POP
28005: POP
// end ;
28006: LD_VAR 0 3
28010: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28011: LD_INT 0
28013: PPUSH
// vc_chassis := chassis ;
28014: LD_ADDR_OWVAR 37
28018: PUSH
28019: LD_VAR 0 1
28023: ST_TO_ADDR
// vc_engine := engine ;
28024: LD_ADDR_OWVAR 39
28028: PUSH
28029: LD_VAR 0 2
28033: ST_TO_ADDR
// vc_control := control ;
28034: LD_ADDR_OWVAR 38
28038: PUSH
28039: LD_VAR 0 3
28043: ST_TO_ADDR
// vc_weapon := weapon ;
28044: LD_ADDR_OWVAR 40
28048: PUSH
28049: LD_VAR 0 4
28053: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28054: LD_ADDR_OWVAR 41
28058: PUSH
28059: LD_VAR 0 5
28063: ST_TO_ADDR
// end ;
28064: LD_VAR 0 6
28068: RET
// export function WantPlant ( unit ) ; var task ; begin
28069: LD_INT 0
28071: PPUSH
28072: PPUSH
// result := false ;
28073: LD_ADDR_VAR 0 2
28077: PUSH
28078: LD_INT 0
28080: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28081: LD_ADDR_VAR 0 3
28085: PUSH
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL_OW 437
28095: ST_TO_ADDR
// if task then
28096: LD_VAR 0 3
28100: IFFALSE 28128
// if task [ 1 ] [ 1 ] = p then
28102: LD_VAR 0 3
28106: PUSH
28107: LD_INT 1
28109: ARRAY
28110: PUSH
28111: LD_INT 1
28113: ARRAY
28114: PUSH
28115: LD_STRING p
28117: EQUAL
28118: IFFALSE 28128
// result := true ;
28120: LD_ADDR_VAR 0 2
28124: PUSH
28125: LD_INT 1
28127: ST_TO_ADDR
// end ;
28128: LD_VAR 0 2
28132: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28133: LD_INT 0
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
// if pos < 1 then
28139: LD_VAR 0 2
28143: PUSH
28144: LD_INT 1
28146: LESS
28147: IFFALSE 28151
// exit ;
28149: GO 28454
// if pos = 1 then
28151: LD_VAR 0 2
28155: PUSH
28156: LD_INT 1
28158: EQUAL
28159: IFFALSE 28192
// result := Replace ( arr , pos [ 1 ] , value ) else
28161: LD_ADDR_VAR 0 4
28165: PUSH
28166: LD_VAR 0 1
28170: PPUSH
28171: LD_VAR 0 2
28175: PUSH
28176: LD_INT 1
28178: ARRAY
28179: PPUSH
28180: LD_VAR 0 3
28184: PPUSH
28185: CALL_OW 1
28189: ST_TO_ADDR
28190: GO 28454
// begin tmp := arr ;
28192: LD_ADDR_VAR 0 6
28196: PUSH
28197: LD_VAR 0 1
28201: ST_TO_ADDR
// s_arr := [ tmp ] ;
28202: LD_ADDR_VAR 0 7
28206: PUSH
28207: LD_VAR 0 6
28211: PUSH
28212: EMPTY
28213: LIST
28214: ST_TO_ADDR
// for i = 1 to pos - 1 do
28215: LD_ADDR_VAR 0 5
28219: PUSH
28220: DOUBLE
28221: LD_INT 1
28223: DEC
28224: ST_TO_ADDR
28225: LD_VAR 0 2
28229: PUSH
28230: LD_INT 1
28232: MINUS
28233: PUSH
28234: FOR_TO
28235: IFFALSE 28280
// begin tmp := tmp [ pos [ i ] ] ;
28237: LD_ADDR_VAR 0 6
28241: PUSH
28242: LD_VAR 0 6
28246: PUSH
28247: LD_VAR 0 2
28251: PUSH
28252: LD_VAR 0 5
28256: ARRAY
28257: ARRAY
28258: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28259: LD_ADDR_VAR 0 7
28263: PUSH
28264: LD_VAR 0 7
28268: PUSH
28269: LD_VAR 0 6
28273: PUSH
28274: EMPTY
28275: LIST
28276: ADD
28277: ST_TO_ADDR
// end ;
28278: GO 28234
28280: POP
28281: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28282: LD_ADDR_VAR 0 6
28286: PUSH
28287: LD_VAR 0 6
28291: PPUSH
28292: LD_VAR 0 2
28296: PUSH
28297: LD_VAR 0 2
28301: ARRAY
28302: PPUSH
28303: LD_VAR 0 3
28307: PPUSH
28308: CALL_OW 1
28312: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28313: LD_ADDR_VAR 0 7
28317: PUSH
28318: LD_VAR 0 7
28322: PPUSH
28323: LD_VAR 0 7
28327: PPUSH
28328: LD_VAR 0 6
28332: PPUSH
28333: CALL_OW 1
28337: ST_TO_ADDR
// for i = s_arr downto 2 do
28338: LD_ADDR_VAR 0 5
28342: PUSH
28343: DOUBLE
28344: LD_VAR 0 7
28348: INC
28349: ST_TO_ADDR
28350: LD_INT 2
28352: PUSH
28353: FOR_DOWNTO
28354: IFFALSE 28438
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28356: LD_ADDR_VAR 0 6
28360: PUSH
28361: LD_VAR 0 7
28365: PUSH
28366: LD_VAR 0 5
28370: PUSH
28371: LD_INT 1
28373: MINUS
28374: ARRAY
28375: PPUSH
28376: LD_VAR 0 2
28380: PUSH
28381: LD_VAR 0 5
28385: PUSH
28386: LD_INT 1
28388: MINUS
28389: ARRAY
28390: PPUSH
28391: LD_VAR 0 7
28395: PUSH
28396: LD_VAR 0 5
28400: ARRAY
28401: PPUSH
28402: CALL_OW 1
28406: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28407: LD_ADDR_VAR 0 7
28411: PUSH
28412: LD_VAR 0 7
28416: PPUSH
28417: LD_VAR 0 5
28421: PUSH
28422: LD_INT 1
28424: MINUS
28425: PPUSH
28426: LD_VAR 0 6
28430: PPUSH
28431: CALL_OW 1
28435: ST_TO_ADDR
// end ;
28436: GO 28353
28438: POP
28439: POP
// result := s_arr [ 1 ] ;
28440: LD_ADDR_VAR 0 4
28444: PUSH
28445: LD_VAR 0 7
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: ST_TO_ADDR
// end ; end ;
28454: LD_VAR 0 4
28458: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28459: LD_INT 0
28461: PPUSH
28462: PPUSH
// if not list then
28463: LD_VAR 0 1
28467: NOT
28468: IFFALSE 28472
// exit ;
28470: GO 28563
// i := list [ pos1 ] ;
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_VAR 0 1
28481: PUSH
28482: LD_VAR 0 2
28486: ARRAY
28487: ST_TO_ADDR
// if not i then
28488: LD_VAR 0 5
28492: NOT
28493: IFFALSE 28497
// exit ;
28495: GO 28563
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28497: LD_ADDR_VAR 0 1
28501: PUSH
28502: LD_VAR 0 1
28506: PPUSH
28507: LD_VAR 0 2
28511: PPUSH
28512: LD_VAR 0 1
28516: PUSH
28517: LD_VAR 0 3
28521: ARRAY
28522: PPUSH
28523: CALL_OW 1
28527: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28528: LD_ADDR_VAR 0 1
28532: PUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: LD_VAR 0 3
28542: PPUSH
28543: LD_VAR 0 5
28547: PPUSH
28548: CALL_OW 1
28552: ST_TO_ADDR
// result := list ;
28553: LD_ADDR_VAR 0 4
28557: PUSH
28558: LD_VAR 0 1
28562: ST_TO_ADDR
// end ;
28563: LD_VAR 0 4
28567: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28568: LD_INT 0
28570: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28571: LD_ADDR_VAR 0 5
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 250
28585: PPUSH
28586: LD_VAR 0 1
28590: PPUSH
28591: CALL_OW 251
28595: PPUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: LD_VAR 0 3
28605: PPUSH
28606: LD_VAR 0 4
28610: PPUSH
28611: CALL 28621 0 5
28615: ST_TO_ADDR
// end ;
28616: LD_VAR 0 5
28620: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28621: LD_INT 0
28623: PPUSH
28624: PPUSH
28625: PPUSH
28626: PPUSH
// if not list then
28627: LD_VAR 0 3
28631: NOT
28632: IFFALSE 28636
// exit ;
28634: GO 29024
// result := [ ] ;
28636: LD_ADDR_VAR 0 6
28640: PUSH
28641: EMPTY
28642: ST_TO_ADDR
// for i in list do
28643: LD_ADDR_VAR 0 7
28647: PUSH
28648: LD_VAR 0 3
28652: PUSH
28653: FOR_IN
28654: IFFALSE 28856
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28656: LD_ADDR_VAR 0 9
28660: PUSH
28661: LD_VAR 0 7
28665: PPUSH
28666: LD_VAR 0 1
28670: PPUSH
28671: LD_VAR 0 2
28675: PPUSH
28676: CALL_OW 297
28680: ST_TO_ADDR
// if not result then
28681: LD_VAR 0 6
28685: NOT
28686: IFFALSE 28712
// result := [ [ i , tmp ] ] else
28688: LD_ADDR_VAR 0 6
28692: PUSH
28693: LD_VAR 0 7
28697: PUSH
28698: LD_VAR 0 9
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: ST_TO_ADDR
28710: GO 28854
// begin if result [ result ] [ 2 ] < tmp then
28712: LD_VAR 0 6
28716: PUSH
28717: LD_VAR 0 6
28721: ARRAY
28722: PUSH
28723: LD_INT 2
28725: ARRAY
28726: PUSH
28727: LD_VAR 0 9
28731: LESS
28732: IFFALSE 28774
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28734: LD_ADDR_VAR 0 6
28738: PUSH
28739: LD_VAR 0 6
28743: PPUSH
28744: LD_VAR 0 6
28748: PUSH
28749: LD_INT 1
28751: PLUS
28752: PPUSH
28753: LD_VAR 0 7
28757: PUSH
28758: LD_VAR 0 9
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 2
28771: ST_TO_ADDR
28772: GO 28854
// for j = 1 to result do
28774: LD_ADDR_VAR 0 8
28778: PUSH
28779: DOUBLE
28780: LD_INT 1
28782: DEC
28783: ST_TO_ADDR
28784: LD_VAR 0 6
28788: PUSH
28789: FOR_TO
28790: IFFALSE 28852
// begin if tmp < result [ j ] [ 2 ] then
28792: LD_VAR 0 9
28796: PUSH
28797: LD_VAR 0 6
28801: PUSH
28802: LD_VAR 0 8
28806: ARRAY
28807: PUSH
28808: LD_INT 2
28810: ARRAY
28811: LESS
28812: IFFALSE 28850
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28814: LD_ADDR_VAR 0 6
28818: PUSH
28819: LD_VAR 0 6
28823: PPUSH
28824: LD_VAR 0 8
28828: PPUSH
28829: LD_VAR 0 7
28833: PUSH
28834: LD_VAR 0 9
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PPUSH
28843: CALL_OW 2
28847: ST_TO_ADDR
// break ;
28848: GO 28852
// end ; end ;
28850: GO 28789
28852: POP
28853: POP
// end ; end ;
28854: GO 28653
28856: POP
28857: POP
// if result and not asc then
28858: LD_VAR 0 6
28862: PUSH
28863: LD_VAR 0 4
28867: NOT
28868: AND
28869: IFFALSE 28944
// begin tmp := result ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_VAR 0 6
28880: ST_TO_ADDR
// for i = tmp downto 1 do
28881: LD_ADDR_VAR 0 7
28885: PUSH
28886: DOUBLE
28887: LD_VAR 0 9
28891: INC
28892: ST_TO_ADDR
28893: LD_INT 1
28895: PUSH
28896: FOR_DOWNTO
28897: IFFALSE 28942
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28899: LD_ADDR_VAR 0 6
28903: PUSH
28904: LD_VAR 0 6
28908: PPUSH
28909: LD_VAR 0 9
28913: PUSH
28914: LD_VAR 0 7
28918: MINUS
28919: PUSH
28920: LD_INT 1
28922: PLUS
28923: PPUSH
28924: LD_VAR 0 9
28928: PUSH
28929: LD_VAR 0 7
28933: ARRAY
28934: PPUSH
28935: CALL_OW 1
28939: ST_TO_ADDR
28940: GO 28896
28942: POP
28943: POP
// end ; tmp := [ ] ;
28944: LD_ADDR_VAR 0 9
28948: PUSH
28949: EMPTY
28950: ST_TO_ADDR
// if mode then
28951: LD_VAR 0 5
28955: IFFALSE 29024
// begin for i = 1 to result do
28957: LD_ADDR_VAR 0 7
28961: PUSH
28962: DOUBLE
28963: LD_INT 1
28965: DEC
28966: ST_TO_ADDR
28967: LD_VAR 0 6
28971: PUSH
28972: FOR_TO
28973: IFFALSE 29012
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28975: LD_ADDR_VAR 0 9
28979: PUSH
28980: LD_VAR 0 9
28984: PPUSH
28985: LD_VAR 0 7
28989: PPUSH
28990: LD_VAR 0 6
28994: PUSH
28995: LD_VAR 0 7
28999: ARRAY
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: PPUSH
29005: CALL_OW 1
29009: ST_TO_ADDR
29010: GO 28972
29012: POP
29013: POP
// result := tmp ;
29014: LD_ADDR_VAR 0 6
29018: PUSH
29019: LD_VAR 0 9
29023: ST_TO_ADDR
// end ; end ;
29024: LD_VAR 0 6
29028: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29029: LD_INT 0
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29037: LD_ADDR_VAR 0 5
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// if not x or not y then
29059: LD_VAR 0 2
29063: NOT
29064: PUSH
29065: LD_VAR 0 3
29069: NOT
29070: OR
29071: IFFALSE 29075
// exit ;
29073: GO 30721
// if not range then
29075: LD_VAR 0 4
29079: NOT
29080: IFFALSE 29090
// range := 10 ;
29082: LD_ADDR_VAR 0 4
29086: PUSH
29087: LD_INT 10
29089: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29090: LD_ADDR_VAR 0 8
29094: PUSH
29095: LD_INT 81
29097: PUSH
29098: LD_VAR 0 1
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 92
29109: PUSH
29110: LD_VAR 0 2
29114: PUSH
29115: LD_VAR 0 3
29119: PUSH
29120: LD_VAR 0 4
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: LD_INT 21
29136: PUSH
29137: LD_INT 3
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: PPUSH
29153: CALL_OW 69
29157: ST_TO_ADDR
// if not tmp then
29158: LD_VAR 0 8
29162: NOT
29163: IFFALSE 29167
// exit ;
29165: GO 30721
// for i in tmp do
29167: LD_ADDR_VAR 0 6
29171: PUSH
29172: LD_VAR 0 8
29176: PUSH
29177: FOR_IN
29178: IFFALSE 30696
// begin points := [ 0 , 0 , 0 ] ;
29180: LD_ADDR_VAR 0 9
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// bpoints := 1 ;
29199: LD_ADDR_VAR 0 10
29203: PUSH
29204: LD_INT 1
29206: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29207: LD_VAR 0 6
29211: PPUSH
29212: CALL_OW 247
29216: PUSH
29217: LD_INT 1
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29225
29223: GO 29803
29225: POP
// begin if GetClass ( i ) = 1 then
29226: LD_VAR 0 6
29230: PPUSH
29231: CALL_OW 257
29235: PUSH
29236: LD_INT 1
29238: EQUAL
29239: IFFALSE 29260
// points := [ 10 , 5 , 3 ] ;
29241: LD_ADDR_VAR 0 9
29245: PUSH
29246: LD_INT 10
29248: PUSH
29249: LD_INT 5
29251: PUSH
29252: LD_INT 3
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: LIST
29259: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29260: LD_VAR 0 6
29264: PPUSH
29265: CALL_OW 257
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 3
29275: PUSH
29276: LD_INT 4
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: IN
29284: IFFALSE 29305
// points := [ 3 , 2 , 1 ] ;
29286: LD_ADDR_VAR 0 9
29290: PUSH
29291: LD_INT 3
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29305: LD_VAR 0 6
29309: PPUSH
29310: CALL_OW 257
29314: PUSH
29315: LD_INT 5
29317: EQUAL
29318: IFFALSE 29339
// points := [ 130 , 5 , 2 ] ;
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: LD_INT 130
29327: PUSH
29328: LD_INT 5
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29339: LD_VAR 0 6
29343: PPUSH
29344: CALL_OW 257
29348: PUSH
29349: LD_INT 8
29351: EQUAL
29352: IFFALSE 29373
// points := [ 35 , 35 , 30 ] ;
29354: LD_ADDR_VAR 0 9
29358: PUSH
29359: LD_INT 35
29361: PUSH
29362: LD_INT 35
29364: PUSH
29365: LD_INT 30
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29373: LD_VAR 0 6
29377: PPUSH
29378: CALL_OW 257
29382: PUSH
29383: LD_INT 9
29385: EQUAL
29386: IFFALSE 29407
// points := [ 20 , 55 , 40 ] ;
29388: LD_ADDR_VAR 0 9
29392: PUSH
29393: LD_INT 20
29395: PUSH
29396: LD_INT 55
29398: PUSH
29399: LD_INT 40
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29407: LD_VAR 0 6
29411: PPUSH
29412: CALL_OW 257
29416: PUSH
29417: LD_INT 12
29419: PUSH
29420: LD_INT 16
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: IN
29427: IFFALSE 29448
// points := [ 5 , 3 , 2 ] ;
29429: LD_ADDR_VAR 0 9
29433: PUSH
29434: LD_INT 5
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29448: LD_VAR 0 6
29452: PPUSH
29453: CALL_OW 257
29457: PUSH
29458: LD_INT 17
29460: EQUAL
29461: IFFALSE 29482
// points := [ 100 , 50 , 75 ] ;
29463: LD_ADDR_VAR 0 9
29467: PUSH
29468: LD_INT 100
29470: PUSH
29471: LD_INT 50
29473: PUSH
29474: LD_INT 75
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29482: LD_VAR 0 6
29486: PPUSH
29487: CALL_OW 257
29491: PUSH
29492: LD_INT 15
29494: EQUAL
29495: IFFALSE 29516
// points := [ 10 , 5 , 3 ] ;
29497: LD_ADDR_VAR 0 9
29501: PUSH
29502: LD_INT 10
29504: PUSH
29505: LD_INT 5
29507: PUSH
29508: LD_INT 3
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29516: LD_VAR 0 6
29520: PPUSH
29521: CALL_OW 257
29525: PUSH
29526: LD_INT 14
29528: EQUAL
29529: IFFALSE 29550
// points := [ 10 , 0 , 0 ] ;
29531: LD_ADDR_VAR 0 9
29535: PUSH
29536: LD_INT 10
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29550: LD_VAR 0 6
29554: PPUSH
29555: CALL_OW 257
29559: PUSH
29560: LD_INT 11
29562: EQUAL
29563: IFFALSE 29584
// points := [ 30 , 10 , 5 ] ;
29565: LD_ADDR_VAR 0 9
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 10
29575: PUSH
29576: LD_INT 5
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29584: LD_VAR 0 1
29588: PPUSH
29589: LD_INT 5
29591: PPUSH
29592: CALL_OW 321
29596: PUSH
29597: LD_INT 2
29599: EQUAL
29600: IFFALSE 29617
// bpoints := bpoints * 1.8 ;
29602: LD_ADDR_VAR 0 10
29606: PUSH
29607: LD_VAR 0 10
29611: PUSH
29612: LD_REAL  1.80000000000000E+0000
29615: MUL
29616: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29617: LD_VAR 0 6
29621: PPUSH
29622: CALL_OW 257
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: LD_INT 4
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: IN
29645: PUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: LD_INT 51
29653: PPUSH
29654: CALL_OW 321
29658: PUSH
29659: LD_INT 2
29661: EQUAL
29662: AND
29663: IFFALSE 29680
// bpoints := bpoints * 1.2 ;
29665: LD_ADDR_VAR 0 10
29669: PUSH
29670: LD_VAR 0 10
29674: PUSH
29675: LD_REAL  1.20000000000000E+0000
29678: MUL
29679: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29680: LD_VAR 0 6
29684: PPUSH
29685: CALL_OW 257
29689: PUSH
29690: LD_INT 5
29692: PUSH
29693: LD_INT 7
29695: PUSH
29696: LD_INT 9
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: IN
29704: PUSH
29705: LD_VAR 0 1
29709: PPUSH
29710: LD_INT 52
29712: PPUSH
29713: CALL_OW 321
29717: PUSH
29718: LD_INT 2
29720: EQUAL
29721: AND
29722: IFFALSE 29739
// bpoints := bpoints * 1.5 ;
29724: LD_ADDR_VAR 0 10
29728: PUSH
29729: LD_VAR 0 10
29733: PUSH
29734: LD_REAL  1.50000000000000E+0000
29737: MUL
29738: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29739: LD_VAR 0 1
29743: PPUSH
29744: LD_INT 66
29746: PPUSH
29747: CALL_OW 321
29751: PUSH
29752: LD_INT 2
29754: EQUAL
29755: IFFALSE 29772
// bpoints := bpoints * 1.1 ;
29757: LD_ADDR_VAR 0 10
29761: PUSH
29762: LD_VAR 0 10
29766: PUSH
29767: LD_REAL  1.10000000000000E+0000
29770: MUL
29771: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29772: LD_ADDR_VAR 0 10
29776: PUSH
29777: LD_VAR 0 10
29781: PUSH
29782: LD_VAR 0 6
29786: PPUSH
29787: LD_INT 1
29789: PPUSH
29790: CALL_OW 259
29794: PUSH
29795: LD_REAL  1.15000000000000E+0000
29798: MUL
29799: MUL
29800: ST_TO_ADDR
// end ; unit_vehicle :
29801: GO 30625
29803: LD_INT 2
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 30613
29811: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29812: LD_VAR 0 6
29816: PPUSH
29817: CALL_OW 264
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: LD_INT 42
29827: PUSH
29828: LD_INT 24
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: IN
29836: IFFALSE 29857
// points := [ 25 , 5 , 3 ] ;
29838: LD_ADDR_VAR 0 9
29842: PUSH
29843: LD_INT 25
29845: PUSH
29846: LD_INT 5
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29857: LD_VAR 0 6
29861: PPUSH
29862: CALL_OW 264
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: LD_INT 43
29872: PUSH
29873: LD_INT 25
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: IN
29881: IFFALSE 29902
// points := [ 40 , 15 , 5 ] ;
29883: LD_ADDR_VAR 0 9
29887: PUSH
29888: LD_INT 40
29890: PUSH
29891: LD_INT 15
29893: PUSH
29894: LD_INT 5
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29902: LD_VAR 0 6
29906: PPUSH
29907: CALL_OW 264
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: LD_INT 23
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: IN
29922: IFFALSE 29943
// points := [ 7 , 25 , 8 ] ;
29924: LD_ADDR_VAR 0 9
29928: PUSH
29929: LD_INT 7
29931: PUSH
29932: LD_INT 25
29934: PUSH
29935: LD_INT 8
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29943: LD_VAR 0 6
29947: PPUSH
29948: CALL_OW 264
29952: PUSH
29953: LD_INT 5
29955: PUSH
29956: LD_INT 27
29958: PUSH
29959: LD_INT 44
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: IN
29967: IFFALSE 29988
// points := [ 14 , 50 , 16 ] ;
29969: LD_ADDR_VAR 0 9
29973: PUSH
29974: LD_INT 14
29976: PUSH
29977: LD_INT 50
29979: PUSH
29980: LD_INT 16
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29988: LD_VAR 0 6
29992: PPUSH
29993: CALL_OW 264
29997: PUSH
29998: LD_INT 6
30000: PUSH
30001: LD_INT 46
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: IN
30008: IFFALSE 30029
// points := [ 32 , 120 , 70 ] ;
30010: LD_ADDR_VAR 0 9
30014: PUSH
30015: LD_INT 32
30017: PUSH
30018: LD_INT 120
30020: PUSH
30021: LD_INT 70
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30029: LD_VAR 0 6
30033: PPUSH
30034: CALL_OW 264
30038: PUSH
30039: LD_INT 7
30041: PUSH
30042: LD_INT 28
30044: PUSH
30045: LD_INT 45
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: IN
30053: IFFALSE 30074
// points := [ 35 , 20 , 45 ] ;
30055: LD_ADDR_VAR 0 9
30059: PUSH
30060: LD_INT 35
30062: PUSH
30063: LD_INT 20
30065: PUSH
30066: LD_INT 45
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30074: LD_VAR 0 6
30078: PPUSH
30079: CALL_OW 264
30083: PUSH
30084: LD_INT 47
30086: PUSH
30087: EMPTY
30088: LIST
30089: IN
30090: IFFALSE 30111
// points := [ 67 , 45 , 75 ] ;
30092: LD_ADDR_VAR 0 9
30096: PUSH
30097: LD_INT 67
30099: PUSH
30100: LD_INT 45
30102: PUSH
30103: LD_INT 75
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30111: LD_VAR 0 6
30115: PPUSH
30116: CALL_OW 264
30120: PUSH
30121: LD_INT 26
30123: PUSH
30124: EMPTY
30125: LIST
30126: IN
30127: IFFALSE 30148
// points := [ 120 , 30 , 80 ] ;
30129: LD_ADDR_VAR 0 9
30133: PUSH
30134: LD_INT 120
30136: PUSH
30137: LD_INT 30
30139: PUSH
30140: LD_INT 80
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30148: LD_VAR 0 6
30152: PPUSH
30153: CALL_OW 264
30157: PUSH
30158: LD_INT 22
30160: PUSH
30161: EMPTY
30162: LIST
30163: IN
30164: IFFALSE 30185
// points := [ 40 , 1 , 1 ] ;
30166: LD_ADDR_VAR 0 9
30170: PUSH
30171: LD_INT 40
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30185: LD_VAR 0 6
30189: PPUSH
30190: CALL_OW 264
30194: PUSH
30195: LD_INT 29
30197: PUSH
30198: EMPTY
30199: LIST
30200: IN
30201: IFFALSE 30222
// points := [ 70 , 200 , 400 ] ;
30203: LD_ADDR_VAR 0 9
30207: PUSH
30208: LD_INT 70
30210: PUSH
30211: LD_INT 200
30213: PUSH
30214: LD_INT 400
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: LIST
30221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30222: LD_VAR 0 6
30226: PPUSH
30227: CALL_OW 264
30231: PUSH
30232: LD_INT 14
30234: PUSH
30235: LD_INT 53
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: IN
30242: IFFALSE 30263
// points := [ 40 , 10 , 20 ] ;
30244: LD_ADDR_VAR 0 9
30248: PUSH
30249: LD_INT 40
30251: PUSH
30252: LD_INT 10
30254: PUSH
30255: LD_INT 20
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30263: LD_VAR 0 6
30267: PPUSH
30268: CALL_OW 264
30272: PUSH
30273: LD_INT 9
30275: PUSH
30276: EMPTY
30277: LIST
30278: IN
30279: IFFALSE 30300
// points := [ 5 , 70 , 20 ] ;
30281: LD_ADDR_VAR 0 9
30285: PUSH
30286: LD_INT 5
30288: PUSH
30289: LD_INT 70
30291: PUSH
30292: LD_INT 20
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30300: LD_VAR 0 6
30304: PPUSH
30305: CALL_OW 264
30309: PUSH
30310: LD_INT 10
30312: PUSH
30313: EMPTY
30314: LIST
30315: IN
30316: IFFALSE 30337
// points := [ 35 , 110 , 70 ] ;
30318: LD_ADDR_VAR 0 9
30322: PUSH
30323: LD_INT 35
30325: PUSH
30326: LD_INT 110
30328: PUSH
30329: LD_INT 70
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30337: LD_VAR 0 6
30341: PPUSH
30342: CALL_OW 265
30346: PUSH
30347: LD_INT 25
30349: EQUAL
30350: IFFALSE 30371
// points := [ 80 , 65 , 100 ] ;
30352: LD_ADDR_VAR 0 9
30356: PUSH
30357: LD_INT 80
30359: PUSH
30360: LD_INT 65
30362: PUSH
30363: LD_INT 100
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30371: LD_VAR 0 6
30375: PPUSH
30376: CALL_OW 263
30380: PUSH
30381: LD_INT 1
30383: EQUAL
30384: IFFALSE 30419
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30386: LD_ADDR_VAR 0 10
30390: PUSH
30391: LD_VAR 0 10
30395: PUSH
30396: LD_VAR 0 6
30400: PPUSH
30401: CALL_OW 311
30405: PPUSH
30406: LD_INT 3
30408: PPUSH
30409: CALL_OW 259
30413: PUSH
30414: LD_INT 4
30416: MUL
30417: MUL
30418: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30419: LD_VAR 0 6
30423: PPUSH
30424: CALL_OW 263
30428: PUSH
30429: LD_INT 2
30431: EQUAL
30432: IFFALSE 30483
// begin j := IsControledBy ( i ) ;
30434: LD_ADDR_VAR 0 7
30438: PUSH
30439: LD_VAR 0 6
30443: PPUSH
30444: CALL_OW 312
30448: ST_TO_ADDR
// if j then
30449: LD_VAR 0 7
30453: IFFALSE 30483
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30455: LD_ADDR_VAR 0 10
30459: PUSH
30460: LD_VAR 0 10
30464: PUSH
30465: LD_VAR 0 7
30469: PPUSH
30470: LD_INT 3
30472: PPUSH
30473: CALL_OW 259
30477: PUSH
30478: LD_INT 3
30480: MUL
30481: MUL
30482: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30483: LD_VAR 0 6
30487: PPUSH
30488: CALL_OW 264
30492: PUSH
30493: LD_INT 5
30495: PUSH
30496: LD_INT 6
30498: PUSH
30499: LD_INT 46
30501: PUSH
30502: LD_INT 44
30504: PUSH
30505: LD_INT 47
30507: PUSH
30508: LD_INT 45
30510: PUSH
30511: LD_INT 28
30513: PUSH
30514: LD_INT 7
30516: PUSH
30517: LD_INT 27
30519: PUSH
30520: LD_INT 29
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: IN
30535: PUSH
30536: LD_VAR 0 1
30540: PPUSH
30541: LD_INT 52
30543: PPUSH
30544: CALL_OW 321
30548: PUSH
30549: LD_INT 2
30551: EQUAL
30552: AND
30553: IFFALSE 30570
// bpoints := bpoints * 1.2 ;
30555: LD_ADDR_VAR 0 10
30559: PUSH
30560: LD_VAR 0 10
30564: PUSH
30565: LD_REAL  1.20000000000000E+0000
30568: MUL
30569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30570: LD_VAR 0 6
30574: PPUSH
30575: CALL_OW 264
30579: PUSH
30580: LD_INT 6
30582: PUSH
30583: LD_INT 46
30585: PUSH
30586: LD_INT 47
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: IN
30594: IFFALSE 30611
// bpoints := bpoints * 1.2 ;
30596: LD_ADDR_VAR 0 10
30600: PUSH
30601: LD_VAR 0 10
30605: PUSH
30606: LD_REAL  1.20000000000000E+0000
30609: MUL
30610: ST_TO_ADDR
// end ; unit_building :
30611: GO 30625
30613: LD_INT 3
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30624
30621: POP
// ; end ;
30622: GO 30625
30624: POP
// for j = 1 to 3 do
30625: LD_ADDR_VAR 0 7
30629: PUSH
30630: DOUBLE
30631: LD_INT 1
30633: DEC
30634: ST_TO_ADDR
30635: LD_INT 3
30637: PUSH
30638: FOR_TO
30639: IFFALSE 30692
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30641: LD_ADDR_VAR 0 5
30645: PUSH
30646: LD_VAR 0 5
30650: PPUSH
30651: LD_VAR 0 7
30655: PPUSH
30656: LD_VAR 0 5
30660: PUSH
30661: LD_VAR 0 7
30665: ARRAY
30666: PUSH
30667: LD_VAR 0 9
30671: PUSH
30672: LD_VAR 0 7
30676: ARRAY
30677: PUSH
30678: LD_VAR 0 10
30682: MUL
30683: PLUS
30684: PPUSH
30685: CALL_OW 1
30689: ST_TO_ADDR
30690: GO 30638
30692: POP
30693: POP
// end ;
30694: GO 29177
30696: POP
30697: POP
// result := Replace ( result , 4 , tmp ) ;
30698: LD_ADDR_VAR 0 5
30702: PUSH
30703: LD_VAR 0 5
30707: PPUSH
30708: LD_INT 4
30710: PPUSH
30711: LD_VAR 0 8
30715: PPUSH
30716: CALL_OW 1
30720: ST_TO_ADDR
// end ;
30721: LD_VAR 0 5
30725: RET
// export function DangerAtRange ( unit , range ) ; begin
30726: LD_INT 0
30728: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_VAR 0 1
30738: PPUSH
30739: CALL_OW 255
30743: PPUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL_OW 250
30753: PPUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 251
30763: PPUSH
30764: LD_VAR 0 2
30768: PPUSH
30769: CALL 29029 0 4
30773: ST_TO_ADDR
// end ;
30774: LD_VAR 0 3
30778: RET
// export function DangerInArea ( side , area ) ; begin
30779: LD_INT 0
30781: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30782: LD_ADDR_VAR 0 3
30786: PUSH
30787: LD_VAR 0 2
30791: PPUSH
30792: LD_INT 81
30794: PUSH
30795: LD_VAR 0 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PPUSH
30804: CALL_OW 70
30808: ST_TO_ADDR
// end ;
30809: LD_VAR 0 3
30813: RET
// export function IsExtension ( b ) ; begin
30814: LD_INT 0
30816: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30817: LD_ADDR_VAR 0 2
30821: PUSH
30822: LD_VAR 0 1
30826: PUSH
30827: LD_INT 23
30829: PUSH
30830: LD_INT 20
30832: PUSH
30833: LD_INT 22
30835: PUSH
30836: LD_INT 17
30838: PUSH
30839: LD_INT 24
30841: PUSH
30842: LD_INT 21
30844: PUSH
30845: LD_INT 19
30847: PUSH
30848: LD_INT 16
30850: PUSH
30851: LD_INT 25
30853: PUSH
30854: LD_INT 18
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: IN
30869: ST_TO_ADDR
// end ;
30870: LD_VAR 0 2
30874: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
// result := [ ] ;
30880: LD_ADDR_VAR 0 3
30884: PUSH
30885: EMPTY
30886: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30887: LD_ADDR_VAR 0 4
30891: PUSH
30892: LD_VAR 0 2
30896: PPUSH
30897: LD_INT 21
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PPUSH
30907: CALL_OW 70
30911: ST_TO_ADDR
// if not tmp then
30912: LD_VAR 0 4
30916: NOT
30917: IFFALSE 30921
// exit ;
30919: GO 30979
// for i in tmp do
30921: LD_ADDR_VAR 0 5
30925: PUSH
30926: LD_VAR 0 4
30930: PUSH
30931: FOR_IN
30932: IFFALSE 30967
// if GetBase ( i ) <> base then
30934: LD_VAR 0 5
30938: PPUSH
30939: CALL_OW 274
30943: PUSH
30944: LD_VAR 0 1
30948: NONEQUAL
30949: IFFALSE 30965
// ComLinkToBase ( base , i ) ;
30951: LD_VAR 0 1
30955: PPUSH
30956: LD_VAR 0 5
30960: PPUSH
30961: CALL_OW 169
30965: GO 30931
30967: POP
30968: POP
// result := tmp ;
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_VAR 0 4
30978: ST_TO_ADDR
// end ;
30979: LD_VAR 0 3
30983: RET
// export function ComComplete ( unit , b ) ; var i ; begin
30984: LD_INT 0
30986: PPUSH
30987: PPUSH
// if BuildingStatus ( b ) = bs_build then
30988: LD_VAR 0 2
30992: PPUSH
30993: CALL_OW 461
30997: PUSH
30998: LD_INT 1
31000: EQUAL
31001: IFFALSE 31061
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31003: LD_VAR 0 1
31007: PPUSH
31008: LD_STRING h
31010: PUSH
31011: LD_VAR 0 2
31015: PPUSH
31016: CALL_OW 250
31020: PUSH
31021: LD_VAR 0 2
31025: PPUSH
31026: CALL_OW 251
31030: PUSH
31031: LD_VAR 0 2
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: PUSH
31054: EMPTY
31055: LIST
31056: PPUSH
31057: CALL_OW 446
// end ;
31061: LD_VAR 0 3
31065: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31066: LD_INT 0
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31074: LD_VAR 0 1
31078: NOT
31079: PUSH
31080: LD_VAR 0 1
31084: PPUSH
31085: CALL_OW 263
31089: PUSH
31090: LD_INT 2
31092: EQUAL
31093: NOT
31094: OR
31095: IFFALSE 31099
// exit ;
31097: GO 31415
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31099: LD_ADDR_VAR 0 6
31103: PUSH
31104: LD_INT 22
31106: PUSH
31107: LD_VAR 0 1
31111: PPUSH
31112: CALL_OW 255
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 30
31126: PUSH
31127: LD_INT 36
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 34
31136: PUSH
31137: LD_INT 31
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PPUSH
31153: CALL_OW 69
31157: ST_TO_ADDR
// if not tmp then
31158: LD_VAR 0 6
31162: NOT
31163: IFFALSE 31167
// exit ;
31165: GO 31415
// result := [ ] ;
31167: LD_ADDR_VAR 0 2
31171: PUSH
31172: EMPTY
31173: ST_TO_ADDR
// for i in tmp do
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_VAR 0 6
31183: PUSH
31184: FOR_IN
31185: IFFALSE 31256
// begin t := UnitsInside ( i ) ;
31187: LD_ADDR_VAR 0 4
31191: PUSH
31192: LD_VAR 0 3
31196: PPUSH
31197: CALL_OW 313
31201: ST_TO_ADDR
// if t then
31202: LD_VAR 0 4
31206: IFFALSE 31254
// for j in t do
31208: LD_ADDR_VAR 0 7
31212: PUSH
31213: LD_VAR 0 4
31217: PUSH
31218: FOR_IN
31219: IFFALSE 31252
// result := Insert ( result , result + 1 , j ) ;
31221: LD_ADDR_VAR 0 2
31225: PUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: LD_VAR 0 2
31235: PUSH
31236: LD_INT 1
31238: PLUS
31239: PPUSH
31240: LD_VAR 0 7
31244: PPUSH
31245: CALL_OW 2
31249: ST_TO_ADDR
31250: GO 31218
31252: POP
31253: POP
// end ;
31254: GO 31184
31256: POP
31257: POP
// if not result then
31258: LD_VAR 0 2
31262: NOT
31263: IFFALSE 31267
// exit ;
31265: GO 31415
// mech := result [ 1 ] ;
31267: LD_ADDR_VAR 0 5
31271: PUSH
31272: LD_VAR 0 2
31276: PUSH
31277: LD_INT 1
31279: ARRAY
31280: ST_TO_ADDR
// if result > 1 then
31281: LD_VAR 0 2
31285: PUSH
31286: LD_INT 1
31288: GREATER
31289: IFFALSE 31401
// for i = 2 to result do
31291: LD_ADDR_VAR 0 3
31295: PUSH
31296: DOUBLE
31297: LD_INT 2
31299: DEC
31300: ST_TO_ADDR
31301: LD_VAR 0 2
31305: PUSH
31306: FOR_TO
31307: IFFALSE 31399
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31309: LD_ADDR_VAR 0 4
31313: PUSH
31314: LD_VAR 0 2
31318: PUSH
31319: LD_VAR 0 3
31323: ARRAY
31324: PPUSH
31325: LD_INT 3
31327: PPUSH
31328: CALL_OW 259
31332: PUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 3
31342: ARRAY
31343: PPUSH
31344: CALL_OW 432
31348: MINUS
31349: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31350: LD_VAR 0 4
31354: PUSH
31355: LD_VAR 0 5
31359: PPUSH
31360: LD_INT 3
31362: PPUSH
31363: CALL_OW 259
31367: PUSH
31368: LD_VAR 0 5
31372: PPUSH
31373: CALL_OW 432
31377: MINUS
31378: GREATEREQUAL
31379: IFFALSE 31397
// mech := result [ i ] ;
31381: LD_ADDR_VAR 0 5
31385: PUSH
31386: LD_VAR 0 2
31390: PUSH
31391: LD_VAR 0 3
31395: ARRAY
31396: ST_TO_ADDR
// end ;
31397: GO 31306
31399: POP
31400: POP
// ComLinkTo ( vehicle , mech ) ;
31401: LD_VAR 0 1
31405: PPUSH
31406: LD_VAR 0 5
31410: PPUSH
31411: CALL_OW 135
// end ;
31415: LD_VAR 0 2
31419: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31420: LD_INT 0
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
// result := [ ] ;
31435: LD_ADDR_VAR 0 7
31439: PUSH
31440: EMPTY
31441: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31442: LD_VAR 0 1
31446: PPUSH
31447: CALL_OW 266
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: IN
31462: NOT
31463: IFFALSE 31467
// exit ;
31465: GO 33098
// if name then
31467: LD_VAR 0 3
31471: IFFALSE 31487
// SetBName ( base_dep , name ) ;
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_VAR 0 3
31482: PPUSH
31483: CALL_OW 500
// base := GetBase ( base_dep ) ;
31487: LD_ADDR_VAR 0 15
31491: PUSH
31492: LD_VAR 0 1
31496: PPUSH
31497: CALL_OW 274
31501: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31502: LD_ADDR_VAR 0 16
31506: PUSH
31507: LD_VAR 0 1
31511: PPUSH
31512: CALL_OW 255
31516: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31517: LD_ADDR_VAR 0 17
31521: PUSH
31522: LD_VAR 0 1
31526: PPUSH
31527: CALL_OW 248
31531: ST_TO_ADDR
// if sources then
31532: LD_VAR 0 5
31536: IFFALSE 31583
// for i = 1 to 3 do
31538: LD_ADDR_VAR 0 8
31542: PUSH
31543: DOUBLE
31544: LD_INT 1
31546: DEC
31547: ST_TO_ADDR
31548: LD_INT 3
31550: PUSH
31551: FOR_TO
31552: IFFALSE 31581
// AddResourceType ( base , i , sources [ i ] ) ;
31554: LD_VAR 0 15
31558: PPUSH
31559: LD_VAR 0 8
31563: PPUSH
31564: LD_VAR 0 5
31568: PUSH
31569: LD_VAR 0 8
31573: ARRAY
31574: PPUSH
31575: CALL_OW 276
31579: GO 31551
31581: POP
31582: POP
// buildings := GetBaseBuildings ( base , area ) ;
31583: LD_ADDR_VAR 0 18
31587: PUSH
31588: LD_VAR 0 15
31592: PPUSH
31593: LD_VAR 0 2
31597: PPUSH
31598: CALL 30875 0 2
31602: ST_TO_ADDR
// InitHc ;
31603: CALL_OW 19
// InitUc ;
31607: CALL_OW 18
// uc_side := side ;
31611: LD_ADDR_OWVAR 20
31615: PUSH
31616: LD_VAR 0 16
31620: ST_TO_ADDR
// uc_nation := nation ;
31621: LD_ADDR_OWVAR 21
31625: PUSH
31626: LD_VAR 0 17
31630: ST_TO_ADDR
// if buildings then
31631: LD_VAR 0 18
31635: IFFALSE 32957
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31637: LD_ADDR_VAR 0 19
31641: PUSH
31642: LD_VAR 0 18
31646: PPUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 30
31652: PUSH
31653: LD_INT 29
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 30
31662: PUSH
31663: LD_INT 30
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: PPUSH
31675: CALL_OW 72
31679: ST_TO_ADDR
// if tmp then
31680: LD_VAR 0 19
31684: IFFALSE 31732
// for i in tmp do
31686: LD_ADDR_VAR 0 8
31690: PUSH
31691: LD_VAR 0 19
31695: PUSH
31696: FOR_IN
31697: IFFALSE 31730
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31699: LD_VAR 0 8
31703: PPUSH
31704: CALL_OW 250
31708: PPUSH
31709: LD_VAR 0 8
31713: PPUSH
31714: CALL_OW 251
31718: PPUSH
31719: LD_VAR 0 16
31723: PPUSH
31724: CALL_OW 441
31728: GO 31696
31730: POP
31731: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31732: LD_VAR 0 18
31736: PPUSH
31737: LD_INT 2
31739: PUSH
31740: LD_INT 30
31742: PUSH
31743: LD_INT 32
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 30
31752: PUSH
31753: LD_INT 33
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: PPUSH
31765: CALL_OW 72
31769: IFFALSE 31857
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31771: LD_ADDR_VAR 0 8
31775: PUSH
31776: LD_VAR 0 18
31780: PPUSH
31781: LD_INT 2
31783: PUSH
31784: LD_INT 30
31786: PUSH
31787: LD_INT 32
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 30
31796: PUSH
31797: LD_INT 33
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: LIST
31808: PPUSH
31809: CALL_OW 72
31813: PUSH
31814: FOR_IN
31815: IFFALSE 31855
// begin if not GetBWeapon ( i ) then
31817: LD_VAR 0 8
31821: PPUSH
31822: CALL_OW 269
31826: NOT
31827: IFFALSE 31853
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31829: LD_VAR 0 8
31833: PPUSH
31834: LD_VAR 0 8
31838: PPUSH
31839: LD_VAR 0 2
31843: PPUSH
31844: CALL 33103 0 2
31848: PPUSH
31849: CALL_OW 431
// end ;
31853: GO 31814
31855: POP
31856: POP
// end ; for i = 1 to personel do
31857: LD_ADDR_VAR 0 8
31861: PUSH
31862: DOUBLE
31863: LD_INT 1
31865: DEC
31866: ST_TO_ADDR
31867: LD_VAR 0 6
31871: PUSH
31872: FOR_TO
31873: IFFALSE 32937
// begin if i > 4 then
31875: LD_VAR 0 8
31879: PUSH
31880: LD_INT 4
31882: GREATER
31883: IFFALSE 31887
// break ;
31885: GO 32937
// case i of 1 :
31887: LD_VAR 0 8
31891: PUSH
31892: LD_INT 1
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31980
31900: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31901: LD_ADDR_VAR 0 12
31905: PUSH
31906: LD_VAR 0 18
31910: PPUSH
31911: LD_INT 22
31913: PUSH
31914: LD_VAR 0 16
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 58
31925: PUSH
31926: EMPTY
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 30
31934: PUSH
31935: LD_INT 32
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 30
31944: PUSH
31945: LD_INT 4
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 30
31954: PUSH
31955: LD_INT 5
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: PPUSH
31973: CALL_OW 72
31977: ST_TO_ADDR
31978: GO 32202
31980: LD_INT 2
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 32050
31988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31989: LD_ADDR_VAR 0 12
31993: PUSH
31994: LD_VAR 0 18
31998: PPUSH
31999: LD_INT 22
32001: PUSH
32002: LD_VAR 0 16
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 30
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 30
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PPUSH
32043: CALL_OW 72
32047: ST_TO_ADDR
32048: GO 32202
32050: LD_INT 3
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32120
32058: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32059: LD_ADDR_VAR 0 12
32063: PUSH
32064: LD_VAR 0 18
32068: PPUSH
32069: LD_INT 22
32071: PUSH
32072: LD_VAR 0 16
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 30
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 30
32096: PUSH
32097: LD_INT 3
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PPUSH
32113: CALL_OW 72
32117: ST_TO_ADDR
32118: GO 32202
32120: LD_INT 4
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32201
32128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32129: LD_ADDR_VAR 0 12
32133: PUSH
32134: LD_VAR 0 18
32138: PPUSH
32139: LD_INT 22
32141: PUSH
32142: LD_VAR 0 16
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: LD_INT 30
32156: PUSH
32157: LD_INT 6
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 30
32166: PUSH
32167: LD_INT 7
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 30
32176: PUSH
32177: LD_INT 8
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PPUSH
32194: CALL_OW 72
32198: ST_TO_ADDR
32199: GO 32202
32201: POP
// if i = 1 then
32202: LD_VAR 0 8
32206: PUSH
32207: LD_INT 1
32209: EQUAL
32210: IFFALSE 32321
// begin tmp := [ ] ;
32212: LD_ADDR_VAR 0 19
32216: PUSH
32217: EMPTY
32218: ST_TO_ADDR
// for j in f do
32219: LD_ADDR_VAR 0 9
32223: PUSH
32224: LD_VAR 0 12
32228: PUSH
32229: FOR_IN
32230: IFFALSE 32303
// if GetBType ( j ) = b_bunker then
32232: LD_VAR 0 9
32236: PPUSH
32237: CALL_OW 266
32241: PUSH
32242: LD_INT 32
32244: EQUAL
32245: IFFALSE 32272
// tmp := Insert ( tmp , 1 , j ) else
32247: LD_ADDR_VAR 0 19
32251: PUSH
32252: LD_VAR 0 19
32256: PPUSH
32257: LD_INT 1
32259: PPUSH
32260: LD_VAR 0 9
32264: PPUSH
32265: CALL_OW 2
32269: ST_TO_ADDR
32270: GO 32301
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32272: LD_ADDR_VAR 0 19
32276: PUSH
32277: LD_VAR 0 19
32281: PPUSH
32282: LD_VAR 0 19
32286: PUSH
32287: LD_INT 1
32289: PLUS
32290: PPUSH
32291: LD_VAR 0 9
32295: PPUSH
32296: CALL_OW 2
32300: ST_TO_ADDR
32301: GO 32229
32303: POP
32304: POP
// if tmp then
32305: LD_VAR 0 19
32309: IFFALSE 32321
// f := tmp ;
32311: LD_ADDR_VAR 0 12
32315: PUSH
32316: LD_VAR 0 19
32320: ST_TO_ADDR
// end ; x := personel [ i ] ;
32321: LD_ADDR_VAR 0 13
32325: PUSH
32326: LD_VAR 0 6
32330: PUSH
32331: LD_VAR 0 8
32335: ARRAY
32336: ST_TO_ADDR
// if x = - 1 then
32337: LD_VAR 0 13
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: EQUAL
32346: IFFALSE 32555
// begin for j in f do
32348: LD_ADDR_VAR 0 9
32352: PUSH
32353: LD_VAR 0 12
32357: PUSH
32358: FOR_IN
32359: IFFALSE 32551
// repeat InitHc ;
32361: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32365: LD_VAR 0 9
32369: PPUSH
32370: CALL_OW 266
32374: PUSH
32375: LD_INT 5
32377: EQUAL
32378: IFFALSE 32448
// begin if UnitsInside ( j ) < 3 then
32380: LD_VAR 0 9
32384: PPUSH
32385: CALL_OW 313
32389: PUSH
32390: LD_INT 3
32392: LESS
32393: IFFALSE 32429
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32395: LD_INT 0
32397: PPUSH
32398: LD_INT 5
32400: PUSH
32401: LD_INT 8
32403: PUSH
32404: LD_INT 9
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: PUSH
32412: LD_VAR 0 17
32416: ARRAY
32417: PPUSH
32418: LD_VAR 0 4
32422: PPUSH
32423: CALL_OW 380
32427: GO 32446
// PrepareHuman ( false , i , skill ) ;
32429: LD_INT 0
32431: PPUSH
32432: LD_VAR 0 8
32436: PPUSH
32437: LD_VAR 0 4
32441: PPUSH
32442: CALL_OW 380
// end else
32446: GO 32465
// PrepareHuman ( false , i , skill ) ;
32448: LD_INT 0
32450: PPUSH
32451: LD_VAR 0 8
32455: PPUSH
32456: LD_VAR 0 4
32460: PPUSH
32461: CALL_OW 380
// un := CreateHuman ;
32465: LD_ADDR_VAR 0 14
32469: PUSH
32470: CALL_OW 44
32474: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32475: LD_ADDR_VAR 0 7
32479: PUSH
32480: LD_VAR 0 7
32484: PPUSH
32485: LD_INT 1
32487: PPUSH
32488: LD_VAR 0 14
32492: PPUSH
32493: CALL_OW 2
32497: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32498: LD_VAR 0 14
32502: PPUSH
32503: LD_VAR 0 9
32507: PPUSH
32508: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32512: LD_VAR 0 9
32516: PPUSH
32517: CALL_OW 313
32521: PUSH
32522: LD_INT 6
32524: EQUAL
32525: PUSH
32526: LD_VAR 0 9
32530: PPUSH
32531: CALL_OW 266
32535: PUSH
32536: LD_INT 32
32538: PUSH
32539: LD_INT 31
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: IN
32546: OR
32547: IFFALSE 32361
32549: GO 32358
32551: POP
32552: POP
// end else
32553: GO 32935
// for j = 1 to x do
32555: LD_ADDR_VAR 0 9
32559: PUSH
32560: DOUBLE
32561: LD_INT 1
32563: DEC
32564: ST_TO_ADDR
32565: LD_VAR 0 13
32569: PUSH
32570: FOR_TO
32571: IFFALSE 32933
// begin InitHc ;
32573: CALL_OW 19
// if not f then
32577: LD_VAR 0 12
32581: NOT
32582: IFFALSE 32671
// begin PrepareHuman ( false , i , skill ) ;
32584: LD_INT 0
32586: PPUSH
32587: LD_VAR 0 8
32591: PPUSH
32592: LD_VAR 0 4
32596: PPUSH
32597: CALL_OW 380
// un := CreateHuman ;
32601: LD_ADDR_VAR 0 14
32605: PUSH
32606: CALL_OW 44
32610: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32611: LD_ADDR_VAR 0 7
32615: PUSH
32616: LD_VAR 0 7
32620: PPUSH
32621: LD_INT 1
32623: PPUSH
32624: LD_VAR 0 14
32628: PPUSH
32629: CALL_OW 2
32633: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32634: LD_VAR 0 14
32638: PPUSH
32639: LD_VAR 0 1
32643: PPUSH
32644: CALL_OW 250
32648: PPUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: CALL_OW 251
32658: PPUSH
32659: LD_INT 10
32661: PPUSH
32662: LD_INT 0
32664: PPUSH
32665: CALL_OW 50
// continue ;
32669: GO 32570
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32671: LD_VAR 0 12
32675: PUSH
32676: LD_INT 1
32678: ARRAY
32679: PPUSH
32680: CALL_OW 313
32684: PUSH
32685: LD_VAR 0 12
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PPUSH
32694: CALL_OW 266
32698: PUSH
32699: LD_INT 32
32701: PUSH
32702: LD_INT 31
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: IN
32709: AND
32710: PUSH
32711: LD_VAR 0 12
32715: PUSH
32716: LD_INT 1
32718: ARRAY
32719: PPUSH
32720: CALL_OW 313
32724: PUSH
32725: LD_INT 6
32727: EQUAL
32728: OR
32729: IFFALSE 32749
// f := Delete ( f , 1 ) ;
32731: LD_ADDR_VAR 0 12
32735: PUSH
32736: LD_VAR 0 12
32740: PPUSH
32741: LD_INT 1
32743: PPUSH
32744: CALL_OW 3
32748: ST_TO_ADDR
// if not f then
32749: LD_VAR 0 12
32753: NOT
32754: IFFALSE 32772
// begin x := x + 2 ;
32756: LD_ADDR_VAR 0 13
32760: PUSH
32761: LD_VAR 0 13
32765: PUSH
32766: LD_INT 2
32768: PLUS
32769: ST_TO_ADDR
// continue ;
32770: GO 32570
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32772: LD_VAR 0 12
32776: PUSH
32777: LD_INT 1
32779: ARRAY
32780: PPUSH
32781: CALL_OW 266
32785: PUSH
32786: LD_INT 5
32788: EQUAL
32789: IFFALSE 32863
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32791: LD_VAR 0 12
32795: PUSH
32796: LD_INT 1
32798: ARRAY
32799: PPUSH
32800: CALL_OW 313
32804: PUSH
32805: LD_INT 3
32807: LESS
32808: IFFALSE 32844
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32810: LD_INT 0
32812: PPUSH
32813: LD_INT 5
32815: PUSH
32816: LD_INT 8
32818: PUSH
32819: LD_INT 9
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: LIST
32826: PUSH
32827: LD_VAR 0 17
32831: ARRAY
32832: PPUSH
32833: LD_VAR 0 4
32837: PPUSH
32838: CALL_OW 380
32842: GO 32861
// PrepareHuman ( false , i , skill ) ;
32844: LD_INT 0
32846: PPUSH
32847: LD_VAR 0 8
32851: PPUSH
32852: LD_VAR 0 4
32856: PPUSH
32857: CALL_OW 380
// end else
32861: GO 32880
// PrepareHuman ( false , i , skill ) ;
32863: LD_INT 0
32865: PPUSH
32866: LD_VAR 0 8
32870: PPUSH
32871: LD_VAR 0 4
32875: PPUSH
32876: CALL_OW 380
// un := CreateHuman ;
32880: LD_ADDR_VAR 0 14
32884: PUSH
32885: CALL_OW 44
32889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32890: LD_ADDR_VAR 0 7
32894: PUSH
32895: LD_VAR 0 7
32899: PPUSH
32900: LD_INT 1
32902: PPUSH
32903: LD_VAR 0 14
32907: PPUSH
32908: CALL_OW 2
32912: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32913: LD_VAR 0 14
32917: PPUSH
32918: LD_VAR 0 12
32922: PUSH
32923: LD_INT 1
32925: ARRAY
32926: PPUSH
32927: CALL_OW 52
// end ;
32931: GO 32570
32933: POP
32934: POP
// end ;
32935: GO 31872
32937: POP
32938: POP
// result := result ^ buildings ;
32939: LD_ADDR_VAR 0 7
32943: PUSH
32944: LD_VAR 0 7
32948: PUSH
32949: LD_VAR 0 18
32953: ADD
32954: ST_TO_ADDR
// end else
32955: GO 33098
// begin for i = 1 to personel do
32957: LD_ADDR_VAR 0 8
32961: PUSH
32962: DOUBLE
32963: LD_INT 1
32965: DEC
32966: ST_TO_ADDR
32967: LD_VAR 0 6
32971: PUSH
32972: FOR_TO
32973: IFFALSE 33096
// begin if i > 4 then
32975: LD_VAR 0 8
32979: PUSH
32980: LD_INT 4
32982: GREATER
32983: IFFALSE 32987
// break ;
32985: GO 33096
// x := personel [ i ] ;
32987: LD_ADDR_VAR 0 13
32991: PUSH
32992: LD_VAR 0 6
32996: PUSH
32997: LD_VAR 0 8
33001: ARRAY
33002: ST_TO_ADDR
// if x = - 1 then
33003: LD_VAR 0 13
33007: PUSH
33008: LD_INT 1
33010: NEG
33011: EQUAL
33012: IFFALSE 33016
// continue ;
33014: GO 32972
// PrepareHuman ( false , i , skill ) ;
33016: LD_INT 0
33018: PPUSH
33019: LD_VAR 0 8
33023: PPUSH
33024: LD_VAR 0 4
33028: PPUSH
33029: CALL_OW 380
// un := CreateHuman ;
33033: LD_ADDR_VAR 0 14
33037: PUSH
33038: CALL_OW 44
33042: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33043: LD_VAR 0 14
33047: PPUSH
33048: LD_VAR 0 1
33052: PPUSH
33053: CALL_OW 250
33057: PPUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: CALL_OW 251
33067: PPUSH
33068: LD_INT 10
33070: PPUSH
33071: LD_INT 0
33073: PPUSH
33074: CALL_OW 50
// result := result ^ un ;
33078: LD_ADDR_VAR 0 7
33082: PUSH
33083: LD_VAR 0 7
33087: PUSH
33088: LD_VAR 0 14
33092: ADD
33093: ST_TO_ADDR
// end ;
33094: GO 32972
33096: POP
33097: POP
// end ; end ;
33098: LD_VAR 0 7
33102: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33103: LD_INT 0
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
33109: PPUSH
33110: PPUSH
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
// result := false ;
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_INT 0
33128: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33129: LD_VAR 0 1
33133: NOT
33134: PUSH
33135: LD_VAR 0 1
33139: PPUSH
33140: CALL_OW 266
33144: PUSH
33145: LD_INT 32
33147: PUSH
33148: LD_INT 33
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: IN
33155: NOT
33156: OR
33157: IFFALSE 33161
// exit ;
33159: GO 34297
// nat := GetNation ( tower ) ;
33161: LD_ADDR_VAR 0 12
33165: PUSH
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL_OW 248
33175: ST_TO_ADDR
// side := GetSide ( tower ) ;
33176: LD_ADDR_VAR 0 16
33180: PUSH
33181: LD_VAR 0 1
33185: PPUSH
33186: CALL_OW 255
33190: ST_TO_ADDR
// x := GetX ( tower ) ;
33191: LD_ADDR_VAR 0 10
33195: PUSH
33196: LD_VAR 0 1
33200: PPUSH
33201: CALL_OW 250
33205: ST_TO_ADDR
// y := GetY ( tower ) ;
33206: LD_ADDR_VAR 0 11
33210: PUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: CALL_OW 251
33220: ST_TO_ADDR
// if not x or not y then
33221: LD_VAR 0 10
33225: NOT
33226: PUSH
33227: LD_VAR 0 11
33231: NOT
33232: OR
33233: IFFALSE 33237
// exit ;
33235: GO 34297
// weapon := 0 ;
33237: LD_ADDR_VAR 0 18
33241: PUSH
33242: LD_INT 0
33244: ST_TO_ADDR
// fac_list := [ ] ;
33245: LD_ADDR_VAR 0 17
33249: PUSH
33250: EMPTY
33251: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33252: LD_ADDR_VAR 0 6
33256: PUSH
33257: LD_VAR 0 1
33261: PPUSH
33262: CALL_OW 274
33266: PPUSH
33267: LD_VAR 0 2
33271: PPUSH
33272: CALL 30875 0 2
33276: PPUSH
33277: LD_INT 30
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PPUSH
33287: CALL_OW 72
33291: ST_TO_ADDR
// if not factories then
33292: LD_VAR 0 6
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 34297
// for i in factories do
33301: LD_ADDR_VAR 0 8
33305: PUSH
33306: LD_VAR 0 6
33310: PUSH
33311: FOR_IN
33312: IFFALSE 33337
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33314: LD_ADDR_VAR 0 17
33318: PUSH
33319: LD_VAR 0 17
33323: PUSH
33324: LD_VAR 0 8
33328: PPUSH
33329: CALL_OW 478
33333: UNION
33334: ST_TO_ADDR
33335: GO 33311
33337: POP
33338: POP
// if not fac_list then
33339: LD_VAR 0 17
33343: NOT
33344: IFFALSE 33348
// exit ;
33346: GO 34297
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33348: LD_ADDR_VAR 0 5
33352: PUSH
33353: LD_INT 4
33355: PUSH
33356: LD_INT 5
33358: PUSH
33359: LD_INT 9
33361: PUSH
33362: LD_INT 10
33364: PUSH
33365: LD_INT 6
33367: PUSH
33368: LD_INT 7
33370: PUSH
33371: LD_INT 11
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 27
33385: PUSH
33386: LD_INT 28
33388: PUSH
33389: LD_INT 26
33391: PUSH
33392: LD_INT 30
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 43
33403: PUSH
33404: LD_INT 44
33406: PUSH
33407: LD_INT 46
33409: PUSH
33410: LD_INT 45
33412: PUSH
33413: LD_INT 47
33415: PUSH
33416: LD_INT 49
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: PUSH
33432: LD_VAR 0 12
33436: ARRAY
33437: ST_TO_ADDR
// for i in list do
33438: LD_ADDR_VAR 0 8
33442: PUSH
33443: LD_VAR 0 5
33447: PUSH
33448: FOR_IN
33449: IFFALSE 33482
// if not i in fac_list then
33451: LD_VAR 0 8
33455: PUSH
33456: LD_VAR 0 17
33460: IN
33461: NOT
33462: IFFALSE 33480
// list := list diff i ;
33464: LD_ADDR_VAR 0 5
33468: PUSH
33469: LD_VAR 0 5
33473: PUSH
33474: LD_VAR 0 8
33478: DIFF
33479: ST_TO_ADDR
33480: GO 33448
33482: POP
33483: POP
// if not list then
33484: LD_VAR 0 5
33488: NOT
33489: IFFALSE 33493
// exit ;
33491: GO 34297
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33493: LD_VAR 0 12
33497: PUSH
33498: LD_INT 3
33500: EQUAL
33501: PUSH
33502: LD_INT 49
33504: PUSH
33505: LD_VAR 0 5
33509: IN
33510: AND
33511: PUSH
33512: LD_INT 31
33514: PPUSH
33515: LD_VAR 0 16
33519: PPUSH
33520: CALL_OW 321
33524: PUSH
33525: LD_INT 2
33527: EQUAL
33528: AND
33529: IFFALSE 33589
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33531: LD_INT 22
33533: PUSH
33534: LD_VAR 0 16
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 35
33545: PUSH
33546: LD_INT 49
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 91
33555: PUSH
33556: LD_VAR 0 1
33560: PUSH
33561: LD_INT 10
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: PPUSH
33574: CALL_OW 69
33578: NOT
33579: IFFALSE 33589
// weapon := ru_time_lapser ;
33581: LD_ADDR_VAR 0 18
33585: PUSH
33586: LD_INT 49
33588: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33589: LD_VAR 0 12
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: IN
33604: PUSH
33605: LD_INT 11
33607: PUSH
33608: LD_VAR 0 5
33612: IN
33613: PUSH
33614: LD_INT 30
33616: PUSH
33617: LD_VAR 0 5
33621: IN
33622: OR
33623: AND
33624: PUSH
33625: LD_INT 6
33627: PPUSH
33628: LD_VAR 0 16
33632: PPUSH
33633: CALL_OW 321
33637: PUSH
33638: LD_INT 2
33640: EQUAL
33641: AND
33642: IFFALSE 33807
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33644: LD_INT 22
33646: PUSH
33647: LD_VAR 0 16
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 35
33661: PUSH
33662: LD_INT 11
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 35
33671: PUSH
33672: LD_INT 30
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 91
33686: PUSH
33687: LD_VAR 0 1
33691: PUSH
33692: LD_INT 18
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: PPUSH
33705: CALL_OW 69
33709: NOT
33710: PUSH
33711: LD_INT 22
33713: PUSH
33714: LD_VAR 0 16
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 30
33728: PUSH
33729: LD_INT 32
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 30
33738: PUSH
33739: LD_INT 33
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 91
33753: PUSH
33754: LD_VAR 0 1
33758: PUSH
33759: LD_INT 12
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: PUSH
33772: EMPTY
33773: LIST
33774: PPUSH
33775: CALL_OW 69
33779: PUSH
33780: LD_INT 2
33782: GREATER
33783: AND
33784: IFFALSE 33807
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33786: LD_ADDR_VAR 0 18
33790: PUSH
33791: LD_INT 11
33793: PUSH
33794: LD_INT 30
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_VAR 0 12
33805: ARRAY
33806: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33807: LD_VAR 0 18
33811: NOT
33812: PUSH
33813: LD_INT 40
33815: PPUSH
33816: LD_VAR 0 16
33820: PPUSH
33821: CALL_OW 321
33825: PUSH
33826: LD_INT 2
33828: EQUAL
33829: AND
33830: PUSH
33831: LD_INT 7
33833: PUSH
33834: LD_VAR 0 5
33838: IN
33839: PUSH
33840: LD_INT 28
33842: PUSH
33843: LD_VAR 0 5
33847: IN
33848: OR
33849: PUSH
33850: LD_INT 45
33852: PUSH
33853: LD_VAR 0 5
33857: IN
33858: OR
33859: AND
33860: IFFALSE 34114
// begin hex := GetHexInfo ( x , y ) ;
33862: LD_ADDR_VAR 0 4
33866: PUSH
33867: LD_VAR 0 10
33871: PPUSH
33872: LD_VAR 0 11
33876: PPUSH
33877: CALL_OW 546
33881: ST_TO_ADDR
// if hex [ 1 ] then
33882: LD_VAR 0 4
33886: PUSH
33887: LD_INT 1
33889: ARRAY
33890: IFFALSE 33894
// exit ;
33892: GO 34297
// height := hex [ 2 ] ;
33894: LD_ADDR_VAR 0 15
33898: PUSH
33899: LD_VAR 0 4
33903: PUSH
33904: LD_INT 2
33906: ARRAY
33907: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33908: LD_ADDR_VAR 0 14
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 5
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: ST_TO_ADDR
// for i in tmp do
33931: LD_ADDR_VAR 0 8
33935: PUSH
33936: LD_VAR 0 14
33940: PUSH
33941: FOR_IN
33942: IFFALSE 34112
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_VAR 0 10
33953: PPUSH
33954: LD_VAR 0 8
33958: PPUSH
33959: LD_INT 5
33961: PPUSH
33962: CALL_OW 272
33966: PUSH
33967: LD_VAR 0 11
33971: PPUSH
33972: LD_VAR 0 8
33976: PPUSH
33977: LD_INT 5
33979: PPUSH
33980: CALL_OW 273
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33989: LD_VAR 0 9
33993: PUSH
33994: LD_INT 1
33996: ARRAY
33997: PPUSH
33998: LD_VAR 0 9
34002: PUSH
34003: LD_INT 2
34005: ARRAY
34006: PPUSH
34007: CALL_OW 488
34011: IFFALSE 34110
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34013: LD_ADDR_VAR 0 4
34017: PUSH
34018: LD_VAR 0 9
34022: PUSH
34023: LD_INT 1
34025: ARRAY
34026: PPUSH
34027: LD_VAR 0 9
34031: PUSH
34032: LD_INT 2
34034: ARRAY
34035: PPUSH
34036: CALL_OW 546
34040: ST_TO_ADDR
// if hex [ 1 ] then
34041: LD_VAR 0 4
34045: PUSH
34046: LD_INT 1
34048: ARRAY
34049: IFFALSE 34053
// continue ;
34051: GO 33941
// h := hex [ 2 ] ;
34053: LD_ADDR_VAR 0 13
34057: PUSH
34058: LD_VAR 0 4
34062: PUSH
34063: LD_INT 2
34065: ARRAY
34066: ST_TO_ADDR
// if h + 7 < height then
34067: LD_VAR 0 13
34071: PUSH
34072: LD_INT 7
34074: PLUS
34075: PUSH
34076: LD_VAR 0 15
34080: LESS
34081: IFFALSE 34110
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34083: LD_ADDR_VAR 0 18
34087: PUSH
34088: LD_INT 7
34090: PUSH
34091: LD_INT 28
34093: PUSH
34094: LD_INT 45
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: PUSH
34102: LD_VAR 0 12
34106: ARRAY
34107: ST_TO_ADDR
// break ;
34108: GO 34112
// end ; end ; end ;
34110: GO 33941
34112: POP
34113: POP
// end ; if not weapon then
34114: LD_VAR 0 18
34118: NOT
34119: IFFALSE 34179
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34121: LD_ADDR_VAR 0 5
34125: PUSH
34126: LD_VAR 0 5
34130: PUSH
34131: LD_INT 11
34133: PUSH
34134: LD_INT 30
34136: PUSH
34137: LD_INT 49
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: DIFF
34145: ST_TO_ADDR
// if not list then
34146: LD_VAR 0 5
34150: NOT
34151: IFFALSE 34155
// exit ;
34153: GO 34297
// weapon := list [ rand ( 1 , list ) ] ;
34155: LD_ADDR_VAR 0 18
34159: PUSH
34160: LD_VAR 0 5
34164: PUSH
34165: LD_INT 1
34167: PPUSH
34168: LD_VAR 0 5
34172: PPUSH
34173: CALL_OW 12
34177: ARRAY
34178: ST_TO_ADDR
// end ; if weapon then
34179: LD_VAR 0 18
34183: IFFALSE 34297
// begin tmp := CostOfWeapon ( weapon ) ;
34185: LD_ADDR_VAR 0 14
34189: PUSH
34190: LD_VAR 0 18
34194: PPUSH
34195: CALL_OW 451
34199: ST_TO_ADDR
// j := GetBase ( tower ) ;
34200: LD_ADDR_VAR 0 9
34204: PUSH
34205: LD_VAR 0 1
34209: PPUSH
34210: CALL_OW 274
34214: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34215: LD_VAR 0 9
34219: PPUSH
34220: LD_INT 1
34222: PPUSH
34223: CALL_OW 275
34227: PUSH
34228: LD_VAR 0 14
34232: PUSH
34233: LD_INT 1
34235: ARRAY
34236: GREATEREQUAL
34237: PUSH
34238: LD_VAR 0 9
34242: PPUSH
34243: LD_INT 2
34245: PPUSH
34246: CALL_OW 275
34250: PUSH
34251: LD_VAR 0 14
34255: PUSH
34256: LD_INT 2
34258: ARRAY
34259: GREATEREQUAL
34260: AND
34261: PUSH
34262: LD_VAR 0 9
34266: PPUSH
34267: LD_INT 3
34269: PPUSH
34270: CALL_OW 275
34274: PUSH
34275: LD_VAR 0 14
34279: PUSH
34280: LD_INT 3
34282: ARRAY
34283: GREATEREQUAL
34284: AND
34285: IFFALSE 34297
// result := weapon ;
34287: LD_ADDR_VAR 0 3
34291: PUSH
34292: LD_VAR 0 18
34296: ST_TO_ADDR
// end ; end ;
34297: LD_VAR 0 3
34301: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34302: LD_INT 0
34304: PPUSH
34305: PPUSH
// result := true ;
34306: LD_ADDR_VAR 0 3
34310: PUSH
34311: LD_INT 1
34313: ST_TO_ADDR
// if array1 = array2 then
34314: LD_VAR 0 1
34318: PUSH
34319: LD_VAR 0 2
34323: EQUAL
34324: IFFALSE 34384
// begin for i = 1 to array1 do
34326: LD_ADDR_VAR 0 4
34330: PUSH
34331: DOUBLE
34332: LD_INT 1
34334: DEC
34335: ST_TO_ADDR
34336: LD_VAR 0 1
34340: PUSH
34341: FOR_TO
34342: IFFALSE 34380
// if array1 [ i ] <> array2 [ i ] then
34344: LD_VAR 0 1
34348: PUSH
34349: LD_VAR 0 4
34353: ARRAY
34354: PUSH
34355: LD_VAR 0 2
34359: PUSH
34360: LD_VAR 0 4
34364: ARRAY
34365: NONEQUAL
34366: IFFALSE 34378
// begin result := false ;
34368: LD_ADDR_VAR 0 3
34372: PUSH
34373: LD_INT 0
34375: ST_TO_ADDR
// break ;
34376: GO 34380
// end ;
34378: GO 34341
34380: POP
34381: POP
// end else
34382: GO 34392
// result := false ;
34384: LD_ADDR_VAR 0 3
34388: PUSH
34389: LD_INT 0
34391: ST_TO_ADDR
// end ;
34392: LD_VAR 0 3
34396: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34397: LD_INT 0
34399: PPUSH
34400: PPUSH
34401: PPUSH
// pom := GetBase ( fac ) ;
34402: LD_ADDR_VAR 0 5
34406: PUSH
34407: LD_VAR 0 1
34411: PPUSH
34412: CALL_OW 274
34416: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34417: LD_ADDR_VAR 0 4
34421: PUSH
34422: LD_VAR 0 2
34426: PUSH
34427: LD_INT 1
34429: ARRAY
34430: PPUSH
34431: LD_VAR 0 2
34435: PUSH
34436: LD_INT 2
34438: ARRAY
34439: PPUSH
34440: LD_VAR 0 2
34444: PUSH
34445: LD_INT 3
34447: ARRAY
34448: PPUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_INT 4
34456: ARRAY
34457: PPUSH
34458: CALL_OW 449
34462: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_VAR 0 5
34472: PPUSH
34473: LD_INT 1
34475: PPUSH
34476: CALL_OW 275
34480: PUSH
34481: LD_VAR 0 4
34485: PUSH
34486: LD_INT 1
34488: ARRAY
34489: GREATEREQUAL
34490: PUSH
34491: LD_VAR 0 5
34495: PPUSH
34496: LD_INT 2
34498: PPUSH
34499: CALL_OW 275
34503: PUSH
34504: LD_VAR 0 4
34508: PUSH
34509: LD_INT 2
34511: ARRAY
34512: GREATEREQUAL
34513: AND
34514: PUSH
34515: LD_VAR 0 5
34519: PPUSH
34520: LD_INT 3
34522: PPUSH
34523: CALL_OW 275
34527: PUSH
34528: LD_VAR 0 4
34532: PUSH
34533: LD_INT 3
34535: ARRAY
34536: GREATEREQUAL
34537: AND
34538: ST_TO_ADDR
// end ;
34539: LD_VAR 0 3
34543: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
// pom := GetBase ( building ) ;
34550: LD_ADDR_VAR 0 3
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 274
34564: ST_TO_ADDR
// if not pom then
34565: LD_VAR 0 3
34569: NOT
34570: IFFALSE 34574
// exit ;
34572: GO 34744
// btype := GetBType ( building ) ;
34574: LD_ADDR_VAR 0 5
34578: PUSH
34579: LD_VAR 0 1
34583: PPUSH
34584: CALL_OW 266
34588: ST_TO_ADDR
// if btype = b_armoury then
34589: LD_VAR 0 5
34593: PUSH
34594: LD_INT 4
34596: EQUAL
34597: IFFALSE 34607
// btype := b_barracks ;
34599: LD_ADDR_VAR 0 5
34603: PUSH
34604: LD_INT 5
34606: ST_TO_ADDR
// if btype = b_depot then
34607: LD_VAR 0 5
34611: PUSH
34612: LD_INT 0
34614: EQUAL
34615: IFFALSE 34625
// btype := b_warehouse ;
34617: LD_ADDR_VAR 0 5
34621: PUSH
34622: LD_INT 1
34624: ST_TO_ADDR
// if btype = b_workshop then
34625: LD_VAR 0 5
34629: PUSH
34630: LD_INT 2
34632: EQUAL
34633: IFFALSE 34643
// btype := b_factory ;
34635: LD_ADDR_VAR 0 5
34639: PUSH
34640: LD_INT 3
34642: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34643: LD_ADDR_VAR 0 4
34647: PUSH
34648: LD_VAR 0 5
34652: PPUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 248
34662: PPUSH
34663: CALL_OW 450
34667: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34668: LD_ADDR_VAR 0 2
34672: PUSH
34673: LD_VAR 0 3
34677: PPUSH
34678: LD_INT 1
34680: PPUSH
34681: CALL_OW 275
34685: PUSH
34686: LD_VAR 0 4
34690: PUSH
34691: LD_INT 1
34693: ARRAY
34694: GREATEREQUAL
34695: PUSH
34696: LD_VAR 0 3
34700: PPUSH
34701: LD_INT 2
34703: PPUSH
34704: CALL_OW 275
34708: PUSH
34709: LD_VAR 0 4
34713: PUSH
34714: LD_INT 2
34716: ARRAY
34717: GREATEREQUAL
34718: AND
34719: PUSH
34720: LD_VAR 0 3
34724: PPUSH
34725: LD_INT 3
34727: PPUSH
34728: CALL_OW 275
34732: PUSH
34733: LD_VAR 0 4
34737: PUSH
34738: LD_INT 3
34740: ARRAY
34741: GREATEREQUAL
34742: AND
34743: ST_TO_ADDR
// end ;
34744: LD_VAR 0 2
34748: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34749: LD_INT 0
34751: PPUSH
34752: PPUSH
34753: PPUSH
// pom := GetBase ( building ) ;
34754: LD_ADDR_VAR 0 4
34758: PUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 274
34768: ST_TO_ADDR
// if not pom then
34769: LD_VAR 0 4
34773: NOT
34774: IFFALSE 34778
// exit ;
34776: GO 34879
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34778: LD_ADDR_VAR 0 5
34782: PUSH
34783: LD_VAR 0 2
34787: PPUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 248
34797: PPUSH
34798: CALL_OW 450
34802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_VAR 0 4
34812: PPUSH
34813: LD_INT 1
34815: PPUSH
34816: CALL_OW 275
34820: PUSH
34821: LD_VAR 0 5
34825: PUSH
34826: LD_INT 1
34828: ARRAY
34829: GREATEREQUAL
34830: PUSH
34831: LD_VAR 0 4
34835: PPUSH
34836: LD_INT 2
34838: PPUSH
34839: CALL_OW 275
34843: PUSH
34844: LD_VAR 0 5
34848: PUSH
34849: LD_INT 2
34851: ARRAY
34852: GREATEREQUAL
34853: AND
34854: PUSH
34855: LD_VAR 0 4
34859: PPUSH
34860: LD_INT 3
34862: PPUSH
34863: CALL_OW 275
34867: PUSH
34868: LD_VAR 0 5
34872: PUSH
34873: LD_INT 3
34875: ARRAY
34876: GREATEREQUAL
34877: AND
34878: ST_TO_ADDR
// end ;
34879: LD_VAR 0 3
34883: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
34884: LD_INT 0
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
34893: PPUSH
34894: PPUSH
34895: PPUSH
// result := false ;
34896: LD_ADDR_VAR 0 6
34900: PUSH
34901: LD_INT 0
34903: ST_TO_ADDR
// if not base or not btype or not x or not y then
34904: LD_VAR 0 1
34908: NOT
34909: PUSH
34910: LD_VAR 0 2
34914: NOT
34915: OR
34916: PUSH
34917: LD_VAR 0 3
34921: NOT
34922: OR
34923: PUSH
34924: LD_VAR 0 4
34928: NOT
34929: OR
34930: IFFALSE 34934
// exit ;
34932: GO 35543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
34934: LD_ADDR_VAR 0 12
34938: PUSH
34939: LD_VAR 0 2
34943: PPUSH
34944: LD_VAR 0 3
34948: PPUSH
34949: LD_VAR 0 4
34953: PPUSH
34954: LD_VAR 0 5
34958: PPUSH
34959: LD_VAR 0 1
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: PPUSH
34968: CALL_OW 248
34972: PPUSH
34973: LD_INT 0
34975: PPUSH
34976: CALL 36380 0 6
34980: ST_TO_ADDR
// if not hexes then
34981: LD_VAR 0 12
34985: NOT
34986: IFFALSE 34990
// exit ;
34988: GO 35543
// for i = 1 to hexes do
34990: LD_ADDR_VAR 0 7
34994: PUSH
34995: DOUBLE
34996: LD_INT 1
34998: DEC
34999: ST_TO_ADDR
35000: LD_VAR 0 12
35004: PUSH
35005: FOR_TO
35006: IFFALSE 35541
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35008: LD_ADDR_VAR 0 11
35012: PUSH
35013: LD_VAR 0 12
35017: PUSH
35018: LD_VAR 0 7
35022: ARRAY
35023: PUSH
35024: LD_INT 1
35026: ARRAY
35027: PPUSH
35028: LD_VAR 0 12
35032: PUSH
35033: LD_VAR 0 7
35037: ARRAY
35038: PUSH
35039: LD_INT 2
35041: ARRAY
35042: PPUSH
35043: CALL_OW 428
35047: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35048: LD_VAR 0 12
35052: PUSH
35053: LD_VAR 0 7
35057: ARRAY
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: PPUSH
35063: LD_VAR 0 12
35067: PUSH
35068: LD_VAR 0 7
35072: ARRAY
35073: PUSH
35074: LD_INT 2
35076: ARRAY
35077: PPUSH
35078: CALL_OW 351
35082: PUSH
35083: LD_VAR 0 12
35087: PUSH
35088: LD_VAR 0 7
35092: ARRAY
35093: PUSH
35094: LD_INT 1
35096: ARRAY
35097: PPUSH
35098: LD_VAR 0 12
35102: PUSH
35103: LD_VAR 0 7
35107: ARRAY
35108: PUSH
35109: LD_INT 2
35111: ARRAY
35112: PPUSH
35113: CALL_OW 488
35117: NOT
35118: OR
35119: PUSH
35120: LD_VAR 0 11
35124: PPUSH
35125: CALL_OW 247
35129: PUSH
35130: LD_INT 3
35132: EQUAL
35133: OR
35134: IFFALSE 35140
// exit ;
35136: POP
35137: POP
35138: GO 35543
// if not tmp or not tmp in base then
35140: LD_VAR 0 11
35144: NOT
35145: PUSH
35146: LD_VAR 0 11
35150: PUSH
35151: LD_VAR 0 1
35155: IN
35156: NOT
35157: OR
35158: IFFALSE 35162
// continue ;
35160: GO 35005
// result := true ;
35162: LD_ADDR_VAR 0 6
35166: PUSH
35167: LD_INT 1
35169: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35170: LD_ADDR_VAR 0 15
35174: PUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: LD_INT 22
35182: PUSH
35183: LD_VAR 0 11
35187: PPUSH
35188: CALL_OW 255
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: LD_INT 30
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 30
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PPUSH
35229: CALL_OW 72
35233: ST_TO_ADDR
// if dep then
35234: LD_VAR 0 15
35238: IFFALSE 35374
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35240: LD_ADDR_VAR 0 14
35244: PUSH
35245: LD_VAR 0 15
35249: PUSH
35250: LD_INT 1
35252: ARRAY
35253: PPUSH
35254: CALL_OW 250
35258: PPUSH
35259: LD_VAR 0 15
35263: PUSH
35264: LD_INT 1
35266: ARRAY
35267: PPUSH
35268: CALL_OW 254
35272: PPUSH
35273: LD_INT 5
35275: PPUSH
35276: CALL_OW 272
35280: PUSH
35281: LD_VAR 0 15
35285: PUSH
35286: LD_INT 1
35288: ARRAY
35289: PPUSH
35290: CALL_OW 251
35294: PPUSH
35295: LD_VAR 0 15
35299: PUSH
35300: LD_INT 1
35302: ARRAY
35303: PPUSH
35304: CALL_OW 254
35308: PPUSH
35309: LD_INT 5
35311: PPUSH
35312: CALL_OW 273
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35321: LD_VAR 0 14
35325: PUSH
35326: LD_INT 1
35328: ARRAY
35329: PPUSH
35330: LD_VAR 0 14
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: PPUSH
35339: CALL_OW 488
35343: IFFALSE 35374
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35345: LD_VAR 0 11
35349: PPUSH
35350: LD_VAR 0 14
35354: PUSH
35355: LD_INT 1
35357: ARRAY
35358: PPUSH
35359: LD_VAR 0 14
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: PPUSH
35368: CALL_OW 111
// continue ;
35372: GO 35005
// end ; end ; r := GetDir ( tmp ) ;
35374: LD_ADDR_VAR 0 13
35378: PUSH
35379: LD_VAR 0 11
35383: PPUSH
35384: CALL_OW 254
35388: ST_TO_ADDR
// if r = 5 then
35389: LD_VAR 0 13
35393: PUSH
35394: LD_INT 5
35396: EQUAL
35397: IFFALSE 35407
// r := 0 ;
35399: LD_ADDR_VAR 0 13
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// for j = r to 5 do
35407: LD_ADDR_VAR 0 8
35411: PUSH
35412: DOUBLE
35413: LD_VAR 0 13
35417: DEC
35418: ST_TO_ADDR
35419: LD_INT 5
35421: PUSH
35422: FOR_TO
35423: IFFALSE 35537
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35425: LD_ADDR_VAR 0 9
35429: PUSH
35430: LD_VAR 0 11
35434: PPUSH
35435: CALL_OW 250
35439: PPUSH
35440: LD_VAR 0 8
35444: PPUSH
35445: LD_INT 2
35447: PPUSH
35448: CALL_OW 272
35452: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35453: LD_ADDR_VAR 0 10
35457: PUSH
35458: LD_VAR 0 11
35462: PPUSH
35463: CALL_OW 251
35467: PPUSH
35468: LD_VAR 0 8
35472: PPUSH
35473: LD_INT 2
35475: PPUSH
35476: CALL_OW 273
35480: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35481: LD_VAR 0 9
35485: PPUSH
35486: LD_VAR 0 10
35490: PPUSH
35491: CALL_OW 488
35495: PUSH
35496: LD_VAR 0 9
35500: PPUSH
35501: LD_VAR 0 10
35505: PPUSH
35506: CALL_OW 428
35510: NOT
35511: AND
35512: IFFALSE 35535
// begin ComMoveXY ( tmp , _x , _y ) ;
35514: LD_VAR 0 11
35518: PPUSH
35519: LD_VAR 0 9
35523: PPUSH
35524: LD_VAR 0 10
35528: PPUSH
35529: CALL_OW 111
// break ;
35533: GO 35537
// end ; end ;
35535: GO 35422
35537: POP
35538: POP
// end ;
35539: GO 35005
35541: POP
35542: POP
// end ;
35543: LD_VAR 0 6
35547: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35548: LD_INT 0
35550: PPUSH
35551: PPUSH
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
// result := false ;
35560: LD_ADDR_VAR 0 6
35564: PUSH
35565: LD_INT 0
35567: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35568: LD_VAR 0 1
35572: NOT
35573: PUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: CALL_OW 266
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: IN
35594: NOT
35595: OR
35596: PUSH
35597: LD_VAR 0 2
35601: NOT
35602: OR
35603: PUSH
35604: LD_VAR 0 5
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 2
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: LD_INT 4
35623: PUSH
35624: LD_INT 5
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: IN
35635: NOT
35636: OR
35637: PUSH
35638: LD_VAR 0 3
35642: PPUSH
35643: LD_VAR 0 4
35647: PPUSH
35648: CALL_OW 488
35652: NOT
35653: OR
35654: IFFALSE 35658
// exit ;
35656: GO 36375
// pom := GetBase ( depot ) ;
35658: LD_ADDR_VAR 0 10
35662: PUSH
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL_OW 274
35672: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35673: LD_ADDR_VAR 0 11
35677: PUSH
35678: LD_VAR 0 2
35682: PPUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 248
35692: PPUSH
35693: CALL_OW 450
35697: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35698: LD_VAR 0 10
35702: PPUSH
35703: LD_INT 1
35705: PPUSH
35706: CALL_OW 275
35710: PUSH
35711: LD_VAR 0 11
35715: PUSH
35716: LD_INT 1
35718: ARRAY
35719: GREATEREQUAL
35720: PUSH
35721: LD_VAR 0 10
35725: PPUSH
35726: LD_INT 2
35728: PPUSH
35729: CALL_OW 275
35733: PUSH
35734: LD_VAR 0 11
35738: PUSH
35739: LD_INT 2
35741: ARRAY
35742: GREATEREQUAL
35743: AND
35744: PUSH
35745: LD_VAR 0 10
35749: PPUSH
35750: LD_INT 3
35752: PPUSH
35753: CALL_OW 275
35757: PUSH
35758: LD_VAR 0 11
35762: PUSH
35763: LD_INT 3
35765: ARRAY
35766: GREATEREQUAL
35767: AND
35768: NOT
35769: IFFALSE 35773
// exit ;
35771: GO 36375
// if GetBType ( depot ) = b_depot then
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 266
35782: PUSH
35783: LD_INT 0
35785: EQUAL
35786: IFFALSE 35798
// dist := 28 else
35788: LD_ADDR_VAR 0 14
35792: PUSH
35793: LD_INT 28
35795: ST_TO_ADDR
35796: GO 35806
// dist := 36 ;
35798: LD_ADDR_VAR 0 14
35802: PUSH
35803: LD_INT 36
35805: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_VAR 0 3
35815: PPUSH
35816: LD_VAR 0 4
35820: PPUSH
35821: CALL_OW 297
35825: PUSH
35826: LD_VAR 0 14
35830: GREATER
35831: IFFALSE 35835
// exit ;
35833: GO 36375
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35835: LD_ADDR_VAR 0 12
35839: PUSH
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_VAR 0 3
35849: PPUSH
35850: LD_VAR 0 4
35854: PPUSH
35855: LD_VAR 0 5
35859: PPUSH
35860: LD_VAR 0 1
35864: PPUSH
35865: CALL_OW 248
35869: PPUSH
35870: LD_INT 0
35872: PPUSH
35873: CALL 36380 0 6
35877: ST_TO_ADDR
// if not hexes then
35878: LD_VAR 0 12
35882: NOT
35883: IFFALSE 35887
// exit ;
35885: GO 36375
// hex := GetHexInfo ( x , y ) ;
35887: LD_ADDR_VAR 0 15
35891: PUSH
35892: LD_VAR 0 3
35896: PPUSH
35897: LD_VAR 0 4
35901: PPUSH
35902: CALL_OW 546
35906: ST_TO_ADDR
// if hex [ 1 ] then
35907: LD_VAR 0 15
35911: PUSH
35912: LD_INT 1
35914: ARRAY
35915: IFFALSE 35919
// exit ;
35917: GO 36375
// height := hex [ 2 ] ;
35919: LD_ADDR_VAR 0 13
35923: PUSH
35924: LD_VAR 0 15
35928: PUSH
35929: LD_INT 2
35931: ARRAY
35932: ST_TO_ADDR
// for i = 1 to hexes do
35933: LD_ADDR_VAR 0 7
35937: PUSH
35938: DOUBLE
35939: LD_INT 1
35941: DEC
35942: ST_TO_ADDR
35943: LD_VAR 0 12
35947: PUSH
35948: FOR_TO
35949: IFFALSE 36279
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35951: LD_VAR 0 12
35955: PUSH
35956: LD_VAR 0 7
35960: ARRAY
35961: PUSH
35962: LD_INT 1
35964: ARRAY
35965: PPUSH
35966: LD_VAR 0 12
35970: PUSH
35971: LD_VAR 0 7
35975: ARRAY
35976: PUSH
35977: LD_INT 2
35979: ARRAY
35980: PPUSH
35981: CALL_OW 488
35985: NOT
35986: PUSH
35987: LD_VAR 0 12
35991: PUSH
35992: LD_VAR 0 7
35996: ARRAY
35997: PUSH
35998: LD_INT 1
36000: ARRAY
36001: PPUSH
36002: LD_VAR 0 12
36006: PUSH
36007: LD_VAR 0 7
36011: ARRAY
36012: PUSH
36013: LD_INT 2
36015: ARRAY
36016: PPUSH
36017: CALL_OW 428
36021: PUSH
36022: LD_INT 0
36024: GREATER
36025: OR
36026: PUSH
36027: LD_VAR 0 12
36031: PUSH
36032: LD_VAR 0 7
36036: ARRAY
36037: PUSH
36038: LD_INT 1
36040: ARRAY
36041: PPUSH
36042: LD_VAR 0 12
36046: PUSH
36047: LD_VAR 0 7
36051: ARRAY
36052: PUSH
36053: LD_INT 2
36055: ARRAY
36056: PPUSH
36057: CALL_OW 351
36061: OR
36062: IFFALSE 36068
// exit ;
36064: POP
36065: POP
36066: GO 36375
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36068: LD_ADDR_VAR 0 8
36072: PUSH
36073: LD_VAR 0 12
36077: PUSH
36078: LD_VAR 0 7
36082: ARRAY
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: PPUSH
36088: LD_VAR 0 12
36092: PUSH
36093: LD_VAR 0 7
36097: ARRAY
36098: PUSH
36099: LD_INT 2
36101: ARRAY
36102: PPUSH
36103: CALL_OW 546
36107: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36108: LD_VAR 0 8
36112: PUSH
36113: LD_INT 1
36115: ARRAY
36116: PUSH
36117: LD_VAR 0 8
36121: PUSH
36122: LD_INT 2
36124: ARRAY
36125: PUSH
36126: LD_VAR 0 13
36130: PUSH
36131: LD_INT 2
36133: PLUS
36134: GREATER
36135: OR
36136: PUSH
36137: LD_VAR 0 8
36141: PUSH
36142: LD_INT 2
36144: ARRAY
36145: PUSH
36146: LD_VAR 0 13
36150: PUSH
36151: LD_INT 2
36153: MINUS
36154: LESS
36155: OR
36156: PUSH
36157: LD_VAR 0 8
36161: PUSH
36162: LD_INT 3
36164: ARRAY
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 8
36171: PUSH
36172: LD_INT 9
36174: PUSH
36175: LD_INT 10
36177: PUSH
36178: LD_INT 11
36180: PUSH
36181: LD_INT 12
36183: PUSH
36184: LD_INT 13
36186: PUSH
36187: LD_INT 16
36189: PUSH
36190: LD_INT 17
36192: PUSH
36193: LD_INT 18
36195: PUSH
36196: LD_INT 19
36198: PUSH
36199: LD_INT 20
36201: PUSH
36202: LD_INT 21
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: IN
36220: NOT
36221: OR
36222: PUSH
36223: LD_VAR 0 8
36227: PUSH
36228: LD_INT 5
36230: ARRAY
36231: NOT
36232: OR
36233: PUSH
36234: LD_VAR 0 8
36238: PUSH
36239: LD_INT 6
36241: ARRAY
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 7
36251: PUSH
36252: LD_INT 9
36254: PUSH
36255: LD_INT 10
36257: PUSH
36258: LD_INT 11
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: IN
36269: NOT
36270: OR
36271: IFFALSE 36277
// exit ;
36273: POP
36274: POP
36275: GO 36375
// end ;
36277: GO 35948
36279: POP
36280: POP
// side := GetSide ( depot ) ;
36281: LD_ADDR_VAR 0 9
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 255
36295: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36296: LD_VAR 0 9
36300: PPUSH
36301: LD_VAR 0 3
36305: PPUSH
36306: LD_VAR 0 4
36310: PPUSH
36311: LD_INT 20
36313: PPUSH
36314: CALL 29029 0 4
36318: PUSH
36319: LD_INT 4
36321: ARRAY
36322: IFFALSE 36326
// exit ;
36324: GO 36375
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36326: LD_VAR 0 2
36330: PUSH
36331: LD_INT 29
36333: PUSH
36334: LD_INT 30
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: IN
36341: PUSH
36342: LD_VAR 0 3
36346: PPUSH
36347: LD_VAR 0 4
36351: PPUSH
36352: LD_VAR 0 9
36356: PPUSH
36357: CALL_OW 440
36361: NOT
36362: AND
36363: IFFALSE 36367
// exit ;
36365: GO 36375
// result := true ;
36367: LD_ADDR_VAR 0 6
36371: PUSH
36372: LD_INT 1
36374: ST_TO_ADDR
// end ;
36375: LD_VAR 0 6
36379: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
36380: LD_INT 0
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
// result = [ ] ;
36440: LD_ADDR_VAR 0 7
36444: PUSH
36445: EMPTY
36446: ST_TO_ADDR
// temp_list = [ ] ;
36447: LD_ADDR_VAR 0 9
36451: PUSH
36452: EMPTY
36453: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36454: LD_VAR 0 4
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: LD_INT 4
36473: PUSH
36474: LD_INT 5
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: IN
36485: NOT
36486: PUSH
36487: LD_VAR 0 1
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: IN
36502: PUSH
36503: LD_VAR 0 5
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: IN
36522: NOT
36523: AND
36524: OR
36525: IFFALSE 36529
// exit ;
36527: GO 54920
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36529: LD_VAR 0 1
36533: PUSH
36534: LD_INT 6
36536: PUSH
36537: LD_INT 7
36539: PUSH
36540: LD_INT 8
36542: PUSH
36543: LD_INT 13
36545: PUSH
36546: LD_INT 12
36548: PUSH
36549: LD_INT 15
36551: PUSH
36552: LD_INT 11
36554: PUSH
36555: LD_INT 14
36557: PUSH
36558: LD_INT 10
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: IN
36572: IFFALSE 36582
// btype = b_lab ;
36574: LD_ADDR_VAR 0 1
36578: PUSH
36579: LD_INT 6
36581: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36582: LD_VAR 0 6
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 2
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: IN
36601: NOT
36602: PUSH
36603: LD_VAR 0 1
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 3
36619: PUSH
36620: LD_INT 6
36622: PUSH
36623: LD_INT 36
36625: PUSH
36626: LD_INT 4
36628: PUSH
36629: LD_INT 5
36631: PUSH
36632: LD_INT 31
36634: PUSH
36635: LD_INT 32
36637: PUSH
36638: LD_INT 33
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: IN
36654: NOT
36655: PUSH
36656: LD_VAR 0 6
36660: PUSH
36661: LD_INT 1
36663: EQUAL
36664: AND
36665: OR
36666: PUSH
36667: LD_VAR 0 1
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: IN
36682: NOT
36683: PUSH
36684: LD_VAR 0 6
36688: PUSH
36689: LD_INT 2
36691: EQUAL
36692: AND
36693: OR
36694: IFFALSE 36704
// mode = 0 ;
36696: LD_ADDR_VAR 0 6
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
// case mode of 0 :
36704: LD_VAR 0 6
36708: PUSH
36709: LD_INT 0
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 48170
36717: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36718: LD_ADDR_VAR 0 11
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 3
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 3
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36911: LD_ADDR_VAR 0 12
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 3
37068: NEG
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37107: LD_ADDR_VAR 0 13
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 3
37266: NEG
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 3
37278: NEG
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37306: LD_ADDR_VAR 0 14
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 3
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 3
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37502: LD_ADDR_VAR 0 15
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 2
37625: NEG
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37695: LD_ADDR_VAR 0 16
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 3
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37888: LD_ADDR_VAR 0 17
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38118: LD_ADDR_VAR 0 18
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38348: LD_ADDR_VAR 0 19
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38578: LD_ADDR_VAR 0 20
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38808: LD_ADDR_VAR 0 21
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39038: LD_ADDR_VAR 0 22
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39268: LD_ADDR_VAR 0 23
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 3
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 3
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39548: LD_ADDR_VAR 0 24
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 3
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39824: LD_ADDR_VAR 0 25
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 3
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40098: LD_ADDR_VAR 0 26
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 3
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40374: LD_ADDR_VAR 0 27
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 2
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 3
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: NEG
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40654: LD_ADDR_VAR 0 28
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 3
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 3
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 3
40889: NEG
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 3
40901: NEG
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40936: LD_ADDR_VAR 0 29
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 2
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 3
41180: NEG
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41215: LD_ADDR_VAR 0 30
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 3
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41493: LD_ADDR_VAR 0 31
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 3
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41771: LD_ADDR_VAR 0 32
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 3
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 3
42014: NEG
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42049: LD_ADDR_VAR 0 33
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: LD_INT 3
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42328: LD_ADDR_VAR 0 34
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 3
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 3
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42608: LD_ADDR_VAR 0 35
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42720: LD_ADDR_VAR 0 36
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42832: LD_ADDR_VAR 0 37
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42944: LD_ADDR_VAR 0 38
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43056: LD_ADDR_VAR 0 39
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43168: LD_ADDR_VAR 0 40
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43280: LD_ADDR_VAR 0 41
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 3
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: LD_INT 3
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43630: LD_ADDR_VAR 0 42
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 3
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: LD_INT 3
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43980: LD_ADDR_VAR 0 43
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 3
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 3
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: NEG
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44328: LD_ADDR_VAR 0 44
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 3
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 3
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44678: LD_ADDR_VAR 0 45
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 3
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 3
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 3
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 3
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 3
44987: NEG
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45028: LD_ADDR_VAR 0 46
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 3
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 3
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45376: LD_ADDR_VAR 0 47
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45527: LD_ADDR_VAR 0 48
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45674: LD_ADDR_VAR 0 49
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45818: LD_ADDR_VAR 0 50
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45962: LD_ADDR_VAR 0 51
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46109: LD_ADDR_VAR 0 52
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46260: LD_ADDR_VAR 0 53
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46490: LD_ADDR_VAR 0 54
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 55
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46950: LD_ADDR_VAR 0 56
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47180: LD_ADDR_VAR 0 57
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47410: LD_ADDR_VAR 0 58
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47640: LD_ADDR_VAR 0 59
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47728: LD_ADDR_VAR 0 60
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47816: LD_ADDR_VAR 0 61
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47904: LD_ADDR_VAR 0 62
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47992: LD_ADDR_VAR 0 63
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48080: LD_ADDR_VAR 0 64
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: ST_TO_ADDR
// end ; 1 :
48168: GO 54065
48170: LD_INT 1
48172: DOUBLE
48173: EQUAL
48174: IFTRUE 48178
48176: GO 50801
48178: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48179: LD_ADDR_VAR 0 11
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 3
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48223: LD_ADDR_VAR 0 12
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48264: LD_ADDR_VAR 0 13
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 3
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48304: LD_ADDR_VAR 0 14
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 3
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48345: LD_ADDR_VAR 0 15
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48389: LD_ADDR_VAR 0 16
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48435: LD_ADDR_VAR 0 17
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 3
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48479: LD_ADDR_VAR 0 18
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48520: LD_ADDR_VAR 0 19
48524: PUSH
48525: LD_INT 3
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48560: LD_ADDR_VAR 0 20
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48601: LD_ADDR_VAR 0 21
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48645: LD_ADDR_VAR 0 22
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48691: LD_ADDR_VAR 0 23
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 4
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48735: LD_ADDR_VAR 0 24
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 4
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48776: LD_ADDR_VAR 0 25
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 4
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 4
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48816: LD_ADDR_VAR 0 26
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 4
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48857: LD_ADDR_VAR 0 27
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: NEG
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 4
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48901: LD_ADDR_VAR 0 28
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: LD_INT 4
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 4
48932: NEG
48933: PUSH
48934: LD_INT 3
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48947: LD_ADDR_VAR 0 29
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 4
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 4
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 5
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 5
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 4
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 6
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 6
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 5
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49102: LD_ADDR_VAR 0 30
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 3
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 3
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 4
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 4
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 4
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 5
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 5
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 5
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 6
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 6
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49245: LD_ADDR_VAR 0 31
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: LD_INT 3
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 4
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 4
49292: PUSH
49293: LD_INT 4
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: LD_INT 4
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 5
49312: PUSH
49313: LD_INT 4
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 5
49322: PUSH
49323: LD_INT 5
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 4
49332: PUSH
49333: LD_INT 5
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 6
49342: PUSH
49343: LD_INT 5
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 6
49352: PUSH
49353: LD_INT 6
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 5
49362: PUSH
49363: LD_INT 6
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49384: LD_ADDR_VAR 0 32
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 4
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 4
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 5
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 5
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 6
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 6
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 5
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49527: LD_ADDR_VAR 0 33
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 4
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 4
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 4
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 5
49613: NEG
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 5
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 5
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 6
49647: NEG
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 6
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49682: LD_ADDR_VAR 0 34
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: LD_INT 4
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 4
49737: NEG
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 4
49749: NEG
49750: PUSH
49751: LD_INT 4
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 4
49761: NEG
49762: PUSH
49763: LD_INT 5
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 5
49773: NEG
49774: PUSH
49775: LD_INT 4
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 5
49785: NEG
49786: PUSH
49787: LD_INT 5
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 5
49797: NEG
49798: PUSH
49799: LD_INT 6
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 6
49809: NEG
49810: PUSH
49811: LD_INT 5
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 6
49821: NEG
49822: PUSH
49823: LD_INT 6
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49845: LD_ADDR_VAR 0 41
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49889: LD_ADDR_VAR 0 42
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49930: LD_ADDR_VAR 0 43
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49970: LD_ADDR_VAR 0 44
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 3
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50011: LD_ADDR_VAR 0 45
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50055: LD_ADDR_VAR 0 46
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50101: LD_ADDR_VAR 0 47
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50134: LD_ADDR_VAR 0 48
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50165: LD_ADDR_VAR 0 49
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50194: LD_ADDR_VAR 0 50
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50223: LD_ADDR_VAR 0 51
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50254: LD_ADDR_VAR 0 52
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50287: LD_ADDR_VAR 0 53
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 3
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50331: LD_ADDR_VAR 0 54
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50372: LD_ADDR_VAR 0 55
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50412: LD_ADDR_VAR 0 56
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50453: LD_ADDR_VAR 0 57
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50497: LD_ADDR_VAR 0 58
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: LD_INT 3
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50543: LD_ADDR_VAR 0 59
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50587: LD_ADDR_VAR 0 60
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50628: LD_ADDR_VAR 0 61
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50668: LD_ADDR_VAR 0 62
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: LIST
50708: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50709: LD_ADDR_VAR 0 63
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50753: LD_ADDR_VAR 0 64
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// end ; 2 :
50799: GO 54065
50801: LD_INT 2
50803: DOUBLE
50804: EQUAL
50805: IFTRUE 50809
50807: GO 54064
50809: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50810: LD_ADDR_VAR 0 29
50814: PUSH
50815: LD_INT 4
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 5
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 5
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 4
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 4
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 4
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: LD_INT 4
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 4
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 4
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 4
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 5
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 5
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 4
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 5
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 4
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 4
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 4
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 4
51195: NEG
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: LD_INT 5
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: LD_INT 4
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 3
51231: NEG
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 4
51243: NEG
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 5
51255: NEG
51256: PUSH
51257: LD_INT 4
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 5
51267: NEG
51268: PUSH
51269: LD_INT 5
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 5
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 5
51291: NEG
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51348: LD_ADDR_VAR 0 30
51352: PUSH
51353: LD_INT 4
51355: PUSH
51356: LD_INT 4
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 4
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 5
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 5
51385: PUSH
51386: LD_INT 5
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 4
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: LD_INT 4
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: LD_INT 3
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 5
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: LD_INT 5
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 4
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 4
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 4
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 4
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 4
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 5
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 5
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 5
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 4
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: NEG
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 4
51712: NEG
51713: PUSH
51714: LD_INT 4
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: LD_INT 4
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 4
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 4
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 5
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 4
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 4
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 5
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 5
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51895: LD_ADDR_VAR 0 31
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 4
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 5
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 5
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 4
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 5
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 4
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 4
52097: NEG
52098: PUSH
52099: LD_INT 4
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: LD_INT 5
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 4
52145: NEG
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 5
52157: NEG
52158: PUSH
52159: LD_INT 4
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 5
52169: NEG
52170: PUSH
52171: LD_INT 5
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: LD_INT 5
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 5
52193: NEG
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 4
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 3
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 4
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 4
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 5
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 5
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52445: LD_ADDR_VAR 0 32
52449: PUSH
52450: LD_INT 4
52452: NEG
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 4
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 4
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 5
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 5
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: LD_INT 4
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 4
52614: NEG
52615: PUSH
52616: LD_INT 3
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 4
52626: NEG
52627: PUSH
52628: LD_INT 4
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: LD_INT 4
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 4
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 4
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 5
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 4
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 3
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 4
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 5
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 3
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 5
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 4
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 4
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 4
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 4
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 4
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 5
52877: PUSH
52878: LD_INT 4
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 5
52887: PUSH
52888: LD_INT 5
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 4
52897: PUSH
52898: LD_INT 5
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 5
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: LD_INT 5
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52992: LD_ADDR_VAR 0 33
52996: PUSH
52997: LD_INT 4
52999: NEG
53000: PUSH
53001: LD_INT 4
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 4
53011: NEG
53012: PUSH
53013: LD_INT 5
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: LD_INT 4
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 4
53047: NEG
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 5
53059: NEG
53060: PUSH
53061: LD_INT 4
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 5
53071: NEG
53072: PUSH
53073: LD_INT 5
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: LD_INT 5
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 5
53095: NEG
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 4
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 4
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 4
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 4
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 5
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 5
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 4
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 5
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 4
53332: PUSH
53333: LD_INT 4
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: LD_INT 4
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 4
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 4
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 4
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 5
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 5
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 4
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: LD_INT 5
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53530: LD_ADDR_VAR 0 34
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 4
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 5
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 4
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 5
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 5
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 4
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 4
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: LD_INT 4
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 5
53752: PUSH
53753: LD_INT 4
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 5
53762: PUSH
53763: LD_INT 5
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 4
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 5
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 4
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 4
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 4
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 5
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 5
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 5
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: ST_TO_ADDR
// end ; end ;
54062: GO 54065
54064: POP
// case btype of b_depot , b_warehouse :
54065: LD_VAR 0 1
54069: PUSH
54070: LD_INT 0
54072: DOUBLE
54073: EQUAL
54074: IFTRUE 54084
54076: LD_INT 1
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54285
54084: POP
// case nation of nation_american :
54085: LD_VAR 0 5
54089: PUSH
54090: LD_INT 1
54092: DOUBLE
54093: EQUAL
54094: IFTRUE 54098
54096: GO 54154
54098: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54099: LD_ADDR_VAR 0 9
54103: PUSH
54104: LD_VAR 0 11
54108: PUSH
54109: LD_VAR 0 12
54113: PUSH
54114: LD_VAR 0 13
54118: PUSH
54119: LD_VAR 0 14
54123: PUSH
54124: LD_VAR 0 15
54128: PUSH
54129: LD_VAR 0 16
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: PUSH
54142: LD_VAR 0 4
54146: PUSH
54147: LD_INT 1
54149: PLUS
54150: ARRAY
54151: ST_TO_ADDR
54152: GO 54283
54154: LD_INT 2
54156: DOUBLE
54157: EQUAL
54158: IFTRUE 54162
54160: GO 54218
54162: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
54163: LD_ADDR_VAR 0 9
54167: PUSH
54168: LD_VAR 0 17
54172: PUSH
54173: LD_VAR 0 18
54177: PUSH
54178: LD_VAR 0 19
54182: PUSH
54183: LD_VAR 0 20
54187: PUSH
54188: LD_VAR 0 21
54192: PUSH
54193: LD_VAR 0 22
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: PUSH
54206: LD_VAR 0 4
54210: PUSH
54211: LD_INT 1
54213: PLUS
54214: ARRAY
54215: ST_TO_ADDR
54216: GO 54283
54218: LD_INT 3
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54226
54224: GO 54282
54226: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54227: LD_ADDR_VAR 0 9
54231: PUSH
54232: LD_VAR 0 23
54236: PUSH
54237: LD_VAR 0 24
54241: PUSH
54242: LD_VAR 0 25
54246: PUSH
54247: LD_VAR 0 26
54251: PUSH
54252: LD_VAR 0 27
54256: PUSH
54257: LD_VAR 0 28
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: PUSH
54270: LD_VAR 0 4
54274: PUSH
54275: LD_INT 1
54277: PLUS
54278: ARRAY
54279: ST_TO_ADDR
54280: GO 54283
54282: POP
54283: GO 54838
54285: LD_INT 2
54287: DOUBLE
54288: EQUAL
54289: IFTRUE 54299
54291: LD_INT 3
54293: DOUBLE
54294: EQUAL
54295: IFTRUE 54299
54297: GO 54355
54299: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54300: LD_ADDR_VAR 0 9
54304: PUSH
54305: LD_VAR 0 29
54309: PUSH
54310: LD_VAR 0 30
54314: PUSH
54315: LD_VAR 0 31
54319: PUSH
54320: LD_VAR 0 32
54324: PUSH
54325: LD_VAR 0 33
54329: PUSH
54330: LD_VAR 0 34
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: PUSH
54343: LD_VAR 0 4
54347: PUSH
54348: LD_INT 1
54350: PLUS
54351: ARRAY
54352: ST_TO_ADDR
54353: GO 54838
54355: LD_INT 16
54357: DOUBLE
54358: EQUAL
54359: IFTRUE 54417
54361: LD_INT 17
54363: DOUBLE
54364: EQUAL
54365: IFTRUE 54417
54367: LD_INT 18
54369: DOUBLE
54370: EQUAL
54371: IFTRUE 54417
54373: LD_INT 19
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54417
54379: LD_INT 22
54381: DOUBLE
54382: EQUAL
54383: IFTRUE 54417
54385: LD_INT 20
54387: DOUBLE
54388: EQUAL
54389: IFTRUE 54417
54391: LD_INT 21
54393: DOUBLE
54394: EQUAL
54395: IFTRUE 54417
54397: LD_INT 23
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54417
54403: LD_INT 24
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54417
54409: LD_INT 25
54411: DOUBLE
54412: EQUAL
54413: IFTRUE 54417
54415: GO 54473
54417: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54418: LD_ADDR_VAR 0 9
54422: PUSH
54423: LD_VAR 0 35
54427: PUSH
54428: LD_VAR 0 36
54432: PUSH
54433: LD_VAR 0 37
54437: PUSH
54438: LD_VAR 0 38
54442: PUSH
54443: LD_VAR 0 39
54447: PUSH
54448: LD_VAR 0 40
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: PUSH
54461: LD_VAR 0 4
54465: PUSH
54466: LD_INT 1
54468: PLUS
54469: ARRAY
54470: ST_TO_ADDR
54471: GO 54838
54473: LD_INT 6
54475: DOUBLE
54476: EQUAL
54477: IFTRUE 54529
54479: LD_INT 7
54481: DOUBLE
54482: EQUAL
54483: IFTRUE 54529
54485: LD_INT 8
54487: DOUBLE
54488: EQUAL
54489: IFTRUE 54529
54491: LD_INT 13
54493: DOUBLE
54494: EQUAL
54495: IFTRUE 54529
54497: LD_INT 12
54499: DOUBLE
54500: EQUAL
54501: IFTRUE 54529
54503: LD_INT 15
54505: DOUBLE
54506: EQUAL
54507: IFTRUE 54529
54509: LD_INT 11
54511: DOUBLE
54512: EQUAL
54513: IFTRUE 54529
54515: LD_INT 14
54517: DOUBLE
54518: EQUAL
54519: IFTRUE 54529
54521: LD_INT 10
54523: DOUBLE
54524: EQUAL
54525: IFTRUE 54529
54527: GO 54585
54529: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
54530: LD_ADDR_VAR 0 9
54534: PUSH
54535: LD_VAR 0 41
54539: PUSH
54540: LD_VAR 0 42
54544: PUSH
54545: LD_VAR 0 43
54549: PUSH
54550: LD_VAR 0 44
54554: PUSH
54555: LD_VAR 0 45
54559: PUSH
54560: LD_VAR 0 46
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: PUSH
54573: LD_VAR 0 4
54577: PUSH
54578: LD_INT 1
54580: PLUS
54581: ARRAY
54582: ST_TO_ADDR
54583: GO 54838
54585: LD_INT 36
54587: DOUBLE
54588: EQUAL
54589: IFTRUE 54593
54591: GO 54649
54593: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54594: LD_ADDR_VAR 0 9
54598: PUSH
54599: LD_VAR 0 47
54603: PUSH
54604: LD_VAR 0 48
54608: PUSH
54609: LD_VAR 0 49
54613: PUSH
54614: LD_VAR 0 50
54618: PUSH
54619: LD_VAR 0 51
54623: PUSH
54624: LD_VAR 0 52
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: PUSH
54637: LD_VAR 0 4
54641: PUSH
54642: LD_INT 1
54644: PLUS
54645: ARRAY
54646: ST_TO_ADDR
54647: GO 54838
54649: LD_INT 4
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54675
54655: LD_INT 5
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54675
54661: LD_INT 34
54663: DOUBLE
54664: EQUAL
54665: IFTRUE 54675
54667: LD_INT 37
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54675
54673: GO 54731
54675: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54676: LD_ADDR_VAR 0 9
54680: PUSH
54681: LD_VAR 0 53
54685: PUSH
54686: LD_VAR 0 54
54690: PUSH
54691: LD_VAR 0 55
54695: PUSH
54696: LD_VAR 0 56
54700: PUSH
54701: LD_VAR 0 57
54705: PUSH
54706: LD_VAR 0 58
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: PUSH
54719: LD_VAR 0 4
54723: PUSH
54724: LD_INT 1
54726: PLUS
54727: ARRAY
54728: ST_TO_ADDR
54729: GO 54838
54731: LD_INT 31
54733: DOUBLE
54734: EQUAL
54735: IFTRUE 54781
54737: LD_INT 32
54739: DOUBLE
54740: EQUAL
54741: IFTRUE 54781
54743: LD_INT 33
54745: DOUBLE
54746: EQUAL
54747: IFTRUE 54781
54749: LD_INT 27
54751: DOUBLE
54752: EQUAL
54753: IFTRUE 54781
54755: LD_INT 26
54757: DOUBLE
54758: EQUAL
54759: IFTRUE 54781
54761: LD_INT 28
54763: DOUBLE
54764: EQUAL
54765: IFTRUE 54781
54767: LD_INT 29
54769: DOUBLE
54770: EQUAL
54771: IFTRUE 54781
54773: LD_INT 30
54775: DOUBLE
54776: EQUAL
54777: IFTRUE 54781
54779: GO 54837
54781: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
54782: LD_ADDR_VAR 0 9
54786: PUSH
54787: LD_VAR 0 59
54791: PUSH
54792: LD_VAR 0 60
54796: PUSH
54797: LD_VAR 0 61
54801: PUSH
54802: LD_VAR 0 62
54806: PUSH
54807: LD_VAR 0 63
54811: PUSH
54812: LD_VAR 0 64
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: PUSH
54825: LD_VAR 0 4
54829: PUSH
54830: LD_INT 1
54832: PLUS
54833: ARRAY
54834: ST_TO_ADDR
54835: GO 54838
54837: POP
// temp_list2 = [ ] ;
54838: LD_ADDR_VAR 0 10
54842: PUSH
54843: EMPTY
54844: ST_TO_ADDR
// for i in temp_list do
54845: LD_ADDR_VAR 0 8
54849: PUSH
54850: LD_VAR 0 9
54854: PUSH
54855: FOR_IN
54856: IFFALSE 54908
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54858: LD_ADDR_VAR 0 10
54862: PUSH
54863: LD_VAR 0 10
54867: PUSH
54868: LD_VAR 0 8
54872: PUSH
54873: LD_INT 1
54875: ARRAY
54876: PUSH
54877: LD_VAR 0 2
54881: PLUS
54882: PUSH
54883: LD_VAR 0 8
54887: PUSH
54888: LD_INT 2
54890: ARRAY
54891: PUSH
54892: LD_VAR 0 3
54896: PLUS
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: ADD
54905: ST_TO_ADDR
54906: GO 54855
54908: POP
54909: POP
// result = temp_list2 ;
54910: LD_ADDR_VAR 0 7
54914: PUSH
54915: LD_VAR 0 10
54919: ST_TO_ADDR
// end ;
54920: LD_VAR 0 7
54924: RET
// export function EnemyInRange ( unit , dist ) ; begin
54925: LD_INT 0
54927: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54928: LD_ADDR_VAR 0 3
54932: PUSH
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 255
54942: PPUSH
54943: LD_VAR 0 1
54947: PPUSH
54948: CALL_OW 250
54952: PPUSH
54953: LD_VAR 0 1
54957: PPUSH
54958: CALL_OW 251
54962: PPUSH
54963: LD_VAR 0 2
54967: PPUSH
54968: CALL 29029 0 4
54972: PUSH
54973: LD_INT 4
54975: ARRAY
54976: ST_TO_ADDR
// end ;
54977: LD_VAR 0 3
54981: RET
// export function PlayerSeeMe ( unit ) ; begin
54982: LD_INT 0
54984: PPUSH
// result := See ( your_side , unit ) ;
54985: LD_ADDR_VAR 0 2
54989: PUSH
54990: LD_OWVAR 2
54994: PPUSH
54995: LD_VAR 0 1
54999: PPUSH
55000: CALL_OW 292
55004: ST_TO_ADDR
// end ;
55005: LD_VAR 0 2
55009: RET
// export function ReverseDir ( unit ) ; begin
55010: LD_INT 0
55012: PPUSH
// if not unit then
55013: LD_VAR 0 1
55017: NOT
55018: IFFALSE 55022
// exit ;
55020: GO 55045
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55022: LD_ADDR_VAR 0 2
55026: PUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: CALL_OW 254
55036: PUSH
55037: LD_INT 3
55039: PLUS
55040: PUSH
55041: LD_INT 6
55043: MOD
55044: ST_TO_ADDR
// end ;
55045: LD_VAR 0 2
55049: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55050: LD_INT 0
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
// if not hexes then
55057: LD_VAR 0 2
55061: NOT
55062: IFFALSE 55066
// exit ;
55064: GO 55214
// dist := 9999 ;
55066: LD_ADDR_VAR 0 5
55070: PUSH
55071: LD_INT 9999
55073: ST_TO_ADDR
// for i = 1 to hexes do
55074: LD_ADDR_VAR 0 4
55078: PUSH
55079: DOUBLE
55080: LD_INT 1
55082: DEC
55083: ST_TO_ADDR
55084: LD_VAR 0 2
55088: PUSH
55089: FOR_TO
55090: IFFALSE 55202
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55092: LD_VAR 0 1
55096: PPUSH
55097: LD_VAR 0 2
55101: PUSH
55102: LD_VAR 0 4
55106: ARRAY
55107: PUSH
55108: LD_INT 1
55110: ARRAY
55111: PPUSH
55112: LD_VAR 0 2
55116: PUSH
55117: LD_VAR 0 4
55121: ARRAY
55122: PUSH
55123: LD_INT 2
55125: ARRAY
55126: PPUSH
55127: CALL_OW 297
55131: PUSH
55132: LD_VAR 0 5
55136: LESS
55137: IFFALSE 55200
// begin hex := hexes [ i ] ;
55139: LD_ADDR_VAR 0 7
55143: PUSH
55144: LD_VAR 0 2
55148: PUSH
55149: LD_VAR 0 4
55153: ARRAY
55154: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55155: LD_ADDR_VAR 0 5
55159: PUSH
55160: LD_VAR 0 1
55164: PPUSH
55165: LD_VAR 0 2
55169: PUSH
55170: LD_VAR 0 4
55174: ARRAY
55175: PUSH
55176: LD_INT 1
55178: ARRAY
55179: PPUSH
55180: LD_VAR 0 2
55184: PUSH
55185: LD_VAR 0 4
55189: ARRAY
55190: PUSH
55191: LD_INT 2
55193: ARRAY
55194: PPUSH
55195: CALL_OW 297
55199: ST_TO_ADDR
// end ; end ;
55200: GO 55089
55202: POP
55203: POP
// result := hex ;
55204: LD_ADDR_VAR 0 3
55208: PUSH
55209: LD_VAR 0 7
55213: ST_TO_ADDR
// end ;
55214: LD_VAR 0 3
55218: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55219: LD_INT 0
55221: PPUSH
55222: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55223: LD_VAR 0 1
55227: NOT
55228: PUSH
55229: LD_VAR 0 1
55233: PUSH
55234: LD_INT 21
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 23
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PPUSH
55258: CALL_OW 69
55262: IN
55263: NOT
55264: OR
55265: IFFALSE 55269
// exit ;
55267: GO 55316
// for i = 1 to 3 do
55269: LD_ADDR_VAR 0 3
55273: PUSH
55274: DOUBLE
55275: LD_INT 1
55277: DEC
55278: ST_TO_ADDR
55279: LD_INT 3
55281: PUSH
55282: FOR_TO
55283: IFFALSE 55314
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55285: LD_VAR 0 1
55289: PPUSH
55290: CALL_OW 250
55294: PPUSH
55295: LD_VAR 0 1
55299: PPUSH
55300: CALL_OW 251
55304: PPUSH
55305: LD_INT 1
55307: PPUSH
55308: CALL_OW 453
55312: GO 55282
55314: POP
55315: POP
// end ;
55316: LD_VAR 0 2
55320: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55321: LD_INT 0
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55329: LD_VAR 0 1
55333: NOT
55334: PUSH
55335: LD_VAR 0 2
55339: NOT
55340: OR
55341: PUSH
55342: LD_VAR 0 1
55346: PPUSH
55347: CALL_OW 314
55351: OR
55352: IFFALSE 55356
// exit ;
55354: GO 55797
// x := GetX ( enemy_unit ) ;
55356: LD_ADDR_VAR 0 7
55360: PUSH
55361: LD_VAR 0 2
55365: PPUSH
55366: CALL_OW 250
55370: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55371: LD_ADDR_VAR 0 8
55375: PUSH
55376: LD_VAR 0 2
55380: PPUSH
55381: CALL_OW 251
55385: ST_TO_ADDR
// if not x or not y then
55386: LD_VAR 0 7
55390: NOT
55391: PUSH
55392: LD_VAR 0 8
55396: NOT
55397: OR
55398: IFFALSE 55402
// exit ;
55400: GO 55797
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55402: LD_ADDR_VAR 0 6
55406: PUSH
55407: LD_VAR 0 7
55411: PPUSH
55412: LD_INT 0
55414: PPUSH
55415: LD_INT 4
55417: PPUSH
55418: CALL_OW 272
55422: PUSH
55423: LD_VAR 0 8
55427: PPUSH
55428: LD_INT 0
55430: PPUSH
55431: LD_INT 4
55433: PPUSH
55434: CALL_OW 273
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_VAR 0 7
55447: PPUSH
55448: LD_INT 1
55450: PPUSH
55451: LD_INT 4
55453: PPUSH
55454: CALL_OW 272
55458: PUSH
55459: LD_VAR 0 8
55463: PPUSH
55464: LD_INT 1
55466: PPUSH
55467: LD_INT 4
55469: PPUSH
55470: CALL_OW 273
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_VAR 0 7
55483: PPUSH
55484: LD_INT 2
55486: PPUSH
55487: LD_INT 4
55489: PPUSH
55490: CALL_OW 272
55494: PUSH
55495: LD_VAR 0 8
55499: PPUSH
55500: LD_INT 2
55502: PPUSH
55503: LD_INT 4
55505: PPUSH
55506: CALL_OW 273
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_VAR 0 7
55519: PPUSH
55520: LD_INT 3
55522: PPUSH
55523: LD_INT 4
55525: PPUSH
55526: CALL_OW 272
55530: PUSH
55531: LD_VAR 0 8
55535: PPUSH
55536: LD_INT 3
55538: PPUSH
55539: LD_INT 4
55541: PPUSH
55542: CALL_OW 273
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_VAR 0 7
55555: PPUSH
55556: LD_INT 4
55558: PPUSH
55559: LD_INT 4
55561: PPUSH
55562: CALL_OW 272
55566: PUSH
55567: LD_VAR 0 8
55571: PPUSH
55572: LD_INT 4
55574: PPUSH
55575: LD_INT 4
55577: PPUSH
55578: CALL_OW 273
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_VAR 0 7
55591: PPUSH
55592: LD_INT 5
55594: PPUSH
55595: LD_INT 4
55597: PPUSH
55598: CALL_OW 272
55602: PUSH
55603: LD_VAR 0 8
55607: PPUSH
55608: LD_INT 5
55610: PPUSH
55611: LD_INT 4
55613: PPUSH
55614: CALL_OW 273
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// for i = tmp downto 1 do
55631: LD_ADDR_VAR 0 4
55635: PUSH
55636: DOUBLE
55637: LD_VAR 0 6
55641: INC
55642: ST_TO_ADDR
55643: LD_INT 1
55645: PUSH
55646: FOR_DOWNTO
55647: IFFALSE 55748
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55649: LD_VAR 0 6
55653: PUSH
55654: LD_VAR 0 4
55658: ARRAY
55659: PUSH
55660: LD_INT 1
55662: ARRAY
55663: PPUSH
55664: LD_VAR 0 6
55668: PUSH
55669: LD_VAR 0 4
55673: ARRAY
55674: PUSH
55675: LD_INT 2
55677: ARRAY
55678: PPUSH
55679: CALL_OW 488
55683: NOT
55684: PUSH
55685: LD_VAR 0 6
55689: PUSH
55690: LD_VAR 0 4
55694: ARRAY
55695: PUSH
55696: LD_INT 1
55698: ARRAY
55699: PPUSH
55700: LD_VAR 0 6
55704: PUSH
55705: LD_VAR 0 4
55709: ARRAY
55710: PUSH
55711: LD_INT 2
55713: ARRAY
55714: PPUSH
55715: CALL_OW 428
55719: PUSH
55720: LD_INT 0
55722: NONEQUAL
55723: OR
55724: IFFALSE 55746
// tmp := Delete ( tmp , i ) ;
55726: LD_ADDR_VAR 0 6
55730: PUSH
55731: LD_VAR 0 6
55735: PPUSH
55736: LD_VAR 0 4
55740: PPUSH
55741: CALL_OW 3
55745: ST_TO_ADDR
55746: GO 55646
55748: POP
55749: POP
// j := GetClosestHex ( unit , tmp ) ;
55750: LD_ADDR_VAR 0 5
55754: PUSH
55755: LD_VAR 0 1
55759: PPUSH
55760: LD_VAR 0 6
55764: PPUSH
55765: CALL 55050 0 2
55769: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55770: LD_VAR 0 1
55774: PPUSH
55775: LD_VAR 0 5
55779: PUSH
55780: LD_INT 1
55782: ARRAY
55783: PPUSH
55784: LD_VAR 0 5
55788: PUSH
55789: LD_INT 2
55791: ARRAY
55792: PPUSH
55793: CALL_OW 111
// end ;
55797: LD_VAR 0 3
55801: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55802: LD_INT 0
55804: PPUSH
55805: PPUSH
55806: PPUSH
// uc_side = 0 ;
55807: LD_ADDR_OWVAR 20
55811: PUSH
55812: LD_INT 0
55814: ST_TO_ADDR
// uc_nation = 0 ;
55815: LD_ADDR_OWVAR 21
55819: PUSH
55820: LD_INT 0
55822: ST_TO_ADDR
// InitHc ;
55823: CALL_OW 19
// InitVc ;
55827: CALL_OW 20
// if mastodonts then
55831: LD_VAR 0 6
55835: IFFALSE 55902
// for i = 1 to mastodonts do
55837: LD_ADDR_VAR 0 11
55841: PUSH
55842: DOUBLE
55843: LD_INT 1
55845: DEC
55846: ST_TO_ADDR
55847: LD_VAR 0 6
55851: PUSH
55852: FOR_TO
55853: IFFALSE 55900
// begin vc_chassis := 31 ;
55855: LD_ADDR_OWVAR 37
55859: PUSH
55860: LD_INT 31
55862: ST_TO_ADDR
// vc_control := control_rider ;
55863: LD_ADDR_OWVAR 38
55867: PUSH
55868: LD_INT 4
55870: ST_TO_ADDR
// animal := CreateVehicle ;
55871: LD_ADDR_VAR 0 12
55875: PUSH
55876: CALL_OW 45
55880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55881: LD_VAR 0 12
55885: PPUSH
55886: LD_VAR 0 8
55890: PPUSH
55891: LD_INT 0
55893: PPUSH
55894: CALL 57971 0 3
// end ;
55898: GO 55852
55900: POP
55901: POP
// if horses then
55902: LD_VAR 0 5
55906: IFFALSE 55973
// for i = 1 to horses do
55908: LD_ADDR_VAR 0 11
55912: PUSH
55913: DOUBLE
55914: LD_INT 1
55916: DEC
55917: ST_TO_ADDR
55918: LD_VAR 0 5
55922: PUSH
55923: FOR_TO
55924: IFFALSE 55971
// begin hc_class := 21 ;
55926: LD_ADDR_OWVAR 28
55930: PUSH
55931: LD_INT 21
55933: ST_TO_ADDR
// hc_gallery :=  ;
55934: LD_ADDR_OWVAR 33
55938: PUSH
55939: LD_STRING 
55941: ST_TO_ADDR
// animal := CreateHuman ;
55942: LD_ADDR_VAR 0 12
55946: PUSH
55947: CALL_OW 44
55951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55952: LD_VAR 0 12
55956: PPUSH
55957: LD_VAR 0 8
55961: PPUSH
55962: LD_INT 0
55964: PPUSH
55965: CALL 57971 0 3
// end ;
55969: GO 55923
55971: POP
55972: POP
// if birds then
55973: LD_VAR 0 1
55977: IFFALSE 56044
// for i = 1 to birds do
55979: LD_ADDR_VAR 0 11
55983: PUSH
55984: DOUBLE
55985: LD_INT 1
55987: DEC
55988: ST_TO_ADDR
55989: LD_VAR 0 1
55993: PUSH
55994: FOR_TO
55995: IFFALSE 56042
// begin hc_class = 18 ;
55997: LD_ADDR_OWVAR 28
56001: PUSH
56002: LD_INT 18
56004: ST_TO_ADDR
// hc_gallery =  ;
56005: LD_ADDR_OWVAR 33
56009: PUSH
56010: LD_STRING 
56012: ST_TO_ADDR
// animal := CreateHuman ;
56013: LD_ADDR_VAR 0 12
56017: PUSH
56018: CALL_OW 44
56022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56023: LD_VAR 0 12
56027: PPUSH
56028: LD_VAR 0 8
56032: PPUSH
56033: LD_INT 0
56035: PPUSH
56036: CALL 57971 0 3
// end ;
56040: GO 55994
56042: POP
56043: POP
// if tigers then
56044: LD_VAR 0 2
56048: IFFALSE 56132
// for i = 1 to tigers do
56050: LD_ADDR_VAR 0 11
56054: PUSH
56055: DOUBLE
56056: LD_INT 1
56058: DEC
56059: ST_TO_ADDR
56060: LD_VAR 0 2
56064: PUSH
56065: FOR_TO
56066: IFFALSE 56130
// begin hc_class = class_tiger ;
56068: LD_ADDR_OWVAR 28
56072: PUSH
56073: LD_INT 14
56075: ST_TO_ADDR
// hc_gallery =  ;
56076: LD_ADDR_OWVAR 33
56080: PUSH
56081: LD_STRING 
56083: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56084: LD_ADDR_OWVAR 35
56088: PUSH
56089: LD_INT 7
56091: NEG
56092: PPUSH
56093: LD_INT 7
56095: PPUSH
56096: CALL_OW 12
56100: ST_TO_ADDR
// animal := CreateHuman ;
56101: LD_ADDR_VAR 0 12
56105: PUSH
56106: CALL_OW 44
56110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56111: LD_VAR 0 12
56115: PPUSH
56116: LD_VAR 0 8
56120: PPUSH
56121: LD_INT 0
56123: PPUSH
56124: CALL 57971 0 3
// end ;
56128: GO 56065
56130: POP
56131: POP
// if apemans then
56132: LD_VAR 0 3
56136: IFFALSE 56259
// for i = 1 to apemans do
56138: LD_ADDR_VAR 0 11
56142: PUSH
56143: DOUBLE
56144: LD_INT 1
56146: DEC
56147: ST_TO_ADDR
56148: LD_VAR 0 3
56152: PUSH
56153: FOR_TO
56154: IFFALSE 56257
// begin hc_class = class_apeman ;
56156: LD_ADDR_OWVAR 28
56160: PUSH
56161: LD_INT 12
56163: ST_TO_ADDR
// hc_gallery =  ;
56164: LD_ADDR_OWVAR 33
56168: PUSH
56169: LD_STRING 
56171: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56172: LD_ADDR_OWVAR 35
56176: PUSH
56177: LD_INT 5
56179: NEG
56180: PPUSH
56181: LD_INT 5
56183: PPUSH
56184: CALL_OW 12
56188: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56189: LD_ADDR_OWVAR 31
56193: PUSH
56194: LD_INT 1
56196: PPUSH
56197: LD_INT 3
56199: PPUSH
56200: CALL_OW 12
56204: PUSH
56205: LD_INT 1
56207: PPUSH
56208: LD_INT 3
56210: PPUSH
56211: CALL_OW 12
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// animal := CreateHuman ;
56228: LD_ADDR_VAR 0 12
56232: PUSH
56233: CALL_OW 44
56237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56238: LD_VAR 0 12
56242: PPUSH
56243: LD_VAR 0 8
56247: PPUSH
56248: LD_INT 0
56250: PPUSH
56251: CALL 57971 0 3
// end ;
56255: GO 56153
56257: POP
56258: POP
// if enchidnas then
56259: LD_VAR 0 4
56263: IFFALSE 56330
// for i = 1 to enchidnas do
56265: LD_ADDR_VAR 0 11
56269: PUSH
56270: DOUBLE
56271: LD_INT 1
56273: DEC
56274: ST_TO_ADDR
56275: LD_VAR 0 4
56279: PUSH
56280: FOR_TO
56281: IFFALSE 56328
// begin hc_class = 13 ;
56283: LD_ADDR_OWVAR 28
56287: PUSH
56288: LD_INT 13
56290: ST_TO_ADDR
// hc_gallery =  ;
56291: LD_ADDR_OWVAR 33
56295: PUSH
56296: LD_STRING 
56298: ST_TO_ADDR
// animal := CreateHuman ;
56299: LD_ADDR_VAR 0 12
56303: PUSH
56304: CALL_OW 44
56308: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56309: LD_VAR 0 12
56313: PPUSH
56314: LD_VAR 0 8
56318: PPUSH
56319: LD_INT 0
56321: PPUSH
56322: CALL 57971 0 3
// end ;
56326: GO 56280
56328: POP
56329: POP
// if fishes then
56330: LD_VAR 0 7
56334: IFFALSE 56401
// for i = 1 to fishes do
56336: LD_ADDR_VAR 0 11
56340: PUSH
56341: DOUBLE
56342: LD_INT 1
56344: DEC
56345: ST_TO_ADDR
56346: LD_VAR 0 7
56350: PUSH
56351: FOR_TO
56352: IFFALSE 56399
// begin hc_class = 20 ;
56354: LD_ADDR_OWVAR 28
56358: PUSH
56359: LD_INT 20
56361: ST_TO_ADDR
// hc_gallery =  ;
56362: LD_ADDR_OWVAR 33
56366: PUSH
56367: LD_STRING 
56369: ST_TO_ADDR
// animal := CreateHuman ;
56370: LD_ADDR_VAR 0 12
56374: PUSH
56375: CALL_OW 44
56379: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56380: LD_VAR 0 12
56384: PPUSH
56385: LD_VAR 0 9
56389: PPUSH
56390: LD_INT 0
56392: PPUSH
56393: CALL 57971 0 3
// end ;
56397: GO 56351
56399: POP
56400: POP
// end ;
56401: LD_VAR 0 10
56405: RET
// export function WantHeal ( sci , unit ) ; begin
56406: LD_INT 0
56408: PPUSH
// if GetTaskList ( sci ) > 0 then
56409: LD_VAR 0 1
56413: PPUSH
56414: CALL_OW 437
56418: PUSH
56419: LD_INT 0
56421: GREATER
56422: IFFALSE 56492
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56424: LD_VAR 0 1
56428: PPUSH
56429: CALL_OW 437
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PUSH
56438: LD_INT 1
56440: ARRAY
56441: PUSH
56442: LD_STRING l
56444: EQUAL
56445: PUSH
56446: LD_VAR 0 1
56450: PPUSH
56451: CALL_OW 437
56455: PUSH
56456: LD_INT 1
56458: ARRAY
56459: PUSH
56460: LD_INT 4
56462: ARRAY
56463: PUSH
56464: LD_VAR 0 2
56468: EQUAL
56469: AND
56470: IFFALSE 56482
// result := true else
56472: LD_ADDR_VAR 0 3
56476: PUSH
56477: LD_INT 1
56479: ST_TO_ADDR
56480: GO 56490
// result := false ;
56482: LD_ADDR_VAR 0 3
56486: PUSH
56487: LD_INT 0
56489: ST_TO_ADDR
// end else
56490: GO 56500
// result := false ;
56492: LD_ADDR_VAR 0 3
56496: PUSH
56497: LD_INT 0
56499: ST_TO_ADDR
// end ;
56500: LD_VAR 0 3
56504: RET
// export function HealTarget ( sci ) ; begin
56505: LD_INT 0
56507: PPUSH
// if not sci then
56508: LD_VAR 0 1
56512: NOT
56513: IFFALSE 56517
// exit ;
56515: GO 56582
// result := 0 ;
56517: LD_ADDR_VAR 0 2
56521: PUSH
56522: LD_INT 0
56524: ST_TO_ADDR
// if GetTaskList ( sci ) then
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 437
56534: IFFALSE 56582
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56536: LD_VAR 0 1
56540: PPUSH
56541: CALL_OW 437
56545: PUSH
56546: LD_INT 1
56548: ARRAY
56549: PUSH
56550: LD_INT 1
56552: ARRAY
56553: PUSH
56554: LD_STRING l
56556: EQUAL
56557: IFFALSE 56582
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56559: LD_ADDR_VAR 0 2
56563: PUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 437
56573: PUSH
56574: LD_INT 1
56576: ARRAY
56577: PUSH
56578: LD_INT 4
56580: ARRAY
56581: ST_TO_ADDR
// end ;
56582: LD_VAR 0 2
56586: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56587: LD_INT 0
56589: PPUSH
56590: PPUSH
56591: PPUSH
56592: PPUSH
// if not base_units then
56593: LD_VAR 0 1
56597: NOT
56598: IFFALSE 56602
// exit ;
56600: GO 56689
// result := false ;
56602: LD_ADDR_VAR 0 2
56606: PUSH
56607: LD_INT 0
56609: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56610: LD_ADDR_VAR 0 5
56614: PUSH
56615: LD_VAR 0 1
56619: PPUSH
56620: LD_INT 21
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 72
56634: ST_TO_ADDR
// if not tmp then
56635: LD_VAR 0 5
56639: NOT
56640: IFFALSE 56644
// exit ;
56642: GO 56689
// for i in tmp do
56644: LD_ADDR_VAR 0 3
56648: PUSH
56649: LD_VAR 0 5
56653: PUSH
56654: FOR_IN
56655: IFFALSE 56687
// begin result := EnemyInRange ( i , 22 ) ;
56657: LD_ADDR_VAR 0 2
56661: PUSH
56662: LD_VAR 0 3
56666: PPUSH
56667: LD_INT 22
56669: PPUSH
56670: CALL 54925 0 2
56674: ST_TO_ADDR
// if result then
56675: LD_VAR 0 2
56679: IFFALSE 56685
// exit ;
56681: POP
56682: POP
56683: GO 56689
// end ;
56685: GO 56654
56687: POP
56688: POP
// end ;
56689: LD_VAR 0 2
56693: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56694: LD_INT 0
56696: PPUSH
56697: PPUSH
// if not units then
56698: LD_VAR 0 1
56702: NOT
56703: IFFALSE 56707
// exit ;
56705: GO 56777
// result := [ ] ;
56707: LD_ADDR_VAR 0 3
56711: PUSH
56712: EMPTY
56713: ST_TO_ADDR
// for i in units do
56714: LD_ADDR_VAR 0 4
56718: PUSH
56719: LD_VAR 0 1
56723: PUSH
56724: FOR_IN
56725: IFFALSE 56775
// if GetTag ( i ) = tag then
56727: LD_VAR 0 4
56731: PPUSH
56732: CALL_OW 110
56736: PUSH
56737: LD_VAR 0 2
56741: EQUAL
56742: IFFALSE 56773
// result := Insert ( result , result + 1 , i ) ;
56744: LD_ADDR_VAR 0 3
56748: PUSH
56749: LD_VAR 0 3
56753: PPUSH
56754: LD_VAR 0 3
56758: PUSH
56759: LD_INT 1
56761: PLUS
56762: PPUSH
56763: LD_VAR 0 4
56767: PPUSH
56768: CALL_OW 2
56772: ST_TO_ADDR
56773: GO 56724
56775: POP
56776: POP
// end ;
56777: LD_VAR 0 3
56781: RET
// export function IsDriver ( un ) ; begin
56782: LD_INT 0
56784: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56785: LD_ADDR_VAR 0 2
56789: PUSH
56790: LD_VAR 0 1
56794: PUSH
56795: LD_INT 55
56797: PUSH
56798: EMPTY
56799: LIST
56800: PPUSH
56801: CALL_OW 69
56805: IN
56806: ST_TO_ADDR
// end ;
56807: LD_VAR 0 2
56811: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56812: LD_INT 0
56814: PPUSH
56815: PPUSH
// list := [ ] ;
56816: LD_ADDR_VAR 0 5
56820: PUSH
56821: EMPTY
56822: ST_TO_ADDR
// case d of 0 :
56823: LD_VAR 0 3
56827: PUSH
56828: LD_INT 0
56830: DOUBLE
56831: EQUAL
56832: IFTRUE 56836
56834: GO 56969
56836: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56837: LD_ADDR_VAR 0 5
56841: PUSH
56842: LD_VAR 0 1
56846: PUSH
56847: LD_INT 4
56849: MINUS
56850: PUSH
56851: LD_VAR 0 2
56855: PUSH
56856: LD_INT 4
56858: MINUS
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: PUSH
56868: LD_VAR 0 1
56872: PUSH
56873: LD_INT 3
56875: MINUS
56876: PUSH
56877: LD_VAR 0 2
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: PUSH
56890: LD_VAR 0 1
56894: PUSH
56895: LD_INT 4
56897: PLUS
56898: PUSH
56899: LD_VAR 0 2
56903: PUSH
56904: LD_INT 4
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: PUSH
56912: LD_VAR 0 1
56916: PUSH
56917: LD_INT 3
56919: PLUS
56920: PUSH
56921: LD_VAR 0 2
56925: PUSH
56926: LD_INT 3
56928: PLUS
56929: PUSH
56930: LD_INT 5
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: PUSH
56938: LD_VAR 0 1
56942: PUSH
56943: LD_VAR 0 2
56947: PUSH
56948: LD_INT 4
56950: PLUS
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: ST_TO_ADDR
// end ; 1 :
56967: GO 57667
56969: LD_INT 1
56971: DOUBLE
56972: EQUAL
56973: IFTRUE 56977
56975: GO 57110
56977: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56978: LD_ADDR_VAR 0 5
56982: PUSH
56983: LD_VAR 0 1
56987: PUSH
56988: LD_VAR 0 2
56992: PUSH
56993: LD_INT 4
56995: MINUS
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: PUSH
57005: LD_VAR 0 1
57009: PUSH
57010: LD_INT 3
57012: MINUS
57013: PUSH
57014: LD_VAR 0 2
57018: PUSH
57019: LD_INT 3
57021: MINUS
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: PUSH
57031: LD_VAR 0 1
57035: PUSH
57036: LD_INT 4
57038: MINUS
57039: PUSH
57040: LD_VAR 0 2
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: PUSH
57053: LD_VAR 0 1
57057: PUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_INT 3
57065: PLUS
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: PUSH
57075: LD_VAR 0 1
57079: PUSH
57080: LD_INT 4
57082: PLUS
57083: PUSH
57084: LD_VAR 0 2
57088: PUSH
57089: LD_INT 4
57091: PLUS
57092: PUSH
57093: LD_INT 5
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// end ; 2 :
57108: GO 57667
57110: LD_INT 2
57112: DOUBLE
57113: EQUAL
57114: IFTRUE 57118
57116: GO 57247
57118: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57119: LD_ADDR_VAR 0 5
57123: PUSH
57124: LD_VAR 0 1
57128: PUSH
57129: LD_VAR 0 2
57133: PUSH
57134: LD_INT 3
57136: MINUS
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: PUSH
57146: LD_VAR 0 1
57150: PUSH
57151: LD_INT 4
57153: PLUS
57154: PUSH
57155: LD_VAR 0 2
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: PUSH
57168: LD_VAR 0 1
57172: PUSH
57173: LD_VAR 0 2
57177: PUSH
57178: LD_INT 4
57180: PLUS
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: PUSH
57190: LD_VAR 0 1
57194: PUSH
57195: LD_INT 3
57197: MINUS
57198: PUSH
57199: LD_VAR 0 2
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: PUSH
57212: LD_VAR 0 1
57216: PUSH
57217: LD_INT 4
57219: MINUS
57220: PUSH
57221: LD_VAR 0 2
57225: PUSH
57226: LD_INT 4
57228: MINUS
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// end ; 3 :
57245: GO 57667
57247: LD_INT 3
57249: DOUBLE
57250: EQUAL
57251: IFTRUE 57255
57253: GO 57388
57255: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57256: LD_ADDR_VAR 0 5
57260: PUSH
57261: LD_VAR 0 1
57265: PUSH
57266: LD_INT 3
57268: PLUS
57269: PUSH
57270: LD_VAR 0 2
57274: PUSH
57275: LD_INT 4
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: PUSH
57283: LD_VAR 0 1
57287: PUSH
57288: LD_INT 4
57290: PLUS
57291: PUSH
57292: LD_VAR 0 2
57296: PUSH
57297: LD_INT 4
57299: PLUS
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: PUSH
57309: LD_VAR 0 1
57313: PUSH
57314: LD_INT 4
57316: MINUS
57317: PUSH
57318: LD_VAR 0 2
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: PUSH
57331: LD_VAR 0 1
57335: PUSH
57336: LD_VAR 0 2
57340: PUSH
57341: LD_INT 4
57343: MINUS
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: PUSH
57353: LD_VAR 0 1
57357: PUSH
57358: LD_INT 3
57360: MINUS
57361: PUSH
57362: LD_VAR 0 2
57366: PUSH
57367: LD_INT 3
57369: MINUS
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: ST_TO_ADDR
// end ; 4 :
57386: GO 57667
57388: LD_INT 4
57390: DOUBLE
57391: EQUAL
57392: IFTRUE 57396
57394: GO 57529
57396: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57397: LD_ADDR_VAR 0 5
57401: PUSH
57402: LD_VAR 0 1
57406: PUSH
57407: LD_VAR 0 2
57411: PUSH
57412: LD_INT 4
57414: PLUS
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: PUSH
57424: LD_VAR 0 1
57428: PUSH
57429: LD_INT 3
57431: PLUS
57432: PUSH
57433: LD_VAR 0 2
57437: PUSH
57438: LD_INT 3
57440: PLUS
57441: PUSH
57442: LD_INT 5
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: PUSH
57450: LD_VAR 0 1
57454: PUSH
57455: LD_INT 4
57457: PLUS
57458: PUSH
57459: LD_VAR 0 2
57463: PUSH
57464: LD_INT 4
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: PUSH
57472: LD_VAR 0 1
57476: PUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_INT 3
57484: MINUS
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: PUSH
57494: LD_VAR 0 1
57498: PUSH
57499: LD_INT 4
57501: MINUS
57502: PUSH
57503: LD_VAR 0 2
57507: PUSH
57508: LD_INT 4
57510: MINUS
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// end ; 5 :
57527: GO 57667
57529: LD_INT 5
57531: DOUBLE
57532: EQUAL
57533: IFTRUE 57537
57535: GO 57666
57537: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57538: LD_ADDR_VAR 0 5
57542: PUSH
57543: LD_VAR 0 1
57547: PUSH
57548: LD_INT 4
57550: MINUS
57551: PUSH
57552: LD_VAR 0 2
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: LIST
57564: PUSH
57565: LD_VAR 0 1
57569: PUSH
57570: LD_VAR 0 2
57574: PUSH
57575: LD_INT 4
57577: MINUS
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: PUSH
57587: LD_VAR 0 1
57591: PUSH
57592: LD_INT 4
57594: PLUS
57595: PUSH
57596: LD_VAR 0 2
57600: PUSH
57601: LD_INT 4
57603: PLUS
57604: PUSH
57605: LD_INT 5
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: LIST
57612: PUSH
57613: LD_VAR 0 1
57617: PUSH
57618: LD_INT 3
57620: PLUS
57621: PUSH
57622: LD_VAR 0 2
57626: PUSH
57627: LD_INT 4
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: PUSH
57635: LD_VAR 0 1
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 3
57647: PLUS
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: ST_TO_ADDR
// end ; end ;
57664: GO 57667
57666: POP
// result := list ;
57667: LD_ADDR_VAR 0 4
57671: PUSH
57672: LD_VAR 0 5
57676: ST_TO_ADDR
// end ;
57677: LD_VAR 0 4
57681: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57682: LD_INT 0
57684: PPUSH
57685: PPUSH
57686: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57687: LD_VAR 0 1
57691: NOT
57692: PUSH
57693: LD_VAR 0 2
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: LD_INT 4
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: IN
57716: NOT
57717: OR
57718: IFFALSE 57722
// exit ;
57720: GO 57814
// tmp := [ ] ;
57722: LD_ADDR_VAR 0 5
57726: PUSH
57727: EMPTY
57728: ST_TO_ADDR
// for i in units do
57729: LD_ADDR_VAR 0 4
57733: PUSH
57734: LD_VAR 0 1
57738: PUSH
57739: FOR_IN
57740: IFFALSE 57783
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57742: LD_ADDR_VAR 0 5
57746: PUSH
57747: LD_VAR 0 5
57751: PPUSH
57752: LD_VAR 0 5
57756: PUSH
57757: LD_INT 1
57759: PLUS
57760: PPUSH
57761: LD_VAR 0 4
57765: PPUSH
57766: LD_VAR 0 2
57770: PPUSH
57771: CALL_OW 259
57775: PPUSH
57776: CALL_OW 2
57780: ST_TO_ADDR
57781: GO 57739
57783: POP
57784: POP
// if not tmp then
57785: LD_VAR 0 5
57789: NOT
57790: IFFALSE 57794
// exit ;
57792: GO 57814
// result := SortListByListDesc ( units , tmp ) ;
57794: LD_ADDR_VAR 0 3
57798: PUSH
57799: LD_VAR 0 1
57803: PPUSH
57804: LD_VAR 0 5
57808: PPUSH
57809: CALL_OW 77
57813: ST_TO_ADDR
// end ;
57814: LD_VAR 0 3
57818: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57819: LD_INT 0
57821: PPUSH
57822: PPUSH
57823: PPUSH
// x := GetX ( building ) ;
57824: LD_ADDR_VAR 0 4
57828: PUSH
57829: LD_VAR 0 2
57833: PPUSH
57834: CALL_OW 250
57838: ST_TO_ADDR
// y := GetY ( building ) ;
57839: LD_ADDR_VAR 0 5
57843: PUSH
57844: LD_VAR 0 2
57848: PPUSH
57849: CALL_OW 251
57853: ST_TO_ADDR
// if GetTaskList ( unit ) then
57854: LD_VAR 0 1
57858: PPUSH
57859: CALL_OW 437
57863: IFFALSE 57958
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57865: LD_STRING e
57867: PUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL_OW 437
57877: PUSH
57878: LD_INT 1
57880: ARRAY
57881: PUSH
57882: LD_INT 1
57884: ARRAY
57885: EQUAL
57886: PUSH
57887: LD_VAR 0 4
57891: PUSH
57892: LD_VAR 0 1
57896: PPUSH
57897: CALL_OW 437
57901: PUSH
57902: LD_INT 1
57904: ARRAY
57905: PUSH
57906: LD_INT 2
57908: ARRAY
57909: EQUAL
57910: AND
57911: PUSH
57912: LD_VAR 0 5
57916: PUSH
57917: LD_VAR 0 1
57921: PPUSH
57922: CALL_OW 437
57926: PUSH
57927: LD_INT 1
57929: ARRAY
57930: PUSH
57931: LD_INT 3
57933: ARRAY
57934: EQUAL
57935: AND
57936: IFFALSE 57948
// result := true else
57938: LD_ADDR_VAR 0 3
57942: PUSH
57943: LD_INT 1
57945: ST_TO_ADDR
57946: GO 57956
// result := false ;
57948: LD_ADDR_VAR 0 3
57952: PUSH
57953: LD_INT 0
57955: ST_TO_ADDR
// end else
57956: GO 57966
// result := false ;
57958: LD_ADDR_VAR 0 3
57962: PUSH
57963: LD_INT 0
57965: ST_TO_ADDR
// end ;
57966: LD_VAR 0 3
57970: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57971: LD_INT 0
57973: PPUSH
57974: PPUSH
57975: PPUSH
57976: PPUSH
// if not unit or not area then
57977: LD_VAR 0 1
57981: NOT
57982: PUSH
57983: LD_VAR 0 2
57987: NOT
57988: OR
57989: IFFALSE 57993
// exit ;
57991: GO 58157
// tmp := AreaToList ( area , i ) ;
57993: LD_ADDR_VAR 0 6
57997: PUSH
57998: LD_VAR 0 2
58002: PPUSH
58003: LD_VAR 0 5
58007: PPUSH
58008: CALL_OW 517
58012: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58013: LD_ADDR_VAR 0 5
58017: PUSH
58018: DOUBLE
58019: LD_INT 1
58021: DEC
58022: ST_TO_ADDR
58023: LD_VAR 0 6
58027: PUSH
58028: LD_INT 1
58030: ARRAY
58031: PUSH
58032: FOR_TO
58033: IFFALSE 58155
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58035: LD_ADDR_VAR 0 7
58039: PUSH
58040: LD_VAR 0 6
58044: PUSH
58045: LD_INT 1
58047: ARRAY
58048: PUSH
58049: LD_VAR 0 5
58053: ARRAY
58054: PUSH
58055: LD_VAR 0 6
58059: PUSH
58060: LD_INT 2
58062: ARRAY
58063: PUSH
58064: LD_VAR 0 5
58068: ARRAY
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58074: LD_VAR 0 7
58078: PUSH
58079: LD_INT 1
58081: ARRAY
58082: PPUSH
58083: LD_VAR 0 7
58087: PUSH
58088: LD_INT 2
58090: ARRAY
58091: PPUSH
58092: CALL_OW 428
58096: PUSH
58097: LD_INT 0
58099: EQUAL
58100: IFFALSE 58153
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58102: LD_VAR 0 1
58106: PPUSH
58107: LD_VAR 0 7
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: PPUSH
58116: LD_VAR 0 7
58120: PUSH
58121: LD_INT 2
58123: ARRAY
58124: PPUSH
58125: LD_VAR 0 3
58129: PPUSH
58130: CALL_OW 48
// result := IsPlaced ( unit ) ;
58134: LD_ADDR_VAR 0 4
58138: PUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: CALL_OW 305
58148: ST_TO_ADDR
// exit ;
58149: POP
58150: POP
58151: GO 58157
// end ; end ;
58153: GO 58032
58155: POP
58156: POP
// end ;
58157: LD_VAR 0 4
58161: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58162: LD_INT 0
58164: PPUSH
58165: PPUSH
58166: PPUSH
// if not side or side > 8 then
58167: LD_VAR 0 1
58171: NOT
58172: PUSH
58173: LD_VAR 0 1
58177: PUSH
58178: LD_INT 8
58180: GREATER
58181: OR
58182: IFFALSE 58186
// exit ;
58184: GO 58373
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58186: LD_ADDR_VAR 0 4
58190: PUSH
58191: LD_INT 22
58193: PUSH
58194: LD_VAR 0 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 21
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PPUSH
58217: CALL_OW 69
58221: ST_TO_ADDR
// if not tmp then
58222: LD_VAR 0 4
58226: NOT
58227: IFFALSE 58231
// exit ;
58229: GO 58373
// enable_addtolog := true ;
58231: LD_ADDR_OWVAR 81
58235: PUSH
58236: LD_INT 1
58238: ST_TO_ADDR
// AddToLog ( [ ) ;
58239: LD_STRING [
58241: PPUSH
58242: CALL_OW 561
// for i in tmp do
58246: LD_ADDR_VAR 0 3
58250: PUSH
58251: LD_VAR 0 4
58255: PUSH
58256: FOR_IN
58257: IFFALSE 58364
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58259: LD_STRING [
58261: PUSH
58262: LD_VAR 0 3
58266: PPUSH
58267: CALL_OW 266
58271: STR
58272: PUSH
58273: LD_STRING , 
58275: STR
58276: PUSH
58277: LD_VAR 0 3
58281: PPUSH
58282: CALL_OW 250
58286: STR
58287: PUSH
58288: LD_STRING , 
58290: STR
58291: PUSH
58292: LD_VAR 0 3
58296: PPUSH
58297: CALL_OW 251
58301: STR
58302: PUSH
58303: LD_STRING , 
58305: STR
58306: PUSH
58307: LD_VAR 0 3
58311: PPUSH
58312: CALL_OW 254
58316: STR
58317: PUSH
58318: LD_STRING , 
58320: STR
58321: PUSH
58322: LD_VAR 0 3
58326: PPUSH
58327: LD_INT 1
58329: PPUSH
58330: CALL_OW 268
58334: STR
58335: PUSH
58336: LD_STRING , 
58338: STR
58339: PUSH
58340: LD_VAR 0 3
58344: PPUSH
58345: LD_INT 2
58347: PPUSH
58348: CALL_OW 268
58352: STR
58353: PUSH
58354: LD_STRING ],
58356: STR
58357: PPUSH
58358: CALL_OW 561
// end ;
58362: GO 58256
58364: POP
58365: POP
// AddToLog ( ]; ) ;
58366: LD_STRING ];
58368: PPUSH
58369: CALL_OW 561
// end ;
58373: LD_VAR 0 2
58377: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58378: LD_INT 0
58380: PPUSH
58381: PPUSH
58382: PPUSH
58383: PPUSH
58384: PPUSH
// if not area or not rate or not max then
58385: LD_VAR 0 1
58389: NOT
58390: PUSH
58391: LD_VAR 0 2
58395: NOT
58396: OR
58397: PUSH
58398: LD_VAR 0 4
58402: NOT
58403: OR
58404: IFFALSE 58408
// exit ;
58406: GO 58600
// while 1 do
58408: LD_INT 1
58410: IFFALSE 58600
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58412: LD_ADDR_VAR 0 9
58416: PUSH
58417: LD_VAR 0 1
58421: PPUSH
58422: LD_INT 1
58424: PPUSH
58425: CALL_OW 287
58429: PUSH
58430: LD_INT 10
58432: MUL
58433: ST_TO_ADDR
// r := rate / 10 ;
58434: LD_ADDR_VAR 0 7
58438: PUSH
58439: LD_VAR 0 2
58443: PUSH
58444: LD_INT 10
58446: DIVREAL
58447: ST_TO_ADDR
// time := 1 1$00 ;
58448: LD_ADDR_VAR 0 8
58452: PUSH
58453: LD_INT 2100
58455: ST_TO_ADDR
// if amount < min then
58456: LD_VAR 0 9
58460: PUSH
58461: LD_VAR 0 3
58465: LESS
58466: IFFALSE 58484
// r := r * 2 else
58468: LD_ADDR_VAR 0 7
58472: PUSH
58473: LD_VAR 0 7
58477: PUSH
58478: LD_INT 2
58480: MUL
58481: ST_TO_ADDR
58482: GO 58510
// if amount > max then
58484: LD_VAR 0 9
58488: PUSH
58489: LD_VAR 0 4
58493: GREATER
58494: IFFALSE 58510
// r := r / 2 ;
58496: LD_ADDR_VAR 0 7
58500: PUSH
58501: LD_VAR 0 7
58505: PUSH
58506: LD_INT 2
58508: DIVREAL
58509: ST_TO_ADDR
// time := time / r ;
58510: LD_ADDR_VAR 0 8
58514: PUSH
58515: LD_VAR 0 8
58519: PUSH
58520: LD_VAR 0 7
58524: DIVREAL
58525: ST_TO_ADDR
// if time < 0 then
58526: LD_VAR 0 8
58530: PUSH
58531: LD_INT 0
58533: LESS
58534: IFFALSE 58551
// time := time * - 1 ;
58536: LD_ADDR_VAR 0 8
58540: PUSH
58541: LD_VAR 0 8
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: MUL
58550: ST_TO_ADDR
// wait ( time ) ;
58551: LD_VAR 0 8
58555: PPUSH
58556: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58560: LD_INT 35
58562: PPUSH
58563: LD_INT 875
58565: PPUSH
58566: CALL_OW 12
58570: PPUSH
58571: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58575: LD_INT 1
58577: PPUSH
58578: LD_INT 5
58580: PPUSH
58581: CALL_OW 12
58585: PPUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: LD_INT 1
58593: PPUSH
58594: CALL_OW 55
// end ;
58598: GO 58408
// end ;
58600: LD_VAR 0 5
58604: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58605: LD_INT 0
58607: PPUSH
58608: PPUSH
58609: PPUSH
58610: PPUSH
58611: PPUSH
58612: PPUSH
58613: PPUSH
58614: PPUSH
// if not turrets or not factories then
58615: LD_VAR 0 1
58619: NOT
58620: PUSH
58621: LD_VAR 0 2
58625: NOT
58626: OR
58627: IFFALSE 58631
// exit ;
58629: GO 58938
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58631: LD_ADDR_VAR 0 10
58635: PUSH
58636: LD_INT 5
58638: PUSH
58639: LD_INT 6
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 24
58673: PUSH
58674: LD_INT 25
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 23
58683: PUSH
58684: LD_INT 27
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 42
58697: PUSH
58698: LD_INT 43
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 44
58707: PUSH
58708: LD_INT 46
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 45
58717: PUSH
58718: LD_INT 47
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: LIST
58734: ST_TO_ADDR
// result := [ ] ;
58735: LD_ADDR_VAR 0 3
58739: PUSH
58740: EMPTY
58741: ST_TO_ADDR
// for i in turrets do
58742: LD_ADDR_VAR 0 4
58746: PUSH
58747: LD_VAR 0 1
58751: PUSH
58752: FOR_IN
58753: IFFALSE 58936
// begin nat := GetNation ( i ) ;
58755: LD_ADDR_VAR 0 7
58759: PUSH
58760: LD_VAR 0 4
58764: PPUSH
58765: CALL_OW 248
58769: ST_TO_ADDR
// weapon := 0 ;
58770: LD_ADDR_VAR 0 8
58774: PUSH
58775: LD_INT 0
58777: ST_TO_ADDR
// if not nat then
58778: LD_VAR 0 7
58782: NOT
58783: IFFALSE 58787
// continue ;
58785: GO 58752
// for j in list [ nat ] do
58787: LD_ADDR_VAR 0 5
58791: PUSH
58792: LD_VAR 0 10
58796: PUSH
58797: LD_VAR 0 7
58801: ARRAY
58802: PUSH
58803: FOR_IN
58804: IFFALSE 58845
// if GetBWeapon ( i ) = j [ 1 ] then
58806: LD_VAR 0 4
58810: PPUSH
58811: CALL_OW 269
58815: PUSH
58816: LD_VAR 0 5
58820: PUSH
58821: LD_INT 1
58823: ARRAY
58824: EQUAL
58825: IFFALSE 58843
// begin weapon := j [ 2 ] ;
58827: LD_ADDR_VAR 0 8
58831: PUSH
58832: LD_VAR 0 5
58836: PUSH
58837: LD_INT 2
58839: ARRAY
58840: ST_TO_ADDR
// break ;
58841: GO 58845
// end ;
58843: GO 58803
58845: POP
58846: POP
// if not weapon then
58847: LD_VAR 0 8
58851: NOT
58852: IFFALSE 58856
// continue ;
58854: GO 58752
// for k in factories do
58856: LD_ADDR_VAR 0 6
58860: PUSH
58861: LD_VAR 0 2
58865: PUSH
58866: FOR_IN
58867: IFFALSE 58932
// begin weapons := AvailableWeaponList ( k ) ;
58869: LD_ADDR_VAR 0 9
58873: PUSH
58874: LD_VAR 0 6
58878: PPUSH
58879: CALL_OW 478
58883: ST_TO_ADDR
// if not weapons then
58884: LD_VAR 0 9
58888: NOT
58889: IFFALSE 58893
// continue ;
58891: GO 58866
// if weapon in weapons then
58893: LD_VAR 0 8
58897: PUSH
58898: LD_VAR 0 9
58902: IN
58903: IFFALSE 58930
// begin result := [ i , weapon ] ;
58905: LD_ADDR_VAR 0 3
58909: PUSH
58910: LD_VAR 0 4
58914: PUSH
58915: LD_VAR 0 8
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// exit ;
58924: POP
58925: POP
58926: POP
58927: POP
58928: GO 58938
// end ; end ;
58930: GO 58866
58932: POP
58933: POP
// end ;
58934: GO 58752
58936: POP
58937: POP
// end ;
58938: LD_VAR 0 3
58942: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58943: LD_INT 0
58945: PPUSH
// if not side or side > 8 then
58946: LD_VAR 0 3
58950: NOT
58951: PUSH
58952: LD_VAR 0 3
58956: PUSH
58957: LD_INT 8
58959: GREATER
58960: OR
58961: IFFALSE 58965
// exit ;
58963: GO 59024
// if not range then
58965: LD_VAR 0 4
58969: NOT
58970: IFFALSE 58981
// range := - 12 ;
58972: LD_ADDR_VAR 0 4
58976: PUSH
58977: LD_INT 12
58979: NEG
58980: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58981: LD_VAR 0 1
58985: PPUSH
58986: LD_VAR 0 2
58990: PPUSH
58991: LD_VAR 0 3
58995: PPUSH
58996: LD_VAR 0 4
59000: PPUSH
59001: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59005: LD_VAR 0 1
59009: PPUSH
59010: LD_VAR 0 2
59014: PPUSH
59015: LD_VAR 0 3
59019: PPUSH
59020: CALL_OW 331
// end ;
59024: LD_VAR 0 5
59028: RET
// export function Video ( mode ) ; begin
59029: LD_INT 0
59031: PPUSH
// ingame_video = mode ;
59032: LD_ADDR_OWVAR 52
59036: PUSH
59037: LD_VAR 0 1
59041: ST_TO_ADDR
// interface_hidden = mode ;
59042: LD_ADDR_OWVAR 54
59046: PUSH
59047: LD_VAR 0 1
59051: ST_TO_ADDR
// end ;
59052: LD_VAR 0 2
59056: RET
// export function Join ( array , element ) ; begin
59057: LD_INT 0
59059: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59060: LD_ADDR_VAR 0 3
59064: PUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: LD_VAR 0 1
59074: PUSH
59075: LD_INT 1
59077: PLUS
59078: PPUSH
59079: LD_VAR 0 2
59083: PPUSH
59084: CALL_OW 1
59088: ST_TO_ADDR
// end ;
59089: LD_VAR 0 3
59093: RET
// export function JoinUnion ( array , element ) ; begin
59094: LD_INT 0
59096: PPUSH
// result := array union element ;
59097: LD_ADDR_VAR 0 3
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_VAR 0 2
59111: UNION
59112: ST_TO_ADDR
// end ;
59113: LD_VAR 0 3
59117: RET
// export function GetBehemoths ( side ) ; begin
59118: LD_INT 0
59120: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59121: LD_ADDR_VAR 0 2
59125: PUSH
59126: LD_INT 22
59128: PUSH
59129: LD_VAR 0 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 31
59140: PUSH
59141: LD_INT 25
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PPUSH
59152: CALL_OW 69
59156: ST_TO_ADDR
// end ;
59157: LD_VAR 0 2
59161: RET
// export function Shuffle ( array ) ; var i , index ; begin
59162: LD_INT 0
59164: PPUSH
59165: PPUSH
59166: PPUSH
// result := [ ] ;
59167: LD_ADDR_VAR 0 2
59171: PUSH
59172: EMPTY
59173: ST_TO_ADDR
// if not array then
59174: LD_VAR 0 1
59178: NOT
59179: IFFALSE 59183
// exit ;
59181: GO 59282
// Randomize ;
59183: CALL_OW 10
// for i = array downto 1 do
59187: LD_ADDR_VAR 0 3
59191: PUSH
59192: DOUBLE
59193: LD_VAR 0 1
59197: INC
59198: ST_TO_ADDR
59199: LD_INT 1
59201: PUSH
59202: FOR_DOWNTO
59203: IFFALSE 59280
// begin index := rand ( 1 , array ) ;
59205: LD_ADDR_VAR 0 4
59209: PUSH
59210: LD_INT 1
59212: PPUSH
59213: LD_VAR 0 1
59217: PPUSH
59218: CALL_OW 12
59222: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59223: LD_ADDR_VAR 0 2
59227: PUSH
59228: LD_VAR 0 2
59232: PPUSH
59233: LD_VAR 0 2
59237: PUSH
59238: LD_INT 1
59240: PLUS
59241: PPUSH
59242: LD_VAR 0 1
59246: PUSH
59247: LD_VAR 0 4
59251: ARRAY
59252: PPUSH
59253: CALL_OW 2
59257: ST_TO_ADDR
// array := Delete ( array , index ) ;
59258: LD_ADDR_VAR 0 1
59262: PUSH
59263: LD_VAR 0 1
59267: PPUSH
59268: LD_VAR 0 4
59272: PPUSH
59273: CALL_OW 3
59277: ST_TO_ADDR
// end ;
59278: GO 59202
59280: POP
59281: POP
// end ;
59282: LD_VAR 0 2
59286: RET
// export function GetBaseMaterials ( base ) ; begin
59287: LD_INT 0
59289: PPUSH
// result := [ 0 , 0 , 0 ] ;
59290: LD_ADDR_VAR 0 2
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: LIST
59308: ST_TO_ADDR
// if not base then
59309: LD_VAR 0 1
59313: NOT
59314: IFFALSE 59318
// exit ;
59316: GO 59367
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59318: LD_ADDR_VAR 0 2
59322: PUSH
59323: LD_VAR 0 1
59327: PPUSH
59328: LD_INT 1
59330: PPUSH
59331: CALL_OW 275
59335: PUSH
59336: LD_VAR 0 1
59340: PPUSH
59341: LD_INT 2
59343: PPUSH
59344: CALL_OW 275
59348: PUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: LD_INT 3
59356: PPUSH
59357: CALL_OW 275
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: LIST
59366: ST_TO_ADDR
// end ;
59367: LD_VAR 0 2
59371: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59372: LD_INT 0
59374: PPUSH
59375: PPUSH
// result := array ;
59376: LD_ADDR_VAR 0 3
59380: PUSH
59381: LD_VAR 0 1
59385: ST_TO_ADDR
// if size > 0 then
59386: LD_VAR 0 2
59390: PUSH
59391: LD_INT 0
59393: GREATER
59394: IFFALSE 59440
// for i := array downto size do
59396: LD_ADDR_VAR 0 4
59400: PUSH
59401: DOUBLE
59402: LD_VAR 0 1
59406: INC
59407: ST_TO_ADDR
59408: LD_VAR 0 2
59412: PUSH
59413: FOR_DOWNTO
59414: IFFALSE 59438
// result := Delete ( result , result ) ;
59416: LD_ADDR_VAR 0 3
59420: PUSH
59421: LD_VAR 0 3
59425: PPUSH
59426: LD_VAR 0 3
59430: PPUSH
59431: CALL_OW 3
59435: ST_TO_ADDR
59436: GO 59413
59438: POP
59439: POP
// end ;
59440: LD_VAR 0 3
59444: RET
// export function ComExit ( unit ) ; var tmp ; begin
59445: LD_INT 0
59447: PPUSH
59448: PPUSH
// if not IsInUnit ( unit ) then
59449: LD_VAR 0 1
59453: PPUSH
59454: CALL_OW 310
59458: NOT
59459: IFFALSE 59463
// exit ;
59461: GO 59523
// tmp := IsInUnit ( unit ) ;
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: LD_VAR 0 1
59472: PPUSH
59473: CALL_OW 310
59477: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59478: LD_VAR 0 3
59482: PPUSH
59483: CALL_OW 247
59487: PUSH
59488: LD_INT 2
59490: EQUAL
59491: IFFALSE 59504
// ComExitVehicle ( unit ) else
59493: LD_VAR 0 1
59497: PPUSH
59498: CALL_OW 121
59502: GO 59513
// ComExitBuilding ( unit ) ;
59504: LD_VAR 0 1
59508: PPUSH
59509: CALL_OW 122
// result := tmp ;
59513: LD_ADDR_VAR 0 2
59517: PUSH
59518: LD_VAR 0 3
59522: ST_TO_ADDR
// end ;
59523: LD_VAR 0 2
59527: RET
// export function ResetHc ; begin
59528: LD_INT 0
59530: PPUSH
// InitHc ;
59531: CALL_OW 19
// hc_importance := 0 ;
59535: LD_ADDR_OWVAR 32
59539: PUSH
59540: LD_INT 0
59542: ST_TO_ADDR
// end ;
59543: LD_VAR 0 1
59547: RET
