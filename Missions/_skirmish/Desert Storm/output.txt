// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3550 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 4017 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7981 0 5
// PrepareComm ;
 110: CALL 8464 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3547
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 7053 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: IFFALSE 772
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 7053 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 7053 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: IFFALSE 849
 839: PUSH
 840: LD_EXP 23
 844: PUSH
 845: LD_INT 0
 847: GREATER
 848: AND
 849: IFFALSE 857
 851: PUSH
 852: LD_EXP 27
 856: AND
 857: IFFALSE 877
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 859: LD_ADDR_EXP 23
 863: PUSH
 864: LD_EXP 23
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL 7053 0 2
 876: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 877: LD_EXP 39
 881: IFFALSE 893
 883: PUSH
 884: LD_EXP 24
 888: PUSH
 889: LD_INT 0
 891: GREATER
 892: AND
 893: IFFALSE 901
 895: PUSH
 896: LD_EXP 27
 900: AND
 901: IFFALSE 921
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 903: LD_ADDR_EXP 24
 907: PUSH
 908: LD_EXP 24
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL 7053 0 2
 920: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 921: LD_EXP 40
 925: IFFALSE 937
 927: PUSH
 928: LD_EXP 25
 932: PUSH
 933: LD_INT 0
 935: GREATER
 936: AND
 937: IFFALSE 945
 939: PUSH
 940: LD_EXP 27
 944: AND
 945: IFFALSE 965
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 947: LD_ADDR_EXP 25
 951: PUSH
 952: LD_EXP 25
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL 7053 0 2
 964: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 965: LD_EXP 43
 969: IFFALSE 981
 971: PUSH
 972: LD_EXP 31
 976: PUSH
 977: LD_INT 0
 979: GREATER
 980: AND
 981: IFFALSE 1018
// begin game_strings := [ #rtime , russian_timer ] ;
 983: LD_ADDR_EXP 6
 987: PUSH
 988: LD_STRING #rtime
 990: PUSH
 991: LD_EXP 31
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
1000: LD_ADDR_EXP 31
1004: PUSH
1005: LD_EXP 31
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL 7053 0 2
1017: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1018: LD_EXP 43
1022: IFFALSE 1034
1024: PUSH
1025: LD_EXP 31
1029: PUSH
1030: LD_INT 0
1032: EQUAL
1033: AND
1034: IFTRUE 1042
1036: PUSH
1037: LD_EXP 35
1041: OR
1042: IFFALSE 1051
// game_strings := [ ] ;
1044: LD_ADDR_EXP 6
1048: PUSH
1049: EMPTY
1050: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1051: LD_EXP 37
1055: PUSH
1056: LD_INT 0
1058: EQUAL
1059: IFFALSE 1075
1061: PUSH
1062: LD_OWVAR 1
1066: PUSH
1067: LD_INT 33600
1069: MOD
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: AND
1075: IFFALSE 1135
// begin p := Rand ( 1 , 5 ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_INT 5
1087: PPUSH
1088: CALL_OW 12
1092: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1093: LD_VAR 0 2
1097: PUSH
1098: LD_INT 4
1100: PUSH
1101: LD_INT 3
1103: PUSH
1104: LD_INT 3
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 2
1116: ARRAY
1117: LESSEQUAL
1118: IFFALSE 1135
// begin RaiseSailEvent ( 92 ) ;
1120: LD_INT 92
1122: PPUSH
1123: CALL_OW 427
// dezert := true ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1135: LD_OWVAR 1
1139: PUSH
1140: LD_INT 8400
1142: MOD
1143: PUSH
1144: LD_INT 0
1146: EQUAL
1147: IFFALSE 1156
// RaiseSailEvent ( 101 ) ;
1149: LD_INT 101
1151: PPUSH
1152: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1156: LD_INT 8
1158: PPUSH
1159: CALL 7107 0 1
1163: IFFALSE 1175
1165: PUSH
1166: LD_EXP 13
1170: PUSH
1171: LD_INT 0
1173: EQUAL
1174: AND
1175: IFFALSE 1192
// begin u_mine := true ;
1177: LD_ADDR_EXP 13
1181: PUSH
1182: LD_INT 1
1184: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1185: LD_STRING DS-T1m
1187: PPUSH
1188: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1192: LD_INT 8
1194: PPUSH
1195: CALL 7169 0 1
1199: IFFALSE 1211
1201: PUSH
1202: LD_EXP 14
1206: PUSH
1207: LD_INT 0
1209: EQUAL
1210: AND
1211: IFFALSE 1228
// begin u_fac := true ;
1213: LD_ADDR_EXP 14
1217: PUSH
1218: LD_INT 1
1220: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1221: LD_STRING DS-T1f
1223: PPUSH
1224: CALL_OW 337
// end ; if hero_died then
1228: LD_EXP 33
1232: IFFALSE 1241
// YouLost ( DS-h1 ) ;
1234: LD_STRING DS-h1
1236: PPUSH
1237: CALL_OW 104
// if fort_destroyed then
1241: LD_EXP 32
1245: IFFALSE 1254
// YouLost ( DS-h2 ) ;
1247: LD_STRING DS-h2
1249: PPUSH
1250: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1254: LD_EXP 7
1258: PPUSH
1259: LD_EXP 49
1263: PPUSH
1264: CALL_OW 296
1268: PUSH
1269: LD_INT 6
1271: GREATER
1272: IFFALSE 1284
1274: PUSH
1275: LD_EXP 26
1279: PUSH
1280: LD_INT 0
1282: EQUAL
1283: AND
1284: IFFALSE 1307
// begin if not HasTask ( leopold ) then
1286: LD_EXP 7
1290: PPUSH
1291: CALL_OW 314
1295: NOT
1296: IFFALSE 1305
// RaiseSailEvent ( 1 ) ;
1298: LD_INT 1
1300: PPUSH
1301: CALL_OW 427
// end else
1305: GO 1324
// if meeting_start = false then
1307: LD_EXP 26
1311: PUSH
1312: LD_INT 0
1314: EQUAL
1315: IFFALSE 1324
// begin RaiseSailEvent ( 2 ) ;
1317: LD_INT 2
1319: PPUSH
1320: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1324: LD_EXP 3
1328: PUSH
1329: LD_INT 105000
1331: PUSH
1332: LD_INT 131250
1334: PUSH
1335: LD_INT 151200
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: PUSH
1343: LD_EXP 2
1347: ARRAY
1348: GREATEREQUAL
1349: IFFALSE 1361
1351: PUSH
1352: LD_EXP 29
1356: PUSH
1357: LD_INT 0
1359: EQUAL
1360: AND
1361: IFFALSE 1378
// begin meeting_end := true ;
1363: LD_ADDR_EXP 29
1367: PUSH
1368: LD_INT 1
1370: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1371: LD_INT 200
1373: PPUSH
1374: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1378: LD_EXP 30
1382: PUSH
1383: LD_INT 0
1385: EQUAL
1386: IFFALSE 1398
1388: PUSH
1389: LD_EXP 27
1393: PUSH
1394: LD_INT 0
1396: EQUAL
1397: AND
1398: IFFALSE 1422
// begin meeting_arive := true ;
1400: LD_ADDR_EXP 27
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// game_strings := [ ] ;
1408: LD_ADDR_EXP 6
1412: PUSH
1413: EMPTY
1414: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1415: LD_INT 10
1417: PPUSH
1418: CALL_OW 427
// end ; if meeting_arive then
1422: LD_EXP 27
1426: IFFALSE 2259
// begin if arabian_attack = false and tick mod 4200 = 0 then
1428: LD_EXP 38
1432: PUSH
1433: LD_INT 0
1435: EQUAL
1436: IFFALSE 1452
1438: PUSH
1439: LD_OWVAR 1
1443: PUSH
1444: LD_INT 4200
1446: MOD
1447: PUSH
1448: LD_INT 0
1450: EQUAL
1451: AND
1452: IFFALSE 1505
// begin p := Rand ( 1 , 100 ) ;
1454: LD_ADDR_VAR 0 2
1458: PUSH
1459: LD_INT 1
1461: PPUSH
1462: LD_INT 100
1464: PPUSH
1465: CALL_OW 12
1469: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 85
1477: PUSH
1478: LD_INT 90
1480: PUSH
1481: LD_INT 95
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: PUSH
1489: LD_EXP 2
1493: ARRAY
1494: LESSEQUAL
1495: IFFALSE 1505
// arabian_attack := true ;
1497: LD_ADDR_EXP 38
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1505: LD_EXP 43
1509: PUSH
1510: LD_INT 0
1512: EQUAL
1513: IFFALSE 1525
1515: PUSH
1516: LD_EXP 39
1520: PUSH
1521: LD_INT 0
1523: EQUAL
1524: AND
1525: IFFALSE 1537
1527: PUSH
1528: LD_OWVAR 1
1532: PUSH
1533: LD_INT 52500
1535: GREATER
1536: AND
1537: IFFALSE 1608
// begin russian_trade = true ;
1539: LD_ADDR_EXP 43
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// DialogueOn ;
1547: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1551: LD_EXP 47
1555: PPUSH
1556: LD_STRING DS-DR-RTr
1558: PPUSH
1559: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1563: LD_EXP 49
1567: PPUSH
1568: LD_STRING DS-DC-RTr
1570: PPUSH
1571: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1575: LD_EXP 47
1579: PPUSH
1580: LD_STRING DS-DR-RTr2
1582: PPUSH
1583: CALL_OW 94
// DialogueOff ;
1587: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1591: LD_STRING DS-T2
1593: PPUSH
1594: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1608: LD_EXP 43
1612: IFFALSE 1624
1614: PUSH
1615: LD_EXP 35
1619: PUSH
1620: LD_INT 0
1622: EQUAL
1623: AND
1624: IFFALSE 1636
1626: PUSH
1627: LD_EXP 31
1631: PUSH
1632: LD_INT 0
1634: GREATER
1635: AND
1636: IFFALSE 1885
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1638: LD_INT 10
1640: PPUSH
1641: LD_INT 58
1643: PUSH
1644: EMPTY
1645: LIST
1646: PUSH
1647: LD_INT 2
1649: PUSH
1650: LD_INT 34
1652: PUSH
1653: LD_INT 32
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 34
1662: PUSH
1663: LD_INT 12
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 3
1677: PUSH
1678: LD_INT 33
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PPUSH
1697: CALL_OW 70
1701: PUSH
1702: LD_INT 0
1704: GREATER
1705: IFFALSE 1885
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1707: LD_INT 10
1709: PPUSH
1710: LD_INT 58
1712: PUSH
1713: EMPTY
1714: LIST
1715: PUSH
1716: LD_INT 2
1718: PUSH
1719: LD_INT 34
1721: PUSH
1722: LD_INT 32
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 34
1731: PUSH
1732: LD_INT 12
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 3
1746: PUSH
1747: LD_INT 33
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PPUSH
1766: CALL_OW 70
1770: PUSH
1771: LD_INT 1
1773: ARRAY
1774: PPUSH
1775: LD_INT 3
1777: PPUSH
1778: CALL_OW 289
1782: PUSH
1783: LD_INT 100
1785: EQUAL
1786: IFFALSE 1885
// begin cargo_ok := true ;
1788: LD_ADDR_EXP 35
1792: PUSH
1793: LD_INT 1
1795: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1796: LD_INT 10
1798: PPUSH
1799: LD_INT 58
1801: PUSH
1802: EMPTY
1803: LIST
1804: PUSH
1805: LD_INT 2
1807: PUSH
1808: LD_INT 34
1810: PUSH
1811: LD_INT 32
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 34
1820: PUSH
1821: LD_INT 12
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: LD_INT 33
1838: PUSH
1839: LD_INT 2
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PPUSH
1855: CALL_OW 70
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PPUSH
1864: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1868: LD_STRING DS-T2-out
1870: PPUSH
1871: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1875: LD_INT 10
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1885: LD_EXP 39
1889: PUSH
1890: LD_INT 0
1892: EQUAL
1893: IFFALSE 1901
1895: PUSH
1896: LD_EXP 43
1900: AND
1901: IFFALSE 1913
1903: PUSH
1904: LD_EXP 35
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: AND
1913: IFFALSE 1925
1915: PUSH
1916: LD_EXP 31
1920: PUSH
1921: LD_INT 0
1923: EQUAL
1924: AND
1925: IFFALSE 1952
// begin russian_attack := true ;
1927: LD_ADDR_EXP 39
1931: PUSH
1932: LD_INT 1
1934: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1935: LD_STRING DS-T2-out
1937: PPUSH
1938: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1942: LD_INT 10
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1952: LD_EXP 43
1956: PUSH
1957: LD_INT 0
1959: EQUAL
1960: IFFALSE 1972
1962: PUSH
1963: LD_EXP 39
1967: PUSH
1968: LD_INT 0
1970: EQUAL
1971: AND
1972: IFFALSE 1984
1974: PUSH
1975: LD_EXP 40
1979: PUSH
1980: LD_INT 0
1982: EQUAL
1983: AND
1984: IFFALSE 2000
1986: PUSH
1987: LD_OWVAR 1
1991: PUSH
1992: LD_INT 21000
1994: MOD
1995: PUSH
1996: LD_INT 0
1998: EQUAL
1999: AND
2000: IFFALSE 2053
// begin p := Rand ( 1 , 100 ) ;
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: LD_INT 1
2009: PPUSH
2010: LD_INT 100
2012: PPUSH
2013: CALL_OW 12
2017: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
2018: LD_VAR 0 2
2022: PUSH
2023: LD_INT 35
2025: PUSH
2026: LD_INT 45
2028: PUSH
2029: LD_INT 55
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: PUSH
2037: LD_EXP 2
2041: ARRAY
2042: LESSEQUAL
2043: IFFALSE 2053
// russian_attack := true ;
2045: LD_ADDR_EXP 39
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2053: LD_EXP 41
2057: PUSH
2058: LD_INT 0
2060: EQUAL
2061: IFFALSE 2073
2063: PUSH
2064: LD_EXP 40
2068: PUSH
2069: LD_INT 0
2071: EQUAL
2072: AND
2073: IFFALSE 2085
2075: PUSH
2076: LD_EXP 39
2080: PUSH
2081: LD_INT 0
2083: EQUAL
2084: AND
2085: IFFALSE 2101
2087: PUSH
2088: LD_OWVAR 1
2092: PUSH
2093: LD_INT 31500
2095: MOD
2096: PUSH
2097: LD_INT 0
2099: EQUAL
2100: AND
2101: IFFALSE 2154
// begin p := Rand ( 1 , 100 ) ;
2103: LD_ADDR_VAR 0 2
2107: PUSH
2108: LD_INT 1
2110: PPUSH
2111: LD_INT 100
2113: PPUSH
2114: CALL_OW 12
2118: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2119: LD_VAR 0 2
2123: PUSH
2124: LD_INT 33
2126: PUSH
2127: LD_INT 44
2129: PUSH
2130: LD_INT 55
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_EXP 2
2142: ARRAY
2143: LESSEQUAL
2144: IFFALSE 2154
// american_attack := true ;
2146: LD_ADDR_EXP 40
2150: PUSH
2151: LD_INT 1
2153: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2154: LD_EXP 40
2158: PUSH
2159: LD_INT 0
2161: EQUAL
2162: IFFALSE 2174
2164: PUSH
2165: LD_EXP 39
2169: PUSH
2170: LD_INT 0
2172: EQUAL
2173: AND
2174: IFFALSE 2186
2176: PUSH
2177: LD_EXP 41
2181: PUSH
2182: LD_INT 0
2184: EQUAL
2185: AND
2186: IFFALSE 2202
2188: PUSH
2189: LD_OWVAR 1
2193: PUSH
2194: LD_INT 21200
2196: MOD
2197: PUSH
2198: LD_INT 0
2200: EQUAL
2201: AND
2202: IFFALSE 2259
// begin p := Rand ( 1 , 100 ) ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 100
2214: PPUSH
2215: CALL_OW 12
2219: ST_TO_ADDR
// if p <= american_hchan then
2220: LD_VAR 0 2
2224: PUSH
2225: LD_EXP 36
2229: LESSEQUAL
2230: IFFALSE 2259
// begin american_help := true ;
2232: LD_ADDR_EXP 41
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2240: LD_EXP 46
2244: PPUSH
2245: LD_STRING DS-amhelp
2247: PPUSH
2248: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2252: LD_INT 91
2254: PPUSH
2255: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2259: LD_EXP 40
2263: IFFALSE 2275
2265: PUSH
2266: LD_EXP 25
2270: PUSH
2271: LD_INT 0
2273: EQUAL
2274: AND
2275: IFFALSE 2297
2277: PUSH
2278: LD_INT 22
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PPUSH
2288: CALL_OW 69
2292: PUSH
2293: LD_INT 0
2295: EQUAL
2296: AND
2297: IFFALSE 2399
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2299: LD_ADDR_EXP 25
2303: PUSH
2304: LD_INT 35700
2306: PPUSH
2307: LD_INT 42000
2309: PPUSH
2310: CALL_OW 12
2314: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2315: LD_EXP 12
2319: PPUSH
2320: LD_STRING DS-DZ-U
2322: PPUSH
2323: CALL_OW 94
// Wait ( 0 0$33 ) ;
2327: LD_INT 1155
2329: PPUSH
2330: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 1
2341: PPUSH
2342: LD_INT 2
2344: PPUSH
2345: CALL_OW 12
2349: ST_TO_ADDR
// case x of 1 :
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 1
2357: DOUBLE
2358: EQUAL
2359: IFTRUE 2363
2361: GO 2373
2363: POP
// RaiseSailEvent ( 41 ) ; 2 :
2364: LD_INT 41
2366: PPUSH
2367: CALL_OW 427
2371: GO 2392
2373: LD_INT 2
2375: DOUBLE
2376: EQUAL
2377: IFTRUE 2381
2379: GO 2391
2381: POP
// RaiseSailEvent ( 42 ) ; end ;
2382: LD_INT 42
2384: PPUSH
2385: CALL_OW 427
2389: GO 2392
2391: POP
// RaiseSailEvent ( 42 ) ;
2392: LD_INT 42
2394: PPUSH
2395: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2399: LD_EXP 39
2403: IFFALSE 2415
2405: PUSH
2406: LD_EXP 24
2410: PUSH
2411: LD_INT 0
2413: EQUAL
2414: AND
2415: IFFALSE 2437
2417: PUSH
2418: LD_INT 22
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: PUSH
2433: LD_INT 0
2435: EQUAL
2436: AND
2437: IFFALSE 2493
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2439: LD_ADDR_EXP 24
2443: PUSH
2444: LD_INT 35700
2446: PPUSH
2447: LD_INT 42000
2449: PPUSH
2450: CALL_OW 12
2454: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2455: LD_EXP 12
2459: PPUSH
2460: LD_STRING DS-DZ-R
2462: PPUSH
2463: CALL_OW 94
// Wait ( 0 0$45 ) ;
2467: LD_INT 1575
2469: PPUSH
2470: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2474: LD_EXP 47
2478: PPUSH
2479: LD_STRING DS-DR-R1
2481: PPUSH
2482: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2486: LD_INT 51
2488: PPUSH
2489: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2493: LD_EXP 34
2497: PUSH
2498: LD_INT 52500
2500: GREATEREQUAL
2501: IFFALSE 2513
2503: PUSH
2504: LD_EXP 20
2508: PUSH
2509: LD_INT 10
2511: LESS
2512: AND
2513: IFFALSE 2537
// begin mission_time := 0 0$00 ;
2515: LD_ADDR_EXP 34
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2523: LD_ADDR_EXP 20
2527: PUSH
2528: LD_EXP 20
2532: PUSH
2533: LD_INT 1
2535: PLUS
2536: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2537: LD_EXP 23
2541: PUSH
2542: LD_INT 0
2544: EQUAL
2545: IFFALSE 2588
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 2
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: LD_INT 34
2563: PUSH
2564: LD_INT 31
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 69
2583: PUSH
2584: LD_INT 0
2586: EQUAL
2587: AND
2588: IFFALSE 2786
// begin arabian_timeing := 7 7$30 ;
2590: LD_ADDR_EXP 23
2594: PUSH
2595: LD_INT 15750
2597: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 3
2608: PPUSH
2609: CALL_OW 12
2613: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2614: LD_EXP 12
2618: PPUSH
2619: LD_STRING DS-DZ-H
2621: PPUSH
2622: CALL_OW 94
// case x of 1 :
2626: LD_VAR 0 3
2630: PUSH
2631: LD_INT 1
2633: DOUBLE
2634: EQUAL
2635: IFTRUE 2639
2637: GO 2649
2639: POP
// RaiseSailEvent ( 31 ) ; 2 :
2640: LD_INT 31
2642: PPUSH
2643: CALL_OW 427
2647: GO 2686
2649: LD_INT 2
2651: DOUBLE
2652: EQUAL
2653: IFTRUE 2657
2655: GO 2667
2657: POP
// RaiseSailEvent ( 32 ) ; 3 :
2658: LD_INT 32
2660: PPUSH
2661: CALL_OW 427
2665: GO 2686
2667: LD_INT 3
2669: DOUBLE
2670: EQUAL
2671: IFTRUE 2675
2673: GO 2685
2675: POP
// RaiseSailEvent ( 33 ) ; end ;
2676: LD_INT 33
2678: PPUSH
2679: CALL_OW 427
2683: GO 2686
2685: POP
// RaiseSailEvent ( 33 ) ;
2686: LD_INT 33
2688: PPUSH
2689: CALL_OW 427
// if game_difficulty > 1 then
2693: LD_EXP 2
2697: PUSH
2698: LD_INT 1
2700: GREATER
2701: IFFALSE 2710
// RaiseSailEvent ( 33 ) ;
2703: LD_INT 33
2705: PPUSH
2706: CALL_OW 427
// if heike_dialog1 = false then
2710: LD_EXP 44
2714: PUSH
2715: LD_INT 0
2717: EQUAL
2718: IFFALSE 2749
// begin heike_dialog1 := true ;
2720: LD_ADDR_EXP 44
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2728: LD_INT 105
2730: PPUSH
2731: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2735: LD_EXP 48
2739: PPUSH
2740: LD_STRING heike1
2742: PPUSH
2743: CALL_OW 94
// end else
2747: GO 2786
// if heike_dialog2 = false then
2749: LD_EXP 45
2753: PUSH
2754: LD_INT 0
2756: EQUAL
2757: IFFALSE 2786
// begin heike_dialog2 := true ;
2759: LD_ADDR_EXP 45
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2767: LD_INT 105
2769: PPUSH
2770: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2774: LD_EXP 48
2778: PPUSH
2779: LD_STRING heike2
2781: PPUSH
2782: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 33
2798: PUSH
2799: LD_INT 2
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 69
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: IFFALSE 2827
// ConnectWithTower ( 2 ) ;
2820: LD_INT 2
2822: PPUSH
2823: CALL 7217 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2827: LD_INT 22
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: LD_INT 3
2839: PUSH
2840: LD_INT 34
2842: PUSH
2843: LD_INT 31
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 3
2856: PUSH
2857: LD_INT 60
2859: PUSH
2860: EMPTY
2861: LIST
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: LIST
2871: PUSH
2872: EMPTY
2873: LIST
2874: PPUSH
2875: CALL_OW 69
2879: PUSH
2880: LD_INT 0
2882: GREATER
2883: IFFALSE 3029
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2885: LD_ADDR_VAR 0 4
2889: PUSH
2890: LD_INT 22
2892: PUSH
2893: LD_INT 2
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 3
2902: PUSH
2903: LD_INT 34
2905: PUSH
2906: LD_INT 31
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 3
2919: PUSH
2920: LD_INT 60
2922: PUSH
2923: EMPTY
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: PPUSH
2938: CALL_OW 69
2942: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2943: LD_ADDR_VAR 0 3
2947: PUSH
2948: LD_INT 81
2950: PUSH
2951: LD_INT 2
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: CALL_OW 69
2962: PPUSH
2963: LD_INT 20
2965: PPUSH
2966: CALL 8614 0 2
2970: ST_TO_ADDR
// for i = 1 to filter do
2971: LD_ADDR_VAR 0 1
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_VAR 0 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3027
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2989: LD_VAR 0 4
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_VAR 0 4
3009: PUSH
3010: LD_VAR 0 1
3014: ARRAY
3015: PPUSH
3016: CALL_OW 74
3020: PPUSH
3021: CALL_OW 115
3025: GO 2986
3027: POP
3028: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3029: LD_INT 22
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: LD_INT 60
3044: PUSH
3045: EMPTY
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: EMPTY
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: LD_INT 0
3066: GREATER
3067: IFFALSE 3213
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3069: LD_ADDR_VAR 0 4
3073: PUSH
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 34
3089: PUSH
3090: LD_INT 31
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: LD_INT 60
3106: PUSH
3107: EMPTY
3108: LIST
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3127: LD_ADDR_VAR 0 3
3131: PUSH
3132: LD_INT 81
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: PPUSH
3147: LD_INT 20
3149: PPUSH
3150: CALL 8614 0 2
3154: ST_TO_ADDR
// for i = 1 to filter do
3155: LD_ADDR_VAR 0 1
3159: PUSH
3160: DOUBLE
3161: LD_INT 1
3163: DEC
3164: ST_TO_ADDR
3165: LD_VAR 0 4
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3211
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3173: LD_VAR 0 4
3177: PUSH
3178: LD_VAR 0 1
3182: ARRAY
3183: PPUSH
3184: LD_VAR 0 3
3188: PPUSH
3189: LD_VAR 0 4
3193: PUSH
3194: LD_VAR 0 1
3198: ARRAY
3199: PPUSH
3200: CALL_OW 74
3204: PPUSH
3205: CALL_OW 115
3209: GO 3170
3211: POP
3212: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 3
3225: PUSH
3226: LD_INT 60
3228: PUSH
3229: EMPTY
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: PPUSH
3243: CALL_OW 69
3247: PUSH
3248: LD_INT 0
3250: GREATER
3251: IFFALSE 3397
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3253: LD_ADDR_VAR 0 4
3257: PUSH
3258: LD_INT 22
3260: PUSH
3261: LD_INT 1
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: LD_INT 34
3273: PUSH
3274: LD_INT 31
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: PUSH
3303: EMPTY
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: LD_INT 81
3318: PUSH
3319: LD_INT 1
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PPUSH
3326: CALL_OW 69
3330: PPUSH
3331: LD_INT 20
3333: PPUSH
3334: CALL 8614 0 2
3338: ST_TO_ADDR
// for i = 1 to filter do
3339: LD_ADDR_VAR 0 1
3343: PUSH
3344: DOUBLE
3345: LD_INT 1
3347: DEC
3348: ST_TO_ADDR
3349: LD_VAR 0 4
3353: PUSH
3354: FOR_TO
3355: IFFALSE 3395
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3357: LD_VAR 0 4
3361: PUSH
3362: LD_VAR 0 1
3366: ARRAY
3367: PPUSH
3368: LD_VAR 0 3
3372: PPUSH
3373: LD_VAR 0 4
3377: PUSH
3378: LD_VAR 0 1
3382: ARRAY
3383: PPUSH
3384: CALL_OW 74
3388: PPUSH
3389: CALL_OW 115
3393: GO 3354
3395: POP
3396: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3397: LD_INT 22
3399: PUSH
3400: LD_INT 2
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PUSH
3407: LD_INT 34
3409: PUSH
3410: LD_INT 91
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 3
3419: PUSH
3420: LD_INT 24
3422: PUSH
3423: LD_INT 700
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: EMPTY
3440: LIST
3441: PPUSH
3442: CALL_OW 69
3446: PUSH
3447: LD_INT 0
3449: GREATER
3450: IFFALSE 3547
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3452: LD_ADDR_VAR 0 4
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_INT 2
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 34
3469: PUSH
3470: LD_INT 91
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 3
3479: PUSH
3480: LD_INT 24
3482: PUSH
3483: LD_INT 700
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: PPUSH
3502: CALL_OW 69
3506: ST_TO_ADDR
// for i = 1 to filter do
3507: LD_ADDR_VAR 0 1
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_VAR 0 4
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3545
// SetLives ( filter [ i ] , 1 ) ;
3525: LD_VAR 0 4
3529: PUSH
3530: LD_VAR 0 1
3534: ARRAY
3535: PPUSH
3536: LD_INT 1
3538: PPUSH
3539: CALL_OW 234
3543: GO 3522
3545: POP
3546: POP
// end ; end ; end_of_file
3547: PPOPN 4
3549: END
// export function Start_Mission ; begin
3550: LD_INT 0
3552: PPUSH
// PrepareLegion ;
3553: CALL 3594 0 0
// PrepareMeeting ;
3557: CALL 4211 0 0
// case Query ( DS-text-beg ) of 1 :
3561: LD_STRING DS-text-beg
3563: PPUSH
3564: CALL_OW 97
3568: PUSH
3569: LD_INT 1
3571: DOUBLE
3572: EQUAL
3573: IFTRUE 3577
3575: GO 3580
3577: POP
// ; end ;
3578: GO 3581
3580: POP
// game_on := true ;
3581: LD_ADDR_EXP 1
3585: PUSH
3586: LD_INT 1
3588: ST_TO_ADDR
// end ;
3589: LD_VAR 0 1
3593: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3594: LD_INT 0
3596: PPUSH
3597: PPUSH
3598: PPUSH
3599: PPUSH
3600: PPUSH
// uc_side := 8 ;
3601: LD_ADDR_OWVAR 20
3605: PUSH
3606: LD_INT 8
3608: ST_TO_ADDR
// uc_nation := 2 ;
3609: LD_ADDR_OWVAR 21
3613: PUSH
3614: LD_INT 2
3616: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3617: LD_ADDR_EXP 50
3621: PUSH
3622: LD_INT 9
3624: PUSH
3625: LD_INT 8
3627: PUSH
3628: LD_INT 7
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: PUSH
3636: LD_OWVAR 67
3640: ARRAY
3641: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3642: LD_ADDR_EXP 51
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 8
3652: PUSH
3653: LD_INT 8
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_OWVAR 67
3665: ARRAY
3666: ST_TO_ADDR
// filter := [ ] ;
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: EMPTY
3673: ST_TO_ADDR
// hc_gallery := desert ;
3674: LD_ADDR_OWVAR 33
3678: PUSH
3679: LD_STRING desert
3681: ST_TO_ADDR
// hc_face_number := 1 ;
3682: LD_ADDR_OWVAR 34
3686: PUSH
3687: LD_INT 1
3689: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3690: LD_ADDR_OWVAR 31
3694: PUSH
3695: LD_EXP 50
3699: PUSH
3700: LD_INT 2
3702: PLUS
3703: PUSH
3704: LD_EXP 50
3708: PUSH
3709: LD_INT 1
3711: MINUS
3712: PUSH
3713: LD_EXP 50
3717: PUSH
3718: LD_EXP 50
3722: PUSH
3723: LD_INT 1
3725: PLUS
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: ST_TO_ADDR
// hc_sex := sex_male ;
3733: LD_ADDR_OWVAR 27
3737: PUSH
3738: LD_INT 1
3740: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3741: LD_ADDR_OWVAR 26
3745: PUSH
3746: LD_STRING Henri Ruotz
3748: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3749: LD_ADDR_OWVAR 29
3753: PUSH
3754: LD_INT 10
3756: PUSH
3757: LD_INT 10
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: ST_TO_ADDR
// hc_class := 1 ;
3764: LD_ADDR_OWVAR 28
3768: PUSH
3769: LD_INT 1
3771: ST_TO_ADDR
// hc_importance := 100 ;
3772: LD_ADDR_OWVAR 32
3776: PUSH
3777: LD_INT 100
3779: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3780: LD_ADDR_EXP 49
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// hc_importance := 0 ;
3790: LD_ADDR_OWVAR 32
3794: PUSH
3795: LD_INT 0
3797: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3798: LD_ADDR_EXP 12
3802: PUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 0
3811: PPUSH
3812: CALL_OW 380
3816: ST_TO_ADDR
// for i = 1 to 4 do
3817: LD_ADDR_VAR 0 2
3821: PUSH
3822: DOUBLE
3823: LD_INT 1
3825: DEC
3826: ST_TO_ADDR
3827: LD_INT 4
3829: PUSH
3830: FOR_TO
3831: IFFALSE 3881
// for p = 1 to 6 do
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: DOUBLE
3839: LD_INT 1
3841: DEC
3842: ST_TO_ADDR
3843: LD_INT 6
3845: PUSH
3846: FOR_TO
3847: IFFALSE 3877
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 4
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: LD_EXP 50
3868: PPUSH
3869: CALL 7403 0 2
3873: ADD
3874: ST_TO_ADDR
3875: GO 3846
3877: POP
3878: POP
3879: GO 3830
3881: POP
3882: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: LD_STRING text
3890: PPUSH
3891: LD_EXP 51
3895: PPUSH
3896: LD_EXP 51
3900: PPUSH
3901: LD_INT -5
3903: PUSH
3904: LD_EXP 49
3908: PUSH
3909: LD_INT -3
3911: PUSH
3912: LD_INT -2
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: LD_VAR 0 4
3925: ADD
3926: PPUSH
3927: LD_INT 1
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: LD_INT 2
3935: PUSH
3936: LD_INT 4
3938: PUSH
3939: LD_INT 8
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 42
3953: ST_TO_ADDR
// for i = 1 to l_units do
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: DOUBLE
3960: LD_INT 1
3962: DEC
3963: ST_TO_ADDR
3964: LD_EXP 51
3968: PUSH
3969: FOR_TO
3970: IFFALSE 3995
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3972: LD_VAR 0 5
3976: PUSH
3977: LD_VAR 0 2
3981: ARRAY
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL_OW 49
3993: GO 3969
3995: POP
3996: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3997: LD_EXP 49
4001: PPUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 49
// end ;
4012: LD_VAR 0 1
4016: RET
// export function PlaceCamera ; begin
4017: LD_INT 0
4019: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
4020: LD_INT 46
4022: PPUSH
4023: LD_INT 48
4025: PPUSH
4026: LD_INT 8
4028: PPUSH
4029: LD_INT 10
4031: PPUSH
4032: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
4036: LD_INT 58
4038: PPUSH
4039: LD_INT 66
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
4052: LD_INT 82
4054: PPUSH
4055: LD_INT 82
4057: PPUSH
4058: LD_INT 8
4060: PPUSH
4061: LD_INT 10
4063: PPUSH
4064: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
4068: LD_INT 107
4070: PPUSH
4071: LD_INT 79
4073: PPUSH
4074: LD_INT 8
4076: PPUSH
4077: LD_INT 10
4079: PPUSH
4080: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4084: LD_INT 101
4086: PPUSH
4087: LD_INT 57
4089: PPUSH
4090: LD_INT 8
4092: PPUSH
4093: LD_INT 10
4095: PPUSH
4096: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4100: LD_INT 85
4102: PPUSH
4103: LD_INT 32
4105: PPUSH
4106: LD_INT 8
4108: PPUSH
4109: LD_INT 10
4111: PPUSH
4112: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4116: LD_INT 108
4118: PPUSH
4119: LD_INT 72
4121: PPUSH
4122: LD_INT 8
4124: PPUSH
4125: LD_INT 10
4127: PPUSH
4128: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4132: LD_INT 124
4134: PPUSH
4135: LD_INT 74
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: LD_INT 10
4143: PPUSH
4144: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4148: LD_INT 67
4150: PPUSH
4151: LD_INT 33
4153: PPUSH
4154: LD_INT 8
4156: PPUSH
4157: LD_INT 20
4159: PPUSH
4160: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4164: LD_INT 67
4166: PPUSH
4167: LD_INT 33
4169: PPUSH
4170: LD_INT 8
4172: PPUSH
4173: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4177: LD_INT 94
4179: PPUSH
4180: LD_INT 84
4182: PPUSH
4183: LD_INT 8
4185: PPUSH
4186: LD_INT 20
4188: PPUSH
4189: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4193: LD_INT 94
4195: PPUSH
4196: LD_INT 84
4198: PPUSH
4199: LD_INT 8
4201: PPUSH
4202: CALL_OW 331
// end ;
4206: LD_VAR 0 1
4210: RET
// export function PrepareMeeting ; begin
4211: LD_INT 0
4213: PPUSH
// uc_side := 6 ;
4214: LD_ADDR_OWVAR 20
4218: PUSH
4219: LD_INT 6
4221: ST_TO_ADDR
// hc_gallery := desert ;
4222: LD_ADDR_OWVAR 33
4226: PUSH
4227: LD_STRING desert
4229: ST_TO_ADDR
// hc_face_number := 2 ;
4230: LD_ADDR_OWVAR 34
4234: PUSH
4235: LD_INT 2
4237: ST_TO_ADDR
// hc_name := Leopold Drass ;
4238: LD_ADDR_OWVAR 26
4242: PUSH
4243: LD_STRING Leopold Drass
4245: ST_TO_ADDR
// hc_class := 1 ;
4246: LD_ADDR_OWVAR 28
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_sex := sex_male ;
4254: LD_ADDR_OWVAR 27
4258: PUSH
4259: LD_INT 1
4261: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4262: LD_ADDR_OWVAR 29
4266: PUSH
4267: LD_INT 12
4269: PUSH
4270: LD_INT 12
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// Leopold := CreateHuman ;
4277: LD_ADDR_EXP 7
4281: PUSH
4282: CALL_OW 44
4286: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4287: LD_EXP 7
4291: PPUSH
4292: LD_INT 3
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL_OW 49
// end ; end_of_file
4302: LD_VAR 0 1
4306: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4307: LD_INT 0
4309: PPUSH
4310: PPUSH
4311: PPUSH
4312: PPUSH
4313: PPUSH
// begin case num of 1 :
4314: LD_VAR 0 1
4318: PUSH
4319: LD_INT 1
4321: DOUBLE
4322: EQUAL
4323: IFTRUE 4327
4325: GO 4359
4327: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4328: LD_EXP 7
4332: PPUSH
4333: LD_EXP 49
4337: PPUSH
4338: CALL_OW 250
4342: PPUSH
4343: LD_EXP 49
4347: PPUSH
4348: CALL_OW 251
4352: PPUSH
4353: CALL_OW 111
// end ; 2 :
4357: GO 6777
4359: LD_INT 2
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4367
4365: GO 4476
4367: POP
// begin InGameOn ;
4368: CALL_OW 8
// meeting_start := true ;
4372: LD_ADDR_EXP 26
4376: PUSH
4377: LD_INT 1
4379: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4380: LD_EXP 7
4384: PPUSH
4385: LD_EXP 49
4389: PPUSH
4390: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4394: LD_EXP 49
4398: PPUSH
4399: LD_EXP 7
4403: PPUSH
4404: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4408: LD_EXP 7
4412: PPUSH
4413: LD_STRING DS-DL-1
4415: PPUSH
4416: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4420: LD_EXP 49
4424: PPUSH
4425: LD_STRING DS-DC-1
4427: PPUSH
4428: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4432: LD_EXP 7
4436: PPUSH
4437: LD_STRING DS-DL-2
4439: PPUSH
4440: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4444: LD_EXP 7
4448: PPUSH
4449: LD_INT 23
4451: PPUSH
4452: CALL_OW 120
// InGameOff ;
4456: CALL_OW 9
// Wait ( 0 0$01 ) ;
4460: LD_INT 35
4462: PPUSH
4463: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4467: LD_STRING DS-T1
4469: PPUSH
4470: CALL_OW 337
// end ; 10 :
4474: GO 6777
4476: LD_INT 10
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4696
4484: POP
// begin uc_side := 6 ;
4485: LD_ADDR_OWVAR 20
4489: PUSH
4490: LD_INT 6
4492: ST_TO_ADDR
// uc_nation := 2 ;
4493: LD_ADDR_OWVAR 21
4497: PUSH
4498: LD_INT 2
4500: ST_TO_ADDR
// hc_gallery :=  ;
4501: LD_ADDR_OWVAR 33
4505: PUSH
4506: LD_STRING 
4508: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4509: LD_ADDR_OWVAR 31
4513: PUSH
4514: LD_EXP 16
4518: PUSH
4519: LD_INT 2
4521: PLUS
4522: PUSH
4523: LD_EXP 16
4527: PUSH
4528: LD_INT 1
4530: MINUS
4531: PUSH
4532: LD_EXP 16
4536: PUSH
4537: LD_EXP 16
4541: PUSH
4542: LD_INT 1
4544: PLUS
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: ST_TO_ADDR
// hc_sex := sex_male ;
4552: LD_ADDR_OWVAR 27
4556: PUSH
4557: LD_INT 1
4559: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4560: LD_ADDR_OWVAR 26
4564: PUSH
4565: LD_STRING Samuel van Horn
4567: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4568: LD_ADDR_OWVAR 29
4572: PUSH
4573: LD_INT 11
4575: PUSH
4576: LD_INT 10
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: ST_TO_ADDR
// hc_class := 1 ;
4583: LD_ADDR_OWVAR 28
4587: PUSH
4588: LD_INT 1
4590: ST_TO_ADDR
// samuel := CreateHuman ;
4591: LD_ADDR_EXP 9
4595: PUSH
4596: CALL_OW 44
4600: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4601: LD_EXP 9
4605: PPUSH
4606: LD_INT 4
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 49
// for i = 1 to 3 do
4616: LD_ADDR_VAR 0 2
4620: PUSH
4621: DOUBLE
4622: LD_INT 1
4624: DEC
4625: ST_TO_ADDR
4626: LD_INT 3
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4657
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4632: LD_INT 8
4634: PPUSH
4635: LD_EXP 16
4639: PPUSH
4640: CALL 7403 0 2
4644: PPUSH
4645: LD_INT 4
4647: PPUSH
4648: LD_INT 0
4650: PPUSH
4651: CALL_OW 49
4655: GO 4629
4657: POP
4658: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4659: LD_INT 22
4661: PUSH
4662: LD_INT 6
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PPUSH
4669: CALL_OW 69
4673: PUSH
4674: LD_EXP 7
4678: PUSH
4679: LD_INT 23
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: DIFF
4686: PPUSH
4687: LD_INT 23
4689: PPUSH
4690: CALL_OW 120
// end ; 3 :
4694: GO 6777
4696: LD_INT 3
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4715
4704: POP
// begin arabian_attack := true ;
4705: LD_ADDR_EXP 38
4709: PUSH
4710: LD_INT 1
4712: ST_TO_ADDR
// end ; 4 :
4713: GO 6777
4715: LD_INT 4
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4734
4723: POP
// begin american_attack := true ;
4724: LD_ADDR_EXP 40
4728: PUSH
4729: LD_INT 1
4731: ST_TO_ADDR
// end ; 5 :
4732: GO 6777
4734: LD_INT 5
4736: DOUBLE
4737: EQUAL
4738: IFTRUE 4742
4740: GO 4753
4742: POP
// begin russian_attack := true ;
4743: LD_ADDR_EXP 39
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ; 31 :
4751: GO 6777
4753: LD_INT 31
4755: DOUBLE
4756: EQUAL
4757: IFTRUE 4761
4759: GO 5036
4761: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4762: LD_ADDR_VAR 0 6
4766: PUSH
4767: LD_EXP 15
4771: PUSH
4772: LD_INT 1
4774: PPUSH
4775: LD_EXP 15
4779: PPUSH
4780: CALL_OW 12
4784: ARRAY
4785: ST_TO_ADDR
// uc_side := 2 ;
4786: LD_ADDR_OWVAR 20
4790: PUSH
4791: LD_INT 2
4793: ST_TO_ADDR
// uc_nation := 2 ;
4794: LD_ADDR_OWVAR 21
4798: PUSH
4799: LD_INT 2
4801: ST_TO_ADDR
// for i = 1 to arabian_force do
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: DOUBLE
4808: LD_INT 1
4810: DEC
4811: ST_TO_ADDR
4812: LD_EXP 20
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4897
// begin vc_chassis := ar_half_tracked ;
4820: LD_ADDR_OWVAR 37
4824: PUSH
4825: LD_INT 14
4827: ST_TO_ADDR
// vc_engine := engine_siberite ;
4828: LD_ADDR_OWVAR 39
4832: PUSH
4833: LD_INT 3
4835: ST_TO_ADDR
// vc_control := control_remote ;
4836: LD_ADDR_OWVAR 38
4840: PUSH
4841: LD_INT 2
4843: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4844: LD_ADDR_OWVAR 40
4848: PUSH
4849: LD_EXP 17
4853: PUSH
4854: LD_INT 1
4856: PPUSH
4857: LD_EXP 17
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: ST_TO_ADDR
// un := CreateVehicle ;
4868: LD_ADDR_VAR 0 4
4872: PUSH
4873: CALL_OW 45
4877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4878: LD_VAR 0 4
4882: PPUSH
4883: LD_VAR 0 6
4887: PPUSH
4888: LD_INT 0
4890: PPUSH
4891: CALL_OW 49
// end ;
4895: GO 4817
4897: POP
4898: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4899: LD_INT 22
4901: PUSH
4902: LD_INT 2
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 33
4911: PUSH
4912: LD_INT 1
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: PUSH
4928: LD_INT 2
4930: LESS
4931: IFFALSE 5034
// for i = 1 to 2 do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: DOUBLE
4939: LD_INT 1
4941: DEC
4942: ST_TO_ADDR
4943: LD_INT 2
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5032
// begin vc_chassis := ar_half_tracked ;
4949: LD_ADDR_OWVAR 37
4953: PUSH
4954: LD_INT 14
4956: ST_TO_ADDR
// vc_engine := engine_siberite ;
4957: LD_ADDR_OWVAR 39
4961: PUSH
4962: LD_INT 3
4964: ST_TO_ADDR
// vc_control := control_manual ;
4965: LD_ADDR_OWVAR 38
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4973: LD_ADDR_OWVAR 40
4977: PUSH
4978: LD_INT 31
4980: ST_TO_ADDR
// un := CreateVehicle ;
4981: LD_ADDR_VAR 0 4
4985: PUSH
4986: CALL_OW 45
4990: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4991: LD_VAR 0 4
4995: PPUSH
4996: LD_VAR 0 6
5000: PPUSH
5001: LD_INT 0
5003: PPUSH
5004: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5008: LD_INT 3
5010: PPUSH
5011: LD_EXP 16
5015: PPUSH
5016: CALL 7403 0 2
5020: PPUSH
5021: LD_VAR 0 4
5025: PPUSH
5026: CALL_OW 52
// end ;
5030: GO 4946
5032: POP
5033: POP
// end ; 32 :
5034: GO 6777
5036: LD_INT 32
5038: DOUBLE
5039: EQUAL
5040: IFTRUE 5044
5042: GO 5417
5044: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5045: LD_ADDR_VAR 0 6
5049: PUSH
5050: LD_EXP 15
5054: PUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 15
5062: PPUSH
5063: CALL_OW 12
5067: ARRAY
5068: ST_TO_ADDR
// uc_side := 2 ;
5069: LD_ADDR_OWVAR 20
5073: PUSH
5074: LD_INT 2
5076: ST_TO_ADDR
// uc_nation := 2 ;
5077: LD_ADDR_OWVAR 21
5081: PUSH
5082: LD_INT 2
5084: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: DOUBLE
5091: LD_INT 1
5093: DEC
5094: ST_TO_ADDR
5095: LD_EXP 20
5099: PUSH
5100: LD_INT 2
5102: MINUS
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5188
// begin vc_chassis := ar_half_tracked ;
5107: LD_ADDR_OWVAR 37
5111: PUSH
5112: LD_INT 14
5114: ST_TO_ADDR
// vc_engine := engine_siberite ;
5115: LD_ADDR_OWVAR 39
5119: PUSH
5120: LD_INT 3
5122: ST_TO_ADDR
// vc_control := control_remote ;
5123: LD_ADDR_OWVAR 38
5127: PUSH
5128: LD_INT 2
5130: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5131: LD_ADDR_OWVAR 40
5135: PUSH
5136: LD_EXP 17
5140: PUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_EXP 17
5148: PUSH
5149: LD_INT 1
5151: MINUS
5152: PPUSH
5153: CALL_OW 12
5157: ARRAY
5158: ST_TO_ADDR
// un := CreateVehicle ;
5159: LD_ADDR_VAR 0 4
5163: PUSH
5164: CALL_OW 45
5168: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5169: LD_VAR 0 4
5173: PPUSH
5174: LD_VAR 0 6
5178: PPUSH
5179: LD_INT 0
5181: PPUSH
5182: CALL_OW 49
// end ;
5186: GO 5104
5188: POP
5189: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_INT 0
5202: PPUSH
5203: LD_INT 1
5205: PPUSH
5206: CALL_OW 12
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_EXP 2
5229: ARRAY
5230: PLUS
5231: PUSH
5232: FOR_TO
5233: IFFALSE 5270
// begin uc_nation := 0 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 0
5242: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5243: LD_INT 17
5245: PPUSH
5246: LD_EXP 16
5250: PPUSH
5251: CALL 7403 0 2
5255: PPUSH
5256: LD_VAR 0 6
5260: PPUSH
5261: LD_INT 0
5263: PPUSH
5264: CALL_OW 49
// end ;
5268: GO 5232
5270: POP
5271: POP
// uc_nation := 2 ;
5272: LD_ADDR_OWVAR 21
5276: PUSH
5277: LD_INT 2
5279: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5280: LD_INT 22
5282: PUSH
5283: LD_INT 2
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 33
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 69
5308: PUSH
5309: LD_INT 2
5311: LESS
5312: IFFALSE 5415
// for i = 1 to 2 do
5314: LD_ADDR_VAR 0 2
5318: PUSH
5319: DOUBLE
5320: LD_INT 1
5322: DEC
5323: ST_TO_ADDR
5324: LD_INT 2
5326: PUSH
5327: FOR_TO
5328: IFFALSE 5413
// begin vc_chassis := ar_half_tracked ;
5330: LD_ADDR_OWVAR 37
5334: PUSH
5335: LD_INT 14
5337: ST_TO_ADDR
// vc_engine := engine_siberite ;
5338: LD_ADDR_OWVAR 39
5342: PUSH
5343: LD_INT 3
5345: ST_TO_ADDR
// vc_control := control_manual ;
5346: LD_ADDR_OWVAR 38
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5354: LD_ADDR_OWVAR 40
5358: PUSH
5359: LD_INT 31
5361: ST_TO_ADDR
// un := CreateVehicle ;
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: CALL_OW 45
5371: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5372: LD_VAR 0 4
5376: PPUSH
5377: LD_VAR 0 6
5381: PPUSH
5382: LD_INT 0
5384: PPUSH
5385: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5389: LD_INT 3
5391: PPUSH
5392: LD_EXP 16
5396: PPUSH
5397: CALL 7403 0 2
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: GO 5327
5413: POP
5414: POP
// end ; 33 :
5415: GO 6777
5417: LD_INT 33
5419: DOUBLE
5420: EQUAL
5421: IFTRUE 5425
5423: GO 5696
5425: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5426: LD_ADDR_VAR 0 6
5430: PUSH
5431: LD_EXP 15
5435: PUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_EXP 15
5443: PPUSH
5444: CALL_OW 12
5448: ARRAY
5449: ST_TO_ADDR
// uc_side := 2 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 2
5457: ST_TO_ADDR
// uc_nation := 2 ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 2
5465: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_EXP 20
5480: PUSH
5481: LD_INT 2
5483: DIVREAL
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5591
// begin vc_chassis := ar_half_tracked ;
5488: LD_ADDR_OWVAR 37
5492: PUSH
5493: LD_INT 14
5495: ST_TO_ADDR
// vc_engine := engine_siberite ;
5496: LD_ADDR_OWVAR 39
5500: PUSH
5501: LD_INT 3
5503: ST_TO_ADDR
// vc_control := control_manual ;
5504: LD_ADDR_OWVAR 38
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5512: LD_ADDR_OWVAR 40
5516: PUSH
5517: LD_EXP 17
5521: PUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_EXP 17
5529: PUSH
5530: LD_INT 2
5532: MINUS
5533: PPUSH
5534: CALL_OW 12
5538: ARRAY
5539: ST_TO_ADDR
// un := CreateVehicle ;
5540: LD_ADDR_VAR 0 4
5544: PUSH
5545: CALL_OW 45
5549: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: LD_VAR 0 6
5559: PPUSH
5560: LD_INT 0
5562: PPUSH
5563: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5567: LD_INT 3
5569: PPUSH
5570: LD_EXP 16
5574: PPUSH
5575: CALL 7403 0 2
5579: PPUSH
5580: LD_VAR 0 4
5584: PPUSH
5585: CALL_OW 52
// end ;
5589: GO 5485
5591: POP
5592: POP
// for i = 1 to ( arabian_force / 2 ) do
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: DOUBLE
5599: LD_INT 1
5601: DEC
5602: ST_TO_ADDR
5603: LD_EXP 20
5607: PUSH
5608: LD_INT 2
5610: DIVREAL
5611: PUSH
5612: FOR_TO
5613: IFFALSE 5692
// begin vc_chassis := ar_half_tracked ;
5615: LD_ADDR_OWVAR 37
5619: PUSH
5620: LD_INT 14
5622: ST_TO_ADDR
// vc_engine := engine_siberite ;
5623: LD_ADDR_OWVAR 39
5627: PUSH
5628: LD_INT 3
5630: ST_TO_ADDR
// vc_control := control_apeman ;
5631: LD_ADDR_OWVAR 38
5635: PUSH
5636: LD_INT 5
5638: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5639: LD_ADDR_OWVAR 40
5643: PUSH
5644: LD_EXP 17
5648: PUSH
5649: LD_INT 2
5651: PPUSH
5652: LD_EXP 17
5656: PPUSH
5657: CALL_OW 12
5661: ARRAY
5662: ST_TO_ADDR
// un := CreateVehicle ;
5663: LD_ADDR_VAR 0 4
5667: PUSH
5668: CALL_OW 45
5672: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5673: LD_VAR 0 4
5677: PPUSH
5678: LD_VAR 0 6
5682: PPUSH
5683: LD_INT 0
5685: PPUSH
5686: CALL_OW 49
// end ;
5690: GO 5612
5692: POP
5693: POP
// end ; 41 :
5694: GO 6777
5696: LD_INT 41
5698: DOUBLE
5699: EQUAL
5700: IFTRUE 5704
5702: GO 5848
5704: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5705: LD_ADDR_VAR 0 6
5709: PUSH
5710: LD_EXP 15
5714: PUSH
5715: LD_INT 1
5717: PPUSH
5718: LD_EXP 15
5722: PPUSH
5723: CALL_OW 12
5727: ARRAY
5728: ST_TO_ADDR
// uc_side := 1 ;
5729: LD_ADDR_OWVAR 20
5733: PUSH
5734: LD_INT 1
5736: ST_TO_ADDR
// uc_nation := 1 ;
5737: LD_ADDR_OWVAR 21
5741: PUSH
5742: LD_INT 1
5744: ST_TO_ADDR
// for i = 1 to american_force do
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: DOUBLE
5751: LD_INT 1
5753: DEC
5754: ST_TO_ADDR
5755: LD_EXP 22
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5844
// begin vc_chassis := us_morphling ;
5763: LD_ADDR_OWVAR 37
5767: PUSH
5768: LD_INT 5
5770: ST_TO_ADDR
// vc_engine := engine_siberite ;
5771: LD_ADDR_OWVAR 39
5775: PUSH
5776: LD_INT 3
5778: ST_TO_ADDR
// vc_control := control_computer ;
5779: LD_ADDR_OWVAR 38
5783: PUSH
5784: LD_INT 3
5786: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5787: LD_ADDR_OWVAR 40
5791: PUSH
5792: LD_EXP 19
5796: PUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_EXP 19
5804: PUSH
5805: LD_INT 1
5807: MINUS
5808: PPUSH
5809: CALL_OW 12
5813: ARRAY
5814: ST_TO_ADDR
// un := CreateVehicle ;
5815: LD_ADDR_VAR 0 4
5819: PUSH
5820: CALL_OW 45
5824: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5825: LD_VAR 0 4
5829: PPUSH
5830: LD_VAR 0 6
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 49
// end ;
5842: GO 5760
5844: POP
5845: POP
// end ; 42 :
5846: GO 6777
5848: LD_INT 42
5850: DOUBLE
5851: EQUAL
5852: IFTRUE 5856
5854: GO 5996
5856: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5857: LD_ADDR_VAR 0 6
5861: PUSH
5862: LD_EXP 15
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_EXP 15
5874: PPUSH
5875: CALL_OW 12
5879: ARRAY
5880: ST_TO_ADDR
// uc_side := 1 ;
5881: LD_ADDR_OWVAR 20
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// uc_nation := 1 ;
5889: LD_ADDR_OWVAR 21
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// for i = 1 to american_force do
5897: LD_ADDR_VAR 0 2
5901: PUSH
5902: DOUBLE
5903: LD_INT 1
5905: DEC
5906: ST_TO_ADDR
5907: LD_EXP 22
5911: PUSH
5912: FOR_TO
5913: IFFALSE 5992
// begin vc_chassis := us_morphling ;
5915: LD_ADDR_OWVAR 37
5919: PUSH
5920: LD_INT 5
5922: ST_TO_ADDR
// vc_engine := engine_siberite ;
5923: LD_ADDR_OWVAR 39
5927: PUSH
5928: LD_INT 3
5930: ST_TO_ADDR
// vc_control := control_computer ;
5931: LD_ADDR_OWVAR 38
5935: PUSH
5936: LD_INT 3
5938: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5939: LD_ADDR_OWVAR 40
5943: PUSH
5944: LD_EXP 19
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 12
5961: ARRAY
5962: ST_TO_ADDR
// un := CreateVehicle ;
5963: LD_ADDR_VAR 0 4
5967: PUSH
5968: CALL_OW 45
5972: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5973: LD_VAR 0 4
5977: PPUSH
5978: LD_VAR 0 6
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 49
// end ;
5990: GO 5912
5992: POP
5993: POP
// end ; 51 :
5994: GO 6777
5996: LD_INT 51
5998: DOUBLE
5999: EQUAL
6000: IFTRUE 6004
6002: GO 6144
6004: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
6005: LD_ADDR_VAR 0 6
6009: PUSH
6010: LD_EXP 15
6014: PUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_EXP 15
6022: PPUSH
6023: CALL_OW 12
6027: ARRAY
6028: ST_TO_ADDR
// uc_side := 3 ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_INT 3
6036: ST_TO_ADDR
// uc_nation := 3 ;
6037: LD_ADDR_OWVAR 21
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
// for i = 1 to russian_force do
6045: LD_ADDR_VAR 0 2
6049: PUSH
6050: DOUBLE
6051: LD_INT 1
6053: DEC
6054: ST_TO_ADDR
6055: LD_EXP 21
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6140
// begin vc_chassis := ru_heavy_tracked ;
6063: LD_ADDR_OWVAR 37
6067: PUSH
6068: LD_INT 24
6070: ST_TO_ADDR
// vc_engine := engine_siberite ;
6071: LD_ADDR_OWVAR 39
6075: PUSH
6076: LD_INT 3
6078: ST_TO_ADDR
// vc_control := control_computer ;
6079: LD_ADDR_OWVAR 38
6083: PUSH
6084: LD_INT 3
6086: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6087: LD_ADDR_OWVAR 40
6091: PUSH
6092: LD_EXP 18
6096: PUSH
6097: LD_INT 1
6099: PPUSH
6100: LD_EXP 18
6104: PPUSH
6105: CALL_OW 12
6109: ARRAY
6110: ST_TO_ADDR
// un := CreateVehicle ;
6111: LD_ADDR_VAR 0 4
6115: PUSH
6116: CALL_OW 45
6120: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6121: LD_VAR 0 4
6125: PPUSH
6126: LD_VAR 0 6
6130: PPUSH
6131: LD_INT 0
6133: PPUSH
6134: CALL_OW 49
// end ;
6138: GO 6060
6140: POP
6141: POP
// end ; 91 :
6142: GO 6777
6144: LD_INT 91
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6152
6150: GO 6290
6152: POP
// begin uc_side := 8 ;
6153: LD_ADDR_OWVAR 20
6157: PUSH
6158: LD_INT 8
6160: ST_TO_ADDR
// uc_nation := 1 ;
6161: LD_ADDR_OWVAR 21
6165: PUSH
6166: LD_INT 1
6168: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: DOUBLE
6175: LD_INT 1
6177: DEC
6178: ST_TO_ADDR
6179: LD_INT 4
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_EXP 2
6197: ARRAY
6198: PUSH
6199: FOR_TO
6200: IFFALSE 6286
// begin vc_chassis := us_heavy_tracked ;
6202: LD_ADDR_OWVAR 37
6206: PUSH
6207: LD_INT 4
6209: ST_TO_ADDR
// vc_engine := engine_siberite ;
6210: LD_ADDR_OWVAR 39
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// vc_control := control_computer ;
6218: LD_ADDR_OWVAR 38
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6226: LD_ADDR_OWVAR 40
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: LD_INT 6
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 2
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// un := CreateVehicle ;
6253: LD_ADDR_VAR 0 4
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6263: LD_VAR 0 4
6267: PPUSH
6268: LD_EXP 15
6272: PUSH
6273: LD_INT 1
6275: ARRAY
6276: PPUSH
6277: LD_INT 0
6279: PPUSH
6280: CALL_OW 49
// end ;
6284: GO 6199
6286: POP
6287: POP
// end ; 92 :
6288: GO 6777
6290: LD_INT 92
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6627
6298: POP
// begin uc_side := 5 ;
6299: LD_ADDR_OWVAR 20
6303: PUSH
6304: LD_INT 5
6306: ST_TO_ADDR
// uc_nation := 2 ;
6307: LD_ADDR_OWVAR 21
6311: PUSH
6312: LD_INT 2
6314: ST_TO_ADDR
// filter := [ ] ;
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: EMPTY
6321: ST_TO_ADDR
// InitHc ;
6322: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6326: LD_INT 0
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_EXP 50
6336: PPUSH
6337: CALL_OW 380
// un := CreateHuman ;
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: CALL_OW 44
6350: ST_TO_ADDR
// filter := filter ^ un ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_VAR 0 3
6360: PUSH
6361: LD_VAR 0 4
6365: ADD
6366: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6367: LD_ADDR_VAR 0 2
6371: PUSH
6372: DOUBLE
6373: LD_INT 1
6375: DEC
6376: ST_TO_ADDR
6377: LD_INT 4
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_EXP 2
6395: ARRAY
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6436
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6400: LD_ADDR_VAR 0 4
6404: PUSH
6405: LD_INT 1
6407: PPUSH
6408: LD_EXP 50
6412: PPUSH
6413: CALL 7403 0 2
6417: ST_TO_ADDR
// filter := filter ^ un ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_VAR 0 3
6427: PUSH
6428: LD_VAR 0 4
6432: ADD
6433: ST_TO_ADDR
// end ;
6434: GO 6397
6436: POP
6437: POP
// DialogueOn ;
6438: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6442: LD_VAR 0 3
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: CALL_OW 258
6455: PUSH
6456: LD_INT 1
6458: EQUAL
6459: IFFALSE 6479
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: PPUSH
6470: LD_STRING DS-DF-1
6472: PPUSH
6473: CALL_OW 94
6477: GO 6495
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 1
6486: ARRAY
6487: PPUSH
6488: LD_STRING DS-DF-f1
6490: PPUSH
6491: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6495: LD_STRING DS-dezert
6497: PPUSH
6498: CALL_OW 97
6502: PUSH
6503: LD_INT 1
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6526
6511: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6512: LD_EXP 49
6516: PPUSH
6517: LD_STRING DS-DC-dis
6519: PPUSH
6520: CALL_OW 88
6524: GO 6621
6526: LD_INT 2
6528: DOUBLE
6529: EQUAL
6530: IFTRUE 6534
6532: GO 6620
6534: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6535: LD_EXP 49
6539: PPUSH
6540: LD_STRING DS-DC-acp
6542: PPUSH
6543: CALL_OW 88
// for i = 1 to filter do
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: DOUBLE
6553: LD_INT 1
6555: DEC
6556: ST_TO_ADDR
6557: LD_VAR 0 3
6561: PUSH
6562: FOR_TO
6563: IFFALSE 6616
// begin SetSide ( filter [ i ] , 8 ) ;
6565: LD_VAR 0 3
6569: PUSH
6570: LD_VAR 0 2
6574: ARRAY
6575: PPUSH
6576: LD_INT 8
6578: PPUSH
6579: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6583: LD_VAR 0 3
6587: PUSH
6588: LD_VAR 0 2
6592: ARRAY
6593: PPUSH
6594: LD_INT 4
6596: PPUSH
6597: LD_INT 0
6599: PPUSH
6600: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6604: LD_INT 111
6606: PPUSH
6607: LD_INT 121
6609: PPUSH
6610: CALL_OW 86
// end ;
6614: GO 6562
6616: POP
6617: POP
// end ; end ;
6618: GO 6621
6620: POP
// DialogueOff ;
6621: CALL_OW 7
// end ; 101 :
6625: GO 6777
6627: LD_INT 101
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6687
6635: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6636: LD_INT 3
6638: PPUSH
6639: LD_INT 5
6641: PPUSH
6642: CALL_OW 12
6646: PPUSH
6647: LD_INT 9
6649: PPUSH
6650: LD_INT 1
6652: PPUSH
6653: CALL_OW 55
// Wait ( 0 0$11 ) ;
6657: LD_INT 385
6659: PPUSH
6660: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6664: LD_INT 3
6666: PPUSH
6667: LD_INT 5
6669: PPUSH
6670: CALL_OW 12
6674: PPUSH
6675: LD_INT 9
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 55
// end ; 200 :
6685: GO 6777
6687: LD_INT 200
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6776
6695: POP
// begin Say ( Leopold , DS-end ) ;
6696: LD_EXP 7
6700: PPUSH
6701: LD_STRING DS-end
6703: PPUSH
6704: CALL_OW 88
// if Difficulty = 3 then
6708: LD_OWVAR 67
6712: PUSH
6713: LD_INT 3
6715: EQUAL
6716: IFFALSE 6725
// SetAchievement ( ACH_DESERT ) ;
6718: LD_STRING ACH_DESERT
6720: PPUSH
6721: CALL_OW 543
// music_nat := 5 ;
6725: LD_ADDR_OWVAR 71
6729: PUSH
6730: LD_INT 5
6732: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6733: LD_STRING med
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: CALL_OW 101
// AddMedal ( med , 1 ) ;
6743: LD_STRING med
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: CALL_OW 101
// AddMedal ( med , 1 ) ;
6753: LD_STRING med
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: CALL_OW 101
// GiveMedals ( MAIN ) ;
6763: LD_STRING MAIN
6765: PPUSH
6766: CALL_OW 102
// YouWin ;
6770: CALL_OW 103
// end ; end ;
6774: GO 6777
6776: POP
// end ;
6777: PPOPN 6
6779: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6780: LD_VAR 0 1
6784: PUSH
6785: LD_INT 22
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 21
6797: PUSH
6798: LD_INT 2
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: IN
6814: IFFALSE 6939
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6816: LD_INT 105
6818: PPUSH
6819: LD_INT 210
6821: PPUSH
6822: CALL_OW 12
6826: PPUSH
6827: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 250
6840: PPUSH
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 251
6850: PPUSH
6851: LD_INT 3
6853: PPUSH
6854: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL_OW 250
6867: PPUSH
6868: LD_VAR 0 1
6872: PPUSH
6873: CALL_OW 251
6877: PPUSH
6878: LD_INT 3
6880: PPUSH
6881: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 250
6894: PPUSH
6895: LD_VAR 0 1
6899: PPUSH
6900: CALL_OW 251
6904: PPUSH
6905: LD_INT 3
6907: PPUSH
6908: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6912: LD_VAR 0 1
6916: PPUSH
6917: CALL_OW 250
6921: PPUSH
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 251
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 453
// end ; end ;
6939: PPOPN 1
6941: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6942: LD_VAR 0 1
6946: PPUSH
6947: CALL 24794 0 1
// if un = fort then
6951: LD_VAR 0 1
6955: PUSH
6956: LD_INT 23
6958: EQUAL
6959: IFFALSE 6969
// fort_destroyed := true ;
6961: LD_ADDR_EXP 32
6965: PUSH
6966: LD_INT 1
6968: ST_TO_ADDR
// if un = l_cmndr then
6969: LD_VAR 0 1
6973: PUSH
6974: LD_EXP 49
6978: EQUAL
6979: IFFALSE 6989
// hero_died := true ;
6981: LD_ADDR_EXP 33
6985: PUSH
6986: LD_INT 1
6988: ST_TO_ADDR
// end ;
6989: PPOPN 1
6991: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6992: LD_ADDR_OWVAR 48
6996: PUSH
6997: LD_VAR 0 1
7001: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: CALL 24828 0 3
// end ;
7021: PPOPN 3
7023: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL 24836 0 1
// end ;
7033: PPOPN 1
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7036: LD_VAR 0 1
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL 24852 0 2
// end ; end_of_file
7050: PPOPN 2
7052: END
// export function RefreshTime ( time , bool ) ; begin
7053: LD_INT 0
7055: PPUSH
// if bool then
7056: LD_VAR 0 2
7060: IFFALSE 7078
// time := time + 0 0$01 else
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: LD_VAR 0 1
7071: PUSH
7072: LD_INT 35
7074: PLUS
7075: ST_TO_ADDR
7076: GO 7092
// time := time - 0 0$01 ;
7078: LD_ADDR_VAR 0 1
7082: PUSH
7083: LD_VAR 0 1
7087: PUSH
7088: LD_INT 35
7090: MINUS
7091: ST_TO_ADDR
// result := time ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_VAR 0 1
7101: ST_TO_ADDR
// end ;
7102: LD_VAR 0 3
7106: RET
// export function MineExist ( side ) ; begin
7107: LD_INT 0
7109: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7110: LD_INT 22
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 30
7124: PUSH
7125: LD_INT 30
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 69
7140: PUSH
7141: LD_INT 0
7143: GREATER
7144: IFFALSE 7156
// result := true else
7146: LD_ADDR_VAR 0 2
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
7154: GO 7164
// result := false ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// end ;
7164: LD_VAR 0 2
7168: RET
// export function FacExist ( side ) ; begin
7169: LD_INT 0
7171: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7172: LD_ADDR_VAR 0 2
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_VAR 0 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 30
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: PUSH
7208: LD_INT 0
7210: GREATER
7211: ST_TO_ADDR
// end ;
7212: LD_VAR 0 2
7216: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7223: LD_ADDR_VAR 0 4
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 33
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 50
7252: PUSH
7253: EMPTY
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_VAR 0 1
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 34
7285: PUSH
7286: LD_INT 31
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7322
7312: PUSH
7313: LD_VAR 0 4
7317: PUSH
7318: LD_INT 0
7320: GREATER
7321: AND
7322: IFFALSE 7398
// for i = 1 to filter do
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: DOUBLE
7330: LD_INT 1
7332: DEC
7333: ST_TO_ADDR
7334: LD_VAR 0 4
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7396
// if not IsControledBy ( filter [ i ] ) then
7342: LD_VAR 0 4
7346: PUSH
7347: LD_VAR 0 3
7351: ARRAY
7352: PPUSH
7353: CALL_OW 312
7357: NOT
7358: IFFALSE 7394
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7360: LD_VAR 0 4
7364: PUSH
7365: LD_VAR 0 3
7369: ARRAY
7370: PPUSH
7371: LD_VAR 0 5
7375: PUSH
7376: LD_INT 1
7378: PPUSH
7379: LD_VAR 0 5
7383: PPUSH
7384: CALL_OW 12
7388: ARRAY
7389: PPUSH
7390: CALL_OW 135
7394: GO 7339
7396: POP
7397: POP
// end ;
7398: LD_VAR 0 2
7402: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7403: LD_INT 0
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// hc_class := clas ;
7411: LD_ADDR_OWVAR 28
7415: PUSH
7416: LD_VAR 0 1
7420: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: NEG
7434: PPUSH
7435: LD_INT 1
7437: PPUSH
7438: CALL_OW 12
7442: PLUS
7443: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_VAR 0 2
7453: PUSH
7454: LD_INT 1
7456: NEG
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 12
7465: PLUS
7466: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7467: LD_ADDR_VAR 0 6
7471: PUSH
7472: LD_VAR 0 2
7476: PUSH
7477: LD_INT 1
7479: NEG
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: CALL_OW 12
7488: PLUS
7489: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7490: LD_ADDR_VAR 0 7
7494: PUSH
7495: LD_VAR 0 2
7499: PUSH
7500: LD_INT 1
7502: NEG
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 12
7511: PLUS
7512: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7513: LD_VAR 0 1
7517: PUSH
7518: LD_INT 1
7520: EQUAL
7521: IFTRUE 7533
7523: PUSH
7524: LD_VAR 0 1
7528: PUSH
7529: LD_INT 9
7531: EQUAL
7532: OR
7533: IFTRUE 7545
7535: PUSH
7536: LD_VAR 0 1
7540: PUSH
7541: LD_INT 5
7543: EQUAL
7544: OR
7545: IFTRUE 7557
7547: PUSH
7548: LD_VAR 0 1
7552: PUSH
7553: LD_INT 8
7555: EQUAL
7556: OR
7557: IFFALSE 7582
// bonus := [ 2 , 0 , 0 , 0 ] ;
7559: LD_ADDR_VAR 0 8
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 0
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: ST_TO_ADDR
// if clas = 2 then
7582: LD_VAR 0 1
7586: PUSH
7587: LD_INT 2
7589: EQUAL
7590: IFFALSE 7615
// bonus := [ 0 , 2 , 0 , 0 ] ;
7592: LD_ADDR_VAR 0 8
7596: PUSH
7597: LD_INT 0
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 0
7605: PUSH
7606: LD_INT 0
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: ST_TO_ADDR
// if clas = 3 then
7615: LD_VAR 0 1
7619: PUSH
7620: LD_INT 3
7622: EQUAL
7623: IFFALSE 7648
// bonus := [ 0 , 0 , 2 , 0 ] ;
7625: LD_ADDR_VAR 0 8
7629: PUSH
7630: LD_INT 0
7632: PUSH
7633: LD_INT 0
7635: PUSH
7636: LD_INT 2
7638: PUSH
7639: LD_INT 0
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: ST_TO_ADDR
// if clas = 4 then
7648: LD_VAR 0 1
7652: PUSH
7653: LD_INT 4
7655: EQUAL
7656: IFFALSE 7681
// bonus := [ 0 , 0 , 0 , 2 ] ;
7658: LD_ADDR_VAR 0 8
7662: PUSH
7663: LD_INT 0
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: LD_INT 0
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7681: LD_VAR 0 1
7685: PUSH
7686: LD_INT 4
7688: GREATER
7689: IFFALSE 7701
7691: PUSH
7692: LD_VAR 0 1
7696: PUSH
7697: LD_INT 9
7699: NONEQUAL
7700: AND
7701: IFFALSE 7713
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: LD_INT 5
7711: NONEQUAL
7712: AND
7713: IFFALSE 7725
7715: PUSH
7716: LD_VAR 0 1
7720: PUSH
7721: LD_INT 8
7723: NONEQUAL
7724: AND
7725: IFFALSE 7750
// bonus := [ 0 , 0 , 0 , 0 ] ;
7727: LD_ADDR_VAR 0 8
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7750: LD_ADDR_OWVAR 30
7754: PUSH
7755: LD_INT 0
7757: PPUSH
7758: LD_INT 2
7760: PPUSH
7761: CALL_OW 12
7765: PUSH
7766: LD_INT 0
7768: PPUSH
7769: LD_INT 2
7771: PPUSH
7772: CALL_OW 12
7776: PUSH
7777: LD_INT 0
7779: PPUSH
7780: LD_INT 2
7782: PPUSH
7783: CALL_OW 12
7787: PUSH
7788: LD_INT 0
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: CALL_OW 12
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7805: LD_ADDR_OWVAR 31
7809: PUSH
7810: LD_VAR 0 4
7814: PUSH
7815: LD_VAR 0 8
7819: PUSH
7820: LD_INT 1
7822: ARRAY
7823: PLUS
7824: PUSH
7825: LD_VAR 0 5
7829: PUSH
7830: LD_VAR 0 8
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PLUS
7839: PUSH
7840: LD_VAR 0 6
7844: PUSH
7845: LD_VAR 0 8
7849: PUSH
7850: LD_INT 3
7852: ARRAY
7853: PLUS
7854: PUSH
7855: LD_VAR 0 7
7859: PUSH
7860: LD_VAR 0 8
7864: PUSH
7865: LD_INT 4
7867: ARRAY
7868: PLUS
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7876: LD_ADDR_OWVAR 27
7880: PUSH
7881: LD_INT 1
7883: PPUSH
7884: LD_INT 2
7886: PPUSH
7887: CALL_OW 12
7891: ST_TO_ADDR
// hc_gallery :=  ;
7892: LD_ADDR_OWVAR 33
7896: PUSH
7897: LD_STRING 
7899: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7900: LD_ADDR_OWVAR 29
7904: PUSH
7905: LD_INT 8
7907: PPUSH
7908: LD_INT 12
7910: PPUSH
7911: CALL_OW 12
7915: PUSH
7916: LD_INT 9
7918: PPUSH
7919: LD_INT 11
7921: PPUSH
7922: CALL_OW 12
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: ST_TO_ADDR
// hc_name :=  ;
7931: LD_ADDR_OWVAR 26
7935: PUSH
7936: LD_STRING 
7938: ST_TO_ADDR
// result := CreateHuman ;
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: CALL_OW 44
7948: ST_TO_ADDR
// end ;
7949: LD_VAR 0 3
7953: RET
// export function GetSpeed ( unit ) ; begin
7954: LD_INT 0
7956: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 464
7971: PUSH
7972: LD_INT 1
7974: ARRAY
7975: ST_TO_ADDR
// end ;
7976: LD_VAR 0 2
7980: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
7988: PPUSH
// uc_nation = nation_nature ;
7989: LD_ADDR_OWVAR 21
7993: PUSH
7994: LD_INT 0
7996: ST_TO_ADDR
// uc_side = 0 ;
7997: LD_ADDR_OWVAR 20
8001: PUSH
8002: LD_INT 0
8004: ST_TO_ADDR
// l = 0 ;
8005: LD_ADDR_VAR 0 7
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8013: LD_ADDR_OWVAR 24
8017: PUSH
8018: LD_INT 0
8020: PPUSH
8021: LD_INT 5
8023: PPUSH
8024: CALL_OW 12
8028: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
8029: LD_ADDR_OWVAR 35
8033: PUSH
8034: LD_INT 5
8036: NEG
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 12
8045: ST_TO_ADDR
// hc_gallery =  ;
8046: LD_ADDR_OWVAR 33
8050: PUSH
8051: LD_STRING 
8053: ST_TO_ADDR
// hc_class = class_apeman ;
8054: LD_ADDR_OWVAR 28
8058: PUSH
8059: LD_INT 12
8061: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8062: LD_ADDR_OWVAR 29
8066: PUSH
8067: LD_INT 11
8069: PPUSH
8070: LD_INT 13
8072: PPUSH
8073: CALL_OW 12
8077: PUSH
8078: LD_INT 10
8080: PPUSH
8081: LD_INT 11
8083: PPUSH
8084: CALL_OW 12
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
// hc_sex = sex_male ;
8093: LD_ADDR_OWVAR 27
8097: PUSH
8098: LD_INT 1
8100: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8101: LD_ADDR_OWVAR 31
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 12
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: LD_INT 0
8122: PUSH
8123: LD_INT 0
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// apeman = CreateHuman ;
8132: LD_ADDR_VAR 0 8
8136: PUSH
8137: CALL_OW 44
8141: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8142: LD_VAR 0 8
8146: PPUSH
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_INT 0
8154: PPUSH
8155: CALL_OW 49
// l = l + 1 ;
8159: LD_ADDR_VAR 0 7
8163: PUSH
8164: LD_VAR 0 7
8168: PUSH
8169: LD_INT 1
8171: PLUS
8172: ST_TO_ADDR
// end until l = num1 ;
8173: LD_VAR 0 7
8177: PUSH
8178: LD_VAR 0 2
8182: EQUAL
8183: IFFALSE 8013
// l = 0 ;
8185: LD_ADDR_VAR 0 7
8189: PUSH
8190: LD_INT 0
8192: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8193: LD_ADDR_OWVAR 35
8197: PUSH
8198: LD_INT 0
8200: PPUSH
8201: LD_INT 25
8203: PPUSH
8204: CALL_OW 12
8208: ST_TO_ADDR
// hc_class = class_tiger ;
8209: LD_ADDR_OWVAR 28
8213: PUSH
8214: LD_INT 14
8216: ST_TO_ADDR
// hc_sex = sex_male ;
8217: LD_ADDR_OWVAR 27
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// hc_gallery = sandnature ;
8225: LD_ADDR_OWVAR 33
8229: PUSH
8230: LD_STRING sandnature
8232: ST_TO_ADDR
// hc_face_number = 3 ;
8233: LD_ADDR_OWVAR 34
8237: PUSH
8238: LD_INT 3
8240: ST_TO_ADDR
// tiger = CreateHuman ;
8241: LD_ADDR_VAR 0 9
8245: PUSH
8246: CALL_OW 44
8250: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8251: LD_VAR 0 9
8255: PPUSH
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 0
8263: PPUSH
8264: CALL_OW 49
// l = l + 1 ;
8268: LD_ADDR_VAR 0 7
8272: PUSH
8273: LD_VAR 0 7
8277: PUSH
8278: LD_INT 1
8280: PLUS
8281: ST_TO_ADDR
// end until l = num2 ;
8282: LD_VAR 0 7
8286: PUSH
8287: LD_VAR 0 3
8291: EQUAL
8292: IFFALSE 8193
// l = 0 ;
8294: LD_ADDR_VAR 0 7
8298: PUSH
8299: LD_INT 0
8301: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8302: LD_ADDR_OWVAR 28
8306: PUSH
8307: LD_INT 18
8309: ST_TO_ADDR
// hc_gallery = sandnature ;
8310: LD_ADDR_OWVAR 33
8314: PUSH
8315: LD_STRING sandnature
8317: ST_TO_ADDR
// hc_face_number = 1 ;
8318: LD_ADDR_OWVAR 34
8322: PUSH
8323: LD_INT 1
8325: ST_TO_ADDR
// bird = CreateHuman ;
8326: LD_ADDR_VAR 0 10
8330: PUSH
8331: CALL_OW 44
8335: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8336: LD_VAR 0 10
8340: PPUSH
8341: LD_INT 0
8343: PPUSH
8344: CALL_OW 51
// l = l + 1 ;
8348: LD_ADDR_VAR 0 7
8352: PUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_INT 1
8360: PLUS
8361: ST_TO_ADDR
// end until l = num3 ;
8362: LD_VAR 0 7
8366: PUSH
8367: LD_VAR 0 4
8371: EQUAL
8372: IFFALSE 8302
// l = 0 ;
8374: LD_ADDR_VAR 0 7
8378: PUSH
8379: LD_INT 0
8381: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8382: LD_ADDR_OWVAR 28
8386: PUSH
8387: LD_INT 21
8389: ST_TO_ADDR
// hc_gallery = sandnature ;
8390: LD_ADDR_OWVAR 33
8394: PUSH
8395: LD_STRING sandnature
8397: ST_TO_ADDR
// hc_face_number = 5 ;
8398: LD_ADDR_OWVAR 34
8402: PUSH
8403: LD_INT 5
8405: ST_TO_ADDR
// horse := CreateHuman ;
8406: LD_ADDR_VAR 0 11
8410: PUSH
8411: CALL_OW 44
8415: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8416: LD_VAR 0 11
8420: PPUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 49
// l = l + 1 ;
8433: LD_ADDR_VAR 0 7
8437: PUSH
8438: LD_VAR 0 7
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: ST_TO_ADDR
// end until l = num4 ;
8447: LD_VAR 0 7
8451: PUSH
8452: LD_VAR 0 5
8456: EQUAL
8457: IFFALSE 8382
// end ;
8459: LD_VAR 0 6
8463: RET
// export function PrepareComm ; begin
8464: LD_INT 0
8466: PPUSH
// uc_side := 1 ;
8467: LD_ADDR_OWVAR 20
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// uc_nation := 1 ;
8475: LD_ADDR_OWVAR 21
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// hc_gallery :=  ;
8483: LD_ADDR_OWVAR 33
8487: PUSH
8488: LD_STRING 
8490: ST_TO_ADDR
// hc_name :=  ;
8491: LD_ADDR_OWVAR 26
8495: PUSH
8496: LD_STRING 
8498: ST_TO_ADDR
// hc_class := 1 ;
8499: LD_ADDR_OWVAR 28
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// hc_sex := sex_male ;
8507: LD_ADDR_OWVAR 27
8511: PUSH
8512: LD_INT 1
8514: ST_TO_ADDR
// am_comander := CreateHuman ;
8515: LD_ADDR_EXP 46
8519: PUSH
8520: CALL_OW 44
8524: ST_TO_ADDR
// uc_side := 3 ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_INT 3
8532: ST_TO_ADDR
// uc_nation := 3 ;
8533: LD_ADDR_OWVAR 21
8537: PUSH
8538: LD_INT 3
8540: ST_TO_ADDR
// ru_comander := CreateHuman ;
8541: LD_ADDR_EXP 47
8545: PUSH
8546: CALL_OW 44
8550: ST_TO_ADDR
// uc_side := 2 ;
8551: LD_ADDR_OWVAR 20
8555: PUSH
8556: LD_INT 2
8558: ST_TO_ADDR
// uc_nation := 2 ;
8559: LD_ADDR_OWVAR 21
8563: PUSH
8564: LD_INT 2
8566: ST_TO_ADDR
// hc_name := Heike Steyer ;
8567: LD_ADDR_OWVAR 26
8571: PUSH
8572: LD_STRING Heike Steyer
8574: ST_TO_ADDR
// hc_sex := sex_female ;
8575: LD_ADDR_OWVAR 27
8579: PUSH
8580: LD_INT 2
8582: ST_TO_ADDR
// hc_gallery := sandar ;
8583: LD_ADDR_OWVAR 33
8587: PUSH
8588: LD_STRING sandar
8590: ST_TO_ADDR
// hc_face_number := 14 ;
8591: LD_ADDR_OWVAR 34
8595: PUSH
8596: LD_INT 14
8598: ST_TO_ADDR
// ar_comander := CreateHuman ;
8599: LD_ADDR_EXP 48
8603: PUSH
8604: CALL_OW 44
8608: ST_TO_ADDR
// end ;
8609: LD_VAR 0 1
8613: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
8618: PPUSH
// list := [ ] ;
8619: LD_ADDR_VAR 0 4
8623: PUSH
8624: EMPTY
8625: ST_TO_ADDR
// for i = 1 to filter do
8626: LD_ADDR_VAR 0 5
8630: PUSH
8631: DOUBLE
8632: LD_INT 1
8634: DEC
8635: ST_TO_ADDR
8636: LD_VAR 0 1
8640: PUSH
8641: FOR_TO
8642: IFFALSE 8691
// if GetSpeed ( filter [ i ] ) < speed then
8644: LD_VAR 0 1
8648: PUSH
8649: LD_VAR 0 5
8653: ARRAY
8654: PPUSH
8655: CALL 7954 0 1
8659: PUSH
8660: LD_VAR 0 2
8664: LESS
8665: IFFALSE 8689
// list := list ^ filter [ i ] ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: LD_VAR 0 4
8676: PUSH
8677: LD_VAR 0 1
8681: PUSH
8682: LD_VAR 0 5
8686: ARRAY
8687: ADD
8688: ST_TO_ADDR
8689: GO 8641
8691: POP
8692: POP
// result := list ;
8693: LD_ADDR_VAR 0 3
8697: PUSH
8698: LD_VAR 0 4
8702: ST_TO_ADDR
// end ; end_of_file end_of_file
8703: LD_VAR 0 3
8707: RET
// export globalGameSaveCounter ; every 0 0$1 do
8708: GO 8710
8710: DISABLE
// begin enable ;
8711: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8712: LD_STRING updateTimer(
8714: PUSH
8715: LD_OWVAR 1
8719: STR
8720: PUSH
8721: LD_STRING );
8723: STR
8724: PPUSH
8725: CALL_OW 559
// end ;
8729: END
// every 0 0$1 do
8730: GO 8732
8732: DISABLE
// begin globalGameSaveCounter := 0 ;
8733: LD_ADDR_EXP 52
8737: PUSH
8738: LD_INT 0
8740: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8741: LD_STRING setGameSaveCounter(0)
8743: PPUSH
8744: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8748: LD_STRING initStreamRollete();
8750: PPUSH
8751: CALL_OW 559
// InitStreamMode ;
8755: CALL 10107 0 0
// DefineStreamItems ( false ) ;
8759: LD_INT 0
8761: PPUSH
8762: CALL 10571 0 1
// end ;
8766: END
// export function SOS_MapStart ( ) ; begin
8767: LD_INT 0
8769: PPUSH
// if streamModeActive then
8770: LD_EXP 53
8774: IFFALSE 8783
// DefineStreamItems ( true ) ;
8776: LD_INT 1
8778: PPUSH
8779: CALL 10571 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
8783: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
8785: PPUSH
8786: CALL_OW 559
// UpdateLuaVariables ( ) ;
8790: CALL 8807 0 0
// UpdateFactoryWaypoints ( ) ;
8794: CALL 23693 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8798: CALL 23945 0 0
// end ;
8802: LD_VAR 0 1
8806: RET
// function UpdateLuaVariables ( ) ; begin
8807: LD_INT 0
8809: PPUSH
// if globalGameSaveCounter then
8810: LD_EXP 52
8814: IFFALSE 8848
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8816: LD_ADDR_EXP 52
8820: PUSH
8821: LD_EXP 52
8825: PPUSH
8826: CALL 70841 0 1
8830: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8831: LD_STRING setGameSaveCounter(
8833: PUSH
8834: LD_EXP 52
8838: STR
8839: PUSH
8840: LD_STRING )
8842: STR
8843: PPUSH
8844: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8848: LD_STRING setGameDifficulty(
8850: PUSH
8851: LD_OWVAR 67
8855: STR
8856: PUSH
8857: LD_STRING )
8859: STR
8860: PPUSH
8861: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
8865: LD_STRING displayDifficulty(
8867: PUSH
8868: LD_OWVAR 67
8872: STR
8873: PUSH
8874: LD_STRING )
8876: STR
8877: PPUSH
8878: CALL_OW 559
// end ;
8882: LD_VAR 0 1
8886: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8887: LD_INT 0
8889: PPUSH
// if p2 = stream_mode then
8890: LD_VAR 0 2
8894: PUSH
8895: LD_INT 100
8897: EQUAL
8898: IFFALSE 9901
// begin if not StreamModeActive then
8900: LD_EXP 53
8904: NOT
8905: IFFALSE 8915
// StreamModeActive := true ;
8907: LD_ADDR_EXP 53
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 0 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 0
8922: EQUAL
8923: IFFALSE 8929
// InitStreamMode ;
8925: CALL 10107 0 0
// if p3 = 1 then
8929: LD_VAR 0 3
8933: PUSH
8934: LD_INT 1
8936: EQUAL
8937: IFFALSE 8947
// sRocket := true ;
8939: LD_ADDR_EXP 58
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// if p3 = 2 then
8947: LD_VAR 0 3
8951: PUSH
8952: LD_INT 2
8954: EQUAL
8955: IFFALSE 8965
// sSpeed := true ;
8957: LD_ADDR_EXP 57
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// if p3 = 3 then
8965: LD_VAR 0 3
8969: PUSH
8970: LD_INT 3
8972: EQUAL
8973: IFFALSE 8983
// sEngine := true ;
8975: LD_ADDR_EXP 59
8979: PUSH
8980: LD_INT 1
8982: ST_TO_ADDR
// if p3 = 4 then
8983: LD_VAR 0 3
8987: PUSH
8988: LD_INT 4
8990: EQUAL
8991: IFFALSE 9001
// sSpec := true ;
8993: LD_ADDR_EXP 56
8997: PUSH
8998: LD_INT 1
9000: ST_TO_ADDR
// if p3 = 5 then
9001: LD_VAR 0 3
9005: PUSH
9006: LD_INT 5
9008: EQUAL
9009: IFFALSE 9019
// sLevel := true ;
9011: LD_ADDR_EXP 60
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// if p3 = 6 then
9019: LD_VAR 0 3
9023: PUSH
9024: LD_INT 6
9026: EQUAL
9027: IFFALSE 9037
// sArmoury := true ;
9029: LD_ADDR_EXP 61
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// if p3 = 7 then
9037: LD_VAR 0 3
9041: PUSH
9042: LD_INT 7
9044: EQUAL
9045: IFFALSE 9055
// sRadar := true ;
9047: LD_ADDR_EXP 62
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// if p3 = 8 then
9055: LD_VAR 0 3
9059: PUSH
9060: LD_INT 8
9062: EQUAL
9063: IFFALSE 9073
// sBunker := true ;
9065: LD_ADDR_EXP 63
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// if p3 = 9 then
9073: LD_VAR 0 3
9077: PUSH
9078: LD_INT 9
9080: EQUAL
9081: IFFALSE 9091
// sHack := true ;
9083: LD_ADDR_EXP 64
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// if p3 = 10 then
9091: LD_VAR 0 3
9095: PUSH
9096: LD_INT 10
9098: EQUAL
9099: IFFALSE 9109
// sFire := true ;
9101: LD_ADDR_EXP 65
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// if p3 = 11 then
9109: LD_VAR 0 3
9113: PUSH
9114: LD_INT 11
9116: EQUAL
9117: IFFALSE 9127
// sRefresh := true ;
9119: LD_ADDR_EXP 66
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// if p3 = 12 then
9127: LD_VAR 0 3
9131: PUSH
9132: LD_INT 12
9134: EQUAL
9135: IFFALSE 9145
// sExp := true ;
9137: LD_ADDR_EXP 67
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// if p3 = 13 then
9145: LD_VAR 0 3
9149: PUSH
9150: LD_INT 13
9152: EQUAL
9153: IFFALSE 9163
// sDepot := true ;
9155: LD_ADDR_EXP 68
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// if p3 = 14 then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 14
9170: EQUAL
9171: IFFALSE 9181
// sFlag := true ;
9173: LD_ADDR_EXP 69
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// if p3 = 15 then
9181: LD_VAR 0 3
9185: PUSH
9186: LD_INT 15
9188: EQUAL
9189: IFFALSE 9199
// sKamikadze := true ;
9191: LD_ADDR_EXP 77
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// if p3 = 16 then
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 16
9206: EQUAL
9207: IFFALSE 9217
// sTroll := true ;
9209: LD_ADDR_EXP 78
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// if p3 = 17 then
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 17
9224: EQUAL
9225: IFFALSE 9235
// sSlow := true ;
9227: LD_ADDR_EXP 79
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// if p3 = 18 then
9235: LD_VAR 0 3
9239: PUSH
9240: LD_INT 18
9242: EQUAL
9243: IFFALSE 9253
// sLack := true ;
9245: LD_ADDR_EXP 80
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// if p3 = 19 then
9253: LD_VAR 0 3
9257: PUSH
9258: LD_INT 19
9260: EQUAL
9261: IFFALSE 9271
// sTank := true ;
9263: LD_ADDR_EXP 82
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// if p3 = 20 then
9271: LD_VAR 0 3
9275: PUSH
9276: LD_INT 20
9278: EQUAL
9279: IFFALSE 9289
// sRemote := true ;
9281: LD_ADDR_EXP 83
9285: PUSH
9286: LD_INT 1
9288: ST_TO_ADDR
// if p3 = 21 then
9289: LD_VAR 0 3
9293: PUSH
9294: LD_INT 21
9296: EQUAL
9297: IFFALSE 9307
// sPowell := true ;
9299: LD_ADDR_EXP 84
9303: PUSH
9304: LD_INT 1
9306: ST_TO_ADDR
// if p3 = 22 then
9307: LD_VAR 0 3
9311: PUSH
9312: LD_INT 22
9314: EQUAL
9315: IFFALSE 9325
// sTeleport := true ;
9317: LD_ADDR_EXP 87
9321: PUSH
9322: LD_INT 1
9324: ST_TO_ADDR
// if p3 = 23 then
9325: LD_VAR 0 3
9329: PUSH
9330: LD_INT 23
9332: EQUAL
9333: IFFALSE 9343
// sOilTower := true ;
9335: LD_ADDR_EXP 89
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// if p3 = 24 then
9343: LD_VAR 0 3
9347: PUSH
9348: LD_INT 24
9350: EQUAL
9351: IFFALSE 9361
// sShovel := true ;
9353: LD_ADDR_EXP 90
9357: PUSH
9358: LD_INT 1
9360: ST_TO_ADDR
// if p3 = 25 then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_INT 25
9368: EQUAL
9369: IFFALSE 9379
// sSheik := true ;
9371: LD_ADDR_EXP 91
9375: PUSH
9376: LD_INT 1
9378: ST_TO_ADDR
// if p3 = 26 then
9379: LD_VAR 0 3
9383: PUSH
9384: LD_INT 26
9386: EQUAL
9387: IFFALSE 9397
// sEarthquake := true ;
9389: LD_ADDR_EXP 93
9393: PUSH
9394: LD_INT 1
9396: ST_TO_ADDR
// if p3 = 27 then
9397: LD_VAR 0 3
9401: PUSH
9402: LD_INT 27
9404: EQUAL
9405: IFFALSE 9415
// sAI := true ;
9407: LD_ADDR_EXP 94
9411: PUSH
9412: LD_INT 1
9414: ST_TO_ADDR
// if p3 = 28 then
9415: LD_VAR 0 3
9419: PUSH
9420: LD_INT 28
9422: EQUAL
9423: IFFALSE 9433
// sCargo := true ;
9425: LD_ADDR_EXP 97
9429: PUSH
9430: LD_INT 1
9432: ST_TO_ADDR
// if p3 = 29 then
9433: LD_VAR 0 3
9437: PUSH
9438: LD_INT 29
9440: EQUAL
9441: IFFALSE 9451
// sDLaser := true ;
9443: LD_ADDR_EXP 98
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
// if p3 = 30 then
9451: LD_VAR 0 3
9455: PUSH
9456: LD_INT 30
9458: EQUAL
9459: IFFALSE 9469
// sExchange := true ;
9461: LD_ADDR_EXP 99
9465: PUSH
9466: LD_INT 1
9468: ST_TO_ADDR
// if p3 = 31 then
9469: LD_VAR 0 3
9473: PUSH
9474: LD_INT 31
9476: EQUAL
9477: IFFALSE 9487
// sFac := true ;
9479: LD_ADDR_EXP 100
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// if p3 = 32 then
9487: LD_VAR 0 3
9491: PUSH
9492: LD_INT 32
9494: EQUAL
9495: IFFALSE 9505
// sPower := true ;
9497: LD_ADDR_EXP 101
9501: PUSH
9502: LD_INT 1
9504: ST_TO_ADDR
// if p3 = 33 then
9505: LD_VAR 0 3
9509: PUSH
9510: LD_INT 33
9512: EQUAL
9513: IFFALSE 9523
// sRandom := true ;
9515: LD_ADDR_EXP 102
9519: PUSH
9520: LD_INT 1
9522: ST_TO_ADDR
// if p3 = 34 then
9523: LD_VAR 0 3
9527: PUSH
9528: LD_INT 34
9530: EQUAL
9531: IFFALSE 9541
// sShield := true ;
9533: LD_ADDR_EXP 103
9537: PUSH
9538: LD_INT 1
9540: ST_TO_ADDR
// if p3 = 35 then
9541: LD_VAR 0 3
9545: PUSH
9546: LD_INT 35
9548: EQUAL
9549: IFFALSE 9559
// sTime := true ;
9551: LD_ADDR_EXP 104
9555: PUSH
9556: LD_INT 1
9558: ST_TO_ADDR
// if p3 = 36 then
9559: LD_VAR 0 3
9563: PUSH
9564: LD_INT 36
9566: EQUAL
9567: IFFALSE 9577
// sTools := true ;
9569: LD_ADDR_EXP 105
9573: PUSH
9574: LD_INT 1
9576: ST_TO_ADDR
// if p3 = 101 then
9577: LD_VAR 0 3
9581: PUSH
9582: LD_INT 101
9584: EQUAL
9585: IFFALSE 9595
// sSold := true ;
9587: LD_ADDR_EXP 70
9591: PUSH
9592: LD_INT 1
9594: ST_TO_ADDR
// if p3 = 102 then
9595: LD_VAR 0 3
9599: PUSH
9600: LD_INT 102
9602: EQUAL
9603: IFFALSE 9613
// sDiff := true ;
9605: LD_ADDR_EXP 71
9609: PUSH
9610: LD_INT 1
9612: ST_TO_ADDR
// if p3 = 103 then
9613: LD_VAR 0 3
9617: PUSH
9618: LD_INT 103
9620: EQUAL
9621: IFFALSE 9631
// sFog := true ;
9623: LD_ADDR_EXP 74
9627: PUSH
9628: LD_INT 1
9630: ST_TO_ADDR
// if p3 = 104 then
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 104
9638: EQUAL
9639: IFFALSE 9649
// sReset := true ;
9641: LD_ADDR_EXP 75
9645: PUSH
9646: LD_INT 1
9648: ST_TO_ADDR
// if p3 = 105 then
9649: LD_VAR 0 3
9653: PUSH
9654: LD_INT 105
9656: EQUAL
9657: IFFALSE 9667
// sSun := true ;
9659: LD_ADDR_EXP 76
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// if p3 = 106 then
9667: LD_VAR 0 3
9671: PUSH
9672: LD_INT 106
9674: EQUAL
9675: IFFALSE 9685
// sTiger := true ;
9677: LD_ADDR_EXP 72
9681: PUSH
9682: LD_INT 1
9684: ST_TO_ADDR
// if p3 = 107 then
9685: LD_VAR 0 3
9689: PUSH
9690: LD_INT 107
9692: EQUAL
9693: IFFALSE 9703
// sBomb := true ;
9695: LD_ADDR_EXP 73
9699: PUSH
9700: LD_INT 1
9702: ST_TO_ADDR
// if p3 = 108 then
9703: LD_VAR 0 3
9707: PUSH
9708: LD_INT 108
9710: EQUAL
9711: IFFALSE 9721
// sWound := true ;
9713: LD_ADDR_EXP 81
9717: PUSH
9718: LD_INT 1
9720: ST_TO_ADDR
// if p3 = 109 then
9721: LD_VAR 0 3
9725: PUSH
9726: LD_INT 109
9728: EQUAL
9729: IFFALSE 9739
// sBetray := true ;
9731: LD_ADDR_EXP 85
9735: PUSH
9736: LD_INT 1
9738: ST_TO_ADDR
// if p3 = 110 then
9739: LD_VAR 0 3
9743: PUSH
9744: LD_INT 110
9746: EQUAL
9747: IFFALSE 9757
// sContamin := true ;
9749: LD_ADDR_EXP 86
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// if p3 = 111 then
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 111
9764: EQUAL
9765: IFFALSE 9775
// sOil := true ;
9767: LD_ADDR_EXP 88
9771: PUSH
9772: LD_INT 1
9774: ST_TO_ADDR
// if p3 = 112 then
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 112
9782: EQUAL
9783: IFFALSE 9793
// sStu := true ;
9785: LD_ADDR_EXP 92
9789: PUSH
9790: LD_INT 1
9792: ST_TO_ADDR
// if p3 = 113 then
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 113
9800: EQUAL
9801: IFFALSE 9811
// sBazooka := true ;
9803: LD_ADDR_EXP 95
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// if p3 = 114 then
9811: LD_VAR 0 3
9815: PUSH
9816: LD_INT 114
9818: EQUAL
9819: IFFALSE 9829
// sMortar := true ;
9821: LD_ADDR_EXP 96
9825: PUSH
9826: LD_INT 1
9828: ST_TO_ADDR
// if p3 = 115 then
9829: LD_VAR 0 3
9833: PUSH
9834: LD_INT 115
9836: EQUAL
9837: IFFALSE 9847
// sRanger := true ;
9839: LD_ADDR_EXP 106
9843: PUSH
9844: LD_INT 1
9846: ST_TO_ADDR
// if p3 = 116 then
9847: LD_VAR 0 3
9851: PUSH
9852: LD_INT 116
9854: EQUAL
9855: IFFALSE 9865
// sComputer := true ;
9857: LD_ADDR_EXP 107
9861: PUSH
9862: LD_INT 1
9864: ST_TO_ADDR
// if p3 = 117 then
9865: LD_VAR 0 3
9869: PUSH
9870: LD_INT 117
9872: EQUAL
9873: IFFALSE 9883
// s30 := true ;
9875: LD_ADDR_EXP 108
9879: PUSH
9880: LD_INT 1
9882: ST_TO_ADDR
// if p3 = 118 then
9883: LD_VAR 0 3
9887: PUSH
9888: LD_INT 118
9890: EQUAL
9891: IFFALSE 9901
// s60 := true ;
9893: LD_ADDR_EXP 109
9897: PUSH
9898: LD_INT 1
9900: ST_TO_ADDR
// end ; if p2 = hack_mode then
9901: LD_VAR 0 2
9905: PUSH
9906: LD_INT 101
9908: EQUAL
9909: IFFALSE 10037
// begin case p3 of 1 :
9911: LD_VAR 0 3
9915: PUSH
9916: LD_INT 1
9918: DOUBLE
9919: EQUAL
9920: IFTRUE 9924
9922: GO 9931
9924: POP
// hHackUnlimitedResources ; 2 :
9925: CALL 22300 0 0
9929: GO 10037
9931: LD_INT 2
9933: DOUBLE
9934: EQUAL
9935: IFTRUE 9939
9937: GO 9946
9939: POP
// hHackSetLevel10 ; 3 :
9940: CALL 22433 0 0
9944: GO 10037
9946: LD_INT 3
9948: DOUBLE
9949: EQUAL
9950: IFTRUE 9954
9952: GO 9961
9954: POP
// hHackSetLevel10YourUnits ; 4 :
9955: CALL 22518 0 0
9959: GO 10037
9961: LD_INT 4
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9969
9967: GO 9976
9969: POP
// hHackInvincible ; 5 :
9970: CALL 22966 0 0
9974: GO 10037
9976: LD_INT 5
9978: DOUBLE
9979: EQUAL
9980: IFTRUE 9984
9982: GO 9991
9984: POP
// hHackInvisible ; 6 :
9985: CALL 23077 0 0
9989: GO 10037
9991: LD_INT 6
9993: DOUBLE
9994: EQUAL
9995: IFTRUE 9999
9997: GO 10006
9999: POP
// hHackChangeYourSide ; 7 :
10000: CALL 23134 0 0
10004: GO 10037
10006: LD_INT 7
10008: DOUBLE
10009: EQUAL
10010: IFTRUE 10014
10012: GO 10021
10014: POP
// hHackChangeUnitSide ; 8 :
10015: CALL 23176 0 0
10019: GO 10037
10021: LD_INT 8
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10036
10029: POP
// hHackFog ; end ;
10030: CALL 23277 0 0
10034: GO 10037
10036: POP
// end ; if p2 = game_save_mode then
10037: LD_VAR 0 2
10041: PUSH
10042: LD_INT 102
10044: EQUAL
10045: IFFALSE 10102
// begin if p3 = 1 then
10047: LD_VAR 0 3
10051: PUSH
10052: LD_INT 1
10054: EQUAL
10055: IFFALSE 10067
// globalGameSaveCounter := p4 ;
10057: LD_ADDR_EXP 52
10061: PUSH
10062: LD_VAR 0 4
10066: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10067: LD_VAR 0 3
10071: PUSH
10072: LD_INT 2
10074: EQUAL
10075: IFFALSE 10083
10077: PUSH
10078: LD_EXP 52
10082: AND
10083: IFFALSE 10102
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10085: LD_STRING setGameSaveCounter(
10087: PUSH
10088: LD_EXP 52
10092: STR
10093: PUSH
10094: LD_STRING )
10096: STR
10097: PPUSH
10098: CALL_OW 559
// end ; end ;
10102: LD_VAR 0 7
10106: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10107: LD_INT 0
10109: PPUSH
// streamModeActive := false ;
10110: LD_ADDR_EXP 53
10114: PUSH
10115: LD_INT 0
10117: ST_TO_ADDR
// normalCounter := 36 ;
10118: LD_ADDR_EXP 54
10122: PUSH
10123: LD_INT 36
10125: ST_TO_ADDR
// hardcoreCounter := 18 ;
10126: LD_ADDR_EXP 55
10130: PUSH
10131: LD_INT 18
10133: ST_TO_ADDR
// sRocket := false ;
10134: LD_ADDR_EXP 58
10138: PUSH
10139: LD_INT 0
10141: ST_TO_ADDR
// sSpeed := false ;
10142: LD_ADDR_EXP 57
10146: PUSH
10147: LD_INT 0
10149: ST_TO_ADDR
// sEngine := false ;
10150: LD_ADDR_EXP 59
10154: PUSH
10155: LD_INT 0
10157: ST_TO_ADDR
// sSpec := false ;
10158: LD_ADDR_EXP 56
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// sLevel := false ;
10166: LD_ADDR_EXP 60
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// sArmoury := false ;
10174: LD_ADDR_EXP 61
10178: PUSH
10179: LD_INT 0
10181: ST_TO_ADDR
// sRadar := false ;
10182: LD_ADDR_EXP 62
10186: PUSH
10187: LD_INT 0
10189: ST_TO_ADDR
// sBunker := false ;
10190: LD_ADDR_EXP 63
10194: PUSH
10195: LD_INT 0
10197: ST_TO_ADDR
// sHack := false ;
10198: LD_ADDR_EXP 64
10202: PUSH
10203: LD_INT 0
10205: ST_TO_ADDR
// sFire := false ;
10206: LD_ADDR_EXP 65
10210: PUSH
10211: LD_INT 0
10213: ST_TO_ADDR
// sRefresh := false ;
10214: LD_ADDR_EXP 66
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// sExp := false ;
10222: LD_ADDR_EXP 67
10226: PUSH
10227: LD_INT 0
10229: ST_TO_ADDR
// sDepot := false ;
10230: LD_ADDR_EXP 68
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// sFlag := false ;
10238: LD_ADDR_EXP 69
10242: PUSH
10243: LD_INT 0
10245: ST_TO_ADDR
// sKamikadze := false ;
10246: LD_ADDR_EXP 77
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// sTroll := false ;
10254: LD_ADDR_EXP 78
10258: PUSH
10259: LD_INT 0
10261: ST_TO_ADDR
// sSlow := false ;
10262: LD_ADDR_EXP 79
10266: PUSH
10267: LD_INT 0
10269: ST_TO_ADDR
// sLack := false ;
10270: LD_ADDR_EXP 80
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// sTank := false ;
10278: LD_ADDR_EXP 82
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// sRemote := false ;
10286: LD_ADDR_EXP 83
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// sPowell := false ;
10294: LD_ADDR_EXP 84
10298: PUSH
10299: LD_INT 0
10301: ST_TO_ADDR
// sTeleport := false ;
10302: LD_ADDR_EXP 87
10306: PUSH
10307: LD_INT 0
10309: ST_TO_ADDR
// sOilTower := false ;
10310: LD_ADDR_EXP 89
10314: PUSH
10315: LD_INT 0
10317: ST_TO_ADDR
// sShovel := false ;
10318: LD_ADDR_EXP 90
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// sSheik := false ;
10326: LD_ADDR_EXP 91
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// sEarthquake := false ;
10334: LD_ADDR_EXP 93
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// sAI := false ;
10342: LD_ADDR_EXP 94
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// sCargo := false ;
10350: LD_ADDR_EXP 97
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
// sDLaser := false ;
10358: LD_ADDR_EXP 98
10362: PUSH
10363: LD_INT 0
10365: ST_TO_ADDR
// sExchange := false ;
10366: LD_ADDR_EXP 99
10370: PUSH
10371: LD_INT 0
10373: ST_TO_ADDR
// sFac := false ;
10374: LD_ADDR_EXP 100
10378: PUSH
10379: LD_INT 0
10381: ST_TO_ADDR
// sPower := false ;
10382: LD_ADDR_EXP 101
10386: PUSH
10387: LD_INT 0
10389: ST_TO_ADDR
// sRandom := false ;
10390: LD_ADDR_EXP 102
10394: PUSH
10395: LD_INT 0
10397: ST_TO_ADDR
// sShield := false ;
10398: LD_ADDR_EXP 103
10402: PUSH
10403: LD_INT 0
10405: ST_TO_ADDR
// sTime := false ;
10406: LD_ADDR_EXP 104
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// sTools := false ;
10414: LD_ADDR_EXP 105
10418: PUSH
10419: LD_INT 0
10421: ST_TO_ADDR
// sSold := false ;
10422: LD_ADDR_EXP 70
10426: PUSH
10427: LD_INT 0
10429: ST_TO_ADDR
// sDiff := false ;
10430: LD_ADDR_EXP 71
10434: PUSH
10435: LD_INT 0
10437: ST_TO_ADDR
// sFog := false ;
10438: LD_ADDR_EXP 74
10442: PUSH
10443: LD_INT 0
10445: ST_TO_ADDR
// sReset := false ;
10446: LD_ADDR_EXP 75
10450: PUSH
10451: LD_INT 0
10453: ST_TO_ADDR
// sSun := false ;
10454: LD_ADDR_EXP 76
10458: PUSH
10459: LD_INT 0
10461: ST_TO_ADDR
// sTiger := false ;
10462: LD_ADDR_EXP 72
10466: PUSH
10467: LD_INT 0
10469: ST_TO_ADDR
// sBomb := false ;
10470: LD_ADDR_EXP 73
10474: PUSH
10475: LD_INT 0
10477: ST_TO_ADDR
// sWound := false ;
10478: LD_ADDR_EXP 81
10482: PUSH
10483: LD_INT 0
10485: ST_TO_ADDR
// sBetray := false ;
10486: LD_ADDR_EXP 85
10490: PUSH
10491: LD_INT 0
10493: ST_TO_ADDR
// sContamin := false ;
10494: LD_ADDR_EXP 86
10498: PUSH
10499: LD_INT 0
10501: ST_TO_ADDR
// sOil := false ;
10502: LD_ADDR_EXP 88
10506: PUSH
10507: LD_INT 0
10509: ST_TO_ADDR
// sStu := false ;
10510: LD_ADDR_EXP 92
10514: PUSH
10515: LD_INT 0
10517: ST_TO_ADDR
// sBazooka := false ;
10518: LD_ADDR_EXP 95
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// sMortar := false ;
10526: LD_ADDR_EXP 96
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// sRanger := false ;
10534: LD_ADDR_EXP 106
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// sComputer := false ;
10542: LD_ADDR_EXP 107
10546: PUSH
10547: LD_INT 0
10549: ST_TO_ADDR
// s30 := false ;
10550: LD_ADDR_EXP 108
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// s60 := false ;
10558: LD_ADDR_EXP 109
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// end ;
10566: LD_VAR 0 1
10570: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10571: LD_INT 0
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
10578: PPUSH
10579: PPUSH
// result := [ ] ;
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: EMPTY
10586: ST_TO_ADDR
// if campaign_id = 1 then
10587: LD_OWVAR 69
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 13761
// begin case mission_number of 1 :
10597: LD_OWVAR 70
10601: PUSH
10602: LD_INT 1
10604: DOUBLE
10605: EQUAL
10606: IFTRUE 10610
10608: GO 10686
10610: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10611: LD_ADDR_VAR 0 2
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: LD_INT 11
10624: PUSH
10625: LD_INT 12
10627: PUSH
10628: LD_INT 15
10630: PUSH
10631: LD_INT 16
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 23
10639: PUSH
10640: LD_INT 26
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 101
10656: PUSH
10657: LD_INT 102
10659: PUSH
10660: LD_INT 106
10662: PUSH
10663: LD_INT 116
10665: PUSH
10666: LD_INT 117
10668: PUSH
10669: LD_INT 118
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: ST_TO_ADDR
10684: GO 13759
10686: LD_INT 2
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10778
10694: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10695: LD_ADDR_VAR 0 2
10699: PUSH
10700: LD_INT 2
10702: PUSH
10703: LD_INT 4
10705: PUSH
10706: LD_INT 11
10708: PUSH
10709: LD_INT 12
10711: PUSH
10712: LD_INT 15
10714: PUSH
10715: LD_INT 16
10717: PUSH
10718: LD_INT 22
10720: PUSH
10721: LD_INT 23
10723: PUSH
10724: LD_INT 26
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 101
10740: PUSH
10741: LD_INT 102
10743: PUSH
10744: LD_INT 105
10746: PUSH
10747: LD_INT 106
10749: PUSH
10750: LD_INT 108
10752: PUSH
10753: LD_INT 116
10755: PUSH
10756: LD_INT 117
10758: PUSH
10759: LD_INT 118
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: ST_TO_ADDR
10776: GO 13759
10778: LD_INT 3
10780: DOUBLE
10781: EQUAL
10782: IFTRUE 10786
10784: GO 10874
10786: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: LD_INT 4
10797: PUSH
10798: LD_INT 5
10800: PUSH
10801: LD_INT 11
10803: PUSH
10804: LD_INT 12
10806: PUSH
10807: LD_INT 15
10809: PUSH
10810: LD_INT 16
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 26
10818: PUSH
10819: LD_INT 36
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 101
10836: PUSH
10837: LD_INT 102
10839: PUSH
10840: LD_INT 105
10842: PUSH
10843: LD_INT 106
10845: PUSH
10846: LD_INT 108
10848: PUSH
10849: LD_INT 116
10851: PUSH
10852: LD_INT 117
10854: PUSH
10855: LD_INT 118
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: ST_TO_ADDR
10872: GO 13759
10874: LD_INT 4
10876: DOUBLE
10877: EQUAL
10878: IFTRUE 10882
10880: GO 10978
10882: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 4
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: LD_INT 8
10899: PUSH
10900: LD_INT 11
10902: PUSH
10903: LD_INT 12
10905: PUSH
10906: LD_INT 15
10908: PUSH
10909: LD_INT 16
10911: PUSH
10912: LD_INT 22
10914: PUSH
10915: LD_INT 23
10917: PUSH
10918: LD_INT 26
10920: PUSH
10921: LD_INT 36
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 101
10940: PUSH
10941: LD_INT 102
10943: PUSH
10944: LD_INT 105
10946: PUSH
10947: LD_INT 106
10949: PUSH
10950: LD_INT 108
10952: PUSH
10953: LD_INT 116
10955: PUSH
10956: LD_INT 117
10958: PUSH
10959: LD_INT 118
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: ST_TO_ADDR
10976: GO 13759
10978: LD_INT 5
10980: DOUBLE
10981: EQUAL
10982: IFTRUE 10986
10984: GO 11098
10986: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: LD_INT 2
10994: PUSH
10995: LD_INT 4
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: LD_INT 6
11003: PUSH
11004: LD_INT 8
11006: PUSH
11007: LD_INT 11
11009: PUSH
11010: LD_INT 12
11012: PUSH
11013: LD_INT 15
11015: PUSH
11016: LD_INT 16
11018: PUSH
11019: LD_INT 22
11021: PUSH
11022: LD_INT 23
11024: PUSH
11025: LD_INT 25
11027: PUSH
11028: LD_INT 26
11030: PUSH
11031: LD_INT 36
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 101
11052: PUSH
11053: LD_INT 102
11055: PUSH
11056: LD_INT 105
11058: PUSH
11059: LD_INT 106
11061: PUSH
11062: LD_INT 108
11064: PUSH
11065: LD_INT 109
11067: PUSH
11068: LD_INT 112
11070: PUSH
11071: LD_INT 116
11073: PUSH
11074: LD_INT 117
11076: PUSH
11077: LD_INT 118
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: ST_TO_ADDR
11096: GO 13759
11098: LD_INT 6
11100: DOUBLE
11101: EQUAL
11102: IFTRUE 11106
11104: GO 11238
11106: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: LD_INT 4
11117: PUSH
11118: LD_INT 5
11120: PUSH
11121: LD_INT 6
11123: PUSH
11124: LD_INT 8
11126: PUSH
11127: LD_INT 11
11129: PUSH
11130: LD_INT 12
11132: PUSH
11133: LD_INT 15
11135: PUSH
11136: LD_INT 16
11138: PUSH
11139: LD_INT 20
11141: PUSH
11142: LD_INT 21
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_INT 23
11150: PUSH
11151: LD_INT 25
11153: PUSH
11154: LD_INT 26
11156: PUSH
11157: LD_INT 30
11159: PUSH
11160: LD_INT 31
11162: PUSH
11163: LD_INT 32
11165: PUSH
11166: LD_INT 36
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 101
11192: PUSH
11193: LD_INT 102
11195: PUSH
11196: LD_INT 105
11198: PUSH
11199: LD_INT 106
11201: PUSH
11202: LD_INT 108
11204: PUSH
11205: LD_INT 109
11207: PUSH
11208: LD_INT 112
11210: PUSH
11211: LD_INT 116
11213: PUSH
11214: LD_INT 117
11216: PUSH
11217: LD_INT 118
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: ST_TO_ADDR
11236: GO 13759
11238: LD_INT 7
11240: DOUBLE
11241: EQUAL
11242: IFTRUE 11246
11244: GO 11358
11246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 4
11257: PUSH
11258: LD_INT 5
11260: PUSH
11261: LD_INT 7
11263: PUSH
11264: LD_INT 11
11266: PUSH
11267: LD_INT 12
11269: PUSH
11270: LD_INT 15
11272: PUSH
11273: LD_INT 16
11275: PUSH
11276: LD_INT 20
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 22
11284: PUSH
11285: LD_INT 23
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 26
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 101
11312: PUSH
11313: LD_INT 102
11315: PUSH
11316: LD_INT 103
11318: PUSH
11319: LD_INT 105
11321: PUSH
11322: LD_INT 106
11324: PUSH
11325: LD_INT 108
11327: PUSH
11328: LD_INT 112
11330: PUSH
11331: LD_INT 116
11333: PUSH
11334: LD_INT 117
11336: PUSH
11337: LD_INT 118
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: ST_TO_ADDR
11356: GO 13759
11358: LD_INT 8
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11506
11366: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 4
11377: PUSH
11378: LD_INT 5
11380: PUSH
11381: LD_INT 6
11383: PUSH
11384: LD_INT 7
11386: PUSH
11387: LD_INT 8
11389: PUSH
11390: LD_INT 11
11392: PUSH
11393: LD_INT 12
11395: PUSH
11396: LD_INT 15
11398: PUSH
11399: LD_INT 16
11401: PUSH
11402: LD_INT 20
11404: PUSH
11405: LD_INT 21
11407: PUSH
11408: LD_INT 22
11410: PUSH
11411: LD_INT 23
11413: PUSH
11414: LD_INT 25
11416: PUSH
11417: LD_INT 26
11419: PUSH
11420: LD_INT 30
11422: PUSH
11423: LD_INT 31
11425: PUSH
11426: LD_INT 32
11428: PUSH
11429: LD_INT 36
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 101
11456: PUSH
11457: LD_INT 102
11459: PUSH
11460: LD_INT 103
11462: PUSH
11463: LD_INT 105
11465: PUSH
11466: LD_INT 106
11468: PUSH
11469: LD_INT 108
11471: PUSH
11472: LD_INT 109
11474: PUSH
11475: LD_INT 112
11477: PUSH
11478: LD_INT 116
11480: PUSH
11481: LD_INT 117
11483: PUSH
11484: LD_INT 118
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: ST_TO_ADDR
11504: GO 13759
11506: LD_INT 9
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11662
11514: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: LD_INT 2
11522: PUSH
11523: LD_INT 4
11525: PUSH
11526: LD_INT 5
11528: PUSH
11529: LD_INT 6
11531: PUSH
11532: LD_INT 7
11534: PUSH
11535: LD_INT 8
11537: PUSH
11538: LD_INT 11
11540: PUSH
11541: LD_INT 12
11543: PUSH
11544: LD_INT 15
11546: PUSH
11547: LD_INT 16
11549: PUSH
11550: LD_INT 20
11552: PUSH
11553: LD_INT 21
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_INT 23
11561: PUSH
11562: LD_INT 25
11564: PUSH
11565: LD_INT 26
11567: PUSH
11568: LD_INT 28
11570: PUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 31
11576: PUSH
11577: LD_INT 32
11579: PUSH
11580: LD_INT 36
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 101
11608: PUSH
11609: LD_INT 102
11611: PUSH
11612: LD_INT 103
11614: PUSH
11615: LD_INT 105
11617: PUSH
11618: LD_INT 106
11620: PUSH
11621: LD_INT 108
11623: PUSH
11624: LD_INT 109
11626: PUSH
11627: LD_INT 112
11629: PUSH
11630: LD_INT 114
11632: PUSH
11633: LD_INT 116
11635: PUSH
11636: LD_INT 117
11638: PUSH
11639: LD_INT 118
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: ST_TO_ADDR
11660: GO 13759
11662: LD_INT 10
11664: DOUBLE
11665: EQUAL
11666: IFTRUE 11670
11668: GO 11866
11670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: LD_INT 4
11681: PUSH
11682: LD_INT 5
11684: PUSH
11685: LD_INT 6
11687: PUSH
11688: LD_INT 7
11690: PUSH
11691: LD_INT 8
11693: PUSH
11694: LD_INT 9
11696: PUSH
11697: LD_INT 10
11699: PUSH
11700: LD_INT 11
11702: PUSH
11703: LD_INT 12
11705: PUSH
11706: LD_INT 13
11708: PUSH
11709: LD_INT 14
11711: PUSH
11712: LD_INT 15
11714: PUSH
11715: LD_INT 16
11717: PUSH
11718: LD_INT 17
11720: PUSH
11721: LD_INT 18
11723: PUSH
11724: LD_INT 19
11726: PUSH
11727: LD_INT 20
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_INT 23
11738: PUSH
11739: LD_INT 24
11741: PUSH
11742: LD_INT 25
11744: PUSH
11745: LD_INT 26
11747: PUSH
11748: LD_INT 28
11750: PUSH
11751: LD_INT 30
11753: PUSH
11754: LD_INT 31
11756: PUSH
11757: LD_INT 32
11759: PUSH
11760: LD_INT 36
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 101
11796: PUSH
11797: LD_INT 102
11799: PUSH
11800: LD_INT 103
11802: PUSH
11803: LD_INT 104
11805: PUSH
11806: LD_INT 105
11808: PUSH
11809: LD_INT 106
11811: PUSH
11812: LD_INT 107
11814: PUSH
11815: LD_INT 108
11817: PUSH
11818: LD_INT 109
11820: PUSH
11821: LD_INT 110
11823: PUSH
11824: LD_INT 111
11826: PUSH
11827: LD_INT 112
11829: PUSH
11830: LD_INT 114
11832: PUSH
11833: LD_INT 116
11835: PUSH
11836: LD_INT 117
11838: PUSH
11839: LD_INT 118
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: ST_TO_ADDR
11864: GO 13759
11866: LD_INT 11
11868: DOUBLE
11869: EQUAL
11870: IFTRUE 11874
11872: GO 12078
11874: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11875: LD_ADDR_VAR 0 2
11879: PUSH
11880: LD_INT 2
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 4
11888: PUSH
11889: LD_INT 5
11891: PUSH
11892: LD_INT 6
11894: PUSH
11895: LD_INT 7
11897: PUSH
11898: LD_INT 8
11900: PUSH
11901: LD_INT 9
11903: PUSH
11904: LD_INT 10
11906: PUSH
11907: LD_INT 11
11909: PUSH
11910: LD_INT 12
11912: PUSH
11913: LD_INT 13
11915: PUSH
11916: LD_INT 14
11918: PUSH
11919: LD_INT 15
11921: PUSH
11922: LD_INT 16
11924: PUSH
11925: LD_INT 17
11927: PUSH
11928: LD_INT 18
11930: PUSH
11931: LD_INT 19
11933: PUSH
11934: LD_INT 20
11936: PUSH
11937: LD_INT 21
11939: PUSH
11940: LD_INT 22
11942: PUSH
11943: LD_INT 23
11945: PUSH
11946: LD_INT 24
11948: PUSH
11949: LD_INT 25
11951: PUSH
11952: LD_INT 26
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 30
11960: PUSH
11961: LD_INT 31
11963: PUSH
11964: LD_INT 32
11966: PUSH
11967: LD_INT 34
11969: PUSH
11970: LD_INT 36
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 101
12008: PUSH
12009: LD_INT 102
12011: PUSH
12012: LD_INT 103
12014: PUSH
12015: LD_INT 104
12017: PUSH
12018: LD_INT 105
12020: PUSH
12021: LD_INT 106
12023: PUSH
12024: LD_INT 107
12026: PUSH
12027: LD_INT 108
12029: PUSH
12030: LD_INT 109
12032: PUSH
12033: LD_INT 110
12035: PUSH
12036: LD_INT 111
12038: PUSH
12039: LD_INT 112
12041: PUSH
12042: LD_INT 114
12044: PUSH
12045: LD_INT 116
12047: PUSH
12048: LD_INT 117
12050: PUSH
12051: LD_INT 118
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: ST_TO_ADDR
12076: GO 13759
12078: LD_INT 12
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12306
12086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12087: LD_ADDR_VAR 0 2
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 3
12100: PUSH
12101: LD_INT 4
12103: PUSH
12104: LD_INT 5
12106: PUSH
12107: LD_INT 6
12109: PUSH
12110: LD_INT 7
12112: PUSH
12113: LD_INT 8
12115: PUSH
12116: LD_INT 9
12118: PUSH
12119: LD_INT 10
12121: PUSH
12122: LD_INT 11
12124: PUSH
12125: LD_INT 12
12127: PUSH
12128: LD_INT 13
12130: PUSH
12131: LD_INT 14
12133: PUSH
12134: LD_INT 15
12136: PUSH
12137: LD_INT 16
12139: PUSH
12140: LD_INT 17
12142: PUSH
12143: LD_INT 18
12145: PUSH
12146: LD_INT 19
12148: PUSH
12149: LD_INT 20
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 22
12157: PUSH
12158: LD_INT 23
12160: PUSH
12161: LD_INT 24
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 26
12169: PUSH
12170: LD_INT 27
12172: PUSH
12173: LD_INT 28
12175: PUSH
12176: LD_INT 30
12178: PUSH
12179: LD_INT 31
12181: PUSH
12182: LD_INT 32
12184: PUSH
12185: LD_INT 33
12187: PUSH
12188: LD_INT 34
12190: PUSH
12191: LD_INT 36
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 101
12232: PUSH
12233: LD_INT 102
12235: PUSH
12236: LD_INT 103
12238: PUSH
12239: LD_INT 104
12241: PUSH
12242: LD_INT 105
12244: PUSH
12245: LD_INT 106
12247: PUSH
12248: LD_INT 107
12250: PUSH
12251: LD_INT 108
12253: PUSH
12254: LD_INT 109
12256: PUSH
12257: LD_INT 110
12259: PUSH
12260: LD_INT 111
12262: PUSH
12263: LD_INT 112
12265: PUSH
12266: LD_INT 113
12268: PUSH
12269: LD_INT 114
12271: PUSH
12272: LD_INT 116
12274: PUSH
12275: LD_INT 117
12277: PUSH
12278: LD_INT 118
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
12304: GO 13759
12306: LD_INT 13
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12522
12314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: LD_INT 2
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: LD_INT 4
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: LD_INT 8
12337: PUSH
12338: LD_INT 9
12340: PUSH
12341: LD_INT 10
12343: PUSH
12344: LD_INT 11
12346: PUSH
12347: LD_INT 12
12349: PUSH
12350: LD_INT 14
12352: PUSH
12353: LD_INT 15
12355: PUSH
12356: LD_INT 16
12358: PUSH
12359: LD_INT 17
12361: PUSH
12362: LD_INT 18
12364: PUSH
12365: LD_INT 19
12367: PUSH
12368: LD_INT 20
12370: PUSH
12371: LD_INT 21
12373: PUSH
12374: LD_INT 22
12376: PUSH
12377: LD_INT 23
12379: PUSH
12380: LD_INT 24
12382: PUSH
12383: LD_INT 25
12385: PUSH
12386: LD_INT 26
12388: PUSH
12389: LD_INT 27
12391: PUSH
12392: LD_INT 28
12394: PUSH
12395: LD_INT 30
12397: PUSH
12398: LD_INT 31
12400: PUSH
12401: LD_INT 32
12403: PUSH
12404: LD_INT 33
12406: PUSH
12407: LD_INT 34
12409: PUSH
12410: LD_INT 36
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 101
12448: PUSH
12449: LD_INT 102
12451: PUSH
12452: LD_INT 103
12454: PUSH
12455: LD_INT 104
12457: PUSH
12458: LD_INT 105
12460: PUSH
12461: LD_INT 106
12463: PUSH
12464: LD_INT 107
12466: PUSH
12467: LD_INT 108
12469: PUSH
12470: LD_INT 109
12472: PUSH
12473: LD_INT 110
12475: PUSH
12476: LD_INT 111
12478: PUSH
12479: LD_INT 112
12481: PUSH
12482: LD_INT 113
12484: PUSH
12485: LD_INT 114
12487: PUSH
12488: LD_INT 116
12490: PUSH
12491: LD_INT 117
12493: PUSH
12494: LD_INT 118
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: ST_TO_ADDR
12520: GO 13759
12522: LD_INT 14
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12754
12530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: LD_INT 3
12544: PUSH
12545: LD_INT 4
12547: PUSH
12548: LD_INT 5
12550: PUSH
12551: LD_INT 6
12553: PUSH
12554: LD_INT 7
12556: PUSH
12557: LD_INT 8
12559: PUSH
12560: LD_INT 9
12562: PUSH
12563: LD_INT 10
12565: PUSH
12566: LD_INT 11
12568: PUSH
12569: LD_INT 12
12571: PUSH
12572: LD_INT 13
12574: PUSH
12575: LD_INT 14
12577: PUSH
12578: LD_INT 15
12580: PUSH
12581: LD_INT 16
12583: PUSH
12584: LD_INT 17
12586: PUSH
12587: LD_INT 18
12589: PUSH
12590: LD_INT 19
12592: PUSH
12593: LD_INT 20
12595: PUSH
12596: LD_INT 21
12598: PUSH
12599: LD_INT 22
12601: PUSH
12602: LD_INT 23
12604: PUSH
12605: LD_INT 24
12607: PUSH
12608: LD_INT 25
12610: PUSH
12611: LD_INT 26
12613: PUSH
12614: LD_INT 27
12616: PUSH
12617: LD_INT 28
12619: PUSH
12620: LD_INT 29
12622: PUSH
12623: LD_INT 30
12625: PUSH
12626: LD_INT 31
12628: PUSH
12629: LD_INT 32
12631: PUSH
12632: LD_INT 33
12634: PUSH
12635: LD_INT 34
12637: PUSH
12638: LD_INT 36
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 101
12680: PUSH
12681: LD_INT 102
12683: PUSH
12684: LD_INT 103
12686: PUSH
12687: LD_INT 104
12689: PUSH
12690: LD_INT 105
12692: PUSH
12693: LD_INT 106
12695: PUSH
12696: LD_INT 107
12698: PUSH
12699: LD_INT 108
12701: PUSH
12702: LD_INT 109
12704: PUSH
12705: LD_INT 110
12707: PUSH
12708: LD_INT 111
12710: PUSH
12711: LD_INT 112
12713: PUSH
12714: LD_INT 113
12716: PUSH
12717: LD_INT 114
12719: PUSH
12720: LD_INT 116
12722: PUSH
12723: LD_INT 117
12725: PUSH
12726: LD_INT 118
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: ST_TO_ADDR
12752: GO 13759
12754: LD_INT 15
12756: DOUBLE
12757: EQUAL
12758: IFTRUE 12762
12760: GO 12986
12762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: LD_INT 5
12782: PUSH
12783: LD_INT 6
12785: PUSH
12786: LD_INT 7
12788: PUSH
12789: LD_INT 8
12791: PUSH
12792: LD_INT 9
12794: PUSH
12795: LD_INT 10
12797: PUSH
12798: LD_INT 11
12800: PUSH
12801: LD_INT 12
12803: PUSH
12804: LD_INT 13
12806: PUSH
12807: LD_INT 14
12809: PUSH
12810: LD_INT 15
12812: PUSH
12813: LD_INT 16
12815: PUSH
12816: LD_INT 17
12818: PUSH
12819: LD_INT 18
12821: PUSH
12822: LD_INT 19
12824: PUSH
12825: LD_INT 20
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 22
12833: PUSH
12834: LD_INT 23
12836: PUSH
12837: LD_INT 24
12839: PUSH
12840: LD_INT 25
12842: PUSH
12843: LD_INT 26
12845: PUSH
12846: LD_INT 27
12848: PUSH
12849: LD_INT 28
12851: PUSH
12852: LD_INT 29
12854: PUSH
12855: LD_INT 30
12857: PUSH
12858: LD_INT 31
12860: PUSH
12861: LD_INT 32
12863: PUSH
12864: LD_INT 33
12866: PUSH
12867: LD_INT 34
12869: PUSH
12870: LD_INT 36
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 101
12912: PUSH
12913: LD_INT 102
12915: PUSH
12916: LD_INT 103
12918: PUSH
12919: LD_INT 104
12921: PUSH
12922: LD_INT 105
12924: PUSH
12925: LD_INT 106
12927: PUSH
12928: LD_INT 107
12930: PUSH
12931: LD_INT 108
12933: PUSH
12934: LD_INT 109
12936: PUSH
12937: LD_INT 110
12939: PUSH
12940: LD_INT 111
12942: PUSH
12943: LD_INT 112
12945: PUSH
12946: LD_INT 113
12948: PUSH
12949: LD_INT 114
12951: PUSH
12952: LD_INT 116
12954: PUSH
12955: LD_INT 117
12957: PUSH
12958: LD_INT 118
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: ST_TO_ADDR
12984: GO 13759
12986: LD_INT 16
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 13130
12994: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: LD_INT 2
13002: PUSH
13003: LD_INT 4
13005: PUSH
13006: LD_INT 5
13008: PUSH
13009: LD_INT 7
13011: PUSH
13012: LD_INT 11
13014: PUSH
13015: LD_INT 12
13017: PUSH
13018: LD_INT 15
13020: PUSH
13021: LD_INT 16
13023: PUSH
13024: LD_INT 20
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 22
13032: PUSH
13033: LD_INT 23
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 26
13041: PUSH
13042: LD_INT 30
13044: PUSH
13045: LD_INT 31
13047: PUSH
13048: LD_INT 32
13050: PUSH
13051: LD_INT 33
13053: PUSH
13054: LD_INT 34
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 101
13080: PUSH
13081: LD_INT 102
13083: PUSH
13084: LD_INT 103
13086: PUSH
13087: LD_INT 106
13089: PUSH
13090: LD_INT 108
13092: PUSH
13093: LD_INT 112
13095: PUSH
13096: LD_INT 113
13098: PUSH
13099: LD_INT 114
13101: PUSH
13102: LD_INT 116
13104: PUSH
13105: LD_INT 117
13107: PUSH
13108: LD_INT 118
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: ST_TO_ADDR
13128: GO 13759
13130: LD_INT 17
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13362
13138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: LD_INT 4
13155: PUSH
13156: LD_INT 5
13158: PUSH
13159: LD_INT 6
13161: PUSH
13162: LD_INT 7
13164: PUSH
13165: LD_INT 8
13167: PUSH
13168: LD_INT 9
13170: PUSH
13171: LD_INT 10
13173: PUSH
13174: LD_INT 11
13176: PUSH
13177: LD_INT 12
13179: PUSH
13180: LD_INT 13
13182: PUSH
13183: LD_INT 14
13185: PUSH
13186: LD_INT 15
13188: PUSH
13189: LD_INT 16
13191: PUSH
13192: LD_INT 17
13194: PUSH
13195: LD_INT 18
13197: PUSH
13198: LD_INT 19
13200: PUSH
13201: LD_INT 20
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_INT 23
13212: PUSH
13213: LD_INT 24
13215: PUSH
13216: LD_INT 25
13218: PUSH
13219: LD_INT 26
13221: PUSH
13222: LD_INT 27
13224: PUSH
13225: LD_INT 28
13227: PUSH
13228: LD_INT 29
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 31
13236: PUSH
13237: LD_INT 32
13239: PUSH
13240: LD_INT 33
13242: PUSH
13243: LD_INT 34
13245: PUSH
13246: LD_INT 36
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 101
13288: PUSH
13289: LD_INT 102
13291: PUSH
13292: LD_INT 103
13294: PUSH
13295: LD_INT 104
13297: PUSH
13298: LD_INT 105
13300: PUSH
13301: LD_INT 106
13303: PUSH
13304: LD_INT 107
13306: PUSH
13307: LD_INT 108
13309: PUSH
13310: LD_INT 109
13312: PUSH
13313: LD_INT 110
13315: PUSH
13316: LD_INT 111
13318: PUSH
13319: LD_INT 112
13321: PUSH
13322: LD_INT 113
13324: PUSH
13325: LD_INT 114
13327: PUSH
13328: LD_INT 116
13330: PUSH
13331: LD_INT 117
13333: PUSH
13334: LD_INT 118
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: ST_TO_ADDR
13360: GO 13759
13362: LD_INT 18
13364: DOUBLE
13365: EQUAL
13366: IFTRUE 13370
13368: GO 13518
13370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: LD_INT 7
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: LD_INT 15
13396: PUSH
13397: LD_INT 16
13399: PUSH
13400: LD_INT 20
13402: PUSH
13403: LD_INT 21
13405: PUSH
13406: LD_INT 22
13408: PUSH
13409: LD_INT 23
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 26
13417: PUSH
13418: LD_INT 30
13420: PUSH
13421: LD_INT 31
13423: PUSH
13424: LD_INT 32
13426: PUSH
13427: LD_INT 33
13429: PUSH
13430: LD_INT 34
13432: PUSH
13433: LD_INT 35
13435: PUSH
13436: LD_INT 36
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 101
13464: PUSH
13465: LD_INT 102
13467: PUSH
13468: LD_INT 103
13470: PUSH
13471: LD_INT 106
13473: PUSH
13474: LD_INT 108
13476: PUSH
13477: LD_INT 112
13479: PUSH
13480: LD_INT 113
13482: PUSH
13483: LD_INT 114
13485: PUSH
13486: LD_INT 115
13488: PUSH
13489: LD_INT 116
13491: PUSH
13492: LD_INT 117
13494: PUSH
13495: LD_INT 118
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: ST_TO_ADDR
13516: GO 13759
13518: LD_INT 19
13520: DOUBLE
13521: EQUAL
13522: IFTRUE 13526
13524: GO 13758
13526: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13527: LD_ADDR_VAR 0 2
13531: PUSH
13532: LD_INT 1
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: LD_INT 3
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: LD_INT 5
13546: PUSH
13547: LD_INT 6
13549: PUSH
13550: LD_INT 7
13552: PUSH
13553: LD_INT 8
13555: PUSH
13556: LD_INT 9
13558: PUSH
13559: LD_INT 10
13561: PUSH
13562: LD_INT 11
13564: PUSH
13565: LD_INT 12
13567: PUSH
13568: LD_INT 13
13570: PUSH
13571: LD_INT 14
13573: PUSH
13574: LD_INT 15
13576: PUSH
13577: LD_INT 16
13579: PUSH
13580: LD_INT 17
13582: PUSH
13583: LD_INT 18
13585: PUSH
13586: LD_INT 19
13588: PUSH
13589: LD_INT 20
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 22
13597: PUSH
13598: LD_INT 23
13600: PUSH
13601: LD_INT 24
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 26
13609: PUSH
13610: LD_INT 27
13612: PUSH
13613: LD_INT 28
13615: PUSH
13616: LD_INT 29
13618: PUSH
13619: LD_INT 30
13621: PUSH
13622: LD_INT 31
13624: PUSH
13625: LD_INT 32
13627: PUSH
13628: LD_INT 33
13630: PUSH
13631: LD_INT 34
13633: PUSH
13634: LD_INT 35
13636: PUSH
13637: LD_INT 36
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 101
13680: PUSH
13681: LD_INT 102
13683: PUSH
13684: LD_INT 103
13686: PUSH
13687: LD_INT 104
13689: PUSH
13690: LD_INT 105
13692: PUSH
13693: LD_INT 106
13695: PUSH
13696: LD_INT 107
13698: PUSH
13699: LD_INT 108
13701: PUSH
13702: LD_INT 109
13704: PUSH
13705: LD_INT 110
13707: PUSH
13708: LD_INT 111
13710: PUSH
13711: LD_INT 112
13713: PUSH
13714: LD_INT 113
13716: PUSH
13717: LD_INT 114
13719: PUSH
13720: LD_INT 115
13722: PUSH
13723: LD_INT 116
13725: PUSH
13726: LD_INT 117
13728: PUSH
13729: LD_INT 118
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: ST_TO_ADDR
13756: GO 13759
13758: POP
// end else
13759: GO 13990
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13761: LD_ADDR_VAR 0 2
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: LD_INT 2
13771: PUSH
13772: LD_INT 3
13774: PUSH
13775: LD_INT 4
13777: PUSH
13778: LD_INT 5
13780: PUSH
13781: LD_INT 6
13783: PUSH
13784: LD_INT 7
13786: PUSH
13787: LD_INT 8
13789: PUSH
13790: LD_INT 9
13792: PUSH
13793: LD_INT 10
13795: PUSH
13796: LD_INT 11
13798: PUSH
13799: LD_INT 12
13801: PUSH
13802: LD_INT 13
13804: PUSH
13805: LD_INT 14
13807: PUSH
13808: LD_INT 15
13810: PUSH
13811: LD_INT 16
13813: PUSH
13814: LD_INT 17
13816: PUSH
13817: LD_INT 18
13819: PUSH
13820: LD_INT 19
13822: PUSH
13823: LD_INT 20
13825: PUSH
13826: LD_INT 21
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_INT 23
13834: PUSH
13835: LD_INT 24
13837: PUSH
13838: LD_INT 25
13840: PUSH
13841: LD_INT 26
13843: PUSH
13844: LD_INT 27
13846: PUSH
13847: LD_INT 28
13849: PUSH
13850: LD_INT 29
13852: PUSH
13853: LD_INT 30
13855: PUSH
13856: LD_INT 31
13858: PUSH
13859: LD_INT 32
13861: PUSH
13862: LD_INT 33
13864: PUSH
13865: LD_INT 34
13867: PUSH
13868: LD_INT 35
13870: PUSH
13871: LD_INT 36
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 101
13914: PUSH
13915: LD_INT 102
13917: PUSH
13918: LD_INT 103
13920: PUSH
13921: LD_INT 104
13923: PUSH
13924: LD_INT 105
13926: PUSH
13927: LD_INT 106
13929: PUSH
13930: LD_INT 107
13932: PUSH
13933: LD_INT 108
13935: PUSH
13936: LD_INT 109
13938: PUSH
13939: LD_INT 110
13941: PUSH
13942: LD_INT 111
13944: PUSH
13945: LD_INT 112
13947: PUSH
13948: LD_INT 113
13950: PUSH
13951: LD_INT 114
13953: PUSH
13954: LD_INT 115
13956: PUSH
13957: LD_INT 116
13959: PUSH
13960: LD_INT 117
13962: PUSH
13963: LD_INT 118
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// if result then
13990: LD_VAR 0 2
13994: IFFALSE 14780
// begin normal :=  ;
13996: LD_ADDR_VAR 0 5
14000: PUSH
14001: LD_STRING 
14003: ST_TO_ADDR
// hardcore :=  ;
14004: LD_ADDR_VAR 0 6
14008: PUSH
14009: LD_STRING 
14011: ST_TO_ADDR
// active :=  ;
14012: LD_ADDR_VAR 0 7
14016: PUSH
14017: LD_STRING 
14019: ST_TO_ADDR
// for i = 1 to normalCounter do
14020: LD_ADDR_VAR 0 8
14024: PUSH
14025: DOUBLE
14026: LD_INT 1
14028: DEC
14029: ST_TO_ADDR
14030: LD_EXP 54
14034: PUSH
14035: FOR_TO
14036: IFFALSE 14137
// begin tmp := 0 ;
14038: LD_ADDR_VAR 0 3
14042: PUSH
14043: LD_STRING 0
14045: ST_TO_ADDR
// if result [ 1 ] then
14046: LD_VAR 0 2
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: IFFALSE 14119
// if result [ 1 ] [ 1 ] = i then
14056: LD_VAR 0 2
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: PUSH
14065: LD_INT 1
14067: ARRAY
14068: PUSH
14069: LD_VAR 0 8
14073: EQUAL
14074: IFFALSE 14119
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 2
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: LD_VAR 0 2
14093: PUSH
14094: LD_INT 1
14096: ARRAY
14097: PPUSH
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 3
14105: PPUSH
14106: CALL_OW 1
14110: ST_TO_ADDR
// tmp := 1 ;
14111: LD_ADDR_VAR 0 3
14115: PUSH
14116: LD_STRING 1
14118: ST_TO_ADDR
// end ; normal := normal & tmp ;
14119: LD_ADDR_VAR 0 5
14123: PUSH
14124: LD_VAR 0 5
14128: PUSH
14129: LD_VAR 0 3
14133: STR
14134: ST_TO_ADDR
// end ;
14135: GO 14035
14137: POP
14138: POP
// for i = 1 to hardcoreCounter do
14139: LD_ADDR_VAR 0 8
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_EXP 55
14153: PUSH
14154: FOR_TO
14155: IFFALSE 14260
// begin tmp := 0 ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_STRING 0
14164: ST_TO_ADDR
// if result [ 2 ] then
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 2
14172: ARRAY
14173: IFFALSE 14242
// if result [ 2 ] [ 1 ] = 100 + i then
14175: LD_VAR 0 2
14179: PUSH
14180: LD_INT 2
14182: ARRAY
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PUSH
14188: LD_INT 100
14190: PUSH
14191: LD_VAR 0 8
14195: PLUS
14196: EQUAL
14197: IFFALSE 14242
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: LD_VAR 0 2
14208: PPUSH
14209: LD_INT 2
14211: PPUSH
14212: LD_VAR 0 2
14216: PUSH
14217: LD_INT 2
14219: ARRAY
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 3
14228: PPUSH
14229: CALL_OW 1
14233: ST_TO_ADDR
// tmp := 1 ;
14234: LD_ADDR_VAR 0 3
14238: PUSH
14239: LD_STRING 1
14241: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14242: LD_ADDR_VAR 0 6
14246: PUSH
14247: LD_VAR 0 6
14251: PUSH
14252: LD_VAR 0 3
14256: STR
14257: ST_TO_ADDR
// end ;
14258: GO 14154
14260: POP
14261: POP
// if isGameLoad then
14262: LD_VAR 0 1
14266: IFFALSE 14741
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14268: LD_ADDR_VAR 0 4
14272: PUSH
14273: LD_EXP 58
14277: PUSH
14278: LD_EXP 57
14282: PUSH
14283: LD_EXP 59
14287: PUSH
14288: LD_EXP 56
14292: PUSH
14293: LD_EXP 60
14297: PUSH
14298: LD_EXP 61
14302: PUSH
14303: LD_EXP 62
14307: PUSH
14308: LD_EXP 63
14312: PUSH
14313: LD_EXP 64
14317: PUSH
14318: LD_EXP 65
14322: PUSH
14323: LD_EXP 66
14327: PUSH
14328: LD_EXP 67
14332: PUSH
14333: LD_EXP 68
14337: PUSH
14338: LD_EXP 69
14342: PUSH
14343: LD_EXP 77
14347: PUSH
14348: LD_EXP 78
14352: PUSH
14353: LD_EXP 79
14357: PUSH
14358: LD_EXP 80
14362: PUSH
14363: LD_EXP 82
14367: PUSH
14368: LD_EXP 83
14372: PUSH
14373: LD_EXP 84
14377: PUSH
14378: LD_EXP 87
14382: PUSH
14383: LD_EXP 89
14387: PUSH
14388: LD_EXP 90
14392: PUSH
14393: LD_EXP 91
14397: PUSH
14398: LD_EXP 93
14402: PUSH
14403: LD_EXP 94
14407: PUSH
14408: LD_EXP 97
14412: PUSH
14413: LD_EXP 98
14417: PUSH
14418: LD_EXP 99
14422: PUSH
14423: LD_EXP 100
14427: PUSH
14428: LD_EXP 101
14432: PUSH
14433: LD_EXP 102
14437: PUSH
14438: LD_EXP 103
14442: PUSH
14443: LD_EXP 104
14447: PUSH
14448: LD_EXP 105
14452: PUSH
14453: LD_EXP 70
14457: PUSH
14458: LD_EXP 71
14462: PUSH
14463: LD_EXP 74
14467: PUSH
14468: LD_EXP 75
14472: PUSH
14473: LD_EXP 76
14477: PUSH
14478: LD_EXP 72
14482: PUSH
14483: LD_EXP 73
14487: PUSH
14488: LD_EXP 81
14492: PUSH
14493: LD_EXP 85
14497: PUSH
14498: LD_EXP 86
14502: PUSH
14503: LD_EXP 88
14507: PUSH
14508: LD_EXP 92
14512: PUSH
14513: LD_EXP 95
14517: PUSH
14518: LD_EXP 96
14522: PUSH
14523: LD_EXP 106
14527: PUSH
14528: LD_EXP 107
14532: PUSH
14533: LD_EXP 108
14537: PUSH
14538: LD_EXP 109
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: ST_TO_ADDR
// tmp :=  ;
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_STRING 
14606: ST_TO_ADDR
// for i = 1 to normalCounter do
14607: LD_ADDR_VAR 0 8
14611: PUSH
14612: DOUBLE
14613: LD_INT 1
14615: DEC
14616: ST_TO_ADDR
14617: LD_EXP 54
14621: PUSH
14622: FOR_TO
14623: IFFALSE 14659
// begin if flags [ i ] then
14625: LD_VAR 0 4
14629: PUSH
14630: LD_VAR 0 8
14634: ARRAY
14635: IFFALSE 14657
// tmp := tmp & i & ; ;
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_VAR 0 3
14646: PUSH
14647: LD_VAR 0 8
14651: STR
14652: PUSH
14653: LD_STRING ;
14655: STR
14656: ST_TO_ADDR
// end ;
14657: GO 14622
14659: POP
14660: POP
// for i = 1 to hardcoreCounter do
14661: LD_ADDR_VAR 0 8
14665: PUSH
14666: DOUBLE
14667: LD_INT 1
14669: DEC
14670: ST_TO_ADDR
14671: LD_EXP 55
14675: PUSH
14676: FOR_TO
14677: IFFALSE 14723
// begin if flags [ normalCounter + i ] then
14679: LD_VAR 0 4
14683: PUSH
14684: LD_EXP 54
14688: PUSH
14689: LD_VAR 0 8
14693: PLUS
14694: ARRAY
14695: IFFALSE 14721
// tmp := tmp & ( 100 + i ) & ; ;
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_VAR 0 3
14706: PUSH
14707: LD_INT 100
14709: PUSH
14710: LD_VAR 0 8
14714: PLUS
14715: STR
14716: PUSH
14717: LD_STRING ;
14719: STR
14720: ST_TO_ADDR
// end ;
14721: GO 14676
14723: POP
14724: POP
// if tmp then
14725: LD_VAR 0 3
14729: IFFALSE 14741
// active := tmp ;
14731: LD_ADDR_VAR 0 7
14735: PUSH
14736: LD_VAR 0 3
14740: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14741: LD_STRING getStreamItemsFromMission("
14743: PUSH
14744: LD_VAR 0 5
14748: STR
14749: PUSH
14750: LD_STRING ","
14752: STR
14753: PUSH
14754: LD_VAR 0 6
14758: STR
14759: PUSH
14760: LD_STRING ","
14762: STR
14763: PUSH
14764: LD_VAR 0 7
14768: STR
14769: PUSH
14770: LD_STRING ")
14772: STR
14773: PPUSH
14774: CALL_OW 559
// end else
14778: GO 14787
// ToLua ( getStreamItemsFromMission("","","") ) ;
14780: LD_STRING getStreamItemsFromMission("","","")
14782: PPUSH
14783: CALL_OW 559
// end ;
14787: LD_VAR 0 2
14791: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14792: LD_EXP 53
14796: IFFALSE 14804
14798: PUSH
14799: LD_EXP 58
14803: AND
14804: IFFALSE 14928
14806: GO 14808
14808: DISABLE
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
// begin enable ;
14813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14814: LD_ADDR_VAR 0 2
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_OWVAR 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 34
14836: PUSH
14837: LD_INT 7
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 34
14846: PUSH
14847: LD_INT 45
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 34
14856: PUSH
14857: LD_INT 28
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 34
14866: PUSH
14867: LD_INT 47
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: ST_TO_ADDR
// if not tmp then
14890: LD_VAR 0 2
14894: NOT
14895: IFFALSE 14899
// exit ;
14897: GO 14928
// for i in tmp do
14899: LD_ADDR_VAR 0 1
14903: PUSH
14904: LD_VAR 0 2
14908: PUSH
14909: FOR_IN
14910: IFFALSE 14926
// begin SetLives ( i , 0 ) ;
14912: LD_VAR 0 1
14916: PPUSH
14917: LD_INT 0
14919: PPUSH
14920: CALL_OW 234
// end ;
14924: GO 14909
14926: POP
14927: POP
// end ;
14928: PPOPN 2
14930: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14931: LD_EXP 53
14935: IFFALSE 14943
14937: PUSH
14938: LD_EXP 59
14942: AND
14943: IFFALSE 15027
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
14951: PPUSH
// begin enable ;
14952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14953: LD_ADDR_VAR 0 2
14957: PUSH
14958: LD_INT 22
14960: PUSH
14961: LD_OWVAR 2
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 32
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PPUSH
14984: CALL_OW 69
14988: ST_TO_ADDR
// if not tmp then
14989: LD_VAR 0 2
14993: NOT
14994: IFFALSE 14998
// exit ;
14996: GO 15027
// for i in tmp do
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_VAR 0 2
15007: PUSH
15008: FOR_IN
15009: IFFALSE 15025
// begin SetLives ( i , 0 ) ;
15011: LD_VAR 0 1
15015: PPUSH
15016: LD_INT 0
15018: PPUSH
15019: CALL_OW 234
// end ;
15023: GO 15008
15025: POP
15026: POP
// end ;
15027: PPOPN 2
15029: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15030: LD_EXP 53
15034: IFFALSE 15042
15036: PUSH
15037: LD_EXP 56
15041: AND
15042: IFFALSE 15135
15044: GO 15046
15046: DISABLE
15047: LD_INT 0
15049: PPUSH
// begin enable ;
15050: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15051: LD_ADDR_VAR 0 1
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_OWVAR 2
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 5
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 9
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 25
15093: PUSH
15094: LD_INT 8
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: PUSH
15116: FOR_IN
15117: IFFALSE 15133
// begin SetClass ( i , 1 ) ;
15119: LD_VAR 0 1
15123: PPUSH
15124: LD_INT 1
15126: PPUSH
15127: CALL_OW 336
// end ;
15131: GO 15116
15133: POP
15134: POP
// end ;
15135: PPOPN 1
15137: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15138: LD_EXP 53
15142: IFFALSE 15150
15144: PUSH
15145: LD_EXP 57
15149: AND
15150: IFFALSE 15162
15152: PUSH
15153: LD_OWVAR 65
15157: PUSH
15158: LD_INT 7
15160: LESS
15161: AND
15162: IFFALSE 15176
15164: GO 15166
15166: DISABLE
// begin enable ;
15167: ENABLE
// game_speed := 7 ;
15168: LD_ADDR_OWVAR 65
15172: PUSH
15173: LD_INT 7
15175: ST_TO_ADDR
// end ;
15176: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15177: LD_EXP 53
15181: IFFALSE 15189
15183: PUSH
15184: LD_EXP 60
15188: AND
15189: IFFALSE 15391
15191: GO 15193
15193: DISABLE
15194: LD_INT 0
15196: PPUSH
15197: PPUSH
15198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15199: LD_ADDR_VAR 0 3
15203: PUSH
15204: LD_INT 81
15206: PUSH
15207: LD_OWVAR 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 21
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: ST_TO_ADDR
// if not tmp then
15235: LD_VAR 0 3
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15391
// if tmp > 5 then
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 5
15251: GREATER
15252: IFFALSE 15264
// k := 5 else
15254: LD_ADDR_VAR 0 2
15258: PUSH
15259: LD_INT 5
15261: ST_TO_ADDR
15262: GO 15274
// k := tmp ;
15264: LD_ADDR_VAR 0 2
15268: PUSH
15269: LD_VAR 0 3
15273: ST_TO_ADDR
// for i := 1 to k do
15274: LD_ADDR_VAR 0 1
15278: PUSH
15279: DOUBLE
15280: LD_INT 1
15282: DEC
15283: ST_TO_ADDR
15284: LD_VAR 0 2
15288: PUSH
15289: FOR_TO
15290: IFFALSE 15389
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15292: LD_VAR 0 3
15296: PUSH
15297: LD_VAR 0 1
15301: ARRAY
15302: PPUSH
15303: LD_VAR 0 1
15307: PUSH
15308: LD_INT 4
15310: MOD
15311: PUSH
15312: LD_INT 1
15314: PLUS
15315: PPUSH
15316: CALL_OW 259
15320: PUSH
15321: LD_INT 10
15323: LESS
15324: IFFALSE 15387
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15326: LD_VAR 0 3
15330: PUSH
15331: LD_VAR 0 1
15335: ARRAY
15336: PPUSH
15337: LD_VAR 0 1
15341: PUSH
15342: LD_INT 4
15344: MOD
15345: PUSH
15346: LD_INT 1
15348: PLUS
15349: PPUSH
15350: LD_VAR 0 3
15354: PUSH
15355: LD_VAR 0 1
15359: ARRAY
15360: PPUSH
15361: LD_VAR 0 1
15365: PUSH
15366: LD_INT 4
15368: MOD
15369: PUSH
15370: LD_INT 1
15372: PLUS
15373: PPUSH
15374: CALL_OW 259
15378: PUSH
15379: LD_INT 1
15381: PLUS
15382: PPUSH
15383: CALL_OW 237
15387: GO 15289
15389: POP
15390: POP
// end ;
15391: PPOPN 3
15393: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15394: LD_EXP 53
15398: IFFALSE 15406
15400: PUSH
15401: LD_EXP 61
15405: AND
15406: IFFALSE 15426
15408: GO 15410
15410: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15411: LD_INT 4
15413: PPUSH
15414: LD_OWVAR 2
15418: PPUSH
15419: LD_INT 0
15421: PPUSH
15422: CALL_OW 324
15426: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15427: LD_EXP 53
15431: IFFALSE 15439
15433: PUSH
15434: LD_EXP 90
15438: AND
15439: IFFALSE 15459
15441: GO 15443
15443: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15444: LD_INT 19
15446: PPUSH
15447: LD_OWVAR 2
15451: PPUSH
15452: LD_INT 0
15454: PPUSH
15455: CALL_OW 324
15459: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15460: LD_EXP 53
15464: IFFALSE 15472
15466: PUSH
15467: LD_EXP 62
15471: AND
15472: IFFALSE 15574
15474: GO 15476
15476: DISABLE
15477: LD_INT 0
15479: PPUSH
15480: PPUSH
// begin enable ;
15481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15482: LD_ADDR_VAR 0 2
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: LD_OWVAR 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 34
15504: PUSH
15505: LD_INT 11
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 34
15514: PUSH
15515: LD_INT 30
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PPUSH
15531: CALL_OW 69
15535: ST_TO_ADDR
// if not tmp then
15536: LD_VAR 0 2
15540: NOT
15541: IFFALSE 15545
// exit ;
15543: GO 15574
// for i in tmp do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_VAR 0 2
15554: PUSH
15555: FOR_IN
15556: IFFALSE 15572
// begin SetLives ( i , 0 ) ;
15558: LD_VAR 0 1
15562: PPUSH
15563: LD_INT 0
15565: PPUSH
15566: CALL_OW 234
// end ;
15570: GO 15555
15572: POP
15573: POP
// end ;
15574: PPOPN 2
15576: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15577: LD_EXP 53
15581: IFFALSE 15589
15583: PUSH
15584: LD_EXP 63
15588: AND
15589: IFFALSE 15609
15591: GO 15593
15593: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15594: LD_INT 32
15596: PPUSH
15597: LD_OWVAR 2
15601: PPUSH
15602: LD_INT 0
15604: PPUSH
15605: CALL_OW 324
15609: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15610: LD_EXP 53
15614: IFFALSE 15622
15616: PUSH
15617: LD_EXP 64
15621: AND
15622: IFFALSE 15805
15624: GO 15626
15626: DISABLE
15627: LD_INT 0
15629: PPUSH
15630: PPUSH
15631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15632: LD_ADDR_VAR 0 2
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_OWVAR 2
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 33
15651: PUSH
15652: LD_INT 3
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: ST_TO_ADDR
// if not tmp then
15668: LD_VAR 0 2
15672: NOT
15673: IFFALSE 15677
// exit ;
15675: GO 15805
// side := 0 ;
15677: LD_ADDR_VAR 0 3
15681: PUSH
15682: LD_INT 0
15684: ST_TO_ADDR
// for i := 1 to 8 do
15685: LD_ADDR_VAR 0 1
15689: PUSH
15690: DOUBLE
15691: LD_INT 1
15693: DEC
15694: ST_TO_ADDR
15695: LD_INT 8
15697: PUSH
15698: FOR_TO
15699: IFFALSE 15749
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15701: LD_OWVAR 2
15705: PUSH
15706: LD_VAR 0 1
15710: NONEQUAL
15711: IFFALSE 15733
15713: PUSH
15714: LD_OWVAR 2
15718: PPUSH
15719: LD_VAR 0 1
15723: PPUSH
15724: CALL_OW 81
15728: PUSH
15729: LD_INT 2
15731: EQUAL
15732: AND
15733: IFFALSE 15747
// begin side := i ;
15735: LD_ADDR_VAR 0 3
15739: PUSH
15740: LD_VAR 0 1
15744: ST_TO_ADDR
// break ;
15745: GO 15749
// end ;
15747: GO 15698
15749: POP
15750: POP
// if not side then
15751: LD_VAR 0 3
15755: NOT
15756: IFFALSE 15760
// exit ;
15758: GO 15805
// for i := 1 to tmp do
15760: LD_ADDR_VAR 0 1
15764: PUSH
15765: DOUBLE
15766: LD_INT 1
15768: DEC
15769: ST_TO_ADDR
15770: LD_VAR 0 2
15774: PUSH
15775: FOR_TO
15776: IFFALSE 15803
// if Prob ( 60 ) then
15778: LD_INT 60
15780: PPUSH
15781: CALL_OW 13
15785: IFFALSE 15801
// SetSide ( i , side ) ;
15787: LD_VAR 0 1
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: CALL_OW 235
15801: GO 15775
15803: POP
15804: POP
// end ;
15805: PPOPN 3
15807: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15808: LD_EXP 53
15812: IFFALSE 15820
15814: PUSH
15815: LD_EXP 66
15819: AND
15820: IFFALSE 15939
15822: GO 15824
15824: DISABLE
15825: LD_INT 0
15827: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15828: LD_ADDR_VAR 0 1
15832: PUSH
15833: LD_INT 22
15835: PUSH
15836: LD_OWVAR 2
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 21
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 3
15857: PUSH
15858: LD_INT 23
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: PUSH
15882: FOR_IN
15883: IFFALSE 15937
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 257
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: IN
15913: IFFALSE 15935
// SetClass ( un , rand ( 1 , 4 ) ) ;
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_INT 1
15922: PPUSH
15923: LD_INT 4
15925: PPUSH
15926: CALL_OW 12
15930: PPUSH
15931: CALL_OW 336
15935: GO 15882
15937: POP
15938: POP
// end ;
15939: PPOPN 1
15941: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15942: LD_EXP 53
15946: IFFALSE 15954
15948: PUSH
15949: LD_EXP 65
15953: AND
15954: IFFALSE 16033
15956: GO 15958
15958: DISABLE
15959: LD_INT 0
15961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15962: LD_ADDR_VAR 0 1
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_OWVAR 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 21
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: ST_TO_ADDR
// if not tmp then
15998: LD_VAR 0 1
16002: NOT
16003: IFFALSE 16007
// exit ;
16005: GO 16033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16007: LD_VAR 0 1
16011: PUSH
16012: LD_INT 1
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 12
16024: ARRAY
16025: PPUSH
16026: LD_INT 100
16028: PPUSH
16029: CALL_OW 234
// end ;
16033: PPOPN 1
16035: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16036: LD_EXP 53
16040: IFFALSE 16048
16042: PUSH
16043: LD_EXP 67
16047: AND
16048: IFFALSE 16146
16050: GO 16052
16052: DISABLE
16053: LD_INT 0
16055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16056: LD_ADDR_VAR 0 1
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_OWVAR 2
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 21
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PPUSH
16087: CALL_OW 69
16091: ST_TO_ADDR
// if not tmp then
16092: LD_VAR 0 1
16096: NOT
16097: IFFALSE 16101
// exit ;
16099: GO 16146
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16101: LD_VAR 0 1
16105: PUSH
16106: LD_INT 1
16108: PPUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 12
16118: ARRAY
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: LD_INT 4
16125: PPUSH
16126: CALL_OW 12
16130: PPUSH
16131: LD_INT 3000
16133: PPUSH
16134: LD_INT 9000
16136: PPUSH
16137: CALL_OW 12
16141: PPUSH
16142: CALL_OW 492
// end ;
16146: PPOPN 1
16148: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16149: LD_EXP 53
16153: IFFALSE 16161
16155: PUSH
16156: LD_EXP 68
16160: AND
16161: IFFALSE 16181
16163: GO 16165
16165: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16166: LD_INT 1
16168: PPUSH
16169: LD_OWVAR 2
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: CALL_OW 324
16181: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16182: LD_EXP 53
16186: IFFALSE 16194
16188: PUSH
16189: LD_EXP 69
16193: AND
16194: IFFALSE 16277
16196: GO 16198
16198: DISABLE
16199: LD_INT 0
16201: PPUSH
16202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_OWVAR 2
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 21
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: ST_TO_ADDR
// if not tmp then
16239: LD_VAR 0 2
16243: NOT
16244: IFFALSE 16248
// exit ;
16246: GO 16277
// for i in tmp do
16248: LD_ADDR_VAR 0 1
16252: PUSH
16253: LD_VAR 0 2
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16275
// SetBLevel ( i , 10 ) ;
16261: LD_VAR 0 1
16265: PPUSH
16266: LD_INT 10
16268: PPUSH
16269: CALL_OW 241
16273: GO 16258
16275: POP
16276: POP
// end ;
16277: PPOPN 2
16279: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16280: LD_EXP 53
16284: IFFALSE 16292
16286: PUSH
16287: LD_EXP 70
16291: AND
16292: IFFALSE 16403
16294: GO 16296
16296: DISABLE
16297: LD_INT 0
16299: PPUSH
16300: PPUSH
16301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16302: LD_ADDR_VAR 0 3
16306: PUSH
16307: LD_INT 22
16309: PUSH
16310: LD_OWVAR 2
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 25
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: ST_TO_ADDR
// if not tmp then
16338: LD_VAR 0 3
16342: NOT
16343: IFFALSE 16347
// exit ;
16345: GO 16403
// un := tmp [ rand ( 1 , tmp ) ] ;
16347: LD_ADDR_VAR 0 2
16351: PUSH
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 1
16359: PPUSH
16360: LD_VAR 0 3
16364: PPUSH
16365: CALL_OW 12
16369: ARRAY
16370: ST_TO_ADDR
// if Crawls ( un ) then
16371: LD_VAR 0 2
16375: PPUSH
16376: CALL_OW 318
16380: IFFALSE 16391
// ComWalk ( un ) ;
16382: LD_VAR 0 2
16386: PPUSH
16387: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16391: LD_VAR 0 2
16395: PPUSH
16396: LD_INT 5
16398: PPUSH
16399: CALL_OW 336
// end ;
16403: PPOPN 3
16405: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16406: LD_EXP 53
16410: IFFALSE 16418
16412: PUSH
16413: LD_EXP 71
16417: AND
16418: IFFALSE 16430
16420: PUSH
16421: LD_OWVAR 67
16425: PUSH
16426: LD_INT 4
16428: LESS
16429: AND
16430: IFFALSE 16449
16432: GO 16434
16434: DISABLE
// begin Difficulty := Difficulty + 1 ;
16435: LD_ADDR_OWVAR 67
16439: PUSH
16440: LD_OWVAR 67
16444: PUSH
16445: LD_INT 1
16447: PLUS
16448: ST_TO_ADDR
// end ;
16449: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16450: LD_EXP 53
16454: IFFALSE 16462
16456: PUSH
16457: LD_EXP 72
16461: AND
16462: IFFALSE 16565
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
// begin for i := 1 to 5 do
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: DOUBLE
16476: LD_INT 1
16478: DEC
16479: ST_TO_ADDR
16480: LD_INT 5
16482: PUSH
16483: FOR_TO
16484: IFFALSE 16563
// begin uc_nation := nation_nature ;
16486: LD_ADDR_OWVAR 21
16490: PUSH
16491: LD_INT 0
16493: ST_TO_ADDR
// uc_side := 0 ;
16494: LD_ADDR_OWVAR 20
16498: PUSH
16499: LD_INT 0
16501: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16502: LD_ADDR_OWVAR 29
16506: PUSH
16507: LD_INT 12
16509: PUSH
16510: LD_INT 12
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: ST_TO_ADDR
// hc_agressivity := 20 ;
16517: LD_ADDR_OWVAR 35
16521: PUSH
16522: LD_INT 20
16524: ST_TO_ADDR
// hc_class := class_tiger ;
16525: LD_ADDR_OWVAR 28
16529: PUSH
16530: LD_INT 14
16532: ST_TO_ADDR
// hc_gallery :=  ;
16533: LD_ADDR_OWVAR 33
16537: PUSH
16538: LD_STRING 
16540: ST_TO_ADDR
// hc_name :=  ;
16541: LD_ADDR_OWVAR 26
16545: PUSH
16546: LD_STRING 
16548: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16549: CALL_OW 44
16553: PPUSH
16554: LD_INT 0
16556: PPUSH
16557: CALL_OW 51
// end ;
16561: GO 16483
16563: POP
16564: POP
// end ;
16565: PPOPN 1
16567: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16568: LD_EXP 53
16572: IFFALSE 16580
16574: PUSH
16575: LD_EXP 73
16579: AND
16580: IFFALSE 16589
16582: GO 16584
16584: DISABLE
// StreamSibBomb ;
16585: CALL 16590 0 0
16589: END
// export function StreamSibBomb ; var i , x , y ; begin
16590: LD_INT 0
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
// result := false ;
16596: LD_ADDR_VAR 0 1
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// for i := 1 to 16 do
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: DOUBLE
16610: LD_INT 1
16612: DEC
16613: ST_TO_ADDR
16614: LD_INT 16
16616: PUSH
16617: FOR_TO
16618: IFFALSE 16817
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: LD_INT 10
16627: PUSH
16628: LD_INT 20
16630: PUSH
16631: LD_INT 30
16633: PUSH
16634: LD_INT 40
16636: PUSH
16637: LD_INT 50
16639: PUSH
16640: LD_INT 60
16642: PUSH
16643: LD_INT 70
16645: PUSH
16646: LD_INT 80
16648: PUSH
16649: LD_INT 90
16651: PUSH
16652: LD_INT 100
16654: PUSH
16655: LD_INT 110
16657: PUSH
16658: LD_INT 120
16660: PUSH
16661: LD_INT 130
16663: PUSH
16664: LD_INT 140
16666: PUSH
16667: LD_INT 150
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 1
16689: PPUSH
16690: LD_INT 15
16692: PPUSH
16693: CALL_OW 12
16697: ARRAY
16698: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16699: LD_ADDR_VAR 0 4
16703: PUSH
16704: LD_INT 10
16706: PUSH
16707: LD_INT 20
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 40
16715: PUSH
16716: LD_INT 50
16718: PUSH
16719: LD_INT 60
16721: PUSH
16722: LD_INT 70
16724: PUSH
16725: LD_INT 80
16727: PUSH
16728: LD_INT 90
16730: PUSH
16731: LD_INT 100
16733: PUSH
16734: LD_INT 110
16736: PUSH
16737: LD_INT 120
16739: PUSH
16740: LD_INT 130
16742: PUSH
16743: LD_INT 140
16745: PUSH
16746: LD_INT 150
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 1
16768: PPUSH
16769: LD_INT 15
16771: PPUSH
16772: CALL_OW 12
16776: ARRAY
16777: ST_TO_ADDR
// if ValidHex ( x , y ) then
16778: LD_VAR 0 3
16782: PPUSH
16783: LD_VAR 0 4
16787: PPUSH
16788: CALL_OW 488
16792: IFFALSE 16815
// begin result := [ x , y ] ;
16794: LD_ADDR_VAR 0 1
16798: PUSH
16799: LD_VAR 0 3
16803: PUSH
16804: LD_VAR 0 4
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: ST_TO_ADDR
// break ;
16813: GO 16817
// end ; end ;
16815: GO 16617
16817: POP
16818: POP
// if result then
16819: LD_VAR 0 1
16823: IFFALSE 16883
// begin ToLua ( playSibBomb() ) ;
16825: LD_STRING playSibBomb()
16827: PPUSH
16828: CALL_OW 559
// wait ( 0 0$14 ) ;
16832: LD_INT 490
16834: PPUSH
16835: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16839: LD_VAR 0 1
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_VAR 0 1
16852: PUSH
16853: LD_INT 2
16855: ARRAY
16856: PPUSH
16857: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16861: LD_VAR 0 1
16865: PUSH
16866: LD_INT 1
16868: ARRAY
16869: PPUSH
16870: LD_VAR 0 1
16874: PUSH
16875: LD_INT 2
16877: ARRAY
16878: PPUSH
16879: CALL_OW 429
// end ; end ;
16883: LD_VAR 0 1
16887: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16888: LD_EXP 53
16892: IFFALSE 16900
16894: PUSH
16895: LD_EXP 75
16899: AND
16900: IFFALSE 16912
16902: GO 16904
16904: DISABLE
// YouLost (  ) ;
16905: LD_STRING 
16907: PPUSH
16908: CALL_OW 104
16912: END
// every 0 0$1 trigger StreamModeActive and sFog do
16913: LD_EXP 53
16917: IFFALSE 16925
16919: PUSH
16920: LD_EXP 74
16924: AND
16925: IFFALSE 16939
16927: GO 16929
16929: DISABLE
// FogOff ( your_side ) ;
16930: LD_OWVAR 2
16934: PPUSH
16935: CALL_OW 344
16939: END
// every 0 0$1 trigger StreamModeActive and sSun do
16940: LD_EXP 53
16944: IFFALSE 16952
16946: PUSH
16947: LD_EXP 76
16951: AND
16952: IFFALSE 16980
16954: GO 16956
16956: DISABLE
// begin solar_recharge_percent := 0 ;
16957: LD_ADDR_OWVAR 79
16961: PUSH
16962: LD_INT 0
16964: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16965: LD_INT 10500
16967: PPUSH
16968: CALL_OW 67
// solar_recharge_percent := 100 ;
16972: LD_ADDR_OWVAR 79
16976: PUSH
16977: LD_INT 100
16979: ST_TO_ADDR
// end ;
16980: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16981: LD_EXP 53
16985: IFFALSE 16993
16987: PUSH
16988: LD_EXP 77
16992: AND
16993: IFFALSE 17232
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
17002: PPUSH
// begin tmp := [ ] ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: EMPTY
17009: ST_TO_ADDR
// for i := 1 to 6 do
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: DOUBLE
17016: LD_INT 1
17018: DEC
17019: ST_TO_ADDR
17020: LD_INT 6
17022: PUSH
17023: FOR_TO
17024: IFFALSE 17129
// begin uc_nation := nation_nature ;
17026: LD_ADDR_OWVAR 21
17030: PUSH
17031: LD_INT 0
17033: ST_TO_ADDR
// uc_side := 0 ;
17034: LD_ADDR_OWVAR 20
17038: PUSH
17039: LD_INT 0
17041: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17042: LD_ADDR_OWVAR 29
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: LD_INT 12
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: ST_TO_ADDR
// hc_agressivity := 20 ;
17057: LD_ADDR_OWVAR 35
17061: PUSH
17062: LD_INT 20
17064: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17065: LD_ADDR_OWVAR 28
17069: PUSH
17070: LD_INT 17
17072: ST_TO_ADDR
// hc_gallery :=  ;
17073: LD_ADDR_OWVAR 33
17077: PUSH
17078: LD_STRING 
17080: ST_TO_ADDR
// hc_name :=  ;
17081: LD_ADDR_OWVAR 26
17085: PUSH
17086: LD_STRING 
17088: ST_TO_ADDR
// un := CreateHuman ;
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: CALL_OW 44
17098: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17099: LD_VAR 0 2
17103: PPUSH
17104: LD_INT 1
17106: PPUSH
17107: CALL_OW 51
// tmp := tmp ^ un ;
17111: LD_ADDR_VAR 0 3
17115: PUSH
17116: LD_VAR 0 3
17120: PUSH
17121: LD_VAR 0 2
17125: ADD
17126: ST_TO_ADDR
// end ;
17127: GO 17023
17129: POP
17130: POP
// repeat wait ( 0 0$1 ) ;
17131: LD_INT 35
17133: PPUSH
17134: CALL_OW 67
// for un in tmp do
17138: LD_ADDR_VAR 0 2
17142: PUSH
17143: LD_VAR 0 3
17147: PUSH
17148: FOR_IN
17149: IFFALSE 17223
// begin if IsDead ( un ) then
17151: LD_VAR 0 2
17155: PPUSH
17156: CALL_OW 301
17160: IFFALSE 17180
// begin tmp := tmp diff un ;
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_VAR 0 3
17171: PUSH
17172: LD_VAR 0 2
17176: DIFF
17177: ST_TO_ADDR
// continue ;
17178: GO 17148
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17180: LD_VAR 0 2
17184: PPUSH
17185: LD_INT 3
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PPUSH
17202: CALL_OW 69
17206: PPUSH
17207: LD_VAR 0 2
17211: PPUSH
17212: CALL_OW 74
17216: PPUSH
17217: CALL_OW 115
// end ;
17221: GO 17148
17223: POP
17224: POP
// until not tmp ;
17225: LD_VAR 0 3
17229: NOT
17230: IFFALSE 17131
// end ;
17232: PPOPN 3
17234: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17235: LD_EXP 53
17239: IFFALSE 17247
17241: PUSH
17242: LD_EXP 78
17246: AND
17247: IFFALSE 17301
17249: GO 17251
17251: DISABLE
// begin ToLua ( displayTroll(); ) ;
17252: LD_STRING displayTroll();
17254: PPUSH
17255: CALL_OW 559
// wait ( 3 3$00 ) ;
17259: LD_INT 6300
17261: PPUSH
17262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17266: LD_STRING hideTroll();
17268: PPUSH
17269: CALL_OW 559
// wait ( 1 1$00 ) ;
17273: LD_INT 2100
17275: PPUSH
17276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17280: LD_STRING displayTroll();
17282: PPUSH
17283: CALL_OW 559
// wait ( 1 1$00 ) ;
17287: LD_INT 2100
17289: PPUSH
17290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17294: LD_STRING hideTroll();
17296: PPUSH
17297: CALL_OW 559
// end ;
17301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17302: LD_EXP 53
17306: IFFALSE 17314
17308: PUSH
17309: LD_EXP 79
17313: AND
17314: IFFALSE 17377
17316: GO 17318
17318: DISABLE
17319: LD_INT 0
17321: PPUSH
// begin p := 0 ;
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_INT 0
17329: ST_TO_ADDR
// repeat game_speed := 1 ;
17330: LD_ADDR_OWVAR 65
17334: PUSH
17335: LD_INT 1
17337: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17338: LD_INT 35
17340: PPUSH
17341: CALL_OW 67
// p := p + 1 ;
17345: LD_ADDR_VAR 0 1
17349: PUSH
17350: LD_VAR 0 1
17354: PUSH
17355: LD_INT 1
17357: PLUS
17358: ST_TO_ADDR
// until p >= 60 ;
17359: LD_VAR 0 1
17363: PUSH
17364: LD_INT 60
17366: GREATEREQUAL
17367: IFFALSE 17330
// game_speed := 4 ;
17369: LD_ADDR_OWVAR 65
17373: PUSH
17374: LD_INT 4
17376: ST_TO_ADDR
// end ;
17377: PPOPN 1
17379: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17380: LD_EXP 53
17384: IFFALSE 17392
17386: PUSH
17387: LD_EXP 80
17391: AND
17392: IFFALSE 17538
17394: GO 17396
17396: DISABLE
17397: LD_INT 0
17399: PPUSH
17400: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17401: LD_ADDR_VAR 0 1
17405: PUSH
17406: LD_INT 22
17408: PUSH
17409: LD_OWVAR 2
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 2
17420: PUSH
17421: LD_INT 30
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 30
17433: PUSH
17434: LD_INT 1
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PPUSH
17450: CALL_OW 69
17454: ST_TO_ADDR
// if not depot then
17455: LD_VAR 0 1
17459: NOT
17460: IFFALSE 17464
// exit ;
17462: GO 17538
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17464: LD_ADDR_VAR 0 2
17468: PUSH
17469: LD_VAR 0 1
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 12
17486: ARRAY
17487: PPUSH
17488: CALL_OW 274
17492: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17493: LD_VAR 0 2
17497: PPUSH
17498: LD_INT 1
17500: PPUSH
17501: LD_INT 0
17503: PPUSH
17504: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_INT 2
17515: PPUSH
17516: LD_INT 0
17518: PPUSH
17519: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17523: LD_VAR 0 2
17527: PPUSH
17528: LD_INT 3
17530: PPUSH
17531: LD_INT 0
17533: PPUSH
17534: CALL_OW 277
// end ;
17538: PPOPN 2
17540: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17541: LD_EXP 53
17545: IFFALSE 17553
17547: PUSH
17548: LD_EXP 81
17552: AND
17553: IFFALSE 17650
17555: GO 17557
17557: DISABLE
17558: LD_INT 0
17560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17561: LD_ADDR_VAR 0 1
17565: PUSH
17566: LD_INT 22
17568: PUSH
17569: LD_OWVAR 2
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 21
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 3
17590: PUSH
17591: LD_INT 23
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: PPUSH
17610: CALL_OW 69
17614: ST_TO_ADDR
// if not tmp then
17615: LD_VAR 0 1
17619: NOT
17620: IFFALSE 17624
// exit ;
17622: GO 17650
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17624: LD_VAR 0 1
17628: PUSH
17629: LD_INT 1
17631: PPUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 12
17641: ARRAY
17642: PPUSH
17643: LD_INT 200
17645: PPUSH
17646: CALL_OW 234
// end ;
17650: PPOPN 1
17652: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17653: LD_EXP 53
17657: IFFALSE 17665
17659: PUSH
17660: LD_EXP 82
17664: AND
17665: IFFALSE 17744
17667: GO 17669
17669: DISABLE
17670: LD_INT 0
17672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17673: LD_ADDR_VAR 0 1
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_OWVAR 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 21
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PPUSH
17704: CALL_OW 69
17708: ST_TO_ADDR
// if not tmp then
17709: LD_VAR 0 1
17713: NOT
17714: IFFALSE 17718
// exit ;
17716: GO 17744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17718: LD_VAR 0 1
17722: PUSH
17723: LD_INT 1
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 12
17735: ARRAY
17736: PPUSH
17737: LD_INT 60
17739: PPUSH
17740: CALL_OW 234
// end ;
17744: PPOPN 1
17746: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17747: LD_EXP 53
17751: IFFALSE 17759
17753: PUSH
17754: LD_EXP 83
17758: AND
17759: IFFALSE 17858
17761: GO 17763
17763: DISABLE
17764: LD_INT 0
17766: PPUSH
17767: PPUSH
// begin enable ;
17768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17769: LD_ADDR_VAR 0 1
17773: PUSH
17774: LD_INT 22
17776: PUSH
17777: LD_OWVAR 2
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 61
17788: PUSH
17789: EMPTY
17790: LIST
17791: PUSH
17792: LD_INT 33
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 69
17811: ST_TO_ADDR
// if not tmp then
17812: LD_VAR 0 1
17816: NOT
17817: IFFALSE 17821
// exit ;
17819: GO 17858
// for i in tmp do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: LD_VAR 0 1
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17856
// if IsControledBy ( i ) then
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 312
17843: IFFALSE 17854
// ComUnlink ( i ) ;
17845: LD_VAR 0 2
17849: PPUSH
17850: CALL_OW 136
17854: GO 17831
17856: POP
17857: POP
// end ;
17858: PPOPN 2
17860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17861: LD_EXP 53
17865: IFFALSE 17873
17867: PUSH
17868: LD_EXP 84
17872: AND
17873: IFFALSE 18013
17875: GO 17877
17877: DISABLE
17878: LD_INT 0
17880: PPUSH
17881: PPUSH
// begin ToLua ( displayPowell(); ) ;
17882: LD_STRING displayPowell();
17884: PPUSH
17885: CALL_OW 559
// uc_side := 0 ;
17889: LD_ADDR_OWVAR 20
17893: PUSH
17894: LD_INT 0
17896: ST_TO_ADDR
// uc_nation := 2 ;
17897: LD_ADDR_OWVAR 21
17901: PUSH
17902: LD_INT 2
17904: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17905: LD_ADDR_OWVAR 37
17909: PUSH
17910: LD_INT 14
17912: ST_TO_ADDR
// vc_engine := engine_siberite ;
17913: LD_ADDR_OWVAR 39
17917: PUSH
17918: LD_INT 3
17920: ST_TO_ADDR
// vc_control := control_apeman ;
17921: LD_ADDR_OWVAR 38
17925: PUSH
17926: LD_INT 5
17928: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17929: LD_ADDR_OWVAR 40
17933: PUSH
17934: LD_INT 29
17936: ST_TO_ADDR
// un := CreateVehicle ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: CALL_OW 45
17946: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17947: LD_VAR 0 2
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17959: LD_INT 35
17961: PPUSH
17962: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17966: LD_VAR 0 2
17970: PPUSH
17971: LD_INT 22
17973: PUSH
17974: LD_OWVAR 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PPUSH
17983: CALL_OW 69
17987: PPUSH
17988: LD_VAR 0 2
17992: PPUSH
17993: CALL_OW 74
17997: PPUSH
17998: CALL_OW 115
// until IsDead ( un ) ;
18002: LD_VAR 0 2
18006: PPUSH
18007: CALL_OW 301
18011: IFFALSE 17959
// end ;
18013: PPOPN 2
18015: END
// every 0 0$1 trigger StreamModeActive and sStu do
18016: LD_EXP 53
18020: IFFALSE 18028
18022: PUSH
18023: LD_EXP 92
18027: AND
18028: IFFALSE 18044
18030: GO 18032
18032: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18033: LD_STRING displayStucuk();
18035: PPUSH
18036: CALL_OW 559
// ResetFog ;
18040: CALL_OW 335
// end ;
18044: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18045: LD_EXP 53
18049: IFFALSE 18057
18051: PUSH
18052: LD_EXP 85
18056: AND
18057: IFFALSE 18198
18059: GO 18061
18061: DISABLE
18062: LD_INT 0
18064: PPUSH
18065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18066: LD_ADDR_VAR 0 2
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_OWVAR 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 21
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: ST_TO_ADDR
// if not tmp then
18102: LD_VAR 0 2
18106: NOT
18107: IFFALSE 18111
// exit ;
18109: GO 18198
// un := tmp [ rand ( 1 , tmp ) ] ;
18111: LD_ADDR_VAR 0 1
18115: PUSH
18116: LD_VAR 0 2
18120: PUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_VAR 0 2
18128: PPUSH
18129: CALL_OW 12
18133: ARRAY
18134: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18135: LD_VAR 0 1
18139: PPUSH
18140: LD_INT 0
18142: PPUSH
18143: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18147: LD_VAR 0 1
18151: PPUSH
18152: LD_OWVAR 3
18156: PUSH
18157: LD_VAR 0 1
18161: DIFF
18162: PPUSH
18163: LD_VAR 0 1
18167: PPUSH
18168: CALL_OW 74
18172: PPUSH
18173: CALL_OW 115
// wait ( 0 0$20 ) ;
18177: LD_INT 700
18179: PPUSH
18180: CALL_OW 67
// SetSide ( un , your_side ) ;
18184: LD_VAR 0 1
18188: PPUSH
18189: LD_OWVAR 2
18193: PPUSH
18194: CALL_OW 235
// end ;
18198: PPOPN 2
18200: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18201: LD_EXP 53
18205: IFFALSE 18213
18207: PUSH
18208: LD_EXP 86
18212: AND
18213: IFFALSE 18319
18215: GO 18217
18217: DISABLE
18218: LD_INT 0
18220: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18221: LD_ADDR_VAR 0 1
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_OWVAR 2
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 2
18240: PUSH
18241: LD_INT 30
18243: PUSH
18244: LD_INT 0
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 30
18253: PUSH
18254: LD_INT 1
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PPUSH
18270: CALL_OW 69
18274: ST_TO_ADDR
// if not depot then
18275: LD_VAR 0 1
18279: NOT
18280: IFFALSE 18284
// exit ;
18282: GO 18319
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18284: LD_VAR 0 1
18288: PUSH
18289: LD_INT 1
18291: ARRAY
18292: PPUSH
18293: CALL_OW 250
18297: PPUSH
18298: LD_VAR 0 1
18302: PUSH
18303: LD_INT 1
18305: ARRAY
18306: PPUSH
18307: CALL_OW 251
18311: PPUSH
18312: LD_INT 70
18314: PPUSH
18315: CALL_OW 495
// end ;
18319: PPOPN 1
18321: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18322: LD_EXP 53
18326: IFFALSE 18334
18328: PUSH
18329: LD_EXP 87
18333: AND
18334: IFFALSE 18545
18336: GO 18338
18338: DISABLE
18339: LD_INT 0
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18346: LD_ADDR_VAR 0 5
18350: PUSH
18351: LD_INT 22
18353: PUSH
18354: LD_OWVAR 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 21
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: ST_TO_ADDR
// if not tmp then
18382: LD_VAR 0 5
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18545
// for i in tmp do
18391: LD_ADDR_VAR 0 1
18395: PUSH
18396: LD_VAR 0 5
18400: PUSH
18401: FOR_IN
18402: IFFALSE 18543
// begin d := rand ( 0 , 5 ) ;
18404: LD_ADDR_VAR 0 4
18408: PUSH
18409: LD_INT 0
18411: PPUSH
18412: LD_INT 5
18414: PPUSH
18415: CALL_OW 12
18419: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18420: LD_ADDR_VAR 0 2
18424: PUSH
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 250
18434: PPUSH
18435: LD_VAR 0 4
18439: PPUSH
18440: LD_INT 3
18442: PPUSH
18443: LD_INT 12
18445: PPUSH
18446: CALL_OW 12
18450: PPUSH
18451: CALL_OW 272
18455: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18456: LD_ADDR_VAR 0 3
18460: PUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 251
18470: PPUSH
18471: LD_VAR 0 4
18475: PPUSH
18476: LD_INT 3
18478: PPUSH
18479: LD_INT 12
18481: PPUSH
18482: CALL_OW 12
18486: PPUSH
18487: CALL_OW 273
18491: ST_TO_ADDR
// if ValidHex ( x , y ) then
18492: LD_VAR 0 2
18496: PPUSH
18497: LD_VAR 0 3
18501: PPUSH
18502: CALL_OW 488
18506: IFFALSE 18541
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18508: LD_VAR 0 1
18512: PPUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: LD_VAR 0 3
18522: PPUSH
18523: LD_INT 3
18525: PPUSH
18526: LD_INT 6
18528: PPUSH
18529: CALL_OW 12
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 483
// end ;
18541: GO 18401
18543: POP
18544: POP
// end ;
18545: PPOPN 5
18547: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18548: LD_EXP 53
18552: IFFALSE 18560
18554: PUSH
18555: LD_EXP 88
18559: AND
18560: IFFALSE 18654
18562: GO 18564
18564: DISABLE
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: LD_INT 22
18576: PUSH
18577: LD_OWVAR 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 32
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 21
18598: PUSH
18599: LD_INT 2
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 69
18615: ST_TO_ADDR
// if not tmp then
18616: LD_VAR 0 2
18620: NOT
18621: IFFALSE 18625
// exit ;
18623: GO 18654
// for i in tmp do
18625: LD_ADDR_VAR 0 1
18629: PUSH
18630: LD_VAR 0 2
18634: PUSH
18635: FOR_IN
18636: IFFALSE 18652
// SetFuel ( i , 0 ) ;
18638: LD_VAR 0 1
18642: PPUSH
18643: LD_INT 0
18645: PPUSH
18646: CALL_OW 240
18650: GO 18635
18652: POP
18653: POP
// end ;
18654: PPOPN 2
18656: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18657: LD_EXP 53
18661: IFFALSE 18669
18663: PUSH
18664: LD_EXP 89
18668: AND
18669: IFFALSE 18735
18671: GO 18673
18673: DISABLE
18674: LD_INT 0
18676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18677: LD_ADDR_VAR 0 1
18681: PUSH
18682: LD_INT 22
18684: PUSH
18685: LD_OWVAR 2
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 30
18696: PUSH
18697: LD_INT 29
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: ST_TO_ADDR
// if not tmp then
18713: LD_VAR 0 1
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 18735
// DestroyUnit ( tmp [ 1 ] ) ;
18722: LD_VAR 0 1
18726: PUSH
18727: LD_INT 1
18729: ARRAY
18730: PPUSH
18731: CALL_OW 65
// end ;
18735: PPOPN 1
18737: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18738: LD_EXP 53
18742: IFFALSE 18750
18744: PUSH
18745: LD_EXP 91
18749: AND
18750: IFFALSE 18879
18752: GO 18754
18754: DISABLE
18755: LD_INT 0
18757: PPUSH
// begin uc_side := 0 ;
18758: LD_ADDR_OWVAR 20
18762: PUSH
18763: LD_INT 0
18765: ST_TO_ADDR
// uc_nation := nation_arabian ;
18766: LD_ADDR_OWVAR 21
18770: PUSH
18771: LD_INT 2
18773: ST_TO_ADDR
// hc_gallery :=  ;
18774: LD_ADDR_OWVAR 33
18778: PUSH
18779: LD_STRING 
18781: ST_TO_ADDR
// hc_name :=  ;
18782: LD_ADDR_OWVAR 26
18786: PUSH
18787: LD_STRING 
18789: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18790: LD_INT 1
18792: PPUSH
18793: LD_INT 11
18795: PPUSH
18796: LD_INT 10
18798: PPUSH
18799: CALL_OW 380
// un := CreateHuman ;
18803: LD_ADDR_VAR 0 1
18807: PUSH
18808: CALL_OW 44
18812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18825: LD_INT 35
18827: PPUSH
18828: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18832: LD_VAR 0 1
18836: PPUSH
18837: LD_INT 22
18839: PUSH
18840: LD_OWVAR 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: PPUSH
18854: LD_VAR 0 1
18858: PPUSH
18859: CALL_OW 74
18863: PPUSH
18864: CALL_OW 115
// until IsDead ( un ) ;
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 301
18877: IFFALSE 18825
// end ;
18879: PPOPN 1
18881: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18882: LD_EXP 53
18886: IFFALSE 18894
18888: PUSH
18889: LD_EXP 93
18893: AND
18894: IFFALSE 18906
18896: GO 18898
18898: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18899: LD_STRING earthquake(getX(game), 0, 32)
18901: PPUSH
18902: CALL_OW 559
18906: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18907: LD_EXP 53
18911: IFFALSE 18919
18913: PUSH
18914: LD_EXP 94
18918: AND
18919: IFFALSE 19010
18921: GO 18923
18923: DISABLE
18924: LD_INT 0
18926: PPUSH
// begin enable ;
18927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18928: LD_ADDR_VAR 0 1
18932: PUSH
18933: LD_INT 22
18935: PUSH
18936: LD_OWVAR 2
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 21
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 33
18957: PUSH
18958: LD_INT 3
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 1
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 12
19001: ARRAY
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 234
// end ;
19010: PPOPN 1
19012: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19013: LD_EXP 53
19017: IFFALSE 19025
19019: PUSH
19020: LD_EXP 95
19024: AND
19025: IFFALSE 19166
19027: GO 19029
19029: DISABLE
19030: LD_INT 0
19032: PPUSH
19033: PPUSH
19034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19035: LD_ADDR_VAR 0 3
19039: PUSH
19040: LD_INT 22
19042: PUSH
19043: LD_OWVAR 2
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 25
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: ST_TO_ADDR
// if not tmp then
19071: LD_VAR 0 3
19075: NOT
19076: IFFALSE 19080
// exit ;
19078: GO 19166
// un := tmp [ rand ( 1 , tmp ) ] ;
19080: LD_ADDR_VAR 0 2
19084: PUSH
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 1
19092: PPUSH
19093: LD_VAR 0 3
19097: PPUSH
19098: CALL_OW 12
19102: ARRAY
19103: ST_TO_ADDR
// if Crawls ( un ) then
19104: LD_VAR 0 2
19108: PPUSH
19109: CALL_OW 318
19113: IFFALSE 19124
// ComWalk ( un ) ;
19115: LD_VAR 0 2
19119: PPUSH
19120: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19124: LD_VAR 0 2
19128: PPUSH
19129: LD_INT 9
19131: PPUSH
19132: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19136: LD_INT 28
19138: PPUSH
19139: LD_OWVAR 2
19143: PPUSH
19144: LD_INT 2
19146: PPUSH
19147: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19151: LD_INT 29
19153: PPUSH
19154: LD_OWVAR 2
19158: PPUSH
19159: LD_INT 2
19161: PPUSH
19162: CALL_OW 322
// end ;
19166: PPOPN 3
19168: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19169: LD_EXP 53
19173: IFFALSE 19181
19175: PUSH
19176: LD_EXP 96
19180: AND
19181: IFFALSE 19292
19183: GO 19185
19185: DISABLE
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
19190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_INT 22
19198: PUSH
19199: LD_OWVAR 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 25
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PPUSH
19222: CALL_OW 69
19226: ST_TO_ADDR
// if not tmp then
19227: LD_VAR 0 3
19231: NOT
19232: IFFALSE 19236
// exit ;
19234: GO 19292
// un := tmp [ rand ( 1 , tmp ) ] ;
19236: LD_ADDR_VAR 0 2
19240: PUSH
19241: LD_VAR 0 3
19245: PUSH
19246: LD_INT 1
19248: PPUSH
19249: LD_VAR 0 3
19253: PPUSH
19254: CALL_OW 12
19258: ARRAY
19259: ST_TO_ADDR
// if Crawls ( un ) then
19260: LD_VAR 0 2
19264: PPUSH
19265: CALL_OW 318
19269: IFFALSE 19280
// ComWalk ( un ) ;
19271: LD_VAR 0 2
19275: PPUSH
19276: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19280: LD_VAR 0 2
19284: PPUSH
19285: LD_INT 8
19287: PPUSH
19288: CALL_OW 336
// end ;
19292: PPOPN 3
19294: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19295: LD_EXP 53
19299: IFFALSE 19307
19301: PUSH
19302: LD_EXP 97
19306: AND
19307: IFFALSE 19451
19309: GO 19311
19311: DISABLE
19312: LD_INT 0
19314: PPUSH
19315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19316: LD_ADDR_VAR 0 2
19320: PUSH
19321: LD_INT 22
19323: PUSH
19324: LD_OWVAR 2
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 34
19348: PUSH
19349: LD_INT 12
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 34
19358: PUSH
19359: LD_INT 51
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 34
19368: PUSH
19369: LD_INT 32
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: ST_TO_ADDR
// if not tmp then
19392: LD_VAR 0 2
19396: NOT
19397: IFFALSE 19401
// exit ;
19399: GO 19451
// for i in tmp do
19401: LD_ADDR_VAR 0 1
19405: PUSH
19406: LD_VAR 0 2
19410: PUSH
19411: FOR_IN
19412: IFFALSE 19449
// if GetCargo ( i , mat_artifact ) = 0 then
19414: LD_VAR 0 1
19418: PPUSH
19419: LD_INT 4
19421: PPUSH
19422: CALL_OW 289
19426: PUSH
19427: LD_INT 0
19429: EQUAL
19430: IFFALSE 19447
// SetCargo ( i , mat_siberit , 100 ) ;
19432: LD_VAR 0 1
19436: PPUSH
19437: LD_INT 3
19439: PPUSH
19440: LD_INT 100
19442: PPUSH
19443: CALL_OW 290
19447: GO 19411
19449: POP
19450: POP
// end ;
19451: PPOPN 2
19453: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19454: LD_EXP 53
19458: IFFALSE 19466
19460: PUSH
19461: LD_EXP 98
19465: AND
19466: IFFALSE 19649
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19475: LD_ADDR_VAR 0 2
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_OWVAR 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 69
19496: ST_TO_ADDR
// if not tmp then
19497: LD_VAR 0 2
19501: NOT
19502: IFFALSE 19506
// exit ;
19504: GO 19649
// for i := 1 to 2 do
19506: LD_ADDR_VAR 0 1
19510: PUSH
19511: DOUBLE
19512: LD_INT 1
19514: DEC
19515: ST_TO_ADDR
19516: LD_INT 2
19518: PUSH
19519: FOR_TO
19520: IFFALSE 19647
// begin uc_side := your_side ;
19522: LD_ADDR_OWVAR 20
19526: PUSH
19527: LD_OWVAR 2
19531: ST_TO_ADDR
// uc_nation := nation_american ;
19532: LD_ADDR_OWVAR 21
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// vc_chassis := us_morphling ;
19540: LD_ADDR_OWVAR 37
19544: PUSH
19545: LD_INT 5
19547: ST_TO_ADDR
// vc_engine := engine_siberite ;
19548: LD_ADDR_OWVAR 39
19552: PUSH
19553: LD_INT 3
19555: ST_TO_ADDR
// vc_control := control_computer ;
19556: LD_ADDR_OWVAR 38
19560: PUSH
19561: LD_INT 3
19563: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19564: LD_ADDR_OWVAR 40
19568: PUSH
19569: LD_INT 10
19571: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19572: LD_VAR 0 2
19576: PUSH
19577: LD_INT 1
19579: ARRAY
19580: PPUSH
19581: CALL_OW 310
19585: NOT
19586: IFFALSE 19633
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19588: CALL_OW 45
19592: PPUSH
19593: LD_VAR 0 2
19597: PUSH
19598: LD_INT 1
19600: ARRAY
19601: PPUSH
19602: CALL_OW 250
19606: PPUSH
19607: LD_VAR 0 2
19611: PUSH
19612: LD_INT 1
19614: ARRAY
19615: PPUSH
19616: CALL_OW 251
19620: PPUSH
19621: LD_INT 12
19623: PPUSH
19624: LD_INT 1
19626: PPUSH
19627: CALL_OW 50
19631: GO 19645
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19633: CALL_OW 45
19637: PPUSH
19638: LD_INT 1
19640: PPUSH
19641: CALL_OW 51
// end ;
19645: GO 19519
19647: POP
19648: POP
// end ;
19649: PPOPN 2
19651: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19652: LD_EXP 53
19656: IFFALSE 19664
19658: PUSH
19659: LD_EXP 99
19663: AND
19664: IFFALSE 19886
19666: GO 19668
19668: DISABLE
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
19673: PPUSH
19674: PPUSH
19675: PPUSH
19676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19677: LD_ADDR_VAR 0 6
19681: PUSH
19682: LD_INT 22
19684: PUSH
19685: LD_OWVAR 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 3
19706: PUSH
19707: LD_INT 23
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not tmp then
19731: LD_VAR 0 6
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19886
// s1 := rand ( 1 , 4 ) ;
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: LD_INT 1
19747: PPUSH
19748: LD_INT 4
19750: PPUSH
19751: CALL_OW 12
19755: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19756: LD_ADDR_VAR 0 4
19760: PUSH
19761: LD_VAR 0 6
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 259
19779: ST_TO_ADDR
// if s1 = 1 then
19780: LD_VAR 0 2
19784: PUSH
19785: LD_INT 1
19787: EQUAL
19788: IFFALSE 19808
// s2 := rand ( 2 , 4 ) else
19790: LD_ADDR_VAR 0 3
19794: PUSH
19795: LD_INT 2
19797: PPUSH
19798: LD_INT 4
19800: PPUSH
19801: CALL_OW 12
19805: ST_TO_ADDR
19806: GO 19816
// s2 := 1 ;
19808: LD_ADDR_VAR 0 3
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19816: LD_ADDR_VAR 0 5
19820: PUSH
19821: LD_VAR 0 6
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: CALL_OW 259
19839: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19840: LD_VAR 0 6
19844: PUSH
19845: LD_INT 1
19847: ARRAY
19848: PPUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: LD_VAR 0 5
19858: PPUSH
19859: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19863: LD_VAR 0 6
19867: PUSH
19868: LD_INT 1
19870: ARRAY
19871: PPUSH
19872: LD_VAR 0 3
19876: PPUSH
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 237
// end ;
19886: PPOPN 6
19888: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19889: LD_EXP 53
19893: IFFALSE 19901
19895: PUSH
19896: LD_EXP 100
19900: AND
19901: IFFALSE 19980
19903: GO 19905
19905: DISABLE
19906: LD_INT 0
19908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19909: LD_ADDR_VAR 0 1
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_OWVAR 2
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 30
19928: PUSH
19929: LD_INT 3
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: ST_TO_ADDR
// if not tmp then
19945: LD_VAR 0 1
19949: NOT
19950: IFFALSE 19954
// exit ;
19952: GO 19980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19954: LD_VAR 0 1
19958: PUSH
19959: LD_INT 1
19961: PPUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 12
19971: ARRAY
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 234
// end ;
19980: PPOPN 1
19982: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19983: LD_EXP 53
19987: IFFALSE 19995
19989: PUSH
19990: LD_EXP 101
19994: AND
19995: IFFALSE 20107
19997: GO 19999
19999: DISABLE
20000: LD_INT 0
20002: PPUSH
20003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_INT 22
20011: PUSH
20012: LD_OWVAR 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: LD_INT 30
20026: PUSH
20027: LD_INT 27
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 30
20036: PUSH
20037: LD_INT 26
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 30
20046: PUSH
20047: LD_INT 28
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 69
20068: ST_TO_ADDR
// if not tmp then
20069: LD_VAR 0 2
20073: NOT
20074: IFFALSE 20078
// exit ;
20076: GO 20107
// for i in tmp do
20078: LD_ADDR_VAR 0 1
20082: PUSH
20083: LD_VAR 0 2
20087: PUSH
20088: FOR_IN
20089: IFFALSE 20105
// SetLives ( i , 1 ) ;
20091: LD_VAR 0 1
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 234
20103: GO 20088
20105: POP
20106: POP
// end ;
20107: PPOPN 2
20109: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20110: LD_EXP 53
20114: IFFALSE 20122
20116: PUSH
20117: LD_EXP 102
20121: AND
20122: IFFALSE 20409
20124: GO 20126
20126: DISABLE
20127: LD_INT 0
20129: PPUSH
20130: PPUSH
20131: PPUSH
// begin i := rand ( 1 , 7 ) ;
20132: LD_ADDR_VAR 0 1
20136: PUSH
20137: LD_INT 1
20139: PPUSH
20140: LD_INT 7
20142: PPUSH
20143: CALL_OW 12
20147: ST_TO_ADDR
// case i of 1 :
20148: LD_VAR 0 1
20152: PUSH
20153: LD_INT 1
20155: DOUBLE
20156: EQUAL
20157: IFTRUE 20161
20159: GO 20171
20161: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20162: LD_STRING earthquake(getX(game), 0, 32)
20164: PPUSH
20165: CALL_OW 559
20169: GO 20409
20171: LD_INT 2
20173: DOUBLE
20174: EQUAL
20175: IFTRUE 20179
20177: GO 20193
20179: POP
// begin ToLua ( displayStucuk(); ) ;
20180: LD_STRING displayStucuk();
20182: PPUSH
20183: CALL_OW 559
// ResetFog ;
20187: CALL_OW 335
// end ; 3 :
20191: GO 20409
20193: LD_INT 3
20195: DOUBLE
20196: EQUAL
20197: IFTRUE 20201
20199: GO 20305
20201: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20202: LD_ADDR_VAR 0 2
20206: PUSH
20207: LD_INT 22
20209: PUSH
20210: LD_OWVAR 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 25
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PPUSH
20233: CALL_OW 69
20237: ST_TO_ADDR
// if not tmp then
20238: LD_VAR 0 2
20242: NOT
20243: IFFALSE 20247
// exit ;
20245: GO 20409
// un := tmp [ rand ( 1 , tmp ) ] ;
20247: LD_ADDR_VAR 0 3
20251: PUSH
20252: LD_VAR 0 2
20256: PUSH
20257: LD_INT 1
20259: PPUSH
20260: LD_VAR 0 2
20264: PPUSH
20265: CALL_OW 12
20269: ARRAY
20270: ST_TO_ADDR
// if Crawls ( un ) then
20271: LD_VAR 0 3
20275: PPUSH
20276: CALL_OW 318
20280: IFFALSE 20291
// ComWalk ( un ) ;
20282: LD_VAR 0 3
20286: PPUSH
20287: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20291: LD_VAR 0 3
20295: PPUSH
20296: LD_INT 8
20298: PPUSH
20299: CALL_OW 336
// end ; 4 :
20303: GO 20409
20305: LD_INT 4
20307: DOUBLE
20308: EQUAL
20309: IFTRUE 20313
20311: GO 20387
20313: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20314: LD_ADDR_VAR 0 2
20318: PUSH
20319: LD_INT 22
20321: PUSH
20322: LD_OWVAR 2
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 30
20333: PUSH
20334: LD_INT 29
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 69
20349: ST_TO_ADDR
// if not tmp then
20350: LD_VAR 0 2
20354: NOT
20355: IFFALSE 20359
// exit ;
20357: GO 20409
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20359: LD_VAR 0 2
20363: PUSH
20364: LD_INT 1
20366: ARRAY
20367: PPUSH
20368: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20372: LD_VAR 0 2
20376: PUSH
20377: LD_INT 1
20379: ARRAY
20380: PPUSH
20381: CALL_OW 65
// end ; 5 .. 7 :
20385: GO 20409
20387: LD_INT 5
20389: DOUBLE
20390: GREATEREQUAL
20391: IFFALSE 20399
20393: LD_INT 7
20395: DOUBLE
20396: LESSEQUAL
20397: IFTRUE 20401
20399: GO 20408
20401: POP
// StreamSibBomb ; end ;
20402: CALL 16590 0 0
20406: GO 20409
20408: POP
// end ;
20409: PPOPN 3
20411: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20412: LD_EXP 53
20416: IFFALSE 20424
20418: PUSH
20419: LD_EXP 103
20423: AND
20424: IFFALSE 20580
20426: GO 20428
20428: DISABLE
20429: LD_INT 0
20431: PPUSH
20432: PPUSH
20433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20434: LD_ADDR_VAR 0 2
20438: PUSH
20439: LD_INT 81
20441: PUSH
20442: LD_OWVAR 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: LD_INT 21
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 21
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: ST_TO_ADDR
// if not tmp then
20488: LD_VAR 0 2
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 20580
// p := 0 ;
20497: LD_ADDR_VAR 0 3
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20505: LD_INT 35
20507: PPUSH
20508: CALL_OW 67
// p := p + 1 ;
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 1
20524: PLUS
20525: ST_TO_ADDR
// for i in tmp do
20526: LD_ADDR_VAR 0 1
20530: PUSH
20531: LD_VAR 0 2
20535: PUSH
20536: FOR_IN
20537: IFFALSE 20568
// if GetLives ( i ) < 1000 then
20539: LD_VAR 0 1
20543: PPUSH
20544: CALL_OW 256
20548: PUSH
20549: LD_INT 1000
20551: LESS
20552: IFFALSE 20566
// SetLives ( i , 1000 ) ;
20554: LD_VAR 0 1
20558: PPUSH
20559: LD_INT 1000
20561: PPUSH
20562: CALL_OW 234
20566: GO 20536
20568: POP
20569: POP
// until p > 20 ;
20570: LD_VAR 0 3
20574: PUSH
20575: LD_INT 20
20577: GREATER
20578: IFFALSE 20505
// end ;
20580: PPOPN 3
20582: END
// every 0 0$1 trigger StreamModeActive and sTime do
20583: LD_EXP 53
20587: IFFALSE 20595
20589: PUSH
20590: LD_EXP 104
20594: AND
20595: IFFALSE 20630
20597: GO 20599
20599: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20600: LD_INT 28
20602: PPUSH
20603: LD_OWVAR 2
20607: PPUSH
20608: LD_INT 2
20610: PPUSH
20611: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20615: LD_INT 30
20617: PPUSH
20618: LD_OWVAR 2
20622: PPUSH
20623: LD_INT 2
20625: PPUSH
20626: CALL_OW 322
// end ;
20630: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20631: LD_EXP 53
20635: IFFALSE 20643
20637: PUSH
20638: LD_EXP 105
20642: AND
20643: IFFALSE 20764
20645: GO 20647
20647: DISABLE
20648: LD_INT 0
20650: PPUSH
20651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20652: LD_ADDR_VAR 0 2
20656: PUSH
20657: LD_INT 22
20659: PUSH
20660: LD_OWVAR 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 3
20681: PUSH
20682: LD_INT 23
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: ST_TO_ADDR
// if not tmp then
20706: LD_VAR 0 2
20710: NOT
20711: IFFALSE 20715
// exit ;
20713: GO 20764
// for i in tmp do
20715: LD_ADDR_VAR 0 1
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: FOR_IN
20726: IFFALSE 20762
// begin if Crawls ( i ) then
20728: LD_VAR 0 1
20732: PPUSH
20733: CALL_OW 318
20737: IFFALSE 20748
// ComWalk ( i ) ;
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 138
// SetClass ( i , 2 ) ;
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_INT 2
20755: PPUSH
20756: CALL_OW 336
// end ;
20760: GO 20725
20762: POP
20763: POP
// end ;
20764: PPOPN 2
20766: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20767: LD_EXP 53
20771: IFFALSE 20779
20773: PUSH
20774: LD_EXP 106
20778: AND
20779: IFFALSE 21069
20781: GO 20783
20783: DISABLE
20784: LD_INT 0
20786: PPUSH
20787: PPUSH
20788: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20789: LD_OWVAR 2
20793: PPUSH
20794: LD_INT 9
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: LD_INT 1
20802: PPUSH
20803: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20807: LD_INT 9
20809: PPUSH
20810: LD_OWVAR 2
20814: PPUSH
20815: CALL_OW 343
// uc_side := 9 ;
20819: LD_ADDR_OWVAR 20
20823: PUSH
20824: LD_INT 9
20826: ST_TO_ADDR
// uc_nation := 2 ;
20827: LD_ADDR_OWVAR 21
20831: PUSH
20832: LD_INT 2
20834: ST_TO_ADDR
// hc_name := Dark Warrior ;
20835: LD_ADDR_OWVAR 26
20839: PUSH
20840: LD_STRING Dark Warrior
20842: ST_TO_ADDR
// hc_gallery :=  ;
20843: LD_ADDR_OWVAR 33
20847: PUSH
20848: LD_STRING 
20850: ST_TO_ADDR
// hc_noskilllimit := true ;
20851: LD_ADDR_OWVAR 76
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20859: LD_ADDR_OWVAR 31
20863: PUSH
20864: LD_INT 30
20866: PUSH
20867: LD_INT 30
20869: PUSH
20870: LD_INT 30
20872: PUSH
20873: LD_INT 30
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: ST_TO_ADDR
// un := CreateHuman ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: CALL_OW 44
20891: ST_TO_ADDR
// hc_noskilllimit := false ;
20892: LD_ADDR_OWVAR 76
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20900: LD_VAR 0 3
20904: PPUSH
20905: LD_INT 1
20907: PPUSH
20908: CALL_OW 51
// ToLua ( playRanger() ) ;
20912: LD_STRING playRanger()
20914: PPUSH
20915: CALL_OW 559
// p := 0 ;
20919: LD_ADDR_VAR 0 2
20923: PUSH
20924: LD_INT 0
20926: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20927: LD_INT 35
20929: PPUSH
20930: CALL_OW 67
// p := p + 1 ;
20934: LD_ADDR_VAR 0 2
20938: PUSH
20939: LD_VAR 0 2
20943: PUSH
20944: LD_INT 1
20946: PLUS
20947: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20948: LD_VAR 0 3
20952: PPUSH
20953: CALL_OW 256
20957: PUSH
20958: LD_INT 1000
20960: LESS
20961: IFFALSE 20975
// SetLives ( un , 1000 ) ;
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_INT 1000
20970: PPUSH
20971: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20975: LD_VAR 0 3
20979: PPUSH
20980: LD_INT 81
20982: PUSH
20983: LD_OWVAR 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 91
20994: PUSH
20995: LD_VAR 0 3
20999: PUSH
21000: LD_INT 30
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PPUSH
21012: CALL_OW 69
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: CALL_OW 74
21026: PPUSH
21027: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21031: LD_VAR 0 2
21035: PUSH
21036: LD_INT 80
21038: GREATER
21039: IFTRUE 21052
21041: PUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: CALL_OW 301
21051: OR
21052: IFFALSE 20927
// if un then
21054: LD_VAR 0 3
21058: IFFALSE 21069
// RemoveUnit ( un ) ;
21060: LD_VAR 0 3
21064: PPUSH
21065: CALL_OW 64
// end ;
21069: PPOPN 3
21071: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21072: LD_EXP 107
21076: IFFALSE 21192
21078: GO 21080
21080: DISABLE
21081: LD_INT 0
21083: PPUSH
21084: PPUSH
21085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: LD_INT 81
21093: PUSH
21094: LD_OWVAR 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 21
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21122: LD_STRING playComputer()
21124: PPUSH
21125: CALL_OW 559
// if not tmp then
21129: LD_VAR 0 2
21133: NOT
21134: IFFALSE 21138
// exit ;
21136: GO 21192
// for i in tmp do
21138: LD_ADDR_VAR 0 1
21142: PUSH
21143: LD_VAR 0 2
21147: PUSH
21148: FOR_IN
21149: IFFALSE 21190
// for j := 1 to 4 do
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: DOUBLE
21157: LD_INT 1
21159: DEC
21160: ST_TO_ADDR
21161: LD_INT 4
21163: PUSH
21164: FOR_TO
21165: IFFALSE 21186
// SetSkill ( i , j , 10 ) ;
21167: LD_VAR 0 1
21171: PPUSH
21172: LD_VAR 0 3
21176: PPUSH
21177: LD_INT 10
21179: PPUSH
21180: CALL_OW 237
21184: GO 21164
21186: POP
21187: POP
21188: GO 21148
21190: POP
21191: POP
// end ;
21192: PPOPN 3
21194: END
// every 0 0$1 trigger s30 do var i , tmp ;
21195: LD_EXP 108
21199: IFFALSE 21268
21201: GO 21203
21203: DISABLE
21204: LD_INT 0
21206: PPUSH
21207: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21208: LD_ADDR_VAR 0 2
21212: PUSH
21213: LD_INT 22
21215: PUSH
21216: LD_OWVAR 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PPUSH
21225: CALL_OW 69
21229: ST_TO_ADDR
// if not tmp then
21230: LD_VAR 0 2
21234: NOT
21235: IFFALSE 21239
// exit ;
21237: GO 21268
// for i in tmp do
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_VAR 0 2
21248: PUSH
21249: FOR_IN
21250: IFFALSE 21266
// SetLives ( i , 300 ) ;
21252: LD_VAR 0 1
21256: PPUSH
21257: LD_INT 300
21259: PPUSH
21260: CALL_OW 234
21264: GO 21249
21266: POP
21267: POP
// end ;
21268: PPOPN 2
21270: END
// every 0 0$1 trigger s60 do var i , tmp ;
21271: LD_EXP 109
21275: IFFALSE 21344
21277: GO 21279
21279: DISABLE
21280: LD_INT 0
21282: PPUSH
21283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21284: LD_ADDR_VAR 0 2
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_OWVAR 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PPUSH
21301: CALL_OW 69
21305: ST_TO_ADDR
// if not tmp then
21306: LD_VAR 0 2
21310: NOT
21311: IFFALSE 21315
// exit ;
21313: GO 21344
// for i in tmp do
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_VAR 0 2
21324: PUSH
21325: FOR_IN
21326: IFFALSE 21342
// SetLives ( i , 600 ) ;
21328: LD_VAR 0 1
21332: PPUSH
21333: LD_INT 600
21335: PPUSH
21336: CALL_OW 234
21340: GO 21325
21342: POP
21343: POP
// end ;
21344: PPOPN 2
21346: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21347: LD_INT 0
21349: PPUSH
// case cmd of 301 :
21350: LD_VAR 0 1
21354: PUSH
21355: LD_INT 301
21357: DOUBLE
21358: EQUAL
21359: IFTRUE 21363
21361: GO 21395
21363: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21364: LD_VAR 0 6
21368: PPUSH
21369: LD_VAR 0 7
21373: PPUSH
21374: LD_VAR 0 8
21378: PPUSH
21379: LD_VAR 0 4
21383: PPUSH
21384: LD_VAR 0 5
21388: PPUSH
21389: CALL 22608 0 5
21393: GO 21516
21395: LD_INT 302
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21440
21403: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21404: LD_VAR 0 6
21408: PPUSH
21409: LD_VAR 0 7
21413: PPUSH
21414: LD_VAR 0 8
21418: PPUSH
21419: LD_VAR 0 9
21423: PPUSH
21424: LD_VAR 0 4
21428: PPUSH
21429: LD_VAR 0 5
21433: PPUSH
21434: CALL 22699 0 6
21438: GO 21516
21440: LD_INT 303
21442: DOUBLE
21443: EQUAL
21444: IFTRUE 21448
21446: GO 21485
21448: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21449: LD_VAR 0 6
21453: PPUSH
21454: LD_VAR 0 7
21458: PPUSH
21459: LD_VAR 0 8
21463: PPUSH
21464: LD_VAR 0 9
21468: PPUSH
21469: LD_VAR 0 4
21473: PPUSH
21474: LD_VAR 0 5
21478: PPUSH
21479: CALL 21521 0 6
21483: GO 21516
21485: LD_INT 304
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21515
21493: POP
// hHackTeleport ( unit , x , y ) ; end ;
21494: LD_VAR 0 2
21498: PPUSH
21499: LD_VAR 0 4
21503: PPUSH
21504: LD_VAR 0 5
21508: PPUSH
21509: CALL 23292 0 3
21513: GO 21516
21515: POP
// end ;
21516: LD_VAR 0 12
21520: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21521: LD_INT 0
21523: PPUSH
21524: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21525: LD_VAR 0 1
21529: PUSH
21530: LD_INT 1
21532: LESS
21533: IFTRUE 21545
21535: PUSH
21536: LD_VAR 0 1
21540: PUSH
21541: LD_INT 3
21543: GREATER
21544: OR
21545: IFTRUE 21563
21547: PUSH
21548: LD_VAR 0 5
21552: PPUSH
21553: LD_VAR 0 6
21557: PPUSH
21558: CALL_OW 428
21562: OR
21563: IFFALSE 21567
// exit ;
21565: GO 22295
// uc_side := your_side ;
21567: LD_ADDR_OWVAR 20
21571: PUSH
21572: LD_OWVAR 2
21576: ST_TO_ADDR
// uc_nation := nation ;
21577: LD_ADDR_OWVAR 21
21581: PUSH
21582: LD_VAR 0 1
21586: ST_TO_ADDR
// bc_level = 1 ;
21587: LD_ADDR_OWVAR 43
21591: PUSH
21592: LD_INT 1
21594: ST_TO_ADDR
// case btype of 1 :
21595: LD_VAR 0 2
21599: PUSH
21600: LD_INT 1
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21619
21608: POP
// bc_type := b_depot ; 2 :
21609: LD_ADDR_OWVAR 42
21613: PUSH
21614: LD_INT 0
21616: ST_TO_ADDR
21617: GO 22239
21619: LD_INT 2
21621: DOUBLE
21622: EQUAL
21623: IFTRUE 21627
21625: GO 21638
21627: POP
// bc_type := b_warehouse ; 3 :
21628: LD_ADDR_OWVAR 42
21632: PUSH
21633: LD_INT 1
21635: ST_TO_ADDR
21636: GO 22239
21638: LD_INT 3
21640: DOUBLE
21641: EQUAL
21642: IFTRUE 21646
21644: GO 21657
21646: POP
// bc_type := b_lab ; 4 .. 9 :
21647: LD_ADDR_OWVAR 42
21651: PUSH
21652: LD_INT 6
21654: ST_TO_ADDR
21655: GO 22239
21657: LD_INT 4
21659: DOUBLE
21660: GREATEREQUAL
21661: IFFALSE 21669
21663: LD_INT 9
21665: DOUBLE
21666: LESSEQUAL
21667: IFTRUE 21671
21669: GO 21731
21671: POP
// begin bc_type := b_lab_half ;
21672: LD_ADDR_OWVAR 42
21676: PUSH
21677: LD_INT 7
21679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21680: LD_ADDR_OWVAR 44
21684: PUSH
21685: LD_INT 10
21687: PUSH
21688: LD_INT 11
21690: PUSH
21691: LD_INT 12
21693: PUSH
21694: LD_INT 15
21696: PUSH
21697: LD_INT 14
21699: PUSH
21700: LD_INT 13
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: LD_VAR 0 2
21715: PUSH
21716: LD_INT 3
21718: MINUS
21719: ARRAY
21720: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21721: LD_ADDR_OWVAR 45
21725: PUSH
21726: LD_INT 9
21728: ST_TO_ADDR
// end ; 10 .. 13 :
21729: GO 22239
21731: LD_INT 10
21733: DOUBLE
21734: GREATEREQUAL
21735: IFFALSE 21743
21737: LD_INT 13
21739: DOUBLE
21740: LESSEQUAL
21741: IFTRUE 21745
21743: GO 21822
21745: POP
// begin bc_type := b_lab_full ;
21746: LD_ADDR_OWVAR 42
21750: PUSH
21751: LD_INT 8
21753: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21754: LD_ADDR_OWVAR 44
21758: PUSH
21759: LD_INT 10
21761: PUSH
21762: LD_INT 12
21764: PUSH
21765: LD_INT 14
21767: PUSH
21768: LD_INT 13
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: LD_VAR 0 2
21781: PUSH
21782: LD_INT 9
21784: MINUS
21785: ARRAY
21786: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21787: LD_ADDR_OWVAR 45
21791: PUSH
21792: LD_INT 11
21794: PUSH
21795: LD_INT 15
21797: PUSH
21798: LD_INT 12
21800: PUSH
21801: LD_INT 15
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: LD_VAR 0 2
21814: PUSH
21815: LD_INT 9
21817: MINUS
21818: ARRAY
21819: ST_TO_ADDR
// end ; 14 :
21820: GO 22239
21822: LD_INT 14
21824: DOUBLE
21825: EQUAL
21826: IFTRUE 21830
21828: GO 21841
21830: POP
// bc_type := b_workshop ; 15 :
21831: LD_ADDR_OWVAR 42
21835: PUSH
21836: LD_INT 2
21838: ST_TO_ADDR
21839: GO 22239
21841: LD_INT 15
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21860
21849: POP
// bc_type := b_factory ; 16 :
21850: LD_ADDR_OWVAR 42
21854: PUSH
21855: LD_INT 3
21857: ST_TO_ADDR
21858: GO 22239
21860: LD_INT 16
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 21879
21868: POP
// bc_type := b_ext_gun ; 17 :
21869: LD_ADDR_OWVAR 42
21873: PUSH
21874: LD_INT 17
21876: ST_TO_ADDR
21877: GO 22239
21879: LD_INT 17
21881: DOUBLE
21882: EQUAL
21883: IFTRUE 21887
21885: GO 21915
21887: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21888: LD_ADDR_OWVAR 42
21892: PUSH
21893: LD_INT 19
21895: PUSH
21896: LD_INT 23
21898: PUSH
21899: LD_INT 19
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: PUSH
21907: LD_VAR 0 1
21911: ARRAY
21912: ST_TO_ADDR
21913: GO 22239
21915: LD_INT 18
21917: DOUBLE
21918: EQUAL
21919: IFTRUE 21923
21921: GO 21934
21923: POP
// bc_type := b_ext_radar ; 19 :
21924: LD_ADDR_OWVAR 42
21928: PUSH
21929: LD_INT 20
21931: ST_TO_ADDR
21932: GO 22239
21934: LD_INT 19
21936: DOUBLE
21937: EQUAL
21938: IFTRUE 21942
21940: GO 21953
21942: POP
// bc_type := b_ext_radio ; 20 :
21943: LD_ADDR_OWVAR 42
21947: PUSH
21948: LD_INT 22
21950: ST_TO_ADDR
21951: GO 22239
21953: LD_INT 20
21955: DOUBLE
21956: EQUAL
21957: IFTRUE 21961
21959: GO 21972
21961: POP
// bc_type := b_ext_siberium ; 21 :
21962: LD_ADDR_OWVAR 42
21966: PUSH
21967: LD_INT 21
21969: ST_TO_ADDR
21970: GO 22239
21972: LD_INT 21
21974: DOUBLE
21975: EQUAL
21976: IFTRUE 21980
21978: GO 21991
21980: POP
// bc_type := b_ext_computer ; 22 :
21981: LD_ADDR_OWVAR 42
21985: PUSH
21986: LD_INT 24
21988: ST_TO_ADDR
21989: GO 22239
21991: LD_INT 22
21993: DOUBLE
21994: EQUAL
21995: IFTRUE 21999
21997: GO 22010
21999: POP
// bc_type := b_ext_track ; 23 :
22000: LD_ADDR_OWVAR 42
22004: PUSH
22005: LD_INT 16
22007: ST_TO_ADDR
22008: GO 22239
22010: LD_INT 23
22012: DOUBLE
22013: EQUAL
22014: IFTRUE 22018
22016: GO 22029
22018: POP
// bc_type := b_ext_laser ; 24 :
22019: LD_ADDR_OWVAR 42
22023: PUSH
22024: LD_INT 25
22026: ST_TO_ADDR
22027: GO 22239
22029: LD_INT 24
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22048
22037: POP
// bc_type := b_control_tower ; 25 :
22038: LD_ADDR_OWVAR 42
22042: PUSH
22043: LD_INT 36
22045: ST_TO_ADDR
22046: GO 22239
22048: LD_INT 25
22050: DOUBLE
22051: EQUAL
22052: IFTRUE 22056
22054: GO 22067
22056: POP
// bc_type := b_breastwork ; 26 :
22057: LD_ADDR_OWVAR 42
22061: PUSH
22062: LD_INT 31
22064: ST_TO_ADDR
22065: GO 22239
22067: LD_INT 26
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22086
22075: POP
// bc_type := b_bunker ; 27 :
22076: LD_ADDR_OWVAR 42
22080: PUSH
22081: LD_INT 32
22083: ST_TO_ADDR
22084: GO 22239
22086: LD_INT 27
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22105
22094: POP
// bc_type := b_turret ; 28 :
22095: LD_ADDR_OWVAR 42
22099: PUSH
22100: LD_INT 33
22102: ST_TO_ADDR
22103: GO 22239
22105: LD_INT 28
22107: DOUBLE
22108: EQUAL
22109: IFTRUE 22113
22111: GO 22124
22113: POP
// bc_type := b_armoury ; 29 :
22114: LD_ADDR_OWVAR 42
22118: PUSH
22119: LD_INT 4
22121: ST_TO_ADDR
22122: GO 22239
22124: LD_INT 29
22126: DOUBLE
22127: EQUAL
22128: IFTRUE 22132
22130: GO 22143
22132: POP
// bc_type := b_barracks ; 30 :
22133: LD_ADDR_OWVAR 42
22137: PUSH
22138: LD_INT 5
22140: ST_TO_ADDR
22141: GO 22239
22143: LD_INT 30
22145: DOUBLE
22146: EQUAL
22147: IFTRUE 22151
22149: GO 22162
22151: POP
// bc_type := b_solar_power ; 31 :
22152: LD_ADDR_OWVAR 42
22156: PUSH
22157: LD_INT 27
22159: ST_TO_ADDR
22160: GO 22239
22162: LD_INT 31
22164: DOUBLE
22165: EQUAL
22166: IFTRUE 22170
22168: GO 22181
22170: POP
// bc_type := b_oil_power ; 32 :
22171: LD_ADDR_OWVAR 42
22175: PUSH
22176: LD_INT 26
22178: ST_TO_ADDR
22179: GO 22239
22181: LD_INT 32
22183: DOUBLE
22184: EQUAL
22185: IFTRUE 22189
22187: GO 22200
22189: POP
// bc_type := b_siberite_power ; 33 :
22190: LD_ADDR_OWVAR 42
22194: PUSH
22195: LD_INT 28
22197: ST_TO_ADDR
22198: GO 22239
22200: LD_INT 33
22202: DOUBLE
22203: EQUAL
22204: IFTRUE 22208
22206: GO 22219
22208: POP
// bc_type := b_oil_mine ; 34 :
22209: LD_ADDR_OWVAR 42
22213: PUSH
22214: LD_INT 29
22216: ST_TO_ADDR
22217: GO 22239
22219: LD_INT 34
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22238
22227: POP
// bc_type := b_siberite_mine ; end ;
22228: LD_ADDR_OWVAR 42
22232: PUSH
22233: LD_INT 30
22235: ST_TO_ADDR
22236: GO 22239
22238: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22239: LD_ADDR_VAR 0 8
22243: PUSH
22244: LD_VAR 0 5
22248: PPUSH
22249: LD_VAR 0 6
22253: PPUSH
22254: LD_VAR 0 3
22258: PPUSH
22259: CALL_OW 47
22263: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22264: LD_OWVAR 42
22268: PUSH
22269: LD_INT 32
22271: PUSH
22272: LD_INT 33
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: IN
22279: IFFALSE 22295
// PlaceWeaponTurret ( b , weapon ) ;
22281: LD_VAR 0 8
22285: PPUSH
22286: LD_VAR 0 4
22290: PPUSH
22291: CALL_OW 431
// end ;
22295: LD_VAR 0 7
22299: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
22304: PPUSH
22305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: LD_INT 22
22313: PUSH
22314: LD_OWVAR 2
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 30
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 30
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PPUSH
22355: CALL_OW 69
22359: ST_TO_ADDR
// if not tmp then
22360: LD_VAR 0 4
22364: NOT
22365: IFFALSE 22369
// exit ;
22367: GO 22428
// for i in tmp do
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_VAR 0 4
22378: PUSH
22379: FOR_IN
22380: IFFALSE 22426
// for j = 1 to 3 do
22382: LD_ADDR_VAR 0 3
22386: PUSH
22387: DOUBLE
22388: LD_INT 1
22390: DEC
22391: ST_TO_ADDR
22392: LD_INT 3
22394: PUSH
22395: FOR_TO
22396: IFFALSE 22422
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22398: LD_VAR 0 2
22402: PPUSH
22403: CALL_OW 274
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: LD_INT 99999
22415: PPUSH
22416: CALL_OW 277
22420: GO 22395
22422: POP
22423: POP
22424: GO 22379
22426: POP
22427: POP
// end ;
22428: LD_VAR 0 1
22432: RET
// export function hHackSetLevel10 ; var i , j ; begin
22433: LD_INT 0
22435: PPUSH
22436: PPUSH
22437: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_INT 21
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: CALL_OW 69
22457: PUSH
22458: FOR_IN
22459: IFFALSE 22511
// if IsSelected ( i ) then
22461: LD_VAR 0 2
22465: PPUSH
22466: CALL_OW 306
22470: IFFALSE 22509
// begin for j := 1 to 4 do
22472: LD_ADDR_VAR 0 3
22476: PUSH
22477: DOUBLE
22478: LD_INT 1
22480: DEC
22481: ST_TO_ADDR
22482: LD_INT 4
22484: PUSH
22485: FOR_TO
22486: IFFALSE 22507
// SetSkill ( i , j , 10 ) ;
22488: LD_VAR 0 2
22492: PPUSH
22493: LD_VAR 0 3
22497: PPUSH
22498: LD_INT 10
22500: PPUSH
22501: CALL_OW 237
22505: GO 22485
22507: POP
22508: POP
// end ;
22509: GO 22458
22511: POP
22512: POP
// end ;
22513: LD_VAR 0 1
22517: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22518: LD_INT 0
22520: PPUSH
22521: PPUSH
22522: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: LD_OWVAR 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 21
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PPUSH
22554: CALL_OW 69
22558: PUSH
22559: FOR_IN
22560: IFFALSE 22601
// begin for j := 1 to 4 do
22562: LD_ADDR_VAR 0 3
22566: PUSH
22567: DOUBLE
22568: LD_INT 1
22570: DEC
22571: ST_TO_ADDR
22572: LD_INT 4
22574: PUSH
22575: FOR_TO
22576: IFFALSE 22597
// SetSkill ( i , j , 10 ) ;
22578: LD_VAR 0 2
22582: PPUSH
22583: LD_VAR 0 3
22587: PPUSH
22588: LD_INT 10
22590: PPUSH
22591: CALL_OW 237
22595: GO 22575
22597: POP
22598: POP
// end ;
22599: GO 22559
22601: POP
22602: POP
// end ;
22603: LD_VAR 0 1
22607: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22608: LD_INT 0
22610: PPUSH
// uc_side := your_side ;
22611: LD_ADDR_OWVAR 20
22615: PUSH
22616: LD_OWVAR 2
22620: ST_TO_ADDR
// uc_nation := nation ;
22621: LD_ADDR_OWVAR 21
22625: PUSH
22626: LD_VAR 0 1
22630: ST_TO_ADDR
// InitHc ;
22631: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22635: LD_INT 0
22637: PPUSH
22638: LD_VAR 0 2
22642: PPUSH
22643: LD_VAR 0 3
22647: PPUSH
22648: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22652: LD_VAR 0 4
22656: PPUSH
22657: LD_VAR 0 5
22661: PPUSH
22662: CALL_OW 428
22666: PUSH
22667: LD_INT 0
22669: EQUAL
22670: IFFALSE 22694
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22672: CALL_OW 44
22676: PPUSH
22677: LD_VAR 0 4
22681: PPUSH
22682: LD_VAR 0 5
22686: PPUSH
22687: LD_INT 1
22689: PPUSH
22690: CALL_OW 48
// end ;
22694: LD_VAR 0 6
22698: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22699: LD_INT 0
22701: PPUSH
22702: PPUSH
// uc_side := your_side ;
22703: LD_ADDR_OWVAR 20
22707: PUSH
22708: LD_OWVAR 2
22712: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22713: LD_VAR 0 1
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: LD_INT 3
22726: PUSH
22727: LD_INT 4
22729: PUSH
22730: LD_INT 5
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: IN
22740: IFFALSE 22752
// uc_nation := nation_american else
22742: LD_ADDR_OWVAR 21
22746: PUSH
22747: LD_INT 1
22749: ST_TO_ADDR
22750: GO 22795
// if chassis in [ 11 , 12 , 13 , 14 ] then
22752: LD_VAR 0 1
22756: PUSH
22757: LD_INT 11
22759: PUSH
22760: LD_INT 12
22762: PUSH
22763: LD_INT 13
22765: PUSH
22766: LD_INT 14
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: IN
22775: IFFALSE 22787
// uc_nation := nation_arabian else
22777: LD_ADDR_OWVAR 21
22781: PUSH
22782: LD_INT 2
22784: ST_TO_ADDR
22785: GO 22795
// uc_nation := nation_russian ;
22787: LD_ADDR_OWVAR 21
22791: PUSH
22792: LD_INT 3
22794: ST_TO_ADDR
// vc_chassis := chassis ;
22795: LD_ADDR_OWVAR 37
22799: PUSH
22800: LD_VAR 0 1
22804: ST_TO_ADDR
// vc_engine := engine ;
22805: LD_ADDR_OWVAR 39
22809: PUSH
22810: LD_VAR 0 2
22814: ST_TO_ADDR
// vc_control := control ;
22815: LD_ADDR_OWVAR 38
22819: PUSH
22820: LD_VAR 0 3
22824: ST_TO_ADDR
// vc_weapon := weapon ;
22825: LD_ADDR_OWVAR 40
22829: PUSH
22830: LD_VAR 0 4
22834: ST_TO_ADDR
// un := CreateVehicle ;
22835: LD_ADDR_VAR 0 8
22839: PUSH
22840: CALL_OW 45
22844: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22845: LD_VAR 0 8
22849: PPUSH
22850: LD_INT 0
22852: PPUSH
22853: LD_INT 5
22855: PPUSH
22856: CALL_OW 12
22860: PPUSH
22861: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22865: LD_VAR 0 8
22869: PPUSH
22870: LD_VAR 0 5
22874: PPUSH
22875: LD_VAR 0 6
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 48
// end ;
22887: LD_VAR 0 7
22891: RET
// export hInvincible ; every 1 do
22892: GO 22894
22894: DISABLE
// hInvincible := [ ] ;
22895: LD_ADDR_EXP 110
22899: PUSH
22900: EMPTY
22901: ST_TO_ADDR
22902: END
// every 10 do var i ;
22903: GO 22905
22905: DISABLE
22906: LD_INT 0
22908: PPUSH
// begin enable ;
22909: ENABLE
// if not hInvincible then
22910: LD_EXP 110
22914: NOT
22915: IFFALSE 22919
// exit ;
22917: GO 22963
// for i in hInvincible do
22919: LD_ADDR_VAR 0 1
22923: PUSH
22924: LD_EXP 110
22928: PUSH
22929: FOR_IN
22930: IFFALSE 22961
// if GetLives ( i ) < 1000 then
22932: LD_VAR 0 1
22936: PPUSH
22937: CALL_OW 256
22941: PUSH
22942: LD_INT 1000
22944: LESS
22945: IFFALSE 22959
// SetLives ( i , 1000 ) ;
22947: LD_VAR 0 1
22951: PPUSH
22952: LD_INT 1000
22954: PPUSH
22955: CALL_OW 234
22959: GO 22929
22961: POP
22962: POP
// end ;
22963: PPOPN 1
22965: END
// export function hHackInvincible ; var i ; begin
22966: LD_INT 0
22968: PPUSH
22969: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22970: LD_ADDR_VAR 0 2
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: LD_INT 21
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 21
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: LIST
23002: PPUSH
23003: CALL_OW 69
23007: PUSH
23008: FOR_IN
23009: IFFALSE 23070
// if IsSelected ( i ) then
23011: LD_VAR 0 2
23015: PPUSH
23016: CALL_OW 306
23020: IFFALSE 23068
// begin if i in hInvincible then
23022: LD_VAR 0 2
23026: PUSH
23027: LD_EXP 110
23031: IN
23032: IFFALSE 23052
// hInvincible := hInvincible diff i else
23034: LD_ADDR_EXP 110
23038: PUSH
23039: LD_EXP 110
23043: PUSH
23044: LD_VAR 0 2
23048: DIFF
23049: ST_TO_ADDR
23050: GO 23068
// hInvincible := hInvincible union i ;
23052: LD_ADDR_EXP 110
23056: PUSH
23057: LD_EXP 110
23061: PUSH
23062: LD_VAR 0 2
23066: UNION
23067: ST_TO_ADDR
// end ;
23068: GO 23008
23070: POP
23071: POP
// end ;
23072: LD_VAR 0 1
23076: RET
// export function hHackInvisible ; var i , j ; begin
23077: LD_INT 0
23079: PPUSH
23080: PPUSH
23081: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_INT 21
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PPUSH
23097: CALL_OW 69
23101: PUSH
23102: FOR_IN
23103: IFFALSE 23127
// if IsSelected ( i ) then
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL_OW 306
23114: IFFALSE 23125
// ComForceInvisible ( i ) ;
23116: LD_VAR 0 2
23120: PPUSH
23121: CALL_OW 496
23125: GO 23102
23127: POP
23128: POP
// end ;
23129: LD_VAR 0 1
23133: RET
// export function hHackChangeYourSide ; begin
23134: LD_INT 0
23136: PPUSH
// if your_side = 8 then
23137: LD_OWVAR 2
23141: PUSH
23142: LD_INT 8
23144: EQUAL
23145: IFFALSE 23157
// your_side := 0 else
23147: LD_ADDR_OWVAR 2
23151: PUSH
23152: LD_INT 0
23154: ST_TO_ADDR
23155: GO 23171
// your_side := your_side + 1 ;
23157: LD_ADDR_OWVAR 2
23161: PUSH
23162: LD_OWVAR 2
23166: PUSH
23167: LD_INT 1
23169: PLUS
23170: ST_TO_ADDR
// end ;
23171: LD_VAR 0 1
23175: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23176: LD_INT 0
23178: PPUSH
23179: PPUSH
23180: PPUSH
// for i in all_units do
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_OWVAR 3
23190: PUSH
23191: FOR_IN
23192: IFFALSE 23270
// if IsSelected ( i ) then
23194: LD_VAR 0 2
23198: PPUSH
23199: CALL_OW 306
23203: IFFALSE 23268
// begin j := GetSide ( i ) ;
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: LD_VAR 0 2
23214: PPUSH
23215: CALL_OW 255
23219: ST_TO_ADDR
// if j = 8 then
23220: LD_VAR 0 3
23224: PUSH
23225: LD_INT 8
23227: EQUAL
23228: IFFALSE 23240
// j := 0 else
23230: LD_ADDR_VAR 0 3
23234: PUSH
23235: LD_INT 0
23237: ST_TO_ADDR
23238: GO 23254
// j := j + 1 ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: LD_VAR 0 3
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: ST_TO_ADDR
// SetSide ( i , j ) ;
23254: LD_VAR 0 2
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: CALL_OW 235
// end ;
23268: GO 23191
23270: POP
23271: POP
// end ;
23272: LD_VAR 0 1
23276: RET
// export function hHackFog ; begin
23277: LD_INT 0
23279: PPUSH
// FogOff ( true ) ;
23280: LD_INT 1
23282: PPUSH
23283: CALL_OW 344
// end ;
23287: LD_VAR 0 1
23291: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23292: LD_INT 0
23294: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23295: LD_VAR 0 1
23299: PPUSH
23300: LD_VAR 0 2
23304: PPUSH
23305: LD_VAR 0 3
23309: PPUSH
23310: LD_INT 1
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: CALL_OW 483
// CenterOnXY ( x , y ) ;
23320: LD_VAR 0 2
23324: PPUSH
23325: LD_VAR 0 3
23329: PPUSH
23330: CALL_OW 84
// end ;
23334: LD_VAR 0 4
23338: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23339: LD_INT 0
23341: PPUSH
23342: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23343: LD_VAR 0 1
23347: NOT
23348: IFTRUE 23367
23350: PUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: LD_VAR 0 3
23360: PPUSH
23361: CALL_OW 488
23365: NOT
23366: OR
23367: IFTRUE 23402
23369: PUSH
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 266
23379: PUSH
23380: LD_INT 3
23382: NONEQUAL
23383: IFFALSE 23401
23385: PUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 247
23395: PUSH
23396: LD_INT 1
23398: EQUAL
23399: NOT
23400: AND
23401: OR
23402: IFFALSE 23406
// exit ;
23404: GO 23688
// if GetType ( factory ) = unit_human then
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 247
23415: PUSH
23416: LD_INT 1
23418: EQUAL
23419: IFFALSE 23436
// factory := IsInUnit ( factory ) ;
23421: LD_ADDR_VAR 0 1
23425: PUSH
23426: LD_VAR 0 1
23430: PPUSH
23431: CALL_OW 310
23435: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 266
23445: PUSH
23446: LD_INT 3
23448: NONEQUAL
23449: IFFALSE 23453
// exit ;
23451: GO 23688
// for i := 1 to Count ( factoryWaypoints ) do
23453: LD_ADDR_VAR 0 5
23457: PUSH
23458: DOUBLE
23459: LD_INT 1
23461: DEC
23462: ST_TO_ADDR
23463: LD_EXP 111
23467: PPUSH
23468: CALL 33492 0 1
23472: PUSH
23473: FOR_TO
23474: IFFALSE 23636
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23476: LD_VAR 0 2
23480: PPUSH
23481: LD_VAR 0 3
23485: PPUSH
23486: CALL_OW 428
23490: PUSH
23491: LD_EXP 111
23495: PUSH
23496: LD_VAR 0 5
23500: ARRAY
23501: PUSH
23502: LD_INT 2
23504: ARRAY
23505: EQUAL
23506: IFFALSE 23538
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23508: LD_ADDR_EXP 111
23512: PUSH
23513: LD_EXP 111
23517: PPUSH
23518: LD_VAR 0 5
23522: PPUSH
23523: CALL_OW 3
23527: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23528: CALL 23693 0 0
// exit ;
23532: POP
23533: POP
23534: GO 23688
// end else
23536: GO 23634
// if factory = factoryWaypoints [ i ] [ 2 ] then
23538: LD_VAR 0 1
23542: PUSH
23543: LD_EXP 111
23547: PUSH
23548: LD_VAR 0 5
23552: ARRAY
23553: PUSH
23554: LD_INT 2
23556: ARRAY
23557: EQUAL
23558: IFFALSE 23634
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23560: LD_ADDR_EXP 111
23564: PUSH
23565: LD_EXP 111
23569: PPUSH
23570: LD_VAR 0 5
23574: PPUSH
23575: CALL_OW 3
23579: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23580: LD_ADDR_EXP 111
23584: PUSH
23585: LD_EXP 111
23589: PPUSH
23590: LD_VAR 0 1
23594: PPUSH
23595: CALL_OW 255
23599: PUSH
23600: LD_VAR 0 1
23604: PUSH
23605: LD_VAR 0 2
23609: PUSH
23610: LD_VAR 0 3
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: PPUSH
23621: CALL 69468 0 2
23625: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23626: CALL 23693 0 0
// exit ;
23630: POP
23631: POP
23632: GO 23688
// end ; end ;
23634: GO 23473
23636: POP
23637: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23638: LD_ADDR_EXP 111
23642: PUSH
23643: LD_EXP 111
23647: PPUSH
23648: LD_VAR 0 1
23652: PPUSH
23653: CALL_OW 255
23657: PUSH
23658: LD_VAR 0 1
23662: PUSH
23663: LD_VAR 0 2
23667: PUSH
23668: LD_VAR 0 3
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: PPUSH
23679: CALL 69468 0 2
23683: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23684: CALL 23693 0 0
// end ;
23688: LD_VAR 0 4
23692: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23693: LD_INT 0
23695: PPUSH
23696: PPUSH
23697: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23698: LD_STRING resetFactoryWaypoint();
23700: PPUSH
23701: CALL_OW 559
// if factoryWaypoints then
23705: LD_EXP 111
23709: IFFALSE 23830
// begin list := factoryWaypoints ;
23711: LD_ADDR_VAR 0 3
23715: PUSH
23716: LD_EXP 111
23720: ST_TO_ADDR
// for i := 1 to list do
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: DOUBLE
23727: LD_INT 1
23729: DEC
23730: ST_TO_ADDR
23731: LD_VAR 0 3
23735: PUSH
23736: FOR_TO
23737: IFFALSE 23828
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23739: LD_STRING setFactoryWaypointXY(
23741: PUSH
23742: LD_VAR 0 3
23746: PUSH
23747: LD_VAR 0 2
23751: ARRAY
23752: PUSH
23753: LD_INT 1
23755: ARRAY
23756: STR
23757: PUSH
23758: LD_STRING ,
23760: STR
23761: PUSH
23762: LD_VAR 0 3
23766: PUSH
23767: LD_VAR 0 2
23771: ARRAY
23772: PUSH
23773: LD_INT 2
23775: ARRAY
23776: STR
23777: PUSH
23778: LD_STRING ,
23780: STR
23781: PUSH
23782: LD_VAR 0 3
23786: PUSH
23787: LD_VAR 0 2
23791: ARRAY
23792: PUSH
23793: LD_INT 3
23795: ARRAY
23796: STR
23797: PUSH
23798: LD_STRING ,
23800: STR
23801: PUSH
23802: LD_VAR 0 3
23806: PUSH
23807: LD_VAR 0 2
23811: ARRAY
23812: PUSH
23813: LD_INT 4
23815: ARRAY
23816: STR
23817: PUSH
23818: LD_STRING )
23820: STR
23821: PPUSH
23822: CALL_OW 559
23826: GO 23736
23828: POP
23829: POP
// end ; end ;
23830: LD_VAR 0 1
23834: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23835: LD_INT 0
23837: PPUSH
// if HexInfo ( x , y ) = warehouse then
23838: LD_VAR 0 2
23842: PPUSH
23843: LD_VAR 0 3
23847: PPUSH
23848: CALL_OW 428
23852: PUSH
23853: LD_VAR 0 1
23857: EQUAL
23858: IFFALSE 23885
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23860: LD_ADDR_EXP 113
23864: PUSH
23865: LD_EXP 113
23869: PPUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: LD_INT 0
23877: PPUSH
23878: CALL_OW 1
23882: ST_TO_ADDR
23883: GO 23936
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23885: LD_ADDR_EXP 113
23889: PUSH
23890: LD_EXP 113
23894: PPUSH
23895: LD_VAR 0 1
23899: PPUSH
23900: LD_VAR 0 1
23904: PPUSH
23905: CALL_OW 255
23909: PUSH
23910: LD_VAR 0 1
23914: PUSH
23915: LD_VAR 0 2
23919: PUSH
23920: LD_VAR 0 3
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 1
23935: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23936: CALL 23945 0 0
// end ;
23940: LD_VAR 0 4
23944: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23945: LD_INT 0
23947: PPUSH
23948: PPUSH
23949: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23950: LD_STRING resetWarehouseGatheringPoints();
23952: PPUSH
23953: CALL_OW 559
// if warehouseGatheringPoints then
23957: LD_EXP 113
23961: IFFALSE 24087
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23963: LD_ADDR_VAR 0 3
23967: PUSH
23968: LD_EXP 113
23972: PPUSH
23973: CALL 73402 0 1
23977: ST_TO_ADDR
// for i := 1 to list do
23978: LD_ADDR_VAR 0 2
23982: PUSH
23983: DOUBLE
23984: LD_INT 1
23986: DEC
23987: ST_TO_ADDR
23988: LD_VAR 0 3
23992: PUSH
23993: FOR_TO
23994: IFFALSE 24085
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23996: LD_STRING setWarehouseGatheringPointXY(
23998: PUSH
23999: LD_VAR 0 3
24003: PUSH
24004: LD_VAR 0 2
24008: ARRAY
24009: PUSH
24010: LD_INT 1
24012: ARRAY
24013: STR
24014: PUSH
24015: LD_STRING ,
24017: STR
24018: PUSH
24019: LD_VAR 0 3
24023: PUSH
24024: LD_VAR 0 2
24028: ARRAY
24029: PUSH
24030: LD_INT 2
24032: ARRAY
24033: STR
24034: PUSH
24035: LD_STRING ,
24037: STR
24038: PUSH
24039: LD_VAR 0 3
24043: PUSH
24044: LD_VAR 0 2
24048: ARRAY
24049: PUSH
24050: LD_INT 3
24052: ARRAY
24053: STR
24054: PUSH
24055: LD_STRING ,
24057: STR
24058: PUSH
24059: LD_VAR 0 3
24063: PUSH
24064: LD_VAR 0 2
24068: ARRAY
24069: PUSH
24070: LD_INT 4
24072: ARRAY
24073: STR
24074: PUSH
24075: LD_STRING )
24077: STR
24078: PPUSH
24079: CALL_OW 559
24083: GO 23993
24085: POP
24086: POP
// end ; end ;
24087: LD_VAR 0 1
24091: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24092: LD_EXP 113
24096: IFFALSE 24791
24098: GO 24100
24100: DISABLE
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
24106: PPUSH
24107: PPUSH
24108: PPUSH
24109: PPUSH
24110: PPUSH
24111: PPUSH
// begin enable ;
24112: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24113: LD_ADDR_VAR 0 3
24117: PUSH
24118: LD_EXP 113
24122: PPUSH
24123: CALL 73402 0 1
24127: ST_TO_ADDR
// if not list then
24128: LD_VAR 0 3
24132: NOT
24133: IFFALSE 24137
// exit ;
24135: GO 24791
// for i := 1 to list do
24137: LD_ADDR_VAR 0 1
24141: PUSH
24142: DOUBLE
24143: LD_INT 1
24145: DEC
24146: ST_TO_ADDR
24147: LD_VAR 0 3
24151: PUSH
24152: FOR_TO
24153: IFFALSE 24789
// begin depot := list [ i ] [ 2 ] ;
24155: LD_ADDR_VAR 0 8
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: LD_VAR 0 1
24169: ARRAY
24170: PUSH
24171: LD_INT 2
24173: ARRAY
24174: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24175: LD_ADDR_VAR 0 5
24179: PUSH
24180: LD_VAR 0 3
24184: PUSH
24185: LD_VAR 0 1
24189: ARRAY
24190: PUSH
24191: LD_INT 1
24193: ARRAY
24194: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24195: LD_VAR 0 8
24199: PPUSH
24200: CALL_OW 301
24204: IFTRUE 24223
24206: PUSH
24207: LD_VAR 0 5
24211: PUSH
24212: LD_VAR 0 8
24216: PPUSH
24217: CALL_OW 255
24221: NONEQUAL
24222: OR
24223: IFFALSE 24252
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24225: LD_ADDR_EXP 113
24229: PUSH
24230: LD_EXP 113
24234: PPUSH
24235: LD_VAR 0 8
24239: PPUSH
24240: LD_INT 0
24242: PPUSH
24243: CALL_OW 1
24247: ST_TO_ADDR
// exit ;
24248: POP
24249: POP
24250: GO 24791
// end ; x := list [ i ] [ 3 ] ;
24252: LD_ADDR_VAR 0 6
24256: PUSH
24257: LD_VAR 0 3
24261: PUSH
24262: LD_VAR 0 1
24266: ARRAY
24267: PUSH
24268: LD_INT 3
24270: ARRAY
24271: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24272: LD_ADDR_VAR 0 7
24276: PUSH
24277: LD_VAR 0 3
24281: PUSH
24282: LD_VAR 0 1
24286: ARRAY
24287: PUSH
24288: LD_INT 4
24290: ARRAY
24291: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24292: LD_ADDR_VAR 0 9
24296: PUSH
24297: LD_VAR 0 6
24301: PPUSH
24302: LD_VAR 0 7
24306: PPUSH
24307: LD_INT 16
24309: PPUSH
24310: CALL 71976 0 3
24314: ST_TO_ADDR
// if not cratesNearbyPoint then
24315: LD_VAR 0 9
24319: NOT
24320: IFFALSE 24326
// exit ;
24322: POP
24323: POP
24324: GO 24791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24326: LD_ADDR_VAR 0 4
24330: PUSH
24331: LD_INT 22
24333: PUSH
24334: LD_VAR 0 5
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: LD_INT 60
24348: PUSH
24349: EMPTY
24350: LIST
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 91
24358: PUSH
24359: LD_VAR 0 8
24363: PUSH
24364: LD_INT 6
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 25
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 25
24387: PUSH
24388: LD_INT 16
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: PPUSH
24406: CALL_OW 69
24410: PUSH
24411: LD_VAR 0 8
24415: PPUSH
24416: CALL_OW 313
24420: PPUSH
24421: LD_INT 3
24423: PUSH
24424: LD_INT 60
24426: PUSH
24427: EMPTY
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: LD_INT 25
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 25
24449: PUSH
24450: LD_INT 16
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PPUSH
24466: CALL_OW 72
24470: UNION
24471: ST_TO_ADDR
// if tmp then
24472: LD_VAR 0 4
24476: IFFALSE 24556
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24478: LD_ADDR_VAR 0 4
24482: PUSH
24483: LD_VAR 0 4
24487: PPUSH
24488: LD_INT 3
24490: PPUSH
24491: CALL 69783 0 2
24495: ST_TO_ADDR
// for j in tmp do
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_VAR 0 4
24505: PUSH
24506: FOR_IN
24507: IFFALSE 24550
// begin if IsInUnit ( j ) then
24509: LD_VAR 0 2
24513: PPUSH
24514: CALL_OW 310
24518: IFFALSE 24529
// ComExit ( j ) ;
24520: LD_VAR 0 2
24524: PPUSH
24525: CALL 69866 0 1
// AddComCollect ( j , x , y ) ;
24529: LD_VAR 0 2
24533: PPUSH
24534: LD_VAR 0 6
24538: PPUSH
24539: LD_VAR 0 7
24543: PPUSH
24544: CALL_OW 177
// end ;
24548: GO 24506
24550: POP
24551: POP
// exit ;
24552: POP
24553: POP
24554: GO 24791
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24556: LD_ADDR_VAR 0 4
24560: PUSH
24561: LD_INT 22
24563: PUSH
24564: LD_VAR 0 5
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 91
24575: PUSH
24576: LD_VAR 0 8
24580: PUSH
24581: LD_INT 8
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 34
24594: PUSH
24595: LD_INT 12
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 34
24604: PUSH
24605: LD_INT 51
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 34
24614: PUSH
24615: LD_INT 32
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 34
24624: PUSH
24625: LD_INT 89
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// if tmp then
24649: LD_VAR 0 4
24653: IFFALSE 24787
// begin for j in tmp do
24655: LD_ADDR_VAR 0 2
24659: PUSH
24660: LD_VAR 0 4
24664: PUSH
24665: FOR_IN
24666: IFFALSE 24785
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24668: LD_VAR 0 2
24672: PPUSH
24673: CALL_OW 262
24677: PUSH
24678: LD_INT 3
24680: EQUAL
24681: IFTRUE 24698
24683: PUSH
24684: LD_VAR 0 2
24688: PPUSH
24689: CALL_OW 261
24693: PUSH
24694: LD_INT 20
24696: GREATER
24697: OR
24698: IFFALSE 24712
24700: PUSH
24701: LD_VAR 0 2
24705: PPUSH
24706: CALL_OW 314
24710: NOT
24711: AND
24712: IFFALSE 24742
24714: PUSH
24715: LD_VAR 0 2
24719: PPUSH
24720: CALL_OW 263
24724: PUSH
24725: LD_INT 1
24727: NONEQUAL
24728: IFTRUE 24741
24730: PUSH
24731: LD_VAR 0 2
24735: PPUSH
24736: CALL_OW 311
24740: OR
24741: AND
24742: IFFALSE 24783
// begin ComCollect ( j , x , y ) ;
24744: LD_VAR 0 2
24748: PPUSH
24749: LD_VAR 0 6
24753: PPUSH
24754: LD_VAR 0 7
24758: PPUSH
24759: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_VAR 0 8
24772: PPUSH
24773: CALL_OW 172
// exit ;
24777: POP
24778: POP
24779: POP
24780: POP
24781: GO 24791
// end ;
24783: GO 24665
24785: POP
24786: POP
// end ; end ;
24787: GO 24152
24789: POP
24790: POP
// end ; end_of_file
24791: PPOPN 9
24793: END
// export function SOS_UnitDestroyed ( un ) ; begin
24794: LD_INT 0
24796: PPUSH
// ComRadiation ( un ) ;
24797: LD_VAR 0 1
24801: PPUSH
24802: CALL 25964 0 1
// end ;
24806: LD_VAR 0 2
24810: RET
// export function SOS_UnitKamikazed ( un ) ; begin
24811: LD_INT 0
24813: PPUSH
// ComRadiation ( un ) ;
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL 25964 0 1
// end ;
24823: LD_VAR 0 2
24827: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24828: LD_INT 0
24830: PPUSH
// end ;
24831: LD_VAR 0 4
24835: RET
// export function SOS_Command ( cmd ) ; begin
24836: LD_INT 0
24838: PPUSH
// end ;
24839: LD_VAR 0 2
24843: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24844: LD_INT 0
24846: PPUSH
// end ;
24847: LD_VAR 0 6
24851: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
// if not vehicle or not factory then
24859: LD_VAR 0 1
24863: NOT
24864: IFTRUE 24873
24866: PUSH
24867: LD_VAR 0 2
24871: NOT
24872: OR
24873: IFFALSE 24877
// exit ;
24875: GO 25539
// weapon := GetWeapon ( vehicle ) ;
24877: LD_ADDR_VAR 0 7
24881: PUSH
24882: LD_VAR 0 1
24886: PPUSH
24887: CALL_OW 264
24891: ST_TO_ADDR
// if weapon = ar_miner then
24892: LD_VAR 0 7
24896: PUSH
24897: LD_INT 81
24899: EQUAL
24900: IFFALSE 24957
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
24902: LD_ADDR_EXP 122
24906: PUSH
24907: LD_EXP 122
24911: PPUSH
24912: LD_EXP 122
24916: PUSH
24917: LD_INT 1
24919: PLUS
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL_OW 1
24930: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24931: LD_ADDR_EXP 123
24935: PUSH
24936: LD_EXP 123
24940: PPUSH
24941: LD_EXP 123
24945: PUSH
24946: LD_INT 1
24948: PLUS
24949: PPUSH
24950: EMPTY
24951: PPUSH
24952: CALL_OW 1
24956: ST_TO_ADDR
// end ; if not factoryWaypoints then
24957: LD_EXP 111
24961: NOT
24962: IFFALSE 24966
// exit ;
24964: GO 25539
// for i := 1 to Count ( factoryWaypoints ) do
24966: LD_ADDR_VAR 0 4
24970: PUSH
24971: DOUBLE
24972: LD_INT 1
24974: DEC
24975: ST_TO_ADDR
24976: LD_EXP 111
24980: PPUSH
24981: CALL 33492 0 1
24985: PUSH
24986: FOR_TO
24987: IFFALSE 25537
// if factoryWaypoints [ i ] [ 2 ] = factory then
24989: LD_EXP 111
24993: PUSH
24994: LD_VAR 0 4
24998: ARRAY
24999: PUSH
25000: LD_INT 2
25002: ARRAY
25003: PUSH
25004: LD_VAR 0 2
25008: EQUAL
25009: IFFALSE 25535
// begin if GetControl ( vehicle ) = control_manual then
25011: LD_VAR 0 1
25015: PPUSH
25016: CALL_OW 263
25020: PUSH
25021: LD_INT 1
25023: EQUAL
25024: IFFALSE 25388
// begin driver := IsDrivenBy ( vehicle ) ;
25026: LD_ADDR_VAR 0 5
25030: PUSH
25031: LD_VAR 0 1
25035: PPUSH
25036: CALL_OW 311
25040: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
25041: LD_VAR 0 5
25045: PUSH
25046: LD_EXP 112
25050: IN
25051: IFTRUE 25065
25053: PUSH
25054: LD_VAR 0 1
25058: PUSH
25059: LD_EXP 112
25063: IN
25064: OR
25065: IFFALSE 25071
// exit ;
25067: POP
25068: POP
25069: GO 25539
// if not HasTask ( driver ) then
25071: LD_VAR 0 5
25075: PPUSH
25076: CALL_OW 314
25080: NOT
25081: IFFALSE 25386
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25083: LD_ADDR_EXP 112
25087: PUSH
25088: LD_EXP 112
25092: PPUSH
25093: LD_VAR 0 5
25097: PPUSH
25098: CALL 69468 0 2
25102: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25103: LD_ADDR_EXP 112
25107: PUSH
25108: LD_EXP 112
25112: PPUSH
25113: LD_VAR 0 1
25117: PPUSH
25118: CALL 69468 0 2
25122: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25123: LD_ADDR_VAR 0 6
25127: PUSH
25128: LD_EXP 111
25132: PUSH
25133: LD_VAR 0 4
25137: ARRAY
25138: PUSH
25139: LD_INT 3
25141: ARRAY
25142: PPUSH
25143: LD_EXP 111
25147: PUSH
25148: LD_VAR 0 4
25152: ARRAY
25153: PUSH
25154: LD_INT 4
25156: ARRAY
25157: PPUSH
25158: CALL_OW 428
25162: ST_TO_ADDR
// if hex then
25163: LD_VAR 0 6
25167: IFFALSE 25185
// ComMoveUnit ( driver , hex ) else
25169: LD_VAR 0 5
25173: PPUSH
25174: LD_VAR 0 6
25178: PPUSH
25179: CALL_OW 112
25183: GO 25269
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25185: LD_VAR 0 1
25189: PPUSH
25190: LD_EXP 111
25194: PUSH
25195: LD_VAR 0 4
25199: ARRAY
25200: PUSH
25201: LD_INT 3
25203: ARRAY
25204: PPUSH
25205: LD_EXP 111
25209: PUSH
25210: LD_VAR 0 4
25214: ARRAY
25215: PUSH
25216: LD_INT 4
25218: ARRAY
25219: PPUSH
25220: CALL_OW 297
25224: PUSH
25225: LD_INT 0
25227: GREATER
25228: IFFALSE 25269
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25230: LD_VAR 0 5
25234: PPUSH
25235: LD_EXP 111
25239: PUSH
25240: LD_VAR 0 4
25244: ARRAY
25245: PUSH
25246: LD_INT 3
25248: ARRAY
25249: PPUSH
25250: LD_EXP 111
25254: PUSH
25255: LD_VAR 0 4
25259: ARRAY
25260: PUSH
25261: LD_INT 4
25263: ARRAY
25264: PPUSH
25265: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25269: LD_VAR 0 5
25273: PPUSH
25274: CALL_OW 181
// if Multiplayer then
25278: LD_OWVAR 4
25282: IFFALSE 25331
// begin repeat wait ( 10 ) ;
25284: LD_INT 10
25286: PPUSH
25287: CALL_OW 67
// until not IsInUnit ( driver ) ;
25291: LD_VAR 0 5
25295: PPUSH
25296: CALL_OW 310
25300: NOT
25301: IFFALSE 25284
// if not HasTask ( driver ) then
25303: LD_VAR 0 5
25307: PPUSH
25308: CALL_OW 314
25312: NOT
25313: IFFALSE 25329
// ComEnterUnit ( driver , factory ) ;
25315: LD_VAR 0 5
25319: PPUSH
25320: LD_VAR 0 2
25324: PPUSH
25325: CALL_OW 120
// end else
25329: GO 25345
// AddComEnterUnit ( driver , factory ) ;
25331: LD_VAR 0 5
25335: PPUSH
25336: LD_VAR 0 2
25340: PPUSH
25341: CALL_OW 180
// wait ( 0 0$1 ) ;
25345: LD_INT 35
25347: PPUSH
25348: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
25352: LD_ADDR_EXP 112
25356: PUSH
25357: LD_EXP 112
25361: PUSH
25362: LD_VAR 0 5
25366: DIFF
25367: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
25368: LD_ADDR_EXP 112
25372: PUSH
25373: LD_EXP 112
25377: PUSH
25378: LD_VAR 0 1
25382: DIFF
25383: ST_TO_ADDR
// break ;
25384: GO 25537
// end ; end else
25386: GO 25535
// if GetControl ( vehicle ) = control_remote then
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 263
25397: PUSH
25398: LD_INT 2
25400: EQUAL
25401: IFFALSE 25487
// begin wait ( 0 0$2 ) ;
25403: LD_INT 70
25405: PPUSH
25406: CALL_OW 67
// repeat wait ( 10 ) ;
25410: LD_INT 10
25412: PPUSH
25413: CALL_OW 67
// Connect ( vehicle ) ;
25417: LD_VAR 0 1
25421: PPUSH
25422: CALL 39770 0 1
// until IsControledBy ( vehicle ) ;
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 312
25435: IFFALSE 25410
// wait ( 10 ) ;
25437: LD_INT 10
25439: PPUSH
25440: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25444: LD_VAR 0 1
25448: PPUSH
25449: LD_EXP 111
25453: PUSH
25454: LD_VAR 0 4
25458: ARRAY
25459: PUSH
25460: LD_INT 3
25462: ARRAY
25463: PPUSH
25464: LD_EXP 111
25468: PUSH
25469: LD_VAR 0 4
25473: ARRAY
25474: PUSH
25475: LD_INT 4
25477: ARRAY
25478: PPUSH
25479: CALL_OW 111
// break ;
25483: GO 25537
// end else
25485: GO 25535
// begin wait ( 0 0$3 ) ;
25487: LD_INT 105
25489: PPUSH
25490: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25494: LD_VAR 0 1
25498: PPUSH
25499: LD_EXP 111
25503: PUSH
25504: LD_VAR 0 4
25508: ARRAY
25509: PUSH
25510: LD_INT 3
25512: ARRAY
25513: PPUSH
25514: LD_EXP 111
25518: PUSH
25519: LD_VAR 0 4
25523: ARRAY
25524: PUSH
25525: LD_INT 4
25527: ARRAY
25528: PPUSH
25529: CALL_OW 111
// break ;
25533: GO 25537
// end ; end ;
25535: GO 24986
25537: POP
25538: POP
// end ;
25539: LD_VAR 0 3
25543: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25544: LD_INT 0
25546: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25547: LD_VAR 0 1
25551: PUSH
25552: LD_INT 250
25554: EQUAL
25555: IFFALSE 25572
25557: PUSH
25558: LD_VAR 0 2
25562: PPUSH
25563: CALL_OW 264
25567: PUSH
25568: LD_INT 81
25570: EQUAL
25571: AND
25572: IFFALSE 25593
// MinerPlaceMine ( unit , x , y ) ;
25574: LD_VAR 0 2
25578: PPUSH
25579: LD_VAR 0 4
25583: PPUSH
25584: LD_VAR 0 5
25588: PPUSH
25589: CALL 28939 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25593: LD_VAR 0 1
25597: PUSH
25598: LD_INT 251
25600: EQUAL
25601: IFFALSE 25618
25603: PUSH
25604: LD_VAR 0 2
25608: PPUSH
25609: CALL_OW 264
25613: PUSH
25614: LD_INT 81
25616: EQUAL
25617: AND
25618: IFFALSE 25639
// MinerDetonateMine ( unit , x , y ) ;
25620: LD_VAR 0 2
25624: PPUSH
25625: LD_VAR 0 4
25629: PPUSH
25630: LD_VAR 0 5
25634: PPUSH
25635: CALL 29346 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25639: LD_VAR 0 1
25643: PUSH
25644: LD_INT 252
25646: EQUAL
25647: IFFALSE 25664
25649: PUSH
25650: LD_VAR 0 2
25654: PPUSH
25655: CALL_OW 264
25659: PUSH
25660: LD_INT 81
25662: EQUAL
25663: AND
25664: IFFALSE 25685
// MinerCreateMinefield ( unit , x , y ) ;
25666: LD_VAR 0 2
25670: PPUSH
25671: LD_VAR 0 4
25675: PPUSH
25676: LD_VAR 0 5
25680: PPUSH
25681: CALL 29578 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25685: LD_VAR 0 1
25689: PUSH
25690: LD_INT 253
25692: EQUAL
25693: IFFALSE 25710
25695: PUSH
25696: LD_VAR 0 2
25700: PPUSH
25701: CALL_OW 257
25705: PUSH
25706: LD_INT 5
25708: EQUAL
25709: AND
25710: IFFALSE 25731
// ComBinocular ( unit , x , y ) ;
25712: LD_VAR 0 2
25716: PPUSH
25717: LD_VAR 0 4
25721: PPUSH
25722: LD_VAR 0 5
25726: PPUSH
25727: CALL 29953 0 3
// if selectedUnit then
25731: LD_VAR 0 3
25735: IFFALSE 25795
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25737: LD_VAR 0 1
25741: PUSH
25742: LD_INT 254
25744: EQUAL
25745: IFFALSE 25762
25747: PUSH
25748: LD_VAR 0 2
25752: PPUSH
25753: CALL_OW 264
25757: PUSH
25758: LD_INT 99
25760: EQUAL
25761: AND
25762: IFFALSE 25779
25764: PUSH
25765: LD_VAR 0 3
25769: PPUSH
25770: CALL_OW 263
25774: PUSH
25775: LD_INT 3
25777: EQUAL
25778: AND
25779: IFFALSE 25795
// HackDestroyVehicle ( unit , selectedUnit ) ;
25781: LD_VAR 0 2
25785: PPUSH
25786: LD_VAR 0 3
25790: PPUSH
25791: CALL 28129 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25795: LD_VAR 0 1
25799: PUSH
25800: LD_INT 255
25802: EQUAL
25803: IFFALSE 25827
25805: PUSH
25806: LD_VAR 0 2
25810: PPUSH
25811: CALL_OW 264
25815: PUSH
25816: LD_INT 14
25818: PUSH
25819: LD_INT 53
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: IN
25826: AND
25827: IFFALSE 25845
25829: PUSH
25830: LD_VAR 0 4
25834: PPUSH
25835: LD_VAR 0 5
25839: PPUSH
25840: CALL_OW 488
25844: AND
25845: IFFALSE 25869
// CutTreeXYR ( unit , x , y , 12 ) ;
25847: LD_VAR 0 2
25851: PPUSH
25852: LD_VAR 0 4
25856: PPUSH
25857: LD_VAR 0 5
25861: PPUSH
25862: LD_INT 12
25864: PPUSH
25865: CALL 26060 0 4
// if cmd = 256 then
25869: LD_VAR 0 1
25873: PUSH
25874: LD_INT 256
25876: EQUAL
25877: IFFALSE 25898
// SetFactoryWaypoint ( unit , x , y ) ;
25879: LD_VAR 0 2
25883: PPUSH
25884: LD_VAR 0 4
25888: PPUSH
25889: LD_VAR 0 5
25893: PPUSH
25894: CALL 23339 0 3
// if cmd = 257 then
25898: LD_VAR 0 1
25902: PUSH
25903: LD_INT 257
25905: EQUAL
25906: IFFALSE 25927
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25908: LD_VAR 0 2
25912: PPUSH
25913: LD_VAR 0 4
25917: PPUSH
25918: LD_VAR 0 5
25922: PPUSH
25923: CALL 23835 0 3
// if cmd = 258 then
25927: LD_VAR 0 1
25931: PUSH
25932: LD_INT 258
25934: EQUAL
25935: IFFALSE 25959
// BurnTreeXYR ( unit , x , y , 8 ) ;
25937: LD_VAR 0 2
25941: PPUSH
25942: LD_VAR 0 4
25946: PPUSH
25947: LD_VAR 0 5
25951: PPUSH
25952: LD_INT 8
25954: PPUSH
25955: CALL 26482 0 4
// end ;
25959: LD_VAR 0 6
25963: RET
// export function ComRadiation ( un ) ; var eff ; begin
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 264
25977: PUSH
25978: LD_INT 91
25980: NONEQUAL
25981: IFFALSE 25985
// exit ;
25983: GO 26055
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25985: LD_INT 68
25987: PPUSH
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 255
25997: PPUSH
25998: CALL_OW 321
26002: PUSH
26003: LD_INT 2
26005: EQUAL
26006: IFFALSE 26018
// eff := 50 else
26008: LD_ADDR_VAR 0 3
26012: PUSH
26013: LD_INT 50
26015: ST_TO_ADDR
26016: GO 26026
// eff := 25 ;
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: LD_INT 25
26025: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 250
26035: PPUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 251
26045: PPUSH
26046: LD_VAR 0 3
26050: PPUSH
26051: CALL_OW 495
// end ;
26055: LD_VAR 0 2
26059: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26060: LD_INT 0
26062: PPUSH
26063: PPUSH
26064: PPUSH
26065: PPUSH
26066: PPUSH
26067: PPUSH
26068: PPUSH
26069: PPUSH
26070: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 302
26080: NOT
26081: IFTRUE 26100
26083: PUSH
26084: LD_VAR 0 2
26088: PPUSH
26089: LD_VAR 0 3
26093: PPUSH
26094: CALL_OW 488
26098: NOT
26099: OR
26100: IFTRUE 26109
26102: PUSH
26103: LD_VAR 0 4
26107: NOT
26108: OR
26109: IFFALSE 26113
// exit ;
26111: GO 26477
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 437
26122: PPUSH
26123: CALL 33492 0 1
26127: PUSH
26128: LD_INT 10
26130: GREATER
26131: IFFALSE 26135
// exit ;
26133: GO 26477
// list := [ ] ;
26135: LD_ADDR_VAR 0 13
26139: PUSH
26140: EMPTY
26141: ST_TO_ADDR
// if x - r < 0 then
26142: LD_VAR 0 2
26146: PUSH
26147: LD_VAR 0 4
26151: MINUS
26152: PUSH
26153: LD_INT 0
26155: LESS
26156: IFFALSE 26168
// min_x := 0 else
26158: LD_ADDR_VAR 0 7
26162: PUSH
26163: LD_INT 0
26165: ST_TO_ADDR
26166: GO 26184
// min_x := x - r ;
26168: LD_ADDR_VAR 0 7
26172: PUSH
26173: LD_VAR 0 2
26177: PUSH
26178: LD_VAR 0 4
26182: MINUS
26183: ST_TO_ADDR
// if y - r < 0 then
26184: LD_VAR 0 3
26188: PUSH
26189: LD_VAR 0 4
26193: MINUS
26194: PUSH
26195: LD_INT 0
26197: LESS
26198: IFFALSE 26210
// min_y := 0 else
26200: LD_ADDR_VAR 0 8
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
26208: GO 26226
// min_y := y - r ;
26210: LD_ADDR_VAR 0 8
26214: PUSH
26215: LD_VAR 0 3
26219: PUSH
26220: LD_VAR 0 4
26224: MINUS
26225: ST_TO_ADDR
// max_x := x + r ;
26226: LD_ADDR_VAR 0 9
26230: PUSH
26231: LD_VAR 0 2
26235: PUSH
26236: LD_VAR 0 4
26240: PLUS
26241: ST_TO_ADDR
// max_y := y + r ;
26242: LD_ADDR_VAR 0 10
26246: PUSH
26247: LD_VAR 0 3
26251: PUSH
26252: LD_VAR 0 4
26256: PLUS
26257: ST_TO_ADDR
// for _x = min_x to max_x do
26258: LD_ADDR_VAR 0 11
26262: PUSH
26263: DOUBLE
26264: LD_VAR 0 7
26268: DEC
26269: ST_TO_ADDR
26270: LD_VAR 0 9
26274: PUSH
26275: FOR_TO
26276: IFFALSE 26395
// for _y = min_y to max_y do
26278: LD_ADDR_VAR 0 12
26282: PUSH
26283: DOUBLE
26284: LD_VAR 0 8
26288: DEC
26289: ST_TO_ADDR
26290: LD_VAR 0 10
26294: PUSH
26295: FOR_TO
26296: IFFALSE 26391
// begin if not ValidHex ( _x , _y ) then
26298: LD_VAR 0 11
26302: PPUSH
26303: LD_VAR 0 12
26307: PPUSH
26308: CALL_OW 488
26312: NOT
26313: IFFALSE 26317
// continue ;
26315: GO 26295
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26317: LD_VAR 0 11
26321: PPUSH
26322: LD_VAR 0 12
26326: PPUSH
26327: CALL_OW 351
26331: IFFALSE 26349
26333: PUSH
26334: LD_VAR 0 11
26338: PPUSH
26339: LD_VAR 0 12
26343: PPUSH
26344: CALL_OW 554
26348: AND
26349: IFFALSE 26389
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26351: LD_ADDR_VAR 0 13
26355: PUSH
26356: LD_VAR 0 13
26360: PPUSH
26361: LD_VAR 0 13
26365: PUSH
26366: LD_INT 1
26368: PLUS
26369: PPUSH
26370: LD_VAR 0 11
26374: PUSH
26375: LD_VAR 0 12
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 2
26388: ST_TO_ADDR
// end ;
26389: GO 26295
26391: POP
26392: POP
26393: GO 26275
26395: POP
26396: POP
// if not list then
26397: LD_VAR 0 13
26401: NOT
26402: IFFALSE 26406
// exit ;
26404: GO 26477
// for i in list do
26406: LD_ADDR_VAR 0 6
26410: PUSH
26411: LD_VAR 0 13
26415: PUSH
26416: FOR_IN
26417: IFFALSE 26475
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26419: LD_VAR 0 1
26423: PPUSH
26424: LD_STRING M
26426: PUSH
26427: LD_VAR 0 6
26431: PUSH
26432: LD_INT 1
26434: ARRAY
26435: PUSH
26436: LD_VAR 0 6
26440: PUSH
26441: LD_INT 2
26443: ARRAY
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: PPUSH
26469: CALL_OW 447
26473: GO 26416
26475: POP
26476: POP
// end ;
26477: LD_VAR 0 5
26481: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26482: LD_INT 0
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
26493: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 302
26503: NOT
26504: IFTRUE 26523
26506: PUSH
26507: LD_VAR 0 2
26511: PPUSH
26512: LD_VAR 0 3
26516: PPUSH
26517: CALL_OW 488
26521: NOT
26522: OR
26523: IFTRUE 26532
26525: PUSH
26526: LD_VAR 0 4
26530: NOT
26531: OR
26532: IFFALSE 26536
// exit ;
26534: GO 27075
// if Count ( GetTaskList ( flame ) ) > 10 then
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 437
26545: PPUSH
26546: CALL 33492 0 1
26550: PUSH
26551: LD_INT 10
26553: GREATER
26554: IFFALSE 26558
// exit ;
26556: GO 27075
// list := [ ] ;
26558: LD_ADDR_VAR 0 13
26562: PUSH
26563: EMPTY
26564: ST_TO_ADDR
// if x - r < 0 then
26565: LD_VAR 0 2
26569: PUSH
26570: LD_VAR 0 4
26574: MINUS
26575: PUSH
26576: LD_INT 0
26578: LESS
26579: IFFALSE 26591
// min_x := 0 else
26581: LD_ADDR_VAR 0 7
26585: PUSH
26586: LD_INT 0
26588: ST_TO_ADDR
26589: GO 26607
// min_x := x - r ;
26591: LD_ADDR_VAR 0 7
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: LD_VAR 0 4
26605: MINUS
26606: ST_TO_ADDR
// if y - r < 0 then
26607: LD_VAR 0 3
26611: PUSH
26612: LD_VAR 0 4
26616: MINUS
26617: PUSH
26618: LD_INT 0
26620: LESS
26621: IFFALSE 26633
// min_y := 0 else
26623: LD_ADDR_VAR 0 8
26627: PUSH
26628: LD_INT 0
26630: ST_TO_ADDR
26631: GO 26649
// min_y := y - r ;
26633: LD_ADDR_VAR 0 8
26637: PUSH
26638: LD_VAR 0 3
26642: PUSH
26643: LD_VAR 0 4
26647: MINUS
26648: ST_TO_ADDR
// max_x := x + r ;
26649: LD_ADDR_VAR 0 9
26653: PUSH
26654: LD_VAR 0 2
26658: PUSH
26659: LD_VAR 0 4
26663: PLUS
26664: ST_TO_ADDR
// max_y := y + r ;
26665: LD_ADDR_VAR 0 10
26669: PUSH
26670: LD_VAR 0 3
26674: PUSH
26675: LD_VAR 0 4
26679: PLUS
26680: ST_TO_ADDR
// for _x = min_x to max_x do
26681: LD_ADDR_VAR 0 11
26685: PUSH
26686: DOUBLE
26687: LD_VAR 0 7
26691: DEC
26692: ST_TO_ADDR
26693: LD_VAR 0 9
26697: PUSH
26698: FOR_TO
26699: IFFALSE 26818
// for _y = min_y to max_y do
26701: LD_ADDR_VAR 0 12
26705: PUSH
26706: DOUBLE
26707: LD_VAR 0 8
26711: DEC
26712: ST_TO_ADDR
26713: LD_VAR 0 10
26717: PUSH
26718: FOR_TO
26719: IFFALSE 26814
// begin if not ValidHex ( _x , _y ) then
26721: LD_VAR 0 11
26725: PPUSH
26726: LD_VAR 0 12
26730: PPUSH
26731: CALL_OW 488
26735: NOT
26736: IFFALSE 26740
// continue ;
26738: GO 26718
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26740: LD_VAR 0 11
26744: PPUSH
26745: LD_VAR 0 12
26749: PPUSH
26750: CALL_OW 351
26754: IFFALSE 26772
26756: PUSH
26757: LD_VAR 0 11
26761: PPUSH
26762: LD_VAR 0 12
26766: PPUSH
26767: CALL_OW 554
26771: AND
26772: IFFALSE 26812
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26774: LD_ADDR_VAR 0 13
26778: PUSH
26779: LD_VAR 0 13
26783: PPUSH
26784: LD_VAR 0 13
26788: PUSH
26789: LD_INT 1
26791: PLUS
26792: PPUSH
26793: LD_VAR 0 11
26797: PUSH
26798: LD_VAR 0 12
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PPUSH
26807: CALL_OW 2
26811: ST_TO_ADDR
// end ;
26812: GO 26718
26814: POP
26815: POP
26816: GO 26698
26818: POP
26819: POP
// if not list then
26820: LD_VAR 0 13
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 27075
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26829: LD_ADDR_VAR 0 13
26833: PUSH
26834: LD_VAR 0 1
26838: PPUSH
26839: LD_VAR 0 13
26843: PPUSH
26844: LD_INT 1
26846: PPUSH
26847: LD_INT 1
26849: PPUSH
26850: CALL 36898 0 4
26854: ST_TO_ADDR
// ComStop ( flame ) ;
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 141
// for i in list do
26864: LD_ADDR_VAR 0 6
26868: PUSH
26869: LD_VAR 0 13
26873: PUSH
26874: FOR_IN
26875: IFFALSE 26906
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26877: LD_VAR 0 1
26881: PPUSH
26882: LD_VAR 0 6
26886: PUSH
26887: LD_INT 1
26889: ARRAY
26890: PPUSH
26891: LD_VAR 0 6
26895: PUSH
26896: LD_INT 2
26898: ARRAY
26899: PPUSH
26900: CALL_OW 176
26904: GO 26874
26906: POP
26907: POP
// repeat wait ( 0 0$1 ) ;
26908: LD_INT 35
26910: PPUSH
26911: CALL_OW 67
// task := GetTaskList ( flame ) ;
26915: LD_ADDR_VAR 0 14
26919: PUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 437
26929: ST_TO_ADDR
// if not task then
26930: LD_VAR 0 14
26934: NOT
26935: IFFALSE 26939
// exit ;
26937: GO 27075
// if task [ 1 ] [ 1 ] <> | then
26939: LD_VAR 0 14
26943: PUSH
26944: LD_INT 1
26946: ARRAY
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: PUSH
26952: LD_STRING |
26954: NONEQUAL
26955: IFFALSE 26959
// exit ;
26957: GO 27075
// _x := task [ 1 ] [ 2 ] ;
26959: LD_ADDR_VAR 0 11
26963: PUSH
26964: LD_VAR 0 14
26968: PUSH
26969: LD_INT 1
26971: ARRAY
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26977: LD_ADDR_VAR 0 12
26981: PUSH
26982: LD_VAR 0 14
26986: PUSH
26987: LD_INT 1
26989: ARRAY
26990: PUSH
26991: LD_INT 3
26993: ARRAY
26994: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26995: LD_VAR 0 11
26999: PPUSH
27000: LD_VAR 0 12
27004: PPUSH
27005: CALL_OW 351
27009: NOT
27010: IFTRUE 27029
27012: PUSH
27013: LD_VAR 0 11
27017: PPUSH
27018: LD_VAR 0 12
27022: PPUSH
27023: CALL_OW 554
27027: NOT
27028: OR
27029: IFFALSE 27063
// begin task := Delete ( task , 1 ) ;
27031: LD_ADDR_VAR 0 14
27035: PUSH
27036: LD_VAR 0 14
27040: PPUSH
27041: LD_INT 1
27043: PPUSH
27044: CALL_OW 3
27048: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
27049: LD_VAR 0 1
27053: PPUSH
27054: LD_VAR 0 14
27058: PPUSH
27059: CALL_OW 446
// end ; until not HasTask ( flame ) ;
27063: LD_VAR 0 1
27067: PPUSH
27068: CALL_OW 314
27072: NOT
27073: IFFALSE 26908
// end ;
27075: LD_VAR 0 5
27079: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27080: LD_EXP 115
27084: NOT
27085: IFFALSE 27135
27087: GO 27089
27089: DISABLE
// begin initHack := true ;
27090: LD_ADDR_EXP 115
27094: PUSH
27095: LD_INT 1
27097: ST_TO_ADDR
// hackTanks := [ ] ;
27098: LD_ADDR_EXP 116
27102: PUSH
27103: EMPTY
27104: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27105: LD_ADDR_EXP 117
27109: PUSH
27110: EMPTY
27111: ST_TO_ADDR
// hackLimit := 3 ;
27112: LD_ADDR_EXP 118
27116: PUSH
27117: LD_INT 3
27119: ST_TO_ADDR
// hackDist := 12 ;
27120: LD_ADDR_EXP 119
27124: PUSH
27125: LD_INT 12
27127: ST_TO_ADDR
// hackCounter := [ ] ;
27128: LD_ADDR_EXP 120
27132: PUSH
27133: EMPTY
27134: ST_TO_ADDR
// end ;
27135: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27136: LD_EXP 115
27140: IFFALSE 27158
27142: PUSH
27143: LD_INT 34
27145: PUSH
27146: LD_INT 99
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PPUSH
27153: CALL_OW 69
27157: AND
27158: IFFALSE 27411
27160: GO 27162
27162: DISABLE
27163: LD_INT 0
27165: PPUSH
27166: PPUSH
// begin enable ;
27167: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27168: LD_ADDR_VAR 0 1
27172: PUSH
27173: LD_INT 34
27175: PUSH
27176: LD_INT 99
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PPUSH
27183: CALL_OW 69
27187: PUSH
27188: FOR_IN
27189: IFFALSE 27409
// begin if not i in hackTanks then
27191: LD_VAR 0 1
27195: PUSH
27196: LD_EXP 116
27200: IN
27201: NOT
27202: IFFALSE 27285
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27204: LD_ADDR_EXP 116
27208: PUSH
27209: LD_EXP 116
27213: PPUSH
27214: LD_EXP 116
27218: PUSH
27219: LD_INT 1
27221: PLUS
27222: PPUSH
27223: LD_VAR 0 1
27227: PPUSH
27228: CALL_OW 1
27232: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27233: LD_ADDR_EXP 117
27237: PUSH
27238: LD_EXP 117
27242: PPUSH
27243: LD_EXP 117
27247: PUSH
27248: LD_INT 1
27250: PLUS
27251: PPUSH
27252: EMPTY
27253: PPUSH
27254: CALL_OW 1
27258: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27259: LD_ADDR_EXP 120
27263: PUSH
27264: LD_EXP 120
27268: PPUSH
27269: LD_EXP 120
27273: PUSH
27274: LD_INT 1
27276: PLUS
27277: PPUSH
27278: EMPTY
27279: PPUSH
27280: CALL_OW 1
27284: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 302
27294: NOT
27295: IFFALSE 27308
// begin HackUnlinkAll ( i ) ;
27297: LD_VAR 0 1
27301: PPUSH
27302: CALL 27414 0 1
// continue ;
27306: GO 27188
// end ; HackCheckCapturedStatus ( i ) ;
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL 27859 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_INT 81
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 255
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 33
27341: PUSH
27342: LD_INT 3
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 91
27351: PUSH
27352: LD_VAR 0 1
27356: PUSH
27357: LD_EXP 119
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 50
27369: PUSH
27370: EMPTY
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 69
27383: ST_TO_ADDR
// if not tmp then
27384: LD_VAR 0 2
27388: NOT
27389: IFFALSE 27393
// continue ;
27391: GO 27188
// HackLink ( i , tmp ) ;
27393: LD_VAR 0 1
27397: PPUSH
27398: LD_VAR 0 2
27402: PPUSH
27403: CALL 27550 0 2
// end ;
27407: GO 27188
27409: POP
27410: POP
// end ;
27411: PPOPN 2
27413: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
27418: PPUSH
// if not hack in hackTanks then
27419: LD_VAR 0 1
27423: PUSH
27424: LD_EXP 116
27428: IN
27429: NOT
27430: IFFALSE 27434
// exit ;
27432: GO 27545
// index := GetElementIndex ( hackTanks , hack ) ;
27434: LD_ADDR_VAR 0 4
27438: PUSH
27439: LD_EXP 116
27443: PPUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL 36193 0 2
27453: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27454: LD_EXP 117
27458: PUSH
27459: LD_VAR 0 4
27463: ARRAY
27464: IFFALSE 27545
// begin for i in hackTanksCaptured [ index ] do
27466: LD_ADDR_VAR 0 3
27470: PUSH
27471: LD_EXP 117
27475: PUSH
27476: LD_VAR 0 4
27480: ARRAY
27481: PUSH
27482: FOR_IN
27483: IFFALSE 27509
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27485: LD_VAR 0 3
27489: PUSH
27490: LD_INT 1
27492: ARRAY
27493: PPUSH
27494: LD_VAR 0 3
27498: PUSH
27499: LD_INT 2
27501: ARRAY
27502: PPUSH
27503: CALL_OW 235
27507: GO 27482
27509: POP
27510: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27511: LD_ADDR_EXP 117
27515: PUSH
27516: LD_EXP 117
27520: PPUSH
27521: LD_VAR 0 4
27525: PPUSH
27526: EMPTY
27527: PPUSH
27528: CALL_OW 1
27532: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27533: LD_VAR 0 1
27537: PPUSH
27538: LD_INT 0
27540: PPUSH
27541: CALL_OW 505
// end ; end ;
27545: LD_VAR 0 2
27549: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
// if not hack in hackTanks or not vehicles then
27555: LD_VAR 0 1
27559: PUSH
27560: LD_EXP 116
27564: IN
27565: NOT
27566: IFTRUE 27575
27568: PUSH
27569: LD_VAR 0 2
27573: NOT
27574: OR
27575: IFFALSE 27579
// exit ;
27577: GO 27854
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27579: LD_ADDR_VAR 0 2
27583: PUSH
27584: LD_VAR 0 1
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: LD_INT 1
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL 36845 0 4
27604: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27605: LD_ADDR_VAR 0 5
27609: PUSH
27610: LD_EXP 116
27614: PPUSH
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL 36193 0 2
27624: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27625: LD_EXP 117
27629: PUSH
27630: LD_VAR 0 5
27634: ARRAY
27635: PUSH
27636: LD_EXP 118
27640: LESS
27641: IFFALSE 27830
// begin for i := 1 to vehicles do
27643: LD_ADDR_VAR 0 4
27647: PUSH
27648: DOUBLE
27649: LD_INT 1
27651: DEC
27652: ST_TO_ADDR
27653: LD_VAR 0 2
27657: PUSH
27658: FOR_TO
27659: IFFALSE 27828
// begin if hackTanksCaptured [ index ] = hackLimit then
27661: LD_EXP 117
27665: PUSH
27666: LD_VAR 0 5
27670: ARRAY
27671: PUSH
27672: LD_EXP 118
27676: EQUAL
27677: IFFALSE 27681
// break ;
27679: GO 27828
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27681: LD_ADDR_EXP 120
27685: PUSH
27686: LD_EXP 120
27690: PPUSH
27691: LD_VAR 0 5
27695: PPUSH
27696: LD_EXP 120
27700: PUSH
27701: LD_VAR 0 5
27705: ARRAY
27706: PUSH
27707: LD_INT 1
27709: PLUS
27710: PPUSH
27711: CALL_OW 1
27715: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27716: LD_ADDR_EXP 117
27720: PUSH
27721: LD_EXP 117
27725: PPUSH
27726: LD_VAR 0 5
27730: PUSH
27731: LD_EXP 117
27735: PUSH
27736: LD_VAR 0 5
27740: ARRAY
27741: PUSH
27742: LD_INT 1
27744: PLUS
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PPUSH
27750: LD_VAR 0 2
27754: PUSH
27755: LD_VAR 0 4
27759: ARRAY
27760: PUSH
27761: LD_VAR 0 2
27765: PUSH
27766: LD_VAR 0 4
27770: ARRAY
27771: PPUSH
27772: CALL_OW 255
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PPUSH
27781: CALL 36410 0 3
27785: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27786: LD_VAR 0 2
27790: PUSH
27791: LD_VAR 0 4
27795: ARRAY
27796: PPUSH
27797: LD_VAR 0 1
27801: PPUSH
27802: CALL_OW 255
27806: PPUSH
27807: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27811: LD_VAR 0 2
27815: PUSH
27816: LD_VAR 0 4
27820: ARRAY
27821: PPUSH
27822: CALL_OW 141
// end ;
27826: GO 27658
27828: POP
27829: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27830: LD_VAR 0 1
27834: PPUSH
27835: LD_EXP 117
27839: PUSH
27840: LD_VAR 0 5
27844: ARRAY
27845: PUSH
27846: LD_INT 0
27848: PLUS
27849: PPUSH
27850: CALL_OW 505
// end ;
27854: LD_VAR 0 3
27858: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27859: LD_INT 0
27861: PPUSH
27862: PPUSH
27863: PPUSH
27864: PPUSH
// if not hack in hackTanks then
27865: LD_VAR 0 1
27869: PUSH
27870: LD_EXP 116
27874: IN
27875: NOT
27876: IFFALSE 27880
// exit ;
27878: GO 28124
// index := GetElementIndex ( hackTanks , hack ) ;
27880: LD_ADDR_VAR 0 4
27884: PUSH
27885: LD_EXP 116
27889: PPUSH
27890: LD_VAR 0 1
27894: PPUSH
27895: CALL 36193 0 2
27899: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27900: LD_ADDR_VAR 0 3
27904: PUSH
27905: DOUBLE
27906: LD_EXP 117
27910: PUSH
27911: LD_VAR 0 4
27915: ARRAY
27916: INC
27917: ST_TO_ADDR
27918: LD_INT 1
27920: PUSH
27921: FOR_DOWNTO
27922: IFFALSE 28098
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27924: LD_ADDR_VAR 0 5
27928: PUSH
27929: LD_EXP 117
27933: PUSH
27934: LD_VAR 0 4
27938: ARRAY
27939: PUSH
27940: LD_VAR 0 3
27944: ARRAY
27945: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27946: LD_VAR 0 5
27950: PUSH
27951: LD_INT 1
27953: ARRAY
27954: PPUSH
27955: CALL_OW 302
27959: NOT
27960: IFTRUE 27988
27962: PUSH
27963: LD_VAR 0 5
27967: PUSH
27968: LD_INT 1
27970: ARRAY
27971: PPUSH
27972: CALL_OW 255
27976: PUSH
27977: LD_VAR 0 1
27981: PPUSH
27982: CALL_OW 255
27986: NONEQUAL
27987: OR
27988: IFFALSE 28096
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27990: LD_VAR 0 5
27994: PUSH
27995: LD_INT 1
27997: ARRAY
27998: PPUSH
27999: CALL_OW 305
28003: IFFALSE 28031
28005: PUSH
28006: LD_VAR 0 5
28010: PUSH
28011: LD_INT 1
28013: ARRAY
28014: PPUSH
28015: CALL_OW 255
28019: PUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 255
28029: EQUAL
28030: AND
28031: IFFALSE 28055
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28033: LD_VAR 0 5
28037: PUSH
28038: LD_INT 1
28040: ARRAY
28041: PPUSH
28042: LD_VAR 0 5
28046: PUSH
28047: LD_INT 2
28049: ARRAY
28050: PPUSH
28051: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28055: LD_ADDR_EXP 117
28059: PUSH
28060: LD_EXP 117
28064: PPUSH
28065: LD_VAR 0 4
28069: PPUSH
28070: LD_EXP 117
28074: PUSH
28075: LD_VAR 0 4
28079: ARRAY
28080: PPUSH
28081: LD_VAR 0 3
28085: PPUSH
28086: CALL_OW 3
28090: PPUSH
28091: CALL_OW 1
28095: ST_TO_ADDR
// end ; end ;
28096: GO 27921
28098: POP
28099: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_EXP 117
28109: PUSH
28110: LD_VAR 0 4
28114: ARRAY
28115: PUSH
28116: LD_INT 0
28118: PLUS
28119: PPUSH
28120: CALL_OW 505
// end ;
28124: LD_VAR 0 2
28128: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
// if not hack in hackTanks then
28135: LD_VAR 0 1
28139: PUSH
28140: LD_EXP 116
28144: IN
28145: NOT
28146: IFFALSE 28150
// exit ;
28148: GO 28235
// index := GetElementIndex ( hackTanks , hack ) ;
28150: LD_ADDR_VAR 0 5
28154: PUSH
28155: LD_EXP 116
28159: PPUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL 36193 0 2
28169: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28170: LD_ADDR_VAR 0 4
28174: PUSH
28175: DOUBLE
28176: LD_INT 1
28178: DEC
28179: ST_TO_ADDR
28180: LD_EXP 117
28184: PUSH
28185: LD_VAR 0 5
28189: ARRAY
28190: PUSH
28191: FOR_TO
28192: IFFALSE 28233
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28194: LD_EXP 117
28198: PUSH
28199: LD_VAR 0 5
28203: ARRAY
28204: PUSH
28205: LD_VAR 0 4
28209: ARRAY
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PUSH
28215: LD_VAR 0 2
28219: EQUAL
28220: IFFALSE 28231
// KillUnit ( vehicle ) ;
28222: LD_VAR 0 2
28226: PPUSH
28227: CALL_OW 66
28231: GO 28191
28233: POP
28234: POP
// end ;
28235: LD_VAR 0 3
28239: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
28240: LD_EXP 121
28244: NOT
28245: IFFALSE 28378
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
// begin initMiner := true ;
28253: LD_ADDR_EXP 121
28257: PUSH
28258: LD_INT 1
28260: ST_TO_ADDR
// minersList := [ ] ;
28261: LD_ADDR_EXP 122
28265: PUSH
28266: EMPTY
28267: ST_TO_ADDR
// minerMinesList := [ ] ;
28268: LD_ADDR_EXP 123
28272: PUSH
28273: EMPTY
28274: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
28275: LD_ADDR_EXP 124
28279: PUSH
28280: LD_INT 10
28282: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28283: LD_ADDR_VAR 0 1
28287: PUSH
28288: LD_INT 34
28290: PUSH
28291: LD_INT 81
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PPUSH
28298: CALL_OW 69
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28376
// begin if not i in minersList then
28306: LD_VAR 0 1
28310: PUSH
28311: LD_EXP 122
28315: IN
28316: NOT
28317: IFFALSE 28374
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28319: LD_ADDR_EXP 122
28323: PUSH
28324: LD_EXP 122
28328: PPUSH
28329: LD_EXP 122
28333: PUSH
28334: LD_INT 1
28336: PLUS
28337: PPUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 1
28347: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28348: LD_ADDR_EXP 123
28352: PUSH
28353: LD_EXP 123
28357: PPUSH
28358: LD_EXP 123
28362: PUSH
28363: LD_INT 1
28365: PLUS
28366: PPUSH
28367: EMPTY
28368: PPUSH
28369: CALL_OW 1
28373: ST_TO_ADDR
// end end ;
28374: GO 28303
28376: POP
28377: POP
// end ;
28378: PPOPN 1
28380: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
28381: LD_EXP 121
28385: IFFALSE 28416
28387: PUSH
28388: LD_EXP 123
28392: PPUSH
28393: CALL 33492 0 1
28397: IFTRUE 28415
28399: PUSH
28400: LD_INT 34
28402: PUSH
28403: LD_INT 81
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PPUSH
28410: CALL_OW 69
28414: OR
28415: AND
28416: IFFALSE 28936
28418: GO 28420
28420: DISABLE
28421: LD_INT 0
28423: PPUSH
28424: PPUSH
28425: PPUSH
28426: PPUSH
// begin enable ;
28427: ENABLE
// for i := minerMinesList downto 1 do
28428: LD_ADDR_VAR 0 1
28432: PUSH
28433: DOUBLE
28434: LD_EXP 123
28438: INC
28439: ST_TO_ADDR
28440: LD_INT 1
28442: PUSH
28443: FOR_DOWNTO
28444: IFFALSE 28934
// begin side := GetSide ( minersList [ i ] ) ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_EXP 122
28455: PUSH
28456: LD_VAR 0 1
28460: ARRAY
28461: PPUSH
28462: CALL_OW 255
28466: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
28467: LD_EXP 122
28471: PUSH
28472: LD_VAR 0 1
28476: ARRAY
28477: PPUSH
28478: CALL_OW 300
28482: IFFALSE 28503
28484: PUSH
28485: LD_VAR 0 3
28489: PUSH
28490: LD_OWVAR 2
28494: PUSH
28495: LD_INT 9
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: IN
28502: AND
28503: IFFALSE 28536
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
28505: LD_EXP 122
28509: PUSH
28510: LD_VAR 0 1
28514: ARRAY
28515: PPUSH
28516: LD_EXP 123
28520: PUSH
28521: LD_VAR 0 1
28525: ARRAY
28526: PPUSH
28527: CALL 33492 0 1
28531: PPUSH
28532: CALL_OW 505
// if not minerMinesList [ i ] then
28536: LD_EXP 123
28540: PUSH
28541: LD_VAR 0 1
28545: ARRAY
28546: NOT
28547: IFFALSE 28551
// continue ;
28549: GO 28443
// for j := minerMinesList [ i ] downto 1 do
28551: LD_ADDR_VAR 0 2
28555: PUSH
28556: DOUBLE
28557: LD_EXP 123
28561: PUSH
28562: LD_VAR 0 1
28566: ARRAY
28567: INC
28568: ST_TO_ADDR
28569: LD_INT 1
28571: PUSH
28572: FOR_DOWNTO
28573: IFFALSE 28930
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
28575: LD_EXP 122
28579: PUSH
28580: LD_VAR 0 1
28584: ARRAY
28585: PPUSH
28586: CALL_OW 301
28590: IFTRUE 28610
28592: PUSH
28593: LD_EXP 122
28597: PUSH
28598: LD_VAR 0 1
28602: ARRAY
28603: PPUSH
28604: CALL_OW 305
28608: NOT
28609: OR
28610: IFFALSE 28701
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28612: LD_EXP 123
28616: PUSH
28617: LD_VAR 0 1
28621: ARRAY
28622: PUSH
28623: LD_VAR 0 2
28627: ARRAY
28628: PUSH
28629: LD_INT 1
28631: ARRAY
28632: PPUSH
28633: LD_EXP 123
28637: PUSH
28638: LD_VAR 0 1
28642: ARRAY
28643: PUSH
28644: LD_VAR 0 2
28648: ARRAY
28649: PUSH
28650: LD_INT 2
28652: ARRAY
28653: PPUSH
28654: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28658: LD_ADDR_EXP 123
28662: PUSH
28663: LD_EXP 123
28667: PPUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: LD_EXP 123
28677: PUSH
28678: LD_VAR 0 1
28682: ARRAY
28683: PPUSH
28684: LD_VAR 0 2
28688: PPUSH
28689: CALL_OW 3
28693: PPUSH
28694: CALL_OW 1
28698: ST_TO_ADDR
// continue ;
28699: GO 28572
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28701: LD_ADDR_VAR 0 4
28705: PUSH
28706: LD_EXP 123
28710: PUSH
28711: LD_VAR 0 1
28715: ARRAY
28716: PUSH
28717: LD_VAR 0 2
28721: ARRAY
28722: PUSH
28723: LD_INT 1
28725: ARRAY
28726: PPUSH
28727: LD_EXP 123
28731: PUSH
28732: LD_VAR 0 1
28736: ARRAY
28737: PUSH
28738: LD_VAR 0 2
28742: ARRAY
28743: PUSH
28744: LD_INT 2
28746: ARRAY
28747: PPUSH
28748: CALL_OW 428
28752: ST_TO_ADDR
// if not tmp then
28753: LD_VAR 0 4
28757: NOT
28758: IFFALSE 28762
// continue ;
28760: GO 28572
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28762: LD_VAR 0 4
28766: PUSH
28767: LD_INT 81
28769: PUSH
28770: LD_VAR 0 3
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PPUSH
28779: CALL_OW 69
28783: IN
28784: IFFALSE 28834
28786: PUSH
28787: LD_EXP 123
28791: PUSH
28792: LD_VAR 0 1
28796: ARRAY
28797: PUSH
28798: LD_VAR 0 2
28802: ARRAY
28803: PUSH
28804: LD_INT 1
28806: ARRAY
28807: PPUSH
28808: LD_EXP 123
28812: PUSH
28813: LD_VAR 0 1
28817: ARRAY
28818: PUSH
28819: LD_VAR 0 2
28823: ARRAY
28824: PUSH
28825: LD_INT 2
28827: ARRAY
28828: PPUSH
28829: CALL_OW 458
28833: AND
28834: IFFALSE 28928
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28836: LD_EXP 123
28840: PUSH
28841: LD_VAR 0 1
28845: ARRAY
28846: PUSH
28847: LD_VAR 0 2
28851: ARRAY
28852: PUSH
28853: LD_INT 1
28855: ARRAY
28856: PPUSH
28857: LD_EXP 123
28861: PUSH
28862: LD_VAR 0 1
28866: ARRAY
28867: PUSH
28868: LD_VAR 0 2
28872: ARRAY
28873: PUSH
28874: LD_INT 2
28876: ARRAY
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28887: LD_ADDR_EXP 123
28891: PUSH
28892: LD_EXP 123
28896: PPUSH
28897: LD_VAR 0 1
28901: PPUSH
28902: LD_EXP 123
28906: PUSH
28907: LD_VAR 0 1
28911: ARRAY
28912: PPUSH
28913: LD_VAR 0 2
28917: PPUSH
28918: CALL_OW 3
28922: PPUSH
28923: CALL_OW 1
28927: ST_TO_ADDR
// end ; end ;
28928: GO 28572
28930: POP
28931: POP
// end ;
28932: GO 28443
28934: POP
28935: POP
// end ;
28936: PPOPN 4
28938: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
// result := false ;
28945: LD_ADDR_VAR 0 4
28949: PUSH
28950: LD_INT 0
28952: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 264
28962: PUSH
28963: LD_INT 81
28965: EQUAL
28966: NOT
28967: IFFALSE 28971
// exit ;
28969: GO 29341
// side := GetSide ( unit ) ;
28971: LD_ADDR_VAR 0 6
28975: PUSH
28976: LD_VAR 0 1
28980: PPUSH
28981: CALL_OW 255
28985: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
28986: LD_ADDR_VAR 0 5
28990: PUSH
28991: LD_EXP 122
28995: PPUSH
28996: LD_VAR 0 1
29000: PPUSH
29001: CALL 36193 0 2
29005: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29006: LD_EXP 123
29010: PUSH
29011: LD_VAR 0 5
29015: ARRAY
29016: PUSH
29017: LD_EXP 124
29021: GREATEREQUAL
29022: IFFALSE 29026
// exit ;
29024: GO 29341
// ComMoveXY ( unit , x , y ) ;
29026: LD_VAR 0 1
29030: PPUSH
29031: LD_VAR 0 2
29035: PPUSH
29036: LD_VAR 0 3
29040: PPUSH
29041: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29045: LD_INT 35
29047: PPUSH
29048: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29052: LD_VAR 0 1
29056: PPUSH
29057: LD_VAR 0 2
29061: PPUSH
29062: LD_VAR 0 3
29066: PPUSH
29067: CALL 68249 0 3
29071: NOT
29072: IFFALSE 29085
29074: PUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL_OW 314
29084: AND
29085: IFFALSE 29089
// exit ;
29087: GO 29341
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29089: LD_VAR 0 2
29093: PPUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: CALL_OW 428
29103: PUSH
29104: LD_VAR 0 1
29108: EQUAL
29109: IFFALSE 29123
29111: PUSH
29112: LD_VAR 0 1
29116: PPUSH
29117: CALL_OW 314
29121: NOT
29122: AND
29123: IFFALSE 29045
// if MineAtPos ( x , y ) then
29125: LD_VAR 0 2
29129: PPUSH
29130: LD_VAR 0 3
29134: PPUSH
29135: CALL_OW 458
29139: IFFALSE 29143
// exit ;
29141: GO 29341
// if your_side = side then
29143: LD_OWVAR 2
29147: PUSH
29148: LD_VAR 0 6
29152: EQUAL
29153: IFFALSE 29172
// PlaySoundXY ( x , y , PlantMine ) ;
29155: LD_VAR 0 2
29159: PPUSH
29160: LD_VAR 0 3
29164: PPUSH
29165: LD_STRING PlantMine
29167: PPUSH
29168: CALL_OW 366
// repeat wait ( 1 ) ;
29172: LD_INT 1
29174: PPUSH
29175: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
29179: LD_VAR 0 2
29183: PPUSH
29184: LD_VAR 0 3
29188: PPUSH
29189: LD_VAR 0 6
29193: PPUSH
29194: LD_INT 0
29196: PPUSH
29197: CALL_OW 454
29201: IFFALSE 29172
// if MineAtPos ( x , y ) then
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_VAR 0 3
29212: PPUSH
29213: CALL_OW 458
29217: IFFALSE 29333
// begin for i in minerMinesList [ index ] do
29219: LD_ADDR_VAR 0 7
29223: PUSH
29224: LD_EXP 123
29228: PUSH
29229: LD_VAR 0 5
29233: ARRAY
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29278
// if i [ 1 ] = x and i [ 2 ] = y then
29238: LD_VAR 0 7
29242: PUSH
29243: LD_INT 1
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 2
29251: EQUAL
29252: IFFALSE 29270
29254: PUSH
29255: LD_VAR 0 7
29259: PUSH
29260: LD_INT 2
29262: ARRAY
29263: PUSH
29264: LD_VAR 0 3
29268: EQUAL
29269: AND
29270: IFFALSE 29276
// exit ;
29272: POP
29273: POP
29274: GO 29341
29276: GO 29235
29278: POP
29279: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29280: LD_ADDR_EXP 123
29284: PUSH
29285: LD_EXP 123
29289: PPUSH
29290: LD_VAR 0 5
29294: PUSH
29295: LD_EXP 123
29299: PUSH
29300: LD_VAR 0 5
29304: ARRAY
29305: PUSH
29306: LD_INT 1
29308: PLUS
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PPUSH
29314: LD_VAR 0 2
29318: PUSH
29319: LD_VAR 0 3
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL 36410 0 3
29332: ST_TO_ADDR
// end ; result := true ;
29333: LD_ADDR_VAR 0 4
29337: PUSH
29338: LD_INT 1
29340: ST_TO_ADDR
// end ;
29341: LD_VAR 0 4
29345: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29346: LD_INT 0
29348: PPUSH
29349: PPUSH
29350: PPUSH
// if not unit in minersList then
29351: LD_VAR 0 1
29355: PUSH
29356: LD_EXP 122
29360: IN
29361: NOT
29362: IFFALSE 29366
// exit ;
29364: GO 29573
// index := GetElementIndex ( minersList , unit ) ;
29366: LD_ADDR_VAR 0 6
29370: PUSH
29371: LD_EXP 122
29375: PPUSH
29376: LD_VAR 0 1
29380: PPUSH
29381: CALL 36193 0 2
29385: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: DOUBLE
29392: LD_EXP 123
29396: PUSH
29397: LD_VAR 0 6
29401: ARRAY
29402: INC
29403: ST_TO_ADDR
29404: LD_INT 1
29406: PUSH
29407: FOR_DOWNTO
29408: IFFALSE 29571
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29410: LD_EXP 123
29414: PUSH
29415: LD_VAR 0 6
29419: ARRAY
29420: PUSH
29421: LD_VAR 0 5
29425: ARRAY
29426: PUSH
29427: LD_INT 1
29429: ARRAY
29430: PPUSH
29431: LD_EXP 123
29435: PUSH
29436: LD_VAR 0 6
29440: ARRAY
29441: PUSH
29442: LD_VAR 0 5
29446: ARRAY
29447: PUSH
29448: LD_INT 2
29450: ARRAY
29451: PPUSH
29452: LD_VAR 0 2
29456: PPUSH
29457: LD_VAR 0 3
29461: PPUSH
29462: CALL_OW 298
29466: PUSH
29467: LD_INT 6
29469: LESS
29470: IFFALSE 29569
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29472: LD_EXP 123
29476: PUSH
29477: LD_VAR 0 6
29481: ARRAY
29482: PUSH
29483: LD_VAR 0 5
29487: ARRAY
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: LD_EXP 123
29497: PUSH
29498: LD_VAR 0 6
29502: ARRAY
29503: PUSH
29504: LD_VAR 0 5
29508: ARRAY
29509: PUSH
29510: LD_INT 2
29512: ARRAY
29513: PPUSH
29514: LD_VAR 0 1
29518: PPUSH
29519: CALL_OW 255
29523: PPUSH
29524: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29528: LD_ADDR_EXP 123
29532: PUSH
29533: LD_EXP 123
29537: PPUSH
29538: LD_VAR 0 6
29542: PPUSH
29543: LD_EXP 123
29547: PUSH
29548: LD_VAR 0 6
29552: ARRAY
29553: PPUSH
29554: LD_VAR 0 5
29558: PPUSH
29559: CALL_OW 3
29563: PPUSH
29564: CALL_OW 1
29568: ST_TO_ADDR
// end ; end ;
29569: GO 29407
29571: POP
29572: POP
// end ;
29573: LD_VAR 0 4
29577: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29578: LD_INT 0
29580: PPUSH
29581: PPUSH
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
29586: PPUSH
29587: PPUSH
29588: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 264
29598: PUSH
29599: LD_INT 81
29601: EQUAL
29602: NOT
29603: IFTRUE 29618
29605: PUSH
29606: LD_VAR 0 1
29610: PUSH
29611: LD_EXP 122
29615: IN
29616: NOT
29617: OR
29618: IFFALSE 29622
// exit ;
29620: GO 29948
// index := GetElementIndex ( minersList , unit ) ;
29622: LD_ADDR_VAR 0 6
29626: PUSH
29627: LD_EXP 122
29631: PPUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL 36193 0 2
29641: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29642: LD_ADDR_VAR 0 8
29646: PUSH
29647: LD_EXP 124
29651: PUSH
29652: LD_EXP 123
29656: PUSH
29657: LD_VAR 0 6
29661: ARRAY
29662: MINUS
29663: ST_TO_ADDR
// if not minesFreeAmount then
29664: LD_VAR 0 8
29668: NOT
29669: IFFALSE 29673
// exit ;
29671: GO 29948
// tmp := [ ] ;
29673: LD_ADDR_VAR 0 7
29677: PUSH
29678: EMPTY
29679: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29680: LD_ADDR_VAR 0 5
29684: PUSH
29685: DOUBLE
29686: LD_INT 1
29688: DEC
29689: ST_TO_ADDR
29690: LD_VAR 0 8
29694: PUSH
29695: FOR_TO
29696: IFFALSE 29895
// begin _d := rand ( 0 , 5 ) ;
29698: LD_ADDR_VAR 0 11
29702: PUSH
29703: LD_INT 0
29705: PPUSH
29706: LD_INT 5
29708: PPUSH
29709: CALL_OW 12
29713: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29714: LD_ADDR_VAR 0 12
29718: PUSH
29719: LD_INT 2
29721: PPUSH
29722: LD_INT 6
29724: PPUSH
29725: CALL_OW 12
29729: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29730: LD_ADDR_VAR 0 9
29734: PUSH
29735: LD_VAR 0 2
29739: PPUSH
29740: LD_VAR 0 11
29744: PPUSH
29745: LD_VAR 0 12
29749: PPUSH
29750: CALL_OW 272
29754: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29755: LD_ADDR_VAR 0 10
29759: PUSH
29760: LD_VAR 0 3
29764: PPUSH
29765: LD_VAR 0 11
29769: PPUSH
29770: LD_VAR 0 12
29774: PPUSH
29775: CALL_OW 273
29779: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29780: LD_VAR 0 9
29784: PPUSH
29785: LD_VAR 0 10
29789: PPUSH
29790: CALL_OW 488
29794: IFFALSE 29818
29796: PUSH
29797: LD_VAR 0 9
29801: PUSH
29802: LD_VAR 0 10
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_VAR 0 7
29815: IN
29816: NOT
29817: AND
29818: IFFALSE 29837
29820: PUSH
29821: LD_VAR 0 9
29825: PPUSH
29826: LD_VAR 0 10
29830: PPUSH
29831: CALL_OW 458
29835: NOT
29836: AND
29837: IFFALSE 29879
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29839: LD_ADDR_VAR 0 7
29843: PUSH
29844: LD_VAR 0 7
29848: PPUSH
29849: LD_VAR 0 7
29853: PUSH
29854: LD_INT 1
29856: PLUS
29857: PPUSH
29858: LD_VAR 0 9
29862: PUSH
29863: LD_VAR 0 10
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PPUSH
29872: CALL_OW 1
29876: ST_TO_ADDR
29877: GO 29893
// i := i - 1 ;
29879: LD_ADDR_VAR 0 5
29883: PUSH
29884: LD_VAR 0 5
29888: PUSH
29889: LD_INT 1
29891: MINUS
29892: ST_TO_ADDR
// end ;
29893: GO 29695
29895: POP
29896: POP
// for i in tmp do
29897: LD_ADDR_VAR 0 5
29901: PUSH
29902: LD_VAR 0 7
29906: PUSH
29907: FOR_IN
29908: IFFALSE 29946
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29910: LD_VAR 0 1
29914: PPUSH
29915: LD_VAR 0 5
29919: PUSH
29920: LD_INT 1
29922: ARRAY
29923: PPUSH
29924: LD_VAR 0 5
29928: PUSH
29929: LD_INT 2
29931: ARRAY
29932: PPUSH
29933: CALL 28939 0 3
29937: NOT
29938: IFFALSE 29944
// exit ;
29940: POP
29941: POP
29942: GO 29948
29944: GO 29907
29946: POP
29947: POP
// end ;
29948: LD_VAR 0 4
29952: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
29958: PPUSH
29959: PPUSH
29960: PPUSH
29961: PPUSH
29962: PPUSH
29963: PPUSH
// if GetClass ( unit ) <> class_sniper then
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 257
29973: PUSH
29974: LD_INT 5
29976: NONEQUAL
29977: IFFALSE 29981
// exit ;
29979: GO 30451
// dist := 8 ;
29981: LD_ADDR_VAR 0 5
29985: PUSH
29986: LD_INT 8
29988: ST_TO_ADDR
// viewRange := 12 ;
29989: LD_ADDR_VAR 0 8
29993: PUSH
29994: LD_INT 12
29996: ST_TO_ADDR
// side := GetSide ( unit ) ;
29997: LD_ADDR_VAR 0 6
30001: PUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: CALL_OW 255
30011: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30012: LD_INT 61
30014: PPUSH
30015: LD_VAR 0 6
30019: PPUSH
30020: CALL_OW 321
30024: PUSH
30025: LD_INT 2
30027: EQUAL
30028: IFFALSE 30038
// viewRange := 16 ;
30030: LD_ADDR_VAR 0 8
30034: PUSH
30035: LD_INT 16
30037: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30038: LD_VAR 0 1
30042: PPUSH
30043: LD_VAR 0 2
30047: PPUSH
30048: LD_VAR 0 3
30052: PPUSH
30053: CALL_OW 297
30057: PUSH
30058: LD_VAR 0 5
30062: GREATER
30063: IFFALSE 30142
// begin ComMoveXY ( unit , x , y ) ;
30065: LD_VAR 0 1
30069: PPUSH
30070: LD_VAR 0 2
30074: PPUSH
30075: LD_VAR 0 3
30079: PPUSH
30080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30084: LD_INT 35
30086: PPUSH
30087: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30091: LD_VAR 0 1
30095: PPUSH
30096: LD_VAR 0 2
30100: PPUSH
30101: LD_VAR 0 3
30105: PPUSH
30106: CALL 68249 0 3
30110: NOT
30111: IFFALSE 30115
// exit ;
30113: GO 30451
// until GetDistUnitXY ( unit , x , y ) < dist ;
30115: LD_VAR 0 1
30119: PPUSH
30120: LD_VAR 0 2
30124: PPUSH
30125: LD_VAR 0 3
30129: PPUSH
30130: CALL_OW 297
30134: PUSH
30135: LD_VAR 0 5
30139: LESS
30140: IFFALSE 30084
// end ; ComTurnXY ( unit , x , y ) ;
30142: LD_VAR 0 1
30146: PPUSH
30147: LD_VAR 0 2
30151: PPUSH
30152: LD_VAR 0 3
30156: PPUSH
30157: CALL_OW 118
// repeat if Multiplayer then
30161: LD_OWVAR 4
30165: IFFALSE 30176
// wait ( 35 ) else
30167: LD_INT 35
30169: PPUSH
30170: CALL_OW 67
30174: GO 30183
// wait ( 5 ) ;
30176: LD_INT 5
30178: PPUSH
30179: CALL_OW 67
// _d := GetDir ( unit ) ;
30183: LD_ADDR_VAR 0 11
30187: PUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 254
30197: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
30198: LD_ADDR_VAR 0 7
30202: PUSH
30203: LD_VAR 0 1
30207: PPUSH
30208: CALL_OW 250
30212: PPUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 251
30222: PPUSH
30223: LD_VAR 0 2
30227: PPUSH
30228: LD_VAR 0 3
30232: PPUSH
30233: CALL 70885 0 4
30237: ST_TO_ADDR
// until dir = _d ;
30238: LD_VAR 0 7
30242: PUSH
30243: LD_VAR 0 11
30247: EQUAL
30248: IFFALSE 30161
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
30250: LD_ADDR_VAR 0 9
30254: PUSH
30255: LD_VAR 0 1
30259: PPUSH
30260: CALL_OW 250
30264: PPUSH
30265: LD_VAR 0 7
30269: PPUSH
30270: LD_VAR 0 5
30274: PPUSH
30275: CALL_OW 272
30279: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30280: LD_ADDR_VAR 0 10
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 251
30294: PPUSH
30295: LD_VAR 0 7
30299: PPUSH
30300: LD_VAR 0 5
30304: PPUSH
30305: CALL_OW 273
30309: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30310: LD_VAR 0 9
30314: PPUSH
30315: LD_VAR 0 10
30319: PPUSH
30320: CALL_OW 488
30324: NOT
30325: IFFALSE 30329
// exit ;
30327: GO 30451
// ComAnimCustom ( unit , 1 ) ;
30329: LD_VAR 0 1
30333: PPUSH
30334: LD_INT 1
30336: PPUSH
30337: CALL_OW 592
// p := 0 ;
30341: LD_ADDR_VAR 0 12
30345: PUSH
30346: LD_INT 0
30348: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30349: LD_VAR 0 9
30353: PPUSH
30354: LD_VAR 0 10
30358: PPUSH
30359: LD_VAR 0 6
30363: PPUSH
30364: LD_VAR 0 8
30368: PPUSH
30369: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30373: LD_INT 35
30375: PPUSH
30376: CALL_OW 67
// p := Inc ( p ) ;
30380: LD_ADDR_VAR 0 12
30384: PUSH
30385: LD_VAR 0 12
30389: PPUSH
30390: CALL 70841 0 1
30394: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30395: LD_VAR 0 12
30399: PUSH
30400: LD_INT 3
30402: EQUAL
30403: IFTRUE 30417
30405: PUSH
30406: LD_VAR 0 1
30410: PPUSH
30411: CALL_OW 302
30415: NOT
30416: OR
30417: IFTRUE 30430
30419: PUSH
30420: LD_VAR 0 1
30424: PPUSH
30425: CALL_OW 301
30429: OR
30430: IFFALSE 30373
// RemoveSeeing ( _x , _y , side ) ;
30432: LD_VAR 0 9
30436: PPUSH
30437: LD_VAR 0 10
30441: PPUSH
30442: LD_VAR 0 6
30446: PPUSH
30447: CALL_OW 331
// end ;
30451: LD_VAR 0 4
30455: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
30456: LD_INT 0
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
// if not unit then
30469: LD_VAR 0 1
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30749
// side := GetSide ( unit ) ;
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: LD_VAR 0 1
30487: PPUSH
30488: CALL_OW 255
30492: ST_TO_ADDR
// x := GetX ( unit ) ;
30493: LD_ADDR_VAR 0 5
30497: PUSH
30498: LD_VAR 0 1
30502: PPUSH
30503: CALL_OW 250
30507: ST_TO_ADDR
// y := GetY ( unit ) ;
30508: LD_ADDR_VAR 0 6
30512: PUSH
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 251
30522: ST_TO_ADDR
// r := 8 ;
30523: LD_ADDR_VAR 0 4
30527: PUSH
30528: LD_INT 8
30530: ST_TO_ADDR
// if x - r < 0 then
30531: LD_VAR 0 5
30535: PUSH
30536: LD_VAR 0 4
30540: MINUS
30541: PUSH
30542: LD_INT 0
30544: LESS
30545: IFFALSE 30557
// min_x := 0 else
30547: LD_ADDR_VAR 0 7
30551: PUSH
30552: LD_INT 0
30554: ST_TO_ADDR
30555: GO 30573
// min_x := x - r ;
30557: LD_ADDR_VAR 0 7
30561: PUSH
30562: LD_VAR 0 5
30566: PUSH
30567: LD_VAR 0 4
30571: MINUS
30572: ST_TO_ADDR
// if y - r < 0 then
30573: LD_VAR 0 6
30577: PUSH
30578: LD_VAR 0 4
30582: MINUS
30583: PUSH
30584: LD_INT 0
30586: LESS
30587: IFFALSE 30599
// min_y := 0 else
30589: LD_ADDR_VAR 0 8
30593: PUSH
30594: LD_INT 0
30596: ST_TO_ADDR
30597: GO 30615
// min_y := y - r ;
30599: LD_ADDR_VAR 0 8
30603: PUSH
30604: LD_VAR 0 6
30608: PUSH
30609: LD_VAR 0 4
30613: MINUS
30614: ST_TO_ADDR
// max_x := x + r ;
30615: LD_ADDR_VAR 0 9
30619: PUSH
30620: LD_VAR 0 5
30624: PUSH
30625: LD_VAR 0 4
30629: PLUS
30630: ST_TO_ADDR
// max_y := y + r ;
30631: LD_ADDR_VAR 0 10
30635: PUSH
30636: LD_VAR 0 6
30640: PUSH
30641: LD_VAR 0 4
30645: PLUS
30646: ST_TO_ADDR
// for _x = min_x to max_x do
30647: LD_ADDR_VAR 0 11
30651: PUSH
30652: DOUBLE
30653: LD_VAR 0 7
30657: DEC
30658: ST_TO_ADDR
30659: LD_VAR 0 9
30663: PUSH
30664: FOR_TO
30665: IFFALSE 30747
// for _y = min_y to max_y do
30667: LD_ADDR_VAR 0 12
30671: PUSH
30672: DOUBLE
30673: LD_VAR 0 8
30677: DEC
30678: ST_TO_ADDR
30679: LD_VAR 0 10
30683: PUSH
30684: FOR_TO
30685: IFFALSE 30743
// begin if not ValidHex ( _x , _y ) then
30687: LD_VAR 0 11
30691: PPUSH
30692: LD_VAR 0 12
30696: PPUSH
30697: CALL_OW 488
30701: NOT
30702: IFFALSE 30706
// continue ;
30704: GO 30684
// if MineAtPos ( _x , _y ) then
30706: LD_VAR 0 11
30710: PPUSH
30711: LD_VAR 0 12
30715: PPUSH
30716: CALL_OW 458
30720: IFFALSE 30741
// ViewMineAtPos ( _x , _y , side ) ;
30722: LD_VAR 0 11
30726: PPUSH
30727: LD_VAR 0 12
30731: PPUSH
30732: LD_VAR 0 3
30736: PPUSH
30737: CALL_OW 457
// end ;
30741: GO 30684
30743: POP
30744: POP
30745: GO 30664
30747: POP
30748: POP
// end ;
30749: LD_VAR 0 2
30753: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
30754: LD_INT 0
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
// if not units then
30763: LD_VAR 0 1
30767: NOT
30768: IFFALSE 30772
// exit ;
30770: GO 31236
// scaners := [ ] ;
30772: LD_ADDR_VAR 0 6
30776: PUSH
30777: EMPTY
30778: ST_TO_ADDR
// for i in units do
30779: LD_ADDR_VAR 0 3
30783: PUSH
30784: LD_VAR 0 1
30788: PUSH
30789: FOR_IN
30790: IFFALSE 30947
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
30792: LD_VAR 0 3
30796: PPUSH
30797: CALL_OW 264
30801: PUSH
30802: LD_INT 11
30804: NONEQUAL
30805: IFTRUE 30819
30807: PUSH
30808: LD_VAR 0 3
30812: PPUSH
30813: CALL_OW 302
30817: NOT
30818: OR
30819: IFTRUE 30836
30821: PUSH
30822: LD_VAR 0 3
30826: PPUSH
30827: CALL_OW 110
30831: PUSH
30832: LD_INT 502
30834: EQUAL
30835: OR
30836: IFFALSE 30840
// continue ;
30838: GO 30789
// ComStop ( i ) ;
30840: LD_VAR 0 3
30844: PPUSH
30845: CALL_OW 141
// x := GetX ( i ) ;
30849: LD_ADDR_VAR 0 4
30853: PUSH
30854: LD_VAR 0 3
30858: PPUSH
30859: CALL_OW 250
30863: ST_TO_ADDR
// y := GetY ( i ) ;
30864: LD_ADDR_VAR 0 5
30868: PUSH
30869: LD_VAR 0 3
30873: PPUSH
30874: CALL_OW 251
30878: ST_TO_ADDR
// if GetSide ( i ) = your_side then
30879: LD_VAR 0 3
30883: PPUSH
30884: CALL_OW 255
30888: PUSH
30889: LD_OWVAR 2
30893: EQUAL
30894: IFFALSE 30913
// PlaySoundXY ( x , y , mineDetector ) ;
30896: LD_VAR 0 4
30900: PPUSH
30901: LD_VAR 0 5
30905: PPUSH
30906: LD_STRING mineDetector
30908: PPUSH
30909: CALL_OW 366
// scaners := Join ( scaners , i ) ;
30913: LD_ADDR_VAR 0 6
30917: PUSH
30918: LD_VAR 0 6
30922: PPUSH
30923: LD_VAR 0 3
30927: PPUSH
30928: CALL 69468 0 2
30932: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
30933: LD_VAR 0 3
30937: PPUSH
30938: LD_INT 502
30940: PPUSH
30941: CALL_OW 109
// end ;
30945: GO 30789
30947: POP
30948: POP
// if not scaners then
30949: LD_VAR 0 6
30953: NOT
30954: IFFALSE 30958
// exit ;
30956: GO 31236
// wait ( 3 ) ;
30958: LD_INT 3
30960: PPUSH
30961: CALL_OW 67
// timer := 6 ;
30965: LD_ADDR_VAR 0 7
30969: PUSH
30970: LD_INT 6
30972: ST_TO_ADDR
// repeat for i in scaners do
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_VAR 0 6
30982: PUSH
30983: FOR_IN
30984: IFFALSE 31134
// begin side := GetSide ( i ) ;
30986: LD_ADDR_VAR 0 8
30990: PUSH
30991: LD_VAR 0 3
30995: PPUSH
30996: CALL_OW 255
31000: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
31001: LD_VAR 0 3
31005: PPUSH
31006: CALL_OW 302
31010: NOT
31011: IFTRUE 31024
31013: PUSH
31014: LD_VAR 0 3
31018: PPUSH
31019: CALL_OW 314
31023: OR
31024: IFTRUE 31055
31026: PUSH
31027: LD_VAR 0 3
31031: PPUSH
31032: CALL_OW 263
31036: PUSH
31037: LD_INT 1
31039: EQUAL
31040: IFFALSE 31054
31042: PUSH
31043: LD_VAR 0 3
31047: PPUSH
31048: CALL_OW 311
31052: NOT
31053: AND
31054: OR
31055: IFFALSE 31099
// begin SetUnitDisplayNumber ( i , 0 ) ;
31057: LD_VAR 0 3
31061: PPUSH
31062: LD_INT 0
31064: PPUSH
31065: CALL_OW 505
// SetTag ( i , 0 ) ;
31069: LD_VAR 0 3
31073: PPUSH
31074: LD_INT 0
31076: PPUSH
31077: CALL_OW 109
// scaners := scaners diff i ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: LD_VAR 0 6
31090: PUSH
31091: LD_VAR 0 3
31095: DIFF
31096: ST_TO_ADDR
// continue ;
31097: GO 30983
// end ; if side in [ your_side , 9 ] then
31099: LD_VAR 0 8
31103: PUSH
31104: LD_OWVAR 2
31108: PUSH
31109: LD_INT 9
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: IN
31116: IFFALSE 31132
// SetUnitDisplayNumber ( i , timer ) ;
31118: LD_VAR 0 3
31122: PPUSH
31123: LD_VAR 0 7
31127: PPUSH
31128: CALL_OW 505
// end ;
31132: GO 30983
31134: POP
31135: POP
// if not scaners then
31136: LD_VAR 0 6
31140: NOT
31141: IFFALSE 31145
// exit ;
31143: GO 31236
// timer := Dec ( timer ) ;
31145: LD_ADDR_VAR 0 7
31149: PUSH
31150: LD_VAR 0 7
31154: PPUSH
31155: CALL 70863 0 1
31159: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31160: LD_INT 35
31162: PPUSH
31163: CALL_OW 67
// until timer = 0 ;
31167: LD_VAR 0 7
31171: PUSH
31172: LD_INT 0
31174: EQUAL
31175: IFFALSE 30973
// if not scaners then
31177: LD_VAR 0 6
31181: NOT
31182: IFFALSE 31186
// exit ;
31184: GO 31236
// for i in scaners do
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: LD_VAR 0 6
31195: PUSH
31196: FOR_IN
31197: IFFALSE 31234
// begin SetUnitDisplayNumber ( i , 0 ) ;
31199: LD_VAR 0 3
31203: PPUSH
31204: LD_INT 0
31206: PPUSH
31207: CALL_OW 505
// SetTag ( i , 0 ) ;
31211: LD_VAR 0 3
31215: PPUSH
31216: LD_INT 0
31218: PPUSH
31219: CALL_OW 109
// RevealDetectorMine ( i ) ;
31223: LD_VAR 0 3
31227: PPUSH
31228: CALL 30456 0 1
// end ;
31232: GO 31196
31234: POP
31235: POP
// end ;
31236: LD_VAR 0 2
31240: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
31241: LD_INT 0
31243: PPUSH
// if p1 = mine_detector_mode then
31244: LD_VAR 0 2
31248: PUSH
31249: LD_INT 103
31251: EQUAL
31252: IFFALSE 31263
// DetectMine ( units ) ;
31254: LD_VAR 0 1
31258: PPUSH
31259: CALL 30754 0 1
// end ; end_of_file
31263: LD_VAR 0 7
31267: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
// if exist_mode then
31272: LD_VAR 0 2
31276: IFFALSE 31322
// begin unit := CreateCharacter ( prefix & ident ) ;
31278: LD_ADDR_VAR 0 5
31282: PUSH
31283: LD_VAR 0 3
31287: PUSH
31288: LD_VAR 0 1
31292: STR
31293: PPUSH
31294: CALL_OW 34
31298: ST_TO_ADDR
// if unit then
31299: LD_VAR 0 5
31303: IFFALSE 31320
// DeleteCharacters ( prefix & ident ) ;
31305: LD_VAR 0 3
31309: PUSH
31310: LD_VAR 0 1
31314: STR
31315: PPUSH
31316: CALL_OW 40
// end else
31320: GO 31337
// unit := NewCharacter ( ident ) ;
31322: LD_ADDR_VAR 0 5
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 25
31336: ST_TO_ADDR
// result := unit ;
31337: LD_ADDR_VAR 0 4
31341: PUSH
31342: LD_VAR 0 5
31346: ST_TO_ADDR
// end ;
31347: LD_VAR 0 4
31351: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31352: LD_INT 0
31354: PPUSH
31355: PPUSH
// if exist_mode then
31356: LD_VAR 0 2
31360: IFFALSE 31385
// unit := CreateCharacter ( prefix & ident ) else
31362: LD_ADDR_VAR 0 5
31366: PUSH
31367: LD_VAR 0 3
31371: PUSH
31372: LD_VAR 0 1
31376: STR
31377: PPUSH
31378: CALL_OW 34
31382: ST_TO_ADDR
31383: GO 31400
// unit := NewCharacter ( ident ) ;
31385: LD_ADDR_VAR 0 5
31389: PUSH
31390: LD_VAR 0 1
31394: PPUSH
31395: CALL_OW 25
31399: ST_TO_ADDR
// result := unit ;
31400: LD_ADDR_VAR 0 4
31404: PUSH
31405: LD_VAR 0 5
31409: ST_TO_ADDR
// end ;
31410: LD_VAR 0 4
31414: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31415: LD_INT 0
31417: PPUSH
31418: PPUSH
// if not side or not nation then
31419: LD_VAR 0 1
31423: NOT
31424: IFTRUE 31433
31426: PUSH
31427: LD_VAR 0 2
31431: NOT
31432: OR
31433: IFFALSE 31437
// exit ;
31435: GO 32231
// case nation of nation_american :
31437: LD_VAR 0 2
31441: PUSH
31442: LD_INT 1
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31672
31450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
31451: LD_ADDR_VAR 0 4
31455: PUSH
31456: LD_INT 35
31458: PUSH
31459: LD_INT 45
31461: PUSH
31462: LD_INT 46
31464: PUSH
31465: LD_INT 47
31467: PUSH
31468: LD_INT 82
31470: PUSH
31471: LD_INT 83
31473: PUSH
31474: LD_INT 84
31476: PUSH
31477: LD_INT 85
31479: PUSH
31480: LD_INT 86
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: LD_INT 6
31491: PUSH
31492: LD_INT 15
31494: PUSH
31495: LD_INT 16
31497: PUSH
31498: LD_INT 7
31500: PUSH
31501: LD_INT 12
31503: PUSH
31504: LD_INT 13
31506: PUSH
31507: LD_INT 10
31509: PUSH
31510: LD_INT 14
31512: PUSH
31513: LD_INT 20
31515: PUSH
31516: LD_INT 21
31518: PUSH
31519: LD_INT 22
31521: PUSH
31522: LD_INT 25
31524: PUSH
31525: LD_INT 32
31527: PUSH
31528: LD_INT 27
31530: PUSH
31531: LD_INT 36
31533: PUSH
31534: LD_INT 69
31536: PUSH
31537: LD_INT 39
31539: PUSH
31540: LD_INT 34
31542: PUSH
31543: LD_INT 40
31545: PUSH
31546: LD_INT 48
31548: PUSH
31549: LD_INT 49
31551: PUSH
31552: LD_INT 50
31554: PUSH
31555: LD_INT 51
31557: PUSH
31558: LD_INT 52
31560: PUSH
31561: LD_INT 53
31563: PUSH
31564: LD_INT 54
31566: PUSH
31567: LD_INT 55
31569: PUSH
31570: LD_INT 56
31572: PUSH
31573: LD_INT 57
31575: PUSH
31576: LD_INT 58
31578: PUSH
31579: LD_INT 59
31581: PUSH
31582: LD_INT 60
31584: PUSH
31585: LD_INT 61
31587: PUSH
31588: LD_INT 62
31590: PUSH
31591: LD_INT 80
31593: PUSH
31594: LD_INT 82
31596: PUSH
31597: LD_INT 83
31599: PUSH
31600: LD_INT 84
31602: PUSH
31603: LD_INT 85
31605: PUSH
31606: LD_INT 86
31608: PUSH
31609: LD_INT 90
31611: PUSH
31612: LD_INT 93
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
31670: GO 32153
31672: LD_INT 2
31674: DOUBLE
31675: EQUAL
31676: IFTRUE 31680
31678: GO 31914
31680: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
31681: LD_ADDR_VAR 0 4
31685: PUSH
31686: LD_INT 35
31688: PUSH
31689: LD_INT 45
31691: PUSH
31692: LD_INT 46
31694: PUSH
31695: LD_INT 47
31697: PUSH
31698: LD_INT 82
31700: PUSH
31701: LD_INT 83
31703: PUSH
31704: LD_INT 84
31706: PUSH
31707: LD_INT 85
31709: PUSH
31710: LD_INT 87
31712: PUSH
31713: LD_INT 70
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 11
31721: PUSH
31722: LD_INT 3
31724: PUSH
31725: LD_INT 4
31727: PUSH
31728: LD_INT 5
31730: PUSH
31731: LD_INT 6
31733: PUSH
31734: LD_INT 15
31736: PUSH
31737: LD_INT 18
31739: PUSH
31740: LD_INT 7
31742: PUSH
31743: LD_INT 17
31745: PUSH
31746: LD_INT 8
31748: PUSH
31749: LD_INT 20
31751: PUSH
31752: LD_INT 21
31754: PUSH
31755: LD_INT 22
31757: PUSH
31758: LD_INT 72
31760: PUSH
31761: LD_INT 26
31763: PUSH
31764: LD_INT 69
31766: PUSH
31767: LD_INT 39
31769: PUSH
31770: LD_INT 40
31772: PUSH
31773: LD_INT 41
31775: PUSH
31776: LD_INT 42
31778: PUSH
31779: LD_INT 43
31781: PUSH
31782: LD_INT 48
31784: PUSH
31785: LD_INT 49
31787: PUSH
31788: LD_INT 50
31790: PUSH
31791: LD_INT 51
31793: PUSH
31794: LD_INT 52
31796: PUSH
31797: LD_INT 53
31799: PUSH
31800: LD_INT 54
31802: PUSH
31803: LD_INT 55
31805: PUSH
31806: LD_INT 56
31808: PUSH
31809: LD_INT 60
31811: PUSH
31812: LD_INT 61
31814: PUSH
31815: LD_INT 62
31817: PUSH
31818: LD_INT 66
31820: PUSH
31821: LD_INT 67
31823: PUSH
31824: LD_INT 68
31826: PUSH
31827: LD_INT 81
31829: PUSH
31830: LD_INT 82
31832: PUSH
31833: LD_INT 83
31835: PUSH
31836: LD_INT 84
31838: PUSH
31839: LD_INT 85
31841: PUSH
31842: LD_INT 87
31844: PUSH
31845: LD_INT 88
31847: PUSH
31848: LD_INT 92
31850: PUSH
31851: LD_INT 94
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: ST_TO_ADDR
31912: GO 32153
31914: LD_INT 3
31916: DOUBLE
31917: EQUAL
31918: IFTRUE 31922
31920: GO 32152
31922: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
31923: LD_ADDR_VAR 0 4
31927: PUSH
31928: LD_INT 46
31930: PUSH
31931: LD_INT 47
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 82
31942: PUSH
31943: LD_INT 83
31945: PUSH
31946: LD_INT 84
31948: PUSH
31949: LD_INT 85
31951: PUSH
31952: LD_INT 86
31954: PUSH
31955: LD_INT 11
31957: PUSH
31958: LD_INT 9
31960: PUSH
31961: LD_INT 20
31963: PUSH
31964: LD_INT 19
31966: PUSH
31967: LD_INT 21
31969: PUSH
31970: LD_INT 24
31972: PUSH
31973: LD_INT 22
31975: PUSH
31976: LD_INT 25
31978: PUSH
31979: LD_INT 28
31981: PUSH
31982: LD_INT 29
31984: PUSH
31985: LD_INT 30
31987: PUSH
31988: LD_INT 31
31990: PUSH
31991: LD_INT 37
31993: PUSH
31994: LD_INT 38
31996: PUSH
31997: LD_INT 32
31999: PUSH
32000: LD_INT 27
32002: PUSH
32003: LD_INT 33
32005: PUSH
32006: LD_INT 69
32008: PUSH
32009: LD_INT 39
32011: PUSH
32012: LD_INT 34
32014: PUSH
32015: LD_INT 40
32017: PUSH
32018: LD_INT 71
32020: PUSH
32021: LD_INT 23
32023: PUSH
32024: LD_INT 44
32026: PUSH
32027: LD_INT 48
32029: PUSH
32030: LD_INT 49
32032: PUSH
32033: LD_INT 50
32035: PUSH
32036: LD_INT 51
32038: PUSH
32039: LD_INT 52
32041: PUSH
32042: LD_INT 53
32044: PUSH
32045: LD_INT 54
32047: PUSH
32048: LD_INT 55
32050: PUSH
32051: LD_INT 56
32053: PUSH
32054: LD_INT 57
32056: PUSH
32057: LD_INT 58
32059: PUSH
32060: LD_INT 59
32062: PUSH
32063: LD_INT 63
32065: PUSH
32066: LD_INT 64
32068: PUSH
32069: LD_INT 65
32071: PUSH
32072: LD_INT 82
32074: PUSH
32075: LD_INT 83
32077: PUSH
32078: LD_INT 84
32080: PUSH
32081: LD_INT 85
32083: PUSH
32084: LD_INT 86
32086: PUSH
32087: LD_INT 89
32089: PUSH
32090: LD_INT 91
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
32150: GO 32153
32152: POP
// if state > - 1 and state < 3 then
32153: LD_VAR 0 3
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: GREATER
32162: IFFALSE 32174
32164: PUSH
32165: LD_VAR 0 3
32169: PUSH
32170: LD_INT 3
32172: LESS
32173: AND
32174: IFFALSE 32231
// for i in result do
32176: LD_ADDR_VAR 0 5
32180: PUSH
32181: LD_VAR 0 4
32185: PUSH
32186: FOR_IN
32187: IFFALSE 32229
// if GetTech ( i , side ) <> state then
32189: LD_VAR 0 5
32193: PPUSH
32194: LD_VAR 0 1
32198: PPUSH
32199: CALL_OW 321
32203: PUSH
32204: LD_VAR 0 3
32208: NONEQUAL
32209: IFFALSE 32227
// result := result diff i ;
32211: LD_ADDR_VAR 0 4
32215: PUSH
32216: LD_VAR 0 4
32220: PUSH
32221: LD_VAR 0 5
32225: DIFF
32226: ST_TO_ADDR
32227: GO 32186
32229: POP
32230: POP
// end ;
32231: LD_VAR 0 4
32235: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32236: LD_INT 0
32238: PPUSH
32239: PPUSH
32240: PPUSH
// result := true ;
32241: LD_ADDR_VAR 0 3
32245: PUSH
32246: LD_INT 1
32248: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32249: LD_ADDR_VAR 0 5
32253: PUSH
32254: LD_VAR 0 2
32258: PPUSH
32259: CALL_OW 480
32263: ST_TO_ADDR
// if not tmp then
32264: LD_VAR 0 5
32268: NOT
32269: IFFALSE 32273
// exit ;
32271: GO 32322
// for i in tmp do
32273: LD_ADDR_VAR 0 4
32277: PUSH
32278: LD_VAR 0 5
32282: PUSH
32283: FOR_IN
32284: IFFALSE 32320
// if GetTech ( i , side ) <> state_researched then
32286: LD_VAR 0 4
32290: PPUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: CALL_OW 321
32300: PUSH
32301: LD_INT 2
32303: NONEQUAL
32304: IFFALSE 32318
// begin result := false ;
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: LD_INT 0
32313: ST_TO_ADDR
// exit ;
32314: POP
32315: POP
32316: GO 32322
// end ;
32318: GO 32283
32320: POP
32321: POP
// end ;
32322: LD_VAR 0 3
32326: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32327: LD_INT 0
32329: PPUSH
32330: PPUSH
32331: PPUSH
32332: PPUSH
32333: PPUSH
32334: PPUSH
32335: PPUSH
32336: PPUSH
32337: PPUSH
32338: PPUSH
32339: PPUSH
32340: PPUSH
32341: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32342: LD_VAR 0 1
32346: NOT
32347: IFTRUE 32364
32349: PUSH
32350: LD_VAR 0 1
32354: PPUSH
32355: CALL_OW 257
32359: PUSH
32360: LD_INT 9
32362: NONEQUAL
32363: OR
32364: IFFALSE 32368
// exit ;
32366: GO 32947
// side := GetSide ( unit ) ;
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 255
32382: ST_TO_ADDR
// tech_space := tech_spacanom ;
32383: LD_ADDR_VAR 0 12
32387: PUSH
32388: LD_INT 29
32390: ST_TO_ADDR
// tech_time := tech_taurad ;
32391: LD_ADDR_VAR 0 13
32395: PUSH
32396: LD_INT 28
32398: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32399: LD_ADDR_VAR 0 11
32403: PUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: CALL_OW 310
32413: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32414: LD_VAR 0 11
32418: PPUSH
32419: CALL_OW 247
32423: PUSH
32424: LD_INT 2
32426: EQUAL
32427: IFFALSE 32431
// exit ;
32429: GO 32947
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32431: LD_ADDR_VAR 0 8
32435: PUSH
32436: LD_INT 81
32438: PUSH
32439: LD_VAR 0 9
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: PUSH
32451: LD_INT 21
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PPUSH
32469: CALL_OW 69
32473: ST_TO_ADDR
// if not tmp then
32474: LD_VAR 0 8
32478: NOT
32479: IFFALSE 32483
// exit ;
32481: GO 32947
// if in_unit then
32483: LD_VAR 0 11
32487: IFFALSE 32511
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32489: LD_ADDR_VAR 0 10
32493: PUSH
32494: LD_VAR 0 8
32498: PPUSH
32499: LD_VAR 0 11
32503: PPUSH
32504: CALL_OW 74
32508: ST_TO_ADDR
32509: GO 32531
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32511: LD_ADDR_VAR 0 10
32515: PUSH
32516: LD_VAR 0 8
32520: PPUSH
32521: LD_VAR 0 1
32525: PPUSH
32526: CALL_OW 74
32530: ST_TO_ADDR
// if not enemy then
32531: LD_VAR 0 10
32535: NOT
32536: IFFALSE 32540
// exit ;
32538: GO 32947
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32540: LD_VAR 0 11
32544: IFFALSE 32566
32546: PUSH
32547: LD_VAR 0 11
32551: PPUSH
32552: LD_VAR 0 10
32556: PPUSH
32557: CALL_OW 296
32561: PUSH
32562: LD_INT 13
32564: GREATER
32565: AND
32566: IFTRUE 32588
32568: PUSH
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_VAR 0 10
32578: PPUSH
32579: CALL_OW 296
32583: PUSH
32584: LD_INT 12
32586: GREATER
32587: OR
32588: IFFALSE 32592
// exit ;
32590: GO 32947
// missile := [ 1 ] ;
32592: LD_ADDR_VAR 0 14
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32603: LD_VAR 0 9
32607: PPUSH
32608: LD_VAR 0 12
32612: PPUSH
32613: CALL_OW 325
32617: IFFALSE 32646
// missile := Replace ( missile , missile + 1 , 2 ) ;
32619: LD_ADDR_VAR 0 14
32623: PUSH
32624: LD_VAR 0 14
32628: PPUSH
32629: LD_VAR 0 14
32633: PUSH
32634: LD_INT 1
32636: PLUS
32637: PPUSH
32638: LD_INT 2
32640: PPUSH
32641: CALL_OW 1
32645: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32646: LD_VAR 0 9
32650: PPUSH
32651: LD_VAR 0 13
32655: PPUSH
32656: CALL_OW 325
32660: IFFALSE 32684
32662: PUSH
32663: LD_VAR 0 10
32667: PPUSH
32668: CALL_OW 255
32672: PPUSH
32673: LD_VAR 0 13
32677: PPUSH
32678: CALL_OW 325
32682: NOT
32683: AND
32684: IFFALSE 32713
// missile := Replace ( missile , missile + 1 , 3 ) ;
32686: LD_ADDR_VAR 0 14
32690: PUSH
32691: LD_VAR 0 14
32695: PPUSH
32696: LD_VAR 0 14
32700: PUSH
32701: LD_INT 1
32703: PLUS
32704: PPUSH
32705: LD_INT 3
32707: PPUSH
32708: CALL_OW 1
32712: ST_TO_ADDR
// if missile < 2 then
32713: LD_VAR 0 14
32717: PUSH
32718: LD_INT 2
32720: LESS
32721: IFFALSE 32725
// exit ;
32723: GO 32947
// x := GetX ( enemy ) ;
32725: LD_ADDR_VAR 0 4
32729: PUSH
32730: LD_VAR 0 10
32734: PPUSH
32735: CALL_OW 250
32739: ST_TO_ADDR
// y := GetY ( enemy ) ;
32740: LD_ADDR_VAR 0 5
32744: PUSH
32745: LD_VAR 0 10
32749: PPUSH
32750: CALL_OW 251
32754: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32755: LD_ADDR_VAR 0 6
32759: PUSH
32760: LD_VAR 0 4
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PPUSH
32769: LD_INT 1
32771: PPUSH
32772: CALL_OW 12
32776: PLUS
32777: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32778: LD_ADDR_VAR 0 7
32782: PUSH
32783: LD_VAR 0 5
32787: PUSH
32788: LD_INT 1
32790: NEG
32791: PPUSH
32792: LD_INT 1
32794: PPUSH
32795: CALL_OW 12
32799: PLUS
32800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32801: LD_VAR 0 6
32805: PPUSH
32806: LD_VAR 0 7
32810: PPUSH
32811: CALL_OW 488
32815: NOT
32816: IFFALSE 32838
// begin _x := x ;
32818: LD_ADDR_VAR 0 6
32822: PUSH
32823: LD_VAR 0 4
32827: ST_TO_ADDR
// _y := y ;
32828: LD_ADDR_VAR 0 7
32832: PUSH
32833: LD_VAR 0 5
32837: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32838: LD_ADDR_VAR 0 3
32842: PUSH
32843: LD_INT 1
32845: PPUSH
32846: LD_VAR 0 14
32850: PPUSH
32851: CALL_OW 12
32855: ST_TO_ADDR
// case i of 1 :
32856: LD_VAR 0 3
32860: PUSH
32861: LD_INT 1
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 32886
32869: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32870: LD_VAR 0 1
32874: PPUSH
32875: LD_VAR 0 10
32879: PPUSH
32880: CALL_OW 115
32884: GO 32947
32886: LD_INT 2
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32916
32894: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32895: LD_VAR 0 1
32899: PPUSH
32900: LD_VAR 0 6
32904: PPUSH
32905: LD_VAR 0 7
32909: PPUSH
32910: CALL_OW 153
32914: GO 32947
32916: LD_INT 3
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32946
32924: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32925: LD_VAR 0 1
32929: PPUSH
32930: LD_VAR 0 6
32934: PPUSH
32935: LD_VAR 0 7
32939: PPUSH
32940: CALL_OW 154
32944: GO 32947
32946: POP
// end ;
32947: LD_VAR 0 2
32951: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32952: LD_INT 0
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
// if not unit or not building then
32960: LD_VAR 0 1
32964: NOT
32965: IFTRUE 32974
32967: PUSH
32968: LD_VAR 0 2
32972: NOT
32973: OR
32974: IFFALSE 32978
// exit ;
32976: GO 33136
// x := GetX ( building ) ;
32978: LD_ADDR_VAR 0 5
32982: PUSH
32983: LD_VAR 0 2
32987: PPUSH
32988: CALL_OW 250
32992: ST_TO_ADDR
// y := GetY ( building ) ;
32993: LD_ADDR_VAR 0 6
32997: PUSH
32998: LD_VAR 0 2
33002: PPUSH
33003: CALL_OW 251
33007: ST_TO_ADDR
// for i := 0 to 5 do
33008: LD_ADDR_VAR 0 4
33012: PUSH
33013: DOUBLE
33014: LD_INT 0
33016: DEC
33017: ST_TO_ADDR
33018: LD_INT 5
33020: PUSH
33021: FOR_TO
33022: IFFALSE 33134
// begin _x := ShiftX ( x , i , 3 ) ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 5
33033: PPUSH
33034: LD_VAR 0 4
33038: PPUSH
33039: LD_INT 3
33041: PPUSH
33042: CALL_OW 272
33046: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33047: LD_ADDR_VAR 0 8
33051: PUSH
33052: LD_VAR 0 6
33056: PPUSH
33057: LD_VAR 0 4
33061: PPUSH
33062: LD_INT 3
33064: PPUSH
33065: CALL_OW 273
33069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33070: LD_VAR 0 7
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: CALL_OW 488
33084: NOT
33085: IFFALSE 33089
// continue ;
33087: GO 33021
// if HexInfo ( _x , _y ) = 0 then
33089: LD_VAR 0 7
33093: PPUSH
33094: LD_VAR 0 8
33098: PPUSH
33099: CALL_OW 428
33103: PUSH
33104: LD_INT 0
33106: EQUAL
33107: IFFALSE 33132
// begin ComMoveXY ( unit , _x , _y ) ;
33109: LD_VAR 0 1
33113: PPUSH
33114: LD_VAR 0 7
33118: PPUSH
33119: LD_VAR 0 8
33123: PPUSH
33124: CALL_OW 111
// exit ;
33128: POP
33129: POP
33130: GO 33136
// end ; end ;
33132: GO 33021
33134: POP
33135: POP
// end ;
33136: LD_VAR 0 3
33140: RET
// export function ScanBase ( side , base_area ) ; begin
33141: LD_INT 0
33143: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33144: LD_ADDR_VAR 0 3
33148: PUSH
33149: LD_VAR 0 2
33153: PPUSH
33154: LD_INT 81
33156: PUSH
33157: LD_VAR 0 1
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PPUSH
33166: CALL_OW 70
33170: ST_TO_ADDR
// end ;
33171: LD_VAR 0 3
33175: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
// result := false ;
33182: LD_ADDR_VAR 0 2
33186: PUSH
33187: LD_INT 0
33189: ST_TO_ADDR
// side := GetSide ( unit ) ;
33190: LD_ADDR_VAR 0 3
33194: PUSH
33195: LD_VAR 0 1
33199: PPUSH
33200: CALL_OW 255
33204: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33205: LD_ADDR_VAR 0 4
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: CALL_OW 248
33219: ST_TO_ADDR
// case nat of 1 :
33220: LD_VAR 0 4
33224: PUSH
33225: LD_INT 1
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33233
33231: GO 33244
33233: POP
// tech := tech_lassight ; 2 :
33234: LD_ADDR_VAR 0 5
33238: PUSH
33239: LD_INT 12
33241: ST_TO_ADDR
33242: GO 33283
33244: LD_INT 2
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33263
33252: POP
// tech := tech_mortar ; 3 :
33253: LD_ADDR_VAR 0 5
33257: PUSH
33258: LD_INT 41
33260: ST_TO_ADDR
33261: GO 33283
33263: LD_INT 3
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33282
33271: POP
// tech := tech_bazooka ; end ;
33272: LD_ADDR_VAR 0 5
33276: PUSH
33277: LD_INT 44
33279: ST_TO_ADDR
33280: GO 33283
33282: POP
// if Researched ( side , tech ) then
33283: LD_VAR 0 3
33287: PPUSH
33288: LD_VAR 0 5
33292: PPUSH
33293: CALL_OW 325
33297: IFFALSE 33324
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33299: LD_ADDR_VAR 0 2
33303: PUSH
33304: LD_INT 5
33306: PUSH
33307: LD_INT 8
33309: PUSH
33310: LD_INT 9
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: PUSH
33318: LD_VAR 0 4
33322: ARRAY
33323: ST_TO_ADDR
// end ;
33324: LD_VAR 0 2
33328: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33329: LD_INT 0
33331: PPUSH
33332: PPUSH
33333: PPUSH
// if not mines then
33334: LD_VAR 0 2
33338: NOT
33339: IFFALSE 33343
// exit ;
33341: GO 33487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33343: LD_ADDR_VAR 0 5
33347: PUSH
33348: LD_INT 81
33350: PUSH
33351: LD_VAR 0 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: LD_INT 21
33365: PUSH
33366: LD_INT 3
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PPUSH
33381: CALL_OW 69
33385: ST_TO_ADDR
// for i in mines do
33386: LD_ADDR_VAR 0 4
33390: PUSH
33391: LD_VAR 0 2
33395: PUSH
33396: FOR_IN
33397: IFFALSE 33485
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33399: LD_VAR 0 4
33403: PUSH
33404: LD_INT 1
33406: ARRAY
33407: PPUSH
33408: LD_VAR 0 4
33412: PUSH
33413: LD_INT 2
33415: ARRAY
33416: PPUSH
33417: CALL_OW 458
33421: NOT
33422: IFFALSE 33426
// continue ;
33424: GO 33396
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33426: LD_VAR 0 4
33430: PUSH
33431: LD_INT 1
33433: ARRAY
33434: PPUSH
33435: LD_VAR 0 4
33439: PUSH
33440: LD_INT 2
33442: ARRAY
33443: PPUSH
33444: CALL_OW 428
33448: PUSH
33449: LD_VAR 0 5
33453: IN
33454: IFFALSE 33483
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33456: LD_VAR 0 4
33460: PUSH
33461: LD_INT 1
33463: ARRAY
33464: PPUSH
33465: LD_VAR 0 4
33469: PUSH
33470: LD_INT 2
33472: ARRAY
33473: PPUSH
33474: LD_VAR 0 1
33478: PPUSH
33479: CALL_OW 456
// end ;
33483: GO 33396
33485: POP
33486: POP
// end ;
33487: LD_VAR 0 3
33491: RET
// export function Count ( array ) ; begin
33492: LD_INT 0
33494: PPUSH
// result := array + 0 ;
33495: LD_ADDR_VAR 0 2
33499: PUSH
33500: LD_VAR 0 1
33504: PUSH
33505: LD_INT 0
33507: PLUS
33508: ST_TO_ADDR
// end ;
33509: LD_VAR 0 2
33513: RET
// export function IsEmpty ( building ) ; begin
33514: LD_INT 0
33516: PPUSH
// if not building then
33517: LD_VAR 0 1
33521: NOT
33522: IFFALSE 33526
// exit ;
33524: GO 33569
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33526: LD_ADDR_VAR 0 2
33530: PUSH
33531: LD_VAR 0 1
33535: PUSH
33536: LD_INT 22
33538: PUSH
33539: LD_VAR 0 1
33543: PPUSH
33544: CALL_OW 255
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 58
33555: PUSH
33556: EMPTY
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PPUSH
33563: CALL_OW 69
33567: IN
33568: ST_TO_ADDR
// end ;
33569: LD_VAR 0 2
33573: RET
// export function IsNotFull ( building ) ; var places ; begin
33574: LD_INT 0
33576: PPUSH
33577: PPUSH
// if not building then
33578: LD_VAR 0 1
33582: NOT
33583: IFFALSE 33587
// exit ;
33585: GO 33615
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33587: LD_ADDR_VAR 0 2
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: LD_INT 3
33599: PUSH
33600: LD_INT 62
33602: PUSH
33603: EMPTY
33604: LIST
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 72
33614: ST_TO_ADDR
// end ;
33615: LD_VAR 0 2
33619: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33620: LD_INT 0
33622: PPUSH
33623: PPUSH
33624: PPUSH
33625: PPUSH
// tmp := [ ] ;
33626: LD_ADDR_VAR 0 3
33630: PUSH
33631: EMPTY
33632: ST_TO_ADDR
// list := [ ] ;
33633: LD_ADDR_VAR 0 5
33637: PUSH
33638: EMPTY
33639: ST_TO_ADDR
// for i = 16 to 25 do
33640: LD_ADDR_VAR 0 4
33644: PUSH
33645: DOUBLE
33646: LD_INT 16
33648: DEC
33649: ST_TO_ADDR
33650: LD_INT 25
33652: PUSH
33653: FOR_TO
33654: IFFALSE 33727
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_VAR 0 3
33665: PUSH
33666: LD_INT 22
33668: PUSH
33669: LD_VAR 0 1
33673: PPUSH
33674: CALL_OW 255
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 91
33685: PUSH
33686: LD_VAR 0 1
33690: PUSH
33691: LD_INT 6
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 30
33701: PUSH
33702: LD_VAR 0 4
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: PPUSH
33719: CALL_OW 69
33723: ADD
33724: ST_TO_ADDR
33725: GO 33653
33727: POP
33728: POP
// for i = 1 to tmp do
33729: LD_ADDR_VAR 0 4
33733: PUSH
33734: DOUBLE
33735: LD_INT 1
33737: DEC
33738: ST_TO_ADDR
33739: LD_VAR 0 3
33743: PUSH
33744: FOR_TO
33745: IFFALSE 33833
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33747: LD_ADDR_VAR 0 5
33751: PUSH
33752: LD_VAR 0 5
33756: PUSH
33757: LD_VAR 0 3
33761: PUSH
33762: LD_VAR 0 4
33766: ARRAY
33767: PPUSH
33768: CALL_OW 266
33772: PUSH
33773: LD_VAR 0 3
33777: PUSH
33778: LD_VAR 0 4
33782: ARRAY
33783: PPUSH
33784: CALL_OW 250
33788: PUSH
33789: LD_VAR 0 3
33793: PUSH
33794: LD_VAR 0 4
33798: ARRAY
33799: PPUSH
33800: CALL_OW 251
33804: PUSH
33805: LD_VAR 0 3
33809: PUSH
33810: LD_VAR 0 4
33814: ARRAY
33815: PPUSH
33816: CALL_OW 254
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: ADD
33830: ST_TO_ADDR
33831: GO 33744
33833: POP
33834: POP
// result := list ;
33835: LD_ADDR_VAR 0 2
33839: PUSH
33840: LD_VAR 0 5
33844: ST_TO_ADDR
// end ;
33845: LD_VAR 0 2
33849: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
// if not factory then
33859: LD_VAR 0 1
33863: NOT
33864: IFFALSE 33868
// exit ;
33866: GO 34471
// if control = control_apeman then
33868: LD_VAR 0 4
33872: PUSH
33873: LD_INT 5
33875: EQUAL
33876: IFFALSE 33985
// begin tmp := UnitsInside ( factory ) ;
33878: LD_ADDR_VAR 0 8
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 313
33892: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33893: LD_VAR 0 8
33897: PPUSH
33898: LD_INT 25
33900: PUSH
33901: LD_INT 12
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PPUSH
33908: CALL_OW 72
33912: NOT
33913: IFFALSE 33923
// control := control_manual ;
33915: LD_ADDR_VAR 0 4
33919: PUSH
33920: LD_INT 1
33922: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33923: LD_ADDR_VAR 0 8
33927: PUSH
33928: LD_VAR 0 1
33932: PPUSH
33933: CALL 33620 0 1
33937: ST_TO_ADDR
// if tmp then
33938: LD_VAR 0 8
33942: IFFALSE 33985
// begin for i in tmp do
33944: LD_ADDR_VAR 0 7
33948: PUSH
33949: LD_VAR 0 8
33953: PUSH
33954: FOR_IN
33955: IFFALSE 33983
// if i [ 1 ] = b_ext_radio then
33957: LD_VAR 0 7
33961: PUSH
33962: LD_INT 1
33964: ARRAY
33965: PUSH
33966: LD_INT 22
33968: EQUAL
33969: IFFALSE 33981
// begin control := control_remote ;
33971: LD_ADDR_VAR 0 4
33975: PUSH
33976: LD_INT 2
33978: ST_TO_ADDR
// break ;
33979: GO 33983
// end ;
33981: GO 33954
33983: POP
33984: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33985: LD_VAR 0 1
33989: PPUSH
33990: LD_VAR 0 2
33994: PPUSH
33995: LD_VAR 0 3
33999: PPUSH
34000: LD_VAR 0 4
34004: PPUSH
34005: LD_VAR 0 5
34009: PPUSH
34010: CALL_OW 448
34014: IFFALSE 34049
// begin result := [ chassis , engine , control , weapon ] ;
34016: LD_ADDR_VAR 0 6
34020: PUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 3
34030: PUSH
34031: LD_VAR 0 4
34035: PUSH
34036: LD_VAR 0 5
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// exit ;
34047: GO 34471
// end ; _chassis := AvailableChassisList ( factory ) ;
34049: LD_ADDR_VAR 0 9
34053: PUSH
34054: LD_VAR 0 1
34058: PPUSH
34059: CALL_OW 475
34063: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34064: LD_ADDR_VAR 0 11
34068: PUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL_OW 476
34078: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34079: LD_ADDR_VAR 0 12
34083: PUSH
34084: LD_VAR 0 1
34088: PPUSH
34089: CALL_OW 477
34093: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34094: LD_ADDR_VAR 0 10
34098: PUSH
34099: LD_VAR 0 1
34103: PPUSH
34104: CALL_OW 478
34108: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34109: LD_VAR 0 9
34113: NOT
34114: IFTRUE 34123
34116: PUSH
34117: LD_VAR 0 11
34121: NOT
34122: OR
34123: IFTRUE 34132
34125: PUSH
34126: LD_VAR 0 12
34130: NOT
34131: OR
34132: IFTRUE 34141
34134: PUSH
34135: LD_VAR 0 10
34139: NOT
34140: OR
34141: IFFALSE 34176
// begin result := [ chassis , engine , control , weapon ] ;
34143: LD_ADDR_VAR 0 6
34147: PUSH
34148: LD_VAR 0 2
34152: PUSH
34153: LD_VAR 0 3
34157: PUSH
34158: LD_VAR 0 4
34162: PUSH
34163: LD_VAR 0 5
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: ST_TO_ADDR
// exit ;
34174: GO 34471
// end ; if not chassis in _chassis then
34176: LD_VAR 0 2
34180: PUSH
34181: LD_VAR 0 9
34185: IN
34186: NOT
34187: IFFALSE 34213
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34189: LD_ADDR_VAR 0 2
34193: PUSH
34194: LD_VAR 0 9
34198: PUSH
34199: LD_INT 1
34201: PPUSH
34202: LD_VAR 0 9
34206: PPUSH
34207: CALL_OW 12
34211: ARRAY
34212: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34213: LD_VAR 0 2
34217: PPUSH
34218: LD_VAR 0 3
34222: PPUSH
34223: CALL 34476 0 2
34227: NOT
34228: IFFALSE 34289
// repeat engine := _engine [ 1 ] ;
34230: LD_ADDR_VAR 0 3
34234: PUSH
34235: LD_VAR 0 11
34239: PUSH
34240: LD_INT 1
34242: ARRAY
34243: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34244: LD_ADDR_VAR 0 11
34248: PUSH
34249: LD_VAR 0 11
34253: PPUSH
34254: LD_INT 1
34256: PPUSH
34257: CALL_OW 3
34261: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34262: LD_VAR 0 2
34266: PPUSH
34267: LD_VAR 0 3
34271: PPUSH
34272: CALL 34476 0 2
34276: IFTRUE 34287
34278: PUSH
34279: LD_VAR 0 11
34283: PUSH
34284: EMPTY
34285: EQUAL
34286: OR
34287: IFFALSE 34230
// if not control in _control then
34289: LD_VAR 0 4
34293: PUSH
34294: LD_VAR 0 12
34298: IN
34299: NOT
34300: IFFALSE 34326
// control := _control [ rand ( 1 , _control ) ] ;
34302: LD_ADDR_VAR 0 4
34306: PUSH
34307: LD_VAR 0 12
34311: PUSH
34312: LD_INT 1
34314: PPUSH
34315: LD_VAR 0 12
34319: PPUSH
34320: CALL_OW 12
34324: ARRAY
34325: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34326: LD_VAR 0 2
34330: PPUSH
34331: LD_VAR 0 5
34335: PPUSH
34336: CALL 34698 0 2
34340: NOT
34341: IFFALSE 34402
// repeat weapon := _weapon [ 1 ] ;
34343: LD_ADDR_VAR 0 5
34347: PUSH
34348: LD_VAR 0 10
34352: PUSH
34353: LD_INT 1
34355: ARRAY
34356: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34357: LD_ADDR_VAR 0 10
34361: PUSH
34362: LD_VAR 0 10
34366: PPUSH
34367: LD_INT 1
34369: PPUSH
34370: CALL_OW 3
34374: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_VAR 0 5
34384: PPUSH
34385: CALL 34698 0 2
34389: IFTRUE 34400
34391: PUSH
34392: LD_VAR 0 10
34396: PUSH
34397: EMPTY
34398: EQUAL
34399: OR
34400: IFFALSE 34343
// result := [ ] ;
34402: LD_ADDR_VAR 0 6
34406: PUSH
34407: EMPTY
34408: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34409: LD_VAR 0 1
34413: PPUSH
34414: LD_VAR 0 2
34418: PPUSH
34419: LD_VAR 0 3
34423: PPUSH
34424: LD_VAR 0 4
34428: PPUSH
34429: LD_VAR 0 5
34433: PPUSH
34434: CALL_OW 448
34438: IFFALSE 34471
// result := [ chassis , engine , control , weapon ] ;
34440: LD_ADDR_VAR 0 6
34444: PUSH
34445: LD_VAR 0 2
34449: PUSH
34450: LD_VAR 0 3
34454: PUSH
34455: LD_VAR 0 4
34459: PUSH
34460: LD_VAR 0 5
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: ST_TO_ADDR
// end ;
34471: LD_VAR 0 6
34475: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34476: LD_INT 0
34478: PPUSH
// if not chassis or not engine then
34479: LD_VAR 0 1
34483: NOT
34484: IFTRUE 34493
34486: PUSH
34487: LD_VAR 0 2
34491: NOT
34492: OR
34493: IFFALSE 34497
// exit ;
34495: GO 34693
// case engine of engine_solar :
34497: LD_VAR 0 2
34501: PUSH
34502: LD_INT 2
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 34548
34510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34511: LD_ADDR_VAR 0 3
34515: PUSH
34516: LD_INT 11
34518: PUSH
34519: LD_INT 12
34521: PUSH
34522: LD_INT 13
34524: PUSH
34525: LD_INT 14
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: ST_TO_ADDR
34546: GO 34677
34548: LD_INT 1
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 34618
34556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_INT 11
34564: PUSH
34565: LD_INT 12
34567: PUSH
34568: LD_INT 13
34570: PUSH
34571: LD_INT 14
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: LD_INT 4
34585: PUSH
34586: LD_INT 5
34588: PUSH
34589: LD_INT 21
34591: PUSH
34592: LD_INT 23
34594: PUSH
34595: LD_INT 22
34597: PUSH
34598: LD_INT 24
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: ST_TO_ADDR
34616: GO 34677
34618: LD_INT 3
34620: DOUBLE
34621: EQUAL
34622: IFTRUE 34626
34624: GO 34676
34626: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_INT 13
34634: PUSH
34635: LD_INT 14
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: LD_INT 5
34649: PUSH
34650: LD_INT 21
34652: PUSH
34653: LD_INT 22
34655: PUSH
34656: LD_INT 23
34658: PUSH
34659: LD_INT 24
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
34674: GO 34677
34676: POP
// result := ( chassis in result ) ;
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_VAR 0 1
34686: PUSH
34687: LD_VAR 0 3
34691: IN
34692: ST_TO_ADDR
// end ;
34693: LD_VAR 0 3
34697: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34698: LD_INT 0
34700: PPUSH
// if not chassis or not weapon then
34701: LD_VAR 0 1
34705: NOT
34706: IFTRUE 34715
34708: PUSH
34709: LD_VAR 0 2
34713: NOT
34714: OR
34715: IFFALSE 34719
// exit ;
34717: GO 35813
// case weapon of us_machine_gun :
34719: LD_VAR 0 2
34723: PUSH
34724: LD_INT 2
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34762
34732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: ST_TO_ADDR
34760: GO 35797
34762: LD_INT 3
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34770
34768: GO 34800
34770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34771: LD_ADDR_VAR 0 3
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: LD_INT 5
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: ST_TO_ADDR
34798: GO 35797
34800: LD_INT 11
34802: DOUBLE
34803: EQUAL
34804: IFTRUE 34808
34806: GO 34838
34808: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34809: LD_ADDR_VAR 0 3
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 3
34822: PUSH
34823: LD_INT 4
34825: PUSH
34826: LD_INT 5
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: ST_TO_ADDR
34836: GO 35797
34838: LD_INT 4
34840: DOUBLE
34841: EQUAL
34842: IFTRUE 34846
34844: GO 34872
34846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34847: LD_ADDR_VAR 0 3
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: LD_INT 4
34860: PUSH
34861: LD_INT 5
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: ST_TO_ADDR
34870: GO 35797
34872: LD_INT 5
34874: DOUBLE
34875: EQUAL
34876: IFTRUE 34880
34878: GO 34906
34880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34881: LD_ADDR_VAR 0 3
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: LD_INT 4
34894: PUSH
34895: LD_INT 5
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
34904: GO 35797
34906: LD_INT 9
34908: DOUBLE
34909: EQUAL
34910: IFTRUE 34914
34912: GO 34940
34914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34915: LD_ADDR_VAR 0 3
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: LD_INT 4
34928: PUSH
34929: LD_INT 5
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
34938: GO 35797
34940: LD_INT 7
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34948
34946: GO 34974
34948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34949: LD_ADDR_VAR 0 3
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: LD_INT 4
34962: PUSH
34963: LD_INT 5
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: ST_TO_ADDR
34972: GO 35797
34974: LD_INT 12
34976: DOUBLE
34977: EQUAL
34978: IFTRUE 34982
34980: GO 35008
34982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34983: LD_ADDR_VAR 0 3
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 4
34996: PUSH
34997: LD_INT 5
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: ST_TO_ADDR
35006: GO 35797
35008: LD_INT 13
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35042
35016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: LD_INT 4
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
35040: GO 35797
35042: LD_INT 14
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35050
35048: GO 35068
35050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35051: LD_ADDR_VAR 0 3
35055: PUSH
35056: LD_INT 4
35058: PUSH
35059: LD_INT 5
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: ST_TO_ADDR
35066: GO 35797
35068: LD_INT 6
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35076
35074: GO 35094
35076: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_INT 4
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: ST_TO_ADDR
35092: GO 35797
35094: LD_INT 10
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35102
35100: GO 35120
35102: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35103: LD_ADDR_VAR 0 3
35107: PUSH
35108: LD_INT 4
35110: PUSH
35111: LD_INT 5
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: ST_TO_ADDR
35118: GO 35797
35120: LD_INT 22
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35154
35128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35129: LD_ADDR_VAR 0 3
35133: PUSH
35134: LD_INT 11
35136: PUSH
35137: LD_INT 12
35139: PUSH
35140: LD_INT 13
35142: PUSH
35143: LD_INT 14
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
35152: GO 35797
35154: LD_INT 23
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35188
35162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35163: LD_ADDR_VAR 0 3
35167: PUSH
35168: LD_INT 11
35170: PUSH
35171: LD_INT 12
35173: PUSH
35174: LD_INT 13
35176: PUSH
35177: LD_INT 14
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: ST_TO_ADDR
35186: GO 35797
35188: LD_INT 24
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35196
35194: GO 35222
35196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35197: LD_ADDR_VAR 0 3
35201: PUSH
35202: LD_INT 11
35204: PUSH
35205: LD_INT 12
35207: PUSH
35208: LD_INT 13
35210: PUSH
35211: LD_INT 14
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
35220: GO 35797
35222: LD_INT 30
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35230
35228: GO 35256
35230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35231: LD_ADDR_VAR 0 3
35235: PUSH
35236: LD_INT 11
35238: PUSH
35239: LD_INT 12
35241: PUSH
35242: LD_INT 13
35244: PUSH
35245: LD_INT 14
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
35254: GO 35797
35256: LD_INT 25
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35264
35262: GO 35282
35264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35265: LD_ADDR_VAR 0 3
35269: PUSH
35270: LD_INT 13
35272: PUSH
35273: LD_INT 14
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: ST_TO_ADDR
35280: GO 35797
35282: LD_INT 27
35284: DOUBLE
35285: EQUAL
35286: IFTRUE 35290
35288: GO 35308
35290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35291: LD_ADDR_VAR 0 3
35295: PUSH
35296: LD_INT 13
35298: PUSH
35299: LD_INT 14
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: ST_TO_ADDR
35306: GO 35797
35308: LD_INT 92
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35316
35314: GO 35342
35316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35317: LD_ADDR_VAR 0 3
35321: PUSH
35322: LD_INT 11
35324: PUSH
35325: LD_INT 12
35327: PUSH
35328: LD_INT 13
35330: PUSH
35331: LD_INT 14
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: ST_TO_ADDR
35340: GO 35797
35342: LD_INT 28
35344: DOUBLE
35345: EQUAL
35346: IFTRUE 35350
35348: GO 35368
35350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35351: LD_ADDR_VAR 0 3
35355: PUSH
35356: LD_INT 13
35358: PUSH
35359: LD_INT 14
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: ST_TO_ADDR
35366: GO 35797
35368: LD_INT 29
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35394
35376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_INT 13
35384: PUSH
35385: LD_INT 14
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: ST_TO_ADDR
35392: GO 35797
35394: LD_INT 31
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35402
35400: GO 35420
35402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35403: LD_ADDR_VAR 0 3
35407: PUSH
35408: LD_INT 13
35410: PUSH
35411: LD_INT 14
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: ST_TO_ADDR
35418: GO 35797
35420: LD_INT 26
35422: DOUBLE
35423: EQUAL
35424: IFTRUE 35428
35426: GO 35446
35428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35429: LD_ADDR_VAR 0 3
35433: PUSH
35434: LD_INT 13
35436: PUSH
35437: LD_INT 14
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: ST_TO_ADDR
35444: GO 35797
35446: LD_INT 42
35448: DOUBLE
35449: EQUAL
35450: IFTRUE 35454
35452: GO 35480
35454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35455: LD_ADDR_VAR 0 3
35459: PUSH
35460: LD_INT 21
35462: PUSH
35463: LD_INT 22
35465: PUSH
35466: LD_INT 23
35468: PUSH
35469: LD_INT 24
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: ST_TO_ADDR
35478: GO 35797
35480: LD_INT 43
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35488
35486: GO 35514
35488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35489: LD_ADDR_VAR 0 3
35493: PUSH
35494: LD_INT 21
35496: PUSH
35497: LD_INT 22
35499: PUSH
35500: LD_INT 23
35502: PUSH
35503: LD_INT 24
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
35512: GO 35797
35514: LD_INT 44
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35522
35520: GO 35548
35522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35523: LD_ADDR_VAR 0 3
35527: PUSH
35528: LD_INT 21
35530: PUSH
35531: LD_INT 22
35533: PUSH
35534: LD_INT 23
35536: PUSH
35537: LD_INT 24
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: ST_TO_ADDR
35546: GO 35797
35548: LD_INT 45
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35556
35554: GO 35582
35556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35557: LD_ADDR_VAR 0 3
35561: PUSH
35562: LD_INT 21
35564: PUSH
35565: LD_INT 22
35567: PUSH
35568: LD_INT 23
35570: PUSH
35571: LD_INT 24
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: ST_TO_ADDR
35580: GO 35797
35582: LD_INT 49
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35590
35588: GO 35616
35590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35591: LD_ADDR_VAR 0 3
35595: PUSH
35596: LD_INT 21
35598: PUSH
35599: LD_INT 22
35601: PUSH
35602: LD_INT 23
35604: PUSH
35605: LD_INT 24
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: ST_TO_ADDR
35614: GO 35797
35616: LD_INT 51
35618: DOUBLE
35619: EQUAL
35620: IFTRUE 35624
35622: GO 35650
35624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35625: LD_ADDR_VAR 0 3
35629: PUSH
35630: LD_INT 21
35632: PUSH
35633: LD_INT 22
35635: PUSH
35636: LD_INT 23
35638: PUSH
35639: LD_INT 24
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: ST_TO_ADDR
35648: GO 35797
35650: LD_INT 52
35652: DOUBLE
35653: EQUAL
35654: IFTRUE 35658
35656: GO 35684
35658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35659: LD_ADDR_VAR 0 3
35663: PUSH
35664: LD_INT 21
35666: PUSH
35667: LD_INT 22
35669: PUSH
35670: LD_INT 23
35672: PUSH
35673: LD_INT 24
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: ST_TO_ADDR
35682: GO 35797
35684: LD_INT 53
35686: DOUBLE
35687: EQUAL
35688: IFTRUE 35692
35690: GO 35710
35692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35693: LD_ADDR_VAR 0 3
35697: PUSH
35698: LD_INT 23
35700: PUSH
35701: LD_INT 24
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: ST_TO_ADDR
35708: GO 35797
35710: LD_INT 46
35712: DOUBLE
35713: EQUAL
35714: IFTRUE 35718
35716: GO 35736
35718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35719: LD_ADDR_VAR 0 3
35723: PUSH
35724: LD_INT 23
35726: PUSH
35727: LD_INT 24
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: ST_TO_ADDR
35734: GO 35797
35736: LD_INT 47
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35744
35742: GO 35762
35744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
35745: LD_ADDR_VAR 0 3
35749: PUSH
35750: LD_INT 23
35752: PUSH
35753: LD_INT 24
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: ST_TO_ADDR
35760: GO 35797
35762: LD_INT 98
35764: DOUBLE
35765: EQUAL
35766: IFTRUE 35770
35768: GO 35796
35770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35771: LD_ADDR_VAR 0 3
35775: PUSH
35776: LD_INT 21
35778: PUSH
35779: LD_INT 22
35781: PUSH
35782: LD_INT 23
35784: PUSH
35785: LD_INT 24
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: ST_TO_ADDR
35794: GO 35797
35796: POP
// result := ( chassis in result ) ;
35797: LD_ADDR_VAR 0 3
35801: PUSH
35802: LD_VAR 0 1
35806: PUSH
35807: LD_VAR 0 3
35811: IN
35812: ST_TO_ADDR
// end ;
35813: LD_VAR 0 3
35817: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35818: LD_INT 0
35820: PPUSH
35821: PPUSH
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
// result := array ;
35827: LD_ADDR_VAR 0 5
35831: PUSH
35832: LD_VAR 0 1
35836: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35837: LD_VAR 0 1
35841: NOT
35842: IFTRUE 35851
35844: PUSH
35845: LD_VAR 0 2
35849: NOT
35850: OR
35851: IFTRUE 35860
35853: PUSH
35854: LD_VAR 0 3
35858: NOT
35859: OR
35860: IFTRUE 35874
35862: PUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_VAR 0 1
35872: GREATER
35873: OR
35874: IFTRUE 35888
35876: PUSH
35877: LD_VAR 0 3
35881: PUSH
35882: LD_VAR 0 1
35886: GREATER
35887: OR
35888: IFFALSE 35892
// exit ;
35890: GO 36188
// if direction then
35892: LD_VAR 0 4
35896: IFFALSE 35960
// begin d := 1 ;
35898: LD_ADDR_VAR 0 9
35902: PUSH
35903: LD_INT 1
35905: ST_TO_ADDR
// if i_from > i_to then
35906: LD_VAR 0 2
35910: PUSH
35911: LD_VAR 0 3
35915: GREATER
35916: IFFALSE 35942
// length := ( array - i_from ) + i_to else
35918: LD_ADDR_VAR 0 11
35922: PUSH
35923: LD_VAR 0 1
35927: PUSH
35928: LD_VAR 0 2
35932: MINUS
35933: PUSH
35934: LD_VAR 0 3
35938: PLUS
35939: ST_TO_ADDR
35940: GO 35958
// length := i_to - i_from ;
35942: LD_ADDR_VAR 0 11
35946: PUSH
35947: LD_VAR 0 3
35951: PUSH
35952: LD_VAR 0 2
35956: MINUS
35957: ST_TO_ADDR
// end else
35958: GO 36021
// begin d := - 1 ;
35960: LD_ADDR_VAR 0 9
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: ST_TO_ADDR
// if i_from > i_to then
35969: LD_VAR 0 2
35973: PUSH
35974: LD_VAR 0 3
35978: GREATER
35979: IFFALSE 35999
// length := i_from - i_to else
35981: LD_ADDR_VAR 0 11
35985: PUSH
35986: LD_VAR 0 2
35990: PUSH
35991: LD_VAR 0 3
35995: MINUS
35996: ST_TO_ADDR
35997: GO 36021
// length := ( array - i_to ) + i_from ;
35999: LD_ADDR_VAR 0 11
36003: PUSH
36004: LD_VAR 0 1
36008: PUSH
36009: LD_VAR 0 3
36013: MINUS
36014: PUSH
36015: LD_VAR 0 2
36019: PLUS
36020: ST_TO_ADDR
// end ; if not length then
36021: LD_VAR 0 11
36025: NOT
36026: IFFALSE 36030
// exit ;
36028: GO 36188
// tmp := array ;
36030: LD_ADDR_VAR 0 10
36034: PUSH
36035: LD_VAR 0 1
36039: ST_TO_ADDR
// for i = 1 to length do
36040: LD_ADDR_VAR 0 6
36044: PUSH
36045: DOUBLE
36046: LD_INT 1
36048: DEC
36049: ST_TO_ADDR
36050: LD_VAR 0 11
36054: PUSH
36055: FOR_TO
36056: IFFALSE 36176
// begin for j = 1 to array do
36058: LD_ADDR_VAR 0 7
36062: PUSH
36063: DOUBLE
36064: LD_INT 1
36066: DEC
36067: ST_TO_ADDR
36068: LD_VAR 0 1
36072: PUSH
36073: FOR_TO
36074: IFFALSE 36162
// begin k := j + d ;
36076: LD_ADDR_VAR 0 8
36080: PUSH
36081: LD_VAR 0 7
36085: PUSH
36086: LD_VAR 0 9
36090: PLUS
36091: ST_TO_ADDR
// if k > array then
36092: LD_VAR 0 8
36096: PUSH
36097: LD_VAR 0 1
36101: GREATER
36102: IFFALSE 36112
// k := 1 ;
36104: LD_ADDR_VAR 0 8
36108: PUSH
36109: LD_INT 1
36111: ST_TO_ADDR
// if not k then
36112: LD_VAR 0 8
36116: NOT
36117: IFFALSE 36129
// k := array ;
36119: LD_ADDR_VAR 0 8
36123: PUSH
36124: LD_VAR 0 1
36128: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36129: LD_ADDR_VAR 0 10
36133: PUSH
36134: LD_VAR 0 10
36138: PPUSH
36139: LD_VAR 0 8
36143: PPUSH
36144: LD_VAR 0 1
36148: PUSH
36149: LD_VAR 0 7
36153: ARRAY
36154: PPUSH
36155: CALL_OW 1
36159: ST_TO_ADDR
// end ;
36160: GO 36073
36162: POP
36163: POP
// array := tmp ;
36164: LD_ADDR_VAR 0 1
36168: PUSH
36169: LD_VAR 0 10
36173: ST_TO_ADDR
// end ;
36174: GO 36055
36176: POP
36177: POP
// result := array ;
36178: LD_ADDR_VAR 0 5
36182: PUSH
36183: LD_VAR 0 1
36187: ST_TO_ADDR
// end ;
36188: LD_VAR 0 5
36192: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36193: LD_INT 0
36195: PPUSH
36196: PPUSH
// result := 0 ;
36197: LD_ADDR_VAR 0 3
36201: PUSH
36202: LD_INT 0
36204: ST_TO_ADDR
// if not array or not value in array then
36205: LD_VAR 0 1
36209: NOT
36210: IFTRUE 36225
36212: PUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_VAR 0 1
36222: IN
36223: NOT
36224: OR
36225: IFFALSE 36229
// exit ;
36227: GO 36283
// for i = 1 to array do
36229: LD_ADDR_VAR 0 4
36233: PUSH
36234: DOUBLE
36235: LD_INT 1
36237: DEC
36238: ST_TO_ADDR
36239: LD_VAR 0 1
36243: PUSH
36244: FOR_TO
36245: IFFALSE 36281
// if value = array [ i ] then
36247: LD_VAR 0 2
36251: PUSH
36252: LD_VAR 0 1
36256: PUSH
36257: LD_VAR 0 4
36261: ARRAY
36262: EQUAL
36263: IFFALSE 36279
// begin result := i ;
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_VAR 0 4
36274: ST_TO_ADDR
// exit ;
36275: POP
36276: POP
36277: GO 36283
// end ;
36279: GO 36244
36281: POP
36282: POP
// end ;
36283: LD_VAR 0 3
36287: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36288: LD_INT 0
36290: PPUSH
// vc_chassis := chassis ;
36291: LD_ADDR_OWVAR 37
36295: PUSH
36296: LD_VAR 0 1
36300: ST_TO_ADDR
// vc_engine := engine ;
36301: LD_ADDR_OWVAR 39
36305: PUSH
36306: LD_VAR 0 2
36310: ST_TO_ADDR
// vc_control := control ;
36311: LD_ADDR_OWVAR 38
36315: PUSH
36316: LD_VAR 0 3
36320: ST_TO_ADDR
// vc_weapon := weapon ;
36321: LD_ADDR_OWVAR 40
36325: PUSH
36326: LD_VAR 0 4
36330: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36331: LD_ADDR_OWVAR 41
36335: PUSH
36336: LD_VAR 0 5
36340: ST_TO_ADDR
// end ;
36341: LD_VAR 0 6
36345: RET
// export function WantPlant ( unit ) ; var task ; begin
36346: LD_INT 0
36348: PPUSH
36349: PPUSH
// result := false ;
36350: LD_ADDR_VAR 0 2
36354: PUSH
36355: LD_INT 0
36357: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36358: LD_ADDR_VAR 0 3
36362: PUSH
36363: LD_VAR 0 1
36367: PPUSH
36368: CALL_OW 437
36372: ST_TO_ADDR
// if task then
36373: LD_VAR 0 3
36377: IFFALSE 36405
// if task [ 1 ] [ 1 ] = p then
36379: LD_VAR 0 3
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: PUSH
36388: LD_INT 1
36390: ARRAY
36391: PUSH
36392: LD_STRING p
36394: EQUAL
36395: IFFALSE 36405
// result := true ;
36397: LD_ADDR_VAR 0 2
36401: PUSH
36402: LD_INT 1
36404: ST_TO_ADDR
// end ;
36405: LD_VAR 0 2
36409: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36410: LD_INT 0
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
// if pos < 1 then
36416: LD_VAR 0 2
36420: PUSH
36421: LD_INT 1
36423: LESS
36424: IFFALSE 36428
// exit ;
36426: GO 36731
// if pos = 1 then
36428: LD_VAR 0 2
36432: PUSH
36433: LD_INT 1
36435: EQUAL
36436: IFFALSE 36469
// result := Replace ( arr , pos [ 1 ] , value ) else
36438: LD_ADDR_VAR 0 4
36442: PUSH
36443: LD_VAR 0 1
36447: PPUSH
36448: LD_VAR 0 2
36452: PUSH
36453: LD_INT 1
36455: ARRAY
36456: PPUSH
36457: LD_VAR 0 3
36461: PPUSH
36462: CALL_OW 1
36466: ST_TO_ADDR
36467: GO 36731
// begin tmp := arr ;
36469: LD_ADDR_VAR 0 6
36473: PUSH
36474: LD_VAR 0 1
36478: ST_TO_ADDR
// s_arr := [ tmp ] ;
36479: LD_ADDR_VAR 0 7
36483: PUSH
36484: LD_VAR 0 6
36488: PUSH
36489: EMPTY
36490: LIST
36491: ST_TO_ADDR
// for i = 1 to pos - 1 do
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: DOUBLE
36498: LD_INT 1
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 2
36506: PUSH
36507: LD_INT 1
36509: MINUS
36510: PUSH
36511: FOR_TO
36512: IFFALSE 36557
// begin tmp := tmp [ pos [ i ] ] ;
36514: LD_ADDR_VAR 0 6
36518: PUSH
36519: LD_VAR 0 6
36523: PUSH
36524: LD_VAR 0 2
36528: PUSH
36529: LD_VAR 0 5
36533: ARRAY
36534: ARRAY
36535: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36536: LD_ADDR_VAR 0 7
36540: PUSH
36541: LD_VAR 0 7
36545: PUSH
36546: LD_VAR 0 6
36550: PUSH
36551: EMPTY
36552: LIST
36553: ADD
36554: ST_TO_ADDR
// end ;
36555: GO 36511
36557: POP
36558: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36559: LD_ADDR_VAR 0 6
36563: PUSH
36564: LD_VAR 0 6
36568: PPUSH
36569: LD_VAR 0 2
36573: PUSH
36574: LD_VAR 0 2
36578: ARRAY
36579: PPUSH
36580: LD_VAR 0 3
36584: PPUSH
36585: CALL_OW 1
36589: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36590: LD_ADDR_VAR 0 7
36594: PUSH
36595: LD_VAR 0 7
36599: PPUSH
36600: LD_VAR 0 7
36604: PPUSH
36605: LD_VAR 0 6
36609: PPUSH
36610: CALL_OW 1
36614: ST_TO_ADDR
// for i = s_arr downto 2 do
36615: LD_ADDR_VAR 0 5
36619: PUSH
36620: DOUBLE
36621: LD_VAR 0 7
36625: INC
36626: ST_TO_ADDR
36627: LD_INT 2
36629: PUSH
36630: FOR_DOWNTO
36631: IFFALSE 36715
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36633: LD_ADDR_VAR 0 6
36637: PUSH
36638: LD_VAR 0 7
36642: PUSH
36643: LD_VAR 0 5
36647: PUSH
36648: LD_INT 1
36650: MINUS
36651: ARRAY
36652: PPUSH
36653: LD_VAR 0 2
36657: PUSH
36658: LD_VAR 0 5
36662: PUSH
36663: LD_INT 1
36665: MINUS
36666: ARRAY
36667: PPUSH
36668: LD_VAR 0 7
36672: PUSH
36673: LD_VAR 0 5
36677: ARRAY
36678: PPUSH
36679: CALL_OW 1
36683: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36684: LD_ADDR_VAR 0 7
36688: PUSH
36689: LD_VAR 0 7
36693: PPUSH
36694: LD_VAR 0 5
36698: PUSH
36699: LD_INT 1
36701: MINUS
36702: PPUSH
36703: LD_VAR 0 6
36707: PPUSH
36708: CALL_OW 1
36712: ST_TO_ADDR
// end ;
36713: GO 36630
36715: POP
36716: POP
// result := s_arr [ 1 ] ;
36717: LD_ADDR_VAR 0 4
36721: PUSH
36722: LD_VAR 0 7
36726: PUSH
36727: LD_INT 1
36729: ARRAY
36730: ST_TO_ADDR
// end ; end ;
36731: LD_VAR 0 4
36735: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36736: LD_INT 0
36738: PPUSH
36739: PPUSH
// if not list then
36740: LD_VAR 0 1
36744: NOT
36745: IFFALSE 36749
// exit ;
36747: GO 36840
// i := list [ pos1 ] ;
36749: LD_ADDR_VAR 0 5
36753: PUSH
36754: LD_VAR 0 1
36758: PUSH
36759: LD_VAR 0 2
36763: ARRAY
36764: ST_TO_ADDR
// if not i then
36765: LD_VAR 0 5
36769: NOT
36770: IFFALSE 36774
// exit ;
36772: GO 36840
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36774: LD_ADDR_VAR 0 1
36778: PUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: LD_VAR 0 2
36788: PPUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_VAR 0 3
36798: ARRAY
36799: PPUSH
36800: CALL_OW 1
36804: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36805: LD_ADDR_VAR 0 1
36809: PUSH
36810: LD_VAR 0 1
36814: PPUSH
36815: LD_VAR 0 3
36819: PPUSH
36820: LD_VAR 0 5
36824: PPUSH
36825: CALL_OW 1
36829: ST_TO_ADDR
// result := list ;
36830: LD_ADDR_VAR 0 4
36834: PUSH
36835: LD_VAR 0 1
36839: ST_TO_ADDR
// end ;
36840: LD_VAR 0 4
36844: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36845: LD_INT 0
36847: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36848: LD_ADDR_VAR 0 5
36852: PUSH
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 250
36862: PPUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 251
36872: PPUSH
36873: LD_VAR 0 2
36877: PPUSH
36878: LD_VAR 0 3
36882: PPUSH
36883: LD_VAR 0 4
36887: PPUSH
36888: CALL 37270 0 5
36892: ST_TO_ADDR
// end ;
36893: LD_VAR 0 5
36897: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36898: LD_INT 0
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
// if not list or not unit then
36904: LD_VAR 0 2
36908: NOT
36909: IFTRUE 36918
36911: PUSH
36912: LD_VAR 0 1
36916: NOT
36917: OR
36918: IFFALSE 36922
// exit ;
36920: GO 37265
// result := [ ] ;
36922: LD_ADDR_VAR 0 5
36926: PUSH
36927: EMPTY
36928: ST_TO_ADDR
// for i in list do
36929: LD_ADDR_VAR 0 6
36933: PUSH
36934: LD_VAR 0 2
36938: PUSH
36939: FOR_IN
36940: IFFALSE 37158
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36942: LD_ADDR_VAR 0 8
36946: PUSH
36947: LD_VAR 0 1
36951: PPUSH
36952: LD_VAR 0 6
36956: PUSH
36957: LD_INT 1
36959: ARRAY
36960: PPUSH
36961: LD_VAR 0 6
36965: PUSH
36966: LD_INT 2
36968: ARRAY
36969: PPUSH
36970: CALL_OW 297
36974: ST_TO_ADDR
// if not Count ( result ) then
36975: LD_VAR 0 5
36979: PPUSH
36980: CALL 33492 0 1
36984: NOT
36985: IFFALSE 37018
// begin result := Join ( result , [ i , tmp ] ) ;
36987: LD_ADDR_VAR 0 5
36991: PUSH
36992: LD_VAR 0 5
36996: PPUSH
36997: LD_VAR 0 6
37001: PUSH
37002: LD_VAR 0 8
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PPUSH
37011: CALL 69468 0 2
37015: ST_TO_ADDR
// continue ;
37016: GO 36939
// end ; if result [ result ] [ 2 ] <= tmp then
37018: LD_VAR 0 5
37022: PUSH
37023: LD_VAR 0 5
37027: ARRAY
37028: PUSH
37029: LD_INT 2
37031: ARRAY
37032: PUSH
37033: LD_VAR 0 8
37037: LESSEQUAL
37038: IFFALSE 37071
// result := Join ( result , [ i , tmp ] ) else
37040: LD_ADDR_VAR 0 5
37044: PUSH
37045: LD_VAR 0 5
37049: PPUSH
37050: LD_VAR 0 6
37054: PUSH
37055: LD_VAR 0 8
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PPUSH
37064: CALL 69468 0 2
37068: ST_TO_ADDR
37069: GO 37156
// begin for j := 1 to Count ( result ) do
37071: LD_ADDR_VAR 0 7
37075: PUSH
37076: DOUBLE
37077: LD_INT 1
37079: DEC
37080: ST_TO_ADDR
37081: LD_VAR 0 5
37085: PPUSH
37086: CALL 33492 0 1
37090: PUSH
37091: FOR_TO
37092: IFFALSE 37154
// begin if tmp < result [ j ] [ 2 ] then
37094: LD_VAR 0 8
37098: PUSH
37099: LD_VAR 0 5
37103: PUSH
37104: LD_VAR 0 7
37108: ARRAY
37109: PUSH
37110: LD_INT 2
37112: ARRAY
37113: LESS
37114: IFFALSE 37152
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37116: LD_ADDR_VAR 0 5
37120: PUSH
37121: LD_VAR 0 5
37125: PPUSH
37126: LD_VAR 0 7
37130: PPUSH
37131: LD_VAR 0 6
37135: PUSH
37136: LD_VAR 0 8
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PPUSH
37145: CALL_OW 2
37149: ST_TO_ADDR
// break ;
37150: GO 37154
// end ; end ;
37152: GO 37091
37154: POP
37155: POP
// end ; end ;
37156: GO 36939
37158: POP
37159: POP
// if result and not asc then
37160: LD_VAR 0 5
37164: IFFALSE 37173
37166: PUSH
37167: LD_VAR 0 3
37171: NOT
37172: AND
37173: IFFALSE 37190
// result := ReverseArray ( result ) ;
37175: LD_ADDR_VAR 0 5
37179: PUSH
37180: LD_VAR 0 5
37184: PPUSH
37185: CALL 64548 0 1
37189: ST_TO_ADDR
// tmp := [ ] ;
37190: LD_ADDR_VAR 0 8
37194: PUSH
37195: EMPTY
37196: ST_TO_ADDR
// if mode then
37197: LD_VAR 0 4
37201: IFFALSE 37265
// begin for i := 1 to result do
37203: LD_ADDR_VAR 0 6
37207: PUSH
37208: DOUBLE
37209: LD_INT 1
37211: DEC
37212: ST_TO_ADDR
37213: LD_VAR 0 5
37217: PUSH
37218: FOR_TO
37219: IFFALSE 37253
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37221: LD_ADDR_VAR 0 8
37225: PUSH
37226: LD_VAR 0 8
37230: PPUSH
37231: LD_VAR 0 5
37235: PUSH
37236: LD_VAR 0 6
37240: ARRAY
37241: PUSH
37242: LD_INT 1
37244: ARRAY
37245: PPUSH
37246: CALL 69468 0 2
37250: ST_TO_ADDR
37251: GO 37218
37253: POP
37254: POP
// result := tmp ;
37255: LD_ADDR_VAR 0 5
37259: PUSH
37260: LD_VAR 0 8
37264: ST_TO_ADDR
// end ; end ;
37265: LD_VAR 0 5
37269: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37270: LD_INT 0
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
// if not list then
37276: LD_VAR 0 3
37280: NOT
37281: IFFALSE 37285
// exit ;
37283: GO 37675
// result := [ ] ;
37285: LD_ADDR_VAR 0 6
37289: PUSH
37290: EMPTY
37291: ST_TO_ADDR
// for i in list do
37292: LD_ADDR_VAR 0 7
37296: PUSH
37297: LD_VAR 0 3
37301: PUSH
37302: FOR_IN
37303: IFFALSE 37505
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37305: LD_ADDR_VAR 0 9
37309: PUSH
37310: LD_VAR 0 7
37314: PPUSH
37315: LD_VAR 0 1
37319: PPUSH
37320: LD_VAR 0 2
37324: PPUSH
37325: CALL_OW 297
37329: ST_TO_ADDR
// if not result then
37330: LD_VAR 0 6
37334: NOT
37335: IFFALSE 37361
// result := [ [ i , tmp ] ] else
37337: LD_ADDR_VAR 0 6
37341: PUSH
37342: LD_VAR 0 7
37346: PUSH
37347: LD_VAR 0 9
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: ST_TO_ADDR
37359: GO 37503
// begin if result [ result ] [ 2 ] <= tmp then
37361: LD_VAR 0 6
37365: PUSH
37366: LD_VAR 0 6
37370: ARRAY
37371: PUSH
37372: LD_INT 2
37374: ARRAY
37375: PUSH
37376: LD_VAR 0 9
37380: LESSEQUAL
37381: IFFALSE 37423
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37383: LD_ADDR_VAR 0 6
37387: PUSH
37388: LD_VAR 0 6
37392: PPUSH
37393: LD_VAR 0 6
37397: PUSH
37398: LD_INT 1
37400: PLUS
37401: PPUSH
37402: LD_VAR 0 7
37406: PUSH
37407: LD_VAR 0 9
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PPUSH
37416: CALL_OW 2
37420: ST_TO_ADDR
37421: GO 37503
// for j := 1 to result do
37423: LD_ADDR_VAR 0 8
37427: PUSH
37428: DOUBLE
37429: LD_INT 1
37431: DEC
37432: ST_TO_ADDR
37433: LD_VAR 0 6
37437: PUSH
37438: FOR_TO
37439: IFFALSE 37501
// begin if tmp < result [ j ] [ 2 ] then
37441: LD_VAR 0 9
37445: PUSH
37446: LD_VAR 0 6
37450: PUSH
37451: LD_VAR 0 8
37455: ARRAY
37456: PUSH
37457: LD_INT 2
37459: ARRAY
37460: LESS
37461: IFFALSE 37499
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37463: LD_ADDR_VAR 0 6
37467: PUSH
37468: LD_VAR 0 6
37472: PPUSH
37473: LD_VAR 0 8
37477: PPUSH
37478: LD_VAR 0 7
37482: PUSH
37483: LD_VAR 0 9
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PPUSH
37492: CALL_OW 2
37496: ST_TO_ADDR
// break ;
37497: GO 37501
// end ; end ;
37499: GO 37438
37501: POP
37502: POP
// end ; end ;
37503: GO 37302
37505: POP
37506: POP
// if result and not asc then
37507: LD_VAR 0 6
37511: IFFALSE 37520
37513: PUSH
37514: LD_VAR 0 4
37518: NOT
37519: AND
37520: IFFALSE 37595
// begin tmp := result ;
37522: LD_ADDR_VAR 0 9
37526: PUSH
37527: LD_VAR 0 6
37531: ST_TO_ADDR
// for i = tmp downto 1 do
37532: LD_ADDR_VAR 0 7
37536: PUSH
37537: DOUBLE
37538: LD_VAR 0 9
37542: INC
37543: ST_TO_ADDR
37544: LD_INT 1
37546: PUSH
37547: FOR_DOWNTO
37548: IFFALSE 37593
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37550: LD_ADDR_VAR 0 6
37554: PUSH
37555: LD_VAR 0 6
37559: PPUSH
37560: LD_VAR 0 9
37564: PUSH
37565: LD_VAR 0 7
37569: MINUS
37570: PUSH
37571: LD_INT 1
37573: PLUS
37574: PPUSH
37575: LD_VAR 0 9
37579: PUSH
37580: LD_VAR 0 7
37584: ARRAY
37585: PPUSH
37586: CALL_OW 1
37590: ST_TO_ADDR
37591: GO 37547
37593: POP
37594: POP
// end ; tmp := [ ] ;
37595: LD_ADDR_VAR 0 9
37599: PUSH
37600: EMPTY
37601: ST_TO_ADDR
// if mode then
37602: LD_VAR 0 5
37606: IFFALSE 37675
// begin for i = 1 to result do
37608: LD_ADDR_VAR 0 7
37612: PUSH
37613: DOUBLE
37614: LD_INT 1
37616: DEC
37617: ST_TO_ADDR
37618: LD_VAR 0 6
37622: PUSH
37623: FOR_TO
37624: IFFALSE 37663
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37626: LD_ADDR_VAR 0 9
37630: PUSH
37631: LD_VAR 0 9
37635: PPUSH
37636: LD_VAR 0 7
37640: PPUSH
37641: LD_VAR 0 6
37645: PUSH
37646: LD_VAR 0 7
37650: ARRAY
37651: PUSH
37652: LD_INT 1
37654: ARRAY
37655: PPUSH
37656: CALL_OW 1
37660: ST_TO_ADDR
37661: GO 37623
37663: POP
37664: POP
// result := tmp ;
37665: LD_ADDR_VAR 0 6
37669: PUSH
37670: LD_VAR 0 9
37674: ST_TO_ADDR
// end ; end ;
37675: LD_VAR 0 6
37679: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37680: LD_INT 0
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37688: LD_ADDR_VAR 0 5
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
// if not x or not y then
37710: LD_VAR 0 2
37714: NOT
37715: IFTRUE 37724
37717: PUSH
37718: LD_VAR 0 3
37722: NOT
37723: OR
37724: IFFALSE 37728
// exit ;
37726: GO 39384
// if not range then
37728: LD_VAR 0 4
37732: NOT
37733: IFFALSE 37743
// range := 10 ;
37735: LD_ADDR_VAR 0 4
37739: PUSH
37740: LD_INT 10
37742: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37743: LD_ADDR_VAR 0 8
37747: PUSH
37748: LD_INT 81
37750: PUSH
37751: LD_VAR 0 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 92
37762: PUSH
37763: LD_VAR 0 2
37767: PUSH
37768: LD_VAR 0 3
37772: PUSH
37773: LD_VAR 0 4
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: LD_INT 21
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: PPUSH
37806: CALL_OW 69
37810: ST_TO_ADDR
// if not tmp then
37811: LD_VAR 0 8
37815: NOT
37816: IFFALSE 37820
// exit ;
37818: GO 39384
// for i in tmp do
37820: LD_ADDR_VAR 0 6
37824: PUSH
37825: LD_VAR 0 8
37829: PUSH
37830: FOR_IN
37831: IFFALSE 39359
// begin points := [ 0 , 0 , 0 ] ;
37833: LD_ADDR_VAR 0 9
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// bpoints := 1 ;
37852: LD_ADDR_VAR 0 10
37856: PUSH
37857: LD_INT 1
37859: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37860: LD_VAR 0 6
37864: PPUSH
37865: CALL_OW 247
37869: PUSH
37870: LD_INT 1
37872: DOUBLE
37873: EQUAL
37874: IFTRUE 37878
37876: GO 38460
37878: POP
// begin if GetClass ( i ) = 1 then
37879: LD_VAR 0 6
37883: PPUSH
37884: CALL_OW 257
37888: PUSH
37889: LD_INT 1
37891: EQUAL
37892: IFFALSE 37913
// points := [ 10 , 5 , 3 ] ;
37894: LD_ADDR_VAR 0 9
37898: PUSH
37899: LD_INT 10
37901: PUSH
37902: LD_INT 5
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37913: LD_VAR 0 6
37917: PPUSH
37918: CALL_OW 257
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: IN
37937: IFFALSE 37958
// points := [ 3 , 2 , 1 ] ;
37939: LD_ADDR_VAR 0 9
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37958: LD_VAR 0 6
37962: PPUSH
37963: CALL_OW 257
37967: PUSH
37968: LD_INT 5
37970: EQUAL
37971: IFFALSE 37992
// points := [ 130 , 5 , 2 ] ;
37973: LD_ADDR_VAR 0 9
37977: PUSH
37978: LD_INT 130
37980: PUSH
37981: LD_INT 5
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37992: LD_VAR 0 6
37996: PPUSH
37997: CALL_OW 257
38001: PUSH
38002: LD_INT 8
38004: EQUAL
38005: IFFALSE 38026
// points := [ 35 , 35 , 30 ] ;
38007: LD_ADDR_VAR 0 9
38011: PUSH
38012: LD_INT 35
38014: PUSH
38015: LD_INT 35
38017: PUSH
38018: LD_INT 30
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38026: LD_VAR 0 6
38030: PPUSH
38031: CALL_OW 257
38035: PUSH
38036: LD_INT 9
38038: EQUAL
38039: IFFALSE 38060
// points := [ 20 , 55 , 40 ] ;
38041: LD_ADDR_VAR 0 9
38045: PUSH
38046: LD_INT 20
38048: PUSH
38049: LD_INT 55
38051: PUSH
38052: LD_INT 40
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38060: LD_VAR 0 6
38064: PPUSH
38065: CALL_OW 257
38069: PUSH
38070: LD_INT 12
38072: PUSH
38073: LD_INT 16
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: IN
38080: IFFALSE 38101
// points := [ 5 , 3 , 2 ] ;
38082: LD_ADDR_VAR 0 9
38086: PUSH
38087: LD_INT 5
38089: PUSH
38090: LD_INT 3
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38101: LD_VAR 0 6
38105: PPUSH
38106: CALL_OW 257
38110: PUSH
38111: LD_INT 17
38113: EQUAL
38114: IFFALSE 38135
// points := [ 100 , 50 , 75 ] ;
38116: LD_ADDR_VAR 0 9
38120: PUSH
38121: LD_INT 100
38123: PUSH
38124: LD_INT 50
38126: PUSH
38127: LD_INT 75
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38135: LD_VAR 0 6
38139: PPUSH
38140: CALL_OW 257
38144: PUSH
38145: LD_INT 15
38147: EQUAL
38148: IFFALSE 38169
// points := [ 10 , 5 , 3 ] ;
38150: LD_ADDR_VAR 0 9
38154: PUSH
38155: LD_INT 10
38157: PUSH
38158: LD_INT 5
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38169: LD_VAR 0 6
38173: PPUSH
38174: CALL_OW 257
38178: PUSH
38179: LD_INT 14
38181: EQUAL
38182: IFFALSE 38203
// points := [ 10 , 0 , 0 ] ;
38184: LD_ADDR_VAR 0 9
38188: PUSH
38189: LD_INT 10
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38203: LD_VAR 0 6
38207: PPUSH
38208: CALL_OW 257
38212: PUSH
38213: LD_INT 11
38215: EQUAL
38216: IFFALSE 38237
// points := [ 30 , 10 , 5 ] ;
38218: LD_ADDR_VAR 0 9
38222: PUSH
38223: LD_INT 30
38225: PUSH
38226: LD_INT 10
38228: PUSH
38229: LD_INT 5
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38237: LD_VAR 0 1
38241: PPUSH
38242: LD_INT 5
38244: PPUSH
38245: CALL_OW 321
38249: PUSH
38250: LD_INT 2
38252: EQUAL
38253: IFFALSE 38270
// bpoints := bpoints * 1.8 ;
38255: LD_ADDR_VAR 0 10
38259: PUSH
38260: LD_VAR 0 10
38264: PUSH
38265: LD_REAL  1.80000000000000E+0000
38268: MUL
38269: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38270: LD_VAR 0 6
38274: PPUSH
38275: CALL_OW 257
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 3
38288: PUSH
38289: LD_INT 4
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: IN
38298: IFFALSE 38318
38300: PUSH
38301: LD_VAR 0 1
38305: PPUSH
38306: LD_INT 51
38308: PPUSH
38309: CALL_OW 321
38313: PUSH
38314: LD_INT 2
38316: EQUAL
38317: AND
38318: IFFALSE 38335
// bpoints := bpoints * 1.2 ;
38320: LD_ADDR_VAR 0 10
38324: PUSH
38325: LD_VAR 0 10
38329: PUSH
38330: LD_REAL  1.20000000000000E+0000
38333: MUL
38334: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38335: LD_VAR 0 6
38339: PPUSH
38340: CALL_OW 257
38344: PUSH
38345: LD_INT 5
38347: PUSH
38348: LD_INT 7
38350: PUSH
38351: LD_INT 9
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: IN
38359: IFFALSE 38379
38361: PUSH
38362: LD_VAR 0 1
38366: PPUSH
38367: LD_INT 52
38369: PPUSH
38370: CALL_OW 321
38374: PUSH
38375: LD_INT 2
38377: EQUAL
38378: AND
38379: IFFALSE 38396
// bpoints := bpoints * 1.5 ;
38381: LD_ADDR_VAR 0 10
38385: PUSH
38386: LD_VAR 0 10
38390: PUSH
38391: LD_REAL  1.50000000000000E+0000
38394: MUL
38395: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38396: LD_VAR 0 1
38400: PPUSH
38401: LD_INT 66
38403: PPUSH
38404: CALL_OW 321
38408: PUSH
38409: LD_INT 2
38411: EQUAL
38412: IFFALSE 38429
// bpoints := bpoints * 1.1 ;
38414: LD_ADDR_VAR 0 10
38418: PUSH
38419: LD_VAR 0 10
38423: PUSH
38424: LD_REAL  1.10000000000000E+0000
38427: MUL
38428: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38429: LD_ADDR_VAR 0 10
38433: PUSH
38434: LD_VAR 0 10
38438: PUSH
38439: LD_VAR 0 6
38443: PPUSH
38444: LD_INT 1
38446: PPUSH
38447: CALL_OW 259
38451: PUSH
38452: LD_REAL  1.15000000000000E+0000
38455: MUL
38456: MUL
38457: ST_TO_ADDR
// end ; unit_vehicle :
38458: GO 39288
38460: LD_INT 2
38462: DOUBLE
38463: EQUAL
38464: IFTRUE 38468
38466: GO 39276
38468: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38469: LD_VAR 0 6
38473: PPUSH
38474: CALL_OW 264
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 42
38484: PUSH
38485: LD_INT 24
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: IN
38493: IFFALSE 38514
// points := [ 25 , 5 , 3 ] ;
38495: LD_ADDR_VAR 0 9
38499: PUSH
38500: LD_INT 25
38502: PUSH
38503: LD_INT 5
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38514: LD_VAR 0 6
38518: PPUSH
38519: CALL_OW 264
38523: PUSH
38524: LD_INT 4
38526: PUSH
38527: LD_INT 43
38529: PUSH
38530: LD_INT 25
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: IN
38538: IFFALSE 38559
// points := [ 40 , 15 , 5 ] ;
38540: LD_ADDR_VAR 0 9
38544: PUSH
38545: LD_INT 40
38547: PUSH
38548: LD_INT 15
38550: PUSH
38551: LD_INT 5
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38559: LD_VAR 0 6
38563: PPUSH
38564: CALL_OW 264
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 23
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: IN
38579: IFFALSE 38600
// points := [ 7 , 25 , 8 ] ;
38581: LD_ADDR_VAR 0 9
38585: PUSH
38586: LD_INT 7
38588: PUSH
38589: LD_INT 25
38591: PUSH
38592: LD_INT 8
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38600: LD_VAR 0 6
38604: PPUSH
38605: CALL_OW 264
38609: PUSH
38610: LD_INT 5
38612: PUSH
38613: LD_INT 27
38615: PUSH
38616: LD_INT 44
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: IN
38624: IFFALSE 38645
// points := [ 14 , 50 , 16 ] ;
38626: LD_ADDR_VAR 0 9
38630: PUSH
38631: LD_INT 14
38633: PUSH
38634: LD_INT 50
38636: PUSH
38637: LD_INT 16
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38645: LD_VAR 0 6
38649: PPUSH
38650: CALL_OW 264
38654: PUSH
38655: LD_INT 6
38657: PUSH
38658: LD_INT 46
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: IN
38665: IFFALSE 38686
// points := [ 32 , 120 , 70 ] ;
38667: LD_ADDR_VAR 0 9
38671: PUSH
38672: LD_INT 32
38674: PUSH
38675: LD_INT 120
38677: PUSH
38678: LD_INT 70
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38686: LD_VAR 0 6
38690: PPUSH
38691: CALL_OW 264
38695: PUSH
38696: LD_INT 7
38698: PUSH
38699: LD_INT 28
38701: PUSH
38702: LD_INT 45
38704: PUSH
38705: LD_INT 92
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: IN
38714: IFFALSE 38735
// points := [ 35 , 20 , 45 ] ;
38716: LD_ADDR_VAR 0 9
38720: PUSH
38721: LD_INT 35
38723: PUSH
38724: LD_INT 20
38726: PUSH
38727: LD_INT 45
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38735: LD_VAR 0 6
38739: PPUSH
38740: CALL_OW 264
38744: PUSH
38745: LD_INT 47
38747: PUSH
38748: EMPTY
38749: LIST
38750: IN
38751: IFFALSE 38772
// points := [ 67 , 45 , 75 ] ;
38753: LD_ADDR_VAR 0 9
38757: PUSH
38758: LD_INT 67
38760: PUSH
38761: LD_INT 45
38763: PUSH
38764: LD_INT 75
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38772: LD_VAR 0 6
38776: PPUSH
38777: CALL_OW 264
38781: PUSH
38782: LD_INT 26
38784: PUSH
38785: EMPTY
38786: LIST
38787: IN
38788: IFFALSE 38809
// points := [ 120 , 30 , 80 ] ;
38790: LD_ADDR_VAR 0 9
38794: PUSH
38795: LD_INT 120
38797: PUSH
38798: LD_INT 30
38800: PUSH
38801: LD_INT 80
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38809: LD_VAR 0 6
38813: PPUSH
38814: CALL_OW 264
38818: PUSH
38819: LD_INT 22
38821: PUSH
38822: EMPTY
38823: LIST
38824: IN
38825: IFFALSE 38846
// points := [ 40 , 1 , 1 ] ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_INT 40
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38846: LD_VAR 0 6
38850: PPUSH
38851: CALL_OW 264
38855: PUSH
38856: LD_INT 29
38858: PUSH
38859: EMPTY
38860: LIST
38861: IN
38862: IFFALSE 38883
// points := [ 70 , 200 , 400 ] ;
38864: LD_ADDR_VAR 0 9
38868: PUSH
38869: LD_INT 70
38871: PUSH
38872: LD_INT 200
38874: PUSH
38875: LD_INT 400
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38883: LD_VAR 0 6
38887: PPUSH
38888: CALL_OW 264
38892: PUSH
38893: LD_INT 14
38895: PUSH
38896: LD_INT 53
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: IN
38903: IFFALSE 38924
// points := [ 40 , 10 , 20 ] ;
38905: LD_ADDR_VAR 0 9
38909: PUSH
38910: LD_INT 40
38912: PUSH
38913: LD_INT 10
38915: PUSH
38916: LD_INT 20
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38924: LD_VAR 0 6
38928: PPUSH
38929: CALL_OW 264
38933: PUSH
38934: LD_INT 9
38936: PUSH
38937: EMPTY
38938: LIST
38939: IN
38940: IFFALSE 38961
// points := [ 5 , 70 , 20 ] ;
38942: LD_ADDR_VAR 0 9
38946: PUSH
38947: LD_INT 5
38949: PUSH
38950: LD_INT 70
38952: PUSH
38953: LD_INT 20
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38961: LD_VAR 0 6
38965: PPUSH
38966: CALL_OW 264
38970: PUSH
38971: LD_INT 10
38973: PUSH
38974: EMPTY
38975: LIST
38976: IN
38977: IFFALSE 38998
// points := [ 35 , 110 , 70 ] ;
38979: LD_ADDR_VAR 0 9
38983: PUSH
38984: LD_INT 35
38986: PUSH
38987: LD_INT 110
38989: PUSH
38990: LD_INT 70
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38998: LD_VAR 0 6
39002: PPUSH
39003: CALL_OW 265
39007: PUSH
39008: LD_INT 25
39010: EQUAL
39011: IFFALSE 39032
// points := [ 80 , 65 , 100 ] ;
39013: LD_ADDR_VAR 0 9
39017: PUSH
39018: LD_INT 80
39020: PUSH
39021: LD_INT 65
39023: PUSH
39024: LD_INT 100
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39032: LD_VAR 0 6
39036: PPUSH
39037: CALL_OW 263
39041: PUSH
39042: LD_INT 1
39044: EQUAL
39045: IFFALSE 39080
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39047: LD_ADDR_VAR 0 10
39051: PUSH
39052: LD_VAR 0 10
39056: PUSH
39057: LD_VAR 0 6
39061: PPUSH
39062: CALL_OW 311
39066: PPUSH
39067: LD_INT 3
39069: PPUSH
39070: CALL_OW 259
39074: PUSH
39075: LD_INT 4
39077: MUL
39078: MUL
39079: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39080: LD_VAR 0 6
39084: PPUSH
39085: CALL_OW 263
39089: PUSH
39090: LD_INT 2
39092: EQUAL
39093: IFFALSE 39144
// begin j := IsControledBy ( i ) ;
39095: LD_ADDR_VAR 0 7
39099: PUSH
39100: LD_VAR 0 6
39104: PPUSH
39105: CALL_OW 312
39109: ST_TO_ADDR
// if j then
39110: LD_VAR 0 7
39114: IFFALSE 39144
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39116: LD_ADDR_VAR 0 10
39120: PUSH
39121: LD_VAR 0 10
39125: PUSH
39126: LD_VAR 0 7
39130: PPUSH
39131: LD_INT 3
39133: PPUSH
39134: CALL_OW 259
39138: PUSH
39139: LD_INT 3
39141: MUL
39142: MUL
39143: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39144: LD_VAR 0 6
39148: PPUSH
39149: CALL_OW 264
39153: PUSH
39154: LD_INT 5
39156: PUSH
39157: LD_INT 6
39159: PUSH
39160: LD_INT 46
39162: PUSH
39163: LD_INT 44
39165: PUSH
39166: LD_INT 47
39168: PUSH
39169: LD_INT 45
39171: PUSH
39172: LD_INT 28
39174: PUSH
39175: LD_INT 7
39177: PUSH
39178: LD_INT 27
39180: PUSH
39181: LD_INT 29
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: IN
39196: IFFALSE 39216
39198: PUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: LD_INT 52
39206: PPUSH
39207: CALL_OW 321
39211: PUSH
39212: LD_INT 2
39214: EQUAL
39215: AND
39216: IFFALSE 39233
// bpoints := bpoints * 1.2 ;
39218: LD_ADDR_VAR 0 10
39222: PUSH
39223: LD_VAR 0 10
39227: PUSH
39228: LD_REAL  1.20000000000000E+0000
39231: MUL
39232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39233: LD_VAR 0 6
39237: PPUSH
39238: CALL_OW 264
39242: PUSH
39243: LD_INT 6
39245: PUSH
39246: LD_INT 46
39248: PUSH
39249: LD_INT 47
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: IN
39257: IFFALSE 39274
// bpoints := bpoints * 1.2 ;
39259: LD_ADDR_VAR 0 10
39263: PUSH
39264: LD_VAR 0 10
39268: PUSH
39269: LD_REAL  1.20000000000000E+0000
39272: MUL
39273: ST_TO_ADDR
// end ; unit_building :
39274: GO 39288
39276: LD_INT 3
39278: DOUBLE
39279: EQUAL
39280: IFTRUE 39284
39282: GO 39287
39284: POP
// ; end ;
39285: GO 39288
39287: POP
// for j = 1 to 3 do
39288: LD_ADDR_VAR 0 7
39292: PUSH
39293: DOUBLE
39294: LD_INT 1
39296: DEC
39297: ST_TO_ADDR
39298: LD_INT 3
39300: PUSH
39301: FOR_TO
39302: IFFALSE 39355
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 5
39313: PPUSH
39314: LD_VAR 0 7
39318: PPUSH
39319: LD_VAR 0 5
39323: PUSH
39324: LD_VAR 0 7
39328: ARRAY
39329: PUSH
39330: LD_VAR 0 9
39334: PUSH
39335: LD_VAR 0 7
39339: ARRAY
39340: PUSH
39341: LD_VAR 0 10
39345: MUL
39346: PLUS
39347: PPUSH
39348: CALL_OW 1
39352: ST_TO_ADDR
39353: GO 39301
39355: POP
39356: POP
// end ;
39357: GO 37830
39359: POP
39360: POP
// result := Replace ( result , 4 , tmp ) ;
39361: LD_ADDR_VAR 0 5
39365: PUSH
39366: LD_VAR 0 5
39370: PPUSH
39371: LD_INT 4
39373: PPUSH
39374: LD_VAR 0 8
39378: PPUSH
39379: CALL_OW 1
39383: ST_TO_ADDR
// end ;
39384: LD_VAR 0 5
39388: RET
// export function DangerAtRange ( unit , range ) ; begin
39389: LD_INT 0
39391: PPUSH
// if not unit then
39392: LD_VAR 0 1
39396: NOT
39397: IFFALSE 39401
// exit ;
39399: GO 39446
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39401: LD_ADDR_VAR 0 3
39405: PUSH
39406: LD_VAR 0 1
39410: PPUSH
39411: CALL_OW 255
39415: PPUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 250
39425: PPUSH
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 251
39435: PPUSH
39436: LD_VAR 0 2
39440: PPUSH
39441: CALL 37680 0 4
39445: ST_TO_ADDR
// end ;
39446: LD_VAR 0 3
39450: RET
// export function DangerInArea ( side , area ) ; begin
39451: LD_INT 0
39453: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_VAR 0 2
39463: PPUSH
39464: LD_INT 81
39466: PUSH
39467: LD_VAR 0 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PPUSH
39476: CALL_OW 70
39480: ST_TO_ADDR
// end ;
39481: LD_VAR 0 3
39485: RET
// export function IsExtension ( b ) ; begin
39486: LD_INT 0
39488: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_INT 23
39501: PUSH
39502: LD_INT 20
39504: PUSH
39505: LD_INT 22
39507: PUSH
39508: LD_INT 17
39510: PUSH
39511: LD_INT 24
39513: PUSH
39514: LD_INT 21
39516: PUSH
39517: LD_INT 19
39519: PUSH
39520: LD_INT 16
39522: PUSH
39523: LD_INT 25
39525: PUSH
39526: LD_INT 18
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: IN
39541: ST_TO_ADDR
// end ;
39542: LD_VAR 0 2
39546: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39547: LD_INT 0
39549: PPUSH
39550: PPUSH
39551: PPUSH
// result := [ ] ;
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: EMPTY
39558: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39559: LD_ADDR_VAR 0 5
39563: PUSH
39564: LD_VAR 0 2
39568: PPUSH
39569: LD_INT 21
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PPUSH
39579: CALL_OW 70
39583: ST_TO_ADDR
// if not tmp then
39584: LD_VAR 0 5
39588: NOT
39589: IFFALSE 39593
// exit ;
39591: GO 39657
// if checkLink then
39593: LD_VAR 0 3
39597: IFFALSE 39647
// begin for i in tmp do
39599: LD_ADDR_VAR 0 6
39603: PUSH
39604: LD_VAR 0 5
39608: PUSH
39609: FOR_IN
39610: IFFALSE 39645
// if GetBase ( i ) <> base then
39612: LD_VAR 0 6
39616: PPUSH
39617: CALL_OW 274
39621: PUSH
39622: LD_VAR 0 1
39626: NONEQUAL
39627: IFFALSE 39643
// ComLinkToBase ( base , i ) ;
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_VAR 0 6
39638: PPUSH
39639: CALL_OW 169
39643: GO 39609
39645: POP
39646: POP
// end ; result := tmp ;
39647: LD_ADDR_VAR 0 4
39651: PUSH
39652: LD_VAR 0 5
39656: ST_TO_ADDR
// end ;
39657: LD_VAR 0 4
39661: RET
// export function ComComplete ( units , b ) ; var i ; begin
39662: LD_INT 0
39664: PPUSH
39665: PPUSH
// if not units then
39666: LD_VAR 0 1
39670: NOT
39671: IFFALSE 39675
// exit ;
39673: GO 39765
// for i in units do
39675: LD_ADDR_VAR 0 4
39679: PUSH
39680: LD_VAR 0 1
39684: PUSH
39685: FOR_IN
39686: IFFALSE 39763
// if BuildingStatus ( b ) = bs_build then
39688: LD_VAR 0 2
39692: PPUSH
39693: CALL_OW 461
39697: PUSH
39698: LD_INT 1
39700: EQUAL
39701: IFFALSE 39761
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39703: LD_VAR 0 4
39707: PPUSH
39708: LD_STRING h
39710: PUSH
39711: LD_VAR 0 2
39715: PPUSH
39716: CALL_OW 250
39720: PUSH
39721: LD_VAR 0 2
39725: PPUSH
39726: CALL_OW 251
39730: PUSH
39731: LD_VAR 0 2
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: PUSH
39754: EMPTY
39755: LIST
39756: PPUSH
39757: CALL_OW 446
39761: GO 39685
39763: POP
39764: POP
// end ;
39765: LD_VAR 0 3
39769: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39770: LD_INT 0
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
39777: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39778: LD_VAR 0 1
39782: NOT
39783: IFTRUE 39800
39785: PUSH
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 263
39795: PUSH
39796: LD_INT 2
39798: NONEQUAL
39799: OR
39800: IFFALSE 39804
// exit ;
39802: GO 40120
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39804: LD_ADDR_VAR 0 6
39808: PUSH
39809: LD_INT 22
39811: PUSH
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 255
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 30
39831: PUSH
39832: LD_INT 36
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 34
39841: PUSH
39842: LD_INT 31
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PPUSH
39858: CALL_OW 69
39862: ST_TO_ADDR
// if not tmp then
39863: LD_VAR 0 6
39867: NOT
39868: IFFALSE 39872
// exit ;
39870: GO 40120
// result := [ ] ;
39872: LD_ADDR_VAR 0 2
39876: PUSH
39877: EMPTY
39878: ST_TO_ADDR
// for i in tmp do
39879: LD_ADDR_VAR 0 3
39883: PUSH
39884: LD_VAR 0 6
39888: PUSH
39889: FOR_IN
39890: IFFALSE 39961
// begin t := UnitsInside ( i ) ;
39892: LD_ADDR_VAR 0 4
39896: PUSH
39897: LD_VAR 0 3
39901: PPUSH
39902: CALL_OW 313
39906: ST_TO_ADDR
// if t then
39907: LD_VAR 0 4
39911: IFFALSE 39959
// for j in t do
39913: LD_ADDR_VAR 0 7
39917: PUSH
39918: LD_VAR 0 4
39922: PUSH
39923: FOR_IN
39924: IFFALSE 39957
// result := Replace ( result , result + 1 , j ) ;
39926: LD_ADDR_VAR 0 2
39930: PUSH
39931: LD_VAR 0 2
39935: PPUSH
39936: LD_VAR 0 2
39940: PUSH
39941: LD_INT 1
39943: PLUS
39944: PPUSH
39945: LD_VAR 0 7
39949: PPUSH
39950: CALL_OW 1
39954: ST_TO_ADDR
39955: GO 39923
39957: POP
39958: POP
// end ;
39959: GO 39889
39961: POP
39962: POP
// if not result then
39963: LD_VAR 0 2
39967: NOT
39968: IFFALSE 39972
// exit ;
39970: GO 40120
// mech := result [ 1 ] ;
39972: LD_ADDR_VAR 0 5
39976: PUSH
39977: LD_VAR 0 2
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: ST_TO_ADDR
// if result > 1 then
39986: LD_VAR 0 2
39990: PUSH
39991: LD_INT 1
39993: GREATER
39994: IFFALSE 40106
// begin for i = 2 to result do
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: DOUBLE
40002: LD_INT 2
40004: DEC
40005: ST_TO_ADDR
40006: LD_VAR 0 2
40010: PUSH
40011: FOR_TO
40012: IFFALSE 40104
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: LD_VAR 0 2
40023: PUSH
40024: LD_VAR 0 3
40028: ARRAY
40029: PPUSH
40030: LD_INT 3
40032: PPUSH
40033: CALL_OW 259
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_VAR 0 3
40047: ARRAY
40048: PPUSH
40049: CALL_OW 432
40053: MINUS
40054: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40055: LD_VAR 0 4
40059: PUSH
40060: LD_VAR 0 5
40064: PPUSH
40065: LD_INT 3
40067: PPUSH
40068: CALL_OW 259
40072: PUSH
40073: LD_VAR 0 5
40077: PPUSH
40078: CALL_OW 432
40082: MINUS
40083: GREATEREQUAL
40084: IFFALSE 40102
// mech := result [ i ] ;
40086: LD_ADDR_VAR 0 5
40090: PUSH
40091: LD_VAR 0 2
40095: PUSH
40096: LD_VAR 0 3
40100: ARRAY
40101: ST_TO_ADDR
// end ;
40102: GO 40011
40104: POP
40105: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40106: LD_VAR 0 1
40110: PPUSH
40111: LD_VAR 0 5
40115: PPUSH
40116: CALL_OW 135
// end ;
40120: LD_VAR 0 2
40124: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40125: LD_INT 0
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
40134: PPUSH
40135: PPUSH
40136: PPUSH
40137: PPUSH
40138: PPUSH
40139: PPUSH
// result := [ ] ;
40140: LD_ADDR_VAR 0 7
40144: PUSH
40145: EMPTY
40146: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 266
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: IN
40167: NOT
40168: IFFALSE 40172
// exit ;
40170: GO 41812
// if name then
40172: LD_VAR 0 3
40176: IFFALSE 40192
// SetBName ( base_dep , name ) ;
40178: LD_VAR 0 1
40182: PPUSH
40183: LD_VAR 0 3
40187: PPUSH
40188: CALL_OW 500
// base := GetBase ( base_dep ) ;
40192: LD_ADDR_VAR 0 15
40196: PUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 274
40206: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40207: LD_ADDR_VAR 0 16
40211: PUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 255
40221: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40222: LD_ADDR_VAR 0 17
40226: PUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: CALL_OW 248
40236: ST_TO_ADDR
// if sources then
40237: LD_VAR 0 5
40241: IFFALSE 40288
// for i = 1 to 3 do
40243: LD_ADDR_VAR 0 8
40247: PUSH
40248: DOUBLE
40249: LD_INT 1
40251: DEC
40252: ST_TO_ADDR
40253: LD_INT 3
40255: PUSH
40256: FOR_TO
40257: IFFALSE 40286
// AddResourceType ( base , i , sources [ i ] ) ;
40259: LD_VAR 0 15
40263: PPUSH
40264: LD_VAR 0 8
40268: PPUSH
40269: LD_VAR 0 5
40273: PUSH
40274: LD_VAR 0 8
40278: ARRAY
40279: PPUSH
40280: CALL_OW 276
40284: GO 40256
40286: POP
40287: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40288: LD_ADDR_VAR 0 18
40292: PUSH
40293: LD_VAR 0 15
40297: PPUSH
40298: LD_VAR 0 2
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: CALL 39547 0 3
40310: ST_TO_ADDR
// InitHc ;
40311: CALL_OW 19
// InitUc ;
40315: CALL_OW 18
// uc_side := side ;
40319: LD_ADDR_OWVAR 20
40323: PUSH
40324: LD_VAR 0 16
40328: ST_TO_ADDR
// uc_nation := nation ;
40329: LD_ADDR_OWVAR 21
40333: PUSH
40334: LD_VAR 0 17
40338: ST_TO_ADDR
// if buildings then
40339: LD_VAR 0 18
40343: IFFALSE 41671
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40345: LD_ADDR_VAR 0 19
40349: PUSH
40350: LD_VAR 0 18
40354: PPUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 30
40360: PUSH
40361: LD_INT 29
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 30
40370: PUSH
40371: LD_INT 30
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: PPUSH
40383: CALL_OW 72
40387: ST_TO_ADDR
// if tmp then
40388: LD_VAR 0 19
40392: IFFALSE 40440
// for i in tmp do
40394: LD_ADDR_VAR 0 8
40398: PUSH
40399: LD_VAR 0 19
40403: PUSH
40404: FOR_IN
40405: IFFALSE 40438
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40407: LD_VAR 0 8
40411: PPUSH
40412: CALL_OW 250
40416: PPUSH
40417: LD_VAR 0 8
40421: PPUSH
40422: CALL_OW 251
40426: PPUSH
40427: LD_VAR 0 16
40431: PPUSH
40432: CALL_OW 441
40436: GO 40404
40438: POP
40439: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40440: LD_VAR 0 18
40444: PPUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 30
40450: PUSH
40451: LD_INT 32
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 30
40460: PUSH
40461: LD_INT 33
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: PPUSH
40473: CALL_OW 72
40477: IFFALSE 40565
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40479: LD_ADDR_VAR 0 8
40483: PUSH
40484: LD_VAR 0 18
40488: PPUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 30
40494: PUSH
40495: LD_INT 32
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 30
40504: PUSH
40505: LD_INT 33
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: LIST
40516: PPUSH
40517: CALL_OW 72
40521: PUSH
40522: FOR_IN
40523: IFFALSE 40563
// begin if not GetBWeapon ( i ) then
40525: LD_VAR 0 8
40529: PPUSH
40530: CALL_OW 269
40534: NOT
40535: IFFALSE 40561
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40537: LD_VAR 0 8
40541: PPUSH
40542: LD_VAR 0 8
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: CALL 41817 0 2
40556: PPUSH
40557: CALL_OW 431
// end ;
40561: GO 40522
40563: POP
40564: POP
// end ; for i = 1 to personel do
40565: LD_ADDR_VAR 0 8
40569: PUSH
40570: DOUBLE
40571: LD_INT 1
40573: DEC
40574: ST_TO_ADDR
40575: LD_VAR 0 6
40579: PUSH
40580: FOR_TO
40581: IFFALSE 41651
// begin if i > 4 then
40583: LD_VAR 0 8
40587: PUSH
40588: LD_INT 4
40590: GREATER
40591: IFFALSE 40595
// break ;
40593: GO 41651
// case i of 1 :
40595: LD_VAR 0 8
40599: PUSH
40600: LD_INT 1
40602: DOUBLE
40603: EQUAL
40604: IFTRUE 40608
40606: GO 40688
40608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40609: LD_ADDR_VAR 0 12
40613: PUSH
40614: LD_VAR 0 18
40618: PPUSH
40619: LD_INT 22
40621: PUSH
40622: LD_VAR 0 16
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 58
40633: PUSH
40634: EMPTY
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 30
40642: PUSH
40643: LD_INT 32
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 30
40652: PUSH
40653: LD_INT 4
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: LD_INT 5
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: PPUSH
40681: CALL_OW 72
40685: ST_TO_ADDR
40686: GO 40910
40688: LD_INT 2
40690: DOUBLE
40691: EQUAL
40692: IFTRUE 40696
40694: GO 40758
40696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40697: LD_ADDR_VAR 0 12
40701: PUSH
40702: LD_VAR 0 18
40706: PPUSH
40707: LD_INT 22
40709: PUSH
40710: LD_VAR 0 16
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 30
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 30
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PPUSH
40751: CALL_OW 72
40755: ST_TO_ADDR
40756: GO 40910
40758: LD_INT 3
40760: DOUBLE
40761: EQUAL
40762: IFTRUE 40766
40764: GO 40828
40766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40767: LD_ADDR_VAR 0 12
40771: PUSH
40772: LD_VAR 0 18
40776: PPUSH
40777: LD_INT 22
40779: PUSH
40780: LD_VAR 0 16
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: LD_INT 30
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 30
40804: PUSH
40805: LD_INT 3
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PPUSH
40821: CALL_OW 72
40825: ST_TO_ADDR
40826: GO 40910
40828: LD_INT 4
40830: DOUBLE
40831: EQUAL
40832: IFTRUE 40836
40834: GO 40909
40836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40837: LD_ADDR_VAR 0 12
40841: PUSH
40842: LD_VAR 0 18
40846: PPUSH
40847: LD_INT 22
40849: PUSH
40850: LD_VAR 0 16
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 30
40864: PUSH
40865: LD_INT 6
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 30
40874: PUSH
40875: LD_INT 7
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 30
40884: PUSH
40885: LD_INT 8
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PPUSH
40902: CALL_OW 72
40906: ST_TO_ADDR
40907: GO 40910
40909: POP
// if i = 1 then
40910: LD_VAR 0 8
40914: PUSH
40915: LD_INT 1
40917: EQUAL
40918: IFFALSE 41029
// begin tmp := [ ] ;
40920: LD_ADDR_VAR 0 19
40924: PUSH
40925: EMPTY
40926: ST_TO_ADDR
// for j in f do
40927: LD_ADDR_VAR 0 9
40931: PUSH
40932: LD_VAR 0 12
40936: PUSH
40937: FOR_IN
40938: IFFALSE 41011
// if GetBType ( j ) = b_bunker then
40940: LD_VAR 0 9
40944: PPUSH
40945: CALL_OW 266
40949: PUSH
40950: LD_INT 32
40952: EQUAL
40953: IFFALSE 40980
// tmp := Insert ( tmp , 1 , j ) else
40955: LD_ADDR_VAR 0 19
40959: PUSH
40960: LD_VAR 0 19
40964: PPUSH
40965: LD_INT 1
40967: PPUSH
40968: LD_VAR 0 9
40972: PPUSH
40973: CALL_OW 2
40977: ST_TO_ADDR
40978: GO 41009
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40980: LD_ADDR_VAR 0 19
40984: PUSH
40985: LD_VAR 0 19
40989: PPUSH
40990: LD_VAR 0 19
40994: PUSH
40995: LD_INT 1
40997: PLUS
40998: PPUSH
40999: LD_VAR 0 9
41003: PPUSH
41004: CALL_OW 2
41008: ST_TO_ADDR
41009: GO 40937
41011: POP
41012: POP
// if tmp then
41013: LD_VAR 0 19
41017: IFFALSE 41029
// f := tmp ;
41019: LD_ADDR_VAR 0 12
41023: PUSH
41024: LD_VAR 0 19
41028: ST_TO_ADDR
// end ; x := personel [ i ] ;
41029: LD_ADDR_VAR 0 13
41033: PUSH
41034: LD_VAR 0 6
41038: PUSH
41039: LD_VAR 0 8
41043: ARRAY
41044: ST_TO_ADDR
// if x = - 1 then
41045: LD_VAR 0 13
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: EQUAL
41054: IFFALSE 41265
// begin for j in f do
41056: LD_ADDR_VAR 0 9
41060: PUSH
41061: LD_VAR 0 12
41065: PUSH
41066: FOR_IN
41067: IFFALSE 41261
// repeat InitHc ;
41069: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41073: LD_VAR 0 9
41077: PPUSH
41078: CALL_OW 266
41082: PUSH
41083: LD_INT 5
41085: EQUAL
41086: IFFALSE 41156
// begin if UnitsInside ( j ) < 3 then
41088: LD_VAR 0 9
41092: PPUSH
41093: CALL_OW 313
41097: PUSH
41098: LD_INT 3
41100: LESS
41101: IFFALSE 41137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41103: LD_INT 0
41105: PPUSH
41106: LD_INT 5
41108: PUSH
41109: LD_INT 8
41111: PUSH
41112: LD_INT 9
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: PUSH
41120: LD_VAR 0 17
41124: ARRAY
41125: PPUSH
41126: LD_VAR 0 4
41130: PPUSH
41131: CALL_OW 380
41135: GO 41154
// PrepareHuman ( false , i , skill ) ;
41137: LD_INT 0
41139: PPUSH
41140: LD_VAR 0 8
41144: PPUSH
41145: LD_VAR 0 4
41149: PPUSH
41150: CALL_OW 380
// end else
41154: GO 41173
// PrepareHuman ( false , i , skill ) ;
41156: LD_INT 0
41158: PPUSH
41159: LD_VAR 0 8
41163: PPUSH
41164: LD_VAR 0 4
41168: PPUSH
41169: CALL_OW 380
// un := CreateHuman ;
41173: LD_ADDR_VAR 0 14
41177: PUSH
41178: CALL_OW 44
41182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41183: LD_ADDR_VAR 0 7
41187: PUSH
41188: LD_VAR 0 7
41192: PPUSH
41193: LD_INT 1
41195: PPUSH
41196: LD_VAR 0 14
41200: PPUSH
41201: CALL_OW 2
41205: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41206: LD_VAR 0 14
41210: PPUSH
41211: LD_VAR 0 9
41215: PPUSH
41216: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41220: LD_VAR 0 9
41224: PPUSH
41225: CALL_OW 313
41229: PUSH
41230: LD_INT 6
41232: EQUAL
41233: IFTRUE 41257
41235: PUSH
41236: LD_VAR 0 9
41240: PPUSH
41241: CALL_OW 266
41245: PUSH
41246: LD_INT 32
41248: PUSH
41249: LD_INT 31
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: IN
41256: OR
41257: IFFALSE 41069
41259: GO 41066
41261: POP
41262: POP
// end else
41263: GO 41649
// for j = 1 to x do
41265: LD_ADDR_VAR 0 9
41269: PUSH
41270: DOUBLE
41271: LD_INT 1
41273: DEC
41274: ST_TO_ADDR
41275: LD_VAR 0 13
41279: PUSH
41280: FOR_TO
41281: IFFALSE 41647
// begin InitHc ;
41283: CALL_OW 19
// if not f then
41287: LD_VAR 0 12
41291: NOT
41292: IFFALSE 41381
// begin PrepareHuman ( false , i , skill ) ;
41294: LD_INT 0
41296: PPUSH
41297: LD_VAR 0 8
41301: PPUSH
41302: LD_VAR 0 4
41306: PPUSH
41307: CALL_OW 380
// un := CreateHuman ;
41311: LD_ADDR_VAR 0 14
41315: PUSH
41316: CALL_OW 44
41320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41321: LD_ADDR_VAR 0 7
41325: PUSH
41326: LD_VAR 0 7
41330: PPUSH
41331: LD_INT 1
41333: PPUSH
41334: LD_VAR 0 14
41338: PPUSH
41339: CALL_OW 2
41343: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41344: LD_VAR 0 14
41348: PPUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: CALL_OW 250
41358: PPUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 251
41368: PPUSH
41369: LD_INT 10
41371: PPUSH
41372: LD_INT 0
41374: PPUSH
41375: CALL_OW 50
// continue ;
41379: GO 41280
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41381: LD_VAR 0 12
41385: PUSH
41386: LD_INT 1
41388: ARRAY
41389: PPUSH
41390: CALL_OW 313
41394: IFFALSE 41422
41396: PUSH
41397: LD_VAR 0 12
41401: PUSH
41402: LD_INT 1
41404: ARRAY
41405: PPUSH
41406: CALL_OW 266
41410: PUSH
41411: LD_INT 32
41413: PUSH
41414: LD_INT 31
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: IN
41421: AND
41422: IFTRUE 41443
41424: PUSH
41425: LD_VAR 0 12
41429: PUSH
41430: LD_INT 1
41432: ARRAY
41433: PPUSH
41434: CALL_OW 313
41438: PUSH
41439: LD_INT 6
41441: EQUAL
41442: OR
41443: IFFALSE 41463
// f := Delete ( f , 1 ) ;
41445: LD_ADDR_VAR 0 12
41449: PUSH
41450: LD_VAR 0 12
41454: PPUSH
41455: LD_INT 1
41457: PPUSH
41458: CALL_OW 3
41462: ST_TO_ADDR
// if not f then
41463: LD_VAR 0 12
41467: NOT
41468: IFFALSE 41486
// begin x := x + 2 ;
41470: LD_ADDR_VAR 0 13
41474: PUSH
41475: LD_VAR 0 13
41479: PUSH
41480: LD_INT 2
41482: PLUS
41483: ST_TO_ADDR
// continue ;
41484: GO 41280
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41486: LD_VAR 0 12
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: PPUSH
41495: CALL_OW 266
41499: PUSH
41500: LD_INT 5
41502: EQUAL
41503: IFFALSE 41577
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41505: LD_VAR 0 12
41509: PUSH
41510: LD_INT 1
41512: ARRAY
41513: PPUSH
41514: CALL_OW 313
41518: PUSH
41519: LD_INT 3
41521: LESS
41522: IFFALSE 41558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41524: LD_INT 0
41526: PPUSH
41527: LD_INT 5
41529: PUSH
41530: LD_INT 8
41532: PUSH
41533: LD_INT 9
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: PUSH
41541: LD_VAR 0 17
41545: ARRAY
41546: PPUSH
41547: LD_VAR 0 4
41551: PPUSH
41552: CALL_OW 380
41556: GO 41575
// PrepareHuman ( false , i , skill ) ;
41558: LD_INT 0
41560: PPUSH
41561: LD_VAR 0 8
41565: PPUSH
41566: LD_VAR 0 4
41570: PPUSH
41571: CALL_OW 380
// end else
41575: GO 41594
// PrepareHuman ( false , i , skill ) ;
41577: LD_INT 0
41579: PPUSH
41580: LD_VAR 0 8
41584: PPUSH
41585: LD_VAR 0 4
41589: PPUSH
41590: CALL_OW 380
// un := CreateHuman ;
41594: LD_ADDR_VAR 0 14
41598: PUSH
41599: CALL_OW 44
41603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41604: LD_ADDR_VAR 0 7
41608: PUSH
41609: LD_VAR 0 7
41613: PPUSH
41614: LD_INT 1
41616: PPUSH
41617: LD_VAR 0 14
41621: PPUSH
41622: CALL_OW 2
41626: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41627: LD_VAR 0 14
41631: PPUSH
41632: LD_VAR 0 12
41636: PUSH
41637: LD_INT 1
41639: ARRAY
41640: PPUSH
41641: CALL_OW 52
// end ;
41645: GO 41280
41647: POP
41648: POP
// end ;
41649: GO 40580
41651: POP
41652: POP
// result := result ^ buildings ;
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: LD_VAR 0 7
41662: PUSH
41663: LD_VAR 0 18
41667: ADD
41668: ST_TO_ADDR
// end else
41669: GO 41812
// begin for i = 1 to personel do
41671: LD_ADDR_VAR 0 8
41675: PUSH
41676: DOUBLE
41677: LD_INT 1
41679: DEC
41680: ST_TO_ADDR
41681: LD_VAR 0 6
41685: PUSH
41686: FOR_TO
41687: IFFALSE 41810
// begin if i > 4 then
41689: LD_VAR 0 8
41693: PUSH
41694: LD_INT 4
41696: GREATER
41697: IFFALSE 41701
// break ;
41699: GO 41810
// x := personel [ i ] ;
41701: LD_ADDR_VAR 0 13
41705: PUSH
41706: LD_VAR 0 6
41710: PUSH
41711: LD_VAR 0 8
41715: ARRAY
41716: ST_TO_ADDR
// if x = - 1 then
41717: LD_VAR 0 13
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: EQUAL
41726: IFFALSE 41730
// continue ;
41728: GO 41686
// PrepareHuman ( false , i , skill ) ;
41730: LD_INT 0
41732: PPUSH
41733: LD_VAR 0 8
41737: PPUSH
41738: LD_VAR 0 4
41742: PPUSH
41743: CALL_OW 380
// un := CreateHuman ;
41747: LD_ADDR_VAR 0 14
41751: PUSH
41752: CALL_OW 44
41756: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41757: LD_VAR 0 14
41761: PPUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 250
41771: PPUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: CALL_OW 251
41781: PPUSH
41782: LD_INT 10
41784: PPUSH
41785: LD_INT 0
41787: PPUSH
41788: CALL_OW 50
// result := result ^ un ;
41792: LD_ADDR_VAR 0 7
41796: PUSH
41797: LD_VAR 0 7
41801: PUSH
41802: LD_VAR 0 14
41806: ADD
41807: ST_TO_ADDR
// end ;
41808: GO 41686
41810: POP
41811: POP
// end ; end ;
41812: LD_VAR 0 7
41816: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41817: LD_INT 0
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
41829: PPUSH
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
// result := false ;
41835: LD_ADDR_VAR 0 3
41839: PUSH
41840: LD_INT 0
41842: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41843: LD_VAR 0 1
41847: NOT
41848: IFTRUE 41873
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 266
41860: PUSH
41861: LD_INT 32
41863: PUSH
41864: LD_INT 33
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: IN
41871: NOT
41872: OR
41873: IFFALSE 41877
// exit ;
41875: GO 43012
// nat := GetNation ( tower ) ;
41877: LD_ADDR_VAR 0 12
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 248
41891: ST_TO_ADDR
// side := GetSide ( tower ) ;
41892: LD_ADDR_VAR 0 16
41896: PUSH
41897: LD_VAR 0 1
41901: PPUSH
41902: CALL_OW 255
41906: ST_TO_ADDR
// x := GetX ( tower ) ;
41907: LD_ADDR_VAR 0 10
41911: PUSH
41912: LD_VAR 0 1
41916: PPUSH
41917: CALL_OW 250
41921: ST_TO_ADDR
// y := GetY ( tower ) ;
41922: LD_ADDR_VAR 0 11
41926: PUSH
41927: LD_VAR 0 1
41931: PPUSH
41932: CALL_OW 251
41936: ST_TO_ADDR
// if not x or not y then
41937: LD_VAR 0 10
41941: NOT
41942: IFTRUE 41951
41944: PUSH
41945: LD_VAR 0 11
41949: NOT
41950: OR
41951: IFFALSE 41955
// exit ;
41953: GO 43012
// weapon := 0 ;
41955: LD_ADDR_VAR 0 18
41959: PUSH
41960: LD_INT 0
41962: ST_TO_ADDR
// fac_list := [ ] ;
41963: LD_ADDR_VAR 0 17
41967: PUSH
41968: EMPTY
41969: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41970: LD_ADDR_VAR 0 6
41974: PUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 274
41984: PPUSH
41985: LD_VAR 0 2
41989: PPUSH
41990: LD_INT 0
41992: PPUSH
41993: CALL 39547 0 3
41997: PPUSH
41998: LD_INT 30
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PPUSH
42008: CALL_OW 72
42012: ST_TO_ADDR
// if not factories then
42013: LD_VAR 0 6
42017: NOT
42018: IFFALSE 42022
// exit ;
42020: GO 43012
// for i in factories do
42022: LD_ADDR_VAR 0 8
42026: PUSH
42027: LD_VAR 0 6
42031: PUSH
42032: FOR_IN
42033: IFFALSE 42058
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42035: LD_ADDR_VAR 0 17
42039: PUSH
42040: LD_VAR 0 17
42044: PUSH
42045: LD_VAR 0 8
42049: PPUSH
42050: CALL_OW 478
42054: UNION
42055: ST_TO_ADDR
42056: GO 42032
42058: POP
42059: POP
// if not fac_list then
42060: LD_VAR 0 17
42064: NOT
42065: IFFALSE 42069
// exit ;
42067: GO 43012
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42069: LD_ADDR_VAR 0 5
42073: PUSH
42074: LD_INT 4
42076: PUSH
42077: LD_INT 5
42079: PUSH
42080: LD_INT 9
42082: PUSH
42083: LD_INT 10
42085: PUSH
42086: LD_INT 6
42088: PUSH
42089: LD_INT 7
42091: PUSH
42092: LD_INT 11
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 27
42106: PUSH
42107: LD_INT 28
42109: PUSH
42110: LD_INT 26
42112: PUSH
42113: LD_INT 30
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 43
42124: PUSH
42125: LD_INT 44
42127: PUSH
42128: LD_INT 46
42130: PUSH
42131: LD_INT 45
42133: PUSH
42134: LD_INT 47
42136: PUSH
42137: LD_INT 49
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: PUSH
42153: LD_VAR 0 12
42157: ARRAY
42158: ST_TO_ADDR
// list := list isect fac_list ;
42159: LD_ADDR_VAR 0 5
42163: PUSH
42164: LD_VAR 0 5
42168: PUSH
42169: LD_VAR 0 17
42173: ISECT
42174: ST_TO_ADDR
// if not list then
42175: LD_VAR 0 5
42179: NOT
42180: IFFALSE 42184
// exit ;
42182: GO 43012
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42184: LD_VAR 0 12
42188: PUSH
42189: LD_INT 3
42191: EQUAL
42192: IFFALSE 42204
42194: PUSH
42195: LD_INT 49
42197: PUSH
42198: LD_VAR 0 5
42202: IN
42203: AND
42204: IFFALSE 42224
42206: PUSH
42207: LD_INT 31
42209: PPUSH
42210: LD_VAR 0 16
42214: PPUSH
42215: CALL_OW 321
42219: PUSH
42220: LD_INT 2
42222: EQUAL
42223: AND
42224: IFFALSE 42284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42226: LD_INT 22
42228: PUSH
42229: LD_VAR 0 16
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 35
42240: PUSH
42241: LD_INT 49
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 91
42250: PUSH
42251: LD_VAR 0 1
42255: PUSH
42256: LD_INT 10
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: PPUSH
42269: CALL_OW 69
42273: NOT
42274: IFFALSE 42284
// weapon := ru_time_lapser ;
42276: LD_ADDR_VAR 0 18
42280: PUSH
42281: LD_INT 49
42283: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42284: LD_VAR 0 12
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: IN
42299: IFFALSE 42323
42301: PUSH
42302: LD_INT 11
42304: PUSH
42305: LD_VAR 0 5
42309: IN
42310: IFTRUE 42322
42312: PUSH
42313: LD_INT 30
42315: PUSH
42316: LD_VAR 0 5
42320: IN
42321: OR
42322: AND
42323: IFFALSE 42343
42325: PUSH
42326: LD_INT 6
42328: PPUSH
42329: LD_VAR 0 16
42333: PPUSH
42334: CALL_OW 321
42338: PUSH
42339: LD_INT 2
42341: EQUAL
42342: AND
42343: IFFALSE 42510
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42345: LD_INT 22
42347: PUSH
42348: LD_VAR 0 16
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 35
42362: PUSH
42363: LD_INT 11
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 35
42372: PUSH
42373: LD_INT 30
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 91
42387: PUSH
42388: LD_VAR 0 1
42392: PUSH
42393: LD_INT 18
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: PPUSH
42406: CALL_OW 69
42410: NOT
42411: IFFALSE 42487
42413: PUSH
42414: LD_INT 22
42416: PUSH
42417: LD_VAR 0 16
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 30
42431: PUSH
42432: LD_INT 32
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 30
42441: PUSH
42442: LD_INT 33
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 91
42456: PUSH
42457: LD_VAR 0 1
42461: PUSH
42462: LD_INT 12
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: PPUSH
42478: CALL_OW 69
42482: PUSH
42483: LD_INT 2
42485: GREATER
42486: AND
42487: IFFALSE 42510
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42489: LD_ADDR_VAR 0 18
42493: PUSH
42494: LD_INT 11
42496: PUSH
42497: LD_INT 30
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_VAR 0 12
42508: ARRAY
42509: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42510: LD_VAR 0 18
42514: NOT
42515: IFFALSE 42535
42517: PUSH
42518: LD_INT 40
42520: PPUSH
42521: LD_VAR 0 16
42525: PPUSH
42526: CALL_OW 321
42530: PUSH
42531: LD_INT 2
42533: EQUAL
42534: AND
42535: IFFALSE 42571
42537: PUSH
42538: LD_INT 7
42540: PUSH
42541: LD_VAR 0 5
42545: IN
42546: IFTRUE 42558
42548: PUSH
42549: LD_INT 28
42551: PUSH
42552: LD_VAR 0 5
42556: IN
42557: OR
42558: IFTRUE 42570
42560: PUSH
42561: LD_INT 45
42563: PUSH
42564: LD_VAR 0 5
42568: IN
42569: OR
42570: AND
42571: IFFALSE 42825
// begin hex := GetHexInfo ( x , y ) ;
42573: LD_ADDR_VAR 0 4
42577: PUSH
42578: LD_VAR 0 10
42582: PPUSH
42583: LD_VAR 0 11
42587: PPUSH
42588: CALL_OW 546
42592: ST_TO_ADDR
// if hex [ 1 ] then
42593: LD_VAR 0 4
42597: PUSH
42598: LD_INT 1
42600: ARRAY
42601: IFFALSE 42605
// exit ;
42603: GO 43012
// height := hex [ 2 ] ;
42605: LD_ADDR_VAR 0 15
42609: PUSH
42610: LD_VAR 0 4
42614: PUSH
42615: LD_INT 2
42617: ARRAY
42618: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42619: LD_ADDR_VAR 0 14
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: LD_INT 5
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: ST_TO_ADDR
// for i in tmp do
42642: LD_ADDR_VAR 0 8
42646: PUSH
42647: LD_VAR 0 14
42651: PUSH
42652: FOR_IN
42653: IFFALSE 42823
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42655: LD_ADDR_VAR 0 9
42659: PUSH
42660: LD_VAR 0 10
42664: PPUSH
42665: LD_VAR 0 8
42669: PPUSH
42670: LD_INT 5
42672: PPUSH
42673: CALL_OW 272
42677: PUSH
42678: LD_VAR 0 11
42682: PPUSH
42683: LD_VAR 0 8
42687: PPUSH
42688: LD_INT 5
42690: PPUSH
42691: CALL_OW 273
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42700: LD_VAR 0 9
42704: PUSH
42705: LD_INT 1
42707: ARRAY
42708: PPUSH
42709: LD_VAR 0 9
42713: PUSH
42714: LD_INT 2
42716: ARRAY
42717: PPUSH
42718: CALL_OW 488
42722: IFFALSE 42821
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42724: LD_ADDR_VAR 0 4
42728: PUSH
42729: LD_VAR 0 9
42733: PUSH
42734: LD_INT 1
42736: ARRAY
42737: PPUSH
42738: LD_VAR 0 9
42742: PUSH
42743: LD_INT 2
42745: ARRAY
42746: PPUSH
42747: CALL_OW 546
42751: ST_TO_ADDR
// if hex [ 1 ] then
42752: LD_VAR 0 4
42756: PUSH
42757: LD_INT 1
42759: ARRAY
42760: IFFALSE 42764
// continue ;
42762: GO 42652
// h := hex [ 2 ] ;
42764: LD_ADDR_VAR 0 13
42768: PUSH
42769: LD_VAR 0 4
42773: PUSH
42774: LD_INT 2
42776: ARRAY
42777: ST_TO_ADDR
// if h + 7 < height then
42778: LD_VAR 0 13
42782: PUSH
42783: LD_INT 7
42785: PLUS
42786: PUSH
42787: LD_VAR 0 15
42791: LESS
42792: IFFALSE 42821
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42794: LD_ADDR_VAR 0 18
42798: PUSH
42799: LD_INT 7
42801: PUSH
42802: LD_INT 28
42804: PUSH
42805: LD_INT 45
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: PUSH
42813: LD_VAR 0 12
42817: ARRAY
42818: ST_TO_ADDR
// break ;
42819: GO 42823
// end ; end ; end ;
42821: GO 42652
42823: POP
42824: POP
// end ; if not weapon then
42825: LD_VAR 0 18
42829: NOT
42830: IFFALSE 42890
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42832: LD_ADDR_VAR 0 5
42836: PUSH
42837: LD_VAR 0 5
42841: PUSH
42842: LD_INT 11
42844: PUSH
42845: LD_INT 30
42847: PUSH
42848: LD_INT 49
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: DIFF
42856: ST_TO_ADDR
// if not list then
42857: LD_VAR 0 5
42861: NOT
42862: IFFALSE 42866
// exit ;
42864: GO 43012
// weapon := list [ rand ( 1 , list ) ] ;
42866: LD_ADDR_VAR 0 18
42870: PUSH
42871: LD_VAR 0 5
42875: PUSH
42876: LD_INT 1
42878: PPUSH
42879: LD_VAR 0 5
42883: PPUSH
42884: CALL_OW 12
42888: ARRAY
42889: ST_TO_ADDR
// end ; if weapon then
42890: LD_VAR 0 18
42894: IFFALSE 43012
// begin tmp := CostOfWeapon ( weapon ) ;
42896: LD_ADDR_VAR 0 14
42900: PUSH
42901: LD_VAR 0 18
42905: PPUSH
42906: CALL_OW 451
42910: ST_TO_ADDR
// j := GetBase ( tower ) ;
42911: LD_ADDR_VAR 0 9
42915: PUSH
42916: LD_VAR 0 1
42920: PPUSH
42921: CALL_OW 274
42925: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42926: LD_VAR 0 9
42930: PPUSH
42931: LD_INT 1
42933: PPUSH
42934: CALL_OW 275
42938: PUSH
42939: LD_VAR 0 14
42943: PUSH
42944: LD_INT 1
42946: ARRAY
42947: GREATEREQUAL
42948: IFFALSE 42974
42950: PUSH
42951: LD_VAR 0 9
42955: PPUSH
42956: LD_INT 2
42958: PPUSH
42959: CALL_OW 275
42963: PUSH
42964: LD_VAR 0 14
42968: PUSH
42969: LD_INT 2
42971: ARRAY
42972: GREATEREQUAL
42973: AND
42974: IFFALSE 43000
42976: PUSH
42977: LD_VAR 0 9
42981: PPUSH
42982: LD_INT 3
42984: PPUSH
42985: CALL_OW 275
42989: PUSH
42990: LD_VAR 0 14
42994: PUSH
42995: LD_INT 3
42997: ARRAY
42998: GREATEREQUAL
42999: AND
43000: IFFALSE 43012
// result := weapon ;
43002: LD_ADDR_VAR 0 3
43006: PUSH
43007: LD_VAR 0 18
43011: ST_TO_ADDR
// end ; end ;
43012: LD_VAR 0 3
43016: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43017: LD_INT 0
43019: PPUSH
43020: PPUSH
// result := true ;
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_INT 1
43028: ST_TO_ADDR
// if array1 = array2 then
43029: LD_VAR 0 1
43033: PUSH
43034: LD_VAR 0 2
43038: EQUAL
43039: IFFALSE 43099
// begin for i = 1 to array1 do
43041: LD_ADDR_VAR 0 4
43045: PUSH
43046: DOUBLE
43047: LD_INT 1
43049: DEC
43050: ST_TO_ADDR
43051: LD_VAR 0 1
43055: PUSH
43056: FOR_TO
43057: IFFALSE 43095
// if array1 [ i ] <> array2 [ i ] then
43059: LD_VAR 0 1
43063: PUSH
43064: LD_VAR 0 4
43068: ARRAY
43069: PUSH
43070: LD_VAR 0 2
43074: PUSH
43075: LD_VAR 0 4
43079: ARRAY
43080: NONEQUAL
43081: IFFALSE 43093
// begin result := false ;
43083: LD_ADDR_VAR 0 3
43087: PUSH
43088: LD_INT 0
43090: ST_TO_ADDR
// break ;
43091: GO 43095
// end ;
43093: GO 43056
43095: POP
43096: POP
// end else
43097: GO 43107
// result := false ;
43099: LD_ADDR_VAR 0 3
43103: PUSH
43104: LD_INT 0
43106: ST_TO_ADDR
// end ;
43107: LD_VAR 0 3
43111: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43112: LD_INT 0
43114: PPUSH
43115: PPUSH
// if not array1 or not array2 then
43116: LD_VAR 0 1
43120: NOT
43121: IFTRUE 43130
43123: PUSH
43124: LD_VAR 0 2
43128: NOT
43129: OR
43130: IFFALSE 43134
// exit ;
43132: GO 43198
// result := true ;
43134: LD_ADDR_VAR 0 3
43138: PUSH
43139: LD_INT 1
43141: ST_TO_ADDR
// for i = 1 to array1 do
43142: LD_ADDR_VAR 0 4
43146: PUSH
43147: DOUBLE
43148: LD_INT 1
43150: DEC
43151: ST_TO_ADDR
43152: LD_VAR 0 1
43156: PUSH
43157: FOR_TO
43158: IFFALSE 43196
// if array1 [ i ] <> array2 [ i ] then
43160: LD_VAR 0 1
43164: PUSH
43165: LD_VAR 0 4
43169: ARRAY
43170: PUSH
43171: LD_VAR 0 2
43175: PUSH
43176: LD_VAR 0 4
43180: ARRAY
43181: NONEQUAL
43182: IFFALSE 43194
// begin result := false ;
43184: LD_ADDR_VAR 0 3
43188: PUSH
43189: LD_INT 0
43191: ST_TO_ADDR
// break ;
43192: GO 43196
// end ;
43194: GO 43157
43196: POP
43197: POP
// end ;
43198: LD_VAR 0 3
43202: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43203: LD_INT 0
43205: PPUSH
43206: PPUSH
43207: PPUSH
// pom := GetBase ( fac ) ;
43208: LD_ADDR_VAR 0 5
43212: PUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 274
43222: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43223: LD_ADDR_VAR 0 4
43227: PUSH
43228: LD_VAR 0 2
43232: PUSH
43233: LD_INT 1
43235: ARRAY
43236: PPUSH
43237: LD_VAR 0 2
43241: PUSH
43242: LD_INT 2
43244: ARRAY
43245: PPUSH
43246: LD_VAR 0 2
43250: PUSH
43251: LD_INT 3
43253: ARRAY
43254: PPUSH
43255: LD_VAR 0 2
43259: PUSH
43260: LD_INT 4
43262: ARRAY
43263: PPUSH
43264: CALL_OW 449
43268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_VAR 0 5
43278: PPUSH
43279: LD_INT 1
43281: PPUSH
43282: CALL_OW 275
43286: PUSH
43287: LD_VAR 0 4
43291: PUSH
43292: LD_INT 1
43294: ARRAY
43295: GREATEREQUAL
43296: IFFALSE 43322
43298: PUSH
43299: LD_VAR 0 5
43303: PPUSH
43304: LD_INT 2
43306: PPUSH
43307: CALL_OW 275
43311: PUSH
43312: LD_VAR 0 4
43316: PUSH
43317: LD_INT 2
43319: ARRAY
43320: GREATEREQUAL
43321: AND
43322: IFFALSE 43348
43324: PUSH
43325: LD_VAR 0 5
43329: PPUSH
43330: LD_INT 3
43332: PPUSH
43333: CALL_OW 275
43337: PUSH
43338: LD_VAR 0 4
43342: PUSH
43343: LD_INT 3
43345: ARRAY
43346: GREATEREQUAL
43347: AND
43348: ST_TO_ADDR
// end ;
43349: LD_VAR 0 3
43353: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43354: LD_INT 0
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
// pom := GetBase ( building ) ;
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: CALL_OW 274
43374: ST_TO_ADDR
// if not pom then
43375: LD_VAR 0 3
43379: NOT
43380: IFFALSE 43384
// exit ;
43382: GO 43558
// btype := GetBType ( building ) ;
43384: LD_ADDR_VAR 0 5
43388: PUSH
43389: LD_VAR 0 1
43393: PPUSH
43394: CALL_OW 266
43398: ST_TO_ADDR
// if btype = b_armoury then
43399: LD_VAR 0 5
43403: PUSH
43404: LD_INT 4
43406: EQUAL
43407: IFFALSE 43417
// btype := b_barracks ;
43409: LD_ADDR_VAR 0 5
43413: PUSH
43414: LD_INT 5
43416: ST_TO_ADDR
// if btype = b_depot then
43417: LD_VAR 0 5
43421: PUSH
43422: LD_INT 0
43424: EQUAL
43425: IFFALSE 43435
// btype := b_warehouse ;
43427: LD_ADDR_VAR 0 5
43431: PUSH
43432: LD_INT 1
43434: ST_TO_ADDR
// if btype = b_workshop then
43435: LD_VAR 0 5
43439: PUSH
43440: LD_INT 2
43442: EQUAL
43443: IFFALSE 43453
// btype := b_factory ;
43445: LD_ADDR_VAR 0 5
43449: PUSH
43450: LD_INT 3
43452: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43453: LD_ADDR_VAR 0 4
43457: PUSH
43458: LD_VAR 0 5
43462: PPUSH
43463: LD_VAR 0 1
43467: PPUSH
43468: CALL_OW 248
43472: PPUSH
43473: CALL_OW 450
43477: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43478: LD_ADDR_VAR 0 2
43482: PUSH
43483: LD_VAR 0 3
43487: PPUSH
43488: LD_INT 1
43490: PPUSH
43491: CALL_OW 275
43495: PUSH
43496: LD_VAR 0 4
43500: PUSH
43501: LD_INT 1
43503: ARRAY
43504: GREATEREQUAL
43505: IFFALSE 43531
43507: PUSH
43508: LD_VAR 0 3
43512: PPUSH
43513: LD_INT 2
43515: PPUSH
43516: CALL_OW 275
43520: PUSH
43521: LD_VAR 0 4
43525: PUSH
43526: LD_INT 2
43528: ARRAY
43529: GREATEREQUAL
43530: AND
43531: IFFALSE 43557
43533: PUSH
43534: LD_VAR 0 3
43538: PPUSH
43539: LD_INT 3
43541: PPUSH
43542: CALL_OW 275
43546: PUSH
43547: LD_VAR 0 4
43551: PUSH
43552: LD_INT 3
43554: ARRAY
43555: GREATEREQUAL
43556: AND
43557: ST_TO_ADDR
// end ;
43558: LD_VAR 0 2
43562: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43563: LD_INT 0
43565: PPUSH
43566: PPUSH
43567: PPUSH
// pom := GetBase ( building ) ;
43568: LD_ADDR_VAR 0 4
43572: PUSH
43573: LD_VAR 0 1
43577: PPUSH
43578: CALL_OW 274
43582: ST_TO_ADDR
// if not pom then
43583: LD_VAR 0 4
43587: NOT
43588: IFFALSE 43592
// exit ;
43590: GO 43697
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43592: LD_ADDR_VAR 0 5
43596: PUSH
43597: LD_VAR 0 2
43601: PPUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL_OW 248
43611: PPUSH
43612: CALL_OW 450
43616: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: LD_VAR 0 4
43626: PPUSH
43627: LD_INT 1
43629: PPUSH
43630: CALL_OW 275
43634: PUSH
43635: LD_VAR 0 5
43639: PUSH
43640: LD_INT 1
43642: ARRAY
43643: GREATEREQUAL
43644: IFFALSE 43670
43646: PUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: LD_INT 2
43654: PPUSH
43655: CALL_OW 275
43659: PUSH
43660: LD_VAR 0 5
43664: PUSH
43665: LD_INT 2
43667: ARRAY
43668: GREATEREQUAL
43669: AND
43670: IFFALSE 43696
43672: PUSH
43673: LD_VAR 0 4
43677: PPUSH
43678: LD_INT 3
43680: PPUSH
43681: CALL_OW 275
43685: PUSH
43686: LD_VAR 0 5
43690: PUSH
43691: LD_INT 3
43693: ARRAY
43694: GREATEREQUAL
43695: AND
43696: ST_TO_ADDR
// end ;
43697: LD_VAR 0 3
43701: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43702: LD_INT 0
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
// result := false ;
43715: LD_ADDR_VAR 0 8
43719: PUSH
43720: LD_INT 0
43722: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43723: LD_VAR 0 5
43727: NOT
43728: IFTRUE 43737
43730: PUSH
43731: LD_VAR 0 1
43735: NOT
43736: OR
43737: IFTRUE 43746
43739: PUSH
43740: LD_VAR 0 2
43744: NOT
43745: OR
43746: IFTRUE 43755
43748: PUSH
43749: LD_VAR 0 3
43753: NOT
43754: OR
43755: IFFALSE 43759
// exit ;
43757: GO 44585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43759: LD_ADDR_VAR 0 14
43763: PUSH
43764: LD_VAR 0 1
43768: PPUSH
43769: LD_VAR 0 2
43773: PPUSH
43774: LD_VAR 0 3
43778: PPUSH
43779: LD_VAR 0 4
43783: PPUSH
43784: LD_VAR 0 5
43788: PUSH
43789: LD_INT 1
43791: ARRAY
43792: PPUSH
43793: CALL_OW 248
43797: PPUSH
43798: LD_INT 0
43800: PPUSH
43801: CALL 45866 0 6
43805: ST_TO_ADDR
// if not hexes then
43806: LD_VAR 0 14
43810: NOT
43811: IFFALSE 43815
// exit ;
43813: GO 44585
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43815: LD_ADDR_VAR 0 17
43819: PUSH
43820: LD_VAR 0 5
43824: PPUSH
43825: LD_INT 22
43827: PUSH
43828: LD_VAR 0 13
43832: PPUSH
43833: CALL_OW 255
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 30
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 30
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PPUSH
43874: CALL_OW 72
43878: ST_TO_ADDR
// for i = 1 to hexes do
43879: LD_ADDR_VAR 0 9
43883: PUSH
43884: DOUBLE
43885: LD_INT 1
43887: DEC
43888: ST_TO_ADDR
43889: LD_VAR 0 14
43893: PUSH
43894: FOR_TO
43895: IFFALSE 44583
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43897: LD_ADDR_VAR 0 13
43901: PUSH
43902: LD_VAR 0 14
43906: PUSH
43907: LD_VAR 0 9
43911: ARRAY
43912: PUSH
43913: LD_INT 1
43915: ARRAY
43916: PPUSH
43917: LD_VAR 0 14
43921: PUSH
43922: LD_VAR 0 9
43926: ARRAY
43927: PUSH
43928: LD_INT 2
43930: ARRAY
43931: PPUSH
43932: CALL_OW 428
43936: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43937: LD_VAR 0 14
43941: PUSH
43942: LD_VAR 0 9
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: ARRAY
43951: PPUSH
43952: LD_VAR 0 14
43956: PUSH
43957: LD_VAR 0 9
43961: ARRAY
43962: PUSH
43963: LD_INT 2
43965: ARRAY
43966: PPUSH
43967: CALL_OW 351
43971: IFTRUE 44010
43973: PUSH
43974: LD_VAR 0 14
43978: PUSH
43979: LD_VAR 0 9
43983: ARRAY
43984: PUSH
43985: LD_INT 1
43987: ARRAY
43988: PPUSH
43989: LD_VAR 0 14
43993: PUSH
43994: LD_VAR 0 9
43998: ARRAY
43999: PUSH
44000: LD_INT 2
44002: ARRAY
44003: PPUSH
44004: CALL_OW 488
44008: NOT
44009: OR
44010: IFTRUE 44027
44012: PUSH
44013: LD_VAR 0 13
44017: PPUSH
44018: CALL_OW 247
44022: PUSH
44023: LD_INT 3
44025: EQUAL
44026: OR
44027: IFFALSE 44033
// exit ;
44029: POP
44030: POP
44031: GO 44585
// if not tmp then
44033: LD_VAR 0 13
44037: NOT
44038: IFFALSE 44042
// continue ;
44040: GO 43894
// result := true ;
44042: LD_ADDR_VAR 0 8
44046: PUSH
44047: LD_INT 1
44049: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44050: LD_VAR 0 6
44054: IFFALSE 44071
44056: PUSH
44057: LD_VAR 0 13
44061: PPUSH
44062: CALL_OW 247
44066: PUSH
44067: LD_INT 2
44069: EQUAL
44070: AND
44071: IFFALSE 44088
44073: PUSH
44074: LD_VAR 0 13
44078: PPUSH
44079: CALL_OW 263
44083: PUSH
44084: LD_INT 1
44086: EQUAL
44087: AND
44088: IFFALSE 44252
// begin if IsDrivenBy ( tmp ) then
44090: LD_VAR 0 13
44094: PPUSH
44095: CALL_OW 311
44099: IFFALSE 44103
// continue ;
44101: GO 43894
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44103: LD_VAR 0 6
44107: PPUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 60
44113: PUSH
44114: EMPTY
44115: LIST
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: LD_INT 55
44126: PUSH
44127: EMPTY
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PPUSH
44138: CALL_OW 72
44142: IFFALSE 44250
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44144: LD_ADDR_VAR 0 18
44148: PUSH
44149: LD_VAR 0 6
44153: PPUSH
44154: LD_INT 3
44156: PUSH
44157: LD_INT 60
44159: PUSH
44160: EMPTY
44161: LIST
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 55
44172: PUSH
44173: EMPTY
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PPUSH
44184: CALL_OW 72
44188: PUSH
44189: LD_INT 1
44191: ARRAY
44192: ST_TO_ADDR
// if IsInUnit ( driver ) then
44193: LD_VAR 0 18
44197: PPUSH
44198: CALL_OW 310
44202: IFFALSE 44213
// ComExit ( driver ) ;
44204: LD_VAR 0 18
44208: PPUSH
44209: CALL 69866 0 1
// AddComEnterUnit ( driver , tmp ) ;
44213: LD_VAR 0 18
44217: PPUSH
44218: LD_VAR 0 13
44222: PPUSH
44223: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44227: LD_VAR 0 18
44231: PPUSH
44232: LD_VAR 0 7
44236: PPUSH
44237: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44241: LD_VAR 0 18
44245: PPUSH
44246: CALL_OW 181
// end ; continue ;
44250: GO 43894
// end ; if not cleaners or not tmp in cleaners then
44252: LD_VAR 0 6
44256: NOT
44257: IFTRUE 44272
44259: PUSH
44260: LD_VAR 0 13
44264: PUSH
44265: LD_VAR 0 6
44269: IN
44270: NOT
44271: OR
44272: IFFALSE 44581
// begin if dep then
44274: LD_VAR 0 17
44278: IFFALSE 44414
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44280: LD_ADDR_VAR 0 16
44284: PUSH
44285: LD_VAR 0 17
44289: PUSH
44290: LD_INT 1
44292: ARRAY
44293: PPUSH
44294: CALL_OW 250
44298: PPUSH
44299: LD_VAR 0 17
44303: PUSH
44304: LD_INT 1
44306: ARRAY
44307: PPUSH
44308: CALL_OW 254
44312: PPUSH
44313: LD_INT 5
44315: PPUSH
44316: CALL_OW 272
44320: PUSH
44321: LD_VAR 0 17
44325: PUSH
44326: LD_INT 1
44328: ARRAY
44329: PPUSH
44330: CALL_OW 251
44334: PPUSH
44335: LD_VAR 0 17
44339: PUSH
44340: LD_INT 1
44342: ARRAY
44343: PPUSH
44344: CALL_OW 254
44348: PPUSH
44349: LD_INT 5
44351: PPUSH
44352: CALL_OW 273
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44361: LD_VAR 0 16
44365: PUSH
44366: LD_INT 1
44368: ARRAY
44369: PPUSH
44370: LD_VAR 0 16
44374: PUSH
44375: LD_INT 2
44377: ARRAY
44378: PPUSH
44379: CALL_OW 488
44383: IFFALSE 44414
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44385: LD_VAR 0 13
44389: PPUSH
44390: LD_VAR 0 16
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PPUSH
44399: LD_VAR 0 16
44403: PUSH
44404: LD_INT 2
44406: ARRAY
44407: PPUSH
44408: CALL_OW 111
// continue ;
44412: GO 43894
// end ; end ; r := GetDir ( tmp ) ;
44414: LD_ADDR_VAR 0 15
44418: PUSH
44419: LD_VAR 0 13
44423: PPUSH
44424: CALL_OW 254
44428: ST_TO_ADDR
// if r = 5 then
44429: LD_VAR 0 15
44433: PUSH
44434: LD_INT 5
44436: EQUAL
44437: IFFALSE 44447
// r := 0 ;
44439: LD_ADDR_VAR 0 15
44443: PUSH
44444: LD_INT 0
44446: ST_TO_ADDR
// for j = r to 5 do
44447: LD_ADDR_VAR 0 10
44451: PUSH
44452: DOUBLE
44453: LD_VAR 0 15
44457: DEC
44458: ST_TO_ADDR
44459: LD_INT 5
44461: PUSH
44462: FOR_TO
44463: IFFALSE 44579
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44465: LD_ADDR_VAR 0 11
44469: PUSH
44470: LD_VAR 0 13
44474: PPUSH
44475: CALL_OW 250
44479: PPUSH
44480: LD_VAR 0 10
44484: PPUSH
44485: LD_INT 2
44487: PPUSH
44488: CALL_OW 272
44492: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44493: LD_ADDR_VAR 0 12
44497: PUSH
44498: LD_VAR 0 13
44502: PPUSH
44503: CALL_OW 251
44507: PPUSH
44508: LD_VAR 0 10
44512: PPUSH
44513: LD_INT 2
44515: PPUSH
44516: CALL_OW 273
44520: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44521: LD_VAR 0 11
44525: PPUSH
44526: LD_VAR 0 12
44530: PPUSH
44531: CALL_OW 488
44535: IFFALSE 44554
44537: PUSH
44538: LD_VAR 0 11
44542: PPUSH
44543: LD_VAR 0 12
44547: PPUSH
44548: CALL_OW 428
44552: NOT
44553: AND
44554: IFFALSE 44577
// begin ComMoveXY ( tmp , _x , _y ) ;
44556: LD_VAR 0 13
44560: PPUSH
44561: LD_VAR 0 11
44565: PPUSH
44566: LD_VAR 0 12
44570: PPUSH
44571: CALL_OW 111
// break ;
44575: GO 44579
// end ; end ;
44577: GO 44462
44579: POP
44580: POP
// end ; end ;
44581: GO 43894
44583: POP
44584: POP
// end ;
44585: LD_VAR 0 8
44589: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44590: LD_INT 0
44592: PPUSH
// result := true ;
44593: LD_ADDR_VAR 0 3
44597: PUSH
44598: LD_INT 1
44600: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44601: LD_VAR 0 2
44605: PUSH
44606: LD_INT 24
44608: DOUBLE
44609: EQUAL
44610: IFTRUE 44620
44612: LD_INT 33
44614: DOUBLE
44615: EQUAL
44616: IFTRUE 44620
44618: GO 44645
44620: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_INT 32
44628: PPUSH
44629: LD_VAR 0 1
44633: PPUSH
44634: CALL_OW 321
44638: PUSH
44639: LD_INT 2
44641: EQUAL
44642: ST_TO_ADDR
44643: GO 44961
44645: LD_INT 20
44647: DOUBLE
44648: EQUAL
44649: IFTRUE 44653
44651: GO 44678
44653: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44654: LD_ADDR_VAR 0 3
44658: PUSH
44659: LD_INT 6
44661: PPUSH
44662: LD_VAR 0 1
44666: PPUSH
44667: CALL_OW 321
44671: PUSH
44672: LD_INT 2
44674: EQUAL
44675: ST_TO_ADDR
44676: GO 44961
44678: LD_INT 22
44680: DOUBLE
44681: EQUAL
44682: IFTRUE 44692
44684: LD_INT 36
44686: DOUBLE
44687: EQUAL
44688: IFTRUE 44692
44690: GO 44717
44692: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44693: LD_ADDR_VAR 0 3
44697: PUSH
44698: LD_INT 15
44700: PPUSH
44701: LD_VAR 0 1
44705: PPUSH
44706: CALL_OW 321
44710: PUSH
44711: LD_INT 2
44713: EQUAL
44714: ST_TO_ADDR
44715: GO 44961
44717: LD_INT 30
44719: DOUBLE
44720: EQUAL
44721: IFTRUE 44725
44723: GO 44750
44725: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44726: LD_ADDR_VAR 0 3
44730: PUSH
44731: LD_INT 20
44733: PPUSH
44734: LD_VAR 0 1
44738: PPUSH
44739: CALL_OW 321
44743: PUSH
44744: LD_INT 2
44746: EQUAL
44747: ST_TO_ADDR
44748: GO 44961
44750: LD_INT 28
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44764
44756: LD_INT 21
44758: DOUBLE
44759: EQUAL
44760: IFTRUE 44764
44762: GO 44789
44764: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44765: LD_ADDR_VAR 0 3
44769: PUSH
44770: LD_INT 21
44772: PPUSH
44773: LD_VAR 0 1
44777: PPUSH
44778: CALL_OW 321
44782: PUSH
44783: LD_INT 2
44785: EQUAL
44786: ST_TO_ADDR
44787: GO 44961
44789: LD_INT 16
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44797
44795: GO 44822
44797: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44798: LD_ADDR_VAR 0 3
44802: PUSH
44803: LD_INT 84
44805: PPUSH
44806: LD_VAR 0 1
44810: PPUSH
44811: CALL_OW 321
44815: PUSH
44816: LD_INT 2
44818: EQUAL
44819: ST_TO_ADDR
44820: GO 44961
44822: LD_INT 19
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44836
44828: LD_INT 23
44830: DOUBLE
44831: EQUAL
44832: IFTRUE 44836
44834: GO 44861
44836: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44837: LD_ADDR_VAR 0 3
44841: PUSH
44842: LD_INT 83
44844: PPUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 321
44854: PUSH
44855: LD_INT 2
44857: EQUAL
44858: ST_TO_ADDR
44859: GO 44961
44861: LD_INT 17
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 44894
44869: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_INT 39
44877: PPUSH
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 321
44887: PUSH
44888: LD_INT 2
44890: EQUAL
44891: ST_TO_ADDR
44892: GO 44961
44894: LD_INT 18
44896: DOUBLE
44897: EQUAL
44898: IFTRUE 44902
44900: GO 44927
44902: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44903: LD_ADDR_VAR 0 3
44907: PUSH
44908: LD_INT 40
44910: PPUSH
44911: LD_VAR 0 1
44915: PPUSH
44916: CALL_OW 321
44920: PUSH
44921: LD_INT 2
44923: EQUAL
44924: ST_TO_ADDR
44925: GO 44961
44927: LD_INT 27
44929: DOUBLE
44930: EQUAL
44931: IFTRUE 44935
44933: GO 44960
44935: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: LD_INT 35
44943: PPUSH
44944: LD_VAR 0 1
44948: PPUSH
44949: CALL_OW 321
44953: PUSH
44954: LD_INT 2
44956: EQUAL
44957: ST_TO_ADDR
44958: GO 44961
44960: POP
// end ;
44961: LD_VAR 0 3
44965: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44966: LD_INT 0
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
// result := false ;
44979: LD_ADDR_VAR 0 6
44983: PUSH
44984: LD_INT 0
44986: ST_TO_ADDR
// if btype = b_depot then
44987: LD_VAR 0 2
44991: PUSH
44992: LD_INT 0
44994: EQUAL
44995: IFFALSE 45007
// begin result := true ;
44997: LD_ADDR_VAR 0 6
45001: PUSH
45002: LD_INT 1
45004: ST_TO_ADDR
// exit ;
45005: GO 45861
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45007: LD_VAR 0 1
45011: NOT
45012: IFTRUE 45037
45014: PUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 266
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: IN
45035: NOT
45036: OR
45037: IFTRUE 45046
45039: PUSH
45040: LD_VAR 0 2
45044: NOT
45045: OR
45046: IFTRUE 45082
45048: PUSH
45049: LD_VAR 0 5
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 4
45068: PUSH
45069: LD_INT 5
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: IN
45080: NOT
45081: OR
45082: IFTRUE 45101
45084: PUSH
45085: LD_VAR 0 3
45089: PPUSH
45090: LD_VAR 0 4
45094: PPUSH
45095: CALL_OW 488
45099: NOT
45100: OR
45101: IFFALSE 45105
// exit ;
45103: GO 45861
// side := GetSide ( depot ) ;
45105: LD_ADDR_VAR 0 9
45109: PUSH
45110: LD_VAR 0 1
45114: PPUSH
45115: CALL_OW 255
45119: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45120: LD_VAR 0 9
45124: PPUSH
45125: LD_VAR 0 2
45129: PPUSH
45130: CALL 44590 0 2
45134: NOT
45135: IFFALSE 45139
// exit ;
45137: GO 45861
// pom := GetBase ( depot ) ;
45139: LD_ADDR_VAR 0 10
45143: PUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: CALL_OW 274
45153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45154: LD_ADDR_VAR 0 11
45158: PUSH
45159: LD_VAR 0 2
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 248
45173: PPUSH
45174: CALL_OW 450
45178: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45179: LD_VAR 0 10
45183: PPUSH
45184: LD_INT 1
45186: PPUSH
45187: CALL_OW 275
45191: PUSH
45192: LD_VAR 0 11
45196: PUSH
45197: LD_INT 1
45199: ARRAY
45200: GREATEREQUAL
45201: IFFALSE 45227
45203: PUSH
45204: LD_VAR 0 10
45208: PPUSH
45209: LD_INT 2
45211: PPUSH
45212: CALL_OW 275
45216: PUSH
45217: LD_VAR 0 11
45221: PUSH
45222: LD_INT 2
45224: ARRAY
45225: GREATEREQUAL
45226: AND
45227: IFFALSE 45253
45229: PUSH
45230: LD_VAR 0 10
45234: PPUSH
45235: LD_INT 3
45237: PPUSH
45238: CALL_OW 275
45242: PUSH
45243: LD_VAR 0 11
45247: PUSH
45248: LD_INT 3
45250: ARRAY
45251: GREATEREQUAL
45252: AND
45253: NOT
45254: IFFALSE 45258
// exit ;
45256: GO 45861
// if GetBType ( depot ) = b_depot then
45258: LD_VAR 0 1
45262: PPUSH
45263: CALL_OW 266
45267: PUSH
45268: LD_INT 0
45270: EQUAL
45271: IFFALSE 45283
// dist := 28 else
45273: LD_ADDR_VAR 0 14
45277: PUSH
45278: LD_INT 28
45280: ST_TO_ADDR
45281: GO 45291
// dist := 36 ;
45283: LD_ADDR_VAR 0 14
45287: PUSH
45288: LD_INT 36
45290: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_VAR 0 3
45300: PPUSH
45301: LD_VAR 0 4
45305: PPUSH
45306: CALL_OW 297
45310: PUSH
45311: LD_VAR 0 14
45315: GREATER
45316: IFFALSE 45320
// exit ;
45318: GO 45861
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45320: LD_ADDR_VAR 0 12
45324: PUSH
45325: LD_VAR 0 2
45329: PPUSH
45330: LD_VAR 0 3
45334: PPUSH
45335: LD_VAR 0 4
45339: PPUSH
45340: LD_VAR 0 5
45344: PPUSH
45345: LD_VAR 0 1
45349: PPUSH
45350: CALL_OW 248
45354: PPUSH
45355: LD_INT 0
45357: PPUSH
45358: CALL 45866 0 6
45362: ST_TO_ADDR
// if not hexes then
45363: LD_VAR 0 12
45367: NOT
45368: IFFALSE 45372
// exit ;
45370: GO 45861
// hex := GetHexInfo ( x , y ) ;
45372: LD_ADDR_VAR 0 15
45376: PUSH
45377: LD_VAR 0 3
45381: PPUSH
45382: LD_VAR 0 4
45386: PPUSH
45387: CALL_OW 546
45391: ST_TO_ADDR
// if hex [ 1 ] then
45392: LD_VAR 0 15
45396: PUSH
45397: LD_INT 1
45399: ARRAY
45400: IFFALSE 45404
// exit ;
45402: GO 45861
// height := hex [ 2 ] ;
45404: LD_ADDR_VAR 0 13
45408: PUSH
45409: LD_VAR 0 15
45413: PUSH
45414: LD_INT 2
45416: ARRAY
45417: ST_TO_ADDR
// for i = 1 to hexes do
45418: LD_ADDR_VAR 0 7
45422: PUSH
45423: DOUBLE
45424: LD_INT 1
45426: DEC
45427: ST_TO_ADDR
45428: LD_VAR 0 12
45432: PUSH
45433: FOR_TO
45434: IFFALSE 45778
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45436: LD_VAR 0 12
45440: PUSH
45441: LD_VAR 0 7
45445: ARRAY
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PPUSH
45451: LD_VAR 0 12
45455: PUSH
45456: LD_VAR 0 7
45460: ARRAY
45461: PUSH
45462: LD_INT 2
45464: ARRAY
45465: PPUSH
45466: CALL_OW 488
45470: NOT
45471: IFTRUE 45513
45473: PUSH
45474: LD_VAR 0 12
45478: PUSH
45479: LD_VAR 0 7
45483: ARRAY
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PPUSH
45489: LD_VAR 0 12
45493: PUSH
45494: LD_VAR 0 7
45498: ARRAY
45499: PUSH
45500: LD_INT 2
45502: ARRAY
45503: PPUSH
45504: CALL_OW 428
45508: PUSH
45509: LD_INT 0
45511: GREATER
45512: OR
45513: IFTRUE 45551
45515: PUSH
45516: LD_VAR 0 12
45520: PUSH
45521: LD_VAR 0 7
45525: ARRAY
45526: PUSH
45527: LD_INT 1
45529: ARRAY
45530: PPUSH
45531: LD_VAR 0 12
45535: PUSH
45536: LD_VAR 0 7
45540: ARRAY
45541: PUSH
45542: LD_INT 2
45544: ARRAY
45545: PPUSH
45546: CALL_OW 351
45550: OR
45551: IFFALSE 45557
// exit ;
45553: POP
45554: POP
45555: GO 45861
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45557: LD_ADDR_VAR 0 8
45561: PUSH
45562: LD_VAR 0 12
45566: PUSH
45567: LD_VAR 0 7
45571: ARRAY
45572: PUSH
45573: LD_INT 1
45575: ARRAY
45576: PPUSH
45577: LD_VAR 0 12
45581: PUSH
45582: LD_VAR 0 7
45586: ARRAY
45587: PUSH
45588: LD_INT 2
45590: ARRAY
45591: PPUSH
45592: CALL_OW 546
45596: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45597: LD_VAR 0 8
45601: PUSH
45602: LD_INT 1
45604: ARRAY
45605: IFTRUE 45627
45607: PUSH
45608: LD_VAR 0 8
45612: PUSH
45613: LD_INT 2
45615: ARRAY
45616: PUSH
45617: LD_VAR 0 13
45621: PUSH
45622: LD_INT 2
45624: PLUS
45625: GREATER
45626: OR
45627: IFTRUE 45649
45629: PUSH
45630: LD_VAR 0 8
45634: PUSH
45635: LD_INT 2
45637: ARRAY
45638: PUSH
45639: LD_VAR 0 13
45643: PUSH
45644: LD_INT 2
45646: MINUS
45647: LESS
45648: OR
45649: IFTRUE 45717
45651: PUSH
45652: LD_VAR 0 8
45656: PUSH
45657: LD_INT 3
45659: ARRAY
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 8
45666: PUSH
45667: LD_INT 9
45669: PUSH
45670: LD_INT 10
45672: PUSH
45673: LD_INT 11
45675: PUSH
45676: LD_INT 12
45678: PUSH
45679: LD_INT 13
45681: PUSH
45682: LD_INT 16
45684: PUSH
45685: LD_INT 17
45687: PUSH
45688: LD_INT 18
45690: PUSH
45691: LD_INT 19
45693: PUSH
45694: LD_INT 20
45696: PUSH
45697: LD_INT 21
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: IN
45715: NOT
45716: OR
45717: IFTRUE 45730
45719: PUSH
45720: LD_VAR 0 8
45724: PUSH
45725: LD_INT 5
45727: ARRAY
45728: NOT
45729: OR
45730: IFTRUE 45770
45732: PUSH
45733: LD_VAR 0 8
45737: PUSH
45738: LD_INT 6
45740: ARRAY
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 7
45750: PUSH
45751: LD_INT 9
45753: PUSH
45754: LD_INT 10
45756: PUSH
45757: LD_INT 11
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: IN
45768: NOT
45769: OR
45770: IFFALSE 45776
// exit ;
45772: POP
45773: POP
45774: GO 45861
// end ;
45776: GO 45433
45778: POP
45779: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45780: LD_VAR 0 9
45784: PPUSH
45785: LD_VAR 0 3
45789: PPUSH
45790: LD_VAR 0 4
45794: PPUSH
45795: LD_INT 20
45797: PPUSH
45798: CALL 37680 0 4
45802: PUSH
45803: LD_INT 4
45805: ARRAY
45806: IFFALSE 45810
// exit ;
45808: GO 45861
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45810: LD_VAR 0 2
45814: PUSH
45815: LD_INT 29
45817: PUSH
45818: LD_INT 30
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: IN
45825: IFFALSE 45849
45827: PUSH
45828: LD_VAR 0 3
45832: PPUSH
45833: LD_VAR 0 4
45837: PPUSH
45838: LD_VAR 0 9
45842: PPUSH
45843: CALL_OW 440
45847: NOT
45848: AND
45849: IFFALSE 45853
// exit ;
45851: GO 45861
// result := true ;
45853: LD_ADDR_VAR 0 6
45857: PUSH
45858: LD_INT 1
45860: ST_TO_ADDR
// end ;
45861: LD_VAR 0 6
45865: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45866: LD_INT 0
45868: PPUSH
45869: PPUSH
45870: PPUSH
45871: PPUSH
45872: PPUSH
45873: PPUSH
45874: PPUSH
45875: PPUSH
45876: PPUSH
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
45906: PPUSH
45907: PPUSH
45908: PPUSH
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
// result = [ ] ;
45926: LD_ADDR_VAR 0 7
45930: PUSH
45931: EMPTY
45932: ST_TO_ADDR
// temp_list = [ ] ;
45933: LD_ADDR_VAR 0 9
45937: PUSH
45938: EMPTY
45939: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45940: LD_VAR 0 4
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: LD_INT 4
45959: PUSH
45960: LD_INT 5
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: IN
45971: NOT
45972: IFTRUE 46015
45974: PUSH
45975: LD_VAR 0 1
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: IN
45990: IFFALSE 46014
45992: PUSH
45993: LD_VAR 0 5
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: IN
46012: NOT
46013: AND
46014: OR
46015: IFFALSE 46019
// exit ;
46017: GO 64418
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46019: LD_VAR 0 1
46023: PUSH
46024: LD_INT 6
46026: PUSH
46027: LD_INT 7
46029: PUSH
46030: LD_INT 8
46032: PUSH
46033: LD_INT 13
46035: PUSH
46036: LD_INT 12
46038: PUSH
46039: LD_INT 15
46041: PUSH
46042: LD_INT 11
46044: PUSH
46045: LD_INT 14
46047: PUSH
46048: LD_INT 10
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: IN
46062: IFFALSE 46072
// btype = b_lab ;
46064: LD_ADDR_VAR 0 1
46068: PUSH
46069: LD_INT 6
46071: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46072: LD_VAR 0 6
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: IN
46091: NOT
46092: IFTRUE 46160
46094: PUSH
46095: LD_VAR 0 1
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: LD_INT 6
46114: PUSH
46115: LD_INT 36
46117: PUSH
46118: LD_INT 4
46120: PUSH
46121: LD_INT 5
46123: PUSH
46124: LD_INT 31
46126: PUSH
46127: LD_INT 32
46129: PUSH
46130: LD_INT 33
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: IN
46146: NOT
46147: IFFALSE 46159
46149: PUSH
46150: LD_VAR 0 6
46154: PUSH
46155: LD_INT 1
46157: EQUAL
46158: AND
46159: OR
46160: IFTRUE 46192
46162: PUSH
46163: LD_VAR 0 1
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: IN
46178: NOT
46179: IFFALSE 46191
46181: PUSH
46182: LD_VAR 0 6
46186: PUSH
46187: LD_INT 2
46189: EQUAL
46190: AND
46191: OR
46192: IFFALSE 46202
// mode = 0 ;
46194: LD_ADDR_VAR 0 6
46198: PUSH
46199: LD_INT 0
46201: ST_TO_ADDR
// case mode of 0 :
46202: LD_VAR 0 6
46206: PUSH
46207: LD_INT 0
46209: DOUBLE
46210: EQUAL
46211: IFTRUE 46215
46213: GO 57668
46215: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46216: LD_ADDR_VAR 0 11
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46409: LD_ADDR_VAR 0 12
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: NEG
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46605: LD_ADDR_VAR 0 13
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46804: LD_ADDR_VAR 0 14
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47000: LD_ADDR_VAR 0 15
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47193: LD_ADDR_VAR 0 16
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47386: LD_ADDR_VAR 0 17
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47616: LD_ADDR_VAR 0 18
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47846: LD_ADDR_VAR 0 19
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48076: LD_ADDR_VAR 0 20
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48306: LD_ADDR_VAR 0 21
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48536: LD_ADDR_VAR 0 22
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48766: LD_ADDR_VAR 0 23
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49046: LD_ADDR_VAR 0 24
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49322: LD_ADDR_VAR 0 25
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49596: LD_ADDR_VAR 0 26
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49872: LD_ADDR_VAR 0 27
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 3
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50152: LD_ADDR_VAR 0 28
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50434: LD_ADDR_VAR 0 29
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 3
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50713: LD_ADDR_VAR 0 30
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 3
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50991: LD_ADDR_VAR 0 31
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51269: LD_ADDR_VAR 0 32
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51547: LD_ADDR_VAR 0 33
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51826: LD_ADDR_VAR 0 34
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52106: LD_ADDR_VAR 0 35
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52218: LD_ADDR_VAR 0 36
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52330: LD_ADDR_VAR 0 37
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52442: LD_ADDR_VAR 0 38
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52554: LD_ADDR_VAR 0 39
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52666: LD_ADDR_VAR 0 40
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52778: LD_ADDR_VAR 0 41
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: LD_INT 3
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53128: LD_ADDR_VAR 0 42
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: LD_INT 3
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 3
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 3
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 3
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53478: LD_ADDR_VAR 0 43
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53826: LD_ADDR_VAR 0 44
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54176: LD_ADDR_VAR 0 45
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 3
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54526: LD_ADDR_VAR 0 46
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 3
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54874: LD_ADDR_VAR 0 47
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55025: LD_ADDR_VAR 0 48
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55172: LD_ADDR_VAR 0 49
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55316: LD_ADDR_VAR 0 50
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55460: LD_ADDR_VAR 0 51
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55607: LD_ADDR_VAR 0 52
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55758: LD_ADDR_VAR 0 53
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55988: LD_ADDR_VAR 0 54
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56218: LD_ADDR_VAR 0 55
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56448: LD_ADDR_VAR 0 56
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56678: LD_ADDR_VAR 0 57
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56908: LD_ADDR_VAR 0 58
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57138: LD_ADDR_VAR 0 59
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57226: LD_ADDR_VAR 0 60
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57314: LD_ADDR_VAR 0 61
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57402: LD_ADDR_VAR 0 62
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57490: LD_ADDR_VAR 0 63
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57578: LD_ADDR_VAR 0 64
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: ST_TO_ADDR
// end ; 1 :
57666: GO 63563
57668: LD_INT 1
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57676
57674: GO 60299
57676: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57677: LD_ADDR_VAR 0 11
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57721: LD_ADDR_VAR 0 12
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57762: LD_ADDR_VAR 0 13
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57802: LD_ADDR_VAR 0 14
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57843: LD_ADDR_VAR 0 15
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 3
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57887: LD_ADDR_VAR 0 16
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57933: LD_ADDR_VAR 0 17
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57977: LD_ADDR_VAR 0 18
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58018: LD_ADDR_VAR 0 19
58022: PUSH
58023: LD_INT 3
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58058: LD_ADDR_VAR 0 20
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58099: LD_ADDR_VAR 0 21
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58143: LD_ADDR_VAR 0 22
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58189: LD_ADDR_VAR 0 23
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 4
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58233: LD_ADDR_VAR 0 24
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58274: LD_ADDR_VAR 0 25
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 4
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58314: LD_ADDR_VAR 0 26
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 3
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 4
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58355: LD_ADDR_VAR 0 27
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 4
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58399: LD_ADDR_VAR 0 28
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58445: LD_ADDR_VAR 0 29
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 4
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 5
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 5
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 4
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 6
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 6
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 5
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58600: LD_ADDR_VAR 0 30
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 4
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 5
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 5
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 6
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 6
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58743: LD_ADDR_VAR 0 31
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 4
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 4
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 5
58810: PUSH
58811: LD_INT 4
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 5
58820: PUSH
58821: LD_INT 5
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: LD_INT 5
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 6
58840: PUSH
58841: LD_INT 5
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 6
58850: PUSH
58851: LD_INT 6
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 5
58860: PUSH
58861: LD_INT 6
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58882: LD_ADDR_VAR 0 32
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 4
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 4
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 6
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 6
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 5
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59025: LD_ADDR_VAR 0 33
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 4
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 4
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 5
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 5
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 5
59134: NEG
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 6
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 6
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59180: LD_ADDR_VAR 0 34
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: LD_INT 5
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 5
59271: NEG
59272: PUSH
59273: LD_INT 4
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 5
59283: NEG
59284: PUSH
59285: LD_INT 5
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 5
59295: NEG
59296: PUSH
59297: LD_INT 6
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 6
59307: NEG
59308: PUSH
59309: LD_INT 5
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 6
59319: NEG
59320: PUSH
59321: LD_INT 6
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59343: LD_ADDR_VAR 0 41
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59387: LD_ADDR_VAR 0 42
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59428: LD_ADDR_VAR 0 43
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59468: LD_ADDR_VAR 0 44
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: LIST
59508: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59509: LD_ADDR_VAR 0 45
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59553: LD_ADDR_VAR 0 46
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59599: LD_ADDR_VAR 0 47
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59632: LD_ADDR_VAR 0 48
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59663: LD_ADDR_VAR 0 49
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59692: LD_ADDR_VAR 0 50
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: LD_INT 3
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59721: LD_ADDR_VAR 0 51
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59752: LD_ADDR_VAR 0 52
59756: PUSH
59757: LD_INT 3
59759: NEG
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59785: LD_ADDR_VAR 0 53
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 3
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59829: LD_ADDR_VAR 0 54
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 3
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59870: LD_ADDR_VAR 0 55
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 3
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59910: LD_ADDR_VAR 0 56
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59951: LD_ADDR_VAR 0 57
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59995: LD_ADDR_VAR 0 58
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60041: LD_ADDR_VAR 0 59
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60085: LD_ADDR_VAR 0 60
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60126: LD_ADDR_VAR 0 61
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60166: LD_ADDR_VAR 0 62
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60207: LD_ADDR_VAR 0 63
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60251: LD_ADDR_VAR 0 64
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// end ; 2 :
60297: GO 63563
60299: LD_INT 2
60301: DOUBLE
60302: EQUAL
60303: IFTRUE 60307
60305: GO 63562
60307: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60308: LD_ADDR_VAR 0 29
60312: PUSH
60313: LD_INT 4
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 5
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 5
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 5
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 4
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: LD_INT 4
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 4
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 5
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 5
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 4
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: LD_INT 5
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: NEG
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 4
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 4
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 4
60693: NEG
60694: PUSH
60695: LD_INT 4
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: LD_INT 5
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 4
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: LD_INT 3
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 4
60741: NEG
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 5
60753: NEG
60754: PUSH
60755: LD_INT 4
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 5
60765: NEG
60766: PUSH
60767: LD_INT 5
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: LD_INT 5
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 5
60789: NEG
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60846: LD_ADDR_VAR 0 30
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 5
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 5
60883: PUSH
60884: LD_INT 5
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 4
60893: PUSH
60894: LD_INT 5
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 5
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: LD_INT 5
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 4
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 4
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 4
61036: NEG
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 4
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 5
61092: NEG
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 5
61103: NEG
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 5
61115: NEG
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: LD_INT 4
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: LD_INT 3
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 4
61210: NEG
61211: PUSH
61212: LD_INT 4
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: LD_INT 4
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 4
61234: NEG
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: LD_INT 4
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 5
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: LD_INT 4
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 3
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 3
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: LD_INT 5
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: LD_INT 5
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61393: LD_ADDR_VAR 0 31
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 4
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 5
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 5
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: PUSH
61473: LD_INT 5
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: NEG
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 4
61595: NEG
61596: PUSH
61597: LD_INT 4
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 4
61607: NEG
61608: PUSH
61609: LD_INT 5
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: LD_INT 4
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 4
61643: NEG
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 5
61655: NEG
61656: PUSH
61657: LD_INT 4
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 5
61667: NEG
61668: PUSH
61669: LD_INT 5
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: LD_INT 5
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 5
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 3
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 3
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 3
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 2
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: LD_INT 4
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 4
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 5
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 5
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 5
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61943: LD_ADDR_VAR 0 32
61947: PUSH
61948: LD_INT 4
61950: NEG
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: NEG
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 3
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 4
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 5
62006: NEG
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 5
62017: NEG
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 5
62029: NEG
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: NEG
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: LD_INT 4
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: LD_INT 2
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 3
62100: NEG
62101: PUSH
62102: LD_INT 2
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 4
62112: NEG
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 4
62124: NEG
62125: PUSH
62126: LD_INT 4
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 4
62148: NEG
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 4
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 5
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 3
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: LD_INT 4
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 5
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: LD_INT 5
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 4
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 4
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 4
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: LD_INT 4
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 4
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 5
62375: PUSH
62376: LD_INT 4
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 5
62385: PUSH
62386: LD_INT 5
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 4
62395: PUSH
62396: LD_INT 5
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: LD_INT 4
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 5
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: LD_INT 5
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62490: LD_ADDR_VAR 0 33
62494: PUSH
62495: LD_INT 4
62497: NEG
62498: PUSH
62499: LD_INT 4
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: NEG
62510: PUSH
62511: LD_INT 5
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: LD_INT 4
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: NEG
62534: PUSH
62535: LD_INT 3
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 4
62545: NEG
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 5
62557: NEG
62558: PUSH
62559: LD_INT 4
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 5
62569: NEG
62570: PUSH
62571: LD_INT 5
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: LD_INT 5
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 5
62593: NEG
62594: PUSH
62595: LD_INT 3
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 4
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 3
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 4
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 4
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 4
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 4
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 5
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 5
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 5
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: LD_INT 3
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 4
62830: PUSH
62831: LD_INT 4
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: PUSH
62841: LD_INT 4
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 4
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 4
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 4
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 5
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 5
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 4
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 5
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63028: LD_ADDR_VAR 0 34
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 4
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 5
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: LD_INT 4
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 4
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 5
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 5
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 4
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 4
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 4
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 4
63230: PUSH
63231: LD_INT 4
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 5
63250: PUSH
63251: LD_INT 4
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 5
63260: PUSH
63261: LD_INT 5
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 4
63270: PUSH
63271: LD_INT 5
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: LD_INT 4
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 5
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: LD_INT 5
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 3
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 4
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 4
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 4
63413: NEG
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 4
63424: NEG
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: NEG
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 3
63447: NEG
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 4
63458: NEG
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 5
63469: NEG
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: NEG
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 5
63492: NEG
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 3
63504: NEG
63505: PUSH
63506: LD_INT 2
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: ST_TO_ADDR
// end ; end ;
63560: GO 63563
63562: POP
// case btype of b_depot , b_warehouse :
63563: LD_VAR 0 1
63567: PUSH
63568: LD_INT 0
63570: DOUBLE
63571: EQUAL
63572: IFTRUE 63582
63574: LD_INT 1
63576: DOUBLE
63577: EQUAL
63578: IFTRUE 63582
63580: GO 63783
63582: POP
// case nation of nation_american :
63583: LD_VAR 0 5
63587: PUSH
63588: LD_INT 1
63590: DOUBLE
63591: EQUAL
63592: IFTRUE 63596
63594: GO 63652
63596: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63597: LD_ADDR_VAR 0 9
63601: PUSH
63602: LD_VAR 0 11
63606: PUSH
63607: LD_VAR 0 12
63611: PUSH
63612: LD_VAR 0 13
63616: PUSH
63617: LD_VAR 0 14
63621: PUSH
63622: LD_VAR 0 15
63626: PUSH
63627: LD_VAR 0 16
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: LD_VAR 0 4
63644: PUSH
63645: LD_INT 1
63647: PLUS
63648: ARRAY
63649: ST_TO_ADDR
63650: GO 63781
63652: LD_INT 2
63654: DOUBLE
63655: EQUAL
63656: IFTRUE 63660
63658: GO 63716
63660: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63661: LD_ADDR_VAR 0 9
63665: PUSH
63666: LD_VAR 0 17
63670: PUSH
63671: LD_VAR 0 18
63675: PUSH
63676: LD_VAR 0 19
63680: PUSH
63681: LD_VAR 0 20
63685: PUSH
63686: LD_VAR 0 21
63690: PUSH
63691: LD_VAR 0 22
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: PUSH
63704: LD_VAR 0 4
63708: PUSH
63709: LD_INT 1
63711: PLUS
63712: ARRAY
63713: ST_TO_ADDR
63714: GO 63781
63716: LD_INT 3
63718: DOUBLE
63719: EQUAL
63720: IFTRUE 63724
63722: GO 63780
63724: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63725: LD_ADDR_VAR 0 9
63729: PUSH
63730: LD_VAR 0 23
63734: PUSH
63735: LD_VAR 0 24
63739: PUSH
63740: LD_VAR 0 25
63744: PUSH
63745: LD_VAR 0 26
63749: PUSH
63750: LD_VAR 0 27
63754: PUSH
63755: LD_VAR 0 28
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: PUSH
63768: LD_VAR 0 4
63772: PUSH
63773: LD_INT 1
63775: PLUS
63776: ARRAY
63777: ST_TO_ADDR
63778: GO 63781
63780: POP
63781: GO 64336
63783: LD_INT 2
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63797
63789: LD_INT 3
63791: DOUBLE
63792: EQUAL
63793: IFTRUE 63797
63795: GO 63853
63797: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63798: LD_ADDR_VAR 0 9
63802: PUSH
63803: LD_VAR 0 29
63807: PUSH
63808: LD_VAR 0 30
63812: PUSH
63813: LD_VAR 0 31
63817: PUSH
63818: LD_VAR 0 32
63822: PUSH
63823: LD_VAR 0 33
63827: PUSH
63828: LD_VAR 0 34
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: PUSH
63841: LD_VAR 0 4
63845: PUSH
63846: LD_INT 1
63848: PLUS
63849: ARRAY
63850: ST_TO_ADDR
63851: GO 64336
63853: LD_INT 16
63855: DOUBLE
63856: EQUAL
63857: IFTRUE 63915
63859: LD_INT 17
63861: DOUBLE
63862: EQUAL
63863: IFTRUE 63915
63865: LD_INT 18
63867: DOUBLE
63868: EQUAL
63869: IFTRUE 63915
63871: LD_INT 19
63873: DOUBLE
63874: EQUAL
63875: IFTRUE 63915
63877: LD_INT 22
63879: DOUBLE
63880: EQUAL
63881: IFTRUE 63915
63883: LD_INT 20
63885: DOUBLE
63886: EQUAL
63887: IFTRUE 63915
63889: LD_INT 21
63891: DOUBLE
63892: EQUAL
63893: IFTRUE 63915
63895: LD_INT 23
63897: DOUBLE
63898: EQUAL
63899: IFTRUE 63915
63901: LD_INT 24
63903: DOUBLE
63904: EQUAL
63905: IFTRUE 63915
63907: LD_INT 25
63909: DOUBLE
63910: EQUAL
63911: IFTRUE 63915
63913: GO 63971
63915: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63916: LD_ADDR_VAR 0 9
63920: PUSH
63921: LD_VAR 0 35
63925: PUSH
63926: LD_VAR 0 36
63930: PUSH
63931: LD_VAR 0 37
63935: PUSH
63936: LD_VAR 0 38
63940: PUSH
63941: LD_VAR 0 39
63945: PUSH
63946: LD_VAR 0 40
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 4
63963: PUSH
63964: LD_INT 1
63966: PLUS
63967: ARRAY
63968: ST_TO_ADDR
63969: GO 64336
63971: LD_INT 6
63973: DOUBLE
63974: EQUAL
63975: IFTRUE 64027
63977: LD_INT 7
63979: DOUBLE
63980: EQUAL
63981: IFTRUE 64027
63983: LD_INT 8
63985: DOUBLE
63986: EQUAL
63987: IFTRUE 64027
63989: LD_INT 13
63991: DOUBLE
63992: EQUAL
63993: IFTRUE 64027
63995: LD_INT 12
63997: DOUBLE
63998: EQUAL
63999: IFTRUE 64027
64001: LD_INT 15
64003: DOUBLE
64004: EQUAL
64005: IFTRUE 64027
64007: LD_INT 11
64009: DOUBLE
64010: EQUAL
64011: IFTRUE 64027
64013: LD_INT 14
64015: DOUBLE
64016: EQUAL
64017: IFTRUE 64027
64019: LD_INT 10
64021: DOUBLE
64022: EQUAL
64023: IFTRUE 64027
64025: GO 64083
64027: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64028: LD_ADDR_VAR 0 9
64032: PUSH
64033: LD_VAR 0 41
64037: PUSH
64038: LD_VAR 0 42
64042: PUSH
64043: LD_VAR 0 43
64047: PUSH
64048: LD_VAR 0 44
64052: PUSH
64053: LD_VAR 0 45
64057: PUSH
64058: LD_VAR 0 46
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: PUSH
64071: LD_VAR 0 4
64075: PUSH
64076: LD_INT 1
64078: PLUS
64079: ARRAY
64080: ST_TO_ADDR
64081: GO 64336
64083: LD_INT 36
64085: DOUBLE
64086: EQUAL
64087: IFTRUE 64091
64089: GO 64147
64091: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64092: LD_ADDR_VAR 0 9
64096: PUSH
64097: LD_VAR 0 47
64101: PUSH
64102: LD_VAR 0 48
64106: PUSH
64107: LD_VAR 0 49
64111: PUSH
64112: LD_VAR 0 50
64116: PUSH
64117: LD_VAR 0 51
64121: PUSH
64122: LD_VAR 0 52
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: PUSH
64135: LD_VAR 0 4
64139: PUSH
64140: LD_INT 1
64142: PLUS
64143: ARRAY
64144: ST_TO_ADDR
64145: GO 64336
64147: LD_INT 4
64149: DOUBLE
64150: EQUAL
64151: IFTRUE 64173
64153: LD_INT 5
64155: DOUBLE
64156: EQUAL
64157: IFTRUE 64173
64159: LD_INT 34
64161: DOUBLE
64162: EQUAL
64163: IFTRUE 64173
64165: LD_INT 37
64167: DOUBLE
64168: EQUAL
64169: IFTRUE 64173
64171: GO 64229
64173: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64174: LD_ADDR_VAR 0 9
64178: PUSH
64179: LD_VAR 0 53
64183: PUSH
64184: LD_VAR 0 54
64188: PUSH
64189: LD_VAR 0 55
64193: PUSH
64194: LD_VAR 0 56
64198: PUSH
64199: LD_VAR 0 57
64203: PUSH
64204: LD_VAR 0 58
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: PUSH
64217: LD_VAR 0 4
64221: PUSH
64222: LD_INT 1
64224: PLUS
64225: ARRAY
64226: ST_TO_ADDR
64227: GO 64336
64229: LD_INT 31
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64279
64235: LD_INT 32
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64279
64241: LD_INT 33
64243: DOUBLE
64244: EQUAL
64245: IFTRUE 64279
64247: LD_INT 27
64249: DOUBLE
64250: EQUAL
64251: IFTRUE 64279
64253: LD_INT 26
64255: DOUBLE
64256: EQUAL
64257: IFTRUE 64279
64259: LD_INT 28
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64279
64265: LD_INT 29
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64279
64271: LD_INT 30
64273: DOUBLE
64274: EQUAL
64275: IFTRUE 64279
64277: GO 64335
64279: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64280: LD_ADDR_VAR 0 9
64284: PUSH
64285: LD_VAR 0 59
64289: PUSH
64290: LD_VAR 0 60
64294: PUSH
64295: LD_VAR 0 61
64299: PUSH
64300: LD_VAR 0 62
64304: PUSH
64305: LD_VAR 0 63
64309: PUSH
64310: LD_VAR 0 64
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: PUSH
64323: LD_VAR 0 4
64327: PUSH
64328: LD_INT 1
64330: PLUS
64331: ARRAY
64332: ST_TO_ADDR
64333: GO 64336
64335: POP
// temp_list2 = [ ] ;
64336: LD_ADDR_VAR 0 10
64340: PUSH
64341: EMPTY
64342: ST_TO_ADDR
// for i in temp_list do
64343: LD_ADDR_VAR 0 8
64347: PUSH
64348: LD_VAR 0 9
64352: PUSH
64353: FOR_IN
64354: IFFALSE 64406
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64356: LD_ADDR_VAR 0 10
64360: PUSH
64361: LD_VAR 0 10
64365: PUSH
64366: LD_VAR 0 8
64370: PUSH
64371: LD_INT 1
64373: ARRAY
64374: PUSH
64375: LD_VAR 0 2
64379: PLUS
64380: PUSH
64381: LD_VAR 0 8
64385: PUSH
64386: LD_INT 2
64388: ARRAY
64389: PUSH
64390: LD_VAR 0 3
64394: PLUS
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: ADD
64403: ST_TO_ADDR
64404: GO 64353
64406: POP
64407: POP
// result = temp_list2 ;
64408: LD_ADDR_VAR 0 7
64412: PUSH
64413: LD_VAR 0 10
64417: ST_TO_ADDR
// end ;
64418: LD_VAR 0 7
64422: RET
// export function EnemyInRange ( unit , dist ) ; begin
64423: LD_INT 0
64425: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64426: LD_ADDR_VAR 0 3
64430: PUSH
64431: LD_VAR 0 1
64435: PPUSH
64436: CALL_OW 255
64440: PPUSH
64441: LD_VAR 0 1
64445: PPUSH
64446: CALL_OW 250
64450: PPUSH
64451: LD_VAR 0 1
64455: PPUSH
64456: CALL_OW 251
64460: PPUSH
64461: LD_VAR 0 2
64465: PPUSH
64466: CALL 37680 0 4
64470: PUSH
64471: LD_INT 4
64473: ARRAY
64474: ST_TO_ADDR
// end ;
64475: LD_VAR 0 3
64479: RET
// export function PlayerSeeMe ( unit ) ; begin
64480: LD_INT 0
64482: PPUSH
// result := See ( your_side , unit ) ;
64483: LD_ADDR_VAR 0 2
64487: PUSH
64488: LD_OWVAR 2
64492: PPUSH
64493: LD_VAR 0 1
64497: PPUSH
64498: CALL_OW 292
64502: ST_TO_ADDR
// end ;
64503: LD_VAR 0 2
64507: RET
// export function ReverseDir ( unit ) ; begin
64508: LD_INT 0
64510: PPUSH
// if not unit then
64511: LD_VAR 0 1
64515: NOT
64516: IFFALSE 64520
// exit ;
64518: GO 64543
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64520: LD_ADDR_VAR 0 2
64524: PUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: CALL_OW 254
64534: PUSH
64535: LD_INT 3
64537: PLUS
64538: PUSH
64539: LD_INT 6
64541: MOD
64542: ST_TO_ADDR
// end ;
64543: LD_VAR 0 2
64547: RET
// export function ReverseArray ( array ) ; var i ; begin
64548: LD_INT 0
64550: PPUSH
64551: PPUSH
// if not array then
64552: LD_VAR 0 1
64556: NOT
64557: IFFALSE 64561
// exit ;
64559: GO 64616
// result := [ ] ;
64561: LD_ADDR_VAR 0 2
64565: PUSH
64566: EMPTY
64567: ST_TO_ADDR
// for i := array downto 1 do
64568: LD_ADDR_VAR 0 3
64572: PUSH
64573: DOUBLE
64574: LD_VAR 0 1
64578: INC
64579: ST_TO_ADDR
64580: LD_INT 1
64582: PUSH
64583: FOR_DOWNTO
64584: IFFALSE 64614
// result := Join ( result , array [ i ] ) ;
64586: LD_ADDR_VAR 0 2
64590: PUSH
64591: LD_VAR 0 2
64595: PPUSH
64596: LD_VAR 0 1
64600: PUSH
64601: LD_VAR 0 3
64605: ARRAY
64606: PPUSH
64607: CALL 69468 0 2
64611: ST_TO_ADDR
64612: GO 64583
64614: POP
64615: POP
// end ;
64616: LD_VAR 0 2
64620: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64621: LD_INT 0
64623: PPUSH
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
// if not unit or not hexes then
64629: LD_VAR 0 1
64633: NOT
64634: IFTRUE 64643
64636: PUSH
64637: LD_VAR 0 2
64641: NOT
64642: OR
64643: IFFALSE 64647
// exit ;
64645: GO 64770
// dist := 9999 ;
64647: LD_ADDR_VAR 0 5
64651: PUSH
64652: LD_INT 9999
64654: ST_TO_ADDR
// for i = 1 to hexes do
64655: LD_ADDR_VAR 0 4
64659: PUSH
64660: DOUBLE
64661: LD_INT 1
64663: DEC
64664: ST_TO_ADDR
64665: LD_VAR 0 2
64669: PUSH
64670: FOR_TO
64671: IFFALSE 64758
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64673: LD_ADDR_VAR 0 6
64677: PUSH
64678: LD_VAR 0 1
64682: PPUSH
64683: LD_VAR 0 2
64687: PUSH
64688: LD_VAR 0 4
64692: ARRAY
64693: PUSH
64694: LD_INT 1
64696: ARRAY
64697: PPUSH
64698: LD_VAR 0 2
64702: PUSH
64703: LD_VAR 0 4
64707: ARRAY
64708: PUSH
64709: LD_INT 2
64711: ARRAY
64712: PPUSH
64713: CALL_OW 297
64717: ST_TO_ADDR
// if tdist < dist then
64718: LD_VAR 0 6
64722: PUSH
64723: LD_VAR 0 5
64727: LESS
64728: IFFALSE 64756
// begin hex := hexes [ i ] ;
64730: LD_ADDR_VAR 0 8
64734: PUSH
64735: LD_VAR 0 2
64739: PUSH
64740: LD_VAR 0 4
64744: ARRAY
64745: ST_TO_ADDR
// dist := tdist ;
64746: LD_ADDR_VAR 0 5
64750: PUSH
64751: LD_VAR 0 6
64755: ST_TO_ADDR
// end ; end ;
64756: GO 64670
64758: POP
64759: POP
// result := hex ;
64760: LD_ADDR_VAR 0 3
64764: PUSH
64765: LD_VAR 0 8
64769: ST_TO_ADDR
// end ;
64770: LD_VAR 0 3
64774: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64775: LD_INT 0
64777: PPUSH
64778: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64779: LD_VAR 0 1
64783: NOT
64784: IFTRUE 64823
64786: PUSH
64787: LD_VAR 0 1
64791: PUSH
64792: LD_INT 21
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 23
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PPUSH
64816: CALL_OW 69
64820: IN
64821: NOT
64822: OR
64823: IFFALSE 64827
// exit ;
64825: GO 64874
// for i = 1 to 3 do
64827: LD_ADDR_VAR 0 3
64831: PUSH
64832: DOUBLE
64833: LD_INT 1
64835: DEC
64836: ST_TO_ADDR
64837: LD_INT 3
64839: PUSH
64840: FOR_TO
64841: IFFALSE 64872
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64843: LD_VAR 0 1
64847: PPUSH
64848: CALL_OW 250
64852: PPUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: CALL_OW 251
64862: PPUSH
64863: LD_INT 1
64865: PPUSH
64866: CALL_OW 453
64870: GO 64840
64872: POP
64873: POP
// end ;
64874: LD_VAR 0 2
64878: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64879: LD_INT 0
64881: PPUSH
64882: PPUSH
64883: PPUSH
64884: PPUSH
64885: PPUSH
64886: PPUSH
// if not unit or not enemy_unit then
64887: LD_VAR 0 1
64891: NOT
64892: IFTRUE 64901
64894: PUSH
64895: LD_VAR 0 2
64899: NOT
64900: OR
64901: IFFALSE 64905
// exit ;
64903: GO 65386
// if GetLives ( i ) < 250 then
64905: LD_VAR 0 4
64909: PPUSH
64910: CALL_OW 256
64914: PUSH
64915: LD_INT 250
64917: LESS
64918: IFFALSE 64931
// begin ComAutodestruct ( i ) ;
64920: LD_VAR 0 4
64924: PPUSH
64925: CALL 64775 0 1
// exit ;
64929: GO 65386
// end ; x := GetX ( enemy_unit ) ;
64931: LD_ADDR_VAR 0 7
64935: PUSH
64936: LD_VAR 0 2
64940: PPUSH
64941: CALL_OW 250
64945: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64946: LD_ADDR_VAR 0 8
64950: PUSH
64951: LD_VAR 0 2
64955: PPUSH
64956: CALL_OW 251
64960: ST_TO_ADDR
// if not x or not y then
64961: LD_VAR 0 7
64965: NOT
64966: IFTRUE 64975
64968: PUSH
64969: LD_VAR 0 8
64973: NOT
64974: OR
64975: IFFALSE 64979
// exit ;
64977: GO 65386
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64979: LD_ADDR_VAR 0 6
64983: PUSH
64984: LD_VAR 0 7
64988: PPUSH
64989: LD_INT 0
64991: PPUSH
64992: LD_INT 4
64994: PPUSH
64995: CALL_OW 272
64999: PUSH
65000: LD_VAR 0 8
65004: PPUSH
65005: LD_INT 0
65007: PPUSH
65008: LD_INT 4
65010: PPUSH
65011: CALL_OW 273
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 7
65024: PPUSH
65025: LD_INT 1
65027: PPUSH
65028: LD_INT 4
65030: PPUSH
65031: CALL_OW 272
65035: PUSH
65036: LD_VAR 0 8
65040: PPUSH
65041: LD_INT 1
65043: PPUSH
65044: LD_INT 4
65046: PPUSH
65047: CALL_OW 273
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_VAR 0 7
65060: PPUSH
65061: LD_INT 2
65063: PPUSH
65064: LD_INT 4
65066: PPUSH
65067: CALL_OW 272
65071: PUSH
65072: LD_VAR 0 8
65076: PPUSH
65077: LD_INT 2
65079: PPUSH
65080: LD_INT 4
65082: PPUSH
65083: CALL_OW 273
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_VAR 0 7
65096: PPUSH
65097: LD_INT 3
65099: PPUSH
65100: LD_INT 4
65102: PPUSH
65103: CALL_OW 272
65107: PUSH
65108: LD_VAR 0 8
65112: PPUSH
65113: LD_INT 3
65115: PPUSH
65116: LD_INT 4
65118: PPUSH
65119: CALL_OW 273
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_VAR 0 7
65132: PPUSH
65133: LD_INT 4
65135: PPUSH
65136: LD_INT 4
65138: PPUSH
65139: CALL_OW 272
65143: PUSH
65144: LD_VAR 0 8
65148: PPUSH
65149: LD_INT 4
65151: PPUSH
65152: LD_INT 4
65154: PPUSH
65155: CALL_OW 273
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_VAR 0 7
65168: PPUSH
65169: LD_INT 5
65171: PPUSH
65172: LD_INT 4
65174: PPUSH
65175: CALL_OW 272
65179: PUSH
65180: LD_VAR 0 8
65184: PPUSH
65185: LD_INT 5
65187: PPUSH
65188: LD_INT 4
65190: PPUSH
65191: CALL_OW 273
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// for i = tmp downto 1 do
65208: LD_ADDR_VAR 0 4
65212: PUSH
65213: DOUBLE
65214: LD_VAR 0 6
65218: INC
65219: ST_TO_ADDR
65220: LD_INT 1
65222: PUSH
65223: FOR_DOWNTO
65224: IFFALSE 65327
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65226: LD_VAR 0 6
65230: PUSH
65231: LD_VAR 0 4
65235: ARRAY
65236: PUSH
65237: LD_INT 1
65239: ARRAY
65240: PPUSH
65241: LD_VAR 0 6
65245: PUSH
65246: LD_VAR 0 4
65250: ARRAY
65251: PUSH
65252: LD_INT 2
65254: ARRAY
65255: PPUSH
65256: CALL_OW 488
65260: NOT
65261: IFTRUE 65303
65263: PUSH
65264: LD_VAR 0 6
65268: PUSH
65269: LD_VAR 0 4
65273: ARRAY
65274: PUSH
65275: LD_INT 1
65277: ARRAY
65278: PPUSH
65279: LD_VAR 0 6
65283: PUSH
65284: LD_VAR 0 4
65288: ARRAY
65289: PUSH
65290: LD_INT 2
65292: ARRAY
65293: PPUSH
65294: CALL_OW 428
65298: PUSH
65299: LD_INT 0
65301: NONEQUAL
65302: OR
65303: IFFALSE 65325
// tmp := Delete ( tmp , i ) ;
65305: LD_ADDR_VAR 0 6
65309: PUSH
65310: LD_VAR 0 6
65314: PPUSH
65315: LD_VAR 0 4
65319: PPUSH
65320: CALL_OW 3
65324: ST_TO_ADDR
65325: GO 65223
65327: POP
65328: POP
// j := GetClosestHex ( unit , tmp ) ;
65329: LD_ADDR_VAR 0 5
65333: PUSH
65334: LD_VAR 0 1
65338: PPUSH
65339: LD_VAR 0 6
65343: PPUSH
65344: CALL 64621 0 2
65348: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65349: LD_VAR 0 1
65353: PPUSH
65354: LD_VAR 0 5
65358: PUSH
65359: LD_INT 1
65361: ARRAY
65362: PPUSH
65363: LD_VAR 0 5
65367: PUSH
65368: LD_INT 2
65370: ARRAY
65371: PPUSH
65372: CALL_OW 111
// result := j ;
65376: LD_ADDR_VAR 0 3
65380: PUSH
65381: LD_VAR 0 5
65385: ST_TO_ADDR
// end ;
65386: LD_VAR 0 3
65390: RET
// export function PrepareApemanSoldier ( ) ; begin
65391: LD_INT 0
65393: PPUSH
// uc_nation := 0 ;
65394: LD_ADDR_OWVAR 21
65398: PUSH
65399: LD_INT 0
65401: ST_TO_ADDR
// hc_sex := sex_male ;
65402: LD_ADDR_OWVAR 27
65406: PUSH
65407: LD_INT 1
65409: ST_TO_ADDR
// hc_name :=  ;
65410: LD_ADDR_OWVAR 26
65414: PUSH
65415: LD_STRING 
65417: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65418: LD_ADDR_OWVAR 28
65422: PUSH
65423: LD_INT 15
65425: ST_TO_ADDR
// hc_gallery :=  ;
65426: LD_ADDR_OWVAR 33
65430: PUSH
65431: LD_STRING 
65433: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65434: LD_ADDR_OWVAR 31
65438: PUSH
65439: LD_INT 0
65441: PPUSH
65442: LD_INT 3
65444: PPUSH
65445: CALL_OW 12
65449: PUSH
65450: LD_INT 0
65452: PPUSH
65453: LD_INT 3
65455: PPUSH
65456: CALL_OW 12
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
65473: LD_ADDR_OWVAR 29
65477: PUSH
65478: LD_INT 10
65480: PUSH
65481: LD_INT 12
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: ST_TO_ADDR
// end ;
65488: LD_VAR 0 1
65492: RET
// export function PrepareApemanEngineer ( ) ; begin
65493: LD_INT 0
65495: PPUSH
// uc_nation := 0 ;
65496: LD_ADDR_OWVAR 21
65500: PUSH
65501: LD_INT 0
65503: ST_TO_ADDR
// hc_sex := sex_male ;
65504: LD_ADDR_OWVAR 27
65508: PUSH
65509: LD_INT 1
65511: ST_TO_ADDR
// hc_name :=  ;
65512: LD_ADDR_OWVAR 26
65516: PUSH
65517: LD_STRING 
65519: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65520: LD_ADDR_OWVAR 28
65524: PUSH
65525: LD_INT 16
65527: ST_TO_ADDR
// hc_gallery :=  ;
65528: LD_ADDR_OWVAR 33
65532: PUSH
65533: LD_STRING 
65535: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65536: LD_ADDR_OWVAR 31
65540: PUSH
65541: LD_INT 0
65543: PPUSH
65544: LD_INT 3
65546: PPUSH
65547: CALL_OW 12
65551: PUSH
65552: LD_INT 0
65554: PPUSH
65555: LD_INT 3
65557: PPUSH
65558: CALL_OW 12
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
65575: LD_ADDR_OWVAR 29
65579: PUSH
65580: LD_INT 10
65582: PUSH
65583: LD_INT 12
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// end ;
65590: LD_VAR 0 1
65594: RET
// export function PrepareApeman ( agressivity ) ; begin
65595: LD_INT 0
65597: PPUSH
// uc_side := 0 ;
65598: LD_ADDR_OWVAR 20
65602: PUSH
65603: LD_INT 0
65605: ST_TO_ADDR
// uc_nation := 0 ;
65606: LD_ADDR_OWVAR 21
65610: PUSH
65611: LD_INT 0
65613: ST_TO_ADDR
// hc_sex := sex_male ;
65614: LD_ADDR_OWVAR 27
65618: PUSH
65619: LD_INT 1
65621: ST_TO_ADDR
// hc_class := class_apeman ;
65622: LD_ADDR_OWVAR 28
65626: PUSH
65627: LD_INT 12
65629: ST_TO_ADDR
// hc_gallery :=  ;
65630: LD_ADDR_OWVAR 33
65634: PUSH
65635: LD_STRING 
65637: ST_TO_ADDR
// hc_name :=  ;
65638: LD_ADDR_OWVAR 26
65642: PUSH
65643: LD_STRING 
65645: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
65646: LD_ADDR_OWVAR 29
65650: PUSH
65651: LD_INT 10
65653: PUSH
65654: LD_INT 12
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// if agressivity = 0 then
65661: LD_VAR 0 1
65665: PUSH
65666: LD_INT 0
65668: EQUAL
65669: IFFALSE 65681
// hc_agressivity := 0 else
65671: LD_ADDR_OWVAR 35
65675: PUSH
65676: LD_INT 0
65678: ST_TO_ADDR
65679: GO 65702
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65681: LD_ADDR_OWVAR 35
65685: PUSH
65686: LD_VAR 0 1
65690: NEG
65691: PPUSH
65692: LD_VAR 0 1
65696: PPUSH
65697: CALL_OW 12
65701: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65702: LD_ADDR_OWVAR 31
65706: PUSH
65707: LD_INT 0
65709: PPUSH
65710: LD_INT 3
65712: PPUSH
65713: CALL_OW 12
65717: PUSH
65718: LD_INT 0
65720: PPUSH
65721: LD_INT 3
65723: PPUSH
65724: CALL_OW 12
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// end ;
65741: LD_VAR 0 2
65745: RET
// export function PrepareTiger ( agressivity ) ; begin
65746: LD_INT 0
65748: PPUSH
// uc_side := 0 ;
65749: LD_ADDR_OWVAR 20
65753: PUSH
65754: LD_INT 0
65756: ST_TO_ADDR
// uc_nation := 0 ;
65757: LD_ADDR_OWVAR 21
65761: PUSH
65762: LD_INT 0
65764: ST_TO_ADDR
// InitHc ;
65765: CALL_OW 19
// hc_class := class_tiger ;
65769: LD_ADDR_OWVAR 28
65773: PUSH
65774: LD_INT 14
65776: ST_TO_ADDR
// hc_gallery :=  ;
65777: LD_ADDR_OWVAR 33
65781: PUSH
65782: LD_STRING 
65784: ST_TO_ADDR
// hc_name :=  ;
65785: LD_ADDR_OWVAR 26
65789: PUSH
65790: LD_STRING 
65792: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65793: LD_ADDR_OWVAR 35
65797: PUSH
65798: LD_VAR 0 1
65802: NEG
65803: PPUSH
65804: LD_VAR 0 1
65808: PPUSH
65809: CALL_OW 12
65813: ST_TO_ADDR
// end ;
65814: LD_VAR 0 2
65818: RET
// export function PrepareEnchidna ( ) ; begin
65819: LD_INT 0
65821: PPUSH
// uc_side := 0 ;
65822: LD_ADDR_OWVAR 20
65826: PUSH
65827: LD_INT 0
65829: ST_TO_ADDR
// uc_nation := 0 ;
65830: LD_ADDR_OWVAR 21
65834: PUSH
65835: LD_INT 0
65837: ST_TO_ADDR
// InitHc ;
65838: CALL_OW 19
// hc_class := class_baggie ;
65842: LD_ADDR_OWVAR 28
65846: PUSH
65847: LD_INT 13
65849: ST_TO_ADDR
// hc_gallery :=  ;
65850: LD_ADDR_OWVAR 33
65854: PUSH
65855: LD_STRING 
65857: ST_TO_ADDR
// hc_name :=  ;
65858: LD_ADDR_OWVAR 26
65862: PUSH
65863: LD_STRING 
65865: ST_TO_ADDR
// end ;
65866: LD_VAR 0 1
65870: RET
// export function PrepareFrog ( ) ; begin
65871: LD_INT 0
65873: PPUSH
// uc_side := 0 ;
65874: LD_ADDR_OWVAR 20
65878: PUSH
65879: LD_INT 0
65881: ST_TO_ADDR
// uc_nation := 0 ;
65882: LD_ADDR_OWVAR 21
65886: PUSH
65887: LD_INT 0
65889: ST_TO_ADDR
// InitHc ;
65890: CALL_OW 19
// hc_class := class_frog ;
65894: LD_ADDR_OWVAR 28
65898: PUSH
65899: LD_INT 19
65901: ST_TO_ADDR
// hc_gallery :=  ;
65902: LD_ADDR_OWVAR 33
65906: PUSH
65907: LD_STRING 
65909: ST_TO_ADDR
// hc_name :=  ;
65910: LD_ADDR_OWVAR 26
65914: PUSH
65915: LD_STRING 
65917: ST_TO_ADDR
// end ;
65918: LD_VAR 0 1
65922: RET
// export function PrepareFish ( ) ; begin
65923: LD_INT 0
65925: PPUSH
// uc_side := 0 ;
65926: LD_ADDR_OWVAR 20
65930: PUSH
65931: LD_INT 0
65933: ST_TO_ADDR
// uc_nation := 0 ;
65934: LD_ADDR_OWVAR 21
65938: PUSH
65939: LD_INT 0
65941: ST_TO_ADDR
// InitHc ;
65942: CALL_OW 19
// hc_class := class_fish ;
65946: LD_ADDR_OWVAR 28
65950: PUSH
65951: LD_INT 20
65953: ST_TO_ADDR
// hc_gallery :=  ;
65954: LD_ADDR_OWVAR 33
65958: PUSH
65959: LD_STRING 
65961: ST_TO_ADDR
// hc_name :=  ;
65962: LD_ADDR_OWVAR 26
65966: PUSH
65967: LD_STRING 
65969: ST_TO_ADDR
// end ;
65970: LD_VAR 0 1
65974: RET
// export function PrepareBird ( ) ; begin
65975: LD_INT 0
65977: PPUSH
// uc_side := 0 ;
65978: LD_ADDR_OWVAR 20
65982: PUSH
65983: LD_INT 0
65985: ST_TO_ADDR
// uc_nation := 0 ;
65986: LD_ADDR_OWVAR 21
65990: PUSH
65991: LD_INT 0
65993: ST_TO_ADDR
// InitHc ;
65994: CALL_OW 19
// hc_class := class_phororhacos ;
65998: LD_ADDR_OWVAR 28
66002: PUSH
66003: LD_INT 18
66005: ST_TO_ADDR
// hc_gallery :=  ;
66006: LD_ADDR_OWVAR 33
66010: PUSH
66011: LD_STRING 
66013: ST_TO_ADDR
// hc_name :=  ;
66014: LD_ADDR_OWVAR 26
66018: PUSH
66019: LD_STRING 
66021: ST_TO_ADDR
// end ;
66022: LD_VAR 0 1
66026: RET
// export function PrepareHorse ( ) ; begin
66027: LD_INT 0
66029: PPUSH
// uc_side := 0 ;
66030: LD_ADDR_OWVAR 20
66034: PUSH
66035: LD_INT 0
66037: ST_TO_ADDR
// uc_nation := 0 ;
66038: LD_ADDR_OWVAR 21
66042: PUSH
66043: LD_INT 0
66045: ST_TO_ADDR
// InitHc ;
66046: CALL_OW 19
// hc_class := class_horse ;
66050: LD_ADDR_OWVAR 28
66054: PUSH
66055: LD_INT 21
66057: ST_TO_ADDR
// hc_gallery :=  ;
66058: LD_ADDR_OWVAR 33
66062: PUSH
66063: LD_STRING 
66065: ST_TO_ADDR
// hc_name :=  ;
66066: LD_ADDR_OWVAR 26
66070: PUSH
66071: LD_STRING 
66073: ST_TO_ADDR
// end ;
66074: LD_VAR 0 1
66078: RET
// export function PrepareMastodont ( ) ; begin
66079: LD_INT 0
66081: PPUSH
// uc_side := 0 ;
66082: LD_ADDR_OWVAR 20
66086: PUSH
66087: LD_INT 0
66089: ST_TO_ADDR
// uc_nation := 0 ;
66090: LD_ADDR_OWVAR 21
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66098: LD_ADDR_OWVAR 37
66102: PUSH
66103: LD_INT 31
66105: ST_TO_ADDR
// vc_control := control_rider ;
66106: LD_ADDR_OWVAR 38
66110: PUSH
66111: LD_INT 4
66113: ST_TO_ADDR
// end ;
66114: LD_VAR 0 1
66118: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
// uc_side = 0 ;
66124: LD_ADDR_OWVAR 20
66128: PUSH
66129: LD_INT 0
66131: ST_TO_ADDR
// uc_nation = 0 ;
66132: LD_ADDR_OWVAR 21
66136: PUSH
66137: LD_INT 0
66139: ST_TO_ADDR
// InitHc_All ( ) ;
66140: CALL_OW 584
// InitVc ;
66144: CALL_OW 20
// if mastodonts then
66148: LD_VAR 0 6
66152: IFFALSE 66219
// for i = 1 to mastodonts do
66154: LD_ADDR_VAR 0 11
66158: PUSH
66159: DOUBLE
66160: LD_INT 1
66162: DEC
66163: ST_TO_ADDR
66164: LD_VAR 0 6
66168: PUSH
66169: FOR_TO
66170: IFFALSE 66217
// begin vc_chassis := 31 ;
66172: LD_ADDR_OWVAR 37
66176: PUSH
66177: LD_INT 31
66179: ST_TO_ADDR
// vc_control := control_rider ;
66180: LD_ADDR_OWVAR 38
66184: PUSH
66185: LD_INT 4
66187: ST_TO_ADDR
// animal := CreateVehicle ;
66188: LD_ADDR_VAR 0 12
66192: PUSH
66193: CALL_OW 45
66197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66198: LD_VAR 0 12
66202: PPUSH
66203: LD_VAR 0 8
66207: PPUSH
66208: LD_INT 0
66210: PPUSH
66211: CALL 68361 0 3
// end ;
66215: GO 66169
66217: POP
66218: POP
// if horses then
66219: LD_VAR 0 5
66223: IFFALSE 66290
// for i = 1 to horses do
66225: LD_ADDR_VAR 0 11
66229: PUSH
66230: DOUBLE
66231: LD_INT 1
66233: DEC
66234: ST_TO_ADDR
66235: LD_VAR 0 5
66239: PUSH
66240: FOR_TO
66241: IFFALSE 66288
// begin hc_class := 21 ;
66243: LD_ADDR_OWVAR 28
66247: PUSH
66248: LD_INT 21
66250: ST_TO_ADDR
// hc_gallery :=  ;
66251: LD_ADDR_OWVAR 33
66255: PUSH
66256: LD_STRING 
66258: ST_TO_ADDR
// animal := CreateHuman ;
66259: LD_ADDR_VAR 0 12
66263: PUSH
66264: CALL_OW 44
66268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66269: LD_VAR 0 12
66273: PPUSH
66274: LD_VAR 0 8
66278: PPUSH
66279: LD_INT 0
66281: PPUSH
66282: CALL 68361 0 3
// end ;
66286: GO 66240
66288: POP
66289: POP
// if birds then
66290: LD_VAR 0 1
66294: IFFALSE 66361
// for i = 1 to birds do
66296: LD_ADDR_VAR 0 11
66300: PUSH
66301: DOUBLE
66302: LD_INT 1
66304: DEC
66305: ST_TO_ADDR
66306: LD_VAR 0 1
66310: PUSH
66311: FOR_TO
66312: IFFALSE 66359
// begin hc_class := 18 ;
66314: LD_ADDR_OWVAR 28
66318: PUSH
66319: LD_INT 18
66321: ST_TO_ADDR
// hc_gallery =  ;
66322: LD_ADDR_OWVAR 33
66326: PUSH
66327: LD_STRING 
66329: ST_TO_ADDR
// animal := CreateHuman ;
66330: LD_ADDR_VAR 0 12
66334: PUSH
66335: CALL_OW 44
66339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66340: LD_VAR 0 12
66344: PPUSH
66345: LD_VAR 0 8
66349: PPUSH
66350: LD_INT 0
66352: PPUSH
66353: CALL 68361 0 3
// end ;
66357: GO 66311
66359: POP
66360: POP
// if tigers then
66361: LD_VAR 0 2
66365: IFFALSE 66449
// for i = 1 to tigers do
66367: LD_ADDR_VAR 0 11
66371: PUSH
66372: DOUBLE
66373: LD_INT 1
66375: DEC
66376: ST_TO_ADDR
66377: LD_VAR 0 2
66381: PUSH
66382: FOR_TO
66383: IFFALSE 66447
// begin hc_class = class_tiger ;
66385: LD_ADDR_OWVAR 28
66389: PUSH
66390: LD_INT 14
66392: ST_TO_ADDR
// hc_gallery =  ;
66393: LD_ADDR_OWVAR 33
66397: PUSH
66398: LD_STRING 
66400: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66401: LD_ADDR_OWVAR 35
66405: PUSH
66406: LD_INT 7
66408: NEG
66409: PPUSH
66410: LD_INT 7
66412: PPUSH
66413: CALL_OW 12
66417: ST_TO_ADDR
// animal := CreateHuman ;
66418: LD_ADDR_VAR 0 12
66422: PUSH
66423: CALL_OW 44
66427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66428: LD_VAR 0 12
66432: PPUSH
66433: LD_VAR 0 8
66437: PPUSH
66438: LD_INT 0
66440: PPUSH
66441: CALL 68361 0 3
// end ;
66445: GO 66382
66447: POP
66448: POP
// if apemans then
66449: LD_VAR 0 3
66453: IFFALSE 66576
// for i = 1 to apemans do
66455: LD_ADDR_VAR 0 11
66459: PUSH
66460: DOUBLE
66461: LD_INT 1
66463: DEC
66464: ST_TO_ADDR
66465: LD_VAR 0 3
66469: PUSH
66470: FOR_TO
66471: IFFALSE 66574
// begin hc_class = class_apeman ;
66473: LD_ADDR_OWVAR 28
66477: PUSH
66478: LD_INT 12
66480: ST_TO_ADDR
// hc_gallery =  ;
66481: LD_ADDR_OWVAR 33
66485: PUSH
66486: LD_STRING 
66488: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66489: LD_ADDR_OWVAR 35
66493: PUSH
66494: LD_INT 2
66496: NEG
66497: PPUSH
66498: LD_INT 2
66500: PPUSH
66501: CALL_OW 12
66505: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66506: LD_ADDR_OWVAR 31
66510: PUSH
66511: LD_INT 1
66513: PPUSH
66514: LD_INT 3
66516: PPUSH
66517: CALL_OW 12
66521: PUSH
66522: LD_INT 1
66524: PPUSH
66525: LD_INT 3
66527: PPUSH
66528: CALL_OW 12
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: ST_TO_ADDR
// animal := CreateHuman ;
66545: LD_ADDR_VAR 0 12
66549: PUSH
66550: CALL_OW 44
66554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66555: LD_VAR 0 12
66559: PPUSH
66560: LD_VAR 0 8
66564: PPUSH
66565: LD_INT 0
66567: PPUSH
66568: CALL 68361 0 3
// end ;
66572: GO 66470
66574: POP
66575: POP
// if enchidnas then
66576: LD_VAR 0 4
66580: IFFALSE 66647
// for i = 1 to enchidnas do
66582: LD_ADDR_VAR 0 11
66586: PUSH
66587: DOUBLE
66588: LD_INT 1
66590: DEC
66591: ST_TO_ADDR
66592: LD_VAR 0 4
66596: PUSH
66597: FOR_TO
66598: IFFALSE 66645
// begin hc_class = 13 ;
66600: LD_ADDR_OWVAR 28
66604: PUSH
66605: LD_INT 13
66607: ST_TO_ADDR
// hc_gallery =  ;
66608: LD_ADDR_OWVAR 33
66612: PUSH
66613: LD_STRING 
66615: ST_TO_ADDR
// animal := CreateHuman ;
66616: LD_ADDR_VAR 0 12
66620: PUSH
66621: CALL_OW 44
66625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66626: LD_VAR 0 12
66630: PPUSH
66631: LD_VAR 0 8
66635: PPUSH
66636: LD_INT 0
66638: PPUSH
66639: CALL 68361 0 3
// end ;
66643: GO 66597
66645: POP
66646: POP
// if fishes then
66647: LD_VAR 0 7
66651: IFFALSE 66718
// for i = 1 to fishes do
66653: LD_ADDR_VAR 0 11
66657: PUSH
66658: DOUBLE
66659: LD_INT 1
66661: DEC
66662: ST_TO_ADDR
66663: LD_VAR 0 7
66667: PUSH
66668: FOR_TO
66669: IFFALSE 66716
// begin hc_class = 20 ;
66671: LD_ADDR_OWVAR 28
66675: PUSH
66676: LD_INT 20
66678: ST_TO_ADDR
// hc_gallery =  ;
66679: LD_ADDR_OWVAR 33
66683: PUSH
66684: LD_STRING 
66686: ST_TO_ADDR
// animal := CreateHuman ;
66687: LD_ADDR_VAR 0 12
66691: PUSH
66692: CALL_OW 44
66696: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66697: LD_VAR 0 12
66701: PPUSH
66702: LD_VAR 0 9
66706: PPUSH
66707: LD_INT 0
66709: PPUSH
66710: CALL 68361 0 3
// end ;
66714: GO 66668
66716: POP
66717: POP
// end ;
66718: LD_VAR 0 10
66722: RET
// export function WantHeal ( sci , unit ) ; begin
66723: LD_INT 0
66725: PPUSH
// if GetTaskList ( sci ) > 0 then
66726: LD_VAR 0 1
66730: PPUSH
66731: CALL_OW 437
66735: PUSH
66736: LD_INT 0
66738: GREATER
66739: IFFALSE 66811
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66741: LD_VAR 0 1
66745: PPUSH
66746: CALL_OW 437
66750: PUSH
66751: LD_INT 1
66753: ARRAY
66754: PUSH
66755: LD_INT 1
66757: ARRAY
66758: PUSH
66759: LD_STRING l
66761: EQUAL
66762: IFFALSE 66789
66764: PUSH
66765: LD_VAR 0 1
66769: PPUSH
66770: CALL_OW 437
66774: PUSH
66775: LD_INT 1
66777: ARRAY
66778: PUSH
66779: LD_INT 4
66781: ARRAY
66782: PUSH
66783: LD_VAR 0 2
66787: EQUAL
66788: AND
66789: IFFALSE 66801
// result := true else
66791: LD_ADDR_VAR 0 3
66795: PUSH
66796: LD_INT 1
66798: ST_TO_ADDR
66799: GO 66809
// result := false ;
66801: LD_ADDR_VAR 0 3
66805: PUSH
66806: LD_INT 0
66808: ST_TO_ADDR
// end else
66809: GO 66819
// result := false ;
66811: LD_ADDR_VAR 0 3
66815: PUSH
66816: LD_INT 0
66818: ST_TO_ADDR
// end ;
66819: LD_VAR 0 3
66823: RET
// export function HealTarget ( sci ) ; begin
66824: LD_INT 0
66826: PPUSH
// if not sci then
66827: LD_VAR 0 1
66831: NOT
66832: IFFALSE 66836
// exit ;
66834: GO 66901
// result := 0 ;
66836: LD_ADDR_VAR 0 2
66840: PUSH
66841: LD_INT 0
66843: ST_TO_ADDR
// if GetTaskList ( sci ) then
66844: LD_VAR 0 1
66848: PPUSH
66849: CALL_OW 437
66853: IFFALSE 66901
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66855: LD_VAR 0 1
66859: PPUSH
66860: CALL_OW 437
66864: PUSH
66865: LD_INT 1
66867: ARRAY
66868: PUSH
66869: LD_INT 1
66871: ARRAY
66872: PUSH
66873: LD_STRING l
66875: EQUAL
66876: IFFALSE 66901
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66878: LD_ADDR_VAR 0 2
66882: PUSH
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 437
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: LD_INT 4
66899: ARRAY
66900: ST_TO_ADDR
// end ;
66901: LD_VAR 0 2
66905: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66906: LD_INT 0
66908: PPUSH
66909: PPUSH
66910: PPUSH
66911: PPUSH
// if not base_units then
66912: LD_VAR 0 1
66916: NOT
66917: IFFALSE 66921
// exit ;
66919: GO 67008
// result := false ;
66921: LD_ADDR_VAR 0 2
66925: PUSH
66926: LD_INT 0
66928: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66929: LD_ADDR_VAR 0 5
66933: PUSH
66934: LD_VAR 0 1
66938: PPUSH
66939: LD_INT 21
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PPUSH
66949: CALL_OW 72
66953: ST_TO_ADDR
// if not tmp then
66954: LD_VAR 0 5
66958: NOT
66959: IFFALSE 66963
// exit ;
66961: GO 67008
// for i in tmp do
66963: LD_ADDR_VAR 0 3
66967: PUSH
66968: LD_VAR 0 5
66972: PUSH
66973: FOR_IN
66974: IFFALSE 67006
// begin result := EnemyInRange ( i , 22 ) ;
66976: LD_ADDR_VAR 0 2
66980: PUSH
66981: LD_VAR 0 3
66985: PPUSH
66986: LD_INT 22
66988: PPUSH
66989: CALL 64423 0 2
66993: ST_TO_ADDR
// if result then
66994: LD_VAR 0 2
66998: IFFALSE 67004
// exit ;
67000: POP
67001: POP
67002: GO 67008
// end ;
67004: GO 66973
67006: POP
67007: POP
// end ;
67008: LD_VAR 0 2
67012: RET
// export function FilterByTag ( units , tag ) ; begin
67013: LD_INT 0
67015: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67016: LD_ADDR_VAR 0 3
67020: PUSH
67021: LD_VAR 0 1
67025: PPUSH
67026: LD_INT 120
67028: PUSH
67029: LD_VAR 0 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PPUSH
67038: CALL_OW 72
67042: ST_TO_ADDR
// end ;
67043: LD_VAR 0 3
67047: RET
// export function IsDriver ( un ) ; begin
67048: LD_INT 0
67050: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67051: LD_ADDR_VAR 0 2
67055: PUSH
67056: LD_VAR 0 1
67060: PUSH
67061: LD_INT 55
67063: PUSH
67064: EMPTY
67065: LIST
67066: PPUSH
67067: CALL_OW 69
67071: IN
67072: ST_TO_ADDR
// end ;
67073: LD_VAR 0 2
67077: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67078: LD_INT 0
67080: PPUSH
67081: PPUSH
// list := [ ] ;
67082: LD_ADDR_VAR 0 5
67086: PUSH
67087: EMPTY
67088: ST_TO_ADDR
// case d of 0 :
67089: LD_VAR 0 3
67093: PUSH
67094: LD_INT 0
67096: DOUBLE
67097: EQUAL
67098: IFTRUE 67102
67100: GO 67235
67102: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67103: LD_ADDR_VAR 0 5
67107: PUSH
67108: LD_VAR 0 1
67112: PUSH
67113: LD_INT 4
67115: MINUS
67116: PUSH
67117: LD_VAR 0 2
67121: PUSH
67122: LD_INT 4
67124: MINUS
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: PUSH
67134: LD_VAR 0 1
67138: PUSH
67139: LD_INT 3
67141: MINUS
67142: PUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PUSH
67156: LD_VAR 0 1
67160: PUSH
67161: LD_INT 4
67163: PLUS
67164: PUSH
67165: LD_VAR 0 2
67169: PUSH
67170: LD_INT 4
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: PUSH
67178: LD_VAR 0 1
67182: PUSH
67183: LD_INT 3
67185: PLUS
67186: PUSH
67187: LD_VAR 0 2
67191: PUSH
67192: LD_INT 3
67194: PLUS
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: PUSH
67204: LD_VAR 0 1
67208: PUSH
67209: LD_VAR 0 2
67213: PUSH
67214: LD_INT 4
67216: PLUS
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: ST_TO_ADDR
// end ; 1 :
67233: GO 67933
67235: LD_INT 1
67237: DOUBLE
67238: EQUAL
67239: IFTRUE 67243
67241: GO 67376
67243: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67244: LD_ADDR_VAR 0 5
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: LD_VAR 0 2
67258: PUSH
67259: LD_INT 4
67261: MINUS
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: LIST
67270: PUSH
67271: LD_VAR 0 1
67275: PUSH
67276: LD_INT 3
67278: MINUS
67279: PUSH
67280: LD_VAR 0 2
67284: PUSH
67285: LD_INT 3
67287: MINUS
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: PUSH
67297: LD_VAR 0 1
67301: PUSH
67302: LD_INT 4
67304: MINUS
67305: PUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: PUSH
67319: LD_VAR 0 1
67323: PUSH
67324: LD_VAR 0 2
67328: PUSH
67329: LD_INT 3
67331: PLUS
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: PUSH
67341: LD_VAR 0 1
67345: PUSH
67346: LD_INT 4
67348: PLUS
67349: PUSH
67350: LD_VAR 0 2
67354: PUSH
67355: LD_INT 4
67357: PLUS
67358: PUSH
67359: LD_INT 5
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: ST_TO_ADDR
// end ; 2 :
67374: GO 67933
67376: LD_INT 2
67378: DOUBLE
67379: EQUAL
67380: IFTRUE 67384
67382: GO 67513
67384: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67385: LD_ADDR_VAR 0 5
67389: PUSH
67390: LD_VAR 0 1
67394: PUSH
67395: LD_VAR 0 2
67399: PUSH
67400: LD_INT 3
67402: MINUS
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: PUSH
67412: LD_VAR 0 1
67416: PUSH
67417: LD_INT 4
67419: PLUS
67420: PUSH
67421: LD_VAR 0 2
67425: PUSH
67426: LD_INT 4
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: LD_VAR 0 1
67438: PUSH
67439: LD_VAR 0 2
67443: PUSH
67444: LD_INT 4
67446: PLUS
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: PUSH
67456: LD_VAR 0 1
67460: PUSH
67461: LD_INT 3
67463: MINUS
67464: PUSH
67465: LD_VAR 0 2
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: PUSH
67478: LD_VAR 0 1
67482: PUSH
67483: LD_INT 4
67485: MINUS
67486: PUSH
67487: LD_VAR 0 2
67491: PUSH
67492: LD_INT 4
67494: MINUS
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// end ; 3 :
67511: GO 67933
67513: LD_INT 3
67515: DOUBLE
67516: EQUAL
67517: IFTRUE 67521
67519: GO 67654
67521: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67522: LD_ADDR_VAR 0 5
67526: PUSH
67527: LD_VAR 0 1
67531: PUSH
67532: LD_INT 3
67534: PLUS
67535: PUSH
67536: LD_VAR 0 2
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: PUSH
67549: LD_VAR 0 1
67553: PUSH
67554: LD_INT 4
67556: PLUS
67557: PUSH
67558: LD_VAR 0 2
67562: PUSH
67563: LD_INT 4
67565: PLUS
67566: PUSH
67567: LD_INT 5
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: PUSH
67575: LD_VAR 0 1
67579: PUSH
67580: LD_INT 4
67582: MINUS
67583: PUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: PUSH
67597: LD_VAR 0 1
67601: PUSH
67602: LD_VAR 0 2
67606: PUSH
67607: LD_INT 4
67609: MINUS
67610: PUSH
67611: LD_INT 3
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: PUSH
67619: LD_VAR 0 1
67623: PUSH
67624: LD_INT 3
67626: MINUS
67627: PUSH
67628: LD_VAR 0 2
67632: PUSH
67633: LD_INT 3
67635: MINUS
67636: PUSH
67637: LD_INT 2
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: ST_TO_ADDR
// end ; 4 :
67652: GO 67933
67654: LD_INT 4
67656: DOUBLE
67657: EQUAL
67658: IFTRUE 67662
67660: GO 67795
67662: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67663: LD_ADDR_VAR 0 5
67667: PUSH
67668: LD_VAR 0 1
67672: PUSH
67673: LD_VAR 0 2
67677: PUSH
67678: LD_INT 4
67680: PLUS
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: PUSH
67690: LD_VAR 0 1
67694: PUSH
67695: LD_INT 3
67697: PLUS
67698: PUSH
67699: LD_VAR 0 2
67703: PUSH
67704: LD_INT 3
67706: PLUS
67707: PUSH
67708: LD_INT 5
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: PUSH
67716: LD_VAR 0 1
67720: PUSH
67721: LD_INT 4
67723: PLUS
67724: PUSH
67725: LD_VAR 0 2
67729: PUSH
67730: LD_INT 4
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: PUSH
67738: LD_VAR 0 1
67742: PUSH
67743: LD_VAR 0 2
67747: PUSH
67748: LD_INT 3
67750: MINUS
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: LIST
67759: PUSH
67760: LD_VAR 0 1
67764: PUSH
67765: LD_INT 4
67767: MINUS
67768: PUSH
67769: LD_VAR 0 2
67773: PUSH
67774: LD_INT 4
67776: MINUS
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: ST_TO_ADDR
// end ; 5 :
67793: GO 67933
67795: LD_INT 5
67797: DOUBLE
67798: EQUAL
67799: IFTRUE 67803
67801: GO 67932
67803: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67804: LD_ADDR_VAR 0 5
67808: PUSH
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 4
67816: MINUS
67817: PUSH
67818: LD_VAR 0 2
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: PUSH
67831: LD_VAR 0 1
67835: PUSH
67836: LD_VAR 0 2
67840: PUSH
67841: LD_INT 4
67843: MINUS
67844: PUSH
67845: LD_INT 3
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: PUSH
67853: LD_VAR 0 1
67857: PUSH
67858: LD_INT 4
67860: PLUS
67861: PUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_INT 4
67869: PLUS
67870: PUSH
67871: LD_INT 5
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: PUSH
67879: LD_VAR 0 1
67883: PUSH
67884: LD_INT 3
67886: PLUS
67887: PUSH
67888: LD_VAR 0 2
67892: PUSH
67893: LD_INT 4
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: PUSH
67901: LD_VAR 0 1
67905: PUSH
67906: LD_VAR 0 2
67910: PUSH
67911: LD_INT 3
67913: PLUS
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: ST_TO_ADDR
// end ; end ;
67930: GO 67933
67932: POP
// result := list ;
67933: LD_ADDR_VAR 0 4
67937: PUSH
67938: LD_VAR 0 5
67942: ST_TO_ADDR
// end ;
67943: LD_VAR 0 4
67947: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67948: LD_INT 0
67950: PPUSH
67951: PPUSH
67952: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67953: LD_VAR 0 1
67957: NOT
67958: IFTRUE 67986
67960: PUSH
67961: LD_VAR 0 2
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 4
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: IN
67984: NOT
67985: OR
67986: IFFALSE 67990
// exit ;
67988: GO 68073
// tmp := [ ] ;
67990: LD_ADDR_VAR 0 5
67994: PUSH
67995: EMPTY
67996: ST_TO_ADDR
// for i in units do
67997: LD_ADDR_VAR 0 4
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: FOR_IN
68008: IFFALSE 68042
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68010: LD_ADDR_VAR 0 5
68014: PUSH
68015: LD_VAR 0 5
68019: PPUSH
68020: LD_VAR 0 4
68024: PPUSH
68025: LD_VAR 0 2
68029: PPUSH
68030: CALL_OW 259
68034: PPUSH
68035: CALL 69468 0 2
68039: ST_TO_ADDR
68040: GO 68007
68042: POP
68043: POP
// if not tmp then
68044: LD_VAR 0 5
68048: NOT
68049: IFFALSE 68053
// exit ;
68051: GO 68073
// result := SortListByListDesc ( units , tmp ) ;
68053: LD_ADDR_VAR 0 3
68057: PUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: LD_VAR 0 5
68067: PPUSH
68068: CALL_OW 77
68072: ST_TO_ADDR
// end ;
68073: LD_VAR 0 3
68077: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68078: LD_INT 0
68080: PPUSH
68081: PPUSH
68082: PPUSH
// result := false ;
68083: LD_ADDR_VAR 0 3
68087: PUSH
68088: LD_INT 0
68090: ST_TO_ADDR
// if not building then
68091: LD_VAR 0 2
68095: NOT
68096: IFFALSE 68100
// exit ;
68098: GO 68244
// x := GetX ( building ) ;
68100: LD_ADDR_VAR 0 4
68104: PUSH
68105: LD_VAR 0 2
68109: PPUSH
68110: CALL_OW 250
68114: ST_TO_ADDR
// y := GetY ( building ) ;
68115: LD_ADDR_VAR 0 5
68119: PUSH
68120: LD_VAR 0 2
68124: PPUSH
68125: CALL_OW 251
68129: ST_TO_ADDR
// if not x or not y then
68130: LD_VAR 0 4
68134: NOT
68135: IFTRUE 68144
68137: PUSH
68138: LD_VAR 0 5
68142: NOT
68143: OR
68144: IFFALSE 68148
// exit ;
68146: GO 68244
// if GetTaskList ( unit ) then
68148: LD_VAR 0 1
68152: PPUSH
68153: CALL_OW 437
68157: IFFALSE 68244
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68159: LD_STRING e
68161: PUSH
68162: LD_VAR 0 1
68166: PPUSH
68167: CALL_OW 437
68171: PUSH
68172: LD_INT 1
68174: ARRAY
68175: PUSH
68176: LD_INT 1
68178: ARRAY
68179: EQUAL
68180: IFFALSE 68207
68182: PUSH
68183: LD_VAR 0 4
68187: PUSH
68188: LD_VAR 0 1
68192: PPUSH
68193: CALL_OW 437
68197: PUSH
68198: LD_INT 1
68200: ARRAY
68201: PUSH
68202: LD_INT 2
68204: ARRAY
68205: EQUAL
68206: AND
68207: IFFALSE 68234
68209: PUSH
68210: LD_VAR 0 5
68214: PUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 437
68224: PUSH
68225: LD_INT 1
68227: ARRAY
68228: PUSH
68229: LD_INT 3
68231: ARRAY
68232: EQUAL
68233: AND
68234: IFFALSE 68244
// result := true end ;
68236: LD_ADDR_VAR 0 3
68240: PUSH
68241: LD_INT 1
68243: ST_TO_ADDR
// end ;
68244: LD_VAR 0 3
68248: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68249: LD_INT 0
68251: PPUSH
// result := false ;
68252: LD_ADDR_VAR 0 4
68256: PUSH
68257: LD_INT 0
68259: ST_TO_ADDR
// if GetTaskList ( unit ) then
68260: LD_VAR 0 1
68264: PPUSH
68265: CALL_OW 437
68269: IFFALSE 68356
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68271: LD_STRING M
68273: PUSH
68274: LD_VAR 0 1
68278: PPUSH
68279: CALL_OW 437
68283: PUSH
68284: LD_INT 1
68286: ARRAY
68287: PUSH
68288: LD_INT 1
68290: ARRAY
68291: EQUAL
68292: IFFALSE 68319
68294: PUSH
68295: LD_VAR 0 2
68299: PUSH
68300: LD_VAR 0 1
68304: PPUSH
68305: CALL_OW 437
68309: PUSH
68310: LD_INT 1
68312: ARRAY
68313: PUSH
68314: LD_INT 2
68316: ARRAY
68317: EQUAL
68318: AND
68319: IFFALSE 68346
68321: PUSH
68322: LD_VAR 0 3
68326: PUSH
68327: LD_VAR 0 1
68331: PPUSH
68332: CALL_OW 437
68336: PUSH
68337: LD_INT 1
68339: ARRAY
68340: PUSH
68341: LD_INT 3
68343: ARRAY
68344: EQUAL
68345: AND
68346: IFFALSE 68356
// result := true ;
68348: LD_ADDR_VAR 0 4
68352: PUSH
68353: LD_INT 1
68355: ST_TO_ADDR
// end ; end ;
68356: LD_VAR 0 4
68360: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68361: LD_INT 0
68363: PPUSH
68364: PPUSH
68365: PPUSH
68366: PPUSH
// if not unit or not area then
68367: LD_VAR 0 1
68371: NOT
68372: IFTRUE 68381
68374: PUSH
68375: LD_VAR 0 2
68379: NOT
68380: OR
68381: IFFALSE 68385
// exit ;
68383: GO 68561
// tmp := AreaToList ( area , i ) ;
68385: LD_ADDR_VAR 0 6
68389: PUSH
68390: LD_VAR 0 2
68394: PPUSH
68395: LD_VAR 0 5
68399: PPUSH
68400: CALL_OW 517
68404: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68405: LD_ADDR_VAR 0 5
68409: PUSH
68410: DOUBLE
68411: LD_INT 1
68413: DEC
68414: ST_TO_ADDR
68415: LD_VAR 0 6
68419: PUSH
68420: LD_INT 1
68422: ARRAY
68423: PUSH
68424: FOR_TO
68425: IFFALSE 68559
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68427: LD_ADDR_VAR 0 7
68431: PUSH
68432: LD_VAR 0 6
68436: PUSH
68437: LD_INT 1
68439: ARRAY
68440: PUSH
68441: LD_VAR 0 5
68445: ARRAY
68446: PUSH
68447: LD_VAR 0 6
68451: PUSH
68452: LD_INT 2
68454: ARRAY
68455: PUSH
68456: LD_VAR 0 5
68460: ARRAY
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68466: LD_INT 92
68468: PUSH
68469: LD_VAR 0 7
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PUSH
68478: LD_VAR 0 7
68482: PUSH
68483: LD_INT 2
68485: ARRAY
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: PPUSH
68496: CALL_OW 69
68500: PUSH
68501: LD_INT 0
68503: EQUAL
68504: IFFALSE 68557
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68506: LD_VAR 0 1
68510: PPUSH
68511: LD_VAR 0 7
68515: PUSH
68516: LD_INT 1
68518: ARRAY
68519: PPUSH
68520: LD_VAR 0 7
68524: PUSH
68525: LD_INT 2
68527: ARRAY
68528: PPUSH
68529: LD_VAR 0 3
68533: PPUSH
68534: CALL_OW 48
// result := IsPlaced ( unit ) ;
68538: LD_ADDR_VAR 0 4
68542: PUSH
68543: LD_VAR 0 1
68547: PPUSH
68548: CALL_OW 305
68552: ST_TO_ADDR
// exit ;
68553: POP
68554: POP
68555: GO 68561
// end ; end ;
68557: GO 68424
68559: POP
68560: POP
// end ;
68561: LD_VAR 0 4
68565: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68566: LD_INT 0
68568: PPUSH
68569: PPUSH
68570: PPUSH
// if not side or side > 8 then
68571: LD_VAR 0 1
68575: NOT
68576: IFTRUE 68588
68578: PUSH
68579: LD_VAR 0 1
68583: PUSH
68584: LD_INT 8
68586: GREATER
68587: OR
68588: IFFALSE 68592
// exit ;
68590: GO 68779
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68592: LD_ADDR_VAR 0 4
68596: PUSH
68597: LD_INT 22
68599: PUSH
68600: LD_VAR 0 1
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 21
68611: PUSH
68612: LD_INT 3
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PPUSH
68623: CALL_OW 69
68627: ST_TO_ADDR
// if not tmp then
68628: LD_VAR 0 4
68632: NOT
68633: IFFALSE 68637
// exit ;
68635: GO 68779
// enable_addtolog := true ;
68637: LD_ADDR_OWVAR 81
68641: PUSH
68642: LD_INT 1
68644: ST_TO_ADDR
// AddToLog ( [ ) ;
68645: LD_STRING [
68647: PPUSH
68648: CALL_OW 561
// for i in tmp do
68652: LD_ADDR_VAR 0 3
68656: PUSH
68657: LD_VAR 0 4
68661: PUSH
68662: FOR_IN
68663: IFFALSE 68770
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68665: LD_STRING [
68667: PUSH
68668: LD_VAR 0 3
68672: PPUSH
68673: CALL_OW 266
68677: STR
68678: PUSH
68679: LD_STRING , 
68681: STR
68682: PUSH
68683: LD_VAR 0 3
68687: PPUSH
68688: CALL_OW 250
68692: STR
68693: PUSH
68694: LD_STRING , 
68696: STR
68697: PUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 251
68707: STR
68708: PUSH
68709: LD_STRING , 
68711: STR
68712: PUSH
68713: LD_VAR 0 3
68717: PPUSH
68718: CALL_OW 254
68722: STR
68723: PUSH
68724: LD_STRING , 
68726: STR
68727: PUSH
68728: LD_VAR 0 3
68732: PPUSH
68733: LD_INT 1
68735: PPUSH
68736: CALL_OW 268
68740: STR
68741: PUSH
68742: LD_STRING , 
68744: STR
68745: PUSH
68746: LD_VAR 0 3
68750: PPUSH
68751: LD_INT 2
68753: PPUSH
68754: CALL_OW 268
68758: STR
68759: PUSH
68760: LD_STRING ],
68762: STR
68763: PPUSH
68764: CALL_OW 561
// end ;
68768: GO 68662
68770: POP
68771: POP
// AddToLog ( ]; ) ;
68772: LD_STRING ];
68774: PPUSH
68775: CALL_OW 561
// end ;
68779: LD_VAR 0 2
68783: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68784: LD_INT 0
68786: PPUSH
68787: PPUSH
68788: PPUSH
68789: PPUSH
68790: PPUSH
// if not area or not rate or not max then
68791: LD_VAR 0 1
68795: NOT
68796: IFTRUE 68805
68798: PUSH
68799: LD_VAR 0 2
68803: NOT
68804: OR
68805: IFTRUE 68814
68807: PUSH
68808: LD_VAR 0 4
68812: NOT
68813: OR
68814: IFFALSE 68818
// exit ;
68816: GO 69007
// while 1 do
68818: LD_INT 1
68820: IFFALSE 69007
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68822: LD_ADDR_VAR 0 9
68826: PUSH
68827: LD_VAR 0 1
68831: PPUSH
68832: LD_INT 1
68834: PPUSH
68835: CALL_OW 287
68839: PUSH
68840: LD_INT 10
68842: MUL
68843: ST_TO_ADDR
// r := rate / 10 ;
68844: LD_ADDR_VAR 0 7
68848: PUSH
68849: LD_VAR 0 2
68853: PUSH
68854: LD_INT 10
68856: DIVREAL
68857: ST_TO_ADDR
// time := 1 1$00 ;
68858: LD_ADDR_VAR 0 8
68862: PUSH
68863: LD_INT 2100
68865: ST_TO_ADDR
// if amount < min then
68866: LD_VAR 0 9
68870: PUSH
68871: LD_VAR 0 3
68875: LESS
68876: IFFALSE 68894
// r := r * 2 else
68878: LD_ADDR_VAR 0 7
68882: PUSH
68883: LD_VAR 0 7
68887: PUSH
68888: LD_INT 2
68890: MUL
68891: ST_TO_ADDR
68892: GO 68920
// if amount > max then
68894: LD_VAR 0 9
68898: PUSH
68899: LD_VAR 0 4
68903: GREATER
68904: IFFALSE 68920
// r := r / 2 ;
68906: LD_ADDR_VAR 0 7
68910: PUSH
68911: LD_VAR 0 7
68915: PUSH
68916: LD_INT 2
68918: DIVREAL
68919: ST_TO_ADDR
// time := time / r ;
68920: LD_ADDR_VAR 0 8
68924: PUSH
68925: LD_VAR 0 8
68929: PUSH
68930: LD_VAR 0 7
68934: DIVREAL
68935: ST_TO_ADDR
// if time < 0 then
68936: LD_VAR 0 8
68940: PUSH
68941: LD_INT 0
68943: LESS
68944: IFFALSE 68961
// time := time * - 1 ;
68946: LD_ADDR_VAR 0 8
68950: PUSH
68951: LD_VAR 0 8
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: MUL
68960: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68961: LD_VAR 0 8
68965: PUSH
68966: LD_INT 35
68968: PPUSH
68969: LD_INT 875
68971: PPUSH
68972: CALL_OW 12
68976: PLUS
68977: PPUSH
68978: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68982: LD_INT 1
68984: PPUSH
68985: LD_INT 5
68987: PPUSH
68988: CALL_OW 12
68992: PPUSH
68993: LD_VAR 0 1
68997: PPUSH
68998: LD_INT 1
69000: PPUSH
69001: CALL_OW 55
// end ;
69005: GO 68818
// end ;
69007: LD_VAR 0 5
69011: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69012: LD_INT 0
69014: PPUSH
69015: PPUSH
69016: PPUSH
69017: PPUSH
69018: PPUSH
69019: PPUSH
69020: PPUSH
69021: PPUSH
// if not turrets or not factories then
69022: LD_VAR 0 1
69026: NOT
69027: IFTRUE 69036
69029: PUSH
69030: LD_VAR 0 2
69034: NOT
69035: OR
69036: IFFALSE 69040
// exit ;
69038: GO 69347
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69040: LD_ADDR_VAR 0 10
69044: PUSH
69045: LD_INT 5
69047: PUSH
69048: LD_INT 6
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: LD_INT 4
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 3
69067: PUSH
69068: LD_INT 5
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 24
69082: PUSH
69083: LD_INT 25
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 23
69092: PUSH
69093: LD_INT 27
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 42
69106: PUSH
69107: LD_INT 43
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 44
69116: PUSH
69117: LD_INT 46
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 45
69126: PUSH
69127: LD_INT 47
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: LIST
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: LIST
69143: ST_TO_ADDR
// result := [ ] ;
69144: LD_ADDR_VAR 0 3
69148: PUSH
69149: EMPTY
69150: ST_TO_ADDR
// for i in turrets do
69151: LD_ADDR_VAR 0 4
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: FOR_IN
69162: IFFALSE 69345
// begin nat := GetNation ( i ) ;
69164: LD_ADDR_VAR 0 7
69168: PUSH
69169: LD_VAR 0 4
69173: PPUSH
69174: CALL_OW 248
69178: ST_TO_ADDR
// weapon := 0 ;
69179: LD_ADDR_VAR 0 8
69183: PUSH
69184: LD_INT 0
69186: ST_TO_ADDR
// if not nat then
69187: LD_VAR 0 7
69191: NOT
69192: IFFALSE 69196
// continue ;
69194: GO 69161
// for j in list [ nat ] do
69196: LD_ADDR_VAR 0 5
69200: PUSH
69201: LD_VAR 0 10
69205: PUSH
69206: LD_VAR 0 7
69210: ARRAY
69211: PUSH
69212: FOR_IN
69213: IFFALSE 69254
// if GetBWeapon ( i ) = j [ 1 ] then
69215: LD_VAR 0 4
69219: PPUSH
69220: CALL_OW 269
69224: PUSH
69225: LD_VAR 0 5
69229: PUSH
69230: LD_INT 1
69232: ARRAY
69233: EQUAL
69234: IFFALSE 69252
// begin weapon := j [ 2 ] ;
69236: LD_ADDR_VAR 0 8
69240: PUSH
69241: LD_VAR 0 5
69245: PUSH
69246: LD_INT 2
69248: ARRAY
69249: ST_TO_ADDR
// break ;
69250: GO 69254
// end ;
69252: GO 69212
69254: POP
69255: POP
// if not weapon then
69256: LD_VAR 0 8
69260: NOT
69261: IFFALSE 69265
// continue ;
69263: GO 69161
// for k in factories do
69265: LD_ADDR_VAR 0 6
69269: PUSH
69270: LD_VAR 0 2
69274: PUSH
69275: FOR_IN
69276: IFFALSE 69341
// begin weapons := AvailableWeaponList ( k ) ;
69278: LD_ADDR_VAR 0 9
69282: PUSH
69283: LD_VAR 0 6
69287: PPUSH
69288: CALL_OW 478
69292: ST_TO_ADDR
// if not weapons then
69293: LD_VAR 0 9
69297: NOT
69298: IFFALSE 69302
// continue ;
69300: GO 69275
// if weapon in weapons then
69302: LD_VAR 0 8
69306: PUSH
69307: LD_VAR 0 9
69311: IN
69312: IFFALSE 69339
// begin result := [ i , weapon ] ;
69314: LD_ADDR_VAR 0 3
69318: PUSH
69319: LD_VAR 0 4
69323: PUSH
69324: LD_VAR 0 8
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: ST_TO_ADDR
// exit ;
69333: POP
69334: POP
69335: POP
69336: POP
69337: GO 69347
// end ; end ;
69339: GO 69275
69341: POP
69342: POP
// end ;
69343: GO 69161
69345: POP
69346: POP
// end ;
69347: LD_VAR 0 3
69351: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69352: LD_INT 0
69354: PPUSH
// if not side or side > 8 then
69355: LD_VAR 0 3
69359: NOT
69360: IFTRUE 69372
69362: PUSH
69363: LD_VAR 0 3
69367: PUSH
69368: LD_INT 8
69370: GREATER
69371: OR
69372: IFFALSE 69376
// exit ;
69374: GO 69435
// if not range then
69376: LD_VAR 0 4
69380: NOT
69381: IFFALSE 69392
// range := - 12 ;
69383: LD_ADDR_VAR 0 4
69387: PUSH
69388: LD_INT 12
69390: NEG
69391: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69392: LD_VAR 0 1
69396: PPUSH
69397: LD_VAR 0 2
69401: PPUSH
69402: LD_VAR 0 3
69406: PPUSH
69407: LD_VAR 0 4
69411: PPUSH
69412: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69416: LD_VAR 0 1
69420: PPUSH
69421: LD_VAR 0 2
69425: PPUSH
69426: LD_VAR 0 3
69430: PPUSH
69431: CALL_OW 331
// end ;
69435: LD_VAR 0 5
69439: RET
// export function Video ( mode ) ; begin
69440: LD_INT 0
69442: PPUSH
// ingame_video = mode ;
69443: LD_ADDR_OWVAR 52
69447: PUSH
69448: LD_VAR 0 1
69452: ST_TO_ADDR
// interface_hidden = mode ;
69453: LD_ADDR_OWVAR 54
69457: PUSH
69458: LD_VAR 0 1
69462: ST_TO_ADDR
// end ;
69463: LD_VAR 0 2
69467: RET
// export function Join ( array , element ) ; begin
69468: LD_INT 0
69470: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69471: LD_ADDR_VAR 0 3
69475: PUSH
69476: LD_VAR 0 1
69480: PPUSH
69481: LD_VAR 0 1
69485: PUSH
69486: LD_INT 1
69488: PLUS
69489: PPUSH
69490: LD_VAR 0 2
69494: PPUSH
69495: CALL_OW 1
69499: ST_TO_ADDR
// end ;
69500: LD_VAR 0 3
69504: RET
// export function JoinUnion ( array , element ) ; begin
69505: LD_INT 0
69507: PPUSH
// result := array union element ;
69508: LD_ADDR_VAR 0 3
69512: PUSH
69513: LD_VAR 0 1
69517: PUSH
69518: LD_VAR 0 2
69522: UNION
69523: ST_TO_ADDR
// end ;
69524: LD_VAR 0 3
69528: RET
// export function GetBehemoths ( side ) ; begin
69529: LD_INT 0
69531: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69532: LD_ADDR_VAR 0 2
69536: PUSH
69537: LD_INT 22
69539: PUSH
69540: LD_VAR 0 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 31
69551: PUSH
69552: LD_INT 25
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PPUSH
69563: CALL_OW 69
69567: ST_TO_ADDR
// end ;
69568: LD_VAR 0 2
69572: RET
// export function Shuffle ( array ) ; var i , index ; begin
69573: LD_INT 0
69575: PPUSH
69576: PPUSH
69577: PPUSH
// result := [ ] ;
69578: LD_ADDR_VAR 0 2
69582: PUSH
69583: EMPTY
69584: ST_TO_ADDR
// if not array then
69585: LD_VAR 0 1
69589: NOT
69590: IFFALSE 69594
// exit ;
69592: GO 69693
// Randomize ;
69594: CALL_OW 10
// for i = array downto 1 do
69598: LD_ADDR_VAR 0 3
69602: PUSH
69603: DOUBLE
69604: LD_VAR 0 1
69608: INC
69609: ST_TO_ADDR
69610: LD_INT 1
69612: PUSH
69613: FOR_DOWNTO
69614: IFFALSE 69691
// begin index := rand ( 1 , array ) ;
69616: LD_ADDR_VAR 0 4
69620: PUSH
69621: LD_INT 1
69623: PPUSH
69624: LD_VAR 0 1
69628: PPUSH
69629: CALL_OW 12
69633: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69634: LD_ADDR_VAR 0 2
69638: PUSH
69639: LD_VAR 0 2
69643: PPUSH
69644: LD_VAR 0 2
69648: PUSH
69649: LD_INT 1
69651: PLUS
69652: PPUSH
69653: LD_VAR 0 1
69657: PUSH
69658: LD_VAR 0 4
69662: ARRAY
69663: PPUSH
69664: CALL_OW 2
69668: ST_TO_ADDR
// array := Delete ( array , index ) ;
69669: LD_ADDR_VAR 0 1
69673: PUSH
69674: LD_VAR 0 1
69678: PPUSH
69679: LD_VAR 0 4
69683: PPUSH
69684: CALL_OW 3
69688: ST_TO_ADDR
// end ;
69689: GO 69613
69691: POP
69692: POP
// end ;
69693: LD_VAR 0 2
69697: RET
// export function GetBaseMaterials ( base ) ; begin
69698: LD_INT 0
69700: PPUSH
// result := [ 0 , 0 , 0 ] ;
69701: LD_ADDR_VAR 0 2
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: ST_TO_ADDR
// if not base then
69720: LD_VAR 0 1
69724: NOT
69725: IFFALSE 69729
// exit ;
69727: GO 69778
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69729: LD_ADDR_VAR 0 2
69733: PUSH
69734: LD_VAR 0 1
69738: PPUSH
69739: LD_INT 1
69741: PPUSH
69742: CALL_OW 275
69746: PUSH
69747: LD_VAR 0 1
69751: PPUSH
69752: LD_INT 2
69754: PPUSH
69755: CALL_OW 275
69759: PUSH
69760: LD_VAR 0 1
69764: PPUSH
69765: LD_INT 3
69767: PPUSH
69768: CALL_OW 275
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: LIST
69777: ST_TO_ADDR
// end ;
69778: LD_VAR 0 2
69782: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69783: LD_INT 0
69785: PPUSH
69786: PPUSH
// result := array ;
69787: LD_ADDR_VAR 0 3
69791: PUSH
69792: LD_VAR 0 1
69796: ST_TO_ADDR
// if size >= result then
69797: LD_VAR 0 2
69801: PUSH
69802: LD_VAR 0 3
69806: GREATEREQUAL
69807: IFFALSE 69811
// exit ;
69809: GO 69861
// if size then
69811: LD_VAR 0 2
69815: IFFALSE 69861
// for i := array downto size do
69817: LD_ADDR_VAR 0 4
69821: PUSH
69822: DOUBLE
69823: LD_VAR 0 1
69827: INC
69828: ST_TO_ADDR
69829: LD_VAR 0 2
69833: PUSH
69834: FOR_DOWNTO
69835: IFFALSE 69859
// result := Delete ( result , result ) ;
69837: LD_ADDR_VAR 0 3
69841: PUSH
69842: LD_VAR 0 3
69846: PPUSH
69847: LD_VAR 0 3
69851: PPUSH
69852: CALL_OW 3
69856: ST_TO_ADDR
69857: GO 69834
69859: POP
69860: POP
// end ;
69861: LD_VAR 0 3
69865: RET
// export function ComExit ( unit ) ; var tmp ; begin
69866: LD_INT 0
69868: PPUSH
69869: PPUSH
// if not IsInUnit ( unit ) then
69870: LD_VAR 0 1
69874: PPUSH
69875: CALL_OW 310
69879: NOT
69880: IFFALSE 69884
// exit ;
69882: GO 69944
// tmp := IsInUnit ( unit ) ;
69884: LD_ADDR_VAR 0 3
69888: PUSH
69889: LD_VAR 0 1
69893: PPUSH
69894: CALL_OW 310
69898: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69899: LD_VAR 0 3
69903: PPUSH
69904: CALL_OW 247
69908: PUSH
69909: LD_INT 2
69911: EQUAL
69912: IFFALSE 69925
// ComExitVehicle ( unit ) else
69914: LD_VAR 0 1
69918: PPUSH
69919: CALL_OW 121
69923: GO 69934
// ComExitBuilding ( unit ) ;
69925: LD_VAR 0 1
69929: PPUSH
69930: CALL_OW 122
// result := tmp ;
69934: LD_ADDR_VAR 0 2
69938: PUSH
69939: LD_VAR 0 3
69943: ST_TO_ADDR
// end ;
69944: LD_VAR 0 2
69948: RET
// export function ComExitAll ( units ) ; var i ; begin
69949: LD_INT 0
69951: PPUSH
69952: PPUSH
// if not units then
69953: LD_VAR 0 1
69957: NOT
69958: IFFALSE 69962
// exit ;
69960: GO 69988
// for i in units do
69962: LD_ADDR_VAR 0 3
69966: PUSH
69967: LD_VAR 0 1
69971: PUSH
69972: FOR_IN
69973: IFFALSE 69986
// ComExit ( i ) ;
69975: LD_VAR 0 3
69979: PPUSH
69980: CALL 69866 0 1
69984: GO 69972
69986: POP
69987: POP
// end ;
69988: LD_VAR 0 2
69992: RET
// export function ResetHc ; begin
69993: LD_INT 0
69995: PPUSH
// InitHc ;
69996: CALL_OW 19
// hc_importance := 0 ;
70000: LD_ADDR_OWVAR 32
70004: PUSH
70005: LD_INT 0
70007: ST_TO_ADDR
// end ;
70008: LD_VAR 0 1
70012: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70013: LD_INT 0
70015: PPUSH
70016: PPUSH
70017: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70018: LD_ADDR_VAR 0 6
70022: PUSH
70023: LD_VAR 0 1
70027: PUSH
70028: LD_VAR 0 3
70032: PLUS
70033: PUSH
70034: LD_INT 2
70036: DIV
70037: ST_TO_ADDR
// if _x < 0 then
70038: LD_VAR 0 6
70042: PUSH
70043: LD_INT 0
70045: LESS
70046: IFFALSE 70063
// _x := _x * - 1 ;
70048: LD_ADDR_VAR 0 6
70052: PUSH
70053: LD_VAR 0 6
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: MUL
70062: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70063: LD_ADDR_VAR 0 7
70067: PUSH
70068: LD_VAR 0 2
70072: PUSH
70073: LD_VAR 0 4
70077: PLUS
70078: PUSH
70079: LD_INT 2
70081: DIV
70082: ST_TO_ADDR
// if _y < 0 then
70083: LD_VAR 0 7
70087: PUSH
70088: LD_INT 0
70090: LESS
70091: IFFALSE 70108
// _y := _y * - 1 ;
70093: LD_ADDR_VAR 0 7
70097: PUSH
70098: LD_VAR 0 7
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: MUL
70107: ST_TO_ADDR
// result := [ _x , _y ] ;
70108: LD_ADDR_VAR 0 5
70112: PUSH
70113: LD_VAR 0 6
70117: PUSH
70118: LD_VAR 0 7
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: ST_TO_ADDR
// end ;
70127: LD_VAR 0 5
70131: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70132: LD_INT 0
70134: PPUSH
70135: PPUSH
70136: PPUSH
70137: PPUSH
// task := GetTaskList ( unit ) ;
70138: LD_ADDR_VAR 0 7
70142: PUSH
70143: LD_VAR 0 1
70147: PPUSH
70148: CALL_OW 437
70152: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70153: LD_VAR 0 7
70157: NOT
70158: IFFALSE 70177
70160: PUSH
70161: LD_VAR 0 1
70165: PPUSH
70166: LD_VAR 0 2
70170: PPUSH
70171: CALL_OW 308
70175: NOT
70176: AND
70177: IFFALSE 70181
// exit ;
70179: GO 70299
// if IsInArea ( unit , area ) then
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_VAR 0 2
70190: PPUSH
70191: CALL_OW 308
70195: IFFALSE 70213
// begin ComMoveToArea ( unit , goAway ) ;
70197: LD_VAR 0 1
70201: PPUSH
70202: LD_VAR 0 3
70206: PPUSH
70207: CALL_OW 113
// exit ;
70211: GO 70299
// end ; if task [ 1 ] [ 1 ] <> M then
70213: LD_VAR 0 7
70217: PUSH
70218: LD_INT 1
70220: ARRAY
70221: PUSH
70222: LD_INT 1
70224: ARRAY
70225: PUSH
70226: LD_STRING M
70228: NONEQUAL
70229: IFFALSE 70233
// exit ;
70231: GO 70299
// x := task [ 1 ] [ 2 ] ;
70233: LD_ADDR_VAR 0 5
70237: PUSH
70238: LD_VAR 0 7
70242: PUSH
70243: LD_INT 1
70245: ARRAY
70246: PUSH
70247: LD_INT 2
70249: ARRAY
70250: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70251: LD_ADDR_VAR 0 6
70255: PUSH
70256: LD_VAR 0 7
70260: PUSH
70261: LD_INT 1
70263: ARRAY
70264: PUSH
70265: LD_INT 3
70267: ARRAY
70268: ST_TO_ADDR
// if InArea ( x , y , area ) then
70269: LD_VAR 0 5
70273: PPUSH
70274: LD_VAR 0 6
70278: PPUSH
70279: LD_VAR 0 2
70283: PPUSH
70284: CALL_OW 309
70288: IFFALSE 70299
// ComStop ( unit ) ;
70290: LD_VAR 0 1
70294: PPUSH
70295: CALL_OW 141
// end ;
70299: LD_VAR 0 4
70303: RET
// export function Abs ( value ) ; begin
70304: LD_INT 0
70306: PPUSH
// result := value ;
70307: LD_ADDR_VAR 0 2
70311: PUSH
70312: LD_VAR 0 1
70316: ST_TO_ADDR
// if value < 0 then
70317: LD_VAR 0 1
70321: PUSH
70322: LD_INT 0
70324: LESS
70325: IFFALSE 70342
// result := value * - 1 ;
70327: LD_ADDR_VAR 0 2
70331: PUSH
70332: LD_VAR 0 1
70336: PUSH
70337: LD_INT 1
70339: NEG
70340: MUL
70341: ST_TO_ADDR
// end ;
70342: LD_VAR 0 2
70346: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70347: LD_INT 0
70349: PPUSH
70350: PPUSH
70351: PPUSH
70352: PPUSH
70353: PPUSH
70354: PPUSH
70355: PPUSH
70356: PPUSH
// if not unit or not building then
70357: LD_VAR 0 1
70361: NOT
70362: IFTRUE 70371
70364: PUSH
70365: LD_VAR 0 2
70369: NOT
70370: OR
70371: IFFALSE 70375
// exit ;
70373: GO 70603
// x := GetX ( building ) ;
70375: LD_ADDR_VAR 0 4
70379: PUSH
70380: LD_VAR 0 2
70384: PPUSH
70385: CALL_OW 250
70389: ST_TO_ADDR
// y := GetY ( building ) ;
70390: LD_ADDR_VAR 0 6
70394: PUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: CALL_OW 251
70404: ST_TO_ADDR
// d := GetDir ( building ) ;
70405: LD_ADDR_VAR 0 8
70409: PUSH
70410: LD_VAR 0 2
70414: PPUSH
70415: CALL_OW 254
70419: ST_TO_ADDR
// r := 4 ;
70420: LD_ADDR_VAR 0 9
70424: PUSH
70425: LD_INT 4
70427: ST_TO_ADDR
// for i := 1 to 5 do
70428: LD_ADDR_VAR 0 10
70432: PUSH
70433: DOUBLE
70434: LD_INT 1
70436: DEC
70437: ST_TO_ADDR
70438: LD_INT 5
70440: PUSH
70441: FOR_TO
70442: IFFALSE 70601
// begin _x := ShiftX ( x , d , r + i ) ;
70444: LD_ADDR_VAR 0 5
70448: PUSH
70449: LD_VAR 0 4
70453: PPUSH
70454: LD_VAR 0 8
70458: PPUSH
70459: LD_VAR 0 9
70463: PUSH
70464: LD_VAR 0 10
70468: PLUS
70469: PPUSH
70470: CALL_OW 272
70474: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70475: LD_ADDR_VAR 0 7
70479: PUSH
70480: LD_VAR 0 6
70484: PPUSH
70485: LD_VAR 0 8
70489: PPUSH
70490: LD_VAR 0 9
70494: PUSH
70495: LD_VAR 0 10
70499: PLUS
70500: PPUSH
70501: CALL_OW 273
70505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70506: LD_VAR 0 5
70510: PPUSH
70511: LD_VAR 0 7
70515: PPUSH
70516: CALL_OW 488
70520: IFFALSE 70555
70522: PUSH
70523: LD_VAR 0 5
70527: PPUSH
70528: LD_VAR 0 7
70532: PPUSH
70533: CALL_OW 428
70537: PPUSH
70538: CALL_OW 247
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: LD_INT 2
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: IN
70553: NOT
70554: AND
70555: IFFALSE 70599
// begin ComMoveXY ( unit , _x , _y ) ;
70557: LD_VAR 0 1
70561: PPUSH
70562: LD_VAR 0 5
70566: PPUSH
70567: LD_VAR 0 7
70571: PPUSH
70572: CALL_OW 111
// result := [ _x , _y ] ;
70576: LD_ADDR_VAR 0 3
70580: PUSH
70581: LD_VAR 0 5
70585: PUSH
70586: LD_VAR 0 7
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: ST_TO_ADDR
// exit ;
70595: POP
70596: POP
70597: GO 70603
// end ; end ;
70599: GO 70441
70601: POP
70602: POP
// end ;
70603: LD_VAR 0 3
70607: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70608: LD_INT 0
70610: PPUSH
70611: PPUSH
70612: PPUSH
// result := 0 ;
70613: LD_ADDR_VAR 0 3
70617: PUSH
70618: LD_INT 0
70620: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70621: LD_VAR 0 1
70625: PUSH
70626: LD_INT 0
70628: LESS
70629: IFTRUE 70641
70631: PUSH
70632: LD_VAR 0 1
70636: PUSH
70637: LD_INT 8
70639: GREATER
70640: OR
70641: IFTRUE 70653
70643: PUSH
70644: LD_VAR 0 2
70648: PUSH
70649: LD_INT 0
70651: LESS
70652: OR
70653: IFTRUE 70665
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 8
70663: GREATER
70664: OR
70665: IFFALSE 70669
// exit ;
70667: GO 70744
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70669: LD_ADDR_VAR 0 4
70673: PUSH
70674: LD_INT 22
70676: PUSH
70677: LD_VAR 0 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PPUSH
70686: CALL_OW 69
70690: PUSH
70691: FOR_IN
70692: IFFALSE 70742
// begin un := UnitShoot ( i ) ;
70694: LD_ADDR_VAR 0 5
70698: PUSH
70699: LD_VAR 0 4
70703: PPUSH
70704: CALL_OW 504
70708: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70709: LD_VAR 0 5
70713: PPUSH
70714: CALL_OW 255
70718: PUSH
70719: LD_VAR 0 1
70723: EQUAL
70724: IFFALSE 70740
// begin result := un ;
70726: LD_ADDR_VAR 0 3
70730: PUSH
70731: LD_VAR 0 5
70735: ST_TO_ADDR
// exit ;
70736: POP
70737: POP
70738: GO 70744
// end ; end ;
70740: GO 70691
70742: POP
70743: POP
// end ;
70744: LD_VAR 0 3
70748: RET
// export function GetCargoBay ( units ) ; begin
70749: LD_INT 0
70751: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70752: LD_ADDR_VAR 0 2
70756: PUSH
70757: LD_VAR 0 1
70761: PPUSH
70762: LD_INT 2
70764: PUSH
70765: LD_INT 34
70767: PUSH
70768: LD_INT 12
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 34
70777: PUSH
70778: LD_INT 51
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 34
70787: PUSH
70788: LD_INT 32
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 34
70797: PUSH
70798: LD_INT 89
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: PPUSH
70812: CALL_OW 72
70816: ST_TO_ADDR
// end ;
70817: LD_VAR 0 2
70821: RET
// export function Negate ( value ) ; begin
70822: LD_INT 0
70824: PPUSH
// result := not value ;
70825: LD_ADDR_VAR 0 2
70829: PUSH
70830: LD_VAR 0 1
70834: NOT
70835: ST_TO_ADDR
// end ;
70836: LD_VAR 0 2
70840: RET
// export function Inc ( value ) ; begin
70841: LD_INT 0
70843: PPUSH
// result := value + 1 ;
70844: LD_ADDR_VAR 0 2
70848: PUSH
70849: LD_VAR 0 1
70853: PUSH
70854: LD_INT 1
70856: PLUS
70857: ST_TO_ADDR
// end ;
70858: LD_VAR 0 2
70862: RET
// export function Dec ( value ) ; begin
70863: LD_INT 0
70865: PPUSH
// result := value - 1 ;
70866: LD_ADDR_VAR 0 2
70870: PUSH
70871: LD_VAR 0 1
70875: PUSH
70876: LD_INT 1
70878: MINUS
70879: ST_TO_ADDR
// end ;
70880: LD_VAR 0 2
70884: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70885: LD_INT 0
70887: PPUSH
70888: PPUSH
70889: PPUSH
70890: PPUSH
70891: PPUSH
70892: PPUSH
70893: PPUSH
70894: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_VAR 0 2
70904: PPUSH
70905: CALL_OW 488
70909: NOT
70910: IFTRUE 70929
70912: PUSH
70913: LD_VAR 0 3
70917: PPUSH
70918: LD_VAR 0 4
70922: PPUSH
70923: CALL_OW 488
70927: NOT
70928: OR
70929: IFFALSE 70942
// begin result := - 1 ;
70931: LD_ADDR_VAR 0 5
70935: PUSH
70936: LD_INT 1
70938: NEG
70939: ST_TO_ADDR
// exit ;
70940: GO 71177
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70942: LD_ADDR_VAR 0 12
70946: PUSH
70947: LD_VAR 0 1
70951: PPUSH
70952: LD_VAR 0 2
70956: PPUSH
70957: LD_VAR 0 3
70961: PPUSH
70962: LD_VAR 0 4
70966: PPUSH
70967: CALL 70013 0 4
70971: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70972: LD_ADDR_VAR 0 11
70976: PUSH
70977: LD_VAR 0 1
70981: PPUSH
70982: LD_VAR 0 2
70986: PPUSH
70987: LD_VAR 0 12
70991: PUSH
70992: LD_INT 1
70994: ARRAY
70995: PPUSH
70996: LD_VAR 0 12
71000: PUSH
71001: LD_INT 2
71003: ARRAY
71004: PPUSH
71005: CALL_OW 298
71009: ST_TO_ADDR
// distance := 9999 ;
71010: LD_ADDR_VAR 0 10
71014: PUSH
71015: LD_INT 9999
71017: ST_TO_ADDR
// for i := 0 to 5 do
71018: LD_ADDR_VAR 0 6
71022: PUSH
71023: DOUBLE
71024: LD_INT 0
71026: DEC
71027: ST_TO_ADDR
71028: LD_INT 5
71030: PUSH
71031: FOR_TO
71032: IFFALSE 71175
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71034: LD_ADDR_VAR 0 7
71038: PUSH
71039: LD_VAR 0 1
71043: PPUSH
71044: LD_VAR 0 6
71048: PPUSH
71049: LD_VAR 0 11
71053: PPUSH
71054: CALL_OW 272
71058: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71059: LD_ADDR_VAR 0 8
71063: PUSH
71064: LD_VAR 0 2
71068: PPUSH
71069: LD_VAR 0 6
71073: PPUSH
71074: LD_VAR 0 11
71078: PPUSH
71079: CALL_OW 273
71083: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71084: LD_VAR 0 7
71088: PPUSH
71089: LD_VAR 0 8
71093: PPUSH
71094: CALL_OW 488
71098: NOT
71099: IFFALSE 71103
// continue ;
71101: GO 71031
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71103: LD_ADDR_VAR 0 9
71107: PUSH
71108: LD_VAR 0 12
71112: PUSH
71113: LD_INT 1
71115: ARRAY
71116: PPUSH
71117: LD_VAR 0 12
71121: PUSH
71122: LD_INT 2
71124: ARRAY
71125: PPUSH
71126: LD_VAR 0 7
71130: PPUSH
71131: LD_VAR 0 8
71135: PPUSH
71136: CALL_OW 298
71140: ST_TO_ADDR
// if tmp < distance then
71141: LD_VAR 0 9
71145: PUSH
71146: LD_VAR 0 10
71150: LESS
71151: IFFALSE 71173
// begin result := i ;
71153: LD_ADDR_VAR 0 5
71157: PUSH
71158: LD_VAR 0 6
71162: ST_TO_ADDR
// distance := tmp ;
71163: LD_ADDR_VAR 0 10
71167: PUSH
71168: LD_VAR 0 9
71172: ST_TO_ADDR
// end ; end ;
71173: GO 71031
71175: POP
71176: POP
// end ;
71177: LD_VAR 0 5
71181: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71182: LD_INT 0
71184: PPUSH
71185: PPUSH
// if not driver or not IsInUnit ( driver ) then
71186: LD_VAR 0 1
71190: NOT
71191: IFTRUE 71205
71193: PUSH
71194: LD_VAR 0 1
71198: PPUSH
71199: CALL_OW 310
71203: NOT
71204: OR
71205: IFFALSE 71209
// exit ;
71207: GO 71299
// vehicle := IsInUnit ( driver ) ;
71209: LD_ADDR_VAR 0 3
71213: PUSH
71214: LD_VAR 0 1
71218: PPUSH
71219: CALL_OW 310
71223: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71224: LD_VAR 0 1
71228: PPUSH
71229: LD_STRING \
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: LD_INT 0
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: PUSH
71259: LD_STRING E
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: LD_VAR 0 3
71272: PUSH
71273: LD_INT 0
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: LD_INT 0
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PPUSH
71295: CALL_OW 446
// end ;
71299: LD_VAR 0 2
71303: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71304: LD_INT 0
71306: PPUSH
71307: PPUSH
// if not driver or not IsInUnit ( driver ) then
71308: LD_VAR 0 1
71312: NOT
71313: IFTRUE 71327
71315: PUSH
71316: LD_VAR 0 1
71320: PPUSH
71321: CALL_OW 310
71325: NOT
71326: OR
71327: IFFALSE 71331
// exit ;
71329: GO 71421
// vehicle := IsInUnit ( driver ) ;
71331: LD_ADDR_VAR 0 3
71335: PUSH
71336: LD_VAR 0 1
71340: PPUSH
71341: CALL_OW 310
71345: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71346: LD_VAR 0 1
71350: PPUSH
71351: LD_STRING \
71353: PUSH
71354: LD_INT 0
71356: PUSH
71357: LD_INT 0
71359: PUSH
71360: LD_INT 0
71362: PUSH
71363: LD_INT 0
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 0
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: PUSH
71381: LD_STRING E
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: LD_VAR 0 3
71394: PUSH
71395: LD_INT 0
71397: PUSH
71398: LD_INT 0
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PPUSH
71417: CALL_OW 447
// end ;
71421: LD_VAR 0 2
71425: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71426: LD_INT 0
71428: PPUSH
71429: PPUSH
71430: PPUSH
// tmp := [ ] ;
71431: LD_ADDR_VAR 0 5
71435: PUSH
71436: EMPTY
71437: ST_TO_ADDR
// for i in units do
71438: LD_ADDR_VAR 0 4
71442: PUSH
71443: LD_VAR 0 1
71447: PUSH
71448: FOR_IN
71449: IFFALSE 71487
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71451: LD_ADDR_VAR 0 5
71455: PUSH
71456: LD_VAR 0 5
71460: PPUSH
71461: LD_VAR 0 5
71465: PUSH
71466: LD_INT 1
71468: PLUS
71469: PPUSH
71470: LD_VAR 0 4
71474: PPUSH
71475: CALL_OW 256
71479: PPUSH
71480: CALL_OW 2
71484: ST_TO_ADDR
71485: GO 71448
71487: POP
71488: POP
// if not tmp then
71489: LD_VAR 0 5
71493: NOT
71494: IFFALSE 71498
// exit ;
71496: GO 71546
// if asc then
71498: LD_VAR 0 2
71502: IFFALSE 71526
// result := SortListByListAsc ( units , tmp ) else
71504: LD_ADDR_VAR 0 3
71508: PUSH
71509: LD_VAR 0 1
71513: PPUSH
71514: LD_VAR 0 5
71518: PPUSH
71519: CALL_OW 76
71523: ST_TO_ADDR
71524: GO 71546
// result := SortListByListDesc ( units , tmp ) ;
71526: LD_ADDR_VAR 0 3
71530: PUSH
71531: LD_VAR 0 1
71535: PPUSH
71536: LD_VAR 0 5
71540: PPUSH
71541: CALL_OW 77
71545: ST_TO_ADDR
// end ;
71546: LD_VAR 0 3
71550: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71551: LD_INT 0
71553: PPUSH
71554: PPUSH
// task := GetTaskList ( mech ) ;
71555: LD_ADDR_VAR 0 4
71559: PUSH
71560: LD_VAR 0 1
71564: PPUSH
71565: CALL_OW 437
71569: ST_TO_ADDR
// if not task then
71570: LD_VAR 0 4
71574: NOT
71575: IFFALSE 71579
// exit ;
71577: GO 71623
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71579: LD_ADDR_VAR 0 3
71583: PUSH
71584: LD_VAR 0 4
71588: PUSH
71589: LD_INT 1
71591: ARRAY
71592: PUSH
71593: LD_INT 1
71595: ARRAY
71596: PUSH
71597: LD_STRING r
71599: EQUAL
71600: IFFALSE 71622
71602: PUSH
71603: LD_VAR 0 4
71607: PUSH
71608: LD_INT 1
71610: ARRAY
71611: PUSH
71612: LD_INT 4
71614: ARRAY
71615: PUSH
71616: LD_VAR 0 2
71620: EQUAL
71621: AND
71622: ST_TO_ADDR
// end ;
71623: LD_VAR 0 3
71627: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71628: LD_INT 0
71630: PPUSH
// SetDir ( unit , d ) ;
71631: LD_VAR 0 1
71635: PPUSH
71636: LD_VAR 0 4
71640: PPUSH
71641: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
71645: LD_ADDR_VAR 0 6
71649: PUSH
71650: LD_VAR 0 1
71654: PPUSH
71655: LD_VAR 0 2
71659: PPUSH
71660: LD_VAR 0 3
71664: PPUSH
71665: LD_VAR 0 5
71669: PPUSH
71670: CALL_OW 48
71674: ST_TO_ADDR
// end ;
71675: LD_VAR 0 6
71679: RET
// export function ToNaturalNumber ( number ) ; begin
71680: LD_INT 0
71682: PPUSH
// result := number div 1 ;
71683: LD_ADDR_VAR 0 2
71687: PUSH
71688: LD_VAR 0 1
71692: PUSH
71693: LD_INT 1
71695: DIV
71696: ST_TO_ADDR
// if number < 0 then
71697: LD_VAR 0 1
71701: PUSH
71702: LD_INT 0
71704: LESS
71705: IFFALSE 71715
// result := 0 ;
71707: LD_ADDR_VAR 0 2
71711: PUSH
71712: LD_INT 0
71714: ST_TO_ADDR
// end ;
71715: LD_VAR 0 2
71719: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
71720: LD_INT 0
71722: PPUSH
71723: PPUSH
71724: PPUSH
// if not buildings then
71725: LD_VAR 0 1
71729: NOT
71730: IFFALSE 71734
// exit ;
71732: GO 71849
// tmp := [ ] ;
71734: LD_ADDR_VAR 0 5
71738: PUSH
71739: EMPTY
71740: ST_TO_ADDR
// for b in buildings do
71741: LD_ADDR_VAR 0 4
71745: PUSH
71746: LD_VAR 0 1
71750: PUSH
71751: FOR_IN
71752: IFFALSE 71790
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
71754: LD_ADDR_VAR 0 5
71758: PUSH
71759: LD_VAR 0 5
71763: PPUSH
71764: LD_VAR 0 5
71768: PUSH
71769: LD_INT 1
71771: PLUS
71772: PPUSH
71773: LD_VAR 0 4
71777: PPUSH
71778: CALL_OW 266
71782: PPUSH
71783: CALL_OW 1
71787: ST_TO_ADDR
71788: GO 71751
71790: POP
71791: POP
// if not tmp then
71792: LD_VAR 0 5
71796: NOT
71797: IFFALSE 71801
// exit ;
71799: GO 71849
// if asc then
71801: LD_VAR 0 2
71805: IFFALSE 71829
// result := SortListByListAsc ( buildings , tmp ) else
71807: LD_ADDR_VAR 0 3
71811: PUSH
71812: LD_VAR 0 1
71816: PPUSH
71817: LD_VAR 0 5
71821: PPUSH
71822: CALL_OW 76
71826: ST_TO_ADDR
71827: GO 71849
// result := SortListByListDesc ( buildings , tmp ) ;
71829: LD_ADDR_VAR 0 3
71833: PUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: LD_VAR 0 5
71843: PPUSH
71844: CALL_OW 77
71848: ST_TO_ADDR
// end ;
71849: LD_VAR 0 3
71853: RET
// export function SortByClass ( units , class ) ; var un ; begin
71854: LD_INT 0
71856: PPUSH
71857: PPUSH
// if not units or not class then
71858: LD_VAR 0 1
71862: NOT
71863: IFTRUE 71872
71865: PUSH
71866: LD_VAR 0 2
71870: NOT
71871: OR
71872: IFFALSE 71876
// exit ;
71874: GO 71971
// result := [ ] ;
71876: LD_ADDR_VAR 0 3
71880: PUSH
71881: EMPTY
71882: ST_TO_ADDR
// for un in units do
71883: LD_ADDR_VAR 0 4
71887: PUSH
71888: LD_VAR 0 1
71892: PUSH
71893: FOR_IN
71894: IFFALSE 71969
// if GetClass ( un ) = class then
71896: LD_VAR 0 4
71900: PPUSH
71901: CALL_OW 257
71905: PUSH
71906: LD_VAR 0 2
71910: EQUAL
71911: IFFALSE 71938
// result := Insert ( result , 1 , un ) else
71913: LD_ADDR_VAR 0 3
71917: PUSH
71918: LD_VAR 0 3
71922: PPUSH
71923: LD_INT 1
71925: PPUSH
71926: LD_VAR 0 4
71930: PPUSH
71931: CALL_OW 2
71935: ST_TO_ADDR
71936: GO 71967
// result := Replace ( result , result + 1 , un ) ;
71938: LD_ADDR_VAR 0 3
71942: PUSH
71943: LD_VAR 0 3
71947: PPUSH
71948: LD_VAR 0 3
71952: PUSH
71953: LD_INT 1
71955: PLUS
71956: PPUSH
71957: LD_VAR 0 4
71961: PPUSH
71962: CALL_OW 1
71966: ST_TO_ADDR
71967: GO 71893
71969: POP
71970: POP
// end ;
71971: LD_VAR 0 3
71975: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71976: LD_INT 0
71978: PPUSH
71979: PPUSH
71980: PPUSH
71981: PPUSH
71982: PPUSH
71983: PPUSH
71984: PPUSH
// result := [ ] ;
71985: LD_ADDR_VAR 0 4
71989: PUSH
71990: EMPTY
71991: ST_TO_ADDR
// if x - r < 0 then
71992: LD_VAR 0 1
71996: PUSH
71997: LD_VAR 0 3
72001: MINUS
72002: PUSH
72003: LD_INT 0
72005: LESS
72006: IFFALSE 72018
// min_x := 0 else
72008: LD_ADDR_VAR 0 8
72012: PUSH
72013: LD_INT 0
72015: ST_TO_ADDR
72016: GO 72034
// min_x := x - r ;
72018: LD_ADDR_VAR 0 8
72022: PUSH
72023: LD_VAR 0 1
72027: PUSH
72028: LD_VAR 0 3
72032: MINUS
72033: ST_TO_ADDR
// if y - r < 0 then
72034: LD_VAR 0 2
72038: PUSH
72039: LD_VAR 0 3
72043: MINUS
72044: PUSH
72045: LD_INT 0
72047: LESS
72048: IFFALSE 72060
// min_y := 0 else
72050: LD_ADDR_VAR 0 7
72054: PUSH
72055: LD_INT 0
72057: ST_TO_ADDR
72058: GO 72076
// min_y := y - r ;
72060: LD_ADDR_VAR 0 7
72064: PUSH
72065: LD_VAR 0 2
72069: PUSH
72070: LD_VAR 0 3
72074: MINUS
72075: ST_TO_ADDR
// max_x := x + r ;
72076: LD_ADDR_VAR 0 9
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: LD_VAR 0 3
72090: PLUS
72091: ST_TO_ADDR
// max_y := y + r ;
72092: LD_ADDR_VAR 0 10
72096: PUSH
72097: LD_VAR 0 2
72101: PUSH
72102: LD_VAR 0 3
72106: PLUS
72107: ST_TO_ADDR
// for _x = min_x to max_x do
72108: LD_ADDR_VAR 0 5
72112: PUSH
72113: DOUBLE
72114: LD_VAR 0 8
72118: DEC
72119: ST_TO_ADDR
72120: LD_VAR 0 9
72124: PUSH
72125: FOR_TO
72126: IFFALSE 72227
// for _y = min_y to max_y do
72128: LD_ADDR_VAR 0 6
72132: PUSH
72133: DOUBLE
72134: LD_VAR 0 7
72138: DEC
72139: ST_TO_ADDR
72140: LD_VAR 0 10
72144: PUSH
72145: FOR_TO
72146: IFFALSE 72223
// begin if not ValidHex ( _x , _y ) then
72148: LD_VAR 0 5
72152: PPUSH
72153: LD_VAR 0 6
72157: PPUSH
72158: CALL_OW 488
72162: NOT
72163: IFFALSE 72167
// continue ;
72165: GO 72145
// if GetResourceTypeXY ( _x , _y ) then
72167: LD_VAR 0 5
72171: PPUSH
72172: LD_VAR 0 6
72176: PPUSH
72177: CALL_OW 283
72181: IFFALSE 72221
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72183: LD_ADDR_VAR 0 4
72187: PUSH
72188: LD_VAR 0 4
72192: PPUSH
72193: LD_VAR 0 4
72197: PUSH
72198: LD_INT 1
72200: PLUS
72201: PPUSH
72202: LD_VAR 0 5
72206: PUSH
72207: LD_VAR 0 6
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PPUSH
72216: CALL_OW 1
72220: ST_TO_ADDR
// end ;
72221: GO 72145
72223: POP
72224: POP
72225: GO 72125
72227: POP
72228: POP
// end ;
72229: LD_VAR 0 4
72233: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72234: LD_INT 0
72236: PPUSH
72237: PPUSH
72238: PPUSH
72239: PPUSH
72240: PPUSH
72241: PPUSH
72242: PPUSH
72243: PPUSH
// if not units then
72244: LD_VAR 0 1
72248: NOT
72249: IFFALSE 72253
// exit ;
72251: GO 72785
// result := UnitFilter ( units , [ f_ok ] ) ;
72253: LD_ADDR_VAR 0 3
72257: PUSH
72258: LD_VAR 0 1
72262: PPUSH
72263: LD_INT 50
72265: PUSH
72266: EMPTY
72267: LIST
72268: PPUSH
72269: CALL_OW 72
72273: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72274: LD_ADDR_VAR 0 8
72278: PUSH
72279: LD_VAR 0 1
72283: PUSH
72284: LD_INT 1
72286: ARRAY
72287: PPUSH
72288: CALL_OW 255
72292: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72293: LD_ADDR_VAR 0 10
72297: PUSH
72298: LD_INT 29
72300: PUSH
72301: LD_INT 91
72303: PUSH
72304: LD_INT 49
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: ST_TO_ADDR
// if not result then
72312: LD_VAR 0 3
72316: NOT
72317: IFFALSE 72321
// exit ;
72319: GO 72785
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72321: LD_ADDR_VAR 0 5
72325: PUSH
72326: LD_INT 81
72328: PUSH
72329: LD_VAR 0 8
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PPUSH
72338: CALL_OW 69
72342: ST_TO_ADDR
// for i in result do
72343: LD_ADDR_VAR 0 4
72347: PUSH
72348: LD_VAR 0 3
72352: PUSH
72353: FOR_IN
72354: IFFALSE 72783
// begin tag := GetTag ( i ) + 1 ;
72356: LD_ADDR_VAR 0 9
72360: PUSH
72361: LD_VAR 0 4
72365: PPUSH
72366: CALL_OW 110
72370: PUSH
72371: LD_INT 1
72373: PLUS
72374: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72375: LD_ADDR_VAR 0 7
72379: PUSH
72380: LD_VAR 0 4
72384: PPUSH
72385: CALL_OW 250
72389: PPUSH
72390: LD_VAR 0 4
72394: PPUSH
72395: CALL_OW 251
72399: PPUSH
72400: LD_INT 4
72402: PPUSH
72403: CALL 71976 0 3
72407: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72408: LD_VAR 0 4
72412: PPUSH
72413: CALL_OW 247
72417: PUSH
72418: LD_INT 2
72420: EQUAL
72421: IFFALSE 72433
72423: PUSH
72424: LD_VAR 0 7
72428: PUSH
72429: LD_INT 2
72431: GREATER
72432: AND
72433: IFFALSE 72453
72435: PUSH
72436: LD_VAR 0 4
72440: PPUSH
72441: CALL_OW 264
72445: PUSH
72446: LD_VAR 0 10
72450: IN
72451: NOT
72452: AND
72453: IFFALSE 72492
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72455: LD_VAR 0 4
72459: PPUSH
72460: LD_VAR 0 7
72464: PUSH
72465: LD_INT 1
72467: ARRAY
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PPUSH
72473: LD_VAR 0 7
72477: PUSH
72478: LD_INT 1
72480: ARRAY
72481: PUSH
72482: LD_INT 2
72484: ARRAY
72485: PPUSH
72486: CALL_OW 116
72490: GO 72781
// if path > tag then
72492: LD_VAR 0 2
72496: PUSH
72497: LD_VAR 0 9
72501: GREATER
72502: IFFALSE 72710
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72504: LD_ADDR_VAR 0 6
72508: PUSH
72509: LD_VAR 0 5
72513: PPUSH
72514: LD_INT 91
72516: PUSH
72517: LD_VAR 0 4
72521: PUSH
72522: LD_INT 8
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: LIST
72529: PPUSH
72530: CALL_OW 72
72534: ST_TO_ADDR
// if nearEnemy then
72535: LD_VAR 0 6
72539: IFFALSE 72608
// begin if GetWeapon ( i ) = ru_time_lapser then
72541: LD_VAR 0 4
72545: PPUSH
72546: CALL_OW 264
72550: PUSH
72551: LD_INT 49
72553: EQUAL
72554: IFFALSE 72582
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72556: LD_VAR 0 4
72560: PPUSH
72561: LD_VAR 0 6
72565: PPUSH
72566: LD_VAR 0 4
72570: PPUSH
72571: CALL_OW 74
72575: PPUSH
72576: CALL_OW 112
72580: GO 72606
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72582: LD_VAR 0 4
72586: PPUSH
72587: LD_VAR 0 6
72591: PPUSH
72592: LD_VAR 0 4
72596: PPUSH
72597: CALL_OW 74
72601: PPUSH
72602: CALL 73866 0 2
// end else
72606: GO 72708
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72608: LD_VAR 0 4
72612: PPUSH
72613: LD_VAR 0 2
72617: PUSH
72618: LD_VAR 0 9
72622: ARRAY
72623: PUSH
72624: LD_INT 1
72626: ARRAY
72627: PPUSH
72628: LD_VAR 0 2
72632: PUSH
72633: LD_VAR 0 9
72637: ARRAY
72638: PUSH
72639: LD_INT 2
72641: ARRAY
72642: PPUSH
72643: CALL_OW 297
72647: PUSH
72648: LD_INT 6
72650: GREATER
72651: IFFALSE 72694
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72653: LD_VAR 0 4
72657: PPUSH
72658: LD_VAR 0 2
72662: PUSH
72663: LD_VAR 0 9
72667: ARRAY
72668: PUSH
72669: LD_INT 1
72671: ARRAY
72672: PPUSH
72673: LD_VAR 0 2
72677: PUSH
72678: LD_VAR 0 9
72682: ARRAY
72683: PUSH
72684: LD_INT 2
72686: ARRAY
72687: PPUSH
72688: CALL_OW 114
72692: GO 72708
// SetTag ( i , tag ) ;
72694: LD_VAR 0 4
72698: PPUSH
72699: LD_VAR 0 9
72703: PPUSH
72704: CALL_OW 109
// end else
72708: GO 72781
// if enemy then
72710: LD_VAR 0 5
72714: IFFALSE 72781
// begin if GetWeapon ( i ) = ru_time_lapser then
72716: LD_VAR 0 4
72720: PPUSH
72721: CALL_OW 264
72725: PUSH
72726: LD_INT 49
72728: EQUAL
72729: IFFALSE 72757
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72731: LD_VAR 0 4
72735: PPUSH
72736: LD_VAR 0 5
72740: PPUSH
72741: LD_VAR 0 4
72745: PPUSH
72746: CALL_OW 74
72750: PPUSH
72751: CALL_OW 112
72755: GO 72781
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72757: LD_VAR 0 4
72761: PPUSH
72762: LD_VAR 0 5
72766: PPUSH
72767: LD_VAR 0 4
72771: PPUSH
72772: CALL_OW 74
72776: PPUSH
72777: CALL 73866 0 2
// end ; end ;
72781: GO 72353
72783: POP
72784: POP
// end ;
72785: LD_VAR 0 3
72789: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72790: LD_INT 0
72792: PPUSH
72793: PPUSH
72794: PPUSH
// if not unit or IsInUnit ( unit ) then
72795: LD_VAR 0 1
72799: NOT
72800: IFTRUE 72813
72802: PUSH
72803: LD_VAR 0 1
72807: PPUSH
72808: CALL_OW 310
72812: OR
72813: IFFALSE 72817
// exit ;
72815: GO 72908
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72817: LD_ADDR_VAR 0 4
72821: PUSH
72822: LD_VAR 0 1
72826: PPUSH
72827: CALL_OW 250
72831: PPUSH
72832: LD_VAR 0 2
72836: PPUSH
72837: LD_INT 1
72839: PPUSH
72840: CALL_OW 272
72844: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72845: LD_ADDR_VAR 0 5
72849: PUSH
72850: LD_VAR 0 1
72854: PPUSH
72855: CALL_OW 251
72859: PPUSH
72860: LD_VAR 0 2
72864: PPUSH
72865: LD_INT 1
72867: PPUSH
72868: CALL_OW 273
72872: ST_TO_ADDR
// if ValidHex ( x , y ) then
72873: LD_VAR 0 4
72877: PPUSH
72878: LD_VAR 0 5
72882: PPUSH
72883: CALL_OW 488
72887: IFFALSE 72908
// ComTurnXY ( unit , x , y ) ;
72889: LD_VAR 0 1
72893: PPUSH
72894: LD_VAR 0 4
72898: PPUSH
72899: LD_VAR 0 5
72903: PPUSH
72904: CALL_OW 118
// end ;
72908: LD_VAR 0 3
72912: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72913: LD_INT 0
72915: PPUSH
72916: PPUSH
// result := false ;
72917: LD_ADDR_VAR 0 3
72921: PUSH
72922: LD_INT 0
72924: ST_TO_ADDR
// if not units then
72925: LD_VAR 0 2
72929: NOT
72930: IFFALSE 72934
// exit ;
72932: GO 72979
// for i in units do
72934: LD_ADDR_VAR 0 4
72938: PUSH
72939: LD_VAR 0 2
72943: PUSH
72944: FOR_IN
72945: IFFALSE 72977
// if See ( side , i ) then
72947: LD_VAR 0 1
72951: PPUSH
72952: LD_VAR 0 4
72956: PPUSH
72957: CALL_OW 292
72961: IFFALSE 72975
// begin result := true ;
72963: LD_ADDR_VAR 0 3
72967: PUSH
72968: LD_INT 1
72970: ST_TO_ADDR
// exit ;
72971: POP
72972: POP
72973: GO 72979
// end ;
72975: GO 72944
72977: POP
72978: POP
// end ;
72979: LD_VAR 0 3
72983: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72984: LD_INT 0
72986: PPUSH
72987: PPUSH
72988: PPUSH
72989: PPUSH
// if not unit or not points then
72990: LD_VAR 0 1
72994: NOT
72995: IFTRUE 73004
72997: PUSH
72998: LD_VAR 0 2
73002: NOT
73003: OR
73004: IFFALSE 73008
// exit ;
73006: GO 73098
// dist := 99999 ;
73008: LD_ADDR_VAR 0 5
73012: PUSH
73013: LD_INT 99999
73015: ST_TO_ADDR
// for i in points do
73016: LD_ADDR_VAR 0 4
73020: PUSH
73021: LD_VAR 0 2
73025: PUSH
73026: FOR_IN
73027: IFFALSE 73096
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73029: LD_ADDR_VAR 0 6
73033: PUSH
73034: LD_VAR 0 1
73038: PPUSH
73039: LD_VAR 0 4
73043: PUSH
73044: LD_INT 1
73046: ARRAY
73047: PPUSH
73048: LD_VAR 0 4
73052: PUSH
73053: LD_INT 2
73055: ARRAY
73056: PPUSH
73057: CALL_OW 297
73061: ST_TO_ADDR
// if tmpDist < dist then
73062: LD_VAR 0 6
73066: PUSH
73067: LD_VAR 0 5
73071: LESS
73072: IFFALSE 73094
// begin result := i ;
73074: LD_ADDR_VAR 0 3
73078: PUSH
73079: LD_VAR 0 4
73083: ST_TO_ADDR
// dist := tmpDist ;
73084: LD_ADDR_VAR 0 5
73088: PUSH
73089: LD_VAR 0 6
73093: ST_TO_ADDR
// end ; end ;
73094: GO 73026
73096: POP
73097: POP
// end ;
73098: LD_VAR 0 3
73102: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73103: LD_INT 0
73105: PPUSH
// uc_side := side ;
73106: LD_ADDR_OWVAR 20
73110: PUSH
73111: LD_VAR 0 1
73115: ST_TO_ADDR
// uc_nation := 3 ;
73116: LD_ADDR_OWVAR 21
73120: PUSH
73121: LD_INT 3
73123: ST_TO_ADDR
// vc_chassis := 25 ;
73124: LD_ADDR_OWVAR 37
73128: PUSH
73129: LD_INT 25
73131: ST_TO_ADDR
// vc_engine := engine_siberite ;
73132: LD_ADDR_OWVAR 39
73136: PUSH
73137: LD_INT 3
73139: ST_TO_ADDR
// vc_control := control_computer ;
73140: LD_ADDR_OWVAR 38
73144: PUSH
73145: LD_INT 3
73147: ST_TO_ADDR
// vc_weapon := 59 ;
73148: LD_ADDR_OWVAR 40
73152: PUSH
73153: LD_INT 59
73155: ST_TO_ADDR
// result := CreateVehicle ;
73156: LD_ADDR_VAR 0 5
73160: PUSH
73161: CALL_OW 45
73165: ST_TO_ADDR
// SetDir ( result , d ) ;
73166: LD_VAR 0 5
73170: PPUSH
73171: LD_VAR 0 4
73175: PPUSH
73176: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73180: LD_VAR 0 5
73184: PPUSH
73185: LD_VAR 0 2
73189: PPUSH
73190: LD_VAR 0 3
73194: PPUSH
73195: LD_INT 0
73197: PPUSH
73198: CALL_OW 48
// end ;
73202: LD_VAR 0 5
73206: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73207: LD_INT 0
73209: PPUSH
73210: PPUSH
73211: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73212: LD_ADDR_VAR 0 2
73216: PUSH
73217: LD_INT 0
73219: PUSH
73220: LD_INT 0
73222: PUSH
73223: LD_INT 0
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73235: LD_VAR 0 1
73239: NOT
73240: IFTRUE 73273
73242: PUSH
73243: LD_VAR 0 1
73247: PPUSH
73248: CALL_OW 264
73252: PUSH
73253: LD_INT 12
73255: PUSH
73256: LD_INT 51
73258: PUSH
73259: LD_INT 32
73261: PUSH
73262: LD_INT 89
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: IN
73271: NOT
73272: OR
73273: IFFALSE 73277
// exit ;
73275: GO 73375
// for i := 1 to 3 do
73277: LD_ADDR_VAR 0 3
73281: PUSH
73282: DOUBLE
73283: LD_INT 1
73285: DEC
73286: ST_TO_ADDR
73287: LD_INT 3
73289: PUSH
73290: FOR_TO
73291: IFFALSE 73373
// begin tmp := GetCargo ( cargo , i ) ;
73293: LD_ADDR_VAR 0 4
73297: PUSH
73298: LD_VAR 0 1
73302: PPUSH
73303: LD_VAR 0 3
73307: PPUSH
73308: CALL_OW 289
73312: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73313: LD_ADDR_VAR 0 2
73317: PUSH
73318: LD_VAR 0 2
73322: PPUSH
73323: LD_VAR 0 3
73327: PPUSH
73328: LD_VAR 0 4
73332: PPUSH
73333: CALL_OW 1
73337: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73338: LD_ADDR_VAR 0 2
73342: PUSH
73343: LD_VAR 0 2
73347: PPUSH
73348: LD_INT 4
73350: PPUSH
73351: LD_VAR 0 2
73355: PUSH
73356: LD_INT 4
73358: ARRAY
73359: PUSH
73360: LD_VAR 0 4
73364: PLUS
73365: PPUSH
73366: CALL_OW 1
73370: ST_TO_ADDR
// end ;
73371: GO 73290
73373: POP
73374: POP
// end ;
73375: LD_VAR 0 2
73379: RET
// export function Length ( array ) ; begin
73380: LD_INT 0
73382: PPUSH
// result := array + 0 ;
73383: LD_ADDR_VAR 0 2
73387: PUSH
73388: LD_VAR 0 1
73392: PUSH
73393: LD_INT 0
73395: PLUS
73396: ST_TO_ADDR
// end ;
73397: LD_VAR 0 2
73401: RET
// export function PrepareArray ( array ) ; begin
73402: LD_INT 0
73404: PPUSH
// result := array diff 0 ;
73405: LD_ADDR_VAR 0 2
73409: PUSH
73410: LD_VAR 0 1
73414: PUSH
73415: LD_INT 0
73417: DIFF
73418: ST_TO_ADDR
// if not result [ 1 ] then
73419: LD_VAR 0 2
73423: PUSH
73424: LD_INT 1
73426: ARRAY
73427: NOT
73428: IFFALSE 73448
// result := Delete ( result , 1 ) ;
73430: LD_ADDR_VAR 0 2
73434: PUSH
73435: LD_VAR 0 2
73439: PPUSH
73440: LD_INT 1
73442: PPUSH
73443: CALL_OW 3
73447: ST_TO_ADDR
// end ;
73448: LD_VAR 0 2
73452: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73453: LD_INT 0
73455: PPUSH
73456: PPUSH
73457: PPUSH
73458: PPUSH
// sibRocketRange := 25 ;
73459: LD_ADDR_VAR 0 6
73463: PUSH
73464: LD_INT 25
73466: ST_TO_ADDR
// result := false ;
73467: LD_ADDR_VAR 0 4
73471: PUSH
73472: LD_INT 0
73474: ST_TO_ADDR
// for i := 0 to 5 do
73475: LD_ADDR_VAR 0 5
73479: PUSH
73480: DOUBLE
73481: LD_INT 0
73483: DEC
73484: ST_TO_ADDR
73485: LD_INT 5
73487: PUSH
73488: FOR_TO
73489: IFFALSE 73556
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73491: LD_VAR 0 1
73495: PPUSH
73496: LD_VAR 0 5
73500: PPUSH
73501: LD_VAR 0 6
73505: PPUSH
73506: CALL_OW 272
73510: PPUSH
73511: LD_VAR 0 2
73515: PPUSH
73516: LD_VAR 0 5
73520: PPUSH
73521: LD_VAR 0 6
73525: PPUSH
73526: CALL_OW 273
73530: PPUSH
73531: LD_VAR 0 3
73535: PPUSH
73536: CALL_OW 309
73540: IFFALSE 73554
// begin result := true ;
73542: LD_ADDR_VAR 0 4
73546: PUSH
73547: LD_INT 1
73549: ST_TO_ADDR
// exit ;
73550: POP
73551: POP
73552: GO 73558
// end ;
73554: GO 73488
73556: POP
73557: POP
// end ;
73558: LD_VAR 0 4
73562: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73563: LD_INT 0
73565: PPUSH
73566: PPUSH
73567: PPUSH
// if btype = b_depot then
73568: LD_VAR 0 2
73572: PUSH
73573: LD_INT 0
73575: EQUAL
73576: IFFALSE 73588
// begin result := true ;
73578: LD_ADDR_VAR 0 3
73582: PUSH
73583: LD_INT 1
73585: ST_TO_ADDR
// exit ;
73586: GO 73708
// end ; pom := GetBase ( depot ) ;
73588: LD_ADDR_VAR 0 4
73592: PUSH
73593: LD_VAR 0 1
73597: PPUSH
73598: CALL_OW 274
73602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73603: LD_ADDR_VAR 0 5
73607: PUSH
73608: LD_VAR 0 2
73612: PPUSH
73613: LD_VAR 0 1
73617: PPUSH
73618: CALL_OW 248
73622: PPUSH
73623: CALL_OW 450
73627: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73628: LD_ADDR_VAR 0 3
73632: PUSH
73633: LD_VAR 0 4
73637: PPUSH
73638: LD_INT 1
73640: PPUSH
73641: CALL_OW 275
73645: PUSH
73646: LD_VAR 0 5
73650: PUSH
73651: LD_INT 1
73653: ARRAY
73654: GREATEREQUAL
73655: IFFALSE 73681
73657: PUSH
73658: LD_VAR 0 4
73662: PPUSH
73663: LD_INT 2
73665: PPUSH
73666: CALL_OW 275
73670: PUSH
73671: LD_VAR 0 5
73675: PUSH
73676: LD_INT 2
73678: ARRAY
73679: GREATEREQUAL
73680: AND
73681: IFFALSE 73707
73683: PUSH
73684: LD_VAR 0 4
73688: PPUSH
73689: LD_INT 3
73691: PPUSH
73692: CALL_OW 275
73696: PUSH
73697: LD_VAR 0 5
73701: PUSH
73702: LD_INT 3
73704: ARRAY
73705: GREATEREQUAL
73706: AND
73707: ST_TO_ADDR
// end ;
73708: LD_VAR 0 3
73712: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73713: LD_INT 0
73715: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73716: LD_VAR 0 1
73720: PPUSH
73721: LD_VAR 0 2
73725: PPUSH
73726: LD_INT 0
73728: PPUSH
73729: LD_INT 0
73731: PPUSH
73732: LD_INT 1
73734: PPUSH
73735: LD_INT 0
73737: PPUSH
73738: CALL_OW 587
// end ;
73742: LD_VAR 0 3
73746: RET
// export function CenterOnNow ( unit ) ; begin
73747: LD_INT 0
73749: PPUSH
// result := IsInUnit ( unit ) ;
73750: LD_ADDR_VAR 0 2
73754: PUSH
73755: LD_VAR 0 1
73759: PPUSH
73760: CALL_OW 310
73764: ST_TO_ADDR
// if not result then
73765: LD_VAR 0 2
73769: NOT
73770: IFFALSE 73782
// result := unit ;
73772: LD_ADDR_VAR 0 2
73776: PUSH
73777: LD_VAR 0 1
73781: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73782: LD_VAR 0 1
73786: PPUSH
73787: CALL_OW 87
// end ;
73791: LD_VAR 0 2
73795: RET
// export function ComMoveHex ( unit , hex ) ; begin
73796: LD_INT 0
73798: PPUSH
// if not hex then
73799: LD_VAR 0 2
73803: NOT
73804: IFFALSE 73808
// exit ;
73806: GO 73861
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73808: LD_VAR 0 2
73812: PUSH
73813: LD_INT 1
73815: ARRAY
73816: PPUSH
73817: LD_VAR 0 2
73821: PUSH
73822: LD_INT 2
73824: ARRAY
73825: PPUSH
73826: CALL_OW 428
73830: IFFALSE 73834
// exit ;
73832: GO 73861
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73834: LD_VAR 0 1
73838: PPUSH
73839: LD_VAR 0 2
73843: PUSH
73844: LD_INT 1
73846: ARRAY
73847: PPUSH
73848: LD_VAR 0 2
73852: PUSH
73853: LD_INT 2
73855: ARRAY
73856: PPUSH
73857: CALL_OW 111
// end ;
73861: LD_VAR 0 3
73865: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73866: LD_INT 0
73868: PPUSH
73869: PPUSH
73870: PPUSH
// if not unit or not enemy then
73871: LD_VAR 0 1
73875: NOT
73876: IFTRUE 73885
73878: PUSH
73879: LD_VAR 0 2
73883: NOT
73884: OR
73885: IFFALSE 73889
// exit ;
73887: GO 74015
// x := GetX ( enemy ) ;
73889: LD_ADDR_VAR 0 4
73893: PUSH
73894: LD_VAR 0 2
73898: PPUSH
73899: CALL_OW 250
73903: ST_TO_ADDR
// y := GetY ( enemy ) ;
73904: LD_ADDR_VAR 0 5
73908: PUSH
73909: LD_VAR 0 2
73913: PPUSH
73914: CALL_OW 251
73918: ST_TO_ADDR
// if ValidHex ( x , y ) then
73919: LD_VAR 0 4
73923: PPUSH
73924: LD_VAR 0 5
73928: PPUSH
73929: CALL_OW 488
73933: IFFALSE 74015
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73935: LD_VAR 0 2
73939: PPUSH
73940: CALL_OW 247
73944: PUSH
73945: LD_INT 3
73947: PUSH
73948: LD_INT 2
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: IN
73955: IFTRUE 73978
73957: PUSH
73958: LD_VAR 0 1
73962: PPUSH
73963: CALL_OW 255
73967: PPUSH
73968: LD_VAR 0 2
73972: PPUSH
73973: CALL_OW 292
73977: OR
73978: IFFALSE 73996
// ComAttackUnit ( unit , enemy ) else
73980: LD_VAR 0 1
73984: PPUSH
73985: LD_VAR 0 2
73989: PPUSH
73990: CALL_OW 115
73994: GO 74015
// ComAgressiveMove ( unit , x , y ) ;
73996: LD_VAR 0 1
74000: PPUSH
74001: LD_VAR 0 4
74005: PPUSH
74006: LD_VAR 0 5
74010: PPUSH
74011: CALL_OW 114
// end ;
74015: LD_VAR 0 3
74019: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74020: LD_INT 0
74022: PPUSH
74023: PPUSH
74024: PPUSH
// list := AreaToList ( area , 0 ) ;
74025: LD_ADDR_VAR 0 5
74029: PUSH
74030: LD_VAR 0 1
74034: PPUSH
74035: LD_INT 0
74037: PPUSH
74038: CALL_OW 517
74042: ST_TO_ADDR
// if not list then
74043: LD_VAR 0 5
74047: NOT
74048: IFFALSE 74052
// exit ;
74050: GO 74182
// if all then
74052: LD_VAR 0 2
74056: IFFALSE 74144
// begin for i := 1 to list [ 1 ] do
74058: LD_ADDR_VAR 0 4
74062: PUSH
74063: DOUBLE
74064: LD_INT 1
74066: DEC
74067: ST_TO_ADDR
74068: LD_VAR 0 5
74072: PUSH
74073: LD_INT 1
74075: ARRAY
74076: PUSH
74077: FOR_TO
74078: IFFALSE 74140
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74080: LD_ADDR_VAR 0 3
74084: PUSH
74085: LD_VAR 0 3
74089: PPUSH
74090: LD_VAR 0 3
74094: PUSH
74095: LD_INT 1
74097: PLUS
74098: PPUSH
74099: LD_VAR 0 5
74103: PUSH
74104: LD_INT 1
74106: ARRAY
74107: PUSH
74108: LD_VAR 0 4
74112: ARRAY
74113: PUSH
74114: LD_VAR 0 5
74118: PUSH
74119: LD_INT 2
74121: ARRAY
74122: PUSH
74123: LD_VAR 0 4
74127: ARRAY
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PPUSH
74133: CALL_OW 1
74137: ST_TO_ADDR
74138: GO 74077
74140: POP
74141: POP
// exit ;
74142: GO 74182
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74144: LD_ADDR_VAR 0 3
74148: PUSH
74149: LD_VAR 0 5
74153: PUSH
74154: LD_INT 1
74156: ARRAY
74157: PUSH
74158: LD_INT 1
74160: ARRAY
74161: PUSH
74162: LD_VAR 0 5
74166: PUSH
74167: LD_INT 2
74169: ARRAY
74170: PUSH
74171: LD_INT 1
74173: ARRAY
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: EMPTY
74180: LIST
74181: ST_TO_ADDR
// end ;
74182: LD_VAR 0 3
74186: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74187: LD_INT 0
74189: PPUSH
74190: PPUSH
// list := AreaToList ( area , 0 ) ;
74191: LD_ADDR_VAR 0 4
74195: PUSH
74196: LD_VAR 0 1
74200: PPUSH
74201: LD_INT 0
74203: PPUSH
74204: CALL_OW 517
74208: ST_TO_ADDR
// if not list then
74209: LD_VAR 0 4
74213: NOT
74214: IFFALSE 74218
// exit ;
74216: GO 74259
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74218: LD_ADDR_VAR 0 3
74222: PUSH
74223: LD_VAR 0 4
74227: PUSH
74228: LD_INT 1
74230: ARRAY
74231: PUSH
74232: LD_INT 1
74234: ARRAY
74235: PUSH
74236: LD_VAR 0 4
74240: PUSH
74241: LD_INT 2
74243: ARRAY
74244: PUSH
74245: LD_INT 1
74247: ARRAY
74248: PUSH
74249: LD_VAR 0 2
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: LIST
74258: ST_TO_ADDR
// end ;
74259: LD_VAR 0 3
74263: RET
// export function First ( array ) ; begin
74264: LD_INT 0
74266: PPUSH
// if not array then
74267: LD_VAR 0 1
74271: NOT
74272: IFFALSE 74276
// exit ;
74274: GO 74290
// result := array [ 1 ] ;
74276: LD_ADDR_VAR 0 2
74280: PUSH
74281: LD_VAR 0 1
74285: PUSH
74286: LD_INT 1
74288: ARRAY
74289: ST_TO_ADDR
// end ;
74290: LD_VAR 0 2
74294: RET
// export function Last ( array ) ; begin
74295: LD_INT 0
74297: PPUSH
// if not array then
74298: LD_VAR 0 1
74302: NOT
74303: IFFALSE 74307
// exit ;
74305: GO 74323
// result := array [ array ] ;
74307: LD_ADDR_VAR 0 2
74311: PUSH
74312: LD_VAR 0 1
74316: PUSH
74317: LD_VAR 0 1
74321: ARRAY
74322: ST_TO_ADDR
// end ;
74323: LD_VAR 0 2
74327: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74328: LD_INT 0
74330: PPUSH
74331: PPUSH
// result := [ ] ;
74332: LD_ADDR_VAR 0 5
74336: PUSH
74337: EMPTY
74338: ST_TO_ADDR
// if not array then
74339: LD_VAR 0 1
74343: NOT
74344: IFFALSE 74348
// exit ;
74346: GO 74460
// for i := 1 to array do
74348: LD_ADDR_VAR 0 6
74352: PUSH
74353: DOUBLE
74354: LD_INT 1
74356: DEC
74357: ST_TO_ADDR
74358: LD_VAR 0 1
74362: PUSH
74363: FOR_TO
74364: IFFALSE 74458
// if array [ i ] [ index ] = value then
74366: LD_VAR 0 1
74370: PUSH
74371: LD_VAR 0 6
74375: ARRAY
74376: PUSH
74377: LD_VAR 0 2
74381: ARRAY
74382: PUSH
74383: LD_VAR 0 3
74387: EQUAL
74388: IFFALSE 74456
// begin if indexColumn then
74390: LD_VAR 0 4
74394: IFFALSE 74430
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74396: LD_ADDR_VAR 0 5
74400: PUSH
74401: LD_VAR 0 5
74405: PPUSH
74406: LD_VAR 0 1
74410: PUSH
74411: LD_VAR 0 6
74415: ARRAY
74416: PUSH
74417: LD_VAR 0 4
74421: ARRAY
74422: PPUSH
74423: CALL 69468 0 2
74427: ST_TO_ADDR
74428: GO 74456
// result := Join ( result , array [ i ] ) ;
74430: LD_ADDR_VAR 0 5
74434: PUSH
74435: LD_VAR 0 5
74439: PPUSH
74440: LD_VAR 0 1
74444: PUSH
74445: LD_VAR 0 6
74449: ARRAY
74450: PPUSH
74451: CALL 69468 0 2
74455: ST_TO_ADDR
// end ;
74456: GO 74363
74458: POP
74459: POP
// end ;
74460: LD_VAR 0 5
74464: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74465: LD_INT 0
74467: PPUSH
// if not vehicles or not parkingPoint then
74468: LD_VAR 0 1
74472: NOT
74473: IFTRUE 74482
74475: PUSH
74476: LD_VAR 0 2
74480: NOT
74481: OR
74482: IFFALSE 74486
// exit ;
74484: GO 74584
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74486: LD_ADDR_VAR 0 1
74490: PUSH
74491: LD_VAR 0 1
74495: PPUSH
74496: LD_INT 50
74498: PUSH
74499: EMPTY
74500: LIST
74501: PUSH
74502: LD_INT 3
74504: PUSH
74505: LD_INT 92
74507: PUSH
74508: LD_VAR 0 2
74512: PUSH
74513: LD_INT 1
74515: ARRAY
74516: PUSH
74517: LD_VAR 0 2
74521: PUSH
74522: LD_INT 2
74524: ARRAY
74525: PUSH
74526: LD_INT 8
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PPUSH
74543: CALL_OW 72
74547: ST_TO_ADDR
// if not vehicles then
74548: LD_VAR 0 1
74552: NOT
74553: IFFALSE 74557
// exit ;
74555: GO 74584
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74557: LD_VAR 0 1
74561: PPUSH
74562: LD_VAR 0 2
74566: PUSH
74567: LD_INT 1
74569: ARRAY
74570: PPUSH
74571: LD_VAR 0 2
74575: PUSH
74576: LD_INT 2
74578: ARRAY
74579: PPUSH
74580: CALL_OW 111
// end ;
74584: LD_VAR 0 3
74588: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74589: LD_INT 0
74591: PPUSH
74592: PPUSH
74593: PPUSH
// if not side or not area then
74594: LD_VAR 0 1
74598: NOT
74599: IFTRUE 74608
74601: PUSH
74602: LD_VAR 0 2
74606: NOT
74607: OR
74608: IFFALSE 74612
// exit ;
74610: GO 74731
// tmp := AreaToList ( area , 0 ) ;
74612: LD_ADDR_VAR 0 5
74616: PUSH
74617: LD_VAR 0 2
74621: PPUSH
74622: LD_INT 0
74624: PPUSH
74625: CALL_OW 517
74629: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74630: LD_ADDR_VAR 0 4
74634: PUSH
74635: DOUBLE
74636: LD_INT 1
74638: DEC
74639: ST_TO_ADDR
74640: LD_VAR 0 5
74644: PUSH
74645: LD_INT 1
74647: ARRAY
74648: PUSH
74649: FOR_TO
74650: IFFALSE 74729
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74652: LD_VAR 0 5
74656: PUSH
74657: LD_INT 1
74659: ARRAY
74660: PUSH
74661: LD_VAR 0 4
74665: ARRAY
74666: PPUSH
74667: LD_VAR 0 5
74671: PUSH
74672: LD_INT 2
74674: ARRAY
74675: PUSH
74676: LD_VAR 0 4
74680: ARRAY
74681: PPUSH
74682: CALL_OW 351
74686: IFFALSE 74727
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74688: LD_VAR 0 5
74692: PUSH
74693: LD_INT 1
74695: ARRAY
74696: PUSH
74697: LD_VAR 0 4
74701: ARRAY
74702: PPUSH
74703: LD_VAR 0 5
74707: PUSH
74708: LD_INT 2
74710: ARRAY
74711: PUSH
74712: LD_VAR 0 4
74716: ARRAY
74717: PPUSH
74718: LD_VAR 0 1
74722: PPUSH
74723: CALL_OW 244
// end ;
74727: GO 74649
74729: POP
74730: POP
// end ;
74731: LD_VAR 0 3
74735: RET
// export function UniqueArray ( array ) ; var i ; begin
74736: LD_INT 0
74738: PPUSH
74739: PPUSH
// result := [ ] ;
74740: LD_ADDR_VAR 0 2
74744: PUSH
74745: EMPTY
74746: ST_TO_ADDR
// if not array then
74747: LD_VAR 0 1
74751: NOT
74752: IFFALSE 74756
// exit ;
74754: GO 74817
// for i := 1 to array do
74756: LD_ADDR_VAR 0 3
74760: PUSH
74761: DOUBLE
74762: LD_INT 1
74764: DEC
74765: ST_TO_ADDR
74766: LD_VAR 0 1
74770: PUSH
74771: FOR_TO
74772: IFFALSE 74815
// if not array [ i ] in result then
74774: LD_VAR 0 1
74778: PUSH
74779: LD_VAR 0 3
74783: ARRAY
74784: PUSH
74785: LD_VAR 0 2
74789: IN
74790: NOT
74791: IFFALSE 74813
// result := Join ( result , i ) ;
74793: LD_ADDR_VAR 0 2
74797: PUSH
74798: LD_VAR 0 2
74802: PPUSH
74803: LD_VAR 0 3
74807: PPUSH
74808: CALL 69468 0 2
74812: ST_TO_ADDR
74813: GO 74771
74815: POP
74816: POP
// end ; end_of_file
74817: LD_VAR 0 2
74821: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74822: LD_VAR 0 1
74826: PUSH
74827: LD_INT 200
74829: DOUBLE
74830: GREATEREQUAL
74831: IFFALSE 74839
74833: LD_INT 299
74835: DOUBLE
74836: LESSEQUAL
74837: IFTRUE 74841
74839: GO 74873
74841: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74842: LD_VAR 0 1
74846: PPUSH
74847: LD_VAR 0 2
74851: PPUSH
74852: LD_VAR 0 3
74856: PPUSH
74857: LD_VAR 0 4
74861: PPUSH
74862: LD_VAR 0 5
74866: PPUSH
74867: CALL 25544 0 5
74871: GO 74950
74873: LD_INT 300
74875: DOUBLE
74876: GREATEREQUAL
74877: IFFALSE 74885
74879: LD_INT 399
74881: DOUBLE
74882: LESSEQUAL
74883: IFTRUE 74887
74885: GO 74949
74887: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74888: LD_VAR 0 1
74892: PPUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: LD_VAR 0 3
74902: PPUSH
74903: LD_VAR 0 4
74907: PPUSH
74908: LD_VAR 0 5
74912: PPUSH
74913: LD_VAR 0 6
74917: PPUSH
74918: LD_VAR 0 7
74922: PPUSH
74923: LD_VAR 0 8
74927: PPUSH
74928: LD_VAR 0 9
74932: PPUSH
74933: LD_VAR 0 10
74937: PPUSH
74938: LD_VAR 0 11
74942: PPUSH
74943: CALL 21347 0 11
74947: GO 74950
74949: POP
// end ;
74950: PPOPN 11
74952: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74953: LD_VAR 0 1
74957: PPUSH
74958: LD_VAR 0 2
74962: PPUSH
74963: LD_VAR 0 3
74967: PPUSH
74968: LD_VAR 0 4
74972: PPUSH
74973: LD_VAR 0 5
74977: PPUSH
74978: CALL 24844 0 5
// end ; end_of_file
74982: PPOPN 5
74984: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74985: LD_VAR 0 1
74989: PPUSH
74990: LD_VAR 0 2
74994: PPUSH
74995: LD_VAR 0 3
74999: PPUSH
75000: LD_VAR 0 4
75004: PPUSH
75005: LD_VAR 0 5
75009: PPUSH
75010: LD_VAR 0 6
75014: PPUSH
75015: CALL 8887 0 6
// end ;
75019: PPOPN 6
75021: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75022: LD_INT 0
75024: PPUSH
// begin if not units then
75025: LD_VAR 0 1
75029: NOT
75030: IFFALSE 75034
// exit ;
75032: GO 75068
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: LD_VAR 0 2
75043: PPUSH
75044: LD_VAR 0 3
75048: PPUSH
75049: LD_VAR 0 4
75053: PPUSH
75054: LD_VAR 0 5
75058: PPUSH
75059: LD_VAR 0 6
75063: PPUSH
75064: CALL 31241 0 6
// end ;
75068: PPOPN 7
75070: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75071: CALL 8767 0 0
// end ;
75075: PPOPN 1
75077: END
