// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3550 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 4017 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7981 0 5
// PrepareComm ;
 110: CALL 8464 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3547
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 7053 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: IFFALSE 772
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 7053 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 7053 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: IFFALSE 849
 839: PUSH
 840: LD_EXP 23
 844: PUSH
 845: LD_INT 0
 847: GREATER
 848: AND
 849: IFFALSE 857
 851: PUSH
 852: LD_EXP 27
 856: AND
 857: IFFALSE 877
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 859: LD_ADDR_EXP 23
 863: PUSH
 864: LD_EXP 23
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL 7053 0 2
 876: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 877: LD_EXP 39
 881: IFFALSE 893
 883: PUSH
 884: LD_EXP 24
 888: PUSH
 889: LD_INT 0
 891: GREATER
 892: AND
 893: IFFALSE 901
 895: PUSH
 896: LD_EXP 27
 900: AND
 901: IFFALSE 921
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 903: LD_ADDR_EXP 24
 907: PUSH
 908: LD_EXP 24
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL 7053 0 2
 920: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 921: LD_EXP 40
 925: IFFALSE 937
 927: PUSH
 928: LD_EXP 25
 932: PUSH
 933: LD_INT 0
 935: GREATER
 936: AND
 937: IFFALSE 945
 939: PUSH
 940: LD_EXP 27
 944: AND
 945: IFFALSE 965
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 947: LD_ADDR_EXP 25
 951: PUSH
 952: LD_EXP 25
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL 7053 0 2
 964: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 965: LD_EXP 43
 969: IFFALSE 981
 971: PUSH
 972: LD_EXP 31
 976: PUSH
 977: LD_INT 0
 979: GREATER
 980: AND
 981: IFFALSE 1018
// begin game_strings := [ #rtime , russian_timer ] ;
 983: LD_ADDR_EXP 6
 987: PUSH
 988: LD_STRING #rtime
 990: PUSH
 991: LD_EXP 31
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
1000: LD_ADDR_EXP 31
1004: PUSH
1005: LD_EXP 31
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL 7053 0 2
1017: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1018: LD_EXP 43
1022: IFFALSE 1034
1024: PUSH
1025: LD_EXP 31
1029: PUSH
1030: LD_INT 0
1032: EQUAL
1033: AND
1034: IFTRUE 1042
1036: PUSH
1037: LD_EXP 35
1041: OR
1042: IFFALSE 1051
// game_strings := [ ] ;
1044: LD_ADDR_EXP 6
1048: PUSH
1049: EMPTY
1050: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1051: LD_EXP 37
1055: PUSH
1056: LD_INT 0
1058: EQUAL
1059: IFFALSE 1075
1061: PUSH
1062: LD_OWVAR 1
1066: PUSH
1067: LD_INT 33600
1069: MOD
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: AND
1075: IFFALSE 1135
// begin p := Rand ( 1 , 5 ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_INT 5
1087: PPUSH
1088: CALL_OW 12
1092: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1093: LD_VAR 0 2
1097: PUSH
1098: LD_INT 4
1100: PUSH
1101: LD_INT 3
1103: PUSH
1104: LD_INT 3
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 2
1116: ARRAY
1117: LESSEQUAL
1118: IFFALSE 1135
// begin RaiseSailEvent ( 92 ) ;
1120: LD_INT 92
1122: PPUSH
1123: CALL_OW 427
// dezert := true ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1135: LD_OWVAR 1
1139: PUSH
1140: LD_INT 8400
1142: MOD
1143: PUSH
1144: LD_INT 0
1146: EQUAL
1147: IFFALSE 1156
// RaiseSailEvent ( 101 ) ;
1149: LD_INT 101
1151: PPUSH
1152: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1156: LD_INT 8
1158: PPUSH
1159: CALL 7107 0 1
1163: IFFALSE 1175
1165: PUSH
1166: LD_EXP 13
1170: PUSH
1171: LD_INT 0
1173: EQUAL
1174: AND
1175: IFFALSE 1192
// begin u_mine := true ;
1177: LD_ADDR_EXP 13
1181: PUSH
1182: LD_INT 1
1184: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1185: LD_STRING DS-T1m
1187: PPUSH
1188: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1192: LD_INT 8
1194: PPUSH
1195: CALL 7169 0 1
1199: IFFALSE 1211
1201: PUSH
1202: LD_EXP 14
1206: PUSH
1207: LD_INT 0
1209: EQUAL
1210: AND
1211: IFFALSE 1228
// begin u_fac := true ;
1213: LD_ADDR_EXP 14
1217: PUSH
1218: LD_INT 1
1220: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1221: LD_STRING DS-T1f
1223: PPUSH
1224: CALL_OW 337
// end ; if hero_died then
1228: LD_EXP 33
1232: IFFALSE 1241
// YouLost ( DS-h1 ) ;
1234: LD_STRING DS-h1
1236: PPUSH
1237: CALL_OW 104
// if fort_destroyed then
1241: LD_EXP 32
1245: IFFALSE 1254
// YouLost ( DS-h2 ) ;
1247: LD_STRING DS-h2
1249: PPUSH
1250: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1254: LD_EXP 7
1258: PPUSH
1259: LD_EXP 49
1263: PPUSH
1264: CALL_OW 296
1268: PUSH
1269: LD_INT 6
1271: GREATER
1272: IFFALSE 1284
1274: PUSH
1275: LD_EXP 26
1279: PUSH
1280: LD_INT 0
1282: EQUAL
1283: AND
1284: IFFALSE 1307
// begin if not HasTask ( leopold ) then
1286: LD_EXP 7
1290: PPUSH
1291: CALL_OW 314
1295: NOT
1296: IFFALSE 1305
// RaiseSailEvent ( 1 ) ;
1298: LD_INT 1
1300: PPUSH
1301: CALL_OW 427
// end else
1305: GO 1324
// if meeting_start = false then
1307: LD_EXP 26
1311: PUSH
1312: LD_INT 0
1314: EQUAL
1315: IFFALSE 1324
// begin RaiseSailEvent ( 2 ) ;
1317: LD_INT 2
1319: PPUSH
1320: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1324: LD_EXP 3
1328: PUSH
1329: LD_INT 105000
1331: PUSH
1332: LD_INT 131250
1334: PUSH
1335: LD_INT 151200
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: PUSH
1343: LD_EXP 2
1347: ARRAY
1348: GREATEREQUAL
1349: IFFALSE 1361
1351: PUSH
1352: LD_EXP 29
1356: PUSH
1357: LD_INT 0
1359: EQUAL
1360: AND
1361: IFFALSE 1378
// begin meeting_end := true ;
1363: LD_ADDR_EXP 29
1367: PUSH
1368: LD_INT 1
1370: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1371: LD_INT 200
1373: PPUSH
1374: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1378: LD_EXP 30
1382: PUSH
1383: LD_INT 0
1385: EQUAL
1386: IFFALSE 1398
1388: PUSH
1389: LD_EXP 27
1393: PUSH
1394: LD_INT 0
1396: EQUAL
1397: AND
1398: IFFALSE 1422
// begin meeting_arive := true ;
1400: LD_ADDR_EXP 27
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// game_strings := [ ] ;
1408: LD_ADDR_EXP 6
1412: PUSH
1413: EMPTY
1414: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1415: LD_INT 10
1417: PPUSH
1418: CALL_OW 427
// end ; if meeting_arive then
1422: LD_EXP 27
1426: IFFALSE 2259
// begin if arabian_attack = false and tick mod 4200 = 0 then
1428: LD_EXP 38
1432: PUSH
1433: LD_INT 0
1435: EQUAL
1436: IFFALSE 1452
1438: PUSH
1439: LD_OWVAR 1
1443: PUSH
1444: LD_INT 4200
1446: MOD
1447: PUSH
1448: LD_INT 0
1450: EQUAL
1451: AND
1452: IFFALSE 1505
// begin p := Rand ( 1 , 100 ) ;
1454: LD_ADDR_VAR 0 2
1458: PUSH
1459: LD_INT 1
1461: PPUSH
1462: LD_INT 100
1464: PPUSH
1465: CALL_OW 12
1469: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 85
1477: PUSH
1478: LD_INT 90
1480: PUSH
1481: LD_INT 95
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: PUSH
1489: LD_EXP 2
1493: ARRAY
1494: LESSEQUAL
1495: IFFALSE 1505
// arabian_attack := true ;
1497: LD_ADDR_EXP 38
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1505: LD_EXP 43
1509: PUSH
1510: LD_INT 0
1512: EQUAL
1513: IFFALSE 1525
1515: PUSH
1516: LD_EXP 39
1520: PUSH
1521: LD_INT 0
1523: EQUAL
1524: AND
1525: IFFALSE 1537
1527: PUSH
1528: LD_OWVAR 1
1532: PUSH
1533: LD_INT 52500
1535: GREATER
1536: AND
1537: IFFALSE 1608
// begin russian_trade = true ;
1539: LD_ADDR_EXP 43
1543: PUSH
1544: LD_INT 1
1546: ST_TO_ADDR
// DialogueOn ;
1547: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1551: LD_EXP 47
1555: PPUSH
1556: LD_STRING DS-DR-RTr
1558: PPUSH
1559: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1563: LD_EXP 49
1567: PPUSH
1568: LD_STRING DS-DC-RTr
1570: PPUSH
1571: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1575: LD_EXP 47
1579: PPUSH
1580: LD_STRING DS-DR-RTr2
1582: PPUSH
1583: CALL_OW 94
// DialogueOff ;
1587: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1591: LD_STRING DS-T2
1593: PPUSH
1594: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1608: LD_EXP 43
1612: IFFALSE 1624
1614: PUSH
1615: LD_EXP 35
1619: PUSH
1620: LD_INT 0
1622: EQUAL
1623: AND
1624: IFFALSE 1636
1626: PUSH
1627: LD_EXP 31
1631: PUSH
1632: LD_INT 0
1634: GREATER
1635: AND
1636: IFFALSE 1885
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1638: LD_INT 10
1640: PPUSH
1641: LD_INT 58
1643: PUSH
1644: EMPTY
1645: LIST
1646: PUSH
1647: LD_INT 2
1649: PUSH
1650: LD_INT 34
1652: PUSH
1653: LD_INT 32
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 34
1662: PUSH
1663: LD_INT 12
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 3
1677: PUSH
1678: LD_INT 33
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PPUSH
1697: CALL_OW 70
1701: PUSH
1702: LD_INT 0
1704: GREATER
1705: IFFALSE 1885
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1707: LD_INT 10
1709: PPUSH
1710: LD_INT 58
1712: PUSH
1713: EMPTY
1714: LIST
1715: PUSH
1716: LD_INT 2
1718: PUSH
1719: LD_INT 34
1721: PUSH
1722: LD_INT 32
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 34
1731: PUSH
1732: LD_INT 12
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 3
1746: PUSH
1747: LD_INT 33
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PPUSH
1766: CALL_OW 70
1770: PUSH
1771: LD_INT 1
1773: ARRAY
1774: PPUSH
1775: LD_INT 3
1777: PPUSH
1778: CALL_OW 289
1782: PUSH
1783: LD_INT 100
1785: EQUAL
1786: IFFALSE 1885
// begin cargo_ok := true ;
1788: LD_ADDR_EXP 35
1792: PUSH
1793: LD_INT 1
1795: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1796: LD_INT 10
1798: PPUSH
1799: LD_INT 58
1801: PUSH
1802: EMPTY
1803: LIST
1804: PUSH
1805: LD_INT 2
1807: PUSH
1808: LD_INT 34
1810: PUSH
1811: LD_INT 32
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 34
1820: PUSH
1821: LD_INT 12
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: LD_INT 33
1838: PUSH
1839: LD_INT 2
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PPUSH
1855: CALL_OW 70
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PPUSH
1864: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1868: LD_STRING DS-T2-out
1870: PPUSH
1871: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1875: LD_INT 10
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1885: LD_EXP 39
1889: PUSH
1890: LD_INT 0
1892: EQUAL
1893: IFFALSE 1901
1895: PUSH
1896: LD_EXP 43
1900: AND
1901: IFFALSE 1913
1903: PUSH
1904: LD_EXP 35
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: AND
1913: IFFALSE 1925
1915: PUSH
1916: LD_EXP 31
1920: PUSH
1921: LD_INT 0
1923: EQUAL
1924: AND
1925: IFFALSE 1952
// begin russian_attack := true ;
1927: LD_ADDR_EXP 39
1931: PUSH
1932: LD_INT 1
1934: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1935: LD_STRING DS-T2-out
1937: PPUSH
1938: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1942: LD_INT 10
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1952: LD_EXP 43
1956: PUSH
1957: LD_INT 0
1959: EQUAL
1960: IFFALSE 1972
1962: PUSH
1963: LD_EXP 39
1967: PUSH
1968: LD_INT 0
1970: EQUAL
1971: AND
1972: IFFALSE 1984
1974: PUSH
1975: LD_EXP 40
1979: PUSH
1980: LD_INT 0
1982: EQUAL
1983: AND
1984: IFFALSE 2000
1986: PUSH
1987: LD_OWVAR 1
1991: PUSH
1992: LD_INT 21000
1994: MOD
1995: PUSH
1996: LD_INT 0
1998: EQUAL
1999: AND
2000: IFFALSE 2053
// begin p := Rand ( 1 , 100 ) ;
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: LD_INT 1
2009: PPUSH
2010: LD_INT 100
2012: PPUSH
2013: CALL_OW 12
2017: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
2018: LD_VAR 0 2
2022: PUSH
2023: LD_INT 35
2025: PUSH
2026: LD_INT 45
2028: PUSH
2029: LD_INT 55
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: PUSH
2037: LD_EXP 2
2041: ARRAY
2042: LESSEQUAL
2043: IFFALSE 2053
// russian_attack := true ;
2045: LD_ADDR_EXP 39
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2053: LD_EXP 41
2057: PUSH
2058: LD_INT 0
2060: EQUAL
2061: IFFALSE 2073
2063: PUSH
2064: LD_EXP 40
2068: PUSH
2069: LD_INT 0
2071: EQUAL
2072: AND
2073: IFFALSE 2085
2075: PUSH
2076: LD_EXP 39
2080: PUSH
2081: LD_INT 0
2083: EQUAL
2084: AND
2085: IFFALSE 2101
2087: PUSH
2088: LD_OWVAR 1
2092: PUSH
2093: LD_INT 31500
2095: MOD
2096: PUSH
2097: LD_INT 0
2099: EQUAL
2100: AND
2101: IFFALSE 2154
// begin p := Rand ( 1 , 100 ) ;
2103: LD_ADDR_VAR 0 2
2107: PUSH
2108: LD_INT 1
2110: PPUSH
2111: LD_INT 100
2113: PPUSH
2114: CALL_OW 12
2118: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2119: LD_VAR 0 2
2123: PUSH
2124: LD_INT 33
2126: PUSH
2127: LD_INT 44
2129: PUSH
2130: LD_INT 55
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_EXP 2
2142: ARRAY
2143: LESSEQUAL
2144: IFFALSE 2154
// american_attack := true ;
2146: LD_ADDR_EXP 40
2150: PUSH
2151: LD_INT 1
2153: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2154: LD_EXP 40
2158: PUSH
2159: LD_INT 0
2161: EQUAL
2162: IFFALSE 2174
2164: PUSH
2165: LD_EXP 39
2169: PUSH
2170: LD_INT 0
2172: EQUAL
2173: AND
2174: IFFALSE 2186
2176: PUSH
2177: LD_EXP 41
2181: PUSH
2182: LD_INT 0
2184: EQUAL
2185: AND
2186: IFFALSE 2202
2188: PUSH
2189: LD_OWVAR 1
2193: PUSH
2194: LD_INT 21200
2196: MOD
2197: PUSH
2198: LD_INT 0
2200: EQUAL
2201: AND
2202: IFFALSE 2259
// begin p := Rand ( 1 , 100 ) ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 100
2214: PPUSH
2215: CALL_OW 12
2219: ST_TO_ADDR
// if p <= american_hchan then
2220: LD_VAR 0 2
2224: PUSH
2225: LD_EXP 36
2229: LESSEQUAL
2230: IFFALSE 2259
// begin american_help := true ;
2232: LD_ADDR_EXP 41
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2240: LD_EXP 46
2244: PPUSH
2245: LD_STRING DS-amhelp
2247: PPUSH
2248: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2252: LD_INT 91
2254: PPUSH
2255: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2259: LD_EXP 40
2263: IFFALSE 2275
2265: PUSH
2266: LD_EXP 25
2270: PUSH
2271: LD_INT 0
2273: EQUAL
2274: AND
2275: IFFALSE 2297
2277: PUSH
2278: LD_INT 22
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PPUSH
2288: CALL_OW 69
2292: PUSH
2293: LD_INT 0
2295: EQUAL
2296: AND
2297: IFFALSE 2399
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2299: LD_ADDR_EXP 25
2303: PUSH
2304: LD_INT 35700
2306: PPUSH
2307: LD_INT 42000
2309: PPUSH
2310: CALL_OW 12
2314: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2315: LD_EXP 12
2319: PPUSH
2320: LD_STRING DS-DZ-U
2322: PPUSH
2323: CALL_OW 94
// Wait ( 0 0$33 ) ;
2327: LD_INT 1155
2329: PPUSH
2330: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 1
2341: PPUSH
2342: LD_INT 2
2344: PPUSH
2345: CALL_OW 12
2349: ST_TO_ADDR
// case x of 1 :
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 1
2357: DOUBLE
2358: EQUAL
2359: IFTRUE 2363
2361: GO 2373
2363: POP
// RaiseSailEvent ( 41 ) ; 2 :
2364: LD_INT 41
2366: PPUSH
2367: CALL_OW 427
2371: GO 2392
2373: LD_INT 2
2375: DOUBLE
2376: EQUAL
2377: IFTRUE 2381
2379: GO 2391
2381: POP
// RaiseSailEvent ( 42 ) ; end ;
2382: LD_INT 42
2384: PPUSH
2385: CALL_OW 427
2389: GO 2392
2391: POP
// RaiseSailEvent ( 42 ) ;
2392: LD_INT 42
2394: PPUSH
2395: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2399: LD_EXP 39
2403: IFFALSE 2415
2405: PUSH
2406: LD_EXP 24
2410: PUSH
2411: LD_INT 0
2413: EQUAL
2414: AND
2415: IFFALSE 2437
2417: PUSH
2418: LD_INT 22
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: PUSH
2433: LD_INT 0
2435: EQUAL
2436: AND
2437: IFFALSE 2493
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2439: LD_ADDR_EXP 24
2443: PUSH
2444: LD_INT 35700
2446: PPUSH
2447: LD_INT 42000
2449: PPUSH
2450: CALL_OW 12
2454: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2455: LD_EXP 12
2459: PPUSH
2460: LD_STRING DS-DZ-R
2462: PPUSH
2463: CALL_OW 94
// Wait ( 0 0$45 ) ;
2467: LD_INT 1575
2469: PPUSH
2470: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2474: LD_EXP 47
2478: PPUSH
2479: LD_STRING DS-DR-R1
2481: PPUSH
2482: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2486: LD_INT 51
2488: PPUSH
2489: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2493: LD_EXP 34
2497: PUSH
2498: LD_INT 52500
2500: GREATEREQUAL
2501: IFFALSE 2513
2503: PUSH
2504: LD_EXP 20
2508: PUSH
2509: LD_INT 10
2511: LESS
2512: AND
2513: IFFALSE 2537
// begin mission_time := 0 0$00 ;
2515: LD_ADDR_EXP 34
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2523: LD_ADDR_EXP 20
2527: PUSH
2528: LD_EXP 20
2532: PUSH
2533: LD_INT 1
2535: PLUS
2536: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2537: LD_EXP 23
2541: PUSH
2542: LD_INT 0
2544: EQUAL
2545: IFFALSE 2588
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 2
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: LD_INT 34
2563: PUSH
2564: LD_INT 31
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 69
2583: PUSH
2584: LD_INT 0
2586: EQUAL
2587: AND
2588: IFFALSE 2786
// begin arabian_timeing := 7 7$30 ;
2590: LD_ADDR_EXP 23
2594: PUSH
2595: LD_INT 15750
2597: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 3
2608: PPUSH
2609: CALL_OW 12
2613: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2614: LD_EXP 12
2618: PPUSH
2619: LD_STRING DS-DZ-H
2621: PPUSH
2622: CALL_OW 94
// case x of 1 :
2626: LD_VAR 0 3
2630: PUSH
2631: LD_INT 1
2633: DOUBLE
2634: EQUAL
2635: IFTRUE 2639
2637: GO 2649
2639: POP
// RaiseSailEvent ( 31 ) ; 2 :
2640: LD_INT 31
2642: PPUSH
2643: CALL_OW 427
2647: GO 2686
2649: LD_INT 2
2651: DOUBLE
2652: EQUAL
2653: IFTRUE 2657
2655: GO 2667
2657: POP
// RaiseSailEvent ( 32 ) ; 3 :
2658: LD_INT 32
2660: PPUSH
2661: CALL_OW 427
2665: GO 2686
2667: LD_INT 3
2669: DOUBLE
2670: EQUAL
2671: IFTRUE 2675
2673: GO 2685
2675: POP
// RaiseSailEvent ( 33 ) ; end ;
2676: LD_INT 33
2678: PPUSH
2679: CALL_OW 427
2683: GO 2686
2685: POP
// RaiseSailEvent ( 33 ) ;
2686: LD_INT 33
2688: PPUSH
2689: CALL_OW 427
// if game_difficulty > 1 then
2693: LD_EXP 2
2697: PUSH
2698: LD_INT 1
2700: GREATER
2701: IFFALSE 2710
// RaiseSailEvent ( 33 ) ;
2703: LD_INT 33
2705: PPUSH
2706: CALL_OW 427
// if heike_dialog1 = false then
2710: LD_EXP 44
2714: PUSH
2715: LD_INT 0
2717: EQUAL
2718: IFFALSE 2749
// begin heike_dialog1 := true ;
2720: LD_ADDR_EXP 44
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2728: LD_INT 105
2730: PPUSH
2731: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2735: LD_EXP 48
2739: PPUSH
2740: LD_STRING heike1
2742: PPUSH
2743: CALL_OW 94
// end else
2747: GO 2786
// if heike_dialog2 = false then
2749: LD_EXP 45
2753: PUSH
2754: LD_INT 0
2756: EQUAL
2757: IFFALSE 2786
// begin heike_dialog2 := true ;
2759: LD_ADDR_EXP 45
2763: PUSH
2764: LD_INT 1
2766: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2767: LD_INT 105
2769: PPUSH
2770: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2774: LD_EXP 48
2778: PPUSH
2779: LD_STRING heike2
2781: PPUSH
2782: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2786: LD_INT 22
2788: PUSH
2789: LD_INT 2
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 33
2798: PUSH
2799: LD_INT 2
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 69
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: IFFALSE 2827
// ConnectWithTower ( 2 ) ;
2820: LD_INT 2
2822: PPUSH
2823: CALL 7217 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2827: LD_INT 22
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: LD_INT 3
2839: PUSH
2840: LD_INT 34
2842: PUSH
2843: LD_INT 31
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 3
2856: PUSH
2857: LD_INT 60
2859: PUSH
2860: EMPTY
2861: LIST
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: LIST
2871: PUSH
2872: EMPTY
2873: LIST
2874: PPUSH
2875: CALL_OW 69
2879: PUSH
2880: LD_INT 0
2882: GREATER
2883: IFFALSE 3029
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2885: LD_ADDR_VAR 0 4
2889: PUSH
2890: LD_INT 22
2892: PUSH
2893: LD_INT 2
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 3
2902: PUSH
2903: LD_INT 34
2905: PUSH
2906: LD_INT 31
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 3
2919: PUSH
2920: LD_INT 60
2922: PUSH
2923: EMPTY
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: PPUSH
2938: CALL_OW 69
2942: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2943: LD_ADDR_VAR 0 3
2947: PUSH
2948: LD_INT 81
2950: PUSH
2951: LD_INT 2
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: CALL_OW 69
2962: PPUSH
2963: LD_INT 20
2965: PPUSH
2966: CALL 8614 0 2
2970: ST_TO_ADDR
// for i = 1 to filter do
2971: LD_ADDR_VAR 0 1
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_VAR 0 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3027
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2989: LD_VAR 0 4
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_VAR 0 4
3009: PUSH
3010: LD_VAR 0 1
3014: ARRAY
3015: PPUSH
3016: CALL_OW 74
3020: PPUSH
3021: CALL_OW 115
3025: GO 2986
3027: POP
3028: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3029: LD_INT 22
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: LD_INT 60
3044: PUSH
3045: EMPTY
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: EMPTY
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: LD_INT 0
3066: GREATER
3067: IFFALSE 3213
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3069: LD_ADDR_VAR 0 4
3073: PUSH
3074: LD_INT 22
3076: PUSH
3077: LD_INT 3
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 34
3089: PUSH
3090: LD_INT 31
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: LD_INT 60
3106: PUSH
3107: EMPTY
3108: LIST
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3127: LD_ADDR_VAR 0 3
3131: PUSH
3132: LD_INT 81
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: PPUSH
3147: LD_INT 20
3149: PPUSH
3150: CALL 8614 0 2
3154: ST_TO_ADDR
// for i = 1 to filter do
3155: LD_ADDR_VAR 0 1
3159: PUSH
3160: DOUBLE
3161: LD_INT 1
3163: DEC
3164: ST_TO_ADDR
3165: LD_VAR 0 4
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3211
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3173: LD_VAR 0 4
3177: PUSH
3178: LD_VAR 0 1
3182: ARRAY
3183: PPUSH
3184: LD_VAR 0 3
3188: PPUSH
3189: LD_VAR 0 4
3193: PUSH
3194: LD_VAR 0 1
3198: ARRAY
3199: PPUSH
3200: CALL_OW 74
3204: PPUSH
3205: CALL_OW 115
3209: GO 3170
3211: POP
3212: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 3
3225: PUSH
3226: LD_INT 60
3228: PUSH
3229: EMPTY
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: PPUSH
3243: CALL_OW 69
3247: PUSH
3248: LD_INT 0
3250: GREATER
3251: IFFALSE 3397
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3253: LD_ADDR_VAR 0 4
3257: PUSH
3258: LD_INT 22
3260: PUSH
3261: LD_INT 1
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 3
3270: PUSH
3271: LD_INT 34
3273: PUSH
3274: LD_INT 31
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: PUSH
3303: EMPTY
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: LD_INT 81
3318: PUSH
3319: LD_INT 1
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PPUSH
3326: CALL_OW 69
3330: PPUSH
3331: LD_INT 20
3333: PPUSH
3334: CALL 8614 0 2
3338: ST_TO_ADDR
// for i = 1 to filter do
3339: LD_ADDR_VAR 0 1
3343: PUSH
3344: DOUBLE
3345: LD_INT 1
3347: DEC
3348: ST_TO_ADDR
3349: LD_VAR 0 4
3353: PUSH
3354: FOR_TO
3355: IFFALSE 3395
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3357: LD_VAR 0 4
3361: PUSH
3362: LD_VAR 0 1
3366: ARRAY
3367: PPUSH
3368: LD_VAR 0 3
3372: PPUSH
3373: LD_VAR 0 4
3377: PUSH
3378: LD_VAR 0 1
3382: ARRAY
3383: PPUSH
3384: CALL_OW 74
3388: PPUSH
3389: CALL_OW 115
3393: GO 3354
3395: POP
3396: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3397: LD_INT 22
3399: PUSH
3400: LD_INT 2
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PUSH
3407: LD_INT 34
3409: PUSH
3410: LD_INT 91
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 3
3419: PUSH
3420: LD_INT 24
3422: PUSH
3423: LD_INT 700
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: EMPTY
3440: LIST
3441: PPUSH
3442: CALL_OW 69
3446: PUSH
3447: LD_INT 0
3449: GREATER
3450: IFFALSE 3547
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3452: LD_ADDR_VAR 0 4
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_INT 2
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 34
3469: PUSH
3470: LD_INT 91
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 3
3479: PUSH
3480: LD_INT 24
3482: PUSH
3483: LD_INT 700
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: PPUSH
3502: CALL_OW 69
3506: ST_TO_ADDR
// for i = 1 to filter do
3507: LD_ADDR_VAR 0 1
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_VAR 0 4
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3545
// SetLives ( filter [ i ] , 1 ) ;
3525: LD_VAR 0 4
3529: PUSH
3530: LD_VAR 0 1
3534: ARRAY
3535: PPUSH
3536: LD_INT 1
3538: PPUSH
3539: CALL_OW 234
3543: GO 3522
3545: POP
3546: POP
// end ; end ; end_of_file
3547: PPOPN 4
3549: END
// export function Start_Mission ; begin
3550: LD_INT 0
3552: PPUSH
// PrepareLegion ;
3553: CALL 3594 0 0
// PrepareMeeting ;
3557: CALL 4211 0 0
// case Query ( DS-text-beg ) of 1 :
3561: LD_STRING DS-text-beg
3563: PPUSH
3564: CALL_OW 97
3568: PUSH
3569: LD_INT 1
3571: DOUBLE
3572: EQUAL
3573: IFTRUE 3577
3575: GO 3580
3577: POP
// ; end ;
3578: GO 3581
3580: POP
// game_on := true ;
3581: LD_ADDR_EXP 1
3585: PUSH
3586: LD_INT 1
3588: ST_TO_ADDR
// end ;
3589: LD_VAR 0 1
3593: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3594: LD_INT 0
3596: PPUSH
3597: PPUSH
3598: PPUSH
3599: PPUSH
3600: PPUSH
// uc_side := 8 ;
3601: LD_ADDR_OWVAR 20
3605: PUSH
3606: LD_INT 8
3608: ST_TO_ADDR
// uc_nation := 2 ;
3609: LD_ADDR_OWVAR 21
3613: PUSH
3614: LD_INT 2
3616: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3617: LD_ADDR_EXP 50
3621: PUSH
3622: LD_INT 9
3624: PUSH
3625: LD_INT 8
3627: PUSH
3628: LD_INT 7
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: PUSH
3636: LD_OWVAR 67
3640: ARRAY
3641: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3642: LD_ADDR_EXP 51
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 8
3652: PUSH
3653: LD_INT 8
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: PUSH
3661: LD_OWVAR 67
3665: ARRAY
3666: ST_TO_ADDR
// filter := [ ] ;
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: EMPTY
3673: ST_TO_ADDR
// hc_gallery := desert ;
3674: LD_ADDR_OWVAR 33
3678: PUSH
3679: LD_STRING desert
3681: ST_TO_ADDR
// hc_face_number := 1 ;
3682: LD_ADDR_OWVAR 34
3686: PUSH
3687: LD_INT 1
3689: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3690: LD_ADDR_OWVAR 31
3694: PUSH
3695: LD_EXP 50
3699: PUSH
3700: LD_INT 2
3702: PLUS
3703: PUSH
3704: LD_EXP 50
3708: PUSH
3709: LD_INT 1
3711: MINUS
3712: PUSH
3713: LD_EXP 50
3717: PUSH
3718: LD_EXP 50
3722: PUSH
3723: LD_INT 1
3725: PLUS
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: ST_TO_ADDR
// hc_sex := sex_male ;
3733: LD_ADDR_OWVAR 27
3737: PUSH
3738: LD_INT 1
3740: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3741: LD_ADDR_OWVAR 26
3745: PUSH
3746: LD_STRING Henri Ruotz
3748: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3749: LD_ADDR_OWVAR 29
3753: PUSH
3754: LD_INT 10
3756: PUSH
3757: LD_INT 10
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: ST_TO_ADDR
// hc_class := 1 ;
3764: LD_ADDR_OWVAR 28
3768: PUSH
3769: LD_INT 1
3771: ST_TO_ADDR
// hc_importance := 100 ;
3772: LD_ADDR_OWVAR 32
3776: PUSH
3777: LD_INT 100
3779: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3780: LD_ADDR_EXP 49
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// hc_importance := 0 ;
3790: LD_ADDR_OWVAR 32
3794: PUSH
3795: LD_INT 0
3797: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3798: LD_ADDR_EXP 12
3802: PUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 0
3811: PPUSH
3812: CALL_OW 380
3816: ST_TO_ADDR
// for i = 1 to 4 do
3817: LD_ADDR_VAR 0 2
3821: PUSH
3822: DOUBLE
3823: LD_INT 1
3825: DEC
3826: ST_TO_ADDR
3827: LD_INT 4
3829: PUSH
3830: FOR_TO
3831: IFFALSE 3881
// for p = 1 to 6 do
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: DOUBLE
3839: LD_INT 1
3841: DEC
3842: ST_TO_ADDR
3843: LD_INT 6
3845: PUSH
3846: FOR_TO
3847: IFFALSE 3877
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 4
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: LD_EXP 50
3868: PPUSH
3869: CALL 7403 0 2
3873: ADD
3874: ST_TO_ADDR
3875: GO 3846
3877: POP
3878: POP
3879: GO 3830
3881: POP
3882: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: LD_STRING text
3890: PPUSH
3891: LD_EXP 51
3895: PPUSH
3896: LD_EXP 51
3900: PPUSH
3901: LD_INT -5
3903: PUSH
3904: LD_EXP 49
3908: PUSH
3909: LD_INT -3
3911: PUSH
3912: LD_INT -2
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: LD_VAR 0 4
3925: ADD
3926: PPUSH
3927: LD_INT 1
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: LD_INT 2
3935: PUSH
3936: LD_INT 4
3938: PUSH
3939: LD_INT 8
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 42
3953: ST_TO_ADDR
// for i = 1 to l_units do
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: DOUBLE
3960: LD_INT 1
3962: DEC
3963: ST_TO_ADDR
3964: LD_EXP 51
3968: PUSH
3969: FOR_TO
3970: IFFALSE 3995
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3972: LD_VAR 0 5
3976: PUSH
3977: LD_VAR 0 2
3981: ARRAY
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL_OW 49
3993: GO 3969
3995: POP
3996: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3997: LD_EXP 49
4001: PPUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 0
4007: PPUSH
4008: CALL_OW 49
// end ;
4012: LD_VAR 0 1
4016: RET
// export function PlaceCamera ; begin
4017: LD_INT 0
4019: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
4020: LD_INT 46
4022: PPUSH
4023: LD_INT 48
4025: PPUSH
4026: LD_INT 8
4028: PPUSH
4029: LD_INT 10
4031: PPUSH
4032: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
4036: LD_INT 58
4038: PPUSH
4039: LD_INT 66
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
4052: LD_INT 82
4054: PPUSH
4055: LD_INT 82
4057: PPUSH
4058: LD_INT 8
4060: PPUSH
4061: LD_INT 10
4063: PPUSH
4064: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
4068: LD_INT 107
4070: PPUSH
4071: LD_INT 79
4073: PPUSH
4074: LD_INT 8
4076: PPUSH
4077: LD_INT 10
4079: PPUSH
4080: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4084: LD_INT 101
4086: PPUSH
4087: LD_INT 57
4089: PPUSH
4090: LD_INT 8
4092: PPUSH
4093: LD_INT 10
4095: PPUSH
4096: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4100: LD_INT 85
4102: PPUSH
4103: LD_INT 32
4105: PPUSH
4106: LD_INT 8
4108: PPUSH
4109: LD_INT 10
4111: PPUSH
4112: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4116: LD_INT 108
4118: PPUSH
4119: LD_INT 72
4121: PPUSH
4122: LD_INT 8
4124: PPUSH
4125: LD_INT 10
4127: PPUSH
4128: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4132: LD_INT 124
4134: PPUSH
4135: LD_INT 74
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: LD_INT 10
4143: PPUSH
4144: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4148: LD_INT 67
4150: PPUSH
4151: LD_INT 33
4153: PPUSH
4154: LD_INT 8
4156: PPUSH
4157: LD_INT 20
4159: PPUSH
4160: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4164: LD_INT 67
4166: PPUSH
4167: LD_INT 33
4169: PPUSH
4170: LD_INT 8
4172: PPUSH
4173: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4177: LD_INT 94
4179: PPUSH
4180: LD_INT 84
4182: PPUSH
4183: LD_INT 8
4185: PPUSH
4186: LD_INT 20
4188: PPUSH
4189: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4193: LD_INT 94
4195: PPUSH
4196: LD_INT 84
4198: PPUSH
4199: LD_INT 8
4201: PPUSH
4202: CALL_OW 331
// end ;
4206: LD_VAR 0 1
4210: RET
// export function PrepareMeeting ; begin
4211: LD_INT 0
4213: PPUSH
// uc_side := 6 ;
4214: LD_ADDR_OWVAR 20
4218: PUSH
4219: LD_INT 6
4221: ST_TO_ADDR
// hc_gallery := desert ;
4222: LD_ADDR_OWVAR 33
4226: PUSH
4227: LD_STRING desert
4229: ST_TO_ADDR
// hc_face_number := 2 ;
4230: LD_ADDR_OWVAR 34
4234: PUSH
4235: LD_INT 2
4237: ST_TO_ADDR
// hc_name := Leopold Drass ;
4238: LD_ADDR_OWVAR 26
4242: PUSH
4243: LD_STRING Leopold Drass
4245: ST_TO_ADDR
// hc_class := 1 ;
4246: LD_ADDR_OWVAR 28
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_sex := sex_male ;
4254: LD_ADDR_OWVAR 27
4258: PUSH
4259: LD_INT 1
4261: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4262: LD_ADDR_OWVAR 29
4266: PUSH
4267: LD_INT 12
4269: PUSH
4270: LD_INT 12
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// Leopold := CreateHuman ;
4277: LD_ADDR_EXP 7
4281: PUSH
4282: CALL_OW 44
4286: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4287: LD_EXP 7
4291: PPUSH
4292: LD_INT 3
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL_OW 49
// end ; end_of_file
4302: LD_VAR 0 1
4306: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4307: LD_INT 0
4309: PPUSH
4310: PPUSH
4311: PPUSH
4312: PPUSH
4313: PPUSH
// begin case num of 1 :
4314: LD_VAR 0 1
4318: PUSH
4319: LD_INT 1
4321: DOUBLE
4322: EQUAL
4323: IFTRUE 4327
4325: GO 4359
4327: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4328: LD_EXP 7
4332: PPUSH
4333: LD_EXP 49
4337: PPUSH
4338: CALL_OW 250
4342: PPUSH
4343: LD_EXP 49
4347: PPUSH
4348: CALL_OW 251
4352: PPUSH
4353: CALL_OW 111
// end ; 2 :
4357: GO 6777
4359: LD_INT 2
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4367
4365: GO 4476
4367: POP
// begin InGameOn ;
4368: CALL_OW 8
// meeting_start := true ;
4372: LD_ADDR_EXP 26
4376: PUSH
4377: LD_INT 1
4379: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4380: LD_EXP 7
4384: PPUSH
4385: LD_EXP 49
4389: PPUSH
4390: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4394: LD_EXP 49
4398: PPUSH
4399: LD_EXP 7
4403: PPUSH
4404: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4408: LD_EXP 7
4412: PPUSH
4413: LD_STRING DS-DL-1
4415: PPUSH
4416: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4420: LD_EXP 49
4424: PPUSH
4425: LD_STRING DS-DC-1
4427: PPUSH
4428: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4432: LD_EXP 7
4436: PPUSH
4437: LD_STRING DS-DL-2
4439: PPUSH
4440: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4444: LD_EXP 7
4448: PPUSH
4449: LD_INT 23
4451: PPUSH
4452: CALL_OW 120
// InGameOff ;
4456: CALL_OW 9
// Wait ( 0 0$01 ) ;
4460: LD_INT 35
4462: PPUSH
4463: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4467: LD_STRING DS-T1
4469: PPUSH
4470: CALL_OW 337
// end ; 10 :
4474: GO 6777
4476: LD_INT 10
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4696
4484: POP
// begin uc_side := 6 ;
4485: LD_ADDR_OWVAR 20
4489: PUSH
4490: LD_INT 6
4492: ST_TO_ADDR
// uc_nation := 2 ;
4493: LD_ADDR_OWVAR 21
4497: PUSH
4498: LD_INT 2
4500: ST_TO_ADDR
// hc_gallery :=  ;
4501: LD_ADDR_OWVAR 33
4505: PUSH
4506: LD_STRING 
4508: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4509: LD_ADDR_OWVAR 31
4513: PUSH
4514: LD_EXP 16
4518: PUSH
4519: LD_INT 2
4521: PLUS
4522: PUSH
4523: LD_EXP 16
4527: PUSH
4528: LD_INT 1
4530: MINUS
4531: PUSH
4532: LD_EXP 16
4536: PUSH
4537: LD_EXP 16
4541: PUSH
4542: LD_INT 1
4544: PLUS
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: ST_TO_ADDR
// hc_sex := sex_male ;
4552: LD_ADDR_OWVAR 27
4556: PUSH
4557: LD_INT 1
4559: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4560: LD_ADDR_OWVAR 26
4564: PUSH
4565: LD_STRING Samuel van Horn
4567: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4568: LD_ADDR_OWVAR 29
4572: PUSH
4573: LD_INT 11
4575: PUSH
4576: LD_INT 10
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: ST_TO_ADDR
// hc_class := 1 ;
4583: LD_ADDR_OWVAR 28
4587: PUSH
4588: LD_INT 1
4590: ST_TO_ADDR
// samuel := CreateHuman ;
4591: LD_ADDR_EXP 9
4595: PUSH
4596: CALL_OW 44
4600: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4601: LD_EXP 9
4605: PPUSH
4606: LD_INT 4
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 49
// for i = 1 to 3 do
4616: LD_ADDR_VAR 0 2
4620: PUSH
4621: DOUBLE
4622: LD_INT 1
4624: DEC
4625: ST_TO_ADDR
4626: LD_INT 3
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4657
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4632: LD_INT 8
4634: PPUSH
4635: LD_EXP 16
4639: PPUSH
4640: CALL 7403 0 2
4644: PPUSH
4645: LD_INT 4
4647: PPUSH
4648: LD_INT 0
4650: PPUSH
4651: CALL_OW 49
4655: GO 4629
4657: POP
4658: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4659: LD_INT 22
4661: PUSH
4662: LD_INT 6
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PPUSH
4669: CALL_OW 69
4673: PUSH
4674: LD_EXP 7
4678: PUSH
4679: LD_INT 23
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: DIFF
4686: PPUSH
4687: LD_INT 23
4689: PPUSH
4690: CALL_OW 120
// end ; 3 :
4694: GO 6777
4696: LD_INT 3
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4715
4704: POP
// begin arabian_attack := true ;
4705: LD_ADDR_EXP 38
4709: PUSH
4710: LD_INT 1
4712: ST_TO_ADDR
// end ; 4 :
4713: GO 6777
4715: LD_INT 4
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4734
4723: POP
// begin american_attack := true ;
4724: LD_ADDR_EXP 40
4728: PUSH
4729: LD_INT 1
4731: ST_TO_ADDR
// end ; 5 :
4732: GO 6777
4734: LD_INT 5
4736: DOUBLE
4737: EQUAL
4738: IFTRUE 4742
4740: GO 4753
4742: POP
// begin russian_attack := true ;
4743: LD_ADDR_EXP 39
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ; 31 :
4751: GO 6777
4753: LD_INT 31
4755: DOUBLE
4756: EQUAL
4757: IFTRUE 4761
4759: GO 5036
4761: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4762: LD_ADDR_VAR 0 6
4766: PUSH
4767: LD_EXP 15
4771: PUSH
4772: LD_INT 1
4774: PPUSH
4775: LD_EXP 15
4779: PPUSH
4780: CALL_OW 12
4784: ARRAY
4785: ST_TO_ADDR
// uc_side := 2 ;
4786: LD_ADDR_OWVAR 20
4790: PUSH
4791: LD_INT 2
4793: ST_TO_ADDR
// uc_nation := 2 ;
4794: LD_ADDR_OWVAR 21
4798: PUSH
4799: LD_INT 2
4801: ST_TO_ADDR
// for i = 1 to arabian_force do
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: DOUBLE
4808: LD_INT 1
4810: DEC
4811: ST_TO_ADDR
4812: LD_EXP 20
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4897
// begin vc_chassis := ar_half_tracked ;
4820: LD_ADDR_OWVAR 37
4824: PUSH
4825: LD_INT 14
4827: ST_TO_ADDR
// vc_engine := engine_siberite ;
4828: LD_ADDR_OWVAR 39
4832: PUSH
4833: LD_INT 3
4835: ST_TO_ADDR
// vc_control := control_remote ;
4836: LD_ADDR_OWVAR 38
4840: PUSH
4841: LD_INT 2
4843: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4844: LD_ADDR_OWVAR 40
4848: PUSH
4849: LD_EXP 17
4853: PUSH
4854: LD_INT 1
4856: PPUSH
4857: LD_EXP 17
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: ST_TO_ADDR
// un := CreateVehicle ;
4868: LD_ADDR_VAR 0 4
4872: PUSH
4873: CALL_OW 45
4877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4878: LD_VAR 0 4
4882: PPUSH
4883: LD_VAR 0 6
4887: PPUSH
4888: LD_INT 0
4890: PPUSH
4891: CALL_OW 49
// end ;
4895: GO 4817
4897: POP
4898: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4899: LD_INT 22
4901: PUSH
4902: LD_INT 2
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 33
4911: PUSH
4912: LD_INT 1
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: PUSH
4928: LD_INT 2
4930: LESS
4931: IFFALSE 5034
// for i = 1 to 2 do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: DOUBLE
4939: LD_INT 1
4941: DEC
4942: ST_TO_ADDR
4943: LD_INT 2
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5032
// begin vc_chassis := ar_half_tracked ;
4949: LD_ADDR_OWVAR 37
4953: PUSH
4954: LD_INT 14
4956: ST_TO_ADDR
// vc_engine := engine_siberite ;
4957: LD_ADDR_OWVAR 39
4961: PUSH
4962: LD_INT 3
4964: ST_TO_ADDR
// vc_control := control_manual ;
4965: LD_ADDR_OWVAR 38
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4973: LD_ADDR_OWVAR 40
4977: PUSH
4978: LD_INT 31
4980: ST_TO_ADDR
// un := CreateVehicle ;
4981: LD_ADDR_VAR 0 4
4985: PUSH
4986: CALL_OW 45
4990: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4991: LD_VAR 0 4
4995: PPUSH
4996: LD_VAR 0 6
5000: PPUSH
5001: LD_INT 0
5003: PPUSH
5004: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5008: LD_INT 3
5010: PPUSH
5011: LD_EXP 16
5015: PPUSH
5016: CALL 7403 0 2
5020: PPUSH
5021: LD_VAR 0 4
5025: PPUSH
5026: CALL_OW 52
// end ;
5030: GO 4946
5032: POP
5033: POP
// end ; 32 :
5034: GO 6777
5036: LD_INT 32
5038: DOUBLE
5039: EQUAL
5040: IFTRUE 5044
5042: GO 5417
5044: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5045: LD_ADDR_VAR 0 6
5049: PUSH
5050: LD_EXP 15
5054: PUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 15
5062: PPUSH
5063: CALL_OW 12
5067: ARRAY
5068: ST_TO_ADDR
// uc_side := 2 ;
5069: LD_ADDR_OWVAR 20
5073: PUSH
5074: LD_INT 2
5076: ST_TO_ADDR
// uc_nation := 2 ;
5077: LD_ADDR_OWVAR 21
5081: PUSH
5082: LD_INT 2
5084: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: DOUBLE
5091: LD_INT 1
5093: DEC
5094: ST_TO_ADDR
5095: LD_EXP 20
5099: PUSH
5100: LD_INT 2
5102: MINUS
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5188
// begin vc_chassis := ar_half_tracked ;
5107: LD_ADDR_OWVAR 37
5111: PUSH
5112: LD_INT 14
5114: ST_TO_ADDR
// vc_engine := engine_siberite ;
5115: LD_ADDR_OWVAR 39
5119: PUSH
5120: LD_INT 3
5122: ST_TO_ADDR
// vc_control := control_remote ;
5123: LD_ADDR_OWVAR 38
5127: PUSH
5128: LD_INT 2
5130: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5131: LD_ADDR_OWVAR 40
5135: PUSH
5136: LD_EXP 17
5140: PUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_EXP 17
5148: PUSH
5149: LD_INT 1
5151: MINUS
5152: PPUSH
5153: CALL_OW 12
5157: ARRAY
5158: ST_TO_ADDR
// un := CreateVehicle ;
5159: LD_ADDR_VAR 0 4
5163: PUSH
5164: CALL_OW 45
5168: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5169: LD_VAR 0 4
5173: PPUSH
5174: LD_VAR 0 6
5178: PPUSH
5179: LD_INT 0
5181: PPUSH
5182: CALL_OW 49
// end ;
5186: GO 5104
5188: POP
5189: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_INT 0
5202: PPUSH
5203: LD_INT 1
5205: PPUSH
5206: CALL_OW 12
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_EXP 2
5229: ARRAY
5230: PLUS
5231: PUSH
5232: FOR_TO
5233: IFFALSE 5270
// begin uc_nation := 0 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 0
5242: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5243: LD_INT 17
5245: PPUSH
5246: LD_EXP 16
5250: PPUSH
5251: CALL 7403 0 2
5255: PPUSH
5256: LD_VAR 0 6
5260: PPUSH
5261: LD_INT 0
5263: PPUSH
5264: CALL_OW 49
// end ;
5268: GO 5232
5270: POP
5271: POP
// uc_nation := 2 ;
5272: LD_ADDR_OWVAR 21
5276: PUSH
5277: LD_INT 2
5279: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5280: LD_INT 22
5282: PUSH
5283: LD_INT 2
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 33
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 69
5308: PUSH
5309: LD_INT 2
5311: LESS
5312: IFFALSE 5415
// for i = 1 to 2 do
5314: LD_ADDR_VAR 0 2
5318: PUSH
5319: DOUBLE
5320: LD_INT 1
5322: DEC
5323: ST_TO_ADDR
5324: LD_INT 2
5326: PUSH
5327: FOR_TO
5328: IFFALSE 5413
// begin vc_chassis := ar_half_tracked ;
5330: LD_ADDR_OWVAR 37
5334: PUSH
5335: LD_INT 14
5337: ST_TO_ADDR
// vc_engine := engine_siberite ;
5338: LD_ADDR_OWVAR 39
5342: PUSH
5343: LD_INT 3
5345: ST_TO_ADDR
// vc_control := control_manual ;
5346: LD_ADDR_OWVAR 38
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5354: LD_ADDR_OWVAR 40
5358: PUSH
5359: LD_INT 31
5361: ST_TO_ADDR
// un := CreateVehicle ;
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: CALL_OW 45
5371: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5372: LD_VAR 0 4
5376: PPUSH
5377: LD_VAR 0 6
5381: PPUSH
5382: LD_INT 0
5384: PPUSH
5385: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5389: LD_INT 3
5391: PPUSH
5392: LD_EXP 16
5396: PPUSH
5397: CALL 7403 0 2
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: GO 5327
5413: POP
5414: POP
// end ; 33 :
5415: GO 6777
5417: LD_INT 33
5419: DOUBLE
5420: EQUAL
5421: IFTRUE 5425
5423: GO 5696
5425: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5426: LD_ADDR_VAR 0 6
5430: PUSH
5431: LD_EXP 15
5435: PUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_EXP 15
5443: PPUSH
5444: CALL_OW 12
5448: ARRAY
5449: ST_TO_ADDR
// uc_side := 2 ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_INT 2
5457: ST_TO_ADDR
// uc_nation := 2 ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_INT 2
5465: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_EXP 20
5480: PUSH
5481: LD_INT 2
5483: DIVREAL
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5591
// begin vc_chassis := ar_half_tracked ;
5488: LD_ADDR_OWVAR 37
5492: PUSH
5493: LD_INT 14
5495: ST_TO_ADDR
// vc_engine := engine_siberite ;
5496: LD_ADDR_OWVAR 39
5500: PUSH
5501: LD_INT 3
5503: ST_TO_ADDR
// vc_control := control_manual ;
5504: LD_ADDR_OWVAR 38
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5512: LD_ADDR_OWVAR 40
5516: PUSH
5517: LD_EXP 17
5521: PUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_EXP 17
5529: PUSH
5530: LD_INT 2
5532: MINUS
5533: PPUSH
5534: CALL_OW 12
5538: ARRAY
5539: ST_TO_ADDR
// un := CreateVehicle ;
5540: LD_ADDR_VAR 0 4
5544: PUSH
5545: CALL_OW 45
5549: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: LD_VAR 0 6
5559: PPUSH
5560: LD_INT 0
5562: PPUSH
5563: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5567: LD_INT 3
5569: PPUSH
5570: LD_EXP 16
5574: PPUSH
5575: CALL 7403 0 2
5579: PPUSH
5580: LD_VAR 0 4
5584: PPUSH
5585: CALL_OW 52
// end ;
5589: GO 5485
5591: POP
5592: POP
// for i = 1 to ( arabian_force / 2 ) do
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: DOUBLE
5599: LD_INT 1
5601: DEC
5602: ST_TO_ADDR
5603: LD_EXP 20
5607: PUSH
5608: LD_INT 2
5610: DIVREAL
5611: PUSH
5612: FOR_TO
5613: IFFALSE 5692
// begin vc_chassis := ar_half_tracked ;
5615: LD_ADDR_OWVAR 37
5619: PUSH
5620: LD_INT 14
5622: ST_TO_ADDR
// vc_engine := engine_siberite ;
5623: LD_ADDR_OWVAR 39
5627: PUSH
5628: LD_INT 3
5630: ST_TO_ADDR
// vc_control := control_apeman ;
5631: LD_ADDR_OWVAR 38
5635: PUSH
5636: LD_INT 5
5638: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5639: LD_ADDR_OWVAR 40
5643: PUSH
5644: LD_EXP 17
5648: PUSH
5649: LD_INT 2
5651: PPUSH
5652: LD_EXP 17
5656: PPUSH
5657: CALL_OW 12
5661: ARRAY
5662: ST_TO_ADDR
// un := CreateVehicle ;
5663: LD_ADDR_VAR 0 4
5667: PUSH
5668: CALL_OW 45
5672: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5673: LD_VAR 0 4
5677: PPUSH
5678: LD_VAR 0 6
5682: PPUSH
5683: LD_INT 0
5685: PPUSH
5686: CALL_OW 49
// end ;
5690: GO 5612
5692: POP
5693: POP
// end ; 41 :
5694: GO 6777
5696: LD_INT 41
5698: DOUBLE
5699: EQUAL
5700: IFTRUE 5704
5702: GO 5848
5704: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5705: LD_ADDR_VAR 0 6
5709: PUSH
5710: LD_EXP 15
5714: PUSH
5715: LD_INT 1
5717: PPUSH
5718: LD_EXP 15
5722: PPUSH
5723: CALL_OW 12
5727: ARRAY
5728: ST_TO_ADDR
// uc_side := 1 ;
5729: LD_ADDR_OWVAR 20
5733: PUSH
5734: LD_INT 1
5736: ST_TO_ADDR
// uc_nation := 1 ;
5737: LD_ADDR_OWVAR 21
5741: PUSH
5742: LD_INT 1
5744: ST_TO_ADDR
// for i = 1 to american_force do
5745: LD_ADDR_VAR 0 2
5749: PUSH
5750: DOUBLE
5751: LD_INT 1
5753: DEC
5754: ST_TO_ADDR
5755: LD_EXP 22
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5844
// begin vc_chassis := us_morphling ;
5763: LD_ADDR_OWVAR 37
5767: PUSH
5768: LD_INT 5
5770: ST_TO_ADDR
// vc_engine := engine_siberite ;
5771: LD_ADDR_OWVAR 39
5775: PUSH
5776: LD_INT 3
5778: ST_TO_ADDR
// vc_control := control_computer ;
5779: LD_ADDR_OWVAR 38
5783: PUSH
5784: LD_INT 3
5786: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5787: LD_ADDR_OWVAR 40
5791: PUSH
5792: LD_EXP 19
5796: PUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_EXP 19
5804: PUSH
5805: LD_INT 1
5807: MINUS
5808: PPUSH
5809: CALL_OW 12
5813: ARRAY
5814: ST_TO_ADDR
// un := CreateVehicle ;
5815: LD_ADDR_VAR 0 4
5819: PUSH
5820: CALL_OW 45
5824: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5825: LD_VAR 0 4
5829: PPUSH
5830: LD_VAR 0 6
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 49
// end ;
5842: GO 5760
5844: POP
5845: POP
// end ; 42 :
5846: GO 6777
5848: LD_INT 42
5850: DOUBLE
5851: EQUAL
5852: IFTRUE 5856
5854: GO 5996
5856: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5857: LD_ADDR_VAR 0 6
5861: PUSH
5862: LD_EXP 15
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_EXP 15
5874: PPUSH
5875: CALL_OW 12
5879: ARRAY
5880: ST_TO_ADDR
// uc_side := 1 ;
5881: LD_ADDR_OWVAR 20
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// uc_nation := 1 ;
5889: LD_ADDR_OWVAR 21
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// for i = 1 to american_force do
5897: LD_ADDR_VAR 0 2
5901: PUSH
5902: DOUBLE
5903: LD_INT 1
5905: DEC
5906: ST_TO_ADDR
5907: LD_EXP 22
5911: PUSH
5912: FOR_TO
5913: IFFALSE 5992
// begin vc_chassis := us_morphling ;
5915: LD_ADDR_OWVAR 37
5919: PUSH
5920: LD_INT 5
5922: ST_TO_ADDR
// vc_engine := engine_siberite ;
5923: LD_ADDR_OWVAR 39
5927: PUSH
5928: LD_INT 3
5930: ST_TO_ADDR
// vc_control := control_computer ;
5931: LD_ADDR_OWVAR 38
5935: PUSH
5936: LD_INT 3
5938: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5939: LD_ADDR_OWVAR 40
5943: PUSH
5944: LD_EXP 19
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 12
5961: ARRAY
5962: ST_TO_ADDR
// un := CreateVehicle ;
5963: LD_ADDR_VAR 0 4
5967: PUSH
5968: CALL_OW 45
5972: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5973: LD_VAR 0 4
5977: PPUSH
5978: LD_VAR 0 6
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 49
// end ;
5990: GO 5912
5992: POP
5993: POP
// end ; 51 :
5994: GO 6777
5996: LD_INT 51
5998: DOUBLE
5999: EQUAL
6000: IFTRUE 6004
6002: GO 6144
6004: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
6005: LD_ADDR_VAR 0 6
6009: PUSH
6010: LD_EXP 15
6014: PUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_EXP 15
6022: PPUSH
6023: CALL_OW 12
6027: ARRAY
6028: ST_TO_ADDR
// uc_side := 3 ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_INT 3
6036: ST_TO_ADDR
// uc_nation := 3 ;
6037: LD_ADDR_OWVAR 21
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
// for i = 1 to russian_force do
6045: LD_ADDR_VAR 0 2
6049: PUSH
6050: DOUBLE
6051: LD_INT 1
6053: DEC
6054: ST_TO_ADDR
6055: LD_EXP 21
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6140
// begin vc_chassis := ru_heavy_tracked ;
6063: LD_ADDR_OWVAR 37
6067: PUSH
6068: LD_INT 24
6070: ST_TO_ADDR
// vc_engine := engine_siberite ;
6071: LD_ADDR_OWVAR 39
6075: PUSH
6076: LD_INT 3
6078: ST_TO_ADDR
// vc_control := control_computer ;
6079: LD_ADDR_OWVAR 38
6083: PUSH
6084: LD_INT 3
6086: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6087: LD_ADDR_OWVAR 40
6091: PUSH
6092: LD_EXP 18
6096: PUSH
6097: LD_INT 1
6099: PPUSH
6100: LD_EXP 18
6104: PPUSH
6105: CALL_OW 12
6109: ARRAY
6110: ST_TO_ADDR
// un := CreateVehicle ;
6111: LD_ADDR_VAR 0 4
6115: PUSH
6116: CALL_OW 45
6120: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6121: LD_VAR 0 4
6125: PPUSH
6126: LD_VAR 0 6
6130: PPUSH
6131: LD_INT 0
6133: PPUSH
6134: CALL_OW 49
// end ;
6138: GO 6060
6140: POP
6141: POP
// end ; 91 :
6142: GO 6777
6144: LD_INT 91
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6152
6150: GO 6290
6152: POP
// begin uc_side := 8 ;
6153: LD_ADDR_OWVAR 20
6157: PUSH
6158: LD_INT 8
6160: ST_TO_ADDR
// uc_nation := 1 ;
6161: LD_ADDR_OWVAR 21
6165: PUSH
6166: LD_INT 1
6168: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: DOUBLE
6175: LD_INT 1
6177: DEC
6178: ST_TO_ADDR
6179: LD_INT 4
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_EXP 2
6197: ARRAY
6198: PUSH
6199: FOR_TO
6200: IFFALSE 6286
// begin vc_chassis := us_heavy_tracked ;
6202: LD_ADDR_OWVAR 37
6206: PUSH
6207: LD_INT 4
6209: ST_TO_ADDR
// vc_engine := engine_siberite ;
6210: LD_ADDR_OWVAR 39
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// vc_control := control_computer ;
6218: LD_ADDR_OWVAR 38
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6226: LD_ADDR_OWVAR 40
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: LD_INT 6
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 1
6243: PPUSH
6244: LD_INT 2
6246: PPUSH
6247: CALL_OW 12
6251: ARRAY
6252: ST_TO_ADDR
// un := CreateVehicle ;
6253: LD_ADDR_VAR 0 4
6257: PUSH
6258: CALL_OW 45
6262: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6263: LD_VAR 0 4
6267: PPUSH
6268: LD_EXP 15
6272: PUSH
6273: LD_INT 1
6275: ARRAY
6276: PPUSH
6277: LD_INT 0
6279: PPUSH
6280: CALL_OW 49
// end ;
6284: GO 6199
6286: POP
6287: POP
// end ; 92 :
6288: GO 6777
6290: LD_INT 92
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6627
6298: POP
// begin uc_side := 5 ;
6299: LD_ADDR_OWVAR 20
6303: PUSH
6304: LD_INT 5
6306: ST_TO_ADDR
// uc_nation := 2 ;
6307: LD_ADDR_OWVAR 21
6311: PUSH
6312: LD_INT 2
6314: ST_TO_ADDR
// filter := [ ] ;
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: EMPTY
6321: ST_TO_ADDR
// InitHc ;
6322: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6326: LD_INT 0
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_EXP 50
6336: PPUSH
6337: CALL_OW 380
// un := CreateHuman ;
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: CALL_OW 44
6350: ST_TO_ADDR
// filter := filter ^ un ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_VAR 0 3
6360: PUSH
6361: LD_VAR 0 4
6365: ADD
6366: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6367: LD_ADDR_VAR 0 2
6371: PUSH
6372: DOUBLE
6373: LD_INT 1
6375: DEC
6376: ST_TO_ADDR
6377: LD_INT 4
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_EXP 2
6395: ARRAY
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6436
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6400: LD_ADDR_VAR 0 4
6404: PUSH
6405: LD_INT 1
6407: PPUSH
6408: LD_EXP 50
6412: PPUSH
6413: CALL 7403 0 2
6417: ST_TO_ADDR
// filter := filter ^ un ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_VAR 0 3
6427: PUSH
6428: LD_VAR 0 4
6432: ADD
6433: ST_TO_ADDR
// end ;
6434: GO 6397
6436: POP
6437: POP
// DialogueOn ;
6438: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6442: LD_VAR 0 3
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: CALL_OW 258
6455: PUSH
6456: LD_INT 1
6458: EQUAL
6459: IFFALSE 6479
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: PPUSH
6470: LD_STRING DS-DF-1
6472: PPUSH
6473: CALL_OW 94
6477: GO 6495
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 1
6486: ARRAY
6487: PPUSH
6488: LD_STRING DS-DF-f1
6490: PPUSH
6491: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6495: LD_STRING DS-dezert
6497: PPUSH
6498: CALL_OW 97
6502: PUSH
6503: LD_INT 1
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6526
6511: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6512: LD_EXP 49
6516: PPUSH
6517: LD_STRING DS-DC-dis
6519: PPUSH
6520: CALL_OW 88
6524: GO 6621
6526: LD_INT 2
6528: DOUBLE
6529: EQUAL
6530: IFTRUE 6534
6532: GO 6620
6534: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6535: LD_EXP 49
6539: PPUSH
6540: LD_STRING DS-DC-acp
6542: PPUSH
6543: CALL_OW 88
// for i = 1 to filter do
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: DOUBLE
6553: LD_INT 1
6555: DEC
6556: ST_TO_ADDR
6557: LD_VAR 0 3
6561: PUSH
6562: FOR_TO
6563: IFFALSE 6616
// begin SetSide ( filter [ i ] , 8 ) ;
6565: LD_VAR 0 3
6569: PUSH
6570: LD_VAR 0 2
6574: ARRAY
6575: PPUSH
6576: LD_INT 8
6578: PPUSH
6579: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6583: LD_VAR 0 3
6587: PUSH
6588: LD_VAR 0 2
6592: ARRAY
6593: PPUSH
6594: LD_INT 4
6596: PPUSH
6597: LD_INT 0
6599: PPUSH
6600: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6604: LD_INT 111
6606: PPUSH
6607: LD_INT 121
6609: PPUSH
6610: CALL_OW 86
// end ;
6614: GO 6562
6616: POP
6617: POP
// end ; end ;
6618: GO 6621
6620: POP
// DialogueOff ;
6621: CALL_OW 7
// end ; 101 :
6625: GO 6777
6627: LD_INT 101
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6687
6635: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6636: LD_INT 3
6638: PPUSH
6639: LD_INT 5
6641: PPUSH
6642: CALL_OW 12
6646: PPUSH
6647: LD_INT 9
6649: PPUSH
6650: LD_INT 1
6652: PPUSH
6653: CALL_OW 55
// Wait ( 0 0$11 ) ;
6657: LD_INT 385
6659: PPUSH
6660: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6664: LD_INT 3
6666: PPUSH
6667: LD_INT 5
6669: PPUSH
6670: CALL_OW 12
6674: PPUSH
6675: LD_INT 9
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 55
// end ; 200 :
6685: GO 6777
6687: LD_INT 200
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6776
6695: POP
// begin Say ( Leopold , DS-end ) ;
6696: LD_EXP 7
6700: PPUSH
6701: LD_STRING DS-end
6703: PPUSH
6704: CALL_OW 88
// if Difficulty = 3 then
6708: LD_OWVAR 67
6712: PUSH
6713: LD_INT 3
6715: EQUAL
6716: IFFALSE 6725
// SetAchievement ( ACH_DESERT ) ;
6718: LD_STRING ACH_DESERT
6720: PPUSH
6721: CALL_OW 543
// music_nat := 5 ;
6725: LD_ADDR_OWVAR 71
6729: PUSH
6730: LD_INT 5
6732: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6733: LD_STRING med
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: CALL_OW 101
// AddMedal ( med , 1 ) ;
6743: LD_STRING med
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: CALL_OW 101
// AddMedal ( med , 1 ) ;
6753: LD_STRING med
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: CALL_OW 101
// GiveMedals ( MAIN ) ;
6763: LD_STRING MAIN
6765: PPUSH
6766: CALL_OW 102
// YouWin ;
6770: CALL_OW 103
// end ; end ;
6774: GO 6777
6776: POP
// end ;
6777: PPOPN 6
6779: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6780: LD_VAR 0 1
6784: PUSH
6785: LD_INT 22
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 21
6797: PUSH
6798: LD_INT 2
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: IN
6814: IFFALSE 6939
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6816: LD_INT 105
6818: PPUSH
6819: LD_INT 210
6821: PPUSH
6822: CALL_OW 12
6826: PPUSH
6827: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 250
6840: PPUSH
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 251
6850: PPUSH
6851: LD_INT 3
6853: PPUSH
6854: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL_OW 250
6867: PPUSH
6868: LD_VAR 0 1
6872: PPUSH
6873: CALL_OW 251
6877: PPUSH
6878: LD_INT 3
6880: PPUSH
6881: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 250
6894: PPUSH
6895: LD_VAR 0 1
6899: PPUSH
6900: CALL_OW 251
6904: PPUSH
6905: LD_INT 3
6907: PPUSH
6908: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6912: LD_VAR 0 1
6916: PPUSH
6917: CALL_OW 250
6921: PPUSH
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 251
6931: PPUSH
6932: LD_INT 3
6934: PPUSH
6935: CALL_OW 453
// end ; end ;
6939: PPOPN 1
6941: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6942: LD_VAR 0 1
6946: PPUSH
6947: CALL 24787 0 1
// if un = fort then
6951: LD_VAR 0 1
6955: PUSH
6956: LD_INT 23
6958: EQUAL
6959: IFFALSE 6969
// fort_destroyed := true ;
6961: LD_ADDR_EXP 32
6965: PUSH
6966: LD_INT 1
6968: ST_TO_ADDR
// if un = l_cmndr then
6969: LD_VAR 0 1
6973: PUSH
6974: LD_EXP 49
6978: EQUAL
6979: IFFALSE 6989
// hero_died := true ;
6981: LD_ADDR_EXP 33
6985: PUSH
6986: LD_INT 1
6988: ST_TO_ADDR
// end ;
6989: PPOPN 1
6991: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6992: LD_ADDR_OWVAR 48
6996: PUSH
6997: LD_VAR 0 1
7001: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_VAR 0 3
7016: PPUSH
7017: CALL 24821 0 3
// end ;
7021: PPOPN 3
7023: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL 24829 0 1
// end ;
7033: PPOPN 1
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7036: LD_VAR 0 1
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL 24845 0 2
// end ; end_of_file
7050: PPOPN 2
7052: END
// export function RefreshTime ( time , bool ) ; begin
7053: LD_INT 0
7055: PPUSH
// if bool then
7056: LD_VAR 0 2
7060: IFFALSE 7078
// time := time + 0 0$01 else
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: LD_VAR 0 1
7071: PUSH
7072: LD_INT 35
7074: PLUS
7075: ST_TO_ADDR
7076: GO 7092
// time := time - 0 0$01 ;
7078: LD_ADDR_VAR 0 1
7082: PUSH
7083: LD_VAR 0 1
7087: PUSH
7088: LD_INT 35
7090: MINUS
7091: ST_TO_ADDR
// result := time ;
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_VAR 0 1
7101: ST_TO_ADDR
// end ;
7102: LD_VAR 0 3
7106: RET
// export function MineExist ( side ) ; begin
7107: LD_INT 0
7109: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7110: LD_INT 22
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 30
7124: PUSH
7125: LD_INT 30
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 69
7140: PUSH
7141: LD_INT 0
7143: GREATER
7144: IFFALSE 7156
// result := true else
7146: LD_ADDR_VAR 0 2
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
7154: GO 7164
// result := false ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// end ;
7164: LD_VAR 0 2
7168: RET
// export function FacExist ( side ) ; begin
7169: LD_INT 0
7171: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7172: LD_ADDR_VAR 0 2
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_VAR 0 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 30
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: PUSH
7208: LD_INT 0
7210: GREATER
7211: ST_TO_ADDR
// end ;
7212: LD_VAR 0 2
7216: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7223: LD_ADDR_VAR 0 4
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 33
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 50
7252: PUSH
7253: EMPTY
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_VAR 0 1
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 34
7285: PUSH
7286: LD_INT 31
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: IFFALSE 7322
7312: PUSH
7313: LD_VAR 0 4
7317: PUSH
7318: LD_INT 0
7320: GREATER
7321: AND
7322: IFFALSE 7398
// for i = 1 to filter do
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: DOUBLE
7330: LD_INT 1
7332: DEC
7333: ST_TO_ADDR
7334: LD_VAR 0 4
7338: PUSH
7339: FOR_TO
7340: IFFALSE 7396
// if not IsControledBy ( filter [ i ] ) then
7342: LD_VAR 0 4
7346: PUSH
7347: LD_VAR 0 3
7351: ARRAY
7352: PPUSH
7353: CALL_OW 312
7357: NOT
7358: IFFALSE 7394
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7360: LD_VAR 0 4
7364: PUSH
7365: LD_VAR 0 3
7369: ARRAY
7370: PPUSH
7371: LD_VAR 0 5
7375: PUSH
7376: LD_INT 1
7378: PPUSH
7379: LD_VAR 0 5
7383: PPUSH
7384: CALL_OW 12
7388: ARRAY
7389: PPUSH
7390: CALL_OW 135
7394: GO 7339
7396: POP
7397: POP
// end ;
7398: LD_VAR 0 2
7402: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7403: LD_INT 0
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
// hc_class := clas ;
7411: LD_ADDR_OWVAR 28
7415: PUSH
7416: LD_VAR 0 1
7420: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: NEG
7434: PPUSH
7435: LD_INT 1
7437: PPUSH
7438: CALL_OW 12
7442: PLUS
7443: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_VAR 0 2
7453: PUSH
7454: LD_INT 1
7456: NEG
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: CALL_OW 12
7465: PLUS
7466: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7467: LD_ADDR_VAR 0 6
7471: PUSH
7472: LD_VAR 0 2
7476: PUSH
7477: LD_INT 1
7479: NEG
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: CALL_OW 12
7488: PLUS
7489: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7490: LD_ADDR_VAR 0 7
7494: PUSH
7495: LD_VAR 0 2
7499: PUSH
7500: LD_INT 1
7502: NEG
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 12
7511: PLUS
7512: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7513: LD_VAR 0 1
7517: PUSH
7518: LD_INT 1
7520: EQUAL
7521: IFTRUE 7533
7523: PUSH
7524: LD_VAR 0 1
7528: PUSH
7529: LD_INT 9
7531: EQUAL
7532: OR
7533: IFTRUE 7545
7535: PUSH
7536: LD_VAR 0 1
7540: PUSH
7541: LD_INT 5
7543: EQUAL
7544: OR
7545: IFTRUE 7557
7547: PUSH
7548: LD_VAR 0 1
7552: PUSH
7553: LD_INT 8
7555: EQUAL
7556: OR
7557: IFFALSE 7582
// bonus := [ 2 , 0 , 0 , 0 ] ;
7559: LD_ADDR_VAR 0 8
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 0
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: ST_TO_ADDR
// if clas = 2 then
7582: LD_VAR 0 1
7586: PUSH
7587: LD_INT 2
7589: EQUAL
7590: IFFALSE 7615
// bonus := [ 0 , 2 , 0 , 0 ] ;
7592: LD_ADDR_VAR 0 8
7596: PUSH
7597: LD_INT 0
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 0
7605: PUSH
7606: LD_INT 0
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: ST_TO_ADDR
// if clas = 3 then
7615: LD_VAR 0 1
7619: PUSH
7620: LD_INT 3
7622: EQUAL
7623: IFFALSE 7648
// bonus := [ 0 , 0 , 2 , 0 ] ;
7625: LD_ADDR_VAR 0 8
7629: PUSH
7630: LD_INT 0
7632: PUSH
7633: LD_INT 0
7635: PUSH
7636: LD_INT 2
7638: PUSH
7639: LD_INT 0
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: ST_TO_ADDR
// if clas = 4 then
7648: LD_VAR 0 1
7652: PUSH
7653: LD_INT 4
7655: EQUAL
7656: IFFALSE 7681
// bonus := [ 0 , 0 , 0 , 2 ] ;
7658: LD_ADDR_VAR 0 8
7662: PUSH
7663: LD_INT 0
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: LD_INT 0
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7681: LD_VAR 0 1
7685: PUSH
7686: LD_INT 4
7688: GREATER
7689: IFFALSE 7701
7691: PUSH
7692: LD_VAR 0 1
7696: PUSH
7697: LD_INT 9
7699: NONEQUAL
7700: AND
7701: IFFALSE 7713
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: LD_INT 5
7711: NONEQUAL
7712: AND
7713: IFFALSE 7725
7715: PUSH
7716: LD_VAR 0 1
7720: PUSH
7721: LD_INT 8
7723: NONEQUAL
7724: AND
7725: IFFALSE 7750
// bonus := [ 0 , 0 , 0 , 0 ] ;
7727: LD_ADDR_VAR 0 8
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7750: LD_ADDR_OWVAR 30
7754: PUSH
7755: LD_INT 0
7757: PPUSH
7758: LD_INT 2
7760: PPUSH
7761: CALL_OW 12
7765: PUSH
7766: LD_INT 0
7768: PPUSH
7769: LD_INT 2
7771: PPUSH
7772: CALL_OW 12
7776: PUSH
7777: LD_INT 0
7779: PPUSH
7780: LD_INT 2
7782: PPUSH
7783: CALL_OW 12
7787: PUSH
7788: LD_INT 0
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: CALL_OW 12
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7805: LD_ADDR_OWVAR 31
7809: PUSH
7810: LD_VAR 0 4
7814: PUSH
7815: LD_VAR 0 8
7819: PUSH
7820: LD_INT 1
7822: ARRAY
7823: PLUS
7824: PUSH
7825: LD_VAR 0 5
7829: PUSH
7830: LD_VAR 0 8
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PLUS
7839: PUSH
7840: LD_VAR 0 6
7844: PUSH
7845: LD_VAR 0 8
7849: PUSH
7850: LD_INT 3
7852: ARRAY
7853: PLUS
7854: PUSH
7855: LD_VAR 0 7
7859: PUSH
7860: LD_VAR 0 8
7864: PUSH
7865: LD_INT 4
7867: ARRAY
7868: PLUS
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7876: LD_ADDR_OWVAR 27
7880: PUSH
7881: LD_INT 1
7883: PPUSH
7884: LD_INT 2
7886: PPUSH
7887: CALL_OW 12
7891: ST_TO_ADDR
// hc_gallery :=  ;
7892: LD_ADDR_OWVAR 33
7896: PUSH
7897: LD_STRING 
7899: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7900: LD_ADDR_OWVAR 29
7904: PUSH
7905: LD_INT 8
7907: PPUSH
7908: LD_INT 12
7910: PPUSH
7911: CALL_OW 12
7915: PUSH
7916: LD_INT 9
7918: PPUSH
7919: LD_INT 11
7921: PPUSH
7922: CALL_OW 12
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: ST_TO_ADDR
// hc_name :=  ;
7931: LD_ADDR_OWVAR 26
7935: PUSH
7936: LD_STRING 
7938: ST_TO_ADDR
// result := CreateHuman ;
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: CALL_OW 44
7948: ST_TO_ADDR
// end ;
7949: LD_VAR 0 3
7953: RET
// export function GetSpeed ( unit ) ; begin
7954: LD_INT 0
7956: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 464
7971: PUSH
7972: LD_INT 1
7974: ARRAY
7975: ST_TO_ADDR
// end ;
7976: LD_VAR 0 2
7980: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
7988: PPUSH
// uc_nation = nation_nature ;
7989: LD_ADDR_OWVAR 21
7993: PUSH
7994: LD_INT 0
7996: ST_TO_ADDR
// uc_side = 0 ;
7997: LD_ADDR_OWVAR 20
8001: PUSH
8002: LD_INT 0
8004: ST_TO_ADDR
// l = 0 ;
8005: LD_ADDR_VAR 0 7
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8013: LD_ADDR_OWVAR 24
8017: PUSH
8018: LD_INT 0
8020: PPUSH
8021: LD_INT 5
8023: PPUSH
8024: CALL_OW 12
8028: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
8029: LD_ADDR_OWVAR 35
8033: PUSH
8034: LD_INT 5
8036: NEG
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 12
8045: ST_TO_ADDR
// hc_gallery =  ;
8046: LD_ADDR_OWVAR 33
8050: PUSH
8051: LD_STRING 
8053: ST_TO_ADDR
// hc_class = class_apeman ;
8054: LD_ADDR_OWVAR 28
8058: PUSH
8059: LD_INT 12
8061: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8062: LD_ADDR_OWVAR 29
8066: PUSH
8067: LD_INT 11
8069: PPUSH
8070: LD_INT 13
8072: PPUSH
8073: CALL_OW 12
8077: PUSH
8078: LD_INT 10
8080: PPUSH
8081: LD_INT 11
8083: PPUSH
8084: CALL_OW 12
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
// hc_sex = sex_male ;
8093: LD_ADDR_OWVAR 27
8097: PUSH
8098: LD_INT 1
8100: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8101: LD_ADDR_OWVAR 31
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 12
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: LD_INT 0
8122: PUSH
8123: LD_INT 0
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// apeman = CreateHuman ;
8132: LD_ADDR_VAR 0 8
8136: PUSH
8137: CALL_OW 44
8141: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8142: LD_VAR 0 8
8146: PPUSH
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_INT 0
8154: PPUSH
8155: CALL_OW 49
// l = l + 1 ;
8159: LD_ADDR_VAR 0 7
8163: PUSH
8164: LD_VAR 0 7
8168: PUSH
8169: LD_INT 1
8171: PLUS
8172: ST_TO_ADDR
// end until l = num1 ;
8173: LD_VAR 0 7
8177: PUSH
8178: LD_VAR 0 2
8182: EQUAL
8183: IFFALSE 8013
// l = 0 ;
8185: LD_ADDR_VAR 0 7
8189: PUSH
8190: LD_INT 0
8192: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8193: LD_ADDR_OWVAR 35
8197: PUSH
8198: LD_INT 0
8200: PPUSH
8201: LD_INT 25
8203: PPUSH
8204: CALL_OW 12
8208: ST_TO_ADDR
// hc_class = class_tiger ;
8209: LD_ADDR_OWVAR 28
8213: PUSH
8214: LD_INT 14
8216: ST_TO_ADDR
// hc_sex = sex_male ;
8217: LD_ADDR_OWVAR 27
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// hc_gallery = sandnature ;
8225: LD_ADDR_OWVAR 33
8229: PUSH
8230: LD_STRING sandnature
8232: ST_TO_ADDR
// hc_face_number = 3 ;
8233: LD_ADDR_OWVAR 34
8237: PUSH
8238: LD_INT 3
8240: ST_TO_ADDR
// tiger = CreateHuman ;
8241: LD_ADDR_VAR 0 9
8245: PUSH
8246: CALL_OW 44
8250: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8251: LD_VAR 0 9
8255: PPUSH
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 0
8263: PPUSH
8264: CALL_OW 49
// l = l + 1 ;
8268: LD_ADDR_VAR 0 7
8272: PUSH
8273: LD_VAR 0 7
8277: PUSH
8278: LD_INT 1
8280: PLUS
8281: ST_TO_ADDR
// end until l = num2 ;
8282: LD_VAR 0 7
8286: PUSH
8287: LD_VAR 0 3
8291: EQUAL
8292: IFFALSE 8193
// l = 0 ;
8294: LD_ADDR_VAR 0 7
8298: PUSH
8299: LD_INT 0
8301: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8302: LD_ADDR_OWVAR 28
8306: PUSH
8307: LD_INT 18
8309: ST_TO_ADDR
// hc_gallery = sandnature ;
8310: LD_ADDR_OWVAR 33
8314: PUSH
8315: LD_STRING sandnature
8317: ST_TO_ADDR
// hc_face_number = 1 ;
8318: LD_ADDR_OWVAR 34
8322: PUSH
8323: LD_INT 1
8325: ST_TO_ADDR
// bird = CreateHuman ;
8326: LD_ADDR_VAR 0 10
8330: PUSH
8331: CALL_OW 44
8335: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8336: LD_VAR 0 10
8340: PPUSH
8341: LD_INT 0
8343: PPUSH
8344: CALL_OW 51
// l = l + 1 ;
8348: LD_ADDR_VAR 0 7
8352: PUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_INT 1
8360: PLUS
8361: ST_TO_ADDR
// end until l = num3 ;
8362: LD_VAR 0 7
8366: PUSH
8367: LD_VAR 0 4
8371: EQUAL
8372: IFFALSE 8302
// l = 0 ;
8374: LD_ADDR_VAR 0 7
8378: PUSH
8379: LD_INT 0
8381: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8382: LD_ADDR_OWVAR 28
8386: PUSH
8387: LD_INT 21
8389: ST_TO_ADDR
// hc_gallery = sandnature ;
8390: LD_ADDR_OWVAR 33
8394: PUSH
8395: LD_STRING sandnature
8397: ST_TO_ADDR
// hc_face_number = 5 ;
8398: LD_ADDR_OWVAR 34
8402: PUSH
8403: LD_INT 5
8405: ST_TO_ADDR
// horse := CreateHuman ;
8406: LD_ADDR_VAR 0 11
8410: PUSH
8411: CALL_OW 44
8415: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8416: LD_VAR 0 11
8420: PPUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 49
// l = l + 1 ;
8433: LD_ADDR_VAR 0 7
8437: PUSH
8438: LD_VAR 0 7
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: ST_TO_ADDR
// end until l = num4 ;
8447: LD_VAR 0 7
8451: PUSH
8452: LD_VAR 0 5
8456: EQUAL
8457: IFFALSE 8382
// end ;
8459: LD_VAR 0 6
8463: RET
// export function PrepareComm ; begin
8464: LD_INT 0
8466: PPUSH
// uc_side := 1 ;
8467: LD_ADDR_OWVAR 20
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// uc_nation := 1 ;
8475: LD_ADDR_OWVAR 21
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// hc_gallery :=  ;
8483: LD_ADDR_OWVAR 33
8487: PUSH
8488: LD_STRING 
8490: ST_TO_ADDR
// hc_name :=  ;
8491: LD_ADDR_OWVAR 26
8495: PUSH
8496: LD_STRING 
8498: ST_TO_ADDR
// hc_class := 1 ;
8499: LD_ADDR_OWVAR 28
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// hc_sex := sex_male ;
8507: LD_ADDR_OWVAR 27
8511: PUSH
8512: LD_INT 1
8514: ST_TO_ADDR
// am_comander := CreateHuman ;
8515: LD_ADDR_EXP 46
8519: PUSH
8520: CALL_OW 44
8524: ST_TO_ADDR
// uc_side := 3 ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_INT 3
8532: ST_TO_ADDR
// uc_nation := 3 ;
8533: LD_ADDR_OWVAR 21
8537: PUSH
8538: LD_INT 3
8540: ST_TO_ADDR
// ru_comander := CreateHuman ;
8541: LD_ADDR_EXP 47
8545: PUSH
8546: CALL_OW 44
8550: ST_TO_ADDR
// uc_side := 2 ;
8551: LD_ADDR_OWVAR 20
8555: PUSH
8556: LD_INT 2
8558: ST_TO_ADDR
// uc_nation := 2 ;
8559: LD_ADDR_OWVAR 21
8563: PUSH
8564: LD_INT 2
8566: ST_TO_ADDR
// hc_name := Heike Steyer ;
8567: LD_ADDR_OWVAR 26
8571: PUSH
8572: LD_STRING Heike Steyer
8574: ST_TO_ADDR
// hc_sex := sex_female ;
8575: LD_ADDR_OWVAR 27
8579: PUSH
8580: LD_INT 2
8582: ST_TO_ADDR
// hc_gallery := sandar ;
8583: LD_ADDR_OWVAR 33
8587: PUSH
8588: LD_STRING sandar
8590: ST_TO_ADDR
// hc_face_number := 14 ;
8591: LD_ADDR_OWVAR 34
8595: PUSH
8596: LD_INT 14
8598: ST_TO_ADDR
// ar_comander := CreateHuman ;
8599: LD_ADDR_EXP 48
8603: PUSH
8604: CALL_OW 44
8608: ST_TO_ADDR
// end ;
8609: LD_VAR 0 1
8613: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8614: LD_INT 0
8616: PPUSH
8617: PPUSH
8618: PPUSH
// list := [ ] ;
8619: LD_ADDR_VAR 0 4
8623: PUSH
8624: EMPTY
8625: ST_TO_ADDR
// for i = 1 to filter do
8626: LD_ADDR_VAR 0 5
8630: PUSH
8631: DOUBLE
8632: LD_INT 1
8634: DEC
8635: ST_TO_ADDR
8636: LD_VAR 0 1
8640: PUSH
8641: FOR_TO
8642: IFFALSE 8691
// if GetSpeed ( filter [ i ] ) < speed then
8644: LD_VAR 0 1
8648: PUSH
8649: LD_VAR 0 5
8653: ARRAY
8654: PPUSH
8655: CALL 7954 0 1
8659: PUSH
8660: LD_VAR 0 2
8664: LESS
8665: IFFALSE 8689
// list := list ^ filter [ i ] ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: LD_VAR 0 4
8676: PUSH
8677: LD_VAR 0 1
8681: PUSH
8682: LD_VAR 0 5
8686: ARRAY
8687: ADD
8688: ST_TO_ADDR
8689: GO 8641
8691: POP
8692: POP
// result := list ;
8693: LD_ADDR_VAR 0 3
8697: PUSH
8698: LD_VAR 0 4
8702: ST_TO_ADDR
// end ; end_of_file end_of_file
8703: LD_VAR 0 3
8707: RET
// export globalGameSaveCounter ; every 0 0$1 do
8708: GO 8710
8710: DISABLE
// begin enable ;
8711: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8712: LD_STRING updateTimer(
8714: PUSH
8715: LD_OWVAR 1
8719: STR
8720: PUSH
8721: LD_STRING );
8723: STR
8724: PPUSH
8725: CALL_OW 559
// end ;
8729: END
// every 0 0$1 do
8730: GO 8732
8732: DISABLE
// begin globalGameSaveCounter := 0 ;
8733: LD_ADDR_EXP 52
8737: PUSH
8738: LD_INT 0
8740: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8741: LD_STRING setGameSaveCounter(0)
8743: PPUSH
8744: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8748: LD_STRING initStreamRollete();
8750: PPUSH
8751: CALL_OW 559
// InitStreamMode ;
8755: CALL 10100 0 0
// DefineStreamItems ( false ) ;
8759: LD_INT 0
8761: PPUSH
8762: CALL 10564 0 1
// end ;
8766: END
// export function SOS_MapStart ( ) ; begin
8767: LD_INT 0
8769: PPUSH
// if streamModeActive then
8770: LD_EXP 53
8774: IFFALSE 8783
// DefineStreamItems ( true ) ;
8776: LD_INT 1
8778: PPUSH
8779: CALL 10564 0 1
// UpdateLuaVariables ( ) ;
8783: CALL 8800 0 0
// UpdateFactoryWaypoints ( ) ;
8787: CALL 23686 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8791: CALL 23938 0 0
// end ;
8795: LD_VAR 0 1
8799: RET
// function UpdateLuaVariables ( ) ; begin
8800: LD_INT 0
8802: PPUSH
// if globalGameSaveCounter then
8803: LD_EXP 52
8807: IFFALSE 8841
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8809: LD_ADDR_EXP 52
8813: PUSH
8814: LD_EXP 52
8818: PPUSH
8819: CALL 70519 0 1
8823: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8824: LD_STRING setGameSaveCounter(
8826: PUSH
8827: LD_EXP 52
8831: STR
8832: PUSH
8833: LD_STRING )
8835: STR
8836: PPUSH
8837: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8841: LD_STRING setGameDifficulty(
8843: PUSH
8844: LD_OWVAR 67
8848: STR
8849: PUSH
8850: LD_STRING )
8852: STR
8853: PPUSH
8854: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
8858: LD_STRING displayDifficulty(
8860: PUSH
8861: LD_OWVAR 67
8865: STR
8866: PUSH
8867: LD_STRING )
8869: STR
8870: PPUSH
8871: CALL_OW 559
// end ;
8875: LD_VAR 0 1
8879: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8880: LD_INT 0
8882: PPUSH
// if p2 = stream_mode then
8883: LD_VAR 0 2
8887: PUSH
8888: LD_INT 100
8890: EQUAL
8891: IFFALSE 9894
// begin if not StreamModeActive then
8893: LD_EXP 53
8897: NOT
8898: IFFALSE 8908
// StreamModeActive := true ;
8900: LD_ADDR_EXP 53
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// if p3 = 0 then
8908: LD_VAR 0 3
8912: PUSH
8913: LD_INT 0
8915: EQUAL
8916: IFFALSE 8922
// InitStreamMode ;
8918: CALL 10100 0 0
// if p3 = 1 then
8922: LD_VAR 0 3
8926: PUSH
8927: LD_INT 1
8929: EQUAL
8930: IFFALSE 8940
// sRocket := true ;
8932: LD_ADDR_EXP 58
8936: PUSH
8937: LD_INT 1
8939: ST_TO_ADDR
// if p3 = 2 then
8940: LD_VAR 0 3
8944: PUSH
8945: LD_INT 2
8947: EQUAL
8948: IFFALSE 8958
// sSpeed := true ;
8950: LD_ADDR_EXP 57
8954: PUSH
8955: LD_INT 1
8957: ST_TO_ADDR
// if p3 = 3 then
8958: LD_VAR 0 3
8962: PUSH
8963: LD_INT 3
8965: EQUAL
8966: IFFALSE 8976
// sEngine := true ;
8968: LD_ADDR_EXP 59
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
// if p3 = 4 then
8976: LD_VAR 0 3
8980: PUSH
8981: LD_INT 4
8983: EQUAL
8984: IFFALSE 8994
// sSpec := true ;
8986: LD_ADDR_EXP 56
8990: PUSH
8991: LD_INT 1
8993: ST_TO_ADDR
// if p3 = 5 then
8994: LD_VAR 0 3
8998: PUSH
8999: LD_INT 5
9001: EQUAL
9002: IFFALSE 9012
// sLevel := true ;
9004: LD_ADDR_EXP 60
9008: PUSH
9009: LD_INT 1
9011: ST_TO_ADDR
// if p3 = 6 then
9012: LD_VAR 0 3
9016: PUSH
9017: LD_INT 6
9019: EQUAL
9020: IFFALSE 9030
// sArmoury := true ;
9022: LD_ADDR_EXP 61
9026: PUSH
9027: LD_INT 1
9029: ST_TO_ADDR
// if p3 = 7 then
9030: LD_VAR 0 3
9034: PUSH
9035: LD_INT 7
9037: EQUAL
9038: IFFALSE 9048
// sRadar := true ;
9040: LD_ADDR_EXP 62
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// if p3 = 8 then
9048: LD_VAR 0 3
9052: PUSH
9053: LD_INT 8
9055: EQUAL
9056: IFFALSE 9066
// sBunker := true ;
9058: LD_ADDR_EXP 63
9062: PUSH
9063: LD_INT 1
9065: ST_TO_ADDR
// if p3 = 9 then
9066: LD_VAR 0 3
9070: PUSH
9071: LD_INT 9
9073: EQUAL
9074: IFFALSE 9084
// sHack := true ;
9076: LD_ADDR_EXP 64
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// if p3 = 10 then
9084: LD_VAR 0 3
9088: PUSH
9089: LD_INT 10
9091: EQUAL
9092: IFFALSE 9102
// sFire := true ;
9094: LD_ADDR_EXP 65
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// if p3 = 11 then
9102: LD_VAR 0 3
9106: PUSH
9107: LD_INT 11
9109: EQUAL
9110: IFFALSE 9120
// sRefresh := true ;
9112: LD_ADDR_EXP 66
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// if p3 = 12 then
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 12
9127: EQUAL
9128: IFFALSE 9138
// sExp := true ;
9130: LD_ADDR_EXP 67
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// if p3 = 13 then
9138: LD_VAR 0 3
9142: PUSH
9143: LD_INT 13
9145: EQUAL
9146: IFFALSE 9156
// sDepot := true ;
9148: LD_ADDR_EXP 68
9152: PUSH
9153: LD_INT 1
9155: ST_TO_ADDR
// if p3 = 14 then
9156: LD_VAR 0 3
9160: PUSH
9161: LD_INT 14
9163: EQUAL
9164: IFFALSE 9174
// sFlag := true ;
9166: LD_ADDR_EXP 69
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// if p3 = 15 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 15
9181: EQUAL
9182: IFFALSE 9192
// sKamikadze := true ;
9184: LD_ADDR_EXP 77
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// if p3 = 16 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 16
9199: EQUAL
9200: IFFALSE 9210
// sTroll := true ;
9202: LD_ADDR_EXP 78
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if p3 = 17 then
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 17
9217: EQUAL
9218: IFFALSE 9228
// sSlow := true ;
9220: LD_ADDR_EXP 79
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// if p3 = 18 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 18
9235: EQUAL
9236: IFFALSE 9246
// sLack := true ;
9238: LD_ADDR_EXP 80
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
// if p3 = 19 then
9246: LD_VAR 0 3
9250: PUSH
9251: LD_INT 19
9253: EQUAL
9254: IFFALSE 9264
// sTank := true ;
9256: LD_ADDR_EXP 82
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// if p3 = 20 then
9264: LD_VAR 0 3
9268: PUSH
9269: LD_INT 20
9271: EQUAL
9272: IFFALSE 9282
// sRemote := true ;
9274: LD_ADDR_EXP 83
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// if p3 = 21 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 21
9289: EQUAL
9290: IFFALSE 9300
// sPowell := true ;
9292: LD_ADDR_EXP 84
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// if p3 = 22 then
9300: LD_VAR 0 3
9304: PUSH
9305: LD_INT 22
9307: EQUAL
9308: IFFALSE 9318
// sTeleport := true ;
9310: LD_ADDR_EXP 87
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// if p3 = 23 then
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 23
9325: EQUAL
9326: IFFALSE 9336
// sOilTower := true ;
9328: LD_ADDR_EXP 89
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// if p3 = 24 then
9336: LD_VAR 0 3
9340: PUSH
9341: LD_INT 24
9343: EQUAL
9344: IFFALSE 9354
// sShovel := true ;
9346: LD_ADDR_EXP 90
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// if p3 = 25 then
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 25
9361: EQUAL
9362: IFFALSE 9372
// sSheik := true ;
9364: LD_ADDR_EXP 91
9368: PUSH
9369: LD_INT 1
9371: ST_TO_ADDR
// if p3 = 26 then
9372: LD_VAR 0 3
9376: PUSH
9377: LD_INT 26
9379: EQUAL
9380: IFFALSE 9390
// sEarthquake := true ;
9382: LD_ADDR_EXP 93
9386: PUSH
9387: LD_INT 1
9389: ST_TO_ADDR
// if p3 = 27 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 27
9397: EQUAL
9398: IFFALSE 9408
// sAI := true ;
9400: LD_ADDR_EXP 94
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if p3 = 28 then
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 28
9415: EQUAL
9416: IFFALSE 9426
// sCargo := true ;
9418: LD_ADDR_EXP 97
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// if p3 = 29 then
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 29
9433: EQUAL
9434: IFFALSE 9444
// sDLaser := true ;
9436: LD_ADDR_EXP 98
9440: PUSH
9441: LD_INT 1
9443: ST_TO_ADDR
// if p3 = 30 then
9444: LD_VAR 0 3
9448: PUSH
9449: LD_INT 30
9451: EQUAL
9452: IFFALSE 9462
// sExchange := true ;
9454: LD_ADDR_EXP 99
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// if p3 = 31 then
9462: LD_VAR 0 3
9466: PUSH
9467: LD_INT 31
9469: EQUAL
9470: IFFALSE 9480
// sFac := true ;
9472: LD_ADDR_EXP 100
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// if p3 = 32 then
9480: LD_VAR 0 3
9484: PUSH
9485: LD_INT 32
9487: EQUAL
9488: IFFALSE 9498
// sPower := true ;
9490: LD_ADDR_EXP 101
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// if p3 = 33 then
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 33
9505: EQUAL
9506: IFFALSE 9516
// sRandom := true ;
9508: LD_ADDR_EXP 102
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// if p3 = 34 then
9516: LD_VAR 0 3
9520: PUSH
9521: LD_INT 34
9523: EQUAL
9524: IFFALSE 9534
// sShield := true ;
9526: LD_ADDR_EXP 103
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// if p3 = 35 then
9534: LD_VAR 0 3
9538: PUSH
9539: LD_INT 35
9541: EQUAL
9542: IFFALSE 9552
// sTime := true ;
9544: LD_ADDR_EXP 104
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// if p3 = 36 then
9552: LD_VAR 0 3
9556: PUSH
9557: LD_INT 36
9559: EQUAL
9560: IFFALSE 9570
// sTools := true ;
9562: LD_ADDR_EXP 105
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// if p3 = 101 then
9570: LD_VAR 0 3
9574: PUSH
9575: LD_INT 101
9577: EQUAL
9578: IFFALSE 9588
// sSold := true ;
9580: LD_ADDR_EXP 70
9584: PUSH
9585: LD_INT 1
9587: ST_TO_ADDR
// if p3 = 102 then
9588: LD_VAR 0 3
9592: PUSH
9593: LD_INT 102
9595: EQUAL
9596: IFFALSE 9606
// sDiff := true ;
9598: LD_ADDR_EXP 71
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// if p3 = 103 then
9606: LD_VAR 0 3
9610: PUSH
9611: LD_INT 103
9613: EQUAL
9614: IFFALSE 9624
// sFog := true ;
9616: LD_ADDR_EXP 74
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// if p3 = 104 then
9624: LD_VAR 0 3
9628: PUSH
9629: LD_INT 104
9631: EQUAL
9632: IFFALSE 9642
// sReset := true ;
9634: LD_ADDR_EXP 75
9638: PUSH
9639: LD_INT 1
9641: ST_TO_ADDR
// if p3 = 105 then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_INT 105
9649: EQUAL
9650: IFFALSE 9660
// sSun := true ;
9652: LD_ADDR_EXP 76
9656: PUSH
9657: LD_INT 1
9659: ST_TO_ADDR
// if p3 = 106 then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 106
9667: EQUAL
9668: IFFALSE 9678
// sTiger := true ;
9670: LD_ADDR_EXP 72
9674: PUSH
9675: LD_INT 1
9677: ST_TO_ADDR
// if p3 = 107 then
9678: LD_VAR 0 3
9682: PUSH
9683: LD_INT 107
9685: EQUAL
9686: IFFALSE 9696
// sBomb := true ;
9688: LD_ADDR_EXP 73
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// if p3 = 108 then
9696: LD_VAR 0 3
9700: PUSH
9701: LD_INT 108
9703: EQUAL
9704: IFFALSE 9714
// sWound := true ;
9706: LD_ADDR_EXP 81
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// if p3 = 109 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 109
9721: EQUAL
9722: IFFALSE 9732
// sBetray := true ;
9724: LD_ADDR_EXP 85
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// if p3 = 110 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 110
9739: EQUAL
9740: IFFALSE 9750
// sContamin := true ;
9742: LD_ADDR_EXP 86
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// if p3 = 111 then
9750: LD_VAR 0 3
9754: PUSH
9755: LD_INT 111
9757: EQUAL
9758: IFFALSE 9768
// sOil := true ;
9760: LD_ADDR_EXP 88
9764: PUSH
9765: LD_INT 1
9767: ST_TO_ADDR
// if p3 = 112 then
9768: LD_VAR 0 3
9772: PUSH
9773: LD_INT 112
9775: EQUAL
9776: IFFALSE 9786
// sStu := true ;
9778: LD_ADDR_EXP 92
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// if p3 = 113 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 113
9793: EQUAL
9794: IFFALSE 9804
// sBazooka := true ;
9796: LD_ADDR_EXP 95
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// if p3 = 114 then
9804: LD_VAR 0 3
9808: PUSH
9809: LD_INT 114
9811: EQUAL
9812: IFFALSE 9822
// sMortar := true ;
9814: LD_ADDR_EXP 96
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// if p3 = 115 then
9822: LD_VAR 0 3
9826: PUSH
9827: LD_INT 115
9829: EQUAL
9830: IFFALSE 9840
// sRanger := true ;
9832: LD_ADDR_EXP 106
9836: PUSH
9837: LD_INT 1
9839: ST_TO_ADDR
// if p3 = 116 then
9840: LD_VAR 0 3
9844: PUSH
9845: LD_INT 116
9847: EQUAL
9848: IFFALSE 9858
// sComputer := true ;
9850: LD_ADDR_EXP 107
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// if p3 = 117 then
9858: LD_VAR 0 3
9862: PUSH
9863: LD_INT 117
9865: EQUAL
9866: IFFALSE 9876
// s30 := true ;
9868: LD_ADDR_EXP 108
9872: PUSH
9873: LD_INT 1
9875: ST_TO_ADDR
// if p3 = 118 then
9876: LD_VAR 0 3
9880: PUSH
9881: LD_INT 118
9883: EQUAL
9884: IFFALSE 9894
// s60 := true ;
9886: LD_ADDR_EXP 109
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// end ; if p2 = hack_mode then
9894: LD_VAR 0 2
9898: PUSH
9899: LD_INT 101
9901: EQUAL
9902: IFFALSE 10030
// begin case p3 of 1 :
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: DOUBLE
9912: EQUAL
9913: IFTRUE 9917
9915: GO 9924
9917: POP
// hHackUnlimitedResources ; 2 :
9918: CALL 22293 0 0
9922: GO 10030
9924: LD_INT 2
9926: DOUBLE
9927: EQUAL
9928: IFTRUE 9932
9930: GO 9939
9932: POP
// hHackSetLevel10 ; 3 :
9933: CALL 22426 0 0
9937: GO 10030
9939: LD_INT 3
9941: DOUBLE
9942: EQUAL
9943: IFTRUE 9947
9945: GO 9954
9947: POP
// hHackSetLevel10YourUnits ; 4 :
9948: CALL 22511 0 0
9952: GO 10030
9954: LD_INT 4
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 9969
9962: POP
// hHackInvincible ; 5 :
9963: CALL 22959 0 0
9967: GO 10030
9969: LD_INT 5
9971: DOUBLE
9972: EQUAL
9973: IFTRUE 9977
9975: GO 9984
9977: POP
// hHackInvisible ; 6 :
9978: CALL 23070 0 0
9982: GO 10030
9984: LD_INT 6
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 9999
9992: POP
// hHackChangeYourSide ; 7 :
9993: CALL 23127 0 0
9997: GO 10030
9999: LD_INT 7
10001: DOUBLE
10002: EQUAL
10003: IFTRUE 10007
10005: GO 10014
10007: POP
// hHackChangeUnitSide ; 8 :
10008: CALL 23169 0 0
10012: GO 10030
10014: LD_INT 8
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10029
10022: POP
// hHackFog ; end ;
10023: CALL 23270 0 0
10027: GO 10030
10029: POP
// end ; if p2 = game_save_mode then
10030: LD_VAR 0 2
10034: PUSH
10035: LD_INT 102
10037: EQUAL
10038: IFFALSE 10095
// begin if p3 = 1 then
10040: LD_VAR 0 3
10044: PUSH
10045: LD_INT 1
10047: EQUAL
10048: IFFALSE 10060
// globalGameSaveCounter := p4 ;
10050: LD_ADDR_EXP 52
10054: PUSH
10055: LD_VAR 0 4
10059: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10060: LD_VAR 0 3
10064: PUSH
10065: LD_INT 2
10067: EQUAL
10068: IFFALSE 10076
10070: PUSH
10071: LD_EXP 52
10075: AND
10076: IFFALSE 10095
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10078: LD_STRING setGameSaveCounter(
10080: PUSH
10081: LD_EXP 52
10085: STR
10086: PUSH
10087: LD_STRING )
10089: STR
10090: PPUSH
10091: CALL_OW 559
// end ; end ;
10095: LD_VAR 0 7
10099: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10100: LD_INT 0
10102: PPUSH
// streamModeActive := false ;
10103: LD_ADDR_EXP 53
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// normalCounter := 36 ;
10111: LD_ADDR_EXP 54
10115: PUSH
10116: LD_INT 36
10118: ST_TO_ADDR
// hardcoreCounter := 18 ;
10119: LD_ADDR_EXP 55
10123: PUSH
10124: LD_INT 18
10126: ST_TO_ADDR
// sRocket := false ;
10127: LD_ADDR_EXP 58
10131: PUSH
10132: LD_INT 0
10134: ST_TO_ADDR
// sSpeed := false ;
10135: LD_ADDR_EXP 57
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// sEngine := false ;
10143: LD_ADDR_EXP 59
10147: PUSH
10148: LD_INT 0
10150: ST_TO_ADDR
// sSpec := false ;
10151: LD_ADDR_EXP 56
10155: PUSH
10156: LD_INT 0
10158: ST_TO_ADDR
// sLevel := false ;
10159: LD_ADDR_EXP 60
10163: PUSH
10164: LD_INT 0
10166: ST_TO_ADDR
// sArmoury := false ;
10167: LD_ADDR_EXP 61
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// sRadar := false ;
10175: LD_ADDR_EXP 62
10179: PUSH
10180: LD_INT 0
10182: ST_TO_ADDR
// sBunker := false ;
10183: LD_ADDR_EXP 63
10187: PUSH
10188: LD_INT 0
10190: ST_TO_ADDR
// sHack := false ;
10191: LD_ADDR_EXP 64
10195: PUSH
10196: LD_INT 0
10198: ST_TO_ADDR
// sFire := false ;
10199: LD_ADDR_EXP 65
10203: PUSH
10204: LD_INT 0
10206: ST_TO_ADDR
// sRefresh := false ;
10207: LD_ADDR_EXP 66
10211: PUSH
10212: LD_INT 0
10214: ST_TO_ADDR
// sExp := false ;
10215: LD_ADDR_EXP 67
10219: PUSH
10220: LD_INT 0
10222: ST_TO_ADDR
// sDepot := false ;
10223: LD_ADDR_EXP 68
10227: PUSH
10228: LD_INT 0
10230: ST_TO_ADDR
// sFlag := false ;
10231: LD_ADDR_EXP 69
10235: PUSH
10236: LD_INT 0
10238: ST_TO_ADDR
// sKamikadze := false ;
10239: LD_ADDR_EXP 77
10243: PUSH
10244: LD_INT 0
10246: ST_TO_ADDR
// sTroll := false ;
10247: LD_ADDR_EXP 78
10251: PUSH
10252: LD_INT 0
10254: ST_TO_ADDR
// sSlow := false ;
10255: LD_ADDR_EXP 79
10259: PUSH
10260: LD_INT 0
10262: ST_TO_ADDR
// sLack := false ;
10263: LD_ADDR_EXP 80
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// sTank := false ;
10271: LD_ADDR_EXP 82
10275: PUSH
10276: LD_INT 0
10278: ST_TO_ADDR
// sRemote := false ;
10279: LD_ADDR_EXP 83
10283: PUSH
10284: LD_INT 0
10286: ST_TO_ADDR
// sPowell := false ;
10287: LD_ADDR_EXP 84
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// sTeleport := false ;
10295: LD_ADDR_EXP 87
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// sOilTower := false ;
10303: LD_ADDR_EXP 89
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// sShovel := false ;
10311: LD_ADDR_EXP 90
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// sSheik := false ;
10319: LD_ADDR_EXP 91
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// sEarthquake := false ;
10327: LD_ADDR_EXP 93
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// sAI := false ;
10335: LD_ADDR_EXP 94
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// sCargo := false ;
10343: LD_ADDR_EXP 97
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// sDLaser := false ;
10351: LD_ADDR_EXP 98
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// sExchange := false ;
10359: LD_ADDR_EXP 99
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// sFac := false ;
10367: LD_ADDR_EXP 100
10371: PUSH
10372: LD_INT 0
10374: ST_TO_ADDR
// sPower := false ;
10375: LD_ADDR_EXP 101
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// sRandom := false ;
10383: LD_ADDR_EXP 102
10387: PUSH
10388: LD_INT 0
10390: ST_TO_ADDR
// sShield := false ;
10391: LD_ADDR_EXP 103
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// sTime := false ;
10399: LD_ADDR_EXP 104
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// sTools := false ;
10407: LD_ADDR_EXP 105
10411: PUSH
10412: LD_INT 0
10414: ST_TO_ADDR
// sSold := false ;
10415: LD_ADDR_EXP 70
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// sDiff := false ;
10423: LD_ADDR_EXP 71
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// sFog := false ;
10431: LD_ADDR_EXP 74
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// sReset := false ;
10439: LD_ADDR_EXP 75
10443: PUSH
10444: LD_INT 0
10446: ST_TO_ADDR
// sSun := false ;
10447: LD_ADDR_EXP 76
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// sTiger := false ;
10455: LD_ADDR_EXP 72
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// sBomb := false ;
10463: LD_ADDR_EXP 73
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// sWound := false ;
10471: LD_ADDR_EXP 81
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// sBetray := false ;
10479: LD_ADDR_EXP 85
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// sContamin := false ;
10487: LD_ADDR_EXP 86
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// sOil := false ;
10495: LD_ADDR_EXP 88
10499: PUSH
10500: LD_INT 0
10502: ST_TO_ADDR
// sStu := false ;
10503: LD_ADDR_EXP 92
10507: PUSH
10508: LD_INT 0
10510: ST_TO_ADDR
// sBazooka := false ;
10511: LD_ADDR_EXP 95
10515: PUSH
10516: LD_INT 0
10518: ST_TO_ADDR
// sMortar := false ;
10519: LD_ADDR_EXP 96
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
// sRanger := false ;
10527: LD_ADDR_EXP 106
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// sComputer := false ;
10535: LD_ADDR_EXP 107
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// s30 := false ;
10543: LD_ADDR_EXP 108
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// s60 := false ;
10551: LD_ADDR_EXP 109
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// end ;
10559: LD_VAR 0 1
10563: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
10571: PPUSH
10572: PPUSH
// result := [ ] ;
10573: LD_ADDR_VAR 0 2
10577: PUSH
10578: EMPTY
10579: ST_TO_ADDR
// if campaign_id = 1 then
10580: LD_OWVAR 69
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: IFFALSE 13754
// begin case mission_number of 1 :
10590: LD_OWVAR 70
10594: PUSH
10595: LD_INT 1
10597: DOUBLE
10598: EQUAL
10599: IFTRUE 10603
10601: GO 10679
10603: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10604: LD_ADDR_VAR 0 2
10608: PUSH
10609: LD_INT 2
10611: PUSH
10612: LD_INT 4
10614: PUSH
10615: LD_INT 11
10617: PUSH
10618: LD_INT 12
10620: PUSH
10621: LD_INT 15
10623: PUSH
10624: LD_INT 16
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_INT 23
10632: PUSH
10633: LD_INT 26
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 101
10649: PUSH
10650: LD_INT 102
10652: PUSH
10653: LD_INT 106
10655: PUSH
10656: LD_INT 116
10658: PUSH
10659: LD_INT 117
10661: PUSH
10662: LD_INT 118
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: ST_TO_ADDR
10677: GO 13752
10679: LD_INT 2
10681: DOUBLE
10682: EQUAL
10683: IFTRUE 10687
10685: GO 10771
10687: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 2
10695: PUSH
10696: LD_INT 4
10698: PUSH
10699: LD_INT 11
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 15
10707: PUSH
10708: LD_INT 16
10710: PUSH
10711: LD_INT 22
10713: PUSH
10714: LD_INT 23
10716: PUSH
10717: LD_INT 26
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 101
10733: PUSH
10734: LD_INT 102
10736: PUSH
10737: LD_INT 105
10739: PUSH
10740: LD_INT 106
10742: PUSH
10743: LD_INT 108
10745: PUSH
10746: LD_INT 116
10748: PUSH
10749: LD_INT 117
10751: PUSH
10752: LD_INT 118
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: ST_TO_ADDR
10769: GO 13752
10771: LD_INT 3
10773: DOUBLE
10774: EQUAL
10775: IFTRUE 10779
10777: GO 10867
10779: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: LD_INT 4
10790: PUSH
10791: LD_INT 5
10793: PUSH
10794: LD_INT 11
10796: PUSH
10797: LD_INT 12
10799: PUSH
10800: LD_INT 15
10802: PUSH
10803: LD_INT 16
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_INT 26
10811: PUSH
10812: LD_INT 36
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 101
10829: PUSH
10830: LD_INT 102
10832: PUSH
10833: LD_INT 105
10835: PUSH
10836: LD_INT 106
10838: PUSH
10839: LD_INT 108
10841: PUSH
10842: LD_INT 116
10844: PUSH
10845: LD_INT 117
10847: PUSH
10848: LD_INT 118
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: ST_TO_ADDR
10865: GO 13752
10867: LD_INT 4
10869: DOUBLE
10870: EQUAL
10871: IFTRUE 10875
10873: GO 10971
10875: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10876: LD_ADDR_VAR 0 2
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: LD_INT 4
10886: PUSH
10887: LD_INT 5
10889: PUSH
10890: LD_INT 8
10892: PUSH
10893: LD_INT 11
10895: PUSH
10896: LD_INT 12
10898: PUSH
10899: LD_INT 15
10901: PUSH
10902: LD_INT 16
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_INT 23
10910: PUSH
10911: LD_INT 26
10913: PUSH
10914: LD_INT 36
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 101
10933: PUSH
10934: LD_INT 102
10936: PUSH
10937: LD_INT 105
10939: PUSH
10940: LD_INT 106
10942: PUSH
10943: LD_INT 108
10945: PUSH
10946: LD_INT 116
10948: PUSH
10949: LD_INT 117
10951: PUSH
10952: LD_INT 118
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: ST_TO_ADDR
10969: GO 13752
10971: LD_INT 5
10973: DOUBLE
10974: EQUAL
10975: IFTRUE 10979
10977: GO 11091
10979: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: LD_INT 5
10993: PUSH
10994: LD_INT 6
10996: PUSH
10997: LD_INT 8
10999: PUSH
11000: LD_INT 11
11002: PUSH
11003: LD_INT 12
11005: PUSH
11006: LD_INT 15
11008: PUSH
11009: LD_INT 16
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_INT 23
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 26
11023: PUSH
11024: LD_INT 36
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 101
11045: PUSH
11046: LD_INT 102
11048: PUSH
11049: LD_INT 105
11051: PUSH
11052: LD_INT 106
11054: PUSH
11055: LD_INT 108
11057: PUSH
11058: LD_INT 109
11060: PUSH
11061: LD_INT 112
11063: PUSH
11064: LD_INT 116
11066: PUSH
11067: LD_INT 117
11069: PUSH
11070: LD_INT 118
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: ST_TO_ADDR
11089: GO 13752
11091: LD_INT 6
11093: DOUBLE
11094: EQUAL
11095: IFTRUE 11099
11097: GO 11231
11099: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: LD_INT 6
11116: PUSH
11117: LD_INT 8
11119: PUSH
11120: LD_INT 11
11122: PUSH
11123: LD_INT 12
11125: PUSH
11126: LD_INT 15
11128: PUSH
11129: LD_INT 16
11131: PUSH
11132: LD_INT 20
11134: PUSH
11135: LD_INT 21
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 23
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 26
11149: PUSH
11150: LD_INT 30
11152: PUSH
11153: LD_INT 31
11155: PUSH
11156: LD_INT 32
11158: PUSH
11159: LD_INT 36
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 101
11185: PUSH
11186: LD_INT 102
11188: PUSH
11189: LD_INT 105
11191: PUSH
11192: LD_INT 106
11194: PUSH
11195: LD_INT 108
11197: PUSH
11198: LD_INT 109
11200: PUSH
11201: LD_INT 112
11203: PUSH
11204: LD_INT 116
11206: PUSH
11207: LD_INT 117
11209: PUSH
11210: LD_INT 118
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: ST_TO_ADDR
11229: GO 13752
11231: LD_INT 7
11233: DOUBLE
11234: EQUAL
11235: IFTRUE 11239
11237: GO 11351
11239: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11240: LD_ADDR_VAR 0 2
11244: PUSH
11245: LD_INT 2
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 7
11256: PUSH
11257: LD_INT 11
11259: PUSH
11260: LD_INT 12
11262: PUSH
11263: LD_INT 15
11265: PUSH
11266: LD_INT 16
11268: PUSH
11269: LD_INT 20
11271: PUSH
11272: LD_INT 21
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 23
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 26
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 101
11305: PUSH
11306: LD_INT 102
11308: PUSH
11309: LD_INT 103
11311: PUSH
11312: LD_INT 105
11314: PUSH
11315: LD_INT 106
11317: PUSH
11318: LD_INT 108
11320: PUSH
11321: LD_INT 112
11323: PUSH
11324: LD_INT 116
11326: PUSH
11327: LD_INT 117
11329: PUSH
11330: LD_INT 118
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: ST_TO_ADDR
11349: GO 13752
11351: LD_INT 8
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 11499
11359: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11360: LD_ADDR_VAR 0 2
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 4
11370: PUSH
11371: LD_INT 5
11373: PUSH
11374: LD_INT 6
11376: PUSH
11377: LD_INT 7
11379: PUSH
11380: LD_INT 8
11382: PUSH
11383: LD_INT 11
11385: PUSH
11386: LD_INT 12
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 20
11397: PUSH
11398: LD_INT 21
11400: PUSH
11401: LD_INT 22
11403: PUSH
11404: LD_INT 23
11406: PUSH
11407: LD_INT 25
11409: PUSH
11410: LD_INT 26
11412: PUSH
11413: LD_INT 30
11415: PUSH
11416: LD_INT 31
11418: PUSH
11419: LD_INT 32
11421: PUSH
11422: LD_INT 36
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 101
11449: PUSH
11450: LD_INT 102
11452: PUSH
11453: LD_INT 103
11455: PUSH
11456: LD_INT 105
11458: PUSH
11459: LD_INT 106
11461: PUSH
11462: LD_INT 108
11464: PUSH
11465: LD_INT 109
11467: PUSH
11468: LD_INT 112
11470: PUSH
11471: LD_INT 116
11473: PUSH
11474: LD_INT 117
11476: PUSH
11477: LD_INT 118
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: ST_TO_ADDR
11497: GO 13752
11499: LD_INT 9
11501: DOUBLE
11502: EQUAL
11503: IFTRUE 11507
11505: GO 11655
11507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11508: LD_ADDR_VAR 0 2
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: LD_INT 4
11518: PUSH
11519: LD_INT 5
11521: PUSH
11522: LD_INT 6
11524: PUSH
11525: LD_INT 7
11527: PUSH
11528: LD_INT 8
11530: PUSH
11531: LD_INT 11
11533: PUSH
11534: LD_INT 12
11536: PUSH
11537: LD_INT 15
11539: PUSH
11540: LD_INT 16
11542: PUSH
11543: LD_INT 20
11545: PUSH
11546: LD_INT 21
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 23
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 26
11560: PUSH
11561: LD_INT 28
11563: PUSH
11564: LD_INT 30
11566: PUSH
11567: LD_INT 31
11569: PUSH
11570: LD_INT 32
11572: PUSH
11573: LD_INT 36
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 101
11601: PUSH
11602: LD_INT 102
11604: PUSH
11605: LD_INT 103
11607: PUSH
11608: LD_INT 105
11610: PUSH
11611: LD_INT 106
11613: PUSH
11614: LD_INT 108
11616: PUSH
11617: LD_INT 109
11619: PUSH
11620: LD_INT 112
11622: PUSH
11623: LD_INT 114
11625: PUSH
11626: LD_INT 116
11628: PUSH
11629: LD_INT 117
11631: PUSH
11632: LD_INT 118
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: ST_TO_ADDR
11653: GO 13752
11655: LD_INT 10
11657: DOUBLE
11658: EQUAL
11659: IFTRUE 11663
11661: GO 11859
11663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11664: LD_ADDR_VAR 0 2
11668: PUSH
11669: LD_INT 2
11671: PUSH
11672: LD_INT 4
11674: PUSH
11675: LD_INT 5
11677: PUSH
11678: LD_INT 6
11680: PUSH
11681: LD_INT 7
11683: PUSH
11684: LD_INT 8
11686: PUSH
11687: LD_INT 9
11689: PUSH
11690: LD_INT 10
11692: PUSH
11693: LD_INT 11
11695: PUSH
11696: LD_INT 12
11698: PUSH
11699: LD_INT 13
11701: PUSH
11702: LD_INT 14
11704: PUSH
11705: LD_INT 15
11707: PUSH
11708: LD_INT 16
11710: PUSH
11711: LD_INT 17
11713: PUSH
11714: LD_INT 18
11716: PUSH
11717: LD_INT 19
11719: PUSH
11720: LD_INT 20
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 22
11728: PUSH
11729: LD_INT 23
11731: PUSH
11732: LD_INT 24
11734: PUSH
11735: LD_INT 25
11737: PUSH
11738: LD_INT 26
11740: PUSH
11741: LD_INT 28
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: LD_INT 31
11749: PUSH
11750: LD_INT 32
11752: PUSH
11753: LD_INT 36
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 101
11789: PUSH
11790: LD_INT 102
11792: PUSH
11793: LD_INT 103
11795: PUSH
11796: LD_INT 104
11798: PUSH
11799: LD_INT 105
11801: PUSH
11802: LD_INT 106
11804: PUSH
11805: LD_INT 107
11807: PUSH
11808: LD_INT 108
11810: PUSH
11811: LD_INT 109
11813: PUSH
11814: LD_INT 110
11816: PUSH
11817: LD_INT 111
11819: PUSH
11820: LD_INT 112
11822: PUSH
11823: LD_INT 114
11825: PUSH
11826: LD_INT 116
11828: PUSH
11829: LD_INT 117
11831: PUSH
11832: LD_INT 118
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
11857: GO 13752
11859: LD_INT 11
11861: DOUBLE
11862: EQUAL
11863: IFTRUE 11867
11865: GO 12071
11867: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11868: LD_ADDR_VAR 0 2
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: LD_INT 4
11881: PUSH
11882: LD_INT 5
11884: PUSH
11885: LD_INT 6
11887: PUSH
11888: LD_INT 7
11890: PUSH
11891: LD_INT 8
11893: PUSH
11894: LD_INT 9
11896: PUSH
11897: LD_INT 10
11899: PUSH
11900: LD_INT 11
11902: PUSH
11903: LD_INT 12
11905: PUSH
11906: LD_INT 13
11908: PUSH
11909: LD_INT 14
11911: PUSH
11912: LD_INT 15
11914: PUSH
11915: LD_INT 16
11917: PUSH
11918: LD_INT 17
11920: PUSH
11921: LD_INT 18
11923: PUSH
11924: LD_INT 19
11926: PUSH
11927: LD_INT 20
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_INT 23
11938: PUSH
11939: LD_INT 24
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 26
11947: PUSH
11948: LD_INT 28
11950: PUSH
11951: LD_INT 30
11953: PUSH
11954: LD_INT 31
11956: PUSH
11957: LD_INT 32
11959: PUSH
11960: LD_INT 34
11962: PUSH
11963: LD_INT 36
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 101
12001: PUSH
12002: LD_INT 102
12004: PUSH
12005: LD_INT 103
12007: PUSH
12008: LD_INT 104
12010: PUSH
12011: LD_INT 105
12013: PUSH
12014: LD_INT 106
12016: PUSH
12017: LD_INT 107
12019: PUSH
12020: LD_INT 108
12022: PUSH
12023: LD_INT 109
12025: PUSH
12026: LD_INT 110
12028: PUSH
12029: LD_INT 111
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: LD_INT 114
12037: PUSH
12038: LD_INT 116
12040: PUSH
12041: LD_INT 117
12043: PUSH
12044: LD_INT 118
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: ST_TO_ADDR
12069: GO 13752
12071: LD_INT 12
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12299
12079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 3
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: LD_INT 5
12099: PUSH
12100: LD_INT 6
12102: PUSH
12103: LD_INT 7
12105: PUSH
12106: LD_INT 8
12108: PUSH
12109: LD_INT 9
12111: PUSH
12112: LD_INT 10
12114: PUSH
12115: LD_INT 11
12117: PUSH
12118: LD_INT 12
12120: PUSH
12121: LD_INT 13
12123: PUSH
12124: LD_INT 14
12126: PUSH
12127: LD_INT 15
12129: PUSH
12130: LD_INT 16
12132: PUSH
12133: LD_INT 17
12135: PUSH
12136: LD_INT 18
12138: PUSH
12139: LD_INT 19
12141: PUSH
12142: LD_INT 20
12144: PUSH
12145: LD_INT 21
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 23
12153: PUSH
12154: LD_INT 24
12156: PUSH
12157: LD_INT 25
12159: PUSH
12160: LD_INT 26
12162: PUSH
12163: LD_INT 27
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: LD_INT 31
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 33
12180: PUSH
12181: LD_INT 34
12183: PUSH
12184: LD_INT 36
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 101
12225: PUSH
12226: LD_INT 102
12228: PUSH
12229: LD_INT 103
12231: PUSH
12232: LD_INT 104
12234: PUSH
12235: LD_INT 105
12237: PUSH
12238: LD_INT 106
12240: PUSH
12241: LD_INT 107
12243: PUSH
12244: LD_INT 108
12246: PUSH
12247: LD_INT 109
12249: PUSH
12250: LD_INT 110
12252: PUSH
12253: LD_INT 111
12255: PUSH
12256: LD_INT 112
12258: PUSH
12259: LD_INT 113
12261: PUSH
12262: LD_INT 114
12264: PUSH
12265: LD_INT 116
12267: PUSH
12268: LD_INT 117
12270: PUSH
12271: LD_INT 118
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: ST_TO_ADDR
12297: GO 13752
12299: LD_INT 13
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12515
12307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12308: LD_ADDR_VAR 0 2
12312: PUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 2
12318: PUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: LD_INT 5
12327: PUSH
12328: LD_INT 8
12330: PUSH
12331: LD_INT 9
12333: PUSH
12334: LD_INT 10
12336: PUSH
12337: LD_INT 11
12339: PUSH
12340: LD_INT 12
12342: PUSH
12343: LD_INT 14
12345: PUSH
12346: LD_INT 15
12348: PUSH
12349: LD_INT 16
12351: PUSH
12352: LD_INT 17
12354: PUSH
12355: LD_INT 18
12357: PUSH
12358: LD_INT 19
12360: PUSH
12361: LD_INT 20
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 22
12369: PUSH
12370: LD_INT 23
12372: PUSH
12373: LD_INT 24
12375: PUSH
12376: LD_INT 25
12378: PUSH
12379: LD_INT 26
12381: PUSH
12382: LD_INT 27
12384: PUSH
12385: LD_INT 28
12387: PUSH
12388: LD_INT 30
12390: PUSH
12391: LD_INT 31
12393: PUSH
12394: LD_INT 32
12396: PUSH
12397: LD_INT 33
12399: PUSH
12400: LD_INT 34
12402: PUSH
12403: LD_INT 36
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 101
12441: PUSH
12442: LD_INT 102
12444: PUSH
12445: LD_INT 103
12447: PUSH
12448: LD_INT 104
12450: PUSH
12451: LD_INT 105
12453: PUSH
12454: LD_INT 106
12456: PUSH
12457: LD_INT 107
12459: PUSH
12460: LD_INT 108
12462: PUSH
12463: LD_INT 109
12465: PUSH
12466: LD_INT 110
12468: PUSH
12469: LD_INT 111
12471: PUSH
12472: LD_INT 112
12474: PUSH
12475: LD_INT 113
12477: PUSH
12478: LD_INT 114
12480: PUSH
12481: LD_INT 116
12483: PUSH
12484: LD_INT 117
12486: PUSH
12487: LD_INT 118
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: ST_TO_ADDR
12513: GO 13752
12515: LD_INT 14
12517: DOUBLE
12518: EQUAL
12519: IFTRUE 12523
12521: GO 12747
12523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: LD_INT 6
12546: PUSH
12547: LD_INT 7
12549: PUSH
12550: LD_INT 8
12552: PUSH
12553: LD_INT 9
12555: PUSH
12556: LD_INT 10
12558: PUSH
12559: LD_INT 11
12561: PUSH
12562: LD_INT 12
12564: PUSH
12565: LD_INT 13
12567: PUSH
12568: LD_INT 14
12570: PUSH
12571: LD_INT 15
12573: PUSH
12574: LD_INT 16
12576: PUSH
12577: LD_INT 17
12579: PUSH
12580: LD_INT 18
12582: PUSH
12583: LD_INT 19
12585: PUSH
12586: LD_INT 20
12588: PUSH
12589: LD_INT 21
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 23
12597: PUSH
12598: LD_INT 24
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 26
12606: PUSH
12607: LD_INT 27
12609: PUSH
12610: LD_INT 28
12612: PUSH
12613: LD_INT 29
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 31
12621: PUSH
12622: LD_INT 32
12624: PUSH
12625: LD_INT 33
12627: PUSH
12628: LD_INT 34
12630: PUSH
12631: LD_INT 36
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 101
12673: PUSH
12674: LD_INT 102
12676: PUSH
12677: LD_INT 103
12679: PUSH
12680: LD_INT 104
12682: PUSH
12683: LD_INT 105
12685: PUSH
12686: LD_INT 106
12688: PUSH
12689: LD_INT 107
12691: PUSH
12692: LD_INT 108
12694: PUSH
12695: LD_INT 109
12697: PUSH
12698: LD_INT 110
12700: PUSH
12701: LD_INT 111
12703: PUSH
12704: LD_INT 112
12706: PUSH
12707: LD_INT 113
12709: PUSH
12710: LD_INT 114
12712: PUSH
12713: LD_INT 116
12715: PUSH
12716: LD_INT 117
12718: PUSH
12719: LD_INT 118
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: ST_TO_ADDR
12745: GO 13752
12747: LD_INT 15
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12979
12755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: LD_INT 3
12769: PUSH
12770: LD_INT 4
12772: PUSH
12773: LD_INT 5
12775: PUSH
12776: LD_INT 6
12778: PUSH
12779: LD_INT 7
12781: PUSH
12782: LD_INT 8
12784: PUSH
12785: LD_INT 9
12787: PUSH
12788: LD_INT 10
12790: PUSH
12791: LD_INT 11
12793: PUSH
12794: LD_INT 12
12796: PUSH
12797: LD_INT 13
12799: PUSH
12800: LD_INT 14
12802: PUSH
12803: LD_INT 15
12805: PUSH
12806: LD_INT 16
12808: PUSH
12809: LD_INT 17
12811: PUSH
12812: LD_INT 18
12814: PUSH
12815: LD_INT 19
12817: PUSH
12818: LD_INT 20
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: LD_INT 25
12835: PUSH
12836: LD_INT 26
12838: PUSH
12839: LD_INT 27
12841: PUSH
12842: LD_INT 28
12844: PUSH
12845: LD_INT 29
12847: PUSH
12848: LD_INT 30
12850: PUSH
12851: LD_INT 31
12853: PUSH
12854: LD_INT 32
12856: PUSH
12857: LD_INT 33
12859: PUSH
12860: LD_INT 34
12862: PUSH
12863: LD_INT 36
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 101
12905: PUSH
12906: LD_INT 102
12908: PUSH
12909: LD_INT 103
12911: PUSH
12912: LD_INT 104
12914: PUSH
12915: LD_INT 105
12917: PUSH
12918: LD_INT 106
12920: PUSH
12921: LD_INT 107
12923: PUSH
12924: LD_INT 108
12926: PUSH
12927: LD_INT 109
12929: PUSH
12930: LD_INT 110
12932: PUSH
12933: LD_INT 111
12935: PUSH
12936: LD_INT 112
12938: PUSH
12939: LD_INT 113
12941: PUSH
12942: LD_INT 114
12944: PUSH
12945: LD_INT 116
12947: PUSH
12948: LD_INT 117
12950: PUSH
12951: LD_INT 118
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: ST_TO_ADDR
12977: GO 13752
12979: LD_INT 16
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 13123
12987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 4
12998: PUSH
12999: LD_INT 5
13001: PUSH
13002: LD_INT 7
13004: PUSH
13005: LD_INT 11
13007: PUSH
13008: LD_INT 12
13010: PUSH
13011: LD_INT 15
13013: PUSH
13014: LD_INT 16
13016: PUSH
13017: LD_INT 20
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_INT 23
13028: PUSH
13029: LD_INT 25
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: LD_INT 31
13040: PUSH
13041: LD_INT 32
13043: PUSH
13044: LD_INT 33
13046: PUSH
13047: LD_INT 34
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 101
13073: PUSH
13074: LD_INT 102
13076: PUSH
13077: LD_INT 103
13079: PUSH
13080: LD_INT 106
13082: PUSH
13083: LD_INT 108
13085: PUSH
13086: LD_INT 112
13088: PUSH
13089: LD_INT 113
13091: PUSH
13092: LD_INT 114
13094: PUSH
13095: LD_INT 116
13097: PUSH
13098: LD_INT 117
13100: PUSH
13101: LD_INT 118
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: ST_TO_ADDR
13121: GO 13752
13123: LD_INT 17
13125: DOUBLE
13126: EQUAL
13127: IFTRUE 13131
13129: GO 13355
13131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 3
13145: PUSH
13146: LD_INT 4
13148: PUSH
13149: LD_INT 5
13151: PUSH
13152: LD_INT 6
13154: PUSH
13155: LD_INT 7
13157: PUSH
13158: LD_INT 8
13160: PUSH
13161: LD_INT 9
13163: PUSH
13164: LD_INT 10
13166: PUSH
13167: LD_INT 11
13169: PUSH
13170: LD_INT 12
13172: PUSH
13173: LD_INT 13
13175: PUSH
13176: LD_INT 14
13178: PUSH
13179: LD_INT 15
13181: PUSH
13182: LD_INT 16
13184: PUSH
13185: LD_INT 17
13187: PUSH
13188: LD_INT 18
13190: PUSH
13191: LD_INT 19
13193: PUSH
13194: LD_INT 20
13196: PUSH
13197: LD_INT 21
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: LD_INT 24
13208: PUSH
13209: LD_INT 25
13211: PUSH
13212: LD_INT 26
13214: PUSH
13215: LD_INT 27
13217: PUSH
13218: LD_INT 28
13220: PUSH
13221: LD_INT 29
13223: PUSH
13224: LD_INT 30
13226: PUSH
13227: LD_INT 31
13229: PUSH
13230: LD_INT 32
13232: PUSH
13233: LD_INT 33
13235: PUSH
13236: LD_INT 34
13238: PUSH
13239: LD_INT 36
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 101
13281: PUSH
13282: LD_INT 102
13284: PUSH
13285: LD_INT 103
13287: PUSH
13288: LD_INT 104
13290: PUSH
13291: LD_INT 105
13293: PUSH
13294: LD_INT 106
13296: PUSH
13297: LD_INT 107
13299: PUSH
13300: LD_INT 108
13302: PUSH
13303: LD_INT 109
13305: PUSH
13306: LD_INT 110
13308: PUSH
13309: LD_INT 111
13311: PUSH
13312: LD_INT 112
13314: PUSH
13315: LD_INT 113
13317: PUSH
13318: LD_INT 114
13320: PUSH
13321: LD_INT 116
13323: PUSH
13324: LD_INT 117
13326: PUSH
13327: LD_INT 118
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: ST_TO_ADDR
13353: GO 13752
13355: LD_INT 18
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13511
13363: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13364: LD_ADDR_VAR 0 2
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: LD_INT 4
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: LD_INT 7
13380: PUSH
13381: LD_INT 11
13383: PUSH
13384: LD_INT 12
13386: PUSH
13387: LD_INT 15
13389: PUSH
13390: LD_INT 16
13392: PUSH
13393: LD_INT 20
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 26
13410: PUSH
13411: LD_INT 30
13413: PUSH
13414: LD_INT 31
13416: PUSH
13417: LD_INT 32
13419: PUSH
13420: LD_INT 33
13422: PUSH
13423: LD_INT 34
13425: PUSH
13426: LD_INT 35
13428: PUSH
13429: LD_INT 36
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 101
13457: PUSH
13458: LD_INT 102
13460: PUSH
13461: LD_INT 103
13463: PUSH
13464: LD_INT 106
13466: PUSH
13467: LD_INT 108
13469: PUSH
13470: LD_INT 112
13472: PUSH
13473: LD_INT 113
13475: PUSH
13476: LD_INT 114
13478: PUSH
13479: LD_INT 115
13481: PUSH
13482: LD_INT 116
13484: PUSH
13485: LD_INT 117
13487: PUSH
13488: LD_INT 118
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: ST_TO_ADDR
13509: GO 13752
13511: LD_INT 19
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13751
13519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_INT 1
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 3
13533: PUSH
13534: LD_INT 4
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: LD_INT 6
13542: PUSH
13543: LD_INT 7
13545: PUSH
13546: LD_INT 8
13548: PUSH
13549: LD_INT 9
13551: PUSH
13552: LD_INT 10
13554: PUSH
13555: LD_INT 11
13557: PUSH
13558: LD_INT 12
13560: PUSH
13561: LD_INT 13
13563: PUSH
13564: LD_INT 14
13566: PUSH
13567: LD_INT 15
13569: PUSH
13570: LD_INT 16
13572: PUSH
13573: LD_INT 17
13575: PUSH
13576: LD_INT 18
13578: PUSH
13579: LD_INT 19
13581: PUSH
13582: LD_INT 20
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 23
13593: PUSH
13594: LD_INT 24
13596: PUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 26
13602: PUSH
13603: LD_INT 27
13605: PUSH
13606: LD_INT 28
13608: PUSH
13609: LD_INT 29
13611: PUSH
13612: LD_INT 30
13614: PUSH
13615: LD_INT 31
13617: PUSH
13618: LD_INT 32
13620: PUSH
13621: LD_INT 33
13623: PUSH
13624: LD_INT 34
13626: PUSH
13627: LD_INT 35
13629: PUSH
13630: LD_INT 36
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 101
13673: PUSH
13674: LD_INT 102
13676: PUSH
13677: LD_INT 103
13679: PUSH
13680: LD_INT 104
13682: PUSH
13683: LD_INT 105
13685: PUSH
13686: LD_INT 106
13688: PUSH
13689: LD_INT 107
13691: PUSH
13692: LD_INT 108
13694: PUSH
13695: LD_INT 109
13697: PUSH
13698: LD_INT 110
13700: PUSH
13701: LD_INT 111
13703: PUSH
13704: LD_INT 112
13706: PUSH
13707: LD_INT 113
13709: PUSH
13710: LD_INT 114
13712: PUSH
13713: LD_INT 115
13715: PUSH
13716: LD_INT 116
13718: PUSH
13719: LD_INT 117
13721: PUSH
13722: LD_INT 118
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: ST_TO_ADDR
13749: GO 13752
13751: POP
// end else
13752: GO 13983
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13754: LD_ADDR_VAR 0 2
13758: PUSH
13759: LD_INT 1
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 3
13767: PUSH
13768: LD_INT 4
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: LD_INT 6
13776: PUSH
13777: LD_INT 7
13779: PUSH
13780: LD_INT 8
13782: PUSH
13783: LD_INT 9
13785: PUSH
13786: LD_INT 10
13788: PUSH
13789: LD_INT 11
13791: PUSH
13792: LD_INT 12
13794: PUSH
13795: LD_INT 13
13797: PUSH
13798: LD_INT 14
13800: PUSH
13801: LD_INT 15
13803: PUSH
13804: LD_INT 16
13806: PUSH
13807: LD_INT 17
13809: PUSH
13810: LD_INT 18
13812: PUSH
13813: LD_INT 19
13815: PUSH
13816: LD_INT 20
13818: PUSH
13819: LD_INT 21
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 23
13827: PUSH
13828: LD_INT 24
13830: PUSH
13831: LD_INT 25
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 27
13839: PUSH
13840: LD_INT 28
13842: PUSH
13843: LD_INT 29
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 31
13851: PUSH
13852: LD_INT 32
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 34
13860: PUSH
13861: LD_INT 35
13863: PUSH
13864: LD_INT 36
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 101
13907: PUSH
13908: LD_INT 102
13910: PUSH
13911: LD_INT 103
13913: PUSH
13914: LD_INT 104
13916: PUSH
13917: LD_INT 105
13919: PUSH
13920: LD_INT 106
13922: PUSH
13923: LD_INT 107
13925: PUSH
13926: LD_INT 108
13928: PUSH
13929: LD_INT 109
13931: PUSH
13932: LD_INT 110
13934: PUSH
13935: LD_INT 111
13937: PUSH
13938: LD_INT 112
13940: PUSH
13941: LD_INT 113
13943: PUSH
13944: LD_INT 114
13946: PUSH
13947: LD_INT 115
13949: PUSH
13950: LD_INT 116
13952: PUSH
13953: LD_INT 117
13955: PUSH
13956: LD_INT 118
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: ST_TO_ADDR
// if result then
13983: LD_VAR 0 2
13987: IFFALSE 14773
// begin normal :=  ;
13989: LD_ADDR_VAR 0 5
13993: PUSH
13994: LD_STRING 
13996: ST_TO_ADDR
// hardcore :=  ;
13997: LD_ADDR_VAR 0 6
14001: PUSH
14002: LD_STRING 
14004: ST_TO_ADDR
// active :=  ;
14005: LD_ADDR_VAR 0 7
14009: PUSH
14010: LD_STRING 
14012: ST_TO_ADDR
// for i = 1 to normalCounter do
14013: LD_ADDR_VAR 0 8
14017: PUSH
14018: DOUBLE
14019: LD_INT 1
14021: DEC
14022: ST_TO_ADDR
14023: LD_EXP 54
14027: PUSH
14028: FOR_TO
14029: IFFALSE 14130
// begin tmp := 0 ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_STRING 0
14038: ST_TO_ADDR
// if result [ 1 ] then
14039: LD_VAR 0 2
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: IFFALSE 14112
// if result [ 1 ] [ 1 ] = i then
14049: LD_VAR 0 2
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: PUSH
14062: LD_VAR 0 8
14066: EQUAL
14067: IFFALSE 14112
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14069: LD_ADDR_VAR 0 2
14073: PUSH
14074: LD_VAR 0 2
14078: PPUSH
14079: LD_INT 1
14081: PPUSH
14082: LD_VAR 0 2
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_INT 1
14093: PPUSH
14094: CALL_OW 3
14098: PPUSH
14099: CALL_OW 1
14103: ST_TO_ADDR
// tmp := 1 ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_STRING 1
14111: ST_TO_ADDR
// end ; normal := normal & tmp ;
14112: LD_ADDR_VAR 0 5
14116: PUSH
14117: LD_VAR 0 5
14121: PUSH
14122: LD_VAR 0 3
14126: STR
14127: ST_TO_ADDR
// end ;
14128: GO 14028
14130: POP
14131: POP
// for i = 1 to hardcoreCounter do
14132: LD_ADDR_VAR 0 8
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_EXP 55
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14253
// begin tmp := 0 ;
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_STRING 0
14157: ST_TO_ADDR
// if result [ 2 ] then
14158: LD_VAR 0 2
14162: PUSH
14163: LD_INT 2
14165: ARRAY
14166: IFFALSE 14235
// if result [ 2 ] [ 1 ] = 100 + i then
14168: LD_VAR 0 2
14172: PUSH
14173: LD_INT 2
14175: ARRAY
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PUSH
14181: LD_INT 100
14183: PUSH
14184: LD_VAR 0 8
14188: PLUS
14189: EQUAL
14190: IFFALSE 14235
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: LD_VAR 0 2
14201: PPUSH
14202: LD_INT 2
14204: PPUSH
14205: LD_VAR 0 2
14209: PUSH
14210: LD_INT 2
14212: ARRAY
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 3
14221: PPUSH
14222: CALL_OW 1
14226: ST_TO_ADDR
// tmp := 1 ;
14227: LD_ADDR_VAR 0 3
14231: PUSH
14232: LD_STRING 1
14234: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14235: LD_ADDR_VAR 0 6
14239: PUSH
14240: LD_VAR 0 6
14244: PUSH
14245: LD_VAR 0 3
14249: STR
14250: ST_TO_ADDR
// end ;
14251: GO 14147
14253: POP
14254: POP
// if isGameLoad then
14255: LD_VAR 0 1
14259: IFFALSE 14734
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14261: LD_ADDR_VAR 0 4
14265: PUSH
14266: LD_EXP 58
14270: PUSH
14271: LD_EXP 57
14275: PUSH
14276: LD_EXP 59
14280: PUSH
14281: LD_EXP 56
14285: PUSH
14286: LD_EXP 60
14290: PUSH
14291: LD_EXP 61
14295: PUSH
14296: LD_EXP 62
14300: PUSH
14301: LD_EXP 63
14305: PUSH
14306: LD_EXP 64
14310: PUSH
14311: LD_EXP 65
14315: PUSH
14316: LD_EXP 66
14320: PUSH
14321: LD_EXP 67
14325: PUSH
14326: LD_EXP 68
14330: PUSH
14331: LD_EXP 69
14335: PUSH
14336: LD_EXP 77
14340: PUSH
14341: LD_EXP 78
14345: PUSH
14346: LD_EXP 79
14350: PUSH
14351: LD_EXP 80
14355: PUSH
14356: LD_EXP 82
14360: PUSH
14361: LD_EXP 83
14365: PUSH
14366: LD_EXP 84
14370: PUSH
14371: LD_EXP 87
14375: PUSH
14376: LD_EXP 89
14380: PUSH
14381: LD_EXP 90
14385: PUSH
14386: LD_EXP 91
14390: PUSH
14391: LD_EXP 93
14395: PUSH
14396: LD_EXP 94
14400: PUSH
14401: LD_EXP 97
14405: PUSH
14406: LD_EXP 98
14410: PUSH
14411: LD_EXP 99
14415: PUSH
14416: LD_EXP 100
14420: PUSH
14421: LD_EXP 101
14425: PUSH
14426: LD_EXP 102
14430: PUSH
14431: LD_EXP 103
14435: PUSH
14436: LD_EXP 104
14440: PUSH
14441: LD_EXP 105
14445: PUSH
14446: LD_EXP 70
14450: PUSH
14451: LD_EXP 71
14455: PUSH
14456: LD_EXP 74
14460: PUSH
14461: LD_EXP 75
14465: PUSH
14466: LD_EXP 76
14470: PUSH
14471: LD_EXP 72
14475: PUSH
14476: LD_EXP 73
14480: PUSH
14481: LD_EXP 81
14485: PUSH
14486: LD_EXP 85
14490: PUSH
14491: LD_EXP 86
14495: PUSH
14496: LD_EXP 88
14500: PUSH
14501: LD_EXP 92
14505: PUSH
14506: LD_EXP 95
14510: PUSH
14511: LD_EXP 96
14515: PUSH
14516: LD_EXP 106
14520: PUSH
14521: LD_EXP 107
14525: PUSH
14526: LD_EXP 108
14530: PUSH
14531: LD_EXP 109
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: ST_TO_ADDR
// tmp :=  ;
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_STRING 
14599: ST_TO_ADDR
// for i = 1 to normalCounter do
14600: LD_ADDR_VAR 0 8
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_EXP 54
14614: PUSH
14615: FOR_TO
14616: IFFALSE 14652
// begin if flags [ i ] then
14618: LD_VAR 0 4
14622: PUSH
14623: LD_VAR 0 8
14627: ARRAY
14628: IFFALSE 14650
// tmp := tmp & i & ; ;
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: LD_VAR 0 8
14644: STR
14645: PUSH
14646: LD_STRING ;
14648: STR
14649: ST_TO_ADDR
// end ;
14650: GO 14615
14652: POP
14653: POP
// for i = 1 to hardcoreCounter do
14654: LD_ADDR_VAR 0 8
14658: PUSH
14659: DOUBLE
14660: LD_INT 1
14662: DEC
14663: ST_TO_ADDR
14664: LD_EXP 55
14668: PUSH
14669: FOR_TO
14670: IFFALSE 14716
// begin if flags [ normalCounter + i ] then
14672: LD_VAR 0 4
14676: PUSH
14677: LD_EXP 54
14681: PUSH
14682: LD_VAR 0 8
14686: PLUS
14687: ARRAY
14688: IFFALSE 14714
// tmp := tmp & ( 100 + i ) & ; ;
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_VAR 0 3
14699: PUSH
14700: LD_INT 100
14702: PUSH
14703: LD_VAR 0 8
14707: PLUS
14708: STR
14709: PUSH
14710: LD_STRING ;
14712: STR
14713: ST_TO_ADDR
// end ;
14714: GO 14669
14716: POP
14717: POP
// if tmp then
14718: LD_VAR 0 3
14722: IFFALSE 14734
// active := tmp ;
14724: LD_ADDR_VAR 0 7
14728: PUSH
14729: LD_VAR 0 3
14733: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14734: LD_STRING getStreamItemsFromMission("
14736: PUSH
14737: LD_VAR 0 5
14741: STR
14742: PUSH
14743: LD_STRING ","
14745: STR
14746: PUSH
14747: LD_VAR 0 6
14751: STR
14752: PUSH
14753: LD_STRING ","
14755: STR
14756: PUSH
14757: LD_VAR 0 7
14761: STR
14762: PUSH
14763: LD_STRING ")
14765: STR
14766: PPUSH
14767: CALL_OW 559
// end else
14771: GO 14780
// ToLua ( getStreamItemsFromMission("","","") ) ;
14773: LD_STRING getStreamItemsFromMission("","","")
14775: PPUSH
14776: CALL_OW 559
// end ;
14780: LD_VAR 0 2
14784: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14785: LD_EXP 53
14789: IFFALSE 14797
14791: PUSH
14792: LD_EXP 58
14796: AND
14797: IFFALSE 14921
14799: GO 14801
14801: DISABLE
14802: LD_INT 0
14804: PPUSH
14805: PPUSH
// begin enable ;
14806: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_OWVAR 2
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: LD_INT 34
14829: PUSH
14830: LD_INT 7
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 34
14839: PUSH
14840: LD_INT 45
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 34
14849: PUSH
14850: LD_INT 28
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 34
14859: PUSH
14860: LD_INT 47
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PPUSH
14878: CALL_OW 69
14882: ST_TO_ADDR
// if not tmp then
14883: LD_VAR 0 2
14887: NOT
14888: IFFALSE 14892
// exit ;
14890: GO 14921
// for i in tmp do
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: FOR_IN
14903: IFFALSE 14919
// begin SetLives ( i , 0 ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_INT 0
14912: PPUSH
14913: CALL_OW 234
// end ;
14917: GO 14902
14919: POP
14920: POP
// end ;
14921: PPOPN 2
14923: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14924: LD_EXP 53
14928: IFFALSE 14936
14930: PUSH
14931: LD_EXP 59
14935: AND
14936: IFFALSE 15020
14938: GO 14940
14940: DISABLE
14941: LD_INT 0
14943: PPUSH
14944: PPUSH
// begin enable ;
14945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14946: LD_ADDR_VAR 0 2
14950: PUSH
14951: LD_INT 22
14953: PUSH
14954: LD_OWVAR 2
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 32
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: ST_TO_ADDR
// if not tmp then
14982: LD_VAR 0 2
14986: NOT
14987: IFFALSE 14991
// exit ;
14989: GO 15020
// for i in tmp do
14991: LD_ADDR_VAR 0 1
14995: PUSH
14996: LD_VAR 0 2
15000: PUSH
15001: FOR_IN
15002: IFFALSE 15018
// begin SetLives ( i , 0 ) ;
15004: LD_VAR 0 1
15008: PPUSH
15009: LD_INT 0
15011: PPUSH
15012: CALL_OW 234
// end ;
15016: GO 15001
15018: POP
15019: POP
// end ;
15020: PPOPN 2
15022: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15023: LD_EXP 53
15027: IFFALSE 15035
15029: PUSH
15030: LD_EXP 56
15034: AND
15035: IFFALSE 15128
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
// begin enable ;
15043: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15044: LD_ADDR_VAR 0 1
15048: PUSH
15049: LD_INT 22
15051: PUSH
15052: LD_OWVAR 2
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 2
15063: PUSH
15064: LD_INT 25
15066: PUSH
15067: LD_INT 5
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 9
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 25
15086: PUSH
15087: LD_INT 8
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 69
15108: PUSH
15109: FOR_IN
15110: IFFALSE 15126
// begin SetClass ( i , 1 ) ;
15112: LD_VAR 0 1
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 336
// end ;
15124: GO 15109
15126: POP
15127: POP
// end ;
15128: PPOPN 1
15130: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15131: LD_EXP 53
15135: IFFALSE 15143
15137: PUSH
15138: LD_EXP 57
15142: AND
15143: IFFALSE 15155
15145: PUSH
15146: LD_OWVAR 65
15150: PUSH
15151: LD_INT 7
15153: LESS
15154: AND
15155: IFFALSE 15169
15157: GO 15159
15159: DISABLE
// begin enable ;
15160: ENABLE
// game_speed := 7 ;
15161: LD_ADDR_OWVAR 65
15165: PUSH
15166: LD_INT 7
15168: ST_TO_ADDR
// end ;
15169: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15170: LD_EXP 53
15174: IFFALSE 15182
15176: PUSH
15177: LD_EXP 60
15181: AND
15182: IFFALSE 15384
15184: GO 15186
15186: DISABLE
15187: LD_INT 0
15189: PPUSH
15190: PPUSH
15191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15192: LD_ADDR_VAR 0 3
15196: PUSH
15197: LD_INT 81
15199: PUSH
15200: LD_OWVAR 2
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: ST_TO_ADDR
// if not tmp then
15228: LD_VAR 0 3
15232: NOT
15233: IFFALSE 15237
// exit ;
15235: GO 15384
// if tmp > 5 then
15237: LD_VAR 0 3
15241: PUSH
15242: LD_INT 5
15244: GREATER
15245: IFFALSE 15257
// k := 5 else
15247: LD_ADDR_VAR 0 2
15251: PUSH
15252: LD_INT 5
15254: ST_TO_ADDR
15255: GO 15267
// k := tmp ;
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: LD_VAR 0 3
15266: ST_TO_ADDR
// for i := 1 to k do
15267: LD_ADDR_VAR 0 1
15271: PUSH
15272: DOUBLE
15273: LD_INT 1
15275: DEC
15276: ST_TO_ADDR
15277: LD_VAR 0 2
15281: PUSH
15282: FOR_TO
15283: IFFALSE 15382
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15285: LD_VAR 0 3
15289: PUSH
15290: LD_VAR 0 1
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 1
15300: PUSH
15301: LD_INT 4
15303: MOD
15304: PUSH
15305: LD_INT 1
15307: PLUS
15308: PPUSH
15309: CALL_OW 259
15313: PUSH
15314: LD_INT 10
15316: LESS
15317: IFFALSE 15380
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15319: LD_VAR 0 3
15323: PUSH
15324: LD_VAR 0 1
15328: ARRAY
15329: PPUSH
15330: LD_VAR 0 1
15334: PUSH
15335: LD_INT 4
15337: MOD
15338: PUSH
15339: LD_INT 1
15341: PLUS
15342: PPUSH
15343: LD_VAR 0 3
15347: PUSH
15348: LD_VAR 0 1
15352: ARRAY
15353: PPUSH
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 4
15361: MOD
15362: PUSH
15363: LD_INT 1
15365: PLUS
15366: PPUSH
15367: CALL_OW 259
15371: PUSH
15372: LD_INT 1
15374: PLUS
15375: PPUSH
15376: CALL_OW 237
15380: GO 15282
15382: POP
15383: POP
// end ;
15384: PPOPN 3
15386: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15387: LD_EXP 53
15391: IFFALSE 15399
15393: PUSH
15394: LD_EXP 61
15398: AND
15399: IFFALSE 15419
15401: GO 15403
15403: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15404: LD_INT 4
15406: PPUSH
15407: LD_OWVAR 2
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: CALL_OW 324
15419: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15420: LD_EXP 53
15424: IFFALSE 15432
15426: PUSH
15427: LD_EXP 90
15431: AND
15432: IFFALSE 15452
15434: GO 15436
15436: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15437: LD_INT 19
15439: PPUSH
15440: LD_OWVAR 2
15444: PPUSH
15445: LD_INT 0
15447: PPUSH
15448: CALL_OW 324
15452: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15453: LD_EXP 53
15457: IFFALSE 15465
15459: PUSH
15460: LD_EXP 62
15464: AND
15465: IFFALSE 15567
15467: GO 15469
15469: DISABLE
15470: LD_INT 0
15472: PPUSH
15473: PPUSH
// begin enable ;
15474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_INT 22
15482: PUSH
15483: LD_OWVAR 2
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: LD_INT 34
15497: PUSH
15498: LD_INT 11
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 34
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: ST_TO_ADDR
// if not tmp then
15529: LD_VAR 0 2
15533: NOT
15534: IFFALSE 15538
// exit ;
15536: GO 15567
// for i in tmp do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: LD_VAR 0 2
15547: PUSH
15548: FOR_IN
15549: IFFALSE 15565
// begin SetLives ( i , 0 ) ;
15551: LD_VAR 0 1
15555: PPUSH
15556: LD_INT 0
15558: PPUSH
15559: CALL_OW 234
// end ;
15563: GO 15548
15565: POP
15566: POP
// end ;
15567: PPOPN 2
15569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15570: LD_EXP 53
15574: IFFALSE 15582
15576: PUSH
15577: LD_EXP 63
15581: AND
15582: IFFALSE 15602
15584: GO 15586
15586: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15587: LD_INT 32
15589: PPUSH
15590: LD_OWVAR 2
15594: PPUSH
15595: LD_INT 0
15597: PPUSH
15598: CALL_OW 324
15602: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15603: LD_EXP 53
15607: IFFALSE 15615
15609: PUSH
15610: LD_EXP 64
15614: AND
15615: IFFALSE 15798
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15625: LD_ADDR_VAR 0 2
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_OWVAR 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 33
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PPUSH
15656: CALL_OW 69
15660: ST_TO_ADDR
// if not tmp then
15661: LD_VAR 0 2
15665: NOT
15666: IFFALSE 15670
// exit ;
15668: GO 15798
// side := 0 ;
15670: LD_ADDR_VAR 0 3
15674: PUSH
15675: LD_INT 0
15677: ST_TO_ADDR
// for i := 1 to 8 do
15678: LD_ADDR_VAR 0 1
15682: PUSH
15683: DOUBLE
15684: LD_INT 1
15686: DEC
15687: ST_TO_ADDR
15688: LD_INT 8
15690: PUSH
15691: FOR_TO
15692: IFFALSE 15742
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15694: LD_OWVAR 2
15698: PUSH
15699: LD_VAR 0 1
15703: NONEQUAL
15704: IFFALSE 15726
15706: PUSH
15707: LD_OWVAR 2
15711: PPUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 81
15721: PUSH
15722: LD_INT 2
15724: EQUAL
15725: AND
15726: IFFALSE 15740
// begin side := i ;
15728: LD_ADDR_VAR 0 3
15732: PUSH
15733: LD_VAR 0 1
15737: ST_TO_ADDR
// break ;
15738: GO 15742
// end ;
15740: GO 15691
15742: POP
15743: POP
// if not side then
15744: LD_VAR 0 3
15748: NOT
15749: IFFALSE 15753
// exit ;
15751: GO 15798
// for i := 1 to tmp do
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: DOUBLE
15759: LD_INT 1
15761: DEC
15762: ST_TO_ADDR
15763: LD_VAR 0 2
15767: PUSH
15768: FOR_TO
15769: IFFALSE 15796
// if Prob ( 60 ) then
15771: LD_INT 60
15773: PPUSH
15774: CALL_OW 13
15778: IFFALSE 15794
// SetSide ( i , side ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: LD_VAR 0 3
15789: PPUSH
15790: CALL_OW 235
15794: GO 15768
15796: POP
15797: POP
// end ;
15798: PPOPN 3
15800: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15801: LD_EXP 53
15805: IFFALSE 15813
15807: PUSH
15808: LD_EXP 66
15812: AND
15813: IFFALSE 15932
15815: GO 15817
15817: DISABLE
15818: LD_INT 0
15820: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15821: LD_ADDR_VAR 0 1
15825: PUSH
15826: LD_INT 22
15828: PUSH
15829: LD_OWVAR 2
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 21
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: LD_INT 23
15853: PUSH
15854: LD_INT 0
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: FOR_IN
15876: IFFALSE 15930
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15878: LD_VAR 0 1
15882: PPUSH
15883: CALL_OW 257
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 3
15896: PUSH
15897: LD_INT 4
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: IN
15906: IFFALSE 15928
// SetClass ( un , rand ( 1 , 4 ) ) ;
15908: LD_VAR 0 1
15912: PPUSH
15913: LD_INT 1
15915: PPUSH
15916: LD_INT 4
15918: PPUSH
15919: CALL_OW 12
15923: PPUSH
15924: CALL_OW 336
15928: GO 15875
15930: POP
15931: POP
// end ;
15932: PPOPN 1
15934: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15935: LD_EXP 53
15939: IFFALSE 15947
15941: PUSH
15942: LD_EXP 65
15946: AND
15947: IFFALSE 16026
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 1
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16026
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16000: LD_VAR 0 1
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL_OW 12
16017: ARRAY
16018: PPUSH
16019: LD_INT 100
16021: PPUSH
16022: CALL_OW 234
// end ;
16026: PPOPN 1
16028: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16029: LD_EXP 53
16033: IFFALSE 16041
16035: PUSH
16036: LD_EXP 67
16040: AND
16041: IFFALSE 16139
16043: GO 16045
16045: DISABLE
16046: LD_INT 0
16048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16049: LD_ADDR_VAR 0 1
16053: PUSH
16054: LD_INT 22
16056: PUSH
16057: LD_OWVAR 2
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 21
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: ST_TO_ADDR
// if not tmp then
16085: LD_VAR 0 1
16089: NOT
16090: IFFALSE 16094
// exit ;
16092: GO 16139
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16094: LD_VAR 0 1
16098: PUSH
16099: LD_INT 1
16101: PPUSH
16102: LD_VAR 0 1
16106: PPUSH
16107: CALL_OW 12
16111: ARRAY
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: LD_INT 4
16118: PPUSH
16119: CALL_OW 12
16123: PPUSH
16124: LD_INT 3000
16126: PPUSH
16127: LD_INT 9000
16129: PPUSH
16130: CALL_OW 12
16134: PPUSH
16135: CALL_OW 492
// end ;
16139: PPOPN 1
16141: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16142: LD_EXP 53
16146: IFFALSE 16154
16148: PUSH
16149: LD_EXP 68
16153: AND
16154: IFFALSE 16174
16156: GO 16158
16158: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16159: LD_INT 1
16161: PPUSH
16162: LD_OWVAR 2
16166: PPUSH
16167: LD_INT 0
16169: PPUSH
16170: CALL_OW 324
16174: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16175: LD_EXP 53
16179: IFFALSE 16187
16181: PUSH
16182: LD_EXP 69
16186: AND
16187: IFFALSE 16270
16189: GO 16191
16191: DISABLE
16192: LD_INT 0
16194: PPUSH
16195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_OWVAR 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 3
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PPUSH
16227: CALL_OW 69
16231: ST_TO_ADDR
// if not tmp then
16232: LD_VAR 0 2
16236: NOT
16237: IFFALSE 16241
// exit ;
16239: GO 16270
// for i in tmp do
16241: LD_ADDR_VAR 0 1
16245: PUSH
16246: LD_VAR 0 2
16250: PUSH
16251: FOR_IN
16252: IFFALSE 16268
// SetBLevel ( i , 10 ) ;
16254: LD_VAR 0 1
16258: PPUSH
16259: LD_INT 10
16261: PPUSH
16262: CALL_OW 241
16266: GO 16251
16268: POP
16269: POP
// end ;
16270: PPOPN 2
16272: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16273: LD_EXP 53
16277: IFFALSE 16285
16279: PUSH
16280: LD_EXP 70
16284: AND
16285: IFFALSE 16396
16287: GO 16289
16289: DISABLE
16290: LD_INT 0
16292: PPUSH
16293: PPUSH
16294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16295: LD_ADDR_VAR 0 3
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_OWVAR 2
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 25
16314: PUSH
16315: LD_INT 1
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: ST_TO_ADDR
// if not tmp then
16331: LD_VAR 0 3
16335: NOT
16336: IFFALSE 16340
// exit ;
16338: GO 16396
// un := tmp [ rand ( 1 , tmp ) ] ;
16340: LD_ADDR_VAR 0 2
16344: PUSH
16345: LD_VAR 0 3
16349: PUSH
16350: LD_INT 1
16352: PPUSH
16353: LD_VAR 0 3
16357: PPUSH
16358: CALL_OW 12
16362: ARRAY
16363: ST_TO_ADDR
// if Crawls ( un ) then
16364: LD_VAR 0 2
16368: PPUSH
16369: CALL_OW 318
16373: IFFALSE 16384
// ComWalk ( un ) ;
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16384: LD_VAR 0 2
16388: PPUSH
16389: LD_INT 5
16391: PPUSH
16392: CALL_OW 336
// end ;
16396: PPOPN 3
16398: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16399: LD_EXP 53
16403: IFFALSE 16411
16405: PUSH
16406: LD_EXP 71
16410: AND
16411: IFFALSE 16423
16413: PUSH
16414: LD_OWVAR 67
16418: PUSH
16419: LD_INT 4
16421: LESS
16422: AND
16423: IFFALSE 16442
16425: GO 16427
16427: DISABLE
// begin Difficulty := Difficulty + 1 ;
16428: LD_ADDR_OWVAR 67
16432: PUSH
16433: LD_OWVAR 67
16437: PUSH
16438: LD_INT 1
16440: PLUS
16441: ST_TO_ADDR
// end ;
16442: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16443: LD_EXP 53
16447: IFFALSE 16455
16449: PUSH
16450: LD_EXP 72
16454: AND
16455: IFFALSE 16558
16457: GO 16459
16459: DISABLE
16460: LD_INT 0
16462: PPUSH
// begin for i := 1 to 5 do
16463: LD_ADDR_VAR 0 1
16467: PUSH
16468: DOUBLE
16469: LD_INT 1
16471: DEC
16472: ST_TO_ADDR
16473: LD_INT 5
16475: PUSH
16476: FOR_TO
16477: IFFALSE 16556
// begin uc_nation := nation_nature ;
16479: LD_ADDR_OWVAR 21
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// uc_side := 0 ;
16487: LD_ADDR_OWVAR 20
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16495: LD_ADDR_OWVAR 29
16499: PUSH
16500: LD_INT 12
16502: PUSH
16503: LD_INT 12
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: ST_TO_ADDR
// hc_agressivity := 20 ;
16510: LD_ADDR_OWVAR 35
16514: PUSH
16515: LD_INT 20
16517: ST_TO_ADDR
// hc_class := class_tiger ;
16518: LD_ADDR_OWVAR 28
16522: PUSH
16523: LD_INT 14
16525: ST_TO_ADDR
// hc_gallery :=  ;
16526: LD_ADDR_OWVAR 33
16530: PUSH
16531: LD_STRING 
16533: ST_TO_ADDR
// hc_name :=  ;
16534: LD_ADDR_OWVAR 26
16538: PUSH
16539: LD_STRING 
16541: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16542: CALL_OW 44
16546: PPUSH
16547: LD_INT 0
16549: PPUSH
16550: CALL_OW 51
// end ;
16554: GO 16476
16556: POP
16557: POP
// end ;
16558: PPOPN 1
16560: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16561: LD_EXP 53
16565: IFFALSE 16573
16567: PUSH
16568: LD_EXP 73
16572: AND
16573: IFFALSE 16582
16575: GO 16577
16577: DISABLE
// StreamSibBomb ;
16578: CALL 16583 0 0
16582: END
// export function StreamSibBomb ; var i , x , y ; begin
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
16587: PPUSH
16588: PPUSH
// result := false ;
16589: LD_ADDR_VAR 0 1
16593: PUSH
16594: LD_INT 0
16596: ST_TO_ADDR
// for i := 1 to 16 do
16597: LD_ADDR_VAR 0 2
16601: PUSH
16602: DOUBLE
16603: LD_INT 1
16605: DEC
16606: ST_TO_ADDR
16607: LD_INT 16
16609: PUSH
16610: FOR_TO
16611: IFFALSE 16810
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: LD_INT 10
16620: PUSH
16621: LD_INT 20
16623: PUSH
16624: LD_INT 30
16626: PUSH
16627: LD_INT 40
16629: PUSH
16630: LD_INT 50
16632: PUSH
16633: LD_INT 60
16635: PUSH
16636: LD_INT 70
16638: PUSH
16639: LD_INT 80
16641: PUSH
16642: LD_INT 90
16644: PUSH
16645: LD_INT 100
16647: PUSH
16648: LD_INT 110
16650: PUSH
16651: LD_INT 120
16653: PUSH
16654: LD_INT 130
16656: PUSH
16657: LD_INT 140
16659: PUSH
16660: LD_INT 150
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: PPUSH
16683: LD_INT 15
16685: PPUSH
16686: CALL_OW 12
16690: ARRAY
16691: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16692: LD_ADDR_VAR 0 4
16696: PUSH
16697: LD_INT 10
16699: PUSH
16700: LD_INT 20
16702: PUSH
16703: LD_INT 30
16705: PUSH
16706: LD_INT 40
16708: PUSH
16709: LD_INT 50
16711: PUSH
16712: LD_INT 60
16714: PUSH
16715: LD_INT 70
16717: PUSH
16718: LD_INT 80
16720: PUSH
16721: LD_INT 90
16723: PUSH
16724: LD_INT 100
16726: PUSH
16727: LD_INT 110
16729: PUSH
16730: LD_INT 120
16732: PUSH
16733: LD_INT 130
16735: PUSH
16736: LD_INT 140
16738: PUSH
16739: LD_INT 150
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 1
16761: PPUSH
16762: LD_INT 15
16764: PPUSH
16765: CALL_OW 12
16769: ARRAY
16770: ST_TO_ADDR
// if ValidHex ( x , y ) then
16771: LD_VAR 0 3
16775: PPUSH
16776: LD_VAR 0 4
16780: PPUSH
16781: CALL_OW 488
16785: IFFALSE 16808
// begin result := [ x , y ] ;
16787: LD_ADDR_VAR 0 1
16791: PUSH
16792: LD_VAR 0 3
16796: PUSH
16797: LD_VAR 0 4
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: ST_TO_ADDR
// break ;
16806: GO 16810
// end ; end ;
16808: GO 16610
16810: POP
16811: POP
// if result then
16812: LD_VAR 0 1
16816: IFFALSE 16876
// begin ToLua ( playSibBomb() ) ;
16818: LD_STRING playSibBomb()
16820: PPUSH
16821: CALL_OW 559
// wait ( 0 0$14 ) ;
16825: LD_INT 490
16827: PPUSH
16828: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16832: LD_VAR 0 1
16836: PUSH
16837: LD_INT 1
16839: ARRAY
16840: PPUSH
16841: LD_VAR 0 1
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PPUSH
16850: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16854: LD_VAR 0 1
16858: PUSH
16859: LD_INT 1
16861: ARRAY
16862: PPUSH
16863: LD_VAR 0 1
16867: PUSH
16868: LD_INT 2
16870: ARRAY
16871: PPUSH
16872: CALL_OW 429
// end ; end ;
16876: LD_VAR 0 1
16880: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16881: LD_EXP 53
16885: IFFALSE 16893
16887: PUSH
16888: LD_EXP 75
16892: AND
16893: IFFALSE 16905
16895: GO 16897
16897: DISABLE
// YouLost (  ) ;
16898: LD_STRING 
16900: PPUSH
16901: CALL_OW 104
16905: END
// every 0 0$1 trigger StreamModeActive and sFog do
16906: LD_EXP 53
16910: IFFALSE 16918
16912: PUSH
16913: LD_EXP 74
16917: AND
16918: IFFALSE 16932
16920: GO 16922
16922: DISABLE
// FogOff ( your_side ) ;
16923: LD_OWVAR 2
16927: PPUSH
16928: CALL_OW 344
16932: END
// every 0 0$1 trigger StreamModeActive and sSun do
16933: LD_EXP 53
16937: IFFALSE 16945
16939: PUSH
16940: LD_EXP 76
16944: AND
16945: IFFALSE 16973
16947: GO 16949
16949: DISABLE
// begin solar_recharge_percent := 0 ;
16950: LD_ADDR_OWVAR 79
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16958: LD_INT 10500
16960: PPUSH
16961: CALL_OW 67
// solar_recharge_percent := 100 ;
16965: LD_ADDR_OWVAR 79
16969: PUSH
16970: LD_INT 100
16972: ST_TO_ADDR
// end ;
16973: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16974: LD_EXP 53
16978: IFFALSE 16986
16980: PUSH
16981: LD_EXP 77
16985: AND
16986: IFFALSE 17225
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
16995: PPUSH
// begin tmp := [ ] ;
16996: LD_ADDR_VAR 0 3
17000: PUSH
17001: EMPTY
17002: ST_TO_ADDR
// for i := 1 to 6 do
17003: LD_ADDR_VAR 0 1
17007: PUSH
17008: DOUBLE
17009: LD_INT 1
17011: DEC
17012: ST_TO_ADDR
17013: LD_INT 6
17015: PUSH
17016: FOR_TO
17017: IFFALSE 17122
// begin uc_nation := nation_nature ;
17019: LD_ADDR_OWVAR 21
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// uc_side := 0 ;
17027: LD_ADDR_OWVAR 20
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17035: LD_ADDR_OWVAR 29
17039: PUSH
17040: LD_INT 12
17042: PUSH
17043: LD_INT 12
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: ST_TO_ADDR
// hc_agressivity := 20 ;
17050: LD_ADDR_OWVAR 35
17054: PUSH
17055: LD_INT 20
17057: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17058: LD_ADDR_OWVAR 28
17062: PUSH
17063: LD_INT 17
17065: ST_TO_ADDR
// hc_gallery :=  ;
17066: LD_ADDR_OWVAR 33
17070: PUSH
17071: LD_STRING 
17073: ST_TO_ADDR
// hc_name :=  ;
17074: LD_ADDR_OWVAR 26
17078: PUSH
17079: LD_STRING 
17081: ST_TO_ADDR
// un := CreateHuman ;
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: CALL_OW 44
17091: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17092: LD_VAR 0 2
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 51
// tmp := tmp ^ un ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_VAR 0 2
17118: ADD
17119: ST_TO_ADDR
// end ;
17120: GO 17016
17122: POP
17123: POP
// repeat wait ( 0 0$1 ) ;
17124: LD_INT 35
17126: PPUSH
17127: CALL_OW 67
// for un in tmp do
17131: LD_ADDR_VAR 0 2
17135: PUSH
17136: LD_VAR 0 3
17140: PUSH
17141: FOR_IN
17142: IFFALSE 17216
// begin if IsDead ( un ) then
17144: LD_VAR 0 2
17148: PPUSH
17149: CALL_OW 301
17153: IFFALSE 17173
// begin tmp := tmp diff un ;
17155: LD_ADDR_VAR 0 3
17159: PUSH
17160: LD_VAR 0 3
17164: PUSH
17165: LD_VAR 0 2
17169: DIFF
17170: ST_TO_ADDR
// continue ;
17171: GO 17141
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_INT 3
17180: PUSH
17181: LD_INT 22
17183: PUSH
17184: LD_INT 0
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: CALL_OW 69
17199: PPUSH
17200: LD_VAR 0 2
17204: PPUSH
17205: CALL_OW 74
17209: PPUSH
17210: CALL_OW 115
// end ;
17214: GO 17141
17216: POP
17217: POP
// until not tmp ;
17218: LD_VAR 0 3
17222: NOT
17223: IFFALSE 17124
// end ;
17225: PPOPN 3
17227: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17228: LD_EXP 53
17232: IFFALSE 17240
17234: PUSH
17235: LD_EXP 78
17239: AND
17240: IFFALSE 17294
17242: GO 17244
17244: DISABLE
// begin ToLua ( displayTroll(); ) ;
17245: LD_STRING displayTroll();
17247: PPUSH
17248: CALL_OW 559
// wait ( 3 3$00 ) ;
17252: LD_INT 6300
17254: PPUSH
17255: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17259: LD_STRING hideTroll();
17261: PPUSH
17262: CALL_OW 559
// wait ( 1 1$00 ) ;
17266: LD_INT 2100
17268: PPUSH
17269: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17273: LD_STRING displayTroll();
17275: PPUSH
17276: CALL_OW 559
// wait ( 1 1$00 ) ;
17280: LD_INT 2100
17282: PPUSH
17283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17287: LD_STRING hideTroll();
17289: PPUSH
17290: CALL_OW 559
// end ;
17294: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17295: LD_EXP 53
17299: IFFALSE 17307
17301: PUSH
17302: LD_EXP 79
17306: AND
17307: IFFALSE 17370
17309: GO 17311
17311: DISABLE
17312: LD_INT 0
17314: PPUSH
// begin p := 0 ;
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// repeat game_speed := 1 ;
17323: LD_ADDR_OWVAR 65
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17331: LD_INT 35
17333: PPUSH
17334: CALL_OW 67
// p := p + 1 ;
17338: LD_ADDR_VAR 0 1
17342: PUSH
17343: LD_VAR 0 1
17347: PUSH
17348: LD_INT 1
17350: PLUS
17351: ST_TO_ADDR
// until p >= 60 ;
17352: LD_VAR 0 1
17356: PUSH
17357: LD_INT 60
17359: GREATEREQUAL
17360: IFFALSE 17323
// game_speed := 4 ;
17362: LD_ADDR_OWVAR 65
17366: PUSH
17367: LD_INT 4
17369: ST_TO_ADDR
// end ;
17370: PPOPN 1
17372: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17373: LD_EXP 53
17377: IFFALSE 17385
17379: PUSH
17380: LD_EXP 80
17384: AND
17385: IFFALSE 17531
17387: GO 17389
17389: DISABLE
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17394: LD_ADDR_VAR 0 1
17398: PUSH
17399: LD_INT 22
17401: PUSH
17402: LD_OWVAR 2
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 30
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 30
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL_OW 69
17447: ST_TO_ADDR
// if not depot then
17448: LD_VAR 0 1
17452: NOT
17453: IFFALSE 17457
// exit ;
17455: GO 17531
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17457: LD_ADDR_VAR 0 2
17461: PUSH
17462: LD_VAR 0 1
17466: PUSH
17467: LD_INT 1
17469: PPUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 12
17479: ARRAY
17480: PPUSH
17481: CALL_OW 274
17485: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17486: LD_VAR 0 2
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 0
17496: PPUSH
17497: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17501: LD_VAR 0 2
17505: PPUSH
17506: LD_INT 2
17508: PPUSH
17509: LD_INT 0
17511: PPUSH
17512: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17516: LD_VAR 0 2
17520: PPUSH
17521: LD_INT 3
17523: PPUSH
17524: LD_INT 0
17526: PPUSH
17527: CALL_OW 277
// end ;
17531: PPOPN 2
17533: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17534: LD_EXP 53
17538: IFFALSE 17546
17540: PUSH
17541: LD_EXP 81
17545: AND
17546: IFFALSE 17643
17548: GO 17550
17550: DISABLE
17551: LD_INT 0
17553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17554: LD_ADDR_VAR 0 1
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_OWVAR 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 21
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 3
17583: PUSH
17584: LD_INT 23
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: PPUSH
17603: CALL_OW 69
17607: ST_TO_ADDR
// if not tmp then
17608: LD_VAR 0 1
17612: NOT
17613: IFFALSE 17617
// exit ;
17615: GO 17643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17617: LD_VAR 0 1
17621: PUSH
17622: LD_INT 1
17624: PPUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 12
17634: ARRAY
17635: PPUSH
17636: LD_INT 200
17638: PPUSH
17639: CALL_OW 234
// end ;
17643: PPOPN 1
17645: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17646: LD_EXP 53
17650: IFFALSE 17658
17652: PUSH
17653: LD_EXP 82
17657: AND
17658: IFFALSE 17737
17660: GO 17662
17662: DISABLE
17663: LD_INT 0
17665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17666: LD_ADDR_VAR 0 1
17670: PUSH
17671: LD_INT 22
17673: PUSH
17674: LD_OWVAR 2
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: ST_TO_ADDR
// if not tmp then
17702: LD_VAR 0 1
17706: NOT
17707: IFFALSE 17711
// exit ;
17709: GO 17737
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17711: LD_VAR 0 1
17715: PUSH
17716: LD_INT 1
17718: PPUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: CALL_OW 12
17728: ARRAY
17729: PPUSH
17730: LD_INT 60
17732: PPUSH
17733: CALL_OW 234
// end ;
17737: PPOPN 1
17739: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17740: LD_EXP 53
17744: IFFALSE 17752
17746: PUSH
17747: LD_EXP 83
17751: AND
17752: IFFALSE 17851
17754: GO 17756
17756: DISABLE
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// begin enable ;
17761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17762: LD_ADDR_VAR 0 1
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_OWVAR 2
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 61
17781: PUSH
17782: EMPTY
17783: LIST
17784: PUSH
17785: LD_INT 33
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: ST_TO_ADDR
// if not tmp then
17805: LD_VAR 0 1
17809: NOT
17810: IFFALSE 17814
// exit ;
17812: GO 17851
// for i in tmp do
17814: LD_ADDR_VAR 0 2
17818: PUSH
17819: LD_VAR 0 1
17823: PUSH
17824: FOR_IN
17825: IFFALSE 17849
// if IsControledBy ( i ) then
17827: LD_VAR 0 2
17831: PPUSH
17832: CALL_OW 312
17836: IFFALSE 17847
// ComUnlink ( i ) ;
17838: LD_VAR 0 2
17842: PPUSH
17843: CALL_OW 136
17847: GO 17824
17849: POP
17850: POP
// end ;
17851: PPOPN 2
17853: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17854: LD_EXP 53
17858: IFFALSE 17866
17860: PUSH
17861: LD_EXP 84
17865: AND
17866: IFFALSE 18006
17868: GO 17870
17870: DISABLE
17871: LD_INT 0
17873: PPUSH
17874: PPUSH
// begin ToLua ( displayPowell(); ) ;
17875: LD_STRING displayPowell();
17877: PPUSH
17878: CALL_OW 559
// uc_side := 0 ;
17882: LD_ADDR_OWVAR 20
17886: PUSH
17887: LD_INT 0
17889: ST_TO_ADDR
// uc_nation := 2 ;
17890: LD_ADDR_OWVAR 21
17894: PUSH
17895: LD_INT 2
17897: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17898: LD_ADDR_OWVAR 37
17902: PUSH
17903: LD_INT 14
17905: ST_TO_ADDR
// vc_engine := engine_siberite ;
17906: LD_ADDR_OWVAR 39
17910: PUSH
17911: LD_INT 3
17913: ST_TO_ADDR
// vc_control := control_apeman ;
17914: LD_ADDR_OWVAR 38
17918: PUSH
17919: LD_INT 5
17921: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17922: LD_ADDR_OWVAR 40
17926: PUSH
17927: LD_INT 29
17929: ST_TO_ADDR
// un := CreateVehicle ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: CALL_OW 45
17939: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17952: LD_INT 35
17954: PPUSH
17955: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17959: LD_VAR 0 2
17963: PPUSH
17964: LD_INT 22
17966: PUSH
17967: LD_OWVAR 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: PPUSH
17981: LD_VAR 0 2
17985: PPUSH
17986: CALL_OW 74
17990: PPUSH
17991: CALL_OW 115
// until IsDead ( un ) ;
17995: LD_VAR 0 2
17999: PPUSH
18000: CALL_OW 301
18004: IFFALSE 17952
// end ;
18006: PPOPN 2
18008: END
// every 0 0$1 trigger StreamModeActive and sStu do
18009: LD_EXP 53
18013: IFFALSE 18021
18015: PUSH
18016: LD_EXP 92
18020: AND
18021: IFFALSE 18037
18023: GO 18025
18025: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18026: LD_STRING displayStucuk();
18028: PPUSH
18029: CALL_OW 559
// ResetFog ;
18033: CALL_OW 335
// end ;
18037: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18038: LD_EXP 53
18042: IFFALSE 18050
18044: PUSH
18045: LD_EXP 85
18049: AND
18050: IFFALSE 18191
18052: GO 18054
18054: DISABLE
18055: LD_INT 0
18057: PPUSH
18058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18059: LD_ADDR_VAR 0 2
18063: PUSH
18064: LD_INT 22
18066: PUSH
18067: LD_OWVAR 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 21
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PPUSH
18090: CALL_OW 69
18094: ST_TO_ADDR
// if not tmp then
18095: LD_VAR 0 2
18099: NOT
18100: IFFALSE 18104
// exit ;
18102: GO 18191
// un := tmp [ rand ( 1 , tmp ) ] ;
18104: LD_ADDR_VAR 0 1
18108: PUSH
18109: LD_VAR 0 2
18113: PUSH
18114: LD_INT 1
18116: PPUSH
18117: LD_VAR 0 2
18121: PPUSH
18122: CALL_OW 12
18126: ARRAY
18127: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_INT 0
18135: PPUSH
18136: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18140: LD_VAR 0 1
18144: PPUSH
18145: LD_OWVAR 3
18149: PUSH
18150: LD_VAR 0 1
18154: DIFF
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 74
18165: PPUSH
18166: CALL_OW 115
// wait ( 0 0$20 ) ;
18170: LD_INT 700
18172: PPUSH
18173: CALL_OW 67
// SetSide ( un , your_side ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_OWVAR 2
18186: PPUSH
18187: CALL_OW 235
// end ;
18191: PPOPN 2
18193: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18194: LD_EXP 53
18198: IFFALSE 18206
18200: PUSH
18201: LD_EXP 86
18205: AND
18206: IFFALSE 18312
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18214: LD_ADDR_VAR 0 1
18218: PUSH
18219: LD_INT 22
18221: PUSH
18222: LD_OWVAR 2
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: PUSH
18234: LD_INT 30
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 30
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: ST_TO_ADDR
// if not depot then
18268: LD_VAR 0 1
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18312
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 1
18284: ARRAY
18285: PPUSH
18286: CALL_OW 250
18290: PPUSH
18291: LD_VAR 0 1
18295: PUSH
18296: LD_INT 1
18298: ARRAY
18299: PPUSH
18300: CALL_OW 251
18304: PPUSH
18305: LD_INT 70
18307: PPUSH
18308: CALL_OW 495
// end ;
18312: PPOPN 1
18314: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18315: LD_EXP 53
18319: IFFALSE 18327
18321: PUSH
18322: LD_EXP 87
18326: AND
18327: IFFALSE 18538
18329: GO 18331
18331: DISABLE
18332: LD_INT 0
18334: PPUSH
18335: PPUSH
18336: PPUSH
18337: PPUSH
18338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18339: LD_ADDR_VAR 0 5
18343: PUSH
18344: LD_INT 22
18346: PUSH
18347: LD_OWVAR 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 21
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PPUSH
18370: CALL_OW 69
18374: ST_TO_ADDR
// if not tmp then
18375: LD_VAR 0 5
18379: NOT
18380: IFFALSE 18384
// exit ;
18382: GO 18538
// for i in tmp do
18384: LD_ADDR_VAR 0 1
18388: PUSH
18389: LD_VAR 0 5
18393: PUSH
18394: FOR_IN
18395: IFFALSE 18536
// begin d := rand ( 0 , 5 ) ;
18397: LD_ADDR_VAR 0 4
18401: PUSH
18402: LD_INT 0
18404: PPUSH
18405: LD_INT 5
18407: PPUSH
18408: CALL_OW 12
18412: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18413: LD_ADDR_VAR 0 2
18417: PUSH
18418: LD_VAR 0 1
18422: PPUSH
18423: CALL_OW 250
18427: PPUSH
18428: LD_VAR 0 4
18432: PPUSH
18433: LD_INT 3
18435: PPUSH
18436: LD_INT 12
18438: PPUSH
18439: CALL_OW 12
18443: PPUSH
18444: CALL_OW 272
18448: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18449: LD_ADDR_VAR 0 3
18453: PUSH
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 251
18463: PPUSH
18464: LD_VAR 0 4
18468: PPUSH
18469: LD_INT 3
18471: PPUSH
18472: LD_INT 12
18474: PPUSH
18475: CALL_OW 12
18479: PPUSH
18480: CALL_OW 273
18484: ST_TO_ADDR
// if ValidHex ( x , y ) then
18485: LD_VAR 0 2
18489: PPUSH
18490: LD_VAR 0 3
18494: PPUSH
18495: CALL_OW 488
18499: IFFALSE 18534
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_VAR 0 2
18510: PPUSH
18511: LD_VAR 0 3
18515: PPUSH
18516: LD_INT 3
18518: PPUSH
18519: LD_INT 6
18521: PPUSH
18522: CALL_OW 12
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 483
// end ;
18534: GO 18394
18536: POP
18537: POP
// end ;
18538: PPOPN 5
18540: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18541: LD_EXP 53
18545: IFFALSE 18553
18547: PUSH
18548: LD_EXP 88
18552: AND
18553: IFFALSE 18647
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18562: LD_ADDR_VAR 0 2
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_OWVAR 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 32
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 21
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: PPUSH
18604: CALL_OW 69
18608: ST_TO_ADDR
// if not tmp then
18609: LD_VAR 0 2
18613: NOT
18614: IFFALSE 18618
// exit ;
18616: GO 18647
// for i in tmp do
18618: LD_ADDR_VAR 0 1
18622: PUSH
18623: LD_VAR 0 2
18627: PUSH
18628: FOR_IN
18629: IFFALSE 18645
// SetFuel ( i , 0 ) ;
18631: LD_VAR 0 1
18635: PPUSH
18636: LD_INT 0
18638: PPUSH
18639: CALL_OW 240
18643: GO 18628
18645: POP
18646: POP
// end ;
18647: PPOPN 2
18649: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18650: LD_EXP 53
18654: IFFALSE 18662
18656: PUSH
18657: LD_EXP 89
18661: AND
18662: IFFALSE 18728
18664: GO 18666
18666: DISABLE
18667: LD_INT 0
18669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18670: LD_ADDR_VAR 0 1
18674: PUSH
18675: LD_INT 22
18677: PUSH
18678: LD_OWVAR 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 30
18689: PUSH
18690: LD_INT 29
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PPUSH
18701: CALL_OW 69
18705: ST_TO_ADDR
// if not tmp then
18706: LD_VAR 0 1
18710: NOT
18711: IFFALSE 18715
// exit ;
18713: GO 18728
// DestroyUnit ( tmp [ 1 ] ) ;
18715: LD_VAR 0 1
18719: PUSH
18720: LD_INT 1
18722: ARRAY
18723: PPUSH
18724: CALL_OW 65
// end ;
18728: PPOPN 1
18730: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18731: LD_EXP 53
18735: IFFALSE 18743
18737: PUSH
18738: LD_EXP 91
18742: AND
18743: IFFALSE 18872
18745: GO 18747
18747: DISABLE
18748: LD_INT 0
18750: PPUSH
// begin uc_side := 0 ;
18751: LD_ADDR_OWVAR 20
18755: PUSH
18756: LD_INT 0
18758: ST_TO_ADDR
// uc_nation := nation_arabian ;
18759: LD_ADDR_OWVAR 21
18763: PUSH
18764: LD_INT 2
18766: ST_TO_ADDR
// hc_gallery :=  ;
18767: LD_ADDR_OWVAR 33
18771: PUSH
18772: LD_STRING 
18774: ST_TO_ADDR
// hc_name :=  ;
18775: LD_ADDR_OWVAR 26
18779: PUSH
18780: LD_STRING 
18782: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18783: LD_INT 1
18785: PPUSH
18786: LD_INT 11
18788: PPUSH
18789: LD_INT 10
18791: PPUSH
18792: CALL_OW 380
// un := CreateHuman ;
18796: LD_ADDR_VAR 0 1
18800: PUSH
18801: CALL_OW 44
18805: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18806: LD_VAR 0 1
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18818: LD_INT 35
18820: PPUSH
18821: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18825: LD_VAR 0 1
18829: PPUSH
18830: LD_INT 22
18832: PUSH
18833: LD_OWVAR 2
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PPUSH
18842: CALL_OW 69
18846: PPUSH
18847: LD_VAR 0 1
18851: PPUSH
18852: CALL_OW 74
18856: PPUSH
18857: CALL_OW 115
// until IsDead ( un ) ;
18861: LD_VAR 0 1
18865: PPUSH
18866: CALL_OW 301
18870: IFFALSE 18818
// end ;
18872: PPOPN 1
18874: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18875: LD_EXP 53
18879: IFFALSE 18887
18881: PUSH
18882: LD_EXP 93
18886: AND
18887: IFFALSE 18899
18889: GO 18891
18891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18892: LD_STRING earthquake(getX(game), 0, 32)
18894: PPUSH
18895: CALL_OW 559
18899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18900: LD_EXP 53
18904: IFFALSE 18912
18906: PUSH
18907: LD_EXP 94
18911: AND
18912: IFFALSE 19003
18914: GO 18916
18916: DISABLE
18917: LD_INT 0
18919: PPUSH
// begin enable ;
18920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_OWVAR 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 21
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 33
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: LIST
18962: PPUSH
18963: CALL_OW 69
18967: ST_TO_ADDR
// if not tmp then
18968: LD_VAR 0 1
18972: NOT
18973: IFFALSE 18977
// exit ;
18975: GO 19003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18977: LD_VAR 0 1
18981: PUSH
18982: LD_INT 1
18984: PPUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: CALL_OW 12
18994: ARRAY
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: CALL_OW 234
// end ;
19003: PPOPN 1
19005: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19006: LD_EXP 53
19010: IFFALSE 19018
19012: PUSH
19013: LD_EXP 95
19017: AND
19018: IFFALSE 19159
19020: GO 19022
19022: DISABLE
19023: LD_INT 0
19025: PPUSH
19026: PPUSH
19027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19028: LD_ADDR_VAR 0 3
19032: PUSH
19033: LD_INT 22
19035: PUSH
19036: LD_OWVAR 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: ST_TO_ADDR
// if not tmp then
19064: LD_VAR 0 3
19068: NOT
19069: IFFALSE 19073
// exit ;
19071: GO 19159
// un := tmp [ rand ( 1 , tmp ) ] ;
19073: LD_ADDR_VAR 0 2
19077: PUSH
19078: LD_VAR 0 3
19082: PUSH
19083: LD_INT 1
19085: PPUSH
19086: LD_VAR 0 3
19090: PPUSH
19091: CALL_OW 12
19095: ARRAY
19096: ST_TO_ADDR
// if Crawls ( un ) then
19097: LD_VAR 0 2
19101: PPUSH
19102: CALL_OW 318
19106: IFFALSE 19117
// ComWalk ( un ) ;
19108: LD_VAR 0 2
19112: PPUSH
19113: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19117: LD_VAR 0 2
19121: PPUSH
19122: LD_INT 9
19124: PPUSH
19125: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19129: LD_INT 28
19131: PPUSH
19132: LD_OWVAR 2
19136: PPUSH
19137: LD_INT 2
19139: PPUSH
19140: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19144: LD_INT 29
19146: PPUSH
19147: LD_OWVAR 2
19151: PPUSH
19152: LD_INT 2
19154: PPUSH
19155: CALL_OW 322
// end ;
19159: PPOPN 3
19161: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19162: LD_EXP 53
19166: IFFALSE 19174
19168: PUSH
19169: LD_EXP 96
19173: AND
19174: IFFALSE 19285
19176: GO 19178
19178: DISABLE
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
19183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_OWVAR 2
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 25
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL_OW 69
19219: ST_TO_ADDR
// if not tmp then
19220: LD_VAR 0 3
19224: NOT
19225: IFFALSE 19229
// exit ;
19227: GO 19285
// un := tmp [ rand ( 1 , tmp ) ] ;
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 1
19241: PPUSH
19242: LD_VAR 0 3
19246: PPUSH
19247: CALL_OW 12
19251: ARRAY
19252: ST_TO_ADDR
// if Crawls ( un ) then
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL_OW 318
19262: IFFALSE 19273
// ComWalk ( un ) ;
19264: LD_VAR 0 2
19268: PPUSH
19269: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19273: LD_VAR 0 2
19277: PPUSH
19278: LD_INT 8
19280: PPUSH
19281: CALL_OW 336
// end ;
19285: PPOPN 3
19287: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19288: LD_EXP 53
19292: IFFALSE 19300
19294: PUSH
19295: LD_EXP 97
19299: AND
19300: IFFALSE 19444
19302: GO 19304
19304: DISABLE
19305: LD_INT 0
19307: PPUSH
19308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19309: LD_ADDR_VAR 0 2
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_OWVAR 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 21
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: LD_INT 34
19341: PUSH
19342: LD_INT 12
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 34
19351: PUSH
19352: LD_INT 51
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 34
19361: PUSH
19362: LD_INT 32
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: PPUSH
19380: CALL_OW 69
19384: ST_TO_ADDR
// if not tmp then
19385: LD_VAR 0 2
19389: NOT
19390: IFFALSE 19394
// exit ;
19392: GO 19444
// for i in tmp do
19394: LD_ADDR_VAR 0 1
19398: PUSH
19399: LD_VAR 0 2
19403: PUSH
19404: FOR_IN
19405: IFFALSE 19442
// if GetCargo ( i , mat_artifact ) = 0 then
19407: LD_VAR 0 1
19411: PPUSH
19412: LD_INT 4
19414: PPUSH
19415: CALL_OW 289
19419: PUSH
19420: LD_INT 0
19422: EQUAL
19423: IFFALSE 19440
// SetCargo ( i , mat_siberit , 100 ) ;
19425: LD_VAR 0 1
19429: PPUSH
19430: LD_INT 3
19432: PPUSH
19433: LD_INT 100
19435: PPUSH
19436: CALL_OW 290
19440: GO 19404
19442: POP
19443: POP
// end ;
19444: PPOPN 2
19446: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19447: LD_EXP 53
19451: IFFALSE 19459
19453: PUSH
19454: LD_EXP 98
19458: AND
19459: IFFALSE 19642
19461: GO 19463
19463: DISABLE
19464: LD_INT 0
19466: PPUSH
19467: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19468: LD_ADDR_VAR 0 2
19472: PUSH
19473: LD_INT 22
19475: PUSH
19476: LD_OWVAR 2
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: ST_TO_ADDR
// if not tmp then
19490: LD_VAR 0 2
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19642
// for i := 1 to 2 do
19499: LD_ADDR_VAR 0 1
19503: PUSH
19504: DOUBLE
19505: LD_INT 1
19507: DEC
19508: ST_TO_ADDR
19509: LD_INT 2
19511: PUSH
19512: FOR_TO
19513: IFFALSE 19640
// begin uc_side := your_side ;
19515: LD_ADDR_OWVAR 20
19519: PUSH
19520: LD_OWVAR 2
19524: ST_TO_ADDR
// uc_nation := nation_american ;
19525: LD_ADDR_OWVAR 21
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// vc_chassis := us_morphling ;
19533: LD_ADDR_OWVAR 37
19537: PUSH
19538: LD_INT 5
19540: ST_TO_ADDR
// vc_engine := engine_siberite ;
19541: LD_ADDR_OWVAR 39
19545: PUSH
19546: LD_INT 3
19548: ST_TO_ADDR
// vc_control := control_computer ;
19549: LD_ADDR_OWVAR 38
19553: PUSH
19554: LD_INT 3
19556: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19557: LD_ADDR_OWVAR 40
19561: PUSH
19562: LD_INT 10
19564: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19565: LD_VAR 0 2
19569: PUSH
19570: LD_INT 1
19572: ARRAY
19573: PPUSH
19574: CALL_OW 310
19578: NOT
19579: IFFALSE 19626
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19581: CALL_OW 45
19585: PPUSH
19586: LD_VAR 0 2
19590: PUSH
19591: LD_INT 1
19593: ARRAY
19594: PPUSH
19595: CALL_OW 250
19599: PPUSH
19600: LD_VAR 0 2
19604: PUSH
19605: LD_INT 1
19607: ARRAY
19608: PPUSH
19609: CALL_OW 251
19613: PPUSH
19614: LD_INT 12
19616: PPUSH
19617: LD_INT 1
19619: PPUSH
19620: CALL_OW 50
19624: GO 19638
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19626: CALL_OW 45
19630: PPUSH
19631: LD_INT 1
19633: PPUSH
19634: CALL_OW 51
// end ;
19638: GO 19512
19640: POP
19641: POP
// end ;
19642: PPOPN 2
19644: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19645: LD_EXP 53
19649: IFFALSE 19657
19651: PUSH
19652: LD_EXP 99
19656: AND
19657: IFFALSE 19879
19659: GO 19661
19661: DISABLE
19662: LD_INT 0
19664: PPUSH
19665: PPUSH
19666: PPUSH
19667: PPUSH
19668: PPUSH
19669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19670: LD_ADDR_VAR 0 6
19674: PUSH
19675: LD_INT 22
19677: PUSH
19678: LD_OWVAR 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 21
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 3
19699: PUSH
19700: LD_INT 23
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 69
19723: ST_TO_ADDR
// if not tmp then
19724: LD_VAR 0 6
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19879
// s1 := rand ( 1 , 4 ) ;
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 1
19740: PPUSH
19741: LD_INT 4
19743: PPUSH
19744: CALL_OW 12
19748: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19749: LD_ADDR_VAR 0 4
19753: PUSH
19754: LD_VAR 0 6
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: LD_VAR 0 2
19767: PPUSH
19768: CALL_OW 259
19772: ST_TO_ADDR
// if s1 = 1 then
19773: LD_VAR 0 2
19777: PUSH
19778: LD_INT 1
19780: EQUAL
19781: IFFALSE 19801
// s2 := rand ( 2 , 4 ) else
19783: LD_ADDR_VAR 0 3
19787: PUSH
19788: LD_INT 2
19790: PPUSH
19791: LD_INT 4
19793: PPUSH
19794: CALL_OW 12
19798: ST_TO_ADDR
19799: GO 19809
// s2 := 1 ;
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19809: LD_ADDR_VAR 0 5
19813: PUSH
19814: LD_VAR 0 6
19818: PUSH
19819: LD_INT 1
19821: ARRAY
19822: PPUSH
19823: LD_VAR 0 3
19827: PPUSH
19828: CALL_OW 259
19832: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19833: LD_VAR 0 6
19837: PUSH
19838: LD_INT 1
19840: ARRAY
19841: PPUSH
19842: LD_VAR 0 2
19846: PPUSH
19847: LD_VAR 0 5
19851: PPUSH
19852: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19856: LD_VAR 0 6
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: PPUSH
19865: LD_VAR 0 3
19869: PPUSH
19870: LD_VAR 0 4
19874: PPUSH
19875: CALL_OW 237
// end ;
19879: PPOPN 6
19881: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19882: LD_EXP 53
19886: IFFALSE 19894
19888: PUSH
19889: LD_EXP 100
19893: AND
19894: IFFALSE 19973
19896: GO 19898
19898: DISABLE
19899: LD_INT 0
19901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19902: LD_ADDR_VAR 0 1
19906: PUSH
19907: LD_INT 22
19909: PUSH
19910: LD_OWVAR 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 30
19921: PUSH
19922: LD_INT 3
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: ST_TO_ADDR
// if not tmp then
19938: LD_VAR 0 1
19942: NOT
19943: IFFALSE 19947
// exit ;
19945: GO 19973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19947: LD_VAR 0 1
19951: PUSH
19952: LD_INT 1
19954: PPUSH
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 12
19964: ARRAY
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: CALL_OW 234
// end ;
19973: PPOPN 1
19975: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19976: LD_EXP 53
19980: IFFALSE 19988
19982: PUSH
19983: LD_EXP 101
19987: AND
19988: IFFALSE 20100
19990: GO 19992
19992: DISABLE
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19997: LD_ADDR_VAR 0 2
20001: PUSH
20002: LD_INT 22
20004: PUSH
20005: LD_OWVAR 2
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: LD_INT 30
20019: PUSH
20020: LD_INT 27
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 30
20029: PUSH
20030: LD_INT 26
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 30
20039: PUSH
20040: LD_INT 28
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: ST_TO_ADDR
// if not tmp then
20062: LD_VAR 0 2
20066: NOT
20067: IFFALSE 20071
// exit ;
20069: GO 20100
// for i in tmp do
20071: LD_ADDR_VAR 0 1
20075: PUSH
20076: LD_VAR 0 2
20080: PUSH
20081: FOR_IN
20082: IFFALSE 20098
// SetLives ( i , 1 ) ;
20084: LD_VAR 0 1
20088: PPUSH
20089: LD_INT 1
20091: PPUSH
20092: CALL_OW 234
20096: GO 20081
20098: POP
20099: POP
// end ;
20100: PPOPN 2
20102: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20103: LD_EXP 53
20107: IFFALSE 20115
20109: PUSH
20110: LD_EXP 102
20114: AND
20115: IFFALSE 20402
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
20123: PPUSH
20124: PPUSH
// begin i := rand ( 1 , 7 ) ;
20125: LD_ADDR_VAR 0 1
20129: PUSH
20130: LD_INT 1
20132: PPUSH
20133: LD_INT 7
20135: PPUSH
20136: CALL_OW 12
20140: ST_TO_ADDR
// case i of 1 :
20141: LD_VAR 0 1
20145: PUSH
20146: LD_INT 1
20148: DOUBLE
20149: EQUAL
20150: IFTRUE 20154
20152: GO 20164
20154: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20155: LD_STRING earthquake(getX(game), 0, 32)
20157: PPUSH
20158: CALL_OW 559
20162: GO 20402
20164: LD_INT 2
20166: DOUBLE
20167: EQUAL
20168: IFTRUE 20172
20170: GO 20186
20172: POP
// begin ToLua ( displayStucuk(); ) ;
20173: LD_STRING displayStucuk();
20175: PPUSH
20176: CALL_OW 559
// ResetFog ;
20180: CALL_OW 335
// end ; 3 :
20184: GO 20402
20186: LD_INT 3
20188: DOUBLE
20189: EQUAL
20190: IFTRUE 20194
20192: GO 20298
20194: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20195: LD_ADDR_VAR 0 2
20199: PUSH
20200: LD_INT 22
20202: PUSH
20203: LD_OWVAR 2
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 25
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PPUSH
20226: CALL_OW 69
20230: ST_TO_ADDR
// if not tmp then
20231: LD_VAR 0 2
20235: NOT
20236: IFFALSE 20240
// exit ;
20238: GO 20402
// un := tmp [ rand ( 1 , tmp ) ] ;
20240: LD_ADDR_VAR 0 3
20244: PUSH
20245: LD_VAR 0 2
20249: PUSH
20250: LD_INT 1
20252: PPUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 12
20262: ARRAY
20263: ST_TO_ADDR
// if Crawls ( un ) then
20264: LD_VAR 0 3
20268: PPUSH
20269: CALL_OW 318
20273: IFFALSE 20284
// ComWalk ( un ) ;
20275: LD_VAR 0 3
20279: PPUSH
20280: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20284: LD_VAR 0 3
20288: PPUSH
20289: LD_INT 8
20291: PPUSH
20292: CALL_OW 336
// end ; 4 :
20296: GO 20402
20298: LD_INT 4
20300: DOUBLE
20301: EQUAL
20302: IFTRUE 20306
20304: GO 20380
20306: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20307: LD_ADDR_VAR 0 2
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_OWVAR 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 29
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 69
20342: ST_TO_ADDR
// if not tmp then
20343: LD_VAR 0 2
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20402
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20352: LD_VAR 0 2
20356: PUSH
20357: LD_INT 1
20359: ARRAY
20360: PPUSH
20361: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20365: LD_VAR 0 2
20369: PUSH
20370: LD_INT 1
20372: ARRAY
20373: PPUSH
20374: CALL_OW 65
// end ; 5 .. 7 :
20378: GO 20402
20380: LD_INT 5
20382: DOUBLE
20383: GREATEREQUAL
20384: IFFALSE 20392
20386: LD_INT 7
20388: DOUBLE
20389: LESSEQUAL
20390: IFTRUE 20394
20392: GO 20401
20394: POP
// StreamSibBomb ; end ;
20395: CALL 16583 0 0
20399: GO 20402
20401: POP
// end ;
20402: PPOPN 3
20404: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20405: LD_EXP 53
20409: IFFALSE 20417
20411: PUSH
20412: LD_EXP 103
20416: AND
20417: IFFALSE 20573
20419: GO 20421
20421: DISABLE
20422: LD_INT 0
20424: PPUSH
20425: PPUSH
20426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20427: LD_ADDR_VAR 0 2
20431: PUSH
20432: LD_INT 81
20434: PUSH
20435: LD_OWVAR 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 21
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 21
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PPUSH
20476: CALL_OW 69
20480: ST_TO_ADDR
// if not tmp then
20481: LD_VAR 0 2
20485: NOT
20486: IFFALSE 20490
// exit ;
20488: GO 20573
// p := 0 ;
20490: LD_ADDR_VAR 0 3
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20498: LD_INT 35
20500: PPUSH
20501: CALL_OW 67
// p := p + 1 ;
20505: LD_ADDR_VAR 0 3
20509: PUSH
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 1
20517: PLUS
20518: ST_TO_ADDR
// for i in tmp do
20519: LD_ADDR_VAR 0 1
20523: PUSH
20524: LD_VAR 0 2
20528: PUSH
20529: FOR_IN
20530: IFFALSE 20561
// if GetLives ( i ) < 1000 then
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 256
20541: PUSH
20542: LD_INT 1000
20544: LESS
20545: IFFALSE 20559
// SetLives ( i , 1000 ) ;
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 1000
20554: PPUSH
20555: CALL_OW 234
20559: GO 20529
20561: POP
20562: POP
// until p > 20 ;
20563: LD_VAR 0 3
20567: PUSH
20568: LD_INT 20
20570: GREATER
20571: IFFALSE 20498
// end ;
20573: PPOPN 3
20575: END
// every 0 0$1 trigger StreamModeActive and sTime do
20576: LD_EXP 53
20580: IFFALSE 20588
20582: PUSH
20583: LD_EXP 104
20587: AND
20588: IFFALSE 20623
20590: GO 20592
20592: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20593: LD_INT 28
20595: PPUSH
20596: LD_OWVAR 2
20600: PPUSH
20601: LD_INT 2
20603: PPUSH
20604: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20608: LD_INT 30
20610: PPUSH
20611: LD_OWVAR 2
20615: PPUSH
20616: LD_INT 2
20618: PPUSH
20619: CALL_OW 322
// end ;
20623: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20624: LD_EXP 53
20628: IFFALSE 20636
20630: PUSH
20631: LD_EXP 105
20635: AND
20636: IFFALSE 20757
20638: GO 20640
20640: DISABLE
20641: LD_INT 0
20643: PPUSH
20644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20645: LD_ADDR_VAR 0 2
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_OWVAR 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: LD_INT 23
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: LIST
20693: PPUSH
20694: CALL_OW 69
20698: ST_TO_ADDR
// if not tmp then
20699: LD_VAR 0 2
20703: NOT
20704: IFFALSE 20708
// exit ;
20706: GO 20757
// for i in tmp do
20708: LD_ADDR_VAR 0 1
20712: PUSH
20713: LD_VAR 0 2
20717: PUSH
20718: FOR_IN
20719: IFFALSE 20755
// begin if Crawls ( i ) then
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 318
20730: IFFALSE 20741
// ComWalk ( i ) ;
20732: LD_VAR 0 1
20736: PPUSH
20737: CALL_OW 138
// SetClass ( i , 2 ) ;
20741: LD_VAR 0 1
20745: PPUSH
20746: LD_INT 2
20748: PPUSH
20749: CALL_OW 336
// end ;
20753: GO 20718
20755: POP
20756: POP
// end ;
20757: PPOPN 2
20759: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20760: LD_EXP 53
20764: IFFALSE 20772
20766: PUSH
20767: LD_EXP 106
20771: AND
20772: IFFALSE 21062
20774: GO 20776
20776: DISABLE
20777: LD_INT 0
20779: PPUSH
20780: PPUSH
20781: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20782: LD_OWVAR 2
20786: PPUSH
20787: LD_INT 9
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: LD_INT 1
20795: PPUSH
20796: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20800: LD_INT 9
20802: PPUSH
20803: LD_OWVAR 2
20807: PPUSH
20808: CALL_OW 343
// uc_side := 9 ;
20812: LD_ADDR_OWVAR 20
20816: PUSH
20817: LD_INT 9
20819: ST_TO_ADDR
// uc_nation := 2 ;
20820: LD_ADDR_OWVAR 21
20824: PUSH
20825: LD_INT 2
20827: ST_TO_ADDR
// hc_name := Dark Warrior ;
20828: LD_ADDR_OWVAR 26
20832: PUSH
20833: LD_STRING Dark Warrior
20835: ST_TO_ADDR
// hc_gallery :=  ;
20836: LD_ADDR_OWVAR 33
20840: PUSH
20841: LD_STRING 
20843: ST_TO_ADDR
// hc_noskilllimit := true ;
20844: LD_ADDR_OWVAR 76
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20852: LD_ADDR_OWVAR 31
20856: PUSH
20857: LD_INT 30
20859: PUSH
20860: LD_INT 30
20862: PUSH
20863: LD_INT 30
20865: PUSH
20866: LD_INT 30
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: ST_TO_ADDR
// un := CreateHuman ;
20875: LD_ADDR_VAR 0 3
20879: PUSH
20880: CALL_OW 44
20884: ST_TO_ADDR
// hc_noskilllimit := false ;
20885: LD_ADDR_OWVAR 76
20889: PUSH
20890: LD_INT 0
20892: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20893: LD_VAR 0 3
20897: PPUSH
20898: LD_INT 1
20900: PPUSH
20901: CALL_OW 51
// ToLua ( playRanger() ) ;
20905: LD_STRING playRanger()
20907: PPUSH
20908: CALL_OW 559
// p := 0 ;
20912: LD_ADDR_VAR 0 2
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20920: LD_INT 35
20922: PPUSH
20923: CALL_OW 67
// p := p + 1 ;
20927: LD_ADDR_VAR 0 2
20931: PUSH
20932: LD_VAR 0 2
20936: PUSH
20937: LD_INT 1
20939: PLUS
20940: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20941: LD_VAR 0 3
20945: PPUSH
20946: CALL_OW 256
20950: PUSH
20951: LD_INT 1000
20953: LESS
20954: IFFALSE 20968
// SetLives ( un , 1000 ) ;
20956: LD_VAR 0 3
20960: PPUSH
20961: LD_INT 1000
20963: PPUSH
20964: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20968: LD_VAR 0 3
20972: PPUSH
20973: LD_INT 81
20975: PUSH
20976: LD_OWVAR 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 91
20987: PUSH
20988: LD_VAR 0 3
20992: PUSH
20993: LD_INT 30
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 69
21009: PPUSH
21010: LD_VAR 0 3
21014: PPUSH
21015: CALL_OW 74
21019: PPUSH
21020: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21024: LD_VAR 0 2
21028: PUSH
21029: LD_INT 80
21031: GREATER
21032: IFTRUE 21045
21034: PUSH
21035: LD_VAR 0 3
21039: PPUSH
21040: CALL_OW 301
21044: OR
21045: IFFALSE 20920
// if un then
21047: LD_VAR 0 3
21051: IFFALSE 21062
// RemoveUnit ( un ) ;
21053: LD_VAR 0 3
21057: PPUSH
21058: CALL_OW 64
// end ;
21062: PPOPN 3
21064: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21065: LD_EXP 107
21069: IFFALSE 21185
21071: GO 21073
21073: DISABLE
21074: LD_INT 0
21076: PPUSH
21077: PPUSH
21078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_INT 81
21086: PUSH
21087: LD_OWVAR 2
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 21
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PPUSH
21110: CALL_OW 69
21114: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21115: LD_STRING playComputer()
21117: PPUSH
21118: CALL_OW 559
// if not tmp then
21122: LD_VAR 0 2
21126: NOT
21127: IFFALSE 21131
// exit ;
21129: GO 21185
// for i in tmp do
21131: LD_ADDR_VAR 0 1
21135: PUSH
21136: LD_VAR 0 2
21140: PUSH
21141: FOR_IN
21142: IFFALSE 21183
// for j := 1 to 4 do
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: DOUBLE
21150: LD_INT 1
21152: DEC
21153: ST_TO_ADDR
21154: LD_INT 4
21156: PUSH
21157: FOR_TO
21158: IFFALSE 21179
// SetSkill ( i , j , 10 ) ;
21160: LD_VAR 0 1
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: LD_INT 10
21172: PPUSH
21173: CALL_OW 237
21177: GO 21157
21179: POP
21180: POP
21181: GO 21141
21183: POP
21184: POP
// end ;
21185: PPOPN 3
21187: END
// every 0 0$1 trigger s30 do var i , tmp ;
21188: LD_EXP 108
21192: IFFALSE 21261
21194: GO 21196
21196: DISABLE
21197: LD_INT 0
21199: PPUSH
21200: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21201: LD_ADDR_VAR 0 2
21205: PUSH
21206: LD_INT 22
21208: PUSH
21209: LD_OWVAR 2
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PPUSH
21218: CALL_OW 69
21222: ST_TO_ADDR
// if not tmp then
21223: LD_VAR 0 2
21227: NOT
21228: IFFALSE 21232
// exit ;
21230: GO 21261
// for i in tmp do
21232: LD_ADDR_VAR 0 1
21236: PUSH
21237: LD_VAR 0 2
21241: PUSH
21242: FOR_IN
21243: IFFALSE 21259
// SetLives ( i , 300 ) ;
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 300
21252: PPUSH
21253: CALL_OW 234
21257: GO 21242
21259: POP
21260: POP
// end ;
21261: PPOPN 2
21263: END
// every 0 0$1 trigger s60 do var i , tmp ;
21264: LD_EXP 109
21268: IFFALSE 21337
21270: GO 21272
21272: DISABLE
21273: LD_INT 0
21275: PPUSH
21276: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_INT 22
21284: PUSH
21285: LD_OWVAR 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 69
21298: ST_TO_ADDR
// if not tmp then
21299: LD_VAR 0 2
21303: NOT
21304: IFFALSE 21308
// exit ;
21306: GO 21337
// for i in tmp do
21308: LD_ADDR_VAR 0 1
21312: PUSH
21313: LD_VAR 0 2
21317: PUSH
21318: FOR_IN
21319: IFFALSE 21335
// SetLives ( i , 600 ) ;
21321: LD_VAR 0 1
21325: PPUSH
21326: LD_INT 600
21328: PPUSH
21329: CALL_OW 234
21333: GO 21318
21335: POP
21336: POP
// end ;
21337: PPOPN 2
21339: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21340: LD_INT 0
21342: PPUSH
// case cmd of 301 :
21343: LD_VAR 0 1
21347: PUSH
21348: LD_INT 301
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21388
21356: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21357: LD_VAR 0 6
21361: PPUSH
21362: LD_VAR 0 7
21366: PPUSH
21367: LD_VAR 0 8
21371: PPUSH
21372: LD_VAR 0 4
21376: PPUSH
21377: LD_VAR 0 5
21381: PPUSH
21382: CALL 22601 0 5
21386: GO 21509
21388: LD_INT 302
21390: DOUBLE
21391: EQUAL
21392: IFTRUE 21396
21394: GO 21433
21396: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21397: LD_VAR 0 6
21401: PPUSH
21402: LD_VAR 0 7
21406: PPUSH
21407: LD_VAR 0 8
21411: PPUSH
21412: LD_VAR 0 9
21416: PPUSH
21417: LD_VAR 0 4
21421: PPUSH
21422: LD_VAR 0 5
21426: PPUSH
21427: CALL 22692 0 6
21431: GO 21509
21433: LD_INT 303
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21478
21441: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21442: LD_VAR 0 6
21446: PPUSH
21447: LD_VAR 0 7
21451: PPUSH
21452: LD_VAR 0 8
21456: PPUSH
21457: LD_VAR 0 9
21461: PPUSH
21462: LD_VAR 0 4
21466: PPUSH
21467: LD_VAR 0 5
21471: PPUSH
21472: CALL 21514 0 6
21476: GO 21509
21478: LD_INT 304
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 21508
21486: POP
// hHackTeleport ( unit , x , y ) ; end ;
21487: LD_VAR 0 2
21491: PPUSH
21492: LD_VAR 0 4
21496: PPUSH
21497: LD_VAR 0 5
21501: PPUSH
21502: CALL 23285 0 3
21506: GO 21509
21508: POP
// end ;
21509: LD_VAR 0 12
21513: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21514: LD_INT 0
21516: PPUSH
21517: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21518: LD_VAR 0 1
21522: PUSH
21523: LD_INT 1
21525: LESS
21526: IFTRUE 21538
21528: PUSH
21529: LD_VAR 0 1
21533: PUSH
21534: LD_INT 3
21536: GREATER
21537: OR
21538: IFTRUE 21556
21540: PUSH
21541: LD_VAR 0 5
21545: PPUSH
21546: LD_VAR 0 6
21550: PPUSH
21551: CALL_OW 428
21555: OR
21556: IFFALSE 21560
// exit ;
21558: GO 22288
// uc_side := your_side ;
21560: LD_ADDR_OWVAR 20
21564: PUSH
21565: LD_OWVAR 2
21569: ST_TO_ADDR
// uc_nation := nation ;
21570: LD_ADDR_OWVAR 21
21574: PUSH
21575: LD_VAR 0 1
21579: ST_TO_ADDR
// bc_level = 1 ;
21580: LD_ADDR_OWVAR 43
21584: PUSH
21585: LD_INT 1
21587: ST_TO_ADDR
// case btype of 1 :
21588: LD_VAR 0 2
21592: PUSH
21593: LD_INT 1
21595: DOUBLE
21596: EQUAL
21597: IFTRUE 21601
21599: GO 21612
21601: POP
// bc_type := b_depot ; 2 :
21602: LD_ADDR_OWVAR 42
21606: PUSH
21607: LD_INT 0
21609: ST_TO_ADDR
21610: GO 22232
21612: LD_INT 2
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21631
21620: POP
// bc_type := b_warehouse ; 3 :
21621: LD_ADDR_OWVAR 42
21625: PUSH
21626: LD_INT 1
21628: ST_TO_ADDR
21629: GO 22232
21631: LD_INT 3
21633: DOUBLE
21634: EQUAL
21635: IFTRUE 21639
21637: GO 21650
21639: POP
// bc_type := b_lab ; 4 .. 9 :
21640: LD_ADDR_OWVAR 42
21644: PUSH
21645: LD_INT 6
21647: ST_TO_ADDR
21648: GO 22232
21650: LD_INT 4
21652: DOUBLE
21653: GREATEREQUAL
21654: IFFALSE 21662
21656: LD_INT 9
21658: DOUBLE
21659: LESSEQUAL
21660: IFTRUE 21664
21662: GO 21724
21664: POP
// begin bc_type := b_lab_half ;
21665: LD_ADDR_OWVAR 42
21669: PUSH
21670: LD_INT 7
21672: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21673: LD_ADDR_OWVAR 44
21677: PUSH
21678: LD_INT 10
21680: PUSH
21681: LD_INT 11
21683: PUSH
21684: LD_INT 12
21686: PUSH
21687: LD_INT 15
21689: PUSH
21690: LD_INT 14
21692: PUSH
21693: LD_INT 13
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: LD_VAR 0 2
21708: PUSH
21709: LD_INT 3
21711: MINUS
21712: ARRAY
21713: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21714: LD_ADDR_OWVAR 45
21718: PUSH
21719: LD_INT 9
21721: ST_TO_ADDR
// end ; 10 .. 13 :
21722: GO 22232
21724: LD_INT 10
21726: DOUBLE
21727: GREATEREQUAL
21728: IFFALSE 21736
21730: LD_INT 13
21732: DOUBLE
21733: LESSEQUAL
21734: IFTRUE 21738
21736: GO 21815
21738: POP
// begin bc_type := b_lab_full ;
21739: LD_ADDR_OWVAR 42
21743: PUSH
21744: LD_INT 8
21746: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21747: LD_ADDR_OWVAR 44
21751: PUSH
21752: LD_INT 10
21754: PUSH
21755: LD_INT 12
21757: PUSH
21758: LD_INT 14
21760: PUSH
21761: LD_INT 13
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: PUSH
21770: LD_VAR 0 2
21774: PUSH
21775: LD_INT 9
21777: MINUS
21778: ARRAY
21779: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21780: LD_ADDR_OWVAR 45
21784: PUSH
21785: LD_INT 11
21787: PUSH
21788: LD_INT 15
21790: PUSH
21791: LD_INT 12
21793: PUSH
21794: LD_INT 15
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: LD_VAR 0 2
21807: PUSH
21808: LD_INT 9
21810: MINUS
21811: ARRAY
21812: ST_TO_ADDR
// end ; 14 :
21813: GO 22232
21815: LD_INT 14
21817: DOUBLE
21818: EQUAL
21819: IFTRUE 21823
21821: GO 21834
21823: POP
// bc_type := b_workshop ; 15 :
21824: LD_ADDR_OWVAR 42
21828: PUSH
21829: LD_INT 2
21831: ST_TO_ADDR
21832: GO 22232
21834: LD_INT 15
21836: DOUBLE
21837: EQUAL
21838: IFTRUE 21842
21840: GO 21853
21842: POP
// bc_type := b_factory ; 16 :
21843: LD_ADDR_OWVAR 42
21847: PUSH
21848: LD_INT 3
21850: ST_TO_ADDR
21851: GO 22232
21853: LD_INT 16
21855: DOUBLE
21856: EQUAL
21857: IFTRUE 21861
21859: GO 21872
21861: POP
// bc_type := b_ext_gun ; 17 :
21862: LD_ADDR_OWVAR 42
21866: PUSH
21867: LD_INT 17
21869: ST_TO_ADDR
21870: GO 22232
21872: LD_INT 17
21874: DOUBLE
21875: EQUAL
21876: IFTRUE 21880
21878: GO 21908
21880: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21881: LD_ADDR_OWVAR 42
21885: PUSH
21886: LD_INT 19
21888: PUSH
21889: LD_INT 23
21891: PUSH
21892: LD_INT 19
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: PUSH
21900: LD_VAR 0 1
21904: ARRAY
21905: ST_TO_ADDR
21906: GO 22232
21908: LD_INT 18
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 21927
21916: POP
// bc_type := b_ext_radar ; 19 :
21917: LD_ADDR_OWVAR 42
21921: PUSH
21922: LD_INT 20
21924: ST_TO_ADDR
21925: GO 22232
21927: LD_INT 19
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21946
21935: POP
// bc_type := b_ext_radio ; 20 :
21936: LD_ADDR_OWVAR 42
21940: PUSH
21941: LD_INT 22
21943: ST_TO_ADDR
21944: GO 22232
21946: LD_INT 20
21948: DOUBLE
21949: EQUAL
21950: IFTRUE 21954
21952: GO 21965
21954: POP
// bc_type := b_ext_siberium ; 21 :
21955: LD_ADDR_OWVAR 42
21959: PUSH
21960: LD_INT 21
21962: ST_TO_ADDR
21963: GO 22232
21965: LD_INT 21
21967: DOUBLE
21968: EQUAL
21969: IFTRUE 21973
21971: GO 21984
21973: POP
// bc_type := b_ext_computer ; 22 :
21974: LD_ADDR_OWVAR 42
21978: PUSH
21979: LD_INT 24
21981: ST_TO_ADDR
21982: GO 22232
21984: LD_INT 22
21986: DOUBLE
21987: EQUAL
21988: IFTRUE 21992
21990: GO 22003
21992: POP
// bc_type := b_ext_track ; 23 :
21993: LD_ADDR_OWVAR 42
21997: PUSH
21998: LD_INT 16
22000: ST_TO_ADDR
22001: GO 22232
22003: LD_INT 23
22005: DOUBLE
22006: EQUAL
22007: IFTRUE 22011
22009: GO 22022
22011: POP
// bc_type := b_ext_laser ; 24 :
22012: LD_ADDR_OWVAR 42
22016: PUSH
22017: LD_INT 25
22019: ST_TO_ADDR
22020: GO 22232
22022: LD_INT 24
22024: DOUBLE
22025: EQUAL
22026: IFTRUE 22030
22028: GO 22041
22030: POP
// bc_type := b_control_tower ; 25 :
22031: LD_ADDR_OWVAR 42
22035: PUSH
22036: LD_INT 36
22038: ST_TO_ADDR
22039: GO 22232
22041: LD_INT 25
22043: DOUBLE
22044: EQUAL
22045: IFTRUE 22049
22047: GO 22060
22049: POP
// bc_type := b_breastwork ; 26 :
22050: LD_ADDR_OWVAR 42
22054: PUSH
22055: LD_INT 31
22057: ST_TO_ADDR
22058: GO 22232
22060: LD_INT 26
22062: DOUBLE
22063: EQUAL
22064: IFTRUE 22068
22066: GO 22079
22068: POP
// bc_type := b_bunker ; 27 :
22069: LD_ADDR_OWVAR 42
22073: PUSH
22074: LD_INT 32
22076: ST_TO_ADDR
22077: GO 22232
22079: LD_INT 27
22081: DOUBLE
22082: EQUAL
22083: IFTRUE 22087
22085: GO 22098
22087: POP
// bc_type := b_turret ; 28 :
22088: LD_ADDR_OWVAR 42
22092: PUSH
22093: LD_INT 33
22095: ST_TO_ADDR
22096: GO 22232
22098: LD_INT 28
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22117
22106: POP
// bc_type := b_armoury ; 29 :
22107: LD_ADDR_OWVAR 42
22111: PUSH
22112: LD_INT 4
22114: ST_TO_ADDR
22115: GO 22232
22117: LD_INT 29
22119: DOUBLE
22120: EQUAL
22121: IFTRUE 22125
22123: GO 22136
22125: POP
// bc_type := b_barracks ; 30 :
22126: LD_ADDR_OWVAR 42
22130: PUSH
22131: LD_INT 5
22133: ST_TO_ADDR
22134: GO 22232
22136: LD_INT 30
22138: DOUBLE
22139: EQUAL
22140: IFTRUE 22144
22142: GO 22155
22144: POP
// bc_type := b_solar_power ; 31 :
22145: LD_ADDR_OWVAR 42
22149: PUSH
22150: LD_INT 27
22152: ST_TO_ADDR
22153: GO 22232
22155: LD_INT 31
22157: DOUBLE
22158: EQUAL
22159: IFTRUE 22163
22161: GO 22174
22163: POP
// bc_type := b_oil_power ; 32 :
22164: LD_ADDR_OWVAR 42
22168: PUSH
22169: LD_INT 26
22171: ST_TO_ADDR
22172: GO 22232
22174: LD_INT 32
22176: DOUBLE
22177: EQUAL
22178: IFTRUE 22182
22180: GO 22193
22182: POP
// bc_type := b_siberite_power ; 33 :
22183: LD_ADDR_OWVAR 42
22187: PUSH
22188: LD_INT 28
22190: ST_TO_ADDR
22191: GO 22232
22193: LD_INT 33
22195: DOUBLE
22196: EQUAL
22197: IFTRUE 22201
22199: GO 22212
22201: POP
// bc_type := b_oil_mine ; 34 :
22202: LD_ADDR_OWVAR 42
22206: PUSH
22207: LD_INT 29
22209: ST_TO_ADDR
22210: GO 22232
22212: LD_INT 34
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22231
22220: POP
// bc_type := b_siberite_mine ; end ;
22221: LD_ADDR_OWVAR 42
22225: PUSH
22226: LD_INT 30
22228: ST_TO_ADDR
22229: GO 22232
22231: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22232: LD_ADDR_VAR 0 8
22236: PUSH
22237: LD_VAR 0 5
22241: PPUSH
22242: LD_VAR 0 6
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: CALL_OW 47
22256: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22257: LD_OWVAR 42
22261: PUSH
22262: LD_INT 32
22264: PUSH
22265: LD_INT 33
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: IN
22272: IFFALSE 22288
// PlaceWeaponTurret ( b , weapon ) ;
22274: LD_VAR 0 8
22278: PPUSH
22279: LD_VAR 0 4
22283: PPUSH
22284: CALL_OW 431
// end ;
22288: LD_VAR 0 7
22292: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22293: LD_INT 0
22295: PPUSH
22296: PPUSH
22297: PPUSH
22298: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22299: LD_ADDR_VAR 0 4
22303: PUSH
22304: LD_INT 22
22306: PUSH
22307: LD_OWVAR 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 30
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PPUSH
22348: CALL_OW 69
22352: ST_TO_ADDR
// if not tmp then
22353: LD_VAR 0 4
22357: NOT
22358: IFFALSE 22362
// exit ;
22360: GO 22421
// for i in tmp do
22362: LD_ADDR_VAR 0 2
22366: PUSH
22367: LD_VAR 0 4
22371: PUSH
22372: FOR_IN
22373: IFFALSE 22419
// for j = 1 to 3 do
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: DOUBLE
22381: LD_INT 1
22383: DEC
22384: ST_TO_ADDR
22385: LD_INT 3
22387: PUSH
22388: FOR_TO
22389: IFFALSE 22415
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22391: LD_VAR 0 2
22395: PPUSH
22396: CALL_OW 274
22400: PPUSH
22401: LD_VAR 0 3
22405: PPUSH
22406: LD_INT 99999
22408: PPUSH
22409: CALL_OW 277
22413: GO 22388
22415: POP
22416: POP
22417: GO 22372
22419: POP
22420: POP
// end ;
22421: LD_VAR 0 1
22425: RET
// export function hHackSetLevel10 ; var i , j ; begin
22426: LD_INT 0
22428: PPUSH
22429: PPUSH
22430: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 21
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 69
22450: PUSH
22451: FOR_IN
22452: IFFALSE 22504
// if IsSelected ( i ) then
22454: LD_VAR 0 2
22458: PPUSH
22459: CALL_OW 306
22463: IFFALSE 22502
// begin for j := 1 to 4 do
22465: LD_ADDR_VAR 0 3
22469: PUSH
22470: DOUBLE
22471: LD_INT 1
22473: DEC
22474: ST_TO_ADDR
22475: LD_INT 4
22477: PUSH
22478: FOR_TO
22479: IFFALSE 22500
// SetSkill ( i , j , 10 ) ;
22481: LD_VAR 0 2
22485: PPUSH
22486: LD_VAR 0 3
22490: PPUSH
22491: LD_INT 10
22493: PPUSH
22494: CALL_OW 237
22498: GO 22478
22500: POP
22501: POP
// end ;
22502: GO 22451
22504: POP
22505: POP
// end ;
22506: LD_VAR 0 1
22510: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22511: LD_INT 0
22513: PPUSH
22514: PPUSH
22515: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22516: LD_ADDR_VAR 0 2
22520: PUSH
22521: LD_INT 22
22523: PUSH
22524: LD_OWVAR 2
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 21
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PPUSH
22547: CALL_OW 69
22551: PUSH
22552: FOR_IN
22553: IFFALSE 22594
// begin for j := 1 to 4 do
22555: LD_ADDR_VAR 0 3
22559: PUSH
22560: DOUBLE
22561: LD_INT 1
22563: DEC
22564: ST_TO_ADDR
22565: LD_INT 4
22567: PUSH
22568: FOR_TO
22569: IFFALSE 22590
// SetSkill ( i , j , 10 ) ;
22571: LD_VAR 0 2
22575: PPUSH
22576: LD_VAR 0 3
22580: PPUSH
22581: LD_INT 10
22583: PPUSH
22584: CALL_OW 237
22588: GO 22568
22590: POP
22591: POP
// end ;
22592: GO 22552
22594: POP
22595: POP
// end ;
22596: LD_VAR 0 1
22600: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22601: LD_INT 0
22603: PPUSH
// uc_side := your_side ;
22604: LD_ADDR_OWVAR 20
22608: PUSH
22609: LD_OWVAR 2
22613: ST_TO_ADDR
// uc_nation := nation ;
22614: LD_ADDR_OWVAR 21
22618: PUSH
22619: LD_VAR 0 1
22623: ST_TO_ADDR
// InitHc ;
22624: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22628: LD_INT 0
22630: PPUSH
22631: LD_VAR 0 2
22635: PPUSH
22636: LD_VAR 0 3
22640: PPUSH
22641: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22645: LD_VAR 0 4
22649: PPUSH
22650: LD_VAR 0 5
22654: PPUSH
22655: CALL_OW 428
22659: PUSH
22660: LD_INT 0
22662: EQUAL
22663: IFFALSE 22687
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22665: CALL_OW 44
22669: PPUSH
22670: LD_VAR 0 4
22674: PPUSH
22675: LD_VAR 0 5
22679: PPUSH
22680: LD_INT 1
22682: PPUSH
22683: CALL_OW 48
// end ;
22687: LD_VAR 0 6
22691: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22692: LD_INT 0
22694: PPUSH
22695: PPUSH
// uc_side := your_side ;
22696: LD_ADDR_OWVAR 20
22700: PUSH
22701: LD_OWVAR 2
22705: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22706: LD_VAR 0 1
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: IN
22733: IFFALSE 22745
// uc_nation := nation_american else
22735: LD_ADDR_OWVAR 21
22739: PUSH
22740: LD_INT 1
22742: ST_TO_ADDR
22743: GO 22788
// if chassis in [ 11 , 12 , 13 , 14 ] then
22745: LD_VAR 0 1
22749: PUSH
22750: LD_INT 11
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 13
22758: PUSH
22759: LD_INT 14
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: IN
22768: IFFALSE 22780
// uc_nation := nation_arabian else
22770: LD_ADDR_OWVAR 21
22774: PUSH
22775: LD_INT 2
22777: ST_TO_ADDR
22778: GO 22788
// uc_nation := nation_russian ;
22780: LD_ADDR_OWVAR 21
22784: PUSH
22785: LD_INT 3
22787: ST_TO_ADDR
// vc_chassis := chassis ;
22788: LD_ADDR_OWVAR 37
22792: PUSH
22793: LD_VAR 0 1
22797: ST_TO_ADDR
// vc_engine := engine ;
22798: LD_ADDR_OWVAR 39
22802: PUSH
22803: LD_VAR 0 2
22807: ST_TO_ADDR
// vc_control := control ;
22808: LD_ADDR_OWVAR 38
22812: PUSH
22813: LD_VAR 0 3
22817: ST_TO_ADDR
// vc_weapon := weapon ;
22818: LD_ADDR_OWVAR 40
22822: PUSH
22823: LD_VAR 0 4
22827: ST_TO_ADDR
// un := CreateVehicle ;
22828: LD_ADDR_VAR 0 8
22832: PUSH
22833: CALL_OW 45
22837: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22838: LD_VAR 0 8
22842: PPUSH
22843: LD_INT 0
22845: PPUSH
22846: LD_INT 5
22848: PPUSH
22849: CALL_OW 12
22853: PPUSH
22854: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22858: LD_VAR 0 8
22862: PPUSH
22863: LD_VAR 0 5
22867: PPUSH
22868: LD_VAR 0 6
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: CALL_OW 48
// end ;
22880: LD_VAR 0 7
22884: RET
// export hInvincible ; every 1 do
22885: GO 22887
22887: DISABLE
// hInvincible := [ ] ;
22888: LD_ADDR_EXP 110
22892: PUSH
22893: EMPTY
22894: ST_TO_ADDR
22895: END
// every 10 do var i ;
22896: GO 22898
22898: DISABLE
22899: LD_INT 0
22901: PPUSH
// begin enable ;
22902: ENABLE
// if not hInvincible then
22903: LD_EXP 110
22907: NOT
22908: IFFALSE 22912
// exit ;
22910: GO 22956
// for i in hInvincible do
22912: LD_ADDR_VAR 0 1
22916: PUSH
22917: LD_EXP 110
22921: PUSH
22922: FOR_IN
22923: IFFALSE 22954
// if GetLives ( i ) < 1000 then
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 256
22934: PUSH
22935: LD_INT 1000
22937: LESS
22938: IFFALSE 22952
// SetLives ( i , 1000 ) ;
22940: LD_VAR 0 1
22944: PPUSH
22945: LD_INT 1000
22947: PPUSH
22948: CALL_OW 234
22952: GO 22922
22954: POP
22955: POP
// end ;
22956: PPOPN 1
22958: END
// export function hHackInvincible ; var i ; begin
22959: LD_INT 0
22961: PPUSH
22962: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22963: LD_ADDR_VAR 0 2
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 21
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 21
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: PPUSH
22996: CALL_OW 69
23000: PUSH
23001: FOR_IN
23002: IFFALSE 23063
// if IsSelected ( i ) then
23004: LD_VAR 0 2
23008: PPUSH
23009: CALL_OW 306
23013: IFFALSE 23061
// begin if i in hInvincible then
23015: LD_VAR 0 2
23019: PUSH
23020: LD_EXP 110
23024: IN
23025: IFFALSE 23045
// hInvincible := hInvincible diff i else
23027: LD_ADDR_EXP 110
23031: PUSH
23032: LD_EXP 110
23036: PUSH
23037: LD_VAR 0 2
23041: DIFF
23042: ST_TO_ADDR
23043: GO 23061
// hInvincible := hInvincible union i ;
23045: LD_ADDR_EXP 110
23049: PUSH
23050: LD_EXP 110
23054: PUSH
23055: LD_VAR 0 2
23059: UNION
23060: ST_TO_ADDR
// end ;
23061: GO 23001
23063: POP
23064: POP
// end ;
23065: LD_VAR 0 1
23069: RET
// export function hHackInvisible ; var i , j ; begin
23070: LD_INT 0
23072: PPUSH
23073: PPUSH
23074: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23075: LD_ADDR_VAR 0 2
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PPUSH
23090: CALL_OW 69
23094: PUSH
23095: FOR_IN
23096: IFFALSE 23120
// if IsSelected ( i ) then
23098: LD_VAR 0 2
23102: PPUSH
23103: CALL_OW 306
23107: IFFALSE 23118
// ComForceInvisible ( i ) ;
23109: LD_VAR 0 2
23113: PPUSH
23114: CALL_OW 496
23118: GO 23095
23120: POP
23121: POP
// end ;
23122: LD_VAR 0 1
23126: RET
// export function hHackChangeYourSide ; begin
23127: LD_INT 0
23129: PPUSH
// if your_side = 8 then
23130: LD_OWVAR 2
23134: PUSH
23135: LD_INT 8
23137: EQUAL
23138: IFFALSE 23150
// your_side := 0 else
23140: LD_ADDR_OWVAR 2
23144: PUSH
23145: LD_INT 0
23147: ST_TO_ADDR
23148: GO 23164
// your_side := your_side + 1 ;
23150: LD_ADDR_OWVAR 2
23154: PUSH
23155: LD_OWVAR 2
23159: PUSH
23160: LD_INT 1
23162: PLUS
23163: ST_TO_ADDR
// end ;
23164: LD_VAR 0 1
23168: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23169: LD_INT 0
23171: PPUSH
23172: PPUSH
23173: PPUSH
// for i in all_units do
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_OWVAR 3
23183: PUSH
23184: FOR_IN
23185: IFFALSE 23263
// if IsSelected ( i ) then
23187: LD_VAR 0 2
23191: PPUSH
23192: CALL_OW 306
23196: IFFALSE 23261
// begin j := GetSide ( i ) ;
23198: LD_ADDR_VAR 0 3
23202: PUSH
23203: LD_VAR 0 2
23207: PPUSH
23208: CALL_OW 255
23212: ST_TO_ADDR
// if j = 8 then
23213: LD_VAR 0 3
23217: PUSH
23218: LD_INT 8
23220: EQUAL
23221: IFFALSE 23233
// j := 0 else
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 0
23230: ST_TO_ADDR
23231: GO 23247
// j := j + 1 ;
23233: LD_ADDR_VAR 0 3
23237: PUSH
23238: LD_VAR 0 3
23242: PUSH
23243: LD_INT 1
23245: PLUS
23246: ST_TO_ADDR
// SetSide ( i , j ) ;
23247: LD_VAR 0 2
23251: PPUSH
23252: LD_VAR 0 3
23256: PPUSH
23257: CALL_OW 235
// end ;
23261: GO 23184
23263: POP
23264: POP
// end ;
23265: LD_VAR 0 1
23269: RET
// export function hHackFog ; begin
23270: LD_INT 0
23272: PPUSH
// FogOff ( true ) ;
23273: LD_INT 1
23275: PPUSH
23276: CALL_OW 344
// end ;
23280: LD_VAR 0 1
23284: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23285: LD_INT 0
23287: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23288: LD_VAR 0 1
23292: PPUSH
23293: LD_VAR 0 2
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_INT 1
23305: PPUSH
23306: LD_INT 1
23308: PPUSH
23309: CALL_OW 483
// CenterOnXY ( x , y ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_VAR 0 3
23322: PPUSH
23323: CALL_OW 84
// end ;
23327: LD_VAR 0 4
23331: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23336: LD_VAR 0 1
23340: NOT
23341: IFTRUE 23360
23343: PUSH
23344: LD_VAR 0 2
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: CALL_OW 488
23358: NOT
23359: OR
23360: IFTRUE 23395
23362: PUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 266
23372: PUSH
23373: LD_INT 3
23375: NONEQUAL
23376: IFFALSE 23394
23378: PUSH
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 247
23388: PUSH
23389: LD_INT 1
23391: EQUAL
23392: NOT
23393: AND
23394: OR
23395: IFFALSE 23399
// exit ;
23397: GO 23681
// if GetType ( factory ) = unit_human then
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 247
23408: PUSH
23409: LD_INT 1
23411: EQUAL
23412: IFFALSE 23429
// factory := IsInUnit ( factory ) ;
23414: LD_ADDR_VAR 0 1
23418: PUSH
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 310
23428: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 266
23438: PUSH
23439: LD_INT 3
23441: NONEQUAL
23442: IFFALSE 23446
// exit ;
23444: GO 23681
// for i := 1 to Count ( factoryWaypoints ) do
23446: LD_ADDR_VAR 0 5
23450: PUSH
23451: DOUBLE
23452: LD_INT 1
23454: DEC
23455: ST_TO_ADDR
23456: LD_EXP 111
23460: PPUSH
23461: CALL 33214 0 1
23465: PUSH
23466: FOR_TO
23467: IFFALSE 23629
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: CALL_OW 428
23483: PUSH
23484: LD_EXP 111
23488: PUSH
23489: LD_VAR 0 5
23493: ARRAY
23494: PUSH
23495: LD_INT 2
23497: ARRAY
23498: EQUAL
23499: IFFALSE 23531
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23501: LD_ADDR_EXP 111
23505: PUSH
23506: LD_EXP 111
23510: PPUSH
23511: LD_VAR 0 5
23515: PPUSH
23516: CALL_OW 3
23520: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23521: CALL 23686 0 0
// exit ;
23525: POP
23526: POP
23527: GO 23681
// end else
23529: GO 23627
// if factory = factoryWaypoints [ i ] [ 2 ] then
23531: LD_VAR 0 1
23535: PUSH
23536: LD_EXP 111
23540: PUSH
23541: LD_VAR 0 5
23545: ARRAY
23546: PUSH
23547: LD_INT 2
23549: ARRAY
23550: EQUAL
23551: IFFALSE 23627
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23553: LD_ADDR_EXP 111
23557: PUSH
23558: LD_EXP 111
23562: PPUSH
23563: LD_VAR 0 5
23567: PPUSH
23568: CALL_OW 3
23572: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23573: LD_ADDR_EXP 111
23577: PUSH
23578: LD_EXP 111
23582: PPUSH
23583: LD_VAR 0 1
23587: PPUSH
23588: CALL_OW 255
23592: PUSH
23593: LD_VAR 0 1
23597: PUSH
23598: LD_VAR 0 2
23602: PUSH
23603: LD_VAR 0 3
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PPUSH
23614: CALL 69146 0 2
23618: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23619: CALL 23686 0 0
// exit ;
23623: POP
23624: POP
23625: GO 23681
// end ; end ;
23627: GO 23466
23629: POP
23630: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23631: LD_ADDR_EXP 111
23635: PUSH
23636: LD_EXP 111
23640: PPUSH
23641: LD_VAR 0 1
23645: PPUSH
23646: CALL_OW 255
23650: PUSH
23651: LD_VAR 0 1
23655: PUSH
23656: LD_VAR 0 2
23660: PUSH
23661: LD_VAR 0 3
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: PPUSH
23672: CALL 69146 0 2
23676: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23677: CALL 23686 0 0
// end ;
23681: LD_VAR 0 4
23685: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23686: LD_INT 0
23688: PPUSH
23689: PPUSH
23690: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23691: LD_STRING resetFactoryWaypoint();
23693: PPUSH
23694: CALL_OW 559
// if factoryWaypoints then
23698: LD_EXP 111
23702: IFFALSE 23823
// begin list := factoryWaypoints ;
23704: LD_ADDR_VAR 0 3
23708: PUSH
23709: LD_EXP 111
23713: ST_TO_ADDR
// for i := 1 to list do
23714: LD_ADDR_VAR 0 2
23718: PUSH
23719: DOUBLE
23720: LD_INT 1
23722: DEC
23723: ST_TO_ADDR
23724: LD_VAR 0 3
23728: PUSH
23729: FOR_TO
23730: IFFALSE 23821
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23732: LD_STRING setFactoryWaypointXY(
23734: PUSH
23735: LD_VAR 0 3
23739: PUSH
23740: LD_VAR 0 2
23744: ARRAY
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: STR
23750: PUSH
23751: LD_STRING ,
23753: STR
23754: PUSH
23755: LD_VAR 0 3
23759: PUSH
23760: LD_VAR 0 2
23764: ARRAY
23765: PUSH
23766: LD_INT 2
23768: ARRAY
23769: STR
23770: PUSH
23771: LD_STRING ,
23773: STR
23774: PUSH
23775: LD_VAR 0 3
23779: PUSH
23780: LD_VAR 0 2
23784: ARRAY
23785: PUSH
23786: LD_INT 3
23788: ARRAY
23789: STR
23790: PUSH
23791: LD_STRING ,
23793: STR
23794: PUSH
23795: LD_VAR 0 3
23799: PUSH
23800: LD_VAR 0 2
23804: ARRAY
23805: PUSH
23806: LD_INT 4
23808: ARRAY
23809: STR
23810: PUSH
23811: LD_STRING )
23813: STR
23814: PPUSH
23815: CALL_OW 559
23819: GO 23729
23821: POP
23822: POP
// end ; end ;
23823: LD_VAR 0 1
23827: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23828: LD_INT 0
23830: PPUSH
// if HexInfo ( x , y ) = warehouse then
23831: LD_VAR 0 2
23835: PPUSH
23836: LD_VAR 0 3
23840: PPUSH
23841: CALL_OW 428
23845: PUSH
23846: LD_VAR 0 1
23850: EQUAL
23851: IFFALSE 23878
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23853: LD_ADDR_EXP 113
23857: PUSH
23858: LD_EXP 113
23862: PPUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_INT 0
23870: PPUSH
23871: CALL_OW 1
23875: ST_TO_ADDR
23876: GO 23929
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23878: LD_ADDR_EXP 113
23882: PUSH
23883: LD_EXP 113
23887: PPUSH
23888: LD_VAR 0 1
23892: PPUSH
23893: LD_VAR 0 1
23897: PPUSH
23898: CALL_OW 255
23902: PUSH
23903: LD_VAR 0 1
23907: PUSH
23908: LD_VAR 0 2
23912: PUSH
23913: LD_VAR 0 3
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PPUSH
23924: CALL_OW 1
23928: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23929: CALL 23938 0 0
// end ;
23933: LD_VAR 0 4
23937: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23938: LD_INT 0
23940: PPUSH
23941: PPUSH
23942: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23943: LD_STRING resetWarehouseGatheringPoints();
23945: PPUSH
23946: CALL_OW 559
// if warehouseGatheringPoints then
23950: LD_EXP 113
23954: IFFALSE 24080
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23956: LD_ADDR_VAR 0 3
23960: PUSH
23961: LD_EXP 113
23965: PPUSH
23966: CALL 73080 0 1
23970: ST_TO_ADDR
// for i := 1 to list do
23971: LD_ADDR_VAR 0 2
23975: PUSH
23976: DOUBLE
23977: LD_INT 1
23979: DEC
23980: ST_TO_ADDR
23981: LD_VAR 0 3
23985: PUSH
23986: FOR_TO
23987: IFFALSE 24078
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23989: LD_STRING setWarehouseGatheringPointXY(
23991: PUSH
23992: LD_VAR 0 3
23996: PUSH
23997: LD_VAR 0 2
24001: ARRAY
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: STR
24007: PUSH
24008: LD_STRING ,
24010: STR
24011: PUSH
24012: LD_VAR 0 3
24016: PUSH
24017: LD_VAR 0 2
24021: ARRAY
24022: PUSH
24023: LD_INT 2
24025: ARRAY
24026: STR
24027: PUSH
24028: LD_STRING ,
24030: STR
24031: PUSH
24032: LD_VAR 0 3
24036: PUSH
24037: LD_VAR 0 2
24041: ARRAY
24042: PUSH
24043: LD_INT 3
24045: ARRAY
24046: STR
24047: PUSH
24048: LD_STRING ,
24050: STR
24051: PUSH
24052: LD_VAR 0 3
24056: PUSH
24057: LD_VAR 0 2
24061: ARRAY
24062: PUSH
24063: LD_INT 4
24065: ARRAY
24066: STR
24067: PUSH
24068: LD_STRING )
24070: STR
24071: PPUSH
24072: CALL_OW 559
24076: GO 23986
24078: POP
24079: POP
// end ; end ;
24080: LD_VAR 0 1
24084: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24085: LD_EXP 113
24089: IFFALSE 24784
24091: GO 24093
24093: DISABLE
24094: LD_INT 0
24096: PPUSH
24097: PPUSH
24098: PPUSH
24099: PPUSH
24100: PPUSH
24101: PPUSH
24102: PPUSH
24103: PPUSH
24104: PPUSH
// begin enable ;
24105: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_EXP 113
24115: PPUSH
24116: CALL 73080 0 1
24120: ST_TO_ADDR
// if not list then
24121: LD_VAR 0 3
24125: NOT
24126: IFFALSE 24130
// exit ;
24128: GO 24784
// for i := 1 to list do
24130: LD_ADDR_VAR 0 1
24134: PUSH
24135: DOUBLE
24136: LD_INT 1
24138: DEC
24139: ST_TO_ADDR
24140: LD_VAR 0 3
24144: PUSH
24145: FOR_TO
24146: IFFALSE 24782
// begin depot := list [ i ] [ 2 ] ;
24148: LD_ADDR_VAR 0 8
24152: PUSH
24153: LD_VAR 0 3
24157: PUSH
24158: LD_VAR 0 1
24162: ARRAY
24163: PUSH
24164: LD_INT 2
24166: ARRAY
24167: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24168: LD_ADDR_VAR 0 5
24172: PUSH
24173: LD_VAR 0 3
24177: PUSH
24178: LD_VAR 0 1
24182: ARRAY
24183: PUSH
24184: LD_INT 1
24186: ARRAY
24187: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24188: LD_VAR 0 8
24192: PPUSH
24193: CALL_OW 301
24197: IFTRUE 24216
24199: PUSH
24200: LD_VAR 0 5
24204: PUSH
24205: LD_VAR 0 8
24209: PPUSH
24210: CALL_OW 255
24214: NONEQUAL
24215: OR
24216: IFFALSE 24245
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24218: LD_ADDR_EXP 113
24222: PUSH
24223: LD_EXP 113
24227: PPUSH
24228: LD_VAR 0 8
24232: PPUSH
24233: LD_INT 0
24235: PPUSH
24236: CALL_OW 1
24240: ST_TO_ADDR
// exit ;
24241: POP
24242: POP
24243: GO 24784
// end ; x := list [ i ] [ 3 ] ;
24245: LD_ADDR_VAR 0 6
24249: PUSH
24250: LD_VAR 0 3
24254: PUSH
24255: LD_VAR 0 1
24259: ARRAY
24260: PUSH
24261: LD_INT 3
24263: ARRAY
24264: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24265: LD_ADDR_VAR 0 7
24269: PUSH
24270: LD_VAR 0 3
24274: PUSH
24275: LD_VAR 0 1
24279: ARRAY
24280: PUSH
24281: LD_INT 4
24283: ARRAY
24284: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24285: LD_ADDR_VAR 0 9
24289: PUSH
24290: LD_VAR 0 6
24294: PPUSH
24295: LD_VAR 0 7
24299: PPUSH
24300: LD_INT 16
24302: PPUSH
24303: CALL 71654 0 3
24307: ST_TO_ADDR
// if not cratesNearbyPoint then
24308: LD_VAR 0 9
24312: NOT
24313: IFFALSE 24319
// exit ;
24315: POP
24316: POP
24317: GO 24784
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24319: LD_ADDR_VAR 0 4
24323: PUSH
24324: LD_INT 22
24326: PUSH
24327: LD_VAR 0 5
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 3
24338: PUSH
24339: LD_INT 60
24341: PUSH
24342: EMPTY
24343: LIST
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 91
24351: PUSH
24352: LD_VAR 0 8
24356: PUSH
24357: LD_INT 6
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 25
24370: PUSH
24371: LD_INT 2
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 25
24380: PUSH
24381: LD_INT 16
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 69
24403: PUSH
24404: LD_VAR 0 8
24408: PPUSH
24409: CALL_OW 313
24413: PPUSH
24414: LD_INT 3
24416: PUSH
24417: LD_INT 60
24419: PUSH
24420: EMPTY
24421: LIST
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: LD_INT 25
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 25
24442: PUSH
24443: LD_INT 16
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PPUSH
24459: CALL_OW 72
24463: UNION
24464: ST_TO_ADDR
// if tmp then
24465: LD_VAR 0 4
24469: IFFALSE 24549
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24471: LD_ADDR_VAR 0 4
24475: PUSH
24476: LD_VAR 0 4
24480: PPUSH
24481: LD_INT 3
24483: PPUSH
24484: CALL 69461 0 2
24488: ST_TO_ADDR
// for j in tmp do
24489: LD_ADDR_VAR 0 2
24493: PUSH
24494: LD_VAR 0 4
24498: PUSH
24499: FOR_IN
24500: IFFALSE 24543
// begin if IsInUnit ( j ) then
24502: LD_VAR 0 2
24506: PPUSH
24507: CALL_OW 310
24511: IFFALSE 24522
// ComExit ( j ) ;
24513: LD_VAR 0 2
24517: PPUSH
24518: CALL 69544 0 1
// AddComCollect ( j , x , y ) ;
24522: LD_VAR 0 2
24526: PPUSH
24527: LD_VAR 0 6
24531: PPUSH
24532: LD_VAR 0 7
24536: PPUSH
24537: CALL_OW 177
// end ;
24541: GO 24499
24543: POP
24544: POP
// exit ;
24545: POP
24546: POP
24547: GO 24784
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24549: LD_ADDR_VAR 0 4
24553: PUSH
24554: LD_INT 22
24556: PUSH
24557: LD_VAR 0 5
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 91
24568: PUSH
24569: LD_VAR 0 8
24573: PUSH
24574: LD_INT 8
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 34
24587: PUSH
24588: LD_INT 12
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 34
24597: PUSH
24598: LD_INT 51
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 34
24607: PUSH
24608: LD_INT 32
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 34
24617: PUSH
24618: LD_INT 89
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: PPUSH
24637: CALL_OW 69
24641: ST_TO_ADDR
// if tmp then
24642: LD_VAR 0 4
24646: IFFALSE 24780
// begin for j in tmp do
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_VAR 0 4
24657: PUSH
24658: FOR_IN
24659: IFFALSE 24778
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24661: LD_VAR 0 2
24665: PPUSH
24666: CALL_OW 262
24670: PUSH
24671: LD_INT 3
24673: EQUAL
24674: IFTRUE 24691
24676: PUSH
24677: LD_VAR 0 2
24681: PPUSH
24682: CALL_OW 261
24686: PUSH
24687: LD_INT 20
24689: GREATER
24690: OR
24691: IFFALSE 24705
24693: PUSH
24694: LD_VAR 0 2
24698: PPUSH
24699: CALL_OW 314
24703: NOT
24704: AND
24705: IFFALSE 24735
24707: PUSH
24708: LD_VAR 0 2
24712: PPUSH
24713: CALL_OW 263
24717: PUSH
24718: LD_INT 1
24720: NONEQUAL
24721: IFTRUE 24734
24723: PUSH
24724: LD_VAR 0 2
24728: PPUSH
24729: CALL_OW 311
24733: OR
24734: AND
24735: IFFALSE 24776
// begin ComCollect ( j , x , y ) ;
24737: LD_VAR 0 2
24741: PPUSH
24742: LD_VAR 0 6
24746: PPUSH
24747: LD_VAR 0 7
24751: PPUSH
24752: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 8
24765: PPUSH
24766: CALL_OW 172
// exit ;
24770: POP
24771: POP
24772: POP
24773: POP
24774: GO 24784
// end ;
24776: GO 24658
24778: POP
24779: POP
// end ; end ;
24780: GO 24145
24782: POP
24783: POP
// end ; end_of_file
24784: PPOPN 9
24786: END
// export function SOS_UnitDestroyed ( un ) ; begin
24787: LD_INT 0
24789: PPUSH
// ComRadiation ( un ) ;
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL 25876 0 1
// end ;
24799: LD_VAR 0 2
24803: RET
// export function SOS_UnitKamikazed ( un ) ; begin
24804: LD_INT 0
24806: PPUSH
// ComRadiation ( un ) ;
24807: LD_VAR 0 1
24811: PPUSH
24812: CALL 25876 0 1
// end ;
24816: LD_VAR 0 2
24820: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24821: LD_INT 0
24823: PPUSH
// end ;
24824: LD_VAR 0 4
24828: RET
// export function SOS_Command ( cmd ) ; begin
24829: LD_INT 0
24831: PPUSH
// end ;
24832: LD_VAR 0 2
24836: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24837: LD_INT 0
24839: PPUSH
// end ;
24840: LD_VAR 0 6
24844: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
24849: PPUSH
24850: PPUSH
// if not vehicle or not factory then
24851: LD_VAR 0 1
24855: NOT
24856: IFTRUE 24865
24858: PUSH
24859: LD_VAR 0 2
24863: NOT
24864: OR
24865: IFFALSE 24869
// exit ;
24867: GO 25451
// if not factoryWaypoints then
24869: LD_EXP 111
24873: NOT
24874: IFFALSE 24878
// exit ;
24876: GO 25451
// for i := 1 to Count ( factoryWaypoints ) do
24878: LD_ADDR_VAR 0 4
24882: PUSH
24883: DOUBLE
24884: LD_INT 1
24886: DEC
24887: ST_TO_ADDR
24888: LD_EXP 111
24892: PPUSH
24893: CALL 33214 0 1
24897: PUSH
24898: FOR_TO
24899: IFFALSE 25449
// if factoryWaypoints [ i ] [ 2 ] = factory then
24901: LD_EXP 111
24905: PUSH
24906: LD_VAR 0 4
24910: ARRAY
24911: PUSH
24912: LD_INT 2
24914: ARRAY
24915: PUSH
24916: LD_VAR 0 2
24920: EQUAL
24921: IFFALSE 25447
// begin if GetControl ( vehicle ) = control_manual then
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 263
24932: PUSH
24933: LD_INT 1
24935: EQUAL
24936: IFFALSE 25300
// begin driver := IsDrivenBy ( vehicle ) ;
24938: LD_ADDR_VAR 0 5
24942: PUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 311
24952: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
24953: LD_VAR 0 5
24957: PUSH
24958: LD_EXP 112
24962: IN
24963: IFTRUE 24977
24965: PUSH
24966: LD_VAR 0 1
24970: PUSH
24971: LD_EXP 112
24975: IN
24976: OR
24977: IFFALSE 24983
// exit ;
24979: POP
24980: POP
24981: GO 25451
// if not HasTask ( driver ) then
24983: LD_VAR 0 5
24987: PPUSH
24988: CALL_OW 314
24992: NOT
24993: IFFALSE 25298
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
24995: LD_ADDR_EXP 112
24999: PUSH
25000: LD_EXP 112
25004: PPUSH
25005: LD_VAR 0 5
25009: PPUSH
25010: CALL 69146 0 2
25014: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25015: LD_ADDR_EXP 112
25019: PUSH
25020: LD_EXP 112
25024: PPUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL 69146 0 2
25034: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25035: LD_ADDR_VAR 0 6
25039: PUSH
25040: LD_EXP 111
25044: PUSH
25045: LD_VAR 0 4
25049: ARRAY
25050: PUSH
25051: LD_INT 3
25053: ARRAY
25054: PPUSH
25055: LD_EXP 111
25059: PUSH
25060: LD_VAR 0 4
25064: ARRAY
25065: PUSH
25066: LD_INT 4
25068: ARRAY
25069: PPUSH
25070: CALL_OW 428
25074: ST_TO_ADDR
// if hex then
25075: LD_VAR 0 6
25079: IFFALSE 25097
// ComMoveUnit ( driver , hex ) else
25081: LD_VAR 0 5
25085: PPUSH
25086: LD_VAR 0 6
25090: PPUSH
25091: CALL_OW 112
25095: GO 25181
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25097: LD_VAR 0 1
25101: PPUSH
25102: LD_EXP 111
25106: PUSH
25107: LD_VAR 0 4
25111: ARRAY
25112: PUSH
25113: LD_INT 3
25115: ARRAY
25116: PPUSH
25117: LD_EXP 111
25121: PUSH
25122: LD_VAR 0 4
25126: ARRAY
25127: PUSH
25128: LD_INT 4
25130: ARRAY
25131: PPUSH
25132: CALL_OW 297
25136: PUSH
25137: LD_INT 0
25139: GREATER
25140: IFFALSE 25181
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25142: LD_VAR 0 5
25146: PPUSH
25147: LD_EXP 111
25151: PUSH
25152: LD_VAR 0 4
25156: ARRAY
25157: PUSH
25158: LD_INT 3
25160: ARRAY
25161: PPUSH
25162: LD_EXP 111
25166: PUSH
25167: LD_VAR 0 4
25171: ARRAY
25172: PUSH
25173: LD_INT 4
25175: ARRAY
25176: PPUSH
25177: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25181: LD_VAR 0 5
25185: PPUSH
25186: CALL_OW 181
// if Multiplayer then
25190: LD_OWVAR 4
25194: IFFALSE 25243
// begin repeat wait ( 10 ) ;
25196: LD_INT 10
25198: PPUSH
25199: CALL_OW 67
// until not IsInUnit ( driver ) ;
25203: LD_VAR 0 5
25207: PPUSH
25208: CALL_OW 310
25212: NOT
25213: IFFALSE 25196
// if not HasTask ( driver ) then
25215: LD_VAR 0 5
25219: PPUSH
25220: CALL_OW 314
25224: NOT
25225: IFFALSE 25241
// ComEnterUnit ( driver , factory ) ;
25227: LD_VAR 0 5
25231: PPUSH
25232: LD_VAR 0 2
25236: PPUSH
25237: CALL_OW 120
// end else
25241: GO 25257
// AddComEnterUnit ( driver , factory ) ;
25243: LD_VAR 0 5
25247: PPUSH
25248: LD_VAR 0 2
25252: PPUSH
25253: CALL_OW 180
// wait ( 0 0$1 ) ;
25257: LD_INT 35
25259: PPUSH
25260: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
25264: LD_ADDR_EXP 112
25268: PUSH
25269: LD_EXP 112
25273: PUSH
25274: LD_VAR 0 5
25278: DIFF
25279: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
25280: LD_ADDR_EXP 112
25284: PUSH
25285: LD_EXP 112
25289: PUSH
25290: LD_VAR 0 1
25294: DIFF
25295: ST_TO_ADDR
// break ;
25296: GO 25449
// end ; end else
25298: GO 25447
// if GetControl ( vehicle ) = control_remote then
25300: LD_VAR 0 1
25304: PPUSH
25305: CALL_OW 263
25309: PUSH
25310: LD_INT 2
25312: EQUAL
25313: IFFALSE 25399
// begin wait ( 0 0$2 ) ;
25315: LD_INT 70
25317: PPUSH
25318: CALL_OW 67
// repeat wait ( 10 ) ;
25322: LD_INT 10
25324: PPUSH
25325: CALL_OW 67
// Connect ( vehicle ) ;
25329: LD_VAR 0 1
25333: PPUSH
25334: CALL 39458 0 1
// until IsControledBy ( vehicle ) ;
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 312
25347: IFFALSE 25322
// wait ( 10 ) ;
25349: LD_INT 10
25351: PPUSH
25352: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_EXP 111
25365: PUSH
25366: LD_VAR 0 4
25370: ARRAY
25371: PUSH
25372: LD_INT 3
25374: ARRAY
25375: PPUSH
25376: LD_EXP 111
25380: PUSH
25381: LD_VAR 0 4
25385: ARRAY
25386: PUSH
25387: LD_INT 4
25389: ARRAY
25390: PPUSH
25391: CALL_OW 111
// break ;
25395: GO 25449
// end else
25397: GO 25447
// begin wait ( 0 0$3 ) ;
25399: LD_INT 105
25401: PPUSH
25402: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25406: LD_VAR 0 1
25410: PPUSH
25411: LD_EXP 111
25415: PUSH
25416: LD_VAR 0 4
25420: ARRAY
25421: PUSH
25422: LD_INT 3
25424: ARRAY
25425: PPUSH
25426: LD_EXP 111
25430: PUSH
25431: LD_VAR 0 4
25435: ARRAY
25436: PUSH
25437: LD_INT 4
25439: ARRAY
25440: PPUSH
25441: CALL_OW 111
// break ;
25445: GO 25449
// end ; end ;
25447: GO 24898
25449: POP
25450: POP
// end ;
25451: LD_VAR 0 3
25455: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25456: LD_INT 0
25458: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25459: LD_VAR 0 1
25463: PUSH
25464: LD_INT 250
25466: EQUAL
25467: IFFALSE 25484
25469: PUSH
25470: LD_VAR 0 2
25474: PPUSH
25475: CALL_OW 264
25479: PUSH
25480: LD_INT 81
25482: EQUAL
25483: AND
25484: IFFALSE 25505
// MinerPlaceMine ( unit , x , y ) ;
25486: LD_VAR 0 2
25490: PPUSH
25491: LD_VAR 0 4
25495: PPUSH
25496: LD_VAR 0 5
25500: PPUSH
25501: CALL 28637 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25505: LD_VAR 0 1
25509: PUSH
25510: LD_INT 251
25512: EQUAL
25513: IFFALSE 25530
25515: PUSH
25516: LD_VAR 0 2
25520: PPUSH
25521: CALL_OW 264
25525: PUSH
25526: LD_INT 81
25528: EQUAL
25529: AND
25530: IFFALSE 25551
// MinerDetonateMine ( unit , x , y ) ;
25532: LD_VAR 0 2
25536: PPUSH
25537: LD_VAR 0 4
25541: PPUSH
25542: LD_VAR 0 5
25546: PPUSH
25547: CALL 28916 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25551: LD_VAR 0 1
25555: PUSH
25556: LD_INT 252
25558: EQUAL
25559: IFFALSE 25576
25561: PUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: CALL_OW 264
25571: PUSH
25572: LD_INT 81
25574: EQUAL
25575: AND
25576: IFFALSE 25597
// MinerCreateMinefield ( unit , x , y ) ;
25578: LD_VAR 0 2
25582: PPUSH
25583: LD_VAR 0 4
25587: PPUSH
25588: LD_VAR 0 5
25592: PPUSH
25593: CALL 29335 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25597: LD_VAR 0 1
25601: PUSH
25602: LD_INT 253
25604: EQUAL
25605: IFFALSE 25622
25607: PUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: CALL_OW 257
25617: PUSH
25618: LD_INT 5
25620: EQUAL
25621: AND
25622: IFFALSE 25643
// ComBinocular ( unit , x , y ) ;
25624: LD_VAR 0 2
25628: PPUSH
25629: LD_VAR 0 4
25633: PPUSH
25634: LD_VAR 0 5
25638: PPUSH
25639: CALL 29710 0 3
// if selectedUnit then
25643: LD_VAR 0 3
25647: IFFALSE 25707
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25649: LD_VAR 0 1
25653: PUSH
25654: LD_INT 254
25656: EQUAL
25657: IFFALSE 25674
25659: PUSH
25660: LD_VAR 0 2
25664: PPUSH
25665: CALL_OW 264
25669: PUSH
25670: LD_INT 99
25672: EQUAL
25673: AND
25674: IFFALSE 25691
25676: PUSH
25677: LD_VAR 0 3
25681: PPUSH
25682: CALL_OW 263
25686: PUSH
25687: LD_INT 3
25689: EQUAL
25690: AND
25691: IFFALSE 25707
// HackDestroyVehicle ( unit , selectedUnit ) ;
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: CALL 27997 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25707: LD_VAR 0 1
25711: PUSH
25712: LD_INT 255
25714: EQUAL
25715: IFFALSE 25739
25717: PUSH
25718: LD_VAR 0 2
25722: PPUSH
25723: CALL_OW 264
25727: PUSH
25728: LD_INT 14
25730: PUSH
25731: LD_INT 53
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: IN
25738: AND
25739: IFFALSE 25757
25741: PUSH
25742: LD_VAR 0 4
25746: PPUSH
25747: LD_VAR 0 5
25751: PPUSH
25752: CALL_OW 488
25756: AND
25757: IFFALSE 25781
// CutTreeXYR ( unit , x , y , 12 ) ;
25759: LD_VAR 0 2
25763: PPUSH
25764: LD_VAR 0 4
25768: PPUSH
25769: LD_VAR 0 5
25773: PPUSH
25774: LD_INT 12
25776: PPUSH
25777: CALL 25972 0 4
// if cmd = 256 then
25781: LD_VAR 0 1
25785: PUSH
25786: LD_INT 256
25788: EQUAL
25789: IFFALSE 25810
// SetFactoryWaypoint ( unit , x , y ) ;
25791: LD_VAR 0 2
25795: PPUSH
25796: LD_VAR 0 4
25800: PPUSH
25801: LD_VAR 0 5
25805: PPUSH
25806: CALL 23332 0 3
// if cmd = 257 then
25810: LD_VAR 0 1
25814: PUSH
25815: LD_INT 257
25817: EQUAL
25818: IFFALSE 25839
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25820: LD_VAR 0 2
25824: PPUSH
25825: LD_VAR 0 4
25829: PPUSH
25830: LD_VAR 0 5
25834: PPUSH
25835: CALL 23828 0 3
// if cmd = 258 then
25839: LD_VAR 0 1
25843: PUSH
25844: LD_INT 258
25846: EQUAL
25847: IFFALSE 25871
// BurnTreeXYR ( unit , x , y , 8 ) ;
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_VAR 0 4
25858: PPUSH
25859: LD_VAR 0 5
25863: PPUSH
25864: LD_INT 8
25866: PPUSH
25867: CALL 26372 0 4
// end ;
25871: LD_VAR 0 6
25875: RET
// export function ComRadiation ( un ) ; var eff ; begin
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
25880: LD_VAR 0 1
25884: PPUSH
25885: CALL_OW 264
25889: PUSH
25890: LD_INT 91
25892: NONEQUAL
25893: IFFALSE 25897
// exit ;
25895: GO 25967
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25897: LD_INT 68
25899: PPUSH
25900: LD_VAR 0 1
25904: PPUSH
25905: CALL_OW 255
25909: PPUSH
25910: CALL_OW 321
25914: PUSH
25915: LD_INT 2
25917: EQUAL
25918: IFFALSE 25930
// eff := 50 else
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_INT 50
25927: ST_TO_ADDR
25928: GO 25938
// eff := 25 ;
25930: LD_ADDR_VAR 0 3
25934: PUSH
25935: LD_INT 25
25937: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25938: LD_VAR 0 1
25942: PPUSH
25943: CALL_OW 250
25947: PPUSH
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 251
25957: PPUSH
25958: LD_VAR 0 3
25962: PPUSH
25963: CALL_OW 495
// end ;
25967: LD_VAR 0 2
25971: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25983: LD_VAR 0 1
25987: PPUSH
25988: CALL_OW 302
25992: NOT
25993: IFTRUE 26012
25995: PUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_VAR 0 3
26005: PPUSH
26006: CALL_OW 488
26010: NOT
26011: OR
26012: IFTRUE 26021
26014: PUSH
26015: LD_VAR 0 4
26019: NOT
26020: OR
26021: IFFALSE 26025
// exit ;
26023: GO 26367
// list := [ ] ;
26025: LD_ADDR_VAR 0 13
26029: PUSH
26030: EMPTY
26031: ST_TO_ADDR
// if x - r < 0 then
26032: LD_VAR 0 2
26036: PUSH
26037: LD_VAR 0 4
26041: MINUS
26042: PUSH
26043: LD_INT 0
26045: LESS
26046: IFFALSE 26058
// min_x := 0 else
26048: LD_ADDR_VAR 0 7
26052: PUSH
26053: LD_INT 0
26055: ST_TO_ADDR
26056: GO 26074
// min_x := x - r ;
26058: LD_ADDR_VAR 0 7
26062: PUSH
26063: LD_VAR 0 2
26067: PUSH
26068: LD_VAR 0 4
26072: MINUS
26073: ST_TO_ADDR
// if y - r < 0 then
26074: LD_VAR 0 3
26078: PUSH
26079: LD_VAR 0 4
26083: MINUS
26084: PUSH
26085: LD_INT 0
26087: LESS
26088: IFFALSE 26100
// min_y := 0 else
26090: LD_ADDR_VAR 0 8
26094: PUSH
26095: LD_INT 0
26097: ST_TO_ADDR
26098: GO 26116
// min_y := y - r ;
26100: LD_ADDR_VAR 0 8
26104: PUSH
26105: LD_VAR 0 3
26109: PUSH
26110: LD_VAR 0 4
26114: MINUS
26115: ST_TO_ADDR
// max_x := x + r ;
26116: LD_ADDR_VAR 0 9
26120: PUSH
26121: LD_VAR 0 2
26125: PUSH
26126: LD_VAR 0 4
26130: PLUS
26131: ST_TO_ADDR
// max_y := y + r ;
26132: LD_ADDR_VAR 0 10
26136: PUSH
26137: LD_VAR 0 3
26141: PUSH
26142: LD_VAR 0 4
26146: PLUS
26147: ST_TO_ADDR
// for _x = min_x to max_x do
26148: LD_ADDR_VAR 0 11
26152: PUSH
26153: DOUBLE
26154: LD_VAR 0 7
26158: DEC
26159: ST_TO_ADDR
26160: LD_VAR 0 9
26164: PUSH
26165: FOR_TO
26166: IFFALSE 26285
// for _y = min_y to max_y do
26168: LD_ADDR_VAR 0 12
26172: PUSH
26173: DOUBLE
26174: LD_VAR 0 8
26178: DEC
26179: ST_TO_ADDR
26180: LD_VAR 0 10
26184: PUSH
26185: FOR_TO
26186: IFFALSE 26281
// begin if not ValidHex ( _x , _y ) then
26188: LD_VAR 0 11
26192: PPUSH
26193: LD_VAR 0 12
26197: PPUSH
26198: CALL_OW 488
26202: NOT
26203: IFFALSE 26207
// continue ;
26205: GO 26185
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26207: LD_VAR 0 11
26211: PPUSH
26212: LD_VAR 0 12
26216: PPUSH
26217: CALL_OW 351
26221: IFFALSE 26239
26223: PUSH
26224: LD_VAR 0 11
26228: PPUSH
26229: LD_VAR 0 12
26233: PPUSH
26234: CALL_OW 554
26238: AND
26239: IFFALSE 26279
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26241: LD_ADDR_VAR 0 13
26245: PUSH
26246: LD_VAR 0 13
26250: PPUSH
26251: LD_VAR 0 13
26255: PUSH
26256: LD_INT 1
26258: PLUS
26259: PPUSH
26260: LD_VAR 0 11
26264: PUSH
26265: LD_VAR 0 12
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PPUSH
26274: CALL_OW 2
26278: ST_TO_ADDR
// end ;
26279: GO 26185
26281: POP
26282: POP
26283: GO 26165
26285: POP
26286: POP
// if not list then
26287: LD_VAR 0 13
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26367
// for i in list do
26296: LD_ADDR_VAR 0 6
26300: PUSH
26301: LD_VAR 0 13
26305: PUSH
26306: FOR_IN
26307: IFFALSE 26365
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_STRING M
26316: PUSH
26317: LD_VAR 0 6
26321: PUSH
26322: LD_INT 1
26324: ARRAY
26325: PUSH
26326: LD_VAR 0 6
26330: PUSH
26331: LD_INT 2
26333: ARRAY
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: PPUSH
26359: CALL_OW 447
26363: GO 26306
26365: POP
26366: POP
// end ;
26367: LD_VAR 0 5
26371: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26384: LD_VAR 0 1
26388: PPUSH
26389: CALL_OW 302
26393: NOT
26394: IFTRUE 26413
26396: PUSH
26397: LD_VAR 0 2
26401: PPUSH
26402: LD_VAR 0 3
26406: PPUSH
26407: CALL_OW 488
26411: NOT
26412: OR
26413: IFTRUE 26422
26415: PUSH
26416: LD_VAR 0 4
26420: NOT
26421: OR
26422: IFFALSE 26426
// exit ;
26424: GO 26943
// list := [ ] ;
26426: LD_ADDR_VAR 0 13
26430: PUSH
26431: EMPTY
26432: ST_TO_ADDR
// if x - r < 0 then
26433: LD_VAR 0 2
26437: PUSH
26438: LD_VAR 0 4
26442: MINUS
26443: PUSH
26444: LD_INT 0
26446: LESS
26447: IFFALSE 26459
// min_x := 0 else
26449: LD_ADDR_VAR 0 7
26453: PUSH
26454: LD_INT 0
26456: ST_TO_ADDR
26457: GO 26475
// min_x := x - r ;
26459: LD_ADDR_VAR 0 7
26463: PUSH
26464: LD_VAR 0 2
26468: PUSH
26469: LD_VAR 0 4
26473: MINUS
26474: ST_TO_ADDR
// if y - r < 0 then
26475: LD_VAR 0 3
26479: PUSH
26480: LD_VAR 0 4
26484: MINUS
26485: PUSH
26486: LD_INT 0
26488: LESS
26489: IFFALSE 26501
// min_y := 0 else
26491: LD_ADDR_VAR 0 8
26495: PUSH
26496: LD_INT 0
26498: ST_TO_ADDR
26499: GO 26517
// min_y := y - r ;
26501: LD_ADDR_VAR 0 8
26505: PUSH
26506: LD_VAR 0 3
26510: PUSH
26511: LD_VAR 0 4
26515: MINUS
26516: ST_TO_ADDR
// max_x := x + r ;
26517: LD_ADDR_VAR 0 9
26521: PUSH
26522: LD_VAR 0 2
26526: PUSH
26527: LD_VAR 0 4
26531: PLUS
26532: ST_TO_ADDR
// max_y := y + r ;
26533: LD_ADDR_VAR 0 10
26537: PUSH
26538: LD_VAR 0 3
26542: PUSH
26543: LD_VAR 0 4
26547: PLUS
26548: ST_TO_ADDR
// for _x = min_x to max_x do
26549: LD_ADDR_VAR 0 11
26553: PUSH
26554: DOUBLE
26555: LD_VAR 0 7
26559: DEC
26560: ST_TO_ADDR
26561: LD_VAR 0 9
26565: PUSH
26566: FOR_TO
26567: IFFALSE 26686
// for _y = min_y to max_y do
26569: LD_ADDR_VAR 0 12
26573: PUSH
26574: DOUBLE
26575: LD_VAR 0 8
26579: DEC
26580: ST_TO_ADDR
26581: LD_VAR 0 10
26585: PUSH
26586: FOR_TO
26587: IFFALSE 26682
// begin if not ValidHex ( _x , _y ) then
26589: LD_VAR 0 11
26593: PPUSH
26594: LD_VAR 0 12
26598: PPUSH
26599: CALL_OW 488
26603: NOT
26604: IFFALSE 26608
// continue ;
26606: GO 26586
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26608: LD_VAR 0 11
26612: PPUSH
26613: LD_VAR 0 12
26617: PPUSH
26618: CALL_OW 351
26622: IFFALSE 26640
26624: PUSH
26625: LD_VAR 0 11
26629: PPUSH
26630: LD_VAR 0 12
26634: PPUSH
26635: CALL_OW 554
26639: AND
26640: IFFALSE 26680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26642: LD_ADDR_VAR 0 13
26646: PUSH
26647: LD_VAR 0 13
26651: PPUSH
26652: LD_VAR 0 13
26656: PUSH
26657: LD_INT 1
26659: PLUS
26660: PPUSH
26661: LD_VAR 0 11
26665: PUSH
26666: LD_VAR 0 12
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PPUSH
26675: CALL_OW 2
26679: ST_TO_ADDR
// end ;
26680: GO 26586
26682: POP
26683: POP
26684: GO 26566
26686: POP
26687: POP
// if not list then
26688: LD_VAR 0 13
26692: NOT
26693: IFFALSE 26697
// exit ;
26695: GO 26943
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26697: LD_ADDR_VAR 0 13
26701: PUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_VAR 0 13
26711: PPUSH
26712: LD_INT 1
26714: PPUSH
26715: LD_INT 1
26717: PPUSH
26718: CALL 36586 0 4
26722: ST_TO_ADDR
// ComStop ( flame ) ;
26723: LD_VAR 0 1
26727: PPUSH
26728: CALL_OW 141
// for i in list do
26732: LD_ADDR_VAR 0 6
26736: PUSH
26737: LD_VAR 0 13
26741: PUSH
26742: FOR_IN
26743: IFFALSE 26774
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26745: LD_VAR 0 1
26749: PPUSH
26750: LD_VAR 0 6
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PPUSH
26759: LD_VAR 0 6
26763: PUSH
26764: LD_INT 2
26766: ARRAY
26767: PPUSH
26768: CALL_OW 176
26772: GO 26742
26774: POP
26775: POP
// repeat wait ( 0 0$1 ) ;
26776: LD_INT 35
26778: PPUSH
26779: CALL_OW 67
// task := GetTaskList ( flame ) ;
26783: LD_ADDR_VAR 0 14
26787: PUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 437
26797: ST_TO_ADDR
// if not task then
26798: LD_VAR 0 14
26802: NOT
26803: IFFALSE 26807
// exit ;
26805: GO 26943
// if task [ 1 ] [ 1 ] <> | then
26807: LD_VAR 0 14
26811: PUSH
26812: LD_INT 1
26814: ARRAY
26815: PUSH
26816: LD_INT 1
26818: ARRAY
26819: PUSH
26820: LD_STRING |
26822: NONEQUAL
26823: IFFALSE 26827
// exit ;
26825: GO 26943
// _x := task [ 1 ] [ 2 ] ;
26827: LD_ADDR_VAR 0 11
26831: PUSH
26832: LD_VAR 0 14
26836: PUSH
26837: LD_INT 1
26839: ARRAY
26840: PUSH
26841: LD_INT 2
26843: ARRAY
26844: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26845: LD_ADDR_VAR 0 12
26849: PUSH
26850: LD_VAR 0 14
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PUSH
26859: LD_INT 3
26861: ARRAY
26862: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26863: LD_VAR 0 11
26867: PPUSH
26868: LD_VAR 0 12
26872: PPUSH
26873: CALL_OW 351
26877: NOT
26878: IFTRUE 26897
26880: PUSH
26881: LD_VAR 0 11
26885: PPUSH
26886: LD_VAR 0 12
26890: PPUSH
26891: CALL_OW 554
26895: NOT
26896: OR
26897: IFFALSE 26931
// begin task := Delete ( task , 1 ) ;
26899: LD_ADDR_VAR 0 14
26903: PUSH
26904: LD_VAR 0 14
26908: PPUSH
26909: LD_INT 1
26911: PPUSH
26912: CALL_OW 3
26916: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26917: LD_VAR 0 1
26921: PPUSH
26922: LD_VAR 0 14
26926: PPUSH
26927: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26931: LD_VAR 0 1
26935: PPUSH
26936: CALL_OW 314
26940: NOT
26941: IFFALSE 26776
// end ;
26943: LD_VAR 0 5
26947: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26948: LD_EXP 115
26952: NOT
26953: IFFALSE 27003
26955: GO 26957
26957: DISABLE
// begin initHack := true ;
26958: LD_ADDR_EXP 115
26962: PUSH
26963: LD_INT 1
26965: ST_TO_ADDR
// hackTanks := [ ] ;
26966: LD_ADDR_EXP 116
26970: PUSH
26971: EMPTY
26972: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26973: LD_ADDR_EXP 117
26977: PUSH
26978: EMPTY
26979: ST_TO_ADDR
// hackLimit := 3 ;
26980: LD_ADDR_EXP 118
26984: PUSH
26985: LD_INT 3
26987: ST_TO_ADDR
// hackDist := 12 ;
26988: LD_ADDR_EXP 119
26992: PUSH
26993: LD_INT 12
26995: ST_TO_ADDR
// hackCounter := [ ] ;
26996: LD_ADDR_EXP 120
27000: PUSH
27001: EMPTY
27002: ST_TO_ADDR
// end ;
27003: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27004: LD_EXP 115
27008: IFFALSE 27026
27010: PUSH
27011: LD_INT 34
27013: PUSH
27014: LD_INT 99
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PPUSH
27021: CALL_OW 69
27025: AND
27026: IFFALSE 27279
27028: GO 27030
27030: DISABLE
27031: LD_INT 0
27033: PPUSH
27034: PPUSH
// begin enable ;
27035: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27036: LD_ADDR_VAR 0 1
27040: PUSH
27041: LD_INT 34
27043: PUSH
27044: LD_INT 99
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PPUSH
27051: CALL_OW 69
27055: PUSH
27056: FOR_IN
27057: IFFALSE 27277
// begin if not i in hackTanks then
27059: LD_VAR 0 1
27063: PUSH
27064: LD_EXP 116
27068: IN
27069: NOT
27070: IFFALSE 27153
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27072: LD_ADDR_EXP 116
27076: PUSH
27077: LD_EXP 116
27081: PPUSH
27082: LD_EXP 116
27086: PUSH
27087: LD_INT 1
27089: PLUS
27090: PPUSH
27091: LD_VAR 0 1
27095: PPUSH
27096: CALL_OW 1
27100: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27101: LD_ADDR_EXP 117
27105: PUSH
27106: LD_EXP 117
27110: PPUSH
27111: LD_EXP 117
27115: PUSH
27116: LD_INT 1
27118: PLUS
27119: PPUSH
27120: EMPTY
27121: PPUSH
27122: CALL_OW 1
27126: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27127: LD_ADDR_EXP 120
27131: PUSH
27132: LD_EXP 120
27136: PPUSH
27137: LD_EXP 120
27141: PUSH
27142: LD_INT 1
27144: PLUS
27145: PPUSH
27146: EMPTY
27147: PPUSH
27148: CALL_OW 1
27152: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 302
27162: NOT
27163: IFFALSE 27176
// begin HackUnlinkAll ( i ) ;
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL 27282 0 1
// continue ;
27174: GO 27056
// end ; HackCheckCapturedStatus ( i ) ;
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL 27727 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27185: LD_ADDR_VAR 0 2
27189: PUSH
27190: LD_INT 81
27192: PUSH
27193: LD_VAR 0 1
27197: PPUSH
27198: CALL_OW 255
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 33
27209: PUSH
27210: LD_INT 3
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 91
27219: PUSH
27220: LD_VAR 0 1
27224: PUSH
27225: LD_EXP 119
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 50
27237: PUSH
27238: EMPTY
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 2
27256: NOT
27257: IFFALSE 27261
// continue ;
27259: GO 27056
// HackLink ( i , tmp ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: CALL 27418 0 2
// end ;
27275: GO 27056
27277: POP
27278: POP
// end ;
27279: PPOPN 2
27281: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
27286: PPUSH
// if not hack in hackTanks then
27287: LD_VAR 0 1
27291: PUSH
27292: LD_EXP 116
27296: IN
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27413
// index := GetElementIndex ( hackTanks , hack ) ;
27302: LD_ADDR_VAR 0 4
27306: PUSH
27307: LD_EXP 116
27311: PPUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL 35881 0 2
27321: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27322: LD_EXP 117
27326: PUSH
27327: LD_VAR 0 4
27331: ARRAY
27332: IFFALSE 27413
// begin for i in hackTanksCaptured [ index ] do
27334: LD_ADDR_VAR 0 3
27338: PUSH
27339: LD_EXP 117
27343: PUSH
27344: LD_VAR 0 4
27348: ARRAY
27349: PUSH
27350: FOR_IN
27351: IFFALSE 27377
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27353: LD_VAR 0 3
27357: PUSH
27358: LD_INT 1
27360: ARRAY
27361: PPUSH
27362: LD_VAR 0 3
27366: PUSH
27367: LD_INT 2
27369: ARRAY
27370: PPUSH
27371: CALL_OW 235
27375: GO 27350
27377: POP
27378: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27379: LD_ADDR_EXP 117
27383: PUSH
27384: LD_EXP 117
27388: PPUSH
27389: LD_VAR 0 4
27393: PPUSH
27394: EMPTY
27395: PPUSH
27396: CALL_OW 1
27400: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27401: LD_VAR 0 1
27405: PPUSH
27406: LD_INT 0
27408: PPUSH
27409: CALL_OW 505
// end ; end ;
27413: LD_VAR 0 2
27417: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27418: LD_INT 0
27420: PPUSH
27421: PPUSH
27422: PPUSH
// if not hack in hackTanks or not vehicles then
27423: LD_VAR 0 1
27427: PUSH
27428: LD_EXP 116
27432: IN
27433: NOT
27434: IFTRUE 27443
27436: PUSH
27437: LD_VAR 0 2
27441: NOT
27442: OR
27443: IFFALSE 27447
// exit ;
27445: GO 27722
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27447: LD_ADDR_VAR 0 2
27451: PUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_VAR 0 2
27461: PPUSH
27462: LD_INT 1
27464: PPUSH
27465: LD_INT 1
27467: PPUSH
27468: CALL 36533 0 4
27472: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27473: LD_ADDR_VAR 0 5
27477: PUSH
27478: LD_EXP 116
27482: PPUSH
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL 35881 0 2
27492: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27493: LD_EXP 117
27497: PUSH
27498: LD_VAR 0 5
27502: ARRAY
27503: PUSH
27504: LD_EXP 118
27508: LESS
27509: IFFALSE 27698
// begin for i := 1 to vehicles do
27511: LD_ADDR_VAR 0 4
27515: PUSH
27516: DOUBLE
27517: LD_INT 1
27519: DEC
27520: ST_TO_ADDR
27521: LD_VAR 0 2
27525: PUSH
27526: FOR_TO
27527: IFFALSE 27696
// begin if hackTanksCaptured [ index ] = hackLimit then
27529: LD_EXP 117
27533: PUSH
27534: LD_VAR 0 5
27538: ARRAY
27539: PUSH
27540: LD_EXP 118
27544: EQUAL
27545: IFFALSE 27549
// break ;
27547: GO 27696
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27549: LD_ADDR_EXP 120
27553: PUSH
27554: LD_EXP 120
27558: PPUSH
27559: LD_VAR 0 5
27563: PPUSH
27564: LD_EXP 120
27568: PUSH
27569: LD_VAR 0 5
27573: ARRAY
27574: PUSH
27575: LD_INT 1
27577: PLUS
27578: PPUSH
27579: CALL_OW 1
27583: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27584: LD_ADDR_EXP 117
27588: PUSH
27589: LD_EXP 117
27593: PPUSH
27594: LD_VAR 0 5
27598: PUSH
27599: LD_EXP 117
27603: PUSH
27604: LD_VAR 0 5
27608: ARRAY
27609: PUSH
27610: LD_INT 1
27612: PLUS
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PPUSH
27618: LD_VAR 0 2
27622: PUSH
27623: LD_VAR 0 4
27627: ARRAY
27628: PUSH
27629: LD_VAR 0 2
27633: PUSH
27634: LD_VAR 0 4
27638: ARRAY
27639: PPUSH
27640: CALL_OW 255
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PPUSH
27649: CALL 36098 0 3
27653: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27654: LD_VAR 0 2
27658: PUSH
27659: LD_VAR 0 4
27663: ARRAY
27664: PPUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: CALL_OW 255
27674: PPUSH
27675: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27679: LD_VAR 0 2
27683: PUSH
27684: LD_VAR 0 4
27688: ARRAY
27689: PPUSH
27690: CALL_OW 141
// end ;
27694: GO 27526
27696: POP
27697: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27698: LD_VAR 0 1
27702: PPUSH
27703: LD_EXP 117
27707: PUSH
27708: LD_VAR 0 5
27712: ARRAY
27713: PUSH
27714: LD_INT 0
27716: PLUS
27717: PPUSH
27718: CALL_OW 505
// end ;
27722: LD_VAR 0 3
27726: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27727: LD_INT 0
27729: PPUSH
27730: PPUSH
27731: PPUSH
27732: PPUSH
// if not hack in hackTanks then
27733: LD_VAR 0 1
27737: PUSH
27738: LD_EXP 116
27742: IN
27743: NOT
27744: IFFALSE 27748
// exit ;
27746: GO 27992
// index := GetElementIndex ( hackTanks , hack ) ;
27748: LD_ADDR_VAR 0 4
27752: PUSH
27753: LD_EXP 116
27757: PPUSH
27758: LD_VAR 0 1
27762: PPUSH
27763: CALL 35881 0 2
27767: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: DOUBLE
27774: LD_EXP 117
27778: PUSH
27779: LD_VAR 0 4
27783: ARRAY
27784: INC
27785: ST_TO_ADDR
27786: LD_INT 1
27788: PUSH
27789: FOR_DOWNTO
27790: IFFALSE 27966
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27792: LD_ADDR_VAR 0 5
27796: PUSH
27797: LD_EXP 117
27801: PUSH
27802: LD_VAR 0 4
27806: ARRAY
27807: PUSH
27808: LD_VAR 0 3
27812: ARRAY
27813: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27814: LD_VAR 0 5
27818: PUSH
27819: LD_INT 1
27821: ARRAY
27822: PPUSH
27823: CALL_OW 302
27827: NOT
27828: IFTRUE 27856
27830: PUSH
27831: LD_VAR 0 5
27835: PUSH
27836: LD_INT 1
27838: ARRAY
27839: PPUSH
27840: CALL_OW 255
27844: PUSH
27845: LD_VAR 0 1
27849: PPUSH
27850: CALL_OW 255
27854: NONEQUAL
27855: OR
27856: IFFALSE 27964
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27858: LD_VAR 0 5
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: CALL_OW 305
27871: IFFALSE 27899
27873: PUSH
27874: LD_VAR 0 5
27878: PUSH
27879: LD_INT 1
27881: ARRAY
27882: PPUSH
27883: CALL_OW 255
27887: PUSH
27888: LD_VAR 0 1
27892: PPUSH
27893: CALL_OW 255
27897: EQUAL
27898: AND
27899: IFFALSE 27923
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27901: LD_VAR 0 5
27905: PUSH
27906: LD_INT 1
27908: ARRAY
27909: PPUSH
27910: LD_VAR 0 5
27914: PUSH
27915: LD_INT 2
27917: ARRAY
27918: PPUSH
27919: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27923: LD_ADDR_EXP 117
27927: PUSH
27928: LD_EXP 117
27932: PPUSH
27933: LD_VAR 0 4
27937: PPUSH
27938: LD_EXP 117
27942: PUSH
27943: LD_VAR 0 4
27947: ARRAY
27948: PPUSH
27949: LD_VAR 0 3
27953: PPUSH
27954: CALL_OW 3
27958: PPUSH
27959: CALL_OW 1
27963: ST_TO_ADDR
// end ; end ;
27964: GO 27789
27966: POP
27967: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27968: LD_VAR 0 1
27972: PPUSH
27973: LD_EXP 117
27977: PUSH
27978: LD_VAR 0 4
27982: ARRAY
27983: PUSH
27984: LD_INT 0
27986: PLUS
27987: PPUSH
27988: CALL_OW 505
// end ;
27992: LD_VAR 0 2
27996: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27997: LD_INT 0
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
// if not hack in hackTanks then
28003: LD_VAR 0 1
28007: PUSH
28008: LD_EXP 116
28012: IN
28013: NOT
28014: IFFALSE 28018
// exit ;
28016: GO 28103
// index := GetElementIndex ( hackTanks , hack ) ;
28018: LD_ADDR_VAR 0 5
28022: PUSH
28023: LD_EXP 116
28027: PPUSH
28028: LD_VAR 0 1
28032: PPUSH
28033: CALL 35881 0 2
28037: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: DOUBLE
28044: LD_INT 1
28046: DEC
28047: ST_TO_ADDR
28048: LD_EXP 117
28052: PUSH
28053: LD_VAR 0 5
28057: ARRAY
28058: PUSH
28059: FOR_TO
28060: IFFALSE 28101
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28062: LD_EXP 117
28066: PUSH
28067: LD_VAR 0 5
28071: ARRAY
28072: PUSH
28073: LD_VAR 0 4
28077: ARRAY
28078: PUSH
28079: LD_INT 1
28081: ARRAY
28082: PUSH
28083: LD_VAR 0 2
28087: EQUAL
28088: IFFALSE 28099
// KillUnit ( vehicle ) ;
28090: LD_VAR 0 2
28094: PPUSH
28095: CALL_OW 66
28099: GO 28059
28101: POP
28102: POP
// end ;
28103: LD_VAR 0 3
28107: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28108: LD_EXP 121
28112: NOT
28113: IFFALSE 28148
28115: GO 28117
28117: DISABLE
// begin initMiner := true ;
28118: LD_ADDR_EXP 121
28122: PUSH
28123: LD_INT 1
28125: ST_TO_ADDR
// minersList := [ ] ;
28126: LD_ADDR_EXP 122
28130: PUSH
28131: EMPTY
28132: ST_TO_ADDR
// minerMinesList := [ ] ;
28133: LD_ADDR_EXP 123
28137: PUSH
28138: EMPTY
28139: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28140: LD_ADDR_EXP 124
28144: PUSH
28145: LD_INT 5
28147: ST_TO_ADDR
// end ;
28148: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28149: LD_EXP 121
28153: IFFALSE 28171
28155: PUSH
28156: LD_INT 34
28158: PUSH
28159: LD_INT 81
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PPUSH
28166: CALL_OW 69
28170: AND
28171: IFFALSE 28634
28173: GO 28175
28175: DISABLE
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
// begin enable ;
28182: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28183: LD_ADDR_VAR 0 1
28187: PUSH
28188: LD_INT 34
28190: PUSH
28191: LD_INT 81
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 69
28202: PUSH
28203: FOR_IN
28204: IFFALSE 28276
// begin if not i in minersList then
28206: LD_VAR 0 1
28210: PUSH
28211: LD_EXP 122
28215: IN
28216: NOT
28217: IFFALSE 28274
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28219: LD_ADDR_EXP 122
28223: PUSH
28224: LD_EXP 122
28228: PPUSH
28229: LD_EXP 122
28233: PUSH
28234: LD_INT 1
28236: PLUS
28237: PPUSH
28238: LD_VAR 0 1
28242: PPUSH
28243: CALL_OW 1
28247: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28248: LD_ADDR_EXP 123
28252: PUSH
28253: LD_EXP 123
28257: PPUSH
28258: LD_EXP 123
28262: PUSH
28263: LD_INT 1
28265: PLUS
28266: PPUSH
28267: EMPTY
28268: PPUSH
28269: CALL_OW 1
28273: ST_TO_ADDR
// end end ;
28274: GO 28203
28276: POP
28277: POP
// for i := minerMinesList downto 1 do
28278: LD_ADDR_VAR 0 1
28282: PUSH
28283: DOUBLE
28284: LD_EXP 123
28288: INC
28289: ST_TO_ADDR
28290: LD_INT 1
28292: PUSH
28293: FOR_DOWNTO
28294: IFFALSE 28632
// begin if IsLive ( minersList [ i ] ) then
28296: LD_EXP 122
28300: PUSH
28301: LD_VAR 0 1
28305: ARRAY
28306: PPUSH
28307: CALL_OW 300
28311: IFFALSE 28339
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28313: LD_EXP 122
28317: PUSH
28318: LD_VAR 0 1
28322: ARRAY
28323: PPUSH
28324: LD_EXP 123
28328: PUSH
28329: LD_VAR 0 1
28333: ARRAY
28334: PPUSH
28335: CALL_OW 505
// if not minerMinesList [ i ] then
28339: LD_EXP 123
28343: PUSH
28344: LD_VAR 0 1
28348: ARRAY
28349: NOT
28350: IFFALSE 28354
// continue ;
28352: GO 28293
// for j := minerMinesList [ i ] downto 1 do
28354: LD_ADDR_VAR 0 2
28358: PUSH
28359: DOUBLE
28360: LD_EXP 123
28364: PUSH
28365: LD_VAR 0 1
28369: ARRAY
28370: INC
28371: ST_TO_ADDR
28372: LD_INT 1
28374: PUSH
28375: FOR_DOWNTO
28376: IFFALSE 28628
// begin side := GetSide ( minersList [ i ] ) ;
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_EXP 122
28387: PUSH
28388: LD_VAR 0 1
28392: ARRAY
28393: PPUSH
28394: CALL_OW 255
28398: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28399: LD_ADDR_VAR 0 4
28403: PUSH
28404: LD_EXP 123
28408: PUSH
28409: LD_VAR 0 1
28413: ARRAY
28414: PUSH
28415: LD_VAR 0 2
28419: ARRAY
28420: PUSH
28421: LD_INT 1
28423: ARRAY
28424: PPUSH
28425: LD_EXP 123
28429: PUSH
28430: LD_VAR 0 1
28434: ARRAY
28435: PUSH
28436: LD_VAR 0 2
28440: ARRAY
28441: PUSH
28442: LD_INT 2
28444: ARRAY
28445: PPUSH
28446: CALL_OW 428
28450: ST_TO_ADDR
// if not tmp then
28451: LD_VAR 0 4
28455: NOT
28456: IFFALSE 28460
// continue ;
28458: GO 28375
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28460: LD_VAR 0 4
28464: PUSH
28465: LD_INT 81
28467: PUSH
28468: LD_VAR 0 3
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PPUSH
28477: CALL_OW 69
28481: IN
28482: IFFALSE 28532
28484: PUSH
28485: LD_EXP 123
28489: PUSH
28490: LD_VAR 0 1
28494: ARRAY
28495: PUSH
28496: LD_VAR 0 2
28500: ARRAY
28501: PUSH
28502: LD_INT 1
28504: ARRAY
28505: PPUSH
28506: LD_EXP 123
28510: PUSH
28511: LD_VAR 0 1
28515: ARRAY
28516: PUSH
28517: LD_VAR 0 2
28521: ARRAY
28522: PUSH
28523: LD_INT 2
28525: ARRAY
28526: PPUSH
28527: CALL_OW 458
28531: AND
28532: IFFALSE 28626
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28534: LD_EXP 123
28538: PUSH
28539: LD_VAR 0 1
28543: ARRAY
28544: PUSH
28545: LD_VAR 0 2
28549: ARRAY
28550: PUSH
28551: LD_INT 1
28553: ARRAY
28554: PPUSH
28555: LD_EXP 123
28559: PUSH
28560: LD_VAR 0 1
28564: ARRAY
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PUSH
28572: LD_INT 2
28574: ARRAY
28575: PPUSH
28576: LD_VAR 0 3
28580: PPUSH
28581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28585: LD_ADDR_EXP 123
28589: PUSH
28590: LD_EXP 123
28594: PPUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: LD_EXP 123
28604: PUSH
28605: LD_VAR 0 1
28609: ARRAY
28610: PPUSH
28611: LD_VAR 0 2
28615: PPUSH
28616: CALL_OW 3
28620: PPUSH
28621: CALL_OW 1
28625: ST_TO_ADDR
// end ; end ;
28626: GO 28375
28628: POP
28629: POP
// end ;
28630: GO 28293
28632: POP
28633: POP
// end ;
28634: PPOPN 4
28636: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28637: LD_INT 0
28639: PPUSH
28640: PPUSH
// result := false ;
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: LD_INT 0
28648: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 264
28658: PUSH
28659: LD_INT 81
28661: EQUAL
28662: NOT
28663: IFFALSE 28667
// exit ;
28665: GO 28911
// index := GetElementIndex ( minersList , unit ) ;
28667: LD_ADDR_VAR 0 5
28671: PUSH
28672: LD_EXP 122
28676: PPUSH
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL 35881 0 2
28686: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28687: LD_EXP 123
28691: PUSH
28692: LD_VAR 0 5
28696: ARRAY
28697: PUSH
28698: LD_EXP 124
28702: GREATEREQUAL
28703: IFFALSE 28707
// exit ;
28705: GO 28911
// ComMoveXY ( unit , x , y ) ;
28707: LD_VAR 0 1
28711: PPUSH
28712: LD_VAR 0 2
28716: PPUSH
28717: LD_VAR 0 3
28721: PPUSH
28722: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28726: LD_INT 35
28728: PPUSH
28729: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28733: LD_VAR 0 1
28737: PPUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: LD_VAR 0 3
28747: PPUSH
28748: CALL 67927 0 3
28752: NOT
28753: IFFALSE 28766
28755: PUSH
28756: LD_VAR 0 1
28760: PPUSH
28761: CALL_OW 314
28765: AND
28766: IFFALSE 28770
// exit ;
28768: GO 28911
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28770: LD_VAR 0 2
28774: PPUSH
28775: LD_VAR 0 3
28779: PPUSH
28780: CALL_OW 428
28784: PUSH
28785: LD_VAR 0 1
28789: EQUAL
28790: IFFALSE 28804
28792: PUSH
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 314
28802: NOT
28803: AND
28804: IFFALSE 28726
// PlaySoundXY ( x , y , PlantMine ) ;
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_VAR 0 3
28815: PPUSH
28816: LD_STRING PlantMine
28818: PPUSH
28819: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28823: LD_VAR 0 2
28827: PPUSH
28828: LD_VAR 0 3
28832: PPUSH
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 255
28842: PPUSH
28843: LD_INT 0
28845: PPUSH
28846: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28850: LD_ADDR_EXP 123
28854: PUSH
28855: LD_EXP 123
28859: PPUSH
28860: LD_VAR 0 5
28864: PUSH
28865: LD_EXP 123
28869: PUSH
28870: LD_VAR 0 5
28874: ARRAY
28875: PUSH
28876: LD_INT 1
28878: PLUS
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PPUSH
28884: LD_VAR 0 2
28888: PUSH
28889: LD_VAR 0 3
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL 36098 0 3
28902: ST_TO_ADDR
// result := true ;
28903: LD_ADDR_VAR 0 4
28907: PUSH
28908: LD_INT 1
28910: ST_TO_ADDR
// end ;
28911: LD_VAR 0 4
28915: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28916: LD_INT 0
28918: PPUSH
28919: PPUSH
28920: PPUSH
// if not unit in minersList then
28921: LD_VAR 0 1
28925: PUSH
28926: LD_EXP 122
28930: IN
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 29330
// index := GetElementIndex ( minersList , unit ) ;
28936: LD_ADDR_VAR 0 6
28940: PUSH
28941: LD_EXP 122
28945: PPUSH
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL 35881 0 2
28955: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28956: LD_ADDR_VAR 0 5
28960: PUSH
28961: DOUBLE
28962: LD_EXP 123
28966: PUSH
28967: LD_VAR 0 6
28971: ARRAY
28972: INC
28973: ST_TO_ADDR
28974: LD_INT 1
28976: PUSH
28977: FOR_DOWNTO
28978: IFFALSE 29141
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28980: LD_EXP 123
28984: PUSH
28985: LD_VAR 0 6
28989: ARRAY
28990: PUSH
28991: LD_VAR 0 5
28995: ARRAY
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: PUSH
29001: LD_VAR 0 2
29005: EQUAL
29006: IFFALSE 29036
29008: PUSH
29009: LD_EXP 123
29013: PUSH
29014: LD_VAR 0 6
29018: ARRAY
29019: PUSH
29020: LD_VAR 0 5
29024: ARRAY
29025: PUSH
29026: LD_INT 2
29028: ARRAY
29029: PUSH
29030: LD_VAR 0 3
29034: EQUAL
29035: AND
29036: IFFALSE 29139
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29038: LD_EXP 123
29042: PUSH
29043: LD_VAR 0 6
29047: ARRAY
29048: PUSH
29049: LD_VAR 0 5
29053: ARRAY
29054: PUSH
29055: LD_INT 1
29057: ARRAY
29058: PPUSH
29059: LD_EXP 123
29063: PUSH
29064: LD_VAR 0 6
29068: ARRAY
29069: PUSH
29070: LD_VAR 0 5
29074: ARRAY
29075: PUSH
29076: LD_INT 2
29078: ARRAY
29079: PPUSH
29080: LD_VAR 0 1
29084: PPUSH
29085: CALL_OW 255
29089: PPUSH
29090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29094: LD_ADDR_EXP 123
29098: PUSH
29099: LD_EXP 123
29103: PPUSH
29104: LD_VAR 0 6
29108: PPUSH
29109: LD_EXP 123
29113: PUSH
29114: LD_VAR 0 6
29118: ARRAY
29119: PPUSH
29120: LD_VAR 0 5
29124: PPUSH
29125: CALL_OW 3
29129: PPUSH
29130: CALL_OW 1
29134: ST_TO_ADDR
// exit ;
29135: POP
29136: POP
29137: GO 29330
// end ; end ;
29139: GO 28977
29141: POP
29142: POP
// for i := minerMinesList [ index ] downto 1 do
29143: LD_ADDR_VAR 0 5
29147: PUSH
29148: DOUBLE
29149: LD_EXP 123
29153: PUSH
29154: LD_VAR 0 6
29158: ARRAY
29159: INC
29160: ST_TO_ADDR
29161: LD_INT 1
29163: PUSH
29164: FOR_DOWNTO
29165: IFFALSE 29328
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29167: LD_EXP 123
29171: PUSH
29172: LD_VAR 0 6
29176: ARRAY
29177: PUSH
29178: LD_VAR 0 5
29182: ARRAY
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: LD_EXP 123
29192: PUSH
29193: LD_VAR 0 6
29197: ARRAY
29198: PUSH
29199: LD_VAR 0 5
29203: ARRAY
29204: PUSH
29205: LD_INT 2
29207: ARRAY
29208: PPUSH
29209: LD_VAR 0 2
29213: PPUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: CALL_OW 298
29223: PUSH
29224: LD_INT 6
29226: LESS
29227: IFFALSE 29326
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29229: LD_EXP 123
29233: PUSH
29234: LD_VAR 0 6
29238: ARRAY
29239: PUSH
29240: LD_VAR 0 5
29244: ARRAY
29245: PUSH
29246: LD_INT 1
29248: ARRAY
29249: PPUSH
29250: LD_EXP 123
29254: PUSH
29255: LD_VAR 0 6
29259: ARRAY
29260: PUSH
29261: LD_VAR 0 5
29265: ARRAY
29266: PUSH
29267: LD_INT 2
29269: ARRAY
29270: PPUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: CALL_OW 255
29280: PPUSH
29281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29285: LD_ADDR_EXP 123
29289: PUSH
29290: LD_EXP 123
29294: PPUSH
29295: LD_VAR 0 6
29299: PPUSH
29300: LD_EXP 123
29304: PUSH
29305: LD_VAR 0 6
29309: ARRAY
29310: PPUSH
29311: LD_VAR 0 5
29315: PPUSH
29316: CALL_OW 3
29320: PPUSH
29321: CALL_OW 1
29325: ST_TO_ADDR
// end ; end ;
29326: GO 29164
29328: POP
29329: POP
// end ;
29330: LD_VAR 0 4
29334: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 264
29355: PUSH
29356: LD_INT 81
29358: EQUAL
29359: NOT
29360: IFTRUE 29375
29362: PUSH
29363: LD_VAR 0 1
29367: PUSH
29368: LD_EXP 122
29372: IN
29373: NOT
29374: OR
29375: IFFALSE 29379
// exit ;
29377: GO 29705
// index := GetElementIndex ( minersList , unit ) ;
29379: LD_ADDR_VAR 0 6
29383: PUSH
29384: LD_EXP 122
29388: PPUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL 35881 0 2
29398: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29399: LD_ADDR_VAR 0 8
29403: PUSH
29404: LD_EXP 124
29408: PUSH
29409: LD_EXP 123
29413: PUSH
29414: LD_VAR 0 6
29418: ARRAY
29419: MINUS
29420: ST_TO_ADDR
// if not minesFreeAmount then
29421: LD_VAR 0 8
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 29705
// tmp := [ ] ;
29430: LD_ADDR_VAR 0 7
29434: PUSH
29435: EMPTY
29436: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29437: LD_ADDR_VAR 0 5
29441: PUSH
29442: DOUBLE
29443: LD_INT 1
29445: DEC
29446: ST_TO_ADDR
29447: LD_VAR 0 8
29451: PUSH
29452: FOR_TO
29453: IFFALSE 29652
// begin _d := rand ( 0 , 5 ) ;
29455: LD_ADDR_VAR 0 11
29459: PUSH
29460: LD_INT 0
29462: PPUSH
29463: LD_INT 5
29465: PPUSH
29466: CALL_OW 12
29470: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29471: LD_ADDR_VAR 0 12
29475: PUSH
29476: LD_INT 2
29478: PPUSH
29479: LD_INT 6
29481: PPUSH
29482: CALL_OW 12
29486: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29487: LD_ADDR_VAR 0 9
29491: PUSH
29492: LD_VAR 0 2
29496: PPUSH
29497: LD_VAR 0 11
29501: PPUSH
29502: LD_VAR 0 12
29506: PPUSH
29507: CALL_OW 272
29511: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29512: LD_ADDR_VAR 0 10
29516: PUSH
29517: LD_VAR 0 3
29521: PPUSH
29522: LD_VAR 0 11
29526: PPUSH
29527: LD_VAR 0 12
29531: PPUSH
29532: CALL_OW 273
29536: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29537: LD_VAR 0 9
29541: PPUSH
29542: LD_VAR 0 10
29546: PPUSH
29547: CALL_OW 488
29551: IFFALSE 29575
29553: PUSH
29554: LD_VAR 0 9
29558: PUSH
29559: LD_VAR 0 10
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_VAR 0 7
29572: IN
29573: NOT
29574: AND
29575: IFFALSE 29594
29577: PUSH
29578: LD_VAR 0 9
29582: PPUSH
29583: LD_VAR 0 10
29587: PPUSH
29588: CALL_OW 458
29592: NOT
29593: AND
29594: IFFALSE 29636
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29596: LD_ADDR_VAR 0 7
29600: PUSH
29601: LD_VAR 0 7
29605: PPUSH
29606: LD_VAR 0 7
29610: PUSH
29611: LD_INT 1
29613: PLUS
29614: PPUSH
29615: LD_VAR 0 9
29619: PUSH
29620: LD_VAR 0 10
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 1
29633: ST_TO_ADDR
29634: GO 29650
// i := i - 1 ;
29636: LD_ADDR_VAR 0 5
29640: PUSH
29641: LD_VAR 0 5
29645: PUSH
29646: LD_INT 1
29648: MINUS
29649: ST_TO_ADDR
// end ;
29650: GO 29452
29652: POP
29653: POP
// for i in tmp do
29654: LD_ADDR_VAR 0 5
29658: PUSH
29659: LD_VAR 0 7
29663: PUSH
29664: FOR_IN
29665: IFFALSE 29703
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29667: LD_VAR 0 1
29671: PPUSH
29672: LD_VAR 0 5
29676: PUSH
29677: LD_INT 1
29679: ARRAY
29680: PPUSH
29681: LD_VAR 0 5
29685: PUSH
29686: LD_INT 2
29688: ARRAY
29689: PPUSH
29690: CALL 28637 0 3
29694: NOT
29695: IFFALSE 29701
// exit ;
29697: POP
29698: POP
29699: GO 29705
29701: GO 29664
29703: POP
29704: POP
// end ;
29705: LD_VAR 0 4
29709: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
29710: LD_INT 0
29712: PPUSH
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
// if GetClass ( unit ) <> class_sniper then
29721: LD_VAR 0 1
29725: PPUSH
29726: CALL_OW 257
29730: PUSH
29731: LD_INT 5
29733: NONEQUAL
29734: IFFALSE 29738
// exit ;
29736: GO 30208
// dist := 8 ;
29738: LD_ADDR_VAR 0 5
29742: PUSH
29743: LD_INT 8
29745: ST_TO_ADDR
// viewRange := 12 ;
29746: LD_ADDR_VAR 0 8
29750: PUSH
29751: LD_INT 12
29753: ST_TO_ADDR
// side := GetSide ( unit ) ;
29754: LD_ADDR_VAR 0 6
29758: PUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 255
29768: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29769: LD_INT 61
29771: PPUSH
29772: LD_VAR 0 6
29776: PPUSH
29777: CALL_OW 321
29781: PUSH
29782: LD_INT 2
29784: EQUAL
29785: IFFALSE 29795
// viewRange := 16 ;
29787: LD_ADDR_VAR 0 8
29791: PUSH
29792: LD_INT 16
29794: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29795: LD_VAR 0 1
29799: PPUSH
29800: LD_VAR 0 2
29804: PPUSH
29805: LD_VAR 0 3
29809: PPUSH
29810: CALL_OW 297
29814: PUSH
29815: LD_VAR 0 5
29819: GREATER
29820: IFFALSE 29899
// begin ComMoveXY ( unit , x , y ) ;
29822: LD_VAR 0 1
29826: PPUSH
29827: LD_VAR 0 2
29831: PPUSH
29832: LD_VAR 0 3
29836: PPUSH
29837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29841: LD_INT 35
29843: PPUSH
29844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29848: LD_VAR 0 1
29852: PPUSH
29853: LD_VAR 0 2
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: CALL 67927 0 3
29867: NOT
29868: IFFALSE 29872
// exit ;
29870: GO 30208
// until GetDistUnitXY ( unit , x , y ) < dist ;
29872: LD_VAR 0 1
29876: PPUSH
29877: LD_VAR 0 2
29881: PPUSH
29882: LD_VAR 0 3
29886: PPUSH
29887: CALL_OW 297
29891: PUSH
29892: LD_VAR 0 5
29896: LESS
29897: IFFALSE 29841
// end ; ComTurnXY ( unit , x , y ) ;
29899: LD_VAR 0 1
29903: PPUSH
29904: LD_VAR 0 2
29908: PPUSH
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL_OW 118
// repeat if Multiplayer then
29918: LD_OWVAR 4
29922: IFFALSE 29933
// wait ( 35 ) else
29924: LD_INT 35
29926: PPUSH
29927: CALL_OW 67
29931: GO 29940
// wait ( 5 ) ;
29933: LD_INT 5
29935: PPUSH
29936: CALL_OW 67
// _d := GetDir ( unit ) ;
29940: LD_ADDR_VAR 0 11
29944: PUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 254
29954: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29955: LD_ADDR_VAR 0 7
29959: PUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 250
29969: PPUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: CALL_OW 251
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: CALL 70563 0 4
29994: ST_TO_ADDR
// until dir = _d ;
29995: LD_VAR 0 7
29999: PUSH
30000: LD_VAR 0 11
30004: EQUAL
30005: IFFALSE 29918
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
30007: LD_ADDR_VAR 0 9
30011: PUSH
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 250
30021: PPUSH
30022: LD_VAR 0 7
30026: PPUSH
30027: LD_VAR 0 5
30031: PPUSH
30032: CALL_OW 272
30036: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30037: LD_ADDR_VAR 0 10
30041: PUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL_OW 251
30051: PPUSH
30052: LD_VAR 0 7
30056: PPUSH
30057: LD_VAR 0 5
30061: PPUSH
30062: CALL_OW 273
30066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30067: LD_VAR 0 9
30071: PPUSH
30072: LD_VAR 0 10
30076: PPUSH
30077: CALL_OW 488
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30208
// ComAnimCustom ( unit , 1 ) ;
30086: LD_VAR 0 1
30090: PPUSH
30091: LD_INT 1
30093: PPUSH
30094: CALL_OW 592
// p := 0 ;
30098: LD_ADDR_VAR 0 12
30102: PUSH
30103: LD_INT 0
30105: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30106: LD_VAR 0 9
30110: PPUSH
30111: LD_VAR 0 10
30115: PPUSH
30116: LD_VAR 0 6
30120: PPUSH
30121: LD_VAR 0 8
30125: PPUSH
30126: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30130: LD_INT 35
30132: PPUSH
30133: CALL_OW 67
// p := Inc ( p ) ;
30137: LD_ADDR_VAR 0 12
30141: PUSH
30142: LD_VAR 0 12
30146: PPUSH
30147: CALL 70519 0 1
30151: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30152: LD_VAR 0 12
30156: PUSH
30157: LD_INT 3
30159: EQUAL
30160: IFTRUE 30174
30162: PUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 302
30172: NOT
30173: OR
30174: IFTRUE 30187
30176: PUSH
30177: LD_VAR 0 1
30181: PPUSH
30182: CALL_OW 301
30186: OR
30187: IFFALSE 30130
// RemoveSeeing ( _x , _y , side ) ;
30189: LD_VAR 0 9
30193: PPUSH
30194: LD_VAR 0 10
30198: PPUSH
30199: LD_VAR 0 6
30203: PPUSH
30204: CALL_OW 331
// end ;
30208: LD_VAR 0 4
30212: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
30213: LD_INT 0
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
// if not unit then
30226: LD_VAR 0 1
30230: NOT
30231: IFFALSE 30235
// exit ;
30233: GO 30506
// side := GetSide ( unit ) ;
30235: LD_ADDR_VAR 0 3
30239: PUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 255
30249: ST_TO_ADDR
// x := GetX ( unit ) ;
30250: LD_ADDR_VAR 0 5
30254: PUSH
30255: LD_VAR 0 1
30259: PPUSH
30260: CALL_OW 250
30264: ST_TO_ADDR
// y := GetY ( unit ) ;
30265: LD_ADDR_VAR 0 6
30269: PUSH
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 251
30279: ST_TO_ADDR
// r := 8 ;
30280: LD_ADDR_VAR 0 4
30284: PUSH
30285: LD_INT 8
30287: ST_TO_ADDR
// if x - r < 0 then
30288: LD_VAR 0 5
30292: PUSH
30293: LD_VAR 0 4
30297: MINUS
30298: PUSH
30299: LD_INT 0
30301: LESS
30302: IFFALSE 30314
// min_x := 0 else
30304: LD_ADDR_VAR 0 7
30308: PUSH
30309: LD_INT 0
30311: ST_TO_ADDR
30312: GO 30330
// min_x := x - r ;
30314: LD_ADDR_VAR 0 7
30318: PUSH
30319: LD_VAR 0 5
30323: PUSH
30324: LD_VAR 0 4
30328: MINUS
30329: ST_TO_ADDR
// if y - r < 0 then
30330: LD_VAR 0 6
30334: PUSH
30335: LD_VAR 0 4
30339: MINUS
30340: PUSH
30341: LD_INT 0
30343: LESS
30344: IFFALSE 30356
// min_y := 0 else
30346: LD_ADDR_VAR 0 8
30350: PUSH
30351: LD_INT 0
30353: ST_TO_ADDR
30354: GO 30372
// min_y := y - r ;
30356: LD_ADDR_VAR 0 8
30360: PUSH
30361: LD_VAR 0 6
30365: PUSH
30366: LD_VAR 0 4
30370: MINUS
30371: ST_TO_ADDR
// max_x := x + r ;
30372: LD_ADDR_VAR 0 9
30376: PUSH
30377: LD_VAR 0 5
30381: PUSH
30382: LD_VAR 0 4
30386: PLUS
30387: ST_TO_ADDR
// max_y := y + r ;
30388: LD_ADDR_VAR 0 10
30392: PUSH
30393: LD_VAR 0 6
30397: PUSH
30398: LD_VAR 0 4
30402: PLUS
30403: ST_TO_ADDR
// for _x = min_x to max_x do
30404: LD_ADDR_VAR 0 11
30408: PUSH
30409: DOUBLE
30410: LD_VAR 0 7
30414: DEC
30415: ST_TO_ADDR
30416: LD_VAR 0 9
30420: PUSH
30421: FOR_TO
30422: IFFALSE 30504
// for _y = min_y to max_y do
30424: LD_ADDR_VAR 0 12
30428: PUSH
30429: DOUBLE
30430: LD_VAR 0 8
30434: DEC
30435: ST_TO_ADDR
30436: LD_VAR 0 10
30440: PUSH
30441: FOR_TO
30442: IFFALSE 30500
// begin if not ValidHex ( _x , _y ) then
30444: LD_VAR 0 11
30448: PPUSH
30449: LD_VAR 0 12
30453: PPUSH
30454: CALL_OW 488
30458: NOT
30459: IFFALSE 30463
// continue ;
30461: GO 30441
// if MineAtPos ( _x , _y ) then
30463: LD_VAR 0 11
30467: PPUSH
30468: LD_VAR 0 12
30472: PPUSH
30473: CALL_OW 458
30477: IFFALSE 30498
// ViewMineAtPos ( _x , _y , side ) ;
30479: LD_VAR 0 11
30483: PPUSH
30484: LD_VAR 0 12
30488: PPUSH
30489: LD_VAR 0 3
30493: PPUSH
30494: CALL_OW 457
// end ;
30498: GO 30441
30500: POP
30501: POP
30502: GO 30421
30504: POP
30505: POP
// end ;
30506: LD_VAR 0 2
30510: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
30511: LD_INT 0
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
// if not units then
30519: LD_VAR 0 1
30523: NOT
30524: IFFALSE 30528
// exit ;
30526: GO 30958
// scaners := [ ] ;
30528: LD_ADDR_VAR 0 6
30532: PUSH
30533: EMPTY
30534: ST_TO_ADDR
// for i in units do
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_VAR 0 1
30544: PUSH
30545: FOR_IN
30546: IFFALSE 30703
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
30548: LD_VAR 0 3
30552: PPUSH
30553: CALL_OW 264
30557: PUSH
30558: LD_INT 11
30560: NONEQUAL
30561: IFTRUE 30575
30563: PUSH
30564: LD_VAR 0 3
30568: PPUSH
30569: CALL_OW 302
30573: NOT
30574: OR
30575: IFTRUE 30592
30577: PUSH
30578: LD_VAR 0 3
30582: PPUSH
30583: CALL_OW 110
30587: PUSH
30588: LD_INT 502
30590: EQUAL
30591: OR
30592: IFFALSE 30596
// continue ;
30594: GO 30545
// ComStop ( i ) ;
30596: LD_VAR 0 3
30600: PPUSH
30601: CALL_OW 141
// x := GetX ( i ) ;
30605: LD_ADDR_VAR 0 4
30609: PUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 250
30619: ST_TO_ADDR
// y := GetY ( i ) ;
30620: LD_ADDR_VAR 0 5
30624: PUSH
30625: LD_VAR 0 3
30629: PPUSH
30630: CALL_OW 251
30634: ST_TO_ADDR
// if GetSide ( i ) = your_side then
30635: LD_VAR 0 3
30639: PPUSH
30640: CALL_OW 255
30644: PUSH
30645: LD_OWVAR 2
30649: EQUAL
30650: IFFALSE 30669
// PlaySoundXY ( x , y , mineDetector ) ;
30652: LD_VAR 0 4
30656: PPUSH
30657: LD_VAR 0 5
30661: PPUSH
30662: LD_STRING mineDetector
30664: PPUSH
30665: CALL_OW 366
// scaners := Join ( scaners , i ) ;
30669: LD_ADDR_VAR 0 6
30673: PUSH
30674: LD_VAR 0 6
30678: PPUSH
30679: LD_VAR 0 3
30683: PPUSH
30684: CALL 69146 0 2
30688: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
30689: LD_VAR 0 3
30693: PPUSH
30694: LD_INT 502
30696: PPUSH
30697: CALL_OW 109
// end ;
30701: GO 30545
30703: POP
30704: POP
// if not scaners then
30705: LD_VAR 0 6
30709: NOT
30710: IFFALSE 30714
// exit ;
30712: GO 30958
// wait ( 3 ) ;
30714: LD_INT 3
30716: PPUSH
30717: CALL_OW 67
// timer := 6 ;
30721: LD_ADDR_VAR 0 7
30725: PUSH
30726: LD_INT 6
30728: ST_TO_ADDR
// repeat for i in scaners do
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_VAR 0 6
30738: PUSH
30739: FOR_IN
30740: IFFALSE 30856
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
30742: LD_VAR 0 3
30746: PPUSH
30747: CALL_OW 302
30751: NOT
30752: IFTRUE 30765
30754: PUSH
30755: LD_VAR 0 3
30759: PPUSH
30760: CALL_OW 314
30764: OR
30765: IFTRUE 30796
30767: PUSH
30768: LD_VAR 0 3
30772: PPUSH
30773: CALL_OW 263
30777: PUSH
30778: LD_INT 1
30780: EQUAL
30781: IFFALSE 30795
30783: PUSH
30784: LD_VAR 0 3
30788: PPUSH
30789: CALL_OW 311
30793: NOT
30794: AND
30795: OR
30796: IFFALSE 30840
// begin SetUnitDisplayNumber ( i , 0 ) ;
30798: LD_VAR 0 3
30802: PPUSH
30803: LD_INT 0
30805: PPUSH
30806: CALL_OW 505
// SetTag ( i , 0 ) ;
30810: LD_VAR 0 3
30814: PPUSH
30815: LD_INT 0
30817: PPUSH
30818: CALL_OW 109
// scaners := scaners diff i ;
30822: LD_ADDR_VAR 0 6
30826: PUSH
30827: LD_VAR 0 6
30831: PUSH
30832: LD_VAR 0 3
30836: DIFF
30837: ST_TO_ADDR
// continue ;
30838: GO 30739
// end ; SetUnitDisplayNumber ( i , timer ) ;
30840: LD_VAR 0 3
30844: PPUSH
30845: LD_VAR 0 7
30849: PPUSH
30850: CALL_OW 505
// end ;
30854: GO 30739
30856: POP
30857: POP
// if not scaners then
30858: LD_VAR 0 6
30862: NOT
30863: IFFALSE 30867
// exit ;
30865: GO 30958
// timer := Dec ( timer ) ;
30867: LD_ADDR_VAR 0 7
30871: PUSH
30872: LD_VAR 0 7
30876: PPUSH
30877: CALL 70541 0 1
30881: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30882: LD_INT 35
30884: PPUSH
30885: CALL_OW 67
// until timer = 0 ;
30889: LD_VAR 0 7
30893: PUSH
30894: LD_INT 0
30896: EQUAL
30897: IFFALSE 30729
// if not scaners then
30899: LD_VAR 0 6
30903: NOT
30904: IFFALSE 30908
// exit ;
30906: GO 30958
// for i in scaners do
30908: LD_ADDR_VAR 0 3
30912: PUSH
30913: LD_VAR 0 6
30917: PUSH
30918: FOR_IN
30919: IFFALSE 30956
// begin SetUnitDisplayNumber ( i , 0 ) ;
30921: LD_VAR 0 3
30925: PPUSH
30926: LD_INT 0
30928: PPUSH
30929: CALL_OW 505
// SetTag ( i , 0 ) ;
30933: LD_VAR 0 3
30937: PPUSH
30938: LD_INT 0
30940: PPUSH
30941: CALL_OW 109
// RevealDetectorMine ( i ) ;
30945: LD_VAR 0 3
30949: PPUSH
30950: CALL 30213 0 1
// end ;
30954: GO 30918
30956: POP
30957: POP
// end ;
30958: LD_VAR 0 2
30962: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
30963: LD_INT 0
30965: PPUSH
// if p1 = mine_detector_mode then
30966: LD_VAR 0 2
30970: PUSH
30971: LD_INT 103
30973: EQUAL
30974: IFFALSE 30985
// DetectMine ( units ) ;
30976: LD_VAR 0 1
30980: PPUSH
30981: CALL 30511 0 1
// end ; end_of_file
30985: LD_VAR 0 7
30989: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30990: LD_INT 0
30992: PPUSH
30993: PPUSH
// if exist_mode then
30994: LD_VAR 0 2
30998: IFFALSE 31044
// begin unit := CreateCharacter ( prefix & ident ) ;
31000: LD_ADDR_VAR 0 5
31004: PUSH
31005: LD_VAR 0 3
31009: PUSH
31010: LD_VAR 0 1
31014: STR
31015: PPUSH
31016: CALL_OW 34
31020: ST_TO_ADDR
// if unit then
31021: LD_VAR 0 5
31025: IFFALSE 31042
// DeleteCharacters ( prefix & ident ) ;
31027: LD_VAR 0 3
31031: PUSH
31032: LD_VAR 0 1
31036: STR
31037: PPUSH
31038: CALL_OW 40
// end else
31042: GO 31059
// unit := NewCharacter ( ident ) ;
31044: LD_ADDR_VAR 0 5
31048: PUSH
31049: LD_VAR 0 1
31053: PPUSH
31054: CALL_OW 25
31058: ST_TO_ADDR
// result := unit ;
31059: LD_ADDR_VAR 0 4
31063: PUSH
31064: LD_VAR 0 5
31068: ST_TO_ADDR
// end ;
31069: LD_VAR 0 4
31073: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
// if exist_mode then
31078: LD_VAR 0 2
31082: IFFALSE 31107
// unit := CreateCharacter ( prefix & ident ) else
31084: LD_ADDR_VAR 0 5
31088: PUSH
31089: LD_VAR 0 3
31093: PUSH
31094: LD_VAR 0 1
31098: STR
31099: PPUSH
31100: CALL_OW 34
31104: ST_TO_ADDR
31105: GO 31122
// unit := NewCharacter ( ident ) ;
31107: LD_ADDR_VAR 0 5
31111: PUSH
31112: LD_VAR 0 1
31116: PPUSH
31117: CALL_OW 25
31121: ST_TO_ADDR
// result := unit ;
31122: LD_ADDR_VAR 0 4
31126: PUSH
31127: LD_VAR 0 5
31131: ST_TO_ADDR
// end ;
31132: LD_VAR 0 4
31136: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31137: LD_INT 0
31139: PPUSH
31140: PPUSH
// if not side or not nation then
31141: LD_VAR 0 1
31145: NOT
31146: IFTRUE 31155
31148: PUSH
31149: LD_VAR 0 2
31153: NOT
31154: OR
31155: IFFALSE 31159
// exit ;
31157: GO 31953
// case nation of nation_american :
31159: LD_VAR 0 2
31163: PUSH
31164: LD_INT 1
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31394
31172: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
31173: LD_ADDR_VAR 0 4
31177: PUSH
31178: LD_INT 35
31180: PUSH
31181: LD_INT 45
31183: PUSH
31184: LD_INT 46
31186: PUSH
31187: LD_INT 47
31189: PUSH
31190: LD_INT 82
31192: PUSH
31193: LD_INT 83
31195: PUSH
31196: LD_INT 84
31198: PUSH
31199: LD_INT 85
31201: PUSH
31202: LD_INT 86
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 2
31210: PUSH
31211: LD_INT 6
31213: PUSH
31214: LD_INT 15
31216: PUSH
31217: LD_INT 16
31219: PUSH
31220: LD_INT 7
31222: PUSH
31223: LD_INT 12
31225: PUSH
31226: LD_INT 13
31228: PUSH
31229: LD_INT 10
31231: PUSH
31232: LD_INT 14
31234: PUSH
31235: LD_INT 20
31237: PUSH
31238: LD_INT 21
31240: PUSH
31241: LD_INT 22
31243: PUSH
31244: LD_INT 25
31246: PUSH
31247: LD_INT 32
31249: PUSH
31250: LD_INT 27
31252: PUSH
31253: LD_INT 36
31255: PUSH
31256: LD_INT 69
31258: PUSH
31259: LD_INT 39
31261: PUSH
31262: LD_INT 34
31264: PUSH
31265: LD_INT 40
31267: PUSH
31268: LD_INT 48
31270: PUSH
31271: LD_INT 49
31273: PUSH
31274: LD_INT 50
31276: PUSH
31277: LD_INT 51
31279: PUSH
31280: LD_INT 52
31282: PUSH
31283: LD_INT 53
31285: PUSH
31286: LD_INT 54
31288: PUSH
31289: LD_INT 55
31291: PUSH
31292: LD_INT 56
31294: PUSH
31295: LD_INT 57
31297: PUSH
31298: LD_INT 58
31300: PUSH
31301: LD_INT 59
31303: PUSH
31304: LD_INT 60
31306: PUSH
31307: LD_INT 61
31309: PUSH
31310: LD_INT 62
31312: PUSH
31313: LD_INT 80
31315: PUSH
31316: LD_INT 82
31318: PUSH
31319: LD_INT 83
31321: PUSH
31322: LD_INT 84
31324: PUSH
31325: LD_INT 85
31327: PUSH
31328: LD_INT 86
31330: PUSH
31331: LD_INT 90
31333: PUSH
31334: LD_INT 93
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31875
31394: LD_INT 2
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31636
31402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
31403: LD_ADDR_VAR 0 4
31407: PUSH
31408: LD_INT 35
31410: PUSH
31411: LD_INT 45
31413: PUSH
31414: LD_INT 46
31416: PUSH
31417: LD_INT 47
31419: PUSH
31420: LD_INT 82
31422: PUSH
31423: LD_INT 83
31425: PUSH
31426: LD_INT 84
31428: PUSH
31429: LD_INT 85
31431: PUSH
31432: LD_INT 87
31434: PUSH
31435: LD_INT 70
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 11
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: LD_INT 4
31449: PUSH
31450: LD_INT 5
31452: PUSH
31453: LD_INT 6
31455: PUSH
31456: LD_INT 15
31458: PUSH
31459: LD_INT 18
31461: PUSH
31462: LD_INT 7
31464: PUSH
31465: LD_INT 17
31467: PUSH
31468: LD_INT 8
31470: PUSH
31471: LD_INT 20
31473: PUSH
31474: LD_INT 21
31476: PUSH
31477: LD_INT 22
31479: PUSH
31480: LD_INT 72
31482: PUSH
31483: LD_INT 26
31485: PUSH
31486: LD_INT 69
31488: PUSH
31489: LD_INT 39
31491: PUSH
31492: LD_INT 40
31494: PUSH
31495: LD_INT 41
31497: PUSH
31498: LD_INT 42
31500: PUSH
31501: LD_INT 43
31503: PUSH
31504: LD_INT 48
31506: PUSH
31507: LD_INT 49
31509: PUSH
31510: LD_INT 50
31512: PUSH
31513: LD_INT 51
31515: PUSH
31516: LD_INT 52
31518: PUSH
31519: LD_INT 53
31521: PUSH
31522: LD_INT 54
31524: PUSH
31525: LD_INT 55
31527: PUSH
31528: LD_INT 56
31530: PUSH
31531: LD_INT 60
31533: PUSH
31534: LD_INT 61
31536: PUSH
31537: LD_INT 62
31539: PUSH
31540: LD_INT 66
31542: PUSH
31543: LD_INT 67
31545: PUSH
31546: LD_INT 68
31548: PUSH
31549: LD_INT 81
31551: PUSH
31552: LD_INT 82
31554: PUSH
31555: LD_INT 83
31557: PUSH
31558: LD_INT 84
31560: PUSH
31561: LD_INT 85
31563: PUSH
31564: LD_INT 87
31566: PUSH
31567: LD_INT 88
31569: PUSH
31570: LD_INT 92
31572: PUSH
31573: LD_INT 94
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
31634: GO 31875
31636: LD_INT 3
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 31874
31644: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: LD_INT 46
31652: PUSH
31653: LD_INT 47
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 82
31664: PUSH
31665: LD_INT 83
31667: PUSH
31668: LD_INT 84
31670: PUSH
31671: LD_INT 85
31673: PUSH
31674: LD_INT 86
31676: PUSH
31677: LD_INT 11
31679: PUSH
31680: LD_INT 9
31682: PUSH
31683: LD_INT 20
31685: PUSH
31686: LD_INT 19
31688: PUSH
31689: LD_INT 21
31691: PUSH
31692: LD_INT 24
31694: PUSH
31695: LD_INT 22
31697: PUSH
31698: LD_INT 25
31700: PUSH
31701: LD_INT 28
31703: PUSH
31704: LD_INT 29
31706: PUSH
31707: LD_INT 30
31709: PUSH
31710: LD_INT 31
31712: PUSH
31713: LD_INT 37
31715: PUSH
31716: LD_INT 38
31718: PUSH
31719: LD_INT 32
31721: PUSH
31722: LD_INT 27
31724: PUSH
31725: LD_INT 33
31727: PUSH
31728: LD_INT 69
31730: PUSH
31731: LD_INT 39
31733: PUSH
31734: LD_INT 34
31736: PUSH
31737: LD_INT 40
31739: PUSH
31740: LD_INT 71
31742: PUSH
31743: LD_INT 23
31745: PUSH
31746: LD_INT 44
31748: PUSH
31749: LD_INT 48
31751: PUSH
31752: LD_INT 49
31754: PUSH
31755: LD_INT 50
31757: PUSH
31758: LD_INT 51
31760: PUSH
31761: LD_INT 52
31763: PUSH
31764: LD_INT 53
31766: PUSH
31767: LD_INT 54
31769: PUSH
31770: LD_INT 55
31772: PUSH
31773: LD_INT 56
31775: PUSH
31776: LD_INT 57
31778: PUSH
31779: LD_INT 58
31781: PUSH
31782: LD_INT 59
31784: PUSH
31785: LD_INT 63
31787: PUSH
31788: LD_INT 64
31790: PUSH
31791: LD_INT 65
31793: PUSH
31794: LD_INT 82
31796: PUSH
31797: LD_INT 83
31799: PUSH
31800: LD_INT 84
31802: PUSH
31803: LD_INT 85
31805: PUSH
31806: LD_INT 86
31808: PUSH
31809: LD_INT 89
31811: PUSH
31812: LD_INT 91
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
31872: GO 31875
31874: POP
// if state > - 1 and state < 3 then
31875: LD_VAR 0 3
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: GREATER
31884: IFFALSE 31896
31886: PUSH
31887: LD_VAR 0 3
31891: PUSH
31892: LD_INT 3
31894: LESS
31895: AND
31896: IFFALSE 31953
// for i in result do
31898: LD_ADDR_VAR 0 5
31902: PUSH
31903: LD_VAR 0 4
31907: PUSH
31908: FOR_IN
31909: IFFALSE 31951
// if GetTech ( i , side ) <> state then
31911: LD_VAR 0 5
31915: PPUSH
31916: LD_VAR 0 1
31920: PPUSH
31921: CALL_OW 321
31925: PUSH
31926: LD_VAR 0 3
31930: NONEQUAL
31931: IFFALSE 31949
// result := result diff i ;
31933: LD_ADDR_VAR 0 4
31937: PUSH
31938: LD_VAR 0 4
31942: PUSH
31943: LD_VAR 0 5
31947: DIFF
31948: ST_TO_ADDR
31949: GO 31908
31951: POP
31952: POP
// end ;
31953: LD_VAR 0 4
31957: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31958: LD_INT 0
31960: PPUSH
31961: PPUSH
31962: PPUSH
// result := true ;
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: LD_INT 1
31970: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31971: LD_ADDR_VAR 0 5
31975: PUSH
31976: LD_VAR 0 2
31980: PPUSH
31981: CALL_OW 480
31985: ST_TO_ADDR
// if not tmp then
31986: LD_VAR 0 5
31990: NOT
31991: IFFALSE 31995
// exit ;
31993: GO 32044
// for i in tmp do
31995: LD_ADDR_VAR 0 4
31999: PUSH
32000: LD_VAR 0 5
32004: PUSH
32005: FOR_IN
32006: IFFALSE 32042
// if GetTech ( i , side ) <> state_researched then
32008: LD_VAR 0 4
32012: PPUSH
32013: LD_VAR 0 1
32017: PPUSH
32018: CALL_OW 321
32022: PUSH
32023: LD_INT 2
32025: NONEQUAL
32026: IFFALSE 32040
// begin result := false ;
32028: LD_ADDR_VAR 0 3
32032: PUSH
32033: LD_INT 0
32035: ST_TO_ADDR
// exit ;
32036: POP
32037: POP
32038: GO 32044
// end ;
32040: GO 32005
32042: POP
32043: POP
// end ;
32044: LD_VAR 0 3
32048: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32049: LD_INT 0
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32064: LD_VAR 0 1
32068: NOT
32069: IFTRUE 32086
32071: PUSH
32072: LD_VAR 0 1
32076: PPUSH
32077: CALL_OW 257
32081: PUSH
32082: LD_INT 9
32084: NONEQUAL
32085: OR
32086: IFFALSE 32090
// exit ;
32088: GO 32669
// side := GetSide ( unit ) ;
32090: LD_ADDR_VAR 0 9
32094: PUSH
32095: LD_VAR 0 1
32099: PPUSH
32100: CALL_OW 255
32104: ST_TO_ADDR
// tech_space := tech_spacanom ;
32105: LD_ADDR_VAR 0 12
32109: PUSH
32110: LD_INT 29
32112: ST_TO_ADDR
// tech_time := tech_taurad ;
32113: LD_ADDR_VAR 0 13
32117: PUSH
32118: LD_INT 28
32120: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32121: LD_ADDR_VAR 0 11
32125: PUSH
32126: LD_VAR 0 1
32130: PPUSH
32131: CALL_OW 310
32135: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32136: LD_VAR 0 11
32140: PPUSH
32141: CALL_OW 247
32145: PUSH
32146: LD_INT 2
32148: EQUAL
32149: IFFALSE 32153
// exit ;
32151: GO 32669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32153: LD_ADDR_VAR 0 8
32157: PUSH
32158: LD_INT 81
32160: PUSH
32161: LD_VAR 0 9
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: LD_INT 21
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PPUSH
32191: CALL_OW 69
32195: ST_TO_ADDR
// if not tmp then
32196: LD_VAR 0 8
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32669
// if in_unit then
32205: LD_VAR 0 11
32209: IFFALSE 32233
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32211: LD_ADDR_VAR 0 10
32215: PUSH
32216: LD_VAR 0 8
32220: PPUSH
32221: LD_VAR 0 11
32225: PPUSH
32226: CALL_OW 74
32230: ST_TO_ADDR
32231: GO 32253
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32233: LD_ADDR_VAR 0 10
32237: PUSH
32238: LD_VAR 0 8
32242: PPUSH
32243: LD_VAR 0 1
32247: PPUSH
32248: CALL_OW 74
32252: ST_TO_ADDR
// if not enemy then
32253: LD_VAR 0 10
32257: NOT
32258: IFFALSE 32262
// exit ;
32260: GO 32669
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32262: LD_VAR 0 11
32266: IFFALSE 32288
32268: PUSH
32269: LD_VAR 0 11
32273: PPUSH
32274: LD_VAR 0 10
32278: PPUSH
32279: CALL_OW 296
32283: PUSH
32284: LD_INT 13
32286: GREATER
32287: AND
32288: IFTRUE 32310
32290: PUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: LD_VAR 0 10
32300: PPUSH
32301: CALL_OW 296
32305: PUSH
32306: LD_INT 12
32308: GREATER
32309: OR
32310: IFFALSE 32314
// exit ;
32312: GO 32669
// missile := [ 1 ] ;
32314: LD_ADDR_VAR 0 14
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32325: LD_VAR 0 9
32329: PPUSH
32330: LD_VAR 0 12
32334: PPUSH
32335: CALL_OW 325
32339: IFFALSE 32368
// missile := Replace ( missile , missile + 1 , 2 ) ;
32341: LD_ADDR_VAR 0 14
32345: PUSH
32346: LD_VAR 0 14
32350: PPUSH
32351: LD_VAR 0 14
32355: PUSH
32356: LD_INT 1
32358: PLUS
32359: PPUSH
32360: LD_INT 2
32362: PPUSH
32363: CALL_OW 1
32367: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32368: LD_VAR 0 9
32372: PPUSH
32373: LD_VAR 0 13
32377: PPUSH
32378: CALL_OW 325
32382: IFFALSE 32406
32384: PUSH
32385: LD_VAR 0 10
32389: PPUSH
32390: CALL_OW 255
32394: PPUSH
32395: LD_VAR 0 13
32399: PPUSH
32400: CALL_OW 325
32404: NOT
32405: AND
32406: IFFALSE 32435
// missile := Replace ( missile , missile + 1 , 3 ) ;
32408: LD_ADDR_VAR 0 14
32412: PUSH
32413: LD_VAR 0 14
32417: PPUSH
32418: LD_VAR 0 14
32422: PUSH
32423: LD_INT 1
32425: PLUS
32426: PPUSH
32427: LD_INT 3
32429: PPUSH
32430: CALL_OW 1
32434: ST_TO_ADDR
// if missile < 2 then
32435: LD_VAR 0 14
32439: PUSH
32440: LD_INT 2
32442: LESS
32443: IFFALSE 32447
// exit ;
32445: GO 32669
// x := GetX ( enemy ) ;
32447: LD_ADDR_VAR 0 4
32451: PUSH
32452: LD_VAR 0 10
32456: PPUSH
32457: CALL_OW 250
32461: ST_TO_ADDR
// y := GetY ( enemy ) ;
32462: LD_ADDR_VAR 0 5
32466: PUSH
32467: LD_VAR 0 10
32471: PPUSH
32472: CALL_OW 251
32476: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32477: LD_ADDR_VAR 0 6
32481: PUSH
32482: LD_VAR 0 4
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PPUSH
32491: LD_INT 1
32493: PPUSH
32494: CALL_OW 12
32498: PLUS
32499: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32500: LD_ADDR_VAR 0 7
32504: PUSH
32505: LD_VAR 0 5
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PPUSH
32514: LD_INT 1
32516: PPUSH
32517: CALL_OW 12
32521: PLUS
32522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32523: LD_VAR 0 6
32527: PPUSH
32528: LD_VAR 0 7
32532: PPUSH
32533: CALL_OW 488
32537: NOT
32538: IFFALSE 32560
// begin _x := x ;
32540: LD_ADDR_VAR 0 6
32544: PUSH
32545: LD_VAR 0 4
32549: ST_TO_ADDR
// _y := y ;
32550: LD_ADDR_VAR 0 7
32554: PUSH
32555: LD_VAR 0 5
32559: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32560: LD_ADDR_VAR 0 3
32564: PUSH
32565: LD_INT 1
32567: PPUSH
32568: LD_VAR 0 14
32572: PPUSH
32573: CALL_OW 12
32577: ST_TO_ADDR
// case i of 1 :
32578: LD_VAR 0 3
32582: PUSH
32583: LD_INT 1
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32591
32589: GO 32608
32591: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32592: LD_VAR 0 1
32596: PPUSH
32597: LD_VAR 0 10
32601: PPUSH
32602: CALL_OW 115
32606: GO 32669
32608: LD_INT 2
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32616
32614: GO 32638
32616: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32617: LD_VAR 0 1
32621: PPUSH
32622: LD_VAR 0 6
32626: PPUSH
32627: LD_VAR 0 7
32631: PPUSH
32632: CALL_OW 153
32636: GO 32669
32638: LD_INT 3
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32668
32646: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32647: LD_VAR 0 1
32651: PPUSH
32652: LD_VAR 0 6
32656: PPUSH
32657: LD_VAR 0 7
32661: PPUSH
32662: CALL_OW 154
32666: GO 32669
32668: POP
// end ;
32669: LD_VAR 0 2
32673: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32674: LD_INT 0
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
// if not unit or not building then
32682: LD_VAR 0 1
32686: NOT
32687: IFTRUE 32696
32689: PUSH
32690: LD_VAR 0 2
32694: NOT
32695: OR
32696: IFFALSE 32700
// exit ;
32698: GO 32858
// x := GetX ( building ) ;
32700: LD_ADDR_VAR 0 5
32704: PUSH
32705: LD_VAR 0 2
32709: PPUSH
32710: CALL_OW 250
32714: ST_TO_ADDR
// y := GetY ( building ) ;
32715: LD_ADDR_VAR 0 6
32719: PUSH
32720: LD_VAR 0 2
32724: PPUSH
32725: CALL_OW 251
32729: ST_TO_ADDR
// for i := 0 to 5 do
32730: LD_ADDR_VAR 0 4
32734: PUSH
32735: DOUBLE
32736: LD_INT 0
32738: DEC
32739: ST_TO_ADDR
32740: LD_INT 5
32742: PUSH
32743: FOR_TO
32744: IFFALSE 32856
// begin _x := ShiftX ( x , i , 3 ) ;
32746: LD_ADDR_VAR 0 7
32750: PUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: LD_VAR 0 4
32760: PPUSH
32761: LD_INT 3
32763: PPUSH
32764: CALL_OW 272
32768: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32769: LD_ADDR_VAR 0 8
32773: PUSH
32774: LD_VAR 0 6
32778: PPUSH
32779: LD_VAR 0 4
32783: PPUSH
32784: LD_INT 3
32786: PPUSH
32787: CALL_OW 273
32791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32792: LD_VAR 0 7
32796: PPUSH
32797: LD_VAR 0 8
32801: PPUSH
32802: CALL_OW 488
32806: NOT
32807: IFFALSE 32811
// continue ;
32809: GO 32743
// if HexInfo ( _x , _y ) = 0 then
32811: LD_VAR 0 7
32815: PPUSH
32816: LD_VAR 0 8
32820: PPUSH
32821: CALL_OW 428
32825: PUSH
32826: LD_INT 0
32828: EQUAL
32829: IFFALSE 32854
// begin ComMoveXY ( unit , _x , _y ) ;
32831: LD_VAR 0 1
32835: PPUSH
32836: LD_VAR 0 7
32840: PPUSH
32841: LD_VAR 0 8
32845: PPUSH
32846: CALL_OW 111
// exit ;
32850: POP
32851: POP
32852: GO 32858
// end ; end ;
32854: GO 32743
32856: POP
32857: POP
// end ;
32858: LD_VAR 0 3
32862: RET
// export function ScanBase ( side , base_area ) ; begin
32863: LD_INT 0
32865: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_VAR 0 2
32875: PPUSH
32876: LD_INT 81
32878: PUSH
32879: LD_VAR 0 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PPUSH
32888: CALL_OW 70
32892: ST_TO_ADDR
// end ;
32893: LD_VAR 0 3
32897: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
// result := false ;
32904: LD_ADDR_VAR 0 2
32908: PUSH
32909: LD_INT 0
32911: ST_TO_ADDR
// side := GetSide ( unit ) ;
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 255
32926: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32927: LD_ADDR_VAR 0 4
32931: PUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL_OW 248
32941: ST_TO_ADDR
// case nat of 1 :
32942: LD_VAR 0 4
32946: PUSH
32947: LD_INT 1
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32955
32953: GO 32966
32955: POP
// tech := tech_lassight ; 2 :
32956: LD_ADDR_VAR 0 5
32960: PUSH
32961: LD_INT 12
32963: ST_TO_ADDR
32964: GO 33005
32966: LD_INT 2
32968: DOUBLE
32969: EQUAL
32970: IFTRUE 32974
32972: GO 32985
32974: POP
// tech := tech_mortar ; 3 :
32975: LD_ADDR_VAR 0 5
32979: PUSH
32980: LD_INT 41
32982: ST_TO_ADDR
32983: GO 33005
32985: LD_INT 3
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33004
32993: POP
// tech := tech_bazooka ; end ;
32994: LD_ADDR_VAR 0 5
32998: PUSH
32999: LD_INT 44
33001: ST_TO_ADDR
33002: GO 33005
33004: POP
// if Researched ( side , tech ) then
33005: LD_VAR 0 3
33009: PPUSH
33010: LD_VAR 0 5
33014: PPUSH
33015: CALL_OW 325
33019: IFFALSE 33046
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_INT 5
33028: PUSH
33029: LD_INT 8
33031: PUSH
33032: LD_INT 9
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: PUSH
33040: LD_VAR 0 4
33044: ARRAY
33045: ST_TO_ADDR
// end ;
33046: LD_VAR 0 2
33050: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33051: LD_INT 0
33053: PPUSH
33054: PPUSH
33055: PPUSH
// if not mines then
33056: LD_VAR 0 2
33060: NOT
33061: IFFALSE 33065
// exit ;
33063: GO 33209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33065: LD_ADDR_VAR 0 5
33069: PUSH
33070: LD_INT 81
33072: PUSH
33073: LD_VAR 0 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: LD_INT 21
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 69
33107: ST_TO_ADDR
// for i in mines do
33108: LD_ADDR_VAR 0 4
33112: PUSH
33113: LD_VAR 0 2
33117: PUSH
33118: FOR_IN
33119: IFFALSE 33207
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33121: LD_VAR 0 4
33125: PUSH
33126: LD_INT 1
33128: ARRAY
33129: PPUSH
33130: LD_VAR 0 4
33134: PUSH
33135: LD_INT 2
33137: ARRAY
33138: PPUSH
33139: CALL_OW 458
33143: NOT
33144: IFFALSE 33148
// continue ;
33146: GO 33118
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33148: LD_VAR 0 4
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: PPUSH
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 2
33164: ARRAY
33165: PPUSH
33166: CALL_OW 428
33170: PUSH
33171: LD_VAR 0 5
33175: IN
33176: IFFALSE 33205
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33178: LD_VAR 0 4
33182: PUSH
33183: LD_INT 1
33185: ARRAY
33186: PPUSH
33187: LD_VAR 0 4
33191: PUSH
33192: LD_INT 2
33194: ARRAY
33195: PPUSH
33196: LD_VAR 0 1
33200: PPUSH
33201: CALL_OW 456
// end ;
33205: GO 33118
33207: POP
33208: POP
// end ;
33209: LD_VAR 0 3
33213: RET
// export function Count ( array ) ; begin
33214: LD_INT 0
33216: PPUSH
// result := array + 0 ;
33217: LD_ADDR_VAR 0 2
33221: PUSH
33222: LD_VAR 0 1
33226: PUSH
33227: LD_INT 0
33229: PLUS
33230: ST_TO_ADDR
// end ;
33231: LD_VAR 0 2
33235: RET
// export function IsEmpty ( building ) ; begin
33236: LD_INT 0
33238: PPUSH
// if not building then
33239: LD_VAR 0 1
33243: NOT
33244: IFFALSE 33248
// exit ;
33246: GO 33291
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33248: LD_ADDR_VAR 0 2
33252: PUSH
33253: LD_VAR 0 1
33257: PUSH
33258: LD_INT 22
33260: PUSH
33261: LD_VAR 0 1
33265: PPUSH
33266: CALL_OW 255
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 58
33277: PUSH
33278: EMPTY
33279: LIST
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 69
33289: IN
33290: ST_TO_ADDR
// end ;
33291: LD_VAR 0 2
33295: RET
// export function IsNotFull ( building ) ; var places ; begin
33296: LD_INT 0
33298: PPUSH
33299: PPUSH
// if not building then
33300: LD_VAR 0 1
33304: NOT
33305: IFFALSE 33309
// exit ;
33307: GO 33337
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33309: LD_ADDR_VAR 0 2
33313: PUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 62
33324: PUSH
33325: EMPTY
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PPUSH
33332: CALL_OW 72
33336: ST_TO_ADDR
// end ;
33337: LD_VAR 0 2
33341: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33342: LD_INT 0
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
// tmp := [ ] ;
33348: LD_ADDR_VAR 0 3
33352: PUSH
33353: EMPTY
33354: ST_TO_ADDR
// list := [ ] ;
33355: LD_ADDR_VAR 0 5
33359: PUSH
33360: EMPTY
33361: ST_TO_ADDR
// for i = 16 to 25 do
33362: LD_ADDR_VAR 0 4
33366: PUSH
33367: DOUBLE
33368: LD_INT 16
33370: DEC
33371: ST_TO_ADDR
33372: LD_INT 25
33374: PUSH
33375: FOR_TO
33376: IFFALSE 33449
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_VAR 0 3
33387: PUSH
33388: LD_INT 22
33390: PUSH
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL_OW 255
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 91
33407: PUSH
33408: LD_VAR 0 1
33412: PUSH
33413: LD_INT 6
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 30
33423: PUSH
33424: LD_VAR 0 4
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: PUSH
33438: EMPTY
33439: LIST
33440: PPUSH
33441: CALL_OW 69
33445: ADD
33446: ST_TO_ADDR
33447: GO 33375
33449: POP
33450: POP
// for i = 1 to tmp do
33451: LD_ADDR_VAR 0 4
33455: PUSH
33456: DOUBLE
33457: LD_INT 1
33459: DEC
33460: ST_TO_ADDR
33461: LD_VAR 0 3
33465: PUSH
33466: FOR_TO
33467: IFFALSE 33555
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33469: LD_ADDR_VAR 0 5
33473: PUSH
33474: LD_VAR 0 5
33478: PUSH
33479: LD_VAR 0 3
33483: PUSH
33484: LD_VAR 0 4
33488: ARRAY
33489: PPUSH
33490: CALL_OW 266
33494: PUSH
33495: LD_VAR 0 3
33499: PUSH
33500: LD_VAR 0 4
33504: ARRAY
33505: PPUSH
33506: CALL_OW 250
33510: PUSH
33511: LD_VAR 0 3
33515: PUSH
33516: LD_VAR 0 4
33520: ARRAY
33521: PPUSH
33522: CALL_OW 251
33526: PUSH
33527: LD_VAR 0 3
33531: PUSH
33532: LD_VAR 0 4
33536: ARRAY
33537: PPUSH
33538: CALL_OW 254
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: ADD
33552: ST_TO_ADDR
33553: GO 33466
33555: POP
33556: POP
// result := list ;
33557: LD_ADDR_VAR 0 2
33561: PUSH
33562: LD_VAR 0 5
33566: ST_TO_ADDR
// end ;
33567: LD_VAR 0 2
33571: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33572: LD_INT 0
33574: PPUSH
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
33579: PPUSH
33580: PPUSH
// if not factory then
33581: LD_VAR 0 1
33585: NOT
33586: IFFALSE 33590
// exit ;
33588: GO 34193
// if control = control_apeman then
33590: LD_VAR 0 4
33594: PUSH
33595: LD_INT 5
33597: EQUAL
33598: IFFALSE 33707
// begin tmp := UnitsInside ( factory ) ;
33600: LD_ADDR_VAR 0 8
33604: PUSH
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL_OW 313
33614: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33615: LD_VAR 0 8
33619: PPUSH
33620: LD_INT 25
33622: PUSH
33623: LD_INT 12
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PPUSH
33630: CALL_OW 72
33634: NOT
33635: IFFALSE 33645
// control := control_manual ;
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_INT 1
33644: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33645: LD_ADDR_VAR 0 8
33649: PUSH
33650: LD_VAR 0 1
33654: PPUSH
33655: CALL 33342 0 1
33659: ST_TO_ADDR
// if tmp then
33660: LD_VAR 0 8
33664: IFFALSE 33707
// begin for i in tmp do
33666: LD_ADDR_VAR 0 7
33670: PUSH
33671: LD_VAR 0 8
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33705
// if i [ 1 ] = b_ext_radio then
33679: LD_VAR 0 7
33683: PUSH
33684: LD_INT 1
33686: ARRAY
33687: PUSH
33688: LD_INT 22
33690: EQUAL
33691: IFFALSE 33703
// begin control := control_remote ;
33693: LD_ADDR_VAR 0 4
33697: PUSH
33698: LD_INT 2
33700: ST_TO_ADDR
// break ;
33701: GO 33705
// end ;
33703: GO 33676
33705: POP
33706: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_VAR 0 2
33716: PPUSH
33717: LD_VAR 0 3
33721: PPUSH
33722: LD_VAR 0 4
33726: PPUSH
33727: LD_VAR 0 5
33731: PPUSH
33732: CALL_OW 448
33736: IFFALSE 33771
// begin result := [ chassis , engine , control , weapon ] ;
33738: LD_ADDR_VAR 0 6
33742: PUSH
33743: LD_VAR 0 2
33747: PUSH
33748: LD_VAR 0 3
33752: PUSH
33753: LD_VAR 0 4
33757: PUSH
33758: LD_VAR 0 5
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
// exit ;
33769: GO 34193
// end ; _chassis := AvailableChassisList ( factory ) ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_VAR 0 1
33780: PPUSH
33781: CALL_OW 475
33785: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33786: LD_ADDR_VAR 0 11
33790: PUSH
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 476
33800: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33801: LD_ADDR_VAR 0 12
33805: PUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 477
33815: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33816: LD_ADDR_VAR 0 10
33820: PUSH
33821: LD_VAR 0 1
33825: PPUSH
33826: CALL_OW 478
33830: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33831: LD_VAR 0 9
33835: NOT
33836: IFTRUE 33845
33838: PUSH
33839: LD_VAR 0 11
33843: NOT
33844: OR
33845: IFTRUE 33854
33847: PUSH
33848: LD_VAR 0 12
33852: NOT
33853: OR
33854: IFTRUE 33863
33856: PUSH
33857: LD_VAR 0 10
33861: NOT
33862: OR
33863: IFFALSE 33898
// begin result := [ chassis , engine , control , weapon ] ;
33865: LD_ADDR_VAR 0 6
33869: PUSH
33870: LD_VAR 0 2
33874: PUSH
33875: LD_VAR 0 3
33879: PUSH
33880: LD_VAR 0 4
33884: PUSH
33885: LD_VAR 0 5
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: ST_TO_ADDR
// exit ;
33896: GO 34193
// end ; if not chassis in _chassis then
33898: LD_VAR 0 2
33902: PUSH
33903: LD_VAR 0 9
33907: IN
33908: NOT
33909: IFFALSE 33935
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33911: LD_ADDR_VAR 0 2
33915: PUSH
33916: LD_VAR 0 9
33920: PUSH
33921: LD_INT 1
33923: PPUSH
33924: LD_VAR 0 9
33928: PPUSH
33929: CALL_OW 12
33933: ARRAY
33934: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33935: LD_VAR 0 2
33939: PPUSH
33940: LD_VAR 0 3
33944: PPUSH
33945: CALL 34198 0 2
33949: NOT
33950: IFFALSE 34011
// repeat engine := _engine [ 1 ] ;
33952: LD_ADDR_VAR 0 3
33956: PUSH
33957: LD_VAR 0 11
33961: PUSH
33962: LD_INT 1
33964: ARRAY
33965: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33966: LD_ADDR_VAR 0 11
33970: PUSH
33971: LD_VAR 0 11
33975: PPUSH
33976: LD_INT 1
33978: PPUSH
33979: CALL_OW 3
33983: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33984: LD_VAR 0 2
33988: PPUSH
33989: LD_VAR 0 3
33993: PPUSH
33994: CALL 34198 0 2
33998: IFTRUE 34009
34000: PUSH
34001: LD_VAR 0 11
34005: PUSH
34006: EMPTY
34007: EQUAL
34008: OR
34009: IFFALSE 33952
// if not control in _control then
34011: LD_VAR 0 4
34015: PUSH
34016: LD_VAR 0 12
34020: IN
34021: NOT
34022: IFFALSE 34048
// control := _control [ rand ( 1 , _control ) ] ;
34024: LD_ADDR_VAR 0 4
34028: PUSH
34029: LD_VAR 0 12
34033: PUSH
34034: LD_INT 1
34036: PPUSH
34037: LD_VAR 0 12
34041: PPUSH
34042: CALL_OW 12
34046: ARRAY
34047: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34048: LD_VAR 0 2
34052: PPUSH
34053: LD_VAR 0 5
34057: PPUSH
34058: CALL 34420 0 2
34062: NOT
34063: IFFALSE 34124
// repeat weapon := _weapon [ 1 ] ;
34065: LD_ADDR_VAR 0 5
34069: PUSH
34070: LD_VAR 0 10
34074: PUSH
34075: LD_INT 1
34077: ARRAY
34078: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34079: LD_ADDR_VAR 0 10
34083: PUSH
34084: LD_VAR 0 10
34088: PPUSH
34089: LD_INT 1
34091: PPUSH
34092: CALL_OW 3
34096: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34097: LD_VAR 0 2
34101: PPUSH
34102: LD_VAR 0 5
34106: PPUSH
34107: CALL 34420 0 2
34111: IFTRUE 34122
34113: PUSH
34114: LD_VAR 0 10
34118: PUSH
34119: EMPTY
34120: EQUAL
34121: OR
34122: IFFALSE 34065
// result := [ ] ;
34124: LD_ADDR_VAR 0 6
34128: PUSH
34129: EMPTY
34130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34131: LD_VAR 0 1
34135: PPUSH
34136: LD_VAR 0 2
34140: PPUSH
34141: LD_VAR 0 3
34145: PPUSH
34146: LD_VAR 0 4
34150: PPUSH
34151: LD_VAR 0 5
34155: PPUSH
34156: CALL_OW 448
34160: IFFALSE 34193
// result := [ chassis , engine , control , weapon ] ;
34162: LD_ADDR_VAR 0 6
34166: PUSH
34167: LD_VAR 0 2
34171: PUSH
34172: LD_VAR 0 3
34176: PUSH
34177: LD_VAR 0 4
34181: PUSH
34182: LD_VAR 0 5
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// end ;
34193: LD_VAR 0 6
34197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34198: LD_INT 0
34200: PPUSH
// if not chassis or not engine then
34201: LD_VAR 0 1
34205: NOT
34206: IFTRUE 34215
34208: PUSH
34209: LD_VAR 0 2
34213: NOT
34214: OR
34215: IFFALSE 34219
// exit ;
34217: GO 34415
// case engine of engine_solar :
34219: LD_VAR 0 2
34223: PUSH
34224: LD_INT 2
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34232
34230: GO 34270
34232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 11
34240: PUSH
34241: LD_INT 12
34243: PUSH
34244: LD_INT 13
34246: PUSH
34247: LD_INT 14
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
34268: GO 34399
34270: LD_INT 1
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34278
34276: GO 34340
34278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34279: LD_ADDR_VAR 0 3
34283: PUSH
34284: LD_INT 11
34286: PUSH
34287: LD_INT 12
34289: PUSH
34290: LD_INT 13
34292: PUSH
34293: LD_INT 14
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: LD_INT 4
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: LD_INT 21
34313: PUSH
34314: LD_INT 23
34316: PUSH
34317: LD_INT 22
34319: PUSH
34320: LD_INT 24
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
34338: GO 34399
34340: LD_INT 3
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34348
34346: GO 34398
34348: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34349: LD_ADDR_VAR 0 3
34353: PUSH
34354: LD_INT 13
34356: PUSH
34357: LD_INT 14
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: LD_INT 3
34365: PUSH
34366: LD_INT 4
34368: PUSH
34369: LD_INT 5
34371: PUSH
34372: LD_INT 21
34374: PUSH
34375: LD_INT 22
34377: PUSH
34378: LD_INT 23
34380: PUSH
34381: LD_INT 24
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: ST_TO_ADDR
34396: GO 34399
34398: POP
// result := ( chassis in result ) ;
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 1
34408: PUSH
34409: LD_VAR 0 3
34413: IN
34414: ST_TO_ADDR
// end ;
34415: LD_VAR 0 3
34419: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34420: LD_INT 0
34422: PPUSH
// if not chassis or not weapon then
34423: LD_VAR 0 1
34427: NOT
34428: IFTRUE 34437
34430: PUSH
34431: LD_VAR 0 2
34435: NOT
34436: OR
34437: IFFALSE 34441
// exit ;
34439: GO 35501
// case weapon of us_machine_gun :
34441: LD_VAR 0 2
34445: PUSH
34446: LD_INT 2
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34454
34452: GO 34484
34454: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34455: LD_ADDR_VAR 0 3
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: LD_INT 3
34468: PUSH
34469: LD_INT 4
34471: PUSH
34472: LD_INT 5
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: ST_TO_ADDR
34482: GO 35485
34484: LD_INT 3
34486: DOUBLE
34487: EQUAL
34488: IFTRUE 34492
34490: GO 34522
34492: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34493: LD_ADDR_VAR 0 3
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: LD_INT 5
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
34520: GO 35485
34522: LD_INT 11
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34530
34528: GO 34560
34530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34531: LD_ADDR_VAR 0 3
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 4
34547: PUSH
34548: LD_INT 5
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: ST_TO_ADDR
34558: GO 35485
34560: LD_INT 4
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34594
34568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: ST_TO_ADDR
34592: GO 35485
34594: LD_INT 5
34596: DOUBLE
34597: EQUAL
34598: IFTRUE 34602
34600: GO 34628
34602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34603: LD_ADDR_VAR 0 3
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: LD_INT 4
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: ST_TO_ADDR
34626: GO 35485
34628: LD_INT 9
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34662
34636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: LD_INT 4
34650: PUSH
34651: LD_INT 5
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: ST_TO_ADDR
34660: GO 35485
34662: LD_INT 7
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 34696
34670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
34694: GO 35485
34696: LD_INT 12
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34730
34704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: LD_INT 4
34718: PUSH
34719: LD_INT 5
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
34728: GO 35485
34730: LD_INT 13
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34764
34738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: LD_INT 3
34749: PUSH
34750: LD_INT 4
34752: PUSH
34753: LD_INT 5
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
34762: GO 35485
34764: LD_INT 14
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34790
34772: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: LD_INT 5
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: ST_TO_ADDR
34788: GO 35485
34790: LD_INT 6
34792: DOUBLE
34793: EQUAL
34794: IFTRUE 34798
34796: GO 34816
34798: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_INT 4
34806: PUSH
34807: LD_INT 5
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35485
34816: LD_INT 10
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34842
34824: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: LD_INT 5
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: ST_TO_ADDR
34840: GO 35485
34842: LD_INT 22
34844: DOUBLE
34845: EQUAL
34846: IFTRUE 34850
34848: GO 34876
34850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34851: LD_ADDR_VAR 0 3
34855: PUSH
34856: LD_INT 11
34858: PUSH
34859: LD_INT 12
34861: PUSH
34862: LD_INT 13
34864: PUSH
34865: LD_INT 14
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
34874: GO 35485
34876: LD_INT 23
34878: DOUBLE
34879: EQUAL
34880: IFTRUE 34884
34882: GO 34910
34884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34885: LD_ADDR_VAR 0 3
34889: PUSH
34890: LD_INT 11
34892: PUSH
34893: LD_INT 12
34895: PUSH
34896: LD_INT 13
34898: PUSH
34899: LD_INT 14
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
34908: GO 35485
34910: LD_INT 24
34912: DOUBLE
34913: EQUAL
34914: IFTRUE 34918
34916: GO 34944
34918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34919: LD_ADDR_VAR 0 3
34923: PUSH
34924: LD_INT 11
34926: PUSH
34927: LD_INT 12
34929: PUSH
34930: LD_INT 13
34932: PUSH
34933: LD_INT 14
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
34942: GO 35485
34944: LD_INT 30
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 34978
34952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_INT 11
34960: PUSH
34961: LD_INT 12
34963: PUSH
34964: LD_INT 13
34966: PUSH
34967: LD_INT 14
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
34976: GO 35485
34978: LD_INT 25
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35004
34986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_INT 13
34994: PUSH
34995: LD_INT 14
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35485
35004: LD_INT 27
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35030
35012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_INT 13
35020: PUSH
35021: LD_INT 14
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: ST_TO_ADDR
35028: GO 35485
35030: LD_INT 92
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35064
35038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 11
35046: PUSH
35047: LD_INT 12
35049: PUSH
35050: LD_INT 13
35052: PUSH
35053: LD_INT 14
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
35062: GO 35485
35064: LD_INT 28
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35090
35072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: LD_INT 13
35080: PUSH
35081: LD_INT 14
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: ST_TO_ADDR
35088: GO 35485
35090: LD_INT 29
35092: DOUBLE
35093: EQUAL
35094: IFTRUE 35098
35096: GO 35116
35098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35099: LD_ADDR_VAR 0 3
35103: PUSH
35104: LD_INT 13
35106: PUSH
35107: LD_INT 14
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: ST_TO_ADDR
35114: GO 35485
35116: LD_INT 31
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35124
35122: GO 35142
35124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35125: LD_ADDR_VAR 0 3
35129: PUSH
35130: LD_INT 13
35132: PUSH
35133: LD_INT 14
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: ST_TO_ADDR
35140: GO 35485
35142: LD_INT 26
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35150
35148: GO 35168
35150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35151: LD_ADDR_VAR 0 3
35155: PUSH
35156: LD_INT 13
35158: PUSH
35159: LD_INT 14
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: ST_TO_ADDR
35166: GO 35485
35168: LD_INT 42
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35176
35174: GO 35202
35176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35177: LD_ADDR_VAR 0 3
35181: PUSH
35182: LD_INT 21
35184: PUSH
35185: LD_INT 22
35187: PUSH
35188: LD_INT 23
35190: PUSH
35191: LD_INT 24
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: ST_TO_ADDR
35200: GO 35485
35202: LD_INT 43
35204: DOUBLE
35205: EQUAL
35206: IFTRUE 35210
35208: GO 35236
35210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35211: LD_ADDR_VAR 0 3
35215: PUSH
35216: LD_INT 21
35218: PUSH
35219: LD_INT 22
35221: PUSH
35222: LD_INT 23
35224: PUSH
35225: LD_INT 24
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
35234: GO 35485
35236: LD_INT 44
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35270
35244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35245: LD_ADDR_VAR 0 3
35249: PUSH
35250: LD_INT 21
35252: PUSH
35253: LD_INT 22
35255: PUSH
35256: LD_INT 23
35258: PUSH
35259: LD_INT 24
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
35268: GO 35485
35270: LD_INT 45
35272: DOUBLE
35273: EQUAL
35274: IFTRUE 35278
35276: GO 35304
35278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35279: LD_ADDR_VAR 0 3
35283: PUSH
35284: LD_INT 21
35286: PUSH
35287: LD_INT 22
35289: PUSH
35290: LD_INT 23
35292: PUSH
35293: LD_INT 24
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: ST_TO_ADDR
35302: GO 35485
35304: LD_INT 49
35306: DOUBLE
35307: EQUAL
35308: IFTRUE 35312
35310: GO 35338
35312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_INT 21
35320: PUSH
35321: LD_INT 22
35323: PUSH
35324: LD_INT 23
35326: PUSH
35327: LD_INT 24
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: ST_TO_ADDR
35336: GO 35485
35338: LD_INT 51
35340: DOUBLE
35341: EQUAL
35342: IFTRUE 35346
35344: GO 35372
35346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35347: LD_ADDR_VAR 0 3
35351: PUSH
35352: LD_INT 21
35354: PUSH
35355: LD_INT 22
35357: PUSH
35358: LD_INT 23
35360: PUSH
35361: LD_INT 24
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: ST_TO_ADDR
35370: GO 35485
35372: LD_INT 52
35374: DOUBLE
35375: EQUAL
35376: IFTRUE 35380
35378: GO 35406
35380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_INT 21
35388: PUSH
35389: LD_INT 22
35391: PUSH
35392: LD_INT 23
35394: PUSH
35395: LD_INT 24
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 35485
35406: LD_INT 53
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35432
35414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_INT 23
35422: PUSH
35423: LD_INT 24
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: ST_TO_ADDR
35430: GO 35485
35432: LD_INT 46
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35440
35438: GO 35458
35440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35441: LD_ADDR_VAR 0 3
35445: PUSH
35446: LD_INT 23
35448: PUSH
35449: LD_INT 24
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: ST_TO_ADDR
35456: GO 35485
35458: LD_INT 47
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35484
35466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 23
35474: PUSH
35475: LD_INT 24
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: ST_TO_ADDR
35482: GO 35485
35484: POP
// result := ( chassis in result ) ;
35485: LD_ADDR_VAR 0 3
35489: PUSH
35490: LD_VAR 0 1
35494: PUSH
35495: LD_VAR 0 3
35499: IN
35500: ST_TO_ADDR
// end ;
35501: LD_VAR 0 3
35505: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35506: LD_INT 0
35508: PPUSH
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
// result := array ;
35515: LD_ADDR_VAR 0 5
35519: PUSH
35520: LD_VAR 0 1
35524: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35525: LD_VAR 0 1
35529: NOT
35530: IFTRUE 35539
35532: PUSH
35533: LD_VAR 0 2
35537: NOT
35538: OR
35539: IFTRUE 35548
35541: PUSH
35542: LD_VAR 0 3
35546: NOT
35547: OR
35548: IFTRUE 35562
35550: PUSH
35551: LD_VAR 0 2
35555: PUSH
35556: LD_VAR 0 1
35560: GREATER
35561: OR
35562: IFTRUE 35576
35564: PUSH
35565: LD_VAR 0 3
35569: PUSH
35570: LD_VAR 0 1
35574: GREATER
35575: OR
35576: IFFALSE 35580
// exit ;
35578: GO 35876
// if direction then
35580: LD_VAR 0 4
35584: IFFALSE 35648
// begin d := 1 ;
35586: LD_ADDR_VAR 0 9
35590: PUSH
35591: LD_INT 1
35593: ST_TO_ADDR
// if i_from > i_to then
35594: LD_VAR 0 2
35598: PUSH
35599: LD_VAR 0 3
35603: GREATER
35604: IFFALSE 35630
// length := ( array - i_from ) + i_to else
35606: LD_ADDR_VAR 0 11
35610: PUSH
35611: LD_VAR 0 1
35615: PUSH
35616: LD_VAR 0 2
35620: MINUS
35621: PUSH
35622: LD_VAR 0 3
35626: PLUS
35627: ST_TO_ADDR
35628: GO 35646
// length := i_to - i_from ;
35630: LD_ADDR_VAR 0 11
35634: PUSH
35635: LD_VAR 0 3
35639: PUSH
35640: LD_VAR 0 2
35644: MINUS
35645: ST_TO_ADDR
// end else
35646: GO 35709
// begin d := - 1 ;
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: ST_TO_ADDR
// if i_from > i_to then
35657: LD_VAR 0 2
35661: PUSH
35662: LD_VAR 0 3
35666: GREATER
35667: IFFALSE 35687
// length := i_from - i_to else
35669: LD_ADDR_VAR 0 11
35673: PUSH
35674: LD_VAR 0 2
35678: PUSH
35679: LD_VAR 0 3
35683: MINUS
35684: ST_TO_ADDR
35685: GO 35709
// length := ( array - i_to ) + i_from ;
35687: LD_ADDR_VAR 0 11
35691: PUSH
35692: LD_VAR 0 1
35696: PUSH
35697: LD_VAR 0 3
35701: MINUS
35702: PUSH
35703: LD_VAR 0 2
35707: PLUS
35708: ST_TO_ADDR
// end ; if not length then
35709: LD_VAR 0 11
35713: NOT
35714: IFFALSE 35718
// exit ;
35716: GO 35876
// tmp := array ;
35718: LD_ADDR_VAR 0 10
35722: PUSH
35723: LD_VAR 0 1
35727: ST_TO_ADDR
// for i = 1 to length do
35728: LD_ADDR_VAR 0 6
35732: PUSH
35733: DOUBLE
35734: LD_INT 1
35736: DEC
35737: ST_TO_ADDR
35738: LD_VAR 0 11
35742: PUSH
35743: FOR_TO
35744: IFFALSE 35864
// begin for j = 1 to array do
35746: LD_ADDR_VAR 0 7
35750: PUSH
35751: DOUBLE
35752: LD_INT 1
35754: DEC
35755: ST_TO_ADDR
35756: LD_VAR 0 1
35760: PUSH
35761: FOR_TO
35762: IFFALSE 35850
// begin k := j + d ;
35764: LD_ADDR_VAR 0 8
35768: PUSH
35769: LD_VAR 0 7
35773: PUSH
35774: LD_VAR 0 9
35778: PLUS
35779: ST_TO_ADDR
// if k > array then
35780: LD_VAR 0 8
35784: PUSH
35785: LD_VAR 0 1
35789: GREATER
35790: IFFALSE 35800
// k := 1 ;
35792: LD_ADDR_VAR 0 8
35796: PUSH
35797: LD_INT 1
35799: ST_TO_ADDR
// if not k then
35800: LD_VAR 0 8
35804: NOT
35805: IFFALSE 35817
// k := array ;
35807: LD_ADDR_VAR 0 8
35811: PUSH
35812: LD_VAR 0 1
35816: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35817: LD_ADDR_VAR 0 10
35821: PUSH
35822: LD_VAR 0 10
35826: PPUSH
35827: LD_VAR 0 8
35831: PPUSH
35832: LD_VAR 0 1
35836: PUSH
35837: LD_VAR 0 7
35841: ARRAY
35842: PPUSH
35843: CALL_OW 1
35847: ST_TO_ADDR
// end ;
35848: GO 35761
35850: POP
35851: POP
// array := tmp ;
35852: LD_ADDR_VAR 0 1
35856: PUSH
35857: LD_VAR 0 10
35861: ST_TO_ADDR
// end ;
35862: GO 35743
35864: POP
35865: POP
// result := array ;
35866: LD_ADDR_VAR 0 5
35870: PUSH
35871: LD_VAR 0 1
35875: ST_TO_ADDR
// end ;
35876: LD_VAR 0 5
35880: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35881: LD_INT 0
35883: PPUSH
35884: PPUSH
// result := 0 ;
35885: LD_ADDR_VAR 0 3
35889: PUSH
35890: LD_INT 0
35892: ST_TO_ADDR
// if not array or not value in array then
35893: LD_VAR 0 1
35897: NOT
35898: IFTRUE 35913
35900: PUSH
35901: LD_VAR 0 2
35905: PUSH
35906: LD_VAR 0 1
35910: IN
35911: NOT
35912: OR
35913: IFFALSE 35917
// exit ;
35915: GO 35971
// for i = 1 to array do
35917: LD_ADDR_VAR 0 4
35921: PUSH
35922: DOUBLE
35923: LD_INT 1
35925: DEC
35926: ST_TO_ADDR
35927: LD_VAR 0 1
35931: PUSH
35932: FOR_TO
35933: IFFALSE 35969
// if value = array [ i ] then
35935: LD_VAR 0 2
35939: PUSH
35940: LD_VAR 0 1
35944: PUSH
35945: LD_VAR 0 4
35949: ARRAY
35950: EQUAL
35951: IFFALSE 35967
// begin result := i ;
35953: LD_ADDR_VAR 0 3
35957: PUSH
35958: LD_VAR 0 4
35962: ST_TO_ADDR
// exit ;
35963: POP
35964: POP
35965: GO 35971
// end ;
35967: GO 35932
35969: POP
35970: POP
// end ;
35971: LD_VAR 0 3
35975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35976: LD_INT 0
35978: PPUSH
// vc_chassis := chassis ;
35979: LD_ADDR_OWVAR 37
35983: PUSH
35984: LD_VAR 0 1
35988: ST_TO_ADDR
// vc_engine := engine ;
35989: LD_ADDR_OWVAR 39
35993: PUSH
35994: LD_VAR 0 2
35998: ST_TO_ADDR
// vc_control := control ;
35999: LD_ADDR_OWVAR 38
36003: PUSH
36004: LD_VAR 0 3
36008: ST_TO_ADDR
// vc_weapon := weapon ;
36009: LD_ADDR_OWVAR 40
36013: PUSH
36014: LD_VAR 0 4
36018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36019: LD_ADDR_OWVAR 41
36023: PUSH
36024: LD_VAR 0 5
36028: ST_TO_ADDR
// end ;
36029: LD_VAR 0 6
36033: RET
// export function WantPlant ( unit ) ; var task ; begin
36034: LD_INT 0
36036: PPUSH
36037: PPUSH
// result := false ;
36038: LD_ADDR_VAR 0 2
36042: PUSH
36043: LD_INT 0
36045: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 437
36060: ST_TO_ADDR
// if task then
36061: LD_VAR 0 3
36065: IFFALSE 36093
// if task [ 1 ] [ 1 ] = p then
36067: LD_VAR 0 3
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: PUSH
36076: LD_INT 1
36078: ARRAY
36079: PUSH
36080: LD_STRING p
36082: EQUAL
36083: IFFALSE 36093
// result := true ;
36085: LD_ADDR_VAR 0 2
36089: PUSH
36090: LD_INT 1
36092: ST_TO_ADDR
// end ;
36093: LD_VAR 0 2
36097: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36098: LD_INT 0
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
// if pos < 1 then
36104: LD_VAR 0 2
36108: PUSH
36109: LD_INT 1
36111: LESS
36112: IFFALSE 36116
// exit ;
36114: GO 36419
// if pos = 1 then
36116: LD_VAR 0 2
36120: PUSH
36121: LD_INT 1
36123: EQUAL
36124: IFFALSE 36157
// result := Replace ( arr , pos [ 1 ] , value ) else
36126: LD_ADDR_VAR 0 4
36130: PUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: LD_VAR 0 2
36140: PUSH
36141: LD_INT 1
36143: ARRAY
36144: PPUSH
36145: LD_VAR 0 3
36149: PPUSH
36150: CALL_OW 1
36154: ST_TO_ADDR
36155: GO 36419
// begin tmp := arr ;
36157: LD_ADDR_VAR 0 6
36161: PUSH
36162: LD_VAR 0 1
36166: ST_TO_ADDR
// s_arr := [ tmp ] ;
36167: LD_ADDR_VAR 0 7
36171: PUSH
36172: LD_VAR 0 6
36176: PUSH
36177: EMPTY
36178: LIST
36179: ST_TO_ADDR
// for i = 1 to pos - 1 do
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: DOUBLE
36186: LD_INT 1
36188: DEC
36189: ST_TO_ADDR
36190: LD_VAR 0 2
36194: PUSH
36195: LD_INT 1
36197: MINUS
36198: PUSH
36199: FOR_TO
36200: IFFALSE 36245
// begin tmp := tmp [ pos [ i ] ] ;
36202: LD_ADDR_VAR 0 6
36206: PUSH
36207: LD_VAR 0 6
36211: PUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_VAR 0 5
36221: ARRAY
36222: ARRAY
36223: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36224: LD_ADDR_VAR 0 7
36228: PUSH
36229: LD_VAR 0 7
36233: PUSH
36234: LD_VAR 0 6
36238: PUSH
36239: EMPTY
36240: LIST
36241: ADD
36242: ST_TO_ADDR
// end ;
36243: GO 36199
36245: POP
36246: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36247: LD_ADDR_VAR 0 6
36251: PUSH
36252: LD_VAR 0 6
36256: PPUSH
36257: LD_VAR 0 2
36261: PUSH
36262: LD_VAR 0 2
36266: ARRAY
36267: PPUSH
36268: LD_VAR 0 3
36272: PPUSH
36273: CALL_OW 1
36277: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36278: LD_ADDR_VAR 0 7
36282: PUSH
36283: LD_VAR 0 7
36287: PPUSH
36288: LD_VAR 0 7
36292: PPUSH
36293: LD_VAR 0 6
36297: PPUSH
36298: CALL_OW 1
36302: ST_TO_ADDR
// for i = s_arr downto 2 do
36303: LD_ADDR_VAR 0 5
36307: PUSH
36308: DOUBLE
36309: LD_VAR 0 7
36313: INC
36314: ST_TO_ADDR
36315: LD_INT 2
36317: PUSH
36318: FOR_DOWNTO
36319: IFFALSE 36403
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36321: LD_ADDR_VAR 0 6
36325: PUSH
36326: LD_VAR 0 7
36330: PUSH
36331: LD_VAR 0 5
36335: PUSH
36336: LD_INT 1
36338: MINUS
36339: ARRAY
36340: PPUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: MINUS
36354: ARRAY
36355: PPUSH
36356: LD_VAR 0 7
36360: PUSH
36361: LD_VAR 0 5
36365: ARRAY
36366: PPUSH
36367: CALL_OW 1
36371: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36372: LD_ADDR_VAR 0 7
36376: PUSH
36377: LD_VAR 0 7
36381: PPUSH
36382: LD_VAR 0 5
36386: PUSH
36387: LD_INT 1
36389: MINUS
36390: PPUSH
36391: LD_VAR 0 6
36395: PPUSH
36396: CALL_OW 1
36400: ST_TO_ADDR
// end ;
36401: GO 36318
36403: POP
36404: POP
// result := s_arr [ 1 ] ;
36405: LD_ADDR_VAR 0 4
36409: PUSH
36410: LD_VAR 0 7
36414: PUSH
36415: LD_INT 1
36417: ARRAY
36418: ST_TO_ADDR
// end ; end ;
36419: LD_VAR 0 4
36423: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36424: LD_INT 0
36426: PPUSH
36427: PPUSH
// if not list then
36428: LD_VAR 0 1
36432: NOT
36433: IFFALSE 36437
// exit ;
36435: GO 36528
// i := list [ pos1 ] ;
36437: LD_ADDR_VAR 0 5
36441: PUSH
36442: LD_VAR 0 1
36446: PUSH
36447: LD_VAR 0 2
36451: ARRAY
36452: ST_TO_ADDR
// if not i then
36453: LD_VAR 0 5
36457: NOT
36458: IFFALSE 36462
// exit ;
36460: GO 36528
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36462: LD_ADDR_VAR 0 1
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: LD_VAR 0 2
36476: PPUSH
36477: LD_VAR 0 1
36481: PUSH
36482: LD_VAR 0 3
36486: ARRAY
36487: PPUSH
36488: CALL_OW 1
36492: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36493: LD_ADDR_VAR 0 1
36497: PUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: LD_VAR 0 3
36507: PPUSH
36508: LD_VAR 0 5
36512: PPUSH
36513: CALL_OW 1
36517: ST_TO_ADDR
// result := list ;
36518: LD_ADDR_VAR 0 4
36522: PUSH
36523: LD_VAR 0 1
36527: ST_TO_ADDR
// end ;
36528: LD_VAR 0 4
36532: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36533: LD_INT 0
36535: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36536: LD_ADDR_VAR 0 5
36540: PUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 250
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 251
36560: PPUSH
36561: LD_VAR 0 2
36565: PPUSH
36566: LD_VAR 0 3
36570: PPUSH
36571: LD_VAR 0 4
36575: PPUSH
36576: CALL 36958 0 5
36580: ST_TO_ADDR
// end ;
36581: LD_VAR 0 5
36585: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36586: LD_INT 0
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
// if not list or not unit then
36592: LD_VAR 0 2
36596: NOT
36597: IFTRUE 36606
36599: PUSH
36600: LD_VAR 0 1
36604: NOT
36605: OR
36606: IFFALSE 36610
// exit ;
36608: GO 36953
// result := [ ] ;
36610: LD_ADDR_VAR 0 5
36614: PUSH
36615: EMPTY
36616: ST_TO_ADDR
// for i in list do
36617: LD_ADDR_VAR 0 6
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: FOR_IN
36628: IFFALSE 36846
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36630: LD_ADDR_VAR 0 8
36634: PUSH
36635: LD_VAR 0 1
36639: PPUSH
36640: LD_VAR 0 6
36644: PUSH
36645: LD_INT 1
36647: ARRAY
36648: PPUSH
36649: LD_VAR 0 6
36653: PUSH
36654: LD_INT 2
36656: ARRAY
36657: PPUSH
36658: CALL_OW 297
36662: ST_TO_ADDR
// if not Count ( result ) then
36663: LD_VAR 0 5
36667: PPUSH
36668: CALL 33214 0 1
36672: NOT
36673: IFFALSE 36706
// begin result := Join ( result , [ i , tmp ] ) ;
36675: LD_ADDR_VAR 0 5
36679: PUSH
36680: LD_VAR 0 5
36684: PPUSH
36685: LD_VAR 0 6
36689: PUSH
36690: LD_VAR 0 8
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PPUSH
36699: CALL 69146 0 2
36703: ST_TO_ADDR
// continue ;
36704: GO 36627
// end ; if result [ result ] [ 2 ] <= tmp then
36706: LD_VAR 0 5
36710: PUSH
36711: LD_VAR 0 5
36715: ARRAY
36716: PUSH
36717: LD_INT 2
36719: ARRAY
36720: PUSH
36721: LD_VAR 0 8
36725: LESSEQUAL
36726: IFFALSE 36759
// result := Join ( result , [ i , tmp ] ) else
36728: LD_ADDR_VAR 0 5
36732: PUSH
36733: LD_VAR 0 5
36737: PPUSH
36738: LD_VAR 0 6
36742: PUSH
36743: LD_VAR 0 8
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PPUSH
36752: CALL 69146 0 2
36756: ST_TO_ADDR
36757: GO 36844
// begin for j := 1 to Count ( result ) do
36759: LD_ADDR_VAR 0 7
36763: PUSH
36764: DOUBLE
36765: LD_INT 1
36767: DEC
36768: ST_TO_ADDR
36769: LD_VAR 0 5
36773: PPUSH
36774: CALL 33214 0 1
36778: PUSH
36779: FOR_TO
36780: IFFALSE 36842
// begin if tmp < result [ j ] [ 2 ] then
36782: LD_VAR 0 8
36786: PUSH
36787: LD_VAR 0 5
36791: PUSH
36792: LD_VAR 0 7
36796: ARRAY
36797: PUSH
36798: LD_INT 2
36800: ARRAY
36801: LESS
36802: IFFALSE 36840
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: LD_VAR 0 5
36813: PPUSH
36814: LD_VAR 0 7
36818: PPUSH
36819: LD_VAR 0 6
36823: PUSH
36824: LD_VAR 0 8
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PPUSH
36833: CALL_OW 2
36837: ST_TO_ADDR
// break ;
36838: GO 36842
// end ; end ;
36840: GO 36779
36842: POP
36843: POP
// end ; end ;
36844: GO 36627
36846: POP
36847: POP
// if result and not asc then
36848: LD_VAR 0 5
36852: IFFALSE 36861
36854: PUSH
36855: LD_VAR 0 3
36859: NOT
36860: AND
36861: IFFALSE 36878
// result := ReverseArray ( result ) ;
36863: LD_ADDR_VAR 0 5
36867: PUSH
36868: LD_VAR 0 5
36872: PPUSH
36873: CALL 64236 0 1
36877: ST_TO_ADDR
// tmp := [ ] ;
36878: LD_ADDR_VAR 0 8
36882: PUSH
36883: EMPTY
36884: ST_TO_ADDR
// if mode then
36885: LD_VAR 0 4
36889: IFFALSE 36953
// begin for i := 1 to result do
36891: LD_ADDR_VAR 0 6
36895: PUSH
36896: DOUBLE
36897: LD_INT 1
36899: DEC
36900: ST_TO_ADDR
36901: LD_VAR 0 5
36905: PUSH
36906: FOR_TO
36907: IFFALSE 36941
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36909: LD_ADDR_VAR 0 8
36913: PUSH
36914: LD_VAR 0 8
36918: PPUSH
36919: LD_VAR 0 5
36923: PUSH
36924: LD_VAR 0 6
36928: ARRAY
36929: PUSH
36930: LD_INT 1
36932: ARRAY
36933: PPUSH
36934: CALL 69146 0 2
36938: ST_TO_ADDR
36939: GO 36906
36941: POP
36942: POP
// result := tmp ;
36943: LD_ADDR_VAR 0 5
36947: PUSH
36948: LD_VAR 0 8
36952: ST_TO_ADDR
// end ; end ;
36953: LD_VAR 0 5
36957: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
// if not list then
36964: LD_VAR 0 3
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37363
// result := [ ] ;
36973: LD_ADDR_VAR 0 6
36977: PUSH
36978: EMPTY
36979: ST_TO_ADDR
// for i in list do
36980: LD_ADDR_VAR 0 7
36984: PUSH
36985: LD_VAR 0 3
36989: PUSH
36990: FOR_IN
36991: IFFALSE 37193
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36993: LD_ADDR_VAR 0 9
36997: PUSH
36998: LD_VAR 0 7
37002: PPUSH
37003: LD_VAR 0 1
37007: PPUSH
37008: LD_VAR 0 2
37012: PPUSH
37013: CALL_OW 297
37017: ST_TO_ADDR
// if not result then
37018: LD_VAR 0 6
37022: NOT
37023: IFFALSE 37049
// result := [ [ i , tmp ] ] else
37025: LD_ADDR_VAR 0 6
37029: PUSH
37030: LD_VAR 0 7
37034: PUSH
37035: LD_VAR 0 9
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: EMPTY
37045: LIST
37046: ST_TO_ADDR
37047: GO 37191
// begin if result [ result ] [ 2 ] <= tmp then
37049: LD_VAR 0 6
37053: PUSH
37054: LD_VAR 0 6
37058: ARRAY
37059: PUSH
37060: LD_INT 2
37062: ARRAY
37063: PUSH
37064: LD_VAR 0 9
37068: LESSEQUAL
37069: IFFALSE 37111
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37071: LD_ADDR_VAR 0 6
37075: PUSH
37076: LD_VAR 0 6
37080: PPUSH
37081: LD_VAR 0 6
37085: PUSH
37086: LD_INT 1
37088: PLUS
37089: PPUSH
37090: LD_VAR 0 7
37094: PUSH
37095: LD_VAR 0 9
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PPUSH
37104: CALL_OW 2
37108: ST_TO_ADDR
37109: GO 37191
// for j := 1 to result do
37111: LD_ADDR_VAR 0 8
37115: PUSH
37116: DOUBLE
37117: LD_INT 1
37119: DEC
37120: ST_TO_ADDR
37121: LD_VAR 0 6
37125: PUSH
37126: FOR_TO
37127: IFFALSE 37189
// begin if tmp < result [ j ] [ 2 ] then
37129: LD_VAR 0 9
37133: PUSH
37134: LD_VAR 0 6
37138: PUSH
37139: LD_VAR 0 8
37143: ARRAY
37144: PUSH
37145: LD_INT 2
37147: ARRAY
37148: LESS
37149: IFFALSE 37187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37151: LD_ADDR_VAR 0 6
37155: PUSH
37156: LD_VAR 0 6
37160: PPUSH
37161: LD_VAR 0 8
37165: PPUSH
37166: LD_VAR 0 7
37170: PUSH
37171: LD_VAR 0 9
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PPUSH
37180: CALL_OW 2
37184: ST_TO_ADDR
// break ;
37185: GO 37189
// end ; end ;
37187: GO 37126
37189: POP
37190: POP
// end ; end ;
37191: GO 36990
37193: POP
37194: POP
// if result and not asc then
37195: LD_VAR 0 6
37199: IFFALSE 37208
37201: PUSH
37202: LD_VAR 0 4
37206: NOT
37207: AND
37208: IFFALSE 37283
// begin tmp := result ;
37210: LD_ADDR_VAR 0 9
37214: PUSH
37215: LD_VAR 0 6
37219: ST_TO_ADDR
// for i = tmp downto 1 do
37220: LD_ADDR_VAR 0 7
37224: PUSH
37225: DOUBLE
37226: LD_VAR 0 9
37230: INC
37231: ST_TO_ADDR
37232: LD_INT 1
37234: PUSH
37235: FOR_DOWNTO
37236: IFFALSE 37281
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37238: LD_ADDR_VAR 0 6
37242: PUSH
37243: LD_VAR 0 6
37247: PPUSH
37248: LD_VAR 0 9
37252: PUSH
37253: LD_VAR 0 7
37257: MINUS
37258: PUSH
37259: LD_INT 1
37261: PLUS
37262: PPUSH
37263: LD_VAR 0 9
37267: PUSH
37268: LD_VAR 0 7
37272: ARRAY
37273: PPUSH
37274: CALL_OW 1
37278: ST_TO_ADDR
37279: GO 37235
37281: POP
37282: POP
// end ; tmp := [ ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: EMPTY
37289: ST_TO_ADDR
// if mode then
37290: LD_VAR 0 5
37294: IFFALSE 37363
// begin for i = 1 to result do
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: DOUBLE
37302: LD_INT 1
37304: DEC
37305: ST_TO_ADDR
37306: LD_VAR 0 6
37310: PUSH
37311: FOR_TO
37312: IFFALSE 37351
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37314: LD_ADDR_VAR 0 9
37318: PUSH
37319: LD_VAR 0 9
37323: PPUSH
37324: LD_VAR 0 7
37328: PPUSH
37329: LD_VAR 0 6
37333: PUSH
37334: LD_VAR 0 7
37338: ARRAY
37339: PUSH
37340: LD_INT 1
37342: ARRAY
37343: PPUSH
37344: CALL_OW 1
37348: ST_TO_ADDR
37349: GO 37311
37351: POP
37352: POP
// result := tmp ;
37353: LD_ADDR_VAR 0 6
37357: PUSH
37358: LD_VAR 0 9
37362: ST_TO_ADDR
// end ; end ;
37363: LD_VAR 0 6
37367: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37368: LD_INT 0
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
37374: PPUSH
37375: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37376: LD_ADDR_VAR 0 5
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: ST_TO_ADDR
// if not x or not y then
37398: LD_VAR 0 2
37402: NOT
37403: IFTRUE 37412
37405: PUSH
37406: LD_VAR 0 3
37410: NOT
37411: OR
37412: IFFALSE 37416
// exit ;
37414: GO 39072
// if not range then
37416: LD_VAR 0 4
37420: NOT
37421: IFFALSE 37431
// range := 10 ;
37423: LD_ADDR_VAR 0 4
37427: PUSH
37428: LD_INT 10
37430: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37431: LD_ADDR_VAR 0 8
37435: PUSH
37436: LD_INT 81
37438: PUSH
37439: LD_VAR 0 1
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 92
37450: PUSH
37451: LD_VAR 0 2
37455: PUSH
37456: LD_VAR 0 3
37460: PUSH
37461: LD_VAR 0 4
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: LD_INT 21
37477: PUSH
37478: LD_INT 3
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: PPUSH
37494: CALL_OW 69
37498: ST_TO_ADDR
// if not tmp then
37499: LD_VAR 0 8
37503: NOT
37504: IFFALSE 37508
// exit ;
37506: GO 39072
// for i in tmp do
37508: LD_ADDR_VAR 0 6
37512: PUSH
37513: LD_VAR 0 8
37517: PUSH
37518: FOR_IN
37519: IFFALSE 39047
// begin points := [ 0 , 0 , 0 ] ;
37521: LD_ADDR_VAR 0 9
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// bpoints := 1 ;
37540: LD_ADDR_VAR 0 10
37544: PUSH
37545: LD_INT 1
37547: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37548: LD_VAR 0 6
37552: PPUSH
37553: CALL_OW 247
37557: PUSH
37558: LD_INT 1
37560: DOUBLE
37561: EQUAL
37562: IFTRUE 37566
37564: GO 38148
37566: POP
// begin if GetClass ( i ) = 1 then
37567: LD_VAR 0 6
37571: PPUSH
37572: CALL_OW 257
37576: PUSH
37577: LD_INT 1
37579: EQUAL
37580: IFFALSE 37601
// points := [ 10 , 5 , 3 ] ;
37582: LD_ADDR_VAR 0 9
37586: PUSH
37587: LD_INT 10
37589: PUSH
37590: LD_INT 5
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37601: LD_VAR 0 6
37605: PPUSH
37606: CALL_OW 257
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: IN
37625: IFFALSE 37646
// points := [ 3 , 2 , 1 ] ;
37627: LD_ADDR_VAR 0 9
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37646: LD_VAR 0 6
37650: PPUSH
37651: CALL_OW 257
37655: PUSH
37656: LD_INT 5
37658: EQUAL
37659: IFFALSE 37680
// points := [ 130 , 5 , 2 ] ;
37661: LD_ADDR_VAR 0 9
37665: PUSH
37666: LD_INT 130
37668: PUSH
37669: LD_INT 5
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37680: LD_VAR 0 6
37684: PPUSH
37685: CALL_OW 257
37689: PUSH
37690: LD_INT 8
37692: EQUAL
37693: IFFALSE 37714
// points := [ 35 , 35 , 30 ] ;
37695: LD_ADDR_VAR 0 9
37699: PUSH
37700: LD_INT 35
37702: PUSH
37703: LD_INT 35
37705: PUSH
37706: LD_INT 30
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37714: LD_VAR 0 6
37718: PPUSH
37719: CALL_OW 257
37723: PUSH
37724: LD_INT 9
37726: EQUAL
37727: IFFALSE 37748
// points := [ 20 , 55 , 40 ] ;
37729: LD_ADDR_VAR 0 9
37733: PUSH
37734: LD_INT 20
37736: PUSH
37737: LD_INT 55
37739: PUSH
37740: LD_INT 40
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37748: LD_VAR 0 6
37752: PPUSH
37753: CALL_OW 257
37757: PUSH
37758: LD_INT 12
37760: PUSH
37761: LD_INT 16
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: IN
37768: IFFALSE 37789
// points := [ 5 , 3 , 2 ] ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_INT 5
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37789: LD_VAR 0 6
37793: PPUSH
37794: CALL_OW 257
37798: PUSH
37799: LD_INT 17
37801: EQUAL
37802: IFFALSE 37823
// points := [ 100 , 50 , 75 ] ;
37804: LD_ADDR_VAR 0 9
37808: PUSH
37809: LD_INT 100
37811: PUSH
37812: LD_INT 50
37814: PUSH
37815: LD_INT 75
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37823: LD_VAR 0 6
37827: PPUSH
37828: CALL_OW 257
37832: PUSH
37833: LD_INT 15
37835: EQUAL
37836: IFFALSE 37857
// points := [ 10 , 5 , 3 ] ;
37838: LD_ADDR_VAR 0 9
37842: PUSH
37843: LD_INT 10
37845: PUSH
37846: LD_INT 5
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 257
37866: PUSH
37867: LD_INT 14
37869: EQUAL
37870: IFFALSE 37891
// points := [ 10 , 0 , 0 ] ;
37872: LD_ADDR_VAR 0 9
37876: PUSH
37877: LD_INT 10
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37891: LD_VAR 0 6
37895: PPUSH
37896: CALL_OW 257
37900: PUSH
37901: LD_INT 11
37903: EQUAL
37904: IFFALSE 37925
// points := [ 30 , 10 , 5 ] ;
37906: LD_ADDR_VAR 0 9
37910: PUSH
37911: LD_INT 30
37913: PUSH
37914: LD_INT 10
37916: PUSH
37917: LD_INT 5
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37925: LD_VAR 0 1
37929: PPUSH
37930: LD_INT 5
37932: PPUSH
37933: CALL_OW 321
37937: PUSH
37938: LD_INT 2
37940: EQUAL
37941: IFFALSE 37958
// bpoints := bpoints * 1.8 ;
37943: LD_ADDR_VAR 0 10
37947: PUSH
37948: LD_VAR 0 10
37952: PUSH
37953: LD_REAL  1.80000000000000E+0000
37956: MUL
37957: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37958: LD_VAR 0 6
37962: PPUSH
37963: CALL_OW 257
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: LD_INT 4
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: IN
37986: IFFALSE 38006
37988: PUSH
37989: LD_VAR 0 1
37993: PPUSH
37994: LD_INT 51
37996: PPUSH
37997: CALL_OW 321
38001: PUSH
38002: LD_INT 2
38004: EQUAL
38005: AND
38006: IFFALSE 38023
// bpoints := bpoints * 1.2 ;
38008: LD_ADDR_VAR 0 10
38012: PUSH
38013: LD_VAR 0 10
38017: PUSH
38018: LD_REAL  1.20000000000000E+0000
38021: MUL
38022: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38023: LD_VAR 0 6
38027: PPUSH
38028: CALL_OW 257
38032: PUSH
38033: LD_INT 5
38035: PUSH
38036: LD_INT 7
38038: PUSH
38039: LD_INT 9
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: IN
38047: IFFALSE 38067
38049: PUSH
38050: LD_VAR 0 1
38054: PPUSH
38055: LD_INT 52
38057: PPUSH
38058: CALL_OW 321
38062: PUSH
38063: LD_INT 2
38065: EQUAL
38066: AND
38067: IFFALSE 38084
// bpoints := bpoints * 1.5 ;
38069: LD_ADDR_VAR 0 10
38073: PUSH
38074: LD_VAR 0 10
38078: PUSH
38079: LD_REAL  1.50000000000000E+0000
38082: MUL
38083: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38084: LD_VAR 0 1
38088: PPUSH
38089: LD_INT 66
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: EQUAL
38100: IFFALSE 38117
// bpoints := bpoints * 1.1 ;
38102: LD_ADDR_VAR 0 10
38106: PUSH
38107: LD_VAR 0 10
38111: PUSH
38112: LD_REAL  1.10000000000000E+0000
38115: MUL
38116: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38117: LD_ADDR_VAR 0 10
38121: PUSH
38122: LD_VAR 0 10
38126: PUSH
38127: LD_VAR 0 6
38131: PPUSH
38132: LD_INT 1
38134: PPUSH
38135: CALL_OW 259
38139: PUSH
38140: LD_REAL  1.15000000000000E+0000
38143: MUL
38144: MUL
38145: ST_TO_ADDR
// end ; unit_vehicle :
38146: GO 38976
38148: LD_INT 2
38150: DOUBLE
38151: EQUAL
38152: IFTRUE 38156
38154: GO 38964
38156: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38157: LD_VAR 0 6
38161: PPUSH
38162: CALL_OW 264
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 42
38172: PUSH
38173: LD_INT 24
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: IN
38181: IFFALSE 38202
// points := [ 25 , 5 , 3 ] ;
38183: LD_ADDR_VAR 0 9
38187: PUSH
38188: LD_INT 25
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38202: LD_VAR 0 6
38206: PPUSH
38207: CALL_OW 264
38211: PUSH
38212: LD_INT 4
38214: PUSH
38215: LD_INT 43
38217: PUSH
38218: LD_INT 25
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: IN
38226: IFFALSE 38247
// points := [ 40 , 15 , 5 ] ;
38228: LD_ADDR_VAR 0 9
38232: PUSH
38233: LD_INT 40
38235: PUSH
38236: LD_INT 15
38238: PUSH
38239: LD_INT 5
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38247: LD_VAR 0 6
38251: PPUSH
38252: CALL_OW 264
38256: PUSH
38257: LD_INT 3
38259: PUSH
38260: LD_INT 23
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: IN
38267: IFFALSE 38288
// points := [ 7 , 25 , 8 ] ;
38269: LD_ADDR_VAR 0 9
38273: PUSH
38274: LD_INT 7
38276: PUSH
38277: LD_INT 25
38279: PUSH
38280: LD_INT 8
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38288: LD_VAR 0 6
38292: PPUSH
38293: CALL_OW 264
38297: PUSH
38298: LD_INT 5
38300: PUSH
38301: LD_INT 27
38303: PUSH
38304: LD_INT 44
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: IN
38312: IFFALSE 38333
// points := [ 14 , 50 , 16 ] ;
38314: LD_ADDR_VAR 0 9
38318: PUSH
38319: LD_INT 14
38321: PUSH
38322: LD_INT 50
38324: PUSH
38325: LD_INT 16
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38333: LD_VAR 0 6
38337: PPUSH
38338: CALL_OW 264
38342: PUSH
38343: LD_INT 6
38345: PUSH
38346: LD_INT 46
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: IN
38353: IFFALSE 38374
// points := [ 32 , 120 , 70 ] ;
38355: LD_ADDR_VAR 0 9
38359: PUSH
38360: LD_INT 32
38362: PUSH
38363: LD_INT 120
38365: PUSH
38366: LD_INT 70
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38374: LD_VAR 0 6
38378: PPUSH
38379: CALL_OW 264
38383: PUSH
38384: LD_INT 7
38386: PUSH
38387: LD_INT 28
38389: PUSH
38390: LD_INT 45
38392: PUSH
38393: LD_INT 92
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: IN
38402: IFFALSE 38423
// points := [ 35 , 20 , 45 ] ;
38404: LD_ADDR_VAR 0 9
38408: PUSH
38409: LD_INT 35
38411: PUSH
38412: LD_INT 20
38414: PUSH
38415: LD_INT 45
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38423: LD_VAR 0 6
38427: PPUSH
38428: CALL_OW 264
38432: PUSH
38433: LD_INT 47
38435: PUSH
38436: EMPTY
38437: LIST
38438: IN
38439: IFFALSE 38460
// points := [ 67 , 45 , 75 ] ;
38441: LD_ADDR_VAR 0 9
38445: PUSH
38446: LD_INT 67
38448: PUSH
38449: LD_INT 45
38451: PUSH
38452: LD_INT 75
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38460: LD_VAR 0 6
38464: PPUSH
38465: CALL_OW 264
38469: PUSH
38470: LD_INT 26
38472: PUSH
38473: EMPTY
38474: LIST
38475: IN
38476: IFFALSE 38497
// points := [ 120 , 30 , 80 ] ;
38478: LD_ADDR_VAR 0 9
38482: PUSH
38483: LD_INT 120
38485: PUSH
38486: LD_INT 30
38488: PUSH
38489: LD_INT 80
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38497: LD_VAR 0 6
38501: PPUSH
38502: CALL_OW 264
38506: PUSH
38507: LD_INT 22
38509: PUSH
38510: EMPTY
38511: LIST
38512: IN
38513: IFFALSE 38534
// points := [ 40 , 1 , 1 ] ;
38515: LD_ADDR_VAR 0 9
38519: PUSH
38520: LD_INT 40
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38534: LD_VAR 0 6
38538: PPUSH
38539: CALL_OW 264
38543: PUSH
38544: LD_INT 29
38546: PUSH
38547: EMPTY
38548: LIST
38549: IN
38550: IFFALSE 38571
// points := [ 70 , 200 , 400 ] ;
38552: LD_ADDR_VAR 0 9
38556: PUSH
38557: LD_INT 70
38559: PUSH
38560: LD_INT 200
38562: PUSH
38563: LD_INT 400
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38571: LD_VAR 0 6
38575: PPUSH
38576: CALL_OW 264
38580: PUSH
38581: LD_INT 14
38583: PUSH
38584: LD_INT 53
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: IN
38591: IFFALSE 38612
// points := [ 40 , 10 , 20 ] ;
38593: LD_ADDR_VAR 0 9
38597: PUSH
38598: LD_INT 40
38600: PUSH
38601: LD_INT 10
38603: PUSH
38604: LD_INT 20
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38612: LD_VAR 0 6
38616: PPUSH
38617: CALL_OW 264
38621: PUSH
38622: LD_INT 9
38624: PUSH
38625: EMPTY
38626: LIST
38627: IN
38628: IFFALSE 38649
// points := [ 5 , 70 , 20 ] ;
38630: LD_ADDR_VAR 0 9
38634: PUSH
38635: LD_INT 5
38637: PUSH
38638: LD_INT 70
38640: PUSH
38641: LD_INT 20
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38649: LD_VAR 0 6
38653: PPUSH
38654: CALL_OW 264
38658: PUSH
38659: LD_INT 10
38661: PUSH
38662: EMPTY
38663: LIST
38664: IN
38665: IFFALSE 38686
// points := [ 35 , 110 , 70 ] ;
38667: LD_ADDR_VAR 0 9
38671: PUSH
38672: LD_INT 35
38674: PUSH
38675: LD_INT 110
38677: PUSH
38678: LD_INT 70
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38686: LD_VAR 0 6
38690: PPUSH
38691: CALL_OW 265
38695: PUSH
38696: LD_INT 25
38698: EQUAL
38699: IFFALSE 38720
// points := [ 80 , 65 , 100 ] ;
38701: LD_ADDR_VAR 0 9
38705: PUSH
38706: LD_INT 80
38708: PUSH
38709: LD_INT 65
38711: PUSH
38712: LD_INT 100
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38720: LD_VAR 0 6
38724: PPUSH
38725: CALL_OW 263
38729: PUSH
38730: LD_INT 1
38732: EQUAL
38733: IFFALSE 38768
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38735: LD_ADDR_VAR 0 10
38739: PUSH
38740: LD_VAR 0 10
38744: PUSH
38745: LD_VAR 0 6
38749: PPUSH
38750: CALL_OW 311
38754: PPUSH
38755: LD_INT 3
38757: PPUSH
38758: CALL_OW 259
38762: PUSH
38763: LD_INT 4
38765: MUL
38766: MUL
38767: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38768: LD_VAR 0 6
38772: PPUSH
38773: CALL_OW 263
38777: PUSH
38778: LD_INT 2
38780: EQUAL
38781: IFFALSE 38832
// begin j := IsControledBy ( i ) ;
38783: LD_ADDR_VAR 0 7
38787: PUSH
38788: LD_VAR 0 6
38792: PPUSH
38793: CALL_OW 312
38797: ST_TO_ADDR
// if j then
38798: LD_VAR 0 7
38802: IFFALSE 38832
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38804: LD_ADDR_VAR 0 10
38808: PUSH
38809: LD_VAR 0 10
38813: PUSH
38814: LD_VAR 0 7
38818: PPUSH
38819: LD_INT 3
38821: PPUSH
38822: CALL_OW 259
38826: PUSH
38827: LD_INT 3
38829: MUL
38830: MUL
38831: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38832: LD_VAR 0 6
38836: PPUSH
38837: CALL_OW 264
38841: PUSH
38842: LD_INT 5
38844: PUSH
38845: LD_INT 6
38847: PUSH
38848: LD_INT 46
38850: PUSH
38851: LD_INT 44
38853: PUSH
38854: LD_INT 47
38856: PUSH
38857: LD_INT 45
38859: PUSH
38860: LD_INT 28
38862: PUSH
38863: LD_INT 7
38865: PUSH
38866: LD_INT 27
38868: PUSH
38869: LD_INT 29
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: IN
38884: IFFALSE 38904
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_INT 52
38894: PPUSH
38895: CALL_OW 321
38899: PUSH
38900: LD_INT 2
38902: EQUAL
38903: AND
38904: IFFALSE 38921
// bpoints := bpoints * 1.2 ;
38906: LD_ADDR_VAR 0 10
38910: PUSH
38911: LD_VAR 0 10
38915: PUSH
38916: LD_REAL  1.20000000000000E+0000
38919: MUL
38920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38921: LD_VAR 0 6
38925: PPUSH
38926: CALL_OW 264
38930: PUSH
38931: LD_INT 6
38933: PUSH
38934: LD_INT 46
38936: PUSH
38937: LD_INT 47
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: IN
38945: IFFALSE 38962
// bpoints := bpoints * 1.2 ;
38947: LD_ADDR_VAR 0 10
38951: PUSH
38952: LD_VAR 0 10
38956: PUSH
38957: LD_REAL  1.20000000000000E+0000
38960: MUL
38961: ST_TO_ADDR
// end ; unit_building :
38962: GO 38976
38964: LD_INT 3
38966: DOUBLE
38967: EQUAL
38968: IFTRUE 38972
38970: GO 38975
38972: POP
// ; end ;
38973: GO 38976
38975: POP
// for j = 1 to 3 do
38976: LD_ADDR_VAR 0 7
38980: PUSH
38981: DOUBLE
38982: LD_INT 1
38984: DEC
38985: ST_TO_ADDR
38986: LD_INT 3
38988: PUSH
38989: FOR_TO
38990: IFFALSE 39043
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38992: LD_ADDR_VAR 0 5
38996: PUSH
38997: LD_VAR 0 5
39001: PPUSH
39002: LD_VAR 0 7
39006: PPUSH
39007: LD_VAR 0 5
39011: PUSH
39012: LD_VAR 0 7
39016: ARRAY
39017: PUSH
39018: LD_VAR 0 9
39022: PUSH
39023: LD_VAR 0 7
39027: ARRAY
39028: PUSH
39029: LD_VAR 0 10
39033: MUL
39034: PLUS
39035: PPUSH
39036: CALL_OW 1
39040: ST_TO_ADDR
39041: GO 38989
39043: POP
39044: POP
// end ;
39045: GO 37518
39047: POP
39048: POP
// result := Replace ( result , 4 , tmp ) ;
39049: LD_ADDR_VAR 0 5
39053: PUSH
39054: LD_VAR 0 5
39058: PPUSH
39059: LD_INT 4
39061: PPUSH
39062: LD_VAR 0 8
39066: PPUSH
39067: CALL_OW 1
39071: ST_TO_ADDR
// end ;
39072: LD_VAR 0 5
39076: RET
// export function DangerAtRange ( unit , range ) ; begin
39077: LD_INT 0
39079: PPUSH
// if not unit then
39080: LD_VAR 0 1
39084: NOT
39085: IFFALSE 39089
// exit ;
39087: GO 39134
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_VAR 0 1
39098: PPUSH
39099: CALL_OW 255
39103: PPUSH
39104: LD_VAR 0 1
39108: PPUSH
39109: CALL_OW 250
39113: PPUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 251
39123: PPUSH
39124: LD_VAR 0 2
39128: PPUSH
39129: CALL 37368 0 4
39133: ST_TO_ADDR
// end ;
39134: LD_VAR 0 3
39138: RET
// export function DangerInArea ( side , area ) ; begin
39139: LD_INT 0
39141: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39142: LD_ADDR_VAR 0 3
39146: PUSH
39147: LD_VAR 0 2
39151: PPUSH
39152: LD_INT 81
39154: PUSH
39155: LD_VAR 0 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PPUSH
39164: CALL_OW 70
39168: ST_TO_ADDR
// end ;
39169: LD_VAR 0 3
39173: RET
// export function IsExtension ( b ) ; begin
39174: LD_INT 0
39176: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39177: LD_ADDR_VAR 0 2
39181: PUSH
39182: LD_VAR 0 1
39186: PUSH
39187: LD_INT 23
39189: PUSH
39190: LD_INT 20
39192: PUSH
39193: LD_INT 22
39195: PUSH
39196: LD_INT 17
39198: PUSH
39199: LD_INT 24
39201: PUSH
39202: LD_INT 21
39204: PUSH
39205: LD_INT 19
39207: PUSH
39208: LD_INT 16
39210: PUSH
39211: LD_INT 25
39213: PUSH
39214: LD_INT 18
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: IN
39229: ST_TO_ADDR
// end ;
39230: LD_VAR 0 2
39234: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39235: LD_INT 0
39237: PPUSH
39238: PPUSH
39239: PPUSH
// result := [ ] ;
39240: LD_ADDR_VAR 0 4
39244: PUSH
39245: EMPTY
39246: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39247: LD_ADDR_VAR 0 5
39251: PUSH
39252: LD_VAR 0 2
39256: PPUSH
39257: LD_INT 21
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PPUSH
39267: CALL_OW 70
39271: ST_TO_ADDR
// if not tmp then
39272: LD_VAR 0 5
39276: NOT
39277: IFFALSE 39281
// exit ;
39279: GO 39345
// if checkLink then
39281: LD_VAR 0 3
39285: IFFALSE 39335
// begin for i in tmp do
39287: LD_ADDR_VAR 0 6
39291: PUSH
39292: LD_VAR 0 5
39296: PUSH
39297: FOR_IN
39298: IFFALSE 39333
// if GetBase ( i ) <> base then
39300: LD_VAR 0 6
39304: PPUSH
39305: CALL_OW 274
39309: PUSH
39310: LD_VAR 0 1
39314: NONEQUAL
39315: IFFALSE 39331
// ComLinkToBase ( base , i ) ;
39317: LD_VAR 0 1
39321: PPUSH
39322: LD_VAR 0 6
39326: PPUSH
39327: CALL_OW 169
39331: GO 39297
39333: POP
39334: POP
// end ; result := tmp ;
39335: LD_ADDR_VAR 0 4
39339: PUSH
39340: LD_VAR 0 5
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 4
39349: RET
// export function ComComplete ( units , b ) ; var i ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
// if not units then
39354: LD_VAR 0 1
39358: NOT
39359: IFFALSE 39363
// exit ;
39361: GO 39453
// for i in units do
39363: LD_ADDR_VAR 0 4
39367: PUSH
39368: LD_VAR 0 1
39372: PUSH
39373: FOR_IN
39374: IFFALSE 39451
// if BuildingStatus ( b ) = bs_build then
39376: LD_VAR 0 2
39380: PPUSH
39381: CALL_OW 461
39385: PUSH
39386: LD_INT 1
39388: EQUAL
39389: IFFALSE 39449
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39391: LD_VAR 0 4
39395: PPUSH
39396: LD_STRING h
39398: PUSH
39399: LD_VAR 0 2
39403: PPUSH
39404: CALL_OW 250
39408: PUSH
39409: LD_VAR 0 2
39413: PPUSH
39414: CALL_OW 251
39418: PUSH
39419: LD_VAR 0 2
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: PPUSH
39445: CALL_OW 446
39449: GO 39373
39451: POP
39452: POP
// end ;
39453: LD_VAR 0 3
39457: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39458: LD_INT 0
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39466: LD_VAR 0 1
39470: NOT
39471: IFTRUE 39488
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 263
39483: PUSH
39484: LD_INT 2
39486: NONEQUAL
39487: OR
39488: IFFALSE 39492
// exit ;
39490: GO 39808
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39492: LD_ADDR_VAR 0 6
39496: PUSH
39497: LD_INT 22
39499: PUSH
39500: LD_VAR 0 1
39504: PPUSH
39505: CALL_OW 255
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: LD_INT 30
39519: PUSH
39520: LD_INT 36
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 34
39529: PUSH
39530: LD_INT 31
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PPUSH
39546: CALL_OW 69
39550: ST_TO_ADDR
// if not tmp then
39551: LD_VAR 0 6
39555: NOT
39556: IFFALSE 39560
// exit ;
39558: GO 39808
// result := [ ] ;
39560: LD_ADDR_VAR 0 2
39564: PUSH
39565: EMPTY
39566: ST_TO_ADDR
// for i in tmp do
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_VAR 0 6
39576: PUSH
39577: FOR_IN
39578: IFFALSE 39649
// begin t := UnitsInside ( i ) ;
39580: LD_ADDR_VAR 0 4
39584: PUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: CALL_OW 313
39594: ST_TO_ADDR
// if t then
39595: LD_VAR 0 4
39599: IFFALSE 39647
// for j in t do
39601: LD_ADDR_VAR 0 7
39605: PUSH
39606: LD_VAR 0 4
39610: PUSH
39611: FOR_IN
39612: IFFALSE 39645
// result := Replace ( result , result + 1 , j ) ;
39614: LD_ADDR_VAR 0 2
39618: PUSH
39619: LD_VAR 0 2
39623: PPUSH
39624: LD_VAR 0 2
39628: PUSH
39629: LD_INT 1
39631: PLUS
39632: PPUSH
39633: LD_VAR 0 7
39637: PPUSH
39638: CALL_OW 1
39642: ST_TO_ADDR
39643: GO 39611
39645: POP
39646: POP
// end ;
39647: GO 39577
39649: POP
39650: POP
// if not result then
39651: LD_VAR 0 2
39655: NOT
39656: IFFALSE 39660
// exit ;
39658: GO 39808
// mech := result [ 1 ] ;
39660: LD_ADDR_VAR 0 5
39664: PUSH
39665: LD_VAR 0 2
39669: PUSH
39670: LD_INT 1
39672: ARRAY
39673: ST_TO_ADDR
// if result > 1 then
39674: LD_VAR 0 2
39678: PUSH
39679: LD_INT 1
39681: GREATER
39682: IFFALSE 39794
// begin for i = 2 to result do
39684: LD_ADDR_VAR 0 3
39688: PUSH
39689: DOUBLE
39690: LD_INT 2
39692: DEC
39693: ST_TO_ADDR
39694: LD_VAR 0 2
39698: PUSH
39699: FOR_TO
39700: IFFALSE 39792
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39702: LD_ADDR_VAR 0 4
39706: PUSH
39707: LD_VAR 0 2
39711: PUSH
39712: LD_VAR 0 3
39716: ARRAY
39717: PPUSH
39718: LD_INT 3
39720: PPUSH
39721: CALL_OW 259
39725: PUSH
39726: LD_VAR 0 2
39730: PUSH
39731: LD_VAR 0 3
39735: ARRAY
39736: PPUSH
39737: CALL_OW 432
39741: MINUS
39742: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39743: LD_VAR 0 4
39747: PUSH
39748: LD_VAR 0 5
39752: PPUSH
39753: LD_INT 3
39755: PPUSH
39756: CALL_OW 259
39760: PUSH
39761: LD_VAR 0 5
39765: PPUSH
39766: CALL_OW 432
39770: MINUS
39771: GREATEREQUAL
39772: IFFALSE 39790
// mech := result [ i ] ;
39774: LD_ADDR_VAR 0 5
39778: PUSH
39779: LD_VAR 0 2
39783: PUSH
39784: LD_VAR 0 3
39788: ARRAY
39789: ST_TO_ADDR
// end ;
39790: GO 39699
39792: POP
39793: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_VAR 0 5
39803: PPUSH
39804: CALL_OW 135
// end ;
39808: LD_VAR 0 2
39812: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39813: LD_INT 0
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
// result := [ ] ;
39828: LD_ADDR_VAR 0 7
39832: PUSH
39833: EMPTY
39834: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 266
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: IN
39855: NOT
39856: IFFALSE 39860
// exit ;
39858: GO 41500
// if name then
39860: LD_VAR 0 3
39864: IFFALSE 39880
// SetBName ( base_dep , name ) ;
39866: LD_VAR 0 1
39870: PPUSH
39871: LD_VAR 0 3
39875: PPUSH
39876: CALL_OW 500
// base := GetBase ( base_dep ) ;
39880: LD_ADDR_VAR 0 15
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 274
39894: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39895: LD_ADDR_VAR 0 16
39899: PUSH
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 255
39909: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39910: LD_ADDR_VAR 0 17
39914: PUSH
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 248
39924: ST_TO_ADDR
// if sources then
39925: LD_VAR 0 5
39929: IFFALSE 39976
// for i = 1 to 3 do
39931: LD_ADDR_VAR 0 8
39935: PUSH
39936: DOUBLE
39937: LD_INT 1
39939: DEC
39940: ST_TO_ADDR
39941: LD_INT 3
39943: PUSH
39944: FOR_TO
39945: IFFALSE 39974
// AddResourceType ( base , i , sources [ i ] ) ;
39947: LD_VAR 0 15
39951: PPUSH
39952: LD_VAR 0 8
39956: PPUSH
39957: LD_VAR 0 5
39961: PUSH
39962: LD_VAR 0 8
39966: ARRAY
39967: PPUSH
39968: CALL_OW 276
39972: GO 39944
39974: POP
39975: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39976: LD_ADDR_VAR 0 18
39980: PUSH
39981: LD_VAR 0 15
39985: PPUSH
39986: LD_VAR 0 2
39990: PPUSH
39991: LD_INT 1
39993: PPUSH
39994: CALL 39235 0 3
39998: ST_TO_ADDR
// InitHc ;
39999: CALL_OW 19
// InitUc ;
40003: CALL_OW 18
// uc_side := side ;
40007: LD_ADDR_OWVAR 20
40011: PUSH
40012: LD_VAR 0 16
40016: ST_TO_ADDR
// uc_nation := nation ;
40017: LD_ADDR_OWVAR 21
40021: PUSH
40022: LD_VAR 0 17
40026: ST_TO_ADDR
// if buildings then
40027: LD_VAR 0 18
40031: IFFALSE 41359
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40033: LD_ADDR_VAR 0 19
40037: PUSH
40038: LD_VAR 0 18
40042: PPUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: LD_INT 29
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 30
40058: PUSH
40059: LD_INT 30
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: PPUSH
40071: CALL_OW 72
40075: ST_TO_ADDR
// if tmp then
40076: LD_VAR 0 19
40080: IFFALSE 40128
// for i in tmp do
40082: LD_ADDR_VAR 0 8
40086: PUSH
40087: LD_VAR 0 19
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40126
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40095: LD_VAR 0 8
40099: PPUSH
40100: CALL_OW 250
40104: PPUSH
40105: LD_VAR 0 8
40109: PPUSH
40110: CALL_OW 251
40114: PPUSH
40115: LD_VAR 0 16
40119: PPUSH
40120: CALL_OW 441
40124: GO 40092
40126: POP
40127: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40128: LD_VAR 0 18
40132: PPUSH
40133: LD_INT 2
40135: PUSH
40136: LD_INT 30
40138: PUSH
40139: LD_INT 32
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 30
40148: PUSH
40149: LD_INT 33
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: PPUSH
40161: CALL_OW 72
40165: IFFALSE 40253
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40167: LD_ADDR_VAR 0 8
40171: PUSH
40172: LD_VAR 0 18
40176: PPUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 30
40182: PUSH
40183: LD_INT 32
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 30
40192: PUSH
40193: LD_INT 33
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: PPUSH
40205: CALL_OW 72
40209: PUSH
40210: FOR_IN
40211: IFFALSE 40251
// begin if not GetBWeapon ( i ) then
40213: LD_VAR 0 8
40217: PPUSH
40218: CALL_OW 269
40222: NOT
40223: IFFALSE 40249
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40225: LD_VAR 0 8
40229: PPUSH
40230: LD_VAR 0 8
40234: PPUSH
40235: LD_VAR 0 2
40239: PPUSH
40240: CALL 41505 0 2
40244: PPUSH
40245: CALL_OW 431
// end ;
40249: GO 40210
40251: POP
40252: POP
// end ; for i = 1 to personel do
40253: LD_ADDR_VAR 0 8
40257: PUSH
40258: DOUBLE
40259: LD_INT 1
40261: DEC
40262: ST_TO_ADDR
40263: LD_VAR 0 6
40267: PUSH
40268: FOR_TO
40269: IFFALSE 41339
// begin if i > 4 then
40271: LD_VAR 0 8
40275: PUSH
40276: LD_INT 4
40278: GREATER
40279: IFFALSE 40283
// break ;
40281: GO 41339
// case i of 1 :
40283: LD_VAR 0 8
40287: PUSH
40288: LD_INT 1
40290: DOUBLE
40291: EQUAL
40292: IFTRUE 40296
40294: GO 40376
40296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40297: LD_ADDR_VAR 0 12
40301: PUSH
40302: LD_VAR 0 18
40306: PPUSH
40307: LD_INT 22
40309: PUSH
40310: LD_VAR 0 16
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 58
40321: PUSH
40322: EMPTY
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 30
40330: PUSH
40331: LD_INT 32
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 30
40340: PUSH
40341: LD_INT 4
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 30
40350: PUSH
40351: LD_INT 5
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: PPUSH
40369: CALL_OW 72
40373: ST_TO_ADDR
40374: GO 40598
40376: LD_INT 2
40378: DOUBLE
40379: EQUAL
40380: IFTRUE 40384
40382: GO 40446
40384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40385: LD_ADDR_VAR 0 12
40389: PUSH
40390: LD_VAR 0 18
40394: PPUSH
40395: LD_INT 22
40397: PUSH
40398: LD_VAR 0 16
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 30
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 30
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PPUSH
40439: CALL_OW 72
40443: ST_TO_ADDR
40444: GO 40598
40446: LD_INT 3
40448: DOUBLE
40449: EQUAL
40450: IFTRUE 40454
40452: GO 40516
40454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40455: LD_ADDR_VAR 0 12
40459: PUSH
40460: LD_VAR 0 18
40464: PPUSH
40465: LD_INT 22
40467: PUSH
40468: LD_VAR 0 16
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 30
40492: PUSH
40493: LD_INT 3
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PPUSH
40509: CALL_OW 72
40513: ST_TO_ADDR
40514: GO 40598
40516: LD_INT 4
40518: DOUBLE
40519: EQUAL
40520: IFTRUE 40524
40522: GO 40597
40524: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40525: LD_ADDR_VAR 0 12
40529: PUSH
40530: LD_VAR 0 18
40534: PPUSH
40535: LD_INT 22
40537: PUSH
40538: LD_VAR 0 16
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: LD_INT 30
40552: PUSH
40553: LD_INT 6
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 30
40562: PUSH
40563: LD_INT 7
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 30
40572: PUSH
40573: LD_INT 8
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PPUSH
40590: CALL_OW 72
40594: ST_TO_ADDR
40595: GO 40598
40597: POP
// if i = 1 then
40598: LD_VAR 0 8
40602: PUSH
40603: LD_INT 1
40605: EQUAL
40606: IFFALSE 40717
// begin tmp := [ ] ;
40608: LD_ADDR_VAR 0 19
40612: PUSH
40613: EMPTY
40614: ST_TO_ADDR
// for j in f do
40615: LD_ADDR_VAR 0 9
40619: PUSH
40620: LD_VAR 0 12
40624: PUSH
40625: FOR_IN
40626: IFFALSE 40699
// if GetBType ( j ) = b_bunker then
40628: LD_VAR 0 9
40632: PPUSH
40633: CALL_OW 266
40637: PUSH
40638: LD_INT 32
40640: EQUAL
40641: IFFALSE 40668
// tmp := Insert ( tmp , 1 , j ) else
40643: LD_ADDR_VAR 0 19
40647: PUSH
40648: LD_VAR 0 19
40652: PPUSH
40653: LD_INT 1
40655: PPUSH
40656: LD_VAR 0 9
40660: PPUSH
40661: CALL_OW 2
40665: ST_TO_ADDR
40666: GO 40697
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40668: LD_ADDR_VAR 0 19
40672: PUSH
40673: LD_VAR 0 19
40677: PPUSH
40678: LD_VAR 0 19
40682: PUSH
40683: LD_INT 1
40685: PLUS
40686: PPUSH
40687: LD_VAR 0 9
40691: PPUSH
40692: CALL_OW 2
40696: ST_TO_ADDR
40697: GO 40625
40699: POP
40700: POP
// if tmp then
40701: LD_VAR 0 19
40705: IFFALSE 40717
// f := tmp ;
40707: LD_ADDR_VAR 0 12
40711: PUSH
40712: LD_VAR 0 19
40716: ST_TO_ADDR
// end ; x := personel [ i ] ;
40717: LD_ADDR_VAR 0 13
40721: PUSH
40722: LD_VAR 0 6
40726: PUSH
40727: LD_VAR 0 8
40731: ARRAY
40732: ST_TO_ADDR
// if x = - 1 then
40733: LD_VAR 0 13
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: EQUAL
40742: IFFALSE 40953
// begin for j in f do
40744: LD_ADDR_VAR 0 9
40748: PUSH
40749: LD_VAR 0 12
40753: PUSH
40754: FOR_IN
40755: IFFALSE 40949
// repeat InitHc ;
40757: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40761: LD_VAR 0 9
40765: PPUSH
40766: CALL_OW 266
40770: PUSH
40771: LD_INT 5
40773: EQUAL
40774: IFFALSE 40844
// begin if UnitsInside ( j ) < 3 then
40776: LD_VAR 0 9
40780: PPUSH
40781: CALL_OW 313
40785: PUSH
40786: LD_INT 3
40788: LESS
40789: IFFALSE 40825
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40791: LD_INT 0
40793: PPUSH
40794: LD_INT 5
40796: PUSH
40797: LD_INT 8
40799: PUSH
40800: LD_INT 9
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: PUSH
40808: LD_VAR 0 17
40812: ARRAY
40813: PPUSH
40814: LD_VAR 0 4
40818: PPUSH
40819: CALL_OW 380
40823: GO 40842
// PrepareHuman ( false , i , skill ) ;
40825: LD_INT 0
40827: PPUSH
40828: LD_VAR 0 8
40832: PPUSH
40833: LD_VAR 0 4
40837: PPUSH
40838: CALL_OW 380
// end else
40842: GO 40861
// PrepareHuman ( false , i , skill ) ;
40844: LD_INT 0
40846: PPUSH
40847: LD_VAR 0 8
40851: PPUSH
40852: LD_VAR 0 4
40856: PPUSH
40857: CALL_OW 380
// un := CreateHuman ;
40861: LD_ADDR_VAR 0 14
40865: PUSH
40866: CALL_OW 44
40870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40871: LD_ADDR_VAR 0 7
40875: PUSH
40876: LD_VAR 0 7
40880: PPUSH
40881: LD_INT 1
40883: PPUSH
40884: LD_VAR 0 14
40888: PPUSH
40889: CALL_OW 2
40893: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40894: LD_VAR 0 14
40898: PPUSH
40899: LD_VAR 0 9
40903: PPUSH
40904: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40908: LD_VAR 0 9
40912: PPUSH
40913: CALL_OW 313
40917: PUSH
40918: LD_INT 6
40920: EQUAL
40921: IFTRUE 40945
40923: PUSH
40924: LD_VAR 0 9
40928: PPUSH
40929: CALL_OW 266
40933: PUSH
40934: LD_INT 32
40936: PUSH
40937: LD_INT 31
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: IN
40944: OR
40945: IFFALSE 40757
40947: GO 40754
40949: POP
40950: POP
// end else
40951: GO 41337
// for j = 1 to x do
40953: LD_ADDR_VAR 0 9
40957: PUSH
40958: DOUBLE
40959: LD_INT 1
40961: DEC
40962: ST_TO_ADDR
40963: LD_VAR 0 13
40967: PUSH
40968: FOR_TO
40969: IFFALSE 41335
// begin InitHc ;
40971: CALL_OW 19
// if not f then
40975: LD_VAR 0 12
40979: NOT
40980: IFFALSE 41069
// begin PrepareHuman ( false , i , skill ) ;
40982: LD_INT 0
40984: PPUSH
40985: LD_VAR 0 8
40989: PPUSH
40990: LD_VAR 0 4
40994: PPUSH
40995: CALL_OW 380
// un := CreateHuman ;
40999: LD_ADDR_VAR 0 14
41003: PUSH
41004: CALL_OW 44
41008: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41009: LD_ADDR_VAR 0 7
41013: PUSH
41014: LD_VAR 0 7
41018: PPUSH
41019: LD_INT 1
41021: PPUSH
41022: LD_VAR 0 14
41026: PPUSH
41027: CALL_OW 2
41031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41032: LD_VAR 0 14
41036: PPUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 250
41046: PPUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: CALL_OW 251
41056: PPUSH
41057: LD_INT 10
41059: PPUSH
41060: LD_INT 0
41062: PPUSH
41063: CALL_OW 50
// continue ;
41067: GO 40968
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41069: LD_VAR 0 12
41073: PUSH
41074: LD_INT 1
41076: ARRAY
41077: PPUSH
41078: CALL_OW 313
41082: IFFALSE 41110
41084: PUSH
41085: LD_VAR 0 12
41089: PUSH
41090: LD_INT 1
41092: ARRAY
41093: PPUSH
41094: CALL_OW 266
41098: PUSH
41099: LD_INT 32
41101: PUSH
41102: LD_INT 31
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: IN
41109: AND
41110: IFTRUE 41131
41112: PUSH
41113: LD_VAR 0 12
41117: PUSH
41118: LD_INT 1
41120: ARRAY
41121: PPUSH
41122: CALL_OW 313
41126: PUSH
41127: LD_INT 6
41129: EQUAL
41130: OR
41131: IFFALSE 41151
// f := Delete ( f , 1 ) ;
41133: LD_ADDR_VAR 0 12
41137: PUSH
41138: LD_VAR 0 12
41142: PPUSH
41143: LD_INT 1
41145: PPUSH
41146: CALL_OW 3
41150: ST_TO_ADDR
// if not f then
41151: LD_VAR 0 12
41155: NOT
41156: IFFALSE 41174
// begin x := x + 2 ;
41158: LD_ADDR_VAR 0 13
41162: PUSH
41163: LD_VAR 0 13
41167: PUSH
41168: LD_INT 2
41170: PLUS
41171: ST_TO_ADDR
// continue ;
41172: GO 40968
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41174: LD_VAR 0 12
41178: PUSH
41179: LD_INT 1
41181: ARRAY
41182: PPUSH
41183: CALL_OW 266
41187: PUSH
41188: LD_INT 5
41190: EQUAL
41191: IFFALSE 41265
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41193: LD_VAR 0 12
41197: PUSH
41198: LD_INT 1
41200: ARRAY
41201: PPUSH
41202: CALL_OW 313
41206: PUSH
41207: LD_INT 3
41209: LESS
41210: IFFALSE 41246
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41212: LD_INT 0
41214: PPUSH
41215: LD_INT 5
41217: PUSH
41218: LD_INT 8
41220: PUSH
41221: LD_INT 9
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: PUSH
41229: LD_VAR 0 17
41233: ARRAY
41234: PPUSH
41235: LD_VAR 0 4
41239: PPUSH
41240: CALL_OW 380
41244: GO 41263
// PrepareHuman ( false , i , skill ) ;
41246: LD_INT 0
41248: PPUSH
41249: LD_VAR 0 8
41253: PPUSH
41254: LD_VAR 0 4
41258: PPUSH
41259: CALL_OW 380
// end else
41263: GO 41282
// PrepareHuman ( false , i , skill ) ;
41265: LD_INT 0
41267: PPUSH
41268: LD_VAR 0 8
41272: PPUSH
41273: LD_VAR 0 4
41277: PPUSH
41278: CALL_OW 380
// un := CreateHuman ;
41282: LD_ADDR_VAR 0 14
41286: PUSH
41287: CALL_OW 44
41291: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41292: LD_ADDR_VAR 0 7
41296: PUSH
41297: LD_VAR 0 7
41301: PPUSH
41302: LD_INT 1
41304: PPUSH
41305: LD_VAR 0 14
41309: PPUSH
41310: CALL_OW 2
41314: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41315: LD_VAR 0 14
41319: PPUSH
41320: LD_VAR 0 12
41324: PUSH
41325: LD_INT 1
41327: ARRAY
41328: PPUSH
41329: CALL_OW 52
// end ;
41333: GO 40968
41335: POP
41336: POP
// end ;
41337: GO 40268
41339: POP
41340: POP
// result := result ^ buildings ;
41341: LD_ADDR_VAR 0 7
41345: PUSH
41346: LD_VAR 0 7
41350: PUSH
41351: LD_VAR 0 18
41355: ADD
41356: ST_TO_ADDR
// end else
41357: GO 41500
// begin for i = 1 to personel do
41359: LD_ADDR_VAR 0 8
41363: PUSH
41364: DOUBLE
41365: LD_INT 1
41367: DEC
41368: ST_TO_ADDR
41369: LD_VAR 0 6
41373: PUSH
41374: FOR_TO
41375: IFFALSE 41498
// begin if i > 4 then
41377: LD_VAR 0 8
41381: PUSH
41382: LD_INT 4
41384: GREATER
41385: IFFALSE 41389
// break ;
41387: GO 41498
// x := personel [ i ] ;
41389: LD_ADDR_VAR 0 13
41393: PUSH
41394: LD_VAR 0 6
41398: PUSH
41399: LD_VAR 0 8
41403: ARRAY
41404: ST_TO_ADDR
// if x = - 1 then
41405: LD_VAR 0 13
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: EQUAL
41414: IFFALSE 41418
// continue ;
41416: GO 41374
// PrepareHuman ( false , i , skill ) ;
41418: LD_INT 0
41420: PPUSH
41421: LD_VAR 0 8
41425: PPUSH
41426: LD_VAR 0 4
41430: PPUSH
41431: CALL_OW 380
// un := CreateHuman ;
41435: LD_ADDR_VAR 0 14
41439: PUSH
41440: CALL_OW 44
41444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41445: LD_VAR 0 14
41449: PPUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: CALL_OW 250
41459: PPUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 251
41469: PPUSH
41470: LD_INT 10
41472: PPUSH
41473: LD_INT 0
41475: PPUSH
41476: CALL_OW 50
// result := result ^ un ;
41480: LD_ADDR_VAR 0 7
41484: PUSH
41485: LD_VAR 0 7
41489: PUSH
41490: LD_VAR 0 14
41494: ADD
41495: ST_TO_ADDR
// end ;
41496: GO 41374
41498: POP
41499: POP
// end ; end ;
41500: LD_VAR 0 7
41504: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41505: LD_INT 0
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
// result := false ;
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_INT 0
41530: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41531: LD_VAR 0 1
41535: NOT
41536: IFTRUE 41561
41538: PUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: CALL_OW 266
41548: PUSH
41549: LD_INT 32
41551: PUSH
41552: LD_INT 33
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: IN
41559: NOT
41560: OR
41561: IFFALSE 41565
// exit ;
41563: GO 42700
// nat := GetNation ( tower ) ;
41565: LD_ADDR_VAR 0 12
41569: PUSH
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL_OW 248
41579: ST_TO_ADDR
// side := GetSide ( tower ) ;
41580: LD_ADDR_VAR 0 16
41584: PUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: CALL_OW 255
41594: ST_TO_ADDR
// x := GetX ( tower ) ;
41595: LD_ADDR_VAR 0 10
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: CALL_OW 250
41609: ST_TO_ADDR
// y := GetY ( tower ) ;
41610: LD_ADDR_VAR 0 11
41614: PUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 251
41624: ST_TO_ADDR
// if not x or not y then
41625: LD_VAR 0 10
41629: NOT
41630: IFTRUE 41639
41632: PUSH
41633: LD_VAR 0 11
41637: NOT
41638: OR
41639: IFFALSE 41643
// exit ;
41641: GO 42700
// weapon := 0 ;
41643: LD_ADDR_VAR 0 18
41647: PUSH
41648: LD_INT 0
41650: ST_TO_ADDR
// fac_list := [ ] ;
41651: LD_ADDR_VAR 0 17
41655: PUSH
41656: EMPTY
41657: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41658: LD_ADDR_VAR 0 6
41662: PUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 274
41672: PPUSH
41673: LD_VAR 0 2
41677: PPUSH
41678: LD_INT 0
41680: PPUSH
41681: CALL 39235 0 3
41685: PPUSH
41686: LD_INT 30
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PPUSH
41696: CALL_OW 72
41700: ST_TO_ADDR
// if not factories then
41701: LD_VAR 0 6
41705: NOT
41706: IFFALSE 41710
// exit ;
41708: GO 42700
// for i in factories do
41710: LD_ADDR_VAR 0 8
41714: PUSH
41715: LD_VAR 0 6
41719: PUSH
41720: FOR_IN
41721: IFFALSE 41746
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41723: LD_ADDR_VAR 0 17
41727: PUSH
41728: LD_VAR 0 17
41732: PUSH
41733: LD_VAR 0 8
41737: PPUSH
41738: CALL_OW 478
41742: UNION
41743: ST_TO_ADDR
41744: GO 41720
41746: POP
41747: POP
// if not fac_list then
41748: LD_VAR 0 17
41752: NOT
41753: IFFALSE 41757
// exit ;
41755: GO 42700
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41757: LD_ADDR_VAR 0 5
41761: PUSH
41762: LD_INT 4
41764: PUSH
41765: LD_INT 5
41767: PUSH
41768: LD_INT 9
41770: PUSH
41771: LD_INT 10
41773: PUSH
41774: LD_INT 6
41776: PUSH
41777: LD_INT 7
41779: PUSH
41780: LD_INT 11
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 27
41794: PUSH
41795: LD_INT 28
41797: PUSH
41798: LD_INT 26
41800: PUSH
41801: LD_INT 30
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 43
41812: PUSH
41813: LD_INT 44
41815: PUSH
41816: LD_INT 46
41818: PUSH
41819: LD_INT 45
41821: PUSH
41822: LD_INT 47
41824: PUSH
41825: LD_INT 49
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: PUSH
41841: LD_VAR 0 12
41845: ARRAY
41846: ST_TO_ADDR
// list := list isect fac_list ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_VAR 0 5
41856: PUSH
41857: LD_VAR 0 17
41861: ISECT
41862: ST_TO_ADDR
// if not list then
41863: LD_VAR 0 5
41867: NOT
41868: IFFALSE 41872
// exit ;
41870: GO 42700
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41872: LD_VAR 0 12
41876: PUSH
41877: LD_INT 3
41879: EQUAL
41880: IFFALSE 41892
41882: PUSH
41883: LD_INT 49
41885: PUSH
41886: LD_VAR 0 5
41890: IN
41891: AND
41892: IFFALSE 41912
41894: PUSH
41895: LD_INT 31
41897: PPUSH
41898: LD_VAR 0 16
41902: PPUSH
41903: CALL_OW 321
41907: PUSH
41908: LD_INT 2
41910: EQUAL
41911: AND
41912: IFFALSE 41972
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41914: LD_INT 22
41916: PUSH
41917: LD_VAR 0 16
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 35
41928: PUSH
41929: LD_INT 49
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 91
41938: PUSH
41939: LD_VAR 0 1
41943: PUSH
41944: LD_INT 10
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: PPUSH
41957: CALL_OW 69
41961: NOT
41962: IFFALSE 41972
// weapon := ru_time_lapser ;
41964: LD_ADDR_VAR 0 18
41968: PUSH
41969: LD_INT 49
41971: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41972: LD_VAR 0 12
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 2
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: IN
41987: IFFALSE 42011
41989: PUSH
41990: LD_INT 11
41992: PUSH
41993: LD_VAR 0 5
41997: IN
41998: IFTRUE 42010
42000: PUSH
42001: LD_INT 30
42003: PUSH
42004: LD_VAR 0 5
42008: IN
42009: OR
42010: AND
42011: IFFALSE 42031
42013: PUSH
42014: LD_INT 6
42016: PPUSH
42017: LD_VAR 0 16
42021: PPUSH
42022: CALL_OW 321
42026: PUSH
42027: LD_INT 2
42029: EQUAL
42030: AND
42031: IFFALSE 42198
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42033: LD_INT 22
42035: PUSH
42036: LD_VAR 0 16
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 35
42050: PUSH
42051: LD_INT 11
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 35
42060: PUSH
42061: LD_INT 30
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 91
42075: PUSH
42076: LD_VAR 0 1
42080: PUSH
42081: LD_INT 18
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: PPUSH
42094: CALL_OW 69
42098: NOT
42099: IFFALSE 42175
42101: PUSH
42102: LD_INT 22
42104: PUSH
42105: LD_VAR 0 16
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 30
42119: PUSH
42120: LD_INT 32
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 30
42129: PUSH
42130: LD_INT 33
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 91
42144: PUSH
42145: LD_VAR 0 1
42149: PUSH
42150: LD_INT 12
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: PUSH
42163: EMPTY
42164: LIST
42165: PPUSH
42166: CALL_OW 69
42170: PUSH
42171: LD_INT 2
42173: GREATER
42174: AND
42175: IFFALSE 42198
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42177: LD_ADDR_VAR 0 18
42181: PUSH
42182: LD_INT 11
42184: PUSH
42185: LD_INT 30
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_VAR 0 12
42196: ARRAY
42197: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42198: LD_VAR 0 18
42202: NOT
42203: IFFALSE 42223
42205: PUSH
42206: LD_INT 40
42208: PPUSH
42209: LD_VAR 0 16
42213: PPUSH
42214: CALL_OW 321
42218: PUSH
42219: LD_INT 2
42221: EQUAL
42222: AND
42223: IFFALSE 42259
42225: PUSH
42226: LD_INT 7
42228: PUSH
42229: LD_VAR 0 5
42233: IN
42234: IFTRUE 42246
42236: PUSH
42237: LD_INT 28
42239: PUSH
42240: LD_VAR 0 5
42244: IN
42245: OR
42246: IFTRUE 42258
42248: PUSH
42249: LD_INT 45
42251: PUSH
42252: LD_VAR 0 5
42256: IN
42257: OR
42258: AND
42259: IFFALSE 42513
// begin hex := GetHexInfo ( x , y ) ;
42261: LD_ADDR_VAR 0 4
42265: PUSH
42266: LD_VAR 0 10
42270: PPUSH
42271: LD_VAR 0 11
42275: PPUSH
42276: CALL_OW 546
42280: ST_TO_ADDR
// if hex [ 1 ] then
42281: LD_VAR 0 4
42285: PUSH
42286: LD_INT 1
42288: ARRAY
42289: IFFALSE 42293
// exit ;
42291: GO 42700
// height := hex [ 2 ] ;
42293: LD_ADDR_VAR 0 15
42297: PUSH
42298: LD_VAR 0 4
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42307: LD_ADDR_VAR 0 14
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 5
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// for i in tmp do
42330: LD_ADDR_VAR 0 8
42334: PUSH
42335: LD_VAR 0 14
42339: PUSH
42340: FOR_IN
42341: IFFALSE 42511
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42343: LD_ADDR_VAR 0 9
42347: PUSH
42348: LD_VAR 0 10
42352: PPUSH
42353: LD_VAR 0 8
42357: PPUSH
42358: LD_INT 5
42360: PPUSH
42361: CALL_OW 272
42365: PUSH
42366: LD_VAR 0 11
42370: PPUSH
42371: LD_VAR 0 8
42375: PPUSH
42376: LD_INT 5
42378: PPUSH
42379: CALL_OW 273
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42388: LD_VAR 0 9
42392: PUSH
42393: LD_INT 1
42395: ARRAY
42396: PPUSH
42397: LD_VAR 0 9
42401: PUSH
42402: LD_INT 2
42404: ARRAY
42405: PPUSH
42406: CALL_OW 488
42410: IFFALSE 42509
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: LD_VAR 0 9
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: PPUSH
42426: LD_VAR 0 9
42430: PUSH
42431: LD_INT 2
42433: ARRAY
42434: PPUSH
42435: CALL_OW 546
42439: ST_TO_ADDR
// if hex [ 1 ] then
42440: LD_VAR 0 4
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: IFFALSE 42452
// continue ;
42450: GO 42340
// h := hex [ 2 ] ;
42452: LD_ADDR_VAR 0 13
42456: PUSH
42457: LD_VAR 0 4
42461: PUSH
42462: LD_INT 2
42464: ARRAY
42465: ST_TO_ADDR
// if h + 7 < height then
42466: LD_VAR 0 13
42470: PUSH
42471: LD_INT 7
42473: PLUS
42474: PUSH
42475: LD_VAR 0 15
42479: LESS
42480: IFFALSE 42509
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42482: LD_ADDR_VAR 0 18
42486: PUSH
42487: LD_INT 7
42489: PUSH
42490: LD_INT 28
42492: PUSH
42493: LD_INT 45
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: LIST
42500: PUSH
42501: LD_VAR 0 12
42505: ARRAY
42506: ST_TO_ADDR
// break ;
42507: GO 42511
// end ; end ; end ;
42509: GO 42340
42511: POP
42512: POP
// end ; if not weapon then
42513: LD_VAR 0 18
42517: NOT
42518: IFFALSE 42578
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_VAR 0 5
42529: PUSH
42530: LD_INT 11
42532: PUSH
42533: LD_INT 30
42535: PUSH
42536: LD_INT 49
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: DIFF
42544: ST_TO_ADDR
// if not list then
42545: LD_VAR 0 5
42549: NOT
42550: IFFALSE 42554
// exit ;
42552: GO 42700
// weapon := list [ rand ( 1 , list ) ] ;
42554: LD_ADDR_VAR 0 18
42558: PUSH
42559: LD_VAR 0 5
42563: PUSH
42564: LD_INT 1
42566: PPUSH
42567: LD_VAR 0 5
42571: PPUSH
42572: CALL_OW 12
42576: ARRAY
42577: ST_TO_ADDR
// end ; if weapon then
42578: LD_VAR 0 18
42582: IFFALSE 42700
// begin tmp := CostOfWeapon ( weapon ) ;
42584: LD_ADDR_VAR 0 14
42588: PUSH
42589: LD_VAR 0 18
42593: PPUSH
42594: CALL_OW 451
42598: ST_TO_ADDR
// j := GetBase ( tower ) ;
42599: LD_ADDR_VAR 0 9
42603: PUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 274
42613: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42614: LD_VAR 0 9
42618: PPUSH
42619: LD_INT 1
42621: PPUSH
42622: CALL_OW 275
42626: PUSH
42627: LD_VAR 0 14
42631: PUSH
42632: LD_INT 1
42634: ARRAY
42635: GREATEREQUAL
42636: IFFALSE 42662
42638: PUSH
42639: LD_VAR 0 9
42643: PPUSH
42644: LD_INT 2
42646: PPUSH
42647: CALL_OW 275
42651: PUSH
42652: LD_VAR 0 14
42656: PUSH
42657: LD_INT 2
42659: ARRAY
42660: GREATEREQUAL
42661: AND
42662: IFFALSE 42688
42664: PUSH
42665: LD_VAR 0 9
42669: PPUSH
42670: LD_INT 3
42672: PPUSH
42673: CALL_OW 275
42677: PUSH
42678: LD_VAR 0 14
42682: PUSH
42683: LD_INT 3
42685: ARRAY
42686: GREATEREQUAL
42687: AND
42688: IFFALSE 42700
// result := weapon ;
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_VAR 0 18
42699: ST_TO_ADDR
// end ; end ;
42700: LD_VAR 0 3
42704: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42705: LD_INT 0
42707: PPUSH
42708: PPUSH
// result := true ;
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: LD_INT 1
42716: ST_TO_ADDR
// if array1 = array2 then
42717: LD_VAR 0 1
42721: PUSH
42722: LD_VAR 0 2
42726: EQUAL
42727: IFFALSE 42787
// begin for i = 1 to array1 do
42729: LD_ADDR_VAR 0 4
42733: PUSH
42734: DOUBLE
42735: LD_INT 1
42737: DEC
42738: ST_TO_ADDR
42739: LD_VAR 0 1
42743: PUSH
42744: FOR_TO
42745: IFFALSE 42783
// if array1 [ i ] <> array2 [ i ] then
42747: LD_VAR 0 1
42751: PUSH
42752: LD_VAR 0 4
42756: ARRAY
42757: PUSH
42758: LD_VAR 0 2
42762: PUSH
42763: LD_VAR 0 4
42767: ARRAY
42768: NONEQUAL
42769: IFFALSE 42781
// begin result := false ;
42771: LD_ADDR_VAR 0 3
42775: PUSH
42776: LD_INT 0
42778: ST_TO_ADDR
// break ;
42779: GO 42783
// end ;
42781: GO 42744
42783: POP
42784: POP
// end else
42785: GO 42795
// result := false ;
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_INT 0
42794: ST_TO_ADDR
// end ;
42795: LD_VAR 0 3
42799: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42800: LD_INT 0
42802: PPUSH
42803: PPUSH
// if not array1 or not array2 then
42804: LD_VAR 0 1
42808: NOT
42809: IFTRUE 42818
42811: PUSH
42812: LD_VAR 0 2
42816: NOT
42817: OR
42818: IFFALSE 42822
// exit ;
42820: GO 42886
// result := true ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 1
42829: ST_TO_ADDR
// for i = 1 to array1 do
42830: LD_ADDR_VAR 0 4
42834: PUSH
42835: DOUBLE
42836: LD_INT 1
42838: DEC
42839: ST_TO_ADDR
42840: LD_VAR 0 1
42844: PUSH
42845: FOR_TO
42846: IFFALSE 42884
// if array1 [ i ] <> array2 [ i ] then
42848: LD_VAR 0 1
42852: PUSH
42853: LD_VAR 0 4
42857: ARRAY
42858: PUSH
42859: LD_VAR 0 2
42863: PUSH
42864: LD_VAR 0 4
42868: ARRAY
42869: NONEQUAL
42870: IFFALSE 42882
// begin result := false ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_INT 0
42879: ST_TO_ADDR
// break ;
42880: GO 42884
// end ;
42882: GO 42845
42884: POP
42885: POP
// end ;
42886: LD_VAR 0 3
42890: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42891: LD_INT 0
42893: PPUSH
42894: PPUSH
42895: PPUSH
// pom := GetBase ( fac ) ;
42896: LD_ADDR_VAR 0 5
42900: PUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 274
42910: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42911: LD_ADDR_VAR 0 4
42915: PUSH
42916: LD_VAR 0 2
42920: PUSH
42921: LD_INT 1
42923: ARRAY
42924: PPUSH
42925: LD_VAR 0 2
42929: PUSH
42930: LD_INT 2
42932: ARRAY
42933: PPUSH
42934: LD_VAR 0 2
42938: PUSH
42939: LD_INT 3
42941: ARRAY
42942: PPUSH
42943: LD_VAR 0 2
42947: PUSH
42948: LD_INT 4
42950: ARRAY
42951: PPUSH
42952: CALL_OW 449
42956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_VAR 0 5
42966: PPUSH
42967: LD_INT 1
42969: PPUSH
42970: CALL_OW 275
42974: PUSH
42975: LD_VAR 0 4
42979: PUSH
42980: LD_INT 1
42982: ARRAY
42983: GREATEREQUAL
42984: IFFALSE 43010
42986: PUSH
42987: LD_VAR 0 5
42991: PPUSH
42992: LD_INT 2
42994: PPUSH
42995: CALL_OW 275
42999: PUSH
43000: LD_VAR 0 4
43004: PUSH
43005: LD_INT 2
43007: ARRAY
43008: GREATEREQUAL
43009: AND
43010: IFFALSE 43036
43012: PUSH
43013: LD_VAR 0 5
43017: PPUSH
43018: LD_INT 3
43020: PPUSH
43021: CALL_OW 275
43025: PUSH
43026: LD_VAR 0 4
43030: PUSH
43031: LD_INT 3
43033: ARRAY
43034: GREATEREQUAL
43035: AND
43036: ST_TO_ADDR
// end ;
43037: LD_VAR 0 3
43041: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43042: LD_INT 0
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
// pom := GetBase ( building ) ;
43048: LD_ADDR_VAR 0 3
43052: PUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: CALL_OW 274
43062: ST_TO_ADDR
// if not pom then
43063: LD_VAR 0 3
43067: NOT
43068: IFFALSE 43072
// exit ;
43070: GO 43246
// btype := GetBType ( building ) ;
43072: LD_ADDR_VAR 0 5
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 266
43086: ST_TO_ADDR
// if btype = b_armoury then
43087: LD_VAR 0 5
43091: PUSH
43092: LD_INT 4
43094: EQUAL
43095: IFFALSE 43105
// btype := b_barracks ;
43097: LD_ADDR_VAR 0 5
43101: PUSH
43102: LD_INT 5
43104: ST_TO_ADDR
// if btype = b_depot then
43105: LD_VAR 0 5
43109: PUSH
43110: LD_INT 0
43112: EQUAL
43113: IFFALSE 43123
// btype := b_warehouse ;
43115: LD_ADDR_VAR 0 5
43119: PUSH
43120: LD_INT 1
43122: ST_TO_ADDR
// if btype = b_workshop then
43123: LD_VAR 0 5
43127: PUSH
43128: LD_INT 2
43130: EQUAL
43131: IFFALSE 43141
// btype := b_factory ;
43133: LD_ADDR_VAR 0 5
43137: PUSH
43138: LD_INT 3
43140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43141: LD_ADDR_VAR 0 4
43145: PUSH
43146: LD_VAR 0 5
43150: PPUSH
43151: LD_VAR 0 1
43155: PPUSH
43156: CALL_OW 248
43160: PPUSH
43161: CALL_OW 450
43165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43166: LD_ADDR_VAR 0 2
43170: PUSH
43171: LD_VAR 0 3
43175: PPUSH
43176: LD_INT 1
43178: PPUSH
43179: CALL_OW 275
43183: PUSH
43184: LD_VAR 0 4
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: GREATEREQUAL
43193: IFFALSE 43219
43195: PUSH
43196: LD_VAR 0 3
43200: PPUSH
43201: LD_INT 2
43203: PPUSH
43204: CALL_OW 275
43208: PUSH
43209: LD_VAR 0 4
43213: PUSH
43214: LD_INT 2
43216: ARRAY
43217: GREATEREQUAL
43218: AND
43219: IFFALSE 43245
43221: PUSH
43222: LD_VAR 0 3
43226: PPUSH
43227: LD_INT 3
43229: PPUSH
43230: CALL_OW 275
43234: PUSH
43235: LD_VAR 0 4
43239: PUSH
43240: LD_INT 3
43242: ARRAY
43243: GREATEREQUAL
43244: AND
43245: ST_TO_ADDR
// end ;
43246: LD_VAR 0 2
43250: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43251: LD_INT 0
43253: PPUSH
43254: PPUSH
43255: PPUSH
// pom := GetBase ( building ) ;
43256: LD_ADDR_VAR 0 4
43260: PUSH
43261: LD_VAR 0 1
43265: PPUSH
43266: CALL_OW 274
43270: ST_TO_ADDR
// if not pom then
43271: LD_VAR 0 4
43275: NOT
43276: IFFALSE 43280
// exit ;
43278: GO 43385
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43280: LD_ADDR_VAR 0 5
43284: PUSH
43285: LD_VAR 0 2
43289: PPUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: CALL_OW 248
43299: PPUSH
43300: CALL_OW 450
43304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_VAR 0 4
43314: PPUSH
43315: LD_INT 1
43317: PPUSH
43318: CALL_OW 275
43322: PUSH
43323: LD_VAR 0 5
43327: PUSH
43328: LD_INT 1
43330: ARRAY
43331: GREATEREQUAL
43332: IFFALSE 43358
43334: PUSH
43335: LD_VAR 0 4
43339: PPUSH
43340: LD_INT 2
43342: PPUSH
43343: CALL_OW 275
43347: PUSH
43348: LD_VAR 0 5
43352: PUSH
43353: LD_INT 2
43355: ARRAY
43356: GREATEREQUAL
43357: AND
43358: IFFALSE 43384
43360: PUSH
43361: LD_VAR 0 4
43365: PPUSH
43366: LD_INT 3
43368: PPUSH
43369: CALL_OW 275
43373: PUSH
43374: LD_VAR 0 5
43378: PUSH
43379: LD_INT 3
43381: ARRAY
43382: GREATEREQUAL
43383: AND
43384: ST_TO_ADDR
// end ;
43385: LD_VAR 0 3
43389: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43390: LD_INT 0
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
43402: PPUSH
// result := false ;
43403: LD_ADDR_VAR 0 8
43407: PUSH
43408: LD_INT 0
43410: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43411: LD_VAR 0 5
43415: NOT
43416: IFTRUE 43425
43418: PUSH
43419: LD_VAR 0 1
43423: NOT
43424: OR
43425: IFTRUE 43434
43427: PUSH
43428: LD_VAR 0 2
43432: NOT
43433: OR
43434: IFTRUE 43443
43436: PUSH
43437: LD_VAR 0 3
43441: NOT
43442: OR
43443: IFFALSE 43447
// exit ;
43445: GO 44273
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43447: LD_ADDR_VAR 0 14
43451: PUSH
43452: LD_VAR 0 1
43456: PPUSH
43457: LD_VAR 0 2
43461: PPUSH
43462: LD_VAR 0 3
43466: PPUSH
43467: LD_VAR 0 4
43471: PPUSH
43472: LD_VAR 0 5
43476: PUSH
43477: LD_INT 1
43479: ARRAY
43480: PPUSH
43481: CALL_OW 248
43485: PPUSH
43486: LD_INT 0
43488: PPUSH
43489: CALL 45554 0 6
43493: ST_TO_ADDR
// if not hexes then
43494: LD_VAR 0 14
43498: NOT
43499: IFFALSE 43503
// exit ;
43501: GO 44273
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43503: LD_ADDR_VAR 0 17
43507: PUSH
43508: LD_VAR 0 5
43512: PPUSH
43513: LD_INT 22
43515: PUSH
43516: LD_VAR 0 13
43520: PPUSH
43521: CALL_OW 255
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 30
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 30
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PPUSH
43562: CALL_OW 72
43566: ST_TO_ADDR
// for i = 1 to hexes do
43567: LD_ADDR_VAR 0 9
43571: PUSH
43572: DOUBLE
43573: LD_INT 1
43575: DEC
43576: ST_TO_ADDR
43577: LD_VAR 0 14
43581: PUSH
43582: FOR_TO
43583: IFFALSE 44271
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43585: LD_ADDR_VAR 0 13
43589: PUSH
43590: LD_VAR 0 14
43594: PUSH
43595: LD_VAR 0 9
43599: ARRAY
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: PPUSH
43605: LD_VAR 0 14
43609: PUSH
43610: LD_VAR 0 9
43614: ARRAY
43615: PUSH
43616: LD_INT 2
43618: ARRAY
43619: PPUSH
43620: CALL_OW 428
43624: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43625: LD_VAR 0 14
43629: PUSH
43630: LD_VAR 0 9
43634: ARRAY
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: LD_VAR 0 14
43644: PUSH
43645: LD_VAR 0 9
43649: ARRAY
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: PPUSH
43655: CALL_OW 351
43659: IFTRUE 43698
43661: PUSH
43662: LD_VAR 0 14
43666: PUSH
43667: LD_VAR 0 9
43671: ARRAY
43672: PUSH
43673: LD_INT 1
43675: ARRAY
43676: PPUSH
43677: LD_VAR 0 14
43681: PUSH
43682: LD_VAR 0 9
43686: ARRAY
43687: PUSH
43688: LD_INT 2
43690: ARRAY
43691: PPUSH
43692: CALL_OW 488
43696: NOT
43697: OR
43698: IFTRUE 43715
43700: PUSH
43701: LD_VAR 0 13
43705: PPUSH
43706: CALL_OW 247
43710: PUSH
43711: LD_INT 3
43713: EQUAL
43714: OR
43715: IFFALSE 43721
// exit ;
43717: POP
43718: POP
43719: GO 44273
// if not tmp then
43721: LD_VAR 0 13
43725: NOT
43726: IFFALSE 43730
// continue ;
43728: GO 43582
// result := true ;
43730: LD_ADDR_VAR 0 8
43734: PUSH
43735: LD_INT 1
43737: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43738: LD_VAR 0 6
43742: IFFALSE 43759
43744: PUSH
43745: LD_VAR 0 13
43749: PPUSH
43750: CALL_OW 247
43754: PUSH
43755: LD_INT 2
43757: EQUAL
43758: AND
43759: IFFALSE 43776
43761: PUSH
43762: LD_VAR 0 13
43766: PPUSH
43767: CALL_OW 263
43771: PUSH
43772: LD_INT 1
43774: EQUAL
43775: AND
43776: IFFALSE 43940
// begin if IsDrivenBy ( tmp ) then
43778: LD_VAR 0 13
43782: PPUSH
43783: CALL_OW 311
43787: IFFALSE 43791
// continue ;
43789: GO 43582
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43791: LD_VAR 0 6
43795: PPUSH
43796: LD_INT 3
43798: PUSH
43799: LD_INT 60
43801: PUSH
43802: EMPTY
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 55
43814: PUSH
43815: EMPTY
43816: LIST
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PPUSH
43826: CALL_OW 72
43830: IFFALSE 43938
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43832: LD_ADDR_VAR 0 18
43836: PUSH
43837: LD_VAR 0 6
43841: PPUSH
43842: LD_INT 3
43844: PUSH
43845: LD_INT 60
43847: PUSH
43848: EMPTY
43849: LIST
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 55
43860: PUSH
43861: EMPTY
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PPUSH
43872: CALL_OW 72
43876: PUSH
43877: LD_INT 1
43879: ARRAY
43880: ST_TO_ADDR
// if IsInUnit ( driver ) then
43881: LD_VAR 0 18
43885: PPUSH
43886: CALL_OW 310
43890: IFFALSE 43901
// ComExit ( driver ) ;
43892: LD_VAR 0 18
43896: PPUSH
43897: CALL 69544 0 1
// AddComEnterUnit ( driver , tmp ) ;
43901: LD_VAR 0 18
43905: PPUSH
43906: LD_VAR 0 13
43910: PPUSH
43911: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43915: LD_VAR 0 18
43919: PPUSH
43920: LD_VAR 0 7
43924: PPUSH
43925: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43929: LD_VAR 0 18
43933: PPUSH
43934: CALL_OW 181
// end ; continue ;
43938: GO 43582
// end ; if not cleaners or not tmp in cleaners then
43940: LD_VAR 0 6
43944: NOT
43945: IFTRUE 43960
43947: PUSH
43948: LD_VAR 0 13
43952: PUSH
43953: LD_VAR 0 6
43957: IN
43958: NOT
43959: OR
43960: IFFALSE 44269
// begin if dep then
43962: LD_VAR 0 17
43966: IFFALSE 44102
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43968: LD_ADDR_VAR 0 16
43972: PUSH
43973: LD_VAR 0 17
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: PPUSH
43982: CALL_OW 250
43986: PPUSH
43987: LD_VAR 0 17
43991: PUSH
43992: LD_INT 1
43994: ARRAY
43995: PPUSH
43996: CALL_OW 254
44000: PPUSH
44001: LD_INT 5
44003: PPUSH
44004: CALL_OW 272
44008: PUSH
44009: LD_VAR 0 17
44013: PUSH
44014: LD_INT 1
44016: ARRAY
44017: PPUSH
44018: CALL_OW 251
44022: PPUSH
44023: LD_VAR 0 17
44027: PUSH
44028: LD_INT 1
44030: ARRAY
44031: PPUSH
44032: CALL_OW 254
44036: PPUSH
44037: LD_INT 5
44039: PPUSH
44040: CALL_OW 273
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44049: LD_VAR 0 16
44053: PUSH
44054: LD_INT 1
44056: ARRAY
44057: PPUSH
44058: LD_VAR 0 16
44062: PUSH
44063: LD_INT 2
44065: ARRAY
44066: PPUSH
44067: CALL_OW 488
44071: IFFALSE 44102
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44073: LD_VAR 0 13
44077: PPUSH
44078: LD_VAR 0 16
44082: PUSH
44083: LD_INT 1
44085: ARRAY
44086: PPUSH
44087: LD_VAR 0 16
44091: PUSH
44092: LD_INT 2
44094: ARRAY
44095: PPUSH
44096: CALL_OW 111
// continue ;
44100: GO 43582
// end ; end ; r := GetDir ( tmp ) ;
44102: LD_ADDR_VAR 0 15
44106: PUSH
44107: LD_VAR 0 13
44111: PPUSH
44112: CALL_OW 254
44116: ST_TO_ADDR
// if r = 5 then
44117: LD_VAR 0 15
44121: PUSH
44122: LD_INT 5
44124: EQUAL
44125: IFFALSE 44135
// r := 0 ;
44127: LD_ADDR_VAR 0 15
44131: PUSH
44132: LD_INT 0
44134: ST_TO_ADDR
// for j = r to 5 do
44135: LD_ADDR_VAR 0 10
44139: PUSH
44140: DOUBLE
44141: LD_VAR 0 15
44145: DEC
44146: ST_TO_ADDR
44147: LD_INT 5
44149: PUSH
44150: FOR_TO
44151: IFFALSE 44267
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44153: LD_ADDR_VAR 0 11
44157: PUSH
44158: LD_VAR 0 13
44162: PPUSH
44163: CALL_OW 250
44167: PPUSH
44168: LD_VAR 0 10
44172: PPUSH
44173: LD_INT 2
44175: PPUSH
44176: CALL_OW 272
44180: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44181: LD_ADDR_VAR 0 12
44185: PUSH
44186: LD_VAR 0 13
44190: PPUSH
44191: CALL_OW 251
44195: PPUSH
44196: LD_VAR 0 10
44200: PPUSH
44201: LD_INT 2
44203: PPUSH
44204: CALL_OW 273
44208: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44209: LD_VAR 0 11
44213: PPUSH
44214: LD_VAR 0 12
44218: PPUSH
44219: CALL_OW 488
44223: IFFALSE 44242
44225: PUSH
44226: LD_VAR 0 11
44230: PPUSH
44231: LD_VAR 0 12
44235: PPUSH
44236: CALL_OW 428
44240: NOT
44241: AND
44242: IFFALSE 44265
// begin ComMoveXY ( tmp , _x , _y ) ;
44244: LD_VAR 0 13
44248: PPUSH
44249: LD_VAR 0 11
44253: PPUSH
44254: LD_VAR 0 12
44258: PPUSH
44259: CALL_OW 111
// break ;
44263: GO 44267
// end ; end ;
44265: GO 44150
44267: POP
44268: POP
// end ; end ;
44269: GO 43582
44271: POP
44272: POP
// end ;
44273: LD_VAR 0 8
44277: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44278: LD_INT 0
44280: PPUSH
// result := true ;
44281: LD_ADDR_VAR 0 3
44285: PUSH
44286: LD_INT 1
44288: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44289: LD_VAR 0 2
44293: PUSH
44294: LD_INT 24
44296: DOUBLE
44297: EQUAL
44298: IFTRUE 44308
44300: LD_INT 33
44302: DOUBLE
44303: EQUAL
44304: IFTRUE 44308
44306: GO 44333
44308: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_INT 32
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 321
44326: PUSH
44327: LD_INT 2
44329: EQUAL
44330: ST_TO_ADDR
44331: GO 44649
44333: LD_INT 20
44335: DOUBLE
44336: EQUAL
44337: IFTRUE 44341
44339: GO 44366
44341: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44342: LD_ADDR_VAR 0 3
44346: PUSH
44347: LD_INT 6
44349: PPUSH
44350: LD_VAR 0 1
44354: PPUSH
44355: CALL_OW 321
44359: PUSH
44360: LD_INT 2
44362: EQUAL
44363: ST_TO_ADDR
44364: GO 44649
44366: LD_INT 22
44368: DOUBLE
44369: EQUAL
44370: IFTRUE 44380
44372: LD_INT 36
44374: DOUBLE
44375: EQUAL
44376: IFTRUE 44380
44378: GO 44405
44380: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44381: LD_ADDR_VAR 0 3
44385: PUSH
44386: LD_INT 15
44388: PPUSH
44389: LD_VAR 0 1
44393: PPUSH
44394: CALL_OW 321
44398: PUSH
44399: LD_INT 2
44401: EQUAL
44402: ST_TO_ADDR
44403: GO 44649
44405: LD_INT 30
44407: DOUBLE
44408: EQUAL
44409: IFTRUE 44413
44411: GO 44438
44413: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_INT 20
44421: PPUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 321
44431: PUSH
44432: LD_INT 2
44434: EQUAL
44435: ST_TO_ADDR
44436: GO 44649
44438: LD_INT 28
44440: DOUBLE
44441: EQUAL
44442: IFTRUE 44452
44444: LD_INT 21
44446: DOUBLE
44447: EQUAL
44448: IFTRUE 44452
44450: GO 44477
44452: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44453: LD_ADDR_VAR 0 3
44457: PUSH
44458: LD_INT 21
44460: PPUSH
44461: LD_VAR 0 1
44465: PPUSH
44466: CALL_OW 321
44470: PUSH
44471: LD_INT 2
44473: EQUAL
44474: ST_TO_ADDR
44475: GO 44649
44477: LD_INT 16
44479: DOUBLE
44480: EQUAL
44481: IFTRUE 44485
44483: GO 44510
44485: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44486: LD_ADDR_VAR 0 3
44490: PUSH
44491: LD_INT 84
44493: PPUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 321
44503: PUSH
44504: LD_INT 2
44506: EQUAL
44507: ST_TO_ADDR
44508: GO 44649
44510: LD_INT 19
44512: DOUBLE
44513: EQUAL
44514: IFTRUE 44524
44516: LD_INT 23
44518: DOUBLE
44519: EQUAL
44520: IFTRUE 44524
44522: GO 44549
44524: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44525: LD_ADDR_VAR 0 3
44529: PUSH
44530: LD_INT 83
44532: PPUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 321
44542: PUSH
44543: LD_INT 2
44545: EQUAL
44546: ST_TO_ADDR
44547: GO 44649
44549: LD_INT 17
44551: DOUBLE
44552: EQUAL
44553: IFTRUE 44557
44555: GO 44582
44557: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44558: LD_ADDR_VAR 0 3
44562: PUSH
44563: LD_INT 39
44565: PPUSH
44566: LD_VAR 0 1
44570: PPUSH
44571: CALL_OW 321
44575: PUSH
44576: LD_INT 2
44578: EQUAL
44579: ST_TO_ADDR
44580: GO 44649
44582: LD_INT 18
44584: DOUBLE
44585: EQUAL
44586: IFTRUE 44590
44588: GO 44615
44590: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44591: LD_ADDR_VAR 0 3
44595: PUSH
44596: LD_INT 40
44598: PPUSH
44599: LD_VAR 0 1
44603: PPUSH
44604: CALL_OW 321
44608: PUSH
44609: LD_INT 2
44611: EQUAL
44612: ST_TO_ADDR
44613: GO 44649
44615: LD_INT 27
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44648
44623: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_INT 35
44631: PPUSH
44632: LD_VAR 0 1
44636: PPUSH
44637: CALL_OW 321
44641: PUSH
44642: LD_INT 2
44644: EQUAL
44645: ST_TO_ADDR
44646: GO 44649
44648: POP
// end ;
44649: LD_VAR 0 3
44653: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44654: LD_INT 0
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
// result := false ;
44667: LD_ADDR_VAR 0 6
44671: PUSH
44672: LD_INT 0
44674: ST_TO_ADDR
// if btype = b_depot then
44675: LD_VAR 0 2
44679: PUSH
44680: LD_INT 0
44682: EQUAL
44683: IFFALSE 44695
// begin result := true ;
44685: LD_ADDR_VAR 0 6
44689: PUSH
44690: LD_INT 1
44692: ST_TO_ADDR
// exit ;
44693: GO 45549
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44695: LD_VAR 0 1
44699: NOT
44700: IFTRUE 44725
44702: PUSH
44703: LD_VAR 0 1
44707: PPUSH
44708: CALL_OW 266
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: IN
44723: NOT
44724: OR
44725: IFTRUE 44734
44727: PUSH
44728: LD_VAR 0 2
44732: NOT
44733: OR
44734: IFTRUE 44770
44736: PUSH
44737: LD_VAR 0 5
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: LD_INT 4
44756: PUSH
44757: LD_INT 5
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: IN
44768: NOT
44769: OR
44770: IFTRUE 44789
44772: PUSH
44773: LD_VAR 0 3
44777: PPUSH
44778: LD_VAR 0 4
44782: PPUSH
44783: CALL_OW 488
44787: NOT
44788: OR
44789: IFFALSE 44793
// exit ;
44791: GO 45549
// side := GetSide ( depot ) ;
44793: LD_ADDR_VAR 0 9
44797: PUSH
44798: LD_VAR 0 1
44802: PPUSH
44803: CALL_OW 255
44807: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44808: LD_VAR 0 9
44812: PPUSH
44813: LD_VAR 0 2
44817: PPUSH
44818: CALL 44278 0 2
44822: NOT
44823: IFFALSE 44827
// exit ;
44825: GO 45549
// pom := GetBase ( depot ) ;
44827: LD_ADDR_VAR 0 10
44831: PUSH
44832: LD_VAR 0 1
44836: PPUSH
44837: CALL_OW 274
44841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44842: LD_ADDR_VAR 0 11
44846: PUSH
44847: LD_VAR 0 2
44851: PPUSH
44852: LD_VAR 0 1
44856: PPUSH
44857: CALL_OW 248
44861: PPUSH
44862: CALL_OW 450
44866: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44867: LD_VAR 0 10
44871: PPUSH
44872: LD_INT 1
44874: PPUSH
44875: CALL_OW 275
44879: PUSH
44880: LD_VAR 0 11
44884: PUSH
44885: LD_INT 1
44887: ARRAY
44888: GREATEREQUAL
44889: IFFALSE 44915
44891: PUSH
44892: LD_VAR 0 10
44896: PPUSH
44897: LD_INT 2
44899: PPUSH
44900: CALL_OW 275
44904: PUSH
44905: LD_VAR 0 11
44909: PUSH
44910: LD_INT 2
44912: ARRAY
44913: GREATEREQUAL
44914: AND
44915: IFFALSE 44941
44917: PUSH
44918: LD_VAR 0 10
44922: PPUSH
44923: LD_INT 3
44925: PPUSH
44926: CALL_OW 275
44930: PUSH
44931: LD_VAR 0 11
44935: PUSH
44936: LD_INT 3
44938: ARRAY
44939: GREATEREQUAL
44940: AND
44941: NOT
44942: IFFALSE 44946
// exit ;
44944: GO 45549
// if GetBType ( depot ) = b_depot then
44946: LD_VAR 0 1
44950: PPUSH
44951: CALL_OW 266
44955: PUSH
44956: LD_INT 0
44958: EQUAL
44959: IFFALSE 44971
// dist := 28 else
44961: LD_ADDR_VAR 0 14
44965: PUSH
44966: LD_INT 28
44968: ST_TO_ADDR
44969: GO 44979
// dist := 36 ;
44971: LD_ADDR_VAR 0 14
44975: PUSH
44976: LD_INT 36
44978: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44979: LD_VAR 0 1
44983: PPUSH
44984: LD_VAR 0 3
44988: PPUSH
44989: LD_VAR 0 4
44993: PPUSH
44994: CALL_OW 297
44998: PUSH
44999: LD_VAR 0 14
45003: GREATER
45004: IFFALSE 45008
// exit ;
45006: GO 45549
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45008: LD_ADDR_VAR 0 12
45012: PUSH
45013: LD_VAR 0 2
45017: PPUSH
45018: LD_VAR 0 3
45022: PPUSH
45023: LD_VAR 0 4
45027: PPUSH
45028: LD_VAR 0 5
45032: PPUSH
45033: LD_VAR 0 1
45037: PPUSH
45038: CALL_OW 248
45042: PPUSH
45043: LD_INT 0
45045: PPUSH
45046: CALL 45554 0 6
45050: ST_TO_ADDR
// if not hexes then
45051: LD_VAR 0 12
45055: NOT
45056: IFFALSE 45060
// exit ;
45058: GO 45549
// hex := GetHexInfo ( x , y ) ;
45060: LD_ADDR_VAR 0 15
45064: PUSH
45065: LD_VAR 0 3
45069: PPUSH
45070: LD_VAR 0 4
45074: PPUSH
45075: CALL_OW 546
45079: ST_TO_ADDR
// if hex [ 1 ] then
45080: LD_VAR 0 15
45084: PUSH
45085: LD_INT 1
45087: ARRAY
45088: IFFALSE 45092
// exit ;
45090: GO 45549
// height := hex [ 2 ] ;
45092: LD_ADDR_VAR 0 13
45096: PUSH
45097: LD_VAR 0 15
45101: PUSH
45102: LD_INT 2
45104: ARRAY
45105: ST_TO_ADDR
// for i = 1 to hexes do
45106: LD_ADDR_VAR 0 7
45110: PUSH
45111: DOUBLE
45112: LD_INT 1
45114: DEC
45115: ST_TO_ADDR
45116: LD_VAR 0 12
45120: PUSH
45121: FOR_TO
45122: IFFALSE 45466
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45124: LD_VAR 0 12
45128: PUSH
45129: LD_VAR 0 7
45133: ARRAY
45134: PUSH
45135: LD_INT 1
45137: ARRAY
45138: PPUSH
45139: LD_VAR 0 12
45143: PUSH
45144: LD_VAR 0 7
45148: ARRAY
45149: PUSH
45150: LD_INT 2
45152: ARRAY
45153: PPUSH
45154: CALL_OW 488
45158: NOT
45159: IFTRUE 45201
45161: PUSH
45162: LD_VAR 0 12
45166: PUSH
45167: LD_VAR 0 7
45171: ARRAY
45172: PUSH
45173: LD_INT 1
45175: ARRAY
45176: PPUSH
45177: LD_VAR 0 12
45181: PUSH
45182: LD_VAR 0 7
45186: ARRAY
45187: PUSH
45188: LD_INT 2
45190: ARRAY
45191: PPUSH
45192: CALL_OW 428
45196: PUSH
45197: LD_INT 0
45199: GREATER
45200: OR
45201: IFTRUE 45239
45203: PUSH
45204: LD_VAR 0 12
45208: PUSH
45209: LD_VAR 0 7
45213: ARRAY
45214: PUSH
45215: LD_INT 1
45217: ARRAY
45218: PPUSH
45219: LD_VAR 0 12
45223: PUSH
45224: LD_VAR 0 7
45228: ARRAY
45229: PUSH
45230: LD_INT 2
45232: ARRAY
45233: PPUSH
45234: CALL_OW 351
45238: OR
45239: IFFALSE 45245
// exit ;
45241: POP
45242: POP
45243: GO 45549
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45245: LD_ADDR_VAR 0 8
45249: PUSH
45250: LD_VAR 0 12
45254: PUSH
45255: LD_VAR 0 7
45259: ARRAY
45260: PUSH
45261: LD_INT 1
45263: ARRAY
45264: PPUSH
45265: LD_VAR 0 12
45269: PUSH
45270: LD_VAR 0 7
45274: ARRAY
45275: PUSH
45276: LD_INT 2
45278: ARRAY
45279: PPUSH
45280: CALL_OW 546
45284: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45285: LD_VAR 0 8
45289: PUSH
45290: LD_INT 1
45292: ARRAY
45293: IFTRUE 45315
45295: PUSH
45296: LD_VAR 0 8
45300: PUSH
45301: LD_INT 2
45303: ARRAY
45304: PUSH
45305: LD_VAR 0 13
45309: PUSH
45310: LD_INT 2
45312: PLUS
45313: GREATER
45314: OR
45315: IFTRUE 45337
45317: PUSH
45318: LD_VAR 0 8
45322: PUSH
45323: LD_INT 2
45325: ARRAY
45326: PUSH
45327: LD_VAR 0 13
45331: PUSH
45332: LD_INT 2
45334: MINUS
45335: LESS
45336: OR
45337: IFTRUE 45405
45339: PUSH
45340: LD_VAR 0 8
45344: PUSH
45345: LD_INT 3
45347: ARRAY
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 8
45354: PUSH
45355: LD_INT 9
45357: PUSH
45358: LD_INT 10
45360: PUSH
45361: LD_INT 11
45363: PUSH
45364: LD_INT 12
45366: PUSH
45367: LD_INT 13
45369: PUSH
45370: LD_INT 16
45372: PUSH
45373: LD_INT 17
45375: PUSH
45376: LD_INT 18
45378: PUSH
45379: LD_INT 19
45381: PUSH
45382: LD_INT 20
45384: PUSH
45385: LD_INT 21
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: IN
45403: NOT
45404: OR
45405: IFTRUE 45418
45407: PUSH
45408: LD_VAR 0 8
45412: PUSH
45413: LD_INT 5
45415: ARRAY
45416: NOT
45417: OR
45418: IFTRUE 45458
45420: PUSH
45421: LD_VAR 0 8
45425: PUSH
45426: LD_INT 6
45428: ARRAY
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 7
45438: PUSH
45439: LD_INT 9
45441: PUSH
45442: LD_INT 10
45444: PUSH
45445: LD_INT 11
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: IN
45456: NOT
45457: OR
45458: IFFALSE 45464
// exit ;
45460: POP
45461: POP
45462: GO 45549
// end ;
45464: GO 45121
45466: POP
45467: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45468: LD_VAR 0 9
45472: PPUSH
45473: LD_VAR 0 3
45477: PPUSH
45478: LD_VAR 0 4
45482: PPUSH
45483: LD_INT 20
45485: PPUSH
45486: CALL 37368 0 4
45490: PUSH
45491: LD_INT 4
45493: ARRAY
45494: IFFALSE 45498
// exit ;
45496: GO 45549
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45498: LD_VAR 0 2
45502: PUSH
45503: LD_INT 29
45505: PUSH
45506: LD_INT 30
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: IN
45513: IFFALSE 45537
45515: PUSH
45516: LD_VAR 0 3
45520: PPUSH
45521: LD_VAR 0 4
45525: PPUSH
45526: LD_VAR 0 9
45530: PPUSH
45531: CALL_OW 440
45535: NOT
45536: AND
45537: IFFALSE 45541
// exit ;
45539: GO 45549
// result := true ;
45541: LD_ADDR_VAR 0 6
45545: PUSH
45546: LD_INT 1
45548: ST_TO_ADDR
// end ;
45549: LD_VAR 0 6
45553: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45554: LD_INT 0
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
45585: PPUSH
45586: PPUSH
45587: PPUSH
45588: PPUSH
45589: PPUSH
45590: PPUSH
45591: PPUSH
45592: PPUSH
45593: PPUSH
45594: PPUSH
45595: PPUSH
45596: PPUSH
45597: PPUSH
45598: PPUSH
45599: PPUSH
45600: PPUSH
45601: PPUSH
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
45608: PPUSH
45609: PPUSH
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
// result = [ ] ;
45614: LD_ADDR_VAR 0 7
45618: PUSH
45619: EMPTY
45620: ST_TO_ADDR
// temp_list = [ ] ;
45621: LD_ADDR_VAR 0 9
45625: PUSH
45626: EMPTY
45627: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45628: LD_VAR 0 4
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 3
45644: PUSH
45645: LD_INT 4
45647: PUSH
45648: LD_INT 5
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: IN
45659: NOT
45660: IFTRUE 45703
45662: PUSH
45663: LD_VAR 0 1
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: IN
45678: IFFALSE 45702
45680: PUSH
45681: LD_VAR 0 5
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 3
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: IN
45700: NOT
45701: AND
45702: OR
45703: IFFALSE 45707
// exit ;
45705: GO 64106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45707: LD_VAR 0 1
45711: PUSH
45712: LD_INT 6
45714: PUSH
45715: LD_INT 7
45717: PUSH
45718: LD_INT 8
45720: PUSH
45721: LD_INT 13
45723: PUSH
45724: LD_INT 12
45726: PUSH
45727: LD_INT 15
45729: PUSH
45730: LD_INT 11
45732: PUSH
45733: LD_INT 14
45735: PUSH
45736: LD_INT 10
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: IN
45750: IFFALSE 45760
// btype = b_lab ;
45752: LD_ADDR_VAR 0 1
45756: PUSH
45757: LD_INT 6
45759: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45760: LD_VAR 0 6
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: IN
45779: NOT
45780: IFTRUE 45848
45782: PUSH
45783: LD_VAR 0 1
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 6
45802: PUSH
45803: LD_INT 36
45805: PUSH
45806: LD_INT 4
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: LD_INT 31
45814: PUSH
45815: LD_INT 32
45817: PUSH
45818: LD_INT 33
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: IN
45834: NOT
45835: IFFALSE 45847
45837: PUSH
45838: LD_VAR 0 6
45842: PUSH
45843: LD_INT 1
45845: EQUAL
45846: AND
45847: OR
45848: IFTRUE 45880
45850: PUSH
45851: LD_VAR 0 1
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: IN
45866: NOT
45867: IFFALSE 45879
45869: PUSH
45870: LD_VAR 0 6
45874: PUSH
45875: LD_INT 2
45877: EQUAL
45878: AND
45879: OR
45880: IFFALSE 45890
// mode = 0 ;
45882: LD_ADDR_VAR 0 6
45886: PUSH
45887: LD_INT 0
45889: ST_TO_ADDR
// case mode of 0 :
45890: LD_VAR 0 6
45894: PUSH
45895: LD_INT 0
45897: DOUBLE
45898: EQUAL
45899: IFTRUE 45903
45901: GO 57356
45903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45904: LD_ADDR_VAR 0 11
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46097: LD_ADDR_VAR 0 12
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 3
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46293: LD_ADDR_VAR 0 13
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: LD_INT 3
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 3
46464: NEG
46465: PUSH
46466: LD_INT 3
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46492: LD_ADDR_VAR 0 14
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46688: LD_ADDR_VAR 0 15
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46881: LD_ADDR_VAR 0 16
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 3
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47074: LD_ADDR_VAR 0 17
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47304: LD_ADDR_VAR 0 18
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47534: LD_ADDR_VAR 0 19
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47764: LD_ADDR_VAR 0 20
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47994: LD_ADDR_VAR 0 21
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48224: LD_ADDR_VAR 0 22
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48454: LD_ADDR_VAR 0 23
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48734: LD_ADDR_VAR 0 24
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49010: LD_ADDR_VAR 0 25
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49284: LD_ADDR_VAR 0 26
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49560: LD_ADDR_VAR 0 27
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49840: LD_ADDR_VAR 0 28
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 3
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50122: LD_ADDR_VAR 0 29
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50401: LD_ADDR_VAR 0 30
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 3
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50679: LD_ADDR_VAR 0 31
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 3
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50957: LD_ADDR_VAR 0 32
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51235: LD_ADDR_VAR 0 33
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: LD_INT 3
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 3
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51514: LD_ADDR_VAR 0 34
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 3
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51794: LD_ADDR_VAR 0 35
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51906: LD_ADDR_VAR 0 36
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52018: LD_ADDR_VAR 0 37
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52130: LD_ADDR_VAR 0 38
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52242: LD_ADDR_VAR 0 39
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52354: LD_ADDR_VAR 0 40
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52466: LD_ADDR_VAR 0 41
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 3
52763: NEG
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: NEG
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52816: LD_ADDR_VAR 0 42
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 3
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53166: LD_ADDR_VAR 0 43
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53514: LD_ADDR_VAR 0 44
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: LD_INT 3
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53864: LD_ADDR_VAR 0 45
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 3
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54214: LD_ADDR_VAR 0 46
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 3
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54562: LD_ADDR_VAR 0 47
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54713: LD_ADDR_VAR 0 48
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54860: LD_ADDR_VAR 0 49
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55004: LD_ADDR_VAR 0 50
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55148: LD_ADDR_VAR 0 51
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55295: LD_ADDR_VAR 0 52
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55446: LD_ADDR_VAR 0 53
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55676: LD_ADDR_VAR 0 54
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55906: LD_ADDR_VAR 0 55
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56136: LD_ADDR_VAR 0 56
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56366: LD_ADDR_VAR 0 57
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56596: LD_ADDR_VAR 0 58
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56826: LD_ADDR_VAR 0 59
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56914: LD_ADDR_VAR 0 60
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57002: LD_ADDR_VAR 0 61
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57090: LD_ADDR_VAR 0 62
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57178: LD_ADDR_VAR 0 63
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57266: LD_ADDR_VAR 0 64
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// end ; 1 :
57354: GO 63251
57356: LD_INT 1
57358: DOUBLE
57359: EQUAL
57360: IFTRUE 57364
57362: GO 59987
57364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57365: LD_ADDR_VAR 0 11
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57409: LD_ADDR_VAR 0 12
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57450: LD_ADDR_VAR 0 13
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57490: LD_ADDR_VAR 0 14
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57531: LD_ADDR_VAR 0 15
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57575: LD_ADDR_VAR 0 16
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 3
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57621: LD_ADDR_VAR 0 17
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57665: LD_ADDR_VAR 0 18
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57706: LD_ADDR_VAR 0 19
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57746: LD_ADDR_VAR 0 20
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57787: LD_ADDR_VAR 0 21
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57831: LD_ADDR_VAR 0 22
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: LD_INT 3
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57877: LD_ADDR_VAR 0 23
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 4
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: LIST
57920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57921: LD_ADDR_VAR 0 24
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57962: LD_ADDR_VAR 0 25
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: LD_INT 4
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58002: LD_ADDR_VAR 0 26
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 4
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58043: LD_ADDR_VAR 0 27
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58087: LD_ADDR_VAR 0 28
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 4
58118: NEG
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58133: LD_ADDR_VAR 0 29
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 4
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 5
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 5
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 6
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 6
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 5
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58288: LD_ADDR_VAR 0 30
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 4
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 4
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 5
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 5
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 6
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 6
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58431: LD_ADDR_VAR 0 31
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: LD_INT 4
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 5
58508: PUSH
58509: LD_INT 5
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 4
58518: PUSH
58519: LD_INT 5
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 6
58528: PUSH
58529: LD_INT 5
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 6
58538: PUSH
58539: LD_INT 6
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: LD_INT 6
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58570: LD_ADDR_VAR 0 32
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 5
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: LD_INT 5
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 6
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 6
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 5
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58713: LD_ADDR_VAR 0 33
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 4
58765: NEG
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 4
58776: NEG
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 5
58799: NEG
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 5
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 5
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 6
58833: NEG
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 6
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58868: LD_ADDR_VAR 0 34
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 3
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 4
58923: NEG
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 4
58935: NEG
58936: PUSH
58937: LD_INT 4
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: LD_INT 5
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 5
58959: NEG
58960: PUSH
58961: LD_INT 4
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 5
58971: NEG
58972: PUSH
58973: LD_INT 5
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 5
58983: NEG
58984: PUSH
58985: LD_INT 6
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 6
58995: NEG
58996: PUSH
58997: LD_INT 5
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 6
59007: NEG
59008: PUSH
59009: LD_INT 6
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59031: LD_ADDR_VAR 0 41
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59075: LD_ADDR_VAR 0 42
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59116: LD_ADDR_VAR 0 43
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59156: LD_ADDR_VAR 0 44
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59197: LD_ADDR_VAR 0 45
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59241: LD_ADDR_VAR 0 46
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59287: LD_ADDR_VAR 0 47
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59320: LD_ADDR_VAR 0 48
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59351: LD_ADDR_VAR 0 49
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59380: LD_ADDR_VAR 0 50
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59409: LD_ADDR_VAR 0 51
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59440: LD_ADDR_VAR 0 52
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: NEG
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59473: LD_ADDR_VAR 0 53
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 3
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59517: LD_ADDR_VAR 0 54
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59558: LD_ADDR_VAR 0 55
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59598: LD_ADDR_VAR 0 56
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 3
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59639: LD_ADDR_VAR 0 57
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: NEG
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: NEG
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: LIST
59682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59683: LD_ADDR_VAR 0 58
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: LD_INT 3
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59729: LD_ADDR_VAR 0 59
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: LIST
59772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59773: LD_ADDR_VAR 0 60
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59814: LD_ADDR_VAR 0 61
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59854: LD_ADDR_VAR 0 62
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59895: LD_ADDR_VAR 0 63
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: LIST
59938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59939: LD_ADDR_VAR 0 64
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: ST_TO_ADDR
// end ; 2 :
59985: GO 63251
59987: LD_INT 2
59989: DOUBLE
59990: EQUAL
59991: IFTRUE 59995
59993: GO 63250
59995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59996: LD_ADDR_VAR 0 29
60000: PUSH
60001: LD_INT 4
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 5
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 5
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 4
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 5
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 4
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 4
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 4
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 4
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 4
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 5
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 5
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 4
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 3
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 3
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 4
60335: NEG
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 4
60358: NEG
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: NEG
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: NEG
60394: PUSH
60395: LD_INT 5
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 4
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 5
60441: NEG
60442: PUSH
60443: LD_INT 4
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: LD_INT 5
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 3
60465: NEG
60466: PUSH
60467: LD_INT 5
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 5
60477: NEG
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60534: LD_ADDR_VAR 0 30
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 5
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 5
60571: PUSH
60572: LD_INT 5
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: LD_INT 5
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 4
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 4
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 4
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 4
60769: NEG
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 5
60780: NEG
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 5
60791: NEG
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 5
60803: NEG
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: NEG
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: LD_INT 4
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 4
60898: NEG
60899: PUSH
60900: LD_INT 4
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 4
60922: NEG
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 4
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 5
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 4
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: LD_INT 5
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 5
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61081: LD_ADDR_VAR 0 31
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 4
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: LD_INT 5
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 5
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: LD_INT 4
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: LD_INT 5
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 4
61237: NEG
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 4
61248: NEG
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 4
61260: NEG
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: LD_INT 4
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 4
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 4
61331: NEG
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 5
61343: NEG
61344: PUSH
61345: LD_INT 4
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 5
61355: NEG
61356: PUSH
61357: LD_INT 5
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: NEG
61368: PUSH
61369: LD_INT 5
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 5
61379: NEG
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 4
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: LD_INT 4
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 4
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 4
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 5
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 5
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 4
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 5
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61631: LD_ADDR_VAR 0 32
61635: PUSH
61636: LD_INT 4
61638: NEG
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 4
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 4
61683: NEG
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 5
61694: NEG
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 5
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 5
61717: NEG
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: NEG
61753: PUSH
61754: LD_INT 4
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 3
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 4
61800: NEG
61801: PUSH
61802: LD_INT 3
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 4
61812: NEG
61813: PUSH
61814: LD_INT 4
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: LD_INT 4
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 4
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 4
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 5
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 4
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: LD_INT 3
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 3
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 5
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: NEG
61939: PUSH
61940: LD_INT 5
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 4
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 4
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 4
62043: PUSH
62044: LD_INT 4
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 4
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: LD_INT 4
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 5
62073: PUSH
62074: LD_INT 5
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 4
62083: PUSH
62084: LD_INT 5
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: LD_INT 4
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 5
62113: PUSH
62114: LD_INT 3
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: LD_INT 5
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62178: LD_ADDR_VAR 0 33
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: LD_INT 4
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 4
62197: NEG
62198: PUSH
62199: LD_INT 5
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: LD_INT 4
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 3
62221: NEG
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 4
62233: NEG
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 5
62245: NEG
62246: PUSH
62247: LD_INT 4
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 5
62257: NEG
62258: PUSH
62259: LD_INT 5
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: NEG
62270: PUSH
62271: LD_INT 5
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 5
62281: NEG
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 4
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 3
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: LD_INT 4
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 4
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 5
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 5
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 4
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 3
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 4
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 4
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 4
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 4
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: LD_INT 4
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 4
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 3
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: LD_INT 4
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 5
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 5
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: LD_INT 4
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: LD_INT 5
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62716: LD_ADDR_VAR 0 34
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 4
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 5
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 4
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: LD_INT 4
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: LD_INT 5
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: LD_INT 5
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 4
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: LD_INT 2
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 4
62918: PUSH
62919: LD_INT 4
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 4
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 5
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 5
62948: PUSH
62949: LD_INT 5
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: LD_INT 5
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: LD_INT 4
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 5
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: LD_INT 5
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: LD_INT 4
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: LD_INT 4
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 4
63101: NEG
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 4
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 3
63124: NEG
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 4
63146: NEG
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 5
63157: NEG
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 5
63168: NEG
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 5
63180: NEG
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: ST_TO_ADDR
// end ; end ;
63248: GO 63251
63250: POP
// case btype of b_depot , b_warehouse :
63251: LD_VAR 0 1
63255: PUSH
63256: LD_INT 0
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63270
63262: LD_INT 1
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63270
63268: GO 63471
63270: POP
// case nation of nation_american :
63271: LD_VAR 0 5
63275: PUSH
63276: LD_INT 1
63278: DOUBLE
63279: EQUAL
63280: IFTRUE 63284
63282: GO 63340
63284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63285: LD_ADDR_VAR 0 9
63289: PUSH
63290: LD_VAR 0 11
63294: PUSH
63295: LD_VAR 0 12
63299: PUSH
63300: LD_VAR 0 13
63304: PUSH
63305: LD_VAR 0 14
63309: PUSH
63310: LD_VAR 0 15
63314: PUSH
63315: LD_VAR 0 16
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_VAR 0 4
63332: PUSH
63333: LD_INT 1
63335: PLUS
63336: ARRAY
63337: ST_TO_ADDR
63338: GO 63469
63340: LD_INT 2
63342: DOUBLE
63343: EQUAL
63344: IFTRUE 63348
63346: GO 63404
63348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63349: LD_ADDR_VAR 0 9
63353: PUSH
63354: LD_VAR 0 17
63358: PUSH
63359: LD_VAR 0 18
63363: PUSH
63364: LD_VAR 0 19
63368: PUSH
63369: LD_VAR 0 20
63373: PUSH
63374: LD_VAR 0 21
63378: PUSH
63379: LD_VAR 0 22
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: PUSH
63392: LD_VAR 0 4
63396: PUSH
63397: LD_INT 1
63399: PLUS
63400: ARRAY
63401: ST_TO_ADDR
63402: GO 63469
63404: LD_INT 3
63406: DOUBLE
63407: EQUAL
63408: IFTRUE 63412
63410: GO 63468
63412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63413: LD_ADDR_VAR 0 9
63417: PUSH
63418: LD_VAR 0 23
63422: PUSH
63423: LD_VAR 0 24
63427: PUSH
63428: LD_VAR 0 25
63432: PUSH
63433: LD_VAR 0 26
63437: PUSH
63438: LD_VAR 0 27
63442: PUSH
63443: LD_VAR 0 28
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: PUSH
63456: LD_VAR 0 4
63460: PUSH
63461: LD_INT 1
63463: PLUS
63464: ARRAY
63465: ST_TO_ADDR
63466: GO 63469
63468: POP
63469: GO 64024
63471: LD_INT 2
63473: DOUBLE
63474: EQUAL
63475: IFTRUE 63485
63477: LD_INT 3
63479: DOUBLE
63480: EQUAL
63481: IFTRUE 63485
63483: GO 63541
63485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63486: LD_ADDR_VAR 0 9
63490: PUSH
63491: LD_VAR 0 29
63495: PUSH
63496: LD_VAR 0 30
63500: PUSH
63501: LD_VAR 0 31
63505: PUSH
63506: LD_VAR 0 32
63510: PUSH
63511: LD_VAR 0 33
63515: PUSH
63516: LD_VAR 0 34
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: PUSH
63529: LD_VAR 0 4
63533: PUSH
63534: LD_INT 1
63536: PLUS
63537: ARRAY
63538: ST_TO_ADDR
63539: GO 64024
63541: LD_INT 16
63543: DOUBLE
63544: EQUAL
63545: IFTRUE 63603
63547: LD_INT 17
63549: DOUBLE
63550: EQUAL
63551: IFTRUE 63603
63553: LD_INT 18
63555: DOUBLE
63556: EQUAL
63557: IFTRUE 63603
63559: LD_INT 19
63561: DOUBLE
63562: EQUAL
63563: IFTRUE 63603
63565: LD_INT 22
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63603
63571: LD_INT 20
63573: DOUBLE
63574: EQUAL
63575: IFTRUE 63603
63577: LD_INT 21
63579: DOUBLE
63580: EQUAL
63581: IFTRUE 63603
63583: LD_INT 23
63585: DOUBLE
63586: EQUAL
63587: IFTRUE 63603
63589: LD_INT 24
63591: DOUBLE
63592: EQUAL
63593: IFTRUE 63603
63595: LD_INT 25
63597: DOUBLE
63598: EQUAL
63599: IFTRUE 63603
63601: GO 63659
63603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63604: LD_ADDR_VAR 0 9
63608: PUSH
63609: LD_VAR 0 35
63613: PUSH
63614: LD_VAR 0 36
63618: PUSH
63619: LD_VAR 0 37
63623: PUSH
63624: LD_VAR 0 38
63628: PUSH
63629: LD_VAR 0 39
63633: PUSH
63634: LD_VAR 0 40
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: PUSH
63647: LD_VAR 0 4
63651: PUSH
63652: LD_INT 1
63654: PLUS
63655: ARRAY
63656: ST_TO_ADDR
63657: GO 64024
63659: LD_INT 6
63661: DOUBLE
63662: EQUAL
63663: IFTRUE 63715
63665: LD_INT 7
63667: DOUBLE
63668: EQUAL
63669: IFTRUE 63715
63671: LD_INT 8
63673: DOUBLE
63674: EQUAL
63675: IFTRUE 63715
63677: LD_INT 13
63679: DOUBLE
63680: EQUAL
63681: IFTRUE 63715
63683: LD_INT 12
63685: DOUBLE
63686: EQUAL
63687: IFTRUE 63715
63689: LD_INT 15
63691: DOUBLE
63692: EQUAL
63693: IFTRUE 63715
63695: LD_INT 11
63697: DOUBLE
63698: EQUAL
63699: IFTRUE 63715
63701: LD_INT 14
63703: DOUBLE
63704: EQUAL
63705: IFTRUE 63715
63707: LD_INT 10
63709: DOUBLE
63710: EQUAL
63711: IFTRUE 63715
63713: GO 63771
63715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63716: LD_ADDR_VAR 0 9
63720: PUSH
63721: LD_VAR 0 41
63725: PUSH
63726: LD_VAR 0 42
63730: PUSH
63731: LD_VAR 0 43
63735: PUSH
63736: LD_VAR 0 44
63740: PUSH
63741: LD_VAR 0 45
63745: PUSH
63746: LD_VAR 0 46
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: PUSH
63759: LD_VAR 0 4
63763: PUSH
63764: LD_INT 1
63766: PLUS
63767: ARRAY
63768: ST_TO_ADDR
63769: GO 64024
63771: LD_INT 36
63773: DOUBLE
63774: EQUAL
63775: IFTRUE 63779
63777: GO 63835
63779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63780: LD_ADDR_VAR 0 9
63784: PUSH
63785: LD_VAR 0 47
63789: PUSH
63790: LD_VAR 0 48
63794: PUSH
63795: LD_VAR 0 49
63799: PUSH
63800: LD_VAR 0 50
63804: PUSH
63805: LD_VAR 0 51
63809: PUSH
63810: LD_VAR 0 52
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: PUSH
63823: LD_VAR 0 4
63827: PUSH
63828: LD_INT 1
63830: PLUS
63831: ARRAY
63832: ST_TO_ADDR
63833: GO 64024
63835: LD_INT 4
63837: DOUBLE
63838: EQUAL
63839: IFTRUE 63861
63841: LD_INT 5
63843: DOUBLE
63844: EQUAL
63845: IFTRUE 63861
63847: LD_INT 34
63849: DOUBLE
63850: EQUAL
63851: IFTRUE 63861
63853: LD_INT 37
63855: DOUBLE
63856: EQUAL
63857: IFTRUE 63861
63859: GO 63917
63861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63862: LD_ADDR_VAR 0 9
63866: PUSH
63867: LD_VAR 0 53
63871: PUSH
63872: LD_VAR 0 54
63876: PUSH
63877: LD_VAR 0 55
63881: PUSH
63882: LD_VAR 0 56
63886: PUSH
63887: LD_VAR 0 57
63891: PUSH
63892: LD_VAR 0 58
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: PUSH
63905: LD_VAR 0 4
63909: PUSH
63910: LD_INT 1
63912: PLUS
63913: ARRAY
63914: ST_TO_ADDR
63915: GO 64024
63917: LD_INT 31
63919: DOUBLE
63920: EQUAL
63921: IFTRUE 63967
63923: LD_INT 32
63925: DOUBLE
63926: EQUAL
63927: IFTRUE 63967
63929: LD_INT 33
63931: DOUBLE
63932: EQUAL
63933: IFTRUE 63967
63935: LD_INT 27
63937: DOUBLE
63938: EQUAL
63939: IFTRUE 63967
63941: LD_INT 26
63943: DOUBLE
63944: EQUAL
63945: IFTRUE 63967
63947: LD_INT 28
63949: DOUBLE
63950: EQUAL
63951: IFTRUE 63967
63953: LD_INT 29
63955: DOUBLE
63956: EQUAL
63957: IFTRUE 63967
63959: LD_INT 30
63961: DOUBLE
63962: EQUAL
63963: IFTRUE 63967
63965: GO 64023
63967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63968: LD_ADDR_VAR 0 9
63972: PUSH
63973: LD_VAR 0 59
63977: PUSH
63978: LD_VAR 0 60
63982: PUSH
63983: LD_VAR 0 61
63987: PUSH
63988: LD_VAR 0 62
63992: PUSH
63993: LD_VAR 0 63
63997: PUSH
63998: LD_VAR 0 64
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: PUSH
64011: LD_VAR 0 4
64015: PUSH
64016: LD_INT 1
64018: PLUS
64019: ARRAY
64020: ST_TO_ADDR
64021: GO 64024
64023: POP
// temp_list2 = [ ] ;
64024: LD_ADDR_VAR 0 10
64028: PUSH
64029: EMPTY
64030: ST_TO_ADDR
// for i in temp_list do
64031: LD_ADDR_VAR 0 8
64035: PUSH
64036: LD_VAR 0 9
64040: PUSH
64041: FOR_IN
64042: IFFALSE 64094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64044: LD_ADDR_VAR 0 10
64048: PUSH
64049: LD_VAR 0 10
64053: PUSH
64054: LD_VAR 0 8
64058: PUSH
64059: LD_INT 1
64061: ARRAY
64062: PUSH
64063: LD_VAR 0 2
64067: PLUS
64068: PUSH
64069: LD_VAR 0 8
64073: PUSH
64074: LD_INT 2
64076: ARRAY
64077: PUSH
64078: LD_VAR 0 3
64082: PLUS
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: ADD
64091: ST_TO_ADDR
64092: GO 64041
64094: POP
64095: POP
// result = temp_list2 ;
64096: LD_ADDR_VAR 0 7
64100: PUSH
64101: LD_VAR 0 10
64105: ST_TO_ADDR
// end ;
64106: LD_VAR 0 7
64110: RET
// export function EnemyInRange ( unit , dist ) ; begin
64111: LD_INT 0
64113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_VAR 0 1
64123: PPUSH
64124: CALL_OW 255
64128: PPUSH
64129: LD_VAR 0 1
64133: PPUSH
64134: CALL_OW 250
64138: PPUSH
64139: LD_VAR 0 1
64143: PPUSH
64144: CALL_OW 251
64148: PPUSH
64149: LD_VAR 0 2
64153: PPUSH
64154: CALL 37368 0 4
64158: PUSH
64159: LD_INT 4
64161: ARRAY
64162: ST_TO_ADDR
// end ;
64163: LD_VAR 0 3
64167: RET
// export function PlayerSeeMe ( unit ) ; begin
64168: LD_INT 0
64170: PPUSH
// result := See ( your_side , unit ) ;
64171: LD_ADDR_VAR 0 2
64175: PUSH
64176: LD_OWVAR 2
64180: PPUSH
64181: LD_VAR 0 1
64185: PPUSH
64186: CALL_OW 292
64190: ST_TO_ADDR
// end ;
64191: LD_VAR 0 2
64195: RET
// export function ReverseDir ( unit ) ; begin
64196: LD_INT 0
64198: PPUSH
// if not unit then
64199: LD_VAR 0 1
64203: NOT
64204: IFFALSE 64208
// exit ;
64206: GO 64231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64208: LD_ADDR_VAR 0 2
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: CALL_OW 254
64222: PUSH
64223: LD_INT 3
64225: PLUS
64226: PUSH
64227: LD_INT 6
64229: MOD
64230: ST_TO_ADDR
// end ;
64231: LD_VAR 0 2
64235: RET
// export function ReverseArray ( array ) ; var i ; begin
64236: LD_INT 0
64238: PPUSH
64239: PPUSH
// if not array then
64240: LD_VAR 0 1
64244: NOT
64245: IFFALSE 64249
// exit ;
64247: GO 64304
// result := [ ] ;
64249: LD_ADDR_VAR 0 2
64253: PUSH
64254: EMPTY
64255: ST_TO_ADDR
// for i := array downto 1 do
64256: LD_ADDR_VAR 0 3
64260: PUSH
64261: DOUBLE
64262: LD_VAR 0 1
64266: INC
64267: ST_TO_ADDR
64268: LD_INT 1
64270: PUSH
64271: FOR_DOWNTO
64272: IFFALSE 64302
// result := Join ( result , array [ i ] ) ;
64274: LD_ADDR_VAR 0 2
64278: PUSH
64279: LD_VAR 0 2
64283: PPUSH
64284: LD_VAR 0 1
64288: PUSH
64289: LD_VAR 0 3
64293: ARRAY
64294: PPUSH
64295: CALL 69146 0 2
64299: ST_TO_ADDR
64300: GO 64271
64302: POP
64303: POP
// end ;
64304: LD_VAR 0 2
64308: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64309: LD_INT 0
64311: PPUSH
64312: PPUSH
64313: PPUSH
64314: PPUSH
64315: PPUSH
64316: PPUSH
// if not unit or not hexes then
64317: LD_VAR 0 1
64321: NOT
64322: IFTRUE 64331
64324: PUSH
64325: LD_VAR 0 2
64329: NOT
64330: OR
64331: IFFALSE 64335
// exit ;
64333: GO 64458
// dist := 9999 ;
64335: LD_ADDR_VAR 0 5
64339: PUSH
64340: LD_INT 9999
64342: ST_TO_ADDR
// for i = 1 to hexes do
64343: LD_ADDR_VAR 0 4
64347: PUSH
64348: DOUBLE
64349: LD_INT 1
64351: DEC
64352: ST_TO_ADDR
64353: LD_VAR 0 2
64357: PUSH
64358: FOR_TO
64359: IFFALSE 64446
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64361: LD_ADDR_VAR 0 6
64365: PUSH
64366: LD_VAR 0 1
64370: PPUSH
64371: LD_VAR 0 2
64375: PUSH
64376: LD_VAR 0 4
64380: ARRAY
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PPUSH
64386: LD_VAR 0 2
64390: PUSH
64391: LD_VAR 0 4
64395: ARRAY
64396: PUSH
64397: LD_INT 2
64399: ARRAY
64400: PPUSH
64401: CALL_OW 297
64405: ST_TO_ADDR
// if tdist < dist then
64406: LD_VAR 0 6
64410: PUSH
64411: LD_VAR 0 5
64415: LESS
64416: IFFALSE 64444
// begin hex := hexes [ i ] ;
64418: LD_ADDR_VAR 0 8
64422: PUSH
64423: LD_VAR 0 2
64427: PUSH
64428: LD_VAR 0 4
64432: ARRAY
64433: ST_TO_ADDR
// dist := tdist ;
64434: LD_ADDR_VAR 0 5
64438: PUSH
64439: LD_VAR 0 6
64443: ST_TO_ADDR
// end ; end ;
64444: GO 64358
64446: POP
64447: POP
// result := hex ;
64448: LD_ADDR_VAR 0 3
64452: PUSH
64453: LD_VAR 0 8
64457: ST_TO_ADDR
// end ;
64458: LD_VAR 0 3
64462: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64463: LD_INT 0
64465: PPUSH
64466: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64467: LD_VAR 0 1
64471: NOT
64472: IFTRUE 64511
64474: PUSH
64475: LD_VAR 0 1
64479: PUSH
64480: LD_INT 21
64482: PUSH
64483: LD_INT 2
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 23
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PPUSH
64504: CALL_OW 69
64508: IN
64509: NOT
64510: OR
64511: IFFALSE 64515
// exit ;
64513: GO 64562
// for i = 1 to 3 do
64515: LD_ADDR_VAR 0 3
64519: PUSH
64520: DOUBLE
64521: LD_INT 1
64523: DEC
64524: ST_TO_ADDR
64525: LD_INT 3
64527: PUSH
64528: FOR_TO
64529: IFFALSE 64560
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64531: LD_VAR 0 1
64535: PPUSH
64536: CALL_OW 250
64540: PPUSH
64541: LD_VAR 0 1
64545: PPUSH
64546: CALL_OW 251
64550: PPUSH
64551: LD_INT 1
64553: PPUSH
64554: CALL_OW 453
64558: GO 64528
64560: POP
64561: POP
// end ;
64562: LD_VAR 0 2
64566: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64567: LD_INT 0
64569: PPUSH
64570: PPUSH
64571: PPUSH
64572: PPUSH
64573: PPUSH
64574: PPUSH
// if not unit or not enemy_unit then
64575: LD_VAR 0 1
64579: NOT
64580: IFTRUE 64589
64582: PUSH
64583: LD_VAR 0 2
64587: NOT
64588: OR
64589: IFFALSE 64593
// exit ;
64591: GO 65064
// if GetLives ( i ) < 250 then
64593: LD_VAR 0 4
64597: PPUSH
64598: CALL_OW 256
64602: PUSH
64603: LD_INT 250
64605: LESS
64606: IFFALSE 64619
// begin ComAutodestruct ( i ) ;
64608: LD_VAR 0 4
64612: PPUSH
64613: CALL 64463 0 1
// exit ;
64617: GO 65064
// end ; x := GetX ( enemy_unit ) ;
64619: LD_ADDR_VAR 0 7
64623: PUSH
64624: LD_VAR 0 2
64628: PPUSH
64629: CALL_OW 250
64633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64634: LD_ADDR_VAR 0 8
64638: PUSH
64639: LD_VAR 0 2
64643: PPUSH
64644: CALL_OW 251
64648: ST_TO_ADDR
// if not x or not y then
64649: LD_VAR 0 7
64653: NOT
64654: IFTRUE 64663
64656: PUSH
64657: LD_VAR 0 8
64661: NOT
64662: OR
64663: IFFALSE 64667
// exit ;
64665: GO 65064
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64667: LD_ADDR_VAR 0 6
64671: PUSH
64672: LD_VAR 0 7
64676: PPUSH
64677: LD_INT 0
64679: PPUSH
64680: LD_INT 4
64682: PPUSH
64683: CALL_OW 272
64687: PUSH
64688: LD_VAR 0 8
64692: PPUSH
64693: LD_INT 0
64695: PPUSH
64696: LD_INT 4
64698: PPUSH
64699: CALL_OW 273
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_VAR 0 7
64712: PPUSH
64713: LD_INT 1
64715: PPUSH
64716: LD_INT 4
64718: PPUSH
64719: CALL_OW 272
64723: PUSH
64724: LD_VAR 0 8
64728: PPUSH
64729: LD_INT 1
64731: PPUSH
64732: LD_INT 4
64734: PPUSH
64735: CALL_OW 273
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_VAR 0 7
64748: PPUSH
64749: LD_INT 2
64751: PPUSH
64752: LD_INT 4
64754: PPUSH
64755: CALL_OW 272
64759: PUSH
64760: LD_VAR 0 8
64764: PPUSH
64765: LD_INT 2
64767: PPUSH
64768: LD_INT 4
64770: PPUSH
64771: CALL_OW 273
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_VAR 0 7
64784: PPUSH
64785: LD_INT 3
64787: PPUSH
64788: LD_INT 4
64790: PPUSH
64791: CALL_OW 272
64795: PUSH
64796: LD_VAR 0 8
64800: PPUSH
64801: LD_INT 3
64803: PPUSH
64804: LD_INT 4
64806: PPUSH
64807: CALL_OW 273
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_VAR 0 7
64820: PPUSH
64821: LD_INT 4
64823: PPUSH
64824: LD_INT 4
64826: PPUSH
64827: CALL_OW 272
64831: PUSH
64832: LD_VAR 0 8
64836: PPUSH
64837: LD_INT 4
64839: PPUSH
64840: LD_INT 4
64842: PPUSH
64843: CALL_OW 273
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_VAR 0 7
64856: PPUSH
64857: LD_INT 5
64859: PPUSH
64860: LD_INT 4
64862: PPUSH
64863: CALL_OW 272
64867: PUSH
64868: LD_VAR 0 8
64872: PPUSH
64873: LD_INT 5
64875: PPUSH
64876: LD_INT 4
64878: PPUSH
64879: CALL_OW 273
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: ST_TO_ADDR
// for i = tmp downto 1 do
64896: LD_ADDR_VAR 0 4
64900: PUSH
64901: DOUBLE
64902: LD_VAR 0 6
64906: INC
64907: ST_TO_ADDR
64908: LD_INT 1
64910: PUSH
64911: FOR_DOWNTO
64912: IFFALSE 65015
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64914: LD_VAR 0 6
64918: PUSH
64919: LD_VAR 0 4
64923: ARRAY
64924: PUSH
64925: LD_INT 1
64927: ARRAY
64928: PPUSH
64929: LD_VAR 0 6
64933: PUSH
64934: LD_VAR 0 4
64938: ARRAY
64939: PUSH
64940: LD_INT 2
64942: ARRAY
64943: PPUSH
64944: CALL_OW 488
64948: NOT
64949: IFTRUE 64991
64951: PUSH
64952: LD_VAR 0 6
64956: PUSH
64957: LD_VAR 0 4
64961: ARRAY
64962: PUSH
64963: LD_INT 1
64965: ARRAY
64966: PPUSH
64967: LD_VAR 0 6
64971: PUSH
64972: LD_VAR 0 4
64976: ARRAY
64977: PUSH
64978: LD_INT 2
64980: ARRAY
64981: PPUSH
64982: CALL_OW 428
64986: PUSH
64987: LD_INT 0
64989: NONEQUAL
64990: OR
64991: IFFALSE 65013
// tmp := Delete ( tmp , i ) ;
64993: LD_ADDR_VAR 0 6
64997: PUSH
64998: LD_VAR 0 6
65002: PPUSH
65003: LD_VAR 0 4
65007: PPUSH
65008: CALL_OW 3
65012: ST_TO_ADDR
65013: GO 64911
65015: POP
65016: POP
// j := GetClosestHex ( unit , tmp ) ;
65017: LD_ADDR_VAR 0 5
65021: PUSH
65022: LD_VAR 0 1
65026: PPUSH
65027: LD_VAR 0 6
65031: PPUSH
65032: CALL 64309 0 2
65036: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_VAR 0 5
65046: PUSH
65047: LD_INT 1
65049: ARRAY
65050: PPUSH
65051: LD_VAR 0 5
65055: PUSH
65056: LD_INT 2
65058: ARRAY
65059: PPUSH
65060: CALL_OW 111
// end ;
65064: LD_VAR 0 3
65068: RET
// export function PrepareApemanSoldier ( ) ; begin
65069: LD_INT 0
65071: PPUSH
// uc_nation := 0 ;
65072: LD_ADDR_OWVAR 21
65076: PUSH
65077: LD_INT 0
65079: ST_TO_ADDR
// hc_sex := sex_male ;
65080: LD_ADDR_OWVAR 27
65084: PUSH
65085: LD_INT 1
65087: ST_TO_ADDR
// hc_name :=  ;
65088: LD_ADDR_OWVAR 26
65092: PUSH
65093: LD_STRING 
65095: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65096: LD_ADDR_OWVAR 28
65100: PUSH
65101: LD_INT 15
65103: ST_TO_ADDR
// hc_gallery :=  ;
65104: LD_ADDR_OWVAR 33
65108: PUSH
65109: LD_STRING 
65111: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65112: LD_ADDR_OWVAR 31
65116: PUSH
65117: LD_INT 0
65119: PPUSH
65120: LD_INT 3
65122: PPUSH
65123: CALL_OW 12
65127: PUSH
65128: LD_INT 0
65130: PPUSH
65131: LD_INT 3
65133: PPUSH
65134: CALL_OW 12
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65151: LD_ADDR_OWVAR 29
65155: PUSH
65156: LD_INT 12
65158: PUSH
65159: LD_INT 12
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: ST_TO_ADDR
// end ;
65166: LD_VAR 0 1
65170: RET
// export function PrepareApemanEngineer ( ) ; begin
65171: LD_INT 0
65173: PPUSH
// uc_nation := 0 ;
65174: LD_ADDR_OWVAR 21
65178: PUSH
65179: LD_INT 0
65181: ST_TO_ADDR
// hc_sex := sex_male ;
65182: LD_ADDR_OWVAR 27
65186: PUSH
65187: LD_INT 1
65189: ST_TO_ADDR
// hc_name :=  ;
65190: LD_ADDR_OWVAR 26
65194: PUSH
65195: LD_STRING 
65197: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65198: LD_ADDR_OWVAR 28
65202: PUSH
65203: LD_INT 16
65205: ST_TO_ADDR
// hc_gallery :=  ;
65206: LD_ADDR_OWVAR 33
65210: PUSH
65211: LD_STRING 
65213: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65214: LD_ADDR_OWVAR 31
65218: PUSH
65219: LD_INT 0
65221: PPUSH
65222: LD_INT 3
65224: PPUSH
65225: CALL_OW 12
65229: PUSH
65230: LD_INT 0
65232: PPUSH
65233: LD_INT 3
65235: PPUSH
65236: CALL_OW 12
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65253: LD_ADDR_OWVAR 29
65257: PUSH
65258: LD_INT 12
65260: PUSH
65261: LD_INT 12
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// end ;
65268: LD_VAR 0 1
65272: RET
// export function PrepareApeman ( agressivity ) ; begin
65273: LD_INT 0
65275: PPUSH
// uc_side := 0 ;
65276: LD_ADDR_OWVAR 20
65280: PUSH
65281: LD_INT 0
65283: ST_TO_ADDR
// uc_nation := 0 ;
65284: LD_ADDR_OWVAR 21
65288: PUSH
65289: LD_INT 0
65291: ST_TO_ADDR
// hc_sex := sex_male ;
65292: LD_ADDR_OWVAR 27
65296: PUSH
65297: LD_INT 1
65299: ST_TO_ADDR
// hc_class := class_apeman ;
65300: LD_ADDR_OWVAR 28
65304: PUSH
65305: LD_INT 12
65307: ST_TO_ADDR
// hc_gallery :=  ;
65308: LD_ADDR_OWVAR 33
65312: PUSH
65313: LD_STRING 
65315: ST_TO_ADDR
// hc_name :=  ;
65316: LD_ADDR_OWVAR 26
65320: PUSH
65321: LD_STRING 
65323: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65324: LD_ADDR_OWVAR 29
65328: PUSH
65329: LD_INT 12
65331: PUSH
65332: LD_INT 12
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// if agressivity = 0 then
65339: LD_VAR 0 1
65343: PUSH
65344: LD_INT 0
65346: EQUAL
65347: IFFALSE 65359
// hc_agressivity := 0 else
65349: LD_ADDR_OWVAR 35
65353: PUSH
65354: LD_INT 0
65356: ST_TO_ADDR
65357: GO 65380
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65359: LD_ADDR_OWVAR 35
65363: PUSH
65364: LD_VAR 0 1
65368: NEG
65369: PPUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 12
65379: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65380: LD_ADDR_OWVAR 31
65384: PUSH
65385: LD_INT 0
65387: PPUSH
65388: LD_INT 3
65390: PPUSH
65391: CALL_OW 12
65395: PUSH
65396: LD_INT 0
65398: PPUSH
65399: LD_INT 3
65401: PPUSH
65402: CALL_OW 12
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: ST_TO_ADDR
// end ;
65419: LD_VAR 0 2
65423: RET
// export function PrepareTiger ( agressivity ) ; begin
65424: LD_INT 0
65426: PPUSH
// uc_side := 0 ;
65427: LD_ADDR_OWVAR 20
65431: PUSH
65432: LD_INT 0
65434: ST_TO_ADDR
// uc_nation := 0 ;
65435: LD_ADDR_OWVAR 21
65439: PUSH
65440: LD_INT 0
65442: ST_TO_ADDR
// InitHc ;
65443: CALL_OW 19
// hc_class := class_tiger ;
65447: LD_ADDR_OWVAR 28
65451: PUSH
65452: LD_INT 14
65454: ST_TO_ADDR
// hc_gallery :=  ;
65455: LD_ADDR_OWVAR 33
65459: PUSH
65460: LD_STRING 
65462: ST_TO_ADDR
// hc_name :=  ;
65463: LD_ADDR_OWVAR 26
65467: PUSH
65468: LD_STRING 
65470: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65471: LD_ADDR_OWVAR 35
65475: PUSH
65476: LD_VAR 0 1
65480: NEG
65481: PPUSH
65482: LD_VAR 0 1
65486: PPUSH
65487: CALL_OW 12
65491: ST_TO_ADDR
// end ;
65492: LD_VAR 0 2
65496: RET
// export function PrepareEnchidna ( ) ; begin
65497: LD_INT 0
65499: PPUSH
// uc_side := 0 ;
65500: LD_ADDR_OWVAR 20
65504: PUSH
65505: LD_INT 0
65507: ST_TO_ADDR
// uc_nation := 0 ;
65508: LD_ADDR_OWVAR 21
65512: PUSH
65513: LD_INT 0
65515: ST_TO_ADDR
// InitHc ;
65516: CALL_OW 19
// hc_class := class_baggie ;
65520: LD_ADDR_OWVAR 28
65524: PUSH
65525: LD_INT 13
65527: ST_TO_ADDR
// hc_gallery :=  ;
65528: LD_ADDR_OWVAR 33
65532: PUSH
65533: LD_STRING 
65535: ST_TO_ADDR
// hc_name :=  ;
65536: LD_ADDR_OWVAR 26
65540: PUSH
65541: LD_STRING 
65543: ST_TO_ADDR
// end ;
65544: LD_VAR 0 1
65548: RET
// export function PrepareFrog ( ) ; begin
65549: LD_INT 0
65551: PPUSH
// uc_side := 0 ;
65552: LD_ADDR_OWVAR 20
65556: PUSH
65557: LD_INT 0
65559: ST_TO_ADDR
// uc_nation := 0 ;
65560: LD_ADDR_OWVAR 21
65564: PUSH
65565: LD_INT 0
65567: ST_TO_ADDR
// InitHc ;
65568: CALL_OW 19
// hc_class := class_frog ;
65572: LD_ADDR_OWVAR 28
65576: PUSH
65577: LD_INT 19
65579: ST_TO_ADDR
// hc_gallery :=  ;
65580: LD_ADDR_OWVAR 33
65584: PUSH
65585: LD_STRING 
65587: ST_TO_ADDR
// hc_name :=  ;
65588: LD_ADDR_OWVAR 26
65592: PUSH
65593: LD_STRING 
65595: ST_TO_ADDR
// end ;
65596: LD_VAR 0 1
65600: RET
// export function PrepareFish ( ) ; begin
65601: LD_INT 0
65603: PPUSH
// uc_side := 0 ;
65604: LD_ADDR_OWVAR 20
65608: PUSH
65609: LD_INT 0
65611: ST_TO_ADDR
// uc_nation := 0 ;
65612: LD_ADDR_OWVAR 21
65616: PUSH
65617: LD_INT 0
65619: ST_TO_ADDR
// InitHc ;
65620: CALL_OW 19
// hc_class := class_fish ;
65624: LD_ADDR_OWVAR 28
65628: PUSH
65629: LD_INT 20
65631: ST_TO_ADDR
// hc_gallery :=  ;
65632: LD_ADDR_OWVAR 33
65636: PUSH
65637: LD_STRING 
65639: ST_TO_ADDR
// hc_name :=  ;
65640: LD_ADDR_OWVAR 26
65644: PUSH
65645: LD_STRING 
65647: ST_TO_ADDR
// end ;
65648: LD_VAR 0 1
65652: RET
// export function PrepareBird ( ) ; begin
65653: LD_INT 0
65655: PPUSH
// uc_side := 0 ;
65656: LD_ADDR_OWVAR 20
65660: PUSH
65661: LD_INT 0
65663: ST_TO_ADDR
// uc_nation := 0 ;
65664: LD_ADDR_OWVAR 21
65668: PUSH
65669: LD_INT 0
65671: ST_TO_ADDR
// InitHc ;
65672: CALL_OW 19
// hc_class := class_phororhacos ;
65676: LD_ADDR_OWVAR 28
65680: PUSH
65681: LD_INT 18
65683: ST_TO_ADDR
// hc_gallery :=  ;
65684: LD_ADDR_OWVAR 33
65688: PUSH
65689: LD_STRING 
65691: ST_TO_ADDR
// hc_name :=  ;
65692: LD_ADDR_OWVAR 26
65696: PUSH
65697: LD_STRING 
65699: ST_TO_ADDR
// end ;
65700: LD_VAR 0 1
65704: RET
// export function PrepareHorse ( ) ; begin
65705: LD_INT 0
65707: PPUSH
// uc_side := 0 ;
65708: LD_ADDR_OWVAR 20
65712: PUSH
65713: LD_INT 0
65715: ST_TO_ADDR
// uc_nation := 0 ;
65716: LD_ADDR_OWVAR 21
65720: PUSH
65721: LD_INT 0
65723: ST_TO_ADDR
// InitHc ;
65724: CALL_OW 19
// hc_class := class_horse ;
65728: LD_ADDR_OWVAR 28
65732: PUSH
65733: LD_INT 21
65735: ST_TO_ADDR
// hc_gallery :=  ;
65736: LD_ADDR_OWVAR 33
65740: PUSH
65741: LD_STRING 
65743: ST_TO_ADDR
// hc_name :=  ;
65744: LD_ADDR_OWVAR 26
65748: PUSH
65749: LD_STRING 
65751: ST_TO_ADDR
// end ;
65752: LD_VAR 0 1
65756: RET
// export function PrepareMastodont ( ) ; begin
65757: LD_INT 0
65759: PPUSH
// uc_side := 0 ;
65760: LD_ADDR_OWVAR 20
65764: PUSH
65765: LD_INT 0
65767: ST_TO_ADDR
// uc_nation := 0 ;
65768: LD_ADDR_OWVAR 21
65772: PUSH
65773: LD_INT 0
65775: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65776: LD_ADDR_OWVAR 37
65780: PUSH
65781: LD_INT 31
65783: ST_TO_ADDR
// vc_control := control_rider ;
65784: LD_ADDR_OWVAR 38
65788: PUSH
65789: LD_INT 4
65791: ST_TO_ADDR
// end ;
65792: LD_VAR 0 1
65796: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65797: LD_INT 0
65799: PPUSH
65800: PPUSH
65801: PPUSH
// uc_side = 0 ;
65802: LD_ADDR_OWVAR 20
65806: PUSH
65807: LD_INT 0
65809: ST_TO_ADDR
// uc_nation = 0 ;
65810: LD_ADDR_OWVAR 21
65814: PUSH
65815: LD_INT 0
65817: ST_TO_ADDR
// InitHc_All ( ) ;
65818: CALL_OW 584
// InitVc ;
65822: CALL_OW 20
// if mastodonts then
65826: LD_VAR 0 6
65830: IFFALSE 65897
// for i = 1 to mastodonts do
65832: LD_ADDR_VAR 0 11
65836: PUSH
65837: DOUBLE
65838: LD_INT 1
65840: DEC
65841: ST_TO_ADDR
65842: LD_VAR 0 6
65846: PUSH
65847: FOR_TO
65848: IFFALSE 65895
// begin vc_chassis := 31 ;
65850: LD_ADDR_OWVAR 37
65854: PUSH
65855: LD_INT 31
65857: ST_TO_ADDR
// vc_control := control_rider ;
65858: LD_ADDR_OWVAR 38
65862: PUSH
65863: LD_INT 4
65865: ST_TO_ADDR
// animal := CreateVehicle ;
65866: LD_ADDR_VAR 0 12
65870: PUSH
65871: CALL_OW 45
65875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65876: LD_VAR 0 12
65880: PPUSH
65881: LD_VAR 0 8
65885: PPUSH
65886: LD_INT 0
65888: PPUSH
65889: CALL 68039 0 3
// end ;
65893: GO 65847
65895: POP
65896: POP
// if horses then
65897: LD_VAR 0 5
65901: IFFALSE 65968
// for i = 1 to horses do
65903: LD_ADDR_VAR 0 11
65907: PUSH
65908: DOUBLE
65909: LD_INT 1
65911: DEC
65912: ST_TO_ADDR
65913: LD_VAR 0 5
65917: PUSH
65918: FOR_TO
65919: IFFALSE 65966
// begin hc_class := 21 ;
65921: LD_ADDR_OWVAR 28
65925: PUSH
65926: LD_INT 21
65928: ST_TO_ADDR
// hc_gallery :=  ;
65929: LD_ADDR_OWVAR 33
65933: PUSH
65934: LD_STRING 
65936: ST_TO_ADDR
// animal := CreateHuman ;
65937: LD_ADDR_VAR 0 12
65941: PUSH
65942: CALL_OW 44
65946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65947: LD_VAR 0 12
65951: PPUSH
65952: LD_VAR 0 8
65956: PPUSH
65957: LD_INT 0
65959: PPUSH
65960: CALL 68039 0 3
// end ;
65964: GO 65918
65966: POP
65967: POP
// if birds then
65968: LD_VAR 0 1
65972: IFFALSE 66039
// for i = 1 to birds do
65974: LD_ADDR_VAR 0 11
65978: PUSH
65979: DOUBLE
65980: LD_INT 1
65982: DEC
65983: ST_TO_ADDR
65984: LD_VAR 0 1
65988: PUSH
65989: FOR_TO
65990: IFFALSE 66037
// begin hc_class := 18 ;
65992: LD_ADDR_OWVAR 28
65996: PUSH
65997: LD_INT 18
65999: ST_TO_ADDR
// hc_gallery =  ;
66000: LD_ADDR_OWVAR 33
66004: PUSH
66005: LD_STRING 
66007: ST_TO_ADDR
// animal := CreateHuman ;
66008: LD_ADDR_VAR 0 12
66012: PUSH
66013: CALL_OW 44
66017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66018: LD_VAR 0 12
66022: PPUSH
66023: LD_VAR 0 8
66027: PPUSH
66028: LD_INT 0
66030: PPUSH
66031: CALL 68039 0 3
// end ;
66035: GO 65989
66037: POP
66038: POP
// if tigers then
66039: LD_VAR 0 2
66043: IFFALSE 66127
// for i = 1 to tigers do
66045: LD_ADDR_VAR 0 11
66049: PUSH
66050: DOUBLE
66051: LD_INT 1
66053: DEC
66054: ST_TO_ADDR
66055: LD_VAR 0 2
66059: PUSH
66060: FOR_TO
66061: IFFALSE 66125
// begin hc_class = class_tiger ;
66063: LD_ADDR_OWVAR 28
66067: PUSH
66068: LD_INT 14
66070: ST_TO_ADDR
// hc_gallery =  ;
66071: LD_ADDR_OWVAR 33
66075: PUSH
66076: LD_STRING 
66078: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66079: LD_ADDR_OWVAR 35
66083: PUSH
66084: LD_INT 7
66086: NEG
66087: PPUSH
66088: LD_INT 7
66090: PPUSH
66091: CALL_OW 12
66095: ST_TO_ADDR
// animal := CreateHuman ;
66096: LD_ADDR_VAR 0 12
66100: PUSH
66101: CALL_OW 44
66105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66106: LD_VAR 0 12
66110: PPUSH
66111: LD_VAR 0 8
66115: PPUSH
66116: LD_INT 0
66118: PPUSH
66119: CALL 68039 0 3
// end ;
66123: GO 66060
66125: POP
66126: POP
// if apemans then
66127: LD_VAR 0 3
66131: IFFALSE 66254
// for i = 1 to apemans do
66133: LD_ADDR_VAR 0 11
66137: PUSH
66138: DOUBLE
66139: LD_INT 1
66141: DEC
66142: ST_TO_ADDR
66143: LD_VAR 0 3
66147: PUSH
66148: FOR_TO
66149: IFFALSE 66252
// begin hc_class = class_apeman ;
66151: LD_ADDR_OWVAR 28
66155: PUSH
66156: LD_INT 12
66158: ST_TO_ADDR
// hc_gallery =  ;
66159: LD_ADDR_OWVAR 33
66163: PUSH
66164: LD_STRING 
66166: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66167: LD_ADDR_OWVAR 35
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PPUSH
66176: LD_INT 2
66178: PPUSH
66179: CALL_OW 12
66183: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66184: LD_ADDR_OWVAR 31
66188: PUSH
66189: LD_INT 1
66191: PPUSH
66192: LD_INT 3
66194: PPUSH
66195: CALL_OW 12
66199: PUSH
66200: LD_INT 1
66202: PPUSH
66203: LD_INT 3
66205: PPUSH
66206: CALL_OW 12
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// animal := CreateHuman ;
66223: LD_ADDR_VAR 0 12
66227: PUSH
66228: CALL_OW 44
66232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66233: LD_VAR 0 12
66237: PPUSH
66238: LD_VAR 0 8
66242: PPUSH
66243: LD_INT 0
66245: PPUSH
66246: CALL 68039 0 3
// end ;
66250: GO 66148
66252: POP
66253: POP
// if enchidnas then
66254: LD_VAR 0 4
66258: IFFALSE 66325
// for i = 1 to enchidnas do
66260: LD_ADDR_VAR 0 11
66264: PUSH
66265: DOUBLE
66266: LD_INT 1
66268: DEC
66269: ST_TO_ADDR
66270: LD_VAR 0 4
66274: PUSH
66275: FOR_TO
66276: IFFALSE 66323
// begin hc_class = 13 ;
66278: LD_ADDR_OWVAR 28
66282: PUSH
66283: LD_INT 13
66285: ST_TO_ADDR
// hc_gallery =  ;
66286: LD_ADDR_OWVAR 33
66290: PUSH
66291: LD_STRING 
66293: ST_TO_ADDR
// animal := CreateHuman ;
66294: LD_ADDR_VAR 0 12
66298: PUSH
66299: CALL_OW 44
66303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66304: LD_VAR 0 12
66308: PPUSH
66309: LD_VAR 0 8
66313: PPUSH
66314: LD_INT 0
66316: PPUSH
66317: CALL 68039 0 3
// end ;
66321: GO 66275
66323: POP
66324: POP
// if fishes then
66325: LD_VAR 0 7
66329: IFFALSE 66396
// for i = 1 to fishes do
66331: LD_ADDR_VAR 0 11
66335: PUSH
66336: DOUBLE
66337: LD_INT 1
66339: DEC
66340: ST_TO_ADDR
66341: LD_VAR 0 7
66345: PUSH
66346: FOR_TO
66347: IFFALSE 66394
// begin hc_class = 20 ;
66349: LD_ADDR_OWVAR 28
66353: PUSH
66354: LD_INT 20
66356: ST_TO_ADDR
// hc_gallery =  ;
66357: LD_ADDR_OWVAR 33
66361: PUSH
66362: LD_STRING 
66364: ST_TO_ADDR
// animal := CreateHuman ;
66365: LD_ADDR_VAR 0 12
66369: PUSH
66370: CALL_OW 44
66374: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66375: LD_VAR 0 12
66379: PPUSH
66380: LD_VAR 0 9
66384: PPUSH
66385: LD_INT 0
66387: PPUSH
66388: CALL 68039 0 3
// end ;
66392: GO 66346
66394: POP
66395: POP
// end ;
66396: LD_VAR 0 10
66400: RET
// export function WantHeal ( sci , unit ) ; begin
66401: LD_INT 0
66403: PPUSH
// if GetTaskList ( sci ) > 0 then
66404: LD_VAR 0 1
66408: PPUSH
66409: CALL_OW 437
66413: PUSH
66414: LD_INT 0
66416: GREATER
66417: IFFALSE 66489
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66419: LD_VAR 0 1
66423: PPUSH
66424: CALL_OW 437
66428: PUSH
66429: LD_INT 1
66431: ARRAY
66432: PUSH
66433: LD_INT 1
66435: ARRAY
66436: PUSH
66437: LD_STRING l
66439: EQUAL
66440: IFFALSE 66467
66442: PUSH
66443: LD_VAR 0 1
66447: PPUSH
66448: CALL_OW 437
66452: PUSH
66453: LD_INT 1
66455: ARRAY
66456: PUSH
66457: LD_INT 4
66459: ARRAY
66460: PUSH
66461: LD_VAR 0 2
66465: EQUAL
66466: AND
66467: IFFALSE 66479
// result := true else
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_INT 1
66476: ST_TO_ADDR
66477: GO 66487
// result := false ;
66479: LD_ADDR_VAR 0 3
66483: PUSH
66484: LD_INT 0
66486: ST_TO_ADDR
// end else
66487: GO 66497
// result := false ;
66489: LD_ADDR_VAR 0 3
66493: PUSH
66494: LD_INT 0
66496: ST_TO_ADDR
// end ;
66497: LD_VAR 0 3
66501: RET
// export function HealTarget ( sci ) ; begin
66502: LD_INT 0
66504: PPUSH
// if not sci then
66505: LD_VAR 0 1
66509: NOT
66510: IFFALSE 66514
// exit ;
66512: GO 66579
// result := 0 ;
66514: LD_ADDR_VAR 0 2
66518: PUSH
66519: LD_INT 0
66521: ST_TO_ADDR
// if GetTaskList ( sci ) then
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL_OW 437
66531: IFFALSE 66579
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66533: LD_VAR 0 1
66537: PPUSH
66538: CALL_OW 437
66542: PUSH
66543: LD_INT 1
66545: ARRAY
66546: PUSH
66547: LD_INT 1
66549: ARRAY
66550: PUSH
66551: LD_STRING l
66553: EQUAL
66554: IFFALSE 66579
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66556: LD_ADDR_VAR 0 2
66560: PUSH
66561: LD_VAR 0 1
66565: PPUSH
66566: CALL_OW 437
66570: PUSH
66571: LD_INT 1
66573: ARRAY
66574: PUSH
66575: LD_INT 4
66577: ARRAY
66578: ST_TO_ADDR
// end ;
66579: LD_VAR 0 2
66583: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66584: LD_INT 0
66586: PPUSH
66587: PPUSH
66588: PPUSH
66589: PPUSH
// if not base_units then
66590: LD_VAR 0 1
66594: NOT
66595: IFFALSE 66599
// exit ;
66597: GO 66686
// result := false ;
66599: LD_ADDR_VAR 0 2
66603: PUSH
66604: LD_INT 0
66606: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66607: LD_ADDR_VAR 0 5
66611: PUSH
66612: LD_VAR 0 1
66616: PPUSH
66617: LD_INT 21
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PPUSH
66627: CALL_OW 72
66631: ST_TO_ADDR
// if not tmp then
66632: LD_VAR 0 5
66636: NOT
66637: IFFALSE 66641
// exit ;
66639: GO 66686
// for i in tmp do
66641: LD_ADDR_VAR 0 3
66645: PUSH
66646: LD_VAR 0 5
66650: PUSH
66651: FOR_IN
66652: IFFALSE 66684
// begin result := EnemyInRange ( i , 22 ) ;
66654: LD_ADDR_VAR 0 2
66658: PUSH
66659: LD_VAR 0 3
66663: PPUSH
66664: LD_INT 22
66666: PPUSH
66667: CALL 64111 0 2
66671: ST_TO_ADDR
// if result then
66672: LD_VAR 0 2
66676: IFFALSE 66682
// exit ;
66678: POP
66679: POP
66680: GO 66686
// end ;
66682: GO 66651
66684: POP
66685: POP
// end ;
66686: LD_VAR 0 2
66690: RET
// export function FilterByTag ( units , tag ) ; begin
66691: LD_INT 0
66693: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66694: LD_ADDR_VAR 0 3
66698: PUSH
66699: LD_VAR 0 1
66703: PPUSH
66704: LD_INT 120
66706: PUSH
66707: LD_VAR 0 2
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PPUSH
66716: CALL_OW 72
66720: ST_TO_ADDR
// end ;
66721: LD_VAR 0 3
66725: RET
// export function IsDriver ( un ) ; begin
66726: LD_INT 0
66728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66729: LD_ADDR_VAR 0 2
66733: PUSH
66734: LD_VAR 0 1
66738: PUSH
66739: LD_INT 55
66741: PUSH
66742: EMPTY
66743: LIST
66744: PPUSH
66745: CALL_OW 69
66749: IN
66750: ST_TO_ADDR
// end ;
66751: LD_VAR 0 2
66755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66756: LD_INT 0
66758: PPUSH
66759: PPUSH
// list := [ ] ;
66760: LD_ADDR_VAR 0 5
66764: PUSH
66765: EMPTY
66766: ST_TO_ADDR
// case d of 0 :
66767: LD_VAR 0 3
66771: PUSH
66772: LD_INT 0
66774: DOUBLE
66775: EQUAL
66776: IFTRUE 66780
66778: GO 66913
66780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66781: LD_ADDR_VAR 0 5
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 4
66793: MINUS
66794: PUSH
66795: LD_VAR 0 2
66799: PUSH
66800: LD_INT 4
66802: MINUS
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: PUSH
66812: LD_VAR 0 1
66816: PUSH
66817: LD_INT 3
66819: MINUS
66820: PUSH
66821: LD_VAR 0 2
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: LD_INT 4
66841: PLUS
66842: PUSH
66843: LD_VAR 0 2
66847: PUSH
66848: LD_INT 4
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 3
66863: PLUS
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 3
66872: PLUS
66873: PUSH
66874: LD_INT 5
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: PUSH
66882: LD_VAR 0 1
66886: PUSH
66887: LD_VAR 0 2
66891: PUSH
66892: LD_INT 4
66894: PLUS
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: ST_TO_ADDR
// end ; 1 :
66911: GO 67611
66913: LD_INT 1
66915: DOUBLE
66916: EQUAL
66917: IFTRUE 66921
66919: GO 67054
66921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_VAR 0 1
66931: PUSH
66932: LD_VAR 0 2
66936: PUSH
66937: LD_INT 4
66939: MINUS
66940: PUSH
66941: LD_INT 3
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_INT 3
66956: MINUS
66957: PUSH
66958: LD_VAR 0 2
66962: PUSH
66963: LD_INT 3
66965: MINUS
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: PUSH
66975: LD_VAR 0 1
66979: PUSH
66980: LD_INT 4
66982: MINUS
66983: PUSH
66984: LD_VAR 0 2
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: PUSH
66997: LD_VAR 0 1
67001: PUSH
67002: LD_VAR 0 2
67006: PUSH
67007: LD_INT 3
67009: PLUS
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: PUSH
67019: LD_VAR 0 1
67023: PUSH
67024: LD_INT 4
67026: PLUS
67027: PUSH
67028: LD_VAR 0 2
67032: PUSH
67033: LD_INT 4
67035: PLUS
67036: PUSH
67037: LD_INT 5
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: ST_TO_ADDR
// end ; 2 :
67052: GO 67611
67054: LD_INT 2
67056: DOUBLE
67057: EQUAL
67058: IFTRUE 67062
67060: GO 67191
67062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67063: LD_ADDR_VAR 0 5
67067: PUSH
67068: LD_VAR 0 1
67072: PUSH
67073: LD_VAR 0 2
67077: PUSH
67078: LD_INT 3
67080: MINUS
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: PUSH
67090: LD_VAR 0 1
67094: PUSH
67095: LD_INT 4
67097: PLUS
67098: PUSH
67099: LD_VAR 0 2
67103: PUSH
67104: LD_INT 4
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: PUSH
67112: LD_VAR 0 1
67116: PUSH
67117: LD_VAR 0 2
67121: PUSH
67122: LD_INT 4
67124: PLUS
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: PUSH
67134: LD_VAR 0 1
67138: PUSH
67139: LD_INT 3
67141: MINUS
67142: PUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: PUSH
67156: LD_VAR 0 1
67160: PUSH
67161: LD_INT 4
67163: MINUS
67164: PUSH
67165: LD_VAR 0 2
67169: PUSH
67170: LD_INT 4
67172: MINUS
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: ST_TO_ADDR
// end ; 3 :
67189: GO 67611
67191: LD_INT 3
67193: DOUBLE
67194: EQUAL
67195: IFTRUE 67199
67197: GO 67332
67199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67200: LD_ADDR_VAR 0 5
67204: PUSH
67205: LD_VAR 0 1
67209: PUSH
67210: LD_INT 3
67212: PLUS
67213: PUSH
67214: LD_VAR 0 2
67218: PUSH
67219: LD_INT 4
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: PUSH
67227: LD_VAR 0 1
67231: PUSH
67232: LD_INT 4
67234: PLUS
67235: PUSH
67236: LD_VAR 0 2
67240: PUSH
67241: LD_INT 4
67243: PLUS
67244: PUSH
67245: LD_INT 5
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: PUSH
67253: LD_VAR 0 1
67257: PUSH
67258: LD_INT 4
67260: MINUS
67261: PUSH
67262: LD_VAR 0 2
67266: PUSH
67267: LD_INT 1
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: PUSH
67275: LD_VAR 0 1
67279: PUSH
67280: LD_VAR 0 2
67284: PUSH
67285: LD_INT 4
67287: MINUS
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: PUSH
67297: LD_VAR 0 1
67301: PUSH
67302: LD_INT 3
67304: MINUS
67305: PUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 3
67313: MINUS
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// end ; 4 :
67330: GO 67611
67332: LD_INT 4
67334: DOUBLE
67335: EQUAL
67336: IFTRUE 67340
67338: GO 67473
67340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67341: LD_ADDR_VAR 0 5
67345: PUSH
67346: LD_VAR 0 1
67350: PUSH
67351: LD_VAR 0 2
67355: PUSH
67356: LD_INT 4
67358: PLUS
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: LIST
67367: PUSH
67368: LD_VAR 0 1
67372: PUSH
67373: LD_INT 3
67375: PLUS
67376: PUSH
67377: LD_VAR 0 2
67381: PUSH
67382: LD_INT 3
67384: PLUS
67385: PUSH
67386: LD_INT 5
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: PUSH
67394: LD_VAR 0 1
67398: PUSH
67399: LD_INT 4
67401: PLUS
67402: PUSH
67403: LD_VAR 0 2
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: PUSH
67416: LD_VAR 0 1
67420: PUSH
67421: LD_VAR 0 2
67425: PUSH
67426: LD_INT 3
67428: MINUS
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: PUSH
67438: LD_VAR 0 1
67442: PUSH
67443: LD_INT 4
67445: MINUS
67446: PUSH
67447: LD_VAR 0 2
67451: PUSH
67452: LD_INT 4
67454: MINUS
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: LIST
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// end ; 5 :
67471: GO 67611
67473: LD_INT 5
67475: DOUBLE
67476: EQUAL
67477: IFTRUE 67481
67479: GO 67610
67481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67482: LD_ADDR_VAR 0 5
67486: PUSH
67487: LD_VAR 0 1
67491: PUSH
67492: LD_INT 4
67494: MINUS
67495: PUSH
67496: LD_VAR 0 2
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: LIST
67508: PUSH
67509: LD_VAR 0 1
67513: PUSH
67514: LD_VAR 0 2
67518: PUSH
67519: LD_INT 4
67521: MINUS
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: LIST
67530: PUSH
67531: LD_VAR 0 1
67535: PUSH
67536: LD_INT 4
67538: PLUS
67539: PUSH
67540: LD_VAR 0 2
67544: PUSH
67545: LD_INT 4
67547: PLUS
67548: PUSH
67549: LD_INT 5
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: PUSH
67557: LD_VAR 0 1
67561: PUSH
67562: LD_INT 3
67564: PLUS
67565: PUSH
67566: LD_VAR 0 2
67570: PUSH
67571: LD_INT 4
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: PUSH
67579: LD_VAR 0 1
67583: PUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_INT 3
67591: PLUS
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: ST_TO_ADDR
// end ; end ;
67608: GO 67611
67610: POP
// result := list ;
67611: LD_ADDR_VAR 0 4
67615: PUSH
67616: LD_VAR 0 5
67620: ST_TO_ADDR
// end ;
67621: LD_VAR 0 4
67625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
67630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67631: LD_VAR 0 1
67635: NOT
67636: IFTRUE 67664
67638: PUSH
67639: LD_VAR 0 2
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: LD_INT 4
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: IN
67662: NOT
67663: OR
67664: IFFALSE 67668
// exit ;
67666: GO 67751
// tmp := [ ] ;
67668: LD_ADDR_VAR 0 5
67672: PUSH
67673: EMPTY
67674: ST_TO_ADDR
// for i in units do
67675: LD_ADDR_VAR 0 4
67679: PUSH
67680: LD_VAR 0 1
67684: PUSH
67685: FOR_IN
67686: IFFALSE 67720
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67688: LD_ADDR_VAR 0 5
67692: PUSH
67693: LD_VAR 0 5
67697: PPUSH
67698: LD_VAR 0 4
67702: PPUSH
67703: LD_VAR 0 2
67707: PPUSH
67708: CALL_OW 259
67712: PPUSH
67713: CALL 69146 0 2
67717: ST_TO_ADDR
67718: GO 67685
67720: POP
67721: POP
// if not tmp then
67722: LD_VAR 0 5
67726: NOT
67727: IFFALSE 67731
// exit ;
67729: GO 67751
// result := SortListByListDesc ( units , tmp ) ;
67731: LD_ADDR_VAR 0 3
67735: PUSH
67736: LD_VAR 0 1
67740: PPUSH
67741: LD_VAR 0 5
67745: PPUSH
67746: CALL_OW 77
67750: ST_TO_ADDR
// end ;
67751: LD_VAR 0 3
67755: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67756: LD_INT 0
67758: PPUSH
67759: PPUSH
67760: PPUSH
// result := false ;
67761: LD_ADDR_VAR 0 3
67765: PUSH
67766: LD_INT 0
67768: ST_TO_ADDR
// if not building then
67769: LD_VAR 0 2
67773: NOT
67774: IFFALSE 67778
// exit ;
67776: GO 67922
// x := GetX ( building ) ;
67778: LD_ADDR_VAR 0 4
67782: PUSH
67783: LD_VAR 0 2
67787: PPUSH
67788: CALL_OW 250
67792: ST_TO_ADDR
// y := GetY ( building ) ;
67793: LD_ADDR_VAR 0 5
67797: PUSH
67798: LD_VAR 0 2
67802: PPUSH
67803: CALL_OW 251
67807: ST_TO_ADDR
// if not x or not y then
67808: LD_VAR 0 4
67812: NOT
67813: IFTRUE 67822
67815: PUSH
67816: LD_VAR 0 5
67820: NOT
67821: OR
67822: IFFALSE 67826
// exit ;
67824: GO 67922
// if GetTaskList ( unit ) then
67826: LD_VAR 0 1
67830: PPUSH
67831: CALL_OW 437
67835: IFFALSE 67922
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67837: LD_STRING e
67839: PUSH
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 437
67849: PUSH
67850: LD_INT 1
67852: ARRAY
67853: PUSH
67854: LD_INT 1
67856: ARRAY
67857: EQUAL
67858: IFFALSE 67885
67860: PUSH
67861: LD_VAR 0 4
67865: PUSH
67866: LD_VAR 0 1
67870: PPUSH
67871: CALL_OW 437
67875: PUSH
67876: LD_INT 1
67878: ARRAY
67879: PUSH
67880: LD_INT 2
67882: ARRAY
67883: EQUAL
67884: AND
67885: IFFALSE 67912
67887: PUSH
67888: LD_VAR 0 5
67892: PUSH
67893: LD_VAR 0 1
67897: PPUSH
67898: CALL_OW 437
67902: PUSH
67903: LD_INT 1
67905: ARRAY
67906: PUSH
67907: LD_INT 3
67909: ARRAY
67910: EQUAL
67911: AND
67912: IFFALSE 67922
// result := true end ;
67914: LD_ADDR_VAR 0 3
67918: PUSH
67919: LD_INT 1
67921: ST_TO_ADDR
// end ;
67922: LD_VAR 0 3
67926: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67927: LD_INT 0
67929: PPUSH
// result := false ;
67930: LD_ADDR_VAR 0 4
67934: PUSH
67935: LD_INT 0
67937: ST_TO_ADDR
// if GetTaskList ( unit ) then
67938: LD_VAR 0 1
67942: PPUSH
67943: CALL_OW 437
67947: IFFALSE 68034
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67949: LD_STRING M
67951: PUSH
67952: LD_VAR 0 1
67956: PPUSH
67957: CALL_OW 437
67961: PUSH
67962: LD_INT 1
67964: ARRAY
67965: PUSH
67966: LD_INT 1
67968: ARRAY
67969: EQUAL
67970: IFFALSE 67997
67972: PUSH
67973: LD_VAR 0 2
67977: PUSH
67978: LD_VAR 0 1
67982: PPUSH
67983: CALL_OW 437
67987: PUSH
67988: LD_INT 1
67990: ARRAY
67991: PUSH
67992: LD_INT 2
67994: ARRAY
67995: EQUAL
67996: AND
67997: IFFALSE 68024
67999: PUSH
68000: LD_VAR 0 3
68004: PUSH
68005: LD_VAR 0 1
68009: PPUSH
68010: CALL_OW 437
68014: PUSH
68015: LD_INT 1
68017: ARRAY
68018: PUSH
68019: LD_INT 3
68021: ARRAY
68022: EQUAL
68023: AND
68024: IFFALSE 68034
// result := true ;
68026: LD_ADDR_VAR 0 4
68030: PUSH
68031: LD_INT 1
68033: ST_TO_ADDR
// end ; end ;
68034: LD_VAR 0 4
68038: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
// if not unit or not area then
68045: LD_VAR 0 1
68049: NOT
68050: IFTRUE 68059
68052: PUSH
68053: LD_VAR 0 2
68057: NOT
68058: OR
68059: IFFALSE 68063
// exit ;
68061: GO 68239
// tmp := AreaToList ( area , i ) ;
68063: LD_ADDR_VAR 0 6
68067: PUSH
68068: LD_VAR 0 2
68072: PPUSH
68073: LD_VAR 0 5
68077: PPUSH
68078: CALL_OW 517
68082: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68083: LD_ADDR_VAR 0 5
68087: PUSH
68088: DOUBLE
68089: LD_INT 1
68091: DEC
68092: ST_TO_ADDR
68093: LD_VAR 0 6
68097: PUSH
68098: LD_INT 1
68100: ARRAY
68101: PUSH
68102: FOR_TO
68103: IFFALSE 68237
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68105: LD_ADDR_VAR 0 7
68109: PUSH
68110: LD_VAR 0 6
68114: PUSH
68115: LD_INT 1
68117: ARRAY
68118: PUSH
68119: LD_VAR 0 5
68123: ARRAY
68124: PUSH
68125: LD_VAR 0 6
68129: PUSH
68130: LD_INT 2
68132: ARRAY
68133: PUSH
68134: LD_VAR 0 5
68138: ARRAY
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68144: LD_INT 92
68146: PUSH
68147: LD_VAR 0 7
68151: PUSH
68152: LD_INT 1
68154: ARRAY
68155: PUSH
68156: LD_VAR 0 7
68160: PUSH
68161: LD_INT 2
68163: ARRAY
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: PPUSH
68174: CALL_OW 69
68178: PUSH
68179: LD_INT 0
68181: EQUAL
68182: IFFALSE 68235
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68184: LD_VAR 0 1
68188: PPUSH
68189: LD_VAR 0 7
68193: PUSH
68194: LD_INT 1
68196: ARRAY
68197: PPUSH
68198: LD_VAR 0 7
68202: PUSH
68203: LD_INT 2
68205: ARRAY
68206: PPUSH
68207: LD_VAR 0 3
68211: PPUSH
68212: CALL_OW 48
// result := IsPlaced ( unit ) ;
68216: LD_ADDR_VAR 0 4
68220: PUSH
68221: LD_VAR 0 1
68225: PPUSH
68226: CALL_OW 305
68230: ST_TO_ADDR
// exit ;
68231: POP
68232: POP
68233: GO 68239
// end ; end ;
68235: GO 68102
68237: POP
68238: POP
// end ;
68239: LD_VAR 0 4
68243: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68244: LD_INT 0
68246: PPUSH
68247: PPUSH
68248: PPUSH
// if not side or side > 8 then
68249: LD_VAR 0 1
68253: NOT
68254: IFTRUE 68266
68256: PUSH
68257: LD_VAR 0 1
68261: PUSH
68262: LD_INT 8
68264: GREATER
68265: OR
68266: IFFALSE 68270
// exit ;
68268: GO 68457
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68270: LD_ADDR_VAR 0 4
68274: PUSH
68275: LD_INT 22
68277: PUSH
68278: LD_VAR 0 1
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 21
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PPUSH
68301: CALL_OW 69
68305: ST_TO_ADDR
// if not tmp then
68306: LD_VAR 0 4
68310: NOT
68311: IFFALSE 68315
// exit ;
68313: GO 68457
// enable_addtolog := true ;
68315: LD_ADDR_OWVAR 81
68319: PUSH
68320: LD_INT 1
68322: ST_TO_ADDR
// AddToLog ( [ ) ;
68323: LD_STRING [
68325: PPUSH
68326: CALL_OW 561
// for i in tmp do
68330: LD_ADDR_VAR 0 3
68334: PUSH
68335: LD_VAR 0 4
68339: PUSH
68340: FOR_IN
68341: IFFALSE 68448
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68343: LD_STRING [
68345: PUSH
68346: LD_VAR 0 3
68350: PPUSH
68351: CALL_OW 266
68355: STR
68356: PUSH
68357: LD_STRING , 
68359: STR
68360: PUSH
68361: LD_VAR 0 3
68365: PPUSH
68366: CALL_OW 250
68370: STR
68371: PUSH
68372: LD_STRING , 
68374: STR
68375: PUSH
68376: LD_VAR 0 3
68380: PPUSH
68381: CALL_OW 251
68385: STR
68386: PUSH
68387: LD_STRING , 
68389: STR
68390: PUSH
68391: LD_VAR 0 3
68395: PPUSH
68396: CALL_OW 254
68400: STR
68401: PUSH
68402: LD_STRING , 
68404: STR
68405: PUSH
68406: LD_VAR 0 3
68410: PPUSH
68411: LD_INT 1
68413: PPUSH
68414: CALL_OW 268
68418: STR
68419: PUSH
68420: LD_STRING , 
68422: STR
68423: PUSH
68424: LD_VAR 0 3
68428: PPUSH
68429: LD_INT 2
68431: PPUSH
68432: CALL_OW 268
68436: STR
68437: PUSH
68438: LD_STRING ],
68440: STR
68441: PPUSH
68442: CALL_OW 561
// end ;
68446: GO 68340
68448: POP
68449: POP
// AddToLog ( ]; ) ;
68450: LD_STRING ];
68452: PPUSH
68453: CALL_OW 561
// end ;
68457: LD_VAR 0 2
68461: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68462: LD_INT 0
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
// if not area or not rate or not max then
68469: LD_VAR 0 1
68473: NOT
68474: IFTRUE 68483
68476: PUSH
68477: LD_VAR 0 2
68481: NOT
68482: OR
68483: IFTRUE 68492
68485: PUSH
68486: LD_VAR 0 4
68490: NOT
68491: OR
68492: IFFALSE 68496
// exit ;
68494: GO 68685
// while 1 do
68496: LD_INT 1
68498: IFFALSE 68685
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68500: LD_ADDR_VAR 0 9
68504: PUSH
68505: LD_VAR 0 1
68509: PPUSH
68510: LD_INT 1
68512: PPUSH
68513: CALL_OW 287
68517: PUSH
68518: LD_INT 10
68520: MUL
68521: ST_TO_ADDR
// r := rate / 10 ;
68522: LD_ADDR_VAR 0 7
68526: PUSH
68527: LD_VAR 0 2
68531: PUSH
68532: LD_INT 10
68534: DIVREAL
68535: ST_TO_ADDR
// time := 1 1$00 ;
68536: LD_ADDR_VAR 0 8
68540: PUSH
68541: LD_INT 2100
68543: ST_TO_ADDR
// if amount < min then
68544: LD_VAR 0 9
68548: PUSH
68549: LD_VAR 0 3
68553: LESS
68554: IFFALSE 68572
// r := r * 2 else
68556: LD_ADDR_VAR 0 7
68560: PUSH
68561: LD_VAR 0 7
68565: PUSH
68566: LD_INT 2
68568: MUL
68569: ST_TO_ADDR
68570: GO 68598
// if amount > max then
68572: LD_VAR 0 9
68576: PUSH
68577: LD_VAR 0 4
68581: GREATER
68582: IFFALSE 68598
// r := r / 2 ;
68584: LD_ADDR_VAR 0 7
68588: PUSH
68589: LD_VAR 0 7
68593: PUSH
68594: LD_INT 2
68596: DIVREAL
68597: ST_TO_ADDR
// time := time / r ;
68598: LD_ADDR_VAR 0 8
68602: PUSH
68603: LD_VAR 0 8
68607: PUSH
68608: LD_VAR 0 7
68612: DIVREAL
68613: ST_TO_ADDR
// if time < 0 then
68614: LD_VAR 0 8
68618: PUSH
68619: LD_INT 0
68621: LESS
68622: IFFALSE 68639
// time := time * - 1 ;
68624: LD_ADDR_VAR 0 8
68628: PUSH
68629: LD_VAR 0 8
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: MUL
68638: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68639: LD_VAR 0 8
68643: PUSH
68644: LD_INT 35
68646: PPUSH
68647: LD_INT 875
68649: PPUSH
68650: CALL_OW 12
68654: PLUS
68655: PPUSH
68656: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68660: LD_INT 1
68662: PPUSH
68663: LD_INT 5
68665: PPUSH
68666: CALL_OW 12
68670: PPUSH
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_INT 1
68678: PPUSH
68679: CALL_OW 55
// end ;
68683: GO 68496
// end ;
68685: LD_VAR 0 5
68689: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68690: LD_INT 0
68692: PPUSH
68693: PPUSH
68694: PPUSH
68695: PPUSH
68696: PPUSH
68697: PPUSH
68698: PPUSH
68699: PPUSH
// if not turrets or not factories then
68700: LD_VAR 0 1
68704: NOT
68705: IFTRUE 68714
68707: PUSH
68708: LD_VAR 0 2
68712: NOT
68713: OR
68714: IFFALSE 68718
// exit ;
68716: GO 69025
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68718: LD_ADDR_VAR 0 10
68722: PUSH
68723: LD_INT 5
68725: PUSH
68726: LD_INT 6
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 2
68735: PUSH
68736: LD_INT 4
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 3
68745: PUSH
68746: LD_INT 5
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 24
68760: PUSH
68761: LD_INT 25
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 23
68770: PUSH
68771: LD_INT 27
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 42
68784: PUSH
68785: LD_INT 43
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 44
68794: PUSH
68795: LD_INT 46
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 45
68804: PUSH
68805: LD_INT 47
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: LIST
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: LIST
68821: ST_TO_ADDR
// result := [ ] ;
68822: LD_ADDR_VAR 0 3
68826: PUSH
68827: EMPTY
68828: ST_TO_ADDR
// for i in turrets do
68829: LD_ADDR_VAR 0 4
68833: PUSH
68834: LD_VAR 0 1
68838: PUSH
68839: FOR_IN
68840: IFFALSE 69023
// begin nat := GetNation ( i ) ;
68842: LD_ADDR_VAR 0 7
68846: PUSH
68847: LD_VAR 0 4
68851: PPUSH
68852: CALL_OW 248
68856: ST_TO_ADDR
// weapon := 0 ;
68857: LD_ADDR_VAR 0 8
68861: PUSH
68862: LD_INT 0
68864: ST_TO_ADDR
// if not nat then
68865: LD_VAR 0 7
68869: NOT
68870: IFFALSE 68874
// continue ;
68872: GO 68839
// for j in list [ nat ] do
68874: LD_ADDR_VAR 0 5
68878: PUSH
68879: LD_VAR 0 10
68883: PUSH
68884: LD_VAR 0 7
68888: ARRAY
68889: PUSH
68890: FOR_IN
68891: IFFALSE 68932
// if GetBWeapon ( i ) = j [ 1 ] then
68893: LD_VAR 0 4
68897: PPUSH
68898: CALL_OW 269
68902: PUSH
68903: LD_VAR 0 5
68907: PUSH
68908: LD_INT 1
68910: ARRAY
68911: EQUAL
68912: IFFALSE 68930
// begin weapon := j [ 2 ] ;
68914: LD_ADDR_VAR 0 8
68918: PUSH
68919: LD_VAR 0 5
68923: PUSH
68924: LD_INT 2
68926: ARRAY
68927: ST_TO_ADDR
// break ;
68928: GO 68932
// end ;
68930: GO 68890
68932: POP
68933: POP
// if not weapon then
68934: LD_VAR 0 8
68938: NOT
68939: IFFALSE 68943
// continue ;
68941: GO 68839
// for k in factories do
68943: LD_ADDR_VAR 0 6
68947: PUSH
68948: LD_VAR 0 2
68952: PUSH
68953: FOR_IN
68954: IFFALSE 69019
// begin weapons := AvailableWeaponList ( k ) ;
68956: LD_ADDR_VAR 0 9
68960: PUSH
68961: LD_VAR 0 6
68965: PPUSH
68966: CALL_OW 478
68970: ST_TO_ADDR
// if not weapons then
68971: LD_VAR 0 9
68975: NOT
68976: IFFALSE 68980
// continue ;
68978: GO 68953
// if weapon in weapons then
68980: LD_VAR 0 8
68984: PUSH
68985: LD_VAR 0 9
68989: IN
68990: IFFALSE 69017
// begin result := [ i , weapon ] ;
68992: LD_ADDR_VAR 0 3
68996: PUSH
68997: LD_VAR 0 4
69001: PUSH
69002: LD_VAR 0 8
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: ST_TO_ADDR
// exit ;
69011: POP
69012: POP
69013: POP
69014: POP
69015: GO 69025
// end ; end ;
69017: GO 68953
69019: POP
69020: POP
// end ;
69021: GO 68839
69023: POP
69024: POP
// end ;
69025: LD_VAR 0 3
69029: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69030: LD_INT 0
69032: PPUSH
// if not side or side > 8 then
69033: LD_VAR 0 3
69037: NOT
69038: IFTRUE 69050
69040: PUSH
69041: LD_VAR 0 3
69045: PUSH
69046: LD_INT 8
69048: GREATER
69049: OR
69050: IFFALSE 69054
// exit ;
69052: GO 69113
// if not range then
69054: LD_VAR 0 4
69058: NOT
69059: IFFALSE 69070
// range := - 12 ;
69061: LD_ADDR_VAR 0 4
69065: PUSH
69066: LD_INT 12
69068: NEG
69069: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69070: LD_VAR 0 1
69074: PPUSH
69075: LD_VAR 0 2
69079: PPUSH
69080: LD_VAR 0 3
69084: PPUSH
69085: LD_VAR 0 4
69089: PPUSH
69090: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69094: LD_VAR 0 1
69098: PPUSH
69099: LD_VAR 0 2
69103: PPUSH
69104: LD_VAR 0 3
69108: PPUSH
69109: CALL_OW 331
// end ;
69113: LD_VAR 0 5
69117: RET
// export function Video ( mode ) ; begin
69118: LD_INT 0
69120: PPUSH
// ingame_video = mode ;
69121: LD_ADDR_OWVAR 52
69125: PUSH
69126: LD_VAR 0 1
69130: ST_TO_ADDR
// interface_hidden = mode ;
69131: LD_ADDR_OWVAR 54
69135: PUSH
69136: LD_VAR 0 1
69140: ST_TO_ADDR
// end ;
69141: LD_VAR 0 2
69145: RET
// export function Join ( array , element ) ; begin
69146: LD_INT 0
69148: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69149: LD_ADDR_VAR 0 3
69153: PUSH
69154: LD_VAR 0 1
69158: PPUSH
69159: LD_VAR 0 1
69163: PUSH
69164: LD_INT 1
69166: PLUS
69167: PPUSH
69168: LD_VAR 0 2
69172: PPUSH
69173: CALL_OW 1
69177: ST_TO_ADDR
// end ;
69178: LD_VAR 0 3
69182: RET
// export function JoinUnion ( array , element ) ; begin
69183: LD_INT 0
69185: PPUSH
// result := array union element ;
69186: LD_ADDR_VAR 0 3
69190: PUSH
69191: LD_VAR 0 1
69195: PUSH
69196: LD_VAR 0 2
69200: UNION
69201: ST_TO_ADDR
// end ;
69202: LD_VAR 0 3
69206: RET
// export function GetBehemoths ( side ) ; begin
69207: LD_INT 0
69209: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69210: LD_ADDR_VAR 0 2
69214: PUSH
69215: LD_INT 22
69217: PUSH
69218: LD_VAR 0 1
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 31
69229: PUSH
69230: LD_INT 25
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PPUSH
69241: CALL_OW 69
69245: ST_TO_ADDR
// end ;
69246: LD_VAR 0 2
69250: RET
// export function Shuffle ( array ) ; var i , index ; begin
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
69255: PPUSH
// result := [ ] ;
69256: LD_ADDR_VAR 0 2
69260: PUSH
69261: EMPTY
69262: ST_TO_ADDR
// if not array then
69263: LD_VAR 0 1
69267: NOT
69268: IFFALSE 69272
// exit ;
69270: GO 69371
// Randomize ;
69272: CALL_OW 10
// for i = array downto 1 do
69276: LD_ADDR_VAR 0 3
69280: PUSH
69281: DOUBLE
69282: LD_VAR 0 1
69286: INC
69287: ST_TO_ADDR
69288: LD_INT 1
69290: PUSH
69291: FOR_DOWNTO
69292: IFFALSE 69369
// begin index := rand ( 1 , array ) ;
69294: LD_ADDR_VAR 0 4
69298: PUSH
69299: LD_INT 1
69301: PPUSH
69302: LD_VAR 0 1
69306: PPUSH
69307: CALL_OW 12
69311: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69312: LD_ADDR_VAR 0 2
69316: PUSH
69317: LD_VAR 0 2
69321: PPUSH
69322: LD_VAR 0 2
69326: PUSH
69327: LD_INT 1
69329: PLUS
69330: PPUSH
69331: LD_VAR 0 1
69335: PUSH
69336: LD_VAR 0 4
69340: ARRAY
69341: PPUSH
69342: CALL_OW 2
69346: ST_TO_ADDR
// array := Delete ( array , index ) ;
69347: LD_ADDR_VAR 0 1
69351: PUSH
69352: LD_VAR 0 1
69356: PPUSH
69357: LD_VAR 0 4
69361: PPUSH
69362: CALL_OW 3
69366: ST_TO_ADDR
// end ;
69367: GO 69291
69369: POP
69370: POP
// end ;
69371: LD_VAR 0 2
69375: RET
// export function GetBaseMaterials ( base ) ; begin
69376: LD_INT 0
69378: PPUSH
// result := [ 0 , 0 , 0 ] ;
69379: LD_ADDR_VAR 0 2
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: ST_TO_ADDR
// if not base then
69398: LD_VAR 0 1
69402: NOT
69403: IFFALSE 69407
// exit ;
69405: GO 69456
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69407: LD_ADDR_VAR 0 2
69411: PUSH
69412: LD_VAR 0 1
69416: PPUSH
69417: LD_INT 1
69419: PPUSH
69420: CALL_OW 275
69424: PUSH
69425: LD_VAR 0 1
69429: PPUSH
69430: LD_INT 2
69432: PPUSH
69433: CALL_OW 275
69437: PUSH
69438: LD_VAR 0 1
69442: PPUSH
69443: LD_INT 3
69445: PPUSH
69446: CALL_OW 275
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: LIST
69455: ST_TO_ADDR
// end ;
69456: LD_VAR 0 2
69460: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69461: LD_INT 0
69463: PPUSH
69464: PPUSH
// result := array ;
69465: LD_ADDR_VAR 0 3
69469: PUSH
69470: LD_VAR 0 1
69474: ST_TO_ADDR
// if size >= result then
69475: LD_VAR 0 2
69479: PUSH
69480: LD_VAR 0 3
69484: GREATEREQUAL
69485: IFFALSE 69489
// exit ;
69487: GO 69539
// if size then
69489: LD_VAR 0 2
69493: IFFALSE 69539
// for i := array downto size do
69495: LD_ADDR_VAR 0 4
69499: PUSH
69500: DOUBLE
69501: LD_VAR 0 1
69505: INC
69506: ST_TO_ADDR
69507: LD_VAR 0 2
69511: PUSH
69512: FOR_DOWNTO
69513: IFFALSE 69537
// result := Delete ( result , result ) ;
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_VAR 0 3
69524: PPUSH
69525: LD_VAR 0 3
69529: PPUSH
69530: CALL_OW 3
69534: ST_TO_ADDR
69535: GO 69512
69537: POP
69538: POP
// end ;
69539: LD_VAR 0 3
69543: RET
// export function ComExit ( unit ) ; var tmp ; begin
69544: LD_INT 0
69546: PPUSH
69547: PPUSH
// if not IsInUnit ( unit ) then
69548: LD_VAR 0 1
69552: PPUSH
69553: CALL_OW 310
69557: NOT
69558: IFFALSE 69562
// exit ;
69560: GO 69622
// tmp := IsInUnit ( unit ) ;
69562: LD_ADDR_VAR 0 3
69566: PUSH
69567: LD_VAR 0 1
69571: PPUSH
69572: CALL_OW 310
69576: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69577: LD_VAR 0 3
69581: PPUSH
69582: CALL_OW 247
69586: PUSH
69587: LD_INT 2
69589: EQUAL
69590: IFFALSE 69603
// ComExitVehicle ( unit ) else
69592: LD_VAR 0 1
69596: PPUSH
69597: CALL_OW 121
69601: GO 69612
// ComExitBuilding ( unit ) ;
69603: LD_VAR 0 1
69607: PPUSH
69608: CALL_OW 122
// result := tmp ;
69612: LD_ADDR_VAR 0 2
69616: PUSH
69617: LD_VAR 0 3
69621: ST_TO_ADDR
// end ;
69622: LD_VAR 0 2
69626: RET
// export function ComExitAll ( units ) ; var i ; begin
69627: LD_INT 0
69629: PPUSH
69630: PPUSH
// if not units then
69631: LD_VAR 0 1
69635: NOT
69636: IFFALSE 69640
// exit ;
69638: GO 69666
// for i in units do
69640: LD_ADDR_VAR 0 3
69644: PUSH
69645: LD_VAR 0 1
69649: PUSH
69650: FOR_IN
69651: IFFALSE 69664
// ComExit ( i ) ;
69653: LD_VAR 0 3
69657: PPUSH
69658: CALL 69544 0 1
69662: GO 69650
69664: POP
69665: POP
// end ;
69666: LD_VAR 0 2
69670: RET
// export function ResetHc ; begin
69671: LD_INT 0
69673: PPUSH
// InitHc ;
69674: CALL_OW 19
// hc_importance := 0 ;
69678: LD_ADDR_OWVAR 32
69682: PUSH
69683: LD_INT 0
69685: ST_TO_ADDR
// end ;
69686: LD_VAR 0 1
69690: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69691: LD_INT 0
69693: PPUSH
69694: PPUSH
69695: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69696: LD_ADDR_VAR 0 6
69700: PUSH
69701: LD_VAR 0 1
69705: PUSH
69706: LD_VAR 0 3
69710: PLUS
69711: PUSH
69712: LD_INT 2
69714: DIV
69715: ST_TO_ADDR
// if _x < 0 then
69716: LD_VAR 0 6
69720: PUSH
69721: LD_INT 0
69723: LESS
69724: IFFALSE 69741
// _x := _x * - 1 ;
69726: LD_ADDR_VAR 0 6
69730: PUSH
69731: LD_VAR 0 6
69735: PUSH
69736: LD_INT 1
69738: NEG
69739: MUL
69740: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69741: LD_ADDR_VAR 0 7
69745: PUSH
69746: LD_VAR 0 2
69750: PUSH
69751: LD_VAR 0 4
69755: PLUS
69756: PUSH
69757: LD_INT 2
69759: DIV
69760: ST_TO_ADDR
// if _y < 0 then
69761: LD_VAR 0 7
69765: PUSH
69766: LD_INT 0
69768: LESS
69769: IFFALSE 69786
// _y := _y * - 1 ;
69771: LD_ADDR_VAR 0 7
69775: PUSH
69776: LD_VAR 0 7
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: MUL
69785: ST_TO_ADDR
// result := [ _x , _y ] ;
69786: LD_ADDR_VAR 0 5
69790: PUSH
69791: LD_VAR 0 6
69795: PUSH
69796: LD_VAR 0 7
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: ST_TO_ADDR
// end ;
69805: LD_VAR 0 5
69809: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69810: LD_INT 0
69812: PPUSH
69813: PPUSH
69814: PPUSH
69815: PPUSH
// task := GetTaskList ( unit ) ;
69816: LD_ADDR_VAR 0 7
69820: PUSH
69821: LD_VAR 0 1
69825: PPUSH
69826: CALL_OW 437
69830: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69831: LD_VAR 0 7
69835: NOT
69836: IFFALSE 69855
69838: PUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: LD_VAR 0 2
69848: PPUSH
69849: CALL_OW 308
69853: NOT
69854: AND
69855: IFFALSE 69859
// exit ;
69857: GO 69977
// if IsInArea ( unit , area ) then
69859: LD_VAR 0 1
69863: PPUSH
69864: LD_VAR 0 2
69868: PPUSH
69869: CALL_OW 308
69873: IFFALSE 69891
// begin ComMoveToArea ( unit , goAway ) ;
69875: LD_VAR 0 1
69879: PPUSH
69880: LD_VAR 0 3
69884: PPUSH
69885: CALL_OW 113
// exit ;
69889: GO 69977
// end ; if task [ 1 ] [ 1 ] <> M then
69891: LD_VAR 0 7
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: PUSH
69900: LD_INT 1
69902: ARRAY
69903: PUSH
69904: LD_STRING M
69906: NONEQUAL
69907: IFFALSE 69911
// exit ;
69909: GO 69977
// x := task [ 1 ] [ 2 ] ;
69911: LD_ADDR_VAR 0 5
69915: PUSH
69916: LD_VAR 0 7
69920: PUSH
69921: LD_INT 1
69923: ARRAY
69924: PUSH
69925: LD_INT 2
69927: ARRAY
69928: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69929: LD_ADDR_VAR 0 6
69933: PUSH
69934: LD_VAR 0 7
69938: PUSH
69939: LD_INT 1
69941: ARRAY
69942: PUSH
69943: LD_INT 3
69945: ARRAY
69946: ST_TO_ADDR
// if InArea ( x , y , area ) then
69947: LD_VAR 0 5
69951: PPUSH
69952: LD_VAR 0 6
69956: PPUSH
69957: LD_VAR 0 2
69961: PPUSH
69962: CALL_OW 309
69966: IFFALSE 69977
// ComStop ( unit ) ;
69968: LD_VAR 0 1
69972: PPUSH
69973: CALL_OW 141
// end ;
69977: LD_VAR 0 4
69981: RET
// export function Abs ( value ) ; begin
69982: LD_INT 0
69984: PPUSH
// result := value ;
69985: LD_ADDR_VAR 0 2
69989: PUSH
69990: LD_VAR 0 1
69994: ST_TO_ADDR
// if value < 0 then
69995: LD_VAR 0 1
69999: PUSH
70000: LD_INT 0
70002: LESS
70003: IFFALSE 70020
// result := value * - 1 ;
70005: LD_ADDR_VAR 0 2
70009: PUSH
70010: LD_VAR 0 1
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: MUL
70019: ST_TO_ADDR
// end ;
70020: LD_VAR 0 2
70024: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70025: LD_INT 0
70027: PPUSH
70028: PPUSH
70029: PPUSH
70030: PPUSH
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
// if not unit or not building then
70035: LD_VAR 0 1
70039: NOT
70040: IFTRUE 70049
70042: PUSH
70043: LD_VAR 0 2
70047: NOT
70048: OR
70049: IFFALSE 70053
// exit ;
70051: GO 70281
// x := GetX ( building ) ;
70053: LD_ADDR_VAR 0 4
70057: PUSH
70058: LD_VAR 0 2
70062: PPUSH
70063: CALL_OW 250
70067: ST_TO_ADDR
// y := GetY ( building ) ;
70068: LD_ADDR_VAR 0 6
70072: PUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: CALL_OW 251
70082: ST_TO_ADDR
// d := GetDir ( building ) ;
70083: LD_ADDR_VAR 0 8
70087: PUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: CALL_OW 254
70097: ST_TO_ADDR
// r := 4 ;
70098: LD_ADDR_VAR 0 9
70102: PUSH
70103: LD_INT 4
70105: ST_TO_ADDR
// for i := 1 to 5 do
70106: LD_ADDR_VAR 0 10
70110: PUSH
70111: DOUBLE
70112: LD_INT 1
70114: DEC
70115: ST_TO_ADDR
70116: LD_INT 5
70118: PUSH
70119: FOR_TO
70120: IFFALSE 70279
// begin _x := ShiftX ( x , d , r + i ) ;
70122: LD_ADDR_VAR 0 5
70126: PUSH
70127: LD_VAR 0 4
70131: PPUSH
70132: LD_VAR 0 8
70136: PPUSH
70137: LD_VAR 0 9
70141: PUSH
70142: LD_VAR 0 10
70146: PLUS
70147: PPUSH
70148: CALL_OW 272
70152: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70153: LD_ADDR_VAR 0 7
70157: PUSH
70158: LD_VAR 0 6
70162: PPUSH
70163: LD_VAR 0 8
70167: PPUSH
70168: LD_VAR 0 9
70172: PUSH
70173: LD_VAR 0 10
70177: PLUS
70178: PPUSH
70179: CALL_OW 273
70183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70184: LD_VAR 0 5
70188: PPUSH
70189: LD_VAR 0 7
70193: PPUSH
70194: CALL_OW 488
70198: IFFALSE 70233
70200: PUSH
70201: LD_VAR 0 5
70205: PPUSH
70206: LD_VAR 0 7
70210: PPUSH
70211: CALL_OW 428
70215: PPUSH
70216: CALL_OW 247
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: LD_INT 2
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: IN
70231: NOT
70232: AND
70233: IFFALSE 70277
// begin ComMoveXY ( unit , _x , _y ) ;
70235: LD_VAR 0 1
70239: PPUSH
70240: LD_VAR 0 5
70244: PPUSH
70245: LD_VAR 0 7
70249: PPUSH
70250: CALL_OW 111
// result := [ _x , _y ] ;
70254: LD_ADDR_VAR 0 3
70258: PUSH
70259: LD_VAR 0 5
70263: PUSH
70264: LD_VAR 0 7
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: ST_TO_ADDR
// exit ;
70273: POP
70274: POP
70275: GO 70281
// end ; end ;
70277: GO 70119
70279: POP
70280: POP
// end ;
70281: LD_VAR 0 3
70285: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70286: LD_INT 0
70288: PPUSH
70289: PPUSH
70290: PPUSH
// result := 0 ;
70291: LD_ADDR_VAR 0 3
70295: PUSH
70296: LD_INT 0
70298: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70299: LD_VAR 0 1
70303: PUSH
70304: LD_INT 0
70306: LESS
70307: IFTRUE 70319
70309: PUSH
70310: LD_VAR 0 1
70314: PUSH
70315: LD_INT 8
70317: GREATER
70318: OR
70319: IFTRUE 70331
70321: PUSH
70322: LD_VAR 0 2
70326: PUSH
70327: LD_INT 0
70329: LESS
70330: OR
70331: IFTRUE 70343
70333: PUSH
70334: LD_VAR 0 2
70338: PUSH
70339: LD_INT 8
70341: GREATER
70342: OR
70343: IFFALSE 70347
// exit ;
70345: GO 70422
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70347: LD_ADDR_VAR 0 4
70351: PUSH
70352: LD_INT 22
70354: PUSH
70355: LD_VAR 0 2
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PPUSH
70364: CALL_OW 69
70368: PUSH
70369: FOR_IN
70370: IFFALSE 70420
// begin un := UnitShoot ( i ) ;
70372: LD_ADDR_VAR 0 5
70376: PUSH
70377: LD_VAR 0 4
70381: PPUSH
70382: CALL_OW 504
70386: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70387: LD_VAR 0 5
70391: PPUSH
70392: CALL_OW 255
70396: PUSH
70397: LD_VAR 0 1
70401: EQUAL
70402: IFFALSE 70418
// begin result := un ;
70404: LD_ADDR_VAR 0 3
70408: PUSH
70409: LD_VAR 0 5
70413: ST_TO_ADDR
// exit ;
70414: POP
70415: POP
70416: GO 70422
// end ; end ;
70418: GO 70369
70420: POP
70421: POP
// end ;
70422: LD_VAR 0 3
70426: RET
// export function GetCargoBay ( units ) ; begin
70427: LD_INT 0
70429: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70430: LD_ADDR_VAR 0 2
70434: PUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: LD_INT 2
70442: PUSH
70443: LD_INT 34
70445: PUSH
70446: LD_INT 12
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 34
70455: PUSH
70456: LD_INT 51
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 34
70465: PUSH
70466: LD_INT 32
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 34
70475: PUSH
70476: LD_INT 89
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: PPUSH
70490: CALL_OW 72
70494: ST_TO_ADDR
// end ;
70495: LD_VAR 0 2
70499: RET
// export function Negate ( value ) ; begin
70500: LD_INT 0
70502: PPUSH
// result := not value ;
70503: LD_ADDR_VAR 0 2
70507: PUSH
70508: LD_VAR 0 1
70512: NOT
70513: ST_TO_ADDR
// end ;
70514: LD_VAR 0 2
70518: RET
// export function Inc ( value ) ; begin
70519: LD_INT 0
70521: PPUSH
// result := value + 1 ;
70522: LD_ADDR_VAR 0 2
70526: PUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_INT 1
70534: PLUS
70535: ST_TO_ADDR
// end ;
70536: LD_VAR 0 2
70540: RET
// export function Dec ( value ) ; begin
70541: LD_INT 0
70543: PPUSH
// result := value - 1 ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_VAR 0 1
70553: PUSH
70554: LD_INT 1
70556: MINUS
70557: ST_TO_ADDR
// end ;
70558: LD_VAR 0 2
70562: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70563: LD_INT 0
70565: PPUSH
70566: PPUSH
70567: PPUSH
70568: PPUSH
70569: PPUSH
70570: PPUSH
70571: PPUSH
70572: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70573: LD_VAR 0 1
70577: PPUSH
70578: LD_VAR 0 2
70582: PPUSH
70583: CALL_OW 488
70587: NOT
70588: IFTRUE 70607
70590: PUSH
70591: LD_VAR 0 3
70595: PPUSH
70596: LD_VAR 0 4
70600: PPUSH
70601: CALL_OW 488
70605: NOT
70606: OR
70607: IFFALSE 70620
// begin result := - 1 ;
70609: LD_ADDR_VAR 0 5
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: ST_TO_ADDR
// exit ;
70618: GO 70855
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70620: LD_ADDR_VAR 0 12
70624: PUSH
70625: LD_VAR 0 1
70629: PPUSH
70630: LD_VAR 0 2
70634: PPUSH
70635: LD_VAR 0 3
70639: PPUSH
70640: LD_VAR 0 4
70644: PPUSH
70645: CALL 69691 0 4
70649: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70650: LD_ADDR_VAR 0 11
70654: PUSH
70655: LD_VAR 0 1
70659: PPUSH
70660: LD_VAR 0 2
70664: PPUSH
70665: LD_VAR 0 12
70669: PUSH
70670: LD_INT 1
70672: ARRAY
70673: PPUSH
70674: LD_VAR 0 12
70678: PUSH
70679: LD_INT 2
70681: ARRAY
70682: PPUSH
70683: CALL_OW 298
70687: ST_TO_ADDR
// distance := 9999 ;
70688: LD_ADDR_VAR 0 10
70692: PUSH
70693: LD_INT 9999
70695: ST_TO_ADDR
// for i := 0 to 5 do
70696: LD_ADDR_VAR 0 6
70700: PUSH
70701: DOUBLE
70702: LD_INT 0
70704: DEC
70705: ST_TO_ADDR
70706: LD_INT 5
70708: PUSH
70709: FOR_TO
70710: IFFALSE 70853
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70712: LD_ADDR_VAR 0 7
70716: PUSH
70717: LD_VAR 0 1
70721: PPUSH
70722: LD_VAR 0 6
70726: PPUSH
70727: LD_VAR 0 11
70731: PPUSH
70732: CALL_OW 272
70736: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70737: LD_ADDR_VAR 0 8
70741: PUSH
70742: LD_VAR 0 2
70746: PPUSH
70747: LD_VAR 0 6
70751: PPUSH
70752: LD_VAR 0 11
70756: PPUSH
70757: CALL_OW 273
70761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70762: LD_VAR 0 7
70766: PPUSH
70767: LD_VAR 0 8
70771: PPUSH
70772: CALL_OW 488
70776: NOT
70777: IFFALSE 70781
// continue ;
70779: GO 70709
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70781: LD_ADDR_VAR 0 9
70785: PUSH
70786: LD_VAR 0 12
70790: PUSH
70791: LD_INT 1
70793: ARRAY
70794: PPUSH
70795: LD_VAR 0 12
70799: PUSH
70800: LD_INT 2
70802: ARRAY
70803: PPUSH
70804: LD_VAR 0 7
70808: PPUSH
70809: LD_VAR 0 8
70813: PPUSH
70814: CALL_OW 298
70818: ST_TO_ADDR
// if tmp < distance then
70819: LD_VAR 0 9
70823: PUSH
70824: LD_VAR 0 10
70828: LESS
70829: IFFALSE 70851
// begin result := i ;
70831: LD_ADDR_VAR 0 5
70835: PUSH
70836: LD_VAR 0 6
70840: ST_TO_ADDR
// distance := tmp ;
70841: LD_ADDR_VAR 0 10
70845: PUSH
70846: LD_VAR 0 9
70850: ST_TO_ADDR
// end ; end ;
70851: GO 70709
70853: POP
70854: POP
// end ;
70855: LD_VAR 0 5
70859: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70860: LD_INT 0
70862: PPUSH
70863: PPUSH
// if not driver or not IsInUnit ( driver ) then
70864: LD_VAR 0 1
70868: NOT
70869: IFTRUE 70883
70871: PUSH
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 310
70881: NOT
70882: OR
70883: IFFALSE 70887
// exit ;
70885: GO 70977
// vehicle := IsInUnit ( driver ) ;
70887: LD_ADDR_VAR 0 3
70891: PUSH
70892: LD_VAR 0 1
70896: PPUSH
70897: CALL_OW 310
70901: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70902: LD_VAR 0 1
70906: PPUSH
70907: LD_STRING \
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: LD_INT 0
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: PUSH
70937: LD_STRING E
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_VAR 0 3
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PPUSH
70973: CALL_OW 446
// end ;
70977: LD_VAR 0 2
70981: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70982: LD_INT 0
70984: PPUSH
70985: PPUSH
// if not driver or not IsInUnit ( driver ) then
70986: LD_VAR 0 1
70990: NOT
70991: IFTRUE 71005
70993: PUSH
70994: LD_VAR 0 1
70998: PPUSH
70999: CALL_OW 310
71003: NOT
71004: OR
71005: IFFALSE 71009
// exit ;
71007: GO 71099
// vehicle := IsInUnit ( driver ) ;
71009: LD_ADDR_VAR 0 3
71013: PUSH
71014: LD_VAR 0 1
71018: PPUSH
71019: CALL_OW 310
71023: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71024: LD_VAR 0 1
71028: PPUSH
71029: LD_STRING \
71031: PUSH
71032: LD_INT 0
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: PUSH
71059: LD_STRING E
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: LD_VAR 0 3
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PPUSH
71095: CALL_OW 447
// end ;
71099: LD_VAR 0 2
71103: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71104: LD_INT 0
71106: PPUSH
71107: PPUSH
71108: PPUSH
// tmp := [ ] ;
71109: LD_ADDR_VAR 0 5
71113: PUSH
71114: EMPTY
71115: ST_TO_ADDR
// for i in units do
71116: LD_ADDR_VAR 0 4
71120: PUSH
71121: LD_VAR 0 1
71125: PUSH
71126: FOR_IN
71127: IFFALSE 71165
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71129: LD_ADDR_VAR 0 5
71133: PUSH
71134: LD_VAR 0 5
71138: PPUSH
71139: LD_VAR 0 5
71143: PUSH
71144: LD_INT 1
71146: PLUS
71147: PPUSH
71148: LD_VAR 0 4
71152: PPUSH
71153: CALL_OW 256
71157: PPUSH
71158: CALL_OW 2
71162: ST_TO_ADDR
71163: GO 71126
71165: POP
71166: POP
// if not tmp then
71167: LD_VAR 0 5
71171: NOT
71172: IFFALSE 71176
// exit ;
71174: GO 71224
// if asc then
71176: LD_VAR 0 2
71180: IFFALSE 71204
// result := SortListByListAsc ( units , tmp ) else
71182: LD_ADDR_VAR 0 3
71186: PUSH
71187: LD_VAR 0 1
71191: PPUSH
71192: LD_VAR 0 5
71196: PPUSH
71197: CALL_OW 76
71201: ST_TO_ADDR
71202: GO 71224
// result := SortListByListDesc ( units , tmp ) ;
71204: LD_ADDR_VAR 0 3
71208: PUSH
71209: LD_VAR 0 1
71213: PPUSH
71214: LD_VAR 0 5
71218: PPUSH
71219: CALL_OW 77
71223: ST_TO_ADDR
// end ;
71224: LD_VAR 0 3
71228: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71229: LD_INT 0
71231: PPUSH
71232: PPUSH
// task := GetTaskList ( mech ) ;
71233: LD_ADDR_VAR 0 4
71237: PUSH
71238: LD_VAR 0 1
71242: PPUSH
71243: CALL_OW 437
71247: ST_TO_ADDR
// if not task then
71248: LD_VAR 0 4
71252: NOT
71253: IFFALSE 71257
// exit ;
71255: GO 71301
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71257: LD_ADDR_VAR 0 3
71261: PUSH
71262: LD_VAR 0 4
71266: PUSH
71267: LD_INT 1
71269: ARRAY
71270: PUSH
71271: LD_INT 1
71273: ARRAY
71274: PUSH
71275: LD_STRING r
71277: EQUAL
71278: IFFALSE 71300
71280: PUSH
71281: LD_VAR 0 4
71285: PUSH
71286: LD_INT 1
71288: ARRAY
71289: PUSH
71290: LD_INT 4
71292: ARRAY
71293: PUSH
71294: LD_VAR 0 2
71298: EQUAL
71299: AND
71300: ST_TO_ADDR
// end ;
71301: LD_VAR 0 3
71305: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71306: LD_INT 0
71308: PPUSH
// SetDir ( unit , d ) ;
71309: LD_VAR 0 1
71313: PPUSH
71314: LD_VAR 0 4
71318: PPUSH
71319: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
71323: LD_ADDR_VAR 0 6
71327: PUSH
71328: LD_VAR 0 1
71332: PPUSH
71333: LD_VAR 0 2
71337: PPUSH
71338: LD_VAR 0 3
71342: PPUSH
71343: LD_VAR 0 5
71347: PPUSH
71348: CALL_OW 48
71352: ST_TO_ADDR
// end ;
71353: LD_VAR 0 6
71357: RET
// export function ToNaturalNumber ( number ) ; begin
71358: LD_INT 0
71360: PPUSH
// result := number div 1 ;
71361: LD_ADDR_VAR 0 2
71365: PUSH
71366: LD_VAR 0 1
71370: PUSH
71371: LD_INT 1
71373: DIV
71374: ST_TO_ADDR
// if number < 0 then
71375: LD_VAR 0 1
71379: PUSH
71380: LD_INT 0
71382: LESS
71383: IFFALSE 71393
// result := 0 ;
71385: LD_ADDR_VAR 0 2
71389: PUSH
71390: LD_INT 0
71392: ST_TO_ADDR
// end ;
71393: LD_VAR 0 2
71397: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
71398: LD_INT 0
71400: PPUSH
71401: PPUSH
71402: PPUSH
// if not buildings then
71403: LD_VAR 0 1
71407: NOT
71408: IFFALSE 71412
// exit ;
71410: GO 71527
// tmp := [ ] ;
71412: LD_ADDR_VAR 0 5
71416: PUSH
71417: EMPTY
71418: ST_TO_ADDR
// for b in buildings do
71419: LD_ADDR_VAR 0 4
71423: PUSH
71424: LD_VAR 0 1
71428: PUSH
71429: FOR_IN
71430: IFFALSE 71468
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
71432: LD_ADDR_VAR 0 5
71436: PUSH
71437: LD_VAR 0 5
71441: PPUSH
71442: LD_VAR 0 5
71446: PUSH
71447: LD_INT 1
71449: PLUS
71450: PPUSH
71451: LD_VAR 0 4
71455: PPUSH
71456: CALL_OW 266
71460: PPUSH
71461: CALL_OW 1
71465: ST_TO_ADDR
71466: GO 71429
71468: POP
71469: POP
// if not tmp then
71470: LD_VAR 0 5
71474: NOT
71475: IFFALSE 71479
// exit ;
71477: GO 71527
// if asc then
71479: LD_VAR 0 2
71483: IFFALSE 71507
// result := SortListByListAsc ( buildings , tmp ) else
71485: LD_ADDR_VAR 0 3
71489: PUSH
71490: LD_VAR 0 1
71494: PPUSH
71495: LD_VAR 0 5
71499: PPUSH
71500: CALL_OW 76
71504: ST_TO_ADDR
71505: GO 71527
// result := SortListByListDesc ( buildings , tmp ) ;
71507: LD_ADDR_VAR 0 3
71511: PUSH
71512: LD_VAR 0 1
71516: PPUSH
71517: LD_VAR 0 5
71521: PPUSH
71522: CALL_OW 77
71526: ST_TO_ADDR
// end ;
71527: LD_VAR 0 3
71531: RET
// export function SortByClass ( units , class ) ; var un ; begin
71532: LD_INT 0
71534: PPUSH
71535: PPUSH
// if not units or not class then
71536: LD_VAR 0 1
71540: NOT
71541: IFTRUE 71550
71543: PUSH
71544: LD_VAR 0 2
71548: NOT
71549: OR
71550: IFFALSE 71554
// exit ;
71552: GO 71649
// result := [ ] ;
71554: LD_ADDR_VAR 0 3
71558: PUSH
71559: EMPTY
71560: ST_TO_ADDR
// for un in units do
71561: LD_ADDR_VAR 0 4
71565: PUSH
71566: LD_VAR 0 1
71570: PUSH
71571: FOR_IN
71572: IFFALSE 71647
// if GetClass ( un ) = class then
71574: LD_VAR 0 4
71578: PPUSH
71579: CALL_OW 257
71583: PUSH
71584: LD_VAR 0 2
71588: EQUAL
71589: IFFALSE 71616
// result := Insert ( result , 1 , un ) else
71591: LD_ADDR_VAR 0 3
71595: PUSH
71596: LD_VAR 0 3
71600: PPUSH
71601: LD_INT 1
71603: PPUSH
71604: LD_VAR 0 4
71608: PPUSH
71609: CALL_OW 2
71613: ST_TO_ADDR
71614: GO 71645
// result := Replace ( result , result + 1 , un ) ;
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: LD_VAR 0 3
71625: PPUSH
71626: LD_VAR 0 3
71630: PUSH
71631: LD_INT 1
71633: PLUS
71634: PPUSH
71635: LD_VAR 0 4
71639: PPUSH
71640: CALL_OW 1
71644: ST_TO_ADDR
71645: GO 71571
71647: POP
71648: POP
// end ;
71649: LD_VAR 0 3
71653: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71654: LD_INT 0
71656: PPUSH
71657: PPUSH
71658: PPUSH
71659: PPUSH
71660: PPUSH
71661: PPUSH
71662: PPUSH
// result := [ ] ;
71663: LD_ADDR_VAR 0 4
71667: PUSH
71668: EMPTY
71669: ST_TO_ADDR
// if x - r < 0 then
71670: LD_VAR 0 1
71674: PUSH
71675: LD_VAR 0 3
71679: MINUS
71680: PUSH
71681: LD_INT 0
71683: LESS
71684: IFFALSE 71696
// min_x := 0 else
71686: LD_ADDR_VAR 0 8
71690: PUSH
71691: LD_INT 0
71693: ST_TO_ADDR
71694: GO 71712
// min_x := x - r ;
71696: LD_ADDR_VAR 0 8
71700: PUSH
71701: LD_VAR 0 1
71705: PUSH
71706: LD_VAR 0 3
71710: MINUS
71711: ST_TO_ADDR
// if y - r < 0 then
71712: LD_VAR 0 2
71716: PUSH
71717: LD_VAR 0 3
71721: MINUS
71722: PUSH
71723: LD_INT 0
71725: LESS
71726: IFFALSE 71738
// min_y := 0 else
71728: LD_ADDR_VAR 0 7
71732: PUSH
71733: LD_INT 0
71735: ST_TO_ADDR
71736: GO 71754
// min_y := y - r ;
71738: LD_ADDR_VAR 0 7
71742: PUSH
71743: LD_VAR 0 2
71747: PUSH
71748: LD_VAR 0 3
71752: MINUS
71753: ST_TO_ADDR
// max_x := x + r ;
71754: LD_ADDR_VAR 0 9
71758: PUSH
71759: LD_VAR 0 1
71763: PUSH
71764: LD_VAR 0 3
71768: PLUS
71769: ST_TO_ADDR
// max_y := y + r ;
71770: LD_ADDR_VAR 0 10
71774: PUSH
71775: LD_VAR 0 2
71779: PUSH
71780: LD_VAR 0 3
71784: PLUS
71785: ST_TO_ADDR
// for _x = min_x to max_x do
71786: LD_ADDR_VAR 0 5
71790: PUSH
71791: DOUBLE
71792: LD_VAR 0 8
71796: DEC
71797: ST_TO_ADDR
71798: LD_VAR 0 9
71802: PUSH
71803: FOR_TO
71804: IFFALSE 71905
// for _y = min_y to max_y do
71806: LD_ADDR_VAR 0 6
71810: PUSH
71811: DOUBLE
71812: LD_VAR 0 7
71816: DEC
71817: ST_TO_ADDR
71818: LD_VAR 0 10
71822: PUSH
71823: FOR_TO
71824: IFFALSE 71901
// begin if not ValidHex ( _x , _y ) then
71826: LD_VAR 0 5
71830: PPUSH
71831: LD_VAR 0 6
71835: PPUSH
71836: CALL_OW 488
71840: NOT
71841: IFFALSE 71845
// continue ;
71843: GO 71823
// if GetResourceTypeXY ( _x , _y ) then
71845: LD_VAR 0 5
71849: PPUSH
71850: LD_VAR 0 6
71854: PPUSH
71855: CALL_OW 283
71859: IFFALSE 71899
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71861: LD_ADDR_VAR 0 4
71865: PUSH
71866: LD_VAR 0 4
71870: PPUSH
71871: LD_VAR 0 4
71875: PUSH
71876: LD_INT 1
71878: PLUS
71879: PPUSH
71880: LD_VAR 0 5
71884: PUSH
71885: LD_VAR 0 6
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PPUSH
71894: CALL_OW 1
71898: ST_TO_ADDR
// end ;
71899: GO 71823
71901: POP
71902: POP
71903: GO 71803
71905: POP
71906: POP
// end ;
71907: LD_VAR 0 4
71911: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71912: LD_INT 0
71914: PPUSH
71915: PPUSH
71916: PPUSH
71917: PPUSH
71918: PPUSH
71919: PPUSH
71920: PPUSH
71921: PPUSH
// if not units then
71922: LD_VAR 0 1
71926: NOT
71927: IFFALSE 71931
// exit ;
71929: GO 72463
// result := UnitFilter ( units , [ f_ok ] ) ;
71931: LD_ADDR_VAR 0 3
71935: PUSH
71936: LD_VAR 0 1
71940: PPUSH
71941: LD_INT 50
71943: PUSH
71944: EMPTY
71945: LIST
71946: PPUSH
71947: CALL_OW 72
71951: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71952: LD_ADDR_VAR 0 8
71956: PUSH
71957: LD_VAR 0 1
71961: PUSH
71962: LD_INT 1
71964: ARRAY
71965: PPUSH
71966: CALL_OW 255
71970: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71971: LD_ADDR_VAR 0 10
71975: PUSH
71976: LD_INT 29
71978: PUSH
71979: LD_INT 91
71981: PUSH
71982: LD_INT 49
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: ST_TO_ADDR
// if not result then
71990: LD_VAR 0 3
71994: NOT
71995: IFFALSE 71999
// exit ;
71997: GO 72463
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71999: LD_ADDR_VAR 0 5
72003: PUSH
72004: LD_INT 81
72006: PUSH
72007: LD_VAR 0 8
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PPUSH
72016: CALL_OW 69
72020: ST_TO_ADDR
// for i in result do
72021: LD_ADDR_VAR 0 4
72025: PUSH
72026: LD_VAR 0 3
72030: PUSH
72031: FOR_IN
72032: IFFALSE 72461
// begin tag := GetTag ( i ) + 1 ;
72034: LD_ADDR_VAR 0 9
72038: PUSH
72039: LD_VAR 0 4
72043: PPUSH
72044: CALL_OW 110
72048: PUSH
72049: LD_INT 1
72051: PLUS
72052: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
72053: LD_ADDR_VAR 0 7
72057: PUSH
72058: LD_VAR 0 4
72062: PPUSH
72063: CALL_OW 250
72067: PPUSH
72068: LD_VAR 0 4
72072: PPUSH
72073: CALL_OW 251
72077: PPUSH
72078: LD_INT 4
72080: PPUSH
72081: CALL 71654 0 3
72085: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
72086: LD_VAR 0 4
72090: PPUSH
72091: CALL_OW 247
72095: PUSH
72096: LD_INT 2
72098: EQUAL
72099: IFFALSE 72111
72101: PUSH
72102: LD_VAR 0 7
72106: PUSH
72107: LD_INT 2
72109: GREATER
72110: AND
72111: IFFALSE 72131
72113: PUSH
72114: LD_VAR 0 4
72118: PPUSH
72119: CALL_OW 264
72123: PUSH
72124: LD_VAR 0 10
72128: IN
72129: NOT
72130: AND
72131: IFFALSE 72170
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72133: LD_VAR 0 4
72137: PPUSH
72138: LD_VAR 0 7
72142: PUSH
72143: LD_INT 1
72145: ARRAY
72146: PUSH
72147: LD_INT 1
72149: ARRAY
72150: PPUSH
72151: LD_VAR 0 7
72155: PUSH
72156: LD_INT 1
72158: ARRAY
72159: PUSH
72160: LD_INT 2
72162: ARRAY
72163: PPUSH
72164: CALL_OW 116
72168: GO 72459
// if path > tag then
72170: LD_VAR 0 2
72174: PUSH
72175: LD_VAR 0 9
72179: GREATER
72180: IFFALSE 72388
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72182: LD_ADDR_VAR 0 6
72186: PUSH
72187: LD_VAR 0 5
72191: PPUSH
72192: LD_INT 91
72194: PUSH
72195: LD_VAR 0 4
72199: PUSH
72200: LD_INT 8
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: PPUSH
72208: CALL_OW 72
72212: ST_TO_ADDR
// if nearEnemy then
72213: LD_VAR 0 6
72217: IFFALSE 72286
// begin if GetWeapon ( i ) = ru_time_lapser then
72219: LD_VAR 0 4
72223: PPUSH
72224: CALL_OW 264
72228: PUSH
72229: LD_INT 49
72231: EQUAL
72232: IFFALSE 72260
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72234: LD_VAR 0 4
72238: PPUSH
72239: LD_VAR 0 6
72243: PPUSH
72244: LD_VAR 0 4
72248: PPUSH
72249: CALL_OW 74
72253: PPUSH
72254: CALL_OW 112
72258: GO 72284
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72260: LD_VAR 0 4
72264: PPUSH
72265: LD_VAR 0 6
72269: PPUSH
72270: LD_VAR 0 4
72274: PPUSH
72275: CALL_OW 74
72279: PPUSH
72280: CALL 73544 0 2
// end else
72284: GO 72386
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72286: LD_VAR 0 4
72290: PPUSH
72291: LD_VAR 0 2
72295: PUSH
72296: LD_VAR 0 9
72300: ARRAY
72301: PUSH
72302: LD_INT 1
72304: ARRAY
72305: PPUSH
72306: LD_VAR 0 2
72310: PUSH
72311: LD_VAR 0 9
72315: ARRAY
72316: PUSH
72317: LD_INT 2
72319: ARRAY
72320: PPUSH
72321: CALL_OW 297
72325: PUSH
72326: LD_INT 6
72328: GREATER
72329: IFFALSE 72372
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72331: LD_VAR 0 4
72335: PPUSH
72336: LD_VAR 0 2
72340: PUSH
72341: LD_VAR 0 9
72345: ARRAY
72346: PUSH
72347: LD_INT 1
72349: ARRAY
72350: PPUSH
72351: LD_VAR 0 2
72355: PUSH
72356: LD_VAR 0 9
72360: ARRAY
72361: PUSH
72362: LD_INT 2
72364: ARRAY
72365: PPUSH
72366: CALL_OW 114
72370: GO 72386
// SetTag ( i , tag ) ;
72372: LD_VAR 0 4
72376: PPUSH
72377: LD_VAR 0 9
72381: PPUSH
72382: CALL_OW 109
// end else
72386: GO 72459
// if enemy then
72388: LD_VAR 0 5
72392: IFFALSE 72459
// begin if GetWeapon ( i ) = ru_time_lapser then
72394: LD_VAR 0 4
72398: PPUSH
72399: CALL_OW 264
72403: PUSH
72404: LD_INT 49
72406: EQUAL
72407: IFFALSE 72435
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72409: LD_VAR 0 4
72413: PPUSH
72414: LD_VAR 0 5
72418: PPUSH
72419: LD_VAR 0 4
72423: PPUSH
72424: CALL_OW 74
72428: PPUSH
72429: CALL_OW 112
72433: GO 72459
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72435: LD_VAR 0 4
72439: PPUSH
72440: LD_VAR 0 5
72444: PPUSH
72445: LD_VAR 0 4
72449: PPUSH
72450: CALL_OW 74
72454: PPUSH
72455: CALL 73544 0 2
// end ; end ;
72459: GO 72031
72461: POP
72462: POP
// end ;
72463: LD_VAR 0 3
72467: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72468: LD_INT 0
72470: PPUSH
72471: PPUSH
72472: PPUSH
// if not unit or IsInUnit ( unit ) then
72473: LD_VAR 0 1
72477: NOT
72478: IFTRUE 72491
72480: PUSH
72481: LD_VAR 0 1
72485: PPUSH
72486: CALL_OW 310
72490: OR
72491: IFFALSE 72495
// exit ;
72493: GO 72586
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72495: LD_ADDR_VAR 0 4
72499: PUSH
72500: LD_VAR 0 1
72504: PPUSH
72505: CALL_OW 250
72509: PPUSH
72510: LD_VAR 0 2
72514: PPUSH
72515: LD_INT 1
72517: PPUSH
72518: CALL_OW 272
72522: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72523: LD_ADDR_VAR 0 5
72527: PUSH
72528: LD_VAR 0 1
72532: PPUSH
72533: CALL_OW 251
72537: PPUSH
72538: LD_VAR 0 2
72542: PPUSH
72543: LD_INT 1
72545: PPUSH
72546: CALL_OW 273
72550: ST_TO_ADDR
// if ValidHex ( x , y ) then
72551: LD_VAR 0 4
72555: PPUSH
72556: LD_VAR 0 5
72560: PPUSH
72561: CALL_OW 488
72565: IFFALSE 72586
// ComTurnXY ( unit , x , y ) ;
72567: LD_VAR 0 1
72571: PPUSH
72572: LD_VAR 0 4
72576: PPUSH
72577: LD_VAR 0 5
72581: PPUSH
72582: CALL_OW 118
// end ;
72586: LD_VAR 0 3
72590: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72591: LD_INT 0
72593: PPUSH
72594: PPUSH
// result := false ;
72595: LD_ADDR_VAR 0 3
72599: PUSH
72600: LD_INT 0
72602: ST_TO_ADDR
// if not units then
72603: LD_VAR 0 2
72607: NOT
72608: IFFALSE 72612
// exit ;
72610: GO 72657
// for i in units do
72612: LD_ADDR_VAR 0 4
72616: PUSH
72617: LD_VAR 0 2
72621: PUSH
72622: FOR_IN
72623: IFFALSE 72655
// if See ( side , i ) then
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_VAR 0 4
72634: PPUSH
72635: CALL_OW 292
72639: IFFALSE 72653
// begin result := true ;
72641: LD_ADDR_VAR 0 3
72645: PUSH
72646: LD_INT 1
72648: ST_TO_ADDR
// exit ;
72649: POP
72650: POP
72651: GO 72657
// end ;
72653: GO 72622
72655: POP
72656: POP
// end ;
72657: LD_VAR 0 3
72661: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72662: LD_INT 0
72664: PPUSH
72665: PPUSH
72666: PPUSH
72667: PPUSH
// if not unit or not points then
72668: LD_VAR 0 1
72672: NOT
72673: IFTRUE 72682
72675: PUSH
72676: LD_VAR 0 2
72680: NOT
72681: OR
72682: IFFALSE 72686
// exit ;
72684: GO 72776
// dist := 99999 ;
72686: LD_ADDR_VAR 0 5
72690: PUSH
72691: LD_INT 99999
72693: ST_TO_ADDR
// for i in points do
72694: LD_ADDR_VAR 0 4
72698: PUSH
72699: LD_VAR 0 2
72703: PUSH
72704: FOR_IN
72705: IFFALSE 72774
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72707: LD_ADDR_VAR 0 6
72711: PUSH
72712: LD_VAR 0 1
72716: PPUSH
72717: LD_VAR 0 4
72721: PUSH
72722: LD_INT 1
72724: ARRAY
72725: PPUSH
72726: LD_VAR 0 4
72730: PUSH
72731: LD_INT 2
72733: ARRAY
72734: PPUSH
72735: CALL_OW 297
72739: ST_TO_ADDR
// if tmpDist < dist then
72740: LD_VAR 0 6
72744: PUSH
72745: LD_VAR 0 5
72749: LESS
72750: IFFALSE 72772
// begin result := i ;
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_VAR 0 4
72761: ST_TO_ADDR
// dist := tmpDist ;
72762: LD_ADDR_VAR 0 5
72766: PUSH
72767: LD_VAR 0 6
72771: ST_TO_ADDR
// end ; end ;
72772: GO 72704
72774: POP
72775: POP
// end ;
72776: LD_VAR 0 3
72780: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72781: LD_INT 0
72783: PPUSH
// uc_side := side ;
72784: LD_ADDR_OWVAR 20
72788: PUSH
72789: LD_VAR 0 1
72793: ST_TO_ADDR
// uc_nation := 3 ;
72794: LD_ADDR_OWVAR 21
72798: PUSH
72799: LD_INT 3
72801: ST_TO_ADDR
// vc_chassis := 25 ;
72802: LD_ADDR_OWVAR 37
72806: PUSH
72807: LD_INT 25
72809: ST_TO_ADDR
// vc_engine := engine_siberite ;
72810: LD_ADDR_OWVAR 39
72814: PUSH
72815: LD_INT 3
72817: ST_TO_ADDR
// vc_control := control_computer ;
72818: LD_ADDR_OWVAR 38
72822: PUSH
72823: LD_INT 3
72825: ST_TO_ADDR
// vc_weapon := 59 ;
72826: LD_ADDR_OWVAR 40
72830: PUSH
72831: LD_INT 59
72833: ST_TO_ADDR
// result := CreateVehicle ;
72834: LD_ADDR_VAR 0 5
72838: PUSH
72839: CALL_OW 45
72843: ST_TO_ADDR
// SetDir ( result , d ) ;
72844: LD_VAR 0 5
72848: PPUSH
72849: LD_VAR 0 4
72853: PPUSH
72854: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72858: LD_VAR 0 5
72862: PPUSH
72863: LD_VAR 0 2
72867: PPUSH
72868: LD_VAR 0 3
72872: PPUSH
72873: LD_INT 0
72875: PPUSH
72876: CALL_OW 48
// end ;
72880: LD_VAR 0 5
72884: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72885: LD_INT 0
72887: PPUSH
72888: PPUSH
72889: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72890: LD_ADDR_VAR 0 2
72894: PUSH
72895: LD_INT 0
72897: PUSH
72898: LD_INT 0
72900: PUSH
72901: LD_INT 0
72903: PUSH
72904: LD_INT 0
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72913: LD_VAR 0 1
72917: NOT
72918: IFTRUE 72951
72920: PUSH
72921: LD_VAR 0 1
72925: PPUSH
72926: CALL_OW 264
72930: PUSH
72931: LD_INT 12
72933: PUSH
72934: LD_INT 51
72936: PUSH
72937: LD_INT 32
72939: PUSH
72940: LD_INT 89
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: IN
72949: NOT
72950: OR
72951: IFFALSE 72955
// exit ;
72953: GO 73053
// for i := 1 to 3 do
72955: LD_ADDR_VAR 0 3
72959: PUSH
72960: DOUBLE
72961: LD_INT 1
72963: DEC
72964: ST_TO_ADDR
72965: LD_INT 3
72967: PUSH
72968: FOR_TO
72969: IFFALSE 73051
// begin tmp := GetCargo ( cargo , i ) ;
72971: LD_ADDR_VAR 0 4
72975: PUSH
72976: LD_VAR 0 1
72980: PPUSH
72981: LD_VAR 0 3
72985: PPUSH
72986: CALL_OW 289
72990: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72991: LD_ADDR_VAR 0 2
72995: PUSH
72996: LD_VAR 0 2
73000: PPUSH
73001: LD_VAR 0 3
73005: PPUSH
73006: LD_VAR 0 4
73010: PPUSH
73011: CALL_OW 1
73015: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_VAR 0 2
73025: PPUSH
73026: LD_INT 4
73028: PPUSH
73029: LD_VAR 0 2
73033: PUSH
73034: LD_INT 4
73036: ARRAY
73037: PUSH
73038: LD_VAR 0 4
73042: PLUS
73043: PPUSH
73044: CALL_OW 1
73048: ST_TO_ADDR
// end ;
73049: GO 72968
73051: POP
73052: POP
// end ;
73053: LD_VAR 0 2
73057: RET
// export function Length ( array ) ; begin
73058: LD_INT 0
73060: PPUSH
// result := array + 0 ;
73061: LD_ADDR_VAR 0 2
73065: PUSH
73066: LD_VAR 0 1
73070: PUSH
73071: LD_INT 0
73073: PLUS
73074: ST_TO_ADDR
// end ;
73075: LD_VAR 0 2
73079: RET
// export function PrepareArray ( array ) ; begin
73080: LD_INT 0
73082: PPUSH
// result := array diff 0 ;
73083: LD_ADDR_VAR 0 2
73087: PUSH
73088: LD_VAR 0 1
73092: PUSH
73093: LD_INT 0
73095: DIFF
73096: ST_TO_ADDR
// if not result [ 1 ] then
73097: LD_VAR 0 2
73101: PUSH
73102: LD_INT 1
73104: ARRAY
73105: NOT
73106: IFFALSE 73126
// result := Delete ( result , 1 ) ;
73108: LD_ADDR_VAR 0 2
73112: PUSH
73113: LD_VAR 0 2
73117: PPUSH
73118: LD_INT 1
73120: PPUSH
73121: CALL_OW 3
73125: ST_TO_ADDR
// end ;
73126: LD_VAR 0 2
73130: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73131: LD_INT 0
73133: PPUSH
73134: PPUSH
73135: PPUSH
73136: PPUSH
// sibRocketRange := 25 ;
73137: LD_ADDR_VAR 0 6
73141: PUSH
73142: LD_INT 25
73144: ST_TO_ADDR
// result := false ;
73145: LD_ADDR_VAR 0 4
73149: PUSH
73150: LD_INT 0
73152: ST_TO_ADDR
// for i := 0 to 5 do
73153: LD_ADDR_VAR 0 5
73157: PUSH
73158: DOUBLE
73159: LD_INT 0
73161: DEC
73162: ST_TO_ADDR
73163: LD_INT 5
73165: PUSH
73166: FOR_TO
73167: IFFALSE 73234
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73169: LD_VAR 0 1
73173: PPUSH
73174: LD_VAR 0 5
73178: PPUSH
73179: LD_VAR 0 6
73183: PPUSH
73184: CALL_OW 272
73188: PPUSH
73189: LD_VAR 0 2
73193: PPUSH
73194: LD_VAR 0 5
73198: PPUSH
73199: LD_VAR 0 6
73203: PPUSH
73204: CALL_OW 273
73208: PPUSH
73209: LD_VAR 0 3
73213: PPUSH
73214: CALL_OW 309
73218: IFFALSE 73232
// begin result := true ;
73220: LD_ADDR_VAR 0 4
73224: PUSH
73225: LD_INT 1
73227: ST_TO_ADDR
// exit ;
73228: POP
73229: POP
73230: GO 73236
// end ;
73232: GO 73166
73234: POP
73235: POP
// end ;
73236: LD_VAR 0 4
73240: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73241: LD_INT 0
73243: PPUSH
73244: PPUSH
73245: PPUSH
// if btype = b_depot then
73246: LD_VAR 0 2
73250: PUSH
73251: LD_INT 0
73253: EQUAL
73254: IFFALSE 73266
// begin result := true ;
73256: LD_ADDR_VAR 0 3
73260: PUSH
73261: LD_INT 1
73263: ST_TO_ADDR
// exit ;
73264: GO 73386
// end ; pom := GetBase ( depot ) ;
73266: LD_ADDR_VAR 0 4
73270: PUSH
73271: LD_VAR 0 1
73275: PPUSH
73276: CALL_OW 274
73280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73281: LD_ADDR_VAR 0 5
73285: PUSH
73286: LD_VAR 0 2
73290: PPUSH
73291: LD_VAR 0 1
73295: PPUSH
73296: CALL_OW 248
73300: PPUSH
73301: CALL_OW 450
73305: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73306: LD_ADDR_VAR 0 3
73310: PUSH
73311: LD_VAR 0 4
73315: PPUSH
73316: LD_INT 1
73318: PPUSH
73319: CALL_OW 275
73323: PUSH
73324: LD_VAR 0 5
73328: PUSH
73329: LD_INT 1
73331: ARRAY
73332: GREATEREQUAL
73333: IFFALSE 73359
73335: PUSH
73336: LD_VAR 0 4
73340: PPUSH
73341: LD_INT 2
73343: PPUSH
73344: CALL_OW 275
73348: PUSH
73349: LD_VAR 0 5
73353: PUSH
73354: LD_INT 2
73356: ARRAY
73357: GREATEREQUAL
73358: AND
73359: IFFALSE 73385
73361: PUSH
73362: LD_VAR 0 4
73366: PPUSH
73367: LD_INT 3
73369: PPUSH
73370: CALL_OW 275
73374: PUSH
73375: LD_VAR 0 5
73379: PUSH
73380: LD_INT 3
73382: ARRAY
73383: GREATEREQUAL
73384: AND
73385: ST_TO_ADDR
// end ;
73386: LD_VAR 0 3
73390: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73391: LD_INT 0
73393: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73394: LD_VAR 0 1
73398: PPUSH
73399: LD_VAR 0 2
73403: PPUSH
73404: LD_INT 0
73406: PPUSH
73407: LD_INT 0
73409: PPUSH
73410: LD_INT 1
73412: PPUSH
73413: LD_INT 0
73415: PPUSH
73416: CALL_OW 587
// end ;
73420: LD_VAR 0 3
73424: RET
// export function CenterOnNow ( unit ) ; begin
73425: LD_INT 0
73427: PPUSH
// result := IsInUnit ( unit ) ;
73428: LD_ADDR_VAR 0 2
73432: PUSH
73433: LD_VAR 0 1
73437: PPUSH
73438: CALL_OW 310
73442: ST_TO_ADDR
// if not result then
73443: LD_VAR 0 2
73447: NOT
73448: IFFALSE 73460
// result := unit ;
73450: LD_ADDR_VAR 0 2
73454: PUSH
73455: LD_VAR 0 1
73459: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73460: LD_VAR 0 1
73464: PPUSH
73465: CALL_OW 87
// end ;
73469: LD_VAR 0 2
73473: RET
// export function ComMoveHex ( unit , hex ) ; begin
73474: LD_INT 0
73476: PPUSH
// if not hex then
73477: LD_VAR 0 2
73481: NOT
73482: IFFALSE 73486
// exit ;
73484: GO 73539
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73486: LD_VAR 0 2
73490: PUSH
73491: LD_INT 1
73493: ARRAY
73494: PPUSH
73495: LD_VAR 0 2
73499: PUSH
73500: LD_INT 2
73502: ARRAY
73503: PPUSH
73504: CALL_OW 428
73508: IFFALSE 73512
// exit ;
73510: GO 73539
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73512: LD_VAR 0 1
73516: PPUSH
73517: LD_VAR 0 2
73521: PUSH
73522: LD_INT 1
73524: ARRAY
73525: PPUSH
73526: LD_VAR 0 2
73530: PUSH
73531: LD_INT 2
73533: ARRAY
73534: PPUSH
73535: CALL_OW 111
// end ;
73539: LD_VAR 0 3
73543: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73544: LD_INT 0
73546: PPUSH
73547: PPUSH
73548: PPUSH
// if not unit or not enemy then
73549: LD_VAR 0 1
73553: NOT
73554: IFTRUE 73563
73556: PUSH
73557: LD_VAR 0 2
73561: NOT
73562: OR
73563: IFFALSE 73567
// exit ;
73565: GO 73693
// x := GetX ( enemy ) ;
73567: LD_ADDR_VAR 0 4
73571: PUSH
73572: LD_VAR 0 2
73576: PPUSH
73577: CALL_OW 250
73581: ST_TO_ADDR
// y := GetY ( enemy ) ;
73582: LD_ADDR_VAR 0 5
73586: PUSH
73587: LD_VAR 0 2
73591: PPUSH
73592: CALL_OW 251
73596: ST_TO_ADDR
// if ValidHex ( x , y ) then
73597: LD_VAR 0 4
73601: PPUSH
73602: LD_VAR 0 5
73606: PPUSH
73607: CALL_OW 488
73611: IFFALSE 73693
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73613: LD_VAR 0 2
73617: PPUSH
73618: CALL_OW 247
73622: PUSH
73623: LD_INT 3
73625: PUSH
73626: LD_INT 2
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: IN
73633: IFTRUE 73656
73635: PUSH
73636: LD_VAR 0 1
73640: PPUSH
73641: CALL_OW 255
73645: PPUSH
73646: LD_VAR 0 2
73650: PPUSH
73651: CALL_OW 292
73655: OR
73656: IFFALSE 73674
// ComAttackUnit ( unit , enemy ) else
73658: LD_VAR 0 1
73662: PPUSH
73663: LD_VAR 0 2
73667: PPUSH
73668: CALL_OW 115
73672: GO 73693
// ComAgressiveMove ( unit , x , y ) ;
73674: LD_VAR 0 1
73678: PPUSH
73679: LD_VAR 0 4
73683: PPUSH
73684: LD_VAR 0 5
73688: PPUSH
73689: CALL_OW 114
// end ;
73693: LD_VAR 0 3
73697: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73698: LD_INT 0
73700: PPUSH
73701: PPUSH
73702: PPUSH
// list := AreaToList ( area , 0 ) ;
73703: LD_ADDR_VAR 0 5
73707: PUSH
73708: LD_VAR 0 1
73712: PPUSH
73713: LD_INT 0
73715: PPUSH
73716: CALL_OW 517
73720: ST_TO_ADDR
// if not list then
73721: LD_VAR 0 5
73725: NOT
73726: IFFALSE 73730
// exit ;
73728: GO 73860
// if all then
73730: LD_VAR 0 2
73734: IFFALSE 73822
// begin for i := 1 to list [ 1 ] do
73736: LD_ADDR_VAR 0 4
73740: PUSH
73741: DOUBLE
73742: LD_INT 1
73744: DEC
73745: ST_TO_ADDR
73746: LD_VAR 0 5
73750: PUSH
73751: LD_INT 1
73753: ARRAY
73754: PUSH
73755: FOR_TO
73756: IFFALSE 73818
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73758: LD_ADDR_VAR 0 3
73762: PUSH
73763: LD_VAR 0 3
73767: PPUSH
73768: LD_VAR 0 3
73772: PUSH
73773: LD_INT 1
73775: PLUS
73776: PPUSH
73777: LD_VAR 0 5
73781: PUSH
73782: LD_INT 1
73784: ARRAY
73785: PUSH
73786: LD_VAR 0 4
73790: ARRAY
73791: PUSH
73792: LD_VAR 0 5
73796: PUSH
73797: LD_INT 2
73799: ARRAY
73800: PUSH
73801: LD_VAR 0 4
73805: ARRAY
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PPUSH
73811: CALL_OW 1
73815: ST_TO_ADDR
73816: GO 73755
73818: POP
73819: POP
// exit ;
73820: GO 73860
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73822: LD_ADDR_VAR 0 3
73826: PUSH
73827: LD_VAR 0 5
73831: PUSH
73832: LD_INT 1
73834: ARRAY
73835: PUSH
73836: LD_INT 1
73838: ARRAY
73839: PUSH
73840: LD_VAR 0 5
73844: PUSH
73845: LD_INT 2
73847: ARRAY
73848: PUSH
73849: LD_INT 1
73851: ARRAY
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: EMPTY
73858: LIST
73859: ST_TO_ADDR
// end ;
73860: LD_VAR 0 3
73864: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73865: LD_INT 0
73867: PPUSH
73868: PPUSH
// list := AreaToList ( area , 0 ) ;
73869: LD_ADDR_VAR 0 4
73873: PUSH
73874: LD_VAR 0 1
73878: PPUSH
73879: LD_INT 0
73881: PPUSH
73882: CALL_OW 517
73886: ST_TO_ADDR
// if not list then
73887: LD_VAR 0 4
73891: NOT
73892: IFFALSE 73896
// exit ;
73894: GO 73937
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73896: LD_ADDR_VAR 0 3
73900: PUSH
73901: LD_VAR 0 4
73905: PUSH
73906: LD_INT 1
73908: ARRAY
73909: PUSH
73910: LD_INT 1
73912: ARRAY
73913: PUSH
73914: LD_VAR 0 4
73918: PUSH
73919: LD_INT 2
73921: ARRAY
73922: PUSH
73923: LD_INT 1
73925: ARRAY
73926: PUSH
73927: LD_VAR 0 2
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: ST_TO_ADDR
// end ;
73937: LD_VAR 0 3
73941: RET
// export function First ( array ) ; begin
73942: LD_INT 0
73944: PPUSH
// if not array then
73945: LD_VAR 0 1
73949: NOT
73950: IFFALSE 73954
// exit ;
73952: GO 73968
// result := array [ 1 ] ;
73954: LD_ADDR_VAR 0 2
73958: PUSH
73959: LD_VAR 0 1
73963: PUSH
73964: LD_INT 1
73966: ARRAY
73967: ST_TO_ADDR
// end ;
73968: LD_VAR 0 2
73972: RET
// export function Last ( array ) ; begin
73973: LD_INT 0
73975: PPUSH
// if not array then
73976: LD_VAR 0 1
73980: NOT
73981: IFFALSE 73985
// exit ;
73983: GO 74001
// result := array [ array ] ;
73985: LD_ADDR_VAR 0 2
73989: PUSH
73990: LD_VAR 0 1
73994: PUSH
73995: LD_VAR 0 1
73999: ARRAY
74000: ST_TO_ADDR
// end ;
74001: LD_VAR 0 2
74005: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74006: LD_INT 0
74008: PPUSH
74009: PPUSH
// result := [ ] ;
74010: LD_ADDR_VAR 0 5
74014: PUSH
74015: EMPTY
74016: ST_TO_ADDR
// if not array then
74017: LD_VAR 0 1
74021: NOT
74022: IFFALSE 74026
// exit ;
74024: GO 74138
// for i := 1 to array do
74026: LD_ADDR_VAR 0 6
74030: PUSH
74031: DOUBLE
74032: LD_INT 1
74034: DEC
74035: ST_TO_ADDR
74036: LD_VAR 0 1
74040: PUSH
74041: FOR_TO
74042: IFFALSE 74136
// if array [ i ] [ index ] = value then
74044: LD_VAR 0 1
74048: PUSH
74049: LD_VAR 0 6
74053: ARRAY
74054: PUSH
74055: LD_VAR 0 2
74059: ARRAY
74060: PUSH
74061: LD_VAR 0 3
74065: EQUAL
74066: IFFALSE 74134
// begin if indexColumn then
74068: LD_VAR 0 4
74072: IFFALSE 74108
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74074: LD_ADDR_VAR 0 5
74078: PUSH
74079: LD_VAR 0 5
74083: PPUSH
74084: LD_VAR 0 1
74088: PUSH
74089: LD_VAR 0 6
74093: ARRAY
74094: PUSH
74095: LD_VAR 0 4
74099: ARRAY
74100: PPUSH
74101: CALL 69146 0 2
74105: ST_TO_ADDR
74106: GO 74134
// result := Join ( result , array [ i ] ) ;
74108: LD_ADDR_VAR 0 5
74112: PUSH
74113: LD_VAR 0 5
74117: PPUSH
74118: LD_VAR 0 1
74122: PUSH
74123: LD_VAR 0 6
74127: ARRAY
74128: PPUSH
74129: CALL 69146 0 2
74133: ST_TO_ADDR
// end ;
74134: GO 74041
74136: POP
74137: POP
// end ;
74138: LD_VAR 0 5
74142: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74143: LD_INT 0
74145: PPUSH
// if not vehicles or not parkingPoint then
74146: LD_VAR 0 1
74150: NOT
74151: IFTRUE 74160
74153: PUSH
74154: LD_VAR 0 2
74158: NOT
74159: OR
74160: IFFALSE 74164
// exit ;
74162: GO 74262
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74164: LD_ADDR_VAR 0 1
74168: PUSH
74169: LD_VAR 0 1
74173: PPUSH
74174: LD_INT 50
74176: PUSH
74177: EMPTY
74178: LIST
74179: PUSH
74180: LD_INT 3
74182: PUSH
74183: LD_INT 92
74185: PUSH
74186: LD_VAR 0 2
74190: PUSH
74191: LD_INT 1
74193: ARRAY
74194: PUSH
74195: LD_VAR 0 2
74199: PUSH
74200: LD_INT 2
74202: ARRAY
74203: PUSH
74204: LD_INT 8
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PPUSH
74221: CALL_OW 72
74225: ST_TO_ADDR
// if not vehicles then
74226: LD_VAR 0 1
74230: NOT
74231: IFFALSE 74235
// exit ;
74233: GO 74262
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74235: LD_VAR 0 1
74239: PPUSH
74240: LD_VAR 0 2
74244: PUSH
74245: LD_INT 1
74247: ARRAY
74248: PPUSH
74249: LD_VAR 0 2
74253: PUSH
74254: LD_INT 2
74256: ARRAY
74257: PPUSH
74258: CALL_OW 111
// end ;
74262: LD_VAR 0 3
74266: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74267: LD_INT 0
74269: PPUSH
74270: PPUSH
74271: PPUSH
// if not side or not area then
74272: LD_VAR 0 1
74276: NOT
74277: IFTRUE 74286
74279: PUSH
74280: LD_VAR 0 2
74284: NOT
74285: OR
74286: IFFALSE 74290
// exit ;
74288: GO 74409
// tmp := AreaToList ( area , 0 ) ;
74290: LD_ADDR_VAR 0 5
74294: PUSH
74295: LD_VAR 0 2
74299: PPUSH
74300: LD_INT 0
74302: PPUSH
74303: CALL_OW 517
74307: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74308: LD_ADDR_VAR 0 4
74312: PUSH
74313: DOUBLE
74314: LD_INT 1
74316: DEC
74317: ST_TO_ADDR
74318: LD_VAR 0 5
74322: PUSH
74323: LD_INT 1
74325: ARRAY
74326: PUSH
74327: FOR_TO
74328: IFFALSE 74407
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74330: LD_VAR 0 5
74334: PUSH
74335: LD_INT 1
74337: ARRAY
74338: PUSH
74339: LD_VAR 0 4
74343: ARRAY
74344: PPUSH
74345: LD_VAR 0 5
74349: PUSH
74350: LD_INT 2
74352: ARRAY
74353: PUSH
74354: LD_VAR 0 4
74358: ARRAY
74359: PPUSH
74360: CALL_OW 351
74364: IFFALSE 74405
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74366: LD_VAR 0 5
74370: PUSH
74371: LD_INT 1
74373: ARRAY
74374: PUSH
74375: LD_VAR 0 4
74379: ARRAY
74380: PPUSH
74381: LD_VAR 0 5
74385: PUSH
74386: LD_INT 2
74388: ARRAY
74389: PUSH
74390: LD_VAR 0 4
74394: ARRAY
74395: PPUSH
74396: LD_VAR 0 1
74400: PPUSH
74401: CALL_OW 244
// end ;
74405: GO 74327
74407: POP
74408: POP
// end ;
74409: LD_VAR 0 3
74413: RET
// export function UniqueArray ( array ) ; var i ; begin
74414: LD_INT 0
74416: PPUSH
74417: PPUSH
// result := [ ] ;
74418: LD_ADDR_VAR 0 2
74422: PUSH
74423: EMPTY
74424: ST_TO_ADDR
// if not array then
74425: LD_VAR 0 1
74429: NOT
74430: IFFALSE 74434
// exit ;
74432: GO 74495
// for i := 1 to array do
74434: LD_ADDR_VAR 0 3
74438: PUSH
74439: DOUBLE
74440: LD_INT 1
74442: DEC
74443: ST_TO_ADDR
74444: LD_VAR 0 1
74448: PUSH
74449: FOR_TO
74450: IFFALSE 74493
// if not array [ i ] in result then
74452: LD_VAR 0 1
74456: PUSH
74457: LD_VAR 0 3
74461: ARRAY
74462: PUSH
74463: LD_VAR 0 2
74467: IN
74468: NOT
74469: IFFALSE 74491
// result := Join ( result , i ) ;
74471: LD_ADDR_VAR 0 2
74475: PUSH
74476: LD_VAR 0 2
74480: PPUSH
74481: LD_VAR 0 3
74485: PPUSH
74486: CALL 69146 0 2
74490: ST_TO_ADDR
74491: GO 74449
74493: POP
74494: POP
// end ; end_of_file
74495: LD_VAR 0 2
74499: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74500: LD_VAR 0 1
74504: PUSH
74505: LD_INT 200
74507: DOUBLE
74508: GREATEREQUAL
74509: IFFALSE 74517
74511: LD_INT 299
74513: DOUBLE
74514: LESSEQUAL
74515: IFTRUE 74519
74517: GO 74551
74519: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74520: LD_VAR 0 1
74524: PPUSH
74525: LD_VAR 0 2
74529: PPUSH
74530: LD_VAR 0 3
74534: PPUSH
74535: LD_VAR 0 4
74539: PPUSH
74540: LD_VAR 0 5
74544: PPUSH
74545: CALL 25456 0 5
74549: GO 74628
74551: LD_INT 300
74553: DOUBLE
74554: GREATEREQUAL
74555: IFFALSE 74563
74557: LD_INT 399
74559: DOUBLE
74560: LESSEQUAL
74561: IFTRUE 74565
74563: GO 74627
74565: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74566: LD_VAR 0 1
74570: PPUSH
74571: LD_VAR 0 2
74575: PPUSH
74576: LD_VAR 0 3
74580: PPUSH
74581: LD_VAR 0 4
74585: PPUSH
74586: LD_VAR 0 5
74590: PPUSH
74591: LD_VAR 0 6
74595: PPUSH
74596: LD_VAR 0 7
74600: PPUSH
74601: LD_VAR 0 8
74605: PPUSH
74606: LD_VAR 0 9
74610: PPUSH
74611: LD_VAR 0 10
74615: PPUSH
74616: LD_VAR 0 11
74620: PPUSH
74621: CALL 21340 0 11
74625: GO 74628
74627: POP
// end ;
74628: PPOPN 11
74630: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74631: LD_VAR 0 1
74635: PPUSH
74636: LD_VAR 0 2
74640: PPUSH
74641: LD_VAR 0 3
74645: PPUSH
74646: LD_VAR 0 4
74650: PPUSH
74651: LD_VAR 0 5
74655: PPUSH
74656: CALL 24837 0 5
// end ; end_of_file
74660: PPOPN 5
74662: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74663: LD_VAR 0 1
74667: PPUSH
74668: LD_VAR 0 2
74672: PPUSH
74673: LD_VAR 0 3
74677: PPUSH
74678: LD_VAR 0 4
74682: PPUSH
74683: LD_VAR 0 5
74687: PPUSH
74688: LD_VAR 0 6
74692: PPUSH
74693: CALL 8880 0 6
// end ;
74697: PPOPN 6
74699: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74700: LD_INT 0
74702: PPUSH
// begin if not units then
74703: LD_VAR 0 1
74707: NOT
74708: IFFALSE 74712
// exit ;
74710: GO 74746
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
74712: LD_VAR 0 1
74716: PPUSH
74717: LD_VAR 0 2
74721: PPUSH
74722: LD_VAR 0 3
74726: PPUSH
74727: LD_VAR 0 4
74731: PPUSH
74732: LD_VAR 0 5
74736: PPUSH
74737: LD_VAR 0 6
74741: PPUSH
74742: CALL 30963 0 6
// end ;
74746: PPOPN 7
74748: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74749: CALL 8767 0 0
// end ;
74753: PPOPN 1
74755: END
