// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: LD_INT 7
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 8
 337: PUSH
 338: LD_INT 9
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 7
 359: PUSH
 360: LD_INT 9
 362: PUSH
 363: LD_INT 10
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20300
 556: PUSH
 557: LD_INT 19250
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$10 , 6 6$20 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15050
 581: PUSH
 582: LD_INT 13300
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 157500
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 80
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 90
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 25
1973: PUSH
1974: LD_INT 35
1976: PUSH
1977: LD_INT 45
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 33
2071: PUSH
2072: LD_INT 44
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 21000
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: LD_INT 7
3580: PUSH
3581: LD_INT 6
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 4
5144: PUSH
5145: LD_INT 5
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 5
6109: PUSH
6110: LD_INT 4
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( dsmed1 , 1 ) ;
6661: LD_STRING dsmed1
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6671: LD_STRING dsmed1
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6681: LD_STRING dsmed1
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 19734 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 19832 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 19840 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
8605: GO 8607
8607: DISABLE
// begin ru_radar := 98 ;
8608: LD_ADDR_EXP 52
8612: PUSH
8613: LD_INT 98
8615: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8616: LD_ADDR_EXP 53
8620: PUSH
8621: LD_INT 89
8623: ST_TO_ADDR
// us_hack := 99 ;
8624: LD_ADDR_EXP 54
8628: PUSH
8629: LD_INT 99
8631: ST_TO_ADDR
// us_artillery := 97 ;
8632: LD_ADDR_EXP 55
8636: PUSH
8637: LD_INT 97
8639: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8640: LD_ADDR_EXP 56
8644: PUSH
8645: LD_INT 91
8647: ST_TO_ADDR
// tech_Artillery := 80 ;
8648: LD_ADDR_EXP 57
8652: PUSH
8653: LD_INT 80
8655: ST_TO_ADDR
// tech_RadMat := 81 ;
8656: LD_ADDR_EXP 58
8660: PUSH
8661: LD_INT 81
8663: ST_TO_ADDR
// tech_BasicTools := 82 ;
8664: LD_ADDR_EXP 59
8668: PUSH
8669: LD_INT 82
8671: ST_TO_ADDR
// tech_Cargo := 83 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 83
8679: ST_TO_ADDR
// tech_Track := 84 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 84
8687: ST_TO_ADDR
// tech_Crane := 85 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 85
8695: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 86
8703: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 87
8711: ST_TO_ADDR
// end ; end_of_file end_of_file
8712: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8713: GO 8715
8715: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8716: LD_STRING initStreamRollete();
8718: PPUSH
8719: CALL_OW 559
// InitStreamMode ;
8723: CALL 8732 0 0
// DefineStreamItems ( ) ;
8727: CALL 9172 0 0
// end ;
8731: END
// function InitStreamMode ; begin
8732: LD_INT 0
8734: PPUSH
// streamModeActive := false ;
8735: LD_ADDR_EXP 65
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// normalCounter := 36 ;
8743: LD_ADDR_EXP 66
8747: PUSH
8748: LD_INT 36
8750: ST_TO_ADDR
// hardcoreCounter := 16 ;
8751: LD_ADDR_EXP 67
8755: PUSH
8756: LD_INT 16
8758: ST_TO_ADDR
// sRocket := false ;
8759: LD_ADDR_EXP 70
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// sSpeed := false ;
8767: LD_ADDR_EXP 69
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sEngine := false ;
8775: LD_ADDR_EXP 71
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// sSpec := false ;
8783: LD_ADDR_EXP 68
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// sLevel := false ;
8791: LD_ADDR_EXP 72
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// sArmoury := false ;
8799: LD_ADDR_EXP 73
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// sRadar := false ;
8807: LD_ADDR_EXP 74
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// sBunker := false ;
8815: LD_ADDR_EXP 75
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// sHack := false ;
8823: LD_ADDR_EXP 76
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// sFire := false ;
8831: LD_ADDR_EXP 77
8835: PUSH
8836: LD_INT 0
8838: ST_TO_ADDR
// sRefresh := false ;
8839: LD_ADDR_EXP 78
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sExp := false ;
8847: LD_ADDR_EXP 79
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sDepot := false ;
8855: LD_ADDR_EXP 80
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sFlag := false ;
8863: LD_ADDR_EXP 81
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// sKamikadze := false ;
8871: LD_ADDR_EXP 89
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// sTroll := false ;
8879: LD_ADDR_EXP 90
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// sSlow := false ;
8887: LD_ADDR_EXP 91
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// sLack := false ;
8895: LD_ADDR_EXP 92
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// sTank := false ;
8903: LD_ADDR_EXP 94
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// sRemote := false ;
8911: LD_ADDR_EXP 95
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// sPowell := false ;
8919: LD_ADDR_EXP 96
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// sTeleport := false ;
8927: LD_ADDR_EXP 99
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// sOilTower := false ;
8935: LD_ADDR_EXP 101
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// sShovel := false ;
8943: LD_ADDR_EXP 102
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// sSheik := false ;
8951: LD_ADDR_EXP 103
8955: PUSH
8956: LD_INT 0
8958: ST_TO_ADDR
// sEarthquake := false ;
8959: LD_ADDR_EXP 105
8963: PUSH
8964: LD_INT 0
8966: ST_TO_ADDR
// sAI := false ;
8967: LD_ADDR_EXP 106
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// sCargo := false ;
8975: LD_ADDR_EXP 109
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// sDLaser := false ;
8983: LD_ADDR_EXP 110
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// sExchange := false ;
8991: LD_ADDR_EXP 111
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// sFac := false ;
8999: LD_ADDR_EXP 112
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// sPower := false ;
9007: LD_ADDR_EXP 113
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// sRandom := false ;
9015: LD_ADDR_EXP 114
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// sShield := false ;
9023: LD_ADDR_EXP 115
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// sTime := false ;
9031: LD_ADDR_EXP 116
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// sTools := false ;
9039: LD_ADDR_EXP 117
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// sSold := false ;
9047: LD_ADDR_EXP 82
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// sDiff := false ;
9055: LD_ADDR_EXP 83
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// sFog := false ;
9063: LD_ADDR_EXP 86
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sReset := false ;
9071: LD_ADDR_EXP 87
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sSun := false ;
9079: LD_ADDR_EXP 88
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sTiger := false ;
9087: LD_ADDR_EXP 84
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sBomb := false ;
9095: LD_ADDR_EXP 85
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sWound := false ;
9103: LD_ADDR_EXP 93
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sBetray := false ;
9111: LD_ADDR_EXP 97
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sContamin := false ;
9119: LD_ADDR_EXP 98
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sOil := false ;
9127: LD_ADDR_EXP 100
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sStu := false ;
9135: LD_ADDR_EXP 104
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sBazooka := false ;
9143: LD_ADDR_EXP 107
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sMortar := false ;
9151: LD_ADDR_EXP 108
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sRanger := false ;
9159: LD_ADDR_EXP 118
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// end ;
9167: LD_VAR 0 1
9171: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9172: LD_INT 0
9174: PPUSH
9175: PPUSH
9176: PPUSH
9177: PPUSH
9178: PPUSH
// result := [ ] ;
9179: LD_ADDR_VAR 0 1
9183: PUSH
9184: EMPTY
9185: ST_TO_ADDR
// if campaign_id = 1 then
9186: LD_OWVAR 69
9190: PUSH
9191: LD_INT 1
9193: EQUAL
9194: IFFALSE 12132
// begin case mission_number of 1 :
9196: LD_OWVAR 70
9200: PUSH
9201: LD_INT 1
9203: DOUBLE
9204: EQUAL
9205: IFTRUE 9209
9207: GO 9273
9209: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9210: LD_ADDR_VAR 0 1
9214: PUSH
9215: LD_INT 2
9217: PUSH
9218: LD_INT 4
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_INT 23
9238: PUSH
9239: LD_INT 26
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 101
9255: PUSH
9256: LD_INT 102
9258: PUSH
9259: LD_INT 106
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: ST_TO_ADDR
9271: GO 12130
9273: LD_INT 2
9275: DOUBLE
9276: EQUAL
9277: IFTRUE 9281
9279: GO 9353
9281: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9282: LD_ADDR_VAR 0 1
9286: PUSH
9287: LD_INT 2
9289: PUSH
9290: LD_INT 4
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 12
9298: PUSH
9299: LD_INT 15
9301: PUSH
9302: LD_INT 16
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_INT 23
9310: PUSH
9311: LD_INT 26
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 101
9327: PUSH
9328: LD_INT 102
9330: PUSH
9331: LD_INT 105
9333: PUSH
9334: LD_INT 106
9336: PUSH
9337: LD_INT 108
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: ST_TO_ADDR
9351: GO 12130
9353: LD_INT 3
9355: DOUBLE
9356: EQUAL
9357: IFTRUE 9361
9359: GO 9437
9361: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9362: LD_ADDR_VAR 0 1
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: LD_INT 4
9372: PUSH
9373: LD_INT 5
9375: PUSH
9376: LD_INT 11
9378: PUSH
9379: LD_INT 12
9381: PUSH
9382: LD_INT 15
9384: PUSH
9385: LD_INT 16
9387: PUSH
9388: LD_INT 22
9390: PUSH
9391: LD_INT 26
9393: PUSH
9394: LD_INT 36
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 101
9411: PUSH
9412: LD_INT 102
9414: PUSH
9415: LD_INT 105
9417: PUSH
9418: LD_INT 106
9420: PUSH
9421: LD_INT 108
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: ST_TO_ADDR
9435: GO 12130
9437: LD_INT 4
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9529
9445: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9446: LD_ADDR_VAR 0 1
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 4
9456: PUSH
9457: LD_INT 5
9459: PUSH
9460: LD_INT 8
9462: PUSH
9463: LD_INT 11
9465: PUSH
9466: LD_INT 12
9468: PUSH
9469: LD_INT 15
9471: PUSH
9472: LD_INT 16
9474: PUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 23
9480: PUSH
9481: LD_INT 26
9483: PUSH
9484: LD_INT 36
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 101
9503: PUSH
9504: LD_INT 102
9506: PUSH
9507: LD_INT 105
9509: PUSH
9510: LD_INT 106
9512: PUSH
9513: LD_INT 108
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: ST_TO_ADDR
9527: GO 12130
9529: LD_INT 5
9531: DOUBLE
9532: EQUAL
9533: IFTRUE 9537
9535: GO 9637
9537: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9538: LD_ADDR_VAR 0 1
9542: PUSH
9543: LD_INT 2
9545: PUSH
9546: LD_INT 4
9548: PUSH
9549: LD_INT 5
9551: PUSH
9552: LD_INT 6
9554: PUSH
9555: LD_INT 8
9557: PUSH
9558: LD_INT 11
9560: PUSH
9561: LD_INT 12
9563: PUSH
9564: LD_INT 15
9566: PUSH
9567: LD_INT 16
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_INT 23
9575: PUSH
9576: LD_INT 25
9578: PUSH
9579: LD_INT 26
9581: PUSH
9582: LD_INT 36
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 101
9603: PUSH
9604: LD_INT 102
9606: PUSH
9607: LD_INT 105
9609: PUSH
9610: LD_INT 106
9612: PUSH
9613: LD_INT 108
9615: PUSH
9616: LD_INT 109
9618: PUSH
9619: LD_INT 112
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: ST_TO_ADDR
9635: GO 12130
9637: LD_INT 6
9639: DOUBLE
9640: EQUAL
9641: IFTRUE 9645
9643: GO 9765
9645: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9646: LD_ADDR_VAR 0 1
9650: PUSH
9651: LD_INT 2
9653: PUSH
9654: LD_INT 4
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: LD_INT 6
9662: PUSH
9663: LD_INT 8
9665: PUSH
9666: LD_INT 11
9668: PUSH
9669: LD_INT 12
9671: PUSH
9672: LD_INT 15
9674: PUSH
9675: LD_INT 16
9677: PUSH
9678: LD_INT 20
9680: PUSH
9681: LD_INT 21
9683: PUSH
9684: LD_INT 22
9686: PUSH
9687: LD_INT 23
9689: PUSH
9690: LD_INT 25
9692: PUSH
9693: LD_INT 26
9695: PUSH
9696: LD_INT 30
9698: PUSH
9699: LD_INT 31
9701: PUSH
9702: LD_INT 32
9704: PUSH
9705: LD_INT 36
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 101
9731: PUSH
9732: LD_INT 102
9734: PUSH
9735: LD_INT 105
9737: PUSH
9738: LD_INT 106
9740: PUSH
9741: LD_INT 108
9743: PUSH
9744: LD_INT 109
9746: PUSH
9747: LD_INT 112
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: ST_TO_ADDR
9763: GO 12130
9765: LD_INT 7
9767: DOUBLE
9768: EQUAL
9769: IFTRUE 9773
9771: GO 9873
9773: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9774: LD_ADDR_VAR 0 1
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: LD_INT 4
9784: PUSH
9785: LD_INT 5
9787: PUSH
9788: LD_INT 7
9790: PUSH
9791: LD_INT 11
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 15
9799: PUSH
9800: LD_INT 16
9802: PUSH
9803: LD_INT 20
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 22
9811: PUSH
9812: LD_INT 23
9814: PUSH
9815: LD_INT 25
9817: PUSH
9818: LD_INT 26
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 101
9839: PUSH
9840: LD_INT 102
9842: PUSH
9843: LD_INT 103
9845: PUSH
9846: LD_INT 105
9848: PUSH
9849: LD_INT 106
9851: PUSH
9852: LD_INT 108
9854: PUSH
9855: LD_INT 112
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: ST_TO_ADDR
9871: GO 12130
9873: LD_INT 8
9875: DOUBLE
9876: EQUAL
9877: IFTRUE 9881
9879: GO 10009
9881: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9882: LD_ADDR_VAR 0 1
9886: PUSH
9887: LD_INT 2
9889: PUSH
9890: LD_INT 4
9892: PUSH
9893: LD_INT 5
9895: PUSH
9896: LD_INT 6
9898: PUSH
9899: LD_INT 7
9901: PUSH
9902: LD_INT 8
9904: PUSH
9905: LD_INT 11
9907: PUSH
9908: LD_INT 12
9910: PUSH
9911: LD_INT 15
9913: PUSH
9914: LD_INT 16
9916: PUSH
9917: LD_INT 20
9919: PUSH
9920: LD_INT 21
9922: PUSH
9923: LD_INT 22
9925: PUSH
9926: LD_INT 23
9928: PUSH
9929: LD_INT 25
9931: PUSH
9932: LD_INT 26
9934: PUSH
9935: LD_INT 30
9937: PUSH
9938: LD_INT 31
9940: PUSH
9941: LD_INT 32
9943: PUSH
9944: LD_INT 36
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 101
9971: PUSH
9972: LD_INT 102
9974: PUSH
9975: LD_INT 103
9977: PUSH
9978: LD_INT 105
9980: PUSH
9981: LD_INT 106
9983: PUSH
9984: LD_INT 108
9986: PUSH
9987: LD_INT 109
9989: PUSH
9990: LD_INT 112
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: ST_TO_ADDR
10007: GO 12130
10009: LD_INT 9
10011: DOUBLE
10012: EQUAL
10013: IFTRUE 10017
10015: GO 10153
10017: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10018: LD_ADDR_VAR 0 1
10022: PUSH
10023: LD_INT 2
10025: PUSH
10026: LD_INT 4
10028: PUSH
10029: LD_INT 5
10031: PUSH
10032: LD_INT 6
10034: PUSH
10035: LD_INT 7
10037: PUSH
10038: LD_INT 8
10040: PUSH
10041: LD_INT 11
10043: PUSH
10044: LD_INT 12
10046: PUSH
10047: LD_INT 15
10049: PUSH
10050: LD_INT 16
10052: PUSH
10053: LD_INT 20
10055: PUSH
10056: LD_INT 21
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_INT 23
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 26
10070: PUSH
10071: LD_INT 28
10073: PUSH
10074: LD_INT 30
10076: PUSH
10077: LD_INT 31
10079: PUSH
10080: LD_INT 32
10082: PUSH
10083: LD_INT 36
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 101
10111: PUSH
10112: LD_INT 102
10114: PUSH
10115: LD_INT 103
10117: PUSH
10118: LD_INT 105
10120: PUSH
10121: LD_INT 106
10123: PUSH
10124: LD_INT 108
10126: PUSH
10127: LD_INT 109
10129: PUSH
10130: LD_INT 112
10132: PUSH
10133: LD_INT 114
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: ST_TO_ADDR
10151: GO 12130
10153: LD_INT 10
10155: DOUBLE
10156: EQUAL
10157: IFTRUE 10161
10159: GO 10345
10161: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10162: LD_ADDR_VAR 0 1
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: LD_INT 4
10172: PUSH
10173: LD_INT 5
10175: PUSH
10176: LD_INT 6
10178: PUSH
10179: LD_INT 7
10181: PUSH
10182: LD_INT 8
10184: PUSH
10185: LD_INT 9
10187: PUSH
10188: LD_INT 10
10190: PUSH
10191: LD_INT 11
10193: PUSH
10194: LD_INT 12
10196: PUSH
10197: LD_INT 13
10199: PUSH
10200: LD_INT 14
10202: PUSH
10203: LD_INT 15
10205: PUSH
10206: LD_INT 16
10208: PUSH
10209: LD_INT 17
10211: PUSH
10212: LD_INT 18
10214: PUSH
10215: LD_INT 19
10217: PUSH
10218: LD_INT 20
10220: PUSH
10221: LD_INT 21
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 23
10229: PUSH
10230: LD_INT 24
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 26
10238: PUSH
10239: LD_INT 28
10241: PUSH
10242: LD_INT 30
10244: PUSH
10245: LD_INT 31
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: LD_INT 36
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 101
10287: PUSH
10288: LD_INT 102
10290: PUSH
10291: LD_INT 103
10293: PUSH
10294: LD_INT 104
10296: PUSH
10297: LD_INT 105
10299: PUSH
10300: LD_INT 106
10302: PUSH
10303: LD_INT 107
10305: PUSH
10306: LD_INT 108
10308: PUSH
10309: LD_INT 109
10311: PUSH
10312: LD_INT 110
10314: PUSH
10315: LD_INT 111
10317: PUSH
10318: LD_INT 112
10320: PUSH
10321: LD_INT 114
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: ST_TO_ADDR
10343: GO 12130
10345: LD_INT 11
10347: DOUBLE
10348: EQUAL
10349: IFTRUE 10353
10351: GO 10545
10353: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_INT 2
10361: PUSH
10362: LD_INT 3
10364: PUSH
10365: LD_INT 4
10367: PUSH
10368: LD_INT 5
10370: PUSH
10371: LD_INT 6
10373: PUSH
10374: LD_INT 7
10376: PUSH
10377: LD_INT 8
10379: PUSH
10380: LD_INT 9
10382: PUSH
10383: LD_INT 10
10385: PUSH
10386: LD_INT 11
10388: PUSH
10389: LD_INT 12
10391: PUSH
10392: LD_INT 13
10394: PUSH
10395: LD_INT 14
10397: PUSH
10398: LD_INT 15
10400: PUSH
10401: LD_INT 16
10403: PUSH
10404: LD_INT 17
10406: PUSH
10407: LD_INT 18
10409: PUSH
10410: LD_INT 19
10412: PUSH
10413: LD_INT 20
10415: PUSH
10416: LD_INT 21
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 24
10427: PUSH
10428: LD_INT 25
10430: PUSH
10431: LD_INT 26
10433: PUSH
10434: LD_INT 28
10436: PUSH
10437: LD_INT 30
10439: PUSH
10440: LD_INT 31
10442: PUSH
10443: LD_INT 32
10445: PUSH
10446: LD_INT 34
10448: PUSH
10449: LD_INT 36
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 101
10487: PUSH
10488: LD_INT 102
10490: PUSH
10491: LD_INT 103
10493: PUSH
10494: LD_INT 104
10496: PUSH
10497: LD_INT 105
10499: PUSH
10500: LD_INT 106
10502: PUSH
10503: LD_INT 107
10505: PUSH
10506: LD_INT 108
10508: PUSH
10509: LD_INT 109
10511: PUSH
10512: LD_INT 110
10514: PUSH
10515: LD_INT 111
10517: PUSH
10518: LD_INT 112
10520: PUSH
10521: LD_INT 114
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: ST_TO_ADDR
10543: GO 12130
10545: LD_INT 12
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10761
10553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10554: LD_ADDR_VAR 0 1
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: LD_INT 3
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: LD_INT 5
10573: PUSH
10574: LD_INT 6
10576: PUSH
10577: LD_INT 7
10579: PUSH
10580: LD_INT 8
10582: PUSH
10583: LD_INT 9
10585: PUSH
10586: LD_INT 10
10588: PUSH
10589: LD_INT 11
10591: PUSH
10592: LD_INT 12
10594: PUSH
10595: LD_INT 13
10597: PUSH
10598: LD_INT 14
10600: PUSH
10601: LD_INT 15
10603: PUSH
10604: LD_INT 16
10606: PUSH
10607: LD_INT 17
10609: PUSH
10610: LD_INT 18
10612: PUSH
10613: LD_INT 19
10615: PUSH
10616: LD_INT 20
10618: PUSH
10619: LD_INT 21
10621: PUSH
10622: LD_INT 22
10624: PUSH
10625: LD_INT 23
10627: PUSH
10628: LD_INT 24
10630: PUSH
10631: LD_INT 25
10633: PUSH
10634: LD_INT 26
10636: PUSH
10637: LD_INT 27
10639: PUSH
10640: LD_INT 28
10642: PUSH
10643: LD_INT 30
10645: PUSH
10646: LD_INT 31
10648: PUSH
10649: LD_INT 32
10651: PUSH
10652: LD_INT 33
10654: PUSH
10655: LD_INT 34
10657: PUSH
10658: LD_INT 36
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 101
10699: PUSH
10700: LD_INT 102
10702: PUSH
10703: LD_INT 103
10705: PUSH
10706: LD_INT 104
10708: PUSH
10709: LD_INT 105
10711: PUSH
10712: LD_INT 106
10714: PUSH
10715: LD_INT 107
10717: PUSH
10718: LD_INT 108
10720: PUSH
10721: LD_INT 109
10723: PUSH
10724: LD_INT 110
10726: PUSH
10727: LD_INT 111
10729: PUSH
10730: LD_INT 112
10732: PUSH
10733: LD_INT 113
10735: PUSH
10736: LD_INT 114
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: ST_TO_ADDR
10759: GO 12130
10761: LD_INT 13
10763: DOUBLE
10764: EQUAL
10765: IFTRUE 10769
10767: GO 10965
10769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10770: LD_ADDR_VAR 0 1
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: LD_INT 4
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: LD_INT 8
10792: PUSH
10793: LD_INT 9
10795: PUSH
10796: LD_INT 10
10798: PUSH
10799: LD_INT 11
10801: PUSH
10802: LD_INT 12
10804: PUSH
10805: LD_INT 14
10807: PUSH
10808: LD_INT 15
10810: PUSH
10811: LD_INT 16
10813: PUSH
10814: LD_INT 17
10816: PUSH
10817: LD_INT 18
10819: PUSH
10820: LD_INT 19
10822: PUSH
10823: LD_INT 20
10825: PUSH
10826: LD_INT 21
10828: PUSH
10829: LD_INT 22
10831: PUSH
10832: LD_INT 23
10834: PUSH
10835: LD_INT 24
10837: PUSH
10838: LD_INT 25
10840: PUSH
10841: LD_INT 26
10843: PUSH
10844: LD_INT 27
10846: PUSH
10847: LD_INT 28
10849: PUSH
10850: LD_INT 30
10852: PUSH
10853: LD_INT 31
10855: PUSH
10856: LD_INT 32
10858: PUSH
10859: LD_INT 33
10861: PUSH
10862: LD_INT 34
10864: PUSH
10865: LD_INT 36
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 101
10903: PUSH
10904: LD_INT 102
10906: PUSH
10907: LD_INT 103
10909: PUSH
10910: LD_INT 104
10912: PUSH
10913: LD_INT 105
10915: PUSH
10916: LD_INT 106
10918: PUSH
10919: LD_INT 107
10921: PUSH
10922: LD_INT 108
10924: PUSH
10925: LD_INT 109
10927: PUSH
10928: LD_INT 110
10930: PUSH
10931: LD_INT 111
10933: PUSH
10934: LD_INT 112
10936: PUSH
10937: LD_INT 113
10939: PUSH
10940: LD_INT 114
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: ST_TO_ADDR
10963: GO 12130
10965: LD_INT 14
10967: DOUBLE
10968: EQUAL
10969: IFTRUE 10973
10971: GO 11185
10973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10974: LD_ADDR_VAR 0 1
10978: PUSH
10979: LD_INT 1
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 3
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: LD_INT 5
10993: PUSH
10994: LD_INT 6
10996: PUSH
10997: LD_INT 7
10999: PUSH
11000: LD_INT 8
11002: PUSH
11003: LD_INT 9
11005: PUSH
11006: LD_INT 10
11008: PUSH
11009: LD_INT 11
11011: PUSH
11012: LD_INT 12
11014: PUSH
11015: LD_INT 13
11017: PUSH
11018: LD_INT 14
11020: PUSH
11021: LD_INT 15
11023: PUSH
11024: LD_INT 16
11026: PUSH
11027: LD_INT 17
11029: PUSH
11030: LD_INT 18
11032: PUSH
11033: LD_INT 19
11035: PUSH
11036: LD_INT 20
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 22
11044: PUSH
11045: LD_INT 23
11047: PUSH
11048: LD_INT 24
11050: PUSH
11051: LD_INT 25
11053: PUSH
11054: LD_INT 26
11056: PUSH
11057: LD_INT 27
11059: PUSH
11060: LD_INT 28
11062: PUSH
11063: LD_INT 29
11065: PUSH
11066: LD_INT 30
11068: PUSH
11069: LD_INT 31
11071: PUSH
11072: LD_INT 32
11074: PUSH
11075: LD_INT 33
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 36
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 101
11123: PUSH
11124: LD_INT 102
11126: PUSH
11127: LD_INT 103
11129: PUSH
11130: LD_INT 104
11132: PUSH
11133: LD_INT 105
11135: PUSH
11136: LD_INT 106
11138: PUSH
11139: LD_INT 107
11141: PUSH
11142: LD_INT 108
11144: PUSH
11145: LD_INT 109
11147: PUSH
11148: LD_INT 110
11150: PUSH
11151: LD_INT 111
11153: PUSH
11154: LD_INT 112
11156: PUSH
11157: LD_INT 113
11159: PUSH
11160: LD_INT 114
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: ST_TO_ADDR
11183: GO 12130
11185: LD_INT 15
11187: DOUBLE
11188: EQUAL
11189: IFTRUE 11193
11191: GO 11405
11193: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: LD_INT 2
11204: PUSH
11205: LD_INT 3
11207: PUSH
11208: LD_INT 4
11210: PUSH
11211: LD_INT 5
11213: PUSH
11214: LD_INT 6
11216: PUSH
11217: LD_INT 7
11219: PUSH
11220: LD_INT 8
11222: PUSH
11223: LD_INT 9
11225: PUSH
11226: LD_INT 10
11228: PUSH
11229: LD_INT 11
11231: PUSH
11232: LD_INT 12
11234: PUSH
11235: LD_INT 13
11237: PUSH
11238: LD_INT 14
11240: PUSH
11241: LD_INT 15
11243: PUSH
11244: LD_INT 16
11246: PUSH
11247: LD_INT 17
11249: PUSH
11250: LD_INT 18
11252: PUSH
11253: LD_INT 19
11255: PUSH
11256: LD_INT 20
11258: PUSH
11259: LD_INT 21
11261: PUSH
11262: LD_INT 22
11264: PUSH
11265: LD_INT 23
11267: PUSH
11268: LD_INT 24
11270: PUSH
11271: LD_INT 25
11273: PUSH
11274: LD_INT 26
11276: PUSH
11277: LD_INT 27
11279: PUSH
11280: LD_INT 28
11282: PUSH
11283: LD_INT 29
11285: PUSH
11286: LD_INT 30
11288: PUSH
11289: LD_INT 31
11291: PUSH
11292: LD_INT 32
11294: PUSH
11295: LD_INT 33
11297: PUSH
11298: LD_INT 34
11300: PUSH
11301: LD_INT 36
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 101
11343: PUSH
11344: LD_INT 102
11346: PUSH
11347: LD_INT 103
11349: PUSH
11350: LD_INT 104
11352: PUSH
11353: LD_INT 105
11355: PUSH
11356: LD_INT 106
11358: PUSH
11359: LD_INT 107
11361: PUSH
11362: LD_INT 108
11364: PUSH
11365: LD_INT 109
11367: PUSH
11368: LD_INT 110
11370: PUSH
11371: LD_INT 111
11373: PUSH
11374: LD_INT 112
11376: PUSH
11377: LD_INT 113
11379: PUSH
11380: LD_INT 114
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: ST_TO_ADDR
11403: GO 12130
11405: LD_INT 16
11407: DOUBLE
11408: EQUAL
11409: IFTRUE 11413
11411: GO 11537
11413: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11414: LD_ADDR_VAR 0 1
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 4
11424: PUSH
11425: LD_INT 5
11427: PUSH
11428: LD_INT 7
11430: PUSH
11431: LD_INT 11
11433: PUSH
11434: LD_INT 12
11436: PUSH
11437: LD_INT 15
11439: PUSH
11440: LD_INT 16
11442: PUSH
11443: LD_INT 20
11445: PUSH
11446: LD_INT 21
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 23
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 26
11460: PUSH
11461: LD_INT 30
11463: PUSH
11464: LD_INT 31
11466: PUSH
11467: LD_INT 32
11469: PUSH
11470: LD_INT 33
11472: PUSH
11473: LD_INT 34
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 101
11499: PUSH
11500: LD_INT 102
11502: PUSH
11503: LD_INT 103
11505: PUSH
11506: LD_INT 106
11508: PUSH
11509: LD_INT 108
11511: PUSH
11512: LD_INT 112
11514: PUSH
11515: LD_INT 113
11517: PUSH
11518: LD_INT 114
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: ST_TO_ADDR
11535: GO 12130
11537: LD_INT 17
11539: DOUBLE
11540: EQUAL
11541: IFTRUE 11545
11543: GO 11757
11545: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11546: LD_ADDR_VAR 0 1
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 3
11559: PUSH
11560: LD_INT 4
11562: PUSH
11563: LD_INT 5
11565: PUSH
11566: LD_INT 6
11568: PUSH
11569: LD_INT 7
11571: PUSH
11572: LD_INT 8
11574: PUSH
11575: LD_INT 9
11577: PUSH
11578: LD_INT 10
11580: PUSH
11581: LD_INT 11
11583: PUSH
11584: LD_INT 12
11586: PUSH
11587: LD_INT 13
11589: PUSH
11590: LD_INT 14
11592: PUSH
11593: LD_INT 15
11595: PUSH
11596: LD_INT 16
11598: PUSH
11599: LD_INT 17
11601: PUSH
11602: LD_INT 18
11604: PUSH
11605: LD_INT 19
11607: PUSH
11608: LD_INT 20
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 22
11616: PUSH
11617: LD_INT 23
11619: PUSH
11620: LD_INT 24
11622: PUSH
11623: LD_INT 25
11625: PUSH
11626: LD_INT 26
11628: PUSH
11629: LD_INT 27
11631: PUSH
11632: LD_INT 28
11634: PUSH
11635: LD_INT 29
11637: PUSH
11638: LD_INT 30
11640: PUSH
11641: LD_INT 31
11643: PUSH
11644: LD_INT 32
11646: PUSH
11647: LD_INT 33
11649: PUSH
11650: LD_INT 34
11652: PUSH
11653: LD_INT 36
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 101
11695: PUSH
11696: LD_INT 102
11698: PUSH
11699: LD_INT 103
11701: PUSH
11702: LD_INT 104
11704: PUSH
11705: LD_INT 105
11707: PUSH
11708: LD_INT 106
11710: PUSH
11711: LD_INT 107
11713: PUSH
11714: LD_INT 108
11716: PUSH
11717: LD_INT 109
11719: PUSH
11720: LD_INT 110
11722: PUSH
11723: LD_INT 111
11725: PUSH
11726: LD_INT 112
11728: PUSH
11729: LD_INT 113
11731: PUSH
11732: LD_INT 114
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: ST_TO_ADDR
11755: GO 12130
11757: LD_INT 18
11759: DOUBLE
11760: EQUAL
11761: IFTRUE 11765
11763: GO 11901
11765: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11766: LD_ADDR_VAR 0 1
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: LD_INT 4
11776: PUSH
11777: LD_INT 5
11779: PUSH
11780: LD_INT 7
11782: PUSH
11783: LD_INT 11
11785: PUSH
11786: LD_INT 12
11788: PUSH
11789: LD_INT 15
11791: PUSH
11792: LD_INT 16
11794: PUSH
11795: LD_INT 20
11797: PUSH
11798: LD_INT 21
11800: PUSH
11801: LD_INT 22
11803: PUSH
11804: LD_INT 23
11806: PUSH
11807: LD_INT 25
11809: PUSH
11810: LD_INT 26
11812: PUSH
11813: LD_INT 30
11815: PUSH
11816: LD_INT 31
11818: PUSH
11819: LD_INT 32
11821: PUSH
11822: LD_INT 33
11824: PUSH
11825: LD_INT 34
11827: PUSH
11828: LD_INT 35
11830: PUSH
11831: LD_INT 36
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 101
11859: PUSH
11860: LD_INT 102
11862: PUSH
11863: LD_INT 103
11865: PUSH
11866: LD_INT 106
11868: PUSH
11869: LD_INT 108
11871: PUSH
11872: LD_INT 112
11874: PUSH
11875: LD_INT 113
11877: PUSH
11878: LD_INT 114
11880: PUSH
11881: LD_INT 115
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: ST_TO_ADDR
11899: GO 12130
11901: LD_INT 19
11903: DOUBLE
11904: EQUAL
11905: IFTRUE 11909
11907: GO 12129
11909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11910: LD_ADDR_VAR 0 1
11914: PUSH
11915: LD_INT 1
11917: PUSH
11918: LD_INT 2
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: LD_INT 4
11926: PUSH
11927: LD_INT 5
11929: PUSH
11930: LD_INT 6
11932: PUSH
11933: LD_INT 7
11935: PUSH
11936: LD_INT 8
11938: PUSH
11939: LD_INT 9
11941: PUSH
11942: LD_INT 10
11944: PUSH
11945: LD_INT 11
11947: PUSH
11948: LD_INT 12
11950: PUSH
11951: LD_INT 13
11953: PUSH
11954: LD_INT 14
11956: PUSH
11957: LD_INT 15
11959: PUSH
11960: LD_INT 16
11962: PUSH
11963: LD_INT 17
11965: PUSH
11966: LD_INT 18
11968: PUSH
11969: LD_INT 19
11971: PUSH
11972: LD_INT 20
11974: PUSH
11975: LD_INT 21
11977: PUSH
11978: LD_INT 22
11980: PUSH
11981: LD_INT 23
11983: PUSH
11984: LD_INT 24
11986: PUSH
11987: LD_INT 25
11989: PUSH
11990: LD_INT 26
11992: PUSH
11993: LD_INT 27
11995: PUSH
11996: LD_INT 28
11998: PUSH
11999: LD_INT 29
12001: PUSH
12002: LD_INT 30
12004: PUSH
12005: LD_INT 31
12007: PUSH
12008: LD_INT 32
12010: PUSH
12011: LD_INT 33
12013: PUSH
12014: LD_INT 34
12016: PUSH
12017: LD_INT 35
12019: PUSH
12020: LD_INT 36
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 101
12063: PUSH
12064: LD_INT 102
12066: PUSH
12067: LD_INT 103
12069: PUSH
12070: LD_INT 104
12072: PUSH
12073: LD_INT 105
12075: PUSH
12076: LD_INT 106
12078: PUSH
12079: LD_INT 107
12081: PUSH
12082: LD_INT 108
12084: PUSH
12085: LD_INT 109
12087: PUSH
12088: LD_INT 110
12090: PUSH
12091: LD_INT 111
12093: PUSH
12094: LD_INT 112
12096: PUSH
12097: LD_INT 113
12099: PUSH
12100: LD_INT 114
12102: PUSH
12103: LD_INT 115
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: ST_TO_ADDR
12127: GO 12130
12129: POP
// end else
12130: GO 12349
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_INT 1
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: LD_INT 4
12148: PUSH
12149: LD_INT 5
12151: PUSH
12152: LD_INT 6
12154: PUSH
12155: LD_INT 7
12157: PUSH
12158: LD_INT 8
12160: PUSH
12161: LD_INT 9
12163: PUSH
12164: LD_INT 10
12166: PUSH
12167: LD_INT 11
12169: PUSH
12170: LD_INT 12
12172: PUSH
12173: LD_INT 13
12175: PUSH
12176: LD_INT 14
12178: PUSH
12179: LD_INT 15
12181: PUSH
12182: LD_INT 16
12184: PUSH
12185: LD_INT 17
12187: PUSH
12188: LD_INT 18
12190: PUSH
12191: LD_INT 19
12193: PUSH
12194: LD_INT 20
12196: PUSH
12197: LD_INT 21
12199: PUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 23
12205: PUSH
12206: LD_INT 24
12208: PUSH
12209: LD_INT 25
12211: PUSH
12212: LD_INT 26
12214: PUSH
12215: LD_INT 27
12217: PUSH
12218: LD_INT 28
12220: PUSH
12221: LD_INT 29
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 31
12229: PUSH
12230: LD_INT 32
12232: PUSH
12233: LD_INT 33
12235: PUSH
12236: LD_INT 34
12238: PUSH
12239: LD_INT 35
12241: PUSH
12242: LD_INT 36
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 101
12285: PUSH
12286: LD_INT 102
12288: PUSH
12289: LD_INT 103
12291: PUSH
12292: LD_INT 104
12294: PUSH
12295: LD_INT 105
12297: PUSH
12298: LD_INT 106
12300: PUSH
12301: LD_INT 107
12303: PUSH
12304: LD_INT 108
12306: PUSH
12307: LD_INT 109
12309: PUSH
12310: LD_INT 110
12312: PUSH
12313: LD_INT 111
12315: PUSH
12316: LD_INT 112
12318: PUSH
12319: LD_INT 113
12321: PUSH
12322: LD_INT 114
12324: PUSH
12325: LD_INT 115
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: ST_TO_ADDR
// if result then
12349: LD_VAR 0 1
12353: IFFALSE 12642
// begin normal :=  ;
12355: LD_ADDR_VAR 0 3
12359: PUSH
12360: LD_STRING 
12362: ST_TO_ADDR
// hardcore :=  ;
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_STRING 
12370: ST_TO_ADDR
// for i = 1 to normalCounter do
12371: LD_ADDR_VAR 0 5
12375: PUSH
12376: DOUBLE
12377: LD_INT 1
12379: DEC
12380: ST_TO_ADDR
12381: LD_EXP 66
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12488
// begin tmp := 0 ;
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: LD_STRING 0
12396: ST_TO_ADDR
// if result [ 1 ] then
12397: LD_VAR 0 1
12401: PUSH
12402: LD_INT 1
12404: ARRAY
12405: IFFALSE 12470
// if result [ 1 ] [ 1 ] = i then
12407: LD_VAR 0 1
12411: PUSH
12412: LD_INT 1
12414: ARRAY
12415: PUSH
12416: LD_INT 1
12418: ARRAY
12419: PUSH
12420: LD_VAR 0 5
12424: EQUAL
12425: IFFALSE 12470
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12427: LD_ADDR_VAR 0 1
12431: PUSH
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: LD_VAR 0 1
12444: PUSH
12445: LD_INT 1
12447: ARRAY
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 3
12456: PPUSH
12457: CALL_OW 1
12461: ST_TO_ADDR
// tmp := 1 ;
12462: LD_ADDR_VAR 0 2
12466: PUSH
12467: LD_STRING 1
12469: ST_TO_ADDR
// end ; normal := normal & tmp ;
12470: LD_ADDR_VAR 0 3
12474: PUSH
12475: LD_VAR 0 3
12479: PUSH
12480: LD_VAR 0 2
12484: STR
12485: ST_TO_ADDR
// end ;
12486: GO 12386
12488: POP
12489: POP
// for i = 1 to hardcoreCounter do
12490: LD_ADDR_VAR 0 5
12494: PUSH
12495: DOUBLE
12496: LD_INT 1
12498: DEC
12499: ST_TO_ADDR
12500: LD_EXP 67
12504: PUSH
12505: FOR_TO
12506: IFFALSE 12611
// begin tmp := 0 ;
12508: LD_ADDR_VAR 0 2
12512: PUSH
12513: LD_STRING 0
12515: ST_TO_ADDR
// if result [ 2 ] then
12516: LD_VAR 0 1
12520: PUSH
12521: LD_INT 2
12523: ARRAY
12524: IFFALSE 12593
// if result [ 2 ] [ 1 ] = 100 + i then
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 2
12533: ARRAY
12534: PUSH
12535: LD_INT 1
12537: ARRAY
12538: PUSH
12539: LD_INT 100
12541: PUSH
12542: LD_VAR 0 5
12546: PLUS
12547: EQUAL
12548: IFFALSE 12593
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: LD_INT 2
12562: PPUSH
12563: LD_VAR 0 1
12567: PUSH
12568: LD_INT 2
12570: ARRAY
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 3
12579: PPUSH
12580: CALL_OW 1
12584: ST_TO_ADDR
// tmp := 1 ;
12585: LD_ADDR_VAR 0 2
12589: PUSH
12590: LD_STRING 1
12592: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12593: LD_ADDR_VAR 0 4
12597: PUSH
12598: LD_VAR 0 4
12602: PUSH
12603: LD_VAR 0 2
12607: STR
12608: ST_TO_ADDR
// end ;
12609: GO 12505
12611: POP
12612: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12613: LD_STRING getStreamItemsFromMission("
12615: PUSH
12616: LD_VAR 0 3
12620: STR
12621: PUSH
12622: LD_STRING ","
12624: STR
12625: PUSH
12626: LD_VAR 0 4
12630: STR
12631: PUSH
12632: LD_STRING ")
12634: STR
12635: PPUSH
12636: CALL_OW 559
// end else
12640: GO 12649
// ToLua ( getStreamItemsFromMission("","") ) ;
12642: LD_STRING getStreamItemsFromMission("","")
12644: PPUSH
12645: CALL_OW 559
// end ;
12649: LD_VAR 0 1
12653: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12654: LD_VAR 0 2
12658: PUSH
12659: LD_INT 100
12661: EQUAL
12662: IFFALSE 13611
// begin if not StreamModeActive then
12664: LD_EXP 65
12668: NOT
12669: IFFALSE 12679
// StreamModeActive := true ;
12671: LD_ADDR_EXP 65
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// if p3 = 0 then
12679: LD_VAR 0 3
12683: PUSH
12684: LD_INT 0
12686: EQUAL
12687: IFFALSE 12693
// InitStreamMode ;
12689: CALL 8732 0 0
// if p3 = 1 then
12693: LD_VAR 0 3
12697: PUSH
12698: LD_INT 1
12700: EQUAL
12701: IFFALSE 12711
// sRocket := true ;
12703: LD_ADDR_EXP 70
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// if p3 = 2 then
12711: LD_VAR 0 3
12715: PUSH
12716: LD_INT 2
12718: EQUAL
12719: IFFALSE 12729
// sSpeed := true ;
12721: LD_ADDR_EXP 69
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// if p3 = 3 then
12729: LD_VAR 0 3
12733: PUSH
12734: LD_INT 3
12736: EQUAL
12737: IFFALSE 12747
// sEngine := true ;
12739: LD_ADDR_EXP 71
12743: PUSH
12744: LD_INT 1
12746: ST_TO_ADDR
// if p3 = 4 then
12747: LD_VAR 0 3
12751: PUSH
12752: LD_INT 4
12754: EQUAL
12755: IFFALSE 12765
// sSpec := true ;
12757: LD_ADDR_EXP 68
12761: PUSH
12762: LD_INT 1
12764: ST_TO_ADDR
// if p3 = 5 then
12765: LD_VAR 0 3
12769: PUSH
12770: LD_INT 5
12772: EQUAL
12773: IFFALSE 12783
// sLevel := true ;
12775: LD_ADDR_EXP 72
12779: PUSH
12780: LD_INT 1
12782: ST_TO_ADDR
// if p3 = 6 then
12783: LD_VAR 0 3
12787: PUSH
12788: LD_INT 6
12790: EQUAL
12791: IFFALSE 12801
// sArmoury := true ;
12793: LD_ADDR_EXP 73
12797: PUSH
12798: LD_INT 1
12800: ST_TO_ADDR
// if p3 = 7 then
12801: LD_VAR 0 3
12805: PUSH
12806: LD_INT 7
12808: EQUAL
12809: IFFALSE 12819
// sRadar := true ;
12811: LD_ADDR_EXP 74
12815: PUSH
12816: LD_INT 1
12818: ST_TO_ADDR
// if p3 = 8 then
12819: LD_VAR 0 3
12823: PUSH
12824: LD_INT 8
12826: EQUAL
12827: IFFALSE 12837
// sBunker := true ;
12829: LD_ADDR_EXP 75
12833: PUSH
12834: LD_INT 1
12836: ST_TO_ADDR
// if p3 = 9 then
12837: LD_VAR 0 3
12841: PUSH
12842: LD_INT 9
12844: EQUAL
12845: IFFALSE 12855
// sHack := true ;
12847: LD_ADDR_EXP 76
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// if p3 = 10 then
12855: LD_VAR 0 3
12859: PUSH
12860: LD_INT 10
12862: EQUAL
12863: IFFALSE 12873
// sFire := true ;
12865: LD_ADDR_EXP 77
12869: PUSH
12870: LD_INT 1
12872: ST_TO_ADDR
// if p3 = 11 then
12873: LD_VAR 0 3
12877: PUSH
12878: LD_INT 11
12880: EQUAL
12881: IFFALSE 12891
// sRefresh := true ;
12883: LD_ADDR_EXP 78
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if p3 = 12 then
12891: LD_VAR 0 3
12895: PUSH
12896: LD_INT 12
12898: EQUAL
12899: IFFALSE 12909
// sExp := true ;
12901: LD_ADDR_EXP 79
12905: PUSH
12906: LD_INT 1
12908: ST_TO_ADDR
// if p3 = 13 then
12909: LD_VAR 0 3
12913: PUSH
12914: LD_INT 13
12916: EQUAL
12917: IFFALSE 12927
// sDepot := true ;
12919: LD_ADDR_EXP 80
12923: PUSH
12924: LD_INT 1
12926: ST_TO_ADDR
// if p3 = 14 then
12927: LD_VAR 0 3
12931: PUSH
12932: LD_INT 14
12934: EQUAL
12935: IFFALSE 12945
// sFlag := true ;
12937: LD_ADDR_EXP 81
12941: PUSH
12942: LD_INT 1
12944: ST_TO_ADDR
// if p3 = 15 then
12945: LD_VAR 0 3
12949: PUSH
12950: LD_INT 15
12952: EQUAL
12953: IFFALSE 12963
// sKamikadze := true ;
12955: LD_ADDR_EXP 89
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// if p3 = 16 then
12963: LD_VAR 0 3
12967: PUSH
12968: LD_INT 16
12970: EQUAL
12971: IFFALSE 12981
// sTroll := true ;
12973: LD_ADDR_EXP 90
12977: PUSH
12978: LD_INT 1
12980: ST_TO_ADDR
// if p3 = 17 then
12981: LD_VAR 0 3
12985: PUSH
12986: LD_INT 17
12988: EQUAL
12989: IFFALSE 12999
// sSlow := true ;
12991: LD_ADDR_EXP 91
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if p3 = 18 then
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 18
13006: EQUAL
13007: IFFALSE 13017
// sLack := true ;
13009: LD_ADDR_EXP 92
13013: PUSH
13014: LD_INT 1
13016: ST_TO_ADDR
// if p3 = 19 then
13017: LD_VAR 0 3
13021: PUSH
13022: LD_INT 19
13024: EQUAL
13025: IFFALSE 13035
// sTank := true ;
13027: LD_ADDR_EXP 94
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// if p3 = 20 then
13035: LD_VAR 0 3
13039: PUSH
13040: LD_INT 20
13042: EQUAL
13043: IFFALSE 13053
// sRemote := true ;
13045: LD_ADDR_EXP 95
13049: PUSH
13050: LD_INT 1
13052: ST_TO_ADDR
// if p3 = 21 then
13053: LD_VAR 0 3
13057: PUSH
13058: LD_INT 21
13060: EQUAL
13061: IFFALSE 13071
// sPowell := true ;
13063: LD_ADDR_EXP 96
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if p3 = 22 then
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 22
13078: EQUAL
13079: IFFALSE 13089
// sTeleport := true ;
13081: LD_ADDR_EXP 99
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if p3 = 23 then
13089: LD_VAR 0 3
13093: PUSH
13094: LD_INT 23
13096: EQUAL
13097: IFFALSE 13107
// sOilTower := true ;
13099: LD_ADDR_EXP 101
13103: PUSH
13104: LD_INT 1
13106: ST_TO_ADDR
// if p3 = 24 then
13107: LD_VAR 0 3
13111: PUSH
13112: LD_INT 24
13114: EQUAL
13115: IFFALSE 13125
// sShovel := true ;
13117: LD_ADDR_EXP 102
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// if p3 = 25 then
13125: LD_VAR 0 3
13129: PUSH
13130: LD_INT 25
13132: EQUAL
13133: IFFALSE 13143
// sSheik := true ;
13135: LD_ADDR_EXP 103
13139: PUSH
13140: LD_INT 1
13142: ST_TO_ADDR
// if p3 = 26 then
13143: LD_VAR 0 3
13147: PUSH
13148: LD_INT 26
13150: EQUAL
13151: IFFALSE 13161
// sEarthquake := true ;
13153: LD_ADDR_EXP 105
13157: PUSH
13158: LD_INT 1
13160: ST_TO_ADDR
// if p3 = 27 then
13161: LD_VAR 0 3
13165: PUSH
13166: LD_INT 27
13168: EQUAL
13169: IFFALSE 13179
// sAI := true ;
13171: LD_ADDR_EXP 106
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// if p3 = 28 then
13179: LD_VAR 0 3
13183: PUSH
13184: LD_INT 28
13186: EQUAL
13187: IFFALSE 13197
// sCargo := true ;
13189: LD_ADDR_EXP 109
13193: PUSH
13194: LD_INT 1
13196: ST_TO_ADDR
// if p3 = 29 then
13197: LD_VAR 0 3
13201: PUSH
13202: LD_INT 29
13204: EQUAL
13205: IFFALSE 13215
// sDLaser := true ;
13207: LD_ADDR_EXP 110
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// if p3 = 30 then
13215: LD_VAR 0 3
13219: PUSH
13220: LD_INT 30
13222: EQUAL
13223: IFFALSE 13233
// sExchange := true ;
13225: LD_ADDR_EXP 111
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// if p3 = 31 then
13233: LD_VAR 0 3
13237: PUSH
13238: LD_INT 31
13240: EQUAL
13241: IFFALSE 13251
// sFac := true ;
13243: LD_ADDR_EXP 112
13247: PUSH
13248: LD_INT 1
13250: ST_TO_ADDR
// if p3 = 32 then
13251: LD_VAR 0 3
13255: PUSH
13256: LD_INT 32
13258: EQUAL
13259: IFFALSE 13269
// sPower := true ;
13261: LD_ADDR_EXP 113
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// if p3 = 33 then
13269: LD_VAR 0 3
13273: PUSH
13274: LD_INT 33
13276: EQUAL
13277: IFFALSE 13287
// sRandom := true ;
13279: LD_ADDR_EXP 114
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// if p3 = 34 then
13287: LD_VAR 0 3
13291: PUSH
13292: LD_INT 34
13294: EQUAL
13295: IFFALSE 13305
// sShield := true ;
13297: LD_ADDR_EXP 115
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// if p3 = 35 then
13305: LD_VAR 0 3
13309: PUSH
13310: LD_INT 35
13312: EQUAL
13313: IFFALSE 13323
// sTime := true ;
13315: LD_ADDR_EXP 116
13319: PUSH
13320: LD_INT 1
13322: ST_TO_ADDR
// if p3 = 36 then
13323: LD_VAR 0 3
13327: PUSH
13328: LD_INT 36
13330: EQUAL
13331: IFFALSE 13341
// sTools := true ;
13333: LD_ADDR_EXP 117
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// if p3 = 101 then
13341: LD_VAR 0 3
13345: PUSH
13346: LD_INT 101
13348: EQUAL
13349: IFFALSE 13359
// sSold := true ;
13351: LD_ADDR_EXP 82
13355: PUSH
13356: LD_INT 1
13358: ST_TO_ADDR
// if p3 = 102 then
13359: LD_VAR 0 3
13363: PUSH
13364: LD_INT 102
13366: EQUAL
13367: IFFALSE 13377
// sDiff := true ;
13369: LD_ADDR_EXP 83
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// if p3 = 103 then
13377: LD_VAR 0 3
13381: PUSH
13382: LD_INT 103
13384: EQUAL
13385: IFFALSE 13395
// sFog := true ;
13387: LD_ADDR_EXP 86
13391: PUSH
13392: LD_INT 1
13394: ST_TO_ADDR
// if p3 = 104 then
13395: LD_VAR 0 3
13399: PUSH
13400: LD_INT 104
13402: EQUAL
13403: IFFALSE 13413
// sReset := true ;
13405: LD_ADDR_EXP 87
13409: PUSH
13410: LD_INT 1
13412: ST_TO_ADDR
// if p3 = 105 then
13413: LD_VAR 0 3
13417: PUSH
13418: LD_INT 105
13420: EQUAL
13421: IFFALSE 13431
// sSun := true ;
13423: LD_ADDR_EXP 88
13427: PUSH
13428: LD_INT 1
13430: ST_TO_ADDR
// if p3 = 106 then
13431: LD_VAR 0 3
13435: PUSH
13436: LD_INT 106
13438: EQUAL
13439: IFFALSE 13449
// sTiger := true ;
13441: LD_ADDR_EXP 84
13445: PUSH
13446: LD_INT 1
13448: ST_TO_ADDR
// if p3 = 107 then
13449: LD_VAR 0 3
13453: PUSH
13454: LD_INT 107
13456: EQUAL
13457: IFFALSE 13467
// sBomb := true ;
13459: LD_ADDR_EXP 85
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// if p3 = 108 then
13467: LD_VAR 0 3
13471: PUSH
13472: LD_INT 108
13474: EQUAL
13475: IFFALSE 13485
// sWound := true ;
13477: LD_ADDR_EXP 93
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// if p3 = 109 then
13485: LD_VAR 0 3
13489: PUSH
13490: LD_INT 109
13492: EQUAL
13493: IFFALSE 13503
// sBetray := true ;
13495: LD_ADDR_EXP 97
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// if p3 = 110 then
13503: LD_VAR 0 3
13507: PUSH
13508: LD_INT 110
13510: EQUAL
13511: IFFALSE 13521
// sContamin := true ;
13513: LD_ADDR_EXP 98
13517: PUSH
13518: LD_INT 1
13520: ST_TO_ADDR
// if p3 = 111 then
13521: LD_VAR 0 3
13525: PUSH
13526: LD_INT 111
13528: EQUAL
13529: IFFALSE 13539
// sOil := true ;
13531: LD_ADDR_EXP 100
13535: PUSH
13536: LD_INT 1
13538: ST_TO_ADDR
// if p3 = 112 then
13539: LD_VAR 0 3
13543: PUSH
13544: LD_INT 112
13546: EQUAL
13547: IFFALSE 13557
// sStu := true ;
13549: LD_ADDR_EXP 104
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// if p3 = 113 then
13557: LD_VAR 0 3
13561: PUSH
13562: LD_INT 113
13564: EQUAL
13565: IFFALSE 13575
// sBazooka := true ;
13567: LD_ADDR_EXP 107
13571: PUSH
13572: LD_INT 1
13574: ST_TO_ADDR
// if p3 = 114 then
13575: LD_VAR 0 3
13579: PUSH
13580: LD_INT 114
13582: EQUAL
13583: IFFALSE 13593
// sMortar := true ;
13585: LD_ADDR_EXP 108
13589: PUSH
13590: LD_INT 1
13592: ST_TO_ADDR
// if p3 = 115 then
13593: LD_VAR 0 3
13597: PUSH
13598: LD_INT 115
13600: EQUAL
13601: IFFALSE 13611
// sRanger := true ;
13603: LD_ADDR_EXP 118
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// end ; end ;
13611: PPOPN 6
13613: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13614: LD_EXP 65
13618: PUSH
13619: LD_EXP 70
13623: AND
13624: IFFALSE 13748
13626: GO 13628
13628: DISABLE
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
// begin enable ;
13633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13634: LD_ADDR_VAR 0 2
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_OWVAR 2
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 34
13656: PUSH
13657: LD_INT 7
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 34
13666: PUSH
13667: LD_INT 45
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 34
13676: PUSH
13677: LD_INT 28
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 34
13686: PUSH
13687: LD_INT 47
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 69
13709: ST_TO_ADDR
// if not tmp then
13710: LD_VAR 0 2
13714: NOT
13715: IFFALSE 13719
// exit ;
13717: GO 13748
// for i in tmp do
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_VAR 0 2
13728: PUSH
13729: FOR_IN
13730: IFFALSE 13746
// begin SetLives ( i , 0 ) ;
13732: LD_VAR 0 1
13736: PPUSH
13737: LD_INT 0
13739: PPUSH
13740: CALL_OW 234
// end ;
13744: GO 13729
13746: POP
13747: POP
// end ;
13748: PPOPN 2
13750: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13751: LD_EXP 65
13755: PUSH
13756: LD_EXP 71
13760: AND
13761: IFFALSE 13845
13763: GO 13765
13765: DISABLE
13766: LD_INT 0
13768: PPUSH
13769: PPUSH
// begin enable ;
13770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_INT 22
13778: PUSH
13779: LD_OWVAR 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 32
13790: PUSH
13791: LD_INT 3
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: ST_TO_ADDR
// if not tmp then
13807: LD_VAR 0 2
13811: NOT
13812: IFFALSE 13816
// exit ;
13814: GO 13845
// for i in tmp do
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_VAR 0 2
13825: PUSH
13826: FOR_IN
13827: IFFALSE 13843
// begin SetLives ( i , 0 ) ;
13829: LD_VAR 0 1
13833: PPUSH
13834: LD_INT 0
13836: PPUSH
13837: CALL_OW 234
// end ;
13841: GO 13826
13843: POP
13844: POP
// end ;
13845: PPOPN 2
13847: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13848: LD_EXP 65
13852: PUSH
13853: LD_EXP 68
13857: AND
13858: IFFALSE 13951
13860: GO 13862
13862: DISABLE
13863: LD_INT 0
13865: PPUSH
// begin enable ;
13866: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13867: LD_ADDR_VAR 0 1
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_OWVAR 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 5
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 25
13899: PUSH
13900: LD_INT 9
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 25
13909: PUSH
13910: LD_INT 8
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PPUSH
13927: CALL_OW 69
13931: PUSH
13932: FOR_IN
13933: IFFALSE 13949
// begin SetClass ( i , 1 ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: LD_INT 1
13942: PPUSH
13943: CALL_OW 336
// end ;
13947: GO 13932
13949: POP
13950: POP
// end ;
13951: PPOPN 1
13953: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13954: LD_EXP 65
13958: PUSH
13959: LD_EXP 69
13963: AND
13964: PUSH
13965: LD_OWVAR 65
13969: PUSH
13970: LD_INT 7
13972: LESS
13973: AND
13974: IFFALSE 13988
13976: GO 13978
13978: DISABLE
// begin enable ;
13979: ENABLE
// game_speed := 7 ;
13980: LD_ADDR_OWVAR 65
13984: PUSH
13985: LD_INT 7
13987: ST_TO_ADDR
// end ;
13988: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13989: LD_EXP 65
13993: PUSH
13994: LD_EXP 72
13998: AND
13999: IFFALSE 14201
14001: GO 14003
14003: DISABLE
14004: LD_INT 0
14006: PPUSH
14007: PPUSH
14008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14009: LD_ADDR_VAR 0 3
14013: PUSH
14014: LD_INT 81
14016: PUSH
14017: LD_OWVAR 2
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 21
14028: PUSH
14029: LD_INT 1
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 69
14044: ST_TO_ADDR
// if not tmp then
14045: LD_VAR 0 3
14049: NOT
14050: IFFALSE 14054
// exit ;
14052: GO 14201
// if tmp > 5 then
14054: LD_VAR 0 3
14058: PUSH
14059: LD_INT 5
14061: GREATER
14062: IFFALSE 14074
// k := 5 else
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_INT 5
14071: ST_TO_ADDR
14072: GO 14084
// k := tmp ;
14074: LD_ADDR_VAR 0 2
14078: PUSH
14079: LD_VAR 0 3
14083: ST_TO_ADDR
// for i := 1 to k do
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: DOUBLE
14090: LD_INT 1
14092: DEC
14093: ST_TO_ADDR
14094: LD_VAR 0 2
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14199
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14102: LD_VAR 0 3
14106: PUSH
14107: LD_VAR 0 1
14111: ARRAY
14112: PPUSH
14113: LD_VAR 0 1
14117: PUSH
14118: LD_INT 4
14120: MOD
14121: PUSH
14122: LD_INT 1
14124: PLUS
14125: PPUSH
14126: CALL_OW 259
14130: PUSH
14131: LD_INT 10
14133: LESS
14134: IFFALSE 14197
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14136: LD_VAR 0 3
14140: PUSH
14141: LD_VAR 0 1
14145: ARRAY
14146: PPUSH
14147: LD_VAR 0 1
14151: PUSH
14152: LD_INT 4
14154: MOD
14155: PUSH
14156: LD_INT 1
14158: PLUS
14159: PPUSH
14160: LD_VAR 0 3
14164: PUSH
14165: LD_VAR 0 1
14169: ARRAY
14170: PPUSH
14171: LD_VAR 0 1
14175: PUSH
14176: LD_INT 4
14178: MOD
14179: PUSH
14180: LD_INT 1
14182: PLUS
14183: PPUSH
14184: CALL_OW 259
14188: PUSH
14189: LD_INT 1
14191: PLUS
14192: PPUSH
14193: CALL_OW 237
14197: GO 14099
14199: POP
14200: POP
// end ;
14201: PPOPN 3
14203: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14204: LD_EXP 65
14208: PUSH
14209: LD_EXP 73
14213: AND
14214: IFFALSE 14234
14216: GO 14218
14218: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14219: LD_INT 4
14221: PPUSH
14222: LD_OWVAR 2
14226: PPUSH
14227: LD_INT 0
14229: PPUSH
14230: CALL_OW 324
14234: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14235: LD_EXP 65
14239: PUSH
14240: LD_EXP 102
14244: AND
14245: IFFALSE 14265
14247: GO 14249
14249: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14250: LD_INT 19
14252: PPUSH
14253: LD_OWVAR 2
14257: PPUSH
14258: LD_INT 0
14260: PPUSH
14261: CALL_OW 324
14265: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14266: LD_EXP 65
14270: PUSH
14271: LD_EXP 74
14275: AND
14276: IFFALSE 14378
14278: GO 14280
14280: DISABLE
14281: LD_INT 0
14283: PPUSH
14284: PPUSH
// begin enable ;
14285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_OWVAR 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 34
14308: PUSH
14309: LD_INT 11
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 34
14318: PUSH
14319: LD_INT 30
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 69
14339: ST_TO_ADDR
// if not tmp then
14340: LD_VAR 0 2
14344: NOT
14345: IFFALSE 14349
// exit ;
14347: GO 14378
// for i in tmp do
14349: LD_ADDR_VAR 0 1
14353: PUSH
14354: LD_VAR 0 2
14358: PUSH
14359: FOR_IN
14360: IFFALSE 14376
// begin SetLives ( i , 0 ) ;
14362: LD_VAR 0 1
14366: PPUSH
14367: LD_INT 0
14369: PPUSH
14370: CALL_OW 234
// end ;
14374: GO 14359
14376: POP
14377: POP
// end ;
14378: PPOPN 2
14380: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14381: LD_EXP 65
14385: PUSH
14386: LD_EXP 75
14390: AND
14391: IFFALSE 14411
14393: GO 14395
14395: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14396: LD_INT 32
14398: PPUSH
14399: LD_OWVAR 2
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 324
14411: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14412: LD_EXP 65
14416: PUSH
14417: LD_EXP 76
14421: AND
14422: IFFALSE 14603
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
14431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14432: LD_ADDR_VAR 0 2
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_OWVAR 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 33
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 69
14467: ST_TO_ADDR
// if not tmp then
14468: LD_VAR 0 2
14472: NOT
14473: IFFALSE 14477
// exit ;
14475: GO 14603
// side := 0 ;
14477: LD_ADDR_VAR 0 3
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// for i := 1 to 8 do
14485: LD_ADDR_VAR 0 1
14489: PUSH
14490: DOUBLE
14491: LD_INT 1
14493: DEC
14494: ST_TO_ADDR
14495: LD_INT 8
14497: PUSH
14498: FOR_TO
14499: IFFALSE 14547
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14501: LD_OWVAR 2
14505: PUSH
14506: LD_VAR 0 1
14510: NONEQUAL
14511: PUSH
14512: LD_OWVAR 2
14516: PPUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 81
14526: PUSH
14527: LD_INT 2
14529: EQUAL
14530: AND
14531: IFFALSE 14545
// begin side := i ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_VAR 0 1
14542: ST_TO_ADDR
// break ;
14543: GO 14547
// end ;
14545: GO 14498
14547: POP
14548: POP
// if not side then
14549: LD_VAR 0 3
14553: NOT
14554: IFFALSE 14558
// exit ;
14556: GO 14603
// for i := 1 to tmp do
14558: LD_ADDR_VAR 0 1
14562: PUSH
14563: DOUBLE
14564: LD_INT 1
14566: DEC
14567: ST_TO_ADDR
14568: LD_VAR 0 2
14572: PUSH
14573: FOR_TO
14574: IFFALSE 14601
// if Prob ( 60 ) then
14576: LD_INT 60
14578: PPUSH
14579: CALL_OW 13
14583: IFFALSE 14599
// SetSide ( i , side ) ;
14585: LD_VAR 0 1
14589: PPUSH
14590: LD_VAR 0 3
14594: PPUSH
14595: CALL_OW 235
14599: GO 14573
14601: POP
14602: POP
// end ;
14603: PPOPN 3
14605: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14606: LD_EXP 65
14610: PUSH
14611: LD_EXP 78
14615: AND
14616: IFFALSE 14735
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: LD_INT 22
14631: PUSH
14632: LD_OWVAR 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 21
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 3
14653: PUSH
14654: LD_INT 23
14656: PUSH
14657: LD_INT 0
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 69
14677: PUSH
14678: FOR_IN
14679: IFFALSE 14733
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14681: LD_VAR 0 1
14685: PPUSH
14686: CALL_OW 257
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: LD_INT 2
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 4
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: IN
14709: IFFALSE 14731
// SetClass ( un , rand ( 1 , 4 ) ) ;
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_INT 1
14718: PPUSH
14719: LD_INT 4
14721: PPUSH
14722: CALL_OW 12
14726: PPUSH
14727: CALL_OW 336
14731: GO 14678
14733: POP
14734: POP
// end ;
14735: PPOPN 1
14737: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14738: LD_EXP 65
14742: PUSH
14743: LD_EXP 77
14747: AND
14748: IFFALSE 14827
14750: GO 14752
14752: DISABLE
14753: LD_INT 0
14755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14756: LD_ADDR_VAR 0 1
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_OWVAR 2
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 21
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PPUSH
14787: CALL_OW 69
14791: ST_TO_ADDR
// if not tmp then
14792: LD_VAR 0 1
14796: NOT
14797: IFFALSE 14801
// exit ;
14799: GO 14827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14801: LD_VAR 0 1
14805: PUSH
14806: LD_INT 1
14808: PPUSH
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 12
14818: ARRAY
14819: PPUSH
14820: LD_INT 100
14822: PPUSH
14823: CALL_OW 234
// end ;
14827: PPOPN 1
14829: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14830: LD_EXP 65
14834: PUSH
14835: LD_EXP 79
14839: AND
14840: IFFALSE 14938
14842: GO 14844
14844: DISABLE
14845: LD_INT 0
14847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14848: LD_ADDR_VAR 0 1
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_OWVAR 2
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: ST_TO_ADDR
// if not tmp then
14884: LD_VAR 0 1
14888: NOT
14889: IFFALSE 14893
// exit ;
14891: GO 14938
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14893: LD_VAR 0 1
14897: PUSH
14898: LD_INT 1
14900: PPUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 12
14910: ARRAY
14911: PPUSH
14912: LD_INT 1
14914: PPUSH
14915: LD_INT 4
14917: PPUSH
14918: CALL_OW 12
14922: PPUSH
14923: LD_INT 3000
14925: PPUSH
14926: LD_INT 9000
14928: PPUSH
14929: CALL_OW 12
14933: PPUSH
14934: CALL_OW 492
// end ;
14938: PPOPN 1
14940: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14941: LD_EXP 65
14945: PUSH
14946: LD_EXP 80
14950: AND
14951: IFFALSE 14971
14953: GO 14955
14955: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14956: LD_INT 1
14958: PPUSH
14959: LD_OWVAR 2
14963: PPUSH
14964: LD_INT 0
14966: PPUSH
14967: CALL_OW 324
14971: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14972: LD_EXP 65
14976: PUSH
14977: LD_EXP 81
14981: AND
14982: IFFALSE 15065
14984: GO 14986
14986: DISABLE
14987: LD_INT 0
14989: PPUSH
14990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_OWVAR 2
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 21
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PPUSH
15022: CALL_OW 69
15026: ST_TO_ADDR
// if not tmp then
15027: LD_VAR 0 2
15031: NOT
15032: IFFALSE 15036
// exit ;
15034: GO 15065
// for i in tmp do
15036: LD_ADDR_VAR 0 1
15040: PUSH
15041: LD_VAR 0 2
15045: PUSH
15046: FOR_IN
15047: IFFALSE 15063
// SetBLevel ( i , 10 ) ;
15049: LD_VAR 0 1
15053: PPUSH
15054: LD_INT 10
15056: PPUSH
15057: CALL_OW 241
15061: GO 15046
15063: POP
15064: POP
// end ;
15065: PPOPN 2
15067: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15068: LD_EXP 65
15072: PUSH
15073: LD_EXP 82
15077: AND
15078: IFFALSE 15189
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
15086: PPUSH
15087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15088: LD_ADDR_VAR 0 3
15092: PUSH
15093: LD_INT 22
15095: PUSH
15096: LD_OWVAR 2
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 25
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: ST_TO_ADDR
// if not tmp then
15124: LD_VAR 0 3
15128: NOT
15129: IFFALSE 15133
// exit ;
15131: GO 15189
// un := tmp [ rand ( 1 , tmp ) ] ;
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 1
15145: PPUSH
15146: LD_VAR 0 3
15150: PPUSH
15151: CALL_OW 12
15155: ARRAY
15156: ST_TO_ADDR
// if Crawls ( un ) then
15157: LD_VAR 0 2
15161: PPUSH
15162: CALL_OW 318
15166: IFFALSE 15177
// ComWalk ( un ) ;
15168: LD_VAR 0 2
15172: PPUSH
15173: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15177: LD_VAR 0 2
15181: PPUSH
15182: LD_INT 5
15184: PPUSH
15185: CALL_OW 336
// end ;
15189: PPOPN 3
15191: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15192: LD_EXP 65
15196: PUSH
15197: LD_EXP 83
15201: AND
15202: PUSH
15203: LD_OWVAR 67
15207: PUSH
15208: LD_INT 3
15210: LESS
15211: AND
15212: IFFALSE 15231
15214: GO 15216
15216: DISABLE
// Difficulty := Difficulty + 1 ;
15217: LD_ADDR_OWVAR 67
15221: PUSH
15222: LD_OWVAR 67
15226: PUSH
15227: LD_INT 1
15229: PLUS
15230: ST_TO_ADDR
15231: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15232: LD_EXP 65
15236: PUSH
15237: LD_EXP 84
15241: AND
15242: IFFALSE 15345
15244: GO 15246
15246: DISABLE
15247: LD_INT 0
15249: PPUSH
// begin for i := 1 to 5 do
15250: LD_ADDR_VAR 0 1
15254: PUSH
15255: DOUBLE
15256: LD_INT 1
15258: DEC
15259: ST_TO_ADDR
15260: LD_INT 5
15262: PUSH
15263: FOR_TO
15264: IFFALSE 15343
// begin uc_nation := nation_nature ;
15266: LD_ADDR_OWVAR 21
15270: PUSH
15271: LD_INT 0
15273: ST_TO_ADDR
// uc_side := 0 ;
15274: LD_ADDR_OWVAR 20
15278: PUSH
15279: LD_INT 0
15281: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15282: LD_ADDR_OWVAR 29
15286: PUSH
15287: LD_INT 12
15289: PUSH
15290: LD_INT 12
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: ST_TO_ADDR
// hc_agressivity := 20 ;
15297: LD_ADDR_OWVAR 35
15301: PUSH
15302: LD_INT 20
15304: ST_TO_ADDR
// hc_class := class_tiger ;
15305: LD_ADDR_OWVAR 28
15309: PUSH
15310: LD_INT 14
15312: ST_TO_ADDR
// hc_gallery :=  ;
15313: LD_ADDR_OWVAR 33
15317: PUSH
15318: LD_STRING 
15320: ST_TO_ADDR
// hc_name :=  ;
15321: LD_ADDR_OWVAR 26
15325: PUSH
15326: LD_STRING 
15328: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15329: CALL_OW 44
15333: PPUSH
15334: LD_INT 0
15336: PPUSH
15337: CALL_OW 51
// end ;
15341: GO 15263
15343: POP
15344: POP
// end ;
15345: PPOPN 1
15347: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15348: LD_EXP 65
15352: PUSH
15353: LD_EXP 85
15357: AND
15358: IFFALSE 15367
15360: GO 15362
15362: DISABLE
// StreamSibBomb ;
15363: CALL 15368 0 0
15367: END
// export function StreamSibBomb ; var i , x , y ; begin
15368: LD_INT 0
15370: PPUSH
15371: PPUSH
15372: PPUSH
15373: PPUSH
// result := false ;
15374: LD_ADDR_VAR 0 1
15378: PUSH
15379: LD_INT 0
15381: ST_TO_ADDR
// for i := 1 to 16 do
15382: LD_ADDR_VAR 0 2
15386: PUSH
15387: DOUBLE
15388: LD_INT 1
15390: DEC
15391: ST_TO_ADDR
15392: LD_INT 16
15394: PUSH
15395: FOR_TO
15396: IFFALSE 15595
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15398: LD_ADDR_VAR 0 3
15402: PUSH
15403: LD_INT 10
15405: PUSH
15406: LD_INT 20
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 40
15414: PUSH
15415: LD_INT 50
15417: PUSH
15418: LD_INT 60
15420: PUSH
15421: LD_INT 70
15423: PUSH
15424: LD_INT 80
15426: PUSH
15427: LD_INT 90
15429: PUSH
15430: LD_INT 100
15432: PUSH
15433: LD_INT 110
15435: PUSH
15436: LD_INT 120
15438: PUSH
15439: LD_INT 130
15441: PUSH
15442: LD_INT 140
15444: PUSH
15445: LD_INT 150
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 1
15467: PPUSH
15468: LD_INT 15
15470: PPUSH
15471: CALL_OW 12
15475: ARRAY
15476: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15477: LD_ADDR_VAR 0 4
15481: PUSH
15482: LD_INT 10
15484: PUSH
15485: LD_INT 20
15487: PUSH
15488: LD_INT 30
15490: PUSH
15491: LD_INT 40
15493: PUSH
15494: LD_INT 50
15496: PUSH
15497: LD_INT 60
15499: PUSH
15500: LD_INT 70
15502: PUSH
15503: LD_INT 80
15505: PUSH
15506: LD_INT 90
15508: PUSH
15509: LD_INT 100
15511: PUSH
15512: LD_INT 110
15514: PUSH
15515: LD_INT 120
15517: PUSH
15518: LD_INT 130
15520: PUSH
15521: LD_INT 140
15523: PUSH
15524: LD_INT 150
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 1
15546: PPUSH
15547: LD_INT 15
15549: PPUSH
15550: CALL_OW 12
15554: ARRAY
15555: ST_TO_ADDR
// if ValidHex ( x , y ) then
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_VAR 0 4
15565: PPUSH
15566: CALL_OW 488
15570: IFFALSE 15593
// begin result := [ x , y ] ;
15572: LD_ADDR_VAR 0 1
15576: PUSH
15577: LD_VAR 0 3
15581: PUSH
15582: LD_VAR 0 4
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
// break ;
15591: GO 15595
// end ; end ;
15593: GO 15395
15595: POP
15596: POP
// if result then
15597: LD_VAR 0 1
15601: IFFALSE 15661
// begin ToLua ( playSibBomb() ) ;
15603: LD_STRING playSibBomb()
15605: PPUSH
15606: CALL_OW 559
// wait ( 0 0$14 ) ;
15610: LD_INT 490
15612: PPUSH
15613: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15617: LD_VAR 0 1
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PPUSH
15626: LD_VAR 0 1
15630: PUSH
15631: LD_INT 2
15633: ARRAY
15634: PPUSH
15635: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15639: LD_VAR 0 1
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: PPUSH
15657: CALL_OW 429
// end ; end ;
15661: LD_VAR 0 1
15665: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15666: LD_EXP 65
15670: PUSH
15671: LD_EXP 87
15675: AND
15676: IFFALSE 15688
15678: GO 15680
15680: DISABLE
// YouLost (  ) ;
15681: LD_STRING 
15683: PPUSH
15684: CALL_OW 104
15688: END
// every 0 0$1 trigger StreamModeActive and sFog do
15689: LD_EXP 65
15693: PUSH
15694: LD_EXP 86
15698: AND
15699: IFFALSE 15713
15701: GO 15703
15703: DISABLE
// FogOff ( your_side ) ;
15704: LD_OWVAR 2
15708: PPUSH
15709: CALL_OW 344
15713: END
// every 0 0$1 trigger StreamModeActive and sSun do
15714: LD_EXP 65
15718: PUSH
15719: LD_EXP 88
15723: AND
15724: IFFALSE 15752
15726: GO 15728
15728: DISABLE
// begin solar_recharge_percent := 0 ;
15729: LD_ADDR_OWVAR 79
15733: PUSH
15734: LD_INT 0
15736: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15737: LD_INT 10500
15739: PPUSH
15740: CALL_OW 67
// solar_recharge_percent := 100 ;
15744: LD_ADDR_OWVAR 79
15748: PUSH
15749: LD_INT 100
15751: ST_TO_ADDR
// end ;
15752: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15753: LD_EXP 65
15757: PUSH
15758: LD_EXP 89
15762: AND
15763: IFFALSE 16002
15765: GO 15767
15767: DISABLE
15768: LD_INT 0
15770: PPUSH
15771: PPUSH
15772: PPUSH
// begin tmp := [ ] ;
15773: LD_ADDR_VAR 0 3
15777: PUSH
15778: EMPTY
15779: ST_TO_ADDR
// for i := 1 to 6 do
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: DOUBLE
15786: LD_INT 1
15788: DEC
15789: ST_TO_ADDR
15790: LD_INT 6
15792: PUSH
15793: FOR_TO
15794: IFFALSE 15899
// begin uc_nation := nation_nature ;
15796: LD_ADDR_OWVAR 21
15800: PUSH
15801: LD_INT 0
15803: ST_TO_ADDR
// uc_side := 0 ;
15804: LD_ADDR_OWVAR 20
15808: PUSH
15809: LD_INT 0
15811: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15812: LD_ADDR_OWVAR 29
15816: PUSH
15817: LD_INT 12
15819: PUSH
15820: LD_INT 12
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: ST_TO_ADDR
// hc_agressivity := 20 ;
15827: LD_ADDR_OWVAR 35
15831: PUSH
15832: LD_INT 20
15834: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15835: LD_ADDR_OWVAR 28
15839: PUSH
15840: LD_INT 17
15842: ST_TO_ADDR
// hc_gallery :=  ;
15843: LD_ADDR_OWVAR 33
15847: PUSH
15848: LD_STRING 
15850: ST_TO_ADDR
// hc_name :=  ;
15851: LD_ADDR_OWVAR 26
15855: PUSH
15856: LD_STRING 
15858: ST_TO_ADDR
// un := CreateHuman ;
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: CALL_OW 44
15868: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15869: LD_VAR 0 2
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 51
// tmp := tmp ^ un ;
15881: LD_ADDR_VAR 0 3
15885: PUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_VAR 0 2
15895: ADD
15896: ST_TO_ADDR
// end ;
15897: GO 15793
15899: POP
15900: POP
// repeat wait ( 0 0$1 ) ;
15901: LD_INT 35
15903: PPUSH
15904: CALL_OW 67
// for un in tmp do
15908: LD_ADDR_VAR 0 2
15912: PUSH
15913: LD_VAR 0 3
15917: PUSH
15918: FOR_IN
15919: IFFALSE 15993
// begin if IsDead ( un ) then
15921: LD_VAR 0 2
15925: PPUSH
15926: CALL_OW 301
15930: IFFALSE 15950
// begin tmp := tmp diff un ;
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_VAR 0 2
15946: DIFF
15947: ST_TO_ADDR
// continue ;
15948: GO 15918
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15950: LD_VAR 0 2
15954: PPUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: PPUSH
15977: LD_VAR 0 2
15981: PPUSH
15982: CALL_OW 74
15986: PPUSH
15987: CALL_OW 115
// end ;
15991: GO 15918
15993: POP
15994: POP
// until not tmp ;
15995: LD_VAR 0 3
15999: NOT
16000: IFFALSE 15901
// end ;
16002: PPOPN 3
16004: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16005: LD_EXP 65
16009: PUSH
16010: LD_EXP 90
16014: AND
16015: IFFALSE 16069
16017: GO 16019
16019: DISABLE
// begin ToLua ( displayTroll(); ) ;
16020: LD_STRING displayTroll();
16022: PPUSH
16023: CALL_OW 559
// wait ( 3 3$00 ) ;
16027: LD_INT 6300
16029: PPUSH
16030: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16034: LD_STRING hideTroll();
16036: PPUSH
16037: CALL_OW 559
// wait ( 1 1$00 ) ;
16041: LD_INT 2100
16043: PPUSH
16044: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16048: LD_STRING displayTroll();
16050: PPUSH
16051: CALL_OW 559
// wait ( 1 1$00 ) ;
16055: LD_INT 2100
16057: PPUSH
16058: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16062: LD_STRING hideTroll();
16064: PPUSH
16065: CALL_OW 559
// end ;
16069: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16070: LD_EXP 65
16074: PUSH
16075: LD_EXP 91
16079: AND
16080: IFFALSE 16143
16082: GO 16084
16084: DISABLE
16085: LD_INT 0
16087: PPUSH
// begin p := 0 ;
16088: LD_ADDR_VAR 0 1
16092: PUSH
16093: LD_INT 0
16095: ST_TO_ADDR
// repeat game_speed := 1 ;
16096: LD_ADDR_OWVAR 65
16100: PUSH
16101: LD_INT 1
16103: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16104: LD_INT 35
16106: PPUSH
16107: CALL_OW 67
// p := p + 1 ;
16111: LD_ADDR_VAR 0 1
16115: PUSH
16116: LD_VAR 0 1
16120: PUSH
16121: LD_INT 1
16123: PLUS
16124: ST_TO_ADDR
// until p >= 60 ;
16125: LD_VAR 0 1
16129: PUSH
16130: LD_INT 60
16132: GREATEREQUAL
16133: IFFALSE 16096
// game_speed := 4 ;
16135: LD_ADDR_OWVAR 65
16139: PUSH
16140: LD_INT 4
16142: ST_TO_ADDR
// end ;
16143: PPOPN 1
16145: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16146: LD_EXP 65
16150: PUSH
16151: LD_EXP 92
16155: AND
16156: IFFALSE 16302
16158: GO 16160
16160: DISABLE
16161: LD_INT 0
16163: PPUSH
16164: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16165: LD_ADDR_VAR 0 1
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_OWVAR 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 2
16184: PUSH
16185: LD_INT 30
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 30
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PPUSH
16214: CALL_OW 69
16218: ST_TO_ADDR
// if not depot then
16219: LD_VAR 0 1
16223: NOT
16224: IFFALSE 16228
// exit ;
16226: GO 16302
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16228: LD_ADDR_VAR 0 2
16232: PUSH
16233: LD_VAR 0 1
16237: PUSH
16238: LD_INT 1
16240: PPUSH
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 12
16250: ARRAY
16251: PPUSH
16252: CALL_OW 274
16256: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16257: LD_VAR 0 2
16261: PPUSH
16262: LD_INT 1
16264: PPUSH
16265: LD_INT 0
16267: PPUSH
16268: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16272: LD_VAR 0 2
16276: PPUSH
16277: LD_INT 2
16279: PPUSH
16280: LD_INT 0
16282: PPUSH
16283: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16287: LD_VAR 0 2
16291: PPUSH
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 0
16297: PPUSH
16298: CALL_OW 277
// end ;
16302: PPOPN 2
16304: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16305: LD_EXP 65
16309: PUSH
16310: LD_EXP 93
16314: AND
16315: IFFALSE 16412
16317: GO 16319
16319: DISABLE
16320: LD_INT 0
16322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16323: LD_ADDR_VAR 0 1
16327: PUSH
16328: LD_INT 22
16330: PUSH
16331: LD_OWVAR 2
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 21
16342: PUSH
16343: LD_INT 1
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 3
16352: PUSH
16353: LD_INT 23
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: ST_TO_ADDR
// if not tmp then
16377: LD_VAR 0 1
16381: NOT
16382: IFFALSE 16386
// exit ;
16384: GO 16412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16386: LD_VAR 0 1
16390: PUSH
16391: LD_INT 1
16393: PPUSH
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 12
16403: ARRAY
16404: PPUSH
16405: LD_INT 200
16407: PPUSH
16408: CALL_OW 234
// end ;
16412: PPOPN 1
16414: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16415: LD_EXP 65
16419: PUSH
16420: LD_EXP 94
16424: AND
16425: IFFALSE 16504
16427: GO 16429
16429: DISABLE
16430: LD_INT 0
16432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16433: LD_ADDR_VAR 0 1
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_OWVAR 2
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 21
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PPUSH
16464: CALL_OW 69
16468: ST_TO_ADDR
// if not tmp then
16469: LD_VAR 0 1
16473: NOT
16474: IFFALSE 16478
// exit ;
16476: GO 16504
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16478: LD_VAR 0 1
16482: PUSH
16483: LD_INT 1
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 12
16495: ARRAY
16496: PPUSH
16497: LD_INT 60
16499: PPUSH
16500: CALL_OW 234
// end ;
16504: PPOPN 1
16506: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16507: LD_EXP 65
16511: PUSH
16512: LD_EXP 95
16516: AND
16517: IFFALSE 16616
16519: GO 16521
16521: DISABLE
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
// begin enable ;
16526: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16527: LD_ADDR_VAR 0 1
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_OWVAR 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 61
16546: PUSH
16547: EMPTY
16548: LIST
16549: PUSH
16550: LD_INT 33
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: PPUSH
16565: CALL_OW 69
16569: ST_TO_ADDR
// if not tmp then
16570: LD_VAR 0 1
16574: NOT
16575: IFFALSE 16579
// exit ;
16577: GO 16616
// for i in tmp do
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: LD_VAR 0 1
16588: PUSH
16589: FOR_IN
16590: IFFALSE 16614
// if IsControledBy ( i ) then
16592: LD_VAR 0 2
16596: PPUSH
16597: CALL_OW 312
16601: IFFALSE 16612
// ComUnlink ( i ) ;
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 136
16612: GO 16589
16614: POP
16615: POP
// end ;
16616: PPOPN 2
16618: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16619: LD_EXP 65
16623: PUSH
16624: LD_EXP 96
16628: AND
16629: IFFALSE 16769
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
16637: PPUSH
// begin ToLua ( displayPowell(); ) ;
16638: LD_STRING displayPowell();
16640: PPUSH
16641: CALL_OW 559
// uc_side := 0 ;
16645: LD_ADDR_OWVAR 20
16649: PUSH
16650: LD_INT 0
16652: ST_TO_ADDR
// uc_nation := 2 ;
16653: LD_ADDR_OWVAR 21
16657: PUSH
16658: LD_INT 2
16660: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16661: LD_ADDR_OWVAR 37
16665: PUSH
16666: LD_INT 14
16668: ST_TO_ADDR
// vc_engine := engine_siberite ;
16669: LD_ADDR_OWVAR 39
16673: PUSH
16674: LD_INT 3
16676: ST_TO_ADDR
// vc_control := control_apeman ;
16677: LD_ADDR_OWVAR 38
16681: PUSH
16682: LD_INT 5
16684: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16685: LD_ADDR_OWVAR 40
16689: PUSH
16690: LD_INT 29
16692: ST_TO_ADDR
// un := CreateVehicle ;
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: CALL_OW 45
16702: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16703: LD_VAR 0 2
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16715: LD_INT 35
16717: PPUSH
16718: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 22
16729: PUSH
16730: LD_OWVAR 2
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 69
16743: PPUSH
16744: LD_VAR 0 2
16748: PPUSH
16749: CALL_OW 74
16753: PPUSH
16754: CALL_OW 115
// until IsDead ( un ) ;
16758: LD_VAR 0 2
16762: PPUSH
16763: CALL_OW 301
16767: IFFALSE 16715
// end ;
16769: PPOPN 2
16771: END
// every 0 0$1 trigger StreamModeActive and sStu do
16772: LD_EXP 65
16776: PUSH
16777: LD_EXP 104
16781: AND
16782: IFFALSE 16798
16784: GO 16786
16786: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16787: LD_STRING displayStucuk();
16789: PPUSH
16790: CALL_OW 559
// ResetFog ;
16794: CALL_OW 335
// end ;
16798: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16799: LD_EXP 65
16803: PUSH
16804: LD_EXP 97
16808: AND
16809: IFFALSE 16950
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16818: LD_ADDR_VAR 0 2
16822: PUSH
16823: LD_INT 22
16825: PUSH
16826: LD_OWVAR 2
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 21
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 69
16853: ST_TO_ADDR
// if not tmp then
16854: LD_VAR 0 2
16858: NOT
16859: IFFALSE 16863
// exit ;
16861: GO 16950
// un := tmp [ rand ( 1 , tmp ) ] ;
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: LD_VAR 0 2
16872: PUSH
16873: LD_INT 1
16875: PPUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: CALL_OW 12
16885: ARRAY
16886: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_INT 0
16894: PPUSH
16895: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_OWVAR 3
16908: PUSH
16909: LD_VAR 0 1
16913: DIFF
16914: PPUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 74
16924: PPUSH
16925: CALL_OW 115
// wait ( 0 0$20 ) ;
16929: LD_INT 700
16931: PPUSH
16932: CALL_OW 67
// SetSide ( un , your_side ) ;
16936: LD_VAR 0 1
16940: PPUSH
16941: LD_OWVAR 2
16945: PPUSH
16946: CALL_OW 235
// end ;
16950: PPOPN 2
16952: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16953: LD_EXP 65
16957: PUSH
16958: LD_EXP 98
16962: AND
16963: IFFALSE 17069
16965: GO 16967
16967: DISABLE
16968: LD_INT 0
16970: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_OWVAR 2
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 30
16993: PUSH
16994: LD_INT 0
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 30
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PPUSH
17020: CALL_OW 69
17024: ST_TO_ADDR
// if not depot then
17025: LD_VAR 0 1
17029: NOT
17030: IFFALSE 17034
// exit ;
17032: GO 17069
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17034: LD_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: CALL_OW 250
17047: PPUSH
17048: LD_VAR 0 1
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PPUSH
17057: CALL_OW 251
17061: PPUSH
17062: LD_INT 70
17064: PPUSH
17065: CALL_OW 495
// end ;
17069: PPOPN 1
17071: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17072: LD_EXP 65
17076: PUSH
17077: LD_EXP 99
17081: AND
17082: IFFALSE 17293
17084: GO 17086
17086: DISABLE
17087: LD_INT 0
17089: PPUSH
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17094: LD_ADDR_VAR 0 5
17098: PUSH
17099: LD_INT 22
17101: PUSH
17102: LD_OWVAR 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PPUSH
17125: CALL_OW 69
17129: ST_TO_ADDR
// if not tmp then
17130: LD_VAR 0 5
17134: NOT
17135: IFFALSE 17139
// exit ;
17137: GO 17293
// for i in tmp do
17139: LD_ADDR_VAR 0 1
17143: PUSH
17144: LD_VAR 0 5
17148: PUSH
17149: FOR_IN
17150: IFFALSE 17291
// begin d := rand ( 0 , 5 ) ;
17152: LD_ADDR_VAR 0 4
17156: PUSH
17157: LD_INT 0
17159: PPUSH
17160: LD_INT 5
17162: PPUSH
17163: CALL_OW 12
17167: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17168: LD_ADDR_VAR 0 2
17172: PUSH
17173: LD_VAR 0 1
17177: PPUSH
17178: CALL_OW 250
17182: PPUSH
17183: LD_VAR 0 4
17187: PPUSH
17188: LD_INT 3
17190: PPUSH
17191: LD_INT 12
17193: PPUSH
17194: CALL_OW 12
17198: PPUSH
17199: CALL_OW 272
17203: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17204: LD_ADDR_VAR 0 3
17208: PUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 251
17218: PPUSH
17219: LD_VAR 0 4
17223: PPUSH
17224: LD_INT 3
17226: PPUSH
17227: LD_INT 12
17229: PPUSH
17230: CALL_OW 12
17234: PPUSH
17235: CALL_OW 273
17239: ST_TO_ADDR
// if ValidHex ( x , y ) then
17240: LD_VAR 0 2
17244: PPUSH
17245: LD_VAR 0 3
17249: PPUSH
17250: CALL_OW 488
17254: IFFALSE 17289
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17256: LD_VAR 0 1
17260: PPUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_INT 3
17273: PPUSH
17274: LD_INT 6
17276: PPUSH
17277: CALL_OW 12
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL_OW 483
// end ;
17289: GO 17149
17291: POP
17292: POP
// end ;
17293: PPOPN 5
17295: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17296: LD_EXP 65
17300: PUSH
17301: LD_EXP 100
17305: AND
17306: IFFALSE 17400
17308: GO 17310
17310: DISABLE
17311: LD_INT 0
17313: PPUSH
17314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17315: LD_ADDR_VAR 0 2
17319: PUSH
17320: LD_INT 22
17322: PUSH
17323: LD_OWVAR 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 32
17334: PUSH
17335: LD_INT 1
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 21
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: PPUSH
17357: CALL_OW 69
17361: ST_TO_ADDR
// if not tmp then
17362: LD_VAR 0 2
17366: NOT
17367: IFFALSE 17371
// exit ;
17369: GO 17400
// for i in tmp do
17371: LD_ADDR_VAR 0 1
17375: PUSH
17376: LD_VAR 0 2
17380: PUSH
17381: FOR_IN
17382: IFFALSE 17398
// SetFuel ( i , 0 ) ;
17384: LD_VAR 0 1
17388: PPUSH
17389: LD_INT 0
17391: PPUSH
17392: CALL_OW 240
17396: GO 17381
17398: POP
17399: POP
// end ;
17400: PPOPN 2
17402: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17403: LD_EXP 65
17407: PUSH
17408: LD_EXP 101
17412: AND
17413: IFFALSE 17479
17415: GO 17417
17417: DISABLE
17418: LD_INT 0
17420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 30
17440: PUSH
17441: LD_INT 29
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PPUSH
17452: CALL_OW 69
17456: ST_TO_ADDR
// if not tmp then
17457: LD_VAR 0 1
17461: NOT
17462: IFFALSE 17466
// exit ;
17464: GO 17479
// DestroyUnit ( tmp [ 1 ] ) ;
17466: LD_VAR 0 1
17470: PUSH
17471: LD_INT 1
17473: ARRAY
17474: PPUSH
17475: CALL_OW 65
// end ;
17479: PPOPN 1
17481: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17482: LD_EXP 65
17486: PUSH
17487: LD_EXP 103
17491: AND
17492: IFFALSE 17621
17494: GO 17496
17496: DISABLE
17497: LD_INT 0
17499: PPUSH
// begin uc_side := 0 ;
17500: LD_ADDR_OWVAR 20
17504: PUSH
17505: LD_INT 0
17507: ST_TO_ADDR
// uc_nation := nation_arabian ;
17508: LD_ADDR_OWVAR 21
17512: PUSH
17513: LD_INT 2
17515: ST_TO_ADDR
// hc_gallery :=  ;
17516: LD_ADDR_OWVAR 33
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hc_name :=  ;
17524: LD_ADDR_OWVAR 26
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17532: LD_INT 1
17534: PPUSH
17535: LD_INT 11
17537: PPUSH
17538: LD_INT 10
17540: PPUSH
17541: CALL_OW 380
// un := CreateHuman ;
17545: LD_ADDR_VAR 0 1
17549: PUSH
17550: CALL_OW 44
17554: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17567: LD_INT 35
17569: PPUSH
17570: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17574: LD_VAR 0 1
17578: PPUSH
17579: LD_INT 22
17581: PUSH
17582: LD_OWVAR 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: PPUSH
17596: LD_VAR 0 1
17600: PPUSH
17601: CALL_OW 74
17605: PPUSH
17606: CALL_OW 115
// until IsDead ( un ) ;
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 301
17619: IFFALSE 17567
// end ;
17621: PPOPN 1
17623: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17624: LD_EXP 65
17628: PUSH
17629: LD_EXP 105
17633: AND
17634: IFFALSE 17646
17636: GO 17638
17638: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17639: LD_STRING earthquake(getX(game), 0, 32)
17641: PPUSH
17642: CALL_OW 559
17646: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17647: LD_EXP 65
17651: PUSH
17652: LD_EXP 106
17656: AND
17657: IFFALSE 17748
17659: GO 17661
17661: DISABLE
17662: LD_INT 0
17664: PPUSH
// begin enable ;
17665: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17666: LD_ADDR_VAR 0 1
17670: PUSH
17671: LD_INT 22
17673: PUSH
17674: LD_OWVAR 2
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 33
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: ST_TO_ADDR
// if not tmp then
17713: LD_VAR 0 1
17717: NOT
17718: IFFALSE 17722
// exit ;
17720: GO 17748
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17722: LD_VAR 0 1
17726: PUSH
17727: LD_INT 1
17729: PPUSH
17730: LD_VAR 0 1
17734: PPUSH
17735: CALL_OW 12
17739: ARRAY
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 234
// end ;
17748: PPOPN 1
17750: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17751: LD_EXP 65
17755: PUSH
17756: LD_EXP 107
17760: AND
17761: IFFALSE 17902
17763: GO 17765
17765: DISABLE
17766: LD_INT 0
17768: PPUSH
17769: PPUSH
17770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17771: LD_ADDR_VAR 0 3
17775: PUSH
17776: LD_INT 22
17778: PUSH
17779: LD_OWVAR 2
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: ST_TO_ADDR
// if not tmp then
17807: LD_VAR 0 3
17811: NOT
17812: IFFALSE 17816
// exit ;
17814: GO 17902
// un := tmp [ rand ( 1 , tmp ) ] ;
17816: LD_ADDR_VAR 0 2
17820: PUSH
17821: LD_VAR 0 3
17825: PUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_VAR 0 3
17833: PPUSH
17834: CALL_OW 12
17838: ARRAY
17839: ST_TO_ADDR
// if Crawls ( un ) then
17840: LD_VAR 0 2
17844: PPUSH
17845: CALL_OW 318
17849: IFFALSE 17860
// ComWalk ( un ) ;
17851: LD_VAR 0 2
17855: PPUSH
17856: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17860: LD_VAR 0 2
17864: PPUSH
17865: LD_INT 9
17867: PPUSH
17868: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17872: LD_INT 28
17874: PPUSH
17875: LD_OWVAR 2
17879: PPUSH
17880: LD_INT 2
17882: PPUSH
17883: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17887: LD_INT 29
17889: PPUSH
17890: LD_OWVAR 2
17894: PPUSH
17895: LD_INT 2
17897: PPUSH
17898: CALL_OW 322
// end ;
17902: PPOPN 3
17904: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17905: LD_EXP 65
17909: PUSH
17910: LD_EXP 108
17914: AND
17915: IFFALSE 18026
17917: GO 17919
17919: DISABLE
17920: LD_INT 0
17922: PPUSH
17923: PPUSH
17924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 25
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: ST_TO_ADDR
// if not tmp then
17961: LD_VAR 0 3
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18026
// un := tmp [ rand ( 1 , tmp ) ] ;
17970: LD_ADDR_VAR 0 2
17974: PUSH
17975: LD_VAR 0 3
17979: PUSH
17980: LD_INT 1
17982: PPUSH
17983: LD_VAR 0 3
17987: PPUSH
17988: CALL_OW 12
17992: ARRAY
17993: ST_TO_ADDR
// if Crawls ( un ) then
17994: LD_VAR 0 2
17998: PPUSH
17999: CALL_OW 318
18003: IFFALSE 18014
// ComWalk ( un ) ;
18005: LD_VAR 0 2
18009: PPUSH
18010: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18014: LD_VAR 0 2
18018: PPUSH
18019: LD_INT 8
18021: PPUSH
18022: CALL_OW 336
// end ;
18026: PPOPN 3
18028: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18029: LD_EXP 65
18033: PUSH
18034: LD_EXP 109
18038: AND
18039: IFFALSE 18183
18041: GO 18043
18043: DISABLE
18044: LD_INT 0
18046: PPUSH
18047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18048: LD_ADDR_VAR 0 2
18052: PUSH
18053: LD_INT 22
18055: PUSH
18056: LD_OWVAR 2
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 21
18067: PUSH
18068: LD_INT 2
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: LD_INT 34
18080: PUSH
18081: LD_INT 12
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 34
18090: PUSH
18091: LD_INT 51
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 34
18100: PUSH
18101: LD_INT 32
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 69
18123: ST_TO_ADDR
// if not tmp then
18124: LD_VAR 0 2
18128: NOT
18129: IFFALSE 18133
// exit ;
18131: GO 18183
// for i in tmp do
18133: LD_ADDR_VAR 0 1
18137: PUSH
18138: LD_VAR 0 2
18142: PUSH
18143: FOR_IN
18144: IFFALSE 18181
// if GetCargo ( i , mat_artifact ) = 0 then
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_INT 4
18153: PPUSH
18154: CALL_OW 289
18158: PUSH
18159: LD_INT 0
18161: EQUAL
18162: IFFALSE 18179
// SetCargo ( i , mat_siberit , 100 ) ;
18164: LD_VAR 0 1
18168: PPUSH
18169: LD_INT 3
18171: PPUSH
18172: LD_INT 100
18174: PPUSH
18175: CALL_OW 290
18179: GO 18143
18181: POP
18182: POP
// end ;
18183: PPOPN 2
18185: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18186: LD_EXP 65
18190: PUSH
18191: LD_EXP 110
18195: AND
18196: IFFALSE 18349
18198: GO 18200
18200: DISABLE
18201: LD_INT 0
18203: PPUSH
18204: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18205: LD_ADDR_VAR 0 2
18209: PUSH
18210: LD_INT 22
18212: PUSH
18213: LD_OWVAR 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 69
18226: ST_TO_ADDR
// if not tmp then
18227: LD_VAR 0 2
18231: NOT
18232: IFFALSE 18236
// exit ;
18234: GO 18349
// for i := 1 to 2 do
18236: LD_ADDR_VAR 0 1
18240: PUSH
18241: DOUBLE
18242: LD_INT 1
18244: DEC
18245: ST_TO_ADDR
18246: LD_INT 2
18248: PUSH
18249: FOR_TO
18250: IFFALSE 18347
// begin uc_side := your_side ;
18252: LD_ADDR_OWVAR 20
18256: PUSH
18257: LD_OWVAR 2
18261: ST_TO_ADDR
// uc_nation := nation_american ;
18262: LD_ADDR_OWVAR 21
18266: PUSH
18267: LD_INT 1
18269: ST_TO_ADDR
// vc_chassis := us_morphling ;
18270: LD_ADDR_OWVAR 37
18274: PUSH
18275: LD_INT 5
18277: ST_TO_ADDR
// vc_engine := engine_siberite ;
18278: LD_ADDR_OWVAR 39
18282: PUSH
18283: LD_INT 3
18285: ST_TO_ADDR
// vc_control := control_computer ;
18286: LD_ADDR_OWVAR 38
18290: PUSH
18291: LD_INT 3
18293: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18294: LD_ADDR_OWVAR 40
18298: PUSH
18299: LD_INT 10
18301: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18302: CALL_OW 45
18306: PPUSH
18307: LD_VAR 0 2
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: PPUSH
18316: CALL_OW 250
18320: PPUSH
18321: LD_VAR 0 2
18325: PUSH
18326: LD_INT 1
18328: ARRAY
18329: PPUSH
18330: CALL_OW 251
18334: PPUSH
18335: LD_INT 12
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 50
// end ;
18345: GO 18249
18347: POP
18348: POP
// end ;
18349: PPOPN 2
18351: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18352: LD_EXP 65
18356: PUSH
18357: LD_EXP 111
18361: AND
18362: IFFALSE 18584
18364: GO 18366
18366: DISABLE
18367: LD_INT 0
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18375: LD_ADDR_VAR 0 6
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_OWVAR 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 21
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 3
18404: PUSH
18405: LD_INT 23
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 69
18428: ST_TO_ADDR
// if not tmp then
18429: LD_VAR 0 6
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18584
// s1 := rand ( 1 , 4 ) ;
18438: LD_ADDR_VAR 0 2
18442: PUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_INT 4
18448: PPUSH
18449: CALL_OW 12
18453: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18454: LD_ADDR_VAR 0 4
18458: PUSH
18459: LD_VAR 0 6
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: PPUSH
18468: LD_VAR 0 2
18472: PPUSH
18473: CALL_OW 259
18477: ST_TO_ADDR
// if s1 = 1 then
18478: LD_VAR 0 2
18482: PUSH
18483: LD_INT 1
18485: EQUAL
18486: IFFALSE 18506
// s2 := rand ( 2 , 4 ) else
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_INT 2
18495: PPUSH
18496: LD_INT 4
18498: PPUSH
18499: CALL_OW 12
18503: ST_TO_ADDR
18504: GO 18514
// s2 := 1 ;
18506: LD_ADDR_VAR 0 3
18510: PUSH
18511: LD_INT 1
18513: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18514: LD_ADDR_VAR 0 5
18518: PUSH
18519: LD_VAR 0 6
18523: PUSH
18524: LD_INT 1
18526: ARRAY
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: CALL_OW 259
18537: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18538: LD_VAR 0 6
18542: PUSH
18543: LD_INT 1
18545: ARRAY
18546: PPUSH
18547: LD_VAR 0 2
18551: PPUSH
18552: LD_VAR 0 5
18556: PPUSH
18557: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18561: LD_VAR 0 6
18565: PUSH
18566: LD_INT 1
18568: ARRAY
18569: PPUSH
18570: LD_VAR 0 3
18574: PPUSH
18575: LD_VAR 0 4
18579: PPUSH
18580: CALL_OW 237
// end ;
18584: PPOPN 6
18586: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18587: LD_EXP 65
18591: PUSH
18592: LD_EXP 112
18596: AND
18597: IFFALSE 18676
18599: GO 18601
18601: DISABLE
18602: LD_INT 0
18604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18605: LD_ADDR_VAR 0 1
18609: PUSH
18610: LD_INT 22
18612: PUSH
18613: LD_OWVAR 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 30
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PPUSH
18636: CALL_OW 69
18640: ST_TO_ADDR
// if not tmp then
18641: LD_VAR 0 1
18645: NOT
18646: IFFALSE 18650
// exit ;
18648: GO 18676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18650: LD_VAR 0 1
18654: PUSH
18655: LD_INT 1
18657: PPUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: CALL_OW 12
18667: ARRAY
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 234
// end ;
18676: PPOPN 1
18678: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18679: LD_EXP 65
18683: PUSH
18684: LD_EXP 113
18688: AND
18689: IFFALSE 18801
18691: GO 18693
18693: DISABLE
18694: LD_INT 0
18696: PPUSH
18697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18698: LD_ADDR_VAR 0 2
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_OWVAR 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: LD_INT 30
18720: PUSH
18721: LD_INT 27
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 30
18730: PUSH
18731: LD_INT 26
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 30
18740: PUSH
18741: LD_INT 28
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PPUSH
18758: CALL_OW 69
18762: ST_TO_ADDR
// if not tmp then
18763: LD_VAR 0 2
18767: NOT
18768: IFFALSE 18772
// exit ;
18770: GO 18801
// for i in tmp do
18772: LD_ADDR_VAR 0 1
18776: PUSH
18777: LD_VAR 0 2
18781: PUSH
18782: FOR_IN
18783: IFFALSE 18799
// SetLives ( i , 1 ) ;
18785: LD_VAR 0 1
18789: PPUSH
18790: LD_INT 1
18792: PPUSH
18793: CALL_OW 234
18797: GO 18782
18799: POP
18800: POP
// end ;
18801: PPOPN 2
18803: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18804: LD_EXP 65
18808: PUSH
18809: LD_EXP 114
18813: AND
18814: IFFALSE 19088
18816: GO 18818
18818: DISABLE
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
18823: PPUSH
// begin i := rand ( 1 , 7 ) ;
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_INT 1
18831: PPUSH
18832: LD_INT 7
18834: PPUSH
18835: CALL_OW 12
18839: ST_TO_ADDR
// case i of 1 :
18840: LD_VAR 0 1
18844: PUSH
18845: LD_INT 1
18847: DOUBLE
18848: EQUAL
18849: IFTRUE 18853
18851: GO 18863
18853: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18854: LD_STRING earthquake(getX(game), 0, 32)
18856: PPUSH
18857: CALL_OW 559
18861: GO 19088
18863: LD_INT 2
18865: DOUBLE
18866: EQUAL
18867: IFTRUE 18871
18869: GO 18885
18871: POP
// begin ToLua ( displayStucuk(); ) ;
18872: LD_STRING displayStucuk();
18874: PPUSH
18875: CALL_OW 559
// ResetFog ;
18879: CALL_OW 335
// end ; 3 :
18883: GO 19088
18885: LD_INT 3
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18997
18893: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18894: LD_ADDR_VAR 0 2
18898: PUSH
18899: LD_INT 22
18901: PUSH
18902: LD_OWVAR 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 25
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PPUSH
18925: CALL_OW 69
18929: ST_TO_ADDR
// if not tmp then
18930: LD_VAR 0 2
18934: NOT
18935: IFFALSE 18939
// exit ;
18937: GO 19088
// un := tmp [ rand ( 1 , tmp ) ] ;
18939: LD_ADDR_VAR 0 3
18943: PUSH
18944: LD_VAR 0 2
18948: PUSH
18949: LD_INT 1
18951: PPUSH
18952: LD_VAR 0 2
18956: PPUSH
18957: CALL_OW 12
18961: ARRAY
18962: ST_TO_ADDR
// if Crawls ( un ) then
18963: LD_VAR 0 3
18967: PPUSH
18968: CALL_OW 318
18972: IFFALSE 18983
// ComWalk ( un ) ;
18974: LD_VAR 0 3
18978: PPUSH
18979: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18983: LD_VAR 0 3
18987: PPUSH
18988: LD_INT 8
18990: PPUSH
18991: CALL_OW 336
// end ; 4 :
18995: GO 19088
18997: LD_INT 4
18999: DOUBLE
19000: EQUAL
19001: IFTRUE 19005
19003: GO 19066
19005: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19006: LD_ADDR_VAR 0 2
19010: PUSH
19011: LD_INT 22
19013: PUSH
19014: LD_OWVAR 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 29
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: ST_TO_ADDR
// if not tmp then
19042: LD_VAR 0 2
19046: NOT
19047: IFFALSE 19051
// exit ;
19049: GO 19088
// DestroyUnit ( tmp [ 1 ] ) ;
19051: LD_VAR 0 2
19055: PUSH
19056: LD_INT 1
19058: ARRAY
19059: PPUSH
19060: CALL_OW 65
// end ; 5 .. 7 :
19064: GO 19088
19066: LD_INT 5
19068: DOUBLE
19069: GREATEREQUAL
19070: IFFALSE 19078
19072: LD_INT 7
19074: DOUBLE
19075: LESSEQUAL
19076: IFTRUE 19080
19078: GO 19087
19080: POP
// StreamSibBomb ; end ;
19081: CALL 15368 0 0
19085: GO 19088
19087: POP
// end ;
19088: PPOPN 3
19090: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19091: LD_EXP 65
19095: PUSH
19096: LD_EXP 115
19100: AND
19101: IFFALSE 19257
19103: GO 19105
19105: DISABLE
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: LD_INT 81
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: LD_INT 21
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PPUSH
19160: CALL_OW 69
19164: ST_TO_ADDR
// if not tmp then
19165: LD_VAR 0 2
19169: NOT
19170: IFFALSE 19174
// exit ;
19172: GO 19257
// p := 0 ;
19174: LD_ADDR_VAR 0 3
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19182: LD_INT 35
19184: PPUSH
19185: CALL_OW 67
// p := p + 1 ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 1
19201: PLUS
19202: ST_TO_ADDR
// for i in tmp do
19203: LD_ADDR_VAR 0 1
19207: PUSH
19208: LD_VAR 0 2
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19245
// if GetLives ( i ) < 1000 then
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 256
19225: PUSH
19226: LD_INT 1000
19228: LESS
19229: IFFALSE 19243
// SetLives ( i , 1000 ) ;
19231: LD_VAR 0 1
19235: PPUSH
19236: LD_INT 1000
19238: PPUSH
19239: CALL_OW 234
19243: GO 19213
19245: POP
19246: POP
// until p > 20 ;
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 20
19254: GREATER
19255: IFFALSE 19182
// end ;
19257: PPOPN 3
19259: END
// every 0 0$1 trigger StreamModeActive and sTime do
19260: LD_EXP 65
19264: PUSH
19265: LD_EXP 116
19269: AND
19270: IFFALSE 19305
19272: GO 19274
19274: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19275: LD_INT 28
19277: PPUSH
19278: LD_OWVAR 2
19282: PPUSH
19283: LD_INT 2
19285: PPUSH
19286: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19290: LD_INT 30
19292: PPUSH
19293: LD_OWVAR 2
19297: PPUSH
19298: LD_INT 2
19300: PPUSH
19301: CALL_OW 322
// end ;
19305: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19306: LD_EXP 65
19310: PUSH
19311: LD_EXP 117
19315: AND
19316: IFFALSE 19437
19318: GO 19320
19320: DISABLE
19321: LD_INT 0
19323: PPUSH
19324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 22
19332: PUSH
19333: LD_OWVAR 2
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 21
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 3
19354: PUSH
19355: LD_INT 23
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 69
19378: ST_TO_ADDR
// if not tmp then
19379: LD_VAR 0 2
19383: NOT
19384: IFFALSE 19388
// exit ;
19386: GO 19437
// for i in tmp do
19388: LD_ADDR_VAR 0 1
19392: PUSH
19393: LD_VAR 0 2
19397: PUSH
19398: FOR_IN
19399: IFFALSE 19435
// begin if Crawls ( i ) then
19401: LD_VAR 0 1
19405: PPUSH
19406: CALL_OW 318
19410: IFFALSE 19421
// ComWalk ( i ) ;
19412: LD_VAR 0 1
19416: PPUSH
19417: CALL_OW 138
// SetClass ( i , 2 ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: LD_INT 2
19428: PPUSH
19429: CALL_OW 336
// end ;
19433: GO 19398
19435: POP
19436: POP
// end ;
19437: PPOPN 2
19439: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19440: LD_EXP 65
19444: PUSH
19445: LD_EXP 118
19449: AND
19450: IFFALSE 19731
19452: GO 19454
19454: DISABLE
19455: LD_INT 0
19457: PPUSH
19458: PPUSH
19459: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19460: LD_OWVAR 2
19464: PPUSH
19465: LD_INT 9
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19478: LD_INT 9
19480: PPUSH
19481: LD_OWVAR 2
19485: PPUSH
19486: CALL_OW 343
// uc_side := 9 ;
19490: LD_ADDR_OWVAR 20
19494: PUSH
19495: LD_INT 9
19497: ST_TO_ADDR
// uc_nation := 2 ;
19498: LD_ADDR_OWVAR 21
19502: PUSH
19503: LD_INT 2
19505: ST_TO_ADDR
// hc_name := Dark Warrior ;
19506: LD_ADDR_OWVAR 26
19510: PUSH
19511: LD_STRING Dark Warrior
19513: ST_TO_ADDR
// hc_gallery :=  ;
19514: LD_ADDR_OWVAR 33
19518: PUSH
19519: LD_STRING 
19521: ST_TO_ADDR
// hc_noskilllimit := true ;
19522: LD_ADDR_OWVAR 76
19526: PUSH
19527: LD_INT 1
19529: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19530: LD_ADDR_OWVAR 31
19534: PUSH
19535: LD_INT 30
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: LD_INT 30
19543: PUSH
19544: LD_INT 30
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: ST_TO_ADDR
// un := CreateHuman ;
19553: LD_ADDR_VAR 0 3
19557: PUSH
19558: CALL_OW 44
19562: ST_TO_ADDR
// hc_noskilllimit := false ;
19563: LD_ADDR_OWVAR 76
19567: PUSH
19568: LD_INT 0
19570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19571: LD_VAR 0 3
19575: PPUSH
19576: LD_INT 1
19578: PPUSH
19579: CALL_OW 51
// p := 0 ;
19583: LD_ADDR_VAR 0 2
19587: PUSH
19588: LD_INT 0
19590: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19591: LD_INT 35
19593: PPUSH
19594: CALL_OW 67
// p := p + 1 ;
19598: LD_ADDR_VAR 0 2
19602: PUSH
19603: LD_VAR 0 2
19607: PUSH
19608: LD_INT 1
19610: PLUS
19611: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19612: LD_VAR 0 3
19616: PPUSH
19617: CALL_OW 256
19621: PUSH
19622: LD_INT 1000
19624: LESS
19625: IFFALSE 19639
// SetLives ( un , 1000 ) ;
19627: LD_VAR 0 3
19631: PPUSH
19632: LD_INT 1000
19634: PPUSH
19635: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_INT 81
19646: PUSH
19647: LD_OWVAR 2
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 91
19658: PUSH
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 30
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL_OW 69
19680: PPUSH
19681: LD_VAR 0 3
19685: PPUSH
19686: CALL_OW 74
19690: PPUSH
19691: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19695: LD_VAR 0 2
19699: PUSH
19700: LD_INT 60
19702: GREATER
19703: PUSH
19704: LD_VAR 0 3
19708: PPUSH
19709: CALL_OW 301
19713: OR
19714: IFFALSE 19591
// if un then
19716: LD_VAR 0 3
19720: IFFALSE 19731
// RemoveUnit ( un ) ;
19722: LD_VAR 0 3
19726: PPUSH
19727: CALL_OW 64
// end ; end_of_file
19731: PPOPN 3
19733: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19734: LD_INT 0
19736: PPUSH
19737: PPUSH
19738: PPUSH
19739: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19740: LD_VAR 0 1
19744: PPUSH
19745: CALL_OW 264
19749: PUSH
19750: LD_EXP 56
19754: EQUAL
19755: IFFALSE 19827
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19757: LD_INT 68
19759: PPUSH
19760: LD_VAR 0 1
19764: PPUSH
19765: CALL_OW 255
19769: PPUSH
19770: CALL_OW 321
19774: PUSH
19775: LD_INT 2
19777: EQUAL
19778: IFFALSE 19790
// eff := 70 else
19780: LD_ADDR_VAR 0 4
19784: PUSH
19785: LD_INT 70
19787: ST_TO_ADDR
19788: GO 19798
// eff := 30 ;
19790: LD_ADDR_VAR 0 4
19794: PUSH
19795: LD_INT 30
19797: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19798: LD_VAR 0 1
19802: PPUSH
19803: CALL_OW 250
19807: PPUSH
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 251
19817: PPUSH
19818: LD_VAR 0 4
19822: PPUSH
19823: CALL_OW 495
// end ; end ;
19827: LD_VAR 0 2
19831: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19832: LD_INT 0
19834: PPUSH
// end ;
19835: LD_VAR 0 4
19839: RET
// export function SOS_Command ( cmd ) ; begin
19840: LD_INT 0
19842: PPUSH
// end ;
19843: LD_VAR 0 2
19847: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19848: LD_VAR 0 1
19852: PUSH
19853: LD_INT 255
19855: EQUAL
19856: PUSH
19857: LD_VAR 0 2
19861: PPUSH
19862: CALL_OW 264
19866: PUSH
19867: LD_INT 14
19869: PUSH
19870: LD_INT 53
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: IN
19877: AND
19878: PUSH
19879: LD_VAR 0 4
19883: PPUSH
19884: LD_VAR 0 5
19888: PPUSH
19889: CALL_OW 488
19893: AND
19894: IFFALSE 19918
// CutTreeXYR ( unit , x , y , 12 ) ;
19896: LD_VAR 0 2
19900: PPUSH
19901: LD_VAR 0 4
19905: PPUSH
19906: LD_VAR 0 5
19910: PPUSH
19911: LD_INT 12
19913: PPUSH
19914: CALL 19921 0 4
// end ;
19918: PPOPN 5
19920: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
19925: PPUSH
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
19930: PPUSH
19931: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19932: LD_VAR 0 1
19936: NOT
19937: PUSH
19938: LD_VAR 0 2
19942: PPUSH
19943: LD_VAR 0 3
19947: PPUSH
19948: CALL_OW 488
19952: NOT
19953: OR
19954: PUSH
19955: LD_VAR 0 4
19959: NOT
19960: OR
19961: IFFALSE 19965
// exit ;
19963: GO 20305
// list := [ ] ;
19965: LD_ADDR_VAR 0 13
19969: PUSH
19970: EMPTY
19971: ST_TO_ADDR
// if x - r < 0 then
19972: LD_VAR 0 2
19976: PUSH
19977: LD_VAR 0 4
19981: MINUS
19982: PUSH
19983: LD_INT 0
19985: LESS
19986: IFFALSE 19998
// min_x := 0 else
19988: LD_ADDR_VAR 0 7
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
19996: GO 20014
// min_x := x - r ;
19998: LD_ADDR_VAR 0 7
20002: PUSH
20003: LD_VAR 0 2
20007: PUSH
20008: LD_VAR 0 4
20012: MINUS
20013: ST_TO_ADDR
// if y - r < 0 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_VAR 0 4
20023: MINUS
20024: PUSH
20025: LD_INT 0
20027: LESS
20028: IFFALSE 20040
// min_y := 0 else
20030: LD_ADDR_VAR 0 8
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
20038: GO 20056
// min_y := y - r ;
20040: LD_ADDR_VAR 0 8
20044: PUSH
20045: LD_VAR 0 3
20049: PUSH
20050: LD_VAR 0 4
20054: MINUS
20055: ST_TO_ADDR
// max_x := x + r ;
20056: LD_ADDR_VAR 0 9
20060: PUSH
20061: LD_VAR 0 2
20065: PUSH
20066: LD_VAR 0 4
20070: PLUS
20071: ST_TO_ADDR
// max_y := y + r ;
20072: LD_ADDR_VAR 0 10
20076: PUSH
20077: LD_VAR 0 3
20081: PUSH
20082: LD_VAR 0 4
20086: PLUS
20087: ST_TO_ADDR
// for _x = min_x to max_x do
20088: LD_ADDR_VAR 0 11
20092: PUSH
20093: DOUBLE
20094: LD_VAR 0 7
20098: DEC
20099: ST_TO_ADDR
20100: LD_VAR 0 9
20104: PUSH
20105: FOR_TO
20106: IFFALSE 20223
// for _y = min_y to max_y do
20108: LD_ADDR_VAR 0 12
20112: PUSH
20113: DOUBLE
20114: LD_VAR 0 8
20118: DEC
20119: ST_TO_ADDR
20120: LD_VAR 0 10
20124: PUSH
20125: FOR_TO
20126: IFFALSE 20219
// begin if not ValidHex ( _x , _y ) then
20128: LD_VAR 0 11
20132: PPUSH
20133: LD_VAR 0 12
20137: PPUSH
20138: CALL_OW 488
20142: NOT
20143: IFFALSE 20147
// continue ;
20145: GO 20125
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20147: LD_VAR 0 11
20151: PPUSH
20152: LD_VAR 0 12
20156: PPUSH
20157: CALL_OW 351
20161: PUSH
20162: LD_VAR 0 11
20166: PPUSH
20167: LD_VAR 0 12
20171: PPUSH
20172: CALL_OW 554
20176: AND
20177: IFFALSE 20217
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20179: LD_ADDR_VAR 0 13
20183: PUSH
20184: LD_VAR 0 13
20188: PPUSH
20189: LD_VAR 0 13
20193: PUSH
20194: LD_INT 1
20196: PLUS
20197: PPUSH
20198: LD_VAR 0 11
20202: PUSH
20203: LD_VAR 0 12
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PPUSH
20212: CALL_OW 2
20216: ST_TO_ADDR
// end ;
20217: GO 20125
20219: POP
20220: POP
20221: GO 20105
20223: POP
20224: POP
// if not list then
20225: LD_VAR 0 13
20229: NOT
20230: IFFALSE 20234
// exit ;
20232: GO 20305
// for i in list do
20234: LD_ADDR_VAR 0 6
20238: PUSH
20239: LD_VAR 0 13
20243: PUSH
20244: FOR_IN
20245: IFFALSE 20303
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20247: LD_VAR 0 1
20251: PPUSH
20252: LD_STRING M
20254: PUSH
20255: LD_VAR 0 6
20259: PUSH
20260: LD_INT 1
20262: ARRAY
20263: PUSH
20264: LD_VAR 0 6
20268: PUSH
20269: LD_INT 2
20271: ARRAY
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: PPUSH
20297: CALL_OW 447
20301: GO 20244
20303: POP
20304: POP
// end ;
20305: LD_VAR 0 5
20309: RET
