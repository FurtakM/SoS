// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3472 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3939 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7889 0 5
// PrepareComm ;
 110: CALL 8372 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 648: LD_ADDR_EXP 19
 652: PUSH
 653: LD_INT 7
 655: PUSH
 656: LD_INT 6
 658: PUSH
 659: LD_INT 10
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 671: LD_ADDR_EXP 18
 675: PUSH
 676: LD_INT 45
 678: PUSH
 679: LD_INT 47
 681: PUSH
 682: LD_INT 46
 684: PUSH
 685: LD_INT 46
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: ST_TO_ADDR
// end ;
 694: LD_VAR 0 1
 698: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 699: LD_EXP 1
 703: IFFALSE 3469
 705: GO 707
 707: DISABLE
 708: LD_INT 0
 710: PPUSH
 711: PPUSH
 712: PPUSH
 713: PPUSH
// begin enable ;
 714: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 715: LD_ADDR_OWVAR 47
 719: PUSH
 720: LD_STRING #tick
 722: PUSH
 723: LD_EXP 3
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_EXP 6
 736: ADD
 737: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 738: LD_ADDR_EXP 3
 742: PUSH
 743: LD_EXP 3
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: CALL 6975 0 2
 755: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 756: LD_EXP 26
 760: PUSH
 761: LD_EXP 30
 765: PUSH
 766: LD_INT 0
 768: GREATER
 769: AND
 770: IFFALSE 807
// begin game_strings := [ #mtime , meeting_time ] ;
 772: LD_ADDR_EXP 6
 776: PUSH
 777: LD_STRING #mtime
 779: PUSH
 780: LD_EXP 30
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 789: LD_ADDR_EXP 30
 793: PUSH
 794: LD_EXP 30
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL 6975 0 2
 806: ST_TO_ADDR
// end ; if meeting_arive then
 807: LD_EXP 27
 811: IFFALSE 831
// mission_time := RefreshTime ( mission_time , true ) ;
 813: LD_ADDR_EXP 34
 817: PUSH
 818: LD_EXP 34
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 6975 0 2
 830: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 831: LD_EXP 38
 835: PUSH
 836: LD_EXP 23
 840: PUSH
 841: LD_INT 0
 843: GREATER
 844: AND
 845: PUSH
 846: LD_EXP 27
 850: AND
 851: IFFALSE 871
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 853: LD_ADDR_EXP 23
 857: PUSH
 858: LD_EXP 23
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL 6975 0 2
 870: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 871: LD_EXP 39
 875: PUSH
 876: LD_EXP 24
 880: PUSH
 881: LD_INT 0
 883: GREATER
 884: AND
 885: PUSH
 886: LD_EXP 27
 890: AND
 891: IFFALSE 911
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 893: LD_ADDR_EXP 24
 897: PUSH
 898: LD_EXP 24
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL 6975 0 2
 910: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 911: LD_EXP 40
 915: PUSH
 916: LD_EXP 25
 920: PUSH
 921: LD_INT 0
 923: GREATER
 924: AND
 925: PUSH
 926: LD_EXP 27
 930: AND
 931: IFFALSE 951
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_EXP 25
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: CALL 6975 0 2
 950: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 951: LD_EXP 43
 955: PUSH
 956: LD_EXP 31
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: AND
 965: IFFALSE 1002
// begin game_strings := [ #rtime , russian_timer ] ;
 967: LD_ADDR_EXP 6
 971: PUSH
 972: LD_STRING #rtime
 974: PUSH
 975: LD_EXP 31
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 984: LD_ADDR_EXP 31
 988: PUSH
 989: LD_EXP 31
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL 6975 0 2
1001: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1002: LD_EXP 43
1006: PUSH
1007: LD_EXP 31
1011: PUSH
1012: LD_INT 0
1014: EQUAL
1015: AND
1016: PUSH
1017: LD_EXP 35
1021: OR
1022: IFFALSE 1031
// game_strings := [ ] ;
1024: LD_ADDR_EXP 6
1028: PUSH
1029: EMPTY
1030: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1031: LD_EXP 37
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: PUSH
1040: LD_OWVAR 1
1044: PUSH
1045: LD_INT 33600
1047: MOD
1048: PUSH
1049: LD_INT 0
1051: EQUAL
1052: AND
1053: IFFALSE 1113
// begin p := Rand ( 1 , 5 ) ;
1055: LD_ADDR_VAR 0 2
1059: PUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 12
1070: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1071: LD_VAR 0 2
1075: PUSH
1076: LD_INT 4
1078: PUSH
1079: LD_INT 3
1081: PUSH
1082: LD_INT 3
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_EXP 2
1094: ARRAY
1095: LESSEQUAL
1096: IFFALSE 1113
// begin RaiseSailEvent ( 92 ) ;
1098: LD_INT 92
1100: PPUSH
1101: CALL_OW 427
// dezert := true ;
1105: LD_ADDR_EXP 37
1109: PUSH
1110: LD_INT 1
1112: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1113: LD_OWVAR 1
1117: PUSH
1118: LD_INT 8400
1120: MOD
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: IFFALSE 1134
// RaiseSailEvent ( 101 ) ;
1127: LD_INT 101
1129: PPUSH
1130: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1134: LD_INT 8
1136: PPUSH
1137: CALL 7029 0 1
1141: PUSH
1142: LD_EXP 13
1146: PUSH
1147: LD_INT 0
1149: EQUAL
1150: AND
1151: IFFALSE 1168
// begin u_mine := true ;
1153: LD_ADDR_EXP 13
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1161: LD_STRING DS-T1m
1163: PPUSH
1164: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1168: LD_INT 8
1170: PPUSH
1171: CALL 7091 0 1
1175: PUSH
1176: LD_EXP 14
1180: PUSH
1181: LD_INT 0
1183: EQUAL
1184: AND
1185: IFFALSE 1202
// begin u_fac := true ;
1187: LD_ADDR_EXP 14
1191: PUSH
1192: LD_INT 1
1194: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1195: LD_STRING DS-T1f
1197: PPUSH
1198: CALL_OW 337
// end ; if hero_died then
1202: LD_EXP 33
1206: IFFALSE 1215
// YouLost ( DS-h1 ) ;
1208: LD_STRING DS-h1
1210: PPUSH
1211: CALL_OW 104
// if fort_destroyed then
1215: LD_EXP 32
1219: IFFALSE 1228
// YouLost ( DS-h2 ) ;
1221: LD_STRING DS-h2
1223: PPUSH
1224: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1228: LD_EXP 7
1232: PPUSH
1233: LD_EXP 49
1237: PPUSH
1238: CALL_OW 296
1242: PUSH
1243: LD_INT 6
1245: GREATER
1246: PUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 0
1254: EQUAL
1255: AND
1256: IFFALSE 1279
// begin if not HasTask ( leopold ) then
1258: LD_EXP 7
1262: PPUSH
1263: CALL_OW 314
1267: NOT
1268: IFFALSE 1277
// RaiseSailEvent ( 1 ) ;
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 427
// end else
1277: GO 1296
// if meeting_start = false then
1279: LD_EXP 26
1283: PUSH
1284: LD_INT 0
1286: EQUAL
1287: IFFALSE 1296
// begin RaiseSailEvent ( 2 ) ;
1289: LD_INT 2
1291: PPUSH
1292: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1296: LD_EXP 3
1300: PUSH
1301: LD_INT 105000
1303: PUSH
1304: LD_INT 131250
1306: PUSH
1307: LD_INT 151200
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_EXP 2
1319: ARRAY
1320: GREATEREQUAL
1321: PUSH
1322: LD_EXP 29
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: AND
1331: IFFALSE 1348
// begin meeting_end := true ;
1333: LD_ADDR_EXP 29
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1341: LD_INT 200
1343: PPUSH
1344: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1348: LD_EXP 30
1352: PUSH
1353: LD_INT 0
1355: EQUAL
1356: PUSH
1357: LD_EXP 27
1361: PUSH
1362: LD_INT 0
1364: EQUAL
1365: AND
1366: IFFALSE 1390
// begin meeting_arive := true ;
1368: LD_ADDR_EXP 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// game_strings := [ ] ;
1376: LD_ADDR_EXP 6
1380: PUSH
1381: EMPTY
1382: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1383: LD_INT 10
1385: PPUSH
1386: CALL_OW 427
// end ; if meeting_arive then
1390: LD_EXP 27
1394: IFFALSE 2193
// begin if arabian_attack = false and tick mod 4200 = 0 then
1396: LD_EXP 38
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: PUSH
1405: LD_OWVAR 1
1409: PUSH
1410: LD_INT 4200
1412: MOD
1413: PUSH
1414: LD_INT 0
1416: EQUAL
1417: AND
1418: IFFALSE 1471
// begin p := Rand ( 1 , 100 ) ;
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: LD_INT 1
1427: PPUSH
1428: LD_INT 100
1430: PPUSH
1431: CALL_OW 12
1435: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 85
1443: PUSH
1444: LD_INT 90
1446: PUSH
1447: LD_INT 95
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_EXP 2
1459: ARRAY
1460: LESSEQUAL
1461: IFFALSE 1471
// arabian_attack := true ;
1463: LD_ADDR_EXP 38
1467: PUSH
1468: LD_INT 1
1470: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1471: LD_EXP 43
1475: PUSH
1476: LD_INT 0
1478: EQUAL
1479: PUSH
1480: LD_EXP 39
1484: PUSH
1485: LD_INT 0
1487: EQUAL
1488: AND
1489: PUSH
1490: LD_OWVAR 1
1494: PUSH
1495: LD_INT 52500
1497: GREATER
1498: AND
1499: IFFALSE 1570
// begin russian_trade = true ;
1501: LD_ADDR_EXP 43
1505: PUSH
1506: LD_INT 1
1508: ST_TO_ADDR
// DialogueOn ;
1509: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1513: LD_EXP 47
1517: PPUSH
1518: LD_STRING DS-DR-RTr
1520: PPUSH
1521: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1525: LD_EXP 49
1529: PPUSH
1530: LD_STRING DS-DC-RTr
1532: PPUSH
1533: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1537: LD_EXP 47
1541: PPUSH
1542: LD_STRING DS-DR-RTr2
1544: PPUSH
1545: CALL_OW 94
// DialogueOff ;
1549: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1553: LD_STRING DS-T2
1555: PPUSH
1556: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1560: LD_INT 10
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1570: LD_EXP 43
1574: PUSH
1575: LD_EXP 35
1579: PUSH
1580: LD_INT 0
1582: EQUAL
1583: AND
1584: PUSH
1585: LD_EXP 31
1589: PUSH
1590: LD_INT 0
1592: GREATER
1593: AND
1594: IFFALSE 1843
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1596: LD_INT 10
1598: PPUSH
1599: LD_INT 58
1601: PUSH
1602: EMPTY
1603: LIST
1604: PUSH
1605: LD_INT 2
1607: PUSH
1608: LD_INT 34
1610: PUSH
1611: LD_INT 32
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 34
1620: PUSH
1621: LD_INT 12
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 33
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 70
1659: PUSH
1660: LD_INT 0
1662: GREATER
1663: IFFALSE 1843
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1665: LD_INT 10
1667: PPUSH
1668: LD_INT 58
1670: PUSH
1671: EMPTY
1672: LIST
1673: PUSH
1674: LD_INT 2
1676: PUSH
1677: LD_INT 34
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 3
1704: PUSH
1705: LD_INT 33
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PPUSH
1724: CALL_OW 70
1728: PUSH
1729: LD_INT 1
1731: ARRAY
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 289
1740: PUSH
1741: LD_INT 100
1743: EQUAL
1744: IFFALSE 1843
// begin cargo_ok := true ;
1746: LD_ADDR_EXP 35
1750: PUSH
1751: LD_INT 1
1753: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1754: LD_INT 10
1756: PPUSH
1757: LD_INT 58
1759: PUSH
1760: EMPTY
1761: LIST
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 32
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 34
1778: PUSH
1779: LD_INT 12
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 33
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 70
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: PPUSH
1822: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1826: LD_STRING DS-T2-out
1828: PPUSH
1829: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1833: LD_INT 10
1835: PPUSH
1836: LD_INT 0
1838: PPUSH
1839: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1843: LD_EXP 39
1847: PUSH
1848: LD_INT 0
1850: EQUAL
1851: PUSH
1852: LD_EXP 43
1856: AND
1857: PUSH
1858: LD_EXP 35
1862: PUSH
1863: LD_INT 0
1865: EQUAL
1866: AND
1867: PUSH
1868: LD_EXP 31
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: AND
1877: IFFALSE 1904
// begin russian_attack := true ;
1879: LD_ADDR_EXP 39
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1887: LD_STRING DS-T2-out
1889: PPUSH
1890: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1894: LD_INT 10
1896: PPUSH
1897: LD_INT 0
1899: PPUSH
1900: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1904: LD_EXP 43
1908: PUSH
1909: LD_INT 0
1911: EQUAL
1912: PUSH
1913: LD_EXP 39
1917: PUSH
1918: LD_INT 0
1920: EQUAL
1921: AND
1922: PUSH
1923: LD_EXP 40
1927: PUSH
1928: LD_INT 0
1930: EQUAL
1931: AND
1932: PUSH
1933: LD_OWVAR 1
1937: PUSH
1938: LD_INT 21000
1940: MOD
1941: PUSH
1942: LD_INT 0
1944: EQUAL
1945: AND
1946: IFFALSE 1999
// begin p := Rand ( 1 , 100 ) ;
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 100
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: LD_INT 45
1974: PUSH
1975: LD_INT 55
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PUSH
1983: LD_EXP 2
1987: ARRAY
1988: LESSEQUAL
1989: IFFALSE 1999
// russian_attack := true ;
1991: LD_ADDR_EXP 39
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: PUSH
2008: LD_EXP 40
2012: PUSH
2013: LD_INT 0
2015: EQUAL
2016: AND
2017: PUSH
2018: LD_EXP 39
2022: PUSH
2023: LD_INT 0
2025: EQUAL
2026: AND
2027: PUSH
2028: LD_OWVAR 1
2032: PUSH
2033: LD_INT 31500
2035: MOD
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: AND
2041: IFFALSE 2094
// begin p := Rand ( 1 , 100 ) ;
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_INT 1
2050: PPUSH
2051: LD_INT 100
2053: PPUSH
2054: CALL_OW 12
2058: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 33
2066: PUSH
2067: LD_INT 44
2069: PUSH
2070: LD_INT 55
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_EXP 2
2082: ARRAY
2083: LESSEQUAL
2084: IFFALSE 2094
// american_attack := true ;
2086: LD_ADDR_EXP 40
2090: PUSH
2091: LD_INT 1
2093: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2094: LD_EXP 40
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: PUSH
2103: LD_EXP 39
2107: PUSH
2108: LD_INT 0
2110: EQUAL
2111: AND
2112: PUSH
2113: LD_EXP 41
2117: PUSH
2118: LD_INT 0
2120: EQUAL
2121: AND
2122: PUSH
2123: LD_OWVAR 1
2127: PUSH
2128: LD_INT 21200
2130: MOD
2131: PUSH
2132: LD_INT 0
2134: EQUAL
2135: AND
2136: IFFALSE 2193
// begin p := Rand ( 1 , 100 ) ;
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 100
2148: PPUSH
2149: CALL_OW 12
2153: ST_TO_ADDR
// if p <= american_hchan then
2154: LD_VAR 0 2
2158: PUSH
2159: LD_EXP 36
2163: LESSEQUAL
2164: IFFALSE 2193
// begin american_help := true ;
2166: LD_ADDR_EXP 41
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2174: LD_EXP 46
2178: PPUSH
2179: LD_STRING DS-amhelp
2181: PPUSH
2182: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2186: LD_INT 91
2188: PPUSH
2189: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 25
2202: PUSH
2203: LD_INT 0
2205: EQUAL
2206: AND
2207: PUSH
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_INT 0
2225: EQUAL
2226: AND
2227: IFFALSE 2329
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2229: LD_ADDR_EXP 25
2233: PUSH
2234: LD_INT 35700
2236: PPUSH
2237: LD_INT 42000
2239: PPUSH
2240: CALL_OW 12
2244: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2245: LD_EXP 12
2249: PPUSH
2250: LD_STRING DS-DZ-U
2252: PPUSH
2253: CALL_OW 94
// Wait ( 0 0$33 ) ;
2257: LD_INT 1155
2259: PPUSH
2260: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 1
2271: PPUSH
2272: LD_INT 2
2274: PPUSH
2275: CALL_OW 12
2279: ST_TO_ADDR
// case x of 1 :
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 1
2287: DOUBLE
2288: EQUAL
2289: IFTRUE 2293
2291: GO 2303
2293: POP
// RaiseSailEvent ( 41 ) ; 2 :
2294: LD_INT 41
2296: PPUSH
2297: CALL_OW 427
2301: GO 2322
2303: LD_INT 2
2305: DOUBLE
2306: EQUAL
2307: IFTRUE 2311
2309: GO 2321
2311: POP
// RaiseSailEvent ( 42 ) ; end ;
2312: LD_INT 42
2314: PPUSH
2315: CALL_OW 427
2319: GO 2322
2321: POP
// RaiseSailEvent ( 42 ) ;
2322: LD_INT 42
2324: PPUSH
2325: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2329: LD_EXP 39
2333: PUSH
2334: LD_EXP 24
2338: PUSH
2339: LD_INT 0
2341: EQUAL
2342: AND
2343: PUSH
2344: LD_INT 22
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PPUSH
2354: CALL_OW 69
2358: PUSH
2359: LD_INT 0
2361: EQUAL
2362: AND
2363: IFFALSE 2419
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2365: LD_ADDR_EXP 24
2369: PUSH
2370: LD_INT 35700
2372: PPUSH
2373: LD_INT 42000
2375: PPUSH
2376: CALL_OW 12
2380: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2381: LD_EXP 12
2385: PPUSH
2386: LD_STRING DS-DZ-R
2388: PPUSH
2389: CALL_OW 94
// Wait ( 0 0$45 ) ;
2393: LD_INT 1575
2395: PPUSH
2396: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2400: LD_EXP 47
2404: PPUSH
2405: LD_STRING DS-DR-R1
2407: PPUSH
2408: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2412: LD_INT 51
2414: PPUSH
2415: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2419: LD_EXP 34
2423: PUSH
2424: LD_INT 52500
2426: GREATEREQUAL
2427: PUSH
2428: LD_EXP 20
2432: PUSH
2433: LD_INT 10
2435: LESS
2436: AND
2437: IFFALSE 2461
// begin mission_time := 0 0$00 ;
2439: LD_ADDR_EXP 34
2443: PUSH
2444: LD_INT 0
2446: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2447: LD_ADDR_EXP 20
2451: PUSH
2452: LD_EXP 20
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2461: LD_EXP 23
2465: PUSH
2466: LD_INT 0
2468: EQUAL
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 34
2485: PUSH
2486: LD_INT 31
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PUSH
2506: LD_INT 0
2508: EQUAL
2509: AND
2510: IFFALSE 2708
// begin arabian_timeing := 7 7$30 ;
2512: LD_ADDR_EXP 23
2516: PUSH
2517: LD_INT 15750
2519: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 3
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2536: LD_EXP 12
2540: PPUSH
2541: LD_STRING DS-DZ-H
2543: PPUSH
2544: CALL_OW 94
// case x of 1 :
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 1
2555: DOUBLE
2556: EQUAL
2557: IFTRUE 2561
2559: GO 2571
2561: POP
// RaiseSailEvent ( 31 ) ; 2 :
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 427
2569: GO 2608
2571: LD_INT 2
2573: DOUBLE
2574: EQUAL
2575: IFTRUE 2579
2577: GO 2589
2579: POP
// RaiseSailEvent ( 32 ) ; 3 :
2580: LD_INT 32
2582: PPUSH
2583: CALL_OW 427
2587: GO 2608
2589: LD_INT 3
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2607
2597: POP
// RaiseSailEvent ( 33 ) ; end ;
2598: LD_INT 33
2600: PPUSH
2601: CALL_OW 427
2605: GO 2608
2607: POP
// RaiseSailEvent ( 33 ) ;
2608: LD_INT 33
2610: PPUSH
2611: CALL_OW 427
// if game_difficulty > 1 then
2615: LD_EXP 2
2619: PUSH
2620: LD_INT 1
2622: GREATER
2623: IFFALSE 2632
// RaiseSailEvent ( 33 ) ;
2625: LD_INT 33
2627: PPUSH
2628: CALL_OW 427
// if heike_dialog1 = false then
2632: LD_EXP 44
2636: PUSH
2637: LD_INT 0
2639: EQUAL
2640: IFFALSE 2671
// begin heike_dialog1 := true ;
2642: LD_ADDR_EXP 44
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2650: LD_INT 105
2652: PPUSH
2653: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2657: LD_EXP 48
2661: PPUSH
2662: LD_STRING heike1
2664: PPUSH
2665: CALL_OW 94
// end else
2669: GO 2708
// if heike_dialog2 = false then
2671: LD_EXP 45
2675: PUSH
2676: LD_INT 0
2678: EQUAL
2679: IFFALSE 2708
// begin heike_dialog2 := true ;
2681: LD_ADDR_EXP 45
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2689: LD_INT 105
2691: PPUSH
2692: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2696: LD_EXP 48
2700: PPUSH
2701: LD_STRING heike2
2703: PPUSH
2704: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2708: LD_INT 22
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 33
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: LD_INT 0
2739: GREATER
2740: IFFALSE 2749
// ConnectWithTower ( 2 ) ;
2742: LD_INT 2
2744: PPUSH
2745: CALL 7139 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2749: LD_INT 22
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 34
2764: PUSH
2765: LD_INT 31
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 60
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: PUSH
2802: LD_INT 0
2804: GREATER
2805: IFFALSE 2951
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 2
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: LD_INT 34
2827: PUSH
2828: LD_INT 31
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: LD_INT 60
2844: PUSH
2845: EMPTY
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2865: LD_ADDR_VAR 0 3
2869: PUSH
2870: LD_INT 81
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: CALL_OW 69
2884: PPUSH
2885: LD_INT 20
2887: PPUSH
2888: CALL 8522 0 2
2892: ST_TO_ADDR
// for i = 1 to filter do
2893: LD_ADDR_VAR 0 1
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_VAR 0 4
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2949
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2911: LD_VAR 0 4
2915: PUSH
2916: LD_VAR 0 1
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PPUSH
2927: LD_VAR 0 4
2931: PUSH
2932: LD_VAR 0 1
2936: ARRAY
2937: PPUSH
2938: CALL_OW 74
2942: PPUSH
2943: CALL_OW 115
2947: GO 2908
2949: POP
2950: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2951: LD_INT 22
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 3
2963: PUSH
2964: LD_INT 60
2966: PUSH
2967: EMPTY
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: PPUSH
2981: CALL_OW 69
2985: PUSH
2986: LD_INT 0
2988: GREATER
2989: IFFALSE 3135
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2991: LD_ADDR_VAR 0 4
2995: PUSH
2996: LD_INT 22
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 60
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 81
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: LD_INT 20
3071: PPUSH
3072: CALL 8522 0 2
3076: ST_TO_ADDR
// for i = 1 to filter do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_VAR 0 4
3091: PUSH
3092: FOR_TO
3093: IFFALSE 3133
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3095: LD_VAR 0 4
3099: PUSH
3100: LD_VAR 0 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_VAR 0 4
3115: PUSH
3116: LD_VAR 0 1
3120: ARRAY
3121: PPUSH
3122: CALL_OW 74
3126: PPUSH
3127: CALL_OW 115
3131: GO 3092
3133: POP
3134: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3135: LD_INT 22
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 3
3147: PUSH
3148: LD_INT 60
3150: PUSH
3151: EMPTY
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: PPUSH
3165: CALL_OW 69
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3319
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 22
3182: PUSH
3183: LD_INT 1
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 34
3195: PUSH
3196: LD_INT 31
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 3
3209: PUSH
3210: LD_INT 60
3212: PUSH
3213: EMPTY
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: PPUSH
3228: CALL_OW 69
3232: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_INT 20
3255: PPUSH
3256: CALL 8522 0 2
3260: ST_TO_ADDR
// for i = 1 to filter do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_VAR 0 4
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3317
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3279: LD_VAR 0 4
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PPUSH
3295: LD_VAR 0 4
3299: PUSH
3300: LD_VAR 0 1
3304: ARRAY
3305: PPUSH
3306: CALL_OW 74
3310: PPUSH
3311: CALL_OW 115
3315: GO 3276
3317: POP
3318: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3319: LD_INT 22
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 34
3331: PUSH
3332: LD_INT 91
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 24
3344: PUSH
3345: LD_INT 700
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PUSH
3369: LD_INT 0
3371: GREATER
3372: IFFALSE 3469
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 22
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 91
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: LD_INT 24
3404: PUSH
3405: LD_INT 700
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: ST_TO_ADDR
// for i = 1 to filter do
3429: LD_ADDR_VAR 0 1
3433: PUSH
3434: DOUBLE
3435: LD_INT 1
3437: DEC
3438: ST_TO_ADDR
3439: LD_VAR 0 4
3443: PUSH
3444: FOR_TO
3445: IFFALSE 3467
// SetLives ( filter [ i ] , 1 ) ;
3447: LD_VAR 0 4
3451: PUSH
3452: LD_VAR 0 1
3456: ARRAY
3457: PPUSH
3458: LD_INT 1
3460: PPUSH
3461: CALL_OW 234
3465: GO 3444
3467: POP
3468: POP
// end ; end ; end_of_file
3469: PPOPN 4
3471: END
// export function Start_Mission ; begin
3472: LD_INT 0
3474: PPUSH
// PrepareLegion ;
3475: CALL 3516 0 0
// PrepareMeeting ;
3479: CALL 4133 0 0
// case Query ( DS-text-beg ) of 1 :
3483: LD_STRING DS-text-beg
3485: PPUSH
3486: CALL_OW 97
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3502
3499: POP
// ; end ;
3500: GO 3503
3502: POP
// game_on := true ;
3503: LD_ADDR_EXP 1
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 1
3515: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
// uc_side := 8 ;
3523: LD_ADDR_OWVAR 20
3527: PUSH
3528: LD_INT 8
3530: ST_TO_ADDR
// uc_nation := 2 ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3539: LD_ADDR_EXP 50
3543: PUSH
3544: LD_INT 9
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3564: LD_ADDR_EXP 51
3568: PUSH
3569: LD_INT 9
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: ST_TO_ADDR
// filter := [ ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// hc_gallery := desert ;
3596: LD_ADDR_OWVAR 33
3600: PUSH
3601: LD_STRING desert
3603: ST_TO_ADDR
// hc_face_number := 1 ;
3604: LD_ADDR_OWVAR 34
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3612: LD_ADDR_OWVAR 31
3616: PUSH
3617: LD_EXP 50
3621: PUSH
3622: LD_INT 2
3624: PLUS
3625: PUSH
3626: LD_EXP 50
3630: PUSH
3631: LD_INT 1
3633: MINUS
3634: PUSH
3635: LD_EXP 50
3639: PUSH
3640: LD_EXP 50
3644: PUSH
3645: LD_INT 1
3647: PLUS
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: ST_TO_ADDR
// hc_sex := sex_male ;
3655: LD_ADDR_OWVAR 27
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3663: LD_ADDR_OWVAR 26
3667: PUSH
3668: LD_STRING Henri Ruotz
3670: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3671: LD_ADDR_OWVAR 29
3675: PUSH
3676: LD_INT 10
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: ST_TO_ADDR
// hc_class := 1 ;
3686: LD_ADDR_OWVAR 28
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// hc_importance := 100 ;
3694: LD_ADDR_OWVAR 32
3698: PUSH
3699: LD_INT 100
3701: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3702: LD_ADDR_EXP 49
3706: PUSH
3707: CALL_OW 44
3711: ST_TO_ADDR
// hc_importance := 0 ;
3712: LD_ADDR_OWVAR 32
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3720: LD_ADDR_EXP 12
3724: PUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 380
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 50
3790: PPUSH
3791: CALL 7323 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 51
3817: PPUSH
3818: LD_EXP 51
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 49
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 51
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 49
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 49
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 49
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6699
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 26
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 49
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 49
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 49
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6699
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7323 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6699
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 38
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6699
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 40
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6699
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 39
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6699
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 20
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 17
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 17
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7323 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6699
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 20
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 17
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 17
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: LD_INT 3
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7323 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7323 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6699
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 20
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 17
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 17
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7323 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 20
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 17
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 17
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6699
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 22
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 19
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6699
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 22
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 19
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 19
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6699
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 21
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 18
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6699
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 4
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6699
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6549
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// InitHc ;
6244: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_EXP 50
6258: PPUSH
6259: CALL_OW 380
// un := CreateHuman ;
6263: LD_ADDR_VAR 0 4
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// filter := filter ^ un ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_VAR 0 4
6287: ADD
6288: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_INT 4
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: LD_INT 2
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_EXP 2
6317: ARRAY
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6358
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_EXP 50
6334: PPUSH
6335: CALL 7323 0 2
6339: ST_TO_ADDR
// filter := filter ^ un ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_VAR 0 3
6349: PUSH
6350: LD_VAR 0 4
6354: ADD
6355: ST_TO_ADDR
// end ;
6356: GO 6319
6358: POP
6359: POP
// DialogueOn ;
6360: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: CALL_OW 258
6377: PUSH
6378: LD_INT 1
6380: EQUAL
6381: IFFALSE 6401
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6383: LD_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: LD_STRING DS-DF-1
6394: PPUSH
6395: CALL_OW 94
6399: GO 6417
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6401: LD_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_STRING DS-DF-f1
6412: PPUSH
6413: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6417: LD_STRING DS-dezert
6419: PPUSH
6420: CALL_OW 97
6424: PUSH
6425: LD_INT 1
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6448
6433: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6434: LD_EXP 49
6438: PPUSH
6439: LD_STRING DS-DC-dis
6441: PPUSH
6442: CALL_OW 88
6446: GO 6543
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6542
6456: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_STRING DS-DC-acp
6464: PPUSH
6465: CALL_OW 88
// for i = 1 to filter do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_VAR 0 3
6483: PUSH
6484: FOR_TO
6485: IFFALSE 6538
// begin SetSide ( filter [ i ] , 8 ) ;
6487: LD_VAR 0 3
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PPUSH
6498: LD_INT 8
6500: PPUSH
6501: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6505: LD_VAR 0 3
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_INT 4
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6526: LD_INT 111
6528: PPUSH
6529: LD_INT 121
6531: PPUSH
6532: CALL_OW 86
// end ;
6536: GO 6484
6538: POP
6539: POP
// end ; end ;
6540: GO 6543
6542: POP
// DialogueOff ;
6543: CALL_OW 7
// end ; 101 :
6547: GO 6699
6549: LD_INT 101
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6557
6555: GO 6609
6557: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6558: LD_INT 3
6560: PPUSH
6561: LD_INT 5
6563: PPUSH
6564: CALL_OW 12
6568: PPUSH
6569: LD_INT 9
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// Wait ( 0 0$11 ) ;
6579: LD_INT 385
6581: PPUSH
6582: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 5
6591: PPUSH
6592: CALL_OW 12
6596: PPUSH
6597: LD_INT 9
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 55
// end ; 200 :
6607: GO 6699
6609: LD_INT 200
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6698
6617: POP
// begin Say ( Leopold , DS-end ) ;
6618: LD_EXP 7
6622: PPUSH
6623: LD_STRING DS-end
6625: PPUSH
6626: CALL_OW 88
// if Difficulty = 3 then
6630: LD_OWVAR 67
6634: PUSH
6635: LD_INT 3
6637: EQUAL
6638: IFFALSE 6647
// SetAchievement ( ACH_DESERT ) ;
6640: LD_STRING ACH_DESERT
6642: PPUSH
6643: CALL_OW 543
// music_nat := 5 ;
6647: LD_ADDR_OWVAR 71
6651: PUSH
6652: LD_INT 5
6654: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6655: LD_STRING med
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 101
// AddMedal ( med , 1 ) ;
6665: LD_STRING med
6667: PPUSH
6668: LD_INT 1
6670: PPUSH
6671: CALL_OW 101
// AddMedal ( med , 1 ) ;
6675: LD_STRING med
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 101
// GiveMedals ( MAIN ) ;
6685: LD_STRING MAIN
6687: PPUSH
6688: CALL_OW 102
// YouWin ;
6692: CALL_OW 103
// end ; end ;
6696: GO 6699
6698: POP
// end ;
6699: PPOPN 6
6701: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6702: LD_VAR 0 1
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: IN
6736: IFFALSE 6861
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6738: LD_INT 105
6740: PPUSH
6741: LD_INT 210
6743: PPUSH
6744: CALL_OW 12
6748: PPUSH
6749: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 250
6762: PPUSH
6763: LD_VAR 0 1
6767: PPUSH
6768: CALL_OW 251
6772: PPUSH
6773: LD_INT 3
6775: PPUSH
6776: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: LD_INT 3
6802: PPUSH
6803: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 250
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 251
6826: PPUSH
6827: LD_INT 3
6829: PPUSH
6830: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 250
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_INT 3
6856: PPUSH
6857: CALL_OW 453
// end ; end ;
6861: PPOPN 1
6863: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 24415 0 1
// if un = fort then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 23
6880: EQUAL
6881: IFFALSE 6891
// fort_destroyed := true ;
6883: LD_ADDR_EXP 32
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if un = l_cmndr then
6891: LD_VAR 0 1
6895: PUSH
6896: LD_EXP 49
6900: EQUAL
6901: IFFALSE 6911
// hero_died := true ;
6903: LD_ADDR_EXP 33
6907: PUSH
6908: LD_INT 1
6910: ST_TO_ADDR
// end ;
6911: PPOPN 1
6913: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6914: LD_ADDR_OWVAR 48
6918: PUSH
6919: LD_VAR 0 1
6923: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6924: LD_VAR 0 1
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL 24511 0 3
// end ;
6943: PPOPN 3
6945: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: CALL 24519 0 1
// end ;
6955: PPOPN 1
6957: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 2
6967: PPUSH
6968: CALL 24535 0 2
// end ; end_of_file
6972: PPOPN 2
6974: END
// export function RefreshTime ( time , bool ) ; begin
6975: LD_INT 0
6977: PPUSH
// if bool then
6978: LD_VAR 0 2
6982: IFFALSE 7000
// time := time + 0 0$01 else
6984: LD_ADDR_VAR 0 1
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 35
6996: PLUS
6997: ST_TO_ADDR
6998: GO 7014
// time := time - 0 0$01 ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PUSH
7010: LD_INT 35
7012: MINUS
7013: ST_TO_ADDR
// result := time ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: ST_TO_ADDR
// end ;
7024: LD_VAR 0 3
7028: RET
// export function MineExist ( side ) ; begin
7029: LD_INT 0
7031: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_INT 0
7065: GREATER
7066: IFFALSE 7078
// result := true else
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
7076: GO 7086
// result := false ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 2
7090: RET
// export function FacExist ( side ) ; begin
7091: LD_INT 0
7093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: GREATER
7133: ST_TO_ADDR
// end ;
7134: LD_VAR 0 2
7138: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_VAR 0 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 34
7207: PUSH
7208: LD_INT 31
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7224: LD_VAR 0 5
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: PUSH
7233: LD_VAR 0 4
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: AND
7242: IFFALSE 7318
// for i = 1 to filter do
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 4
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7316
// if not IsControledBy ( filter [ i ] ) then
7262: LD_VAR 0 4
7266: PUSH
7267: LD_VAR 0 3
7271: ARRAY
7272: PPUSH
7273: CALL_OW 312
7277: NOT
7278: IFFALSE 7314
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7280: LD_VAR 0 4
7284: PUSH
7285: LD_VAR 0 3
7289: ARRAY
7290: PPUSH
7291: LD_VAR 0 5
7295: PUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: CALL_OW 12
7308: ARRAY
7309: PPUSH
7310: CALL_OW 135
7314: GO 7259
7316: POP
7317: POP
// end ;
7318: LD_VAR 0 2
7322: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
7327: PPUSH
7328: PPUSH
7329: PPUSH
7330: PPUSH
// hc_class := clas ;
7331: LD_ADDR_OWVAR 28
7335: PUSH
7336: LD_VAR 0 1
7340: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: NEG
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: CALL_OW 12
7362: PLUS
7363: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7364: LD_ADDR_VAR 0 5
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: NEG
7377: PPUSH
7378: LD_INT 1
7380: PPUSH
7381: CALL_OW 12
7385: PLUS
7386: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 1
7399: NEG
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 12
7408: PLUS
7409: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7410: LD_ADDR_VAR 0 7
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 1
7422: NEG
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 12
7431: PLUS
7432: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 9
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 1
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 8
7469: EQUAL
7470: OR
7471: IFFALSE 7496
// bonus := [ 2 , 0 , 0 , 0 ] ;
7473: LD_ADDR_VAR 0 8
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// if clas = 2 then
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 2
7503: EQUAL
7504: IFFALSE 7529
// bonus := [ 0 , 2 , 0 , 0 ] ;
7506: LD_ADDR_VAR 0 8
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 0
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if clas = 3 then
7529: LD_VAR 0 1
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7562
// bonus := [ 0 , 0 , 2 , 0 ] ;
7539: LD_ADDR_VAR 0 8
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if clas = 4 then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_INT 4
7569: EQUAL
7570: IFFALSE 7595
// bonus := [ 0 , 0 , 0 , 2 ] ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_INT 0
7579: PUSH
7580: LD_INT 0
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: LD_INT 2
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 4
7602: GREATER
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 9
7611: NONEQUAL
7612: AND
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: LD_INT 5
7621: NONEQUAL
7622: AND
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 8
7631: NONEQUAL
7632: AND
7633: IFFALSE 7658
// bonus := [ 0 , 0 , 0 , 0 ] ;
7635: LD_ADDR_VAR 0 8
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7658: LD_ADDR_OWVAR 30
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: LD_INT 0
7698: PPUSH
7699: LD_INT 2
7701: PPUSH
7702: CALL_OW 12
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7713: LD_ADDR_OWVAR 31
7717: PUSH
7718: LD_VAR 0 4
7722: PUSH
7723: LD_VAR 0 8
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PLUS
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_VAR 0 8
7742: PUSH
7743: LD_INT 2
7745: ARRAY
7746: PLUS
7747: PUSH
7748: LD_VAR 0 6
7752: PUSH
7753: LD_VAR 0 8
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PLUS
7762: PUSH
7763: LD_VAR 0 7
7767: PUSH
7768: LD_VAR 0 8
7772: PUSH
7773: LD_INT 4
7775: ARRAY
7776: PLUS
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7784: LD_ADDR_OWVAR 27
7788: PUSH
7789: LD_INT 1
7791: PPUSH
7792: LD_INT 2
7794: PPUSH
7795: CALL_OW 12
7799: ST_TO_ADDR
// hc_gallery :=  ;
7800: LD_ADDR_OWVAR 33
7804: PUSH
7805: LD_STRING 
7807: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7808: LD_ADDR_OWVAR 29
7812: PUSH
7813: LD_INT 8
7815: PPUSH
7816: LD_INT 12
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: LD_INT 9
7826: PPUSH
7827: LD_INT 11
7829: PPUSH
7830: CALL_OW 12
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: ST_TO_ADDR
// hc_name :=  ;
7839: LD_ADDR_OWVAR 26
7843: PUSH
7844: LD_STRING 
7846: ST_TO_ADDR
// result := CreateHuman ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: CALL_OW 44
7856: ST_TO_ADDR
// end ;
7857: LD_VAR 0 3
7861: RET
// export function GetSpeed ( unit ) ; begin
7862: LD_INT 0
7864: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7865: LD_ADDR_VAR 0 2
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 464
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: ST_TO_ADDR
// end ;
7884: LD_VAR 0 2
7888: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// uc_nation = nation_nature ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// uc_side = 0 ;
7905: LD_ADDR_OWVAR 20
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// l = 0 ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7921: LD_ADDR_OWVAR 24
7925: PUSH
7926: LD_INT 0
7928: PPUSH
7929: LD_INT 5
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7937: LD_ADDR_OWVAR 35
7941: PUSH
7942: LD_INT 5
7944: NEG
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 12
7953: ST_TO_ADDR
// hc_gallery =  ;
7954: LD_ADDR_OWVAR 33
7958: PUSH
7959: LD_STRING 
7961: ST_TO_ADDR
// hc_class = class_apeman ;
7962: LD_ADDR_OWVAR 28
7966: PUSH
7967: LD_INT 12
7969: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7970: LD_ADDR_OWVAR 29
7974: PUSH
7975: LD_INT 11
7977: PPUSH
7978: LD_INT 13
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: LD_INT 10
7988: PPUSH
7989: LD_INT 11
7991: PPUSH
7992: CALL_OW 12
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// hc_sex = sex_male ;
8001: LD_ADDR_OWVAR 27
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8009: LD_ADDR_OWVAR 31
8013: PUSH
8014: LD_INT 0
8016: PPUSH
8017: LD_INT 2
8019: PPUSH
8020: CALL_OW 12
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: LD_INT 0
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// apeman = CreateHuman ;
8040: LD_ADDR_VAR 0 8
8044: PUSH
8045: CALL_OW 44
8049: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 49
// l = l + 1 ;
8067: LD_ADDR_VAR 0 7
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 1
8079: PLUS
8080: ST_TO_ADDR
// end until l = num1 ;
8081: LD_VAR 0 7
8085: PUSH
8086: LD_VAR 0 2
8090: EQUAL
8091: IFFALSE 7921
// l = 0 ;
8093: LD_ADDR_VAR 0 7
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8101: LD_ADDR_OWVAR 35
8105: PUSH
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 25
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// hc_class = class_tiger ;
8117: LD_ADDR_OWVAR 28
8121: PUSH
8122: LD_INT 14
8124: ST_TO_ADDR
// hc_sex = sex_male ;
8125: LD_ADDR_OWVAR 27
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// hc_gallery = sandnature ;
8133: LD_ADDR_OWVAR 33
8137: PUSH
8138: LD_STRING sandnature
8140: ST_TO_ADDR
// hc_face_number = 3 ;
8141: LD_ADDR_OWVAR 34
8145: PUSH
8146: LD_INT 3
8148: ST_TO_ADDR
// tiger = CreateHuman ;
8149: LD_ADDR_VAR 0 9
8153: PUSH
8154: CALL_OW 44
8158: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: LD_INT 0
8171: PPUSH
8172: CALL_OW 49
// l = l + 1 ;
8176: LD_ADDR_VAR 0 7
8180: PUSH
8181: LD_VAR 0 7
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ST_TO_ADDR
// end until l = num2 ;
8190: LD_VAR 0 7
8194: PUSH
8195: LD_VAR 0 3
8199: EQUAL
8200: IFFALSE 8101
// l = 0 ;
8202: LD_ADDR_VAR 0 7
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8210: LD_ADDR_OWVAR 28
8214: PUSH
8215: LD_INT 18
8217: ST_TO_ADDR
// hc_gallery = sandnature ;
8218: LD_ADDR_OWVAR 33
8222: PUSH
8223: LD_STRING sandnature
8225: ST_TO_ADDR
// hc_face_number = 1 ;
8226: LD_ADDR_OWVAR 34
8230: PUSH
8231: LD_INT 1
8233: ST_TO_ADDR
// bird = CreateHuman ;
8234: LD_ADDR_VAR 0 10
8238: PUSH
8239: CALL_OW 44
8243: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8244: LD_VAR 0 10
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 51
// l = l + 1 ;
8256: LD_ADDR_VAR 0 7
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_INT 1
8268: PLUS
8269: ST_TO_ADDR
// end until l = num3 ;
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 4
8279: EQUAL
8280: IFFALSE 8210
// l = 0 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8290: LD_ADDR_OWVAR 28
8294: PUSH
8295: LD_INT 21
8297: ST_TO_ADDR
// hc_gallery = sandnature ;
8298: LD_ADDR_OWVAR 33
8302: PUSH
8303: LD_STRING sandnature
8305: ST_TO_ADDR
// hc_face_number = 5 ;
8306: LD_ADDR_OWVAR 34
8310: PUSH
8311: LD_INT 5
8313: ST_TO_ADDR
// horse := CreateHuman ;
8314: LD_ADDR_VAR 0 11
8318: PUSH
8319: CALL_OW 44
8323: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8324: LD_VAR 0 11
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 0
8336: PPUSH
8337: CALL_OW 49
// l = l + 1 ;
8341: LD_ADDR_VAR 0 7
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ST_TO_ADDR
// end until l = num4 ;
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: EQUAL
8365: IFFALSE 8290
// end ;
8367: LD_VAR 0 6
8371: RET
// export function PrepareComm ; begin
8372: LD_INT 0
8374: PPUSH
// uc_side := 1 ;
8375: LD_ADDR_OWVAR 20
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// uc_nation := 1 ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// hc_gallery :=  ;
8391: LD_ADDR_OWVAR 33
8395: PUSH
8396: LD_STRING 
8398: ST_TO_ADDR
// hc_name :=  ;
8399: LD_ADDR_OWVAR 26
8403: PUSH
8404: LD_STRING 
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_male ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// am_comander := CreateHuman ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// uc_side := 3 ;
8433: LD_ADDR_OWVAR 20
8437: PUSH
8438: LD_INT 3
8440: ST_TO_ADDR
// uc_nation := 3 ;
8441: LD_ADDR_OWVAR 21
8445: PUSH
8446: LD_INT 3
8448: ST_TO_ADDR
// ru_comander := CreateHuman ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// uc_side := 2 ;
8459: LD_ADDR_OWVAR 20
8463: PUSH
8464: LD_INT 2
8466: ST_TO_ADDR
// uc_nation := 2 ;
8467: LD_ADDR_OWVAR 21
8471: PUSH
8472: LD_INT 2
8474: ST_TO_ADDR
// hc_name := Heike Steyer ;
8475: LD_ADDR_OWVAR 26
8479: PUSH
8480: LD_STRING Heike Steyer
8482: ST_TO_ADDR
// hc_sex := sex_female ;
8483: LD_ADDR_OWVAR 27
8487: PUSH
8488: LD_INT 2
8490: ST_TO_ADDR
// hc_gallery := sandar ;
8491: LD_ADDR_OWVAR 33
8495: PUSH
8496: LD_STRING sandar
8498: ST_TO_ADDR
// hc_face_number := 14 ;
8499: LD_ADDR_OWVAR 34
8503: PUSH
8504: LD_INT 14
8506: ST_TO_ADDR
// ar_comander := CreateHuman ;
8507: LD_ADDR_EXP 48
8511: PUSH
8512: CALL_OW 44
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 1
8521: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// list := [ ] ;
8527: LD_ADDR_VAR 0 4
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i = 1 to filter do
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_VAR 0 1
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8599
// if GetSpeed ( filter [ i ] ) < speed then
8552: LD_VAR 0 1
8556: PUSH
8557: LD_VAR 0 5
8561: ARRAY
8562: PPUSH
8563: CALL 7862 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: LESS
8573: IFFALSE 8597
// list := list ^ filter [ i ] ;
8575: LD_ADDR_VAR 0 4
8579: PUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: LD_VAR 0 5
8594: ARRAY
8595: ADD
8596: ST_TO_ADDR
8597: GO 8549
8599: POP
8600: POP
// result := list ;
8601: LD_ADDR_VAR 0 3
8605: PUSH
8606: LD_VAR 0 4
8610: ST_TO_ADDR
// end ; end_of_file end_of_file
8611: LD_VAR 0 3
8615: RET
// every 0 0$1 do
8616: GO 8618
8618: DISABLE
// begin enable ;
8619: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8620: LD_STRING updateTimer(
8622: PUSH
8623: LD_OWVAR 1
8627: STR
8628: PUSH
8629: LD_STRING );
8631: STR
8632: PPUSH
8633: CALL_OW 559
// end ;
8637: END
// export function SOS_MapStart ( ) ; begin
8638: LD_INT 0
8640: PPUSH
// if streamModeActive then
8641: LD_EXP 53
8645: IFFALSE 8654
// DefineStreamItems ( true ) ;
8647: LD_INT 1
8649: PPUSH
8650: CALL 10458 0 1
// UpdateLuaVariables ( ) ;
8654: CALL 8671 0 0
// UpdateFactoryWaypoints ( ) ;
8658: CALL 23319 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8662: CALL 23576 0 0
// end ;
8666: LD_VAR 0 1
8670: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
8671: LD_INT 0
8673: PPUSH
// if not globalGameSaveCounter then
8674: LD_EXP 52
8678: NOT
8679: IFFALSE 8690
// ToLua ( setGameSaveCounter(0) ) else
8681: LD_STRING setGameSaveCounter(0)
8683: PPUSH
8684: CALL_OW 559
8688: GO 8722
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8690: LD_ADDR_EXP 52
8694: PUSH
8695: LD_EXP 52
8699: PPUSH
8700: CALL 67533 0 1
8704: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8705: LD_STRING setGameSaveCounter(
8707: PUSH
8708: LD_EXP 52
8712: STR
8713: PUSH
8714: LD_STRING )
8716: STR
8717: PPUSH
8718: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8722: LD_STRING setGameDifficulty(
8724: PUSH
8725: LD_OWVAR 67
8729: STR
8730: PUSH
8731: LD_STRING )
8733: STR
8734: PPUSH
8735: CALL_OW 559
// end ;
8739: LD_VAR 0 1
8743: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8744: LD_INT 0
8746: PPUSH
// if p2 = stream_mode then
8747: LD_VAR 0 2
8751: PUSH
8752: LD_INT 100
8754: EQUAL
8755: IFFALSE 9758
// begin if not StreamModeActive then
8757: LD_EXP 53
8761: NOT
8762: IFFALSE 8772
// StreamModeActive := true ;
8764: LD_ADDR_EXP 53
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// if p3 = 0 then
8772: LD_VAR 0 3
8776: PUSH
8777: LD_INT 0
8779: EQUAL
8780: IFFALSE 8786
// InitStreamMode ;
8782: CALL 9994 0 0
// if p3 = 1 then
8786: LD_VAR 0 3
8790: PUSH
8791: LD_INT 1
8793: EQUAL
8794: IFFALSE 8804
// sRocket := true ;
8796: LD_ADDR_EXP 58
8800: PUSH
8801: LD_INT 1
8803: ST_TO_ADDR
// if p3 = 2 then
8804: LD_VAR 0 3
8808: PUSH
8809: LD_INT 2
8811: EQUAL
8812: IFFALSE 8822
// sSpeed := true ;
8814: LD_ADDR_EXP 57
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// if p3 = 3 then
8822: LD_VAR 0 3
8826: PUSH
8827: LD_INT 3
8829: EQUAL
8830: IFFALSE 8840
// sEngine := true ;
8832: LD_ADDR_EXP 59
8836: PUSH
8837: LD_INT 1
8839: ST_TO_ADDR
// if p3 = 4 then
8840: LD_VAR 0 3
8844: PUSH
8845: LD_INT 4
8847: EQUAL
8848: IFFALSE 8858
// sSpec := true ;
8850: LD_ADDR_EXP 56
8854: PUSH
8855: LD_INT 1
8857: ST_TO_ADDR
// if p3 = 5 then
8858: LD_VAR 0 3
8862: PUSH
8863: LD_INT 5
8865: EQUAL
8866: IFFALSE 8876
// sLevel := true ;
8868: LD_ADDR_EXP 60
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// if p3 = 6 then
8876: LD_VAR 0 3
8880: PUSH
8881: LD_INT 6
8883: EQUAL
8884: IFFALSE 8894
// sArmoury := true ;
8886: LD_ADDR_EXP 61
8890: PUSH
8891: LD_INT 1
8893: ST_TO_ADDR
// if p3 = 7 then
8894: LD_VAR 0 3
8898: PUSH
8899: LD_INT 7
8901: EQUAL
8902: IFFALSE 8912
// sRadar := true ;
8904: LD_ADDR_EXP 62
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// if p3 = 8 then
8912: LD_VAR 0 3
8916: PUSH
8917: LD_INT 8
8919: EQUAL
8920: IFFALSE 8930
// sBunker := true ;
8922: LD_ADDR_EXP 63
8926: PUSH
8927: LD_INT 1
8929: ST_TO_ADDR
// if p3 = 9 then
8930: LD_VAR 0 3
8934: PUSH
8935: LD_INT 9
8937: EQUAL
8938: IFFALSE 8948
// sHack := true ;
8940: LD_ADDR_EXP 64
8944: PUSH
8945: LD_INT 1
8947: ST_TO_ADDR
// if p3 = 10 then
8948: LD_VAR 0 3
8952: PUSH
8953: LD_INT 10
8955: EQUAL
8956: IFFALSE 8966
// sFire := true ;
8958: LD_ADDR_EXP 65
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
// if p3 = 11 then
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 11
8973: EQUAL
8974: IFFALSE 8984
// sRefresh := true ;
8976: LD_ADDR_EXP 66
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// if p3 = 12 then
8984: LD_VAR 0 3
8988: PUSH
8989: LD_INT 12
8991: EQUAL
8992: IFFALSE 9002
// sExp := true ;
8994: LD_ADDR_EXP 67
8998: PUSH
8999: LD_INT 1
9001: ST_TO_ADDR
// if p3 = 13 then
9002: LD_VAR 0 3
9006: PUSH
9007: LD_INT 13
9009: EQUAL
9010: IFFALSE 9020
// sDepot := true ;
9012: LD_ADDR_EXP 68
9016: PUSH
9017: LD_INT 1
9019: ST_TO_ADDR
// if p3 = 14 then
9020: LD_VAR 0 3
9024: PUSH
9025: LD_INT 14
9027: EQUAL
9028: IFFALSE 9038
// sFlag := true ;
9030: LD_ADDR_EXP 69
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// if p3 = 15 then
9038: LD_VAR 0 3
9042: PUSH
9043: LD_INT 15
9045: EQUAL
9046: IFFALSE 9056
// sKamikadze := true ;
9048: LD_ADDR_EXP 77
9052: PUSH
9053: LD_INT 1
9055: ST_TO_ADDR
// if p3 = 16 then
9056: LD_VAR 0 3
9060: PUSH
9061: LD_INT 16
9063: EQUAL
9064: IFFALSE 9074
// sTroll := true ;
9066: LD_ADDR_EXP 78
9070: PUSH
9071: LD_INT 1
9073: ST_TO_ADDR
// if p3 = 17 then
9074: LD_VAR 0 3
9078: PUSH
9079: LD_INT 17
9081: EQUAL
9082: IFFALSE 9092
// sSlow := true ;
9084: LD_ADDR_EXP 79
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// if p3 = 18 then
9092: LD_VAR 0 3
9096: PUSH
9097: LD_INT 18
9099: EQUAL
9100: IFFALSE 9110
// sLack := true ;
9102: LD_ADDR_EXP 80
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// if p3 = 19 then
9110: LD_VAR 0 3
9114: PUSH
9115: LD_INT 19
9117: EQUAL
9118: IFFALSE 9128
// sTank := true ;
9120: LD_ADDR_EXP 82
9124: PUSH
9125: LD_INT 1
9127: ST_TO_ADDR
// if p3 = 20 then
9128: LD_VAR 0 3
9132: PUSH
9133: LD_INT 20
9135: EQUAL
9136: IFFALSE 9146
// sRemote := true ;
9138: LD_ADDR_EXP 83
9142: PUSH
9143: LD_INT 1
9145: ST_TO_ADDR
// if p3 = 21 then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 21
9153: EQUAL
9154: IFFALSE 9164
// sPowell := true ;
9156: LD_ADDR_EXP 84
9160: PUSH
9161: LD_INT 1
9163: ST_TO_ADDR
// if p3 = 22 then
9164: LD_VAR 0 3
9168: PUSH
9169: LD_INT 22
9171: EQUAL
9172: IFFALSE 9182
// sTeleport := true ;
9174: LD_ADDR_EXP 87
9178: PUSH
9179: LD_INT 1
9181: ST_TO_ADDR
// if p3 = 23 then
9182: LD_VAR 0 3
9186: PUSH
9187: LD_INT 23
9189: EQUAL
9190: IFFALSE 9200
// sOilTower := true ;
9192: LD_ADDR_EXP 89
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// if p3 = 24 then
9200: LD_VAR 0 3
9204: PUSH
9205: LD_INT 24
9207: EQUAL
9208: IFFALSE 9218
// sShovel := true ;
9210: LD_ADDR_EXP 90
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// if p3 = 25 then
9218: LD_VAR 0 3
9222: PUSH
9223: LD_INT 25
9225: EQUAL
9226: IFFALSE 9236
// sSheik := true ;
9228: LD_ADDR_EXP 91
9232: PUSH
9233: LD_INT 1
9235: ST_TO_ADDR
// if p3 = 26 then
9236: LD_VAR 0 3
9240: PUSH
9241: LD_INT 26
9243: EQUAL
9244: IFFALSE 9254
// sEarthquake := true ;
9246: LD_ADDR_EXP 93
9250: PUSH
9251: LD_INT 1
9253: ST_TO_ADDR
// if p3 = 27 then
9254: LD_VAR 0 3
9258: PUSH
9259: LD_INT 27
9261: EQUAL
9262: IFFALSE 9272
// sAI := true ;
9264: LD_ADDR_EXP 94
9268: PUSH
9269: LD_INT 1
9271: ST_TO_ADDR
// if p3 = 28 then
9272: LD_VAR 0 3
9276: PUSH
9277: LD_INT 28
9279: EQUAL
9280: IFFALSE 9290
// sCargo := true ;
9282: LD_ADDR_EXP 97
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// if p3 = 29 then
9290: LD_VAR 0 3
9294: PUSH
9295: LD_INT 29
9297: EQUAL
9298: IFFALSE 9308
// sDLaser := true ;
9300: LD_ADDR_EXP 98
9304: PUSH
9305: LD_INT 1
9307: ST_TO_ADDR
// if p3 = 30 then
9308: LD_VAR 0 3
9312: PUSH
9313: LD_INT 30
9315: EQUAL
9316: IFFALSE 9326
// sExchange := true ;
9318: LD_ADDR_EXP 99
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// if p3 = 31 then
9326: LD_VAR 0 3
9330: PUSH
9331: LD_INT 31
9333: EQUAL
9334: IFFALSE 9344
// sFac := true ;
9336: LD_ADDR_EXP 100
9340: PUSH
9341: LD_INT 1
9343: ST_TO_ADDR
// if p3 = 32 then
9344: LD_VAR 0 3
9348: PUSH
9349: LD_INT 32
9351: EQUAL
9352: IFFALSE 9362
// sPower := true ;
9354: LD_ADDR_EXP 101
9358: PUSH
9359: LD_INT 1
9361: ST_TO_ADDR
// if p3 = 33 then
9362: LD_VAR 0 3
9366: PUSH
9367: LD_INT 33
9369: EQUAL
9370: IFFALSE 9380
// sRandom := true ;
9372: LD_ADDR_EXP 102
9376: PUSH
9377: LD_INT 1
9379: ST_TO_ADDR
// if p3 = 34 then
9380: LD_VAR 0 3
9384: PUSH
9385: LD_INT 34
9387: EQUAL
9388: IFFALSE 9398
// sShield := true ;
9390: LD_ADDR_EXP 103
9394: PUSH
9395: LD_INT 1
9397: ST_TO_ADDR
// if p3 = 35 then
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 35
9405: EQUAL
9406: IFFALSE 9416
// sTime := true ;
9408: LD_ADDR_EXP 104
9412: PUSH
9413: LD_INT 1
9415: ST_TO_ADDR
// if p3 = 36 then
9416: LD_VAR 0 3
9420: PUSH
9421: LD_INT 36
9423: EQUAL
9424: IFFALSE 9434
// sTools := true ;
9426: LD_ADDR_EXP 105
9430: PUSH
9431: LD_INT 1
9433: ST_TO_ADDR
// if p3 = 101 then
9434: LD_VAR 0 3
9438: PUSH
9439: LD_INT 101
9441: EQUAL
9442: IFFALSE 9452
// sSold := true ;
9444: LD_ADDR_EXP 70
9448: PUSH
9449: LD_INT 1
9451: ST_TO_ADDR
// if p3 = 102 then
9452: LD_VAR 0 3
9456: PUSH
9457: LD_INT 102
9459: EQUAL
9460: IFFALSE 9470
// sDiff := true ;
9462: LD_ADDR_EXP 71
9466: PUSH
9467: LD_INT 1
9469: ST_TO_ADDR
// if p3 = 103 then
9470: LD_VAR 0 3
9474: PUSH
9475: LD_INT 103
9477: EQUAL
9478: IFFALSE 9488
// sFog := true ;
9480: LD_ADDR_EXP 74
9484: PUSH
9485: LD_INT 1
9487: ST_TO_ADDR
// if p3 = 104 then
9488: LD_VAR 0 3
9492: PUSH
9493: LD_INT 104
9495: EQUAL
9496: IFFALSE 9506
// sReset := true ;
9498: LD_ADDR_EXP 75
9502: PUSH
9503: LD_INT 1
9505: ST_TO_ADDR
// if p3 = 105 then
9506: LD_VAR 0 3
9510: PUSH
9511: LD_INT 105
9513: EQUAL
9514: IFFALSE 9524
// sSun := true ;
9516: LD_ADDR_EXP 76
9520: PUSH
9521: LD_INT 1
9523: ST_TO_ADDR
// if p3 = 106 then
9524: LD_VAR 0 3
9528: PUSH
9529: LD_INT 106
9531: EQUAL
9532: IFFALSE 9542
// sTiger := true ;
9534: LD_ADDR_EXP 72
9538: PUSH
9539: LD_INT 1
9541: ST_TO_ADDR
// if p3 = 107 then
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 107
9549: EQUAL
9550: IFFALSE 9560
// sBomb := true ;
9552: LD_ADDR_EXP 73
9556: PUSH
9557: LD_INT 1
9559: ST_TO_ADDR
// if p3 = 108 then
9560: LD_VAR 0 3
9564: PUSH
9565: LD_INT 108
9567: EQUAL
9568: IFFALSE 9578
// sWound := true ;
9570: LD_ADDR_EXP 81
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// if p3 = 109 then
9578: LD_VAR 0 3
9582: PUSH
9583: LD_INT 109
9585: EQUAL
9586: IFFALSE 9596
// sBetray := true ;
9588: LD_ADDR_EXP 85
9592: PUSH
9593: LD_INT 1
9595: ST_TO_ADDR
// if p3 = 110 then
9596: LD_VAR 0 3
9600: PUSH
9601: LD_INT 110
9603: EQUAL
9604: IFFALSE 9614
// sContamin := true ;
9606: LD_ADDR_EXP 86
9610: PUSH
9611: LD_INT 1
9613: ST_TO_ADDR
// if p3 = 111 then
9614: LD_VAR 0 3
9618: PUSH
9619: LD_INT 111
9621: EQUAL
9622: IFFALSE 9632
// sOil := true ;
9624: LD_ADDR_EXP 88
9628: PUSH
9629: LD_INT 1
9631: ST_TO_ADDR
// if p3 = 112 then
9632: LD_VAR 0 3
9636: PUSH
9637: LD_INT 112
9639: EQUAL
9640: IFFALSE 9650
// sStu := true ;
9642: LD_ADDR_EXP 92
9646: PUSH
9647: LD_INT 1
9649: ST_TO_ADDR
// if p3 = 113 then
9650: LD_VAR 0 3
9654: PUSH
9655: LD_INT 113
9657: EQUAL
9658: IFFALSE 9668
// sBazooka := true ;
9660: LD_ADDR_EXP 95
9664: PUSH
9665: LD_INT 1
9667: ST_TO_ADDR
// if p3 = 114 then
9668: LD_VAR 0 3
9672: PUSH
9673: LD_INT 114
9675: EQUAL
9676: IFFALSE 9686
// sMortar := true ;
9678: LD_ADDR_EXP 96
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// if p3 = 115 then
9686: LD_VAR 0 3
9690: PUSH
9691: LD_INT 115
9693: EQUAL
9694: IFFALSE 9704
// sRanger := true ;
9696: LD_ADDR_EXP 106
9700: PUSH
9701: LD_INT 1
9703: ST_TO_ADDR
// if p3 = 116 then
9704: LD_VAR 0 3
9708: PUSH
9709: LD_INT 116
9711: EQUAL
9712: IFFALSE 9722
// sComputer := true ;
9714: LD_ADDR_EXP 107
9718: PUSH
9719: LD_INT 1
9721: ST_TO_ADDR
// if p3 = 117 then
9722: LD_VAR 0 3
9726: PUSH
9727: LD_INT 117
9729: EQUAL
9730: IFFALSE 9740
// s30 := true ;
9732: LD_ADDR_EXP 108
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// if p3 = 118 then
9740: LD_VAR 0 3
9744: PUSH
9745: LD_INT 118
9747: EQUAL
9748: IFFALSE 9758
// s60 := true ;
9750: LD_ADDR_EXP 109
9754: PUSH
9755: LD_INT 1
9757: ST_TO_ADDR
// end ; if p2 = hack_mode then
9758: LD_VAR 0 2
9762: PUSH
9763: LD_INT 101
9765: EQUAL
9766: IFFALSE 9894
// begin case p3 of 1 :
9768: LD_VAR 0 3
9772: PUSH
9773: LD_INT 1
9775: DOUBLE
9776: EQUAL
9777: IFTRUE 9781
9779: GO 9788
9781: POP
// hHackUnlimitedResources ; 2 :
9782: CALL 22065 0 0
9786: GO 9894
9788: LD_INT 2
9790: DOUBLE
9791: EQUAL
9792: IFTRUE 9796
9794: GO 9803
9796: POP
// hHackSetLevel10 ; 3 :
9797: CALL 22198 0 0
9801: GO 9894
9803: LD_INT 3
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9818
9811: POP
// hHackSetLevel10YourUnits ; 4 :
9812: CALL 22283 0 0
9816: GO 9894
9818: LD_INT 4
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9833
9826: POP
// hHackInvincible ; 5 :
9827: CALL 22731 0 0
9831: GO 9894
9833: LD_INT 5
9835: DOUBLE
9836: EQUAL
9837: IFTRUE 9841
9839: GO 9848
9841: POP
// hHackInvisible ; 6 :
9842: CALL 22842 0 0
9846: GO 9894
9848: LD_INT 6
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 9863
9856: POP
// hHackChangeYourSide ; 7 :
9857: CALL 22899 0 0
9861: GO 9894
9863: LD_INT 7
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9878
9871: POP
// hHackChangeUnitSide ; 8 :
9872: CALL 22941 0 0
9876: GO 9894
9878: LD_INT 8
9880: DOUBLE
9881: EQUAL
9882: IFTRUE 9886
9884: GO 9893
9886: POP
// hHackFog ; end ;
9887: CALL 23042 0 0
9891: GO 9894
9893: POP
// end ; if p2 = game_save_mode then
9894: LD_VAR 0 2
9898: PUSH
9899: LD_INT 102
9901: EQUAL
9902: IFFALSE 9967
// begin if p3 = 1 then
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: EQUAL
9912: IFFALSE 9924
// globalGameSaveCounter := p4 ;
9914: LD_ADDR_EXP 52
9918: PUSH
9919: LD_VAR 0 4
9923: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 2
9931: EQUAL
9932: PUSH
9933: LD_EXP 52
9937: AND
9938: IFFALSE 9957
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9940: LD_STRING setGameSaveCounter(
9942: PUSH
9943: LD_EXP 52
9947: STR
9948: PUSH
9949: LD_STRING )
9951: STR
9952: PPUSH
9953: CALL_OW 559
// display_strings := globalGameSaveCounter ;
9957: LD_ADDR_OWVAR 47
9961: PUSH
9962: LD_EXP 52
9966: ST_TO_ADDR
// end ; end ;
9967: LD_VAR 0 7
9971: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9972: GO 9974
9974: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9975: LD_STRING initStreamRollete();
9977: PPUSH
9978: CALL_OW 559
// InitStreamMode ;
9982: CALL 9994 0 0
// DefineStreamItems ( false ) ;
9986: LD_INT 0
9988: PPUSH
9989: CALL 10458 0 1
// end ;
9993: END
// function InitStreamMode ; begin
9994: LD_INT 0
9996: PPUSH
// streamModeActive := false ;
9997: LD_ADDR_EXP 53
10001: PUSH
10002: LD_INT 0
10004: ST_TO_ADDR
// normalCounter := 36 ;
10005: LD_ADDR_EXP 54
10009: PUSH
10010: LD_INT 36
10012: ST_TO_ADDR
// hardcoreCounter := 18 ;
10013: LD_ADDR_EXP 55
10017: PUSH
10018: LD_INT 18
10020: ST_TO_ADDR
// sRocket := false ;
10021: LD_ADDR_EXP 58
10025: PUSH
10026: LD_INT 0
10028: ST_TO_ADDR
// sSpeed := false ;
10029: LD_ADDR_EXP 57
10033: PUSH
10034: LD_INT 0
10036: ST_TO_ADDR
// sEngine := false ;
10037: LD_ADDR_EXP 59
10041: PUSH
10042: LD_INT 0
10044: ST_TO_ADDR
// sSpec := false ;
10045: LD_ADDR_EXP 56
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// sLevel := false ;
10053: LD_ADDR_EXP 60
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// sArmoury := false ;
10061: LD_ADDR_EXP 61
10065: PUSH
10066: LD_INT 0
10068: ST_TO_ADDR
// sRadar := false ;
10069: LD_ADDR_EXP 62
10073: PUSH
10074: LD_INT 0
10076: ST_TO_ADDR
// sBunker := false ;
10077: LD_ADDR_EXP 63
10081: PUSH
10082: LD_INT 0
10084: ST_TO_ADDR
// sHack := false ;
10085: LD_ADDR_EXP 64
10089: PUSH
10090: LD_INT 0
10092: ST_TO_ADDR
// sFire := false ;
10093: LD_ADDR_EXP 65
10097: PUSH
10098: LD_INT 0
10100: ST_TO_ADDR
// sRefresh := false ;
10101: LD_ADDR_EXP 66
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
// sExp := false ;
10109: LD_ADDR_EXP 67
10113: PUSH
10114: LD_INT 0
10116: ST_TO_ADDR
// sDepot := false ;
10117: LD_ADDR_EXP 68
10121: PUSH
10122: LD_INT 0
10124: ST_TO_ADDR
// sFlag := false ;
10125: LD_ADDR_EXP 69
10129: PUSH
10130: LD_INT 0
10132: ST_TO_ADDR
// sKamikadze := false ;
10133: LD_ADDR_EXP 77
10137: PUSH
10138: LD_INT 0
10140: ST_TO_ADDR
// sTroll := false ;
10141: LD_ADDR_EXP 78
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// sSlow := false ;
10149: LD_ADDR_EXP 79
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// sLack := false ;
10157: LD_ADDR_EXP 80
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// sTank := false ;
10165: LD_ADDR_EXP 82
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// sRemote := false ;
10173: LD_ADDR_EXP 83
10177: PUSH
10178: LD_INT 0
10180: ST_TO_ADDR
// sPowell := false ;
10181: LD_ADDR_EXP 84
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
// sTeleport := false ;
10189: LD_ADDR_EXP 87
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// sOilTower := false ;
10197: LD_ADDR_EXP 89
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// sShovel := false ;
10205: LD_ADDR_EXP 90
10209: PUSH
10210: LD_INT 0
10212: ST_TO_ADDR
// sSheik := false ;
10213: LD_ADDR_EXP 91
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// sEarthquake := false ;
10221: LD_ADDR_EXP 93
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// sAI := false ;
10229: LD_ADDR_EXP 94
10233: PUSH
10234: LD_INT 0
10236: ST_TO_ADDR
// sCargo := false ;
10237: LD_ADDR_EXP 97
10241: PUSH
10242: LD_INT 0
10244: ST_TO_ADDR
// sDLaser := false ;
10245: LD_ADDR_EXP 98
10249: PUSH
10250: LD_INT 0
10252: ST_TO_ADDR
// sExchange := false ;
10253: LD_ADDR_EXP 99
10257: PUSH
10258: LD_INT 0
10260: ST_TO_ADDR
// sFac := false ;
10261: LD_ADDR_EXP 100
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// sPower := false ;
10269: LD_ADDR_EXP 101
10273: PUSH
10274: LD_INT 0
10276: ST_TO_ADDR
// sRandom := false ;
10277: LD_ADDR_EXP 102
10281: PUSH
10282: LD_INT 0
10284: ST_TO_ADDR
// sShield := false ;
10285: LD_ADDR_EXP 103
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// sTime := false ;
10293: LD_ADDR_EXP 104
10297: PUSH
10298: LD_INT 0
10300: ST_TO_ADDR
// sTools := false ;
10301: LD_ADDR_EXP 105
10305: PUSH
10306: LD_INT 0
10308: ST_TO_ADDR
// sSold := false ;
10309: LD_ADDR_EXP 70
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// sDiff := false ;
10317: LD_ADDR_EXP 71
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// sFog := false ;
10325: LD_ADDR_EXP 74
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// sReset := false ;
10333: LD_ADDR_EXP 75
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// sSun := false ;
10341: LD_ADDR_EXP 76
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// sTiger := false ;
10349: LD_ADDR_EXP 72
10353: PUSH
10354: LD_INT 0
10356: ST_TO_ADDR
// sBomb := false ;
10357: LD_ADDR_EXP 73
10361: PUSH
10362: LD_INT 0
10364: ST_TO_ADDR
// sWound := false ;
10365: LD_ADDR_EXP 81
10369: PUSH
10370: LD_INT 0
10372: ST_TO_ADDR
// sBetray := false ;
10373: LD_ADDR_EXP 85
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// sContamin := false ;
10381: LD_ADDR_EXP 86
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// sOil := false ;
10389: LD_ADDR_EXP 88
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// sStu := false ;
10397: LD_ADDR_EXP 92
10401: PUSH
10402: LD_INT 0
10404: ST_TO_ADDR
// sBazooka := false ;
10405: LD_ADDR_EXP 95
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
// sMortar := false ;
10413: LD_ADDR_EXP 96
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// sRanger := false ;
10421: LD_ADDR_EXP 106
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// sComputer := false ;
10429: LD_ADDR_EXP 107
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
// s30 := false ;
10437: LD_ADDR_EXP 108
10441: PUSH
10442: LD_INT 0
10444: ST_TO_ADDR
// s60 := false ;
10445: LD_ADDR_EXP 109
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
// end ;
10453: LD_VAR 0 1
10457: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10458: LD_INT 0
10460: PPUSH
10461: PPUSH
10462: PPUSH
10463: PPUSH
10464: PPUSH
10465: PPUSH
10466: PPUSH
// result := [ ] ;
10467: LD_ADDR_VAR 0 2
10471: PUSH
10472: EMPTY
10473: ST_TO_ADDR
// if campaign_id = 1 then
10474: LD_OWVAR 69
10478: PUSH
10479: LD_INT 1
10481: EQUAL
10482: IFFALSE 13648
// begin case mission_number of 1 :
10484: LD_OWVAR 70
10488: PUSH
10489: LD_INT 1
10491: DOUBLE
10492: EQUAL
10493: IFTRUE 10497
10495: GO 10573
10497: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10498: LD_ADDR_VAR 0 2
10502: PUSH
10503: LD_INT 2
10505: PUSH
10506: LD_INT 4
10508: PUSH
10509: LD_INT 11
10511: PUSH
10512: LD_INT 12
10514: PUSH
10515: LD_INT 15
10517: PUSH
10518: LD_INT 16
10520: PUSH
10521: LD_INT 22
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: LD_INT 26
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 101
10543: PUSH
10544: LD_INT 102
10546: PUSH
10547: LD_INT 106
10549: PUSH
10550: LD_INT 116
10552: PUSH
10553: LD_INT 117
10555: PUSH
10556: LD_INT 118
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: ST_TO_ADDR
10571: GO 13646
10573: LD_INT 2
10575: DOUBLE
10576: EQUAL
10577: IFTRUE 10581
10579: GO 10665
10581: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10582: LD_ADDR_VAR 0 2
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: LD_INT 4
10592: PUSH
10593: LD_INT 11
10595: PUSH
10596: LD_INT 12
10598: PUSH
10599: LD_INT 15
10601: PUSH
10602: LD_INT 16
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_INT 23
10610: PUSH
10611: LD_INT 26
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 101
10627: PUSH
10628: LD_INT 102
10630: PUSH
10631: LD_INT 105
10633: PUSH
10634: LD_INT 106
10636: PUSH
10637: LD_INT 108
10639: PUSH
10640: LD_INT 116
10642: PUSH
10643: LD_INT 117
10645: PUSH
10646: LD_INT 118
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: ST_TO_ADDR
10663: GO 13646
10665: LD_INT 3
10667: DOUBLE
10668: EQUAL
10669: IFTRUE 10673
10671: GO 10761
10673: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_INT 2
10681: PUSH
10682: LD_INT 4
10684: PUSH
10685: LD_INT 5
10687: PUSH
10688: LD_INT 11
10690: PUSH
10691: LD_INT 12
10693: PUSH
10694: LD_INT 15
10696: PUSH
10697: LD_INT 16
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 26
10705: PUSH
10706: LD_INT 36
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 101
10723: PUSH
10724: LD_INT 102
10726: PUSH
10727: LD_INT 105
10729: PUSH
10730: LD_INT 106
10732: PUSH
10733: LD_INT 108
10735: PUSH
10736: LD_INT 116
10738: PUSH
10739: LD_INT 117
10741: PUSH
10742: LD_INT 118
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: ST_TO_ADDR
10759: GO 13646
10761: LD_INT 4
10763: DOUBLE
10764: EQUAL
10765: IFTRUE 10769
10767: GO 10865
10769: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: LD_INT 4
10780: PUSH
10781: LD_INT 5
10783: PUSH
10784: LD_INT 8
10786: PUSH
10787: LD_INT 11
10789: PUSH
10790: LD_INT 12
10792: PUSH
10793: LD_INT 15
10795: PUSH
10796: LD_INT 16
10798: PUSH
10799: LD_INT 22
10801: PUSH
10802: LD_INT 23
10804: PUSH
10805: LD_INT 26
10807: PUSH
10808: LD_INT 36
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 101
10827: PUSH
10828: LD_INT 102
10830: PUSH
10831: LD_INT 105
10833: PUSH
10834: LD_INT 106
10836: PUSH
10837: LD_INT 108
10839: PUSH
10840: LD_INT 116
10842: PUSH
10843: LD_INT 117
10845: PUSH
10846: LD_INT 118
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: ST_TO_ADDR
10863: GO 13646
10865: LD_INT 5
10867: DOUBLE
10868: EQUAL
10869: IFTRUE 10873
10871: GO 10985
10873: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10874: LD_ADDR_VAR 0 2
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 4
10884: PUSH
10885: LD_INT 5
10887: PUSH
10888: LD_INT 6
10890: PUSH
10891: LD_INT 8
10893: PUSH
10894: LD_INT 11
10896: PUSH
10897: LD_INT 12
10899: PUSH
10900: LD_INT 15
10902: PUSH
10903: LD_INT 16
10905: PUSH
10906: LD_INT 22
10908: PUSH
10909: LD_INT 23
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 26
10917: PUSH
10918: LD_INT 36
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 101
10939: PUSH
10940: LD_INT 102
10942: PUSH
10943: LD_INT 105
10945: PUSH
10946: LD_INT 106
10948: PUSH
10949: LD_INT 108
10951: PUSH
10952: LD_INT 109
10954: PUSH
10955: LD_INT 112
10957: PUSH
10958: LD_INT 116
10960: PUSH
10961: LD_INT 117
10963: PUSH
10964: LD_INT 118
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: ST_TO_ADDR
10983: GO 13646
10985: LD_INT 6
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11125
10993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: LD_INT 5
11007: PUSH
11008: LD_INT 6
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: LD_INT 11
11016: PUSH
11017: LD_INT 12
11019: PUSH
11020: LD_INT 15
11022: PUSH
11023: LD_INT 16
11025: PUSH
11026: LD_INT 20
11028: PUSH
11029: LD_INT 21
11031: PUSH
11032: LD_INT 22
11034: PUSH
11035: LD_INT 23
11037: PUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 26
11043: PUSH
11044: LD_INT 30
11046: PUSH
11047: LD_INT 31
11049: PUSH
11050: LD_INT 32
11052: PUSH
11053: LD_INT 36
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 101
11079: PUSH
11080: LD_INT 102
11082: PUSH
11083: LD_INT 105
11085: PUSH
11086: LD_INT 106
11088: PUSH
11089: LD_INT 108
11091: PUSH
11092: LD_INT 109
11094: PUSH
11095: LD_INT 112
11097: PUSH
11098: LD_INT 116
11100: PUSH
11101: LD_INT 117
11103: PUSH
11104: LD_INT 118
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: ST_TO_ADDR
11123: GO 13646
11125: LD_INT 7
11127: DOUBLE
11128: EQUAL
11129: IFTRUE 11133
11131: GO 11245
11133: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11134: LD_ADDR_VAR 0 2
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: LD_INT 4
11144: PUSH
11145: LD_INT 5
11147: PUSH
11148: LD_INT 7
11150: PUSH
11151: LD_INT 11
11153: PUSH
11154: LD_INT 12
11156: PUSH
11157: LD_INT 15
11159: PUSH
11160: LD_INT 16
11162: PUSH
11163: LD_INT 20
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 25
11177: PUSH
11178: LD_INT 26
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 102
11202: PUSH
11203: LD_INT 103
11205: PUSH
11206: LD_INT 105
11208: PUSH
11209: LD_INT 106
11211: PUSH
11212: LD_INT 108
11214: PUSH
11215: LD_INT 112
11217: PUSH
11218: LD_INT 116
11220: PUSH
11221: LD_INT 117
11223: PUSH
11224: LD_INT 118
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: ST_TO_ADDR
11243: GO 13646
11245: LD_INT 8
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11393
11253: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: LD_INT 4
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: LD_INT 7
11273: PUSH
11274: LD_INT 8
11276: PUSH
11277: LD_INT 11
11279: PUSH
11280: LD_INT 12
11282: PUSH
11283: LD_INT 15
11285: PUSH
11286: LD_INT 16
11288: PUSH
11289: LD_INT 20
11291: PUSH
11292: LD_INT 21
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 23
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 26
11306: PUSH
11307: LD_INT 30
11309: PUSH
11310: LD_INT 31
11312: PUSH
11313: LD_INT 32
11315: PUSH
11316: LD_INT 36
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 101
11343: PUSH
11344: LD_INT 102
11346: PUSH
11347: LD_INT 103
11349: PUSH
11350: LD_INT 105
11352: PUSH
11353: LD_INT 106
11355: PUSH
11356: LD_INT 108
11358: PUSH
11359: LD_INT 109
11361: PUSH
11362: LD_INT 112
11364: PUSH
11365: LD_INT 116
11367: PUSH
11368: LD_INT 117
11370: PUSH
11371: LD_INT 118
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: ST_TO_ADDR
11391: GO 13646
11393: LD_INT 9
11395: DOUBLE
11396: EQUAL
11397: IFTRUE 11401
11399: GO 11549
11401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11402: LD_ADDR_VAR 0 2
11406: PUSH
11407: LD_INT 2
11409: PUSH
11410: LD_INT 4
11412: PUSH
11413: LD_INT 5
11415: PUSH
11416: LD_INT 6
11418: PUSH
11419: LD_INT 7
11421: PUSH
11422: LD_INT 8
11424: PUSH
11425: LD_INT 11
11427: PUSH
11428: LD_INT 12
11430: PUSH
11431: LD_INT 15
11433: PUSH
11434: LD_INT 16
11436: PUSH
11437: LD_INT 20
11439: PUSH
11440: LD_INT 21
11442: PUSH
11443: LD_INT 22
11445: PUSH
11446: LD_INT 23
11448: PUSH
11449: LD_INT 25
11451: PUSH
11452: LD_INT 26
11454: PUSH
11455: LD_INT 28
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: LD_INT 31
11463: PUSH
11464: LD_INT 32
11466: PUSH
11467: LD_INT 36
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 101
11495: PUSH
11496: LD_INT 102
11498: PUSH
11499: LD_INT 103
11501: PUSH
11502: LD_INT 105
11504: PUSH
11505: LD_INT 106
11507: PUSH
11508: LD_INT 108
11510: PUSH
11511: LD_INT 109
11513: PUSH
11514: LD_INT 112
11516: PUSH
11517: LD_INT 114
11519: PUSH
11520: LD_INT 116
11522: PUSH
11523: LD_INT 117
11525: PUSH
11526: LD_INT 118
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: ST_TO_ADDR
11547: GO 13646
11549: LD_INT 10
11551: DOUBLE
11552: EQUAL
11553: IFTRUE 11557
11555: GO 11753
11557: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11558: LD_ADDR_VAR 0 2
11562: PUSH
11563: LD_INT 2
11565: PUSH
11566: LD_INT 4
11568: PUSH
11569: LD_INT 5
11571: PUSH
11572: LD_INT 6
11574: PUSH
11575: LD_INT 7
11577: PUSH
11578: LD_INT 8
11580: PUSH
11581: LD_INT 9
11583: PUSH
11584: LD_INT 10
11586: PUSH
11587: LD_INT 11
11589: PUSH
11590: LD_INT 12
11592: PUSH
11593: LD_INT 13
11595: PUSH
11596: LD_INT 14
11598: PUSH
11599: LD_INT 15
11601: PUSH
11602: LD_INT 16
11604: PUSH
11605: LD_INT 17
11607: PUSH
11608: LD_INT 18
11610: PUSH
11611: LD_INT 19
11613: PUSH
11614: LD_INT 20
11616: PUSH
11617: LD_INT 21
11619: PUSH
11620: LD_INT 22
11622: PUSH
11623: LD_INT 23
11625: PUSH
11626: LD_INT 24
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 26
11634: PUSH
11635: LD_INT 28
11637: PUSH
11638: LD_INT 30
11640: PUSH
11641: LD_INT 31
11643: PUSH
11644: LD_INT 32
11646: PUSH
11647: LD_INT 36
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 101
11683: PUSH
11684: LD_INT 102
11686: PUSH
11687: LD_INT 103
11689: PUSH
11690: LD_INT 104
11692: PUSH
11693: LD_INT 105
11695: PUSH
11696: LD_INT 106
11698: PUSH
11699: LD_INT 107
11701: PUSH
11702: LD_INT 108
11704: PUSH
11705: LD_INT 109
11707: PUSH
11708: LD_INT 110
11710: PUSH
11711: LD_INT 111
11713: PUSH
11714: LD_INT 112
11716: PUSH
11717: LD_INT 114
11719: PUSH
11720: LD_INT 116
11722: PUSH
11723: LD_INT 117
11725: PUSH
11726: LD_INT 118
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: ST_TO_ADDR
11751: GO 13646
11753: LD_INT 11
11755: DOUBLE
11756: EQUAL
11757: IFTRUE 11761
11759: GO 11965
11761: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: LD_INT 3
11772: PUSH
11773: LD_INT 4
11775: PUSH
11776: LD_INT 5
11778: PUSH
11779: LD_INT 6
11781: PUSH
11782: LD_INT 7
11784: PUSH
11785: LD_INT 8
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: LD_INT 10
11793: PUSH
11794: LD_INT 11
11796: PUSH
11797: LD_INT 12
11799: PUSH
11800: LD_INT 13
11802: PUSH
11803: LD_INT 14
11805: PUSH
11806: LD_INT 15
11808: PUSH
11809: LD_INT 16
11811: PUSH
11812: LD_INT 17
11814: PUSH
11815: LD_INT 18
11817: PUSH
11818: LD_INT 19
11820: PUSH
11821: LD_INT 20
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 22
11829: PUSH
11830: LD_INT 23
11832: PUSH
11833: LD_INT 24
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 26
11841: PUSH
11842: LD_INT 28
11844: PUSH
11845: LD_INT 30
11847: PUSH
11848: LD_INT 31
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: LD_INT 34
11856: PUSH
11857: LD_INT 36
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 101
11895: PUSH
11896: LD_INT 102
11898: PUSH
11899: LD_INT 103
11901: PUSH
11902: LD_INT 104
11904: PUSH
11905: LD_INT 105
11907: PUSH
11908: LD_INT 106
11910: PUSH
11911: LD_INT 107
11913: PUSH
11914: LD_INT 108
11916: PUSH
11917: LD_INT 109
11919: PUSH
11920: LD_INT 110
11922: PUSH
11923: LD_INT 111
11925: PUSH
11926: LD_INT 112
11928: PUSH
11929: LD_INT 114
11931: PUSH
11932: LD_INT 116
11934: PUSH
11935: LD_INT 117
11937: PUSH
11938: LD_INT 118
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: ST_TO_ADDR
11963: GO 13646
11965: LD_INT 12
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12193
11973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: LD_INT 3
11987: PUSH
11988: LD_INT 4
11990: PUSH
11991: LD_INT 5
11993: PUSH
11994: LD_INT 6
11996: PUSH
11997: LD_INT 7
11999: PUSH
12000: LD_INT 8
12002: PUSH
12003: LD_INT 9
12005: PUSH
12006: LD_INT 10
12008: PUSH
12009: LD_INT 11
12011: PUSH
12012: LD_INT 12
12014: PUSH
12015: LD_INT 13
12017: PUSH
12018: LD_INT 14
12020: PUSH
12021: LD_INT 15
12023: PUSH
12024: LD_INT 16
12026: PUSH
12027: LD_INT 17
12029: PUSH
12030: LD_INT 18
12032: PUSH
12033: LD_INT 19
12035: PUSH
12036: LD_INT 20
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_INT 23
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 26
12056: PUSH
12057: LD_INT 27
12059: PUSH
12060: LD_INT 28
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: LD_INT 31
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: LD_INT 33
12074: PUSH
12075: LD_INT 34
12077: PUSH
12078: LD_INT 36
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 101
12119: PUSH
12120: LD_INT 102
12122: PUSH
12123: LD_INT 103
12125: PUSH
12126: LD_INT 104
12128: PUSH
12129: LD_INT 105
12131: PUSH
12132: LD_INT 106
12134: PUSH
12135: LD_INT 107
12137: PUSH
12138: LD_INT 108
12140: PUSH
12141: LD_INT 109
12143: PUSH
12144: LD_INT 110
12146: PUSH
12147: LD_INT 111
12149: PUSH
12150: LD_INT 112
12152: PUSH
12153: LD_INT 113
12155: PUSH
12156: LD_INT 114
12158: PUSH
12159: LD_INT 116
12161: PUSH
12162: LD_INT 117
12164: PUSH
12165: LD_INT 118
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: ST_TO_ADDR
12191: GO 13646
12193: LD_INT 13
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12409
12201: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12202: LD_ADDR_VAR 0 2
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: LD_INT 2
12212: PUSH
12213: LD_INT 3
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: LD_INT 5
12221: PUSH
12222: LD_INT 8
12224: PUSH
12225: LD_INT 9
12227: PUSH
12228: LD_INT 10
12230: PUSH
12231: LD_INT 11
12233: PUSH
12234: LD_INT 12
12236: PUSH
12237: LD_INT 14
12239: PUSH
12240: LD_INT 15
12242: PUSH
12243: LD_INT 16
12245: PUSH
12246: LD_INT 17
12248: PUSH
12249: LD_INT 18
12251: PUSH
12252: LD_INT 19
12254: PUSH
12255: LD_INT 20
12257: PUSH
12258: LD_INT 21
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 23
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 25
12272: PUSH
12273: LD_INT 26
12275: PUSH
12276: LD_INT 27
12278: PUSH
12279: LD_INT 28
12281: PUSH
12282: LD_INT 30
12284: PUSH
12285: LD_INT 31
12287: PUSH
12288: LD_INT 32
12290: PUSH
12291: LD_INT 33
12293: PUSH
12294: LD_INT 34
12296: PUSH
12297: LD_INT 36
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 101
12335: PUSH
12336: LD_INT 102
12338: PUSH
12339: LD_INT 103
12341: PUSH
12342: LD_INT 104
12344: PUSH
12345: LD_INT 105
12347: PUSH
12348: LD_INT 106
12350: PUSH
12351: LD_INT 107
12353: PUSH
12354: LD_INT 108
12356: PUSH
12357: LD_INT 109
12359: PUSH
12360: LD_INT 110
12362: PUSH
12363: LD_INT 111
12365: PUSH
12366: LD_INT 112
12368: PUSH
12369: LD_INT 113
12371: PUSH
12372: LD_INT 114
12374: PUSH
12375: LD_INT 116
12377: PUSH
12378: LD_INT 117
12380: PUSH
12381: LD_INT 118
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: ST_TO_ADDR
12407: GO 13646
12409: LD_INT 14
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12641
12417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12418: LD_ADDR_VAR 0 2
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: LD_INT 4
12434: PUSH
12435: LD_INT 5
12437: PUSH
12438: LD_INT 6
12440: PUSH
12441: LD_INT 7
12443: PUSH
12444: LD_INT 8
12446: PUSH
12447: LD_INT 9
12449: PUSH
12450: LD_INT 10
12452: PUSH
12453: LD_INT 11
12455: PUSH
12456: LD_INT 12
12458: PUSH
12459: LD_INT 13
12461: PUSH
12462: LD_INT 14
12464: PUSH
12465: LD_INT 15
12467: PUSH
12468: LD_INT 16
12470: PUSH
12471: LD_INT 17
12473: PUSH
12474: LD_INT 18
12476: PUSH
12477: LD_INT 19
12479: PUSH
12480: LD_INT 20
12482: PUSH
12483: LD_INT 21
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_INT 23
12491: PUSH
12492: LD_INT 24
12494: PUSH
12495: LD_INT 25
12497: PUSH
12498: LD_INT 26
12500: PUSH
12501: LD_INT 27
12503: PUSH
12504: LD_INT 28
12506: PUSH
12507: LD_INT 29
12509: PUSH
12510: LD_INT 30
12512: PUSH
12513: LD_INT 31
12515: PUSH
12516: LD_INT 32
12518: PUSH
12519: LD_INT 33
12521: PUSH
12522: LD_INT 34
12524: PUSH
12525: LD_INT 36
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 101
12567: PUSH
12568: LD_INT 102
12570: PUSH
12571: LD_INT 103
12573: PUSH
12574: LD_INT 104
12576: PUSH
12577: LD_INT 105
12579: PUSH
12580: LD_INT 106
12582: PUSH
12583: LD_INT 107
12585: PUSH
12586: LD_INT 108
12588: PUSH
12589: LD_INT 109
12591: PUSH
12592: LD_INT 110
12594: PUSH
12595: LD_INT 111
12597: PUSH
12598: LD_INT 112
12600: PUSH
12601: LD_INT 113
12603: PUSH
12604: LD_INT 114
12606: PUSH
12607: LD_INT 116
12609: PUSH
12610: LD_INT 117
12612: PUSH
12613: LD_INT 118
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: ST_TO_ADDR
12639: GO 13646
12641: LD_INT 15
12643: DOUBLE
12644: EQUAL
12645: IFTRUE 12649
12647: GO 12873
12649: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12650: LD_ADDR_VAR 0 2
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: LD_INT 4
12666: PUSH
12667: LD_INT 5
12669: PUSH
12670: LD_INT 6
12672: PUSH
12673: LD_INT 7
12675: PUSH
12676: LD_INT 8
12678: PUSH
12679: LD_INT 9
12681: PUSH
12682: LD_INT 10
12684: PUSH
12685: LD_INT 11
12687: PUSH
12688: LD_INT 12
12690: PUSH
12691: LD_INT 13
12693: PUSH
12694: LD_INT 14
12696: PUSH
12697: LD_INT 15
12699: PUSH
12700: LD_INT 16
12702: PUSH
12703: LD_INT 17
12705: PUSH
12706: LD_INT 18
12708: PUSH
12709: LD_INT 19
12711: PUSH
12712: LD_INT 20
12714: PUSH
12715: LD_INT 21
12717: PUSH
12718: LD_INT 22
12720: PUSH
12721: LD_INT 23
12723: PUSH
12724: LD_INT 24
12726: PUSH
12727: LD_INT 25
12729: PUSH
12730: LD_INT 26
12732: PUSH
12733: LD_INT 27
12735: PUSH
12736: LD_INT 28
12738: PUSH
12739: LD_INT 29
12741: PUSH
12742: LD_INT 30
12744: PUSH
12745: LD_INT 31
12747: PUSH
12748: LD_INT 32
12750: PUSH
12751: LD_INT 33
12753: PUSH
12754: LD_INT 34
12756: PUSH
12757: LD_INT 36
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 101
12799: PUSH
12800: LD_INT 102
12802: PUSH
12803: LD_INT 103
12805: PUSH
12806: LD_INT 104
12808: PUSH
12809: LD_INT 105
12811: PUSH
12812: LD_INT 106
12814: PUSH
12815: LD_INT 107
12817: PUSH
12818: LD_INT 108
12820: PUSH
12821: LD_INT 109
12823: PUSH
12824: LD_INT 110
12826: PUSH
12827: LD_INT 111
12829: PUSH
12830: LD_INT 112
12832: PUSH
12833: LD_INT 113
12835: PUSH
12836: LD_INT 114
12838: PUSH
12839: LD_INT 116
12841: PUSH
12842: LD_INT 117
12844: PUSH
12845: LD_INT 118
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: ST_TO_ADDR
12871: GO 13646
12873: LD_INT 16
12875: DOUBLE
12876: EQUAL
12877: IFTRUE 12881
12879: GO 13017
12881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12882: LD_ADDR_VAR 0 2
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 5
12895: PUSH
12896: LD_INT 7
12898: PUSH
12899: LD_INT 11
12901: PUSH
12902: LD_INT 12
12904: PUSH
12905: LD_INT 15
12907: PUSH
12908: LD_INT 16
12910: PUSH
12911: LD_INT 20
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 22
12919: PUSH
12920: LD_INT 23
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 26
12928: PUSH
12929: LD_INT 30
12931: PUSH
12932: LD_INT 31
12934: PUSH
12935: LD_INT 32
12937: PUSH
12938: LD_INT 33
12940: PUSH
12941: LD_INT 34
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 101
12967: PUSH
12968: LD_INT 102
12970: PUSH
12971: LD_INT 103
12973: PUSH
12974: LD_INT 106
12976: PUSH
12977: LD_INT 108
12979: PUSH
12980: LD_INT 112
12982: PUSH
12983: LD_INT 113
12985: PUSH
12986: LD_INT 114
12988: PUSH
12989: LD_INT 116
12991: PUSH
12992: LD_INT 117
12994: PUSH
12995: LD_INT 118
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 13646
13017: LD_INT 17
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13249
13025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: LD_INT 3
13039: PUSH
13040: LD_INT 4
13042: PUSH
13043: LD_INT 5
13045: PUSH
13046: LD_INT 6
13048: PUSH
13049: LD_INT 7
13051: PUSH
13052: LD_INT 8
13054: PUSH
13055: LD_INT 9
13057: PUSH
13058: LD_INT 10
13060: PUSH
13061: LD_INT 11
13063: PUSH
13064: LD_INT 12
13066: PUSH
13067: LD_INT 13
13069: PUSH
13070: LD_INT 14
13072: PUSH
13073: LD_INT 15
13075: PUSH
13076: LD_INT 16
13078: PUSH
13079: LD_INT 17
13081: PUSH
13082: LD_INT 18
13084: PUSH
13085: LD_INT 19
13087: PUSH
13088: LD_INT 20
13090: PUSH
13091: LD_INT 21
13093: PUSH
13094: LD_INT 22
13096: PUSH
13097: LD_INT 23
13099: PUSH
13100: LD_INT 24
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: LD_INT 27
13111: PUSH
13112: LD_INT 28
13114: PUSH
13115: LD_INT 29
13117: PUSH
13118: LD_INT 30
13120: PUSH
13121: LD_INT 31
13123: PUSH
13124: LD_INT 32
13126: PUSH
13127: LD_INT 33
13129: PUSH
13130: LD_INT 34
13132: PUSH
13133: LD_INT 36
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 101
13175: PUSH
13176: LD_INT 102
13178: PUSH
13179: LD_INT 103
13181: PUSH
13182: LD_INT 104
13184: PUSH
13185: LD_INT 105
13187: PUSH
13188: LD_INT 106
13190: PUSH
13191: LD_INT 107
13193: PUSH
13194: LD_INT 108
13196: PUSH
13197: LD_INT 109
13199: PUSH
13200: LD_INT 110
13202: PUSH
13203: LD_INT 111
13205: PUSH
13206: LD_INT 112
13208: PUSH
13209: LD_INT 113
13211: PUSH
13212: LD_INT 114
13214: PUSH
13215: LD_INT 116
13217: PUSH
13218: LD_INT 117
13220: PUSH
13221: LD_INT 118
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: ST_TO_ADDR
13247: GO 13646
13249: LD_INT 18
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13405
13257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13258: LD_ADDR_VAR 0 2
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 4
13268: PUSH
13269: LD_INT 5
13271: PUSH
13272: LD_INT 7
13274: PUSH
13275: LD_INT 11
13277: PUSH
13278: LD_INT 12
13280: PUSH
13281: LD_INT 15
13283: PUSH
13284: LD_INT 16
13286: PUSH
13287: LD_INT 20
13289: PUSH
13290: LD_INT 21
13292: PUSH
13293: LD_INT 22
13295: PUSH
13296: LD_INT 23
13298: PUSH
13299: LD_INT 25
13301: PUSH
13302: LD_INT 26
13304: PUSH
13305: LD_INT 30
13307: PUSH
13308: LD_INT 31
13310: PUSH
13311: LD_INT 32
13313: PUSH
13314: LD_INT 33
13316: PUSH
13317: LD_INT 34
13319: PUSH
13320: LD_INT 35
13322: PUSH
13323: LD_INT 36
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 101
13351: PUSH
13352: LD_INT 102
13354: PUSH
13355: LD_INT 103
13357: PUSH
13358: LD_INT 106
13360: PUSH
13361: LD_INT 108
13363: PUSH
13364: LD_INT 112
13366: PUSH
13367: LD_INT 113
13369: PUSH
13370: LD_INT 114
13372: PUSH
13373: LD_INT 115
13375: PUSH
13376: LD_INT 116
13378: PUSH
13379: LD_INT 117
13381: PUSH
13382: LD_INT 118
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: ST_TO_ADDR
13403: GO 13646
13405: LD_INT 19
13407: DOUBLE
13408: EQUAL
13409: IFTRUE 13413
13411: GO 13645
13413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13414: LD_ADDR_VAR 0 2
13418: PUSH
13419: LD_INT 1
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: LD_INT 3
13427: PUSH
13428: LD_INT 4
13430: PUSH
13431: LD_INT 5
13433: PUSH
13434: LD_INT 6
13436: PUSH
13437: LD_INT 7
13439: PUSH
13440: LD_INT 8
13442: PUSH
13443: LD_INT 9
13445: PUSH
13446: LD_INT 10
13448: PUSH
13449: LD_INT 11
13451: PUSH
13452: LD_INT 12
13454: PUSH
13455: LD_INT 13
13457: PUSH
13458: LD_INT 14
13460: PUSH
13461: LD_INT 15
13463: PUSH
13464: LD_INT 16
13466: PUSH
13467: LD_INT 17
13469: PUSH
13470: LD_INT 18
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: LD_INT 20
13478: PUSH
13479: LD_INT 21
13481: PUSH
13482: LD_INT 22
13484: PUSH
13485: LD_INT 23
13487: PUSH
13488: LD_INT 24
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: LD_INT 27
13499: PUSH
13500: LD_INT 28
13502: PUSH
13503: LD_INT 29
13505: PUSH
13506: LD_INT 30
13508: PUSH
13509: LD_INT 31
13511: PUSH
13512: LD_INT 32
13514: PUSH
13515: LD_INT 33
13517: PUSH
13518: LD_INT 34
13520: PUSH
13521: LD_INT 35
13523: PUSH
13524: LD_INT 36
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 101
13567: PUSH
13568: LD_INT 102
13570: PUSH
13571: LD_INT 103
13573: PUSH
13574: LD_INT 104
13576: PUSH
13577: LD_INT 105
13579: PUSH
13580: LD_INT 106
13582: PUSH
13583: LD_INT 107
13585: PUSH
13586: LD_INT 108
13588: PUSH
13589: LD_INT 109
13591: PUSH
13592: LD_INT 110
13594: PUSH
13595: LD_INT 111
13597: PUSH
13598: LD_INT 112
13600: PUSH
13601: LD_INT 113
13603: PUSH
13604: LD_INT 114
13606: PUSH
13607: LD_INT 115
13609: PUSH
13610: LD_INT 116
13612: PUSH
13613: LD_INT 117
13615: PUSH
13616: LD_INT 118
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: ST_TO_ADDR
13643: GO 13646
13645: POP
// end else
13646: GO 13877
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: LD_INT 2
13658: PUSH
13659: LD_INT 3
13661: PUSH
13662: LD_INT 4
13664: PUSH
13665: LD_INT 5
13667: PUSH
13668: LD_INT 6
13670: PUSH
13671: LD_INT 7
13673: PUSH
13674: LD_INT 8
13676: PUSH
13677: LD_INT 9
13679: PUSH
13680: LD_INT 10
13682: PUSH
13683: LD_INT 11
13685: PUSH
13686: LD_INT 12
13688: PUSH
13689: LD_INT 13
13691: PUSH
13692: LD_INT 14
13694: PUSH
13695: LD_INT 15
13697: PUSH
13698: LD_INT 16
13700: PUSH
13701: LD_INT 17
13703: PUSH
13704: LD_INT 18
13706: PUSH
13707: LD_INT 19
13709: PUSH
13710: LD_INT 20
13712: PUSH
13713: LD_INT 21
13715: PUSH
13716: LD_INT 22
13718: PUSH
13719: LD_INT 23
13721: PUSH
13722: LD_INT 24
13724: PUSH
13725: LD_INT 25
13727: PUSH
13728: LD_INT 26
13730: PUSH
13731: LD_INT 27
13733: PUSH
13734: LD_INT 28
13736: PUSH
13737: LD_INT 29
13739: PUSH
13740: LD_INT 30
13742: PUSH
13743: LD_INT 31
13745: PUSH
13746: LD_INT 32
13748: PUSH
13749: LD_INT 33
13751: PUSH
13752: LD_INT 34
13754: PUSH
13755: LD_INT 35
13757: PUSH
13758: LD_INT 36
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 101
13801: PUSH
13802: LD_INT 102
13804: PUSH
13805: LD_INT 103
13807: PUSH
13808: LD_INT 104
13810: PUSH
13811: LD_INT 105
13813: PUSH
13814: LD_INT 106
13816: PUSH
13817: LD_INT 107
13819: PUSH
13820: LD_INT 108
13822: PUSH
13823: LD_INT 109
13825: PUSH
13826: LD_INT 110
13828: PUSH
13829: LD_INT 111
13831: PUSH
13832: LD_INT 112
13834: PUSH
13835: LD_INT 113
13837: PUSH
13838: LD_INT 114
13840: PUSH
13841: LD_INT 115
13843: PUSH
13844: LD_INT 116
13846: PUSH
13847: LD_INT 117
13849: PUSH
13850: LD_INT 118
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: ST_TO_ADDR
// if result then
13877: LD_VAR 0 2
13881: IFFALSE 14667
// begin normal :=  ;
13883: LD_ADDR_VAR 0 5
13887: PUSH
13888: LD_STRING 
13890: ST_TO_ADDR
// hardcore :=  ;
13891: LD_ADDR_VAR 0 6
13895: PUSH
13896: LD_STRING 
13898: ST_TO_ADDR
// active :=  ;
13899: LD_ADDR_VAR 0 7
13903: PUSH
13904: LD_STRING 
13906: ST_TO_ADDR
// for i = 1 to normalCounter do
13907: LD_ADDR_VAR 0 8
13911: PUSH
13912: DOUBLE
13913: LD_INT 1
13915: DEC
13916: ST_TO_ADDR
13917: LD_EXP 54
13921: PUSH
13922: FOR_TO
13923: IFFALSE 14024
// begin tmp := 0 ;
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: LD_STRING 0
13932: ST_TO_ADDR
// if result [ 1 ] then
13933: LD_VAR 0 2
13937: PUSH
13938: LD_INT 1
13940: ARRAY
13941: IFFALSE 14006
// if result [ 1 ] [ 1 ] = i then
13943: LD_VAR 0 2
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: PUSH
13956: LD_VAR 0 8
13960: EQUAL
13961: IFFALSE 14006
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13963: LD_ADDR_VAR 0 2
13967: PUSH
13968: LD_VAR 0 2
13972: PPUSH
13973: LD_INT 1
13975: PPUSH
13976: LD_VAR 0 2
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: CALL_OW 3
13992: PPUSH
13993: CALL_OW 1
13997: ST_TO_ADDR
// tmp := 1 ;
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: LD_STRING 1
14005: ST_TO_ADDR
// end ; normal := normal & tmp ;
14006: LD_ADDR_VAR 0 5
14010: PUSH
14011: LD_VAR 0 5
14015: PUSH
14016: LD_VAR 0 3
14020: STR
14021: ST_TO_ADDR
// end ;
14022: GO 13922
14024: POP
14025: POP
// for i = 1 to hardcoreCounter do
14026: LD_ADDR_VAR 0 8
14030: PUSH
14031: DOUBLE
14032: LD_INT 1
14034: DEC
14035: ST_TO_ADDR
14036: LD_EXP 55
14040: PUSH
14041: FOR_TO
14042: IFFALSE 14147
// begin tmp := 0 ;
14044: LD_ADDR_VAR 0 3
14048: PUSH
14049: LD_STRING 0
14051: ST_TO_ADDR
// if result [ 2 ] then
14052: LD_VAR 0 2
14056: PUSH
14057: LD_INT 2
14059: ARRAY
14060: IFFALSE 14129
// if result [ 2 ] [ 1 ] = 100 + i then
14062: LD_VAR 0 2
14066: PUSH
14067: LD_INT 2
14069: ARRAY
14070: PUSH
14071: LD_INT 1
14073: ARRAY
14074: PUSH
14075: LD_INT 100
14077: PUSH
14078: LD_VAR 0 8
14082: PLUS
14083: EQUAL
14084: IFFALSE 14129
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14086: LD_ADDR_VAR 0 2
14090: PUSH
14091: LD_VAR 0 2
14095: PPUSH
14096: LD_INT 2
14098: PPUSH
14099: LD_VAR 0 2
14103: PUSH
14104: LD_INT 2
14106: ARRAY
14107: PPUSH
14108: LD_INT 1
14110: PPUSH
14111: CALL_OW 3
14115: PPUSH
14116: CALL_OW 1
14120: ST_TO_ADDR
// tmp := 1 ;
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: LD_STRING 1
14128: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14129: LD_ADDR_VAR 0 6
14133: PUSH
14134: LD_VAR 0 6
14138: PUSH
14139: LD_VAR 0 3
14143: STR
14144: ST_TO_ADDR
// end ;
14145: GO 14041
14147: POP
14148: POP
// if isGameLoad then
14149: LD_VAR 0 1
14153: IFFALSE 14628
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14155: LD_ADDR_VAR 0 4
14159: PUSH
14160: LD_EXP 58
14164: PUSH
14165: LD_EXP 57
14169: PUSH
14170: LD_EXP 59
14174: PUSH
14175: LD_EXP 56
14179: PUSH
14180: LD_EXP 60
14184: PUSH
14185: LD_EXP 61
14189: PUSH
14190: LD_EXP 62
14194: PUSH
14195: LD_EXP 63
14199: PUSH
14200: LD_EXP 64
14204: PUSH
14205: LD_EXP 65
14209: PUSH
14210: LD_EXP 66
14214: PUSH
14215: LD_EXP 67
14219: PUSH
14220: LD_EXP 68
14224: PUSH
14225: LD_EXP 69
14229: PUSH
14230: LD_EXP 77
14234: PUSH
14235: LD_EXP 78
14239: PUSH
14240: LD_EXP 79
14244: PUSH
14245: LD_EXP 80
14249: PUSH
14250: LD_EXP 82
14254: PUSH
14255: LD_EXP 83
14259: PUSH
14260: LD_EXP 84
14264: PUSH
14265: LD_EXP 87
14269: PUSH
14270: LD_EXP 89
14274: PUSH
14275: LD_EXP 90
14279: PUSH
14280: LD_EXP 91
14284: PUSH
14285: LD_EXP 93
14289: PUSH
14290: LD_EXP 94
14294: PUSH
14295: LD_EXP 97
14299: PUSH
14300: LD_EXP 98
14304: PUSH
14305: LD_EXP 99
14309: PUSH
14310: LD_EXP 100
14314: PUSH
14315: LD_EXP 101
14319: PUSH
14320: LD_EXP 102
14324: PUSH
14325: LD_EXP 103
14329: PUSH
14330: LD_EXP 104
14334: PUSH
14335: LD_EXP 105
14339: PUSH
14340: LD_EXP 70
14344: PUSH
14345: LD_EXP 71
14349: PUSH
14350: LD_EXP 74
14354: PUSH
14355: LD_EXP 75
14359: PUSH
14360: LD_EXP 76
14364: PUSH
14365: LD_EXP 72
14369: PUSH
14370: LD_EXP 73
14374: PUSH
14375: LD_EXP 81
14379: PUSH
14380: LD_EXP 85
14384: PUSH
14385: LD_EXP 86
14389: PUSH
14390: LD_EXP 88
14394: PUSH
14395: LD_EXP 92
14399: PUSH
14400: LD_EXP 95
14404: PUSH
14405: LD_EXP 96
14409: PUSH
14410: LD_EXP 106
14414: PUSH
14415: LD_EXP 107
14419: PUSH
14420: LD_EXP 108
14424: PUSH
14425: LD_EXP 109
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: ST_TO_ADDR
// tmp :=  ;
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_STRING 
14493: ST_TO_ADDR
// for i = 1 to normalCounter do
14494: LD_ADDR_VAR 0 8
14498: PUSH
14499: DOUBLE
14500: LD_INT 1
14502: DEC
14503: ST_TO_ADDR
14504: LD_EXP 54
14508: PUSH
14509: FOR_TO
14510: IFFALSE 14546
// begin if flags [ i ] then
14512: LD_VAR 0 4
14516: PUSH
14517: LD_VAR 0 8
14521: ARRAY
14522: IFFALSE 14544
// tmp := tmp & i & ; ;
14524: LD_ADDR_VAR 0 3
14528: PUSH
14529: LD_VAR 0 3
14533: PUSH
14534: LD_VAR 0 8
14538: STR
14539: PUSH
14540: LD_STRING ;
14542: STR
14543: ST_TO_ADDR
// end ;
14544: GO 14509
14546: POP
14547: POP
// for i = 1 to hardcoreCounter do
14548: LD_ADDR_VAR 0 8
14552: PUSH
14553: DOUBLE
14554: LD_INT 1
14556: DEC
14557: ST_TO_ADDR
14558: LD_EXP 55
14562: PUSH
14563: FOR_TO
14564: IFFALSE 14610
// begin if flags [ normalCounter + i ] then
14566: LD_VAR 0 4
14570: PUSH
14571: LD_EXP 54
14575: PUSH
14576: LD_VAR 0 8
14580: PLUS
14581: ARRAY
14582: IFFALSE 14608
// tmp := tmp & ( 100 + i ) & ; ;
14584: LD_ADDR_VAR 0 3
14588: PUSH
14589: LD_VAR 0 3
14593: PUSH
14594: LD_INT 100
14596: PUSH
14597: LD_VAR 0 8
14601: PLUS
14602: STR
14603: PUSH
14604: LD_STRING ;
14606: STR
14607: ST_TO_ADDR
// end ;
14608: GO 14563
14610: POP
14611: POP
// if tmp then
14612: LD_VAR 0 3
14616: IFFALSE 14628
// active := tmp ;
14618: LD_ADDR_VAR 0 7
14622: PUSH
14623: LD_VAR 0 3
14627: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14628: LD_STRING getStreamItemsFromMission("
14630: PUSH
14631: LD_VAR 0 5
14635: STR
14636: PUSH
14637: LD_STRING ","
14639: STR
14640: PUSH
14641: LD_VAR 0 6
14645: STR
14646: PUSH
14647: LD_STRING ","
14649: STR
14650: PUSH
14651: LD_VAR 0 7
14655: STR
14656: PUSH
14657: LD_STRING ")
14659: STR
14660: PPUSH
14661: CALL_OW 559
// end else
14665: GO 14674
// ToLua ( getStreamItemsFromMission("","","") ) ;
14667: LD_STRING getStreamItemsFromMission("","","")
14669: PPUSH
14670: CALL_OW 559
// end ;
14674: LD_VAR 0 2
14678: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14679: LD_EXP 53
14683: PUSH
14684: LD_EXP 58
14688: AND
14689: IFFALSE 14813
14691: GO 14693
14693: DISABLE
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
// begin enable ;
14698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_INT 22
14706: PUSH
14707: LD_OWVAR 2
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 34
14721: PUSH
14722: LD_INT 7
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 34
14731: PUSH
14732: LD_INT 45
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 34
14741: PUSH
14742: LD_INT 28
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 34
14751: PUSH
14752: LD_INT 47
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 69
14774: ST_TO_ADDR
// if not tmp then
14775: LD_VAR 0 2
14779: NOT
14780: IFFALSE 14784
// exit ;
14782: GO 14813
// for i in tmp do
14784: LD_ADDR_VAR 0 1
14788: PUSH
14789: LD_VAR 0 2
14793: PUSH
14794: FOR_IN
14795: IFFALSE 14811
// begin SetLives ( i , 0 ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: LD_INT 0
14804: PPUSH
14805: CALL_OW 234
// end ;
14809: GO 14794
14811: POP
14812: POP
// end ;
14813: PPOPN 2
14815: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14816: LD_EXP 53
14820: PUSH
14821: LD_EXP 59
14825: AND
14826: IFFALSE 14910
14828: GO 14830
14830: DISABLE
14831: LD_INT 0
14833: PPUSH
14834: PPUSH
// begin enable ;
14835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14836: LD_ADDR_VAR 0 2
14840: PUSH
14841: LD_INT 22
14843: PUSH
14844: LD_OWVAR 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 32
14855: PUSH
14856: LD_INT 3
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 69
14871: ST_TO_ADDR
// if not tmp then
14872: LD_VAR 0 2
14876: NOT
14877: IFFALSE 14881
// exit ;
14879: GO 14910
// for i in tmp do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 2
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14908
// begin SetLives ( i , 0 ) ;
14894: LD_VAR 0 1
14898: PPUSH
14899: LD_INT 0
14901: PPUSH
14902: CALL_OW 234
// end ;
14906: GO 14891
14908: POP
14909: POP
// end ;
14910: PPOPN 2
14912: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14913: LD_EXP 53
14917: PUSH
14918: LD_EXP 56
14922: AND
14923: IFFALSE 15016
14925: GO 14927
14927: DISABLE
14928: LD_INT 0
14930: PPUSH
// begin enable ;
14931: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_OWVAR 2
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 2
14951: PUSH
14952: LD_INT 25
14954: PUSH
14955: LD_INT 5
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 25
14964: PUSH
14965: LD_INT 9
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 25
14974: PUSH
14975: LD_INT 8
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 69
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15014
// begin SetClass ( i , 1 ) ;
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_INT 1
15007: PPUSH
15008: CALL_OW 336
// end ;
15012: GO 14997
15014: POP
15015: POP
// end ;
15016: PPOPN 1
15018: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15019: LD_EXP 53
15023: PUSH
15024: LD_EXP 57
15028: AND
15029: PUSH
15030: LD_OWVAR 65
15034: PUSH
15035: LD_INT 7
15037: LESS
15038: AND
15039: IFFALSE 15053
15041: GO 15043
15043: DISABLE
// begin enable ;
15044: ENABLE
// game_speed := 7 ;
15045: LD_ADDR_OWVAR 65
15049: PUSH
15050: LD_INT 7
15052: ST_TO_ADDR
// end ;
15053: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15054: LD_EXP 53
15058: PUSH
15059: LD_EXP 60
15063: AND
15064: IFFALSE 15266
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
15073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15074: LD_ADDR_VAR 0 3
15078: PUSH
15079: LD_INT 81
15081: PUSH
15082: LD_OWVAR 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PPUSH
15105: CALL_OW 69
15109: ST_TO_ADDR
// if not tmp then
15110: LD_VAR 0 3
15114: NOT
15115: IFFALSE 15119
// exit ;
15117: GO 15266
// if tmp > 5 then
15119: LD_VAR 0 3
15123: PUSH
15124: LD_INT 5
15126: GREATER
15127: IFFALSE 15139
// k := 5 else
15129: LD_ADDR_VAR 0 2
15133: PUSH
15134: LD_INT 5
15136: ST_TO_ADDR
15137: GO 15149
// k := tmp ;
15139: LD_ADDR_VAR 0 2
15143: PUSH
15144: LD_VAR 0 3
15148: ST_TO_ADDR
// for i := 1 to k do
15149: LD_ADDR_VAR 0 1
15153: PUSH
15154: DOUBLE
15155: LD_INT 1
15157: DEC
15158: ST_TO_ADDR
15159: LD_VAR 0 2
15163: PUSH
15164: FOR_TO
15165: IFFALSE 15264
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15167: LD_VAR 0 3
15171: PUSH
15172: LD_VAR 0 1
15176: ARRAY
15177: PPUSH
15178: LD_VAR 0 1
15182: PUSH
15183: LD_INT 4
15185: MOD
15186: PUSH
15187: LD_INT 1
15189: PLUS
15190: PPUSH
15191: CALL_OW 259
15195: PUSH
15196: LD_INT 10
15198: LESS
15199: IFFALSE 15262
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15201: LD_VAR 0 3
15205: PUSH
15206: LD_VAR 0 1
15210: ARRAY
15211: PPUSH
15212: LD_VAR 0 1
15216: PUSH
15217: LD_INT 4
15219: MOD
15220: PUSH
15221: LD_INT 1
15223: PLUS
15224: PPUSH
15225: LD_VAR 0 3
15229: PUSH
15230: LD_VAR 0 1
15234: ARRAY
15235: PPUSH
15236: LD_VAR 0 1
15240: PUSH
15241: LD_INT 4
15243: MOD
15244: PUSH
15245: LD_INT 1
15247: PLUS
15248: PPUSH
15249: CALL_OW 259
15253: PUSH
15254: LD_INT 1
15256: PLUS
15257: PPUSH
15258: CALL_OW 237
15262: GO 15164
15264: POP
15265: POP
// end ;
15266: PPOPN 3
15268: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15269: LD_EXP 53
15273: PUSH
15274: LD_EXP 61
15278: AND
15279: IFFALSE 15299
15281: GO 15283
15283: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15284: LD_INT 4
15286: PPUSH
15287: LD_OWVAR 2
15291: PPUSH
15292: LD_INT 0
15294: PPUSH
15295: CALL_OW 324
15299: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15300: LD_EXP 53
15304: PUSH
15305: LD_EXP 90
15309: AND
15310: IFFALSE 15330
15312: GO 15314
15314: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15315: LD_INT 19
15317: PPUSH
15318: LD_OWVAR 2
15322: PPUSH
15323: LD_INT 0
15325: PPUSH
15326: CALL_OW 324
15330: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15331: LD_EXP 53
15335: PUSH
15336: LD_EXP 62
15340: AND
15341: IFFALSE 15443
15343: GO 15345
15345: DISABLE
15346: LD_INT 0
15348: PPUSH
15349: PPUSH
// begin enable ;
15350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15351: LD_ADDR_VAR 0 2
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_OWVAR 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 2
15370: PUSH
15371: LD_INT 34
15373: PUSH
15374: LD_INT 11
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 34
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 69
15404: ST_TO_ADDR
// if not tmp then
15405: LD_VAR 0 2
15409: NOT
15410: IFFALSE 15414
// exit ;
15412: GO 15443
// for i in tmp do
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_VAR 0 2
15423: PUSH
15424: FOR_IN
15425: IFFALSE 15441
// begin SetLives ( i , 0 ) ;
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_INT 0
15434: PPUSH
15435: CALL_OW 234
// end ;
15439: GO 15424
15441: POP
15442: POP
// end ;
15443: PPOPN 2
15445: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15446: LD_EXP 53
15450: PUSH
15451: LD_EXP 63
15455: AND
15456: IFFALSE 15476
15458: GO 15460
15460: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15461: LD_INT 32
15463: PPUSH
15464: LD_OWVAR 2
15468: PPUSH
15469: LD_INT 0
15471: PPUSH
15472: CALL_OW 324
15476: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15477: LD_EXP 53
15481: PUSH
15482: LD_EXP 64
15486: AND
15487: IFFALSE 15668
15489: GO 15491
15491: DISABLE
15492: LD_INT 0
15494: PPUSH
15495: PPUSH
15496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15497: LD_ADDR_VAR 0 2
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_OWVAR 2
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 33
15516: PUSH
15517: LD_INT 3
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: ST_TO_ADDR
// if not tmp then
15533: LD_VAR 0 2
15537: NOT
15538: IFFALSE 15542
// exit ;
15540: GO 15668
// side := 0 ;
15542: LD_ADDR_VAR 0 3
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// for i := 1 to 8 do
15550: LD_ADDR_VAR 0 1
15554: PUSH
15555: DOUBLE
15556: LD_INT 1
15558: DEC
15559: ST_TO_ADDR
15560: LD_INT 8
15562: PUSH
15563: FOR_TO
15564: IFFALSE 15612
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15566: LD_OWVAR 2
15570: PUSH
15571: LD_VAR 0 1
15575: NONEQUAL
15576: PUSH
15577: LD_OWVAR 2
15581: PPUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 81
15591: PUSH
15592: LD_INT 2
15594: EQUAL
15595: AND
15596: IFFALSE 15610
// begin side := i ;
15598: LD_ADDR_VAR 0 3
15602: PUSH
15603: LD_VAR 0 1
15607: ST_TO_ADDR
// break ;
15608: GO 15612
// end ;
15610: GO 15563
15612: POP
15613: POP
// if not side then
15614: LD_VAR 0 3
15618: NOT
15619: IFFALSE 15623
// exit ;
15621: GO 15668
// for i := 1 to tmp do
15623: LD_ADDR_VAR 0 1
15627: PUSH
15628: DOUBLE
15629: LD_INT 1
15631: DEC
15632: ST_TO_ADDR
15633: LD_VAR 0 2
15637: PUSH
15638: FOR_TO
15639: IFFALSE 15666
// if Prob ( 60 ) then
15641: LD_INT 60
15643: PPUSH
15644: CALL_OW 13
15648: IFFALSE 15664
// SetSide ( i , side ) ;
15650: LD_VAR 0 1
15654: PPUSH
15655: LD_VAR 0 3
15659: PPUSH
15660: CALL_OW 235
15664: GO 15638
15666: POP
15667: POP
// end ;
15668: PPOPN 3
15670: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15671: LD_EXP 53
15675: PUSH
15676: LD_EXP 66
15680: AND
15681: IFFALSE 15800
15683: GO 15685
15685: DISABLE
15686: LD_INT 0
15688: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15689: LD_ADDR_VAR 0 1
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_OWVAR 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 21
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: LD_INT 23
15721: PUSH
15722: LD_INT 0
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: PUSH
15743: FOR_IN
15744: IFFALSE 15798
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 257
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: LD_INT 2
15761: PUSH
15762: LD_INT 3
15764: PUSH
15765: LD_INT 4
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: IN
15774: IFFALSE 15796
// SetClass ( un , rand ( 1 , 4 ) ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: LD_INT 4
15786: PPUSH
15787: CALL_OW 12
15791: PPUSH
15792: CALL_OW 336
15796: GO 15743
15798: POP
15799: POP
// end ;
15800: PPOPN 1
15802: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15803: LD_EXP 53
15807: PUSH
15808: LD_EXP 65
15812: AND
15813: IFFALSE 15892
15815: GO 15817
15817: DISABLE
15818: LD_INT 0
15820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15821: LD_ADDR_VAR 0 1
15825: PUSH
15826: LD_INT 22
15828: PUSH
15829: LD_OWVAR 2
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 21
15840: PUSH
15841: LD_INT 3
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 69
15856: ST_TO_ADDR
// if not tmp then
15857: LD_VAR 0 1
15861: NOT
15862: IFFALSE 15866
// exit ;
15864: GO 15892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15866: LD_VAR 0 1
15870: PUSH
15871: LD_INT 1
15873: PPUSH
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL_OW 12
15883: ARRAY
15884: PPUSH
15885: LD_INT 100
15887: PPUSH
15888: CALL_OW 234
// end ;
15892: PPOPN 1
15894: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15895: LD_EXP 53
15899: PUSH
15900: LD_EXP 67
15904: AND
15905: IFFALSE 16003
15907: GO 15909
15909: DISABLE
15910: LD_INT 0
15912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15913: LD_ADDR_VAR 0 1
15917: PUSH
15918: LD_INT 22
15920: PUSH
15921: LD_OWVAR 2
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 21
15932: PUSH
15933: LD_INT 1
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PPUSH
15944: CALL_OW 69
15948: ST_TO_ADDR
// if not tmp then
15949: LD_VAR 0 1
15953: NOT
15954: IFFALSE 15958
// exit ;
15956: GO 16003
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15958: LD_VAR 0 1
15962: PUSH
15963: LD_INT 1
15965: PPUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 12
15975: ARRAY
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: LD_INT 4
15982: PPUSH
15983: CALL_OW 12
15987: PPUSH
15988: LD_INT 3000
15990: PPUSH
15991: LD_INT 9000
15993: PPUSH
15994: CALL_OW 12
15998: PPUSH
15999: CALL_OW 492
// end ;
16003: PPOPN 1
16005: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16006: LD_EXP 53
16010: PUSH
16011: LD_EXP 68
16015: AND
16016: IFFALSE 16036
16018: GO 16020
16020: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16021: LD_INT 1
16023: PPUSH
16024: LD_OWVAR 2
16028: PPUSH
16029: LD_INT 0
16031: PPUSH
16032: CALL_OW 324
16036: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16037: LD_EXP 53
16041: PUSH
16042: LD_EXP 69
16046: AND
16047: IFFALSE 16130
16049: GO 16051
16051: DISABLE
16052: LD_INT 0
16054: PPUSH
16055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16056: LD_ADDR_VAR 0 2
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_OWVAR 2
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 21
16075: PUSH
16076: LD_INT 3
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PPUSH
16087: CALL_OW 69
16091: ST_TO_ADDR
// if not tmp then
16092: LD_VAR 0 2
16096: NOT
16097: IFFALSE 16101
// exit ;
16099: GO 16130
// for i in tmp do
16101: LD_ADDR_VAR 0 1
16105: PUSH
16106: LD_VAR 0 2
16110: PUSH
16111: FOR_IN
16112: IFFALSE 16128
// SetBLevel ( i , 10 ) ;
16114: LD_VAR 0 1
16118: PPUSH
16119: LD_INT 10
16121: PPUSH
16122: CALL_OW 241
16126: GO 16111
16128: POP
16129: POP
// end ;
16130: PPOPN 2
16132: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16133: LD_EXP 53
16137: PUSH
16138: LD_EXP 70
16142: AND
16143: IFFALSE 16254
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16153: LD_ADDR_VAR 0 3
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 25
16172: PUSH
16173: LD_INT 1
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: ST_TO_ADDR
// if not tmp then
16189: LD_VAR 0 3
16193: NOT
16194: IFFALSE 16198
// exit ;
16196: GO 16254
// un := tmp [ rand ( 1 , tmp ) ] ;
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: LD_INT 1
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: CALL_OW 12
16220: ARRAY
16221: ST_TO_ADDR
// if Crawls ( un ) then
16222: LD_VAR 0 2
16226: PPUSH
16227: CALL_OW 318
16231: IFFALSE 16242
// ComWalk ( un ) ;
16233: LD_VAR 0 2
16237: PPUSH
16238: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16242: LD_VAR 0 2
16246: PPUSH
16247: LD_INT 5
16249: PPUSH
16250: CALL_OW 336
// end ;
16254: PPOPN 3
16256: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16257: LD_EXP 53
16261: PUSH
16262: LD_EXP 71
16266: AND
16267: PUSH
16268: LD_OWVAR 67
16272: PUSH
16273: LD_INT 4
16275: LESS
16276: AND
16277: IFFALSE 16296
16279: GO 16281
16281: DISABLE
// begin Difficulty := Difficulty + 1 ;
16282: LD_ADDR_OWVAR 67
16286: PUSH
16287: LD_OWVAR 67
16291: PUSH
16292: LD_INT 1
16294: PLUS
16295: ST_TO_ADDR
// end ;
16296: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16297: LD_EXP 53
16301: PUSH
16302: LD_EXP 72
16306: AND
16307: IFFALSE 16410
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
// begin for i := 1 to 5 do
16315: LD_ADDR_VAR 0 1
16319: PUSH
16320: DOUBLE
16321: LD_INT 1
16323: DEC
16324: ST_TO_ADDR
16325: LD_INT 5
16327: PUSH
16328: FOR_TO
16329: IFFALSE 16408
// begin uc_nation := nation_nature ;
16331: LD_ADDR_OWVAR 21
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// uc_side := 0 ;
16339: LD_ADDR_OWVAR 20
16343: PUSH
16344: LD_INT 0
16346: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16347: LD_ADDR_OWVAR 29
16351: PUSH
16352: LD_INT 12
16354: PUSH
16355: LD_INT 12
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: ST_TO_ADDR
// hc_agressivity := 20 ;
16362: LD_ADDR_OWVAR 35
16366: PUSH
16367: LD_INT 20
16369: ST_TO_ADDR
// hc_class := class_tiger ;
16370: LD_ADDR_OWVAR 28
16374: PUSH
16375: LD_INT 14
16377: ST_TO_ADDR
// hc_gallery :=  ;
16378: LD_ADDR_OWVAR 33
16382: PUSH
16383: LD_STRING 
16385: ST_TO_ADDR
// hc_name :=  ;
16386: LD_ADDR_OWVAR 26
16390: PUSH
16391: LD_STRING 
16393: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16394: CALL_OW 44
16398: PPUSH
16399: LD_INT 0
16401: PPUSH
16402: CALL_OW 51
// end ;
16406: GO 16328
16408: POP
16409: POP
// end ;
16410: PPOPN 1
16412: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16413: LD_EXP 53
16417: PUSH
16418: LD_EXP 73
16422: AND
16423: IFFALSE 16432
16425: GO 16427
16427: DISABLE
// StreamSibBomb ;
16428: CALL 16433 0 0
16432: END
// export function StreamSibBomb ; var i , x , y ; begin
16433: LD_INT 0
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
// result := false ;
16439: LD_ADDR_VAR 0 1
16443: PUSH
16444: LD_INT 0
16446: ST_TO_ADDR
// for i := 1 to 16 do
16447: LD_ADDR_VAR 0 2
16451: PUSH
16452: DOUBLE
16453: LD_INT 1
16455: DEC
16456: ST_TO_ADDR
16457: LD_INT 16
16459: PUSH
16460: FOR_TO
16461: IFFALSE 16660
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16463: LD_ADDR_VAR 0 3
16467: PUSH
16468: LD_INT 10
16470: PUSH
16471: LD_INT 20
16473: PUSH
16474: LD_INT 30
16476: PUSH
16477: LD_INT 40
16479: PUSH
16480: LD_INT 50
16482: PUSH
16483: LD_INT 60
16485: PUSH
16486: LD_INT 70
16488: PUSH
16489: LD_INT 80
16491: PUSH
16492: LD_INT 90
16494: PUSH
16495: LD_INT 100
16497: PUSH
16498: LD_INT 110
16500: PUSH
16501: LD_INT 120
16503: PUSH
16504: LD_INT 130
16506: PUSH
16507: LD_INT 140
16509: PUSH
16510: LD_INT 150
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PPUSH
16533: LD_INT 15
16535: PPUSH
16536: CALL_OW 12
16540: ARRAY
16541: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16542: LD_ADDR_VAR 0 4
16546: PUSH
16547: LD_INT 10
16549: PUSH
16550: LD_INT 20
16552: PUSH
16553: LD_INT 30
16555: PUSH
16556: LD_INT 40
16558: PUSH
16559: LD_INT 50
16561: PUSH
16562: LD_INT 60
16564: PUSH
16565: LD_INT 70
16567: PUSH
16568: LD_INT 80
16570: PUSH
16571: LD_INT 90
16573: PUSH
16574: LD_INT 100
16576: PUSH
16577: LD_INT 110
16579: PUSH
16580: LD_INT 120
16582: PUSH
16583: LD_INT 130
16585: PUSH
16586: LD_INT 140
16588: PUSH
16589: LD_INT 150
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 1
16611: PPUSH
16612: LD_INT 15
16614: PPUSH
16615: CALL_OW 12
16619: ARRAY
16620: ST_TO_ADDR
// if ValidHex ( x , y ) then
16621: LD_VAR 0 3
16625: PPUSH
16626: LD_VAR 0 4
16630: PPUSH
16631: CALL_OW 488
16635: IFFALSE 16658
// begin result := [ x , y ] ;
16637: LD_ADDR_VAR 0 1
16641: PUSH
16642: LD_VAR 0 3
16646: PUSH
16647: LD_VAR 0 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: ST_TO_ADDR
// break ;
16656: GO 16660
// end ; end ;
16658: GO 16460
16660: POP
16661: POP
// if result then
16662: LD_VAR 0 1
16666: IFFALSE 16726
// begin ToLua ( playSibBomb() ) ;
16668: LD_STRING playSibBomb()
16670: PPUSH
16671: CALL_OW 559
// wait ( 0 0$14 ) ;
16675: LD_INT 490
16677: PPUSH
16678: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16682: LD_VAR 0 1
16686: PUSH
16687: LD_INT 1
16689: ARRAY
16690: PPUSH
16691: LD_VAR 0 1
16695: PUSH
16696: LD_INT 2
16698: ARRAY
16699: PPUSH
16700: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16704: LD_VAR 0 1
16708: PUSH
16709: LD_INT 1
16711: ARRAY
16712: PPUSH
16713: LD_VAR 0 1
16717: PUSH
16718: LD_INT 2
16720: ARRAY
16721: PPUSH
16722: CALL_OW 429
// end ; end ;
16726: LD_VAR 0 1
16730: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16731: LD_EXP 53
16735: PUSH
16736: LD_EXP 75
16740: AND
16741: IFFALSE 16753
16743: GO 16745
16745: DISABLE
// YouLost (  ) ;
16746: LD_STRING 
16748: PPUSH
16749: CALL_OW 104
16753: END
// every 0 0$1 trigger StreamModeActive and sFog do
16754: LD_EXP 53
16758: PUSH
16759: LD_EXP 74
16763: AND
16764: IFFALSE 16778
16766: GO 16768
16768: DISABLE
// FogOff ( your_side ) ;
16769: LD_OWVAR 2
16773: PPUSH
16774: CALL_OW 344
16778: END
// every 0 0$1 trigger StreamModeActive and sSun do
16779: LD_EXP 53
16783: PUSH
16784: LD_EXP 76
16788: AND
16789: IFFALSE 16817
16791: GO 16793
16793: DISABLE
// begin solar_recharge_percent := 0 ;
16794: LD_ADDR_OWVAR 79
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16802: LD_INT 10500
16804: PPUSH
16805: CALL_OW 67
// solar_recharge_percent := 100 ;
16809: LD_ADDR_OWVAR 79
16813: PUSH
16814: LD_INT 100
16816: ST_TO_ADDR
// end ;
16817: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16818: LD_EXP 53
16822: PUSH
16823: LD_EXP 77
16827: AND
16828: IFFALSE 17067
16830: GO 16832
16832: DISABLE
16833: LD_INT 0
16835: PPUSH
16836: PPUSH
16837: PPUSH
// begin tmp := [ ] ;
16838: LD_ADDR_VAR 0 3
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// for i := 1 to 6 do
16845: LD_ADDR_VAR 0 1
16849: PUSH
16850: DOUBLE
16851: LD_INT 1
16853: DEC
16854: ST_TO_ADDR
16855: LD_INT 6
16857: PUSH
16858: FOR_TO
16859: IFFALSE 16964
// begin uc_nation := nation_nature ;
16861: LD_ADDR_OWVAR 21
16865: PUSH
16866: LD_INT 0
16868: ST_TO_ADDR
// uc_side := 0 ;
16869: LD_ADDR_OWVAR 20
16873: PUSH
16874: LD_INT 0
16876: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16877: LD_ADDR_OWVAR 29
16881: PUSH
16882: LD_INT 12
16884: PUSH
16885: LD_INT 12
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: ST_TO_ADDR
// hc_agressivity := 20 ;
16892: LD_ADDR_OWVAR 35
16896: PUSH
16897: LD_INT 20
16899: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16900: LD_ADDR_OWVAR 28
16904: PUSH
16905: LD_INT 17
16907: ST_TO_ADDR
// hc_gallery :=  ;
16908: LD_ADDR_OWVAR 33
16912: PUSH
16913: LD_STRING 
16915: ST_TO_ADDR
// hc_name :=  ;
16916: LD_ADDR_OWVAR 26
16920: PUSH
16921: LD_STRING 
16923: ST_TO_ADDR
// un := CreateHuman ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: CALL_OW 44
16933: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16934: LD_VAR 0 2
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: CALL_OW 51
// tmp := tmp ^ un ;
16946: LD_ADDR_VAR 0 3
16950: PUSH
16951: LD_VAR 0 3
16955: PUSH
16956: LD_VAR 0 2
16960: ADD
16961: ST_TO_ADDR
// end ;
16962: GO 16858
16964: POP
16965: POP
// repeat wait ( 0 0$1 ) ;
16966: LD_INT 35
16968: PPUSH
16969: CALL_OW 67
// for un in tmp do
16973: LD_ADDR_VAR 0 2
16977: PUSH
16978: LD_VAR 0 3
16982: PUSH
16983: FOR_IN
16984: IFFALSE 17058
// begin if IsDead ( un ) then
16986: LD_VAR 0 2
16990: PPUSH
16991: CALL_OW 301
16995: IFFALSE 17015
// begin tmp := tmp diff un ;
16997: LD_ADDR_VAR 0 3
17001: PUSH
17002: LD_VAR 0 3
17006: PUSH
17007: LD_VAR 0 2
17011: DIFF
17012: ST_TO_ADDR
// continue ;
17013: GO 16983
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17015: LD_VAR 0 2
17019: PPUSH
17020: LD_INT 3
17022: PUSH
17023: LD_INT 22
17025: PUSH
17026: LD_INT 0
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PPUSH
17037: CALL_OW 69
17041: PPUSH
17042: LD_VAR 0 2
17046: PPUSH
17047: CALL_OW 74
17051: PPUSH
17052: CALL_OW 115
// end ;
17056: GO 16983
17058: POP
17059: POP
// until not tmp ;
17060: LD_VAR 0 3
17064: NOT
17065: IFFALSE 16966
// end ;
17067: PPOPN 3
17069: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17070: LD_EXP 53
17074: PUSH
17075: LD_EXP 78
17079: AND
17080: IFFALSE 17134
17082: GO 17084
17084: DISABLE
// begin ToLua ( displayTroll(); ) ;
17085: LD_STRING displayTroll();
17087: PPUSH
17088: CALL_OW 559
// wait ( 3 3$00 ) ;
17092: LD_INT 6300
17094: PPUSH
17095: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17099: LD_STRING hideTroll();
17101: PPUSH
17102: CALL_OW 559
// wait ( 1 1$00 ) ;
17106: LD_INT 2100
17108: PPUSH
17109: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17113: LD_STRING displayTroll();
17115: PPUSH
17116: CALL_OW 559
// wait ( 1 1$00 ) ;
17120: LD_INT 2100
17122: PPUSH
17123: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17127: LD_STRING hideTroll();
17129: PPUSH
17130: CALL_OW 559
// end ;
17134: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17135: LD_EXP 53
17139: PUSH
17140: LD_EXP 79
17144: AND
17145: IFFALSE 17208
17147: GO 17149
17149: DISABLE
17150: LD_INT 0
17152: PPUSH
// begin p := 0 ;
17153: LD_ADDR_VAR 0 1
17157: PUSH
17158: LD_INT 0
17160: ST_TO_ADDR
// repeat game_speed := 1 ;
17161: LD_ADDR_OWVAR 65
17165: PUSH
17166: LD_INT 1
17168: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17169: LD_INT 35
17171: PPUSH
17172: CALL_OW 67
// p := p + 1 ;
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: LD_VAR 0 1
17185: PUSH
17186: LD_INT 1
17188: PLUS
17189: ST_TO_ADDR
// until p >= 60 ;
17190: LD_VAR 0 1
17194: PUSH
17195: LD_INT 60
17197: GREATEREQUAL
17198: IFFALSE 17161
// game_speed := 4 ;
17200: LD_ADDR_OWVAR 65
17204: PUSH
17205: LD_INT 4
17207: ST_TO_ADDR
// end ;
17208: PPOPN 1
17210: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17211: LD_EXP 53
17215: PUSH
17216: LD_EXP 80
17220: AND
17221: IFFALSE 17367
17223: GO 17225
17225: DISABLE
17226: LD_INT 0
17228: PPUSH
17229: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17230: LD_ADDR_VAR 0 1
17234: PUSH
17235: LD_INT 22
17237: PUSH
17238: LD_OWVAR 2
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 30
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 69
17283: ST_TO_ADDR
// if not depot then
17284: LD_VAR 0 1
17288: NOT
17289: IFFALSE 17293
// exit ;
17291: GO 17367
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17293: LD_ADDR_VAR 0 2
17297: PUSH
17298: LD_VAR 0 1
17302: PUSH
17303: LD_INT 1
17305: PPUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 12
17315: ARRAY
17316: PPUSH
17317: CALL_OW 274
17321: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17322: LD_VAR 0 2
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: LD_INT 0
17332: PPUSH
17333: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17337: LD_VAR 0 2
17341: PPUSH
17342: LD_INT 2
17344: PPUSH
17345: LD_INT 0
17347: PPUSH
17348: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17352: LD_VAR 0 2
17356: PPUSH
17357: LD_INT 3
17359: PPUSH
17360: LD_INT 0
17362: PPUSH
17363: CALL_OW 277
// end ;
17367: PPOPN 2
17369: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17370: LD_EXP 53
17374: PUSH
17375: LD_EXP 81
17379: AND
17380: IFFALSE 17477
17382: GO 17384
17384: DISABLE
17385: LD_INT 0
17387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17388: LD_ADDR_VAR 0 1
17392: PUSH
17393: LD_INT 22
17395: PUSH
17396: LD_OWVAR 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 21
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 3
17417: PUSH
17418: LD_INT 23
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 1
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17451: LD_VAR 0 1
17455: PUSH
17456: LD_INT 1
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 12
17468: ARRAY
17469: PPUSH
17470: LD_INT 200
17472: PPUSH
17473: CALL_OW 234
// end ;
17477: PPOPN 1
17479: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17480: LD_EXP 53
17484: PUSH
17485: LD_EXP 82
17489: AND
17490: IFFALSE 17569
17492: GO 17494
17494: DISABLE
17495: LD_INT 0
17497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17498: LD_ADDR_VAR 0 1
17502: PUSH
17503: LD_INT 22
17505: PUSH
17506: LD_OWVAR 2
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 21
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 69
17533: ST_TO_ADDR
// if not tmp then
17534: LD_VAR 0 1
17538: NOT
17539: IFFALSE 17543
// exit ;
17541: GO 17569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 1
17550: PPUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 12
17560: ARRAY
17561: PPUSH
17562: LD_INT 60
17564: PPUSH
17565: CALL_OW 234
// end ;
17569: PPOPN 1
17571: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17572: LD_EXP 53
17576: PUSH
17577: LD_EXP 83
17581: AND
17582: IFFALSE 17681
17584: GO 17586
17586: DISABLE
17587: LD_INT 0
17589: PPUSH
17590: PPUSH
// begin enable ;
17591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17592: LD_ADDR_VAR 0 1
17596: PUSH
17597: LD_INT 22
17599: PUSH
17600: LD_OWVAR 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 61
17611: PUSH
17612: EMPTY
17613: LIST
17614: PUSH
17615: LD_INT 33
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: PPUSH
17630: CALL_OW 69
17634: ST_TO_ADDR
// if not tmp then
17635: LD_VAR 0 1
17639: NOT
17640: IFFALSE 17644
// exit ;
17642: GO 17681
// for i in tmp do
17644: LD_ADDR_VAR 0 2
17648: PUSH
17649: LD_VAR 0 1
17653: PUSH
17654: FOR_IN
17655: IFFALSE 17679
// if IsControledBy ( i ) then
17657: LD_VAR 0 2
17661: PPUSH
17662: CALL_OW 312
17666: IFFALSE 17677
// ComUnlink ( i ) ;
17668: LD_VAR 0 2
17672: PPUSH
17673: CALL_OW 136
17677: GO 17654
17679: POP
17680: POP
// end ;
17681: PPOPN 2
17683: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17684: LD_EXP 53
17688: PUSH
17689: LD_EXP 84
17693: AND
17694: IFFALSE 17834
17696: GO 17698
17698: DISABLE
17699: LD_INT 0
17701: PPUSH
17702: PPUSH
// begin ToLua ( displayPowell(); ) ;
17703: LD_STRING displayPowell();
17705: PPUSH
17706: CALL_OW 559
// uc_side := 0 ;
17710: LD_ADDR_OWVAR 20
17714: PUSH
17715: LD_INT 0
17717: ST_TO_ADDR
// uc_nation := 2 ;
17718: LD_ADDR_OWVAR 21
17722: PUSH
17723: LD_INT 2
17725: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17726: LD_ADDR_OWVAR 37
17730: PUSH
17731: LD_INT 14
17733: ST_TO_ADDR
// vc_engine := engine_siberite ;
17734: LD_ADDR_OWVAR 39
17738: PUSH
17739: LD_INT 3
17741: ST_TO_ADDR
// vc_control := control_apeman ;
17742: LD_ADDR_OWVAR 38
17746: PUSH
17747: LD_INT 5
17749: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17750: LD_ADDR_OWVAR 40
17754: PUSH
17755: LD_INT 29
17757: ST_TO_ADDR
// un := CreateVehicle ;
17758: LD_ADDR_VAR 0 2
17762: PUSH
17763: CALL_OW 45
17767: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17768: LD_VAR 0 2
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17780: LD_INT 35
17782: PPUSH
17783: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17787: LD_VAR 0 2
17791: PPUSH
17792: LD_INT 22
17794: PUSH
17795: LD_OWVAR 2
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PPUSH
17804: CALL_OW 69
17808: PPUSH
17809: LD_VAR 0 2
17813: PPUSH
17814: CALL_OW 74
17818: PPUSH
17819: CALL_OW 115
// until IsDead ( un ) ;
17823: LD_VAR 0 2
17827: PPUSH
17828: CALL_OW 301
17832: IFFALSE 17780
// end ;
17834: PPOPN 2
17836: END
// every 0 0$1 trigger StreamModeActive and sStu do
17837: LD_EXP 53
17841: PUSH
17842: LD_EXP 92
17846: AND
17847: IFFALSE 17863
17849: GO 17851
17851: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17852: LD_STRING displayStucuk();
17854: PPUSH
17855: CALL_OW 559
// ResetFog ;
17859: CALL_OW 335
// end ;
17863: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17864: LD_EXP 53
17868: PUSH
17869: LD_EXP 85
17873: AND
17874: IFFALSE 18015
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17883: LD_ADDR_VAR 0 2
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_OWVAR 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 21
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PPUSH
17914: CALL_OW 69
17918: ST_TO_ADDR
// if not tmp then
17919: LD_VAR 0 2
17923: NOT
17924: IFFALSE 17928
// exit ;
17926: GO 18015
// un := tmp [ rand ( 1 , tmp ) ] ;
17928: LD_ADDR_VAR 0 1
17932: PUSH
17933: LD_VAR 0 2
17937: PUSH
17938: LD_INT 1
17940: PPUSH
17941: LD_VAR 0 2
17945: PPUSH
17946: CALL_OW 12
17950: ARRAY
17951: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17952: LD_VAR 0 1
17956: PPUSH
17957: LD_INT 0
17959: PPUSH
17960: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_OWVAR 3
17973: PUSH
17974: LD_VAR 0 1
17978: DIFF
17979: PPUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 74
17989: PPUSH
17990: CALL_OW 115
// wait ( 0 0$20 ) ;
17994: LD_INT 700
17996: PPUSH
17997: CALL_OW 67
// SetSide ( un , your_side ) ;
18001: LD_VAR 0 1
18005: PPUSH
18006: LD_OWVAR 2
18010: PPUSH
18011: CALL_OW 235
// end ;
18015: PPOPN 2
18017: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18018: LD_EXP 53
18022: PUSH
18023: LD_EXP 86
18027: AND
18028: IFFALSE 18134
18030: GO 18032
18032: DISABLE
18033: LD_INT 0
18035: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18036: LD_ADDR_VAR 0 1
18040: PUSH
18041: LD_INT 22
18043: PUSH
18044: LD_OWVAR 2
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: LD_INT 30
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 30
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: ST_TO_ADDR
// if not depot then
18090: LD_VAR 0 1
18094: NOT
18095: IFFALSE 18099
// exit ;
18097: GO 18134
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18099: LD_VAR 0 1
18103: PUSH
18104: LD_INT 1
18106: ARRAY
18107: PPUSH
18108: CALL_OW 250
18112: PPUSH
18113: LD_VAR 0 1
18117: PUSH
18118: LD_INT 1
18120: ARRAY
18121: PPUSH
18122: CALL_OW 251
18126: PPUSH
18127: LD_INT 70
18129: PPUSH
18130: CALL_OW 495
// end ;
18134: PPOPN 1
18136: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18137: LD_EXP 53
18141: PUSH
18142: LD_EXP 87
18146: AND
18147: IFFALSE 18358
18149: GO 18151
18151: DISABLE
18152: LD_INT 0
18154: PPUSH
18155: PPUSH
18156: PPUSH
18157: PPUSH
18158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18159: LD_ADDR_VAR 0 5
18163: PUSH
18164: LD_INT 22
18166: PUSH
18167: LD_OWVAR 2
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 21
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PPUSH
18190: CALL_OW 69
18194: ST_TO_ADDR
// if not tmp then
18195: LD_VAR 0 5
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18358
// for i in tmp do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_VAR 0 5
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18356
// begin d := rand ( 0 , 5 ) ;
18217: LD_ADDR_VAR 0 4
18221: PUSH
18222: LD_INT 0
18224: PPUSH
18225: LD_INT 5
18227: PPUSH
18228: CALL_OW 12
18232: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18233: LD_ADDR_VAR 0 2
18237: PUSH
18238: LD_VAR 0 1
18242: PPUSH
18243: CALL_OW 250
18247: PPUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: LD_INT 3
18255: PPUSH
18256: LD_INT 12
18258: PPUSH
18259: CALL_OW 12
18263: PPUSH
18264: CALL_OW 272
18268: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18269: LD_ADDR_VAR 0 3
18273: PUSH
18274: LD_VAR 0 1
18278: PPUSH
18279: CALL_OW 251
18283: PPUSH
18284: LD_VAR 0 4
18288: PPUSH
18289: LD_INT 3
18291: PPUSH
18292: LD_INT 12
18294: PPUSH
18295: CALL_OW 12
18299: PPUSH
18300: CALL_OW 273
18304: ST_TO_ADDR
// if ValidHex ( x , y ) then
18305: LD_VAR 0 2
18309: PPUSH
18310: LD_VAR 0 3
18314: PPUSH
18315: CALL_OW 488
18319: IFFALSE 18354
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18321: LD_VAR 0 1
18325: PPUSH
18326: LD_VAR 0 2
18330: PPUSH
18331: LD_VAR 0 3
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 6
18341: PPUSH
18342: CALL_OW 12
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 483
// end ;
18354: GO 18214
18356: POP
18357: POP
// end ;
18358: PPOPN 5
18360: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18361: LD_EXP 53
18365: PUSH
18366: LD_EXP 88
18370: AND
18371: IFFALSE 18465
18373: GO 18375
18375: DISABLE
18376: LD_INT 0
18378: PPUSH
18379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_OWVAR 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 32
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 21
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: PPUSH
18422: CALL_OW 69
18426: ST_TO_ADDR
// if not tmp then
18427: LD_VAR 0 2
18431: NOT
18432: IFFALSE 18436
// exit ;
18434: GO 18465
// for i in tmp do
18436: LD_ADDR_VAR 0 1
18440: PUSH
18441: LD_VAR 0 2
18445: PUSH
18446: FOR_IN
18447: IFFALSE 18463
// SetFuel ( i , 0 ) ;
18449: LD_VAR 0 1
18453: PPUSH
18454: LD_INT 0
18456: PPUSH
18457: CALL_OW 240
18461: GO 18446
18463: POP
18464: POP
// end ;
18465: PPOPN 2
18467: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18468: LD_EXP 53
18472: PUSH
18473: LD_EXP 89
18477: AND
18478: IFFALSE 18544
18480: GO 18482
18482: DISABLE
18483: LD_INT 0
18485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 30
18505: PUSH
18506: LD_INT 29
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: ST_TO_ADDR
// if not tmp then
18522: LD_VAR 0 1
18526: NOT
18527: IFFALSE 18531
// exit ;
18529: GO 18544
// DestroyUnit ( tmp [ 1 ] ) ;
18531: LD_VAR 0 1
18535: PUSH
18536: LD_INT 1
18538: ARRAY
18539: PPUSH
18540: CALL_OW 65
// end ;
18544: PPOPN 1
18546: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18547: LD_EXP 53
18551: PUSH
18552: LD_EXP 91
18556: AND
18557: IFFALSE 18686
18559: GO 18561
18561: DISABLE
18562: LD_INT 0
18564: PPUSH
// begin uc_side := 0 ;
18565: LD_ADDR_OWVAR 20
18569: PUSH
18570: LD_INT 0
18572: ST_TO_ADDR
// uc_nation := nation_arabian ;
18573: LD_ADDR_OWVAR 21
18577: PUSH
18578: LD_INT 2
18580: ST_TO_ADDR
// hc_gallery :=  ;
18581: LD_ADDR_OWVAR 33
18585: PUSH
18586: LD_STRING 
18588: ST_TO_ADDR
// hc_name :=  ;
18589: LD_ADDR_OWVAR 26
18593: PUSH
18594: LD_STRING 
18596: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18597: LD_INT 1
18599: PPUSH
18600: LD_INT 11
18602: PPUSH
18603: LD_INT 10
18605: PPUSH
18606: CALL_OW 380
// un := CreateHuman ;
18610: LD_ADDR_VAR 0 1
18614: PUSH
18615: CALL_OW 44
18619: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18620: LD_VAR 0 1
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18632: LD_INT 35
18634: PPUSH
18635: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_INT 22
18646: PUSH
18647: LD_OWVAR 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 69
18660: PPUSH
18661: LD_VAR 0 1
18665: PPUSH
18666: CALL_OW 74
18670: PPUSH
18671: CALL_OW 115
// until IsDead ( un ) ;
18675: LD_VAR 0 1
18679: PPUSH
18680: CALL_OW 301
18684: IFFALSE 18632
// end ;
18686: PPOPN 1
18688: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18689: LD_EXP 53
18693: PUSH
18694: LD_EXP 93
18698: AND
18699: IFFALSE 18711
18701: GO 18703
18703: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18704: LD_STRING earthquake(getX(game), 0, 32)
18706: PPUSH
18707: CALL_OW 559
18711: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18712: LD_EXP 53
18716: PUSH
18717: LD_EXP 94
18721: AND
18722: IFFALSE 18813
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
// begin enable ;
18730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18731: LD_ADDR_VAR 0 1
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_OWVAR 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 33
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: ST_TO_ADDR
// if not tmp then
18778: LD_VAR 0 1
18782: NOT
18783: IFFALSE 18787
// exit ;
18785: GO 18813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18787: LD_VAR 0 1
18791: PUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 12
18804: ARRAY
18805: PPUSH
18806: LD_INT 1
18808: PPUSH
18809: CALL_OW 234
// end ;
18813: PPOPN 1
18815: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18816: LD_EXP 53
18820: PUSH
18821: LD_EXP 95
18825: AND
18826: IFFALSE 18967
18828: GO 18830
18830: DISABLE
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
18835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18836: LD_ADDR_VAR 0 3
18840: PUSH
18841: LD_INT 22
18843: PUSH
18844: LD_OWVAR 2
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 25
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PPUSH
18867: CALL_OW 69
18871: ST_TO_ADDR
// if not tmp then
18872: LD_VAR 0 3
18876: NOT
18877: IFFALSE 18881
// exit ;
18879: GO 18967
// un := tmp [ rand ( 1 , tmp ) ] ;
18881: LD_ADDR_VAR 0 2
18885: PUSH
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_VAR 0 3
18898: PPUSH
18899: CALL_OW 12
18903: ARRAY
18904: ST_TO_ADDR
// if Crawls ( un ) then
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL_OW 318
18914: IFFALSE 18925
// ComWalk ( un ) ;
18916: LD_VAR 0 2
18920: PPUSH
18921: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18925: LD_VAR 0 2
18929: PPUSH
18930: LD_INT 9
18932: PPUSH
18933: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18937: LD_INT 28
18939: PPUSH
18940: LD_OWVAR 2
18944: PPUSH
18945: LD_INT 2
18947: PPUSH
18948: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18952: LD_INT 29
18954: PPUSH
18955: LD_OWVAR 2
18959: PPUSH
18960: LD_INT 2
18962: PPUSH
18963: CALL_OW 322
// end ;
18967: PPOPN 3
18969: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18970: LD_EXP 53
18974: PUSH
18975: LD_EXP 96
18979: AND
18980: IFFALSE 19091
18982: GO 18984
18984: DISABLE
18985: LD_INT 0
18987: PPUSH
18988: PPUSH
18989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_INT 22
18997: PUSH
18998: LD_OWVAR 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PPUSH
19021: CALL_OW 69
19025: ST_TO_ADDR
// if not tmp then
19026: LD_VAR 0 3
19030: NOT
19031: IFFALSE 19035
// exit ;
19033: GO 19091
// un := tmp [ rand ( 1 , tmp ) ] ;
19035: LD_ADDR_VAR 0 2
19039: PUSH
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 1
19047: PPUSH
19048: LD_VAR 0 3
19052: PPUSH
19053: CALL_OW 12
19057: ARRAY
19058: ST_TO_ADDR
// if Crawls ( un ) then
19059: LD_VAR 0 2
19063: PPUSH
19064: CALL_OW 318
19068: IFFALSE 19079
// ComWalk ( un ) ;
19070: LD_VAR 0 2
19074: PPUSH
19075: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19079: LD_VAR 0 2
19083: PPUSH
19084: LD_INT 8
19086: PPUSH
19087: CALL_OW 336
// end ;
19091: PPOPN 3
19093: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19094: LD_EXP 53
19098: PUSH
19099: LD_EXP 97
19103: AND
19104: IFFALSE 19248
19106: GO 19108
19108: DISABLE
19109: LD_INT 0
19111: PPUSH
19112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_OWVAR 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 21
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: LD_INT 34
19145: PUSH
19146: LD_INT 12
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 34
19155: PUSH
19156: LD_INT 51
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 34
19165: PUSH
19166: LD_INT 32
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 69
19188: ST_TO_ADDR
// if not tmp then
19189: LD_VAR 0 2
19193: NOT
19194: IFFALSE 19198
// exit ;
19196: GO 19248
// for i in tmp do
19198: LD_ADDR_VAR 0 1
19202: PUSH
19203: LD_VAR 0 2
19207: PUSH
19208: FOR_IN
19209: IFFALSE 19246
// if GetCargo ( i , mat_artifact ) = 0 then
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 4
19218: PPUSH
19219: CALL_OW 289
19223: PUSH
19224: LD_INT 0
19226: EQUAL
19227: IFFALSE 19244
// SetCargo ( i , mat_siberit , 100 ) ;
19229: LD_VAR 0 1
19233: PPUSH
19234: LD_INT 3
19236: PPUSH
19237: LD_INT 100
19239: PPUSH
19240: CALL_OW 290
19244: GO 19208
19246: POP
19247: POP
// end ;
19248: PPOPN 2
19250: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19251: LD_EXP 53
19255: PUSH
19256: LD_EXP 98
19260: AND
19261: IFFALSE 19444
19263: GO 19265
19265: DISABLE
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: LD_INT 22
19277: PUSH
19278: LD_OWVAR 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PPUSH
19287: CALL_OW 69
19291: ST_TO_ADDR
// if not tmp then
19292: LD_VAR 0 2
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19444
// for i := 1 to 2 do
19301: LD_ADDR_VAR 0 1
19305: PUSH
19306: DOUBLE
19307: LD_INT 1
19309: DEC
19310: ST_TO_ADDR
19311: LD_INT 2
19313: PUSH
19314: FOR_TO
19315: IFFALSE 19442
// begin uc_side := your_side ;
19317: LD_ADDR_OWVAR 20
19321: PUSH
19322: LD_OWVAR 2
19326: ST_TO_ADDR
// uc_nation := nation_american ;
19327: LD_ADDR_OWVAR 21
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// vc_chassis := us_morphling ;
19335: LD_ADDR_OWVAR 37
19339: PUSH
19340: LD_INT 5
19342: ST_TO_ADDR
// vc_engine := engine_siberite ;
19343: LD_ADDR_OWVAR 39
19347: PUSH
19348: LD_INT 3
19350: ST_TO_ADDR
// vc_control := control_computer ;
19351: LD_ADDR_OWVAR 38
19355: PUSH
19356: LD_INT 3
19358: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19359: LD_ADDR_OWVAR 40
19363: PUSH
19364: LD_INT 10
19366: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19367: LD_VAR 0 2
19371: PUSH
19372: LD_INT 1
19374: ARRAY
19375: PPUSH
19376: CALL_OW 310
19380: NOT
19381: IFFALSE 19428
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19383: CALL_OW 45
19387: PPUSH
19388: LD_VAR 0 2
19392: PUSH
19393: LD_INT 1
19395: ARRAY
19396: PPUSH
19397: CALL_OW 250
19401: PPUSH
19402: LD_VAR 0 2
19406: PUSH
19407: LD_INT 1
19409: ARRAY
19410: PPUSH
19411: CALL_OW 251
19415: PPUSH
19416: LD_INT 12
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: CALL_OW 50
19426: GO 19440
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19428: CALL_OW 45
19432: PPUSH
19433: LD_INT 1
19435: PPUSH
19436: CALL_OW 51
// end ;
19440: GO 19314
19442: POP
19443: POP
// end ;
19444: PPOPN 2
19446: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19447: LD_EXP 53
19451: PUSH
19452: LD_EXP 99
19456: AND
19457: IFFALSE 19679
19459: GO 19461
19461: DISABLE
19462: LD_INT 0
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
19468: PPUSH
19469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19470: LD_ADDR_VAR 0 6
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_OWVAR 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 21
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: LD_INT 23
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: ST_TO_ADDR
// if not tmp then
19524: LD_VAR 0 6
19528: NOT
19529: IFFALSE 19533
// exit ;
19531: GO 19679
// s1 := rand ( 1 , 4 ) ;
19533: LD_ADDR_VAR 0 2
19537: PUSH
19538: LD_INT 1
19540: PPUSH
19541: LD_INT 4
19543: PPUSH
19544: CALL_OW 12
19548: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19549: LD_ADDR_VAR 0 4
19553: PUSH
19554: LD_VAR 0 6
19558: PUSH
19559: LD_INT 1
19561: ARRAY
19562: PPUSH
19563: LD_VAR 0 2
19567: PPUSH
19568: CALL_OW 259
19572: ST_TO_ADDR
// if s1 = 1 then
19573: LD_VAR 0 2
19577: PUSH
19578: LD_INT 1
19580: EQUAL
19581: IFFALSE 19601
// s2 := rand ( 2 , 4 ) else
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: LD_INT 2
19590: PPUSH
19591: LD_INT 4
19593: PPUSH
19594: CALL_OW 12
19598: ST_TO_ADDR
19599: GO 19609
// s2 := 1 ;
19601: LD_ADDR_VAR 0 3
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19609: LD_ADDR_VAR 0 5
19613: PUSH
19614: LD_VAR 0 6
19618: PUSH
19619: LD_INT 1
19621: ARRAY
19622: PPUSH
19623: LD_VAR 0 3
19627: PPUSH
19628: CALL_OW 259
19632: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19633: LD_VAR 0 6
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: PPUSH
19642: LD_VAR 0 2
19646: PPUSH
19647: LD_VAR 0 5
19651: PPUSH
19652: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19656: LD_VAR 0 6
19660: PUSH
19661: LD_INT 1
19663: ARRAY
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_VAR 0 4
19674: PPUSH
19675: CALL_OW 237
// end ;
19679: PPOPN 6
19681: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19682: LD_EXP 53
19686: PUSH
19687: LD_EXP 100
19691: AND
19692: IFFALSE 19771
19694: GO 19696
19696: DISABLE
19697: LD_INT 0
19699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19700: LD_ADDR_VAR 0 1
19704: PUSH
19705: LD_INT 22
19707: PUSH
19708: LD_OWVAR 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 30
19719: PUSH
19720: LD_INT 3
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: ST_TO_ADDR
// if not tmp then
19736: LD_VAR 0 1
19740: NOT
19741: IFFALSE 19745
// exit ;
19743: GO 19771
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19745: LD_VAR 0 1
19749: PUSH
19750: LD_INT 1
19752: PPUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 12
19762: ARRAY
19763: PPUSH
19764: LD_INT 1
19766: PPUSH
19767: CALL_OW 234
// end ;
19771: PPOPN 1
19773: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19774: LD_EXP 53
19778: PUSH
19779: LD_EXP 101
19783: AND
19784: IFFALSE 19896
19786: GO 19788
19788: DISABLE
19789: LD_INT 0
19791: PPUSH
19792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19793: LD_ADDR_VAR 0 2
19797: PUSH
19798: LD_INT 22
19800: PUSH
19801: LD_OWVAR 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 2
19812: PUSH
19813: LD_INT 30
19815: PUSH
19816: LD_INT 27
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 30
19825: PUSH
19826: LD_INT 26
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 30
19835: PUSH
19836: LD_INT 28
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: ST_TO_ADDR
// if not tmp then
19858: LD_VAR 0 2
19862: NOT
19863: IFFALSE 19867
// exit ;
19865: GO 19896
// for i in tmp do
19867: LD_ADDR_VAR 0 1
19871: PUSH
19872: LD_VAR 0 2
19876: PUSH
19877: FOR_IN
19878: IFFALSE 19894
// SetLives ( i , 1 ) ;
19880: LD_VAR 0 1
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 234
19892: GO 19877
19894: POP
19895: POP
// end ;
19896: PPOPN 2
19898: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19899: LD_EXP 53
19903: PUSH
19904: LD_EXP 102
19908: AND
19909: IFFALSE 20196
19911: GO 19913
19913: DISABLE
19914: LD_INT 0
19916: PPUSH
19917: PPUSH
19918: PPUSH
// begin i := rand ( 1 , 7 ) ;
19919: LD_ADDR_VAR 0 1
19923: PUSH
19924: LD_INT 1
19926: PPUSH
19927: LD_INT 7
19929: PPUSH
19930: CALL_OW 12
19934: ST_TO_ADDR
// case i of 1 :
19935: LD_VAR 0 1
19939: PUSH
19940: LD_INT 1
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 19958
19948: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19949: LD_STRING earthquake(getX(game), 0, 32)
19951: PPUSH
19952: CALL_OW 559
19956: GO 20196
19958: LD_INT 2
19960: DOUBLE
19961: EQUAL
19962: IFTRUE 19966
19964: GO 19980
19966: POP
// begin ToLua ( displayStucuk(); ) ;
19967: LD_STRING displayStucuk();
19969: PPUSH
19970: CALL_OW 559
// ResetFog ;
19974: CALL_OW 335
// end ; 3 :
19978: GO 20196
19980: LD_INT 3
19982: DOUBLE
19983: EQUAL
19984: IFTRUE 19988
19986: GO 20092
19988: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19989: LD_ADDR_VAR 0 2
19993: PUSH
19994: LD_INT 22
19996: PUSH
19997: LD_OWVAR 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 25
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PPUSH
20020: CALL_OW 69
20024: ST_TO_ADDR
// if not tmp then
20025: LD_VAR 0 2
20029: NOT
20030: IFFALSE 20034
// exit ;
20032: GO 20196
// un := tmp [ rand ( 1 , tmp ) ] ;
20034: LD_ADDR_VAR 0 3
20038: PUSH
20039: LD_VAR 0 2
20043: PUSH
20044: LD_INT 1
20046: PPUSH
20047: LD_VAR 0 2
20051: PPUSH
20052: CALL_OW 12
20056: ARRAY
20057: ST_TO_ADDR
// if Crawls ( un ) then
20058: LD_VAR 0 3
20062: PPUSH
20063: CALL_OW 318
20067: IFFALSE 20078
// ComWalk ( un ) ;
20069: LD_VAR 0 3
20073: PPUSH
20074: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20078: LD_VAR 0 3
20082: PPUSH
20083: LD_INT 8
20085: PPUSH
20086: CALL_OW 336
// end ; 4 :
20090: GO 20196
20092: LD_INT 4
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20174
20100: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20101: LD_ADDR_VAR 0 2
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_OWVAR 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 30
20120: PUSH
20121: LD_INT 29
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PPUSH
20132: CALL_OW 69
20136: ST_TO_ADDR
// if not tmp then
20137: LD_VAR 0 2
20141: NOT
20142: IFFALSE 20146
// exit ;
20144: GO 20196
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20146: LD_VAR 0 2
20150: PUSH
20151: LD_INT 1
20153: ARRAY
20154: PPUSH
20155: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20159: LD_VAR 0 2
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PPUSH
20168: CALL_OW 65
// end ; 5 .. 7 :
20172: GO 20196
20174: LD_INT 5
20176: DOUBLE
20177: GREATEREQUAL
20178: IFFALSE 20186
20180: LD_INT 7
20182: DOUBLE
20183: LESSEQUAL
20184: IFTRUE 20188
20186: GO 20195
20188: POP
// StreamSibBomb ; end ;
20189: CALL 16433 0 0
20193: GO 20196
20195: POP
// end ;
20196: PPOPN 3
20198: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20199: LD_EXP 53
20203: PUSH
20204: LD_EXP 103
20208: AND
20209: IFFALSE 20365
20211: GO 20213
20213: DISABLE
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: LD_INT 81
20226: PUSH
20227: LD_OWVAR 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: LD_INT 21
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 21
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PPUSH
20268: CALL_OW 69
20272: ST_TO_ADDR
// if not tmp then
20273: LD_VAR 0 2
20277: NOT
20278: IFFALSE 20282
// exit ;
20280: GO 20365
// p := 0 ;
20282: LD_ADDR_VAR 0 3
20286: PUSH
20287: LD_INT 0
20289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20290: LD_INT 35
20292: PPUSH
20293: CALL_OW 67
// p := p + 1 ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 1
20309: PLUS
20310: ST_TO_ADDR
// for i in tmp do
20311: LD_ADDR_VAR 0 1
20315: PUSH
20316: LD_VAR 0 2
20320: PUSH
20321: FOR_IN
20322: IFFALSE 20353
// if GetLives ( i ) < 1000 then
20324: LD_VAR 0 1
20328: PPUSH
20329: CALL_OW 256
20333: PUSH
20334: LD_INT 1000
20336: LESS
20337: IFFALSE 20351
// SetLives ( i , 1000 ) ;
20339: LD_VAR 0 1
20343: PPUSH
20344: LD_INT 1000
20346: PPUSH
20347: CALL_OW 234
20351: GO 20321
20353: POP
20354: POP
// until p > 20 ;
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 20
20362: GREATER
20363: IFFALSE 20290
// end ;
20365: PPOPN 3
20367: END
// every 0 0$1 trigger StreamModeActive and sTime do
20368: LD_EXP 53
20372: PUSH
20373: LD_EXP 104
20377: AND
20378: IFFALSE 20413
20380: GO 20382
20382: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20383: LD_INT 28
20385: PPUSH
20386: LD_OWVAR 2
20390: PPUSH
20391: LD_INT 2
20393: PPUSH
20394: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20398: LD_INT 30
20400: PPUSH
20401: LD_OWVAR 2
20405: PPUSH
20406: LD_INT 2
20408: PPUSH
20409: CALL_OW 322
// end ;
20413: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20414: LD_EXP 53
20418: PUSH
20419: LD_EXP 105
20423: AND
20424: IFFALSE 20545
20426: GO 20428
20428: DISABLE
20429: LD_INT 0
20431: PPUSH
20432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20433: LD_ADDR_VAR 0 2
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_OWVAR 2
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 21
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 3
20462: PUSH
20463: LD_INT 23
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: PPUSH
20482: CALL_OW 69
20486: ST_TO_ADDR
// if not tmp then
20487: LD_VAR 0 2
20491: NOT
20492: IFFALSE 20496
// exit ;
20494: GO 20545
// for i in tmp do
20496: LD_ADDR_VAR 0 1
20500: PUSH
20501: LD_VAR 0 2
20505: PUSH
20506: FOR_IN
20507: IFFALSE 20543
// begin if Crawls ( i ) then
20509: LD_VAR 0 1
20513: PPUSH
20514: CALL_OW 318
20518: IFFALSE 20529
// ComWalk ( i ) ;
20520: LD_VAR 0 1
20524: PPUSH
20525: CALL_OW 138
// SetClass ( i , 2 ) ;
20529: LD_VAR 0 1
20533: PPUSH
20534: LD_INT 2
20536: PPUSH
20537: CALL_OW 336
// end ;
20541: GO 20506
20543: POP
20544: POP
// end ;
20545: PPOPN 2
20547: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20548: LD_EXP 53
20552: PUSH
20553: LD_EXP 106
20557: AND
20558: IFFALSE 20846
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
20567: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20568: LD_OWVAR 2
20572: PPUSH
20573: LD_INT 9
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_INT 1
20581: PPUSH
20582: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20586: LD_INT 9
20588: PPUSH
20589: LD_OWVAR 2
20593: PPUSH
20594: CALL_OW 343
// uc_side := 9 ;
20598: LD_ADDR_OWVAR 20
20602: PUSH
20603: LD_INT 9
20605: ST_TO_ADDR
// uc_nation := 2 ;
20606: LD_ADDR_OWVAR 21
20610: PUSH
20611: LD_INT 2
20613: ST_TO_ADDR
// hc_name := Dark Warrior ;
20614: LD_ADDR_OWVAR 26
20618: PUSH
20619: LD_STRING Dark Warrior
20621: ST_TO_ADDR
// hc_gallery :=  ;
20622: LD_ADDR_OWVAR 33
20626: PUSH
20627: LD_STRING 
20629: ST_TO_ADDR
// hc_noskilllimit := true ;
20630: LD_ADDR_OWVAR 76
20634: PUSH
20635: LD_INT 1
20637: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20638: LD_ADDR_OWVAR 31
20642: PUSH
20643: LD_INT 30
20645: PUSH
20646: LD_INT 30
20648: PUSH
20649: LD_INT 30
20651: PUSH
20652: LD_INT 30
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: ST_TO_ADDR
// un := CreateHuman ;
20661: LD_ADDR_VAR 0 3
20665: PUSH
20666: CALL_OW 44
20670: ST_TO_ADDR
// hc_noskilllimit := false ;
20671: LD_ADDR_OWVAR 76
20675: PUSH
20676: LD_INT 0
20678: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_INT 1
20686: PPUSH
20687: CALL_OW 51
// ToLua ( playRanger() ) ;
20691: LD_STRING playRanger()
20693: PPUSH
20694: CALL_OW 559
// p := 0 ;
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20706: LD_INT 35
20708: PPUSH
20709: CALL_OW 67
// p := p + 1 ;
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_VAR 0 2
20722: PUSH
20723: LD_INT 1
20725: PLUS
20726: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20727: LD_VAR 0 3
20731: PPUSH
20732: CALL_OW 256
20736: PUSH
20737: LD_INT 1000
20739: LESS
20740: IFFALSE 20754
// SetLives ( un , 1000 ) ;
20742: LD_VAR 0 3
20746: PPUSH
20747: LD_INT 1000
20749: PPUSH
20750: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20754: LD_VAR 0 3
20758: PPUSH
20759: LD_INT 81
20761: PUSH
20762: LD_OWVAR 2
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 91
20773: PUSH
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 30
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PPUSH
20791: CALL_OW 69
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: CALL_OW 74
20805: PPUSH
20806: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20810: LD_VAR 0 2
20814: PUSH
20815: LD_INT 80
20817: GREATER
20818: PUSH
20819: LD_VAR 0 3
20823: PPUSH
20824: CALL_OW 301
20828: OR
20829: IFFALSE 20706
// if un then
20831: LD_VAR 0 3
20835: IFFALSE 20846
// RemoveUnit ( un ) ;
20837: LD_VAR 0 3
20841: PPUSH
20842: CALL_OW 64
// end ;
20846: PPOPN 3
20848: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20849: LD_EXP 107
20853: IFFALSE 20969
20855: GO 20857
20857: DISABLE
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
20862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20863: LD_ADDR_VAR 0 2
20867: PUSH
20868: LD_INT 81
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20899: LD_STRING playComputer()
20901: PPUSH
20902: CALL_OW 559
// if not tmp then
20906: LD_VAR 0 2
20910: NOT
20911: IFFALSE 20915
// exit ;
20913: GO 20969
// for i in tmp do
20915: LD_ADDR_VAR 0 1
20919: PUSH
20920: LD_VAR 0 2
20924: PUSH
20925: FOR_IN
20926: IFFALSE 20967
// for j := 1 to 4 do
20928: LD_ADDR_VAR 0 3
20932: PUSH
20933: DOUBLE
20934: LD_INT 1
20936: DEC
20937: ST_TO_ADDR
20938: LD_INT 4
20940: PUSH
20941: FOR_TO
20942: IFFALSE 20963
// SetSkill ( i , j , 10 ) ;
20944: LD_VAR 0 1
20948: PPUSH
20949: LD_VAR 0 3
20953: PPUSH
20954: LD_INT 10
20956: PPUSH
20957: CALL_OW 237
20961: GO 20941
20963: POP
20964: POP
20965: GO 20925
20967: POP
20968: POP
// end ;
20969: PPOPN 3
20971: END
// every 0 0$1 trigger s30 do var i , tmp ;
20972: LD_EXP 108
20976: IFFALSE 21045
20978: GO 20980
20980: DISABLE
20981: LD_INT 0
20983: PPUSH
20984: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20985: LD_ADDR_VAR 0 2
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_OWVAR 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PPUSH
21002: CALL_OW 69
21006: ST_TO_ADDR
// if not tmp then
21007: LD_VAR 0 2
21011: NOT
21012: IFFALSE 21016
// exit ;
21014: GO 21045
// for i in tmp do
21016: LD_ADDR_VAR 0 1
21020: PUSH
21021: LD_VAR 0 2
21025: PUSH
21026: FOR_IN
21027: IFFALSE 21043
// SetLives ( i , 300 ) ;
21029: LD_VAR 0 1
21033: PPUSH
21034: LD_INT 300
21036: PPUSH
21037: CALL_OW 234
21041: GO 21026
21043: POP
21044: POP
// end ;
21045: PPOPN 2
21047: END
// every 0 0$1 trigger s60 do var i , tmp ;
21048: LD_EXP 109
21052: IFFALSE 21121
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_OWVAR 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PPUSH
21078: CALL_OW 69
21082: ST_TO_ADDR
// if not tmp then
21083: LD_VAR 0 2
21087: NOT
21088: IFFALSE 21092
// exit ;
21090: GO 21121
// for i in tmp do
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: LD_VAR 0 2
21101: PUSH
21102: FOR_IN
21103: IFFALSE 21119
// SetLives ( i , 600 ) ;
21105: LD_VAR 0 1
21109: PPUSH
21110: LD_INT 600
21112: PPUSH
21113: CALL_OW 234
21117: GO 21102
21119: POP
21120: POP
// end ;
21121: PPOPN 2
21123: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21124: LD_INT 0
21126: PPUSH
// case cmd of 301 :
21127: LD_VAR 0 1
21131: PUSH
21132: LD_INT 301
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21172
21140: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21141: LD_VAR 0 6
21145: PPUSH
21146: LD_VAR 0 7
21150: PPUSH
21151: LD_VAR 0 8
21155: PPUSH
21156: LD_VAR 0 4
21160: PPUSH
21161: LD_VAR 0 5
21165: PPUSH
21166: CALL 22373 0 5
21170: GO 21293
21172: LD_INT 302
21174: DOUBLE
21175: EQUAL
21176: IFTRUE 21180
21178: GO 21217
21180: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21181: LD_VAR 0 6
21185: PPUSH
21186: LD_VAR 0 7
21190: PPUSH
21191: LD_VAR 0 8
21195: PPUSH
21196: LD_VAR 0 9
21200: PPUSH
21201: LD_VAR 0 4
21205: PPUSH
21206: LD_VAR 0 5
21210: PPUSH
21211: CALL 22464 0 6
21215: GO 21293
21217: LD_INT 303
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21262
21225: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21226: LD_VAR 0 6
21230: PPUSH
21231: LD_VAR 0 7
21235: PPUSH
21236: LD_VAR 0 8
21240: PPUSH
21241: LD_VAR 0 9
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: LD_VAR 0 5
21255: PPUSH
21256: CALL 21298 0 6
21260: GO 21293
21262: LD_INT 304
21264: DOUBLE
21265: EQUAL
21266: IFTRUE 21270
21268: GO 21292
21270: POP
// hHackTeleport ( unit , x , y ) ; end ;
21271: LD_VAR 0 2
21275: PPUSH
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: CALL 23057 0 3
21290: GO 21293
21292: POP
// end ;
21293: LD_VAR 0 12
21297: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21298: LD_INT 0
21300: PPUSH
21301: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21302: LD_VAR 0 1
21306: PUSH
21307: LD_INT 1
21309: LESS
21310: PUSH
21311: LD_VAR 0 1
21315: PUSH
21316: LD_INT 3
21318: GREATER
21319: OR
21320: PUSH
21321: LD_VAR 0 5
21325: PPUSH
21326: LD_VAR 0 6
21330: PPUSH
21331: CALL_OW 428
21335: OR
21336: IFFALSE 21340
// exit ;
21338: GO 22060
// uc_side := your_side ;
21340: LD_ADDR_OWVAR 20
21344: PUSH
21345: LD_OWVAR 2
21349: ST_TO_ADDR
// uc_nation := nation ;
21350: LD_ADDR_OWVAR 21
21354: PUSH
21355: LD_VAR 0 1
21359: ST_TO_ADDR
// bc_level = 1 ;
21360: LD_ADDR_OWVAR 43
21364: PUSH
21365: LD_INT 1
21367: ST_TO_ADDR
// case btype of 1 :
21368: LD_VAR 0 2
21372: PUSH
21373: LD_INT 1
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21392
21381: POP
// bc_type := b_depot ; 2 :
21382: LD_ADDR_OWVAR 42
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
21390: GO 22004
21392: LD_INT 2
21394: DOUBLE
21395: EQUAL
21396: IFTRUE 21400
21398: GO 21411
21400: POP
// bc_type := b_warehouse ; 3 :
21401: LD_ADDR_OWVAR 42
21405: PUSH
21406: LD_INT 1
21408: ST_TO_ADDR
21409: GO 22004
21411: LD_INT 3
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21430
21419: POP
// bc_type := b_lab ; 4 .. 9 :
21420: LD_ADDR_OWVAR 42
21424: PUSH
21425: LD_INT 6
21427: ST_TO_ADDR
21428: GO 22004
21430: LD_INT 4
21432: DOUBLE
21433: GREATEREQUAL
21434: IFFALSE 21442
21436: LD_INT 9
21438: DOUBLE
21439: LESSEQUAL
21440: IFTRUE 21444
21442: GO 21496
21444: POP
// begin bc_type := b_lab_half ;
21445: LD_ADDR_OWVAR 42
21449: PUSH
21450: LD_INT 7
21452: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21453: LD_ADDR_OWVAR 44
21457: PUSH
21458: LD_INT 10
21460: PUSH
21461: LD_INT 11
21463: PUSH
21464: LD_INT 12
21466: PUSH
21467: LD_INT 15
21469: PUSH
21470: LD_INT 14
21472: PUSH
21473: LD_INT 13
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: LD_VAR 0 2
21488: PUSH
21489: LD_INT 3
21491: MINUS
21492: ARRAY
21493: ST_TO_ADDR
// end ; 10 .. 13 :
21494: GO 22004
21496: LD_INT 10
21498: DOUBLE
21499: GREATEREQUAL
21500: IFFALSE 21508
21502: LD_INT 13
21504: DOUBLE
21505: LESSEQUAL
21506: IFTRUE 21510
21508: GO 21587
21510: POP
// begin bc_type := b_lab_full ;
21511: LD_ADDR_OWVAR 42
21515: PUSH
21516: LD_INT 8
21518: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21519: LD_ADDR_OWVAR 44
21523: PUSH
21524: LD_INT 10
21526: PUSH
21527: LD_INT 12
21529: PUSH
21530: LD_INT 14
21532: PUSH
21533: LD_INT 13
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: LD_VAR 0 2
21546: PUSH
21547: LD_INT 9
21549: MINUS
21550: ARRAY
21551: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21552: LD_ADDR_OWVAR 45
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 12
21565: PUSH
21566: LD_INT 15
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: LD_VAR 0 2
21579: PUSH
21580: LD_INT 9
21582: MINUS
21583: ARRAY
21584: ST_TO_ADDR
// end ; 14 :
21585: GO 22004
21587: LD_INT 14
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21606
21595: POP
// bc_type := b_workshop ; 15 :
21596: LD_ADDR_OWVAR 42
21600: PUSH
21601: LD_INT 2
21603: ST_TO_ADDR
21604: GO 22004
21606: LD_INT 15
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21625
21614: POP
// bc_type := b_factory ; 16 :
21615: LD_ADDR_OWVAR 42
21619: PUSH
21620: LD_INT 3
21622: ST_TO_ADDR
21623: GO 22004
21625: LD_INT 16
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21644
21633: POP
// bc_type := b_ext_gun ; 17 :
21634: LD_ADDR_OWVAR 42
21638: PUSH
21639: LD_INT 17
21641: ST_TO_ADDR
21642: GO 22004
21644: LD_INT 17
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21680
21652: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21653: LD_ADDR_OWVAR 42
21657: PUSH
21658: LD_INT 19
21660: PUSH
21661: LD_INT 23
21663: PUSH
21664: LD_INT 19
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: LD_VAR 0 1
21676: ARRAY
21677: ST_TO_ADDR
21678: GO 22004
21680: LD_INT 18
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21699
21688: POP
// bc_type := b_ext_radar ; 19 :
21689: LD_ADDR_OWVAR 42
21693: PUSH
21694: LD_INT 20
21696: ST_TO_ADDR
21697: GO 22004
21699: LD_INT 19
21701: DOUBLE
21702: EQUAL
21703: IFTRUE 21707
21705: GO 21718
21707: POP
// bc_type := b_ext_radio ; 20 :
21708: LD_ADDR_OWVAR 42
21712: PUSH
21713: LD_INT 22
21715: ST_TO_ADDR
21716: GO 22004
21718: LD_INT 20
21720: DOUBLE
21721: EQUAL
21722: IFTRUE 21726
21724: GO 21737
21726: POP
// bc_type := b_ext_siberium ; 21 :
21727: LD_ADDR_OWVAR 42
21731: PUSH
21732: LD_INT 21
21734: ST_TO_ADDR
21735: GO 22004
21737: LD_INT 21
21739: DOUBLE
21740: EQUAL
21741: IFTRUE 21745
21743: GO 21756
21745: POP
// bc_type := b_ext_computer ; 22 :
21746: LD_ADDR_OWVAR 42
21750: PUSH
21751: LD_INT 24
21753: ST_TO_ADDR
21754: GO 22004
21756: LD_INT 22
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21775
21764: POP
// bc_type := b_ext_track ; 23 :
21765: LD_ADDR_OWVAR 42
21769: PUSH
21770: LD_INT 16
21772: ST_TO_ADDR
21773: GO 22004
21775: LD_INT 23
21777: DOUBLE
21778: EQUAL
21779: IFTRUE 21783
21781: GO 21794
21783: POP
// bc_type := b_ext_laser ; 24 :
21784: LD_ADDR_OWVAR 42
21788: PUSH
21789: LD_INT 25
21791: ST_TO_ADDR
21792: GO 22004
21794: LD_INT 24
21796: DOUBLE
21797: EQUAL
21798: IFTRUE 21802
21800: GO 21813
21802: POP
// bc_type := b_control_tower ; 25 :
21803: LD_ADDR_OWVAR 42
21807: PUSH
21808: LD_INT 36
21810: ST_TO_ADDR
21811: GO 22004
21813: LD_INT 25
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21821
21819: GO 21832
21821: POP
// bc_type := b_breastwork ; 26 :
21822: LD_ADDR_OWVAR 42
21826: PUSH
21827: LD_INT 31
21829: ST_TO_ADDR
21830: GO 22004
21832: LD_INT 26
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 21851
21840: POP
// bc_type := b_bunker ; 27 :
21841: LD_ADDR_OWVAR 42
21845: PUSH
21846: LD_INT 32
21848: ST_TO_ADDR
21849: GO 22004
21851: LD_INT 27
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 21870
21859: POP
// bc_type := b_turret ; 28 :
21860: LD_ADDR_OWVAR 42
21864: PUSH
21865: LD_INT 33
21867: ST_TO_ADDR
21868: GO 22004
21870: LD_INT 28
21872: DOUBLE
21873: EQUAL
21874: IFTRUE 21878
21876: GO 21889
21878: POP
// bc_type := b_armoury ; 29 :
21879: LD_ADDR_OWVAR 42
21883: PUSH
21884: LD_INT 4
21886: ST_TO_ADDR
21887: GO 22004
21889: LD_INT 29
21891: DOUBLE
21892: EQUAL
21893: IFTRUE 21897
21895: GO 21908
21897: POP
// bc_type := b_barracks ; 30 :
21898: LD_ADDR_OWVAR 42
21902: PUSH
21903: LD_INT 5
21905: ST_TO_ADDR
21906: GO 22004
21908: LD_INT 30
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 21927
21916: POP
// bc_type := b_solar_power ; 31 :
21917: LD_ADDR_OWVAR 42
21921: PUSH
21922: LD_INT 27
21924: ST_TO_ADDR
21925: GO 22004
21927: LD_INT 31
21929: DOUBLE
21930: EQUAL
21931: IFTRUE 21935
21933: GO 21946
21935: POP
// bc_type := b_oil_power ; 32 :
21936: LD_ADDR_OWVAR 42
21940: PUSH
21941: LD_INT 26
21943: ST_TO_ADDR
21944: GO 22004
21946: LD_INT 32
21948: DOUBLE
21949: EQUAL
21950: IFTRUE 21954
21952: GO 21965
21954: POP
// bc_type := b_siberite_power ; 33 :
21955: LD_ADDR_OWVAR 42
21959: PUSH
21960: LD_INT 28
21962: ST_TO_ADDR
21963: GO 22004
21965: LD_INT 33
21967: DOUBLE
21968: EQUAL
21969: IFTRUE 21973
21971: GO 21984
21973: POP
// bc_type := b_oil_mine ; 34 :
21974: LD_ADDR_OWVAR 42
21978: PUSH
21979: LD_INT 29
21981: ST_TO_ADDR
21982: GO 22004
21984: LD_INT 34
21986: DOUBLE
21987: EQUAL
21988: IFTRUE 21992
21990: GO 22003
21992: POP
// bc_type := b_siberite_mine ; end ;
21993: LD_ADDR_OWVAR 42
21997: PUSH
21998: LD_INT 30
22000: ST_TO_ADDR
22001: GO 22004
22003: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22004: LD_ADDR_VAR 0 8
22008: PUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: LD_VAR 0 6
22018: PPUSH
22019: LD_VAR 0 3
22023: PPUSH
22024: CALL_OW 47
22028: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22029: LD_OWVAR 42
22033: PUSH
22034: LD_INT 32
22036: PUSH
22037: LD_INT 33
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: IN
22044: IFFALSE 22060
// PlaceWeaponTurret ( b , weapon ) ;
22046: LD_VAR 0 8
22050: PPUSH
22051: LD_VAR 0 4
22055: PPUSH
22056: CALL_OW 431
// end ;
22060: LD_VAR 0 7
22064: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22065: LD_INT 0
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22071: LD_ADDR_VAR 0 4
22075: PUSH
22076: LD_INT 22
22078: PUSH
22079: LD_OWVAR 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 30
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 30
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PPUSH
22120: CALL_OW 69
22124: ST_TO_ADDR
// if not tmp then
22125: LD_VAR 0 4
22129: NOT
22130: IFFALSE 22134
// exit ;
22132: GO 22193
// for i in tmp do
22134: LD_ADDR_VAR 0 2
22138: PUSH
22139: LD_VAR 0 4
22143: PUSH
22144: FOR_IN
22145: IFFALSE 22191
// for j = 1 to 3 do
22147: LD_ADDR_VAR 0 3
22151: PUSH
22152: DOUBLE
22153: LD_INT 1
22155: DEC
22156: ST_TO_ADDR
22157: LD_INT 3
22159: PUSH
22160: FOR_TO
22161: IFFALSE 22187
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22163: LD_VAR 0 2
22167: PPUSH
22168: CALL_OW 274
22172: PPUSH
22173: LD_VAR 0 3
22177: PPUSH
22178: LD_INT 99999
22180: PPUSH
22181: CALL_OW 277
22185: GO 22160
22187: POP
22188: POP
22189: GO 22144
22191: POP
22192: POP
// end ;
22193: LD_VAR 0 1
22197: RET
// export function hHackSetLevel10 ; var i , j ; begin
22198: LD_INT 0
22200: PPUSH
22201: PPUSH
22202: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22203: LD_ADDR_VAR 0 2
22207: PUSH
22208: LD_INT 21
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PPUSH
22218: CALL_OW 69
22222: PUSH
22223: FOR_IN
22224: IFFALSE 22276
// if IsSelected ( i ) then
22226: LD_VAR 0 2
22230: PPUSH
22231: CALL_OW 306
22235: IFFALSE 22274
// begin for j := 1 to 4 do
22237: LD_ADDR_VAR 0 3
22241: PUSH
22242: DOUBLE
22243: LD_INT 1
22245: DEC
22246: ST_TO_ADDR
22247: LD_INT 4
22249: PUSH
22250: FOR_TO
22251: IFFALSE 22272
// SetSkill ( i , j , 10 ) ;
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: LD_INT 10
22265: PPUSH
22266: CALL_OW 237
22270: GO 22250
22272: POP
22273: POP
// end ;
22274: GO 22223
22276: POP
22277: POP
// end ;
22278: LD_VAR 0 1
22282: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22283: LD_INT 0
22285: PPUSH
22286: PPUSH
22287: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22288: LD_ADDR_VAR 0 2
22292: PUSH
22293: LD_INT 22
22295: PUSH
22296: LD_OWVAR 2
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 21
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 69
22323: PUSH
22324: FOR_IN
22325: IFFALSE 22366
// begin for j := 1 to 4 do
22327: LD_ADDR_VAR 0 3
22331: PUSH
22332: DOUBLE
22333: LD_INT 1
22335: DEC
22336: ST_TO_ADDR
22337: LD_INT 4
22339: PUSH
22340: FOR_TO
22341: IFFALSE 22362
// SetSkill ( i , j , 10 ) ;
22343: LD_VAR 0 2
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: LD_INT 10
22355: PPUSH
22356: CALL_OW 237
22360: GO 22340
22362: POP
22363: POP
// end ;
22364: GO 22324
22366: POP
22367: POP
// end ;
22368: LD_VAR 0 1
22372: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22373: LD_INT 0
22375: PPUSH
// uc_side := your_side ;
22376: LD_ADDR_OWVAR 20
22380: PUSH
22381: LD_OWVAR 2
22385: ST_TO_ADDR
// uc_nation := nation ;
22386: LD_ADDR_OWVAR 21
22390: PUSH
22391: LD_VAR 0 1
22395: ST_TO_ADDR
// InitHc ;
22396: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22400: LD_INT 0
22402: PPUSH
22403: LD_VAR 0 2
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22417: LD_VAR 0 4
22421: PPUSH
22422: LD_VAR 0 5
22426: PPUSH
22427: CALL_OW 428
22431: PUSH
22432: LD_INT 0
22434: EQUAL
22435: IFFALSE 22459
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22437: CALL_OW 44
22441: PPUSH
22442: LD_VAR 0 4
22446: PPUSH
22447: LD_VAR 0 5
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL_OW 48
// end ;
22459: LD_VAR 0 6
22463: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
// uc_side := your_side ;
22468: LD_ADDR_OWVAR 20
22472: PUSH
22473: LD_OWVAR 2
22477: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22478: LD_VAR 0 1
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: LD_INT 4
22494: PUSH
22495: LD_INT 5
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: IN
22505: IFFALSE 22517
// uc_nation := nation_american else
22507: LD_ADDR_OWVAR 21
22511: PUSH
22512: LD_INT 1
22514: ST_TO_ADDR
22515: GO 22560
// if chassis in [ 11 , 12 , 13 , 14 ] then
22517: LD_VAR 0 1
22521: PUSH
22522: LD_INT 11
22524: PUSH
22525: LD_INT 12
22527: PUSH
22528: LD_INT 13
22530: PUSH
22531: LD_INT 14
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: IN
22540: IFFALSE 22552
// uc_nation := nation_arabian else
22542: LD_ADDR_OWVAR 21
22546: PUSH
22547: LD_INT 2
22549: ST_TO_ADDR
22550: GO 22560
// uc_nation := nation_russian ;
22552: LD_ADDR_OWVAR 21
22556: PUSH
22557: LD_INT 3
22559: ST_TO_ADDR
// vc_chassis := chassis ;
22560: LD_ADDR_OWVAR 37
22564: PUSH
22565: LD_VAR 0 1
22569: ST_TO_ADDR
// vc_engine := engine ;
22570: LD_ADDR_OWVAR 39
22574: PUSH
22575: LD_VAR 0 2
22579: ST_TO_ADDR
// vc_control := control ;
22580: LD_ADDR_OWVAR 38
22584: PUSH
22585: LD_VAR 0 3
22589: ST_TO_ADDR
// vc_weapon := weapon ;
22590: LD_ADDR_OWVAR 40
22594: PUSH
22595: LD_VAR 0 4
22599: ST_TO_ADDR
// un := CreateVehicle ;
22600: LD_ADDR_VAR 0 8
22604: PUSH
22605: CALL_OW 45
22609: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22610: LD_VAR 0 8
22614: PPUSH
22615: LD_INT 0
22617: PPUSH
22618: LD_INT 5
22620: PPUSH
22621: CALL_OW 12
22625: PPUSH
22626: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22630: LD_VAR 0 8
22634: PPUSH
22635: LD_VAR 0 5
22639: PPUSH
22640: LD_VAR 0 6
22644: PPUSH
22645: LD_INT 1
22647: PPUSH
22648: CALL_OW 48
// end ;
22652: LD_VAR 0 7
22656: RET
// export hInvincible ; every 1 do
22657: GO 22659
22659: DISABLE
// hInvincible := [ ] ;
22660: LD_ADDR_EXP 110
22664: PUSH
22665: EMPTY
22666: ST_TO_ADDR
22667: END
// every 10 do var i ;
22668: GO 22670
22670: DISABLE
22671: LD_INT 0
22673: PPUSH
// begin enable ;
22674: ENABLE
// if not hInvincible then
22675: LD_EXP 110
22679: NOT
22680: IFFALSE 22684
// exit ;
22682: GO 22728
// for i in hInvincible do
22684: LD_ADDR_VAR 0 1
22688: PUSH
22689: LD_EXP 110
22693: PUSH
22694: FOR_IN
22695: IFFALSE 22726
// if GetLives ( i ) < 1000 then
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 256
22706: PUSH
22707: LD_INT 1000
22709: LESS
22710: IFFALSE 22724
// SetLives ( i , 1000 ) ;
22712: LD_VAR 0 1
22716: PPUSH
22717: LD_INT 1000
22719: PPUSH
22720: CALL_OW 234
22724: GO 22694
22726: POP
22727: POP
// end ;
22728: PPOPN 1
22730: END
// export function hHackInvincible ; var i ; begin
22731: LD_INT 0
22733: PPUSH
22734: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22735: LD_ADDR_VAR 0 2
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: LD_INT 21
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 21
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: PUSH
22773: FOR_IN
22774: IFFALSE 22835
// if IsSelected ( i ) then
22776: LD_VAR 0 2
22780: PPUSH
22781: CALL_OW 306
22785: IFFALSE 22833
// begin if i in hInvincible then
22787: LD_VAR 0 2
22791: PUSH
22792: LD_EXP 110
22796: IN
22797: IFFALSE 22817
// hInvincible := hInvincible diff i else
22799: LD_ADDR_EXP 110
22803: PUSH
22804: LD_EXP 110
22808: PUSH
22809: LD_VAR 0 2
22813: DIFF
22814: ST_TO_ADDR
22815: GO 22833
// hInvincible := hInvincible union i ;
22817: LD_ADDR_EXP 110
22821: PUSH
22822: LD_EXP 110
22826: PUSH
22827: LD_VAR 0 2
22831: UNION
22832: ST_TO_ADDR
// end ;
22833: GO 22773
22835: POP
22836: POP
// end ;
22837: LD_VAR 0 1
22841: RET
// export function hHackInvisible ; var i , j ; begin
22842: LD_INT 0
22844: PPUSH
22845: PPUSH
22846: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22847: LD_ADDR_VAR 0 2
22851: PUSH
22852: LD_INT 21
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: PUSH
22867: FOR_IN
22868: IFFALSE 22892
// if IsSelected ( i ) then
22870: LD_VAR 0 2
22874: PPUSH
22875: CALL_OW 306
22879: IFFALSE 22890
// ComForceInvisible ( i ) ;
22881: LD_VAR 0 2
22885: PPUSH
22886: CALL_OW 496
22890: GO 22867
22892: POP
22893: POP
// end ;
22894: LD_VAR 0 1
22898: RET
// export function hHackChangeYourSide ; begin
22899: LD_INT 0
22901: PPUSH
// if your_side = 8 then
22902: LD_OWVAR 2
22906: PUSH
22907: LD_INT 8
22909: EQUAL
22910: IFFALSE 22922
// your_side := 0 else
22912: LD_ADDR_OWVAR 2
22916: PUSH
22917: LD_INT 0
22919: ST_TO_ADDR
22920: GO 22936
// your_side := your_side + 1 ;
22922: LD_ADDR_OWVAR 2
22926: PUSH
22927: LD_OWVAR 2
22931: PUSH
22932: LD_INT 1
22934: PLUS
22935: ST_TO_ADDR
// end ;
22936: LD_VAR 0 1
22940: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22941: LD_INT 0
22943: PPUSH
22944: PPUSH
22945: PPUSH
// for i in all_units do
22946: LD_ADDR_VAR 0 2
22950: PUSH
22951: LD_OWVAR 3
22955: PUSH
22956: FOR_IN
22957: IFFALSE 23035
// if IsSelected ( i ) then
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 306
22968: IFFALSE 23033
// begin j := GetSide ( i ) ;
22970: LD_ADDR_VAR 0 3
22974: PUSH
22975: LD_VAR 0 2
22979: PPUSH
22980: CALL_OW 255
22984: ST_TO_ADDR
// if j = 8 then
22985: LD_VAR 0 3
22989: PUSH
22990: LD_INT 8
22992: EQUAL
22993: IFFALSE 23005
// j := 0 else
22995: LD_ADDR_VAR 0 3
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23019
// j := j + 1 ;
23005: LD_ADDR_VAR 0 3
23009: PUSH
23010: LD_VAR 0 3
23014: PUSH
23015: LD_INT 1
23017: PLUS
23018: ST_TO_ADDR
// SetSide ( i , j ) ;
23019: LD_VAR 0 2
23023: PPUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 235
// end ;
23033: GO 22956
23035: POP
23036: POP
// end ;
23037: LD_VAR 0 1
23041: RET
// export function hHackFog ; begin
23042: LD_INT 0
23044: PPUSH
// FogOff ( true ) ;
23045: LD_INT 1
23047: PPUSH
23048: CALL_OW 344
// end ;
23052: LD_VAR 0 1
23056: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23057: LD_INT 0
23059: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23060: LD_VAR 0 1
23064: PPUSH
23065: LD_VAR 0 2
23069: PPUSH
23070: LD_VAR 0 3
23074: PPUSH
23075: LD_INT 1
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: CALL_OW 483
// CenterOnXY ( x , y ) ;
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 3
23094: PPUSH
23095: CALL_OW 84
// end ;
23099: LD_VAR 0 4
23103: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23104: LD_INT 0
23106: PPUSH
23107: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23108: LD_VAR 0 1
23112: NOT
23113: PUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 488
23128: NOT
23129: OR
23130: PUSH
23131: LD_VAR 0 1
23135: PPUSH
23136: CALL_OW 266
23140: PUSH
23141: LD_INT 3
23143: NONEQUAL
23144: PUSH
23145: LD_VAR 0 1
23149: PPUSH
23150: CALL_OW 247
23154: PUSH
23155: LD_INT 1
23157: EQUAL
23158: NOT
23159: AND
23160: OR
23161: IFFALSE 23165
// exit ;
23163: GO 23314
// if GetType ( factory ) = unit_human then
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 247
23174: PUSH
23175: LD_INT 1
23177: EQUAL
23178: IFFALSE 23195
// factory := IsInUnit ( factory ) ;
23180: LD_ADDR_VAR 0 1
23184: PUSH
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 310
23194: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 266
23204: PUSH
23205: LD_INT 3
23207: NONEQUAL
23208: IFFALSE 23212
// exit ;
23210: GO 23314
// if HexInfo ( x , y ) = factory then
23212: LD_VAR 0 2
23216: PPUSH
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 428
23226: PUSH
23227: LD_VAR 0 1
23231: EQUAL
23232: IFFALSE 23259
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23234: LD_ADDR_EXP 111
23238: PUSH
23239: LD_EXP 111
23243: PPUSH
23244: LD_VAR 0 1
23248: PPUSH
23249: LD_INT 0
23251: PPUSH
23252: CALL_OW 1
23256: ST_TO_ADDR
23257: GO 23310
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23259: LD_ADDR_EXP 111
23263: PUSH
23264: LD_EXP 111
23268: PPUSH
23269: LD_VAR 0 1
23273: PPUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 255
23283: PUSH
23284: LD_VAR 0 1
23288: PUSH
23289: LD_VAR 0 2
23293: PUSH
23294: LD_VAR 0 3
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: PPUSH
23305: CALL_OW 1
23309: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23310: CALL 23319 0 0
// end ;
23314: LD_VAR 0 4
23318: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23324: LD_STRING resetFactoryWaypoint();
23326: PPUSH
23327: CALL_OW 559
// if factoryWaypoints then
23331: LD_EXP 111
23335: IFFALSE 23461
// begin list := PrepareArray ( factoryWaypoints ) ;
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_EXP 111
23346: PPUSH
23347: CALL 69930 0 1
23351: ST_TO_ADDR
// for i := 1 to list do
23352: LD_ADDR_VAR 0 2
23356: PUSH
23357: DOUBLE
23358: LD_INT 1
23360: DEC
23361: ST_TO_ADDR
23362: LD_VAR 0 3
23366: PUSH
23367: FOR_TO
23368: IFFALSE 23459
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23370: LD_STRING setFactoryWaypointXY(
23372: PUSH
23373: LD_VAR 0 3
23377: PUSH
23378: LD_VAR 0 2
23382: ARRAY
23383: PUSH
23384: LD_INT 1
23386: ARRAY
23387: STR
23388: PUSH
23389: LD_STRING ,
23391: STR
23392: PUSH
23393: LD_VAR 0 3
23397: PUSH
23398: LD_VAR 0 2
23402: ARRAY
23403: PUSH
23404: LD_INT 2
23406: ARRAY
23407: STR
23408: PUSH
23409: LD_STRING ,
23411: STR
23412: PUSH
23413: LD_VAR 0 3
23417: PUSH
23418: LD_VAR 0 2
23422: ARRAY
23423: PUSH
23424: LD_INT 3
23426: ARRAY
23427: STR
23428: PUSH
23429: LD_STRING ,
23431: STR
23432: PUSH
23433: LD_VAR 0 3
23437: PUSH
23438: LD_VAR 0 2
23442: ARRAY
23443: PUSH
23444: LD_INT 4
23446: ARRAY
23447: STR
23448: PUSH
23449: LD_STRING )
23451: STR
23452: PPUSH
23453: CALL_OW 559
23457: GO 23367
23459: POP
23460: POP
// end ; end ;
23461: LD_VAR 0 1
23465: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23466: LD_INT 0
23468: PPUSH
// if HexInfo ( x , y ) = warehouse then
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: CALL_OW 428
23483: PUSH
23484: LD_VAR 0 1
23488: EQUAL
23489: IFFALSE 23516
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23491: LD_ADDR_EXP 112
23495: PUSH
23496: LD_EXP 112
23500: PPUSH
23501: LD_VAR 0 1
23505: PPUSH
23506: LD_INT 0
23508: PPUSH
23509: CALL_OW 1
23513: ST_TO_ADDR
23514: GO 23567
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23516: LD_ADDR_EXP 112
23520: PUSH
23521: LD_EXP 112
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: LD_VAR 0 1
23535: PPUSH
23536: CALL_OW 255
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: LD_VAR 0 2
23550: PUSH
23551: LD_VAR 0 3
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 1
23566: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23567: CALL 23576 0 0
// end ;
23571: LD_VAR 0 4
23575: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23581: LD_STRING resetWarehouseGatheringPoints();
23583: PPUSH
23584: CALL_OW 559
// if warehouseGatheringPoints then
23588: LD_EXP 112
23592: IFFALSE 23718
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_EXP 112
23603: PPUSH
23604: CALL 69930 0 1
23608: ST_TO_ADDR
// for i := 1 to list do
23609: LD_ADDR_VAR 0 2
23613: PUSH
23614: DOUBLE
23615: LD_INT 1
23617: DEC
23618: ST_TO_ADDR
23619: LD_VAR 0 3
23623: PUSH
23624: FOR_TO
23625: IFFALSE 23716
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23627: LD_STRING setWarehouseGatheringPointXY(
23629: PUSH
23630: LD_VAR 0 3
23634: PUSH
23635: LD_VAR 0 2
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: STR
23645: PUSH
23646: LD_STRING ,
23648: STR
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 2
23659: ARRAY
23660: PUSH
23661: LD_INT 2
23663: ARRAY
23664: STR
23665: PUSH
23666: LD_STRING ,
23668: STR
23669: PUSH
23670: LD_VAR 0 3
23674: PUSH
23675: LD_VAR 0 2
23679: ARRAY
23680: PUSH
23681: LD_INT 3
23683: ARRAY
23684: STR
23685: PUSH
23686: LD_STRING ,
23688: STR
23689: PUSH
23690: LD_VAR 0 3
23694: PUSH
23695: LD_VAR 0 2
23699: ARRAY
23700: PUSH
23701: LD_INT 4
23703: ARRAY
23704: STR
23705: PUSH
23706: LD_STRING )
23708: STR
23709: PPUSH
23710: CALL_OW 559
23714: GO 23624
23716: POP
23717: POP
// end ; end ;
23718: LD_VAR 0 1
23722: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23723: LD_EXP 112
23727: IFFALSE 24412
23729: GO 23731
23731: DISABLE
23732: LD_INT 0
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
// begin enable ;
23743: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23744: LD_ADDR_VAR 0 3
23748: PUSH
23749: LD_EXP 112
23753: PPUSH
23754: CALL 69930 0 1
23758: ST_TO_ADDR
// if not list then
23759: LD_VAR 0 3
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 24412
// for i := 1 to list do
23768: LD_ADDR_VAR 0 1
23772: PUSH
23773: DOUBLE
23774: LD_INT 1
23776: DEC
23777: ST_TO_ADDR
23778: LD_VAR 0 3
23782: PUSH
23783: FOR_TO
23784: IFFALSE 24410
// begin depot := list [ i ] [ 2 ] ;
23786: LD_ADDR_VAR 0 8
23790: PUSH
23791: LD_VAR 0 3
23795: PUSH
23796: LD_VAR 0 1
23800: ARRAY
23801: PUSH
23802: LD_INT 2
23804: ARRAY
23805: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23806: LD_ADDR_VAR 0 5
23810: PUSH
23811: LD_VAR 0 3
23815: PUSH
23816: LD_VAR 0 1
23820: ARRAY
23821: PUSH
23822: LD_INT 1
23824: ARRAY
23825: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23826: LD_VAR 0 8
23830: PPUSH
23831: CALL_OW 301
23835: PUSH
23836: LD_VAR 0 5
23840: PUSH
23841: LD_VAR 0 8
23845: PPUSH
23846: CALL_OW 255
23850: NONEQUAL
23851: OR
23852: IFFALSE 23881
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23854: LD_ADDR_EXP 112
23858: PUSH
23859: LD_EXP 112
23863: PPUSH
23864: LD_VAR 0 8
23868: PPUSH
23869: LD_INT 0
23871: PPUSH
23872: CALL_OW 1
23876: ST_TO_ADDR
// exit ;
23877: POP
23878: POP
23879: GO 24412
// end ; x := list [ i ] [ 3 ] ;
23881: LD_ADDR_VAR 0 6
23885: PUSH
23886: LD_VAR 0 3
23890: PUSH
23891: LD_VAR 0 1
23895: ARRAY
23896: PUSH
23897: LD_INT 3
23899: ARRAY
23900: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23901: LD_ADDR_VAR 0 7
23905: PUSH
23906: LD_VAR 0 3
23910: PUSH
23911: LD_VAR 0 1
23915: ARRAY
23916: PUSH
23917: LD_INT 4
23919: ARRAY
23920: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23921: LD_ADDR_VAR 0 9
23925: PUSH
23926: LD_VAR 0 6
23930: PPUSH
23931: LD_VAR 0 7
23935: PPUSH
23936: LD_INT 16
23938: PPUSH
23939: CALL 68518 0 3
23943: ST_TO_ADDR
// if not cratesNearbyPoint then
23944: LD_VAR 0 9
23948: NOT
23949: IFFALSE 23955
// exit ;
23951: POP
23952: POP
23953: GO 24412
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23955: LD_ADDR_VAR 0 4
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_VAR 0 5
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: LD_INT 60
23977: PUSH
23978: EMPTY
23979: LIST
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 91
23987: PUSH
23988: LD_VAR 0 8
23992: PUSH
23993: LD_INT 6
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 25
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 25
24016: PUSH
24017: LD_INT 16
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: PUSH
24040: LD_VAR 0 8
24044: PPUSH
24045: CALL_OW 313
24049: PPUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 60
24055: PUSH
24056: EMPTY
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 25
24078: PUSH
24079: LD_INT 16
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PPUSH
24095: CALL_OW 72
24099: UNION
24100: ST_TO_ADDR
// if tmp then
24101: LD_VAR 0 4
24105: IFFALSE 24185
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24107: LD_ADDR_VAR 0 4
24111: PUSH
24112: LD_VAR 0 4
24116: PPUSH
24117: LD_INT 3
24119: PPUSH
24120: CALL 66487 0 2
24124: ST_TO_ADDR
// for j in tmp do
24125: LD_ADDR_VAR 0 2
24129: PUSH
24130: LD_VAR 0 4
24134: PUSH
24135: FOR_IN
24136: IFFALSE 24179
// begin if IsInUnit ( j ) then
24138: LD_VAR 0 2
24142: PPUSH
24143: CALL_OW 310
24147: IFFALSE 24158
// ComExit ( j ) ;
24149: LD_VAR 0 2
24153: PPUSH
24154: CALL 66570 0 1
// AddComCollect ( j , x , y ) ;
24158: LD_VAR 0 2
24162: PPUSH
24163: LD_VAR 0 6
24167: PPUSH
24168: LD_VAR 0 7
24172: PPUSH
24173: CALL_OW 177
// end ;
24177: GO 24135
24179: POP
24180: POP
// exit ;
24181: POP
24182: POP
24183: GO 24412
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24185: LD_ADDR_VAR 0 4
24189: PUSH
24190: LD_INT 22
24192: PUSH
24193: LD_VAR 0 5
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 91
24204: PUSH
24205: LD_VAR 0 8
24209: PUSH
24210: LD_INT 8
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 34
24223: PUSH
24224: LD_INT 12
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 34
24233: PUSH
24234: LD_INT 51
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 34
24243: PUSH
24244: LD_INT 32
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 34
24253: PUSH
24254: LD_INT 89
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: LIST
24272: PPUSH
24273: CALL_OW 69
24277: ST_TO_ADDR
// if tmp then
24278: LD_VAR 0 4
24282: IFFALSE 24408
// begin for j in tmp do
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_VAR 0 4
24293: PUSH
24294: FOR_IN
24295: IFFALSE 24406
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24297: LD_VAR 0 2
24301: PPUSH
24302: CALL_OW 262
24306: PUSH
24307: LD_INT 3
24309: EQUAL
24310: PUSH
24311: LD_VAR 0 2
24315: PPUSH
24316: CALL_OW 261
24320: PUSH
24321: LD_INT 20
24323: GREATER
24324: OR
24325: PUSH
24326: LD_VAR 0 2
24330: PPUSH
24331: CALL_OW 314
24335: NOT
24336: AND
24337: PUSH
24338: LD_VAR 0 2
24342: PPUSH
24343: CALL_OW 263
24347: PUSH
24348: LD_INT 1
24350: NONEQUAL
24351: PUSH
24352: LD_VAR 0 2
24356: PPUSH
24357: CALL_OW 311
24361: OR
24362: AND
24363: IFFALSE 24404
// begin ComCollect ( j , x , y ) ;
24365: LD_VAR 0 2
24369: PPUSH
24370: LD_VAR 0 6
24374: PPUSH
24375: LD_VAR 0 7
24379: PPUSH
24380: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24384: LD_VAR 0 2
24388: PPUSH
24389: LD_VAR 0 8
24393: PPUSH
24394: CALL_OW 172
// exit ;
24398: POP
24399: POP
24400: POP
24401: POP
24402: GO 24412
// end ;
24404: GO 24294
24406: POP
24407: POP
// end ; end ;
24408: GO 23783
24410: POP
24411: POP
// end ; end_of_file
24412: PPOPN 9
24414: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24415: LD_INT 0
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24421: LD_VAR 0 1
24425: PPUSH
24426: CALL_OW 264
24430: PUSH
24431: LD_INT 91
24433: EQUAL
24434: IFFALSE 24506
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24436: LD_INT 68
24438: PPUSH
24439: LD_VAR 0 1
24443: PPUSH
24444: CALL_OW 255
24448: PPUSH
24449: CALL_OW 321
24453: PUSH
24454: LD_INT 2
24456: EQUAL
24457: IFFALSE 24469
// eff := 70 else
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: LD_INT 70
24466: ST_TO_ADDR
24467: GO 24477
// eff := 30 ;
24469: LD_ADDR_VAR 0 4
24473: PUSH
24474: LD_INT 30
24476: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24477: LD_VAR 0 1
24481: PPUSH
24482: CALL_OW 250
24486: PPUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 251
24496: PPUSH
24497: LD_VAR 0 4
24501: PPUSH
24502: CALL_OW 495
// end ; end ;
24506: LD_VAR 0 2
24510: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24511: LD_INT 0
24513: PPUSH
// end ;
24514: LD_VAR 0 4
24518: RET
// export function SOS_Command ( cmd ) ; begin
24519: LD_INT 0
24521: PPUSH
// end ;
24522: LD_VAR 0 2
24526: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24527: LD_INT 0
24529: PPUSH
// end ;
24530: LD_VAR 0 6
24534: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
// if not vehicle or not factory then
24539: LD_VAR 0 1
24543: NOT
24544: PUSH
24545: LD_VAR 0 2
24549: NOT
24550: OR
24551: IFFALSE 24555
// exit ;
24553: GO 24786
// if factoryWaypoints >= factory then
24555: LD_EXP 111
24559: PUSH
24560: LD_VAR 0 2
24564: GREATEREQUAL
24565: IFFALSE 24786
// if factoryWaypoints [ factory ] then
24567: LD_EXP 111
24571: PUSH
24572: LD_VAR 0 2
24576: ARRAY
24577: IFFALSE 24786
// begin if GetControl ( vehicle ) = control_manual then
24579: LD_VAR 0 1
24583: PPUSH
24584: CALL_OW 263
24588: PUSH
24589: LD_INT 1
24591: EQUAL
24592: IFFALSE 24673
// begin driver := IsDrivenBy ( vehicle ) ;
24594: LD_ADDR_VAR 0 4
24598: PUSH
24599: LD_VAR 0 1
24603: PPUSH
24604: CALL_OW 311
24608: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24609: LD_VAR 0 4
24613: PPUSH
24614: LD_EXP 111
24618: PUSH
24619: LD_VAR 0 2
24623: ARRAY
24624: PUSH
24625: LD_INT 3
24627: ARRAY
24628: PPUSH
24629: LD_EXP 111
24633: PUSH
24634: LD_VAR 0 2
24638: ARRAY
24639: PUSH
24640: LD_INT 4
24642: ARRAY
24643: PPUSH
24644: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24648: LD_VAR 0 4
24652: PPUSH
24653: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24657: LD_VAR 0 4
24661: PPUSH
24662: LD_VAR 0 2
24666: PPUSH
24667: CALL_OW 180
// end else
24671: GO 24786
// if GetControl ( vehicle ) = control_remote then
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL_OW 263
24682: PUSH
24683: LD_INT 2
24685: EQUAL
24686: IFFALSE 24747
// begin wait ( 0 0$2 ) ;
24688: LD_INT 70
24690: PPUSH
24691: CALL_OW 67
// if Connect ( vehicle ) then
24695: LD_VAR 0 1
24699: PPUSH
24700: CALL 36810 0 1
24704: IFFALSE 24745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24706: LD_VAR 0 1
24710: PPUSH
24711: LD_EXP 111
24715: PUSH
24716: LD_VAR 0 2
24720: ARRAY
24721: PUSH
24722: LD_INT 3
24724: ARRAY
24725: PPUSH
24726: LD_EXP 111
24730: PUSH
24731: LD_VAR 0 2
24735: ARRAY
24736: PUSH
24737: LD_INT 4
24739: ARRAY
24740: PPUSH
24741: CALL_OW 171
// end else
24745: GO 24786
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_EXP 111
24756: PUSH
24757: LD_VAR 0 2
24761: ARRAY
24762: PUSH
24763: LD_INT 3
24765: ARRAY
24766: PPUSH
24767: LD_EXP 111
24771: PUSH
24772: LD_VAR 0 2
24776: ARRAY
24777: PUSH
24778: LD_INT 4
24780: ARRAY
24781: PPUSH
24782: CALL_OW 171
// end ; end ;
24786: LD_VAR 0 3
24790: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24791: LD_INT 0
24793: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24794: LD_VAR 0 1
24798: PUSH
24799: LD_INT 250
24801: EQUAL
24802: PUSH
24803: LD_VAR 0 2
24807: PPUSH
24808: CALL_OW 264
24812: PUSH
24813: LD_INT 81
24815: EQUAL
24816: AND
24817: IFFALSE 24838
// MinerPlaceMine ( unit , x , y ) ;
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_VAR 0 4
24828: PPUSH
24829: LD_VAR 0 5
24833: PPUSH
24834: CALL 27223 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24838: LD_VAR 0 1
24842: PUSH
24843: LD_INT 251
24845: EQUAL
24846: PUSH
24847: LD_VAR 0 2
24851: PPUSH
24852: CALL_OW 264
24856: PUSH
24857: LD_INT 81
24859: EQUAL
24860: AND
24861: IFFALSE 24882
// MinerDetonateMine ( unit , x , y ) ;
24863: LD_VAR 0 2
24867: PPUSH
24868: LD_VAR 0 4
24872: PPUSH
24873: LD_VAR 0 5
24877: PPUSH
24878: CALL 27498 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24882: LD_VAR 0 1
24886: PUSH
24887: LD_INT 252
24889: EQUAL
24890: PUSH
24891: LD_VAR 0 2
24895: PPUSH
24896: CALL_OW 264
24900: PUSH
24901: LD_INT 81
24903: EQUAL
24904: AND
24905: IFFALSE 24926
// MinerCreateMinefield ( unit , x , y ) ;
24907: LD_VAR 0 2
24911: PPUSH
24912: LD_VAR 0 4
24916: PPUSH
24917: LD_VAR 0 5
24921: PPUSH
24922: CALL 27915 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24926: LD_VAR 0 1
24930: PUSH
24931: LD_INT 253
24933: EQUAL
24934: PUSH
24935: LD_VAR 0 2
24939: PPUSH
24940: CALL_OW 257
24944: PUSH
24945: LD_INT 5
24947: EQUAL
24948: AND
24949: IFFALSE 24970
// ComBinocular ( unit , x , y ) ;
24951: LD_VAR 0 2
24955: PPUSH
24956: LD_VAR 0 4
24960: PPUSH
24961: LD_VAR 0 5
24965: PPUSH
24966: CALL 28284 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24970: LD_VAR 0 1
24974: PUSH
24975: LD_INT 254
24977: EQUAL
24978: PUSH
24979: LD_VAR 0 2
24983: PPUSH
24984: CALL_OW 264
24988: PUSH
24989: LD_INT 99
24991: EQUAL
24992: AND
24993: PUSH
24994: LD_VAR 0 3
24998: PPUSH
24999: CALL_OW 263
25003: PUSH
25004: LD_INT 3
25006: EQUAL
25007: AND
25008: IFFALSE 25024
// HackDestroyVehicle ( unit , selectedUnit ) ;
25010: LD_VAR 0 2
25014: PPUSH
25015: LD_VAR 0 3
25019: PPUSH
25020: CALL 26587 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25024: LD_VAR 0 1
25028: PUSH
25029: LD_INT 255
25031: EQUAL
25032: PUSH
25033: LD_VAR 0 2
25037: PPUSH
25038: CALL_OW 264
25042: PUSH
25043: LD_INT 14
25045: PUSH
25046: LD_INT 53
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: IN
25053: AND
25054: PUSH
25055: LD_VAR 0 4
25059: PPUSH
25060: LD_VAR 0 5
25064: PPUSH
25065: CALL_OW 488
25069: AND
25070: IFFALSE 25094
// CutTreeXYR ( unit , x , y , 12 ) ;
25072: LD_VAR 0 2
25076: PPUSH
25077: LD_VAR 0 4
25081: PPUSH
25082: LD_VAR 0 5
25086: PPUSH
25087: LD_INT 12
25089: PPUSH
25090: CALL 25157 0 4
// if cmd = 256 then
25094: LD_VAR 0 1
25098: PUSH
25099: LD_INT 256
25101: EQUAL
25102: IFFALSE 25123
// SetFactoryWaypoint ( unit , x , y ) ;
25104: LD_VAR 0 2
25108: PPUSH
25109: LD_VAR 0 4
25113: PPUSH
25114: LD_VAR 0 5
25118: PPUSH
25119: CALL 23104 0 3
// if cmd = 257 then
25123: LD_VAR 0 1
25127: PUSH
25128: LD_INT 257
25130: EQUAL
25131: IFFALSE 25152
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 4
25142: PPUSH
25143: LD_VAR 0 5
25147: PPUSH
25148: CALL 23466 0 3
// end ;
25152: LD_VAR 0 6
25156: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25157: LD_INT 0
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25168: LD_VAR 0 1
25172: NOT
25173: PUSH
25174: LD_VAR 0 2
25178: PPUSH
25179: LD_VAR 0 3
25183: PPUSH
25184: CALL_OW 488
25188: NOT
25189: OR
25190: PUSH
25191: LD_VAR 0 4
25195: NOT
25196: OR
25197: IFFALSE 25201
// exit ;
25199: GO 25541
// list := [ ] ;
25201: LD_ADDR_VAR 0 13
25205: PUSH
25206: EMPTY
25207: ST_TO_ADDR
// if x - r < 0 then
25208: LD_VAR 0 2
25212: PUSH
25213: LD_VAR 0 4
25217: MINUS
25218: PUSH
25219: LD_INT 0
25221: LESS
25222: IFFALSE 25234
// min_x := 0 else
25224: LD_ADDR_VAR 0 7
25228: PUSH
25229: LD_INT 0
25231: ST_TO_ADDR
25232: GO 25250
// min_x := x - r ;
25234: LD_ADDR_VAR 0 7
25238: PUSH
25239: LD_VAR 0 2
25243: PUSH
25244: LD_VAR 0 4
25248: MINUS
25249: ST_TO_ADDR
// if y - r < 0 then
25250: LD_VAR 0 3
25254: PUSH
25255: LD_VAR 0 4
25259: MINUS
25260: PUSH
25261: LD_INT 0
25263: LESS
25264: IFFALSE 25276
// min_y := 0 else
25266: LD_ADDR_VAR 0 8
25270: PUSH
25271: LD_INT 0
25273: ST_TO_ADDR
25274: GO 25292
// min_y := y - r ;
25276: LD_ADDR_VAR 0 8
25280: PUSH
25281: LD_VAR 0 3
25285: PUSH
25286: LD_VAR 0 4
25290: MINUS
25291: ST_TO_ADDR
// max_x := x + r ;
25292: LD_ADDR_VAR 0 9
25296: PUSH
25297: LD_VAR 0 2
25301: PUSH
25302: LD_VAR 0 4
25306: PLUS
25307: ST_TO_ADDR
// max_y := y + r ;
25308: LD_ADDR_VAR 0 10
25312: PUSH
25313: LD_VAR 0 3
25317: PUSH
25318: LD_VAR 0 4
25322: PLUS
25323: ST_TO_ADDR
// for _x = min_x to max_x do
25324: LD_ADDR_VAR 0 11
25328: PUSH
25329: DOUBLE
25330: LD_VAR 0 7
25334: DEC
25335: ST_TO_ADDR
25336: LD_VAR 0 9
25340: PUSH
25341: FOR_TO
25342: IFFALSE 25459
// for _y = min_y to max_y do
25344: LD_ADDR_VAR 0 12
25348: PUSH
25349: DOUBLE
25350: LD_VAR 0 8
25354: DEC
25355: ST_TO_ADDR
25356: LD_VAR 0 10
25360: PUSH
25361: FOR_TO
25362: IFFALSE 25455
// begin if not ValidHex ( _x , _y ) then
25364: LD_VAR 0 11
25368: PPUSH
25369: LD_VAR 0 12
25373: PPUSH
25374: CALL_OW 488
25378: NOT
25379: IFFALSE 25383
// continue ;
25381: GO 25361
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25383: LD_VAR 0 11
25387: PPUSH
25388: LD_VAR 0 12
25392: PPUSH
25393: CALL_OW 351
25397: PUSH
25398: LD_VAR 0 11
25402: PPUSH
25403: LD_VAR 0 12
25407: PPUSH
25408: CALL_OW 554
25412: AND
25413: IFFALSE 25453
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25415: LD_ADDR_VAR 0 13
25419: PUSH
25420: LD_VAR 0 13
25424: PPUSH
25425: LD_VAR 0 13
25429: PUSH
25430: LD_INT 1
25432: PLUS
25433: PPUSH
25434: LD_VAR 0 11
25438: PUSH
25439: LD_VAR 0 12
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 2
25452: ST_TO_ADDR
// end ;
25453: GO 25361
25455: POP
25456: POP
25457: GO 25341
25459: POP
25460: POP
// if not list then
25461: LD_VAR 0 13
25465: NOT
25466: IFFALSE 25470
// exit ;
25468: GO 25541
// for i in list do
25470: LD_ADDR_VAR 0 6
25474: PUSH
25475: LD_VAR 0 13
25479: PUSH
25480: FOR_IN
25481: IFFALSE 25539
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25483: LD_VAR 0 1
25487: PPUSH
25488: LD_STRING M
25490: PUSH
25491: LD_VAR 0 6
25495: PUSH
25496: LD_INT 1
25498: ARRAY
25499: PUSH
25500: LD_VAR 0 6
25504: PUSH
25505: LD_INT 2
25507: ARRAY
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: PUSH
25530: EMPTY
25531: LIST
25532: PPUSH
25533: CALL_OW 447
25537: GO 25480
25539: POP
25540: POP
// end ;
25541: LD_VAR 0 5
25545: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25546: LD_EXP 114
25550: NOT
25551: IFFALSE 25601
25553: GO 25555
25555: DISABLE
// begin initHack := true ;
25556: LD_ADDR_EXP 114
25560: PUSH
25561: LD_INT 1
25563: ST_TO_ADDR
// hackTanks := [ ] ;
25564: LD_ADDR_EXP 115
25568: PUSH
25569: EMPTY
25570: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25571: LD_ADDR_EXP 116
25575: PUSH
25576: EMPTY
25577: ST_TO_ADDR
// hackLimit := 3 ;
25578: LD_ADDR_EXP 117
25582: PUSH
25583: LD_INT 3
25585: ST_TO_ADDR
// hackDist := 12 ;
25586: LD_ADDR_EXP 118
25590: PUSH
25591: LD_INT 12
25593: ST_TO_ADDR
// hackCounter := [ ] ;
25594: LD_ADDR_EXP 119
25598: PUSH
25599: EMPTY
25600: ST_TO_ADDR
// end ;
25601: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25602: LD_EXP 114
25606: PUSH
25607: LD_INT 34
25609: PUSH
25610: LD_INT 99
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PPUSH
25617: CALL_OW 69
25621: AND
25622: IFFALSE 25875
25624: GO 25626
25626: DISABLE
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
// begin enable ;
25631: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25632: LD_ADDR_VAR 0 1
25636: PUSH
25637: LD_INT 34
25639: PUSH
25640: LD_INT 99
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 69
25651: PUSH
25652: FOR_IN
25653: IFFALSE 25873
// begin if not i in hackTanks then
25655: LD_VAR 0 1
25659: PUSH
25660: LD_EXP 115
25664: IN
25665: NOT
25666: IFFALSE 25749
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25668: LD_ADDR_EXP 115
25672: PUSH
25673: LD_EXP 115
25677: PPUSH
25678: LD_EXP 115
25682: PUSH
25683: LD_INT 1
25685: PLUS
25686: PPUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 1
25696: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25697: LD_ADDR_EXP 116
25701: PUSH
25702: LD_EXP 116
25706: PPUSH
25707: LD_EXP 116
25711: PUSH
25712: LD_INT 1
25714: PLUS
25715: PPUSH
25716: EMPTY
25717: PPUSH
25718: CALL_OW 1
25722: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25723: LD_ADDR_EXP 119
25727: PUSH
25728: LD_EXP 119
25732: PPUSH
25733: LD_EXP 119
25737: PUSH
25738: LD_INT 1
25740: PLUS
25741: PPUSH
25742: EMPTY
25743: PPUSH
25744: CALL_OW 1
25748: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 302
25758: NOT
25759: IFFALSE 25772
// begin HackUnlinkAll ( i ) ;
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL 25878 0 1
// continue ;
25770: GO 25652
// end ; HackCheckCapturedStatus ( i ) ;
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL 26321 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: LD_INT 81
25788: PUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 255
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 33
25805: PUSH
25806: LD_INT 3
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 91
25815: PUSH
25816: LD_VAR 0 1
25820: PUSH
25821: LD_EXP 118
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 50
25833: PUSH
25834: EMPTY
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 69
25847: ST_TO_ADDR
// if not tmp then
25848: LD_VAR 0 2
25852: NOT
25853: IFFALSE 25857
// continue ;
25855: GO 25652
// HackLink ( i , tmp ) ;
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_VAR 0 2
25866: PPUSH
25867: CALL 26014 0 2
// end ;
25871: GO 25652
25873: POP
25874: POP
// end ;
25875: PPOPN 2
25877: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
// if not hack in hackTanks then
25883: LD_VAR 0 1
25887: PUSH
25888: LD_EXP 115
25892: IN
25893: NOT
25894: IFFALSE 25898
// exit ;
25896: GO 26009
// index := GetElementIndex ( hackTanks , hack ) ;
25898: LD_ADDR_VAR 0 4
25902: PUSH
25903: LD_EXP 115
25907: PPUSH
25908: LD_VAR 0 1
25912: PPUSH
25913: CALL 33626 0 2
25917: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25918: LD_EXP 116
25922: PUSH
25923: LD_VAR 0 4
25927: ARRAY
25928: IFFALSE 26009
// begin for i in hackTanksCaptured [ index ] do
25930: LD_ADDR_VAR 0 3
25934: PUSH
25935: LD_EXP 116
25939: PUSH
25940: LD_VAR 0 4
25944: ARRAY
25945: PUSH
25946: FOR_IN
25947: IFFALSE 25973
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25949: LD_VAR 0 3
25953: PUSH
25954: LD_INT 1
25956: ARRAY
25957: PPUSH
25958: LD_VAR 0 3
25962: PUSH
25963: LD_INT 2
25965: ARRAY
25966: PPUSH
25967: CALL_OW 235
25971: GO 25946
25973: POP
25974: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25975: LD_ADDR_EXP 116
25979: PUSH
25980: LD_EXP 116
25984: PPUSH
25985: LD_VAR 0 4
25989: PPUSH
25990: EMPTY
25991: PPUSH
25992: CALL_OW 1
25996: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25997: LD_VAR 0 1
26001: PPUSH
26002: LD_INT 0
26004: PPUSH
26005: CALL_OW 505
// end ; end ;
26009: LD_VAR 0 2
26013: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26014: LD_INT 0
26016: PPUSH
26017: PPUSH
26018: PPUSH
// if not hack in hackTanks or not vehicles then
26019: LD_VAR 0 1
26023: PUSH
26024: LD_EXP 115
26028: IN
26029: NOT
26030: PUSH
26031: LD_VAR 0 2
26035: NOT
26036: OR
26037: IFFALSE 26041
// exit ;
26039: GO 26316
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26041: LD_ADDR_VAR 0 2
26045: PUSH
26046: LD_VAR 0 1
26050: PPUSH
26051: LD_VAR 0 2
26055: PPUSH
26056: LD_INT 1
26058: PPUSH
26059: LD_INT 1
26061: PPUSH
26062: CALL 34276 0 4
26066: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26067: LD_ADDR_VAR 0 5
26071: PUSH
26072: LD_EXP 115
26076: PPUSH
26077: LD_VAR 0 1
26081: PPUSH
26082: CALL 33626 0 2
26086: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26087: LD_EXP 116
26091: PUSH
26092: LD_VAR 0 5
26096: ARRAY
26097: PUSH
26098: LD_EXP 117
26102: LESS
26103: IFFALSE 26292
// begin for i := 1 to vehicles do
26105: LD_ADDR_VAR 0 4
26109: PUSH
26110: DOUBLE
26111: LD_INT 1
26113: DEC
26114: ST_TO_ADDR
26115: LD_VAR 0 2
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26290
// begin if hackTanksCaptured [ index ] = hackLimit then
26123: LD_EXP 116
26127: PUSH
26128: LD_VAR 0 5
26132: ARRAY
26133: PUSH
26134: LD_EXP 117
26138: EQUAL
26139: IFFALSE 26143
// break ;
26141: GO 26290
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26143: LD_ADDR_EXP 119
26147: PUSH
26148: LD_EXP 119
26152: PPUSH
26153: LD_VAR 0 5
26157: PPUSH
26158: LD_EXP 119
26162: PUSH
26163: LD_VAR 0 5
26167: ARRAY
26168: PUSH
26169: LD_INT 1
26171: PLUS
26172: PPUSH
26173: CALL_OW 1
26177: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26178: LD_ADDR_EXP 116
26182: PUSH
26183: LD_EXP 116
26187: PPUSH
26188: LD_VAR 0 5
26192: PUSH
26193: LD_EXP 116
26197: PUSH
26198: LD_VAR 0 5
26202: ARRAY
26203: PUSH
26204: LD_INT 1
26206: PLUS
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PPUSH
26212: LD_VAR 0 2
26216: PUSH
26217: LD_VAR 0 4
26221: ARRAY
26222: PUSH
26223: LD_VAR 0 2
26227: PUSH
26228: LD_VAR 0 4
26232: ARRAY
26233: PPUSH
26234: CALL_OW 255
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL 33841 0 3
26247: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26248: LD_VAR 0 2
26252: PUSH
26253: LD_VAR 0 4
26257: ARRAY
26258: PPUSH
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL_OW 255
26268: PPUSH
26269: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26273: LD_VAR 0 2
26277: PUSH
26278: LD_VAR 0 4
26282: ARRAY
26283: PPUSH
26284: CALL_OW 141
// end ;
26288: GO 26120
26290: POP
26291: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26292: LD_VAR 0 1
26296: PPUSH
26297: LD_EXP 116
26301: PUSH
26302: LD_VAR 0 5
26306: ARRAY
26307: PUSH
26308: LD_INT 0
26310: PLUS
26311: PPUSH
26312: CALL_OW 505
// end ;
26316: LD_VAR 0 3
26320: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26321: LD_INT 0
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
// if not hack in hackTanks then
26327: LD_VAR 0 1
26331: PUSH
26332: LD_EXP 115
26336: IN
26337: NOT
26338: IFFALSE 26342
// exit ;
26340: GO 26582
// index := GetElementIndex ( hackTanks , hack ) ;
26342: LD_ADDR_VAR 0 4
26346: PUSH
26347: LD_EXP 115
26351: PPUSH
26352: LD_VAR 0 1
26356: PPUSH
26357: CALL 33626 0 2
26361: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26362: LD_ADDR_VAR 0 3
26366: PUSH
26367: DOUBLE
26368: LD_EXP 116
26372: PUSH
26373: LD_VAR 0 4
26377: ARRAY
26378: INC
26379: ST_TO_ADDR
26380: LD_INT 1
26382: PUSH
26383: FOR_DOWNTO
26384: IFFALSE 26556
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26386: LD_ADDR_VAR 0 5
26390: PUSH
26391: LD_EXP 116
26395: PUSH
26396: LD_VAR 0 4
26400: ARRAY
26401: PUSH
26402: LD_VAR 0 3
26406: ARRAY
26407: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26408: LD_VAR 0 5
26412: PUSH
26413: LD_INT 1
26415: ARRAY
26416: PPUSH
26417: CALL_OW 302
26421: NOT
26422: PUSH
26423: LD_VAR 0 5
26427: PUSH
26428: LD_INT 1
26430: ARRAY
26431: PPUSH
26432: CALL_OW 255
26436: PUSH
26437: LD_VAR 0 1
26441: PPUSH
26442: CALL_OW 255
26446: NONEQUAL
26447: OR
26448: IFFALSE 26554
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26450: LD_VAR 0 5
26454: PUSH
26455: LD_INT 1
26457: ARRAY
26458: PPUSH
26459: CALL_OW 305
26463: PUSH
26464: LD_VAR 0 5
26468: PUSH
26469: LD_INT 1
26471: ARRAY
26472: PPUSH
26473: CALL_OW 255
26477: PUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 255
26487: EQUAL
26488: AND
26489: IFFALSE 26513
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26491: LD_VAR 0 5
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: PPUSH
26500: LD_VAR 0 5
26504: PUSH
26505: LD_INT 2
26507: ARRAY
26508: PPUSH
26509: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26513: LD_ADDR_EXP 116
26517: PUSH
26518: LD_EXP 116
26522: PPUSH
26523: LD_VAR 0 4
26527: PPUSH
26528: LD_EXP 116
26532: PUSH
26533: LD_VAR 0 4
26537: ARRAY
26538: PPUSH
26539: LD_VAR 0 3
26543: PPUSH
26544: CALL_OW 3
26548: PPUSH
26549: CALL_OW 1
26553: ST_TO_ADDR
// end ; end ;
26554: GO 26383
26556: POP
26557: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26558: LD_VAR 0 1
26562: PPUSH
26563: LD_EXP 116
26567: PUSH
26568: LD_VAR 0 4
26572: ARRAY
26573: PUSH
26574: LD_INT 0
26576: PLUS
26577: PPUSH
26578: CALL_OW 505
// end ;
26582: LD_VAR 0 2
26586: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26587: LD_INT 0
26589: PPUSH
26590: PPUSH
26591: PPUSH
26592: PPUSH
// if not hack in hackTanks then
26593: LD_VAR 0 1
26597: PUSH
26598: LD_EXP 115
26602: IN
26603: NOT
26604: IFFALSE 26608
// exit ;
26606: GO 26693
// index := GetElementIndex ( hackTanks , hack ) ;
26608: LD_ADDR_VAR 0 5
26612: PUSH
26613: LD_EXP 115
26617: PPUSH
26618: LD_VAR 0 1
26622: PPUSH
26623: CALL 33626 0 2
26627: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26628: LD_ADDR_VAR 0 4
26632: PUSH
26633: DOUBLE
26634: LD_INT 1
26636: DEC
26637: ST_TO_ADDR
26638: LD_EXP 116
26642: PUSH
26643: LD_VAR 0 5
26647: ARRAY
26648: PUSH
26649: FOR_TO
26650: IFFALSE 26691
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26652: LD_EXP 116
26656: PUSH
26657: LD_VAR 0 5
26661: ARRAY
26662: PUSH
26663: LD_VAR 0 4
26667: ARRAY
26668: PUSH
26669: LD_INT 1
26671: ARRAY
26672: PUSH
26673: LD_VAR 0 2
26677: EQUAL
26678: IFFALSE 26689
// KillUnit ( vehicle ) ;
26680: LD_VAR 0 2
26684: PPUSH
26685: CALL_OW 66
26689: GO 26649
26691: POP
26692: POP
// end ;
26693: LD_VAR 0 3
26697: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26698: LD_EXP 120
26702: NOT
26703: IFFALSE 26738
26705: GO 26707
26707: DISABLE
// begin initMiner := true ;
26708: LD_ADDR_EXP 120
26712: PUSH
26713: LD_INT 1
26715: ST_TO_ADDR
// minersList := [ ] ;
26716: LD_ADDR_EXP 121
26720: PUSH
26721: EMPTY
26722: ST_TO_ADDR
// minerMinesList := [ ] ;
26723: LD_ADDR_EXP 122
26727: PUSH
26728: EMPTY
26729: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26730: LD_ADDR_EXP 123
26734: PUSH
26735: LD_INT 5
26737: ST_TO_ADDR
// end ;
26738: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26739: LD_EXP 120
26743: PUSH
26744: LD_INT 34
26746: PUSH
26747: LD_INT 81
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PPUSH
26754: CALL_OW 69
26758: AND
26759: IFFALSE 27220
26761: GO 26763
26763: DISABLE
26764: LD_INT 0
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
// begin enable ;
26770: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26771: LD_ADDR_VAR 0 1
26775: PUSH
26776: LD_INT 34
26778: PUSH
26779: LD_INT 81
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PPUSH
26786: CALL_OW 69
26790: PUSH
26791: FOR_IN
26792: IFFALSE 26864
// begin if not i in minersList then
26794: LD_VAR 0 1
26798: PUSH
26799: LD_EXP 121
26803: IN
26804: NOT
26805: IFFALSE 26862
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26807: LD_ADDR_EXP 121
26811: PUSH
26812: LD_EXP 121
26816: PPUSH
26817: LD_EXP 121
26821: PUSH
26822: LD_INT 1
26824: PLUS
26825: PPUSH
26826: LD_VAR 0 1
26830: PPUSH
26831: CALL_OW 1
26835: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26836: LD_ADDR_EXP 122
26840: PUSH
26841: LD_EXP 122
26845: PPUSH
26846: LD_EXP 122
26850: PUSH
26851: LD_INT 1
26853: PLUS
26854: PPUSH
26855: EMPTY
26856: PPUSH
26857: CALL_OW 1
26861: ST_TO_ADDR
// end end ;
26862: GO 26791
26864: POP
26865: POP
// for i := minerMinesList downto 1 do
26866: LD_ADDR_VAR 0 1
26870: PUSH
26871: DOUBLE
26872: LD_EXP 122
26876: INC
26877: ST_TO_ADDR
26878: LD_INT 1
26880: PUSH
26881: FOR_DOWNTO
26882: IFFALSE 27218
// begin if IsLive ( minersList [ i ] ) then
26884: LD_EXP 121
26888: PUSH
26889: LD_VAR 0 1
26893: ARRAY
26894: PPUSH
26895: CALL_OW 300
26899: IFFALSE 26927
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26901: LD_EXP 121
26905: PUSH
26906: LD_VAR 0 1
26910: ARRAY
26911: PPUSH
26912: LD_EXP 122
26916: PUSH
26917: LD_VAR 0 1
26921: ARRAY
26922: PPUSH
26923: CALL_OW 505
// if not minerMinesList [ i ] then
26927: LD_EXP 122
26931: PUSH
26932: LD_VAR 0 1
26936: ARRAY
26937: NOT
26938: IFFALSE 26942
// continue ;
26940: GO 26881
// for j := minerMinesList [ i ] downto 1 do
26942: LD_ADDR_VAR 0 2
26946: PUSH
26947: DOUBLE
26948: LD_EXP 122
26952: PUSH
26953: LD_VAR 0 1
26957: ARRAY
26958: INC
26959: ST_TO_ADDR
26960: LD_INT 1
26962: PUSH
26963: FOR_DOWNTO
26964: IFFALSE 27214
// begin side := GetSide ( minersList [ i ] ) ;
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_EXP 121
26975: PUSH
26976: LD_VAR 0 1
26980: ARRAY
26981: PPUSH
26982: CALL_OW 255
26986: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26987: LD_ADDR_VAR 0 4
26991: PUSH
26992: LD_EXP 122
26996: PUSH
26997: LD_VAR 0 1
27001: ARRAY
27002: PUSH
27003: LD_VAR 0 2
27007: ARRAY
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PPUSH
27013: LD_EXP 122
27017: PUSH
27018: LD_VAR 0 1
27022: ARRAY
27023: PUSH
27024: LD_VAR 0 2
27028: ARRAY
27029: PUSH
27030: LD_INT 2
27032: ARRAY
27033: PPUSH
27034: CALL_OW 428
27038: ST_TO_ADDR
// if not tmp then
27039: LD_VAR 0 4
27043: NOT
27044: IFFALSE 27048
// continue ;
27046: GO 26963
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27048: LD_VAR 0 4
27052: PUSH
27053: LD_INT 81
27055: PUSH
27056: LD_VAR 0 3
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PPUSH
27065: CALL_OW 69
27069: IN
27070: PUSH
27071: LD_EXP 122
27075: PUSH
27076: LD_VAR 0 1
27080: ARRAY
27081: PUSH
27082: LD_VAR 0 2
27086: ARRAY
27087: PUSH
27088: LD_INT 1
27090: ARRAY
27091: PPUSH
27092: LD_EXP 122
27096: PUSH
27097: LD_VAR 0 1
27101: ARRAY
27102: PUSH
27103: LD_VAR 0 2
27107: ARRAY
27108: PUSH
27109: LD_INT 2
27111: ARRAY
27112: PPUSH
27113: CALL_OW 458
27117: AND
27118: IFFALSE 27212
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27120: LD_EXP 122
27124: PUSH
27125: LD_VAR 0 1
27129: ARRAY
27130: PUSH
27131: LD_VAR 0 2
27135: ARRAY
27136: PUSH
27137: LD_INT 1
27139: ARRAY
27140: PPUSH
27141: LD_EXP 122
27145: PUSH
27146: LD_VAR 0 1
27150: ARRAY
27151: PUSH
27152: LD_VAR 0 2
27156: ARRAY
27157: PUSH
27158: LD_INT 2
27160: ARRAY
27161: PPUSH
27162: LD_VAR 0 3
27166: PPUSH
27167: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27171: LD_ADDR_EXP 122
27175: PUSH
27176: LD_EXP 122
27180: PPUSH
27181: LD_VAR 0 1
27185: PPUSH
27186: LD_EXP 122
27190: PUSH
27191: LD_VAR 0 1
27195: ARRAY
27196: PPUSH
27197: LD_VAR 0 2
27201: PPUSH
27202: CALL_OW 3
27206: PPUSH
27207: CALL_OW 1
27211: ST_TO_ADDR
// end ; end ;
27212: GO 26963
27214: POP
27215: POP
// end ;
27216: GO 26881
27218: POP
27219: POP
// end ;
27220: PPOPN 4
27222: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27223: LD_INT 0
27225: PPUSH
27226: PPUSH
// result := false ;
27227: LD_ADDR_VAR 0 4
27231: PUSH
27232: LD_INT 0
27234: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 264
27244: PUSH
27245: LD_INT 81
27247: EQUAL
27248: NOT
27249: IFFALSE 27253
// exit ;
27251: GO 27493
// index := GetElementIndex ( minersList , unit ) ;
27253: LD_ADDR_VAR 0 5
27257: PUSH
27258: LD_EXP 121
27262: PPUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL 33626 0 2
27272: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27273: LD_EXP 122
27277: PUSH
27278: LD_VAR 0 5
27282: ARRAY
27283: PUSH
27284: LD_EXP 123
27288: GREATEREQUAL
27289: IFFALSE 27293
// exit ;
27291: GO 27493
// ComMoveXY ( unit , x , y ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27312: LD_INT 35
27314: PPUSH
27315: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_VAR 0 3
27333: PPUSH
27334: CALL 64981 0 3
27338: NOT
27339: PUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL_OW 314
27349: AND
27350: IFFALSE 27354
// exit ;
27352: GO 27493
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: LD_VAR 0 3
27363: PPUSH
27364: CALL_OW 428
27368: PUSH
27369: LD_VAR 0 1
27373: EQUAL
27374: PUSH
27375: LD_VAR 0 1
27379: PPUSH
27380: CALL_OW 314
27384: NOT
27385: AND
27386: IFFALSE 27312
// PlaySoundXY ( x , y , PlantMine ) ;
27388: LD_VAR 0 2
27392: PPUSH
27393: LD_VAR 0 3
27397: PPUSH
27398: LD_STRING PlantMine
27400: PPUSH
27401: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_VAR 0 3
27414: PPUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 255
27424: PPUSH
27425: LD_INT 0
27427: PPUSH
27428: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27432: LD_ADDR_EXP 122
27436: PUSH
27437: LD_EXP 122
27441: PPUSH
27442: LD_VAR 0 5
27446: PUSH
27447: LD_EXP 122
27451: PUSH
27452: LD_VAR 0 5
27456: ARRAY
27457: PUSH
27458: LD_INT 1
27460: PLUS
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: LD_VAR 0 2
27470: PUSH
27471: LD_VAR 0 3
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PPUSH
27480: CALL 33841 0 3
27484: ST_TO_ADDR
// result := true ;
27485: LD_ADDR_VAR 0 4
27489: PUSH
27490: LD_INT 1
27492: ST_TO_ADDR
// end ;
27493: LD_VAR 0 4
27497: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27498: LD_INT 0
27500: PPUSH
27501: PPUSH
27502: PPUSH
// if not unit in minersList then
27503: LD_VAR 0 1
27507: PUSH
27508: LD_EXP 121
27512: IN
27513: NOT
27514: IFFALSE 27518
// exit ;
27516: GO 27910
// index := GetElementIndex ( minersList , unit ) ;
27518: LD_ADDR_VAR 0 6
27522: PUSH
27523: LD_EXP 121
27527: PPUSH
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL 33626 0 2
27537: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27538: LD_ADDR_VAR 0 5
27542: PUSH
27543: DOUBLE
27544: LD_EXP 122
27548: PUSH
27549: LD_VAR 0 6
27553: ARRAY
27554: INC
27555: ST_TO_ADDR
27556: LD_INT 1
27558: PUSH
27559: FOR_DOWNTO
27560: IFFALSE 27721
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27562: LD_EXP 122
27566: PUSH
27567: LD_VAR 0 6
27571: ARRAY
27572: PUSH
27573: LD_VAR 0 5
27577: ARRAY
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PUSH
27583: LD_VAR 0 2
27587: EQUAL
27588: PUSH
27589: LD_EXP 122
27593: PUSH
27594: LD_VAR 0 6
27598: ARRAY
27599: PUSH
27600: LD_VAR 0 5
27604: ARRAY
27605: PUSH
27606: LD_INT 2
27608: ARRAY
27609: PUSH
27610: LD_VAR 0 3
27614: EQUAL
27615: AND
27616: IFFALSE 27719
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27618: LD_EXP 122
27622: PUSH
27623: LD_VAR 0 6
27627: ARRAY
27628: PUSH
27629: LD_VAR 0 5
27633: ARRAY
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: PPUSH
27639: LD_EXP 122
27643: PUSH
27644: LD_VAR 0 6
27648: ARRAY
27649: PUSH
27650: LD_VAR 0 5
27654: ARRAY
27655: PUSH
27656: LD_INT 2
27658: ARRAY
27659: PPUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 255
27669: PPUSH
27670: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27674: LD_ADDR_EXP 122
27678: PUSH
27679: LD_EXP 122
27683: PPUSH
27684: LD_VAR 0 6
27688: PPUSH
27689: LD_EXP 122
27693: PUSH
27694: LD_VAR 0 6
27698: ARRAY
27699: PPUSH
27700: LD_VAR 0 5
27704: PPUSH
27705: CALL_OW 3
27709: PPUSH
27710: CALL_OW 1
27714: ST_TO_ADDR
// exit ;
27715: POP
27716: POP
27717: GO 27910
// end ; end ;
27719: GO 27559
27721: POP
27722: POP
// for i := minerMinesList [ index ] downto 1 do
27723: LD_ADDR_VAR 0 5
27727: PUSH
27728: DOUBLE
27729: LD_EXP 122
27733: PUSH
27734: LD_VAR 0 6
27738: ARRAY
27739: INC
27740: ST_TO_ADDR
27741: LD_INT 1
27743: PUSH
27744: FOR_DOWNTO
27745: IFFALSE 27908
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27747: LD_EXP 122
27751: PUSH
27752: LD_VAR 0 6
27756: ARRAY
27757: PUSH
27758: LD_VAR 0 5
27762: ARRAY
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: PPUSH
27768: LD_EXP 122
27772: PUSH
27773: LD_VAR 0 6
27777: ARRAY
27778: PUSH
27779: LD_VAR 0 5
27783: ARRAY
27784: PUSH
27785: LD_INT 2
27787: ARRAY
27788: PPUSH
27789: LD_VAR 0 2
27793: PPUSH
27794: LD_VAR 0 3
27798: PPUSH
27799: CALL_OW 298
27803: PUSH
27804: LD_INT 6
27806: LESS
27807: IFFALSE 27906
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27809: LD_EXP 122
27813: PUSH
27814: LD_VAR 0 6
27818: ARRAY
27819: PUSH
27820: LD_VAR 0 5
27824: ARRAY
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: LD_EXP 122
27834: PUSH
27835: LD_VAR 0 6
27839: ARRAY
27840: PUSH
27841: LD_VAR 0 5
27845: ARRAY
27846: PUSH
27847: LD_INT 2
27849: ARRAY
27850: PPUSH
27851: LD_VAR 0 1
27855: PPUSH
27856: CALL_OW 255
27860: PPUSH
27861: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27865: LD_ADDR_EXP 122
27869: PUSH
27870: LD_EXP 122
27874: PPUSH
27875: LD_VAR 0 6
27879: PPUSH
27880: LD_EXP 122
27884: PUSH
27885: LD_VAR 0 6
27889: ARRAY
27890: PPUSH
27891: LD_VAR 0 5
27895: PPUSH
27896: CALL_OW 3
27900: PPUSH
27901: CALL_OW 1
27905: ST_TO_ADDR
// end ; end ;
27906: GO 27744
27908: POP
27909: POP
// end ;
27910: LD_VAR 0 4
27914: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27915: LD_INT 0
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 264
27935: PUSH
27936: LD_INT 81
27938: EQUAL
27939: NOT
27940: PUSH
27941: LD_VAR 0 1
27945: PUSH
27946: LD_EXP 121
27950: IN
27951: NOT
27952: OR
27953: IFFALSE 27957
// exit ;
27955: GO 28279
// index := GetElementIndex ( minersList , unit ) ;
27957: LD_ADDR_VAR 0 6
27961: PUSH
27962: LD_EXP 121
27966: PPUSH
27967: LD_VAR 0 1
27971: PPUSH
27972: CALL 33626 0 2
27976: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27977: LD_ADDR_VAR 0 8
27981: PUSH
27982: LD_EXP 123
27986: PUSH
27987: LD_EXP 122
27991: PUSH
27992: LD_VAR 0 6
27996: ARRAY
27997: MINUS
27998: ST_TO_ADDR
// if not minesFreeAmount then
27999: LD_VAR 0 8
28003: NOT
28004: IFFALSE 28008
// exit ;
28006: GO 28279
// tmp := [ ] ;
28008: LD_ADDR_VAR 0 7
28012: PUSH
28013: EMPTY
28014: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28015: LD_ADDR_VAR 0 5
28019: PUSH
28020: DOUBLE
28021: LD_INT 1
28023: DEC
28024: ST_TO_ADDR
28025: LD_VAR 0 8
28029: PUSH
28030: FOR_TO
28031: IFFALSE 28226
// begin _d := rand ( 0 , 5 ) ;
28033: LD_ADDR_VAR 0 11
28037: PUSH
28038: LD_INT 0
28040: PPUSH
28041: LD_INT 5
28043: PPUSH
28044: CALL_OW 12
28048: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28049: LD_ADDR_VAR 0 12
28053: PUSH
28054: LD_INT 2
28056: PPUSH
28057: LD_INT 6
28059: PPUSH
28060: CALL_OW 12
28064: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28065: LD_ADDR_VAR 0 9
28069: PUSH
28070: LD_VAR 0 2
28074: PPUSH
28075: LD_VAR 0 11
28079: PPUSH
28080: LD_VAR 0 12
28084: PPUSH
28085: CALL_OW 272
28089: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28090: LD_ADDR_VAR 0 10
28094: PUSH
28095: LD_VAR 0 3
28099: PPUSH
28100: LD_VAR 0 11
28104: PPUSH
28105: LD_VAR 0 12
28109: PPUSH
28110: CALL_OW 273
28114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28115: LD_VAR 0 9
28119: PPUSH
28120: LD_VAR 0 10
28124: PPUSH
28125: CALL_OW 488
28129: PUSH
28130: LD_VAR 0 9
28134: PUSH
28135: LD_VAR 0 10
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_VAR 0 7
28148: IN
28149: NOT
28150: AND
28151: PUSH
28152: LD_VAR 0 9
28156: PPUSH
28157: LD_VAR 0 10
28161: PPUSH
28162: CALL_OW 458
28166: NOT
28167: AND
28168: IFFALSE 28210
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28170: LD_ADDR_VAR 0 7
28174: PUSH
28175: LD_VAR 0 7
28179: PPUSH
28180: LD_VAR 0 7
28184: PUSH
28185: LD_INT 1
28187: PLUS
28188: PPUSH
28189: LD_VAR 0 9
28193: PUSH
28194: LD_VAR 0 10
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PPUSH
28203: CALL_OW 1
28207: ST_TO_ADDR
28208: GO 28224
// i := i - 1 ;
28210: LD_ADDR_VAR 0 5
28214: PUSH
28215: LD_VAR 0 5
28219: PUSH
28220: LD_INT 1
28222: MINUS
28223: ST_TO_ADDR
// end ;
28224: GO 28030
28226: POP
28227: POP
// for i in tmp do
28228: LD_ADDR_VAR 0 5
28232: PUSH
28233: LD_VAR 0 7
28237: PUSH
28238: FOR_IN
28239: IFFALSE 28277
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28241: LD_VAR 0 1
28245: PPUSH
28246: LD_VAR 0 5
28250: PUSH
28251: LD_INT 1
28253: ARRAY
28254: PPUSH
28255: LD_VAR 0 5
28259: PUSH
28260: LD_INT 2
28262: ARRAY
28263: PPUSH
28264: CALL 27223 0 3
28268: NOT
28269: IFFALSE 28275
// exit ;
28271: POP
28272: POP
28273: GO 28279
28275: GO 28238
28277: POP
28278: POP
// end ;
28279: LD_VAR 0 4
28283: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28284: LD_INT 0
28286: PPUSH
28287: PPUSH
28288: PPUSH
28289: PPUSH
28290: PPUSH
28291: PPUSH
28292: PPUSH
// if not GetClass ( unit ) = class_sniper then
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL_OW 257
28302: PUSH
28303: LD_INT 5
28305: EQUAL
28306: NOT
28307: IFFALSE 28311
// exit ;
28309: GO 28699
// dist := 8 ;
28311: LD_ADDR_VAR 0 5
28315: PUSH
28316: LD_INT 8
28318: ST_TO_ADDR
// viewRange := 12 ;
28319: LD_ADDR_VAR 0 7
28323: PUSH
28324: LD_INT 12
28326: ST_TO_ADDR
// side := GetSide ( unit ) ;
28327: LD_ADDR_VAR 0 6
28331: PUSH
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 255
28341: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28342: LD_INT 61
28344: PPUSH
28345: LD_VAR 0 6
28349: PPUSH
28350: CALL_OW 321
28354: PUSH
28355: LD_INT 2
28357: EQUAL
28358: IFFALSE 28368
// viewRange := 16 ;
28360: LD_ADDR_VAR 0 7
28364: PUSH
28365: LD_INT 16
28367: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28368: LD_VAR 0 1
28372: PPUSH
28373: LD_VAR 0 2
28377: PPUSH
28378: LD_VAR 0 3
28382: PPUSH
28383: CALL_OW 297
28387: PUSH
28388: LD_VAR 0 5
28392: GREATER
28393: IFFALSE 28472
// begin ComMoveXY ( unit , x , y ) ;
28395: LD_VAR 0 1
28399: PPUSH
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_VAR 0 3
28409: PPUSH
28410: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28414: LD_INT 35
28416: PPUSH
28417: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28421: LD_VAR 0 1
28425: PPUSH
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_VAR 0 3
28435: PPUSH
28436: CALL 64981 0 3
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28699
// until GetDistUnitXY ( unit , x , y ) < dist ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: CALL_OW 297
28464: PUSH
28465: LD_VAR 0 5
28469: LESS
28470: IFFALSE 28414
// end ; ComTurnXY ( unit , x , y ) ;
28472: LD_VAR 0 1
28476: PPUSH
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 3
28486: PPUSH
28487: CALL_OW 118
// wait ( 5 ) ;
28491: LD_INT 5
28493: PPUSH
28494: CALL_OW 67
// _d := GetDir ( unit ) ;
28498: LD_ADDR_VAR 0 10
28502: PUSH
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 254
28512: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28513: LD_ADDR_VAR 0 8
28517: PUSH
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL_OW 250
28527: PPUSH
28528: LD_VAR 0 10
28532: PPUSH
28533: LD_VAR 0 5
28537: PPUSH
28538: CALL_OW 272
28542: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28543: LD_ADDR_VAR 0 9
28547: PUSH
28548: LD_VAR 0 1
28552: PPUSH
28553: CALL_OW 251
28557: PPUSH
28558: LD_VAR 0 10
28562: PPUSH
28563: LD_VAR 0 5
28567: PPUSH
28568: CALL_OW 273
28572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28573: LD_VAR 0 8
28577: PPUSH
28578: LD_VAR 0 9
28582: PPUSH
28583: CALL_OW 488
28587: NOT
28588: IFFALSE 28592
// exit ;
28590: GO 28699
// ComAnimCustom ( unit , 1 ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 1
28599: PPUSH
28600: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28604: LD_VAR 0 8
28608: PPUSH
28609: LD_VAR 0 9
28613: PPUSH
28614: LD_VAR 0 6
28618: PPUSH
28619: LD_VAR 0 7
28623: PPUSH
28624: CALL_OW 330
// repeat wait ( 1 ) ;
28628: LD_INT 1
28630: PPUSH
28631: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28635: LD_VAR 0 1
28639: PPUSH
28640: CALL_OW 316
28644: PUSH
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 314
28654: OR
28655: PUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 302
28665: NOT
28666: OR
28667: PUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 301
28677: OR
28678: IFFALSE 28628
// RemoveSeeing ( _x , _y , side ) ;
28680: LD_VAR 0 8
28684: PPUSH
28685: LD_VAR 0 9
28689: PPUSH
28690: LD_VAR 0 6
28694: PPUSH
28695: CALL_OW 331
// end ; end_of_file
28699: LD_VAR 0 4
28703: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28704: LD_INT 0
28706: PPUSH
28707: PPUSH
// if exist_mode then
28708: LD_VAR 0 2
28712: IFFALSE 28737
// unit := CreateCharacter ( prefix & ident ) else
28714: LD_ADDR_VAR 0 5
28718: PUSH
28719: LD_VAR 0 3
28723: PUSH
28724: LD_VAR 0 1
28728: STR
28729: PPUSH
28730: CALL_OW 34
28734: ST_TO_ADDR
28735: GO 28752
// unit := NewCharacter ( ident ) ;
28737: LD_ADDR_VAR 0 5
28741: PUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 25
28751: ST_TO_ADDR
// result := unit ;
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_VAR 0 5
28761: ST_TO_ADDR
// end ;
28762: LD_VAR 0 4
28766: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28767: LD_INT 0
28769: PPUSH
28770: PPUSH
// if not side or not nation then
28771: LD_VAR 0 1
28775: NOT
28776: PUSH
28777: LD_VAR 0 2
28781: NOT
28782: OR
28783: IFFALSE 28787
// exit ;
28785: GO 29555
// case nation of nation_american :
28787: LD_VAR 0 2
28791: PUSH
28792: LD_INT 1
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 29014
28800: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28801: LD_ADDR_VAR 0 4
28805: PUSH
28806: LD_INT 35
28808: PUSH
28809: LD_INT 45
28811: PUSH
28812: LD_INT 46
28814: PUSH
28815: LD_INT 47
28817: PUSH
28818: LD_INT 82
28820: PUSH
28821: LD_INT 83
28823: PUSH
28824: LD_INT 84
28826: PUSH
28827: LD_INT 85
28829: PUSH
28830: LD_INT 86
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 2
28838: PUSH
28839: LD_INT 6
28841: PUSH
28842: LD_INT 15
28844: PUSH
28845: LD_INT 16
28847: PUSH
28848: LD_INT 7
28850: PUSH
28851: LD_INT 12
28853: PUSH
28854: LD_INT 13
28856: PUSH
28857: LD_INT 10
28859: PUSH
28860: LD_INT 14
28862: PUSH
28863: LD_INT 20
28865: PUSH
28866: LD_INT 21
28868: PUSH
28869: LD_INT 22
28871: PUSH
28872: LD_INT 25
28874: PUSH
28875: LD_INT 32
28877: PUSH
28878: LD_INT 27
28880: PUSH
28881: LD_INT 36
28883: PUSH
28884: LD_INT 69
28886: PUSH
28887: LD_INT 39
28889: PUSH
28890: LD_INT 34
28892: PUSH
28893: LD_INT 40
28895: PUSH
28896: LD_INT 48
28898: PUSH
28899: LD_INT 49
28901: PUSH
28902: LD_INT 50
28904: PUSH
28905: LD_INT 51
28907: PUSH
28908: LD_INT 52
28910: PUSH
28911: LD_INT 53
28913: PUSH
28914: LD_INT 54
28916: PUSH
28917: LD_INT 55
28919: PUSH
28920: LD_INT 56
28922: PUSH
28923: LD_INT 57
28925: PUSH
28926: LD_INT 58
28928: PUSH
28929: LD_INT 59
28931: PUSH
28932: LD_INT 60
28934: PUSH
28935: LD_INT 61
28937: PUSH
28938: LD_INT 62
28940: PUSH
28941: LD_INT 80
28943: PUSH
28944: LD_INT 82
28946: PUSH
28947: LD_INT 83
28949: PUSH
28950: LD_INT 84
28952: PUSH
28953: LD_INT 85
28955: PUSH
28956: LD_INT 86
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
29012: GO 29479
29014: LD_INT 2
29016: DOUBLE
29017: EQUAL
29018: IFTRUE 29022
29020: GO 29248
29022: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29023: LD_ADDR_VAR 0 4
29027: PUSH
29028: LD_INT 35
29030: PUSH
29031: LD_INT 45
29033: PUSH
29034: LD_INT 46
29036: PUSH
29037: LD_INT 47
29039: PUSH
29040: LD_INT 82
29042: PUSH
29043: LD_INT 83
29045: PUSH
29046: LD_INT 84
29048: PUSH
29049: LD_INT 85
29051: PUSH
29052: LD_INT 87
29054: PUSH
29055: LD_INT 70
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: LD_INT 11
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: LD_INT 4
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: LD_INT 6
29075: PUSH
29076: LD_INT 15
29078: PUSH
29079: LD_INT 18
29081: PUSH
29082: LD_INT 7
29084: PUSH
29085: LD_INT 17
29087: PUSH
29088: LD_INT 8
29090: PUSH
29091: LD_INT 20
29093: PUSH
29094: LD_INT 21
29096: PUSH
29097: LD_INT 22
29099: PUSH
29100: LD_INT 72
29102: PUSH
29103: LD_INT 26
29105: PUSH
29106: LD_INT 69
29108: PUSH
29109: LD_INT 39
29111: PUSH
29112: LD_INT 40
29114: PUSH
29115: LD_INT 41
29117: PUSH
29118: LD_INT 42
29120: PUSH
29121: LD_INT 43
29123: PUSH
29124: LD_INT 48
29126: PUSH
29127: LD_INT 49
29129: PUSH
29130: LD_INT 50
29132: PUSH
29133: LD_INT 51
29135: PUSH
29136: LD_INT 52
29138: PUSH
29139: LD_INT 53
29141: PUSH
29142: LD_INT 54
29144: PUSH
29145: LD_INT 55
29147: PUSH
29148: LD_INT 56
29150: PUSH
29151: LD_INT 60
29153: PUSH
29154: LD_INT 61
29156: PUSH
29157: LD_INT 62
29159: PUSH
29160: LD_INT 66
29162: PUSH
29163: LD_INT 67
29165: PUSH
29166: LD_INT 68
29168: PUSH
29169: LD_INT 81
29171: PUSH
29172: LD_INT 82
29174: PUSH
29175: LD_INT 83
29177: PUSH
29178: LD_INT 84
29180: PUSH
29181: LD_INT 85
29183: PUSH
29184: LD_INT 87
29186: PUSH
29187: LD_INT 88
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: ST_TO_ADDR
29246: GO 29479
29248: LD_INT 3
29250: DOUBLE
29251: EQUAL
29252: IFTRUE 29256
29254: GO 29478
29256: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29257: LD_ADDR_VAR 0 4
29261: PUSH
29262: LD_INT 46
29264: PUSH
29265: LD_INT 47
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 82
29276: PUSH
29277: LD_INT 83
29279: PUSH
29280: LD_INT 84
29282: PUSH
29283: LD_INT 85
29285: PUSH
29286: LD_INT 86
29288: PUSH
29289: LD_INT 11
29291: PUSH
29292: LD_INT 9
29294: PUSH
29295: LD_INT 20
29297: PUSH
29298: LD_INT 19
29300: PUSH
29301: LD_INT 21
29303: PUSH
29304: LD_INT 24
29306: PUSH
29307: LD_INT 22
29309: PUSH
29310: LD_INT 25
29312: PUSH
29313: LD_INT 28
29315: PUSH
29316: LD_INT 29
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 31
29324: PUSH
29325: LD_INT 37
29327: PUSH
29328: LD_INT 38
29330: PUSH
29331: LD_INT 32
29333: PUSH
29334: LD_INT 27
29336: PUSH
29337: LD_INT 33
29339: PUSH
29340: LD_INT 69
29342: PUSH
29343: LD_INT 39
29345: PUSH
29346: LD_INT 34
29348: PUSH
29349: LD_INT 40
29351: PUSH
29352: LD_INT 71
29354: PUSH
29355: LD_INT 23
29357: PUSH
29358: LD_INT 44
29360: PUSH
29361: LD_INT 48
29363: PUSH
29364: LD_INT 49
29366: PUSH
29367: LD_INT 50
29369: PUSH
29370: LD_INT 51
29372: PUSH
29373: LD_INT 52
29375: PUSH
29376: LD_INT 53
29378: PUSH
29379: LD_INT 54
29381: PUSH
29382: LD_INT 55
29384: PUSH
29385: LD_INT 56
29387: PUSH
29388: LD_INT 57
29390: PUSH
29391: LD_INT 58
29393: PUSH
29394: LD_INT 59
29396: PUSH
29397: LD_INT 63
29399: PUSH
29400: LD_INT 64
29402: PUSH
29403: LD_INT 65
29405: PUSH
29406: LD_INT 82
29408: PUSH
29409: LD_INT 83
29411: PUSH
29412: LD_INT 84
29414: PUSH
29415: LD_INT 85
29417: PUSH
29418: LD_INT 86
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
29476: GO 29479
29478: POP
// if state > - 1 and state < 3 then
29479: LD_VAR 0 3
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: GREATER
29488: PUSH
29489: LD_VAR 0 3
29493: PUSH
29494: LD_INT 3
29496: LESS
29497: AND
29498: IFFALSE 29555
// for i in result do
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_VAR 0 4
29509: PUSH
29510: FOR_IN
29511: IFFALSE 29553
// if GetTech ( i , side ) <> state then
29513: LD_VAR 0 5
29517: PPUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 321
29527: PUSH
29528: LD_VAR 0 3
29532: NONEQUAL
29533: IFFALSE 29551
// result := result diff i ;
29535: LD_ADDR_VAR 0 4
29539: PUSH
29540: LD_VAR 0 4
29544: PUSH
29545: LD_VAR 0 5
29549: DIFF
29550: ST_TO_ADDR
29551: GO 29510
29553: POP
29554: POP
// end ;
29555: LD_VAR 0 4
29559: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
29564: PPUSH
// result := true ;
29565: LD_ADDR_VAR 0 3
29569: PUSH
29570: LD_INT 1
29572: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29573: LD_ADDR_VAR 0 5
29577: PUSH
29578: LD_VAR 0 2
29582: PPUSH
29583: CALL_OW 480
29587: ST_TO_ADDR
// if not tmp then
29588: LD_VAR 0 5
29592: NOT
29593: IFFALSE 29597
// exit ;
29595: GO 29646
// for i in tmp do
29597: LD_ADDR_VAR 0 4
29601: PUSH
29602: LD_VAR 0 5
29606: PUSH
29607: FOR_IN
29608: IFFALSE 29644
// if GetTech ( i , side ) <> state_researched then
29610: LD_VAR 0 4
29614: PPUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 321
29624: PUSH
29625: LD_INT 2
29627: NONEQUAL
29628: IFFALSE 29642
// begin result := false ;
29630: LD_ADDR_VAR 0 3
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// exit ;
29638: POP
29639: POP
29640: GO 29646
// end ;
29642: GO 29607
29644: POP
29645: POP
// end ;
29646: LD_VAR 0 3
29650: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29651: LD_INT 0
29653: PPUSH
29654: PPUSH
29655: PPUSH
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29666: LD_VAR 0 1
29670: NOT
29671: PUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 257
29681: PUSH
29682: LD_INT 9
29684: NONEQUAL
29685: OR
29686: IFFALSE 29690
// exit ;
29688: GO 30263
// side := GetSide ( unit ) ;
29690: LD_ADDR_VAR 0 9
29694: PUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 255
29704: ST_TO_ADDR
// tech_space := tech_spacanom ;
29705: LD_ADDR_VAR 0 12
29709: PUSH
29710: LD_INT 29
29712: ST_TO_ADDR
// tech_time := tech_taurad ;
29713: LD_ADDR_VAR 0 13
29717: PUSH
29718: LD_INT 28
29720: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29721: LD_ADDR_VAR 0 11
29725: PUSH
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL_OW 310
29735: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29736: LD_VAR 0 11
29740: PPUSH
29741: CALL_OW 247
29745: PUSH
29746: LD_INT 2
29748: EQUAL
29749: IFFALSE 29753
// exit ;
29751: GO 30263
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29753: LD_ADDR_VAR 0 8
29757: PUSH
29758: LD_INT 81
29760: PUSH
29761: LD_VAR 0 9
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: LD_INT 21
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PPUSH
29791: CALL_OW 69
29795: ST_TO_ADDR
// if not tmp then
29796: LD_VAR 0 8
29800: NOT
29801: IFFALSE 29805
// exit ;
29803: GO 30263
// if in_unit then
29805: LD_VAR 0 11
29809: IFFALSE 29833
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29811: LD_ADDR_VAR 0 10
29815: PUSH
29816: LD_VAR 0 8
29820: PPUSH
29821: LD_VAR 0 11
29825: PPUSH
29826: CALL_OW 74
29830: ST_TO_ADDR
29831: GO 29853
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29833: LD_ADDR_VAR 0 10
29837: PUSH
29838: LD_VAR 0 8
29842: PPUSH
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 74
29852: ST_TO_ADDR
// if not enemy then
29853: LD_VAR 0 10
29857: NOT
29858: IFFALSE 29862
// exit ;
29860: GO 30263
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29862: LD_VAR 0 11
29866: PUSH
29867: LD_VAR 0 11
29871: PPUSH
29872: LD_VAR 0 10
29876: PPUSH
29877: CALL_OW 296
29881: PUSH
29882: LD_INT 13
29884: GREATER
29885: AND
29886: PUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: LD_VAR 0 10
29896: PPUSH
29897: CALL_OW 296
29901: PUSH
29902: LD_INT 12
29904: GREATER
29905: OR
29906: IFFALSE 29910
// exit ;
29908: GO 30263
// missile := [ 1 ] ;
29910: LD_ADDR_VAR 0 14
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: EMPTY
29919: LIST
29920: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29921: LD_VAR 0 9
29925: PPUSH
29926: LD_VAR 0 12
29930: PPUSH
29931: CALL_OW 325
29935: IFFALSE 29964
// missile := Replace ( missile , missile + 1 , 2 ) ;
29937: LD_ADDR_VAR 0 14
29941: PUSH
29942: LD_VAR 0 14
29946: PPUSH
29947: LD_VAR 0 14
29951: PUSH
29952: LD_INT 1
29954: PLUS
29955: PPUSH
29956: LD_INT 2
29958: PPUSH
29959: CALL_OW 1
29963: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29964: LD_VAR 0 9
29968: PPUSH
29969: LD_VAR 0 13
29973: PPUSH
29974: CALL_OW 325
29978: PUSH
29979: LD_VAR 0 10
29983: PPUSH
29984: CALL_OW 255
29988: PPUSH
29989: LD_VAR 0 13
29993: PPUSH
29994: CALL_OW 325
29998: NOT
29999: AND
30000: IFFALSE 30029
// missile := Replace ( missile , missile + 1 , 3 ) ;
30002: LD_ADDR_VAR 0 14
30006: PUSH
30007: LD_VAR 0 14
30011: PPUSH
30012: LD_VAR 0 14
30016: PUSH
30017: LD_INT 1
30019: PLUS
30020: PPUSH
30021: LD_INT 3
30023: PPUSH
30024: CALL_OW 1
30028: ST_TO_ADDR
// if missile < 2 then
30029: LD_VAR 0 14
30033: PUSH
30034: LD_INT 2
30036: LESS
30037: IFFALSE 30041
// exit ;
30039: GO 30263
// x := GetX ( enemy ) ;
30041: LD_ADDR_VAR 0 4
30045: PUSH
30046: LD_VAR 0 10
30050: PPUSH
30051: CALL_OW 250
30055: ST_TO_ADDR
// y := GetY ( enemy ) ;
30056: LD_ADDR_VAR 0 5
30060: PUSH
30061: LD_VAR 0 10
30065: PPUSH
30066: CALL_OW 251
30070: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30071: LD_ADDR_VAR 0 6
30075: PUSH
30076: LD_VAR 0 4
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PPUSH
30085: LD_INT 1
30087: PPUSH
30088: CALL_OW 12
30092: PLUS
30093: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30094: LD_ADDR_VAR 0 7
30098: PUSH
30099: LD_VAR 0 5
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PPUSH
30108: LD_INT 1
30110: PPUSH
30111: CALL_OW 12
30115: PLUS
30116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30117: LD_VAR 0 6
30121: PPUSH
30122: LD_VAR 0 7
30126: PPUSH
30127: CALL_OW 488
30131: NOT
30132: IFFALSE 30154
// begin _x := x ;
30134: LD_ADDR_VAR 0 6
30138: PUSH
30139: LD_VAR 0 4
30143: ST_TO_ADDR
// _y := y ;
30144: LD_ADDR_VAR 0 7
30148: PUSH
30149: LD_VAR 0 5
30153: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30154: LD_ADDR_VAR 0 3
30158: PUSH
30159: LD_INT 1
30161: PPUSH
30162: LD_VAR 0 14
30166: PPUSH
30167: CALL_OW 12
30171: ST_TO_ADDR
// case i of 1 :
30172: LD_VAR 0 3
30176: PUSH
30177: LD_INT 1
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30202
30185: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30186: LD_VAR 0 1
30190: PPUSH
30191: LD_VAR 0 10
30195: PPUSH
30196: CALL_OW 115
30200: GO 30263
30202: LD_INT 2
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 30232
30210: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30211: LD_VAR 0 1
30215: PPUSH
30216: LD_VAR 0 6
30220: PPUSH
30221: LD_VAR 0 7
30225: PPUSH
30226: CALL_OW 153
30230: GO 30263
30232: LD_INT 3
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30262
30240: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30241: LD_VAR 0 1
30245: PPUSH
30246: LD_VAR 0 6
30250: PPUSH
30251: LD_VAR 0 7
30255: PPUSH
30256: CALL_OW 154
30260: GO 30263
30262: POP
// end ;
30263: LD_VAR 0 2
30267: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30268: LD_INT 0
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
// if not unit or not building then
30276: LD_VAR 0 1
30280: NOT
30281: PUSH
30282: LD_VAR 0 2
30286: NOT
30287: OR
30288: IFFALSE 30292
// exit ;
30290: GO 30450
// x := GetX ( building ) ;
30292: LD_ADDR_VAR 0 5
30296: PUSH
30297: LD_VAR 0 2
30301: PPUSH
30302: CALL_OW 250
30306: ST_TO_ADDR
// y := GetY ( building ) ;
30307: LD_ADDR_VAR 0 6
30311: PUSH
30312: LD_VAR 0 2
30316: PPUSH
30317: CALL_OW 251
30321: ST_TO_ADDR
// for i = 0 to 5 do
30322: LD_ADDR_VAR 0 4
30326: PUSH
30327: DOUBLE
30328: LD_INT 0
30330: DEC
30331: ST_TO_ADDR
30332: LD_INT 5
30334: PUSH
30335: FOR_TO
30336: IFFALSE 30448
// begin _x := ShiftX ( x , i , 3 ) ;
30338: LD_ADDR_VAR 0 7
30342: PUSH
30343: LD_VAR 0 5
30347: PPUSH
30348: LD_VAR 0 4
30352: PPUSH
30353: LD_INT 3
30355: PPUSH
30356: CALL_OW 272
30360: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30361: LD_ADDR_VAR 0 8
30365: PUSH
30366: LD_VAR 0 6
30370: PPUSH
30371: LD_VAR 0 4
30375: PPUSH
30376: LD_INT 3
30378: PPUSH
30379: CALL_OW 273
30383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30384: LD_VAR 0 7
30388: PPUSH
30389: LD_VAR 0 8
30393: PPUSH
30394: CALL_OW 488
30398: NOT
30399: IFFALSE 30403
// continue ;
30401: GO 30335
// if HexInfo ( _x , _y ) = 0 then
30403: LD_VAR 0 7
30407: PPUSH
30408: LD_VAR 0 8
30412: PPUSH
30413: CALL_OW 428
30417: PUSH
30418: LD_INT 0
30420: EQUAL
30421: IFFALSE 30446
// begin ComMoveXY ( unit , _x , _y ) ;
30423: LD_VAR 0 1
30427: PPUSH
30428: LD_VAR 0 7
30432: PPUSH
30433: LD_VAR 0 8
30437: PPUSH
30438: CALL_OW 111
// exit ;
30442: POP
30443: POP
30444: GO 30450
// end ; end ;
30446: GO 30335
30448: POP
30449: POP
// end ;
30450: LD_VAR 0 3
30454: RET
// export function ScanBase ( side , base_area ) ; begin
30455: LD_INT 0
30457: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30458: LD_ADDR_VAR 0 3
30462: PUSH
30463: LD_VAR 0 2
30467: PPUSH
30468: LD_INT 81
30470: PUSH
30471: LD_VAR 0 1
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PPUSH
30480: CALL_OW 70
30484: ST_TO_ADDR
// end ;
30485: LD_VAR 0 3
30489: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30490: LD_INT 0
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
// result := false ;
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: LD_INT 0
30503: ST_TO_ADDR
// side := GetSide ( unit ) ;
30504: LD_ADDR_VAR 0 3
30508: PUSH
30509: LD_VAR 0 1
30513: PPUSH
30514: CALL_OW 255
30518: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30519: LD_ADDR_VAR 0 4
30523: PUSH
30524: LD_VAR 0 1
30528: PPUSH
30529: CALL_OW 248
30533: ST_TO_ADDR
// case nat of 1 :
30534: LD_VAR 0 4
30538: PUSH
30539: LD_INT 1
30541: DOUBLE
30542: EQUAL
30543: IFTRUE 30547
30545: GO 30558
30547: POP
// tech := tech_lassight ; 2 :
30548: LD_ADDR_VAR 0 5
30552: PUSH
30553: LD_INT 12
30555: ST_TO_ADDR
30556: GO 30597
30558: LD_INT 2
30560: DOUBLE
30561: EQUAL
30562: IFTRUE 30566
30564: GO 30577
30566: POP
// tech := tech_mortar ; 3 :
30567: LD_ADDR_VAR 0 5
30571: PUSH
30572: LD_INT 41
30574: ST_TO_ADDR
30575: GO 30597
30577: LD_INT 3
30579: DOUBLE
30580: EQUAL
30581: IFTRUE 30585
30583: GO 30596
30585: POP
// tech := tech_bazooka ; end ;
30586: LD_ADDR_VAR 0 5
30590: PUSH
30591: LD_INT 44
30593: ST_TO_ADDR
30594: GO 30597
30596: POP
// if Researched ( side , tech ) then
30597: LD_VAR 0 3
30601: PPUSH
30602: LD_VAR 0 5
30606: PPUSH
30607: CALL_OW 325
30611: IFFALSE 30638
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30613: LD_ADDR_VAR 0 2
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: LD_INT 8
30623: PUSH
30624: LD_INT 9
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: PUSH
30632: LD_VAR 0 4
30636: ARRAY
30637: ST_TO_ADDR
// end ;
30638: LD_VAR 0 2
30642: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30643: LD_INT 0
30645: PPUSH
30646: PPUSH
30647: PPUSH
// if not mines then
30648: LD_VAR 0 2
30652: NOT
30653: IFFALSE 30657
// exit ;
30655: GO 30801
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30657: LD_ADDR_VAR 0 5
30661: PUSH
30662: LD_INT 81
30664: PUSH
30665: LD_VAR 0 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 21
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PPUSH
30695: CALL_OW 69
30699: ST_TO_ADDR
// for i in mines do
30700: LD_ADDR_VAR 0 4
30704: PUSH
30705: LD_VAR 0 2
30709: PUSH
30710: FOR_IN
30711: IFFALSE 30799
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30713: LD_VAR 0 4
30717: PUSH
30718: LD_INT 1
30720: ARRAY
30721: PPUSH
30722: LD_VAR 0 4
30726: PUSH
30727: LD_INT 2
30729: ARRAY
30730: PPUSH
30731: CALL_OW 458
30735: NOT
30736: IFFALSE 30740
// continue ;
30738: GO 30710
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30740: LD_VAR 0 4
30744: PUSH
30745: LD_INT 1
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 4
30753: PUSH
30754: LD_INT 2
30756: ARRAY
30757: PPUSH
30758: CALL_OW 428
30762: PUSH
30763: LD_VAR 0 5
30767: IN
30768: IFFALSE 30797
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30770: LD_VAR 0 4
30774: PUSH
30775: LD_INT 1
30777: ARRAY
30778: PPUSH
30779: LD_VAR 0 4
30783: PUSH
30784: LD_INT 2
30786: ARRAY
30787: PPUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL_OW 456
// end ;
30797: GO 30710
30799: POP
30800: POP
// end ;
30801: LD_VAR 0 3
30805: RET
// export function Count ( array ) ; var i ; begin
30806: LD_INT 0
30808: PPUSH
30809: PPUSH
// result := 0 ;
30810: LD_ADDR_VAR 0 2
30814: PUSH
30815: LD_INT 0
30817: ST_TO_ADDR
// for i in array do
30818: LD_ADDR_VAR 0 3
30822: PUSH
30823: LD_VAR 0 1
30827: PUSH
30828: FOR_IN
30829: IFFALSE 30853
// if i then
30831: LD_VAR 0 3
30835: IFFALSE 30851
// result := result + 1 ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_VAR 0 2
30846: PUSH
30847: LD_INT 1
30849: PLUS
30850: ST_TO_ADDR
30851: GO 30828
30853: POP
30854: POP
// end ;
30855: LD_VAR 0 2
30859: RET
// export function IsEmpty ( building ) ; begin
30860: LD_INT 0
30862: PPUSH
// if not building then
30863: LD_VAR 0 1
30867: NOT
30868: IFFALSE 30872
// exit ;
30870: GO 30915
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_VAR 0 1
30881: PUSH
30882: LD_INT 22
30884: PUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 255
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 58
30901: PUSH
30902: EMPTY
30903: LIST
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PPUSH
30909: CALL_OW 69
30913: IN
30914: ST_TO_ADDR
// end ;
30915: LD_VAR 0 2
30919: RET
// export function IsNotFull ( building ) ; var places ; begin
30920: LD_INT 0
30922: PPUSH
30923: PPUSH
// if not building then
30924: LD_VAR 0 1
30928: NOT
30929: IFFALSE 30933
// exit ;
30931: GO 31104
// result := false ;
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_INT 0
30940: ST_TO_ADDR
// places := 0 ;
30941: LD_ADDR_VAR 0 3
30945: PUSH
30946: LD_INT 0
30948: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 266
30958: PUSH
30959: LD_INT 0
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 31021
30965: LD_INT 1
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 31021
30971: LD_INT 6
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 31021
30977: LD_INT 7
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 31021
30983: LD_INT 8
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 31021
30989: LD_INT 4
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 31021
30995: LD_INT 5
30997: DOUBLE
30998: EQUAL
30999: IFTRUE 31021
31001: LD_INT 2
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31021
31007: LD_INT 3
31009: DOUBLE
31010: EQUAL
31011: IFTRUE 31021
31013: LD_INT 35
31015: DOUBLE
31016: EQUAL
31017: IFTRUE 31021
31019: GO 31032
31021: POP
// places := 6 ; b_bunker , b_breastwork :
31022: LD_ADDR_VAR 0 3
31026: PUSH
31027: LD_INT 6
31029: ST_TO_ADDR
31030: GO 31077
31032: LD_INT 32
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31046
31038: LD_INT 31
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31057
31046: POP
// places := 1 ; b_control_tower :
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_INT 1
31054: ST_TO_ADDR
31055: GO 31077
31057: LD_INT 36
31059: DOUBLE
31060: EQUAL
31061: IFTRUE 31065
31063: GO 31076
31065: POP
// places := 3 ; end ;
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: LD_INT 3
31073: ST_TO_ADDR
31074: GO 31077
31076: POP
// if places then
31077: LD_VAR 0 3
31081: IFFALSE 31104
// result := UnitsInside ( building ) < places ;
31083: LD_ADDR_VAR 0 2
31087: PUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 313
31097: PUSH
31098: LD_VAR 0 3
31102: LESS
31103: ST_TO_ADDR
// end ;
31104: LD_VAR 0 2
31108: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
31113: PPUSH
31114: PPUSH
// tmp := [ ] ;
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: EMPTY
31121: ST_TO_ADDR
// list := [ ] ;
31122: LD_ADDR_VAR 0 5
31126: PUSH
31127: EMPTY
31128: ST_TO_ADDR
// for i = 16 to 25 do
31129: LD_ADDR_VAR 0 4
31133: PUSH
31134: DOUBLE
31135: LD_INT 16
31137: DEC
31138: ST_TO_ADDR
31139: LD_INT 25
31141: PUSH
31142: FOR_TO
31143: IFFALSE 31216
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_VAR 0 3
31154: PUSH
31155: LD_INT 22
31157: PUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 255
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 91
31174: PUSH
31175: LD_VAR 0 1
31179: PUSH
31180: LD_INT 6
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 30
31190: PUSH
31191: LD_VAR 0 4
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: PUSH
31205: EMPTY
31206: LIST
31207: PPUSH
31208: CALL_OW 69
31212: ADD
31213: ST_TO_ADDR
31214: GO 31142
31216: POP
31217: POP
// for i = 1 to tmp do
31218: LD_ADDR_VAR 0 4
31222: PUSH
31223: DOUBLE
31224: LD_INT 1
31226: DEC
31227: ST_TO_ADDR
31228: LD_VAR 0 3
31232: PUSH
31233: FOR_TO
31234: IFFALSE 31322
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31236: LD_ADDR_VAR 0 5
31240: PUSH
31241: LD_VAR 0 5
31245: PUSH
31246: LD_VAR 0 3
31250: PUSH
31251: LD_VAR 0 4
31255: ARRAY
31256: PPUSH
31257: CALL_OW 266
31261: PUSH
31262: LD_VAR 0 3
31266: PUSH
31267: LD_VAR 0 4
31271: ARRAY
31272: PPUSH
31273: CALL_OW 250
31277: PUSH
31278: LD_VAR 0 3
31282: PUSH
31283: LD_VAR 0 4
31287: ARRAY
31288: PPUSH
31289: CALL_OW 251
31293: PUSH
31294: LD_VAR 0 3
31298: PUSH
31299: LD_VAR 0 4
31303: ARRAY
31304: PPUSH
31305: CALL_OW 254
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: ADD
31319: ST_TO_ADDR
31320: GO 31233
31322: POP
31323: POP
// result := list ;
31324: LD_ADDR_VAR 0 2
31328: PUSH
31329: LD_VAR 0 5
31333: ST_TO_ADDR
// end ;
31334: LD_VAR 0 2
31338: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
// if not factory then
31348: LD_VAR 0 1
31352: NOT
31353: IFFALSE 31357
// exit ;
31355: GO 31950
// if control = control_apeman then
31357: LD_VAR 0 4
31361: PUSH
31362: LD_INT 5
31364: EQUAL
31365: IFFALSE 31474
// begin tmp := UnitsInside ( factory ) ;
31367: LD_ADDR_VAR 0 8
31371: PUSH
31372: LD_VAR 0 1
31376: PPUSH
31377: CALL_OW 313
31381: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31382: LD_VAR 0 8
31386: PPUSH
31387: LD_INT 25
31389: PUSH
31390: LD_INT 12
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 72
31401: NOT
31402: IFFALSE 31412
// control := control_manual ;
31404: LD_ADDR_VAR 0 4
31408: PUSH
31409: LD_INT 1
31411: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31412: LD_ADDR_VAR 0 8
31416: PUSH
31417: LD_VAR 0 1
31421: PPUSH
31422: CALL 31109 0 1
31426: ST_TO_ADDR
// if tmp then
31427: LD_VAR 0 8
31431: IFFALSE 31474
// begin for i in tmp do
31433: LD_ADDR_VAR 0 7
31437: PUSH
31438: LD_VAR 0 8
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31472
// if i [ 1 ] = b_ext_radio then
31446: LD_VAR 0 7
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: PUSH
31455: LD_INT 22
31457: EQUAL
31458: IFFALSE 31470
// begin control := control_remote ;
31460: LD_ADDR_VAR 0 4
31464: PUSH
31465: LD_INT 2
31467: ST_TO_ADDR
// break ;
31468: GO 31472
// end ;
31470: GO 31443
31472: POP
31473: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31474: LD_VAR 0 1
31478: PPUSH
31479: LD_VAR 0 2
31483: PPUSH
31484: LD_VAR 0 3
31488: PPUSH
31489: LD_VAR 0 4
31493: PPUSH
31494: LD_VAR 0 5
31498: PPUSH
31499: CALL_OW 448
31503: IFFALSE 31538
// begin result := [ chassis , engine , control , weapon ] ;
31505: LD_ADDR_VAR 0 6
31509: PUSH
31510: LD_VAR 0 2
31514: PUSH
31515: LD_VAR 0 3
31519: PUSH
31520: LD_VAR 0 4
31524: PUSH
31525: LD_VAR 0 5
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// exit ;
31536: GO 31950
// end ; _chassis := AvailableChassisList ( factory ) ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_VAR 0 1
31547: PPUSH
31548: CALL_OW 475
31552: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31553: LD_ADDR_VAR 0 11
31557: PUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL_OW 476
31567: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31568: LD_ADDR_VAR 0 12
31572: PUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL_OW 477
31582: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31583: LD_ADDR_VAR 0 10
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 478
31597: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31598: LD_VAR 0 9
31602: NOT
31603: PUSH
31604: LD_VAR 0 11
31608: NOT
31609: OR
31610: PUSH
31611: LD_VAR 0 12
31615: NOT
31616: OR
31617: PUSH
31618: LD_VAR 0 10
31622: NOT
31623: OR
31624: IFFALSE 31659
// begin result := [ chassis , engine , control , weapon ] ;
31626: LD_ADDR_VAR 0 6
31630: PUSH
31631: LD_VAR 0 2
31635: PUSH
31636: LD_VAR 0 3
31640: PUSH
31641: LD_VAR 0 4
31645: PUSH
31646: LD_VAR 0 5
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: ST_TO_ADDR
// exit ;
31657: GO 31950
// end ; if not chassis in _chassis then
31659: LD_VAR 0 2
31663: PUSH
31664: LD_VAR 0 9
31668: IN
31669: NOT
31670: IFFALSE 31696
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31672: LD_ADDR_VAR 0 2
31676: PUSH
31677: LD_VAR 0 9
31681: PUSH
31682: LD_INT 1
31684: PPUSH
31685: LD_VAR 0 9
31689: PPUSH
31690: CALL_OW 12
31694: ARRAY
31695: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31696: LD_VAR 0 2
31700: PPUSH
31701: LD_VAR 0 3
31705: PPUSH
31706: CALL 31955 0 2
31710: NOT
31711: IFFALSE 31770
// repeat engine := _engine [ 1 ] ;
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_VAR 0 11
31722: PUSH
31723: LD_INT 1
31725: ARRAY
31726: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31727: LD_ADDR_VAR 0 11
31731: PUSH
31732: LD_VAR 0 11
31736: PPUSH
31737: LD_INT 1
31739: PPUSH
31740: CALL_OW 3
31744: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31745: LD_VAR 0 2
31749: PPUSH
31750: LD_VAR 0 3
31754: PPUSH
31755: CALL 31955 0 2
31759: PUSH
31760: LD_VAR 0 11
31764: PUSH
31765: EMPTY
31766: EQUAL
31767: OR
31768: IFFALSE 31713
// if not control in _control then
31770: LD_VAR 0 4
31774: PUSH
31775: LD_VAR 0 12
31779: IN
31780: NOT
31781: IFFALSE 31807
// control := _control [ rand ( 1 , _control ) ] ;
31783: LD_ADDR_VAR 0 4
31787: PUSH
31788: LD_VAR 0 12
31792: PUSH
31793: LD_INT 1
31795: PPUSH
31796: LD_VAR 0 12
31800: PPUSH
31801: CALL_OW 12
31805: ARRAY
31806: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31807: LD_VAR 0 2
31811: PPUSH
31812: LD_VAR 0 5
31816: PPUSH
31817: CALL 32175 0 2
31821: NOT
31822: IFFALSE 31881
// repeat weapon := _weapon [ 1 ] ;
31824: LD_ADDR_VAR 0 5
31828: PUSH
31829: LD_VAR 0 10
31833: PUSH
31834: LD_INT 1
31836: ARRAY
31837: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31838: LD_ADDR_VAR 0 10
31842: PUSH
31843: LD_VAR 0 10
31847: PPUSH
31848: LD_INT 1
31850: PPUSH
31851: CALL_OW 3
31855: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31856: LD_VAR 0 2
31860: PPUSH
31861: LD_VAR 0 5
31865: PPUSH
31866: CALL 32175 0 2
31870: PUSH
31871: LD_VAR 0 10
31875: PUSH
31876: EMPTY
31877: EQUAL
31878: OR
31879: IFFALSE 31824
// result := [ ] ;
31881: LD_ADDR_VAR 0 6
31885: PUSH
31886: EMPTY
31887: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31888: LD_VAR 0 1
31892: PPUSH
31893: LD_VAR 0 2
31897: PPUSH
31898: LD_VAR 0 3
31902: PPUSH
31903: LD_VAR 0 4
31907: PPUSH
31908: LD_VAR 0 5
31912: PPUSH
31913: CALL_OW 448
31917: IFFALSE 31950
// result := [ chassis , engine , control , weapon ] ;
31919: LD_ADDR_VAR 0 6
31923: PUSH
31924: LD_VAR 0 2
31928: PUSH
31929: LD_VAR 0 3
31933: PUSH
31934: LD_VAR 0 4
31938: PUSH
31939: LD_VAR 0 5
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// end ;
31950: LD_VAR 0 6
31954: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31955: LD_INT 0
31957: PPUSH
// if not chassis or not engine then
31958: LD_VAR 0 1
31962: NOT
31963: PUSH
31964: LD_VAR 0 2
31968: NOT
31969: OR
31970: IFFALSE 31974
// exit ;
31972: GO 32170
// case engine of engine_solar :
31974: LD_VAR 0 2
31978: PUSH
31979: LD_INT 2
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 32025
31987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_INT 11
31995: PUSH
31996: LD_INT 12
31998: PUSH
31999: LD_INT 13
32001: PUSH
32002: LD_INT 14
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 3
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: ST_TO_ADDR
32023: GO 32154
32025: LD_INT 1
32027: DOUBLE
32028: EQUAL
32029: IFTRUE 32033
32031: GO 32095
32033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32034: LD_ADDR_VAR 0 3
32038: PUSH
32039: LD_INT 11
32041: PUSH
32042: LD_INT 12
32044: PUSH
32045: LD_INT 13
32047: PUSH
32048: LD_INT 14
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 3
32059: PUSH
32060: LD_INT 4
32062: PUSH
32063: LD_INT 5
32065: PUSH
32066: LD_INT 21
32068: PUSH
32069: LD_INT 23
32071: PUSH
32072: LD_INT 22
32074: PUSH
32075: LD_INT 24
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
32093: GO 32154
32095: LD_INT 3
32097: DOUBLE
32098: EQUAL
32099: IFTRUE 32103
32101: GO 32153
32103: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32104: LD_ADDR_VAR 0 3
32108: PUSH
32109: LD_INT 13
32111: PUSH
32112: LD_INT 14
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: LD_INT 21
32129: PUSH
32130: LD_INT 22
32132: PUSH
32133: LD_INT 23
32135: PUSH
32136: LD_INT 24
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
32151: GO 32154
32153: POP
// result := ( chassis in result ) ;
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: LD_VAR 0 1
32163: PUSH
32164: LD_VAR 0 3
32168: IN
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 3
32174: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32175: LD_INT 0
32177: PPUSH
// if not chassis or not weapon then
32178: LD_VAR 0 1
32182: NOT
32183: PUSH
32184: LD_VAR 0 2
32188: NOT
32189: OR
32190: IFFALSE 32194
// exit ;
32192: GO 33254
// case weapon of us_machine_gun :
32194: LD_VAR 0 2
32198: PUSH
32199: LD_INT 2
32201: DOUBLE
32202: EQUAL
32203: IFTRUE 32207
32205: GO 32237
32207: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32208: LD_ADDR_VAR 0 3
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: LD_INT 5
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: ST_TO_ADDR
32235: GO 33238
32237: LD_INT 3
32239: DOUBLE
32240: EQUAL
32241: IFTRUE 32245
32243: GO 32275
32245: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32246: LD_ADDR_VAR 0 3
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: LD_INT 5
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: ST_TO_ADDR
32273: GO 33238
32275: LD_INT 11
32277: DOUBLE
32278: EQUAL
32279: IFTRUE 32283
32281: GO 32313
32283: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32284: LD_ADDR_VAR 0 3
32288: PUSH
32289: LD_INT 1
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: LD_INT 4
32300: PUSH
32301: LD_INT 5
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: ST_TO_ADDR
32311: GO 33238
32313: LD_INT 4
32315: DOUBLE
32316: EQUAL
32317: IFTRUE 32321
32319: GO 32347
32321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: LD_INT 4
32335: PUSH
32336: LD_INT 5
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
32345: GO 33238
32347: LD_INT 5
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32381
32355: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32356: LD_ADDR_VAR 0 3
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: LD_INT 4
32369: PUSH
32370: LD_INT 5
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 33238
32381: LD_INT 9
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32415
32389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 2
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: LD_INT 5
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
32413: GO 33238
32415: LD_INT 7
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32423
32421: GO 32449
32423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: LD_INT 5
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: ST_TO_ADDR
32447: GO 33238
32449: LD_INT 12
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32457
32455: GO 32483
32457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32458: LD_ADDR_VAR 0 3
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: LD_INT 3
32468: PUSH
32469: LD_INT 4
32471: PUSH
32472: LD_INT 5
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
32481: GO 33238
32483: LD_INT 13
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32517
32491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32492: LD_ADDR_VAR 0 3
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: LD_INT 5
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
32515: GO 33238
32517: LD_INT 14
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32543
32525: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_INT 4
32533: PUSH
32534: LD_INT 5
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: ST_TO_ADDR
32541: GO 33238
32543: LD_INT 6
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32551
32549: GO 32569
32551: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32552: LD_ADDR_VAR 0 3
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: LD_INT 5
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: ST_TO_ADDR
32567: GO 33238
32569: LD_INT 10
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32595
32577: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: LD_INT 4
32585: PUSH
32586: LD_INT 5
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: ST_TO_ADDR
32593: GO 33238
32595: LD_INT 22
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32603
32601: GO 32629
32603: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32604: LD_ADDR_VAR 0 3
32608: PUSH
32609: LD_INT 11
32611: PUSH
32612: LD_INT 12
32614: PUSH
32615: LD_INT 13
32617: PUSH
32618: LD_INT 14
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
32627: GO 33238
32629: LD_INT 23
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32663
32637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 11
32645: PUSH
32646: LD_INT 12
32648: PUSH
32649: LD_INT 13
32651: PUSH
32652: LD_INT 14
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
32661: GO 33238
32663: LD_INT 24
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32697
32671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32672: LD_ADDR_VAR 0 3
32676: PUSH
32677: LD_INT 11
32679: PUSH
32680: LD_INT 12
32682: PUSH
32683: LD_INT 13
32685: PUSH
32686: LD_INT 14
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: ST_TO_ADDR
32695: GO 33238
32697: LD_INT 30
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32731
32705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32706: LD_ADDR_VAR 0 3
32710: PUSH
32711: LD_INT 11
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: LD_INT 13
32719: PUSH
32720: LD_INT 14
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: ST_TO_ADDR
32729: GO 33238
32731: LD_INT 25
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32739
32737: GO 32757
32739: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32740: LD_ADDR_VAR 0 3
32744: PUSH
32745: LD_INT 13
32747: PUSH
32748: LD_INT 14
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: ST_TO_ADDR
32755: GO 33238
32757: LD_INT 27
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32783
32765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_INT 13
32773: PUSH
32774: LD_INT 14
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: ST_TO_ADDR
32781: GO 33238
32783: LD_INT 92
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32817
32791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32792: LD_ADDR_VAR 0 3
32796: PUSH
32797: LD_INT 11
32799: PUSH
32800: LD_INT 12
32802: PUSH
32803: LD_INT 13
32805: PUSH
32806: LD_INT 14
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: ST_TO_ADDR
32815: GO 33238
32817: LD_INT 28
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32825
32823: GO 32843
32825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_INT 13
32833: PUSH
32834: LD_INT 14
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: ST_TO_ADDR
32841: GO 33238
32843: LD_INT 29
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32869
32851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_INT 13
32859: PUSH
32860: LD_INT 14
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: ST_TO_ADDR
32867: GO 33238
32869: LD_INT 31
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32895
32877: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32878: LD_ADDR_VAR 0 3
32882: PUSH
32883: LD_INT 13
32885: PUSH
32886: LD_INT 14
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: ST_TO_ADDR
32893: GO 33238
32895: LD_INT 26
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32921
32903: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32904: LD_ADDR_VAR 0 3
32908: PUSH
32909: LD_INT 13
32911: PUSH
32912: LD_INT 14
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: ST_TO_ADDR
32919: GO 33238
32921: LD_INT 42
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32955
32929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32930: LD_ADDR_VAR 0 3
32934: PUSH
32935: LD_INT 21
32937: PUSH
32938: LD_INT 22
32940: PUSH
32941: LD_INT 23
32943: PUSH
32944: LD_INT 24
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: ST_TO_ADDR
32953: GO 33238
32955: LD_INT 43
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32989
32963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32964: LD_ADDR_VAR 0 3
32968: PUSH
32969: LD_INT 21
32971: PUSH
32972: LD_INT 22
32974: PUSH
32975: LD_INT 23
32977: PUSH
32978: LD_INT 24
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: ST_TO_ADDR
32987: GO 33238
32989: LD_INT 44
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33023
32997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: LD_INT 21
33005: PUSH
33006: LD_INT 22
33008: PUSH
33009: LD_INT 23
33011: PUSH
33012: LD_INT 24
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: ST_TO_ADDR
33021: GO 33238
33023: LD_INT 45
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33057
33031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33032: LD_ADDR_VAR 0 3
33036: PUSH
33037: LD_INT 21
33039: PUSH
33040: LD_INT 22
33042: PUSH
33043: LD_INT 23
33045: PUSH
33046: LD_INT 24
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
33055: GO 33238
33057: LD_INT 49
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33065
33063: GO 33091
33065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33066: LD_ADDR_VAR 0 3
33070: PUSH
33071: LD_INT 21
33073: PUSH
33074: LD_INT 22
33076: PUSH
33077: LD_INT 23
33079: PUSH
33080: LD_INT 24
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
33089: GO 33238
33091: LD_INT 51
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33099
33097: GO 33125
33099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33100: LD_ADDR_VAR 0 3
33104: PUSH
33105: LD_INT 21
33107: PUSH
33108: LD_INT 22
33110: PUSH
33111: LD_INT 23
33113: PUSH
33114: LD_INT 24
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: ST_TO_ADDR
33123: GO 33238
33125: LD_INT 52
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33133
33131: GO 33159
33133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_INT 21
33141: PUSH
33142: LD_INT 22
33144: PUSH
33145: LD_INT 23
33147: PUSH
33148: LD_INT 24
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: ST_TO_ADDR
33157: GO 33238
33159: LD_INT 53
33161: DOUBLE
33162: EQUAL
33163: IFTRUE 33167
33165: GO 33185
33167: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_INT 23
33175: PUSH
33176: LD_INT 24
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: ST_TO_ADDR
33183: GO 33238
33185: LD_INT 46
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33211
33193: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 23
33201: PUSH
33202: LD_INT 24
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: ST_TO_ADDR
33209: GO 33238
33211: LD_INT 47
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33237
33219: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_INT 23
33227: PUSH
33228: LD_INT 24
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: ST_TO_ADDR
33235: GO 33238
33237: POP
// result := ( chassis in result ) ;
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_VAR 0 1
33247: PUSH
33248: LD_VAR 0 3
33252: IN
33253: ST_TO_ADDR
// end ;
33254: LD_VAR 0 3
33258: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33259: LD_INT 0
33261: PPUSH
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
// result := array ;
33268: LD_ADDR_VAR 0 5
33272: PUSH
33273: LD_VAR 0 1
33277: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33278: LD_VAR 0 1
33282: NOT
33283: PUSH
33284: LD_VAR 0 2
33288: NOT
33289: OR
33290: PUSH
33291: LD_VAR 0 3
33295: NOT
33296: OR
33297: PUSH
33298: LD_VAR 0 2
33302: PUSH
33303: LD_VAR 0 1
33307: GREATER
33308: OR
33309: PUSH
33310: LD_VAR 0 3
33314: PUSH
33315: LD_VAR 0 1
33319: GREATER
33320: OR
33321: IFFALSE 33325
// exit ;
33323: GO 33621
// if direction then
33325: LD_VAR 0 4
33329: IFFALSE 33393
// begin d := 1 ;
33331: LD_ADDR_VAR 0 9
33335: PUSH
33336: LD_INT 1
33338: ST_TO_ADDR
// if i_from > i_to then
33339: LD_VAR 0 2
33343: PUSH
33344: LD_VAR 0 3
33348: GREATER
33349: IFFALSE 33375
// length := ( array - i_from ) + i_to else
33351: LD_ADDR_VAR 0 11
33355: PUSH
33356: LD_VAR 0 1
33360: PUSH
33361: LD_VAR 0 2
33365: MINUS
33366: PUSH
33367: LD_VAR 0 3
33371: PLUS
33372: ST_TO_ADDR
33373: GO 33391
// length := i_to - i_from ;
33375: LD_ADDR_VAR 0 11
33379: PUSH
33380: LD_VAR 0 3
33384: PUSH
33385: LD_VAR 0 2
33389: MINUS
33390: ST_TO_ADDR
// end else
33391: GO 33454
// begin d := - 1 ;
33393: LD_ADDR_VAR 0 9
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: ST_TO_ADDR
// if i_from > i_to then
33402: LD_VAR 0 2
33406: PUSH
33407: LD_VAR 0 3
33411: GREATER
33412: IFFALSE 33432
// length := i_from - i_to else
33414: LD_ADDR_VAR 0 11
33418: PUSH
33419: LD_VAR 0 2
33423: PUSH
33424: LD_VAR 0 3
33428: MINUS
33429: ST_TO_ADDR
33430: GO 33454
// length := ( array - i_to ) + i_from ;
33432: LD_ADDR_VAR 0 11
33436: PUSH
33437: LD_VAR 0 1
33441: PUSH
33442: LD_VAR 0 3
33446: MINUS
33447: PUSH
33448: LD_VAR 0 2
33452: PLUS
33453: ST_TO_ADDR
// end ; if not length then
33454: LD_VAR 0 11
33458: NOT
33459: IFFALSE 33463
// exit ;
33461: GO 33621
// tmp := array ;
33463: LD_ADDR_VAR 0 10
33467: PUSH
33468: LD_VAR 0 1
33472: ST_TO_ADDR
// for i = 1 to length do
33473: LD_ADDR_VAR 0 6
33477: PUSH
33478: DOUBLE
33479: LD_INT 1
33481: DEC
33482: ST_TO_ADDR
33483: LD_VAR 0 11
33487: PUSH
33488: FOR_TO
33489: IFFALSE 33609
// begin for j = 1 to array do
33491: LD_ADDR_VAR 0 7
33495: PUSH
33496: DOUBLE
33497: LD_INT 1
33499: DEC
33500: ST_TO_ADDR
33501: LD_VAR 0 1
33505: PUSH
33506: FOR_TO
33507: IFFALSE 33595
// begin k := j + d ;
33509: LD_ADDR_VAR 0 8
33513: PUSH
33514: LD_VAR 0 7
33518: PUSH
33519: LD_VAR 0 9
33523: PLUS
33524: ST_TO_ADDR
// if k > array then
33525: LD_VAR 0 8
33529: PUSH
33530: LD_VAR 0 1
33534: GREATER
33535: IFFALSE 33545
// k := 1 ;
33537: LD_ADDR_VAR 0 8
33541: PUSH
33542: LD_INT 1
33544: ST_TO_ADDR
// if not k then
33545: LD_VAR 0 8
33549: NOT
33550: IFFALSE 33562
// k := array ;
33552: LD_ADDR_VAR 0 8
33556: PUSH
33557: LD_VAR 0 1
33561: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33562: LD_ADDR_VAR 0 10
33566: PUSH
33567: LD_VAR 0 10
33571: PPUSH
33572: LD_VAR 0 8
33576: PPUSH
33577: LD_VAR 0 1
33581: PUSH
33582: LD_VAR 0 7
33586: ARRAY
33587: PPUSH
33588: CALL_OW 1
33592: ST_TO_ADDR
// end ;
33593: GO 33506
33595: POP
33596: POP
// array := tmp ;
33597: LD_ADDR_VAR 0 1
33601: PUSH
33602: LD_VAR 0 10
33606: ST_TO_ADDR
// end ;
33607: GO 33488
33609: POP
33610: POP
// result := array ;
33611: LD_ADDR_VAR 0 5
33615: PUSH
33616: LD_VAR 0 1
33620: ST_TO_ADDR
// end ;
33621: LD_VAR 0 5
33625: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33626: LD_INT 0
33628: PPUSH
33629: PPUSH
// result := 0 ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 0
33637: ST_TO_ADDR
// if not array or not value in array then
33638: LD_VAR 0 1
33642: NOT
33643: PUSH
33644: LD_VAR 0 2
33648: PUSH
33649: LD_VAR 0 1
33653: IN
33654: NOT
33655: OR
33656: IFFALSE 33660
// exit ;
33658: GO 33714
// for i = 1 to array do
33660: LD_ADDR_VAR 0 4
33664: PUSH
33665: DOUBLE
33666: LD_INT 1
33668: DEC
33669: ST_TO_ADDR
33670: LD_VAR 0 1
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33712
// if value = array [ i ] then
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 1
33687: PUSH
33688: LD_VAR 0 4
33692: ARRAY
33693: EQUAL
33694: IFFALSE 33710
// begin result := i ;
33696: LD_ADDR_VAR 0 3
33700: PUSH
33701: LD_VAR 0 4
33705: ST_TO_ADDR
// exit ;
33706: POP
33707: POP
33708: GO 33714
// end ;
33710: GO 33675
33712: POP
33713: POP
// end ;
33714: LD_VAR 0 3
33718: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33719: LD_INT 0
33721: PPUSH
// vc_chassis := chassis ;
33722: LD_ADDR_OWVAR 37
33726: PUSH
33727: LD_VAR 0 1
33731: ST_TO_ADDR
// vc_engine := engine ;
33732: LD_ADDR_OWVAR 39
33736: PUSH
33737: LD_VAR 0 2
33741: ST_TO_ADDR
// vc_control := control ;
33742: LD_ADDR_OWVAR 38
33746: PUSH
33747: LD_VAR 0 3
33751: ST_TO_ADDR
// vc_weapon := weapon ;
33752: LD_ADDR_OWVAR 40
33756: PUSH
33757: LD_VAR 0 4
33761: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33762: LD_ADDR_OWVAR 41
33766: PUSH
33767: LD_VAR 0 5
33771: ST_TO_ADDR
// end ;
33772: LD_VAR 0 6
33776: RET
// export function WantPlant ( unit ) ; var task ; begin
33777: LD_INT 0
33779: PPUSH
33780: PPUSH
// result := false ;
33781: LD_ADDR_VAR 0 2
33785: PUSH
33786: LD_INT 0
33788: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33789: LD_ADDR_VAR 0 3
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 437
33803: ST_TO_ADDR
// if task then
33804: LD_VAR 0 3
33808: IFFALSE 33836
// if task [ 1 ] [ 1 ] = p then
33810: LD_VAR 0 3
33814: PUSH
33815: LD_INT 1
33817: ARRAY
33818: PUSH
33819: LD_INT 1
33821: ARRAY
33822: PUSH
33823: LD_STRING p
33825: EQUAL
33826: IFFALSE 33836
// result := true ;
33828: LD_ADDR_VAR 0 2
33832: PUSH
33833: LD_INT 1
33835: ST_TO_ADDR
// end ;
33836: LD_VAR 0 2
33840: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33841: LD_INT 0
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
// if pos < 1 then
33847: LD_VAR 0 2
33851: PUSH
33852: LD_INT 1
33854: LESS
33855: IFFALSE 33859
// exit ;
33857: GO 34162
// if pos = 1 then
33859: LD_VAR 0 2
33863: PUSH
33864: LD_INT 1
33866: EQUAL
33867: IFFALSE 33900
// result := Replace ( arr , pos [ 1 ] , value ) else
33869: LD_ADDR_VAR 0 4
33873: PUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: LD_VAR 0 2
33883: PUSH
33884: LD_INT 1
33886: ARRAY
33887: PPUSH
33888: LD_VAR 0 3
33892: PPUSH
33893: CALL_OW 1
33897: ST_TO_ADDR
33898: GO 34162
// begin tmp := arr ;
33900: LD_ADDR_VAR 0 6
33904: PUSH
33905: LD_VAR 0 1
33909: ST_TO_ADDR
// s_arr := [ tmp ] ;
33910: LD_ADDR_VAR 0 7
33914: PUSH
33915: LD_VAR 0 6
33919: PUSH
33920: EMPTY
33921: LIST
33922: ST_TO_ADDR
// for i = 1 to pos - 1 do
33923: LD_ADDR_VAR 0 5
33927: PUSH
33928: DOUBLE
33929: LD_INT 1
33931: DEC
33932: ST_TO_ADDR
33933: LD_VAR 0 2
33937: PUSH
33938: LD_INT 1
33940: MINUS
33941: PUSH
33942: FOR_TO
33943: IFFALSE 33988
// begin tmp := tmp [ pos [ i ] ] ;
33945: LD_ADDR_VAR 0 6
33949: PUSH
33950: LD_VAR 0 6
33954: PUSH
33955: LD_VAR 0 2
33959: PUSH
33960: LD_VAR 0 5
33964: ARRAY
33965: ARRAY
33966: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33967: LD_ADDR_VAR 0 7
33971: PUSH
33972: LD_VAR 0 7
33976: PUSH
33977: LD_VAR 0 6
33981: PUSH
33982: EMPTY
33983: LIST
33984: ADD
33985: ST_TO_ADDR
// end ;
33986: GO 33942
33988: POP
33989: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33990: LD_ADDR_VAR 0 6
33994: PUSH
33995: LD_VAR 0 6
33999: PPUSH
34000: LD_VAR 0 2
34004: PUSH
34005: LD_VAR 0 2
34009: ARRAY
34010: PPUSH
34011: LD_VAR 0 3
34015: PPUSH
34016: CALL_OW 1
34020: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34021: LD_ADDR_VAR 0 7
34025: PUSH
34026: LD_VAR 0 7
34030: PPUSH
34031: LD_VAR 0 7
34035: PPUSH
34036: LD_VAR 0 6
34040: PPUSH
34041: CALL_OW 1
34045: ST_TO_ADDR
// for i = s_arr downto 2 do
34046: LD_ADDR_VAR 0 5
34050: PUSH
34051: DOUBLE
34052: LD_VAR 0 7
34056: INC
34057: ST_TO_ADDR
34058: LD_INT 2
34060: PUSH
34061: FOR_DOWNTO
34062: IFFALSE 34146
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34064: LD_ADDR_VAR 0 6
34068: PUSH
34069: LD_VAR 0 7
34073: PUSH
34074: LD_VAR 0 5
34078: PUSH
34079: LD_INT 1
34081: MINUS
34082: ARRAY
34083: PPUSH
34084: LD_VAR 0 2
34088: PUSH
34089: LD_VAR 0 5
34093: PUSH
34094: LD_INT 1
34096: MINUS
34097: ARRAY
34098: PPUSH
34099: LD_VAR 0 7
34103: PUSH
34104: LD_VAR 0 5
34108: ARRAY
34109: PPUSH
34110: CALL_OW 1
34114: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34115: LD_ADDR_VAR 0 7
34119: PUSH
34120: LD_VAR 0 7
34124: PPUSH
34125: LD_VAR 0 5
34129: PUSH
34130: LD_INT 1
34132: MINUS
34133: PPUSH
34134: LD_VAR 0 6
34138: PPUSH
34139: CALL_OW 1
34143: ST_TO_ADDR
// end ;
34144: GO 34061
34146: POP
34147: POP
// result := s_arr [ 1 ] ;
34148: LD_ADDR_VAR 0 4
34152: PUSH
34153: LD_VAR 0 7
34157: PUSH
34158: LD_INT 1
34160: ARRAY
34161: ST_TO_ADDR
// end ; end ;
34162: LD_VAR 0 4
34166: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34167: LD_INT 0
34169: PPUSH
34170: PPUSH
// if not list then
34171: LD_VAR 0 1
34175: NOT
34176: IFFALSE 34180
// exit ;
34178: GO 34271
// i := list [ pos1 ] ;
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_VAR 0 1
34189: PUSH
34190: LD_VAR 0 2
34194: ARRAY
34195: ST_TO_ADDR
// if not i then
34196: LD_VAR 0 5
34200: NOT
34201: IFFALSE 34205
// exit ;
34203: GO 34271
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34205: LD_ADDR_VAR 0 1
34209: PUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: LD_VAR 0 2
34219: PPUSH
34220: LD_VAR 0 1
34224: PUSH
34225: LD_VAR 0 3
34229: ARRAY
34230: PPUSH
34231: CALL_OW 1
34235: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34236: LD_ADDR_VAR 0 1
34240: PUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: LD_VAR 0 3
34250: PPUSH
34251: LD_VAR 0 5
34255: PPUSH
34256: CALL_OW 1
34260: ST_TO_ADDR
// result := list ;
34261: LD_ADDR_VAR 0 4
34265: PUSH
34266: LD_VAR 0 1
34270: ST_TO_ADDR
// end ;
34271: LD_VAR 0 4
34275: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34276: LD_INT 0
34278: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34279: LD_ADDR_VAR 0 5
34283: PUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 250
34293: PPUSH
34294: LD_VAR 0 1
34298: PPUSH
34299: CALL_OW 251
34303: PPUSH
34304: LD_VAR 0 2
34308: PPUSH
34309: LD_VAR 0 3
34313: PPUSH
34314: LD_VAR 0 4
34318: PPUSH
34319: CALL 34329 0 5
34323: ST_TO_ADDR
// end ;
34324: LD_VAR 0 5
34328: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
// if not list then
34335: LD_VAR 0 3
34339: NOT
34340: IFFALSE 34344
// exit ;
34342: GO 34732
// result := [ ] ;
34344: LD_ADDR_VAR 0 6
34348: PUSH
34349: EMPTY
34350: ST_TO_ADDR
// for i in list do
34351: LD_ADDR_VAR 0 7
34355: PUSH
34356: LD_VAR 0 3
34360: PUSH
34361: FOR_IN
34362: IFFALSE 34564
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34364: LD_ADDR_VAR 0 9
34368: PUSH
34369: LD_VAR 0 7
34373: PPUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: LD_VAR 0 2
34383: PPUSH
34384: CALL_OW 297
34388: ST_TO_ADDR
// if not result then
34389: LD_VAR 0 6
34393: NOT
34394: IFFALSE 34420
// result := [ [ i , tmp ] ] else
34396: LD_ADDR_VAR 0 6
34400: PUSH
34401: LD_VAR 0 7
34405: PUSH
34406: LD_VAR 0 9
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: ST_TO_ADDR
34418: GO 34562
// begin if result [ result ] [ 2 ] < tmp then
34420: LD_VAR 0 6
34424: PUSH
34425: LD_VAR 0 6
34429: ARRAY
34430: PUSH
34431: LD_INT 2
34433: ARRAY
34434: PUSH
34435: LD_VAR 0 9
34439: LESS
34440: IFFALSE 34482
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34442: LD_ADDR_VAR 0 6
34446: PUSH
34447: LD_VAR 0 6
34451: PPUSH
34452: LD_VAR 0 6
34456: PUSH
34457: LD_INT 1
34459: PLUS
34460: PPUSH
34461: LD_VAR 0 7
34465: PUSH
34466: LD_VAR 0 9
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PPUSH
34475: CALL_OW 2
34479: ST_TO_ADDR
34480: GO 34562
// for j = 1 to result do
34482: LD_ADDR_VAR 0 8
34486: PUSH
34487: DOUBLE
34488: LD_INT 1
34490: DEC
34491: ST_TO_ADDR
34492: LD_VAR 0 6
34496: PUSH
34497: FOR_TO
34498: IFFALSE 34560
// begin if tmp < result [ j ] [ 2 ] then
34500: LD_VAR 0 9
34504: PUSH
34505: LD_VAR 0 6
34509: PUSH
34510: LD_VAR 0 8
34514: ARRAY
34515: PUSH
34516: LD_INT 2
34518: ARRAY
34519: LESS
34520: IFFALSE 34558
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34522: LD_ADDR_VAR 0 6
34526: PUSH
34527: LD_VAR 0 6
34531: PPUSH
34532: LD_VAR 0 8
34536: PPUSH
34537: LD_VAR 0 7
34541: PUSH
34542: LD_VAR 0 9
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PPUSH
34551: CALL_OW 2
34555: ST_TO_ADDR
// break ;
34556: GO 34560
// end ; end ;
34558: GO 34497
34560: POP
34561: POP
// end ; end ;
34562: GO 34361
34564: POP
34565: POP
// if result and not asc then
34566: LD_VAR 0 6
34570: PUSH
34571: LD_VAR 0 4
34575: NOT
34576: AND
34577: IFFALSE 34652
// begin tmp := result ;
34579: LD_ADDR_VAR 0 9
34583: PUSH
34584: LD_VAR 0 6
34588: ST_TO_ADDR
// for i = tmp downto 1 do
34589: LD_ADDR_VAR 0 7
34593: PUSH
34594: DOUBLE
34595: LD_VAR 0 9
34599: INC
34600: ST_TO_ADDR
34601: LD_INT 1
34603: PUSH
34604: FOR_DOWNTO
34605: IFFALSE 34650
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34607: LD_ADDR_VAR 0 6
34611: PUSH
34612: LD_VAR 0 6
34616: PPUSH
34617: LD_VAR 0 9
34621: PUSH
34622: LD_VAR 0 7
34626: MINUS
34627: PUSH
34628: LD_INT 1
34630: PLUS
34631: PPUSH
34632: LD_VAR 0 9
34636: PUSH
34637: LD_VAR 0 7
34641: ARRAY
34642: PPUSH
34643: CALL_OW 1
34647: ST_TO_ADDR
34648: GO 34604
34650: POP
34651: POP
// end ; tmp := [ ] ;
34652: LD_ADDR_VAR 0 9
34656: PUSH
34657: EMPTY
34658: ST_TO_ADDR
// if mode then
34659: LD_VAR 0 5
34663: IFFALSE 34732
// begin for i = 1 to result do
34665: LD_ADDR_VAR 0 7
34669: PUSH
34670: DOUBLE
34671: LD_INT 1
34673: DEC
34674: ST_TO_ADDR
34675: LD_VAR 0 6
34679: PUSH
34680: FOR_TO
34681: IFFALSE 34720
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34683: LD_ADDR_VAR 0 9
34687: PUSH
34688: LD_VAR 0 9
34692: PPUSH
34693: LD_VAR 0 7
34697: PPUSH
34698: LD_VAR 0 6
34702: PUSH
34703: LD_VAR 0 7
34707: ARRAY
34708: PUSH
34709: LD_INT 1
34711: ARRAY
34712: PPUSH
34713: CALL_OW 1
34717: ST_TO_ADDR
34718: GO 34680
34720: POP
34721: POP
// result := tmp ;
34722: LD_ADDR_VAR 0 6
34726: PUSH
34727: LD_VAR 0 9
34731: ST_TO_ADDR
// end ; end ;
34732: LD_VAR 0 6
34736: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34737: LD_INT 0
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34745: LD_ADDR_VAR 0 5
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: EMPTY
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: ST_TO_ADDR
// if not x or not y then
34767: LD_VAR 0 2
34771: NOT
34772: PUSH
34773: LD_VAR 0 3
34777: NOT
34778: OR
34779: IFFALSE 34783
// exit ;
34781: GO 36433
// if not range then
34783: LD_VAR 0 4
34787: NOT
34788: IFFALSE 34798
// range := 10 ;
34790: LD_ADDR_VAR 0 4
34794: PUSH
34795: LD_INT 10
34797: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34798: LD_ADDR_VAR 0 8
34802: PUSH
34803: LD_INT 81
34805: PUSH
34806: LD_VAR 0 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 92
34817: PUSH
34818: LD_VAR 0 2
34822: PUSH
34823: LD_VAR 0 3
34827: PUSH
34828: LD_VAR 0 4
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: LD_INT 21
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: PPUSH
34861: CALL_OW 69
34865: ST_TO_ADDR
// if not tmp then
34866: LD_VAR 0 8
34870: NOT
34871: IFFALSE 34875
// exit ;
34873: GO 36433
// for i in tmp do
34875: LD_ADDR_VAR 0 6
34879: PUSH
34880: LD_VAR 0 8
34884: PUSH
34885: FOR_IN
34886: IFFALSE 36408
// begin points := [ 0 , 0 , 0 ] ;
34888: LD_ADDR_VAR 0 9
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: ST_TO_ADDR
// bpoints := 1 ;
34907: LD_ADDR_VAR 0 10
34911: PUSH
34912: LD_INT 1
34914: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34915: LD_VAR 0 6
34919: PPUSH
34920: CALL_OW 247
34924: PUSH
34925: LD_INT 1
34927: DOUBLE
34928: EQUAL
34929: IFTRUE 34933
34931: GO 35511
34933: POP
// begin if GetClass ( i ) = 1 then
34934: LD_VAR 0 6
34938: PPUSH
34939: CALL_OW 257
34943: PUSH
34944: LD_INT 1
34946: EQUAL
34947: IFFALSE 34968
// points := [ 10 , 5 , 3 ] ;
34949: LD_ADDR_VAR 0 9
34953: PUSH
34954: LD_INT 10
34956: PUSH
34957: LD_INT 5
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34968: LD_VAR 0 6
34972: PPUSH
34973: CALL_OW 257
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: LD_INT 4
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: IN
34992: IFFALSE 35013
// points := [ 3 , 2 , 1 ] ;
34994: LD_ADDR_VAR 0 9
34998: PUSH
34999: LD_INT 3
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35013: LD_VAR 0 6
35017: PPUSH
35018: CALL_OW 257
35022: PUSH
35023: LD_INT 5
35025: EQUAL
35026: IFFALSE 35047
// points := [ 130 , 5 , 2 ] ;
35028: LD_ADDR_VAR 0 9
35032: PUSH
35033: LD_INT 130
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35047: LD_VAR 0 6
35051: PPUSH
35052: CALL_OW 257
35056: PUSH
35057: LD_INT 8
35059: EQUAL
35060: IFFALSE 35081
// points := [ 35 , 35 , 30 ] ;
35062: LD_ADDR_VAR 0 9
35066: PUSH
35067: LD_INT 35
35069: PUSH
35070: LD_INT 35
35072: PUSH
35073: LD_INT 30
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35081: LD_VAR 0 6
35085: PPUSH
35086: CALL_OW 257
35090: PUSH
35091: LD_INT 9
35093: EQUAL
35094: IFFALSE 35115
// points := [ 20 , 55 , 40 ] ;
35096: LD_ADDR_VAR 0 9
35100: PUSH
35101: LD_INT 20
35103: PUSH
35104: LD_INT 55
35106: PUSH
35107: LD_INT 40
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35115: LD_VAR 0 6
35119: PPUSH
35120: CALL_OW 257
35124: PUSH
35125: LD_INT 12
35127: PUSH
35128: LD_INT 16
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: IN
35135: IFFALSE 35156
// points := [ 5 , 3 , 2 ] ;
35137: LD_ADDR_VAR 0 9
35141: PUSH
35142: LD_INT 5
35144: PUSH
35145: LD_INT 3
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35156: LD_VAR 0 6
35160: PPUSH
35161: CALL_OW 257
35165: PUSH
35166: LD_INT 17
35168: EQUAL
35169: IFFALSE 35190
// points := [ 100 , 50 , 75 ] ;
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: LD_INT 100
35178: PUSH
35179: LD_INT 50
35181: PUSH
35182: LD_INT 75
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35190: LD_VAR 0 6
35194: PPUSH
35195: CALL_OW 257
35199: PUSH
35200: LD_INT 15
35202: EQUAL
35203: IFFALSE 35224
// points := [ 10 , 5 , 3 ] ;
35205: LD_ADDR_VAR 0 9
35209: PUSH
35210: LD_INT 10
35212: PUSH
35213: LD_INT 5
35215: PUSH
35216: LD_INT 3
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35224: LD_VAR 0 6
35228: PPUSH
35229: CALL_OW 257
35233: PUSH
35234: LD_INT 14
35236: EQUAL
35237: IFFALSE 35258
// points := [ 10 , 0 , 0 ] ;
35239: LD_ADDR_VAR 0 9
35243: PUSH
35244: LD_INT 10
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35258: LD_VAR 0 6
35262: PPUSH
35263: CALL_OW 257
35267: PUSH
35268: LD_INT 11
35270: EQUAL
35271: IFFALSE 35292
// points := [ 30 , 10 , 5 ] ;
35273: LD_ADDR_VAR 0 9
35277: PUSH
35278: LD_INT 30
35280: PUSH
35281: LD_INT 10
35283: PUSH
35284: LD_INT 5
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35292: LD_VAR 0 1
35296: PPUSH
35297: LD_INT 5
35299: PPUSH
35300: CALL_OW 321
35304: PUSH
35305: LD_INT 2
35307: EQUAL
35308: IFFALSE 35325
// bpoints := bpoints * 1.8 ;
35310: LD_ADDR_VAR 0 10
35314: PUSH
35315: LD_VAR 0 10
35319: PUSH
35320: LD_REAL  1.80000000000000E+0000
35323: MUL
35324: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35325: LD_VAR 0 6
35329: PPUSH
35330: CALL_OW 257
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: LD_INT 4
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: IN
35353: PUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: LD_INT 51
35361: PPUSH
35362: CALL_OW 321
35366: PUSH
35367: LD_INT 2
35369: EQUAL
35370: AND
35371: IFFALSE 35388
// bpoints := bpoints * 1.2 ;
35373: LD_ADDR_VAR 0 10
35377: PUSH
35378: LD_VAR 0 10
35382: PUSH
35383: LD_REAL  1.20000000000000E+0000
35386: MUL
35387: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35388: LD_VAR 0 6
35392: PPUSH
35393: CALL_OW 257
35397: PUSH
35398: LD_INT 5
35400: PUSH
35401: LD_INT 7
35403: PUSH
35404: LD_INT 9
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: IN
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: LD_INT 52
35420: PPUSH
35421: CALL_OW 321
35425: PUSH
35426: LD_INT 2
35428: EQUAL
35429: AND
35430: IFFALSE 35447
// bpoints := bpoints * 1.5 ;
35432: LD_ADDR_VAR 0 10
35436: PUSH
35437: LD_VAR 0 10
35441: PUSH
35442: LD_REAL  1.50000000000000E+0000
35445: MUL
35446: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35447: LD_VAR 0 1
35451: PPUSH
35452: LD_INT 66
35454: PPUSH
35455: CALL_OW 321
35459: PUSH
35460: LD_INT 2
35462: EQUAL
35463: IFFALSE 35480
// bpoints := bpoints * 1.1 ;
35465: LD_ADDR_VAR 0 10
35469: PUSH
35470: LD_VAR 0 10
35474: PUSH
35475: LD_REAL  1.10000000000000E+0000
35478: MUL
35479: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35480: LD_ADDR_VAR 0 10
35484: PUSH
35485: LD_VAR 0 10
35489: PUSH
35490: LD_VAR 0 6
35494: PPUSH
35495: LD_INT 1
35497: PPUSH
35498: CALL_OW 259
35502: PUSH
35503: LD_REAL  1.15000000000000E+0000
35506: MUL
35507: MUL
35508: ST_TO_ADDR
// end ; unit_vehicle :
35509: GO 36337
35511: LD_INT 2
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35519
35517: GO 36325
35519: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35520: LD_VAR 0 6
35524: PPUSH
35525: CALL_OW 264
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 42
35535: PUSH
35536: LD_INT 24
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: IN
35544: IFFALSE 35565
// points := [ 25 , 5 , 3 ] ;
35546: LD_ADDR_VAR 0 9
35550: PUSH
35551: LD_INT 25
35553: PUSH
35554: LD_INT 5
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35565: LD_VAR 0 6
35569: PPUSH
35570: CALL_OW 264
35574: PUSH
35575: LD_INT 4
35577: PUSH
35578: LD_INT 43
35580: PUSH
35581: LD_INT 25
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: IN
35589: IFFALSE 35610
// points := [ 40 , 15 , 5 ] ;
35591: LD_ADDR_VAR 0 9
35595: PUSH
35596: LD_INT 40
35598: PUSH
35599: LD_INT 15
35601: PUSH
35602: LD_INT 5
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35610: LD_VAR 0 6
35614: PPUSH
35615: CALL_OW 264
35619: PUSH
35620: LD_INT 3
35622: PUSH
35623: LD_INT 23
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: IN
35630: IFFALSE 35651
// points := [ 7 , 25 , 8 ] ;
35632: LD_ADDR_VAR 0 9
35636: PUSH
35637: LD_INT 7
35639: PUSH
35640: LD_INT 25
35642: PUSH
35643: LD_INT 8
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 264
35660: PUSH
35661: LD_INT 5
35663: PUSH
35664: LD_INT 27
35666: PUSH
35667: LD_INT 44
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: IN
35675: IFFALSE 35696
// points := [ 14 , 50 , 16 ] ;
35677: LD_ADDR_VAR 0 9
35681: PUSH
35682: LD_INT 14
35684: PUSH
35685: LD_INT 50
35687: PUSH
35688: LD_INT 16
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35696: LD_VAR 0 6
35700: PPUSH
35701: CALL_OW 264
35705: PUSH
35706: LD_INT 6
35708: PUSH
35709: LD_INT 46
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: IN
35716: IFFALSE 35737
// points := [ 32 , 120 , 70 ] ;
35718: LD_ADDR_VAR 0 9
35722: PUSH
35723: LD_INT 32
35725: PUSH
35726: LD_INT 120
35728: PUSH
35729: LD_INT 70
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35737: LD_VAR 0 6
35741: PPUSH
35742: CALL_OW 264
35746: PUSH
35747: LD_INT 7
35749: PUSH
35750: LD_INT 28
35752: PUSH
35753: LD_INT 45
35755: PUSH
35756: LD_INT 92
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: IN
35765: IFFALSE 35786
// points := [ 35 , 20 , 45 ] ;
35767: LD_ADDR_VAR 0 9
35771: PUSH
35772: LD_INT 35
35774: PUSH
35775: LD_INT 20
35777: PUSH
35778: LD_INT 45
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35786: LD_VAR 0 6
35790: PPUSH
35791: CALL_OW 264
35795: PUSH
35796: LD_INT 47
35798: PUSH
35799: EMPTY
35800: LIST
35801: IN
35802: IFFALSE 35823
// points := [ 67 , 45 , 75 ] ;
35804: LD_ADDR_VAR 0 9
35808: PUSH
35809: LD_INT 67
35811: PUSH
35812: LD_INT 45
35814: PUSH
35815: LD_INT 75
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35823: LD_VAR 0 6
35827: PPUSH
35828: CALL_OW 264
35832: PUSH
35833: LD_INT 26
35835: PUSH
35836: EMPTY
35837: LIST
35838: IN
35839: IFFALSE 35860
// points := [ 120 , 30 , 80 ] ;
35841: LD_ADDR_VAR 0 9
35845: PUSH
35846: LD_INT 120
35848: PUSH
35849: LD_INT 30
35851: PUSH
35852: LD_INT 80
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35860: LD_VAR 0 6
35864: PPUSH
35865: CALL_OW 264
35869: PUSH
35870: LD_INT 22
35872: PUSH
35873: EMPTY
35874: LIST
35875: IN
35876: IFFALSE 35897
// points := [ 40 , 1 , 1 ] ;
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_INT 40
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL_OW 264
35906: PUSH
35907: LD_INT 29
35909: PUSH
35910: EMPTY
35911: LIST
35912: IN
35913: IFFALSE 35934
// points := [ 70 , 200 , 400 ] ;
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_INT 70
35922: PUSH
35923: LD_INT 200
35925: PUSH
35926: LD_INT 400
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35934: LD_VAR 0 6
35938: PPUSH
35939: CALL_OW 264
35943: PUSH
35944: LD_INT 14
35946: PUSH
35947: LD_INT 53
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: IN
35954: IFFALSE 35975
// points := [ 40 , 10 , 20 ] ;
35956: LD_ADDR_VAR 0 9
35960: PUSH
35961: LD_INT 40
35963: PUSH
35964: LD_INT 10
35966: PUSH
35967: LD_INT 20
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35975: LD_VAR 0 6
35979: PPUSH
35980: CALL_OW 264
35984: PUSH
35985: LD_INT 9
35987: PUSH
35988: EMPTY
35989: LIST
35990: IN
35991: IFFALSE 36012
// points := [ 5 , 70 , 20 ] ;
35993: LD_ADDR_VAR 0 9
35997: PUSH
35998: LD_INT 5
36000: PUSH
36001: LD_INT 70
36003: PUSH
36004: LD_INT 20
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36012: LD_VAR 0 6
36016: PPUSH
36017: CALL_OW 264
36021: PUSH
36022: LD_INT 10
36024: PUSH
36025: EMPTY
36026: LIST
36027: IN
36028: IFFALSE 36049
// points := [ 35 , 110 , 70 ] ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_INT 35
36037: PUSH
36038: LD_INT 110
36040: PUSH
36041: LD_INT 70
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36049: LD_VAR 0 6
36053: PPUSH
36054: CALL_OW 265
36058: PUSH
36059: LD_INT 25
36061: EQUAL
36062: IFFALSE 36083
// points := [ 80 , 65 , 100 ] ;
36064: LD_ADDR_VAR 0 9
36068: PUSH
36069: LD_INT 80
36071: PUSH
36072: LD_INT 65
36074: PUSH
36075: LD_INT 100
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36083: LD_VAR 0 6
36087: PPUSH
36088: CALL_OW 263
36092: PUSH
36093: LD_INT 1
36095: EQUAL
36096: IFFALSE 36131
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36098: LD_ADDR_VAR 0 10
36102: PUSH
36103: LD_VAR 0 10
36107: PUSH
36108: LD_VAR 0 6
36112: PPUSH
36113: CALL_OW 311
36117: PPUSH
36118: LD_INT 3
36120: PPUSH
36121: CALL_OW 259
36125: PUSH
36126: LD_INT 4
36128: MUL
36129: MUL
36130: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36131: LD_VAR 0 6
36135: PPUSH
36136: CALL_OW 263
36140: PUSH
36141: LD_INT 2
36143: EQUAL
36144: IFFALSE 36195
// begin j := IsControledBy ( i ) ;
36146: LD_ADDR_VAR 0 7
36150: PUSH
36151: LD_VAR 0 6
36155: PPUSH
36156: CALL_OW 312
36160: ST_TO_ADDR
// if j then
36161: LD_VAR 0 7
36165: IFFALSE 36195
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36167: LD_ADDR_VAR 0 10
36171: PUSH
36172: LD_VAR 0 10
36176: PUSH
36177: LD_VAR 0 7
36181: PPUSH
36182: LD_INT 3
36184: PPUSH
36185: CALL_OW 259
36189: PUSH
36190: LD_INT 3
36192: MUL
36193: MUL
36194: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36195: LD_VAR 0 6
36199: PPUSH
36200: CALL_OW 264
36204: PUSH
36205: LD_INT 5
36207: PUSH
36208: LD_INT 6
36210: PUSH
36211: LD_INT 46
36213: PUSH
36214: LD_INT 44
36216: PUSH
36217: LD_INT 47
36219: PUSH
36220: LD_INT 45
36222: PUSH
36223: LD_INT 28
36225: PUSH
36226: LD_INT 7
36228: PUSH
36229: LD_INT 27
36231: PUSH
36232: LD_INT 29
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: IN
36247: PUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_INT 52
36255: PPUSH
36256: CALL_OW 321
36260: PUSH
36261: LD_INT 2
36263: EQUAL
36264: AND
36265: IFFALSE 36282
// bpoints := bpoints * 1.2 ;
36267: LD_ADDR_VAR 0 10
36271: PUSH
36272: LD_VAR 0 10
36276: PUSH
36277: LD_REAL  1.20000000000000E+0000
36280: MUL
36281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36282: LD_VAR 0 6
36286: PPUSH
36287: CALL_OW 264
36291: PUSH
36292: LD_INT 6
36294: PUSH
36295: LD_INT 46
36297: PUSH
36298: LD_INT 47
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: IN
36306: IFFALSE 36323
// bpoints := bpoints * 1.2 ;
36308: LD_ADDR_VAR 0 10
36312: PUSH
36313: LD_VAR 0 10
36317: PUSH
36318: LD_REAL  1.20000000000000E+0000
36321: MUL
36322: ST_TO_ADDR
// end ; unit_building :
36323: GO 36337
36325: LD_INT 3
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36333
36331: GO 36336
36333: POP
// ; end ;
36334: GO 36337
36336: POP
// for j = 1 to 3 do
36337: LD_ADDR_VAR 0 7
36341: PUSH
36342: DOUBLE
36343: LD_INT 1
36345: DEC
36346: ST_TO_ADDR
36347: LD_INT 3
36349: PUSH
36350: FOR_TO
36351: IFFALSE 36404
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36353: LD_ADDR_VAR 0 5
36357: PUSH
36358: LD_VAR 0 5
36362: PPUSH
36363: LD_VAR 0 7
36367: PPUSH
36368: LD_VAR 0 5
36372: PUSH
36373: LD_VAR 0 7
36377: ARRAY
36378: PUSH
36379: LD_VAR 0 9
36383: PUSH
36384: LD_VAR 0 7
36388: ARRAY
36389: PUSH
36390: LD_VAR 0 10
36394: MUL
36395: PLUS
36396: PPUSH
36397: CALL_OW 1
36401: ST_TO_ADDR
36402: GO 36350
36404: POP
36405: POP
// end ;
36406: GO 34885
36408: POP
36409: POP
// result := Replace ( result , 4 , tmp ) ;
36410: LD_ADDR_VAR 0 5
36414: PUSH
36415: LD_VAR 0 5
36419: PPUSH
36420: LD_INT 4
36422: PPUSH
36423: LD_VAR 0 8
36427: PPUSH
36428: CALL_OW 1
36432: ST_TO_ADDR
// end ;
36433: LD_VAR 0 5
36437: RET
// export function DangerAtRange ( unit , range ) ; begin
36438: LD_INT 0
36440: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36441: LD_ADDR_VAR 0 3
36445: PUSH
36446: LD_VAR 0 1
36450: PPUSH
36451: CALL_OW 255
36455: PPUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 250
36465: PPUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 251
36475: PPUSH
36476: LD_VAR 0 2
36480: PPUSH
36481: CALL 34737 0 4
36485: ST_TO_ADDR
// end ;
36486: LD_VAR 0 3
36490: RET
// export function DangerInArea ( side , area ) ; begin
36491: LD_INT 0
36493: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_VAR 0 2
36503: PPUSH
36504: LD_INT 81
36506: PUSH
36507: LD_VAR 0 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PPUSH
36516: CALL_OW 70
36520: ST_TO_ADDR
// end ;
36521: LD_VAR 0 3
36525: RET
// export function IsExtension ( b ) ; begin
36526: LD_INT 0
36528: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36529: LD_ADDR_VAR 0 2
36533: PUSH
36534: LD_VAR 0 1
36538: PUSH
36539: LD_INT 23
36541: PUSH
36542: LD_INT 20
36544: PUSH
36545: LD_INT 22
36547: PUSH
36548: LD_INT 17
36550: PUSH
36551: LD_INT 24
36553: PUSH
36554: LD_INT 21
36556: PUSH
36557: LD_INT 19
36559: PUSH
36560: LD_INT 16
36562: PUSH
36563: LD_INT 25
36565: PUSH
36566: LD_INT 18
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: IN
36581: ST_TO_ADDR
// end ;
36582: LD_VAR 0 2
36586: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36587: LD_INT 0
36589: PPUSH
36590: PPUSH
36591: PPUSH
// result := [ ] ;
36592: LD_ADDR_VAR 0 4
36596: PUSH
36597: EMPTY
36598: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36599: LD_ADDR_VAR 0 5
36603: PUSH
36604: LD_VAR 0 2
36608: PPUSH
36609: LD_INT 21
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PPUSH
36619: CALL_OW 70
36623: ST_TO_ADDR
// if not tmp then
36624: LD_VAR 0 5
36628: NOT
36629: IFFALSE 36633
// exit ;
36631: GO 36697
// if checkLink then
36633: LD_VAR 0 3
36637: IFFALSE 36687
// begin for i in tmp do
36639: LD_ADDR_VAR 0 6
36643: PUSH
36644: LD_VAR 0 5
36648: PUSH
36649: FOR_IN
36650: IFFALSE 36685
// if GetBase ( i ) <> base then
36652: LD_VAR 0 6
36656: PPUSH
36657: CALL_OW 274
36661: PUSH
36662: LD_VAR 0 1
36666: NONEQUAL
36667: IFFALSE 36683
// ComLinkToBase ( base , i ) ;
36669: LD_VAR 0 1
36673: PPUSH
36674: LD_VAR 0 6
36678: PPUSH
36679: CALL_OW 169
36683: GO 36649
36685: POP
36686: POP
// end ; result := tmp ;
36687: LD_ADDR_VAR 0 4
36691: PUSH
36692: LD_VAR 0 5
36696: ST_TO_ADDR
// end ;
36697: LD_VAR 0 4
36701: RET
// export function ComComplete ( units , b ) ; var i ; begin
36702: LD_INT 0
36704: PPUSH
36705: PPUSH
// if not units then
36706: LD_VAR 0 1
36710: NOT
36711: IFFALSE 36715
// exit ;
36713: GO 36805
// for i in units do
36715: LD_ADDR_VAR 0 4
36719: PUSH
36720: LD_VAR 0 1
36724: PUSH
36725: FOR_IN
36726: IFFALSE 36803
// if BuildingStatus ( b ) = bs_build then
36728: LD_VAR 0 2
36732: PPUSH
36733: CALL_OW 461
36737: PUSH
36738: LD_INT 1
36740: EQUAL
36741: IFFALSE 36801
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36743: LD_VAR 0 4
36747: PPUSH
36748: LD_STRING h
36750: PUSH
36751: LD_VAR 0 2
36755: PPUSH
36756: CALL_OW 250
36760: PUSH
36761: LD_VAR 0 2
36765: PPUSH
36766: CALL_OW 251
36770: PUSH
36771: LD_VAR 0 2
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: PUSH
36794: EMPTY
36795: LIST
36796: PPUSH
36797: CALL_OW 446
36801: GO 36725
36803: POP
36804: POP
// end ;
36805: LD_VAR 0 3
36809: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36810: LD_INT 0
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
36817: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36818: LD_VAR 0 1
36822: NOT
36823: PUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 263
36833: PUSH
36834: LD_INT 2
36836: NONEQUAL
36837: OR
36838: IFFALSE 36842
// exit ;
36840: GO 37158
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36842: LD_ADDR_VAR 0 6
36846: PUSH
36847: LD_INT 22
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: CALL_OW 255
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 30
36869: PUSH
36870: LD_INT 36
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 34
36879: PUSH
36880: LD_INT 31
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PPUSH
36896: CALL_OW 69
36900: ST_TO_ADDR
// if not tmp then
36901: LD_VAR 0 6
36905: NOT
36906: IFFALSE 36910
// exit ;
36908: GO 37158
// result := [ ] ;
36910: LD_ADDR_VAR 0 2
36914: PUSH
36915: EMPTY
36916: ST_TO_ADDR
// for i in tmp do
36917: LD_ADDR_VAR 0 3
36921: PUSH
36922: LD_VAR 0 6
36926: PUSH
36927: FOR_IN
36928: IFFALSE 36999
// begin t := UnitsInside ( i ) ;
36930: LD_ADDR_VAR 0 4
36934: PUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: CALL_OW 313
36944: ST_TO_ADDR
// if t then
36945: LD_VAR 0 4
36949: IFFALSE 36997
// for j in t do
36951: LD_ADDR_VAR 0 7
36955: PUSH
36956: LD_VAR 0 4
36960: PUSH
36961: FOR_IN
36962: IFFALSE 36995
// result := Replace ( result , result + 1 , j ) ;
36964: LD_ADDR_VAR 0 2
36968: PUSH
36969: LD_VAR 0 2
36973: PPUSH
36974: LD_VAR 0 2
36978: PUSH
36979: LD_INT 1
36981: PLUS
36982: PPUSH
36983: LD_VAR 0 7
36987: PPUSH
36988: CALL_OW 1
36992: ST_TO_ADDR
36993: GO 36961
36995: POP
36996: POP
// end ;
36997: GO 36927
36999: POP
37000: POP
// if not result then
37001: LD_VAR 0 2
37005: NOT
37006: IFFALSE 37010
// exit ;
37008: GO 37158
// mech := result [ 1 ] ;
37010: LD_ADDR_VAR 0 5
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 1
37022: ARRAY
37023: ST_TO_ADDR
// if result > 1 then
37024: LD_VAR 0 2
37028: PUSH
37029: LD_INT 1
37031: GREATER
37032: IFFALSE 37144
// begin for i = 2 to result do
37034: LD_ADDR_VAR 0 3
37038: PUSH
37039: DOUBLE
37040: LD_INT 2
37042: DEC
37043: ST_TO_ADDR
37044: LD_VAR 0 2
37048: PUSH
37049: FOR_TO
37050: IFFALSE 37142
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37052: LD_ADDR_VAR 0 4
37056: PUSH
37057: LD_VAR 0 2
37061: PUSH
37062: LD_VAR 0 3
37066: ARRAY
37067: PPUSH
37068: LD_INT 3
37070: PPUSH
37071: CALL_OW 259
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 3
37085: ARRAY
37086: PPUSH
37087: CALL_OW 432
37091: MINUS
37092: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37093: LD_VAR 0 4
37097: PUSH
37098: LD_VAR 0 5
37102: PPUSH
37103: LD_INT 3
37105: PPUSH
37106: CALL_OW 259
37110: PUSH
37111: LD_VAR 0 5
37115: PPUSH
37116: CALL_OW 432
37120: MINUS
37121: GREATEREQUAL
37122: IFFALSE 37140
// mech := result [ i ] ;
37124: LD_ADDR_VAR 0 5
37128: PUSH
37129: LD_VAR 0 2
37133: PUSH
37134: LD_VAR 0 3
37138: ARRAY
37139: ST_TO_ADDR
// end ;
37140: GO 37049
37142: POP
37143: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37144: LD_VAR 0 1
37148: PPUSH
37149: LD_VAR 0 5
37153: PPUSH
37154: CALL_OW 135
// end ;
37158: LD_VAR 0 2
37162: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37163: LD_INT 0
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
// result := [ ] ;
37178: LD_ADDR_VAR 0 7
37182: PUSH
37183: EMPTY
37184: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 266
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: IN
37205: NOT
37206: IFFALSE 37210
// exit ;
37208: GO 38844
// if name then
37210: LD_VAR 0 3
37214: IFFALSE 37230
// SetBName ( base_dep , name ) ;
37216: LD_VAR 0 1
37220: PPUSH
37221: LD_VAR 0 3
37225: PPUSH
37226: CALL_OW 500
// base := GetBase ( base_dep ) ;
37230: LD_ADDR_VAR 0 15
37234: PUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 274
37244: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37245: LD_ADDR_VAR 0 16
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 255
37259: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37260: LD_ADDR_VAR 0 17
37264: PUSH
37265: LD_VAR 0 1
37269: PPUSH
37270: CALL_OW 248
37274: ST_TO_ADDR
// if sources then
37275: LD_VAR 0 5
37279: IFFALSE 37326
// for i = 1 to 3 do
37281: LD_ADDR_VAR 0 8
37285: PUSH
37286: DOUBLE
37287: LD_INT 1
37289: DEC
37290: ST_TO_ADDR
37291: LD_INT 3
37293: PUSH
37294: FOR_TO
37295: IFFALSE 37324
// AddResourceType ( base , i , sources [ i ] ) ;
37297: LD_VAR 0 15
37301: PPUSH
37302: LD_VAR 0 8
37306: PPUSH
37307: LD_VAR 0 5
37311: PUSH
37312: LD_VAR 0 8
37316: ARRAY
37317: PPUSH
37318: CALL_OW 276
37322: GO 37294
37324: POP
37325: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37326: LD_ADDR_VAR 0 18
37330: PUSH
37331: LD_VAR 0 15
37335: PPUSH
37336: LD_VAR 0 2
37340: PPUSH
37341: LD_INT 1
37343: PPUSH
37344: CALL 36587 0 3
37348: ST_TO_ADDR
// InitHc ;
37349: CALL_OW 19
// InitUc ;
37353: CALL_OW 18
// uc_side := side ;
37357: LD_ADDR_OWVAR 20
37361: PUSH
37362: LD_VAR 0 16
37366: ST_TO_ADDR
// uc_nation := nation ;
37367: LD_ADDR_OWVAR 21
37371: PUSH
37372: LD_VAR 0 17
37376: ST_TO_ADDR
// if buildings then
37377: LD_VAR 0 18
37381: IFFALSE 38703
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37383: LD_ADDR_VAR 0 19
37387: PUSH
37388: LD_VAR 0 18
37392: PPUSH
37393: LD_INT 2
37395: PUSH
37396: LD_INT 30
37398: PUSH
37399: LD_INT 29
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 30
37408: PUSH
37409: LD_INT 30
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 72
37425: ST_TO_ADDR
// if tmp then
37426: LD_VAR 0 19
37430: IFFALSE 37478
// for i in tmp do
37432: LD_ADDR_VAR 0 8
37436: PUSH
37437: LD_VAR 0 19
37441: PUSH
37442: FOR_IN
37443: IFFALSE 37476
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37445: LD_VAR 0 8
37449: PPUSH
37450: CALL_OW 250
37454: PPUSH
37455: LD_VAR 0 8
37459: PPUSH
37460: CALL_OW 251
37464: PPUSH
37465: LD_VAR 0 16
37469: PPUSH
37470: CALL_OW 441
37474: GO 37442
37476: POP
37477: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37478: LD_VAR 0 18
37482: PPUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 30
37488: PUSH
37489: LD_INT 32
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 30
37498: PUSH
37499: LD_INT 33
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: PPUSH
37511: CALL_OW 72
37515: IFFALSE 37603
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37517: LD_ADDR_VAR 0 8
37521: PUSH
37522: LD_VAR 0 18
37526: PPUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 30
37532: PUSH
37533: LD_INT 32
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 30
37542: PUSH
37543: LD_INT 33
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: PPUSH
37555: CALL_OW 72
37559: PUSH
37560: FOR_IN
37561: IFFALSE 37601
// begin if not GetBWeapon ( i ) then
37563: LD_VAR 0 8
37567: PPUSH
37568: CALL_OW 269
37572: NOT
37573: IFFALSE 37599
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37575: LD_VAR 0 8
37579: PPUSH
37580: LD_VAR 0 8
37584: PPUSH
37585: LD_VAR 0 2
37589: PPUSH
37590: CALL 38849 0 2
37594: PPUSH
37595: CALL_OW 431
// end ;
37599: GO 37560
37601: POP
37602: POP
// end ; for i = 1 to personel do
37603: LD_ADDR_VAR 0 8
37607: PUSH
37608: DOUBLE
37609: LD_INT 1
37611: DEC
37612: ST_TO_ADDR
37613: LD_VAR 0 6
37617: PUSH
37618: FOR_TO
37619: IFFALSE 38683
// begin if i > 4 then
37621: LD_VAR 0 8
37625: PUSH
37626: LD_INT 4
37628: GREATER
37629: IFFALSE 37633
// break ;
37631: GO 38683
// case i of 1 :
37633: LD_VAR 0 8
37637: PUSH
37638: LD_INT 1
37640: DOUBLE
37641: EQUAL
37642: IFTRUE 37646
37644: GO 37726
37646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37647: LD_ADDR_VAR 0 12
37651: PUSH
37652: LD_VAR 0 18
37656: PPUSH
37657: LD_INT 22
37659: PUSH
37660: LD_VAR 0 16
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 58
37671: PUSH
37672: EMPTY
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 30
37680: PUSH
37681: LD_INT 32
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 30
37690: PUSH
37691: LD_INT 4
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 30
37700: PUSH
37701: LD_INT 5
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: PPUSH
37719: CALL_OW 72
37723: ST_TO_ADDR
37724: GO 37948
37726: LD_INT 2
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37796
37734: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37735: LD_ADDR_VAR 0 12
37739: PUSH
37740: LD_VAR 0 18
37744: PPUSH
37745: LD_INT 22
37747: PUSH
37748: LD_VAR 0 16
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 30
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 30
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PPUSH
37789: CALL_OW 72
37793: ST_TO_ADDR
37794: GO 37948
37796: LD_INT 3
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37804
37802: GO 37866
37804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37805: LD_ADDR_VAR 0 12
37809: PUSH
37810: LD_VAR 0 18
37814: PPUSH
37815: LD_INT 22
37817: PUSH
37818: LD_VAR 0 16
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 30
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 30
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PPUSH
37859: CALL_OW 72
37863: ST_TO_ADDR
37864: GO 37948
37866: LD_INT 4
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37874
37872: GO 37947
37874: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37875: LD_ADDR_VAR 0 12
37879: PUSH
37880: LD_VAR 0 18
37884: PPUSH
37885: LD_INT 22
37887: PUSH
37888: LD_VAR 0 16
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 30
37902: PUSH
37903: LD_INT 6
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 30
37912: PUSH
37913: LD_INT 7
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 30
37922: PUSH
37923: LD_INT 8
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PPUSH
37940: CALL_OW 72
37944: ST_TO_ADDR
37945: GO 37948
37947: POP
// if i = 1 then
37948: LD_VAR 0 8
37952: PUSH
37953: LD_INT 1
37955: EQUAL
37956: IFFALSE 38067
// begin tmp := [ ] ;
37958: LD_ADDR_VAR 0 19
37962: PUSH
37963: EMPTY
37964: ST_TO_ADDR
// for j in f do
37965: LD_ADDR_VAR 0 9
37969: PUSH
37970: LD_VAR 0 12
37974: PUSH
37975: FOR_IN
37976: IFFALSE 38049
// if GetBType ( j ) = b_bunker then
37978: LD_VAR 0 9
37982: PPUSH
37983: CALL_OW 266
37987: PUSH
37988: LD_INT 32
37990: EQUAL
37991: IFFALSE 38018
// tmp := Insert ( tmp , 1 , j ) else
37993: LD_ADDR_VAR 0 19
37997: PUSH
37998: LD_VAR 0 19
38002: PPUSH
38003: LD_INT 1
38005: PPUSH
38006: LD_VAR 0 9
38010: PPUSH
38011: CALL_OW 2
38015: ST_TO_ADDR
38016: GO 38047
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38018: LD_ADDR_VAR 0 19
38022: PUSH
38023: LD_VAR 0 19
38027: PPUSH
38028: LD_VAR 0 19
38032: PUSH
38033: LD_INT 1
38035: PLUS
38036: PPUSH
38037: LD_VAR 0 9
38041: PPUSH
38042: CALL_OW 2
38046: ST_TO_ADDR
38047: GO 37975
38049: POP
38050: POP
// if tmp then
38051: LD_VAR 0 19
38055: IFFALSE 38067
// f := tmp ;
38057: LD_ADDR_VAR 0 12
38061: PUSH
38062: LD_VAR 0 19
38066: ST_TO_ADDR
// end ; x := personel [ i ] ;
38067: LD_ADDR_VAR 0 13
38071: PUSH
38072: LD_VAR 0 6
38076: PUSH
38077: LD_VAR 0 8
38081: ARRAY
38082: ST_TO_ADDR
// if x = - 1 then
38083: LD_VAR 0 13
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: EQUAL
38092: IFFALSE 38301
// begin for j in f do
38094: LD_ADDR_VAR 0 9
38098: PUSH
38099: LD_VAR 0 12
38103: PUSH
38104: FOR_IN
38105: IFFALSE 38297
// repeat InitHc ;
38107: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38111: LD_VAR 0 9
38115: PPUSH
38116: CALL_OW 266
38120: PUSH
38121: LD_INT 5
38123: EQUAL
38124: IFFALSE 38194
// begin if UnitsInside ( j ) < 3 then
38126: LD_VAR 0 9
38130: PPUSH
38131: CALL_OW 313
38135: PUSH
38136: LD_INT 3
38138: LESS
38139: IFFALSE 38175
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38141: LD_INT 0
38143: PPUSH
38144: LD_INT 5
38146: PUSH
38147: LD_INT 8
38149: PUSH
38150: LD_INT 9
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: PUSH
38158: LD_VAR 0 17
38162: ARRAY
38163: PPUSH
38164: LD_VAR 0 4
38168: PPUSH
38169: CALL_OW 380
38173: GO 38192
// PrepareHuman ( false , i , skill ) ;
38175: LD_INT 0
38177: PPUSH
38178: LD_VAR 0 8
38182: PPUSH
38183: LD_VAR 0 4
38187: PPUSH
38188: CALL_OW 380
// end else
38192: GO 38211
// PrepareHuman ( false , i , skill ) ;
38194: LD_INT 0
38196: PPUSH
38197: LD_VAR 0 8
38201: PPUSH
38202: LD_VAR 0 4
38206: PPUSH
38207: CALL_OW 380
// un := CreateHuman ;
38211: LD_ADDR_VAR 0 14
38215: PUSH
38216: CALL_OW 44
38220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38221: LD_ADDR_VAR 0 7
38225: PUSH
38226: LD_VAR 0 7
38230: PPUSH
38231: LD_INT 1
38233: PPUSH
38234: LD_VAR 0 14
38238: PPUSH
38239: CALL_OW 2
38243: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38244: LD_VAR 0 14
38248: PPUSH
38249: LD_VAR 0 9
38253: PPUSH
38254: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38258: LD_VAR 0 9
38262: PPUSH
38263: CALL_OW 313
38267: PUSH
38268: LD_INT 6
38270: EQUAL
38271: PUSH
38272: LD_VAR 0 9
38276: PPUSH
38277: CALL_OW 266
38281: PUSH
38282: LD_INT 32
38284: PUSH
38285: LD_INT 31
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: IN
38292: OR
38293: IFFALSE 38107
38295: GO 38104
38297: POP
38298: POP
// end else
38299: GO 38681
// for j = 1 to x do
38301: LD_ADDR_VAR 0 9
38305: PUSH
38306: DOUBLE
38307: LD_INT 1
38309: DEC
38310: ST_TO_ADDR
38311: LD_VAR 0 13
38315: PUSH
38316: FOR_TO
38317: IFFALSE 38679
// begin InitHc ;
38319: CALL_OW 19
// if not f then
38323: LD_VAR 0 12
38327: NOT
38328: IFFALSE 38417
// begin PrepareHuman ( false , i , skill ) ;
38330: LD_INT 0
38332: PPUSH
38333: LD_VAR 0 8
38337: PPUSH
38338: LD_VAR 0 4
38342: PPUSH
38343: CALL_OW 380
// un := CreateHuman ;
38347: LD_ADDR_VAR 0 14
38351: PUSH
38352: CALL_OW 44
38356: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38357: LD_ADDR_VAR 0 7
38361: PUSH
38362: LD_VAR 0 7
38366: PPUSH
38367: LD_INT 1
38369: PPUSH
38370: LD_VAR 0 14
38374: PPUSH
38375: CALL_OW 2
38379: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38380: LD_VAR 0 14
38384: PPUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL_OW 250
38394: PPUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 251
38404: PPUSH
38405: LD_INT 10
38407: PPUSH
38408: LD_INT 0
38410: PPUSH
38411: CALL_OW 50
// continue ;
38415: GO 38316
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38417: LD_VAR 0 12
38421: PUSH
38422: LD_INT 1
38424: ARRAY
38425: PPUSH
38426: CALL_OW 313
38430: PUSH
38431: LD_VAR 0 12
38435: PUSH
38436: LD_INT 1
38438: ARRAY
38439: PPUSH
38440: CALL_OW 266
38444: PUSH
38445: LD_INT 32
38447: PUSH
38448: LD_INT 31
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: IN
38455: AND
38456: PUSH
38457: LD_VAR 0 12
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: PPUSH
38466: CALL_OW 313
38470: PUSH
38471: LD_INT 6
38473: EQUAL
38474: OR
38475: IFFALSE 38495
// f := Delete ( f , 1 ) ;
38477: LD_ADDR_VAR 0 12
38481: PUSH
38482: LD_VAR 0 12
38486: PPUSH
38487: LD_INT 1
38489: PPUSH
38490: CALL_OW 3
38494: ST_TO_ADDR
// if not f then
38495: LD_VAR 0 12
38499: NOT
38500: IFFALSE 38518
// begin x := x + 2 ;
38502: LD_ADDR_VAR 0 13
38506: PUSH
38507: LD_VAR 0 13
38511: PUSH
38512: LD_INT 2
38514: PLUS
38515: ST_TO_ADDR
// continue ;
38516: GO 38316
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38518: LD_VAR 0 12
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: PPUSH
38527: CALL_OW 266
38531: PUSH
38532: LD_INT 5
38534: EQUAL
38535: IFFALSE 38609
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38537: LD_VAR 0 12
38541: PUSH
38542: LD_INT 1
38544: ARRAY
38545: PPUSH
38546: CALL_OW 313
38550: PUSH
38551: LD_INT 3
38553: LESS
38554: IFFALSE 38590
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38556: LD_INT 0
38558: PPUSH
38559: LD_INT 5
38561: PUSH
38562: LD_INT 8
38564: PUSH
38565: LD_INT 9
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: PUSH
38573: LD_VAR 0 17
38577: ARRAY
38578: PPUSH
38579: LD_VAR 0 4
38583: PPUSH
38584: CALL_OW 380
38588: GO 38607
// PrepareHuman ( false , i , skill ) ;
38590: LD_INT 0
38592: PPUSH
38593: LD_VAR 0 8
38597: PPUSH
38598: LD_VAR 0 4
38602: PPUSH
38603: CALL_OW 380
// end else
38607: GO 38626
// PrepareHuman ( false , i , skill ) ;
38609: LD_INT 0
38611: PPUSH
38612: LD_VAR 0 8
38616: PPUSH
38617: LD_VAR 0 4
38621: PPUSH
38622: CALL_OW 380
// un := CreateHuman ;
38626: LD_ADDR_VAR 0 14
38630: PUSH
38631: CALL_OW 44
38635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38636: LD_ADDR_VAR 0 7
38640: PUSH
38641: LD_VAR 0 7
38645: PPUSH
38646: LD_INT 1
38648: PPUSH
38649: LD_VAR 0 14
38653: PPUSH
38654: CALL_OW 2
38658: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38659: LD_VAR 0 14
38663: PPUSH
38664: LD_VAR 0 12
38668: PUSH
38669: LD_INT 1
38671: ARRAY
38672: PPUSH
38673: CALL_OW 52
// end ;
38677: GO 38316
38679: POP
38680: POP
// end ;
38681: GO 37618
38683: POP
38684: POP
// result := result ^ buildings ;
38685: LD_ADDR_VAR 0 7
38689: PUSH
38690: LD_VAR 0 7
38694: PUSH
38695: LD_VAR 0 18
38699: ADD
38700: ST_TO_ADDR
// end else
38701: GO 38844
// begin for i = 1 to personel do
38703: LD_ADDR_VAR 0 8
38707: PUSH
38708: DOUBLE
38709: LD_INT 1
38711: DEC
38712: ST_TO_ADDR
38713: LD_VAR 0 6
38717: PUSH
38718: FOR_TO
38719: IFFALSE 38842
// begin if i > 4 then
38721: LD_VAR 0 8
38725: PUSH
38726: LD_INT 4
38728: GREATER
38729: IFFALSE 38733
// break ;
38731: GO 38842
// x := personel [ i ] ;
38733: LD_ADDR_VAR 0 13
38737: PUSH
38738: LD_VAR 0 6
38742: PUSH
38743: LD_VAR 0 8
38747: ARRAY
38748: ST_TO_ADDR
// if x = - 1 then
38749: LD_VAR 0 13
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: EQUAL
38758: IFFALSE 38762
// continue ;
38760: GO 38718
// PrepareHuman ( false , i , skill ) ;
38762: LD_INT 0
38764: PPUSH
38765: LD_VAR 0 8
38769: PPUSH
38770: LD_VAR 0 4
38774: PPUSH
38775: CALL_OW 380
// un := CreateHuman ;
38779: LD_ADDR_VAR 0 14
38783: PUSH
38784: CALL_OW 44
38788: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38789: LD_VAR 0 14
38793: PPUSH
38794: LD_VAR 0 1
38798: PPUSH
38799: CALL_OW 250
38803: PPUSH
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL_OW 251
38813: PPUSH
38814: LD_INT 10
38816: PPUSH
38817: LD_INT 0
38819: PPUSH
38820: CALL_OW 50
// result := result ^ un ;
38824: LD_ADDR_VAR 0 7
38828: PUSH
38829: LD_VAR 0 7
38833: PUSH
38834: LD_VAR 0 14
38838: ADD
38839: ST_TO_ADDR
// end ;
38840: GO 38718
38842: POP
38843: POP
// end ; end ;
38844: LD_VAR 0 7
38848: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38849: LD_INT 0
38851: PPUSH
38852: PPUSH
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
// result := false ;
38867: LD_ADDR_VAR 0 3
38871: PUSH
38872: LD_INT 0
38874: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38875: LD_VAR 0 1
38879: NOT
38880: PUSH
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 266
38890: PUSH
38891: LD_INT 32
38893: PUSH
38894: LD_INT 33
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: IN
38901: NOT
38902: OR
38903: IFFALSE 38907
// exit ;
38905: GO 40016
// nat := GetNation ( tower ) ;
38907: LD_ADDR_VAR 0 12
38911: PUSH
38912: LD_VAR 0 1
38916: PPUSH
38917: CALL_OW 248
38921: ST_TO_ADDR
// side := GetSide ( tower ) ;
38922: LD_ADDR_VAR 0 16
38926: PUSH
38927: LD_VAR 0 1
38931: PPUSH
38932: CALL_OW 255
38936: ST_TO_ADDR
// x := GetX ( tower ) ;
38937: LD_ADDR_VAR 0 10
38941: PUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: CALL_OW 250
38951: ST_TO_ADDR
// y := GetY ( tower ) ;
38952: LD_ADDR_VAR 0 11
38956: PUSH
38957: LD_VAR 0 1
38961: PPUSH
38962: CALL_OW 251
38966: ST_TO_ADDR
// if not x or not y then
38967: LD_VAR 0 10
38971: NOT
38972: PUSH
38973: LD_VAR 0 11
38977: NOT
38978: OR
38979: IFFALSE 38983
// exit ;
38981: GO 40016
// weapon := 0 ;
38983: LD_ADDR_VAR 0 18
38987: PUSH
38988: LD_INT 0
38990: ST_TO_ADDR
// fac_list := [ ] ;
38991: LD_ADDR_VAR 0 17
38995: PUSH
38996: EMPTY
38997: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38998: LD_ADDR_VAR 0 6
39002: PUSH
39003: LD_VAR 0 1
39007: PPUSH
39008: CALL_OW 274
39012: PPUSH
39013: LD_VAR 0 2
39017: PPUSH
39018: LD_INT 0
39020: PPUSH
39021: CALL 36587 0 3
39025: PPUSH
39026: LD_INT 30
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PPUSH
39036: CALL_OW 72
39040: ST_TO_ADDR
// if not factories then
39041: LD_VAR 0 6
39045: NOT
39046: IFFALSE 39050
// exit ;
39048: GO 40016
// for i in factories do
39050: LD_ADDR_VAR 0 8
39054: PUSH
39055: LD_VAR 0 6
39059: PUSH
39060: FOR_IN
39061: IFFALSE 39086
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39063: LD_ADDR_VAR 0 17
39067: PUSH
39068: LD_VAR 0 17
39072: PUSH
39073: LD_VAR 0 8
39077: PPUSH
39078: CALL_OW 478
39082: UNION
39083: ST_TO_ADDR
39084: GO 39060
39086: POP
39087: POP
// if not fac_list then
39088: LD_VAR 0 17
39092: NOT
39093: IFFALSE 39097
// exit ;
39095: GO 40016
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_INT 4
39104: PUSH
39105: LD_INT 5
39107: PUSH
39108: LD_INT 9
39110: PUSH
39111: LD_INT 10
39113: PUSH
39114: LD_INT 6
39116: PUSH
39117: LD_INT 7
39119: PUSH
39120: LD_INT 11
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 27
39134: PUSH
39135: LD_INT 28
39137: PUSH
39138: LD_INT 26
39140: PUSH
39141: LD_INT 30
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 43
39152: PUSH
39153: LD_INT 44
39155: PUSH
39156: LD_INT 46
39158: PUSH
39159: LD_INT 45
39161: PUSH
39162: LD_INT 47
39164: PUSH
39165: LD_INT 49
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: PUSH
39181: LD_VAR 0 12
39185: ARRAY
39186: ST_TO_ADDR
// list := list isect fac_list ;
39187: LD_ADDR_VAR 0 5
39191: PUSH
39192: LD_VAR 0 5
39196: PUSH
39197: LD_VAR 0 17
39201: ISECT
39202: ST_TO_ADDR
// if not list then
39203: LD_VAR 0 5
39207: NOT
39208: IFFALSE 39212
// exit ;
39210: GO 40016
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39212: LD_VAR 0 12
39216: PUSH
39217: LD_INT 3
39219: EQUAL
39220: PUSH
39221: LD_INT 49
39223: PUSH
39224: LD_VAR 0 5
39228: IN
39229: AND
39230: PUSH
39231: LD_INT 31
39233: PPUSH
39234: LD_VAR 0 16
39238: PPUSH
39239: CALL_OW 321
39243: PUSH
39244: LD_INT 2
39246: EQUAL
39247: AND
39248: IFFALSE 39308
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39250: LD_INT 22
39252: PUSH
39253: LD_VAR 0 16
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 35
39264: PUSH
39265: LD_INT 49
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 91
39274: PUSH
39275: LD_VAR 0 1
39279: PUSH
39280: LD_INT 10
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: PPUSH
39293: CALL_OW 69
39297: NOT
39298: IFFALSE 39308
// weapon := ru_time_lapser ;
39300: LD_ADDR_VAR 0 18
39304: PUSH
39305: LD_INT 49
39307: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39308: LD_VAR 0 12
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: IN
39323: PUSH
39324: LD_INT 11
39326: PUSH
39327: LD_VAR 0 5
39331: IN
39332: PUSH
39333: LD_INT 30
39335: PUSH
39336: LD_VAR 0 5
39340: IN
39341: OR
39342: AND
39343: PUSH
39344: LD_INT 6
39346: PPUSH
39347: LD_VAR 0 16
39351: PPUSH
39352: CALL_OW 321
39356: PUSH
39357: LD_INT 2
39359: EQUAL
39360: AND
39361: IFFALSE 39526
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39363: LD_INT 22
39365: PUSH
39366: LD_VAR 0 16
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: LD_INT 35
39380: PUSH
39381: LD_INT 11
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 35
39390: PUSH
39391: LD_INT 30
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 91
39405: PUSH
39406: LD_VAR 0 1
39410: PUSH
39411: LD_INT 18
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: PPUSH
39424: CALL_OW 69
39428: NOT
39429: PUSH
39430: LD_INT 22
39432: PUSH
39433: LD_VAR 0 16
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 30
39447: PUSH
39448: LD_INT 32
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 30
39457: PUSH
39458: LD_INT 33
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 91
39472: PUSH
39473: LD_VAR 0 1
39477: PUSH
39478: LD_INT 12
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: PPUSH
39494: CALL_OW 69
39498: PUSH
39499: LD_INT 2
39501: GREATER
39502: AND
39503: IFFALSE 39526
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39505: LD_ADDR_VAR 0 18
39509: PUSH
39510: LD_INT 11
39512: PUSH
39513: LD_INT 30
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_VAR 0 12
39524: ARRAY
39525: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39526: LD_VAR 0 18
39530: NOT
39531: PUSH
39532: LD_INT 40
39534: PPUSH
39535: LD_VAR 0 16
39539: PPUSH
39540: CALL_OW 321
39544: PUSH
39545: LD_INT 2
39547: EQUAL
39548: AND
39549: PUSH
39550: LD_INT 7
39552: PUSH
39553: LD_VAR 0 5
39557: IN
39558: PUSH
39559: LD_INT 28
39561: PUSH
39562: LD_VAR 0 5
39566: IN
39567: OR
39568: PUSH
39569: LD_INT 45
39571: PUSH
39572: LD_VAR 0 5
39576: IN
39577: OR
39578: AND
39579: IFFALSE 39833
// begin hex := GetHexInfo ( x , y ) ;
39581: LD_ADDR_VAR 0 4
39585: PUSH
39586: LD_VAR 0 10
39590: PPUSH
39591: LD_VAR 0 11
39595: PPUSH
39596: CALL_OW 546
39600: ST_TO_ADDR
// if hex [ 1 ] then
39601: LD_VAR 0 4
39605: PUSH
39606: LD_INT 1
39608: ARRAY
39609: IFFALSE 39613
// exit ;
39611: GO 40016
// height := hex [ 2 ] ;
39613: LD_ADDR_VAR 0 15
39617: PUSH
39618: LD_VAR 0 4
39622: PUSH
39623: LD_INT 2
39625: ARRAY
39626: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39627: LD_ADDR_VAR 0 14
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: LD_INT 5
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// for i in tmp do
39650: LD_ADDR_VAR 0 8
39654: PUSH
39655: LD_VAR 0 14
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39831
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39663: LD_ADDR_VAR 0 9
39667: PUSH
39668: LD_VAR 0 10
39672: PPUSH
39673: LD_VAR 0 8
39677: PPUSH
39678: LD_INT 5
39680: PPUSH
39681: CALL_OW 272
39685: PUSH
39686: LD_VAR 0 11
39690: PPUSH
39691: LD_VAR 0 8
39695: PPUSH
39696: LD_INT 5
39698: PPUSH
39699: CALL_OW 273
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39708: LD_VAR 0 9
39712: PUSH
39713: LD_INT 1
39715: ARRAY
39716: PPUSH
39717: LD_VAR 0 9
39721: PUSH
39722: LD_INT 2
39724: ARRAY
39725: PPUSH
39726: CALL_OW 488
39730: IFFALSE 39829
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39732: LD_ADDR_VAR 0 4
39736: PUSH
39737: LD_VAR 0 9
39741: PUSH
39742: LD_INT 1
39744: ARRAY
39745: PPUSH
39746: LD_VAR 0 9
39750: PUSH
39751: LD_INT 2
39753: ARRAY
39754: PPUSH
39755: CALL_OW 546
39759: ST_TO_ADDR
// if hex [ 1 ] then
39760: LD_VAR 0 4
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: IFFALSE 39772
// continue ;
39770: GO 39660
// h := hex [ 2 ] ;
39772: LD_ADDR_VAR 0 13
39776: PUSH
39777: LD_VAR 0 4
39781: PUSH
39782: LD_INT 2
39784: ARRAY
39785: ST_TO_ADDR
// if h + 7 < height then
39786: LD_VAR 0 13
39790: PUSH
39791: LD_INT 7
39793: PLUS
39794: PUSH
39795: LD_VAR 0 15
39799: LESS
39800: IFFALSE 39829
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39802: LD_ADDR_VAR 0 18
39806: PUSH
39807: LD_INT 7
39809: PUSH
39810: LD_INT 28
39812: PUSH
39813: LD_INT 45
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: PUSH
39821: LD_VAR 0 12
39825: ARRAY
39826: ST_TO_ADDR
// break ;
39827: GO 39831
// end ; end ; end ;
39829: GO 39660
39831: POP
39832: POP
// end ; if not weapon then
39833: LD_VAR 0 18
39837: NOT
39838: IFFALSE 39898
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 5
39849: PUSH
39850: LD_INT 11
39852: PUSH
39853: LD_INT 30
39855: PUSH
39856: LD_INT 49
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: DIFF
39864: ST_TO_ADDR
// if not list then
39865: LD_VAR 0 5
39869: NOT
39870: IFFALSE 39874
// exit ;
39872: GO 40016
// weapon := list [ rand ( 1 , list ) ] ;
39874: LD_ADDR_VAR 0 18
39878: PUSH
39879: LD_VAR 0 5
39883: PUSH
39884: LD_INT 1
39886: PPUSH
39887: LD_VAR 0 5
39891: PPUSH
39892: CALL_OW 12
39896: ARRAY
39897: ST_TO_ADDR
// end ; if weapon then
39898: LD_VAR 0 18
39902: IFFALSE 40016
// begin tmp := CostOfWeapon ( weapon ) ;
39904: LD_ADDR_VAR 0 14
39908: PUSH
39909: LD_VAR 0 18
39913: PPUSH
39914: CALL_OW 451
39918: ST_TO_ADDR
// j := GetBase ( tower ) ;
39919: LD_ADDR_VAR 0 9
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 274
39933: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39934: LD_VAR 0 9
39938: PPUSH
39939: LD_INT 1
39941: PPUSH
39942: CALL_OW 275
39946: PUSH
39947: LD_VAR 0 14
39951: PUSH
39952: LD_INT 1
39954: ARRAY
39955: GREATEREQUAL
39956: PUSH
39957: LD_VAR 0 9
39961: PPUSH
39962: LD_INT 2
39964: PPUSH
39965: CALL_OW 275
39969: PUSH
39970: LD_VAR 0 14
39974: PUSH
39975: LD_INT 2
39977: ARRAY
39978: GREATEREQUAL
39979: AND
39980: PUSH
39981: LD_VAR 0 9
39985: PPUSH
39986: LD_INT 3
39988: PPUSH
39989: CALL_OW 275
39993: PUSH
39994: LD_VAR 0 14
39998: PUSH
39999: LD_INT 3
40001: ARRAY
40002: GREATEREQUAL
40003: AND
40004: IFFALSE 40016
// result := weapon ;
40006: LD_ADDR_VAR 0 3
40010: PUSH
40011: LD_VAR 0 18
40015: ST_TO_ADDR
// end ; end ;
40016: LD_VAR 0 3
40020: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40021: LD_INT 0
40023: PPUSH
40024: PPUSH
// result := true ;
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_INT 1
40032: ST_TO_ADDR
// if array1 = array2 then
40033: LD_VAR 0 1
40037: PUSH
40038: LD_VAR 0 2
40042: EQUAL
40043: IFFALSE 40103
// begin for i = 1 to array1 do
40045: LD_ADDR_VAR 0 4
40049: PUSH
40050: DOUBLE
40051: LD_INT 1
40053: DEC
40054: ST_TO_ADDR
40055: LD_VAR 0 1
40059: PUSH
40060: FOR_TO
40061: IFFALSE 40099
// if array1 [ i ] <> array2 [ i ] then
40063: LD_VAR 0 1
40067: PUSH
40068: LD_VAR 0 4
40072: ARRAY
40073: PUSH
40074: LD_VAR 0 2
40078: PUSH
40079: LD_VAR 0 4
40083: ARRAY
40084: NONEQUAL
40085: IFFALSE 40097
// begin result := false ;
40087: LD_ADDR_VAR 0 3
40091: PUSH
40092: LD_INT 0
40094: ST_TO_ADDR
// break ;
40095: GO 40099
// end ;
40097: GO 40060
40099: POP
40100: POP
// end else
40101: GO 40111
// result := false ;
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_INT 0
40110: ST_TO_ADDR
// end ;
40111: LD_VAR 0 3
40115: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40116: LD_INT 0
40118: PPUSH
40119: PPUSH
// if not array1 or not array2 then
40120: LD_VAR 0 1
40124: NOT
40125: PUSH
40126: LD_VAR 0 2
40130: NOT
40131: OR
40132: IFFALSE 40136
// exit ;
40134: GO 40200
// result := true ;
40136: LD_ADDR_VAR 0 3
40140: PUSH
40141: LD_INT 1
40143: ST_TO_ADDR
// for i = 1 to array1 do
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: DOUBLE
40150: LD_INT 1
40152: DEC
40153: ST_TO_ADDR
40154: LD_VAR 0 1
40158: PUSH
40159: FOR_TO
40160: IFFALSE 40198
// if array1 [ i ] <> array2 [ i ] then
40162: LD_VAR 0 1
40166: PUSH
40167: LD_VAR 0 4
40171: ARRAY
40172: PUSH
40173: LD_VAR 0 2
40177: PUSH
40178: LD_VAR 0 4
40182: ARRAY
40183: NONEQUAL
40184: IFFALSE 40196
// begin result := false ;
40186: LD_ADDR_VAR 0 3
40190: PUSH
40191: LD_INT 0
40193: ST_TO_ADDR
// break ;
40194: GO 40198
// end ;
40196: GO 40159
40198: POP
40199: POP
// end ;
40200: LD_VAR 0 3
40204: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40205: LD_INT 0
40207: PPUSH
40208: PPUSH
40209: PPUSH
// pom := GetBase ( fac ) ;
40210: LD_ADDR_VAR 0 5
40214: PUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 274
40224: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40225: LD_ADDR_VAR 0 4
40229: PUSH
40230: LD_VAR 0 2
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: PPUSH
40239: LD_VAR 0 2
40243: PUSH
40244: LD_INT 2
40246: ARRAY
40247: PPUSH
40248: LD_VAR 0 2
40252: PUSH
40253: LD_INT 3
40255: ARRAY
40256: PPUSH
40257: LD_VAR 0 2
40261: PUSH
40262: LD_INT 4
40264: ARRAY
40265: PPUSH
40266: CALL_OW 449
40270: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40271: LD_ADDR_VAR 0 3
40275: PUSH
40276: LD_VAR 0 5
40280: PPUSH
40281: LD_INT 1
40283: PPUSH
40284: CALL_OW 275
40288: PUSH
40289: LD_VAR 0 4
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: GREATEREQUAL
40298: PUSH
40299: LD_VAR 0 5
40303: PPUSH
40304: LD_INT 2
40306: PPUSH
40307: CALL_OW 275
40311: PUSH
40312: LD_VAR 0 4
40316: PUSH
40317: LD_INT 2
40319: ARRAY
40320: GREATEREQUAL
40321: AND
40322: PUSH
40323: LD_VAR 0 5
40327: PPUSH
40328: LD_INT 3
40330: PPUSH
40331: CALL_OW 275
40335: PUSH
40336: LD_VAR 0 4
40340: PUSH
40341: LD_INT 3
40343: ARRAY
40344: GREATEREQUAL
40345: AND
40346: ST_TO_ADDR
// end ;
40347: LD_VAR 0 3
40351: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40352: LD_INT 0
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
// pom := GetBase ( building ) ;
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 274
40372: ST_TO_ADDR
// if not pom then
40373: LD_VAR 0 3
40377: NOT
40378: IFFALSE 40382
// exit ;
40380: GO 40552
// btype := GetBType ( building ) ;
40382: LD_ADDR_VAR 0 5
40386: PUSH
40387: LD_VAR 0 1
40391: PPUSH
40392: CALL_OW 266
40396: ST_TO_ADDR
// if btype = b_armoury then
40397: LD_VAR 0 5
40401: PUSH
40402: LD_INT 4
40404: EQUAL
40405: IFFALSE 40415
// btype := b_barracks ;
40407: LD_ADDR_VAR 0 5
40411: PUSH
40412: LD_INT 5
40414: ST_TO_ADDR
// if btype = b_depot then
40415: LD_VAR 0 5
40419: PUSH
40420: LD_INT 0
40422: EQUAL
40423: IFFALSE 40433
// btype := b_warehouse ;
40425: LD_ADDR_VAR 0 5
40429: PUSH
40430: LD_INT 1
40432: ST_TO_ADDR
// if btype = b_workshop then
40433: LD_VAR 0 5
40437: PUSH
40438: LD_INT 2
40440: EQUAL
40441: IFFALSE 40451
// btype := b_factory ;
40443: LD_ADDR_VAR 0 5
40447: PUSH
40448: LD_INT 3
40450: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40451: LD_ADDR_VAR 0 4
40455: PUSH
40456: LD_VAR 0 5
40460: PPUSH
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 248
40470: PPUSH
40471: CALL_OW 450
40475: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40476: LD_ADDR_VAR 0 2
40480: PUSH
40481: LD_VAR 0 3
40485: PPUSH
40486: LD_INT 1
40488: PPUSH
40489: CALL_OW 275
40493: PUSH
40494: LD_VAR 0 4
40498: PUSH
40499: LD_INT 1
40501: ARRAY
40502: GREATEREQUAL
40503: PUSH
40504: LD_VAR 0 3
40508: PPUSH
40509: LD_INT 2
40511: PPUSH
40512: CALL_OW 275
40516: PUSH
40517: LD_VAR 0 4
40521: PUSH
40522: LD_INT 2
40524: ARRAY
40525: GREATEREQUAL
40526: AND
40527: PUSH
40528: LD_VAR 0 3
40532: PPUSH
40533: LD_INT 3
40535: PPUSH
40536: CALL_OW 275
40540: PUSH
40541: LD_VAR 0 4
40545: PUSH
40546: LD_INT 3
40548: ARRAY
40549: GREATEREQUAL
40550: AND
40551: ST_TO_ADDR
// end ;
40552: LD_VAR 0 2
40556: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40557: LD_INT 0
40559: PPUSH
40560: PPUSH
40561: PPUSH
// pom := GetBase ( building ) ;
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 274
40576: ST_TO_ADDR
// if not pom then
40577: LD_VAR 0 4
40581: NOT
40582: IFFALSE 40586
// exit ;
40584: GO 40687
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40586: LD_ADDR_VAR 0 5
40590: PUSH
40591: LD_VAR 0 2
40595: PPUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 248
40605: PPUSH
40606: CALL_OW 450
40610: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40611: LD_ADDR_VAR 0 3
40615: PUSH
40616: LD_VAR 0 4
40620: PPUSH
40621: LD_INT 1
40623: PPUSH
40624: CALL_OW 275
40628: PUSH
40629: LD_VAR 0 5
40633: PUSH
40634: LD_INT 1
40636: ARRAY
40637: GREATEREQUAL
40638: PUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: LD_INT 2
40646: PPUSH
40647: CALL_OW 275
40651: PUSH
40652: LD_VAR 0 5
40656: PUSH
40657: LD_INT 2
40659: ARRAY
40660: GREATEREQUAL
40661: AND
40662: PUSH
40663: LD_VAR 0 4
40667: PPUSH
40668: LD_INT 3
40670: PPUSH
40671: CALL_OW 275
40675: PUSH
40676: LD_VAR 0 5
40680: PUSH
40681: LD_INT 3
40683: ARRAY
40684: GREATEREQUAL
40685: AND
40686: ST_TO_ADDR
// end ;
40687: LD_VAR 0 3
40691: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40692: LD_INT 0
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
// result := false ;
40705: LD_ADDR_VAR 0 8
40709: PUSH
40710: LD_INT 0
40712: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40713: LD_VAR 0 5
40717: NOT
40718: PUSH
40719: LD_VAR 0 1
40723: NOT
40724: OR
40725: PUSH
40726: LD_VAR 0 2
40730: NOT
40731: OR
40732: PUSH
40733: LD_VAR 0 3
40737: NOT
40738: OR
40739: IFFALSE 40743
// exit ;
40741: GO 41557
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40743: LD_ADDR_VAR 0 14
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: LD_VAR 0 2
40757: PPUSH
40758: LD_VAR 0 3
40762: PPUSH
40763: LD_VAR 0 4
40767: PPUSH
40768: LD_VAR 0 5
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: PPUSH
40777: CALL_OW 248
40781: PPUSH
40782: LD_INT 0
40784: PPUSH
40785: CALL 42790 0 6
40789: ST_TO_ADDR
// if not hexes then
40790: LD_VAR 0 14
40794: NOT
40795: IFFALSE 40799
// exit ;
40797: GO 41557
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40799: LD_ADDR_VAR 0 17
40803: PUSH
40804: LD_VAR 0 5
40808: PPUSH
40809: LD_INT 22
40811: PUSH
40812: LD_VAR 0 13
40816: PPUSH
40817: CALL_OW 255
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: LD_INT 30
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 30
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 72
40862: ST_TO_ADDR
// for i = 1 to hexes do
40863: LD_ADDR_VAR 0 9
40867: PUSH
40868: DOUBLE
40869: LD_INT 1
40871: DEC
40872: ST_TO_ADDR
40873: LD_VAR 0 14
40877: PUSH
40878: FOR_TO
40879: IFFALSE 41555
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40881: LD_ADDR_VAR 0 13
40885: PUSH
40886: LD_VAR 0 14
40890: PUSH
40891: LD_VAR 0 9
40895: ARRAY
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 14
40905: PUSH
40906: LD_VAR 0 9
40910: ARRAY
40911: PUSH
40912: LD_INT 2
40914: ARRAY
40915: PPUSH
40916: CALL_OW 428
40920: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40921: LD_VAR 0 14
40925: PUSH
40926: LD_VAR 0 9
40930: ARRAY
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: PPUSH
40936: LD_VAR 0 14
40940: PUSH
40941: LD_VAR 0 9
40945: ARRAY
40946: PUSH
40947: LD_INT 2
40949: ARRAY
40950: PPUSH
40951: CALL_OW 351
40955: PUSH
40956: LD_VAR 0 14
40960: PUSH
40961: LD_VAR 0 9
40965: ARRAY
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: PPUSH
40971: LD_VAR 0 14
40975: PUSH
40976: LD_VAR 0 9
40980: ARRAY
40981: PUSH
40982: LD_INT 2
40984: ARRAY
40985: PPUSH
40986: CALL_OW 488
40990: NOT
40991: OR
40992: PUSH
40993: LD_VAR 0 13
40997: PPUSH
40998: CALL_OW 247
41002: PUSH
41003: LD_INT 3
41005: EQUAL
41006: OR
41007: IFFALSE 41013
// exit ;
41009: POP
41010: POP
41011: GO 41557
// if not tmp then
41013: LD_VAR 0 13
41017: NOT
41018: IFFALSE 41022
// continue ;
41020: GO 40878
// result := true ;
41022: LD_ADDR_VAR 0 8
41026: PUSH
41027: LD_INT 1
41029: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41030: LD_VAR 0 6
41034: PUSH
41035: LD_VAR 0 13
41039: PPUSH
41040: CALL_OW 247
41044: PUSH
41045: LD_INT 2
41047: EQUAL
41048: AND
41049: PUSH
41050: LD_VAR 0 13
41054: PPUSH
41055: CALL_OW 263
41059: PUSH
41060: LD_INT 1
41062: EQUAL
41063: AND
41064: IFFALSE 41228
// begin if IsDrivenBy ( tmp ) then
41066: LD_VAR 0 13
41070: PPUSH
41071: CALL_OW 311
41075: IFFALSE 41079
// continue ;
41077: GO 40878
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41079: LD_VAR 0 6
41083: PPUSH
41084: LD_INT 3
41086: PUSH
41087: LD_INT 60
41089: PUSH
41090: EMPTY
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 3
41099: PUSH
41100: LD_INT 55
41102: PUSH
41103: EMPTY
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PPUSH
41114: CALL_OW 72
41118: IFFALSE 41226
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41120: LD_ADDR_VAR 0 18
41124: PUSH
41125: LD_VAR 0 6
41129: PPUSH
41130: LD_INT 3
41132: PUSH
41133: LD_INT 60
41135: PUSH
41136: EMPTY
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: LD_INT 55
41148: PUSH
41149: EMPTY
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PPUSH
41160: CALL_OW 72
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: ST_TO_ADDR
// if IsInUnit ( driver ) then
41169: LD_VAR 0 18
41173: PPUSH
41174: CALL_OW 310
41178: IFFALSE 41189
// ComExit ( driver ) ;
41180: LD_VAR 0 18
41184: PPUSH
41185: CALL 66570 0 1
// AddComEnterUnit ( driver , tmp ) ;
41189: LD_VAR 0 18
41193: PPUSH
41194: LD_VAR 0 13
41198: PPUSH
41199: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41203: LD_VAR 0 18
41207: PPUSH
41208: LD_VAR 0 7
41212: PPUSH
41213: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41217: LD_VAR 0 18
41221: PPUSH
41222: CALL_OW 181
// end ; continue ;
41226: GO 40878
// end ; if not cleaners or not tmp in cleaners then
41228: LD_VAR 0 6
41232: NOT
41233: PUSH
41234: LD_VAR 0 13
41238: PUSH
41239: LD_VAR 0 6
41243: IN
41244: NOT
41245: OR
41246: IFFALSE 41553
// begin if dep then
41248: LD_VAR 0 17
41252: IFFALSE 41388
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41254: LD_ADDR_VAR 0 16
41258: PUSH
41259: LD_VAR 0 17
41263: PUSH
41264: LD_INT 1
41266: ARRAY
41267: PPUSH
41268: CALL_OW 250
41272: PPUSH
41273: LD_VAR 0 17
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: PPUSH
41282: CALL_OW 254
41286: PPUSH
41287: LD_INT 5
41289: PPUSH
41290: CALL_OW 272
41294: PUSH
41295: LD_VAR 0 17
41299: PUSH
41300: LD_INT 1
41302: ARRAY
41303: PPUSH
41304: CALL_OW 251
41308: PPUSH
41309: LD_VAR 0 17
41313: PUSH
41314: LD_INT 1
41316: ARRAY
41317: PPUSH
41318: CALL_OW 254
41322: PPUSH
41323: LD_INT 5
41325: PPUSH
41326: CALL_OW 273
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41335: LD_VAR 0 16
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: PPUSH
41344: LD_VAR 0 16
41348: PUSH
41349: LD_INT 2
41351: ARRAY
41352: PPUSH
41353: CALL_OW 488
41357: IFFALSE 41388
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41359: LD_VAR 0 13
41363: PPUSH
41364: LD_VAR 0 16
41368: PUSH
41369: LD_INT 1
41371: ARRAY
41372: PPUSH
41373: LD_VAR 0 16
41377: PUSH
41378: LD_INT 2
41380: ARRAY
41381: PPUSH
41382: CALL_OW 111
// continue ;
41386: GO 40878
// end ; end ; r := GetDir ( tmp ) ;
41388: LD_ADDR_VAR 0 15
41392: PUSH
41393: LD_VAR 0 13
41397: PPUSH
41398: CALL_OW 254
41402: ST_TO_ADDR
// if r = 5 then
41403: LD_VAR 0 15
41407: PUSH
41408: LD_INT 5
41410: EQUAL
41411: IFFALSE 41421
// r := 0 ;
41413: LD_ADDR_VAR 0 15
41417: PUSH
41418: LD_INT 0
41420: ST_TO_ADDR
// for j = r to 5 do
41421: LD_ADDR_VAR 0 10
41425: PUSH
41426: DOUBLE
41427: LD_VAR 0 15
41431: DEC
41432: ST_TO_ADDR
41433: LD_INT 5
41435: PUSH
41436: FOR_TO
41437: IFFALSE 41551
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41439: LD_ADDR_VAR 0 11
41443: PUSH
41444: LD_VAR 0 13
41448: PPUSH
41449: CALL_OW 250
41453: PPUSH
41454: LD_VAR 0 10
41458: PPUSH
41459: LD_INT 2
41461: PPUSH
41462: CALL_OW 272
41466: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41467: LD_ADDR_VAR 0 12
41471: PUSH
41472: LD_VAR 0 13
41476: PPUSH
41477: CALL_OW 251
41481: PPUSH
41482: LD_VAR 0 10
41486: PPUSH
41487: LD_INT 2
41489: PPUSH
41490: CALL_OW 273
41494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41495: LD_VAR 0 11
41499: PPUSH
41500: LD_VAR 0 12
41504: PPUSH
41505: CALL_OW 488
41509: PUSH
41510: LD_VAR 0 11
41514: PPUSH
41515: LD_VAR 0 12
41519: PPUSH
41520: CALL_OW 428
41524: NOT
41525: AND
41526: IFFALSE 41549
// begin ComMoveXY ( tmp , _x , _y ) ;
41528: LD_VAR 0 13
41532: PPUSH
41533: LD_VAR 0 11
41537: PPUSH
41538: LD_VAR 0 12
41542: PPUSH
41543: CALL_OW 111
// break ;
41547: GO 41551
// end ; end ;
41549: GO 41436
41551: POP
41552: POP
// end ; end ;
41553: GO 40878
41555: POP
41556: POP
// end ;
41557: LD_VAR 0 8
41561: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41562: LD_INT 0
41564: PPUSH
// result := true ;
41565: LD_ADDR_VAR 0 3
41569: PUSH
41570: LD_INT 1
41572: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41573: LD_VAR 0 2
41577: PUSH
41578: LD_INT 24
41580: DOUBLE
41581: EQUAL
41582: IFTRUE 41592
41584: LD_INT 33
41586: DOUBLE
41587: EQUAL
41588: IFTRUE 41592
41590: GO 41617
41592: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41593: LD_ADDR_VAR 0 3
41597: PUSH
41598: LD_INT 32
41600: PPUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 321
41610: PUSH
41611: LD_INT 2
41613: EQUAL
41614: ST_TO_ADDR
41615: GO 41933
41617: LD_INT 20
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41650
41625: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_INT 6
41633: PPUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 321
41643: PUSH
41644: LD_INT 2
41646: EQUAL
41647: ST_TO_ADDR
41648: GO 41933
41650: LD_INT 22
41652: DOUBLE
41653: EQUAL
41654: IFTRUE 41664
41656: LD_INT 36
41658: DOUBLE
41659: EQUAL
41660: IFTRUE 41664
41662: GO 41689
41664: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41665: LD_ADDR_VAR 0 3
41669: PUSH
41670: LD_INT 15
41672: PPUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: CALL_OW 321
41682: PUSH
41683: LD_INT 2
41685: EQUAL
41686: ST_TO_ADDR
41687: GO 41933
41689: LD_INT 30
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41722
41697: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_INT 20
41705: PPUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 321
41715: PUSH
41716: LD_INT 2
41718: EQUAL
41719: ST_TO_ADDR
41720: GO 41933
41722: LD_INT 28
41724: DOUBLE
41725: EQUAL
41726: IFTRUE 41736
41728: LD_INT 21
41730: DOUBLE
41731: EQUAL
41732: IFTRUE 41736
41734: GO 41761
41736: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41737: LD_ADDR_VAR 0 3
41741: PUSH
41742: LD_INT 21
41744: PPUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: CALL_OW 321
41754: PUSH
41755: LD_INT 2
41757: EQUAL
41758: ST_TO_ADDR
41759: GO 41933
41761: LD_INT 16
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41769
41767: GO 41794
41769: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_INT 84
41777: PPUSH
41778: LD_VAR 0 1
41782: PPUSH
41783: CALL_OW 321
41787: PUSH
41788: LD_INT 2
41790: EQUAL
41791: ST_TO_ADDR
41792: GO 41933
41794: LD_INT 19
41796: DOUBLE
41797: EQUAL
41798: IFTRUE 41808
41800: LD_INT 23
41802: DOUBLE
41803: EQUAL
41804: IFTRUE 41808
41806: GO 41833
41808: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41809: LD_ADDR_VAR 0 3
41813: PUSH
41814: LD_INT 83
41816: PPUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 321
41826: PUSH
41827: LD_INT 2
41829: EQUAL
41830: ST_TO_ADDR
41831: GO 41933
41833: LD_INT 17
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41841
41839: GO 41866
41841: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_INT 39
41849: PPUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: CALL_OW 321
41859: PUSH
41860: LD_INT 2
41862: EQUAL
41863: ST_TO_ADDR
41864: GO 41933
41866: LD_INT 18
41868: DOUBLE
41869: EQUAL
41870: IFTRUE 41874
41872: GO 41899
41874: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41875: LD_ADDR_VAR 0 3
41879: PUSH
41880: LD_INT 40
41882: PPUSH
41883: LD_VAR 0 1
41887: PPUSH
41888: CALL_OW 321
41892: PUSH
41893: LD_INT 2
41895: EQUAL
41896: ST_TO_ADDR
41897: GO 41933
41899: LD_INT 27
41901: DOUBLE
41902: EQUAL
41903: IFTRUE 41907
41905: GO 41932
41907: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_INT 35
41915: PPUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 321
41925: PUSH
41926: LD_INT 2
41928: EQUAL
41929: ST_TO_ADDR
41930: GO 41933
41932: POP
// end ;
41933: LD_VAR 0 3
41937: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
// result := false ;
41951: LD_ADDR_VAR 0 6
41955: PUSH
41956: LD_INT 0
41958: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41959: LD_VAR 0 1
41963: NOT
41964: PUSH
41965: LD_VAR 0 1
41969: PPUSH
41970: CALL_OW 266
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: IN
41985: NOT
41986: OR
41987: PUSH
41988: LD_VAR 0 2
41992: NOT
41993: OR
41994: PUSH
41995: LD_VAR 0 5
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: LD_INT 4
42014: PUSH
42015: LD_INT 5
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: IN
42026: NOT
42027: OR
42028: PUSH
42029: LD_VAR 0 3
42033: PPUSH
42034: LD_VAR 0 4
42038: PPUSH
42039: CALL_OW 488
42043: NOT
42044: OR
42045: IFFALSE 42049
// exit ;
42047: GO 42785
// side := GetSide ( depot ) ;
42049: LD_ADDR_VAR 0 9
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: CALL_OW 255
42063: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42064: LD_VAR 0 9
42068: PPUSH
42069: LD_VAR 0 2
42073: PPUSH
42074: CALL 41562 0 2
42078: NOT
42079: IFFALSE 42083
// exit ;
42081: GO 42785
// pom := GetBase ( depot ) ;
42083: LD_ADDR_VAR 0 10
42087: PUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: CALL_OW 274
42097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42098: LD_ADDR_VAR 0 11
42102: PUSH
42103: LD_VAR 0 2
42107: PPUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 248
42117: PPUSH
42118: CALL_OW 450
42122: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42123: LD_VAR 0 10
42127: PPUSH
42128: LD_INT 1
42130: PPUSH
42131: CALL_OW 275
42135: PUSH
42136: LD_VAR 0 11
42140: PUSH
42141: LD_INT 1
42143: ARRAY
42144: GREATEREQUAL
42145: PUSH
42146: LD_VAR 0 10
42150: PPUSH
42151: LD_INT 2
42153: PPUSH
42154: CALL_OW 275
42158: PUSH
42159: LD_VAR 0 11
42163: PUSH
42164: LD_INT 2
42166: ARRAY
42167: GREATEREQUAL
42168: AND
42169: PUSH
42170: LD_VAR 0 10
42174: PPUSH
42175: LD_INT 3
42177: PPUSH
42178: CALL_OW 275
42182: PUSH
42183: LD_VAR 0 11
42187: PUSH
42188: LD_INT 3
42190: ARRAY
42191: GREATEREQUAL
42192: AND
42193: NOT
42194: IFFALSE 42198
// exit ;
42196: GO 42785
// if GetBType ( depot ) = b_depot then
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 266
42207: PUSH
42208: LD_INT 0
42210: EQUAL
42211: IFFALSE 42223
// dist := 28 else
42213: LD_ADDR_VAR 0 14
42217: PUSH
42218: LD_INT 28
42220: ST_TO_ADDR
42221: GO 42231
// dist := 36 ;
42223: LD_ADDR_VAR 0 14
42227: PUSH
42228: LD_INT 36
42230: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42231: LD_VAR 0 1
42235: PPUSH
42236: LD_VAR 0 3
42240: PPUSH
42241: LD_VAR 0 4
42245: PPUSH
42246: CALL_OW 297
42250: PUSH
42251: LD_VAR 0 14
42255: GREATER
42256: IFFALSE 42260
// exit ;
42258: GO 42785
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42260: LD_ADDR_VAR 0 12
42264: PUSH
42265: LD_VAR 0 2
42269: PPUSH
42270: LD_VAR 0 3
42274: PPUSH
42275: LD_VAR 0 4
42279: PPUSH
42280: LD_VAR 0 5
42284: PPUSH
42285: LD_VAR 0 1
42289: PPUSH
42290: CALL_OW 248
42294: PPUSH
42295: LD_INT 0
42297: PPUSH
42298: CALL 42790 0 6
42302: ST_TO_ADDR
// if not hexes then
42303: LD_VAR 0 12
42307: NOT
42308: IFFALSE 42312
// exit ;
42310: GO 42785
// hex := GetHexInfo ( x , y ) ;
42312: LD_ADDR_VAR 0 15
42316: PUSH
42317: LD_VAR 0 3
42321: PPUSH
42322: LD_VAR 0 4
42326: PPUSH
42327: CALL_OW 546
42331: ST_TO_ADDR
// if hex [ 1 ] then
42332: LD_VAR 0 15
42336: PUSH
42337: LD_INT 1
42339: ARRAY
42340: IFFALSE 42344
// exit ;
42342: GO 42785
// height := hex [ 2 ] ;
42344: LD_ADDR_VAR 0 13
42348: PUSH
42349: LD_VAR 0 15
42353: PUSH
42354: LD_INT 2
42356: ARRAY
42357: ST_TO_ADDR
// for i = 1 to hexes do
42358: LD_ADDR_VAR 0 7
42362: PUSH
42363: DOUBLE
42364: LD_INT 1
42366: DEC
42367: ST_TO_ADDR
42368: LD_VAR 0 12
42372: PUSH
42373: FOR_TO
42374: IFFALSE 42704
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42376: LD_VAR 0 12
42380: PUSH
42381: LD_VAR 0 7
42385: ARRAY
42386: PUSH
42387: LD_INT 1
42389: ARRAY
42390: PPUSH
42391: LD_VAR 0 12
42395: PUSH
42396: LD_VAR 0 7
42400: ARRAY
42401: PUSH
42402: LD_INT 2
42404: ARRAY
42405: PPUSH
42406: CALL_OW 488
42410: NOT
42411: PUSH
42412: LD_VAR 0 12
42416: PUSH
42417: LD_VAR 0 7
42421: ARRAY
42422: PUSH
42423: LD_INT 1
42425: ARRAY
42426: PPUSH
42427: LD_VAR 0 12
42431: PUSH
42432: LD_VAR 0 7
42436: ARRAY
42437: PUSH
42438: LD_INT 2
42440: ARRAY
42441: PPUSH
42442: CALL_OW 428
42446: PUSH
42447: LD_INT 0
42449: GREATER
42450: OR
42451: PUSH
42452: LD_VAR 0 12
42456: PUSH
42457: LD_VAR 0 7
42461: ARRAY
42462: PUSH
42463: LD_INT 1
42465: ARRAY
42466: PPUSH
42467: LD_VAR 0 12
42471: PUSH
42472: LD_VAR 0 7
42476: ARRAY
42477: PUSH
42478: LD_INT 2
42480: ARRAY
42481: PPUSH
42482: CALL_OW 351
42486: OR
42487: IFFALSE 42493
// exit ;
42489: POP
42490: POP
42491: GO 42785
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42493: LD_ADDR_VAR 0 8
42497: PUSH
42498: LD_VAR 0 12
42502: PUSH
42503: LD_VAR 0 7
42507: ARRAY
42508: PUSH
42509: LD_INT 1
42511: ARRAY
42512: PPUSH
42513: LD_VAR 0 12
42517: PUSH
42518: LD_VAR 0 7
42522: ARRAY
42523: PUSH
42524: LD_INT 2
42526: ARRAY
42527: PPUSH
42528: CALL_OW 546
42532: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42533: LD_VAR 0 8
42537: PUSH
42538: LD_INT 1
42540: ARRAY
42541: PUSH
42542: LD_VAR 0 8
42546: PUSH
42547: LD_INT 2
42549: ARRAY
42550: PUSH
42551: LD_VAR 0 13
42555: PUSH
42556: LD_INT 2
42558: PLUS
42559: GREATER
42560: OR
42561: PUSH
42562: LD_VAR 0 8
42566: PUSH
42567: LD_INT 2
42569: ARRAY
42570: PUSH
42571: LD_VAR 0 13
42575: PUSH
42576: LD_INT 2
42578: MINUS
42579: LESS
42580: OR
42581: PUSH
42582: LD_VAR 0 8
42586: PUSH
42587: LD_INT 3
42589: ARRAY
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 8
42596: PUSH
42597: LD_INT 9
42599: PUSH
42600: LD_INT 10
42602: PUSH
42603: LD_INT 11
42605: PUSH
42606: LD_INT 12
42608: PUSH
42609: LD_INT 13
42611: PUSH
42612: LD_INT 16
42614: PUSH
42615: LD_INT 17
42617: PUSH
42618: LD_INT 18
42620: PUSH
42621: LD_INT 19
42623: PUSH
42624: LD_INT 20
42626: PUSH
42627: LD_INT 21
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: IN
42645: NOT
42646: OR
42647: PUSH
42648: LD_VAR 0 8
42652: PUSH
42653: LD_INT 5
42655: ARRAY
42656: NOT
42657: OR
42658: PUSH
42659: LD_VAR 0 8
42663: PUSH
42664: LD_INT 6
42666: ARRAY
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 7
42676: PUSH
42677: LD_INT 9
42679: PUSH
42680: LD_INT 10
42682: PUSH
42683: LD_INT 11
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: IN
42694: NOT
42695: OR
42696: IFFALSE 42702
// exit ;
42698: POP
42699: POP
42700: GO 42785
// end ;
42702: GO 42373
42704: POP
42705: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42706: LD_VAR 0 9
42710: PPUSH
42711: LD_VAR 0 3
42715: PPUSH
42716: LD_VAR 0 4
42720: PPUSH
42721: LD_INT 20
42723: PPUSH
42724: CALL 34737 0 4
42728: PUSH
42729: LD_INT 4
42731: ARRAY
42732: IFFALSE 42736
// exit ;
42734: GO 42785
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42736: LD_VAR 0 2
42740: PUSH
42741: LD_INT 29
42743: PUSH
42744: LD_INT 30
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: IN
42751: PUSH
42752: LD_VAR 0 3
42756: PPUSH
42757: LD_VAR 0 4
42761: PPUSH
42762: LD_VAR 0 9
42766: PPUSH
42767: CALL_OW 440
42771: NOT
42772: AND
42773: IFFALSE 42777
// exit ;
42775: GO 42785
// result := true ;
42777: LD_ADDR_VAR 0 6
42781: PUSH
42782: LD_INT 1
42784: ST_TO_ADDR
// end ;
42785: LD_VAR 0 6
42789: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42790: LD_INT 0
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
42811: PPUSH
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
42833: PPUSH
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
// result = [ ] ;
42850: LD_ADDR_VAR 0 7
42854: PUSH
42855: EMPTY
42856: ST_TO_ADDR
// temp_list = [ ] ;
42857: LD_ADDR_VAR 0 9
42861: PUSH
42862: EMPTY
42863: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42864: LD_VAR 0 4
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 4
42883: PUSH
42884: LD_INT 5
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: IN
42895: NOT
42896: PUSH
42897: LD_VAR 0 1
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: IN
42912: PUSH
42913: LD_VAR 0 5
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: IN
42932: NOT
42933: AND
42934: OR
42935: IFFALSE 42939
// exit ;
42937: GO 61330
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42939: LD_VAR 0 1
42943: PUSH
42944: LD_INT 6
42946: PUSH
42947: LD_INT 7
42949: PUSH
42950: LD_INT 8
42952: PUSH
42953: LD_INT 13
42955: PUSH
42956: LD_INT 12
42958: PUSH
42959: LD_INT 15
42961: PUSH
42962: LD_INT 11
42964: PUSH
42965: LD_INT 14
42967: PUSH
42968: LD_INT 10
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: IN
42982: IFFALSE 42992
// btype = b_lab ;
42984: LD_ADDR_VAR 0 1
42988: PUSH
42989: LD_INT 6
42991: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42992: LD_VAR 0 6
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: IN
43011: NOT
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 6
43032: PUSH
43033: LD_INT 36
43035: PUSH
43036: LD_INT 4
43038: PUSH
43039: LD_INT 5
43041: PUSH
43042: LD_INT 31
43044: PUSH
43045: LD_INT 32
43047: PUSH
43048: LD_INT 33
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: IN
43064: NOT
43065: PUSH
43066: LD_VAR 0 6
43070: PUSH
43071: LD_INT 1
43073: EQUAL
43074: AND
43075: OR
43076: PUSH
43077: LD_VAR 0 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: IN
43092: NOT
43093: PUSH
43094: LD_VAR 0 6
43098: PUSH
43099: LD_INT 2
43101: EQUAL
43102: AND
43103: OR
43104: IFFALSE 43114
// mode = 0 ;
43106: LD_ADDR_VAR 0 6
43110: PUSH
43111: LD_INT 0
43113: ST_TO_ADDR
// case mode of 0 :
43114: LD_VAR 0 6
43118: PUSH
43119: LD_INT 0
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 54580
43127: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43128: LD_ADDR_VAR 0 11
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43321: LD_ADDR_VAR 0 12
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 3
43478: NEG
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43517: LD_ADDR_VAR 0 13
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 3
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 3
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: NEG
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43716: LD_ADDR_VAR 0 14
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 3
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43912: LD_ADDR_VAR 0 15
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44105: LD_ADDR_VAR 0 16
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44298: LD_ADDR_VAR 0 17
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44528: LD_ADDR_VAR 0 18
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44758: LD_ADDR_VAR 0 19
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44988: LD_ADDR_VAR 0 20
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45218: LD_ADDR_VAR 0 21
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45448: LD_ADDR_VAR 0 22
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45678: LD_ADDR_VAR 0 23
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45958: LD_ADDR_VAR 0 24
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46234: LD_ADDR_VAR 0 25
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 3
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46508: LD_ADDR_VAR 0 26
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46784: LD_ADDR_VAR 0 27
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47064: LD_ADDR_VAR 0 28
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47346: LD_ADDR_VAR 0 29
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 3
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47625: LD_ADDR_VAR 0 30
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 3
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47903: LD_ADDR_VAR 0 31
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 3
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 3
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48181: LD_ADDR_VAR 0 32
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 3
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48459: LD_ADDR_VAR 0 33
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 3
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48738: LD_ADDR_VAR 0 34
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 3
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49018: LD_ADDR_VAR 0 35
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49130: LD_ADDR_VAR 0 36
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49242: LD_ADDR_VAR 0 37
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49354: LD_ADDR_VAR 0 38
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49466: LD_ADDR_VAR 0 39
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49578: LD_ADDR_VAR 0 40
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49690: LD_ADDR_VAR 0 41
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50040: LD_ADDR_VAR 0 42
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 3
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 3
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 3
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50390: LD_ADDR_VAR 0 43
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 3
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50738: LD_ADDR_VAR 0 44
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51088: LD_ADDR_VAR 0 45
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51438: LD_ADDR_VAR 0 46
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 3
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 3
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51786: LD_ADDR_VAR 0 47
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51937: LD_ADDR_VAR 0 48
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52084: LD_ADDR_VAR 0 49
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52228: LD_ADDR_VAR 0 50
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52372: LD_ADDR_VAR 0 51
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52519: LD_ADDR_VAR 0 52
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52670: LD_ADDR_VAR 0 53
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52900: LD_ADDR_VAR 0 54
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53130: LD_ADDR_VAR 0 55
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53360: LD_ADDR_VAR 0 56
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53590: LD_ADDR_VAR 0 57
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53820: LD_ADDR_VAR 0 58
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54050: LD_ADDR_VAR 0 59
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54138: LD_ADDR_VAR 0 60
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54226: LD_ADDR_VAR 0 61
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54314: LD_ADDR_VAR 0 62
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54402: LD_ADDR_VAR 0 63
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54490: LD_ADDR_VAR 0 64
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: ST_TO_ADDR
// end ; 1 :
54578: GO 60475
54580: LD_INT 1
54582: DOUBLE
54583: EQUAL
54584: IFTRUE 54588
54586: GO 57211
54588: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54589: LD_ADDR_VAR 0 11
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54633: LD_ADDR_VAR 0 12
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54674: LD_ADDR_VAR 0 13
54678: PUSH
54679: LD_INT 3
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54714: LD_ADDR_VAR 0 14
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54755: LD_ADDR_VAR 0 15
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54799: LD_ADDR_VAR 0 16
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: LIST
54844: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54845: LD_ADDR_VAR 0 17
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54889: LD_ADDR_VAR 0 18
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54930: LD_ADDR_VAR 0 19
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54970: LD_ADDR_VAR 0 20
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55011: LD_ADDR_VAR 0 21
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: LIST
55054: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55055: LD_ADDR_VAR 0 22
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55101: LD_ADDR_VAR 0 23
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 3
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55145: LD_ADDR_VAR 0 24
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55186: LD_ADDR_VAR 0 25
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 4
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55226: LD_ADDR_VAR 0 26
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 4
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 3
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55267: LD_ADDR_VAR 0 27
55271: PUSH
55272: LD_INT 3
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55311: LD_ADDR_VAR 0 28
55315: PUSH
55316: LD_INT 3
55318: NEG
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 3
55330: NEG
55331: PUSH
55332: LD_INT 4
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 4
55342: NEG
55343: PUSH
55344: LD_INT 3
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55357: LD_ADDR_VAR 0 29
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 3
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 4
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 4
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 3
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 5
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 5
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 4
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 6
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 6
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 5
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55512: LD_ADDR_VAR 0 30
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 4
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 5
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 5
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 5
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 6
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 6
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55655: LD_ADDR_VAR 0 31
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 5
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 5
55732: PUSH
55733: LD_INT 5
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 4
55742: PUSH
55743: LD_INT 5
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 6
55752: PUSH
55753: LD_INT 5
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 6
55762: PUSH
55763: LD_INT 6
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 5
55772: PUSH
55773: LD_INT 6
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55794: LD_ADDR_VAR 0 32
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 4
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 4
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 5
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 4
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 6
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 6
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 5
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55937: LD_ADDR_VAR 0 33
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 4
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 4
56012: NEG
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 5
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 5
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 5
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 6
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 6
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56092: LD_ADDR_VAR 0 34
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: LD_INT 4
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 4
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 4
56159: NEG
56160: PUSH
56161: LD_INT 4
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 4
56171: NEG
56172: PUSH
56173: LD_INT 5
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 5
56183: NEG
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 5
56195: NEG
56196: PUSH
56197: LD_INT 5
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 5
56207: NEG
56208: PUSH
56209: LD_INT 6
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 6
56219: NEG
56220: PUSH
56221: LD_INT 5
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 6
56231: NEG
56232: PUSH
56233: LD_INT 6
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56255: LD_ADDR_VAR 0 41
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56299: LD_ADDR_VAR 0 42
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56340: LD_ADDR_VAR 0 43
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56380: LD_ADDR_VAR 0 44
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56421: LD_ADDR_VAR 0 45
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56465: LD_ADDR_VAR 0 46
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56511: LD_ADDR_VAR 0 47
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56544: LD_ADDR_VAR 0 48
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56575: LD_ADDR_VAR 0 49
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56604: LD_ADDR_VAR 0 50
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56633: LD_ADDR_VAR 0 51
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56664: LD_ADDR_VAR 0 52
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56697: LD_ADDR_VAR 0 53
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56741: LD_ADDR_VAR 0 54
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56782: LD_ADDR_VAR 0 55
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56822: LD_ADDR_VAR 0 56
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56863: LD_ADDR_VAR 0 57
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56907: LD_ADDR_VAR 0 58
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56953: LD_ADDR_VAR 0 59
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56997: LD_ADDR_VAR 0 60
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57038: LD_ADDR_VAR 0 61
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57078: LD_ADDR_VAR 0 62
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57119: LD_ADDR_VAR 0 63
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57163: LD_ADDR_VAR 0 64
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// end ; 2 :
57209: GO 60475
57211: LD_INT 2
57213: DOUBLE
57214: EQUAL
57215: IFTRUE 57219
57217: GO 60474
57219: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57220: LD_ADDR_VAR 0 29
57224: PUSH
57225: LD_INT 4
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 5
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 5
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 4
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 5
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 4
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 4
57350: PUSH
57351: LD_INT 4
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 4
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 4
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 4
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 4
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 5
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 5
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: LD_INT 5
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: NEG
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 4
57605: NEG
57606: PUSH
57607: LD_INT 4
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 4
57617: NEG
57618: PUSH
57619: LD_INT 5
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 4
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 4
57653: NEG
57654: PUSH
57655: LD_INT 3
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 5
57665: NEG
57666: PUSH
57667: LD_INT 4
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 5
57677: NEG
57678: PUSH
57679: LD_INT 5
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: LD_INT 5
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 5
57701: NEG
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57758: LD_ADDR_VAR 0 30
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 5
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: LD_INT 5
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 4
57805: PUSH
57806: LD_INT 5
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 4
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 3
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 5
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: LD_INT 5
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 4
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 4
57948: NEG
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 4
57959: NEG
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 4
57993: NEG
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 5
58004: NEG
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 5
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 5
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: LD_INT 4
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: LD_INT 4
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 4
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 4
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 5
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 3
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 4
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 5
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 5
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58305: LD_ADDR_VAR 0 31
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 4
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 5
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 5
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 5
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 4
58461: NEG
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 4
58472: NEG
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 4
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: LD_INT 4
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 4
58519: NEG
58520: PUSH
58521: LD_INT 5
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 4
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 4
58555: NEG
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 5
58567: NEG
58568: PUSH
58569: LD_INT 4
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 5
58579: NEG
58580: PUSH
58581: LD_INT 5
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: NEG
58592: PUSH
58593: LD_INT 5
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 4
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: LD_INT 4
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 4
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 4
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 5
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 5
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 4
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 5
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58855: LD_ADDR_VAR 0 32
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 4
58873: NEG
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 4
58907: NEG
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 5
58918: NEG
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 5
58929: NEG
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 5
58941: NEG
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 4
59024: NEG
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 4
59036: NEG
59037: PUSH
59038: LD_INT 4
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: LD_INT 4
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 4
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 4
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 5
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 4
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 4
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 5
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 3
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 4
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 4
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 4
59267: PUSH
59268: LD_INT 4
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 4
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: LD_INT 5
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 4
59307: PUSH
59308: LD_INT 5
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: PUSH
59318: LD_INT 4
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: LD_INT 5
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59402: LD_ADDR_VAR 0 33
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: LD_INT 4
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 4
59421: NEG
59422: PUSH
59423: LD_INT 5
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 5
59469: NEG
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 5
59481: NEG
59482: PUSH
59483: LD_INT 5
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: LD_INT 5
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 4
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 4
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: PUSH
59630: LD_INT 1
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 5
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 5
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 4
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 5
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: LD_INT 3
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 4
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 3
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 4
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 4
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 5
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 5
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 5
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59940: LD_ADDR_VAR 0 34
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 5
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 4
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 5
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 5
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 4
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: LD_INT 4
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 4
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: LD_INT 5
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: PUSH
60183: LD_INT 5
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: LD_INT 4
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 5
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 4
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 4
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 4
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 5
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 5
60404: NEG
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// end ; end ;
60472: GO 60475
60474: POP
// case btype of b_depot , b_warehouse :
60475: LD_VAR 0 1
60479: PUSH
60480: LD_INT 0
60482: DOUBLE
60483: EQUAL
60484: IFTRUE 60494
60486: LD_INT 1
60488: DOUBLE
60489: EQUAL
60490: IFTRUE 60494
60492: GO 60695
60494: POP
// case nation of nation_american :
60495: LD_VAR 0 5
60499: PUSH
60500: LD_INT 1
60502: DOUBLE
60503: EQUAL
60504: IFTRUE 60508
60506: GO 60564
60508: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60509: LD_ADDR_VAR 0 9
60513: PUSH
60514: LD_VAR 0 11
60518: PUSH
60519: LD_VAR 0 12
60523: PUSH
60524: LD_VAR 0 13
60528: PUSH
60529: LD_VAR 0 14
60533: PUSH
60534: LD_VAR 0 15
60538: PUSH
60539: LD_VAR 0 16
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: PUSH
60552: LD_VAR 0 4
60556: PUSH
60557: LD_INT 1
60559: PLUS
60560: ARRAY
60561: ST_TO_ADDR
60562: GO 60693
60564: LD_INT 2
60566: DOUBLE
60567: EQUAL
60568: IFTRUE 60572
60570: GO 60628
60572: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60573: LD_ADDR_VAR 0 9
60577: PUSH
60578: LD_VAR 0 17
60582: PUSH
60583: LD_VAR 0 18
60587: PUSH
60588: LD_VAR 0 19
60592: PUSH
60593: LD_VAR 0 20
60597: PUSH
60598: LD_VAR 0 21
60602: PUSH
60603: LD_VAR 0 22
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: PUSH
60616: LD_VAR 0 4
60620: PUSH
60621: LD_INT 1
60623: PLUS
60624: ARRAY
60625: ST_TO_ADDR
60626: GO 60693
60628: LD_INT 3
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60636
60634: GO 60692
60636: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60637: LD_ADDR_VAR 0 9
60641: PUSH
60642: LD_VAR 0 23
60646: PUSH
60647: LD_VAR 0 24
60651: PUSH
60652: LD_VAR 0 25
60656: PUSH
60657: LD_VAR 0 26
60661: PUSH
60662: LD_VAR 0 27
60666: PUSH
60667: LD_VAR 0 28
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: PUSH
60680: LD_VAR 0 4
60684: PUSH
60685: LD_INT 1
60687: PLUS
60688: ARRAY
60689: ST_TO_ADDR
60690: GO 60693
60692: POP
60693: GO 61248
60695: LD_INT 2
60697: DOUBLE
60698: EQUAL
60699: IFTRUE 60709
60701: LD_INT 3
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60709
60707: GO 60765
60709: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60710: LD_ADDR_VAR 0 9
60714: PUSH
60715: LD_VAR 0 29
60719: PUSH
60720: LD_VAR 0 30
60724: PUSH
60725: LD_VAR 0 31
60729: PUSH
60730: LD_VAR 0 32
60734: PUSH
60735: LD_VAR 0 33
60739: PUSH
60740: LD_VAR 0 34
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: PUSH
60753: LD_VAR 0 4
60757: PUSH
60758: LD_INT 1
60760: PLUS
60761: ARRAY
60762: ST_TO_ADDR
60763: GO 61248
60765: LD_INT 16
60767: DOUBLE
60768: EQUAL
60769: IFTRUE 60827
60771: LD_INT 17
60773: DOUBLE
60774: EQUAL
60775: IFTRUE 60827
60777: LD_INT 18
60779: DOUBLE
60780: EQUAL
60781: IFTRUE 60827
60783: LD_INT 19
60785: DOUBLE
60786: EQUAL
60787: IFTRUE 60827
60789: LD_INT 22
60791: DOUBLE
60792: EQUAL
60793: IFTRUE 60827
60795: LD_INT 20
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60827
60801: LD_INT 21
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60827
60807: LD_INT 23
60809: DOUBLE
60810: EQUAL
60811: IFTRUE 60827
60813: LD_INT 24
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60827
60819: LD_INT 25
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60827
60825: GO 60883
60827: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60828: LD_ADDR_VAR 0 9
60832: PUSH
60833: LD_VAR 0 35
60837: PUSH
60838: LD_VAR 0 36
60842: PUSH
60843: LD_VAR 0 37
60847: PUSH
60848: LD_VAR 0 38
60852: PUSH
60853: LD_VAR 0 39
60857: PUSH
60858: LD_VAR 0 40
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: PUSH
60871: LD_VAR 0 4
60875: PUSH
60876: LD_INT 1
60878: PLUS
60879: ARRAY
60880: ST_TO_ADDR
60881: GO 61248
60883: LD_INT 6
60885: DOUBLE
60886: EQUAL
60887: IFTRUE 60939
60889: LD_INT 7
60891: DOUBLE
60892: EQUAL
60893: IFTRUE 60939
60895: LD_INT 8
60897: DOUBLE
60898: EQUAL
60899: IFTRUE 60939
60901: LD_INT 13
60903: DOUBLE
60904: EQUAL
60905: IFTRUE 60939
60907: LD_INT 12
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60939
60913: LD_INT 15
60915: DOUBLE
60916: EQUAL
60917: IFTRUE 60939
60919: LD_INT 11
60921: DOUBLE
60922: EQUAL
60923: IFTRUE 60939
60925: LD_INT 14
60927: DOUBLE
60928: EQUAL
60929: IFTRUE 60939
60931: LD_INT 10
60933: DOUBLE
60934: EQUAL
60935: IFTRUE 60939
60937: GO 60995
60939: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60940: LD_ADDR_VAR 0 9
60944: PUSH
60945: LD_VAR 0 41
60949: PUSH
60950: LD_VAR 0 42
60954: PUSH
60955: LD_VAR 0 43
60959: PUSH
60960: LD_VAR 0 44
60964: PUSH
60965: LD_VAR 0 45
60969: PUSH
60970: LD_VAR 0 46
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_VAR 0 4
60987: PUSH
60988: LD_INT 1
60990: PLUS
60991: ARRAY
60992: ST_TO_ADDR
60993: GO 61248
60995: LD_INT 36
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61003
61001: GO 61059
61003: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61004: LD_ADDR_VAR 0 9
61008: PUSH
61009: LD_VAR 0 47
61013: PUSH
61014: LD_VAR 0 48
61018: PUSH
61019: LD_VAR 0 49
61023: PUSH
61024: LD_VAR 0 50
61028: PUSH
61029: LD_VAR 0 51
61033: PUSH
61034: LD_VAR 0 52
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: PUSH
61047: LD_VAR 0 4
61051: PUSH
61052: LD_INT 1
61054: PLUS
61055: ARRAY
61056: ST_TO_ADDR
61057: GO 61248
61059: LD_INT 4
61061: DOUBLE
61062: EQUAL
61063: IFTRUE 61085
61065: LD_INT 5
61067: DOUBLE
61068: EQUAL
61069: IFTRUE 61085
61071: LD_INT 34
61073: DOUBLE
61074: EQUAL
61075: IFTRUE 61085
61077: LD_INT 37
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61085
61083: GO 61141
61085: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61086: LD_ADDR_VAR 0 9
61090: PUSH
61091: LD_VAR 0 53
61095: PUSH
61096: LD_VAR 0 54
61100: PUSH
61101: LD_VAR 0 55
61105: PUSH
61106: LD_VAR 0 56
61110: PUSH
61111: LD_VAR 0 57
61115: PUSH
61116: LD_VAR 0 58
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: PUSH
61129: LD_VAR 0 4
61133: PUSH
61134: LD_INT 1
61136: PLUS
61137: ARRAY
61138: ST_TO_ADDR
61139: GO 61248
61141: LD_INT 31
61143: DOUBLE
61144: EQUAL
61145: IFTRUE 61191
61147: LD_INT 32
61149: DOUBLE
61150: EQUAL
61151: IFTRUE 61191
61153: LD_INT 33
61155: DOUBLE
61156: EQUAL
61157: IFTRUE 61191
61159: LD_INT 27
61161: DOUBLE
61162: EQUAL
61163: IFTRUE 61191
61165: LD_INT 26
61167: DOUBLE
61168: EQUAL
61169: IFTRUE 61191
61171: LD_INT 28
61173: DOUBLE
61174: EQUAL
61175: IFTRUE 61191
61177: LD_INT 29
61179: DOUBLE
61180: EQUAL
61181: IFTRUE 61191
61183: LD_INT 30
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61191
61189: GO 61247
61191: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61192: LD_ADDR_VAR 0 9
61196: PUSH
61197: LD_VAR 0 59
61201: PUSH
61202: LD_VAR 0 60
61206: PUSH
61207: LD_VAR 0 61
61211: PUSH
61212: LD_VAR 0 62
61216: PUSH
61217: LD_VAR 0 63
61221: PUSH
61222: LD_VAR 0 64
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: PUSH
61235: LD_VAR 0 4
61239: PUSH
61240: LD_INT 1
61242: PLUS
61243: ARRAY
61244: ST_TO_ADDR
61245: GO 61248
61247: POP
// temp_list2 = [ ] ;
61248: LD_ADDR_VAR 0 10
61252: PUSH
61253: EMPTY
61254: ST_TO_ADDR
// for i in temp_list do
61255: LD_ADDR_VAR 0 8
61259: PUSH
61260: LD_VAR 0 9
61264: PUSH
61265: FOR_IN
61266: IFFALSE 61318
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61268: LD_ADDR_VAR 0 10
61272: PUSH
61273: LD_VAR 0 10
61277: PUSH
61278: LD_VAR 0 8
61282: PUSH
61283: LD_INT 1
61285: ARRAY
61286: PUSH
61287: LD_VAR 0 2
61291: PLUS
61292: PUSH
61293: LD_VAR 0 8
61297: PUSH
61298: LD_INT 2
61300: ARRAY
61301: PUSH
61302: LD_VAR 0 3
61306: PLUS
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: EMPTY
61313: LIST
61314: ADD
61315: ST_TO_ADDR
61316: GO 61265
61318: POP
61319: POP
// result = temp_list2 ;
61320: LD_ADDR_VAR 0 7
61324: PUSH
61325: LD_VAR 0 10
61329: ST_TO_ADDR
// end ;
61330: LD_VAR 0 7
61334: RET
// export function EnemyInRange ( unit , dist ) ; begin
61335: LD_INT 0
61337: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61338: LD_ADDR_VAR 0 3
61342: PUSH
61343: LD_VAR 0 1
61347: PPUSH
61348: CALL_OW 255
61352: PPUSH
61353: LD_VAR 0 1
61357: PPUSH
61358: CALL_OW 250
61362: PPUSH
61363: LD_VAR 0 1
61367: PPUSH
61368: CALL_OW 251
61372: PPUSH
61373: LD_VAR 0 2
61377: PPUSH
61378: CALL 34737 0 4
61382: PUSH
61383: LD_INT 4
61385: ARRAY
61386: ST_TO_ADDR
// end ;
61387: LD_VAR 0 3
61391: RET
// export function PlayerSeeMe ( unit ) ; begin
61392: LD_INT 0
61394: PPUSH
// result := See ( your_side , unit ) ;
61395: LD_ADDR_VAR 0 2
61399: PUSH
61400: LD_OWVAR 2
61404: PPUSH
61405: LD_VAR 0 1
61409: PPUSH
61410: CALL_OW 292
61414: ST_TO_ADDR
// end ;
61415: LD_VAR 0 2
61419: RET
// export function ReverseDir ( unit ) ; begin
61420: LD_INT 0
61422: PPUSH
// if not unit then
61423: LD_VAR 0 1
61427: NOT
61428: IFFALSE 61432
// exit ;
61430: GO 61455
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61432: LD_ADDR_VAR 0 2
61436: PUSH
61437: LD_VAR 0 1
61441: PPUSH
61442: CALL_OW 254
61446: PUSH
61447: LD_INT 3
61449: PLUS
61450: PUSH
61451: LD_INT 6
61453: MOD
61454: ST_TO_ADDR
// end ;
61455: LD_VAR 0 2
61459: RET
// export function ReverseArray ( array ) ; var i ; begin
61460: LD_INT 0
61462: PPUSH
61463: PPUSH
// if not array then
61464: LD_VAR 0 1
61468: NOT
61469: IFFALSE 61473
// exit ;
61471: GO 61528
// result := [ ] ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: EMPTY
61479: ST_TO_ADDR
// for i := array downto 1 do
61480: LD_ADDR_VAR 0 3
61484: PUSH
61485: DOUBLE
61486: LD_VAR 0 1
61490: INC
61491: ST_TO_ADDR
61492: LD_INT 1
61494: PUSH
61495: FOR_DOWNTO
61496: IFFALSE 61526
// result := Join ( result , array [ i ] ) ;
61498: LD_ADDR_VAR 0 2
61502: PUSH
61503: LD_VAR 0 2
61507: PPUSH
61508: LD_VAR 0 1
61512: PUSH
61513: LD_VAR 0 3
61517: ARRAY
61518: PPUSH
61519: CALL 66172 0 2
61523: ST_TO_ADDR
61524: GO 61495
61526: POP
61527: POP
// end ;
61528: LD_VAR 0 2
61532: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61533: LD_INT 0
61535: PPUSH
61536: PPUSH
61537: PPUSH
61538: PPUSH
61539: PPUSH
61540: PPUSH
// if not unit or not hexes then
61541: LD_VAR 0 1
61545: NOT
61546: PUSH
61547: LD_VAR 0 2
61551: NOT
61552: OR
61553: IFFALSE 61557
// exit ;
61555: GO 61680
// dist := 9999 ;
61557: LD_ADDR_VAR 0 5
61561: PUSH
61562: LD_INT 9999
61564: ST_TO_ADDR
// for i = 1 to hexes do
61565: LD_ADDR_VAR 0 4
61569: PUSH
61570: DOUBLE
61571: LD_INT 1
61573: DEC
61574: ST_TO_ADDR
61575: LD_VAR 0 2
61579: PUSH
61580: FOR_TO
61581: IFFALSE 61668
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61583: LD_ADDR_VAR 0 6
61587: PUSH
61588: LD_VAR 0 1
61592: PPUSH
61593: LD_VAR 0 2
61597: PUSH
61598: LD_VAR 0 4
61602: ARRAY
61603: PUSH
61604: LD_INT 1
61606: ARRAY
61607: PPUSH
61608: LD_VAR 0 2
61612: PUSH
61613: LD_VAR 0 4
61617: ARRAY
61618: PUSH
61619: LD_INT 2
61621: ARRAY
61622: PPUSH
61623: CALL_OW 297
61627: ST_TO_ADDR
// if tdist < dist then
61628: LD_VAR 0 6
61632: PUSH
61633: LD_VAR 0 5
61637: LESS
61638: IFFALSE 61666
// begin hex := hexes [ i ] ;
61640: LD_ADDR_VAR 0 8
61644: PUSH
61645: LD_VAR 0 2
61649: PUSH
61650: LD_VAR 0 4
61654: ARRAY
61655: ST_TO_ADDR
// dist := tdist ;
61656: LD_ADDR_VAR 0 5
61660: PUSH
61661: LD_VAR 0 6
61665: ST_TO_ADDR
// end ; end ;
61666: GO 61580
61668: POP
61669: POP
// result := hex ;
61670: LD_ADDR_VAR 0 3
61674: PUSH
61675: LD_VAR 0 8
61679: ST_TO_ADDR
// end ;
61680: LD_VAR 0 3
61684: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61685: LD_INT 0
61687: PPUSH
61688: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61689: LD_VAR 0 1
61693: NOT
61694: PUSH
61695: LD_VAR 0 1
61699: PUSH
61700: LD_INT 21
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 23
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PPUSH
61724: CALL_OW 69
61728: IN
61729: NOT
61730: OR
61731: IFFALSE 61735
// exit ;
61733: GO 61782
// for i = 1 to 3 do
61735: LD_ADDR_VAR 0 3
61739: PUSH
61740: DOUBLE
61741: LD_INT 1
61743: DEC
61744: ST_TO_ADDR
61745: LD_INT 3
61747: PUSH
61748: FOR_TO
61749: IFFALSE 61780
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61751: LD_VAR 0 1
61755: PPUSH
61756: CALL_OW 250
61760: PPUSH
61761: LD_VAR 0 1
61765: PPUSH
61766: CALL_OW 251
61770: PPUSH
61771: LD_INT 1
61773: PPUSH
61774: CALL_OW 453
61778: GO 61748
61780: POP
61781: POP
// end ;
61782: LD_VAR 0 2
61786: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61787: LD_INT 0
61789: PPUSH
61790: PPUSH
61791: PPUSH
61792: PPUSH
61793: PPUSH
61794: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61795: LD_VAR 0 1
61799: NOT
61800: PUSH
61801: LD_VAR 0 2
61805: NOT
61806: OR
61807: PUSH
61808: LD_VAR 0 1
61812: PPUSH
61813: CALL_OW 314
61817: OR
61818: IFFALSE 61822
// exit ;
61820: GO 62289
// if GetLives ( i ) < 250 then
61822: LD_VAR 0 4
61826: PPUSH
61827: CALL_OW 256
61831: PUSH
61832: LD_INT 250
61834: LESS
61835: IFFALSE 61848
// begin ComAutodestruct ( i ) ;
61837: LD_VAR 0 4
61841: PPUSH
61842: CALL 61685 0 1
// exit ;
61846: GO 62289
// end ; x := GetX ( enemy_unit ) ;
61848: LD_ADDR_VAR 0 7
61852: PUSH
61853: LD_VAR 0 2
61857: PPUSH
61858: CALL_OW 250
61862: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61863: LD_ADDR_VAR 0 8
61867: PUSH
61868: LD_VAR 0 2
61872: PPUSH
61873: CALL_OW 251
61877: ST_TO_ADDR
// if not x or not y then
61878: LD_VAR 0 7
61882: NOT
61883: PUSH
61884: LD_VAR 0 8
61888: NOT
61889: OR
61890: IFFALSE 61894
// exit ;
61892: GO 62289
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61894: LD_ADDR_VAR 0 6
61898: PUSH
61899: LD_VAR 0 7
61903: PPUSH
61904: LD_INT 0
61906: PPUSH
61907: LD_INT 4
61909: PPUSH
61910: CALL_OW 272
61914: PUSH
61915: LD_VAR 0 8
61919: PPUSH
61920: LD_INT 0
61922: PPUSH
61923: LD_INT 4
61925: PPUSH
61926: CALL_OW 273
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_VAR 0 7
61939: PPUSH
61940: LD_INT 1
61942: PPUSH
61943: LD_INT 4
61945: PPUSH
61946: CALL_OW 272
61950: PUSH
61951: LD_VAR 0 8
61955: PPUSH
61956: LD_INT 1
61958: PPUSH
61959: LD_INT 4
61961: PPUSH
61962: CALL_OW 273
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_VAR 0 7
61975: PPUSH
61976: LD_INT 2
61978: PPUSH
61979: LD_INT 4
61981: PPUSH
61982: CALL_OW 272
61986: PUSH
61987: LD_VAR 0 8
61991: PPUSH
61992: LD_INT 2
61994: PPUSH
61995: LD_INT 4
61997: PPUSH
61998: CALL_OW 273
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_VAR 0 7
62011: PPUSH
62012: LD_INT 3
62014: PPUSH
62015: LD_INT 4
62017: PPUSH
62018: CALL_OW 272
62022: PUSH
62023: LD_VAR 0 8
62027: PPUSH
62028: LD_INT 3
62030: PPUSH
62031: LD_INT 4
62033: PPUSH
62034: CALL_OW 273
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_VAR 0 7
62047: PPUSH
62048: LD_INT 4
62050: PPUSH
62051: LD_INT 4
62053: PPUSH
62054: CALL_OW 272
62058: PUSH
62059: LD_VAR 0 8
62063: PPUSH
62064: LD_INT 4
62066: PPUSH
62067: LD_INT 4
62069: PPUSH
62070: CALL_OW 273
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_VAR 0 7
62083: PPUSH
62084: LD_INT 5
62086: PPUSH
62087: LD_INT 4
62089: PPUSH
62090: CALL_OW 272
62094: PUSH
62095: LD_VAR 0 8
62099: PPUSH
62100: LD_INT 5
62102: PPUSH
62103: LD_INT 4
62105: PPUSH
62106: CALL_OW 273
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: ST_TO_ADDR
// for i = tmp downto 1 do
62123: LD_ADDR_VAR 0 4
62127: PUSH
62128: DOUBLE
62129: LD_VAR 0 6
62133: INC
62134: ST_TO_ADDR
62135: LD_INT 1
62137: PUSH
62138: FOR_DOWNTO
62139: IFFALSE 62240
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62141: LD_VAR 0 6
62145: PUSH
62146: LD_VAR 0 4
62150: ARRAY
62151: PUSH
62152: LD_INT 1
62154: ARRAY
62155: PPUSH
62156: LD_VAR 0 6
62160: PUSH
62161: LD_VAR 0 4
62165: ARRAY
62166: PUSH
62167: LD_INT 2
62169: ARRAY
62170: PPUSH
62171: CALL_OW 488
62175: NOT
62176: PUSH
62177: LD_VAR 0 6
62181: PUSH
62182: LD_VAR 0 4
62186: ARRAY
62187: PUSH
62188: LD_INT 1
62190: ARRAY
62191: PPUSH
62192: LD_VAR 0 6
62196: PUSH
62197: LD_VAR 0 4
62201: ARRAY
62202: PUSH
62203: LD_INT 2
62205: ARRAY
62206: PPUSH
62207: CALL_OW 428
62211: PUSH
62212: LD_INT 0
62214: NONEQUAL
62215: OR
62216: IFFALSE 62238
// tmp := Delete ( tmp , i ) ;
62218: LD_ADDR_VAR 0 6
62222: PUSH
62223: LD_VAR 0 6
62227: PPUSH
62228: LD_VAR 0 4
62232: PPUSH
62233: CALL_OW 3
62237: ST_TO_ADDR
62238: GO 62138
62240: POP
62241: POP
// j := GetClosestHex ( unit , tmp ) ;
62242: LD_ADDR_VAR 0 5
62246: PUSH
62247: LD_VAR 0 1
62251: PPUSH
62252: LD_VAR 0 6
62256: PPUSH
62257: CALL 61533 0 2
62261: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_VAR 0 5
62271: PUSH
62272: LD_INT 1
62274: ARRAY
62275: PPUSH
62276: LD_VAR 0 5
62280: PUSH
62281: LD_INT 2
62283: ARRAY
62284: PPUSH
62285: CALL_OW 111
// end ;
62289: LD_VAR 0 3
62293: RET
// export function PrepareApemanSoldier ( ) ; begin
62294: LD_INT 0
62296: PPUSH
// uc_nation := 0 ;
62297: LD_ADDR_OWVAR 21
62301: PUSH
62302: LD_INT 0
62304: ST_TO_ADDR
// hc_sex := sex_male ;
62305: LD_ADDR_OWVAR 27
62309: PUSH
62310: LD_INT 1
62312: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62313: LD_ADDR_OWVAR 28
62317: PUSH
62318: LD_INT 15
62320: ST_TO_ADDR
// hc_gallery :=  ;
62321: LD_ADDR_OWVAR 33
62325: PUSH
62326: LD_STRING 
62328: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62329: LD_ADDR_OWVAR 31
62333: PUSH
62334: LD_INT 0
62336: PPUSH
62337: LD_INT 3
62339: PPUSH
62340: CALL_OW 12
62344: PUSH
62345: LD_INT 0
62347: PPUSH
62348: LD_INT 3
62350: PPUSH
62351: CALL_OW 12
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: ST_TO_ADDR
// end ;
62368: LD_VAR 0 1
62372: RET
// export function PrepareApemanEngineer ( ) ; begin
62373: LD_INT 0
62375: PPUSH
// uc_nation := 0 ;
62376: LD_ADDR_OWVAR 21
62380: PUSH
62381: LD_INT 0
62383: ST_TO_ADDR
// hc_sex := sex_male ;
62384: LD_ADDR_OWVAR 27
62388: PUSH
62389: LD_INT 1
62391: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62392: LD_ADDR_OWVAR 28
62396: PUSH
62397: LD_INT 16
62399: ST_TO_ADDR
// hc_gallery :=  ;
62400: LD_ADDR_OWVAR 33
62404: PUSH
62405: LD_STRING 
62407: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62408: LD_ADDR_OWVAR 31
62412: PUSH
62413: LD_INT 0
62415: PPUSH
62416: LD_INT 3
62418: PPUSH
62419: CALL_OW 12
62423: PUSH
62424: LD_INT 0
62426: PPUSH
62427: LD_INT 3
62429: PPUSH
62430: CALL_OW 12
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: ST_TO_ADDR
// end ;
62447: LD_VAR 0 1
62451: RET
// export function PrepareApeman ( agressivity ) ; begin
62452: LD_INT 0
62454: PPUSH
// uc_side := 0 ;
62455: LD_ADDR_OWVAR 20
62459: PUSH
62460: LD_INT 0
62462: ST_TO_ADDR
// uc_nation := 0 ;
62463: LD_ADDR_OWVAR 21
62467: PUSH
62468: LD_INT 0
62470: ST_TO_ADDR
// hc_sex := sex_male ;
62471: LD_ADDR_OWVAR 27
62475: PUSH
62476: LD_INT 1
62478: ST_TO_ADDR
// hc_class := class_apeman ;
62479: LD_ADDR_OWVAR 28
62483: PUSH
62484: LD_INT 12
62486: ST_TO_ADDR
// hc_gallery :=  ;
62487: LD_ADDR_OWVAR 33
62491: PUSH
62492: LD_STRING 
62494: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62495: LD_ADDR_OWVAR 35
62499: PUSH
62500: LD_VAR 0 1
62504: NEG
62505: PPUSH
62506: LD_VAR 0 1
62510: PPUSH
62511: CALL_OW 12
62515: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62516: LD_ADDR_OWVAR 31
62520: PUSH
62521: LD_INT 0
62523: PPUSH
62524: LD_INT 3
62526: PPUSH
62527: CALL_OW 12
62531: PUSH
62532: LD_INT 0
62534: PPUSH
62535: LD_INT 3
62537: PPUSH
62538: CALL_OW 12
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: ST_TO_ADDR
// end ;
62555: LD_VAR 0 2
62559: RET
// export function PrepareTiger ( agressivity ) ; begin
62560: LD_INT 0
62562: PPUSH
// uc_side := 0 ;
62563: LD_ADDR_OWVAR 20
62567: PUSH
62568: LD_INT 0
62570: ST_TO_ADDR
// uc_nation := 0 ;
62571: LD_ADDR_OWVAR 21
62575: PUSH
62576: LD_INT 0
62578: ST_TO_ADDR
// hc_class := class_tiger ;
62579: LD_ADDR_OWVAR 28
62583: PUSH
62584: LD_INT 14
62586: ST_TO_ADDR
// hc_gallery :=  ;
62587: LD_ADDR_OWVAR 33
62591: PUSH
62592: LD_STRING 
62594: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62595: LD_ADDR_OWVAR 35
62599: PUSH
62600: LD_VAR 0 1
62604: NEG
62605: PPUSH
62606: LD_VAR 0 1
62610: PPUSH
62611: CALL_OW 12
62615: ST_TO_ADDR
// end ;
62616: LD_VAR 0 2
62620: RET
// export function PrepareEnchidna ( ) ; begin
62621: LD_INT 0
62623: PPUSH
// uc_side := 0 ;
62624: LD_ADDR_OWVAR 20
62628: PUSH
62629: LD_INT 0
62631: ST_TO_ADDR
// uc_nation := 0 ;
62632: LD_ADDR_OWVAR 21
62636: PUSH
62637: LD_INT 0
62639: ST_TO_ADDR
// hc_class := class_baggie ;
62640: LD_ADDR_OWVAR 28
62644: PUSH
62645: LD_INT 13
62647: ST_TO_ADDR
// hc_gallery :=  ;
62648: LD_ADDR_OWVAR 33
62652: PUSH
62653: LD_STRING 
62655: ST_TO_ADDR
// end ;
62656: LD_VAR 0 1
62660: RET
// export function PrepareFrog ( ) ; begin
62661: LD_INT 0
62663: PPUSH
// uc_side := 0 ;
62664: LD_ADDR_OWVAR 20
62668: PUSH
62669: LD_INT 0
62671: ST_TO_ADDR
// uc_nation := 0 ;
62672: LD_ADDR_OWVAR 21
62676: PUSH
62677: LD_INT 0
62679: ST_TO_ADDR
// hc_class := class_frog ;
62680: LD_ADDR_OWVAR 28
62684: PUSH
62685: LD_INT 19
62687: ST_TO_ADDR
// hc_gallery :=  ;
62688: LD_ADDR_OWVAR 33
62692: PUSH
62693: LD_STRING 
62695: ST_TO_ADDR
// end ;
62696: LD_VAR 0 1
62700: RET
// export function PrepareFish ( ) ; begin
62701: LD_INT 0
62703: PPUSH
// uc_side := 0 ;
62704: LD_ADDR_OWVAR 20
62708: PUSH
62709: LD_INT 0
62711: ST_TO_ADDR
// uc_nation := 0 ;
62712: LD_ADDR_OWVAR 21
62716: PUSH
62717: LD_INT 0
62719: ST_TO_ADDR
// hc_class := class_fish ;
62720: LD_ADDR_OWVAR 28
62724: PUSH
62725: LD_INT 20
62727: ST_TO_ADDR
// hc_gallery :=  ;
62728: LD_ADDR_OWVAR 33
62732: PUSH
62733: LD_STRING 
62735: ST_TO_ADDR
// end ;
62736: LD_VAR 0 1
62740: RET
// export function PrepareBird ( ) ; begin
62741: LD_INT 0
62743: PPUSH
// uc_side := 0 ;
62744: LD_ADDR_OWVAR 20
62748: PUSH
62749: LD_INT 0
62751: ST_TO_ADDR
// uc_nation := 0 ;
62752: LD_ADDR_OWVAR 21
62756: PUSH
62757: LD_INT 0
62759: ST_TO_ADDR
// hc_class := class_phororhacos ;
62760: LD_ADDR_OWVAR 28
62764: PUSH
62765: LD_INT 18
62767: ST_TO_ADDR
// hc_gallery :=  ;
62768: LD_ADDR_OWVAR 33
62772: PUSH
62773: LD_STRING 
62775: ST_TO_ADDR
// end ;
62776: LD_VAR 0 1
62780: RET
// export function PrepareHorse ( ) ; begin
62781: LD_INT 0
62783: PPUSH
// uc_side := 0 ;
62784: LD_ADDR_OWVAR 20
62788: PUSH
62789: LD_INT 0
62791: ST_TO_ADDR
// uc_nation := 0 ;
62792: LD_ADDR_OWVAR 21
62796: PUSH
62797: LD_INT 0
62799: ST_TO_ADDR
// hc_class := class_horse ;
62800: LD_ADDR_OWVAR 28
62804: PUSH
62805: LD_INT 21
62807: ST_TO_ADDR
// hc_gallery :=  ;
62808: LD_ADDR_OWVAR 33
62812: PUSH
62813: LD_STRING 
62815: ST_TO_ADDR
// end ;
62816: LD_VAR 0 1
62820: RET
// export function PrepareMastodont ( ) ; begin
62821: LD_INT 0
62823: PPUSH
// uc_side := 0 ;
62824: LD_ADDR_OWVAR 20
62828: PUSH
62829: LD_INT 0
62831: ST_TO_ADDR
// uc_nation := 0 ;
62832: LD_ADDR_OWVAR 21
62836: PUSH
62837: LD_INT 0
62839: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62840: LD_ADDR_OWVAR 37
62844: PUSH
62845: LD_INT 31
62847: ST_TO_ADDR
// vc_control := control_rider ;
62848: LD_ADDR_OWVAR 38
62852: PUSH
62853: LD_INT 4
62855: ST_TO_ADDR
// end ;
62856: LD_VAR 0 1
62860: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62861: LD_INT 0
62863: PPUSH
62864: PPUSH
62865: PPUSH
// uc_side = 0 ;
62866: LD_ADDR_OWVAR 20
62870: PUSH
62871: LD_INT 0
62873: ST_TO_ADDR
// uc_nation = 0 ;
62874: LD_ADDR_OWVAR 21
62878: PUSH
62879: LD_INT 0
62881: ST_TO_ADDR
// InitHc_All ( ) ;
62882: CALL_OW 584
// InitVc ;
62886: CALL_OW 20
// if mastodonts then
62890: LD_VAR 0 6
62894: IFFALSE 62961
// for i = 1 to mastodonts do
62896: LD_ADDR_VAR 0 11
62900: PUSH
62901: DOUBLE
62902: LD_INT 1
62904: DEC
62905: ST_TO_ADDR
62906: LD_VAR 0 6
62910: PUSH
62911: FOR_TO
62912: IFFALSE 62959
// begin vc_chassis := 31 ;
62914: LD_ADDR_OWVAR 37
62918: PUSH
62919: LD_INT 31
62921: ST_TO_ADDR
// vc_control := control_rider ;
62922: LD_ADDR_OWVAR 38
62926: PUSH
62927: LD_INT 4
62929: ST_TO_ADDR
// animal := CreateVehicle ;
62930: LD_ADDR_VAR 0 12
62934: PUSH
62935: CALL_OW 45
62939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62940: LD_VAR 0 12
62944: PPUSH
62945: LD_VAR 0 8
62949: PPUSH
62950: LD_INT 0
62952: PPUSH
62953: CALL 65089 0 3
// end ;
62957: GO 62911
62959: POP
62960: POP
// if horses then
62961: LD_VAR 0 5
62965: IFFALSE 63032
// for i = 1 to horses do
62967: LD_ADDR_VAR 0 11
62971: PUSH
62972: DOUBLE
62973: LD_INT 1
62975: DEC
62976: ST_TO_ADDR
62977: LD_VAR 0 5
62981: PUSH
62982: FOR_TO
62983: IFFALSE 63030
// begin hc_class := 21 ;
62985: LD_ADDR_OWVAR 28
62989: PUSH
62990: LD_INT 21
62992: ST_TO_ADDR
// hc_gallery :=  ;
62993: LD_ADDR_OWVAR 33
62997: PUSH
62998: LD_STRING 
63000: ST_TO_ADDR
// animal := CreateHuman ;
63001: LD_ADDR_VAR 0 12
63005: PUSH
63006: CALL_OW 44
63010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63011: LD_VAR 0 12
63015: PPUSH
63016: LD_VAR 0 8
63020: PPUSH
63021: LD_INT 0
63023: PPUSH
63024: CALL 65089 0 3
// end ;
63028: GO 62982
63030: POP
63031: POP
// if birds then
63032: LD_VAR 0 1
63036: IFFALSE 63103
// for i = 1 to birds do
63038: LD_ADDR_VAR 0 11
63042: PUSH
63043: DOUBLE
63044: LD_INT 1
63046: DEC
63047: ST_TO_ADDR
63048: LD_VAR 0 1
63052: PUSH
63053: FOR_TO
63054: IFFALSE 63101
// begin hc_class = 18 ;
63056: LD_ADDR_OWVAR 28
63060: PUSH
63061: LD_INT 18
63063: ST_TO_ADDR
// hc_gallery =  ;
63064: LD_ADDR_OWVAR 33
63068: PUSH
63069: LD_STRING 
63071: ST_TO_ADDR
// animal := CreateHuman ;
63072: LD_ADDR_VAR 0 12
63076: PUSH
63077: CALL_OW 44
63081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63082: LD_VAR 0 12
63086: PPUSH
63087: LD_VAR 0 8
63091: PPUSH
63092: LD_INT 0
63094: PPUSH
63095: CALL 65089 0 3
// end ;
63099: GO 63053
63101: POP
63102: POP
// if tigers then
63103: LD_VAR 0 2
63107: IFFALSE 63191
// for i = 1 to tigers do
63109: LD_ADDR_VAR 0 11
63113: PUSH
63114: DOUBLE
63115: LD_INT 1
63117: DEC
63118: ST_TO_ADDR
63119: LD_VAR 0 2
63123: PUSH
63124: FOR_TO
63125: IFFALSE 63189
// begin hc_class = class_tiger ;
63127: LD_ADDR_OWVAR 28
63131: PUSH
63132: LD_INT 14
63134: ST_TO_ADDR
// hc_gallery =  ;
63135: LD_ADDR_OWVAR 33
63139: PUSH
63140: LD_STRING 
63142: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63143: LD_ADDR_OWVAR 35
63147: PUSH
63148: LD_INT 7
63150: NEG
63151: PPUSH
63152: LD_INT 7
63154: PPUSH
63155: CALL_OW 12
63159: ST_TO_ADDR
// animal := CreateHuman ;
63160: LD_ADDR_VAR 0 12
63164: PUSH
63165: CALL_OW 44
63169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63170: LD_VAR 0 12
63174: PPUSH
63175: LD_VAR 0 8
63179: PPUSH
63180: LD_INT 0
63182: PPUSH
63183: CALL 65089 0 3
// end ;
63187: GO 63124
63189: POP
63190: POP
// if apemans then
63191: LD_VAR 0 3
63195: IFFALSE 63318
// for i = 1 to apemans do
63197: LD_ADDR_VAR 0 11
63201: PUSH
63202: DOUBLE
63203: LD_INT 1
63205: DEC
63206: ST_TO_ADDR
63207: LD_VAR 0 3
63211: PUSH
63212: FOR_TO
63213: IFFALSE 63316
// begin hc_class = class_apeman ;
63215: LD_ADDR_OWVAR 28
63219: PUSH
63220: LD_INT 12
63222: ST_TO_ADDR
// hc_gallery =  ;
63223: LD_ADDR_OWVAR 33
63227: PUSH
63228: LD_STRING 
63230: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63231: LD_ADDR_OWVAR 35
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PPUSH
63240: LD_INT 2
63242: PPUSH
63243: CALL_OW 12
63247: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63248: LD_ADDR_OWVAR 31
63252: PUSH
63253: LD_INT 1
63255: PPUSH
63256: LD_INT 3
63258: PPUSH
63259: CALL_OW 12
63263: PUSH
63264: LD_INT 1
63266: PPUSH
63267: LD_INT 3
63269: PPUSH
63270: CALL_OW 12
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: ST_TO_ADDR
// animal := CreateHuman ;
63287: LD_ADDR_VAR 0 12
63291: PUSH
63292: CALL_OW 44
63296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63297: LD_VAR 0 12
63301: PPUSH
63302: LD_VAR 0 8
63306: PPUSH
63307: LD_INT 0
63309: PPUSH
63310: CALL 65089 0 3
// end ;
63314: GO 63212
63316: POP
63317: POP
// if enchidnas then
63318: LD_VAR 0 4
63322: IFFALSE 63389
// for i = 1 to enchidnas do
63324: LD_ADDR_VAR 0 11
63328: PUSH
63329: DOUBLE
63330: LD_INT 1
63332: DEC
63333: ST_TO_ADDR
63334: LD_VAR 0 4
63338: PUSH
63339: FOR_TO
63340: IFFALSE 63387
// begin hc_class = 13 ;
63342: LD_ADDR_OWVAR 28
63346: PUSH
63347: LD_INT 13
63349: ST_TO_ADDR
// hc_gallery =  ;
63350: LD_ADDR_OWVAR 33
63354: PUSH
63355: LD_STRING 
63357: ST_TO_ADDR
// animal := CreateHuman ;
63358: LD_ADDR_VAR 0 12
63362: PUSH
63363: CALL_OW 44
63367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63368: LD_VAR 0 12
63372: PPUSH
63373: LD_VAR 0 8
63377: PPUSH
63378: LD_INT 0
63380: PPUSH
63381: CALL 65089 0 3
// end ;
63385: GO 63339
63387: POP
63388: POP
// if fishes then
63389: LD_VAR 0 7
63393: IFFALSE 63460
// for i = 1 to fishes do
63395: LD_ADDR_VAR 0 11
63399: PUSH
63400: DOUBLE
63401: LD_INT 1
63403: DEC
63404: ST_TO_ADDR
63405: LD_VAR 0 7
63409: PUSH
63410: FOR_TO
63411: IFFALSE 63458
// begin hc_class = 20 ;
63413: LD_ADDR_OWVAR 28
63417: PUSH
63418: LD_INT 20
63420: ST_TO_ADDR
// hc_gallery =  ;
63421: LD_ADDR_OWVAR 33
63425: PUSH
63426: LD_STRING 
63428: ST_TO_ADDR
// animal := CreateHuman ;
63429: LD_ADDR_VAR 0 12
63433: PUSH
63434: CALL_OW 44
63438: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63439: LD_VAR 0 12
63443: PPUSH
63444: LD_VAR 0 9
63448: PPUSH
63449: LD_INT 0
63451: PPUSH
63452: CALL 65089 0 3
// end ;
63456: GO 63410
63458: POP
63459: POP
// end ;
63460: LD_VAR 0 10
63464: RET
// export function WantHeal ( sci , unit ) ; begin
63465: LD_INT 0
63467: PPUSH
// if GetTaskList ( sci ) > 0 then
63468: LD_VAR 0 1
63472: PPUSH
63473: CALL_OW 437
63477: PUSH
63478: LD_INT 0
63480: GREATER
63481: IFFALSE 63551
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63483: LD_VAR 0 1
63487: PPUSH
63488: CALL_OW 437
63492: PUSH
63493: LD_INT 1
63495: ARRAY
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: PUSH
63501: LD_STRING l
63503: EQUAL
63504: PUSH
63505: LD_VAR 0 1
63509: PPUSH
63510: CALL_OW 437
63514: PUSH
63515: LD_INT 1
63517: ARRAY
63518: PUSH
63519: LD_INT 4
63521: ARRAY
63522: PUSH
63523: LD_VAR 0 2
63527: EQUAL
63528: AND
63529: IFFALSE 63541
// result := true else
63531: LD_ADDR_VAR 0 3
63535: PUSH
63536: LD_INT 1
63538: ST_TO_ADDR
63539: GO 63549
// result := false ;
63541: LD_ADDR_VAR 0 3
63545: PUSH
63546: LD_INT 0
63548: ST_TO_ADDR
// end else
63549: GO 63559
// result := false ;
63551: LD_ADDR_VAR 0 3
63555: PUSH
63556: LD_INT 0
63558: ST_TO_ADDR
// end ;
63559: LD_VAR 0 3
63563: RET
// export function HealTarget ( sci ) ; begin
63564: LD_INT 0
63566: PPUSH
// if not sci then
63567: LD_VAR 0 1
63571: NOT
63572: IFFALSE 63576
// exit ;
63574: GO 63641
// result := 0 ;
63576: LD_ADDR_VAR 0 2
63580: PUSH
63581: LD_INT 0
63583: ST_TO_ADDR
// if GetTaskList ( sci ) then
63584: LD_VAR 0 1
63588: PPUSH
63589: CALL_OW 437
63593: IFFALSE 63641
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 437
63604: PUSH
63605: LD_INT 1
63607: ARRAY
63608: PUSH
63609: LD_INT 1
63611: ARRAY
63612: PUSH
63613: LD_STRING l
63615: EQUAL
63616: IFFALSE 63641
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63618: LD_ADDR_VAR 0 2
63622: PUSH
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 437
63632: PUSH
63633: LD_INT 1
63635: ARRAY
63636: PUSH
63637: LD_INT 4
63639: ARRAY
63640: ST_TO_ADDR
// end ;
63641: LD_VAR 0 2
63645: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63646: LD_INT 0
63648: PPUSH
63649: PPUSH
63650: PPUSH
63651: PPUSH
// if not base_units then
63652: LD_VAR 0 1
63656: NOT
63657: IFFALSE 63661
// exit ;
63659: GO 63748
// result := false ;
63661: LD_ADDR_VAR 0 2
63665: PUSH
63666: LD_INT 0
63668: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63669: LD_ADDR_VAR 0 5
63673: PUSH
63674: LD_VAR 0 1
63678: PPUSH
63679: LD_INT 21
63681: PUSH
63682: LD_INT 3
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PPUSH
63689: CALL_OW 72
63693: ST_TO_ADDR
// if not tmp then
63694: LD_VAR 0 5
63698: NOT
63699: IFFALSE 63703
// exit ;
63701: GO 63748
// for i in tmp do
63703: LD_ADDR_VAR 0 3
63707: PUSH
63708: LD_VAR 0 5
63712: PUSH
63713: FOR_IN
63714: IFFALSE 63746
// begin result := EnemyInRange ( i , 22 ) ;
63716: LD_ADDR_VAR 0 2
63720: PUSH
63721: LD_VAR 0 3
63725: PPUSH
63726: LD_INT 22
63728: PPUSH
63729: CALL 61335 0 2
63733: ST_TO_ADDR
// if result then
63734: LD_VAR 0 2
63738: IFFALSE 63744
// exit ;
63740: POP
63741: POP
63742: GO 63748
// end ;
63744: GO 63713
63746: POP
63747: POP
// end ;
63748: LD_VAR 0 2
63752: RET
// export function FilterByTag ( units , tag ) ; begin
63753: LD_INT 0
63755: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63756: LD_ADDR_VAR 0 3
63760: PUSH
63761: LD_VAR 0 1
63765: PPUSH
63766: LD_INT 120
63768: PUSH
63769: LD_VAR 0 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PPUSH
63778: CALL_OW 72
63782: ST_TO_ADDR
// end ;
63783: LD_VAR 0 3
63787: RET
// export function IsDriver ( un ) ; begin
63788: LD_INT 0
63790: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: LD_VAR 0 1
63800: PUSH
63801: LD_INT 55
63803: PUSH
63804: EMPTY
63805: LIST
63806: PPUSH
63807: CALL_OW 69
63811: IN
63812: ST_TO_ADDR
// end ;
63813: LD_VAR 0 2
63817: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63818: LD_INT 0
63820: PPUSH
63821: PPUSH
// list := [ ] ;
63822: LD_ADDR_VAR 0 5
63826: PUSH
63827: EMPTY
63828: ST_TO_ADDR
// case d of 0 :
63829: LD_VAR 0 3
63833: PUSH
63834: LD_INT 0
63836: DOUBLE
63837: EQUAL
63838: IFTRUE 63842
63840: GO 63975
63842: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63843: LD_ADDR_VAR 0 5
63847: PUSH
63848: LD_VAR 0 1
63852: PUSH
63853: LD_INT 4
63855: MINUS
63856: PUSH
63857: LD_VAR 0 2
63861: PUSH
63862: LD_INT 4
63864: MINUS
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: LIST
63873: PUSH
63874: LD_VAR 0 1
63878: PUSH
63879: LD_INT 3
63881: MINUS
63882: PUSH
63883: LD_VAR 0 2
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: LIST
63895: PUSH
63896: LD_VAR 0 1
63900: PUSH
63901: LD_INT 4
63903: PLUS
63904: PUSH
63905: LD_VAR 0 2
63909: PUSH
63910: LD_INT 4
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: PUSH
63918: LD_VAR 0 1
63922: PUSH
63923: LD_INT 3
63925: PLUS
63926: PUSH
63927: LD_VAR 0 2
63931: PUSH
63932: LD_INT 3
63934: PLUS
63935: PUSH
63936: LD_INT 5
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: PUSH
63944: LD_VAR 0 1
63948: PUSH
63949: LD_VAR 0 2
63953: PUSH
63954: LD_INT 4
63956: PLUS
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// end ; 1 :
63973: GO 64673
63975: LD_INT 1
63977: DOUBLE
63978: EQUAL
63979: IFTRUE 63983
63981: GO 64116
63983: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63984: LD_ADDR_VAR 0 5
63988: PUSH
63989: LD_VAR 0 1
63993: PUSH
63994: LD_VAR 0 2
63998: PUSH
63999: LD_INT 4
64001: MINUS
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: PUSH
64011: LD_VAR 0 1
64015: PUSH
64016: LD_INT 3
64018: MINUS
64019: PUSH
64020: LD_VAR 0 2
64024: PUSH
64025: LD_INT 3
64027: MINUS
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: PUSH
64037: LD_VAR 0 1
64041: PUSH
64042: LD_INT 4
64044: MINUS
64045: PUSH
64046: LD_VAR 0 2
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: LIST
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: LD_VAR 0 2
64068: PUSH
64069: LD_INT 3
64071: PLUS
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 4
64088: PLUS
64089: PUSH
64090: LD_VAR 0 2
64094: PUSH
64095: LD_INT 4
64097: PLUS
64098: PUSH
64099: LD_INT 5
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: ST_TO_ADDR
// end ; 2 :
64114: GO 64673
64116: LD_INT 2
64118: DOUBLE
64119: EQUAL
64120: IFTRUE 64124
64122: GO 64253
64124: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64125: LD_ADDR_VAR 0 5
64129: PUSH
64130: LD_VAR 0 1
64134: PUSH
64135: LD_VAR 0 2
64139: PUSH
64140: LD_INT 3
64142: MINUS
64143: PUSH
64144: LD_INT 3
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: PUSH
64152: LD_VAR 0 1
64156: PUSH
64157: LD_INT 4
64159: PLUS
64160: PUSH
64161: LD_VAR 0 2
64165: PUSH
64166: LD_INT 4
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_INT 4
64186: PLUS
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: PUSH
64196: LD_VAR 0 1
64200: PUSH
64201: LD_INT 3
64203: MINUS
64204: PUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: PUSH
64218: LD_VAR 0 1
64222: PUSH
64223: LD_INT 4
64225: MINUS
64226: PUSH
64227: LD_VAR 0 2
64231: PUSH
64232: LD_INT 4
64234: MINUS
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: ST_TO_ADDR
// end ; 3 :
64251: GO 64673
64253: LD_INT 3
64255: DOUBLE
64256: EQUAL
64257: IFTRUE 64261
64259: GO 64394
64261: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64262: LD_ADDR_VAR 0 5
64266: PUSH
64267: LD_VAR 0 1
64271: PUSH
64272: LD_INT 3
64274: PLUS
64275: PUSH
64276: LD_VAR 0 2
64280: PUSH
64281: LD_INT 4
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: PUSH
64289: LD_VAR 0 1
64293: PUSH
64294: LD_INT 4
64296: PLUS
64297: PUSH
64298: LD_VAR 0 2
64302: PUSH
64303: LD_INT 4
64305: PLUS
64306: PUSH
64307: LD_INT 5
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: PUSH
64315: LD_VAR 0 1
64319: PUSH
64320: LD_INT 4
64322: MINUS
64323: PUSH
64324: LD_VAR 0 2
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: PUSH
64337: LD_VAR 0 1
64341: PUSH
64342: LD_VAR 0 2
64346: PUSH
64347: LD_INT 4
64349: MINUS
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: PUSH
64359: LD_VAR 0 1
64363: PUSH
64364: LD_INT 3
64366: MINUS
64367: PUSH
64368: LD_VAR 0 2
64372: PUSH
64373: LD_INT 3
64375: MINUS
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// end ; 4 :
64392: GO 64673
64394: LD_INT 4
64396: DOUBLE
64397: EQUAL
64398: IFTRUE 64402
64400: GO 64535
64402: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64403: LD_ADDR_VAR 0 5
64407: PUSH
64408: LD_VAR 0 1
64412: PUSH
64413: LD_VAR 0 2
64417: PUSH
64418: LD_INT 4
64420: PLUS
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: PUSH
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 3
64437: PLUS
64438: PUSH
64439: LD_VAR 0 2
64443: PUSH
64444: LD_INT 3
64446: PLUS
64447: PUSH
64448: LD_INT 5
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: PUSH
64456: LD_VAR 0 1
64460: PUSH
64461: LD_INT 4
64463: PLUS
64464: PUSH
64465: LD_VAR 0 2
64469: PUSH
64470: LD_INT 4
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 1
64482: PUSH
64483: LD_VAR 0 2
64487: PUSH
64488: LD_INT 3
64490: MINUS
64491: PUSH
64492: LD_INT 3
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: LD_INT 4
64507: MINUS
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: LD_INT 4
64516: MINUS
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: ST_TO_ADDR
// end ; 5 :
64533: GO 64673
64535: LD_INT 5
64537: DOUBLE
64538: EQUAL
64539: IFTRUE 64543
64541: GO 64672
64543: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64544: LD_ADDR_VAR 0 5
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_INT 4
64556: MINUS
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_VAR 0 2
64580: PUSH
64581: LD_INT 4
64583: MINUS
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: PUSH
64593: LD_VAR 0 1
64597: PUSH
64598: LD_INT 4
64600: PLUS
64601: PUSH
64602: LD_VAR 0 2
64606: PUSH
64607: LD_INT 4
64609: PLUS
64610: PUSH
64611: LD_INT 5
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: PUSH
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 3
64626: PLUS
64627: PUSH
64628: LD_VAR 0 2
64632: PUSH
64633: LD_INT 4
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 3
64653: PLUS
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// end ; end ;
64670: GO 64673
64672: POP
// result := list ;
64673: LD_ADDR_VAR 0 4
64677: PUSH
64678: LD_VAR 0 5
64682: ST_TO_ADDR
// end ;
64683: LD_VAR 0 4
64687: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64688: LD_INT 0
64690: PPUSH
64691: PPUSH
64692: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64693: LD_VAR 0 1
64697: NOT
64698: PUSH
64699: LD_VAR 0 2
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 2
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 4
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: IN
64722: NOT
64723: OR
64724: IFFALSE 64728
// exit ;
64726: GO 64811
// tmp := [ ] ;
64728: LD_ADDR_VAR 0 5
64732: PUSH
64733: EMPTY
64734: ST_TO_ADDR
// for i in units do
64735: LD_ADDR_VAR 0 4
64739: PUSH
64740: LD_VAR 0 1
64744: PUSH
64745: FOR_IN
64746: IFFALSE 64780
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64748: LD_ADDR_VAR 0 5
64752: PUSH
64753: LD_VAR 0 5
64757: PPUSH
64758: LD_VAR 0 4
64762: PPUSH
64763: LD_VAR 0 2
64767: PPUSH
64768: CALL_OW 259
64772: PPUSH
64773: CALL 66172 0 2
64777: ST_TO_ADDR
64778: GO 64745
64780: POP
64781: POP
// if not tmp then
64782: LD_VAR 0 5
64786: NOT
64787: IFFALSE 64791
// exit ;
64789: GO 64811
// result := SortListByListDesc ( units , tmp ) ;
64791: LD_ADDR_VAR 0 3
64795: PUSH
64796: LD_VAR 0 1
64800: PPUSH
64801: LD_VAR 0 5
64805: PPUSH
64806: CALL_OW 77
64810: ST_TO_ADDR
// end ;
64811: LD_VAR 0 3
64815: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64816: LD_INT 0
64818: PPUSH
64819: PPUSH
64820: PPUSH
// result := false ;
64821: LD_ADDR_VAR 0 3
64825: PUSH
64826: LD_INT 0
64828: ST_TO_ADDR
// if not building then
64829: LD_VAR 0 2
64833: NOT
64834: IFFALSE 64838
// exit ;
64836: GO 64976
// x := GetX ( building ) ;
64838: LD_ADDR_VAR 0 4
64842: PUSH
64843: LD_VAR 0 2
64847: PPUSH
64848: CALL_OW 250
64852: ST_TO_ADDR
// y := GetY ( building ) ;
64853: LD_ADDR_VAR 0 5
64857: PUSH
64858: LD_VAR 0 2
64862: PPUSH
64863: CALL_OW 251
64867: ST_TO_ADDR
// if not x or not y then
64868: LD_VAR 0 4
64872: NOT
64873: PUSH
64874: LD_VAR 0 5
64878: NOT
64879: OR
64880: IFFALSE 64884
// exit ;
64882: GO 64976
// if GetTaskList ( unit ) then
64884: LD_VAR 0 1
64888: PPUSH
64889: CALL_OW 437
64893: IFFALSE 64976
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64895: LD_STRING e
64897: PUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: CALL_OW 437
64907: PUSH
64908: LD_INT 1
64910: ARRAY
64911: PUSH
64912: LD_INT 1
64914: ARRAY
64915: EQUAL
64916: PUSH
64917: LD_VAR 0 4
64921: PUSH
64922: LD_VAR 0 1
64926: PPUSH
64927: CALL_OW 437
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PUSH
64936: LD_INT 2
64938: ARRAY
64939: EQUAL
64940: AND
64941: PUSH
64942: LD_VAR 0 5
64946: PUSH
64947: LD_VAR 0 1
64951: PPUSH
64952: CALL_OW 437
64956: PUSH
64957: LD_INT 1
64959: ARRAY
64960: PUSH
64961: LD_INT 3
64963: ARRAY
64964: EQUAL
64965: AND
64966: IFFALSE 64976
// result := true end ;
64968: LD_ADDR_VAR 0 3
64972: PUSH
64973: LD_INT 1
64975: ST_TO_ADDR
// end ;
64976: LD_VAR 0 3
64980: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64981: LD_INT 0
64983: PPUSH
// result := false ;
64984: LD_ADDR_VAR 0 4
64988: PUSH
64989: LD_INT 0
64991: ST_TO_ADDR
// if GetTaskList ( unit ) then
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 437
65001: IFFALSE 65084
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65003: LD_STRING M
65005: PUSH
65006: LD_VAR 0 1
65010: PPUSH
65011: CALL_OW 437
65015: PUSH
65016: LD_INT 1
65018: ARRAY
65019: PUSH
65020: LD_INT 1
65022: ARRAY
65023: EQUAL
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: LD_VAR 0 1
65034: PPUSH
65035: CALL_OW 437
65039: PUSH
65040: LD_INT 1
65042: ARRAY
65043: PUSH
65044: LD_INT 2
65046: ARRAY
65047: EQUAL
65048: AND
65049: PUSH
65050: LD_VAR 0 3
65054: PUSH
65055: LD_VAR 0 1
65059: PPUSH
65060: CALL_OW 437
65064: PUSH
65065: LD_INT 1
65067: ARRAY
65068: PUSH
65069: LD_INT 3
65071: ARRAY
65072: EQUAL
65073: AND
65074: IFFALSE 65084
// result := true ;
65076: LD_ADDR_VAR 0 4
65080: PUSH
65081: LD_INT 1
65083: ST_TO_ADDR
// end ; end ;
65084: LD_VAR 0 4
65088: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65089: LD_INT 0
65091: PPUSH
65092: PPUSH
65093: PPUSH
65094: PPUSH
// if not unit or not area then
65095: LD_VAR 0 1
65099: NOT
65100: PUSH
65101: LD_VAR 0 2
65105: NOT
65106: OR
65107: IFFALSE 65111
// exit ;
65109: GO 65275
// tmp := AreaToList ( area , i ) ;
65111: LD_ADDR_VAR 0 6
65115: PUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: LD_VAR 0 5
65125: PPUSH
65126: CALL_OW 517
65130: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65131: LD_ADDR_VAR 0 5
65135: PUSH
65136: DOUBLE
65137: LD_INT 1
65139: DEC
65140: ST_TO_ADDR
65141: LD_VAR 0 6
65145: PUSH
65146: LD_INT 1
65148: ARRAY
65149: PUSH
65150: FOR_TO
65151: IFFALSE 65273
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65153: LD_ADDR_VAR 0 7
65157: PUSH
65158: LD_VAR 0 6
65162: PUSH
65163: LD_INT 1
65165: ARRAY
65166: PUSH
65167: LD_VAR 0 5
65171: ARRAY
65172: PUSH
65173: LD_VAR 0 6
65177: PUSH
65178: LD_INT 2
65180: ARRAY
65181: PUSH
65182: LD_VAR 0 5
65186: ARRAY
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65192: LD_VAR 0 7
65196: PUSH
65197: LD_INT 1
65199: ARRAY
65200: PPUSH
65201: LD_VAR 0 7
65205: PUSH
65206: LD_INT 2
65208: ARRAY
65209: PPUSH
65210: CALL_OW 428
65214: PUSH
65215: LD_INT 0
65217: EQUAL
65218: IFFALSE 65271
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65220: LD_VAR 0 1
65224: PPUSH
65225: LD_VAR 0 7
65229: PUSH
65230: LD_INT 1
65232: ARRAY
65233: PPUSH
65234: LD_VAR 0 7
65238: PUSH
65239: LD_INT 2
65241: ARRAY
65242: PPUSH
65243: LD_VAR 0 3
65247: PPUSH
65248: CALL_OW 48
// result := IsPlaced ( unit ) ;
65252: LD_ADDR_VAR 0 4
65256: PUSH
65257: LD_VAR 0 1
65261: PPUSH
65262: CALL_OW 305
65266: ST_TO_ADDR
// exit ;
65267: POP
65268: POP
65269: GO 65275
// end ; end ;
65271: GO 65150
65273: POP
65274: POP
// end ;
65275: LD_VAR 0 4
65279: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65280: LD_INT 0
65282: PPUSH
65283: PPUSH
65284: PPUSH
// if not side or side > 8 then
65285: LD_VAR 0 1
65289: NOT
65290: PUSH
65291: LD_VAR 0 1
65295: PUSH
65296: LD_INT 8
65298: GREATER
65299: OR
65300: IFFALSE 65304
// exit ;
65302: GO 65491
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65304: LD_ADDR_VAR 0 4
65308: PUSH
65309: LD_INT 22
65311: PUSH
65312: LD_VAR 0 1
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 21
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PPUSH
65335: CALL_OW 69
65339: ST_TO_ADDR
// if not tmp then
65340: LD_VAR 0 4
65344: NOT
65345: IFFALSE 65349
// exit ;
65347: GO 65491
// enable_addtolog := true ;
65349: LD_ADDR_OWVAR 81
65353: PUSH
65354: LD_INT 1
65356: ST_TO_ADDR
// AddToLog ( [ ) ;
65357: LD_STRING [
65359: PPUSH
65360: CALL_OW 561
// for i in tmp do
65364: LD_ADDR_VAR 0 3
65368: PUSH
65369: LD_VAR 0 4
65373: PUSH
65374: FOR_IN
65375: IFFALSE 65482
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65377: LD_STRING [
65379: PUSH
65380: LD_VAR 0 3
65384: PPUSH
65385: CALL_OW 266
65389: STR
65390: PUSH
65391: LD_STRING , 
65393: STR
65394: PUSH
65395: LD_VAR 0 3
65399: PPUSH
65400: CALL_OW 250
65404: STR
65405: PUSH
65406: LD_STRING , 
65408: STR
65409: PUSH
65410: LD_VAR 0 3
65414: PPUSH
65415: CALL_OW 251
65419: STR
65420: PUSH
65421: LD_STRING , 
65423: STR
65424: PUSH
65425: LD_VAR 0 3
65429: PPUSH
65430: CALL_OW 254
65434: STR
65435: PUSH
65436: LD_STRING , 
65438: STR
65439: PUSH
65440: LD_VAR 0 3
65444: PPUSH
65445: LD_INT 1
65447: PPUSH
65448: CALL_OW 268
65452: STR
65453: PUSH
65454: LD_STRING , 
65456: STR
65457: PUSH
65458: LD_VAR 0 3
65462: PPUSH
65463: LD_INT 2
65465: PPUSH
65466: CALL_OW 268
65470: STR
65471: PUSH
65472: LD_STRING ],
65474: STR
65475: PPUSH
65476: CALL_OW 561
// end ;
65480: GO 65374
65482: POP
65483: POP
// AddToLog ( ]; ) ;
65484: LD_STRING ];
65486: PPUSH
65487: CALL_OW 561
// end ;
65491: LD_VAR 0 2
65495: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65496: LD_INT 0
65498: PPUSH
65499: PPUSH
65500: PPUSH
65501: PPUSH
65502: PPUSH
// if not area or not rate or not max then
65503: LD_VAR 0 1
65507: NOT
65508: PUSH
65509: LD_VAR 0 2
65513: NOT
65514: OR
65515: PUSH
65516: LD_VAR 0 4
65520: NOT
65521: OR
65522: IFFALSE 65526
// exit ;
65524: GO 65715
// while 1 do
65526: LD_INT 1
65528: IFFALSE 65715
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65530: LD_ADDR_VAR 0 9
65534: PUSH
65535: LD_VAR 0 1
65539: PPUSH
65540: LD_INT 1
65542: PPUSH
65543: CALL_OW 287
65547: PUSH
65548: LD_INT 10
65550: MUL
65551: ST_TO_ADDR
// r := rate / 10 ;
65552: LD_ADDR_VAR 0 7
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: LD_INT 10
65564: DIVREAL
65565: ST_TO_ADDR
// time := 1 1$00 ;
65566: LD_ADDR_VAR 0 8
65570: PUSH
65571: LD_INT 2100
65573: ST_TO_ADDR
// if amount < min then
65574: LD_VAR 0 9
65578: PUSH
65579: LD_VAR 0 3
65583: LESS
65584: IFFALSE 65602
// r := r * 2 else
65586: LD_ADDR_VAR 0 7
65590: PUSH
65591: LD_VAR 0 7
65595: PUSH
65596: LD_INT 2
65598: MUL
65599: ST_TO_ADDR
65600: GO 65628
// if amount > max then
65602: LD_VAR 0 9
65606: PUSH
65607: LD_VAR 0 4
65611: GREATER
65612: IFFALSE 65628
// r := r / 2 ;
65614: LD_ADDR_VAR 0 7
65618: PUSH
65619: LD_VAR 0 7
65623: PUSH
65624: LD_INT 2
65626: DIVREAL
65627: ST_TO_ADDR
// time := time / r ;
65628: LD_ADDR_VAR 0 8
65632: PUSH
65633: LD_VAR 0 8
65637: PUSH
65638: LD_VAR 0 7
65642: DIVREAL
65643: ST_TO_ADDR
// if time < 0 then
65644: LD_VAR 0 8
65648: PUSH
65649: LD_INT 0
65651: LESS
65652: IFFALSE 65669
// time := time * - 1 ;
65654: LD_ADDR_VAR 0 8
65658: PUSH
65659: LD_VAR 0 8
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: MUL
65668: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65669: LD_VAR 0 8
65673: PUSH
65674: LD_INT 35
65676: PPUSH
65677: LD_INT 875
65679: PPUSH
65680: CALL_OW 12
65684: PLUS
65685: PPUSH
65686: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65690: LD_INT 1
65692: PPUSH
65693: LD_INT 5
65695: PPUSH
65696: CALL_OW 12
65700: PPUSH
65701: LD_VAR 0 1
65705: PPUSH
65706: LD_INT 1
65708: PPUSH
65709: CALL_OW 55
// end ;
65713: GO 65526
// end ;
65715: LD_VAR 0 5
65719: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65720: LD_INT 0
65722: PPUSH
65723: PPUSH
65724: PPUSH
65725: PPUSH
65726: PPUSH
65727: PPUSH
65728: PPUSH
65729: PPUSH
// if not turrets or not factories then
65730: LD_VAR 0 1
65734: NOT
65735: PUSH
65736: LD_VAR 0 2
65740: NOT
65741: OR
65742: IFFALSE 65746
// exit ;
65744: GO 66053
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65746: LD_ADDR_VAR 0 10
65750: PUSH
65751: LD_INT 5
65753: PUSH
65754: LD_INT 6
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 5
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 24
65788: PUSH
65789: LD_INT 25
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 23
65798: PUSH
65799: LD_INT 27
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 42
65812: PUSH
65813: LD_INT 43
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 44
65822: PUSH
65823: LD_INT 46
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 45
65832: PUSH
65833: LD_INT 47
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: LIST
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: LIST
65849: ST_TO_ADDR
// result := [ ] ;
65850: LD_ADDR_VAR 0 3
65854: PUSH
65855: EMPTY
65856: ST_TO_ADDR
// for i in turrets do
65857: LD_ADDR_VAR 0 4
65861: PUSH
65862: LD_VAR 0 1
65866: PUSH
65867: FOR_IN
65868: IFFALSE 66051
// begin nat := GetNation ( i ) ;
65870: LD_ADDR_VAR 0 7
65874: PUSH
65875: LD_VAR 0 4
65879: PPUSH
65880: CALL_OW 248
65884: ST_TO_ADDR
// weapon := 0 ;
65885: LD_ADDR_VAR 0 8
65889: PUSH
65890: LD_INT 0
65892: ST_TO_ADDR
// if not nat then
65893: LD_VAR 0 7
65897: NOT
65898: IFFALSE 65902
// continue ;
65900: GO 65867
// for j in list [ nat ] do
65902: LD_ADDR_VAR 0 5
65906: PUSH
65907: LD_VAR 0 10
65911: PUSH
65912: LD_VAR 0 7
65916: ARRAY
65917: PUSH
65918: FOR_IN
65919: IFFALSE 65960
// if GetBWeapon ( i ) = j [ 1 ] then
65921: LD_VAR 0 4
65925: PPUSH
65926: CALL_OW 269
65930: PUSH
65931: LD_VAR 0 5
65935: PUSH
65936: LD_INT 1
65938: ARRAY
65939: EQUAL
65940: IFFALSE 65958
// begin weapon := j [ 2 ] ;
65942: LD_ADDR_VAR 0 8
65946: PUSH
65947: LD_VAR 0 5
65951: PUSH
65952: LD_INT 2
65954: ARRAY
65955: ST_TO_ADDR
// break ;
65956: GO 65960
// end ;
65958: GO 65918
65960: POP
65961: POP
// if not weapon then
65962: LD_VAR 0 8
65966: NOT
65967: IFFALSE 65971
// continue ;
65969: GO 65867
// for k in factories do
65971: LD_ADDR_VAR 0 6
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: FOR_IN
65982: IFFALSE 66047
// begin weapons := AvailableWeaponList ( k ) ;
65984: LD_ADDR_VAR 0 9
65988: PUSH
65989: LD_VAR 0 6
65993: PPUSH
65994: CALL_OW 478
65998: ST_TO_ADDR
// if not weapons then
65999: LD_VAR 0 9
66003: NOT
66004: IFFALSE 66008
// continue ;
66006: GO 65981
// if weapon in weapons then
66008: LD_VAR 0 8
66012: PUSH
66013: LD_VAR 0 9
66017: IN
66018: IFFALSE 66045
// begin result := [ i , weapon ] ;
66020: LD_ADDR_VAR 0 3
66024: PUSH
66025: LD_VAR 0 4
66029: PUSH
66030: LD_VAR 0 8
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: ST_TO_ADDR
// exit ;
66039: POP
66040: POP
66041: POP
66042: POP
66043: GO 66053
// end ; end ;
66045: GO 65981
66047: POP
66048: POP
// end ;
66049: GO 65867
66051: POP
66052: POP
// end ;
66053: LD_VAR 0 3
66057: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66058: LD_INT 0
66060: PPUSH
// if not side or side > 8 then
66061: LD_VAR 0 3
66065: NOT
66066: PUSH
66067: LD_VAR 0 3
66071: PUSH
66072: LD_INT 8
66074: GREATER
66075: OR
66076: IFFALSE 66080
// exit ;
66078: GO 66139
// if not range then
66080: LD_VAR 0 4
66084: NOT
66085: IFFALSE 66096
// range := - 12 ;
66087: LD_ADDR_VAR 0 4
66091: PUSH
66092: LD_INT 12
66094: NEG
66095: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66096: LD_VAR 0 1
66100: PPUSH
66101: LD_VAR 0 2
66105: PPUSH
66106: LD_VAR 0 3
66110: PPUSH
66111: LD_VAR 0 4
66115: PPUSH
66116: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66120: LD_VAR 0 1
66124: PPUSH
66125: LD_VAR 0 2
66129: PPUSH
66130: LD_VAR 0 3
66134: PPUSH
66135: CALL_OW 331
// end ;
66139: LD_VAR 0 5
66143: RET
// export function Video ( mode ) ; begin
66144: LD_INT 0
66146: PPUSH
// ingame_video = mode ;
66147: LD_ADDR_OWVAR 52
66151: PUSH
66152: LD_VAR 0 1
66156: ST_TO_ADDR
// interface_hidden = mode ;
66157: LD_ADDR_OWVAR 54
66161: PUSH
66162: LD_VAR 0 1
66166: ST_TO_ADDR
// end ;
66167: LD_VAR 0 2
66171: RET
// export function Join ( array , element ) ; begin
66172: LD_INT 0
66174: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66175: LD_ADDR_VAR 0 3
66179: PUSH
66180: LD_VAR 0 1
66184: PPUSH
66185: LD_VAR 0 1
66189: PUSH
66190: LD_INT 1
66192: PLUS
66193: PPUSH
66194: LD_VAR 0 2
66198: PPUSH
66199: CALL_OW 1
66203: ST_TO_ADDR
// end ;
66204: LD_VAR 0 3
66208: RET
// export function JoinUnion ( array , element ) ; begin
66209: LD_INT 0
66211: PPUSH
// result := array union element ;
66212: LD_ADDR_VAR 0 3
66216: PUSH
66217: LD_VAR 0 1
66221: PUSH
66222: LD_VAR 0 2
66226: UNION
66227: ST_TO_ADDR
// end ;
66228: LD_VAR 0 3
66232: RET
// export function GetBehemoths ( side ) ; begin
66233: LD_INT 0
66235: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66236: LD_ADDR_VAR 0 2
66240: PUSH
66241: LD_INT 22
66243: PUSH
66244: LD_VAR 0 1
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 31
66255: PUSH
66256: LD_INT 25
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PPUSH
66267: CALL_OW 69
66271: ST_TO_ADDR
// end ;
66272: LD_VAR 0 2
66276: RET
// export function Shuffle ( array ) ; var i , index ; begin
66277: LD_INT 0
66279: PPUSH
66280: PPUSH
66281: PPUSH
// result := [ ] ;
66282: LD_ADDR_VAR 0 2
66286: PUSH
66287: EMPTY
66288: ST_TO_ADDR
// if not array then
66289: LD_VAR 0 1
66293: NOT
66294: IFFALSE 66298
// exit ;
66296: GO 66397
// Randomize ;
66298: CALL_OW 10
// for i = array downto 1 do
66302: LD_ADDR_VAR 0 3
66306: PUSH
66307: DOUBLE
66308: LD_VAR 0 1
66312: INC
66313: ST_TO_ADDR
66314: LD_INT 1
66316: PUSH
66317: FOR_DOWNTO
66318: IFFALSE 66395
// begin index := rand ( 1 , array ) ;
66320: LD_ADDR_VAR 0 4
66324: PUSH
66325: LD_INT 1
66327: PPUSH
66328: LD_VAR 0 1
66332: PPUSH
66333: CALL_OW 12
66337: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66338: LD_ADDR_VAR 0 2
66342: PUSH
66343: LD_VAR 0 2
66347: PPUSH
66348: LD_VAR 0 2
66352: PUSH
66353: LD_INT 1
66355: PLUS
66356: PPUSH
66357: LD_VAR 0 1
66361: PUSH
66362: LD_VAR 0 4
66366: ARRAY
66367: PPUSH
66368: CALL_OW 2
66372: ST_TO_ADDR
// array := Delete ( array , index ) ;
66373: LD_ADDR_VAR 0 1
66377: PUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: LD_VAR 0 4
66387: PPUSH
66388: CALL_OW 3
66392: ST_TO_ADDR
// end ;
66393: GO 66317
66395: POP
66396: POP
// end ;
66397: LD_VAR 0 2
66401: RET
// export function GetBaseMaterials ( base ) ; begin
66402: LD_INT 0
66404: PPUSH
// result := [ 0 , 0 , 0 ] ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_INT 0
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// if not base then
66424: LD_VAR 0 1
66428: NOT
66429: IFFALSE 66433
// exit ;
66431: GO 66482
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66433: LD_ADDR_VAR 0 2
66437: PUSH
66438: LD_VAR 0 1
66442: PPUSH
66443: LD_INT 1
66445: PPUSH
66446: CALL_OW 275
66450: PUSH
66451: LD_VAR 0 1
66455: PPUSH
66456: LD_INT 2
66458: PPUSH
66459: CALL_OW 275
66463: PUSH
66464: LD_VAR 0 1
66468: PPUSH
66469: LD_INT 3
66471: PPUSH
66472: CALL_OW 275
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: ST_TO_ADDR
// end ;
66482: LD_VAR 0 2
66486: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66487: LD_INT 0
66489: PPUSH
66490: PPUSH
// result := array ;
66491: LD_ADDR_VAR 0 3
66495: PUSH
66496: LD_VAR 0 1
66500: ST_TO_ADDR
// if size >= result then
66501: LD_VAR 0 2
66505: PUSH
66506: LD_VAR 0 3
66510: GREATEREQUAL
66511: IFFALSE 66515
// exit ;
66513: GO 66565
// if size then
66515: LD_VAR 0 2
66519: IFFALSE 66565
// for i := array downto size do
66521: LD_ADDR_VAR 0 4
66525: PUSH
66526: DOUBLE
66527: LD_VAR 0 1
66531: INC
66532: ST_TO_ADDR
66533: LD_VAR 0 2
66537: PUSH
66538: FOR_DOWNTO
66539: IFFALSE 66563
// result := Delete ( result , result ) ;
66541: LD_ADDR_VAR 0 3
66545: PUSH
66546: LD_VAR 0 3
66550: PPUSH
66551: LD_VAR 0 3
66555: PPUSH
66556: CALL_OW 3
66560: ST_TO_ADDR
66561: GO 66538
66563: POP
66564: POP
// end ;
66565: LD_VAR 0 3
66569: RET
// export function ComExit ( unit ) ; var tmp ; begin
66570: LD_INT 0
66572: PPUSH
66573: PPUSH
// if not IsInUnit ( unit ) then
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 310
66583: NOT
66584: IFFALSE 66588
// exit ;
66586: GO 66648
// tmp := IsInUnit ( unit ) ;
66588: LD_ADDR_VAR 0 3
66592: PUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: CALL_OW 310
66602: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66603: LD_VAR 0 3
66607: PPUSH
66608: CALL_OW 247
66612: PUSH
66613: LD_INT 2
66615: EQUAL
66616: IFFALSE 66629
// ComExitVehicle ( unit ) else
66618: LD_VAR 0 1
66622: PPUSH
66623: CALL_OW 121
66627: GO 66638
// ComExitBuilding ( unit ) ;
66629: LD_VAR 0 1
66633: PPUSH
66634: CALL_OW 122
// result := tmp ;
66638: LD_ADDR_VAR 0 2
66642: PUSH
66643: LD_VAR 0 3
66647: ST_TO_ADDR
// end ;
66648: LD_VAR 0 2
66652: RET
// export function ComExitAll ( units ) ; var i ; begin
66653: LD_INT 0
66655: PPUSH
66656: PPUSH
// if not units then
66657: LD_VAR 0 1
66661: NOT
66662: IFFALSE 66666
// exit ;
66664: GO 66692
// for i in units do
66666: LD_ADDR_VAR 0 3
66670: PUSH
66671: LD_VAR 0 1
66675: PUSH
66676: FOR_IN
66677: IFFALSE 66690
// ComExit ( i ) ;
66679: LD_VAR 0 3
66683: PPUSH
66684: CALL 66570 0 1
66688: GO 66676
66690: POP
66691: POP
// end ;
66692: LD_VAR 0 2
66696: RET
// export function ResetHc ; begin
66697: LD_INT 0
66699: PPUSH
// InitHc ;
66700: CALL_OW 19
// hc_importance := 0 ;
66704: LD_ADDR_OWVAR 32
66708: PUSH
66709: LD_INT 0
66711: ST_TO_ADDR
// end ;
66712: LD_VAR 0 1
66716: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66717: LD_INT 0
66719: PPUSH
66720: PPUSH
66721: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66722: LD_ADDR_VAR 0 6
66726: PUSH
66727: LD_VAR 0 1
66731: PUSH
66732: LD_VAR 0 3
66736: PLUS
66737: PUSH
66738: LD_INT 2
66740: DIV
66741: ST_TO_ADDR
// if _x < 0 then
66742: LD_VAR 0 6
66746: PUSH
66747: LD_INT 0
66749: LESS
66750: IFFALSE 66767
// _x := _x * - 1 ;
66752: LD_ADDR_VAR 0 6
66756: PUSH
66757: LD_VAR 0 6
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: MUL
66766: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66767: LD_ADDR_VAR 0 7
66771: PUSH
66772: LD_VAR 0 2
66776: PUSH
66777: LD_VAR 0 4
66781: PLUS
66782: PUSH
66783: LD_INT 2
66785: DIV
66786: ST_TO_ADDR
// if _y < 0 then
66787: LD_VAR 0 7
66791: PUSH
66792: LD_INT 0
66794: LESS
66795: IFFALSE 66812
// _y := _y * - 1 ;
66797: LD_ADDR_VAR 0 7
66801: PUSH
66802: LD_VAR 0 7
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: MUL
66811: ST_TO_ADDR
// result := [ _x , _y ] ;
66812: LD_ADDR_VAR 0 5
66816: PUSH
66817: LD_VAR 0 6
66821: PUSH
66822: LD_VAR 0 7
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// end ;
66831: LD_VAR 0 5
66835: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66836: LD_INT 0
66838: PPUSH
66839: PPUSH
66840: PPUSH
66841: PPUSH
// task := GetTaskList ( unit ) ;
66842: LD_ADDR_VAR 0 7
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: CALL_OW 437
66856: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66857: LD_VAR 0 7
66861: NOT
66862: PUSH
66863: LD_VAR 0 1
66867: PPUSH
66868: LD_VAR 0 2
66872: PPUSH
66873: CALL_OW 308
66877: NOT
66878: AND
66879: IFFALSE 66883
// exit ;
66881: GO 67001
// if IsInArea ( unit , area ) then
66883: LD_VAR 0 1
66887: PPUSH
66888: LD_VAR 0 2
66892: PPUSH
66893: CALL_OW 308
66897: IFFALSE 66915
// begin ComMoveToArea ( unit , goAway ) ;
66899: LD_VAR 0 1
66903: PPUSH
66904: LD_VAR 0 3
66908: PPUSH
66909: CALL_OW 113
// exit ;
66913: GO 67001
// end ; if task [ 1 ] [ 1 ] <> M then
66915: LD_VAR 0 7
66919: PUSH
66920: LD_INT 1
66922: ARRAY
66923: PUSH
66924: LD_INT 1
66926: ARRAY
66927: PUSH
66928: LD_STRING M
66930: NONEQUAL
66931: IFFALSE 66935
// exit ;
66933: GO 67001
// x := task [ 1 ] [ 2 ] ;
66935: LD_ADDR_VAR 0 5
66939: PUSH
66940: LD_VAR 0 7
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: PUSH
66949: LD_INT 2
66951: ARRAY
66952: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66953: LD_ADDR_VAR 0 6
66957: PUSH
66958: LD_VAR 0 7
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: PUSH
66967: LD_INT 3
66969: ARRAY
66970: ST_TO_ADDR
// if InArea ( x , y , area ) then
66971: LD_VAR 0 5
66975: PPUSH
66976: LD_VAR 0 6
66980: PPUSH
66981: LD_VAR 0 2
66985: PPUSH
66986: CALL_OW 309
66990: IFFALSE 67001
// ComStop ( unit ) ;
66992: LD_VAR 0 1
66996: PPUSH
66997: CALL_OW 141
// end ;
67001: LD_VAR 0 4
67005: RET
// export function Abs ( value ) ; begin
67006: LD_INT 0
67008: PPUSH
// result := value ;
67009: LD_ADDR_VAR 0 2
67013: PUSH
67014: LD_VAR 0 1
67018: ST_TO_ADDR
// if value < 0 then
67019: LD_VAR 0 1
67023: PUSH
67024: LD_INT 0
67026: LESS
67027: IFFALSE 67044
// result := value * - 1 ;
67029: LD_ADDR_VAR 0 2
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: MUL
67043: ST_TO_ADDR
// end ;
67044: LD_VAR 0 2
67048: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67049: LD_INT 0
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
67058: PPUSH
// if not unit or not building then
67059: LD_VAR 0 1
67063: NOT
67064: PUSH
67065: LD_VAR 0 2
67069: NOT
67070: OR
67071: IFFALSE 67075
// exit ;
67073: GO 67301
// x := GetX ( building ) ;
67075: LD_ADDR_VAR 0 4
67079: PUSH
67080: LD_VAR 0 2
67084: PPUSH
67085: CALL_OW 250
67089: ST_TO_ADDR
// y := GetY ( building ) ;
67090: LD_ADDR_VAR 0 6
67094: PUSH
67095: LD_VAR 0 2
67099: PPUSH
67100: CALL_OW 251
67104: ST_TO_ADDR
// d := GetDir ( building ) ;
67105: LD_ADDR_VAR 0 8
67109: PUSH
67110: LD_VAR 0 2
67114: PPUSH
67115: CALL_OW 254
67119: ST_TO_ADDR
// r := 4 ;
67120: LD_ADDR_VAR 0 9
67124: PUSH
67125: LD_INT 4
67127: ST_TO_ADDR
// for i := 1 to 5 do
67128: LD_ADDR_VAR 0 10
67132: PUSH
67133: DOUBLE
67134: LD_INT 1
67136: DEC
67137: ST_TO_ADDR
67138: LD_INT 5
67140: PUSH
67141: FOR_TO
67142: IFFALSE 67299
// begin _x := ShiftX ( x , d , r + i ) ;
67144: LD_ADDR_VAR 0 5
67148: PUSH
67149: LD_VAR 0 4
67153: PPUSH
67154: LD_VAR 0 8
67158: PPUSH
67159: LD_VAR 0 9
67163: PUSH
67164: LD_VAR 0 10
67168: PLUS
67169: PPUSH
67170: CALL_OW 272
67174: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67175: LD_ADDR_VAR 0 7
67179: PUSH
67180: LD_VAR 0 6
67184: PPUSH
67185: LD_VAR 0 8
67189: PPUSH
67190: LD_VAR 0 9
67194: PUSH
67195: LD_VAR 0 10
67199: PLUS
67200: PPUSH
67201: CALL_OW 273
67205: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67206: LD_VAR 0 5
67210: PPUSH
67211: LD_VAR 0 7
67215: PPUSH
67216: CALL_OW 488
67220: PUSH
67221: LD_VAR 0 5
67225: PPUSH
67226: LD_VAR 0 7
67230: PPUSH
67231: CALL_OW 428
67235: PPUSH
67236: CALL_OW 247
67240: PUSH
67241: LD_INT 3
67243: PUSH
67244: LD_INT 2
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: IN
67251: NOT
67252: AND
67253: IFFALSE 67297
// begin ComMoveXY ( unit , _x , _y ) ;
67255: LD_VAR 0 1
67259: PPUSH
67260: LD_VAR 0 5
67264: PPUSH
67265: LD_VAR 0 7
67269: PPUSH
67270: CALL_OW 111
// result := [ _x , _y ] ;
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: LD_VAR 0 5
67283: PUSH
67284: LD_VAR 0 7
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: ST_TO_ADDR
// exit ;
67293: POP
67294: POP
67295: GO 67301
// end ; end ;
67297: GO 67141
67299: POP
67300: POP
// end ;
67301: LD_VAR 0 3
67305: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67306: LD_INT 0
67308: PPUSH
67309: PPUSH
67310: PPUSH
// result := 0 ;
67311: LD_ADDR_VAR 0 3
67315: PUSH
67316: LD_INT 0
67318: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67319: LD_VAR 0 1
67323: PUSH
67324: LD_INT 0
67326: LESS
67327: PUSH
67328: LD_VAR 0 1
67332: PUSH
67333: LD_INT 8
67335: GREATER
67336: OR
67337: PUSH
67338: LD_VAR 0 2
67342: PUSH
67343: LD_INT 0
67345: LESS
67346: OR
67347: PUSH
67348: LD_VAR 0 2
67352: PUSH
67353: LD_INT 8
67355: GREATER
67356: OR
67357: IFFALSE 67361
// exit ;
67359: GO 67436
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67361: LD_ADDR_VAR 0 4
67365: PUSH
67366: LD_INT 22
67368: PUSH
67369: LD_VAR 0 2
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PPUSH
67378: CALL_OW 69
67382: PUSH
67383: FOR_IN
67384: IFFALSE 67434
// begin un := UnitShoot ( i ) ;
67386: LD_ADDR_VAR 0 5
67390: PUSH
67391: LD_VAR 0 4
67395: PPUSH
67396: CALL_OW 504
67400: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67401: LD_VAR 0 5
67405: PPUSH
67406: CALL_OW 255
67410: PUSH
67411: LD_VAR 0 1
67415: EQUAL
67416: IFFALSE 67432
// begin result := un ;
67418: LD_ADDR_VAR 0 3
67422: PUSH
67423: LD_VAR 0 5
67427: ST_TO_ADDR
// exit ;
67428: POP
67429: POP
67430: GO 67436
// end ; end ;
67432: GO 67383
67434: POP
67435: POP
// end ;
67436: LD_VAR 0 3
67440: RET
// export function GetCargoBay ( units ) ; begin
67441: LD_INT 0
67443: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67444: LD_ADDR_VAR 0 2
67448: PUSH
67449: LD_VAR 0 1
67453: PPUSH
67454: LD_INT 2
67456: PUSH
67457: LD_INT 34
67459: PUSH
67460: LD_INT 12
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 34
67469: PUSH
67470: LD_INT 51
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 34
67479: PUSH
67480: LD_INT 32
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 34
67489: PUSH
67490: LD_INT 89
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: PPUSH
67504: CALL_OW 72
67508: ST_TO_ADDR
// end ;
67509: LD_VAR 0 2
67513: RET
// export function Negate ( value ) ; begin
67514: LD_INT 0
67516: PPUSH
// result := not value ;
67517: LD_ADDR_VAR 0 2
67521: PUSH
67522: LD_VAR 0 1
67526: NOT
67527: ST_TO_ADDR
// end ;
67528: LD_VAR 0 2
67532: RET
// export function Inc ( value ) ; begin
67533: LD_INT 0
67535: PPUSH
// result := value + 1 ;
67536: LD_ADDR_VAR 0 2
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: LD_INT 1
67548: PLUS
67549: ST_TO_ADDR
// end ;
67550: LD_VAR 0 2
67554: RET
// export function Dec ( value ) ; begin
67555: LD_INT 0
67557: PPUSH
// result := value - 1 ;
67558: LD_ADDR_VAR 0 2
67562: PUSH
67563: LD_VAR 0 1
67567: PUSH
67568: LD_INT 1
67570: MINUS
67571: ST_TO_ADDR
// end ;
67572: LD_VAR 0 2
67576: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67577: LD_INT 0
67579: PPUSH
67580: PPUSH
67581: PPUSH
67582: PPUSH
67583: PPUSH
67584: PPUSH
67585: PPUSH
67586: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67587: LD_VAR 0 1
67591: PPUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: CALL_OW 488
67601: NOT
67602: PUSH
67603: LD_VAR 0 3
67607: PPUSH
67608: LD_VAR 0 4
67612: PPUSH
67613: CALL_OW 488
67617: NOT
67618: OR
67619: IFFALSE 67632
// begin result := - 1 ;
67621: LD_ADDR_VAR 0 5
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: ST_TO_ADDR
// exit ;
67630: GO 67867
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67632: LD_ADDR_VAR 0 12
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: LD_VAR 0 2
67646: PPUSH
67647: LD_VAR 0 3
67651: PPUSH
67652: LD_VAR 0 4
67656: PPUSH
67657: CALL 66717 0 4
67661: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67662: LD_ADDR_VAR 0 11
67666: PUSH
67667: LD_VAR 0 1
67671: PPUSH
67672: LD_VAR 0 2
67676: PPUSH
67677: LD_VAR 0 12
67681: PUSH
67682: LD_INT 1
67684: ARRAY
67685: PPUSH
67686: LD_VAR 0 12
67690: PUSH
67691: LD_INT 2
67693: ARRAY
67694: PPUSH
67695: CALL_OW 298
67699: ST_TO_ADDR
// distance := 9999 ;
67700: LD_ADDR_VAR 0 10
67704: PUSH
67705: LD_INT 9999
67707: ST_TO_ADDR
// for i := 0 to 5 do
67708: LD_ADDR_VAR 0 6
67712: PUSH
67713: DOUBLE
67714: LD_INT 0
67716: DEC
67717: ST_TO_ADDR
67718: LD_INT 5
67720: PUSH
67721: FOR_TO
67722: IFFALSE 67865
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67724: LD_ADDR_VAR 0 7
67728: PUSH
67729: LD_VAR 0 1
67733: PPUSH
67734: LD_VAR 0 6
67738: PPUSH
67739: LD_VAR 0 11
67743: PPUSH
67744: CALL_OW 272
67748: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67749: LD_ADDR_VAR 0 8
67753: PUSH
67754: LD_VAR 0 2
67758: PPUSH
67759: LD_VAR 0 6
67763: PPUSH
67764: LD_VAR 0 11
67768: PPUSH
67769: CALL_OW 273
67773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67774: LD_VAR 0 7
67778: PPUSH
67779: LD_VAR 0 8
67783: PPUSH
67784: CALL_OW 488
67788: NOT
67789: IFFALSE 67793
// continue ;
67791: GO 67721
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67793: LD_ADDR_VAR 0 9
67797: PUSH
67798: LD_VAR 0 12
67802: PUSH
67803: LD_INT 1
67805: ARRAY
67806: PPUSH
67807: LD_VAR 0 12
67811: PUSH
67812: LD_INT 2
67814: ARRAY
67815: PPUSH
67816: LD_VAR 0 7
67820: PPUSH
67821: LD_VAR 0 8
67825: PPUSH
67826: CALL_OW 298
67830: ST_TO_ADDR
// if tmp < distance then
67831: LD_VAR 0 9
67835: PUSH
67836: LD_VAR 0 10
67840: LESS
67841: IFFALSE 67863
// begin result := i ;
67843: LD_ADDR_VAR 0 5
67847: PUSH
67848: LD_VAR 0 6
67852: ST_TO_ADDR
// distance := tmp ;
67853: LD_ADDR_VAR 0 10
67857: PUSH
67858: LD_VAR 0 9
67862: ST_TO_ADDR
// end ; end ;
67863: GO 67721
67865: POP
67866: POP
// end ;
67867: LD_VAR 0 5
67871: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67872: LD_INT 0
67874: PPUSH
67875: PPUSH
// if not driver or not IsInUnit ( driver ) then
67876: LD_VAR 0 1
67880: NOT
67881: PUSH
67882: LD_VAR 0 1
67886: PPUSH
67887: CALL_OW 310
67891: NOT
67892: OR
67893: IFFALSE 67897
// exit ;
67895: GO 67987
// vehicle := IsInUnit ( driver ) ;
67897: LD_ADDR_VAR 0 3
67901: PUSH
67902: LD_VAR 0 1
67906: PPUSH
67907: CALL_OW 310
67911: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67912: LD_VAR 0 1
67916: PPUSH
67917: LD_STRING \
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: LD_INT 0
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: PUSH
67947: LD_STRING E
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 0
67955: PUSH
67956: LD_VAR 0 3
67960: PUSH
67961: LD_INT 0
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PPUSH
67983: CALL_OW 446
// end ;
67987: LD_VAR 0 2
67991: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67992: LD_INT 0
67994: PPUSH
67995: PPUSH
// if not driver or not IsInUnit ( driver ) then
67996: LD_VAR 0 1
68000: NOT
68001: PUSH
68002: LD_VAR 0 1
68006: PPUSH
68007: CALL_OW 310
68011: NOT
68012: OR
68013: IFFALSE 68017
// exit ;
68015: GO 68107
// vehicle := IsInUnit ( driver ) ;
68017: LD_ADDR_VAR 0 3
68021: PUSH
68022: LD_VAR 0 1
68026: PPUSH
68027: CALL_OW 310
68031: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68032: LD_VAR 0 1
68036: PPUSH
68037: LD_STRING \
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: PUSH
68067: LD_STRING E
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_VAR 0 3
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PPUSH
68103: CALL_OW 447
// end ;
68107: LD_VAR 0 2
68111: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68112: LD_INT 0
68114: PPUSH
68115: PPUSH
68116: PPUSH
// tmp := [ ] ;
68117: LD_ADDR_VAR 0 5
68121: PUSH
68122: EMPTY
68123: ST_TO_ADDR
// for i in units do
68124: LD_ADDR_VAR 0 4
68128: PUSH
68129: LD_VAR 0 1
68133: PUSH
68134: FOR_IN
68135: IFFALSE 68173
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68137: LD_ADDR_VAR 0 5
68141: PUSH
68142: LD_VAR 0 5
68146: PPUSH
68147: LD_VAR 0 5
68151: PUSH
68152: LD_INT 1
68154: PLUS
68155: PPUSH
68156: LD_VAR 0 4
68160: PPUSH
68161: CALL_OW 256
68165: PPUSH
68166: CALL_OW 2
68170: ST_TO_ADDR
68171: GO 68134
68173: POP
68174: POP
// if not tmp then
68175: LD_VAR 0 5
68179: NOT
68180: IFFALSE 68184
// exit ;
68182: GO 68232
// if asc then
68184: LD_VAR 0 2
68188: IFFALSE 68212
// result := SortListByListAsc ( units , tmp ) else
68190: LD_ADDR_VAR 0 3
68194: PUSH
68195: LD_VAR 0 1
68199: PPUSH
68200: LD_VAR 0 5
68204: PPUSH
68205: CALL_OW 76
68209: ST_TO_ADDR
68210: GO 68232
// result := SortListByListDesc ( units , tmp ) ;
68212: LD_ADDR_VAR 0 3
68216: PUSH
68217: LD_VAR 0 1
68221: PPUSH
68222: LD_VAR 0 5
68226: PPUSH
68227: CALL_OW 77
68231: ST_TO_ADDR
// end ;
68232: LD_VAR 0 3
68236: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68237: LD_INT 0
68239: PPUSH
68240: PPUSH
// task := GetTaskList ( mech ) ;
68241: LD_ADDR_VAR 0 4
68245: PUSH
68246: LD_VAR 0 1
68250: PPUSH
68251: CALL_OW 437
68255: ST_TO_ADDR
// if not task then
68256: LD_VAR 0 4
68260: NOT
68261: IFFALSE 68265
// exit ;
68263: GO 68307
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68265: LD_ADDR_VAR 0 3
68269: PUSH
68270: LD_VAR 0 4
68274: PUSH
68275: LD_INT 1
68277: ARRAY
68278: PUSH
68279: LD_INT 1
68281: ARRAY
68282: PUSH
68283: LD_STRING r
68285: EQUAL
68286: PUSH
68287: LD_VAR 0 4
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PUSH
68296: LD_INT 4
68298: ARRAY
68299: PUSH
68300: LD_VAR 0 2
68304: EQUAL
68305: AND
68306: ST_TO_ADDR
// end ;
68307: LD_VAR 0 3
68311: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68312: LD_INT 0
68314: PPUSH
// SetDir ( unit , d ) ;
68315: LD_VAR 0 1
68319: PPUSH
68320: LD_VAR 0 4
68324: PPUSH
68325: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68329: LD_VAR 0 1
68333: PPUSH
68334: LD_VAR 0 2
68338: PPUSH
68339: LD_VAR 0 3
68343: PPUSH
68344: LD_VAR 0 5
68348: PPUSH
68349: CALL_OW 48
// end ;
68353: LD_VAR 0 6
68357: RET
// export function ToNaturalNumber ( number ) ; begin
68358: LD_INT 0
68360: PPUSH
// result := number div 1 ;
68361: LD_ADDR_VAR 0 2
68365: PUSH
68366: LD_VAR 0 1
68370: PUSH
68371: LD_INT 1
68373: DIV
68374: ST_TO_ADDR
// if number < 0 then
68375: LD_VAR 0 1
68379: PUSH
68380: LD_INT 0
68382: LESS
68383: IFFALSE 68393
// result := 0 ;
68385: LD_ADDR_VAR 0 2
68389: PUSH
68390: LD_INT 0
68392: ST_TO_ADDR
// end ;
68393: LD_VAR 0 2
68397: RET
// export function SortByClass ( units , class ) ; var un ; begin
68398: LD_INT 0
68400: PPUSH
68401: PPUSH
// if not units or not class then
68402: LD_VAR 0 1
68406: NOT
68407: PUSH
68408: LD_VAR 0 2
68412: NOT
68413: OR
68414: IFFALSE 68418
// exit ;
68416: GO 68513
// result := [ ] ;
68418: LD_ADDR_VAR 0 3
68422: PUSH
68423: EMPTY
68424: ST_TO_ADDR
// for un in units do
68425: LD_ADDR_VAR 0 4
68429: PUSH
68430: LD_VAR 0 1
68434: PUSH
68435: FOR_IN
68436: IFFALSE 68511
// if GetClass ( un ) = class then
68438: LD_VAR 0 4
68442: PPUSH
68443: CALL_OW 257
68447: PUSH
68448: LD_VAR 0 2
68452: EQUAL
68453: IFFALSE 68480
// result := Insert ( result , 1 , un ) else
68455: LD_ADDR_VAR 0 3
68459: PUSH
68460: LD_VAR 0 3
68464: PPUSH
68465: LD_INT 1
68467: PPUSH
68468: LD_VAR 0 4
68472: PPUSH
68473: CALL_OW 2
68477: ST_TO_ADDR
68478: GO 68509
// result := Replace ( result , result + 1 , un ) ;
68480: LD_ADDR_VAR 0 3
68484: PUSH
68485: LD_VAR 0 3
68489: PPUSH
68490: LD_VAR 0 3
68494: PUSH
68495: LD_INT 1
68497: PLUS
68498: PPUSH
68499: LD_VAR 0 4
68503: PPUSH
68504: CALL_OW 1
68508: ST_TO_ADDR
68509: GO 68435
68511: POP
68512: POP
// end ;
68513: LD_VAR 0 3
68517: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68518: LD_INT 0
68520: PPUSH
68521: PPUSH
68522: PPUSH
68523: PPUSH
68524: PPUSH
68525: PPUSH
68526: PPUSH
// result := [ ] ;
68527: LD_ADDR_VAR 0 4
68531: PUSH
68532: EMPTY
68533: ST_TO_ADDR
// if x - r < 0 then
68534: LD_VAR 0 1
68538: PUSH
68539: LD_VAR 0 3
68543: MINUS
68544: PUSH
68545: LD_INT 0
68547: LESS
68548: IFFALSE 68560
// min_x := 0 else
68550: LD_ADDR_VAR 0 8
68554: PUSH
68555: LD_INT 0
68557: ST_TO_ADDR
68558: GO 68576
// min_x := x - r ;
68560: LD_ADDR_VAR 0 8
68564: PUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_VAR 0 3
68574: MINUS
68575: ST_TO_ADDR
// if y - r < 0 then
68576: LD_VAR 0 2
68580: PUSH
68581: LD_VAR 0 3
68585: MINUS
68586: PUSH
68587: LD_INT 0
68589: LESS
68590: IFFALSE 68602
// min_y := 0 else
68592: LD_ADDR_VAR 0 7
68596: PUSH
68597: LD_INT 0
68599: ST_TO_ADDR
68600: GO 68618
// min_y := y - r ;
68602: LD_ADDR_VAR 0 7
68606: PUSH
68607: LD_VAR 0 2
68611: PUSH
68612: LD_VAR 0 3
68616: MINUS
68617: ST_TO_ADDR
// max_x := x + r ;
68618: LD_ADDR_VAR 0 9
68622: PUSH
68623: LD_VAR 0 1
68627: PUSH
68628: LD_VAR 0 3
68632: PLUS
68633: ST_TO_ADDR
// max_y := y + r ;
68634: LD_ADDR_VAR 0 10
68638: PUSH
68639: LD_VAR 0 2
68643: PUSH
68644: LD_VAR 0 3
68648: PLUS
68649: ST_TO_ADDR
// for _x = min_x to max_x do
68650: LD_ADDR_VAR 0 5
68654: PUSH
68655: DOUBLE
68656: LD_VAR 0 8
68660: DEC
68661: ST_TO_ADDR
68662: LD_VAR 0 9
68666: PUSH
68667: FOR_TO
68668: IFFALSE 68769
// for _y = min_y to max_y do
68670: LD_ADDR_VAR 0 6
68674: PUSH
68675: DOUBLE
68676: LD_VAR 0 7
68680: DEC
68681: ST_TO_ADDR
68682: LD_VAR 0 10
68686: PUSH
68687: FOR_TO
68688: IFFALSE 68765
// begin if not ValidHex ( _x , _y ) then
68690: LD_VAR 0 5
68694: PPUSH
68695: LD_VAR 0 6
68699: PPUSH
68700: CALL_OW 488
68704: NOT
68705: IFFALSE 68709
// continue ;
68707: GO 68687
// if GetResourceTypeXY ( _x , _y ) then
68709: LD_VAR 0 5
68713: PPUSH
68714: LD_VAR 0 6
68718: PPUSH
68719: CALL_OW 283
68723: IFFALSE 68763
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68725: LD_ADDR_VAR 0 4
68729: PUSH
68730: LD_VAR 0 4
68734: PPUSH
68735: LD_VAR 0 4
68739: PUSH
68740: LD_INT 1
68742: PLUS
68743: PPUSH
68744: LD_VAR 0 5
68748: PUSH
68749: LD_VAR 0 6
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PPUSH
68758: CALL_OW 1
68762: ST_TO_ADDR
// end ;
68763: GO 68687
68765: POP
68766: POP
68767: GO 68667
68769: POP
68770: POP
// end ;
68771: LD_VAR 0 4
68775: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68776: LD_INT 0
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
68782: PPUSH
68783: PPUSH
68784: PPUSH
68785: PPUSH
// if not units then
68786: LD_VAR 0 1
68790: NOT
68791: IFFALSE 68795
// exit ;
68793: GO 69319
// result := UnitFilter ( units , [ f_ok ] ) ;
68795: LD_ADDR_VAR 0 3
68799: PUSH
68800: LD_VAR 0 1
68804: PPUSH
68805: LD_INT 50
68807: PUSH
68808: EMPTY
68809: LIST
68810: PPUSH
68811: CALL_OW 72
68815: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68816: LD_ADDR_VAR 0 8
68820: PUSH
68821: LD_VAR 0 1
68825: PUSH
68826: LD_INT 1
68828: ARRAY
68829: PPUSH
68830: CALL_OW 255
68834: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68835: LD_ADDR_VAR 0 10
68839: PUSH
68840: LD_INT 29
68842: PUSH
68843: LD_INT 91
68845: PUSH
68846: LD_INT 49
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: LIST
68853: ST_TO_ADDR
// if not result then
68854: LD_VAR 0 3
68858: NOT
68859: IFFALSE 68863
// exit ;
68861: GO 69319
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68863: LD_ADDR_VAR 0 5
68867: PUSH
68868: LD_INT 81
68870: PUSH
68871: LD_VAR 0 8
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PPUSH
68880: CALL_OW 69
68884: ST_TO_ADDR
// for i in result do
68885: LD_ADDR_VAR 0 4
68889: PUSH
68890: LD_VAR 0 3
68894: PUSH
68895: FOR_IN
68896: IFFALSE 69317
// begin tag := GetTag ( i ) + 1 ;
68898: LD_ADDR_VAR 0 9
68902: PUSH
68903: LD_VAR 0 4
68907: PPUSH
68908: CALL_OW 110
68912: PUSH
68913: LD_INT 1
68915: PLUS
68916: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68917: LD_ADDR_VAR 0 7
68921: PUSH
68922: LD_VAR 0 4
68926: PPUSH
68927: CALL_OW 250
68931: PPUSH
68932: LD_VAR 0 4
68936: PPUSH
68937: CALL_OW 251
68941: PPUSH
68942: LD_INT 6
68944: PPUSH
68945: CALL 68518 0 3
68949: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68950: LD_VAR 0 4
68954: PPUSH
68955: CALL_OW 247
68959: PUSH
68960: LD_INT 2
68962: EQUAL
68963: PUSH
68964: LD_VAR 0 7
68968: AND
68969: PUSH
68970: LD_VAR 0 4
68974: PPUSH
68975: CALL_OW 264
68979: PUSH
68980: LD_VAR 0 10
68984: IN
68985: NOT
68986: AND
68987: IFFALSE 69026
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68989: LD_VAR 0 4
68993: PPUSH
68994: LD_VAR 0 7
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PUSH
69003: LD_INT 1
69005: ARRAY
69006: PPUSH
69007: LD_VAR 0 7
69011: PUSH
69012: LD_INT 1
69014: ARRAY
69015: PUSH
69016: LD_INT 2
69018: ARRAY
69019: PPUSH
69020: CALL_OW 116
69024: GO 69315
// if path > tag then
69026: LD_VAR 0 2
69030: PUSH
69031: LD_VAR 0 9
69035: GREATER
69036: IFFALSE 69244
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69038: LD_ADDR_VAR 0 6
69042: PUSH
69043: LD_VAR 0 5
69047: PPUSH
69048: LD_INT 91
69050: PUSH
69051: LD_VAR 0 4
69055: PUSH
69056: LD_INT 8
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: PPUSH
69064: CALL_OW 72
69068: ST_TO_ADDR
// if nearEnemy then
69069: LD_VAR 0 6
69073: IFFALSE 69142
// begin if GetWeapon ( i ) = ru_time_lapser then
69075: LD_VAR 0 4
69079: PPUSH
69080: CALL_OW 264
69084: PUSH
69085: LD_INT 49
69087: EQUAL
69088: IFFALSE 69116
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69090: LD_VAR 0 4
69094: PPUSH
69095: LD_VAR 0 6
69099: PPUSH
69100: LD_VAR 0 4
69104: PPUSH
69105: CALL_OW 74
69109: PPUSH
69110: CALL_OW 112
69114: GO 69140
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69116: LD_VAR 0 4
69120: PPUSH
69121: LD_VAR 0 6
69125: PPUSH
69126: LD_VAR 0 4
69130: PPUSH
69131: CALL_OW 74
69135: PPUSH
69136: CALL_OW 115
// end else
69140: GO 69242
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69142: LD_VAR 0 4
69146: PPUSH
69147: LD_VAR 0 2
69151: PUSH
69152: LD_VAR 0 9
69156: ARRAY
69157: PUSH
69158: LD_INT 1
69160: ARRAY
69161: PPUSH
69162: LD_VAR 0 2
69166: PUSH
69167: LD_VAR 0 9
69171: ARRAY
69172: PUSH
69173: LD_INT 2
69175: ARRAY
69176: PPUSH
69177: CALL_OW 297
69181: PUSH
69182: LD_INT 6
69184: GREATER
69185: IFFALSE 69228
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69187: LD_VAR 0 4
69191: PPUSH
69192: LD_VAR 0 2
69196: PUSH
69197: LD_VAR 0 9
69201: ARRAY
69202: PUSH
69203: LD_INT 1
69205: ARRAY
69206: PPUSH
69207: LD_VAR 0 2
69211: PUSH
69212: LD_VAR 0 9
69216: ARRAY
69217: PUSH
69218: LD_INT 2
69220: ARRAY
69221: PPUSH
69222: CALL_OW 114
69226: GO 69242
// SetTag ( i , tag ) ;
69228: LD_VAR 0 4
69232: PPUSH
69233: LD_VAR 0 9
69237: PPUSH
69238: CALL_OW 109
// end else
69242: GO 69315
// if enemy then
69244: LD_VAR 0 5
69248: IFFALSE 69315
// begin if GetWeapon ( i ) = ru_time_lapser then
69250: LD_VAR 0 4
69254: PPUSH
69255: CALL_OW 264
69259: PUSH
69260: LD_INT 49
69262: EQUAL
69263: IFFALSE 69291
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69265: LD_VAR 0 4
69269: PPUSH
69270: LD_VAR 0 5
69274: PPUSH
69275: LD_VAR 0 4
69279: PPUSH
69280: CALL_OW 74
69284: PPUSH
69285: CALL_OW 112
69289: GO 69315
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69291: LD_VAR 0 4
69295: PPUSH
69296: LD_VAR 0 5
69300: PPUSH
69301: LD_VAR 0 4
69305: PPUSH
69306: CALL_OW 74
69310: PPUSH
69311: CALL_OW 115
// end ; end ;
69315: GO 68895
69317: POP
69318: POP
// end ;
69319: LD_VAR 0 3
69323: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69324: LD_INT 0
69326: PPUSH
69327: PPUSH
69328: PPUSH
// if not unit or IsInUnit ( unit ) then
69329: LD_VAR 0 1
69333: NOT
69334: PUSH
69335: LD_VAR 0 1
69339: PPUSH
69340: CALL_OW 310
69344: OR
69345: IFFALSE 69349
// exit ;
69347: GO 69440
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69349: LD_ADDR_VAR 0 4
69353: PUSH
69354: LD_VAR 0 1
69358: PPUSH
69359: CALL_OW 250
69363: PPUSH
69364: LD_VAR 0 2
69368: PPUSH
69369: LD_INT 1
69371: PPUSH
69372: CALL_OW 272
69376: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69377: LD_ADDR_VAR 0 5
69381: PUSH
69382: LD_VAR 0 1
69386: PPUSH
69387: CALL_OW 251
69391: PPUSH
69392: LD_VAR 0 2
69396: PPUSH
69397: LD_INT 1
69399: PPUSH
69400: CALL_OW 273
69404: ST_TO_ADDR
// if ValidHex ( x , y ) then
69405: LD_VAR 0 4
69409: PPUSH
69410: LD_VAR 0 5
69414: PPUSH
69415: CALL_OW 488
69419: IFFALSE 69440
// ComTurnXY ( unit , x , y ) ;
69421: LD_VAR 0 1
69425: PPUSH
69426: LD_VAR 0 4
69430: PPUSH
69431: LD_VAR 0 5
69435: PPUSH
69436: CALL_OW 118
// end ;
69440: LD_VAR 0 3
69444: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69445: LD_INT 0
69447: PPUSH
69448: PPUSH
// result := false ;
69449: LD_ADDR_VAR 0 3
69453: PUSH
69454: LD_INT 0
69456: ST_TO_ADDR
// if not units then
69457: LD_VAR 0 2
69461: NOT
69462: IFFALSE 69466
// exit ;
69464: GO 69511
// for i in units do
69466: LD_ADDR_VAR 0 4
69470: PUSH
69471: LD_VAR 0 2
69475: PUSH
69476: FOR_IN
69477: IFFALSE 69509
// if See ( side , i ) then
69479: LD_VAR 0 1
69483: PPUSH
69484: LD_VAR 0 4
69488: PPUSH
69489: CALL_OW 292
69493: IFFALSE 69507
// begin result := true ;
69495: LD_ADDR_VAR 0 3
69499: PUSH
69500: LD_INT 1
69502: ST_TO_ADDR
// exit ;
69503: POP
69504: POP
69505: GO 69511
// end ;
69507: GO 69476
69509: POP
69510: POP
// end ;
69511: LD_VAR 0 3
69515: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69516: LD_INT 0
69518: PPUSH
69519: PPUSH
69520: PPUSH
69521: PPUSH
// if not unit or not points then
69522: LD_VAR 0 1
69526: NOT
69527: PUSH
69528: LD_VAR 0 2
69532: NOT
69533: OR
69534: IFFALSE 69538
// exit ;
69536: GO 69628
// dist := 99999 ;
69538: LD_ADDR_VAR 0 5
69542: PUSH
69543: LD_INT 99999
69545: ST_TO_ADDR
// for i in points do
69546: LD_ADDR_VAR 0 4
69550: PUSH
69551: LD_VAR 0 2
69555: PUSH
69556: FOR_IN
69557: IFFALSE 69626
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69559: LD_ADDR_VAR 0 6
69563: PUSH
69564: LD_VAR 0 1
69568: PPUSH
69569: LD_VAR 0 4
69573: PUSH
69574: LD_INT 1
69576: ARRAY
69577: PPUSH
69578: LD_VAR 0 4
69582: PUSH
69583: LD_INT 2
69585: ARRAY
69586: PPUSH
69587: CALL_OW 297
69591: ST_TO_ADDR
// if tmpDist < dist then
69592: LD_VAR 0 6
69596: PUSH
69597: LD_VAR 0 5
69601: LESS
69602: IFFALSE 69624
// begin result := i ;
69604: LD_ADDR_VAR 0 3
69608: PUSH
69609: LD_VAR 0 4
69613: ST_TO_ADDR
// dist := tmpDist ;
69614: LD_ADDR_VAR 0 5
69618: PUSH
69619: LD_VAR 0 6
69623: ST_TO_ADDR
// end ; end ;
69624: GO 69556
69626: POP
69627: POP
// end ;
69628: LD_VAR 0 3
69632: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69633: LD_INT 0
69635: PPUSH
// uc_side := side ;
69636: LD_ADDR_OWVAR 20
69640: PUSH
69641: LD_VAR 0 1
69645: ST_TO_ADDR
// uc_nation := 3 ;
69646: LD_ADDR_OWVAR 21
69650: PUSH
69651: LD_INT 3
69653: ST_TO_ADDR
// vc_chassis := 25 ;
69654: LD_ADDR_OWVAR 37
69658: PUSH
69659: LD_INT 25
69661: ST_TO_ADDR
// vc_engine := engine_siberite ;
69662: LD_ADDR_OWVAR 39
69666: PUSH
69667: LD_INT 3
69669: ST_TO_ADDR
// vc_control := control_computer ;
69670: LD_ADDR_OWVAR 38
69674: PUSH
69675: LD_INT 3
69677: ST_TO_ADDR
// vc_weapon := 59 ;
69678: LD_ADDR_OWVAR 40
69682: PUSH
69683: LD_INT 59
69685: ST_TO_ADDR
// result := CreateVehicle ;
69686: LD_ADDR_VAR 0 5
69690: PUSH
69691: CALL_OW 45
69695: ST_TO_ADDR
// SetDir ( result , d ) ;
69696: LD_VAR 0 5
69700: PPUSH
69701: LD_VAR 0 4
69705: PPUSH
69706: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69710: LD_VAR 0 5
69714: PPUSH
69715: LD_VAR 0 2
69719: PPUSH
69720: LD_VAR 0 3
69724: PPUSH
69725: LD_INT 0
69727: PPUSH
69728: CALL_OW 48
// end ;
69732: LD_VAR 0 5
69736: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69737: LD_INT 0
69739: PPUSH
69740: PPUSH
69741: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69742: LD_ADDR_VAR 0 2
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69765: LD_VAR 0 1
69769: NOT
69770: PUSH
69771: LD_VAR 0 1
69775: PPUSH
69776: CALL_OW 264
69780: PUSH
69781: LD_INT 12
69783: PUSH
69784: LD_INT 51
69786: PUSH
69787: LD_INT 32
69789: PUSH
69790: LD_INT 89
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: IN
69799: NOT
69800: OR
69801: IFFALSE 69805
// exit ;
69803: GO 69903
// for i := 1 to 3 do
69805: LD_ADDR_VAR 0 3
69809: PUSH
69810: DOUBLE
69811: LD_INT 1
69813: DEC
69814: ST_TO_ADDR
69815: LD_INT 3
69817: PUSH
69818: FOR_TO
69819: IFFALSE 69901
// begin tmp := GetCargo ( cargo , i ) ;
69821: LD_ADDR_VAR 0 4
69825: PUSH
69826: LD_VAR 0 1
69830: PPUSH
69831: LD_VAR 0 3
69835: PPUSH
69836: CALL_OW 289
69840: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69841: LD_ADDR_VAR 0 2
69845: PUSH
69846: LD_VAR 0 2
69850: PPUSH
69851: LD_VAR 0 3
69855: PPUSH
69856: LD_VAR 0 4
69860: PPUSH
69861: CALL_OW 1
69865: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69866: LD_ADDR_VAR 0 2
69870: PUSH
69871: LD_VAR 0 2
69875: PPUSH
69876: LD_INT 4
69878: PPUSH
69879: LD_VAR 0 2
69883: PUSH
69884: LD_INT 4
69886: ARRAY
69887: PUSH
69888: LD_VAR 0 4
69892: PLUS
69893: PPUSH
69894: CALL_OW 1
69898: ST_TO_ADDR
// end ;
69899: GO 69818
69901: POP
69902: POP
// end ;
69903: LD_VAR 0 2
69907: RET
// export function Length ( array ) ; begin
69908: LD_INT 0
69910: PPUSH
// result := array + 0 ;
69911: LD_ADDR_VAR 0 2
69915: PUSH
69916: LD_VAR 0 1
69920: PUSH
69921: LD_INT 0
69923: PLUS
69924: ST_TO_ADDR
// end ;
69925: LD_VAR 0 2
69929: RET
// export function PrepareArray ( array ) ; begin
69930: LD_INT 0
69932: PPUSH
// result := array diff 0 ;
69933: LD_ADDR_VAR 0 2
69937: PUSH
69938: LD_VAR 0 1
69942: PUSH
69943: LD_INT 0
69945: DIFF
69946: ST_TO_ADDR
// if not result [ 1 ] then
69947: LD_VAR 0 2
69951: PUSH
69952: LD_INT 1
69954: ARRAY
69955: NOT
69956: IFFALSE 69976
// result := Delete ( result , 1 ) ;
69958: LD_ADDR_VAR 0 2
69962: PUSH
69963: LD_VAR 0 2
69967: PPUSH
69968: LD_INT 1
69970: PPUSH
69971: CALL_OW 3
69975: ST_TO_ADDR
// end ;
69976: LD_VAR 0 2
69980: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69981: LD_INT 0
69983: PPUSH
69984: PPUSH
69985: PPUSH
69986: PPUSH
// sibRocketRange := 25 ;
69987: LD_ADDR_VAR 0 6
69991: PUSH
69992: LD_INT 25
69994: ST_TO_ADDR
// result := false ;
69995: LD_ADDR_VAR 0 4
69999: PUSH
70000: LD_INT 0
70002: ST_TO_ADDR
// for i := 0 to 5 do
70003: LD_ADDR_VAR 0 5
70007: PUSH
70008: DOUBLE
70009: LD_INT 0
70011: DEC
70012: ST_TO_ADDR
70013: LD_INT 5
70015: PUSH
70016: FOR_TO
70017: IFFALSE 70084
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70019: LD_VAR 0 1
70023: PPUSH
70024: LD_VAR 0 5
70028: PPUSH
70029: LD_VAR 0 6
70033: PPUSH
70034: CALL_OW 272
70038: PPUSH
70039: LD_VAR 0 2
70043: PPUSH
70044: LD_VAR 0 5
70048: PPUSH
70049: LD_VAR 0 6
70053: PPUSH
70054: CALL_OW 273
70058: PPUSH
70059: LD_VAR 0 3
70063: PPUSH
70064: CALL_OW 309
70068: IFFALSE 70082
// begin result := true ;
70070: LD_ADDR_VAR 0 4
70074: PUSH
70075: LD_INT 1
70077: ST_TO_ADDR
// exit ;
70078: POP
70079: POP
70080: GO 70086
// end ;
70082: GO 70016
70084: POP
70085: POP
// end ;
70086: LD_VAR 0 4
70090: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70091: LD_INT 0
70093: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70094: LD_VAR 0 1
70098: PPUSH
70099: LD_VAR 0 2
70103: PPUSH
70104: LD_INT 0
70106: PPUSH
70107: LD_INT 0
70109: PPUSH
70110: LD_INT 1
70112: PPUSH
70113: LD_INT 0
70115: PPUSH
70116: CALL_OW 587
// end ; end_of_file
70120: LD_VAR 0 3
70124: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70125: LD_VAR 0 1
70129: PUSH
70130: LD_INT 200
70132: DOUBLE
70133: GREATEREQUAL
70134: IFFALSE 70142
70136: LD_INT 299
70138: DOUBLE
70139: LESSEQUAL
70140: IFTRUE 70144
70142: GO 70176
70144: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70145: LD_VAR 0 1
70149: PPUSH
70150: LD_VAR 0 2
70154: PPUSH
70155: LD_VAR 0 3
70159: PPUSH
70160: LD_VAR 0 4
70164: PPUSH
70165: LD_VAR 0 5
70169: PPUSH
70170: CALL 24791 0 5
70174: GO 70253
70176: LD_INT 300
70178: DOUBLE
70179: GREATEREQUAL
70180: IFFALSE 70188
70182: LD_INT 399
70184: DOUBLE
70185: LESSEQUAL
70186: IFTRUE 70190
70188: GO 70252
70190: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70191: LD_VAR 0 1
70195: PPUSH
70196: LD_VAR 0 2
70200: PPUSH
70201: LD_VAR 0 3
70205: PPUSH
70206: LD_VAR 0 4
70210: PPUSH
70211: LD_VAR 0 5
70215: PPUSH
70216: LD_VAR 0 6
70220: PPUSH
70221: LD_VAR 0 7
70225: PPUSH
70226: LD_VAR 0 8
70230: PPUSH
70231: LD_VAR 0 9
70235: PPUSH
70236: LD_VAR 0 10
70240: PPUSH
70241: LD_VAR 0 11
70245: PPUSH
70246: CALL 21124 0 11
70250: GO 70253
70252: POP
// end ;
70253: PPOPN 11
70255: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70256: LD_VAR 0 1
70260: PPUSH
70261: LD_VAR 0 2
70265: PPUSH
70266: LD_VAR 0 3
70270: PPUSH
70271: LD_VAR 0 4
70275: PPUSH
70276: LD_VAR 0 5
70280: PPUSH
70281: CALL 24527 0 5
// end ; end_of_file
70285: PPOPN 5
70287: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70288: LD_VAR 0 1
70292: PPUSH
70293: LD_VAR 0 2
70297: PPUSH
70298: LD_VAR 0 3
70302: PPUSH
70303: LD_VAR 0 4
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: LD_VAR 0 6
70317: PPUSH
70318: CALL 8744 0 6
// end ;
70322: PPOPN 6
70324: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70325: LD_INT 0
70327: PPUSH
// begin if not units then
70328: LD_VAR 0 1
70332: NOT
70333: IFFALSE 70337
// exit ;
70335: GO 70337
// end ;
70337: PPOPN 7
70339: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70340: CALL 8638 0 0
// end ;
70344: PPOPN 1
70346: END
