// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 113 0 0
// Start_Mission ;
   8: CALL 3409 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// ChangeSideFog ( 8 , 6 ) ;
  24: LD_INT 8
  26: PPUSH
  27: LD_INT 6
  29: PPUSH
  30: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  34: LD_INT 1
  36: PPUSH
  37: LD_INT 1
  39: PPUSH
  40: LD_INT 8
  42: PPUSH
  43: LD_INT 37963
  45: NEG
  46: PPUSH
  47: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  51: LD_INT 1
  53: PPUSH
  54: LD_INT 1
  56: PPUSH
  57: LD_INT 8
  59: PPUSH
  60: CALL_OW 331
// PlaceCamera ;
  64: CALL 3939 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  68: LD_INT 2
  70: PPUSH
  71: LD_INT 4
  73: PPUSH
  74: LD_INT 3
  76: PPUSH
  77: LD_INT 2
  79: PPUSH
  80: LD_INT 1
  82: PPUSH
  83: CALL 7830 0 5
// PrepareComm ;
  87: CALL 8313 0 0
// SetSide ( fort , 6 ) ;
  91: LD_INT 23
  93: PPUSH
  94: LD_INT 6
  96: PPUSH
  97: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 101: LD_INT 23
 103: PPUSH
 104: CALL_OW 87
// end ;
 108: LD_VAR 0 1
 112: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_bio_bomb , us_art ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 113: LD_INT 0
 115: PPUSH
// game_on := false ;
 116: LD_ADDR_EXP 1
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// game_time := 0 0$00 ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// game_option := [ 1 ] ;
 132: LD_ADDR_EXP 4
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: EMPTY
 141: LIST
 142: ST_TO_ADDR
// game_end := false ;
 143: LD_ADDR_EXP 5
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// game_strings := [ ] ;
 151: LD_ADDR_EXP 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// game_time := 0 0$00 ;
 158: LD_ADDR_EXP 3
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// mission_time := 0 0$00 ;
 166: LD_ADDR_EXP 36
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 174: LD_ADDR_EXP 16
 178: PUSH
 179: LD_INT 5
 181: PUSH
 182: LD_INT 7
 184: PUSH
 185: LD_INT 9
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_EXP 2
 197: ARRAY
 198: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: LD_INT 5
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 7
 212: PUSH
 213: LD_INT 8
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: ST_TO_ADDR
// meeting_start := false ;
 222: LD_ADDR_EXP 28
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// meeting_arive := false ;
 230: LD_ADDR_EXP 29
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// meeting_break := false ;
 238: LD_ADDR_EXP 30
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// meeting_end := false ;
 246: LD_ADDR_EXP 31
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 254: LD_ADDR_EXP 32
 258: PUSH
 259: LD_INT 8400
 261: PUSH
 262: LD_INT 7700
 264: PUSH
 265: LD_INT 7000
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: PUSH
 273: LD_EXP 2
 277: ARRAY
 278: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 279: LD_ADDR_EXP 22
 283: PUSH
 284: LD_INT 5
 286: PUSH
 287: LD_INT 6
 289: PUSH
 290: LD_INT 7
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_EXP 2
 302: ARRAY
 303: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 304: LD_ADDR_EXP 24
 308: PUSH
 309: LD_INT 6
 311: PUSH
 312: LD_INT 8
 314: PUSH
 315: LD_INT 9
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: LD_EXP 2
 327: ARRAY
 328: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 329: LD_ADDR_EXP 23
 333: PUSH
 334: LD_INT 7
 336: PUSH
 337: LD_INT 9
 339: PUSH
 340: LD_INT 10
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: LD_EXP 2
 352: ARRAY
 353: ST_TO_ADDR
// u_mine := false ;
 354: LD_ADDR_EXP 13
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// u_fac := false ;
 362: LD_ADDR_EXP 14
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// leopold_in_fort := false ;
 370: LD_ADDR_EXP 8
 374: PUSH
 375: LD_INT 0
 377: ST_TO_ADDR
// samuel_in_fort := false ;
 378: LD_ADDR_EXP 10
 382: PUSH
 383: LD_INT 0
 385: ST_TO_ADDR
// mortars_in_fort := false ;
 386: LD_ADDR_EXP 11
 390: PUSH
 391: LD_INT 0
 393: ST_TO_ADDR
// fort_destroyed := false ;
 394: LD_ADDR_EXP 34
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// hero_died := false ;
 402: LD_ADDR_EXP 35
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// dezert := false ;
 410: LD_ADDR_EXP 39
 414: PUSH
 415: LD_INT 0
 417: ST_TO_ADDR
// arabian_attack := false ;
 418: LD_ADDR_EXP 40
 422: PUSH
 423: LD_INT 0
 425: ST_TO_ADDR
// russian_attack := false ;
 426: LD_ADDR_EXP 41
 430: PUSH
 431: LD_INT 0
 433: ST_TO_ADDR
// american_attack := false ;
 434: LD_ADDR_EXP 42
 438: PUSH
 439: LD_INT 0
 441: ST_TO_ADDR
// american_help := false ;
 442: LD_ADDR_EXP 43
 446: PUSH
 447: LD_INT 0
 449: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 450: LD_ADDR_EXP 38
 454: PUSH
 455: LD_INT 91
 457: PUSH
 458: LD_INT 81
 460: PUSH
 461: LD_INT 71
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_EXP 2
 473: ARRAY
 474: ST_TO_ADDR
// american_sib_bomb := false ;
 475: LD_ADDR_EXP 44
 479: PUSH
 480: LD_INT 0
 482: ST_TO_ADDR
// russian_trade := false ;
 483: LD_ADDR_EXP 45
 487: PUSH
 488: LD_INT 0
 490: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 491: LD_ADDR_EXP 33
 495: PUSH
 496: LD_INT 10500
 498: ST_TO_ADDR
// cargo_ok := false ;
 499: LD_ADDR_EXP 37
 503: PUSH
 504: LD_INT 0
 506: ST_TO_ADDR
// heike_dialog1 := false ;
 507: LD_ADDR_EXP 46
 511: PUSH
 512: LD_INT 0
 514: ST_TO_ADDR
// heike_dialog2 := false ;
 515: LD_ADDR_EXP 47
 519: PUSH
 520: LD_INT 0
 522: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 523: LD_ADDR_EXP 27
 527: PUSH
 528: LD_INT 21000
 530: PUSH
 531: LD_INT 20300
 533: PUSH
 534: LD_INT 19250
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: LD_EXP 2
 546: ARRAY
 547: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$10 , 6 6$20 ] [ game_difficulty ] ;
 548: LD_ADDR_EXP 25
 552: PUSH
 553: LD_INT 16800
 555: PUSH
 556: LD_INT 15050
 558: PUSH
 559: LD_INT 13300
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_EXP 2
 571: ARRAY
 572: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 573: LD_ADDR_EXP 26
 577: PUSH
 578: LD_INT 23100
 580: PUSH
 581: LD_INT 22050
 583: PUSH
 584: LD_INT 19600
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: LD_EXP 2
 596: ARRAY
 597: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 598: LD_ADDR_EXP 17
 602: PUSH
 603: LD_INT 91
 605: ST_TO_ADDR
// us_art := 97 ;
 606: LD_ADDR_EXP 18
 610: PUSH
 611: LD_INT 97
 613: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 614: LD_ADDR_EXP 19
 618: PUSH
 619: LD_INT 28
 621: PUSH
 622: LD_INT 27
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: LD_INT 29
 630: PUSH
 631: LD_EXP 17
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser ] ;
 643: LD_ADDR_EXP 21
 647: PUSH
 648: LD_INT 7
 650: PUSH
 651: LD_INT 6
 653: PUSH
 654: LD_INT 10
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: LIST
 661: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun ] ;
 662: LD_ADDR_EXP 20
 666: PUSH
 667: LD_INT 45
 669: PUSH
 670: LD_INT 47
 672: PUSH
 673: LD_INT 46
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: ST_TO_ADDR
// end ;
 681: LD_VAR 0 1
 685: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 686: LD_EXP 1
 690: IFFALSE 3406
 692: GO 694
 694: DISABLE
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
 700: PPUSH
// begin enable ;
 701: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 702: LD_ADDR_OWVAR 47
 706: PUSH
 707: LD_STRING #tick
 709: PUSH
 710: LD_EXP 3
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: LD_EXP 6
 723: ADD
 724: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 725: LD_ADDR_EXP 3
 729: PUSH
 730: LD_EXP 3
 734: PPUSH
 735: LD_INT 1
 737: PPUSH
 738: CALL 6916 0 2
 742: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 743: LD_EXP 28
 747: PUSH
 748: LD_EXP 32
 752: PUSH
 753: LD_INT 0
 755: GREATER
 756: AND
 757: IFFALSE 794
// begin game_strings := [ #mtime , meeting_time ] ;
 759: LD_ADDR_EXP 6
 763: PUSH
 764: LD_STRING #mtime
 766: PUSH
 767: LD_EXP 32
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 776: LD_ADDR_EXP 32
 780: PUSH
 781: LD_EXP 32
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: CALL 6916 0 2
 793: ST_TO_ADDR
// end ; if meeting_arive then
 794: LD_EXP 29
 798: IFFALSE 818
// mission_time := RefreshTime ( mission_time , true ) ;
 800: LD_ADDR_EXP 36
 804: PUSH
 805: LD_EXP 36
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6916 0 2
 817: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 818: LD_EXP 40
 822: PUSH
 823: LD_EXP 25
 827: PUSH
 828: LD_INT 0
 830: GREATER
 831: AND
 832: PUSH
 833: LD_EXP 29
 837: AND
 838: IFFALSE 858
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 840: LD_ADDR_EXP 25
 844: PUSH
 845: LD_EXP 25
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL 6916 0 2
 857: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 858: LD_EXP 41
 862: PUSH
 863: LD_EXP 26
 867: PUSH
 868: LD_INT 0
 870: GREATER
 871: AND
 872: PUSH
 873: LD_EXP 29
 877: AND
 878: IFFALSE 898
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 880: LD_ADDR_EXP 26
 884: PUSH
 885: LD_EXP 26
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL 6916 0 2
 897: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 898: LD_EXP 42
 902: PUSH
 903: LD_EXP 27
 907: PUSH
 908: LD_INT 0
 910: GREATER
 911: AND
 912: PUSH
 913: LD_EXP 29
 917: AND
 918: IFFALSE 938
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 920: LD_ADDR_EXP 27
 924: PUSH
 925: LD_EXP 27
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL 6916 0 2
 937: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 938: LD_EXP 45
 942: PUSH
 943: LD_EXP 33
 947: PUSH
 948: LD_INT 0
 950: GREATER
 951: AND
 952: IFFALSE 989
// begin game_strings := [ #rtime , russian_timer ] ;
 954: LD_ADDR_EXP 6
 958: PUSH
 959: LD_STRING #rtime
 961: PUSH
 962: LD_EXP 33
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 971: LD_ADDR_EXP 33
 975: PUSH
 976: LD_EXP 33
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL 6916 0 2
 988: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
 989: LD_EXP 45
 993: PUSH
 994: LD_EXP 33
 998: PUSH
 999: LD_INT 0
1001: EQUAL
1002: AND
1003: PUSH
1004: LD_EXP 37
1008: OR
1009: IFFALSE 1018
// game_strings := [ ] ;
1011: LD_ADDR_EXP 6
1015: PUSH
1016: EMPTY
1017: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1018: LD_EXP 39
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: PUSH
1027: LD_OWVAR 1
1031: PUSH
1032: LD_INT 33600
1034: MOD
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1100
// begin p := Rand ( 1 , 5 ) ;
1042: LD_ADDR_VAR 0 2
1046: PUSH
1047: LD_INT 1
1049: PPUSH
1050: LD_INT 5
1052: PPUSH
1053: CALL_OW 12
1057: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 4
1065: PUSH
1066: LD_INT 3
1068: PUSH
1069: LD_INT 3
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_EXP 2
1081: ARRAY
1082: LESSEQUAL
1083: IFFALSE 1100
// begin RaiseSailEvent ( 92 ) ;
1085: LD_INT 92
1087: PPUSH
1088: CALL_OW 427
// dezert := true ;
1092: LD_ADDR_EXP 39
1096: PUSH
1097: LD_INT 1
1099: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1100: LD_OWVAR 1
1104: PUSH
1105: LD_INT 8400
1107: MOD
1108: PUSH
1109: LD_INT 0
1111: EQUAL
1112: IFFALSE 1121
// RaiseSailEvent ( 101 ) ;
1114: LD_INT 101
1116: PPUSH
1117: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1121: LD_INT 8
1123: PPUSH
1124: CALL 6970 0 1
1128: PUSH
1129: LD_EXP 13
1133: PUSH
1134: LD_INT 0
1136: EQUAL
1137: AND
1138: IFFALSE 1155
// begin u_mine := true ;
1140: LD_ADDR_EXP 13
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1148: LD_STRING DS-T1m
1150: PPUSH
1151: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1155: LD_INT 8
1157: PPUSH
1158: CALL 7032 0 1
1162: PUSH
1163: LD_EXP 14
1167: PUSH
1168: LD_INT 0
1170: EQUAL
1171: AND
1172: IFFALSE 1189
// begin u_fac := true ;
1174: LD_ADDR_EXP 14
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1182: LD_STRING DS-T1f
1184: PPUSH
1185: CALL_OW 337
// end ; if hero_died then
1189: LD_EXP 35
1193: IFFALSE 1202
// YouLost ( DS-h1 ) ;
1195: LD_STRING DS-h1
1197: PPUSH
1198: CALL_OW 104
// if fort_destroyed then
1202: LD_EXP 34
1206: IFFALSE 1215
// YouLost ( DS-h2 ) ;
1208: LD_STRING DS-h2
1210: PPUSH
1211: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1215: LD_EXP 7
1219: PPUSH
1220: LD_EXP 51
1224: PPUSH
1225: CALL_OW 296
1229: PUSH
1230: LD_INT 6
1232: GREATER
1233: PUSH
1234: LD_EXP 28
1238: PUSH
1239: LD_INT 0
1241: EQUAL
1242: AND
1243: IFFALSE 1266
// begin if not HasTask ( leopold ) then
1245: LD_EXP 7
1249: PPUSH
1250: CALL_OW 314
1254: NOT
1255: IFFALSE 1264
// RaiseSailEvent ( 1 ) ;
1257: LD_INT 1
1259: PPUSH
1260: CALL_OW 427
// end else
1264: GO 1283
// if meeting_start = false then
1266: LD_EXP 28
1270: PUSH
1271: LD_INT 0
1273: EQUAL
1274: IFFALSE 1283
// begin RaiseSailEvent ( 2 ) ;
1276: LD_INT 2
1278: PPUSH
1279: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1283: LD_EXP 3
1287: PUSH
1288: LD_INT 105000
1290: PUSH
1291: LD_INT 131250
1293: PUSH
1294: LD_INT 157500
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 2
1306: ARRAY
1307: GREATEREQUAL
1308: PUSH
1309: LD_EXP 31
1313: PUSH
1314: LD_INT 0
1316: EQUAL
1317: AND
1318: IFFALSE 1335
// begin meeting_end := true ;
1320: LD_ADDR_EXP 31
1324: PUSH
1325: LD_INT 1
1327: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1328: LD_INT 200
1330: PPUSH
1331: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1335: LD_EXP 32
1339: PUSH
1340: LD_INT 0
1342: EQUAL
1343: PUSH
1344: LD_EXP 29
1348: PUSH
1349: LD_INT 0
1351: EQUAL
1352: AND
1353: IFFALSE 1377
// begin meeting_arive := true ;
1355: LD_ADDR_EXP 29
1359: PUSH
1360: LD_INT 1
1362: ST_TO_ADDR
// game_strings := [ ] ;
1363: LD_ADDR_EXP 6
1367: PUSH
1368: EMPTY
1369: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1370: LD_INT 10
1372: PPUSH
1373: CALL_OW 427
// end ; if meeting_arive then
1377: LD_EXP 29
1381: IFFALSE 2126
// begin if arabian_attack = false and tick mod 4200 = 0 then
1383: LD_EXP 40
1387: PUSH
1388: LD_INT 0
1390: EQUAL
1391: PUSH
1392: LD_OWVAR 1
1396: PUSH
1397: LD_INT 4200
1399: MOD
1400: PUSH
1401: LD_INT 0
1403: EQUAL
1404: AND
1405: IFFALSE 1458
// begin p := Rand ( 1 , 100 ) ;
1407: LD_ADDR_VAR 0 2
1411: PUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 100
1417: PPUSH
1418: CALL_OW 12
1422: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 80
1430: PUSH
1431: LD_INT 85
1433: PUSH
1434: LD_INT 90
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: LD_EXP 2
1446: ARRAY
1447: LESSEQUAL
1448: IFFALSE 1458
// arabian_attack := true ;
1450: LD_ADDR_EXP 40
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1458: LD_EXP 45
1462: PUSH
1463: LD_INT 0
1465: EQUAL
1466: PUSH
1467: LD_EXP 41
1471: PUSH
1472: LD_INT 0
1474: EQUAL
1475: AND
1476: PUSH
1477: LD_OWVAR 1
1481: PUSH
1482: LD_INT 52500
1484: GREATER
1485: AND
1486: IFFALSE 1557
// begin russian_trade = true ;
1488: LD_ADDR_EXP 45
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// DialogueOn ;
1496: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1500: LD_EXP 49
1504: PPUSH
1505: LD_STRING DS-DR-RTr
1507: PPUSH
1508: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1512: LD_EXP 51
1516: PPUSH
1517: LD_STRING DS-DC-RTr
1519: PPUSH
1520: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1524: LD_EXP 49
1528: PPUSH
1529: LD_STRING DS-DR-RTr2
1531: PPUSH
1532: CALL_OW 94
// DialogueOff ;
1536: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1540: LD_STRING DS-T2
1542: PPUSH
1543: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1547: LD_INT 10
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1557: LD_EXP 45
1561: PUSH
1562: LD_EXP 37
1566: PUSH
1567: LD_INT 0
1569: EQUAL
1570: AND
1571: PUSH
1572: LD_EXP 33
1576: PUSH
1577: LD_INT 0
1579: GREATER
1580: AND
1581: IFFALSE 1776
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1583: LD_INT 10
1585: PPUSH
1586: LD_INT 58
1588: PUSH
1589: EMPTY
1590: LIST
1591: PUSH
1592: LD_INT 34
1594: PUSH
1595: LD_INT 32
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 3
1604: PUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 2
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 70
1628: PUSH
1629: LD_INT 0
1631: GREATER
1632: IFFALSE 1776
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1634: LD_INT 10
1636: PPUSH
1637: LD_INT 58
1639: PUSH
1640: EMPTY
1641: LIST
1642: PUSH
1643: LD_INT 34
1645: PUSH
1646: LD_INT 32
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: LD_INT 33
1658: PUSH
1659: LD_INT 2
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: PPUSH
1675: CALL_OW 70
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: CALL_OW 289
1691: PUSH
1692: LD_INT 100
1694: EQUAL
1695: IFFALSE 1776
// begin cargo_ok := true ;
1697: LD_ADDR_EXP 37
1701: PUSH
1702: LD_INT 1
1704: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_weapon , ar_cargo_bay ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1705: LD_INT 10
1707: PPUSH
1708: LD_INT 58
1710: PUSH
1711: EMPTY
1712: LIST
1713: PUSH
1714: LD_INT 34
1716: PUSH
1717: LD_INT 32
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 3
1726: PUSH
1727: LD_INT 33
1729: PUSH
1730: LD_INT 2
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: PPUSH
1746: CALL_OW 70
1750: PUSH
1751: LD_INT 1
1753: ARRAY
1754: PPUSH
1755: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1759: LD_STRING DS-T2-out
1761: PPUSH
1762: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1766: LD_INT 10
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1776: LD_EXP 41
1780: PUSH
1781: LD_INT 0
1783: EQUAL
1784: PUSH
1785: LD_EXP 45
1789: AND
1790: PUSH
1791: LD_EXP 37
1795: PUSH
1796: LD_INT 0
1798: EQUAL
1799: AND
1800: PUSH
1801: LD_EXP 33
1805: PUSH
1806: LD_INT 0
1808: EQUAL
1809: AND
1810: IFFALSE 1837
// begin russian_attack := true ;
1812: LD_ADDR_EXP 41
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1820: LD_STRING DS-T2-out
1822: PPUSH
1823: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1827: LD_INT 10
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1837: LD_EXP 45
1841: PUSH
1842: LD_INT 0
1844: EQUAL
1845: PUSH
1846: LD_EXP 41
1850: PUSH
1851: LD_INT 0
1853: EQUAL
1854: AND
1855: PUSH
1856: LD_EXP 42
1860: PUSH
1861: LD_INT 0
1863: EQUAL
1864: AND
1865: PUSH
1866: LD_OWVAR 1
1870: PUSH
1871: LD_INT 21000
1873: MOD
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1932
// begin p := Rand ( 1 , 100 ) ;
1881: LD_ADDR_VAR 0 2
1885: PUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 100
1891: PPUSH
1892: CALL_OW 12
1896: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1897: LD_VAR 0 2
1901: PUSH
1902: LD_INT 25
1904: PUSH
1905: LD_INT 35
1907: PUSH
1908: LD_INT 45
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_EXP 2
1920: ARRAY
1921: LESSEQUAL
1922: IFFALSE 1932
// russian_attack := true ;
1924: LD_ADDR_EXP 41
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1932: LD_EXP 43
1936: PUSH
1937: LD_INT 0
1939: EQUAL
1940: PUSH
1941: LD_EXP 42
1945: PUSH
1946: LD_INT 0
1948: EQUAL
1949: AND
1950: PUSH
1951: LD_EXP 41
1955: PUSH
1956: LD_INT 0
1958: EQUAL
1959: AND
1960: PUSH
1961: LD_OWVAR 1
1965: PUSH
1966: LD_INT 31500
1968: MOD
1969: PUSH
1970: LD_INT 0
1972: EQUAL
1973: AND
1974: IFFALSE 2027
// begin p := Rand ( 1 , 100 ) ;
1976: LD_ADDR_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: PPUSH
1984: LD_INT 100
1986: PPUSH
1987: CALL_OW 12
1991: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
1992: LD_VAR 0 2
1996: PUSH
1997: LD_INT 22
1999: PUSH
2000: LD_INT 33
2002: PUSH
2003: LD_INT 44
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: PUSH
2011: LD_EXP 2
2015: ARRAY
2016: LESSEQUAL
2017: IFFALSE 2027
// american_attack := true ;
2019: LD_ADDR_EXP 42
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2027: LD_EXP 42
2031: PUSH
2032: LD_INT 0
2034: EQUAL
2035: PUSH
2036: LD_EXP 41
2040: PUSH
2041: LD_INT 0
2043: EQUAL
2044: AND
2045: PUSH
2046: LD_EXP 43
2050: PUSH
2051: LD_INT 0
2053: EQUAL
2054: AND
2055: PUSH
2056: LD_OWVAR 1
2060: PUSH
2061: LD_INT 21200
2063: MOD
2064: PUSH
2065: LD_INT 0
2067: EQUAL
2068: AND
2069: IFFALSE 2126
// begin p := Rand ( 1 , 100 ) ;
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_INT 1
2078: PPUSH
2079: LD_INT 100
2081: PPUSH
2082: CALL_OW 12
2086: ST_TO_ADDR
// if p <= american_hchan then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_EXP 38
2096: LESSEQUAL
2097: IFFALSE 2126
// begin american_help := true ;
2099: LD_ADDR_EXP 43
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2107: LD_EXP 48
2111: PPUSH
2112: LD_STRING DS-amhelp
2114: PPUSH
2115: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2119: LD_INT 91
2121: PPUSH
2122: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2126: LD_EXP 42
2130: PUSH
2131: LD_EXP 27
2135: PUSH
2136: LD_INT 0
2138: EQUAL
2139: AND
2140: PUSH
2141: LD_INT 22
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PPUSH
2151: CALL_OW 69
2155: PUSH
2156: LD_INT 0
2158: EQUAL
2159: AND
2160: IFFALSE 2262
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2162: LD_ADDR_EXP 27
2166: PUSH
2167: LD_INT 35700
2169: PPUSH
2170: LD_INT 42000
2172: PPUSH
2173: CALL_OW 12
2177: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2178: LD_EXP 12
2182: PPUSH
2183: LD_STRING DS-DZ-U
2185: PPUSH
2186: CALL_OW 94
// Wait ( 0 0$33 ) ;
2190: LD_INT 1155
2192: PPUSH
2193: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: LD_INT 1
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: CALL_OW 12
2212: ST_TO_ADDR
// case x of 1 :
2213: LD_VAR 0 3
2217: PUSH
2218: LD_INT 1
2220: DOUBLE
2221: EQUAL
2222: IFTRUE 2226
2224: GO 2236
2226: POP
// RaiseSailEvent ( 41 ) ; 2 :
2227: LD_INT 41
2229: PPUSH
2230: CALL_OW 427
2234: GO 2255
2236: LD_INT 2
2238: DOUBLE
2239: EQUAL
2240: IFTRUE 2244
2242: GO 2254
2244: POP
// RaiseSailEvent ( 42 ) ; end ;
2245: LD_INT 42
2247: PPUSH
2248: CALL_OW 427
2252: GO 2255
2254: POP
// RaiseSailEvent ( 42 ) ;
2255: LD_INT 42
2257: PPUSH
2258: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2262: LD_EXP 41
2266: PUSH
2267: LD_EXP 26
2271: PUSH
2272: LD_INT 0
2274: EQUAL
2275: AND
2276: PUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 3
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: CALL_OW 69
2291: PUSH
2292: LD_INT 0
2294: EQUAL
2295: AND
2296: IFFALSE 2352
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2298: LD_ADDR_EXP 26
2302: PUSH
2303: LD_INT 35700
2305: PPUSH
2306: LD_INT 42000
2308: PPUSH
2309: CALL_OW 12
2313: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2314: LD_EXP 12
2318: PPUSH
2319: LD_STRING DS-DZ-R
2321: PPUSH
2322: CALL_OW 94
// Wait ( 0 0$45 ) ;
2326: LD_INT 1575
2328: PPUSH
2329: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2333: LD_EXP 49
2337: PPUSH
2338: LD_STRING DS-DR-R1
2340: PPUSH
2341: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2345: LD_INT 51
2347: PPUSH
2348: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2352: LD_EXP 36
2356: PUSH
2357: LD_INT 21000
2359: GREATEREQUAL
2360: PUSH
2361: LD_EXP 22
2365: PUSH
2366: LD_INT 10
2368: LESS
2369: AND
2370: IFFALSE 2394
// begin mission_time := 0 0$00 ;
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_INT 0
2379: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2380: LD_ADDR_EXP 22
2384: PUSH
2385: LD_EXP 22
2389: PUSH
2390: LD_INT 1
2392: PLUS
2393: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2394: LD_EXP 25
2398: PUSH
2399: LD_INT 0
2401: EQUAL
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: LD_INT 34
2418: PUSH
2419: LD_INT 31
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: LD_INT 0
2441: EQUAL
2442: AND
2443: IFFALSE 2641
// begin arabian_timeing := 7 7$30 ;
2445: LD_ADDR_EXP 25
2449: PUSH
2450: LD_INT 15750
2452: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 3
2463: PPUSH
2464: CALL_OW 12
2468: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2469: LD_EXP 12
2473: PPUSH
2474: LD_STRING DS-DZ-H
2476: PPUSH
2477: CALL_OW 94
// case x of 1 :
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 1
2488: DOUBLE
2489: EQUAL
2490: IFTRUE 2494
2492: GO 2504
2494: POP
// RaiseSailEvent ( 31 ) ; 2 :
2495: LD_INT 31
2497: PPUSH
2498: CALL_OW 427
2502: GO 2541
2504: LD_INT 2
2506: DOUBLE
2507: EQUAL
2508: IFTRUE 2512
2510: GO 2522
2512: POP
// RaiseSailEvent ( 32 ) ; 3 :
2513: LD_INT 32
2515: PPUSH
2516: CALL_OW 427
2520: GO 2541
2522: LD_INT 3
2524: DOUBLE
2525: EQUAL
2526: IFTRUE 2530
2528: GO 2540
2530: POP
// RaiseSailEvent ( 33 ) ; end ;
2531: LD_INT 33
2533: PPUSH
2534: CALL_OW 427
2538: GO 2541
2540: POP
// RaiseSailEvent ( 33 ) ;
2541: LD_INT 33
2543: PPUSH
2544: CALL_OW 427
// if game_difficulty > 1 then
2548: LD_EXP 2
2552: PUSH
2553: LD_INT 1
2555: GREATER
2556: IFFALSE 2565
// RaiseSailEvent ( 33 ) ;
2558: LD_INT 33
2560: PPUSH
2561: CALL_OW 427
// if heike_dialog1 = false then
2565: LD_EXP 46
2569: PUSH
2570: LD_INT 0
2572: EQUAL
2573: IFFALSE 2604
// begin heike_dialog1 := true ;
2575: LD_ADDR_EXP 46
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2583: LD_INT 105
2585: PPUSH
2586: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2590: LD_EXP 50
2594: PPUSH
2595: LD_STRING heike1
2597: PPUSH
2598: CALL_OW 94
// end else
2602: GO 2641
// if heike_dialog2 = false then
2604: LD_EXP 47
2608: PUSH
2609: LD_INT 0
2611: EQUAL
2612: IFFALSE 2641
// begin heike_dialog2 := true ;
2614: LD_ADDR_EXP 47
2618: PUSH
2619: LD_INT 1
2621: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2622: LD_INT 105
2624: PPUSH
2625: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2629: LD_EXP 50
2633: PPUSH
2634: LD_STRING heike2
2636: PPUSH
2637: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2641: LD_INT 22
2643: PUSH
2644: LD_INT 2
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 33
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PPUSH
2665: CALL_OW 69
2669: PUSH
2670: LD_INT 0
2672: GREATER
2673: IFFALSE 2682
// ConnectWithTower ( 2 ) ;
2675: LD_INT 2
2677: PPUSH
2678: CALL 7080 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2682: LD_INT 22
2684: PUSH
2685: LD_INT 2
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 34
2697: PUSH
2698: LD_INT 31
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 60
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: EMPTY
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PUSH
2735: LD_INT 0
2737: GREATER
2738: IFFALSE 2884
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2740: LD_ADDR_VAR 0 4
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 2
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 3
2757: PUSH
2758: LD_INT 34
2760: PUSH
2761: LD_INT 31
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 3
2774: PUSH
2775: LD_INT 60
2777: PUSH
2778: EMPTY
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: PPUSH
2793: CALL_OW 69
2797: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: LD_INT 81
2805: PUSH
2806: LD_INT 2
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PPUSH
2813: CALL_OW 69
2817: PPUSH
2818: LD_INT 20
2820: PPUSH
2821: CALL 8463 0 2
2825: ST_TO_ADDR
// for i = 1 to filter do
2826: LD_ADDR_VAR 0 1
2830: PUSH
2831: DOUBLE
2832: LD_INT 1
2834: DEC
2835: ST_TO_ADDR
2836: LD_VAR 0 4
2840: PUSH
2841: FOR_TO
2842: IFFALSE 2882
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2844: LD_VAR 0 4
2848: PUSH
2849: LD_VAR 0 1
2853: ARRAY
2854: PPUSH
2855: LD_VAR 0 3
2859: PPUSH
2860: LD_VAR 0 4
2864: PUSH
2865: LD_VAR 0 1
2869: ARRAY
2870: PPUSH
2871: CALL_OW 74
2875: PPUSH
2876: CALL_OW 115
2880: GO 2841
2882: POP
2883: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2884: LD_INT 22
2886: PUSH
2887: LD_INT 3
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 3
2896: PUSH
2897: LD_INT 60
2899: PUSH
2900: EMPTY
2901: LIST
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: EMPTY
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: PUSH
2919: LD_INT 0
2921: GREATER
2922: IFFALSE 3068
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_INT 22
2931: PUSH
2932: LD_INT 3
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 34
2944: PUSH
2945: LD_INT 31
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 60
2961: PUSH
2962: EMPTY
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: PPUSH
2977: CALL_OW 69
2981: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
2982: LD_ADDR_VAR 0 3
2986: PUSH
2987: LD_INT 81
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PPUSH
2997: CALL_OW 69
3001: PPUSH
3002: LD_INT 20
3004: PPUSH
3005: CALL 8463 0 2
3009: ST_TO_ADDR
// for i = 1 to filter do
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: DOUBLE
3016: LD_INT 1
3018: DEC
3019: ST_TO_ADDR
3020: LD_VAR 0 4
3024: PUSH
3025: FOR_TO
3026: IFFALSE 3066
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3028: LD_VAR 0 4
3032: PUSH
3033: LD_VAR 0 1
3037: ARRAY
3038: PPUSH
3039: LD_VAR 0 3
3043: PPUSH
3044: LD_VAR 0 4
3048: PUSH
3049: LD_VAR 0 1
3053: ARRAY
3054: PPUSH
3055: CALL_OW 74
3059: PPUSH
3060: CALL_OW 115
3064: GO 3025
3066: POP
3067: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3068: LD_INT 22
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 3
3080: PUSH
3081: LD_INT 60
3083: PUSH
3084: EMPTY
3085: LIST
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: PPUSH
3098: CALL_OW 69
3102: PUSH
3103: LD_INT 0
3105: GREATER
3106: IFFALSE 3252
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: LD_INT 34
3128: PUSH
3129: LD_INT 31
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: LD_INT 60
3145: PUSH
3146: EMPTY
3147: LIST
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: PPUSH
3161: CALL_OW 69
3165: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3166: LD_ADDR_VAR 0 3
3170: PUSH
3171: LD_INT 81
3173: PUSH
3174: LD_INT 1
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PPUSH
3181: CALL_OW 69
3185: PPUSH
3186: LD_INT 20
3188: PPUSH
3189: CALL 8463 0 2
3193: ST_TO_ADDR
// for i = 1 to filter do
3194: LD_ADDR_VAR 0 1
3198: PUSH
3199: DOUBLE
3200: LD_INT 1
3202: DEC
3203: ST_TO_ADDR
3204: LD_VAR 0 4
3208: PUSH
3209: FOR_TO
3210: IFFALSE 3250
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3212: LD_VAR 0 4
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: LD_VAR 0 4
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
3248: GO 3209
3250: POP
3251: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3252: LD_INT 22
3254: PUSH
3255: LD_INT 2
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 34
3264: PUSH
3265: LD_EXP 17
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: LD_INT 24
3279: PUSH
3280: LD_INT 700
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: EMPTY
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: PUSH
3304: LD_INT 0
3306: GREATER
3307: IFFALSE 3406
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3309: LD_ADDR_VAR 0 4
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 34
3326: PUSH
3327: LD_EXP 17
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: LD_INT 24
3341: PUSH
3342: LD_INT 700
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: PPUSH
3361: CALL_OW 69
3365: ST_TO_ADDR
// for i = 1 to filter do
3366: LD_ADDR_VAR 0 1
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_VAR 0 4
3380: PUSH
3381: FOR_TO
3382: IFFALSE 3404
// SetLives ( filter [ i ] , 1 ) ;
3384: LD_VAR 0 4
3388: PUSH
3389: LD_VAR 0 1
3393: ARRAY
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 234
3402: GO 3381
3404: POP
3405: POP
// end ; end ; end_of_file
3406: PPOPN 4
3408: END
// export function Start_Mission ; begin
3409: LD_INT 0
3411: PPUSH
// PrepareLegion ;
3412: CALL 3519 0 0
// PrepareMeeting ;
3416: CALL 4133 0 0
// case Query ( textdiff ) of 1 :
3420: LD_STRING textdiff
3422: PPUSH
3423: CALL_OW 97
3427: PUSH
3428: LD_INT 1
3430: DOUBLE
3431: EQUAL
3432: IFTRUE 3436
3434: GO 3447
3436: POP
// game_difficulty = 1 ; 2 :
3437: LD_ADDR_EXP 2
3441: PUSH
3442: LD_INT 1
3444: ST_TO_ADDR
3445: GO 3486
3447: LD_INT 2
3449: DOUBLE
3450: EQUAL
3451: IFTRUE 3455
3453: GO 3466
3455: POP
// game_difficulty = 2 ; 3 :
3456: LD_ADDR_EXP 2
3460: PUSH
3461: LD_INT 2
3463: ST_TO_ADDR
3464: GO 3486
3466: LD_INT 3
3468: DOUBLE
3469: EQUAL
3470: IFTRUE 3474
3472: GO 3485
3474: POP
// game_difficulty = 3 ; end ;
3475: LD_ADDR_EXP 2
3479: PUSH
3480: LD_INT 3
3482: ST_TO_ADDR
3483: GO 3486
3485: POP
// case Query ( DS-text-beg ) of 1 :
3486: LD_STRING DS-text-beg
3488: PPUSH
3489: CALL_OW 97
3493: PUSH
3494: LD_INT 1
3496: DOUBLE
3497: EQUAL
3498: IFTRUE 3502
3500: GO 3505
3502: POP
// ; end ;
3503: GO 3506
3505: POP
// game_on := true ;
3506: LD_ADDR_EXP 1
3510: PUSH
3511: LD_INT 1
3513: ST_TO_ADDR
// end ;
3514: LD_VAR 0 1
3518: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3519: LD_INT 0
3521: PPUSH
3522: PPUSH
3523: PPUSH
3524: PPUSH
3525: PPUSH
// uc_side := 8 ;
3526: LD_ADDR_OWVAR 20
3530: PUSH
3531: LD_INT 8
3533: ST_TO_ADDR
// uc_nation := 2 ;
3534: LD_ADDR_OWVAR 21
3538: PUSH
3539: LD_INT 2
3541: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3542: LD_ADDR_EXP 52
3546: PUSH
3547: LD_INT 7
3549: PUSH
3550: LD_INT 6
3552: PUSH
3553: LD_INT 5
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3567: LD_ADDR_EXP 53
3571: PUSH
3572: LD_INT 8
3574: PUSH
3575: LD_INT 7
3577: PUSH
3578: LD_INT 6
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: LIST
3585: PUSH
3586: LD_OWVAR 67
3590: ARRAY
3591: ST_TO_ADDR
// filter := [ ] ;
3592: LD_ADDR_VAR 0 4
3596: PUSH
3597: EMPTY
3598: ST_TO_ADDR
// hc_gallery := desert ;
3599: LD_ADDR_OWVAR 33
3603: PUSH
3604: LD_STRING desert
3606: ST_TO_ADDR
// hc_face_number := 1 ;
3607: LD_ADDR_OWVAR 34
3611: PUSH
3612: LD_INT 1
3614: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3615: LD_ADDR_OWVAR 31
3619: PUSH
3620: LD_EXP 52
3624: PUSH
3625: LD_INT 2
3627: PLUS
3628: PUSH
3629: LD_EXP 52
3633: PUSH
3634: LD_INT 1
3636: MINUS
3637: PUSH
3638: LD_EXP 52
3642: PUSH
3643: LD_EXP 52
3647: PUSH
3648: LD_INT 1
3650: PLUS
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: ST_TO_ADDR
// hc_sex := sex_male ;
3658: LD_ADDR_OWVAR 27
3662: PUSH
3663: LD_INT 1
3665: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3666: LD_ADDR_OWVAR 26
3670: PUSH
3671: LD_STRING Henri Ruotz
3673: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3674: LD_ADDR_OWVAR 29
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: ST_TO_ADDR
// hc_class := 1 ;
3689: LD_ADDR_OWVAR 28
3693: PUSH
3694: LD_INT 1
3696: ST_TO_ADDR
// hc_importance := 100 ;
3697: LD_ADDR_OWVAR 32
3701: PUSH
3702: LD_INT 100
3704: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3705: LD_ADDR_EXP 51
3709: PUSH
3710: CALL_OW 44
3714: ST_TO_ADDR
// hc_importance := 0 ;
3715: LD_ADDR_OWVAR 32
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// scout := CreateHumanWithClass ( 1 , 0 ) ;
3723: LD_ADDR_EXP 12
3727: PUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 7264 0 2
3738: ST_TO_ADDR
// for i = 1 to 4 do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 4
3751: PUSH
3752: FOR_TO
3753: IFFALSE 3803
// for p = 1 to 6 do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 6
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3799
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_VAR 0 4
3780: PUSH
3781: LD_VAR 0 2
3785: PPUSH
3786: LD_EXP 52
3790: PPUSH
3791: CALL 7264 0 2
3795: ADD
3796: ST_TO_ADDR
3797: GO 3768
3799: POP
3800: POP
3801: GO 3752
3803: POP
3804: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3805: LD_ADDR_VAR 0 5
3809: PUSH
3810: LD_STRING text
3812: PPUSH
3813: LD_EXP 53
3817: PPUSH
3818: LD_EXP 53
3822: PPUSH
3823: LD_INT -5
3825: PUSH
3826: LD_EXP 51
3830: PUSH
3831: LD_INT -3
3833: PUSH
3834: LD_INT -2
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_VAR 0 4
3847: ADD
3848: PPUSH
3849: LD_INT 1
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 8
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: PPUSH
3871: CALL_OW 42
3875: ST_TO_ADDR
// for i = 1 to l_units do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_EXP 53
3890: PUSH
3891: FOR_TO
3892: IFFALSE 3917
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3894: LD_VAR 0 5
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
3915: GO 3891
3917: POP
3918: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3919: LD_EXP 51
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 49
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PlaceCamera ; begin
3939: LD_INT 0
3941: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3942: LD_INT 46
3944: PPUSH
3945: LD_INT 48
3947: PPUSH
3948: LD_INT 8
3950: PPUSH
3951: LD_INT 10
3953: PPUSH
3954: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3958: LD_INT 58
3960: PPUSH
3961: LD_INT 66
3963: PPUSH
3964: LD_INT 8
3966: PPUSH
3967: LD_INT 10
3969: PPUSH
3970: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3974: LD_INT 82
3976: PPUSH
3977: LD_INT 82
3979: PPUSH
3980: LD_INT 8
3982: PPUSH
3983: LD_INT 10
3985: PPUSH
3986: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3990: LD_INT 107
3992: PPUSH
3993: LD_INT 79
3995: PPUSH
3996: LD_INT 8
3998: PPUSH
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4006: LD_INT 101
4008: PPUSH
4009: LD_INT 57
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 10
4017: PPUSH
4018: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4022: LD_INT 85
4024: PPUSH
4025: LD_INT 32
4027: PPUSH
4028: LD_INT 8
4030: PPUSH
4031: LD_INT 10
4033: PPUSH
4034: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4038: LD_INT 108
4040: PPUSH
4041: LD_INT 72
4043: PPUSH
4044: LD_INT 8
4046: PPUSH
4047: LD_INT 10
4049: PPUSH
4050: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4054: LD_INT 124
4056: PPUSH
4057: LD_INT 74
4059: PPUSH
4060: LD_INT 8
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4070: LD_INT 67
4072: PPUSH
4073: LD_INT 33
4075: PPUSH
4076: LD_INT 8
4078: PPUSH
4079: LD_INT 20
4081: PPUSH
4082: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4086: LD_INT 67
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: LD_INT 8
4094: PPUSH
4095: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4099: LD_INT 94
4101: PPUSH
4102: LD_INT 84
4104: PPUSH
4105: LD_INT 8
4107: PPUSH
4108: LD_INT 20
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4115: LD_INT 94
4117: PPUSH
4118: LD_INT 84
4120: PPUSH
4121: LD_INT 8
4123: PPUSH
4124: CALL_OW 331
// end ;
4128: LD_VAR 0 1
4132: RET
// export function PrepareMeeting ; begin
4133: LD_INT 0
4135: PPUSH
// uc_side := 6 ;
4136: LD_ADDR_OWVAR 20
4140: PUSH
4141: LD_INT 6
4143: ST_TO_ADDR
// hc_gallery := desert ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING desert
4151: ST_TO_ADDR
// hc_face_number := 2 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 2
4159: ST_TO_ADDR
// hc_name := Leopold Drass ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Leopold Drass
4167: ST_TO_ADDR
// hc_class := 1 ;
4168: LD_ADDR_OWVAR 28
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// hc_sex := sex_male ;
4176: LD_ADDR_OWVAR 27
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4184: LD_ADDR_OWVAR 29
4188: PUSH
4189: LD_INT 12
4191: PUSH
4192: LD_INT 12
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
// Leopold := CreateHuman ;
4199: LD_ADDR_EXP 7
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4209: LD_EXP 7
4213: PPUSH
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 0
4219: PPUSH
4220: CALL_OW 49
// end ; end_of_file
4224: LD_VAR 0 1
4228: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4229: LD_INT 0
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
// begin case num of 1 :
4236: LD_VAR 0 1
4240: PUSH
4241: LD_INT 1
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4281
4249: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4250: LD_EXP 7
4254: PPUSH
4255: LD_EXP 51
4259: PPUSH
4260: CALL_OW 250
4264: PPUSH
4265: LD_EXP 51
4269: PPUSH
4270: CALL_OW 251
4274: PPUSH
4275: CALL_OW 111
// end ; 2 :
4279: GO 6650
4281: LD_INT 2
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4398
4289: POP
// begin InGameOn ;
4290: CALL_OW 8
// meeting_start := true ;
4294: LD_ADDR_EXP 28
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4302: LD_EXP 7
4306: PPUSH
4307: LD_EXP 51
4311: PPUSH
4312: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4316: LD_EXP 51
4320: PPUSH
4321: LD_EXP 7
4325: PPUSH
4326: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4330: LD_EXP 7
4334: PPUSH
4335: LD_STRING DS-DL-1
4337: PPUSH
4338: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4342: LD_EXP 51
4346: PPUSH
4347: LD_STRING DS-DC-1
4349: PPUSH
4350: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4354: LD_EXP 7
4358: PPUSH
4359: LD_STRING DS-DL-2
4361: PPUSH
4362: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4366: LD_EXP 7
4370: PPUSH
4371: LD_INT 23
4373: PPUSH
4374: CALL_OW 120
// InGameOff ;
4378: CALL_OW 9
// Wait ( 0 0$01 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4389: LD_STRING DS-T1
4391: PPUSH
4392: CALL_OW 337
// end ; 10 :
4396: GO 6650
4398: LD_INT 10
4400: DOUBLE
4401: EQUAL
4402: IFTRUE 4406
4404: GO 4618
4406: POP
// begin uc_side := 6 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 6
4414: ST_TO_ADDR
// uc_nation := 2 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 2
4422: ST_TO_ADDR
// hc_gallery :=  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4431: LD_ADDR_OWVAR 31
4435: PUSH
4436: LD_EXP 16
4440: PUSH
4441: LD_INT 2
4443: PLUS
4444: PUSH
4445: LD_EXP 16
4449: PUSH
4450: LD_INT 1
4452: MINUS
4453: PUSH
4454: LD_EXP 16
4458: PUSH
4459: LD_EXP 16
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
// hc_sex := sex_male ;
4474: LD_ADDR_OWVAR 27
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Samuel van Horn
4489: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 10
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_class := 1 ;
4505: LD_ADDR_OWVAR 28
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// samuel := CreateHuman ;
4513: LD_ADDR_EXP 9
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4523: LD_EXP 9
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// for i = 1 to 3 do
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: DOUBLE
4544: LD_INT 1
4546: DEC
4547: ST_TO_ADDR
4548: LD_INT 3
4550: PUSH
4551: FOR_TO
4552: IFFALSE 4579
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4554: LD_INT 8
4556: PPUSH
4557: LD_EXP 16
4561: PPUSH
4562: CALL 7264 0 2
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
4577: GO 4551
4579: POP
4580: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 6
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 69
4595: PUSH
4596: LD_EXP 7
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: DIFF
4608: PPUSH
4609: LD_INT 23
4611: PPUSH
4612: CALL_OW 120
// end ; 3 :
4616: GO 6650
4618: LD_INT 3
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4637
4626: POP
// begin arabian_attack := true ;
4627: LD_ADDR_EXP 40
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// end ; 4 :
4635: GO 6650
4637: LD_INT 4
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4656
4645: POP
// begin american_attack := true ;
4646: LD_ADDR_EXP 42
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// end ; 5 :
4654: GO 6650
4656: LD_INT 5
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4675
4664: POP
// begin russian_attack := true ;
4665: LD_ADDR_EXP 41
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end ; 31 :
4673: GO 6650
4675: LD_INT 31
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4958
4683: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: LD_EXP 15
4693: PUSH
4694: LD_INT 1
4696: PPUSH
4697: LD_EXP 15
4701: PPUSH
4702: CALL_OW 12
4706: ARRAY
4707: ST_TO_ADDR
// uc_side := 2 ;
4708: LD_ADDR_OWVAR 20
4712: PUSH
4713: LD_INT 2
4715: ST_TO_ADDR
// uc_nation := 2 ;
4716: LD_ADDR_OWVAR 21
4720: PUSH
4721: LD_INT 2
4723: ST_TO_ADDR
// for i = 1 to arabian_force do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_EXP 22
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4819
// begin vc_chassis := ar_half_tracked ;
4742: LD_ADDR_OWVAR 37
4746: PUSH
4747: LD_INT 14
4749: ST_TO_ADDR
// vc_engine := engine_siberite ;
4750: LD_ADDR_OWVAR 39
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// vc_control := control_remote ;
4758: LD_ADDR_OWVAR 38
4762: PUSH
4763: LD_INT 2
4765: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4766: LD_ADDR_OWVAR 40
4770: PUSH
4771: LD_EXP 19
4775: PUSH
4776: LD_INT 1
4778: PPUSH
4779: LD_EXP 19
4783: PPUSH
4784: CALL_OW 12
4788: ARRAY
4789: ST_TO_ADDR
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 4
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: LD_VAR 0 6
4809: PPUSH
4810: LD_INT 0
4812: PPUSH
4813: CALL_OW 49
// end ;
4817: GO 4739
4819: POP
4820: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4821: LD_INT 22
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 33
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PPUSH
4845: CALL_OW 69
4849: PUSH
4850: LD_INT 2
4852: LESS
4853: IFFALSE 4956
// for i = 1 to 2 do
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_INT 2
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4954
// begin vc_chassis := ar_half_tracked ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 14
4878: ST_TO_ADDR
// vc_engine := engine_siberite ;
4879: LD_ADDR_OWVAR 39
4883: PUSH
4884: LD_INT 3
4886: ST_TO_ADDR
// vc_control := control_manual ;
4887: LD_ADDR_OWVAR 38
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4895: LD_ADDR_OWVAR 40
4899: PUSH
4900: LD_INT 31
4902: ST_TO_ADDR
// un := CreateVehicle ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4913: LD_VAR 0 4
4917: PPUSH
4918: LD_VAR 0 6
4922: PPUSH
4923: LD_INT 0
4925: PPUSH
4926: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4930: LD_INT 3
4932: PPUSH
4933: LD_EXP 16
4937: PPUSH
4938: CALL 7264 0 2
4942: PPUSH
4943: LD_VAR 0 4
4947: PPUSH
4948: CALL_OW 52
// end ;
4952: GO 4868
4954: POP
4955: POP
// end ; 32 :
4956: GO 6650
4958: LD_INT 32
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 5339
4966: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4967: LD_ADDR_VAR 0 6
4971: PUSH
4972: LD_EXP 15
4976: PUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_EXP 15
4984: PPUSH
4985: CALL_OW 12
4989: ARRAY
4990: ST_TO_ADDR
// uc_side := 2 ;
4991: LD_ADDR_OWVAR 20
4995: PUSH
4996: LD_INT 2
4998: ST_TO_ADDR
// uc_nation := 2 ;
4999: LD_ADDR_OWVAR 21
5003: PUSH
5004: LD_INT 2
5006: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 22
5021: PUSH
5022: LD_INT 2
5024: MINUS
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5110
// begin vc_chassis := ar_half_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 14
5036: ST_TO_ADDR
// vc_engine := engine_siberite ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// vc_control := control_remote ;
5045: LD_ADDR_OWVAR 38
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5053: LD_ADDR_OWVAR 40
5057: PUSH
5058: LD_EXP 19
5062: PUSH
5063: LD_INT 1
5065: PPUSH
5066: LD_EXP 19
5070: PUSH
5071: LD_INT 1
5073: MINUS
5074: PPUSH
5075: CALL_OW 12
5079: ARRAY
5080: ST_TO_ADDR
// un := CreateVehicle ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 45
5090: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 6
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 49
// end ;
5108: GO 5026
5110: POP
5111: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: DOUBLE
5118: LD_INT 1
5120: DEC
5121: ST_TO_ADDR
5122: LD_INT 0
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 12
5132: PUSH
5133: LD_INT 3
5135: PUSH
5136: LD_INT 4
5138: PUSH
5139: LD_INT 5
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_EXP 2
5151: ARRAY
5152: PLUS
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5192
// begin uc_nation := 0 ;
5157: LD_ADDR_OWVAR 21
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5165: LD_INT 17
5167: PPUSH
5168: LD_EXP 16
5172: PPUSH
5173: CALL 7264 0 2
5177: PPUSH
5178: LD_VAR 0 6
5182: PPUSH
5183: LD_INT 0
5185: PPUSH
5186: CALL_OW 49
// end ;
5190: GO 5154
5192: POP
5193: POP
// uc_nation := 2 ;
5194: LD_ADDR_OWVAR 21
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5202: LD_INT 22
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 33
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 69
5230: PUSH
5231: LD_INT 2
5233: LESS
5234: IFFALSE 5337
// for i = 1 to 2 do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 2
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5335
// begin vc_chassis := ar_half_tracked ;
5252: LD_ADDR_OWVAR 37
5256: PUSH
5257: LD_INT 14
5259: ST_TO_ADDR
// vc_engine := engine_siberite ;
5260: LD_ADDR_OWVAR 39
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// vc_control := control_manual ;
5268: LD_ADDR_OWVAR 38
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5276: LD_ADDR_OWVAR 40
5280: PUSH
5281: LD_INT 31
5283: ST_TO_ADDR
// un := CreateVehicle ;
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: CALL_OW 45
5293: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5294: LD_VAR 0 4
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5311: LD_INT 3
5313: PPUSH
5314: LD_EXP 16
5318: PPUSH
5319: CALL 7264 0 2
5323: PPUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 52
// end ;
5333: GO 5249
5335: POP
5336: POP
// end ; 33 :
5337: GO 6650
5339: LD_INT 33
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5618
5347: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_EXP 15
5357: PUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_EXP 15
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: ST_TO_ADDR
// uc_side := 2 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 2
5379: ST_TO_ADDR
// uc_nation := 2 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 2
5387: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_EXP 22
5402: PUSH
5403: LD_INT 2
5405: DIVREAL
5406: PUSH
5407: FOR_TO
5408: IFFALSE 5513
// begin vc_chassis := ar_half_tracked ;
5410: LD_ADDR_OWVAR 37
5414: PUSH
5415: LD_INT 14
5417: ST_TO_ADDR
// vc_engine := engine_siberite ;
5418: LD_ADDR_OWVAR 39
5422: PUSH
5423: LD_INT 3
5425: ST_TO_ADDR
// vc_control := control_manual ;
5426: LD_ADDR_OWVAR 38
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5434: LD_ADDR_OWVAR 40
5438: PUSH
5439: LD_EXP 19
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_EXP 19
5451: PUSH
5452: LD_INT 2
5454: MINUS
5455: PPUSH
5456: CALL_OW 12
5460: ARRAY
5461: ST_TO_ADDR
// un := CreateVehicle ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 45
5471: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5472: LD_VAR 0 4
5476: PPUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_EXP 16
5496: PPUSH
5497: CALL 7264 0 2
5501: PPUSH
5502: LD_VAR 0 4
5506: PPUSH
5507: CALL_OW 52
// end ;
5511: GO 5407
5513: POP
5514: POP
// for i = 1 to ( arabian_force / 2 ) do
5515: LD_ADDR_VAR 0 2
5519: PUSH
5520: DOUBLE
5521: LD_INT 1
5523: DEC
5524: ST_TO_ADDR
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 2
5532: DIVREAL
5533: PUSH
5534: FOR_TO
5535: IFFALSE 5614
// begin vc_chassis := ar_half_tracked ;
5537: LD_ADDR_OWVAR 37
5541: PUSH
5542: LD_INT 14
5544: ST_TO_ADDR
// vc_engine := engine_siberite ;
5545: LD_ADDR_OWVAR 39
5549: PUSH
5550: LD_INT 3
5552: ST_TO_ADDR
// vc_control := control_apeman ;
5553: LD_ADDR_OWVAR 38
5557: PUSH
5558: LD_INT 5
5560: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5561: LD_ADDR_OWVAR 40
5565: PUSH
5566: LD_EXP 19
5570: PUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_EXP 19
5578: PPUSH
5579: CALL_OW 12
5583: ARRAY
5584: ST_TO_ADDR
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 4
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5595: LD_VAR 0 4
5599: PPUSH
5600: LD_VAR 0 6
5604: PPUSH
5605: LD_INT 0
5607: PPUSH
5608: CALL_OW 49
// end ;
5612: GO 5534
5614: POP
5615: POP
// end ; 41 :
5616: GO 6650
5618: LD_INT 41
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5770
5626: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_EXP 15
5636: PUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_EXP 15
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: ST_TO_ADDR
// uc_side := 1 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// uc_nation := 1 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// for i = 1 to american_force do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_EXP 24
5681: PUSH
5682: FOR_TO
5683: IFFALSE 5766
// begin vc_chassis := us_morphling ;
5685: LD_ADDR_OWVAR 37
5689: PUSH
5690: LD_INT 5
5692: ST_TO_ADDR
// vc_engine := engine_siberite ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 3
5700: ST_TO_ADDR
// vc_control := control_computer ;
5701: LD_ADDR_OWVAR 38
5705: PUSH
5706: LD_INT 3
5708: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5709: LD_ADDR_OWVAR 40
5713: PUSH
5714: LD_EXP 21
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_EXP 21
5726: PUSH
5727: LD_INT 1
5729: MINUS
5730: PPUSH
5731: CALL_OW 12
5735: ARRAY
5736: ST_TO_ADDR
// un := CreateVehicle ;
5737: LD_ADDR_VAR 0 4
5741: PUSH
5742: CALL_OW 45
5746: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5747: LD_VAR 0 4
5751: PPUSH
5752: LD_VAR 0 6
5756: PPUSH
5757: LD_INT 0
5759: PPUSH
5760: CALL_OW 49
// end ;
5764: GO 5682
5766: POP
5767: POP
// end ; 42 :
5768: GO 6650
5770: LD_INT 42
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5918
5778: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_EXP 15
5788: PUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_EXP 15
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: ST_TO_ADDR
// uc_side := 1 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 1
5810: ST_TO_ADDR
// uc_nation := 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// for i = 1 to american_force do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_EXP 24
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5914
// begin vc_chassis := us_morphling ;
5837: LD_ADDR_OWVAR 37
5841: PUSH
5842: LD_INT 5
5844: ST_TO_ADDR
// vc_engine := engine_siberite ;
5845: LD_ADDR_OWVAR 39
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// vc_control := control_computer ;
5853: LD_ADDR_OWVAR 38
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5861: LD_ADDR_OWVAR 40
5865: PUSH
5866: LD_EXP 21
5870: PUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_EXP 21
5878: PPUSH
5879: CALL_OW 12
5883: ARRAY
5884: ST_TO_ADDR
// un := CreateVehicle ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: CALL_OW 45
5894: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5895: LD_VAR 0 4
5899: PPUSH
5900: LD_VAR 0 6
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: CALL_OW 49
// end ;
5912: GO 5834
5914: POP
5915: POP
// end ; 51 :
5916: GO 6650
5918: LD_INT 51
5920: DOUBLE
5921: EQUAL
5922: IFTRUE 5926
5924: GO 6066
5926: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5927: LD_ADDR_VAR 0 6
5931: PUSH
5932: LD_EXP 15
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_EXP 15
5944: PPUSH
5945: CALL_OW 12
5949: ARRAY
5950: ST_TO_ADDR
// uc_side := 3 ;
5951: LD_ADDR_OWVAR 20
5955: PUSH
5956: LD_INT 3
5958: ST_TO_ADDR
// uc_nation := 3 ;
5959: LD_ADDR_OWVAR 21
5963: PUSH
5964: LD_INT 3
5966: ST_TO_ADDR
// for i = 1 to russian_force do
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 23
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6062
// begin vc_chassis := ru_heavy_tracked ;
5985: LD_ADDR_OWVAR 37
5989: PUSH
5990: LD_INT 24
5992: ST_TO_ADDR
// vc_engine := engine_siberite ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_INT 3
6000: ST_TO_ADDR
// vc_control := control_computer ;
6001: LD_ADDR_OWVAR 38
6005: PUSH
6006: LD_INT 3
6008: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_EXP 20
6018: PUSH
6019: LD_INT 1
6021: PPUSH
6022: LD_EXP 20
6026: PPUSH
6027: CALL_OW 12
6031: ARRAY
6032: ST_TO_ADDR
// un := CreateVehicle ;
6033: LD_ADDR_VAR 0 4
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_VAR 0 6
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 49
// end ;
6060: GO 5982
6062: POP
6063: POP
// end ; 91 :
6064: GO 6650
6066: LD_INT 91
6068: DOUBLE
6069: EQUAL
6070: IFTRUE 6074
6072: GO 6212
6074: POP
// begin uc_side := 8 ;
6075: LD_ADDR_OWVAR 20
6079: PUSH
6080: LD_INT 8
6082: ST_TO_ADDR
// uc_nation := 1 ;
6083: LD_ADDR_OWVAR 21
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6091: LD_ADDR_VAR 0 2
6095: PUSH
6096: DOUBLE
6097: LD_INT 1
6099: DEC
6100: ST_TO_ADDR
6101: LD_INT 5
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: LD_EXP 2
6119: ARRAY
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6208
// begin vc_chassis := us_heavy_tracked ;
6124: LD_ADDR_OWVAR 37
6128: PUSH
6129: LD_INT 4
6131: ST_TO_ADDR
// vc_engine := engine_siberite ;
6132: LD_ADDR_OWVAR 39
6136: PUSH
6137: LD_INT 3
6139: ST_TO_ADDR
// vc_control := control_computer ;
6140: LD_ADDR_OWVAR 38
6144: PUSH
6145: LD_INT 3
6147: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6148: LD_ADDR_OWVAR 40
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: ARRAY
6174: ST_TO_ADDR
// un := CreateVehicle ;
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: CALL_OW 45
6184: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_EXP 15
6194: PUSH
6195: LD_INT 1
6197: ARRAY
6198: PPUSH
6199: LD_INT 0
6201: PPUSH
6202: CALL_OW 49
// end ;
6206: GO 6121
6208: POP
6209: POP
// end ; 92 :
6210: GO 6650
6212: LD_INT 92
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6525
6220: POP
// begin uc_side := 5 ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_INT 5
6228: ST_TO_ADDR
// uc_nation := 2 ;
6229: LD_ADDR_OWVAR 21
6233: PUSH
6234: LD_INT 2
6236: ST_TO_ADDR
// filter := [ ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: EMPTY
6243: ST_TO_ADDR
// hc_sex := sex_male ;
6244: LD_ADDR_OWVAR 27
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// hc_gallery :=  ;
6252: LD_ADDR_OWVAR 33
6256: PUSH
6257: LD_STRING 
6259: ST_TO_ADDR
// hc_class := 1 ;
6260: LD_ADDR_OWVAR 28
6264: PUSH
6265: LD_INT 1
6267: ST_TO_ADDR
// hc_name :=  ;
6268: LD_ADDR_OWVAR 26
6272: PUSH
6273: LD_STRING 
6275: ST_TO_ADDR
// un := CreateHuman ;
6276: LD_ADDR_VAR 0 4
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// filter := filter ^ un ;
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: LD_VAR 0 3
6295: PUSH
6296: LD_VAR 0 4
6300: ADD
6301: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6302: LD_ADDR_VAR 0 2
6306: PUSH
6307: DOUBLE
6308: LD_INT 1
6310: DEC
6311: ST_TO_ADDR
6312: LD_INT 4
6314: PUSH
6315: LD_INT 3
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: PUSH
6326: LD_EXP 2
6330: ARRAY
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6371
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6335: LD_ADDR_VAR 0 4
6339: PUSH
6340: LD_INT 1
6342: PPUSH
6343: LD_EXP 52
6347: PPUSH
6348: CALL 7264 0 2
6352: ST_TO_ADDR
// filter := filter ^ un ;
6353: LD_ADDR_VAR 0 3
6357: PUSH
6358: LD_VAR 0 3
6362: PUSH
6363: LD_VAR 0 4
6367: ADD
6368: ST_TO_ADDR
// end ;
6369: GO 6332
6371: POP
6372: POP
// DialogueOn ;
6373: CALL_OW 6
// SayRadio ( filter [ 1 ] , DS-DF-1 ) ;
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_STRING DS-DF-1
6388: PPUSH
6389: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6393: LD_STRING DS-dezert
6395: PPUSH
6396: CALL_OW 97
6400: PUSH
6401: LD_INT 1
6403: DOUBLE
6404: EQUAL
6405: IFTRUE 6409
6407: GO 6424
6409: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6410: LD_EXP 51
6414: PPUSH
6415: LD_STRING DS-DC-dis
6417: PPUSH
6418: CALL_OW 88
6422: GO 6519
6424: LD_INT 2
6426: DOUBLE
6427: EQUAL
6428: IFTRUE 6432
6430: GO 6518
6432: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6433: LD_EXP 51
6437: PPUSH
6438: LD_STRING DS-DC-acp
6440: PPUSH
6441: CALL_OW 88
// for i = 1 to filter do
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: DOUBLE
6451: LD_INT 1
6453: DEC
6454: ST_TO_ADDR
6455: LD_VAR 0 3
6459: PUSH
6460: FOR_TO
6461: IFFALSE 6514
// begin SetSide ( filter [ i ] , 8 ) ;
6463: LD_VAR 0 3
6467: PUSH
6468: LD_VAR 0 2
6472: ARRAY
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6481: LD_VAR 0 3
6485: PUSH
6486: LD_VAR 0 2
6490: ARRAY
6491: PPUSH
6492: LD_INT 4
6494: PPUSH
6495: LD_INT 0
6497: PPUSH
6498: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6502: LD_INT 111
6504: PPUSH
6505: LD_INT 121
6507: PPUSH
6508: CALL_OW 86
// end ;
6512: GO 6460
6514: POP
6515: POP
// end ; end ;
6516: GO 6519
6518: POP
// DialogueOff ;
6519: CALL_OW 7
// end ; 101 :
6523: GO 6650
6525: LD_INT 101
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6533
6531: GO 6585
6533: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6534: LD_INT 3
6536: PPUSH
6537: LD_INT 5
6539: PPUSH
6540: CALL_OW 12
6544: PPUSH
6545: LD_INT 9
6547: PPUSH
6548: LD_INT 1
6550: PPUSH
6551: CALL_OW 55
// Wait ( 0 0$11 ) ;
6555: LD_INT 385
6557: PPUSH
6558: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6562: LD_INT 3
6564: PPUSH
6565: LD_INT 5
6567: PPUSH
6568: CALL_OW 12
6572: PPUSH
6573: LD_INT 9
6575: PPUSH
6576: LD_INT 1
6578: PPUSH
6579: CALL_OW 55
// end ; 200 :
6583: GO 6650
6585: LD_INT 200
6587: DOUBLE
6588: EQUAL
6589: IFTRUE 6593
6591: GO 6649
6593: POP
// begin Say ( Leopold , DS-end ) ;
6594: LD_EXP 7
6598: PPUSH
6599: LD_STRING DS-end
6601: PPUSH
6602: CALL_OW 88
// AddMedal ( dsmed1 , 1 ) ;
6606: LD_STRING dsmed1
6608: PPUSH
6609: LD_INT 1
6611: PPUSH
6612: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6616: LD_STRING dsmed1
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6626: LD_STRING dsmed1
6628: PPUSH
6629: LD_INT 1
6631: PPUSH
6632: CALL_OW 101
// GiveMedals ( MAIN ) ;
6636: LD_STRING MAIN
6638: PPUSH
6639: CALL_OW 102
// YouWin ;
6643: CALL_OW 103
// end ; end ;
6647: GO 6650
6649: POP
// end ;
6650: PPOPN 6
6652: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6653: LD_VAR 0 1
6657: PUSH
6658: LD_INT 22
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: CALL_OW 69
6686: IN
6687: IFFALSE 6812
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6689: LD_INT 105
6691: PPUSH
6692: LD_INT 210
6694: PPUSH
6695: CALL_OW 12
6699: PPUSH
6700: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6704: LD_VAR 0 1
6708: PPUSH
6709: CALL_OW 250
6713: PPUSH
6714: LD_VAR 0 1
6718: PPUSH
6719: CALL_OW 251
6723: PPUSH
6724: LD_INT 3
6726: PPUSH
6727: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6731: LD_VAR 0 1
6735: PPUSH
6736: CALL_OW 250
6740: PPUSH
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 251
6750: PPUSH
6751: LD_INT 3
6753: PPUSH
6754: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 250
6767: PPUSH
6768: LD_VAR 0 1
6772: PPUSH
6773: CALL_OW 251
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: CALL_OW 250
6794: PPUSH
6795: LD_VAR 0 1
6799: PPUSH
6800: CALL_OW 251
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 453
// end ; end ;
6812: PPOPN 1
6814: END
// on UnitDestroyed ( un ) do begin if un = fort then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_INT 23
6822: EQUAL
6823: IFFALSE 6833
// fort_destroyed := true ;
6825: LD_ADDR_EXP 34
6829: PUSH
6830: LD_INT 1
6832: ST_TO_ADDR
// if un = l_cmndr then
6833: LD_VAR 0 1
6837: PUSH
6838: LD_EXP 51
6842: EQUAL
6843: IFFALSE 6853
// hero_died := true ;
6845: LD_ADDR_EXP 35
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_weapon , ar_bio_bomb ] ) then
6853: LD_VAR 0 1
6857: PUSH
6858: LD_INT 34
6860: PUSH
6861: LD_EXP 17
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: IN
6875: IFFALSE 6913
// begin if Prob ( 70 ) then
6877: LD_INT 70
6879: PPUSH
6880: CALL_OW 13
6884: IFFALSE 6913
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
6886: LD_VAR 0 1
6890: PPUSH
6891: CALL_OW 250
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 251
6905: PPUSH
6906: LD_INT 10
6908: PPUSH
6909: CALL_OW 495
// end ; end ; end_of_file
6913: PPOPN 1
6915: END
// export function RefreshTime ( time , bool ) ; begin
6916: LD_INT 0
6918: PPUSH
// if bool then
6919: LD_VAR 0 2
6923: IFFALSE 6941
// time := time + 0 0$01 else
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 35
6937: PLUS
6938: ST_TO_ADDR
6939: GO 6955
// time := time - 0 0$01 ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_VAR 0 1
6950: PUSH
6951: LD_INT 35
6953: MINUS
6954: ST_TO_ADDR
// result := time ;
6955: LD_ADDR_VAR 0 3
6959: PUSH
6960: LD_VAR 0 1
6964: ST_TO_ADDR
// end ;
6965: LD_VAR 0 3
6969: RET
// export function MineExist ( side ) ; begin
6970: LD_INT 0
6972: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
6973: LD_INT 22
6975: PUSH
6976: LD_VAR 0 1
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 30
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 69
7003: PUSH
7004: LD_INT 0
7006: GREATER
7007: IFFALSE 7019
// result := true else
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 1
7016: ST_TO_ADDR
7017: GO 7027
// result := false ;
7019: LD_ADDR_VAR 0 2
7023: PUSH
7024: LD_INT 0
7026: ST_TO_ADDR
// end ;
7027: LD_VAR 0 2
7031: RET
// export function FacExist ( side ) ; begin
7032: LD_INT 0
7034: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7035: LD_ADDR_VAR 0 2
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_VAR 0 1
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 30
7054: PUSH
7055: LD_INT 3
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PPUSH
7066: CALL_OW 69
7070: PUSH
7071: LD_INT 0
7073: GREATER
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7080: LD_INT 0
7082: PPUSH
7083: PPUSH
7084: PPUSH
7085: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7086: LD_ADDR_VAR 0 4
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_VAR 0 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 33
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 50
7115: PUSH
7116: EMPTY
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: PPUSH
7124: CALL_OW 69
7128: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_VAR 0 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 34
7148: PUSH
7149: LD_INT 31
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PPUSH
7160: CALL_OW 69
7164: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7165: LD_VAR 0 5
7169: PUSH
7170: LD_INT 0
7172: GREATER
7173: PUSH
7174: LD_VAR 0 4
7178: PUSH
7179: LD_INT 0
7181: GREATER
7182: AND
7183: IFFALSE 7259
// for i = 1 to filter do
7185: LD_ADDR_VAR 0 3
7189: PUSH
7190: DOUBLE
7191: LD_INT 1
7193: DEC
7194: ST_TO_ADDR
7195: LD_VAR 0 4
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7257
// if not IsControledBy ( filter [ i ] ) then
7203: LD_VAR 0 4
7207: PUSH
7208: LD_VAR 0 3
7212: ARRAY
7213: PPUSH
7214: CALL_OW 312
7218: NOT
7219: IFFALSE 7255
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7221: LD_VAR 0 4
7225: PUSH
7226: LD_VAR 0 3
7230: ARRAY
7231: PPUSH
7232: LD_VAR 0 5
7236: PUSH
7237: LD_INT 1
7239: PPUSH
7240: LD_VAR 0 5
7244: PPUSH
7245: CALL_OW 12
7249: ARRAY
7250: PPUSH
7251: CALL_OW 135
7255: GO 7200
7257: POP
7258: POP
// end ;
7259: LD_VAR 0 2
7263: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7264: LD_INT 0
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
7271: PPUSH
// hc_class := clas ;
7272: LD_ADDR_OWVAR 28
7276: PUSH
7277: LD_VAR 0 1
7281: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7282: LD_ADDR_VAR 0 4
7286: PUSH
7287: LD_VAR 0 2
7291: PUSH
7292: LD_INT 1
7294: NEG
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: CALL_OW 12
7303: PLUS
7304: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7305: LD_ADDR_VAR 0 5
7309: PUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 1
7317: NEG
7318: PPUSH
7319: LD_INT 1
7321: PPUSH
7322: CALL_OW 12
7326: PLUS
7327: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7328: LD_ADDR_VAR 0 6
7332: PUSH
7333: LD_VAR 0 2
7337: PUSH
7338: LD_INT 1
7340: NEG
7341: PPUSH
7342: LD_INT 1
7344: PPUSH
7345: CALL_OW 12
7349: PLUS
7350: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7351: LD_ADDR_VAR 0 7
7355: PUSH
7356: LD_VAR 0 2
7360: PUSH
7361: LD_INT 1
7363: NEG
7364: PPUSH
7365: LD_INT 1
7367: PPUSH
7368: CALL_OW 12
7372: PLUS
7373: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7374: LD_VAR 0 1
7378: PUSH
7379: LD_INT 1
7381: EQUAL
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: LD_INT 9
7390: EQUAL
7391: OR
7392: PUSH
7393: LD_VAR 0 1
7397: PUSH
7398: LD_INT 5
7400: EQUAL
7401: OR
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: LD_INT 8
7410: EQUAL
7411: OR
7412: IFFALSE 7437
// bonus := [ 2 , 0 , 0 , 0 ] ;
7414: LD_ADDR_VAR 0 8
7418: PUSH
7419: LD_INT 2
7421: PUSH
7422: LD_INT 0
7424: PUSH
7425: LD_INT 0
7427: PUSH
7428: LD_INT 0
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: ST_TO_ADDR
// if clas = 2 then
7437: LD_VAR 0 1
7441: PUSH
7442: LD_INT 2
7444: EQUAL
7445: IFFALSE 7470
// bonus := [ 0 , 2 , 0 , 0 ] ;
7447: LD_ADDR_VAR 0 8
7451: PUSH
7452: LD_INT 0
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: LD_INT 0
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// if clas = 3 then
7470: LD_VAR 0 1
7474: PUSH
7475: LD_INT 3
7477: EQUAL
7478: IFFALSE 7503
// bonus := [ 0 , 0 , 2 , 0 ] ;
7480: LD_ADDR_VAR 0 8
7484: PUSH
7485: LD_INT 0
7487: PUSH
7488: LD_INT 0
7490: PUSH
7491: LD_INT 2
7493: PUSH
7494: LD_INT 0
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: ST_TO_ADDR
// if clas = 4 then
7503: LD_VAR 0 1
7507: PUSH
7508: LD_INT 4
7510: EQUAL
7511: IFFALSE 7536
// bonus := [ 0 , 0 , 0 , 2 ] ;
7513: LD_ADDR_VAR 0 8
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7536: LD_VAR 0 1
7540: PUSH
7541: LD_INT 4
7543: GREATER
7544: PUSH
7545: LD_VAR 0 1
7549: PUSH
7550: LD_INT 9
7552: NONEQUAL
7553: AND
7554: PUSH
7555: LD_VAR 0 1
7559: PUSH
7560: LD_INT 5
7562: NONEQUAL
7563: AND
7564: PUSH
7565: LD_VAR 0 1
7569: PUSH
7570: LD_INT 8
7572: NONEQUAL
7573: AND
7574: IFFALSE 7599
// bonus := [ 0 , 0 , 0 , 0 ] ;
7576: LD_ADDR_VAR 0 8
7580: PUSH
7581: LD_INT 0
7583: PUSH
7584: LD_INT 0
7586: PUSH
7587: LD_INT 0
7589: PUSH
7590: LD_INT 0
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7599: LD_ADDR_OWVAR 30
7603: PUSH
7604: LD_INT 0
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: CALL_OW 12
7614: PUSH
7615: LD_INT 0
7617: PPUSH
7618: LD_INT 2
7620: PPUSH
7621: CALL_OW 12
7625: PUSH
7626: LD_INT 0
7628: PPUSH
7629: LD_INT 2
7631: PPUSH
7632: CALL_OW 12
7636: PUSH
7637: LD_INT 0
7639: PPUSH
7640: LD_INT 2
7642: PPUSH
7643: CALL_OW 12
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7654: LD_ADDR_OWVAR 31
7658: PUSH
7659: LD_VAR 0 4
7663: PUSH
7664: LD_VAR 0 8
7668: PUSH
7669: LD_INT 1
7671: ARRAY
7672: PLUS
7673: PUSH
7674: LD_VAR 0 5
7678: PUSH
7679: LD_VAR 0 8
7683: PUSH
7684: LD_INT 2
7686: ARRAY
7687: PLUS
7688: PUSH
7689: LD_VAR 0 6
7693: PUSH
7694: LD_VAR 0 8
7698: PUSH
7699: LD_INT 3
7701: ARRAY
7702: PLUS
7703: PUSH
7704: LD_VAR 0 7
7708: PUSH
7709: LD_VAR 0 8
7713: PUSH
7714: LD_INT 4
7716: ARRAY
7717: PLUS
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7725: LD_ADDR_OWVAR 27
7729: PUSH
7730: LD_INT 1
7732: PPUSH
7733: LD_INT 2
7735: PPUSH
7736: CALL_OW 12
7740: ST_TO_ADDR
// hc_gallery :=  ;
7741: LD_ADDR_OWVAR 33
7745: PUSH
7746: LD_STRING 
7748: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7749: LD_ADDR_OWVAR 29
7753: PUSH
7754: LD_INT 8
7756: PPUSH
7757: LD_INT 12
7759: PPUSH
7760: CALL_OW 12
7764: PUSH
7765: LD_INT 9
7767: PPUSH
7768: LD_INT 11
7770: PPUSH
7771: CALL_OW 12
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: ST_TO_ADDR
// hc_name :=  ;
7780: LD_ADDR_OWVAR 26
7784: PUSH
7785: LD_STRING 
7787: ST_TO_ADDR
// result := CreateHuman ;
7788: LD_ADDR_VAR 0 3
7792: PUSH
7793: CALL_OW 44
7797: ST_TO_ADDR
// end ;
7798: LD_VAR 0 3
7802: RET
// export function GetSpeed ( unit ) ; begin
7803: LD_INT 0
7805: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_VAR 0 1
7815: PPUSH
7816: CALL_OW 464
7820: PUSH
7821: LD_INT 1
7823: ARRAY
7824: ST_TO_ADDR
// end ;
7825: LD_VAR 0 2
7829: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
7837: PPUSH
// uc_nation = nation_nature ;
7838: LD_ADDR_OWVAR 21
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// uc_side = 0 ;
7846: LD_ADDR_OWVAR 20
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// l = 0 ;
7854: LD_ADDR_VAR 0 7
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7862: LD_ADDR_OWVAR 24
7866: PUSH
7867: LD_INT 0
7869: PPUSH
7870: LD_INT 5
7872: PPUSH
7873: CALL_OW 12
7877: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7878: LD_ADDR_OWVAR 35
7882: PUSH
7883: LD_INT 5
7885: NEG
7886: PPUSH
7887: LD_INT 0
7889: PPUSH
7890: CALL_OW 12
7894: ST_TO_ADDR
// hc_gallery =  ;
7895: LD_ADDR_OWVAR 33
7899: PUSH
7900: LD_STRING 
7902: ST_TO_ADDR
// hc_class = class_apeman ;
7903: LD_ADDR_OWVAR 28
7907: PUSH
7908: LD_INT 12
7910: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7911: LD_ADDR_OWVAR 29
7915: PUSH
7916: LD_INT 11
7918: PPUSH
7919: LD_INT 13
7921: PPUSH
7922: CALL_OW 12
7926: PUSH
7927: LD_INT 10
7929: PPUSH
7930: LD_INT 11
7932: PPUSH
7933: CALL_OW 12
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: ST_TO_ADDR
// hc_sex = sex_male ;
7942: LD_ADDR_OWVAR 27
7946: PUSH
7947: LD_INT 1
7949: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7950: LD_ADDR_OWVAR 31
7954: PUSH
7955: LD_INT 0
7957: PPUSH
7958: LD_INT 2
7960: PPUSH
7961: CALL_OW 12
7965: PUSH
7966: LD_INT 0
7968: PUSH
7969: LD_INT 0
7971: PUSH
7972: LD_INT 0
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// apeman = CreateHuman ;
7981: LD_ADDR_VAR 0 8
7985: PUSH
7986: CALL_OW 44
7990: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7991: LD_VAR 0 8
7995: PPUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: LD_INT 0
8003: PPUSH
8004: CALL_OW 49
// l = l + 1 ;
8008: LD_ADDR_VAR 0 7
8012: PUSH
8013: LD_VAR 0 7
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: ST_TO_ADDR
// end until l = num1 ;
8022: LD_VAR 0 7
8026: PUSH
8027: LD_VAR 0 2
8031: EQUAL
8032: IFFALSE 7862
// l = 0 ;
8034: LD_ADDR_VAR 0 7
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8042: LD_ADDR_OWVAR 35
8046: PUSH
8047: LD_INT 0
8049: PPUSH
8050: LD_INT 25
8052: PPUSH
8053: CALL_OW 12
8057: ST_TO_ADDR
// hc_class = class_tiger ;
8058: LD_ADDR_OWVAR 28
8062: PUSH
8063: LD_INT 14
8065: ST_TO_ADDR
// hc_sex = sex_male ;
8066: LD_ADDR_OWVAR 27
8070: PUSH
8071: LD_INT 1
8073: ST_TO_ADDR
// hc_gallery = sandnature ;
8074: LD_ADDR_OWVAR 33
8078: PUSH
8079: LD_STRING sandnature
8081: ST_TO_ADDR
// hc_face_number = 3 ;
8082: LD_ADDR_OWVAR 34
8086: PUSH
8087: LD_INT 3
8089: ST_TO_ADDR
// tiger = CreateHuman ;
8090: LD_ADDR_VAR 0 9
8094: PUSH
8095: CALL_OW 44
8099: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8100: LD_VAR 0 9
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: LD_INT 0
8112: PPUSH
8113: CALL_OW 49
// l = l + 1 ;
8117: LD_ADDR_VAR 0 7
8121: PUSH
8122: LD_VAR 0 7
8126: PUSH
8127: LD_INT 1
8129: PLUS
8130: ST_TO_ADDR
// end until l = num2 ;
8131: LD_VAR 0 7
8135: PUSH
8136: LD_VAR 0 3
8140: EQUAL
8141: IFFALSE 8042
// l = 0 ;
8143: LD_ADDR_VAR 0 7
8147: PUSH
8148: LD_INT 0
8150: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8151: LD_ADDR_OWVAR 28
8155: PUSH
8156: LD_INT 18
8158: ST_TO_ADDR
// hc_gallery = sandnature ;
8159: LD_ADDR_OWVAR 33
8163: PUSH
8164: LD_STRING sandnature
8166: ST_TO_ADDR
// hc_face_number = 1 ;
8167: LD_ADDR_OWVAR 34
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// bird = CreateHuman ;
8175: LD_ADDR_VAR 0 10
8179: PUSH
8180: CALL_OW 44
8184: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8185: LD_VAR 0 10
8189: PPUSH
8190: LD_INT 0
8192: PPUSH
8193: CALL_OW 51
// l = l + 1 ;
8197: LD_ADDR_VAR 0 7
8201: PUSH
8202: LD_VAR 0 7
8206: PUSH
8207: LD_INT 1
8209: PLUS
8210: ST_TO_ADDR
// end until l = num3 ;
8211: LD_VAR 0 7
8215: PUSH
8216: LD_VAR 0 4
8220: EQUAL
8221: IFFALSE 8151
// l = 0 ;
8223: LD_ADDR_VAR 0 7
8227: PUSH
8228: LD_INT 0
8230: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8231: LD_ADDR_OWVAR 28
8235: PUSH
8236: LD_INT 21
8238: ST_TO_ADDR
// hc_gallery = sandnature ;
8239: LD_ADDR_OWVAR 33
8243: PUSH
8244: LD_STRING sandnature
8246: ST_TO_ADDR
// hc_face_number = 5 ;
8247: LD_ADDR_OWVAR 34
8251: PUSH
8252: LD_INT 5
8254: ST_TO_ADDR
// horse := CreateHuman ;
8255: LD_ADDR_VAR 0 11
8259: PUSH
8260: CALL_OW 44
8264: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8265: LD_VAR 0 11
8269: PPUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: LD_INT 0
8277: PPUSH
8278: CALL_OW 49
// l = l + 1 ;
8282: LD_ADDR_VAR 0 7
8286: PUSH
8287: LD_VAR 0 7
8291: PUSH
8292: LD_INT 1
8294: PLUS
8295: ST_TO_ADDR
// end until l = num4 ;
8296: LD_VAR 0 7
8300: PUSH
8301: LD_VAR 0 5
8305: EQUAL
8306: IFFALSE 8231
// end ;
8308: LD_VAR 0 6
8312: RET
// export function PrepareComm ; begin
8313: LD_INT 0
8315: PPUSH
// uc_side := 1 ;
8316: LD_ADDR_OWVAR 20
8320: PUSH
8321: LD_INT 1
8323: ST_TO_ADDR
// uc_nation := 1 ;
8324: LD_ADDR_OWVAR 21
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// hc_gallery :=  ;
8332: LD_ADDR_OWVAR 33
8336: PUSH
8337: LD_STRING 
8339: ST_TO_ADDR
// hc_name :=  ;
8340: LD_ADDR_OWVAR 26
8344: PUSH
8345: LD_STRING 
8347: ST_TO_ADDR
// hc_class := 1 ;
8348: LD_ADDR_OWVAR 28
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// hc_sex := sex_male ;
8356: LD_ADDR_OWVAR 27
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// am_comander := CreateHuman ;
8364: LD_ADDR_EXP 48
8368: PUSH
8369: CALL_OW 44
8373: ST_TO_ADDR
// uc_side := 3 ;
8374: LD_ADDR_OWVAR 20
8378: PUSH
8379: LD_INT 3
8381: ST_TO_ADDR
// uc_nation := 3 ;
8382: LD_ADDR_OWVAR 21
8386: PUSH
8387: LD_INT 3
8389: ST_TO_ADDR
// ru_comander := CreateHuman ;
8390: LD_ADDR_EXP 49
8394: PUSH
8395: CALL_OW 44
8399: ST_TO_ADDR
// uc_side := 2 ;
8400: LD_ADDR_OWVAR 20
8404: PUSH
8405: LD_INT 2
8407: ST_TO_ADDR
// uc_nation := 2 ;
8408: LD_ADDR_OWVAR 21
8412: PUSH
8413: LD_INT 2
8415: ST_TO_ADDR
// hc_name := Heike Steyer ;
8416: LD_ADDR_OWVAR 26
8420: PUSH
8421: LD_STRING Heike Steyer
8423: ST_TO_ADDR
// hc_sex := sex_female ;
8424: LD_ADDR_OWVAR 27
8428: PUSH
8429: LD_INT 2
8431: ST_TO_ADDR
// hc_gallery := sandar ;
8432: LD_ADDR_OWVAR 33
8436: PUSH
8437: LD_STRING sandar
8439: ST_TO_ADDR
// hc_face_number := 14 ;
8440: LD_ADDR_OWVAR 34
8444: PUSH
8445: LD_INT 14
8447: ST_TO_ADDR
// ar_comander := CreateHuman ;
8448: LD_ADDR_EXP 50
8452: PUSH
8453: CALL_OW 44
8457: ST_TO_ADDR
// end ;
8458: LD_VAR 0 1
8462: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
8467: PPUSH
// list := [ ] ;
8468: LD_ADDR_VAR 0 4
8472: PUSH
8473: EMPTY
8474: ST_TO_ADDR
// for i = 1 to filter do
8475: LD_ADDR_VAR 0 5
8479: PUSH
8480: DOUBLE
8481: LD_INT 1
8483: DEC
8484: ST_TO_ADDR
8485: LD_VAR 0 1
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8540
// if GetSpeed ( filter [ i ] ) < speed then
8493: LD_VAR 0 1
8497: PUSH
8498: LD_VAR 0 5
8502: ARRAY
8503: PPUSH
8504: CALL 7803 0 1
8508: PUSH
8509: LD_VAR 0 2
8513: LESS
8514: IFFALSE 8538
// list := list ^ filter [ i ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_VAR 0 4
8525: PUSH
8526: LD_VAR 0 1
8530: PUSH
8531: LD_VAR 0 5
8535: ARRAY
8536: ADD
8537: ST_TO_ADDR
8538: GO 8490
8540: POP
8541: POP
// result := list ;
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_VAR 0 4
8551: ST_TO_ADDR
// end ;
8552: LD_VAR 0 3
8556: RET
