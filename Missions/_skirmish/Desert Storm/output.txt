// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7869 0 5
// PrepareComm ;
 110: CALL 8352 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: LD_INT 7
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 8
 337: PUSH
 338: LD_INT 9
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 7
 359: PUSH
 360: LD_INT 9
 362: PUSH
 363: LD_INT 10
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20300
 556: PUSH
 557: LD_INT 19250
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$10 , 6 6$20 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15050
 581: PUSH
 582: LD_INT 13300
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6955 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6955 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6955 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6955 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6955 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6955 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6955 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7009 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7071 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 157500
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 80
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 90
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 25
1973: PUSH
1974: LD_INT 35
1976: PUSH
1977: LD_INT 45
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 22
2068: PUSH
2069: LD_INT 33
2071: PUSH
2072: LD_INT 44
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 21000
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7119 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8502 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8502 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8502 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 8
3577: PUSH
3578: LD_INT 7
3580: PUSH
3581: LD_INT 6
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7303 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7303 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7303 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 4
5144: PUSH
5145: LD_INT 5
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7303 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7303 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7303 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 5
6109: PUSH
6110: LD_INT 4
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7303 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( dsmed1 , 1 ) ;
6661: LD_STRING dsmed1
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6671: LD_STRING dsmed1
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6681: LD_STRING dsmed1
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin if un = fort then
6870: LD_VAR 0 1
6874: PUSH
6875: LD_INT 23
6877: EQUAL
6878: IFFALSE 6888
// fort_destroyed := true ;
6880: LD_ADDR_EXP 32
6884: PUSH
6885: LD_INT 1
6887: ST_TO_ADDR
// if un = l_cmndr then
6888: LD_VAR 0 1
6892: PUSH
6893: LD_EXP 49
6897: EQUAL
6898: IFFALSE 6908
// hero_died := true ;
6900: LD_ADDR_EXP 33
6904: PUSH
6905: LD_INT 1
6907: ST_TO_ADDR
// end ;
6908: PPOPN 1
6910: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6911: LD_ADDR_OWVAR 48
6915: PUSH
6916: LD_VAR 0 1
6920: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6921: LD_VAR 0 1
6925: PPUSH
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_VAR 0 3
6935: PPUSH
6936: CALL 19364 0 3
// end ;
6940: PPOPN 3
6942: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL 19462 0 1
// end ; end_of_file
6952: PPOPN 1
6954: END
// export function RefreshTime ( time , bool ) ; begin
6955: LD_INT 0
6957: PPUSH
// if bool then
6958: LD_VAR 0 2
6962: IFFALSE 6980
// time := time + 0 0$01 else
6964: LD_ADDR_VAR 0 1
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: LD_INT 35
6976: PLUS
6977: ST_TO_ADDR
6978: GO 6994
// time := time - 0 0$01 ;
6980: LD_ADDR_VAR 0 1
6984: PUSH
6985: LD_VAR 0 1
6989: PUSH
6990: LD_INT 35
6992: MINUS
6993: ST_TO_ADDR
// result := time ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_VAR 0 1
7003: ST_TO_ADDR
// end ;
7004: LD_VAR 0 3
7008: RET
// export function MineExist ( side ) ; begin
7009: LD_INT 0
7011: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7012: LD_INT 22
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 30
7026: PUSH
7027: LD_INT 30
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PPUSH
7038: CALL_OW 69
7042: PUSH
7043: LD_INT 0
7045: GREATER
7046: IFFALSE 7058
// result := true else
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_INT 1
7055: ST_TO_ADDR
7056: GO 7066
// result := false ;
7058: LD_ADDR_VAR 0 2
7062: PUSH
7063: LD_INT 0
7065: ST_TO_ADDR
// end ;
7066: LD_VAR 0 2
7070: RET
// export function FacExist ( side ) ; begin
7071: LD_INT 0
7073: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7074: LD_ADDR_VAR 0 2
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_VAR 0 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 30
7093: PUSH
7094: LD_INT 3
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: PUSH
7110: LD_INT 0
7112: GREATER
7113: ST_TO_ADDR
// end ;
7114: LD_VAR 0 2
7118: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7119: LD_INT 0
7121: PPUSH
7122: PPUSH
7123: PPUSH
7124: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7125: LD_ADDR_VAR 0 4
7129: PUSH
7130: LD_INT 22
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 33
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 50
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: PPUSH
7163: CALL_OW 69
7167: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7168: LD_ADDR_VAR 0 5
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_VAR 0 1
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 34
7187: PUSH
7188: LD_INT 31
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7204: LD_VAR 0 5
7208: PUSH
7209: LD_INT 0
7211: GREATER
7212: PUSH
7213: LD_VAR 0 4
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: AND
7222: IFFALSE 7298
// for i = 1 to filter do
7224: LD_ADDR_VAR 0 3
7228: PUSH
7229: DOUBLE
7230: LD_INT 1
7232: DEC
7233: ST_TO_ADDR
7234: LD_VAR 0 4
7238: PUSH
7239: FOR_TO
7240: IFFALSE 7296
// if not IsControledBy ( filter [ i ] ) then
7242: LD_VAR 0 4
7246: PUSH
7247: LD_VAR 0 3
7251: ARRAY
7252: PPUSH
7253: CALL_OW 312
7257: NOT
7258: IFFALSE 7294
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7260: LD_VAR 0 4
7264: PUSH
7265: LD_VAR 0 3
7269: ARRAY
7270: PPUSH
7271: LD_VAR 0 5
7275: PUSH
7276: LD_INT 1
7278: PPUSH
7279: LD_VAR 0 5
7283: PPUSH
7284: CALL_OW 12
7288: ARRAY
7289: PPUSH
7290: CALL_OW 135
7294: GO 7239
7296: POP
7297: POP
// end ;
7298: LD_VAR 0 2
7302: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7303: LD_INT 0
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
// hc_class := clas ;
7311: LD_ADDR_OWVAR 28
7315: PUSH
7316: LD_VAR 0 1
7320: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7321: LD_ADDR_VAR 0 4
7325: PUSH
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 1
7333: NEG
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: CALL_OW 12
7342: PLUS
7343: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7344: LD_ADDR_VAR 0 5
7348: PUSH
7349: LD_VAR 0 2
7353: PUSH
7354: LD_INT 1
7356: NEG
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: CALL_OW 12
7365: PLUS
7366: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7367: LD_ADDR_VAR 0 6
7371: PUSH
7372: LD_VAR 0 2
7376: PUSH
7377: LD_INT 1
7379: NEG
7380: PPUSH
7381: LD_INT 1
7383: PPUSH
7384: CALL_OW 12
7388: PLUS
7389: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7390: LD_ADDR_VAR 0 7
7394: PUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: NEG
7403: PPUSH
7404: LD_INT 1
7406: PPUSH
7407: CALL_OW 12
7411: PLUS
7412: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7413: LD_VAR 0 1
7417: PUSH
7418: LD_INT 1
7420: EQUAL
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 9
7429: EQUAL
7430: OR
7431: PUSH
7432: LD_VAR 0 1
7436: PUSH
7437: LD_INT 5
7439: EQUAL
7440: OR
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 8
7449: EQUAL
7450: OR
7451: IFFALSE 7476
// bonus := [ 2 , 0 , 0 , 0 ] ;
7453: LD_ADDR_VAR 0 8
7457: PUSH
7458: LD_INT 2
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: LD_INT 0
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: ST_TO_ADDR
// if clas = 2 then
7476: LD_VAR 0 1
7480: PUSH
7481: LD_INT 2
7483: EQUAL
7484: IFFALSE 7509
// bonus := [ 0 , 2 , 0 , 0 ] ;
7486: LD_ADDR_VAR 0 8
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: LD_INT 2
7496: PUSH
7497: LD_INT 0
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// if clas = 3 then
7509: LD_VAR 0 1
7513: PUSH
7514: LD_INT 3
7516: EQUAL
7517: IFFALSE 7542
// bonus := [ 0 , 0 , 2 , 0 ] ;
7519: LD_ADDR_VAR 0 8
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 0
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if clas = 4 then
7542: LD_VAR 0 1
7546: PUSH
7547: LD_INT 4
7549: EQUAL
7550: IFFALSE 7575
// bonus := [ 0 , 0 , 0 , 2 ] ;
7552: LD_ADDR_VAR 0 8
7556: PUSH
7557: LD_INT 0
7559: PUSH
7560: LD_INT 0
7562: PUSH
7563: LD_INT 0
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7575: LD_VAR 0 1
7579: PUSH
7580: LD_INT 4
7582: GREATER
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 9
7591: NONEQUAL
7592: AND
7593: PUSH
7594: LD_VAR 0 1
7598: PUSH
7599: LD_INT 5
7601: NONEQUAL
7602: AND
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_INT 8
7611: NONEQUAL
7612: AND
7613: IFFALSE 7638
// bonus := [ 0 , 0 , 0 , 0 ] ;
7615: LD_ADDR_VAR 0 8
7619: PUSH
7620: LD_INT 0
7622: PUSH
7623: LD_INT 0
7625: PUSH
7626: LD_INT 0
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7638: LD_ADDR_OWVAR 30
7642: PUSH
7643: LD_INT 0
7645: PPUSH
7646: LD_INT 2
7648: PPUSH
7649: CALL_OW 12
7653: PUSH
7654: LD_INT 0
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 12
7664: PUSH
7665: LD_INT 0
7667: PPUSH
7668: LD_INT 2
7670: PPUSH
7671: CALL_OW 12
7675: PUSH
7676: LD_INT 0
7678: PPUSH
7679: LD_INT 2
7681: PPUSH
7682: CALL_OW 12
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7693: LD_ADDR_OWVAR 31
7697: PUSH
7698: LD_VAR 0 4
7702: PUSH
7703: LD_VAR 0 8
7707: PUSH
7708: LD_INT 1
7710: ARRAY
7711: PLUS
7712: PUSH
7713: LD_VAR 0 5
7717: PUSH
7718: LD_VAR 0 8
7722: PUSH
7723: LD_INT 2
7725: ARRAY
7726: PLUS
7727: PUSH
7728: LD_VAR 0 6
7732: PUSH
7733: LD_VAR 0 8
7737: PUSH
7738: LD_INT 3
7740: ARRAY
7741: PLUS
7742: PUSH
7743: LD_VAR 0 7
7747: PUSH
7748: LD_VAR 0 8
7752: PUSH
7753: LD_INT 4
7755: ARRAY
7756: PLUS
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7764: LD_ADDR_OWVAR 27
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 2
7774: PPUSH
7775: CALL_OW 12
7779: ST_TO_ADDR
// hc_gallery :=  ;
7780: LD_ADDR_OWVAR 33
7784: PUSH
7785: LD_STRING 
7787: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7788: LD_ADDR_OWVAR 29
7792: PUSH
7793: LD_INT 8
7795: PPUSH
7796: LD_INT 12
7798: PPUSH
7799: CALL_OW 12
7803: PUSH
7804: LD_INT 9
7806: PPUSH
7807: LD_INT 11
7809: PPUSH
7810: CALL_OW 12
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// hc_name :=  ;
7819: LD_ADDR_OWVAR 26
7823: PUSH
7824: LD_STRING 
7826: ST_TO_ADDR
// result := CreateHuman ;
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: CALL_OW 44
7836: ST_TO_ADDR
// end ;
7837: LD_VAR 0 3
7841: RET
// export function GetSpeed ( unit ) ; begin
7842: LD_INT 0
7844: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 464
7859: PUSH
7860: LD_INT 1
7862: ARRAY
7863: ST_TO_ADDR
// end ;
7864: LD_VAR 0 2
7868: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
// uc_nation = nation_nature ;
7877: LD_ADDR_OWVAR 21
7881: PUSH
7882: LD_INT 0
7884: ST_TO_ADDR
// uc_side = 0 ;
7885: LD_ADDR_OWVAR 20
7889: PUSH
7890: LD_INT 0
7892: ST_TO_ADDR
// l = 0 ;
7893: LD_ADDR_VAR 0 7
7897: PUSH
7898: LD_INT 0
7900: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7901: LD_ADDR_OWVAR 24
7905: PUSH
7906: LD_INT 0
7908: PPUSH
7909: LD_INT 5
7911: PPUSH
7912: CALL_OW 12
7916: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7917: LD_ADDR_OWVAR 35
7921: PUSH
7922: LD_INT 5
7924: NEG
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 12
7933: ST_TO_ADDR
// hc_gallery =  ;
7934: LD_ADDR_OWVAR 33
7938: PUSH
7939: LD_STRING 
7941: ST_TO_ADDR
// hc_class = class_apeman ;
7942: LD_ADDR_OWVAR 28
7946: PUSH
7947: LD_INT 12
7949: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7950: LD_ADDR_OWVAR 29
7954: PUSH
7955: LD_INT 11
7957: PPUSH
7958: LD_INT 13
7960: PPUSH
7961: CALL_OW 12
7965: PUSH
7966: LD_INT 10
7968: PPUSH
7969: LD_INT 11
7971: PPUSH
7972: CALL_OW 12
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// hc_sex = sex_male ;
7981: LD_ADDR_OWVAR 27
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7989: LD_ADDR_OWVAR 31
7993: PUSH
7994: LD_INT 0
7996: PPUSH
7997: LD_INT 2
7999: PPUSH
8000: CALL_OW 12
8004: PUSH
8005: LD_INT 0
8007: PUSH
8008: LD_INT 0
8010: PUSH
8011: LD_INT 0
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: ST_TO_ADDR
// apeman = CreateHuman ;
8020: LD_ADDR_VAR 0 8
8024: PUSH
8025: CALL_OW 44
8029: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8030: LD_VAR 0 8
8034: PPUSH
8035: LD_VAR 0 1
8039: PPUSH
8040: LD_INT 0
8042: PPUSH
8043: CALL_OW 49
// l = l + 1 ;
8047: LD_ADDR_VAR 0 7
8051: PUSH
8052: LD_VAR 0 7
8056: PUSH
8057: LD_INT 1
8059: PLUS
8060: ST_TO_ADDR
// end until l = num1 ;
8061: LD_VAR 0 7
8065: PUSH
8066: LD_VAR 0 2
8070: EQUAL
8071: IFFALSE 7901
// l = 0 ;
8073: LD_ADDR_VAR 0 7
8077: PUSH
8078: LD_INT 0
8080: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8081: LD_ADDR_OWVAR 35
8085: PUSH
8086: LD_INT 0
8088: PPUSH
8089: LD_INT 25
8091: PPUSH
8092: CALL_OW 12
8096: ST_TO_ADDR
// hc_class = class_tiger ;
8097: LD_ADDR_OWVAR 28
8101: PUSH
8102: LD_INT 14
8104: ST_TO_ADDR
// hc_sex = sex_male ;
8105: LD_ADDR_OWVAR 27
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// hc_gallery = sandnature ;
8113: LD_ADDR_OWVAR 33
8117: PUSH
8118: LD_STRING sandnature
8120: ST_TO_ADDR
// hc_face_number = 3 ;
8121: LD_ADDR_OWVAR 34
8125: PUSH
8126: LD_INT 3
8128: ST_TO_ADDR
// tiger = CreateHuman ;
8129: LD_ADDR_VAR 0 9
8133: PUSH
8134: CALL_OW 44
8138: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8139: LD_VAR 0 9
8143: PPUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_INT 0
8151: PPUSH
8152: CALL_OW 49
// l = l + 1 ;
8156: LD_ADDR_VAR 0 7
8160: PUSH
8161: LD_VAR 0 7
8165: PUSH
8166: LD_INT 1
8168: PLUS
8169: ST_TO_ADDR
// end until l = num2 ;
8170: LD_VAR 0 7
8174: PUSH
8175: LD_VAR 0 3
8179: EQUAL
8180: IFFALSE 8081
// l = 0 ;
8182: LD_ADDR_VAR 0 7
8186: PUSH
8187: LD_INT 0
8189: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8190: LD_ADDR_OWVAR 28
8194: PUSH
8195: LD_INT 18
8197: ST_TO_ADDR
// hc_gallery = sandnature ;
8198: LD_ADDR_OWVAR 33
8202: PUSH
8203: LD_STRING sandnature
8205: ST_TO_ADDR
// hc_face_number = 1 ;
8206: LD_ADDR_OWVAR 34
8210: PUSH
8211: LD_INT 1
8213: ST_TO_ADDR
// bird = CreateHuman ;
8214: LD_ADDR_VAR 0 10
8218: PUSH
8219: CALL_OW 44
8223: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8224: LD_VAR 0 10
8228: PPUSH
8229: LD_INT 0
8231: PPUSH
8232: CALL_OW 51
// l = l + 1 ;
8236: LD_ADDR_VAR 0 7
8240: PUSH
8241: LD_VAR 0 7
8245: PUSH
8246: LD_INT 1
8248: PLUS
8249: ST_TO_ADDR
// end until l = num3 ;
8250: LD_VAR 0 7
8254: PUSH
8255: LD_VAR 0 4
8259: EQUAL
8260: IFFALSE 8190
// l = 0 ;
8262: LD_ADDR_VAR 0 7
8266: PUSH
8267: LD_INT 0
8269: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8270: LD_ADDR_OWVAR 28
8274: PUSH
8275: LD_INT 21
8277: ST_TO_ADDR
// hc_gallery = sandnature ;
8278: LD_ADDR_OWVAR 33
8282: PUSH
8283: LD_STRING sandnature
8285: ST_TO_ADDR
// hc_face_number = 5 ;
8286: LD_ADDR_OWVAR 34
8290: PUSH
8291: LD_INT 5
8293: ST_TO_ADDR
// horse := CreateHuman ;
8294: LD_ADDR_VAR 0 11
8298: PUSH
8299: CALL_OW 44
8303: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8304: LD_VAR 0 11
8308: PPUSH
8309: LD_VAR 0 1
8313: PPUSH
8314: LD_INT 0
8316: PPUSH
8317: CALL_OW 49
// l = l + 1 ;
8321: LD_ADDR_VAR 0 7
8325: PUSH
8326: LD_VAR 0 7
8330: PUSH
8331: LD_INT 1
8333: PLUS
8334: ST_TO_ADDR
// end until l = num4 ;
8335: LD_VAR 0 7
8339: PUSH
8340: LD_VAR 0 5
8344: EQUAL
8345: IFFALSE 8270
// end ;
8347: LD_VAR 0 6
8351: RET
// export function PrepareComm ; begin
8352: LD_INT 0
8354: PPUSH
// uc_side := 1 ;
8355: LD_ADDR_OWVAR 20
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// uc_nation := 1 ;
8363: LD_ADDR_OWVAR 21
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// hc_gallery :=  ;
8371: LD_ADDR_OWVAR 33
8375: PUSH
8376: LD_STRING 
8378: ST_TO_ADDR
// hc_name :=  ;
8379: LD_ADDR_OWVAR 26
8383: PUSH
8384: LD_STRING 
8386: ST_TO_ADDR
// hc_class := 1 ;
8387: LD_ADDR_OWVAR 28
8391: PUSH
8392: LD_INT 1
8394: ST_TO_ADDR
// hc_sex := sex_male ;
8395: LD_ADDR_OWVAR 27
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// am_comander := CreateHuman ;
8403: LD_ADDR_EXP 46
8407: PUSH
8408: CALL_OW 44
8412: ST_TO_ADDR
// uc_side := 3 ;
8413: LD_ADDR_OWVAR 20
8417: PUSH
8418: LD_INT 3
8420: ST_TO_ADDR
// uc_nation := 3 ;
8421: LD_ADDR_OWVAR 21
8425: PUSH
8426: LD_INT 3
8428: ST_TO_ADDR
// ru_comander := CreateHuman ;
8429: LD_ADDR_EXP 47
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// uc_side := 2 ;
8439: LD_ADDR_OWVAR 20
8443: PUSH
8444: LD_INT 2
8446: ST_TO_ADDR
// uc_nation := 2 ;
8447: LD_ADDR_OWVAR 21
8451: PUSH
8452: LD_INT 2
8454: ST_TO_ADDR
// hc_name := Heike Steyer ;
8455: LD_ADDR_OWVAR 26
8459: PUSH
8460: LD_STRING Heike Steyer
8462: ST_TO_ADDR
// hc_sex := sex_female ;
8463: LD_ADDR_OWVAR 27
8467: PUSH
8468: LD_INT 2
8470: ST_TO_ADDR
// hc_gallery := sandar ;
8471: LD_ADDR_OWVAR 33
8475: PUSH
8476: LD_STRING sandar
8478: ST_TO_ADDR
// hc_face_number := 14 ;
8479: LD_ADDR_OWVAR 34
8483: PUSH
8484: LD_INT 14
8486: ST_TO_ADDR
// ar_comander := CreateHuman ;
8487: LD_ADDR_EXP 48
8491: PUSH
8492: CALL_OW 44
8496: ST_TO_ADDR
// end ;
8497: LD_VAR 0 1
8501: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8502: LD_INT 0
8504: PPUSH
8505: PPUSH
8506: PPUSH
// list := [ ] ;
8507: LD_ADDR_VAR 0 4
8511: PUSH
8512: EMPTY
8513: ST_TO_ADDR
// for i = 1 to filter do
8514: LD_ADDR_VAR 0 5
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_VAR 0 1
8528: PUSH
8529: FOR_TO
8530: IFFALSE 8579
// if GetSpeed ( filter [ i ] ) < speed then
8532: LD_VAR 0 1
8536: PUSH
8537: LD_VAR 0 5
8541: ARRAY
8542: PPUSH
8543: CALL 7842 0 1
8547: PUSH
8548: LD_VAR 0 2
8552: LESS
8553: IFFALSE 8577
// list := list ^ filter [ i ] ;
8555: LD_ADDR_VAR 0 4
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_VAR 0 1
8569: PUSH
8570: LD_VAR 0 5
8574: ARRAY
8575: ADD
8576: ST_TO_ADDR
8577: GO 8529
8579: POP
8580: POP
// result := list ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_VAR 0 4
8590: ST_TO_ADDR
// end ; end_of_file
8591: LD_VAR 0 3
8595: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
8596: GO 8598
8598: DISABLE
// begin ru_radar := 98 ;
8599: LD_ADDR_EXP 52
8603: PUSH
8604: LD_INT 98
8606: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8607: LD_ADDR_EXP 53
8611: PUSH
8612: LD_INT 89
8614: ST_TO_ADDR
// us_hack := 99 ;
8615: LD_ADDR_EXP 54
8619: PUSH
8620: LD_INT 99
8622: ST_TO_ADDR
// us_artillery := 97 ;
8623: LD_ADDR_EXP 55
8627: PUSH
8628: LD_INT 97
8630: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8631: LD_ADDR_EXP 56
8635: PUSH
8636: LD_INT 91
8638: ST_TO_ADDR
// end ; end_of_file end_of_file
8639: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8640: GO 8642
8642: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8643: LD_STRING initStreamRollete();
8645: PPUSH
8646: CALL_OW 559
// InitStreamMode ;
8650: CALL 8659 0 0
// DefineStreamItems ( ) ;
8654: CALL 9099 0 0
// end ;
8658: END
// function InitStreamMode ; begin
8659: LD_INT 0
8661: PPUSH
// streamModeActive := false ;
8662: LD_ADDR_EXP 57
8666: PUSH
8667: LD_INT 0
8669: ST_TO_ADDR
// normalCounter := 26 ;
8670: LD_ADDR_EXP 58
8674: PUSH
8675: LD_INT 26
8677: ST_TO_ADDR
// hardcoreCounter := 12 ;
8678: LD_ADDR_EXP 59
8682: PUSH
8683: LD_INT 12
8685: ST_TO_ADDR
// sRocket := false ;
8686: LD_ADDR_EXP 62
8690: PUSH
8691: LD_INT 0
8693: ST_TO_ADDR
// sSpeed := false ;
8694: LD_ADDR_EXP 61
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// sEngine := false ;
8702: LD_ADDR_EXP 63
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// sSpec := false ;
8710: LD_ADDR_EXP 60
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// sLevel := false ;
8718: LD_ADDR_EXP 64
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// sArmoury := false ;
8726: LD_ADDR_EXP 65
8730: PUSH
8731: LD_INT 0
8733: ST_TO_ADDR
// sRadar := false ;
8734: LD_ADDR_EXP 66
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// sBunker := false ;
8742: LD_ADDR_EXP 67
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// sHack := false ;
8750: LD_ADDR_EXP 68
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// sFire := false ;
8758: LD_ADDR_EXP 69
8762: PUSH
8763: LD_INT 0
8765: ST_TO_ADDR
// sRefresh := false ;
8766: LD_ADDR_EXP 70
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// sExp := false ;
8774: LD_ADDR_EXP 71
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// sDepot := false ;
8782: LD_ADDR_EXP 72
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// sFlag := false ;
8790: LD_ADDR_EXP 73
8794: PUSH
8795: LD_INT 0
8797: ST_TO_ADDR
// sKamikadze := false ;
8798: LD_ADDR_EXP 81
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// sTroll := false ;
8806: LD_ADDR_EXP 82
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// sSlow := false ;
8814: LD_ADDR_EXP 83
8818: PUSH
8819: LD_INT 0
8821: ST_TO_ADDR
// sLack := false ;
8822: LD_ADDR_EXP 84
8826: PUSH
8827: LD_INT 0
8829: ST_TO_ADDR
// sTank := false ;
8830: LD_ADDR_EXP 86
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// sRemote := false ;
8838: LD_ADDR_EXP 87
8842: PUSH
8843: LD_INT 0
8845: ST_TO_ADDR
// sPowell := false ;
8846: LD_ADDR_EXP 88
8850: PUSH
8851: LD_INT 0
8853: ST_TO_ADDR
// sTeleport := false ;
8854: LD_ADDR_EXP 91
8858: PUSH
8859: LD_INT 0
8861: ST_TO_ADDR
// sOilTower := false ;
8862: LD_ADDR_EXP 93
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// sShovel := false ;
8870: LD_ADDR_EXP 94
8874: PUSH
8875: LD_INT 0
8877: ST_TO_ADDR
// sSheik := false ;
8878: LD_ADDR_EXP 95
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// sEarthquake := false ;
8886: LD_ADDR_EXP 97
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// sAI := false ;
8894: LD_ADDR_EXP 98
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// sCargo := false ;
8902: LD_ADDR_EXP 101
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// sDLaser := false ;
8910: LD_ADDR_EXP 102
8914: PUSH
8915: LD_INT 0
8917: ST_TO_ADDR
// sExchange := false ;
8918: LD_ADDR_EXP 103
8922: PUSH
8923: LD_INT 0
8925: ST_TO_ADDR
// sFac := false ;
8926: LD_ADDR_EXP 104
8930: PUSH
8931: LD_INT 0
8933: ST_TO_ADDR
// sPower := false ;
8934: LD_ADDR_EXP 105
8938: PUSH
8939: LD_INT 0
8941: ST_TO_ADDR
// sRandom := false ;
8942: LD_ADDR_EXP 106
8946: PUSH
8947: LD_INT 0
8949: ST_TO_ADDR
// sShield := false ;
8950: LD_ADDR_EXP 107
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// sTime := false ;
8958: LD_ADDR_EXP 108
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// sTools := false ;
8966: LD_ADDR_EXP 109
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// sSold := false ;
8974: LD_ADDR_EXP 74
8978: PUSH
8979: LD_INT 0
8981: ST_TO_ADDR
// sDiff := false ;
8982: LD_ADDR_EXP 75
8986: PUSH
8987: LD_INT 0
8989: ST_TO_ADDR
// sFog := false ;
8990: LD_ADDR_EXP 78
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// sReset := false ;
8998: LD_ADDR_EXP 79
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// sSun := false ;
9006: LD_ADDR_EXP 80
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// sTiger := false ;
9014: LD_ADDR_EXP 76
9018: PUSH
9019: LD_INT 0
9021: ST_TO_ADDR
// sBomb := false ;
9022: LD_ADDR_EXP 77
9026: PUSH
9027: LD_INT 0
9029: ST_TO_ADDR
// sWound := false ;
9030: LD_ADDR_EXP 85
9034: PUSH
9035: LD_INT 0
9037: ST_TO_ADDR
// sBetray := false ;
9038: LD_ADDR_EXP 89
9042: PUSH
9043: LD_INT 0
9045: ST_TO_ADDR
// sContamin := false ;
9046: LD_ADDR_EXP 90
9050: PUSH
9051: LD_INT 0
9053: ST_TO_ADDR
// sOil := false ;
9054: LD_ADDR_EXP 92
9058: PUSH
9059: LD_INT 0
9061: ST_TO_ADDR
// sStu := false ;
9062: LD_ADDR_EXP 96
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// sBazooka := false ;
9070: LD_ADDR_EXP 99
9074: PUSH
9075: LD_INT 0
9077: ST_TO_ADDR
// sMortar := false ;
9078: LD_ADDR_EXP 100
9082: PUSH
9083: LD_INT 0
9085: ST_TO_ADDR
// sRanger := false ;
9086: LD_ADDR_EXP 110
9090: PUSH
9091: LD_INT 0
9093: ST_TO_ADDR
// end ;
9094: LD_VAR 0 1
9098: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9099: LD_INT 0
9101: PPUSH
9102: PPUSH
9103: PPUSH
9104: PPUSH
9105: PPUSH
// result := [ ] ;
9106: LD_ADDR_VAR 0 1
9110: PUSH
9111: EMPTY
9112: ST_TO_ADDR
// if campaign_id = 1 then
9113: LD_OWVAR 69
9117: PUSH
9118: LD_INT 1
9120: EQUAL
9121: IFFALSE 12069
// begin case mission_number of 1 :
9123: LD_OWVAR 70
9127: PUSH
9128: LD_INT 1
9130: DOUBLE
9131: EQUAL
9132: IFTRUE 9136
9134: GO 9200
9136: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9137: LD_ADDR_VAR 0 1
9141: PUSH
9142: LD_INT 2
9144: PUSH
9145: LD_INT 4
9147: PUSH
9148: LD_INT 11
9150: PUSH
9151: LD_INT 12
9153: PUSH
9154: LD_INT 15
9156: PUSH
9157: LD_INT 16
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 23
9165: PUSH
9166: LD_INT 26
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 101
9182: PUSH
9183: LD_INT 102
9185: PUSH
9186: LD_INT 106
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: ST_TO_ADDR
9198: GO 12069
9200: LD_INT 2
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9280
9208: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9209: LD_ADDR_VAR 0 1
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 11
9222: PUSH
9223: LD_INT 12
9225: PUSH
9226: LD_INT 15
9228: PUSH
9229: LD_INT 16
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 23
9237: PUSH
9238: LD_INT 26
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 101
9254: PUSH
9255: LD_INT 102
9257: PUSH
9258: LD_INT 105
9260: PUSH
9261: LD_INT 106
9263: PUSH
9264: LD_INT 108
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: ST_TO_ADDR
9278: GO 12069
9280: LD_INT 3
9282: DOUBLE
9283: EQUAL
9284: IFTRUE 9288
9286: GO 9364
9288: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9289: LD_ADDR_VAR 0 1
9293: PUSH
9294: LD_INT 2
9296: PUSH
9297: LD_INT 4
9299: PUSH
9300: LD_INT 5
9302: PUSH
9303: LD_INT 11
9305: PUSH
9306: LD_INT 12
9308: PUSH
9309: LD_INT 15
9311: PUSH
9312: LD_INT 16
9314: PUSH
9315: LD_INT 22
9317: PUSH
9318: LD_INT 26
9320: PUSH
9321: LD_INT 36
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 101
9338: PUSH
9339: LD_INT 102
9341: PUSH
9342: LD_INT 105
9344: PUSH
9345: LD_INT 106
9347: PUSH
9348: LD_INT 108
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: ST_TO_ADDR
9362: GO 12069
9364: LD_INT 4
9366: DOUBLE
9367: EQUAL
9368: IFTRUE 9372
9370: GO 9456
9372: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9373: LD_ADDR_VAR 0 1
9377: PUSH
9378: LD_INT 2
9380: PUSH
9381: LD_INT 4
9383: PUSH
9384: LD_INT 5
9386: PUSH
9387: LD_INT 8
9389: PUSH
9390: LD_INT 11
9392: PUSH
9393: LD_INT 12
9395: PUSH
9396: LD_INT 15
9398: PUSH
9399: LD_INT 16
9401: PUSH
9402: LD_INT 22
9404: PUSH
9405: LD_INT 23
9407: PUSH
9408: LD_INT 26
9410: PUSH
9411: LD_INT 36
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 101
9430: PUSH
9431: LD_INT 102
9433: PUSH
9434: LD_INT 105
9436: PUSH
9437: LD_INT 106
9439: PUSH
9440: LD_INT 108
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: ST_TO_ADDR
9454: GO 12069
9456: LD_INT 5
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9564
9464: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9465: LD_ADDR_VAR 0 1
9469: PUSH
9470: LD_INT 2
9472: PUSH
9473: LD_INT 4
9475: PUSH
9476: LD_INT 5
9478: PUSH
9479: LD_INT 6
9481: PUSH
9482: LD_INT 8
9484: PUSH
9485: LD_INT 11
9487: PUSH
9488: LD_INT 12
9490: PUSH
9491: LD_INT 15
9493: PUSH
9494: LD_INT 16
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_INT 23
9502: PUSH
9503: LD_INT 25
9505: PUSH
9506: LD_INT 26
9508: PUSH
9509: LD_INT 36
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 101
9530: PUSH
9531: LD_INT 102
9533: PUSH
9534: LD_INT 105
9536: PUSH
9537: LD_INT 106
9539: PUSH
9540: LD_INT 108
9542: PUSH
9543: LD_INT 109
9545: PUSH
9546: LD_INT 112
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: ST_TO_ADDR
9562: GO 12069
9564: LD_INT 6
9566: DOUBLE
9567: EQUAL
9568: IFTRUE 9572
9570: GO 9692
9572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9573: LD_ADDR_VAR 0 1
9577: PUSH
9578: LD_INT 2
9580: PUSH
9581: LD_INT 4
9583: PUSH
9584: LD_INT 5
9586: PUSH
9587: LD_INT 6
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: LD_INT 11
9595: PUSH
9596: LD_INT 12
9598: PUSH
9599: LD_INT 15
9601: PUSH
9602: LD_INT 16
9604: PUSH
9605: LD_INT 20
9607: PUSH
9608: LD_INT 21
9610: PUSH
9611: LD_INT 22
9613: PUSH
9614: LD_INT 23
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 26
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 31
9628: PUSH
9629: LD_INT 32
9631: PUSH
9632: LD_INT 36
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 101
9658: PUSH
9659: LD_INT 102
9661: PUSH
9662: LD_INT 105
9664: PUSH
9665: LD_INT 106
9667: PUSH
9668: LD_INT 108
9670: PUSH
9671: LD_INT 109
9673: PUSH
9674: LD_INT 112
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: ST_TO_ADDR
9690: GO 12069
9692: LD_INT 7
9694: DOUBLE
9695: EQUAL
9696: IFTRUE 9700
9698: GO 9800
9700: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9701: LD_ADDR_VAR 0 1
9705: PUSH
9706: LD_INT 2
9708: PUSH
9709: LD_INT 4
9711: PUSH
9712: LD_INT 5
9714: PUSH
9715: LD_INT 7
9717: PUSH
9718: LD_INT 11
9720: PUSH
9721: LD_INT 12
9723: PUSH
9724: LD_INT 15
9726: PUSH
9727: LD_INT 16
9729: PUSH
9730: LD_INT 20
9732: PUSH
9733: LD_INT 21
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: LD_INT 23
9741: PUSH
9742: LD_INT 25
9744: PUSH
9745: LD_INT 26
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 101
9766: PUSH
9767: LD_INT 102
9769: PUSH
9770: LD_INT 103
9772: PUSH
9773: LD_INT 105
9775: PUSH
9776: LD_INT 106
9778: PUSH
9779: LD_INT 108
9781: PUSH
9782: LD_INT 112
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: ST_TO_ADDR
9798: GO 12069
9800: LD_INT 8
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 9936
9808: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9809: LD_ADDR_VAR 0 1
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: LD_INT 4
9819: PUSH
9820: LD_INT 5
9822: PUSH
9823: LD_INT 6
9825: PUSH
9826: LD_INT 7
9828: PUSH
9829: LD_INT 8
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: LD_INT 12
9837: PUSH
9838: LD_INT 15
9840: PUSH
9841: LD_INT 16
9843: PUSH
9844: LD_INT 20
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 30
9864: PUSH
9865: LD_INT 31
9867: PUSH
9868: LD_INT 32
9870: PUSH
9871: LD_INT 36
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 101
9898: PUSH
9899: LD_INT 102
9901: PUSH
9902: LD_INT 103
9904: PUSH
9905: LD_INT 105
9907: PUSH
9908: LD_INT 106
9910: PUSH
9911: LD_INT 108
9913: PUSH
9914: LD_INT 109
9916: PUSH
9917: LD_INT 112
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: ST_TO_ADDR
9934: GO 12069
9936: LD_INT 9
9938: DOUBLE
9939: EQUAL
9940: IFTRUE 9944
9942: GO 10080
9944: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9945: LD_ADDR_VAR 0 1
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: LD_INT 4
9955: PUSH
9956: LD_INT 5
9958: PUSH
9959: LD_INT 6
9961: PUSH
9962: LD_INT 7
9964: PUSH
9965: LD_INT 8
9967: PUSH
9968: LD_INT 11
9970: PUSH
9971: LD_INT 12
9973: PUSH
9974: LD_INT 15
9976: PUSH
9977: LD_INT 16
9979: PUSH
9980: LD_INT 20
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 22
9988: PUSH
9989: LD_INT 23
9991: PUSH
9992: LD_INT 25
9994: PUSH
9995: LD_INT 26
9997: PUSH
9998: LD_INT 28
10000: PUSH
10001: LD_INT 30
10003: PUSH
10004: LD_INT 31
10006: PUSH
10007: LD_INT 32
10009: PUSH
10010: LD_INT 36
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 101
10038: PUSH
10039: LD_INT 102
10041: PUSH
10042: LD_INT 103
10044: PUSH
10045: LD_INT 105
10047: PUSH
10048: LD_INT 106
10050: PUSH
10051: LD_INT 108
10053: PUSH
10054: LD_INT 109
10056: PUSH
10057: LD_INT 112
10059: PUSH
10060: LD_INT 114
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: ST_TO_ADDR
10078: GO 12069
10080: LD_INT 10
10082: DOUBLE
10083: EQUAL
10084: IFTRUE 10088
10086: GO 10272
10088: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10089: LD_ADDR_VAR 0 1
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: LD_INT 4
10099: PUSH
10100: LD_INT 5
10102: PUSH
10103: LD_INT 6
10105: PUSH
10106: LD_INT 7
10108: PUSH
10109: LD_INT 8
10111: PUSH
10112: LD_INT 9
10114: PUSH
10115: LD_INT 10
10117: PUSH
10118: LD_INT 11
10120: PUSH
10121: LD_INT 12
10123: PUSH
10124: LD_INT 13
10126: PUSH
10127: LD_INT 14
10129: PUSH
10130: LD_INT 15
10132: PUSH
10133: LD_INT 16
10135: PUSH
10136: LD_INT 17
10138: PUSH
10139: LD_INT 18
10141: PUSH
10142: LD_INT 19
10144: PUSH
10145: LD_INT 20
10147: PUSH
10148: LD_INT 21
10150: PUSH
10151: LD_INT 22
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 24
10159: PUSH
10160: LD_INT 25
10162: PUSH
10163: LD_INT 26
10165: PUSH
10166: LD_INT 28
10168: PUSH
10169: LD_INT 30
10171: PUSH
10172: LD_INT 31
10174: PUSH
10175: LD_INT 32
10177: PUSH
10178: LD_INT 36
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 101
10214: PUSH
10215: LD_INT 102
10217: PUSH
10218: LD_INT 103
10220: PUSH
10221: LD_INT 104
10223: PUSH
10224: LD_INT 105
10226: PUSH
10227: LD_INT 106
10229: PUSH
10230: LD_INT 107
10232: PUSH
10233: LD_INT 108
10235: PUSH
10236: LD_INT 109
10238: PUSH
10239: LD_INT 110
10241: PUSH
10242: LD_INT 111
10244: PUSH
10245: LD_INT 112
10247: PUSH
10248: LD_INT 114
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: ST_TO_ADDR
10270: GO 12069
10272: LD_INT 11
10274: DOUBLE
10275: EQUAL
10276: IFTRUE 10280
10278: GO 10472
10280: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10281: LD_ADDR_VAR 0 1
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 3
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: LD_INT 5
10297: PUSH
10298: LD_INT 6
10300: PUSH
10301: LD_INT 7
10303: PUSH
10304: LD_INT 8
10306: PUSH
10307: LD_INT 9
10309: PUSH
10310: LD_INT 10
10312: PUSH
10313: LD_INT 11
10315: PUSH
10316: LD_INT 12
10318: PUSH
10319: LD_INT 13
10321: PUSH
10322: LD_INT 14
10324: PUSH
10325: LD_INT 15
10327: PUSH
10328: LD_INT 16
10330: PUSH
10331: LD_INT 17
10333: PUSH
10334: LD_INT 18
10336: PUSH
10337: LD_INT 19
10339: PUSH
10340: LD_INT 20
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 22
10348: PUSH
10349: LD_INT 23
10351: PUSH
10352: LD_INT 24
10354: PUSH
10355: LD_INT 25
10357: PUSH
10358: LD_INT 26
10360: PUSH
10361: LD_INT 28
10363: PUSH
10364: LD_INT 30
10366: PUSH
10367: LD_INT 31
10369: PUSH
10370: LD_INT 32
10372: PUSH
10373: LD_INT 34
10375: PUSH
10376: LD_INT 36
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 101
10414: PUSH
10415: LD_INT 102
10417: PUSH
10418: LD_INT 103
10420: PUSH
10421: LD_INT 104
10423: PUSH
10424: LD_INT 105
10426: PUSH
10427: LD_INT 106
10429: PUSH
10430: LD_INT 107
10432: PUSH
10433: LD_INT 108
10435: PUSH
10436: LD_INT 109
10438: PUSH
10439: LD_INT 110
10441: PUSH
10442: LD_INT 111
10444: PUSH
10445: LD_INT 112
10447: PUSH
10448: LD_INT 114
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: ST_TO_ADDR
10470: GO 12069
10472: LD_INT 12
10474: DOUBLE
10475: EQUAL
10476: IFTRUE 10480
10478: GO 10688
10480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: LD_INT 1
10488: PUSH
10489: LD_INT 2
10491: PUSH
10492: LD_INT 3
10494: PUSH
10495: LD_INT 4
10497: PUSH
10498: LD_INT 5
10500: PUSH
10501: LD_INT 6
10503: PUSH
10504: LD_INT 7
10506: PUSH
10507: LD_INT 8
10509: PUSH
10510: LD_INT 9
10512: PUSH
10513: LD_INT 10
10515: PUSH
10516: LD_INT 11
10518: PUSH
10519: LD_INT 12
10521: PUSH
10522: LD_INT 13
10524: PUSH
10525: LD_INT 14
10527: PUSH
10528: LD_INT 15
10530: PUSH
10531: LD_INT 16
10533: PUSH
10534: LD_INT 17
10536: PUSH
10537: LD_INT 18
10539: PUSH
10540: LD_INT 19
10542: PUSH
10543: LD_INT 20
10545: PUSH
10546: LD_INT 21
10548: PUSH
10549: LD_INT 22
10551: PUSH
10552: LD_INT 23
10554: PUSH
10555: LD_INT 24
10557: PUSH
10558: LD_INT 25
10560: PUSH
10561: LD_INT 26
10563: PUSH
10564: LD_INT 27
10566: PUSH
10567: LD_INT 28
10569: PUSH
10570: LD_INT 30
10572: PUSH
10573: LD_INT 31
10575: PUSH
10576: LD_INT 32
10578: PUSH
10579: LD_INT 33
10581: PUSH
10582: LD_INT 34
10584: PUSH
10585: LD_INT 36
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 101
10626: PUSH
10627: LD_INT 102
10629: PUSH
10630: LD_INT 103
10632: PUSH
10633: LD_INT 104
10635: PUSH
10636: LD_INT 105
10638: PUSH
10639: LD_INT 106
10641: PUSH
10642: LD_INT 107
10644: PUSH
10645: LD_INT 108
10647: PUSH
10648: LD_INT 109
10650: PUSH
10651: LD_INT 110
10653: PUSH
10654: LD_INT 111
10656: PUSH
10657: LD_INT 112
10659: PUSH
10660: LD_INT 113
10662: PUSH
10663: LD_INT 114
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: ST_TO_ADDR
10686: GO 12069
10688: LD_INT 13
10690: DOUBLE
10691: EQUAL
10692: IFTRUE 10696
10694: GO 10904
10696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10697: LD_ADDR_VAR 0 1
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 3
10710: PUSH
10711: LD_INT 4
10713: PUSH
10714: LD_INT 5
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: LD_INT 7
10722: PUSH
10723: LD_INT 8
10725: PUSH
10726: LD_INT 9
10728: PUSH
10729: LD_INT 10
10731: PUSH
10732: LD_INT 11
10734: PUSH
10735: LD_INT 12
10737: PUSH
10738: LD_INT 13
10740: PUSH
10741: LD_INT 14
10743: PUSH
10744: LD_INT 15
10746: PUSH
10747: LD_INT 16
10749: PUSH
10750: LD_INT 17
10752: PUSH
10753: LD_INT 18
10755: PUSH
10756: LD_INT 19
10758: PUSH
10759: LD_INT 20
10761: PUSH
10762: LD_INT 21
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 23
10770: PUSH
10771: LD_INT 24
10773: PUSH
10774: LD_INT 25
10776: PUSH
10777: LD_INT 26
10779: PUSH
10780: LD_INT 27
10782: PUSH
10783: LD_INT 28
10785: PUSH
10786: LD_INT 30
10788: PUSH
10789: LD_INT 31
10791: PUSH
10792: LD_INT 32
10794: PUSH
10795: LD_INT 33
10797: PUSH
10798: LD_INT 34
10800: PUSH
10801: LD_INT 36
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 102
10845: PUSH
10846: LD_INT 103
10848: PUSH
10849: LD_INT 104
10851: PUSH
10852: LD_INT 105
10854: PUSH
10855: LD_INT 106
10857: PUSH
10858: LD_INT 107
10860: PUSH
10861: LD_INT 108
10863: PUSH
10864: LD_INT 109
10866: PUSH
10867: LD_INT 110
10869: PUSH
10870: LD_INT 111
10872: PUSH
10873: LD_INT 112
10875: PUSH
10876: LD_INT 113
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: ST_TO_ADDR
10902: GO 12069
10904: LD_INT 14
10906: DOUBLE
10907: EQUAL
10908: IFTRUE 10912
10910: GO 11124
10912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10913: LD_ADDR_VAR 0 1
10917: PUSH
10918: LD_INT 1
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: LD_INT 3
10926: PUSH
10927: LD_INT 4
10929: PUSH
10930: LD_INT 5
10932: PUSH
10933: LD_INT 6
10935: PUSH
10936: LD_INT 7
10938: PUSH
10939: LD_INT 8
10941: PUSH
10942: LD_INT 9
10944: PUSH
10945: LD_INT 10
10947: PUSH
10948: LD_INT 11
10950: PUSH
10951: LD_INT 12
10953: PUSH
10954: LD_INT 13
10956: PUSH
10957: LD_INT 14
10959: PUSH
10960: LD_INT 15
10962: PUSH
10963: LD_INT 16
10965: PUSH
10966: LD_INT 17
10968: PUSH
10969: LD_INT 18
10971: PUSH
10972: LD_INT 19
10974: PUSH
10975: LD_INT 20
10977: PUSH
10978: LD_INT 21
10980: PUSH
10981: LD_INT 22
10983: PUSH
10984: LD_INT 23
10986: PUSH
10987: LD_INT 24
10989: PUSH
10990: LD_INT 25
10992: PUSH
10993: LD_INT 26
10995: PUSH
10996: LD_INT 27
10998: PUSH
10999: LD_INT 28
11001: PUSH
11002: LD_INT 29
11004: PUSH
11005: LD_INT 30
11007: PUSH
11008: LD_INT 31
11010: PUSH
11011: LD_INT 32
11013: PUSH
11014: LD_INT 33
11016: PUSH
11017: LD_INT 34
11019: PUSH
11020: LD_INT 36
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 101
11062: PUSH
11063: LD_INT 102
11065: PUSH
11066: LD_INT 103
11068: PUSH
11069: LD_INT 104
11071: PUSH
11072: LD_INT 105
11074: PUSH
11075: LD_INT 106
11077: PUSH
11078: LD_INT 107
11080: PUSH
11081: LD_INT 108
11083: PUSH
11084: LD_INT 109
11086: PUSH
11087: LD_INT 110
11089: PUSH
11090: LD_INT 111
11092: PUSH
11093: LD_INT 112
11095: PUSH
11096: LD_INT 113
11098: PUSH
11099: LD_INT 114
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: ST_TO_ADDR
11122: GO 12069
11124: LD_INT 15
11126: DOUBLE
11127: EQUAL
11128: IFTRUE 11132
11130: GO 11344
11132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: LD_INT 4
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: LD_INT 6
11155: PUSH
11156: LD_INT 7
11158: PUSH
11159: LD_INT 8
11161: PUSH
11162: LD_INT 9
11164: PUSH
11165: LD_INT 10
11167: PUSH
11168: LD_INT 11
11170: PUSH
11171: LD_INT 12
11173: PUSH
11174: LD_INT 13
11176: PUSH
11177: LD_INT 14
11179: PUSH
11180: LD_INT 15
11182: PUSH
11183: LD_INT 16
11185: PUSH
11186: LD_INT 17
11188: PUSH
11189: LD_INT 18
11191: PUSH
11192: LD_INT 19
11194: PUSH
11195: LD_INT 20
11197: PUSH
11198: LD_INT 21
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_INT 23
11206: PUSH
11207: LD_INT 24
11209: PUSH
11210: LD_INT 25
11212: PUSH
11213: LD_INT 26
11215: PUSH
11216: LD_INT 27
11218: PUSH
11219: LD_INT 28
11221: PUSH
11222: LD_INT 29
11224: PUSH
11225: LD_INT 30
11227: PUSH
11228: LD_INT 31
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: LD_INT 33
11236: PUSH
11237: LD_INT 34
11239: PUSH
11240: LD_INT 36
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 101
11282: PUSH
11283: LD_INT 102
11285: PUSH
11286: LD_INT 103
11288: PUSH
11289: LD_INT 104
11291: PUSH
11292: LD_INT 105
11294: PUSH
11295: LD_INT 106
11297: PUSH
11298: LD_INT 107
11300: PUSH
11301: LD_INT 108
11303: PUSH
11304: LD_INT 109
11306: PUSH
11307: LD_INT 110
11309: PUSH
11310: LD_INT 111
11312: PUSH
11313: LD_INT 112
11315: PUSH
11316: LD_INT 113
11318: PUSH
11319: LD_INT 114
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: ST_TO_ADDR
11342: GO 12069
11344: LD_INT 16
11346: DOUBLE
11347: EQUAL
11348: IFTRUE 11352
11350: GO 11476
11352: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11353: LD_ADDR_VAR 0 1
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_INT 4
11363: PUSH
11364: LD_INT 5
11366: PUSH
11367: LD_INT 7
11369: PUSH
11370: LD_INT 11
11372: PUSH
11373: LD_INT 12
11375: PUSH
11376: LD_INT 15
11378: PUSH
11379: LD_INT 16
11381: PUSH
11382: LD_INT 20
11384: PUSH
11385: LD_INT 21
11387: PUSH
11388: LD_INT 22
11390: PUSH
11391: LD_INT 23
11393: PUSH
11394: LD_INT 25
11396: PUSH
11397: LD_INT 26
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 31
11405: PUSH
11406: LD_INT 32
11408: PUSH
11409: LD_INT 33
11411: PUSH
11412: LD_INT 34
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 101
11438: PUSH
11439: LD_INT 102
11441: PUSH
11442: LD_INT 103
11444: PUSH
11445: LD_INT 106
11447: PUSH
11448: LD_INT 108
11450: PUSH
11451: LD_INT 112
11453: PUSH
11454: LD_INT 113
11456: PUSH
11457: LD_INT 114
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: ST_TO_ADDR
11474: GO 12069
11476: LD_INT 17
11478: DOUBLE
11479: EQUAL
11480: IFTRUE 11484
11482: GO 11696
11484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: LD_INT 3
11498: PUSH
11499: LD_INT 4
11501: PUSH
11502: LD_INT 5
11504: PUSH
11505: LD_INT 6
11507: PUSH
11508: LD_INT 7
11510: PUSH
11511: LD_INT 8
11513: PUSH
11514: LD_INT 9
11516: PUSH
11517: LD_INT 10
11519: PUSH
11520: LD_INT 11
11522: PUSH
11523: LD_INT 12
11525: PUSH
11526: LD_INT 13
11528: PUSH
11529: LD_INT 14
11531: PUSH
11532: LD_INT 15
11534: PUSH
11535: LD_INT 16
11537: PUSH
11538: LD_INT 17
11540: PUSH
11541: LD_INT 18
11543: PUSH
11544: LD_INT 19
11546: PUSH
11547: LD_INT 20
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 23
11558: PUSH
11559: LD_INT 24
11561: PUSH
11562: LD_INT 25
11564: PUSH
11565: LD_INT 26
11567: PUSH
11568: LD_INT 27
11570: PUSH
11571: LD_INT 28
11573: PUSH
11574: LD_INT 29
11576: PUSH
11577: LD_INT 30
11579: PUSH
11580: LD_INT 31
11582: PUSH
11583: LD_INT 32
11585: PUSH
11586: LD_INT 33
11588: PUSH
11589: LD_INT 34
11591: PUSH
11592: LD_INT 36
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 101
11634: PUSH
11635: LD_INT 102
11637: PUSH
11638: LD_INT 103
11640: PUSH
11641: LD_INT 104
11643: PUSH
11644: LD_INT 105
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 107
11652: PUSH
11653: LD_INT 108
11655: PUSH
11656: LD_INT 109
11658: PUSH
11659: LD_INT 110
11661: PUSH
11662: LD_INT 111
11664: PUSH
11665: LD_INT 112
11667: PUSH
11668: LD_INT 113
11670: PUSH
11671: LD_INT 114
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: ST_TO_ADDR
11694: GO 12069
11696: LD_INT 18
11698: DOUBLE
11699: EQUAL
11700: IFTRUE 11704
11702: GO 11840
11704: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 4
11715: PUSH
11716: LD_INT 5
11718: PUSH
11719: LD_INT 7
11721: PUSH
11722: LD_INT 11
11724: PUSH
11725: LD_INT 12
11727: PUSH
11728: LD_INT 15
11730: PUSH
11731: LD_INT 16
11733: PUSH
11734: LD_INT 20
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 22
11742: PUSH
11743: LD_INT 23
11745: PUSH
11746: LD_INT 25
11748: PUSH
11749: LD_INT 26
11751: PUSH
11752: LD_INT 30
11754: PUSH
11755: LD_INT 31
11757: PUSH
11758: LD_INT 32
11760: PUSH
11761: LD_INT 33
11763: PUSH
11764: LD_INT 34
11766: PUSH
11767: LD_INT 35
11769: PUSH
11770: LD_INT 36
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 101
11798: PUSH
11799: LD_INT 102
11801: PUSH
11802: LD_INT 103
11804: PUSH
11805: LD_INT 106
11807: PUSH
11808: LD_INT 108
11810: PUSH
11811: LD_INT 112
11813: PUSH
11814: LD_INT 113
11816: PUSH
11817: LD_INT 114
11819: PUSH
11820: LD_INT 115
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: ST_TO_ADDR
11838: GO 12069
11840: LD_INT 19
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 12068
11848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11849: LD_ADDR_VAR 0 1
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: LD_INT 2
11859: PUSH
11860: LD_INT 3
11862: PUSH
11863: LD_INT 4
11865: PUSH
11866: LD_INT 5
11868: PUSH
11869: LD_INT 6
11871: PUSH
11872: LD_INT 7
11874: PUSH
11875: LD_INT 8
11877: PUSH
11878: LD_INT 9
11880: PUSH
11881: LD_INT 10
11883: PUSH
11884: LD_INT 11
11886: PUSH
11887: LD_INT 12
11889: PUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: LD_INT 15
11898: PUSH
11899: LD_INT 16
11901: PUSH
11902: LD_INT 17
11904: PUSH
11905: LD_INT 18
11907: PUSH
11908: LD_INT 19
11910: PUSH
11911: LD_INT 20
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 22
11919: PUSH
11920: LD_INT 23
11922: PUSH
11923: LD_INT 24
11925: PUSH
11926: LD_INT 25
11928: PUSH
11929: LD_INT 26
11931: PUSH
11932: LD_INT 27
11934: PUSH
11935: LD_INT 28
11937: PUSH
11938: LD_INT 29
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 31
11946: PUSH
11947: LD_INT 32
11949: PUSH
11950: LD_INT 33
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 35
11958: PUSH
11959: LD_INT 36
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 101
12002: PUSH
12003: LD_INT 102
12005: PUSH
12006: LD_INT 103
12008: PUSH
12009: LD_INT 104
12011: PUSH
12012: LD_INT 105
12014: PUSH
12015: LD_INT 106
12017: PUSH
12018: LD_INT 107
12020: PUSH
12021: LD_INT 108
12023: PUSH
12024: LD_INT 109
12026: PUSH
12027: LD_INT 110
12029: PUSH
12030: LD_INT 111
12032: PUSH
12033: LD_INT 112
12035: PUSH
12036: LD_INT 113
12038: PUSH
12039: LD_INT 114
12041: PUSH
12042: LD_INT 115
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 12069
12068: POP
// end ; if result then
12069: LD_VAR 0 1
12073: IFFALSE 12362
// begin normal :=  ;
12075: LD_ADDR_VAR 0 3
12079: PUSH
12080: LD_STRING 
12082: ST_TO_ADDR
// hardcore :=  ;
12083: LD_ADDR_VAR 0 4
12087: PUSH
12088: LD_STRING 
12090: ST_TO_ADDR
// for i = 1 to normalCounter do
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: DOUBLE
12097: LD_INT 1
12099: DEC
12100: ST_TO_ADDR
12101: LD_EXP 58
12105: PUSH
12106: FOR_TO
12107: IFFALSE 12208
// begin tmp := 0 ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: LD_STRING 0
12116: ST_TO_ADDR
// if result [ 1 ] then
12117: LD_VAR 0 1
12121: PUSH
12122: LD_INT 1
12124: ARRAY
12125: IFFALSE 12190
// if result [ 1 ] [ 1 ] = i then
12127: LD_VAR 0 1
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: PUSH
12140: LD_VAR 0 5
12144: EQUAL
12145: IFFALSE 12190
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12147: LD_ADDR_VAR 0 1
12151: PUSH
12152: LD_VAR 0 1
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: LD_VAR 0 1
12164: PUSH
12165: LD_INT 1
12167: ARRAY
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 3
12176: PPUSH
12177: CALL_OW 1
12181: ST_TO_ADDR
// tmp := 1 ;
12182: LD_ADDR_VAR 0 2
12186: PUSH
12187: LD_STRING 1
12189: ST_TO_ADDR
// end ; normal := normal & tmp ;
12190: LD_ADDR_VAR 0 3
12194: PUSH
12195: LD_VAR 0 3
12199: PUSH
12200: LD_VAR 0 2
12204: STR
12205: ST_TO_ADDR
// end ;
12206: GO 12106
12208: POP
12209: POP
// for i = 1 to hardcoreCounter do
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: DOUBLE
12216: LD_INT 1
12218: DEC
12219: ST_TO_ADDR
12220: LD_EXP 59
12224: PUSH
12225: FOR_TO
12226: IFFALSE 12331
// begin tmp := 0 ;
12228: LD_ADDR_VAR 0 2
12232: PUSH
12233: LD_STRING 0
12235: ST_TO_ADDR
// if result [ 2 ] then
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 2
12243: ARRAY
12244: IFFALSE 12313
// if result [ 2 ] [ 1 ] = 100 + i then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_INT 2
12253: ARRAY
12254: PUSH
12255: LD_INT 1
12257: ARRAY
12258: PUSH
12259: LD_INT 100
12261: PUSH
12262: LD_VAR 0 5
12266: PLUS
12267: EQUAL
12268: IFFALSE 12313
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12270: LD_ADDR_VAR 0 1
12274: PUSH
12275: LD_VAR 0 1
12279: PPUSH
12280: LD_INT 2
12282: PPUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 2
12290: ARRAY
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 3
12299: PPUSH
12300: CALL_OW 1
12304: ST_TO_ADDR
// tmp := 1 ;
12305: LD_ADDR_VAR 0 2
12309: PUSH
12310: LD_STRING 1
12312: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12313: LD_ADDR_VAR 0 4
12317: PUSH
12318: LD_VAR 0 4
12322: PUSH
12323: LD_VAR 0 2
12327: STR
12328: ST_TO_ADDR
// end ;
12329: GO 12225
12331: POP
12332: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12333: LD_STRING getStreamItemsFromMission("
12335: PUSH
12336: LD_VAR 0 3
12340: STR
12341: PUSH
12342: LD_STRING ","
12344: STR
12345: PUSH
12346: LD_VAR 0 4
12350: STR
12351: PUSH
12352: LD_STRING ")
12354: STR
12355: PPUSH
12356: CALL_OW 559
// end else
12360: GO 12369
// ToLua ( getStreamItemsFromMission("","") ) ;
12362: LD_STRING getStreamItemsFromMission("","")
12364: PPUSH
12365: CALL_OW 559
// end ;
12369: LD_VAR 0 1
12373: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12374: LD_VAR 0 2
12378: PUSH
12379: LD_INT 100
12381: EQUAL
12382: IFFALSE 13331
// begin if not StreamModeActive then
12384: LD_EXP 57
12388: NOT
12389: IFFALSE 12399
// StreamModeActive := true ;
12391: LD_ADDR_EXP 57
12395: PUSH
12396: LD_INT 1
12398: ST_TO_ADDR
// if p3 = 0 then
12399: LD_VAR 0 3
12403: PUSH
12404: LD_INT 0
12406: EQUAL
12407: IFFALSE 12413
// InitStreamMode ;
12409: CALL 8659 0 0
// if p3 = 1 then
12413: LD_VAR 0 3
12417: PUSH
12418: LD_INT 1
12420: EQUAL
12421: IFFALSE 12431
// sRocket := true ;
12423: LD_ADDR_EXP 62
12427: PUSH
12428: LD_INT 1
12430: ST_TO_ADDR
// if p3 = 2 then
12431: LD_VAR 0 3
12435: PUSH
12436: LD_INT 2
12438: EQUAL
12439: IFFALSE 12449
// sSpeed := true ;
12441: LD_ADDR_EXP 61
12445: PUSH
12446: LD_INT 1
12448: ST_TO_ADDR
// if p3 = 3 then
12449: LD_VAR 0 3
12453: PUSH
12454: LD_INT 3
12456: EQUAL
12457: IFFALSE 12467
// sEngine := true ;
12459: LD_ADDR_EXP 63
12463: PUSH
12464: LD_INT 1
12466: ST_TO_ADDR
// if p3 = 4 then
12467: LD_VAR 0 3
12471: PUSH
12472: LD_INT 4
12474: EQUAL
12475: IFFALSE 12485
// sSpec := true ;
12477: LD_ADDR_EXP 60
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// if p3 = 5 then
12485: LD_VAR 0 3
12489: PUSH
12490: LD_INT 5
12492: EQUAL
12493: IFFALSE 12503
// sLevel := true ;
12495: LD_ADDR_EXP 64
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// if p3 = 6 then
12503: LD_VAR 0 3
12507: PUSH
12508: LD_INT 6
12510: EQUAL
12511: IFFALSE 12521
// sArmoury := true ;
12513: LD_ADDR_EXP 65
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// if p3 = 7 then
12521: LD_VAR 0 3
12525: PUSH
12526: LD_INT 7
12528: EQUAL
12529: IFFALSE 12539
// sRadar := true ;
12531: LD_ADDR_EXP 66
12535: PUSH
12536: LD_INT 1
12538: ST_TO_ADDR
// if p3 = 8 then
12539: LD_VAR 0 3
12543: PUSH
12544: LD_INT 8
12546: EQUAL
12547: IFFALSE 12557
// sBunker := true ;
12549: LD_ADDR_EXP 67
12553: PUSH
12554: LD_INT 1
12556: ST_TO_ADDR
// if p3 = 9 then
12557: LD_VAR 0 3
12561: PUSH
12562: LD_INT 9
12564: EQUAL
12565: IFFALSE 12575
// sHack := true ;
12567: LD_ADDR_EXP 68
12571: PUSH
12572: LD_INT 1
12574: ST_TO_ADDR
// if p3 = 10 then
12575: LD_VAR 0 3
12579: PUSH
12580: LD_INT 10
12582: EQUAL
12583: IFFALSE 12593
// sFire := true ;
12585: LD_ADDR_EXP 69
12589: PUSH
12590: LD_INT 1
12592: ST_TO_ADDR
// if p3 = 11 then
12593: LD_VAR 0 3
12597: PUSH
12598: LD_INT 11
12600: EQUAL
12601: IFFALSE 12611
// sRefresh := true ;
12603: LD_ADDR_EXP 70
12607: PUSH
12608: LD_INT 1
12610: ST_TO_ADDR
// if p3 = 12 then
12611: LD_VAR 0 3
12615: PUSH
12616: LD_INT 12
12618: EQUAL
12619: IFFALSE 12629
// sExp := true ;
12621: LD_ADDR_EXP 71
12625: PUSH
12626: LD_INT 1
12628: ST_TO_ADDR
// if p3 = 13 then
12629: LD_VAR 0 3
12633: PUSH
12634: LD_INT 13
12636: EQUAL
12637: IFFALSE 12647
// sDepot := true ;
12639: LD_ADDR_EXP 72
12643: PUSH
12644: LD_INT 1
12646: ST_TO_ADDR
// if p3 = 14 then
12647: LD_VAR 0 3
12651: PUSH
12652: LD_INT 14
12654: EQUAL
12655: IFFALSE 12665
// sFlag := true ;
12657: LD_ADDR_EXP 73
12661: PUSH
12662: LD_INT 1
12664: ST_TO_ADDR
// if p3 = 15 then
12665: LD_VAR 0 3
12669: PUSH
12670: LD_INT 15
12672: EQUAL
12673: IFFALSE 12683
// sKamikadze := true ;
12675: LD_ADDR_EXP 81
12679: PUSH
12680: LD_INT 1
12682: ST_TO_ADDR
// if p3 = 16 then
12683: LD_VAR 0 3
12687: PUSH
12688: LD_INT 16
12690: EQUAL
12691: IFFALSE 12701
// sTroll := true ;
12693: LD_ADDR_EXP 82
12697: PUSH
12698: LD_INT 1
12700: ST_TO_ADDR
// if p3 = 17 then
12701: LD_VAR 0 3
12705: PUSH
12706: LD_INT 17
12708: EQUAL
12709: IFFALSE 12719
// sSlow := true ;
12711: LD_ADDR_EXP 83
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// if p3 = 18 then
12719: LD_VAR 0 3
12723: PUSH
12724: LD_INT 18
12726: EQUAL
12727: IFFALSE 12737
// sLack := true ;
12729: LD_ADDR_EXP 84
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// if p3 = 19 then
12737: LD_VAR 0 3
12741: PUSH
12742: LD_INT 19
12744: EQUAL
12745: IFFALSE 12755
// sTank := true ;
12747: LD_ADDR_EXP 86
12751: PUSH
12752: LD_INT 1
12754: ST_TO_ADDR
// if p3 = 20 then
12755: LD_VAR 0 3
12759: PUSH
12760: LD_INT 20
12762: EQUAL
12763: IFFALSE 12773
// sRemote := true ;
12765: LD_ADDR_EXP 87
12769: PUSH
12770: LD_INT 1
12772: ST_TO_ADDR
// if p3 = 21 then
12773: LD_VAR 0 3
12777: PUSH
12778: LD_INT 21
12780: EQUAL
12781: IFFALSE 12791
// sPowell := true ;
12783: LD_ADDR_EXP 88
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// if p3 = 22 then
12791: LD_VAR 0 3
12795: PUSH
12796: LD_INT 22
12798: EQUAL
12799: IFFALSE 12809
// sTeleport := true ;
12801: LD_ADDR_EXP 91
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// if p3 = 23 then
12809: LD_VAR 0 3
12813: PUSH
12814: LD_INT 23
12816: EQUAL
12817: IFFALSE 12827
// sOilTower := true ;
12819: LD_ADDR_EXP 93
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// if p3 = 24 then
12827: LD_VAR 0 3
12831: PUSH
12832: LD_INT 24
12834: EQUAL
12835: IFFALSE 12845
// sShovel := true ;
12837: LD_ADDR_EXP 94
12841: PUSH
12842: LD_INT 1
12844: ST_TO_ADDR
// if p3 = 25 then
12845: LD_VAR 0 3
12849: PUSH
12850: LD_INT 25
12852: EQUAL
12853: IFFALSE 12863
// sSheik := true ;
12855: LD_ADDR_EXP 95
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// if p3 = 26 then
12863: LD_VAR 0 3
12867: PUSH
12868: LD_INT 26
12870: EQUAL
12871: IFFALSE 12881
// sEarthquake := true ;
12873: LD_ADDR_EXP 97
12877: PUSH
12878: LD_INT 1
12880: ST_TO_ADDR
// if p3 = 27 then
12881: LD_VAR 0 3
12885: PUSH
12886: LD_INT 27
12888: EQUAL
12889: IFFALSE 12899
// sAI := true ;
12891: LD_ADDR_EXP 98
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
// if p3 = 28 then
12899: LD_VAR 0 3
12903: PUSH
12904: LD_INT 28
12906: EQUAL
12907: IFFALSE 12917
// sCargo := true ;
12909: LD_ADDR_EXP 101
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// if p3 = 29 then
12917: LD_VAR 0 3
12921: PUSH
12922: LD_INT 29
12924: EQUAL
12925: IFFALSE 12935
// sDLaser := true ;
12927: LD_ADDR_EXP 102
12931: PUSH
12932: LD_INT 1
12934: ST_TO_ADDR
// if p3 = 30 then
12935: LD_VAR 0 3
12939: PUSH
12940: LD_INT 30
12942: EQUAL
12943: IFFALSE 12953
// sExchange := true ;
12945: LD_ADDR_EXP 103
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// if p3 = 31 then
12953: LD_VAR 0 3
12957: PUSH
12958: LD_INT 31
12960: EQUAL
12961: IFFALSE 12971
// sFac := true ;
12963: LD_ADDR_EXP 104
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// if p3 = 32 then
12971: LD_VAR 0 3
12975: PUSH
12976: LD_INT 32
12978: EQUAL
12979: IFFALSE 12989
// sPower := true ;
12981: LD_ADDR_EXP 105
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// if p3 = 33 then
12989: LD_VAR 0 3
12993: PUSH
12994: LD_INT 33
12996: EQUAL
12997: IFFALSE 13007
// sRandom := true ;
12999: LD_ADDR_EXP 106
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// if p3 = 34 then
13007: LD_VAR 0 3
13011: PUSH
13012: LD_INT 34
13014: EQUAL
13015: IFFALSE 13025
// sShield := true ;
13017: LD_ADDR_EXP 107
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// if p3 = 35 then
13025: LD_VAR 0 3
13029: PUSH
13030: LD_INT 35
13032: EQUAL
13033: IFFALSE 13043
// sTime := true ;
13035: LD_ADDR_EXP 108
13039: PUSH
13040: LD_INT 1
13042: ST_TO_ADDR
// if p3 = 36 then
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 36
13050: EQUAL
13051: IFFALSE 13061
// sTools := true ;
13053: LD_ADDR_EXP 109
13057: PUSH
13058: LD_INT 1
13060: ST_TO_ADDR
// if p3 = 101 then
13061: LD_VAR 0 3
13065: PUSH
13066: LD_INT 101
13068: EQUAL
13069: IFFALSE 13079
// sSold := true ;
13071: LD_ADDR_EXP 74
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// if p3 = 102 then
13079: LD_VAR 0 3
13083: PUSH
13084: LD_INT 102
13086: EQUAL
13087: IFFALSE 13097
// sDiff := true ;
13089: LD_ADDR_EXP 75
13093: PUSH
13094: LD_INT 1
13096: ST_TO_ADDR
// if p3 = 103 then
13097: LD_VAR 0 3
13101: PUSH
13102: LD_INT 103
13104: EQUAL
13105: IFFALSE 13115
// sFog := true ;
13107: LD_ADDR_EXP 78
13111: PUSH
13112: LD_INT 1
13114: ST_TO_ADDR
// if p3 = 104 then
13115: LD_VAR 0 3
13119: PUSH
13120: LD_INT 104
13122: EQUAL
13123: IFFALSE 13133
// sReset := true ;
13125: LD_ADDR_EXP 79
13129: PUSH
13130: LD_INT 1
13132: ST_TO_ADDR
// if p3 = 105 then
13133: LD_VAR 0 3
13137: PUSH
13138: LD_INT 105
13140: EQUAL
13141: IFFALSE 13151
// sSun := true ;
13143: LD_ADDR_EXP 80
13147: PUSH
13148: LD_INT 1
13150: ST_TO_ADDR
// if p3 = 106 then
13151: LD_VAR 0 3
13155: PUSH
13156: LD_INT 106
13158: EQUAL
13159: IFFALSE 13169
// sTiger := true ;
13161: LD_ADDR_EXP 76
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// if p3 = 107 then
13169: LD_VAR 0 3
13173: PUSH
13174: LD_INT 107
13176: EQUAL
13177: IFFALSE 13187
// sBomb := true ;
13179: LD_ADDR_EXP 77
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// if p3 = 108 then
13187: LD_VAR 0 3
13191: PUSH
13192: LD_INT 108
13194: EQUAL
13195: IFFALSE 13205
// sWound := true ;
13197: LD_ADDR_EXP 85
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// if p3 = 109 then
13205: LD_VAR 0 3
13209: PUSH
13210: LD_INT 109
13212: EQUAL
13213: IFFALSE 13223
// sBetray := true ;
13215: LD_ADDR_EXP 89
13219: PUSH
13220: LD_INT 1
13222: ST_TO_ADDR
// if p3 = 110 then
13223: LD_VAR 0 3
13227: PUSH
13228: LD_INT 110
13230: EQUAL
13231: IFFALSE 13241
// sContamin := true ;
13233: LD_ADDR_EXP 90
13237: PUSH
13238: LD_INT 1
13240: ST_TO_ADDR
// if p3 = 111 then
13241: LD_VAR 0 3
13245: PUSH
13246: LD_INT 111
13248: EQUAL
13249: IFFALSE 13259
// sOil := true ;
13251: LD_ADDR_EXP 92
13255: PUSH
13256: LD_INT 1
13258: ST_TO_ADDR
// if p3 = 112 then
13259: LD_VAR 0 3
13263: PUSH
13264: LD_INT 112
13266: EQUAL
13267: IFFALSE 13277
// sStu := true ;
13269: LD_ADDR_EXP 96
13273: PUSH
13274: LD_INT 1
13276: ST_TO_ADDR
// if p3 = 113 then
13277: LD_VAR 0 3
13281: PUSH
13282: LD_INT 113
13284: EQUAL
13285: IFFALSE 13295
// sBazooka := true ;
13287: LD_ADDR_EXP 99
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if p3 = 114 then
13295: LD_VAR 0 3
13299: PUSH
13300: LD_INT 114
13302: EQUAL
13303: IFFALSE 13313
// sMortar := true ;
13305: LD_ADDR_EXP 100
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// if p3 = 115 then
13313: LD_VAR 0 3
13317: PUSH
13318: LD_INT 115
13320: EQUAL
13321: IFFALSE 13331
// sRanger := true ;
13323: LD_ADDR_EXP 110
13327: PUSH
13328: LD_INT 1
13330: ST_TO_ADDR
// end ; end ;
13331: PPOPN 6
13333: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13334: LD_EXP 57
13338: PUSH
13339: LD_EXP 62
13343: AND
13344: IFFALSE 13468
13346: GO 13348
13348: DISABLE
13349: LD_INT 0
13351: PPUSH
13352: PPUSH
// begin enable ;
13353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_OWVAR 2
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 34
13376: PUSH
13377: LD_INT 7
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 34
13386: PUSH
13387: LD_INT 45
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 34
13396: PUSH
13397: LD_INT 28
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 34
13406: PUSH
13407: LD_INT 47
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: ST_TO_ADDR
// if not tmp then
13430: LD_VAR 0 2
13434: NOT
13435: IFFALSE 13439
// exit ;
13437: GO 13468
// for i in tmp do
13439: LD_ADDR_VAR 0 1
13443: PUSH
13444: LD_VAR 0 2
13448: PUSH
13449: FOR_IN
13450: IFFALSE 13466
// begin SetLives ( i , 0 ) ;
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_INT 0
13459: PPUSH
13460: CALL_OW 234
// end ;
13464: GO 13449
13466: POP
13467: POP
// end ;
13468: PPOPN 2
13470: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13471: LD_EXP 57
13475: PUSH
13476: LD_EXP 63
13480: AND
13481: IFFALSE 13565
13483: GO 13485
13485: DISABLE
13486: LD_INT 0
13488: PPUSH
13489: PPUSH
// begin enable ;
13490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13491: LD_ADDR_VAR 0 2
13495: PUSH
13496: LD_INT 22
13498: PUSH
13499: LD_OWVAR 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 32
13510: PUSH
13511: LD_INT 3
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: ST_TO_ADDR
// if not tmp then
13527: LD_VAR 0 2
13531: NOT
13532: IFFALSE 13536
// exit ;
13534: GO 13565
// for i in tmp do
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: LD_VAR 0 2
13545: PUSH
13546: FOR_IN
13547: IFFALSE 13563
// begin SetLives ( i , 0 ) ;
13549: LD_VAR 0 1
13553: PPUSH
13554: LD_INT 0
13556: PPUSH
13557: CALL_OW 234
// end ;
13561: GO 13546
13563: POP
13564: POP
// end ;
13565: PPOPN 2
13567: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13568: LD_EXP 57
13572: PUSH
13573: LD_EXP 60
13577: AND
13578: IFFALSE 13671
13580: GO 13582
13582: DISABLE
13583: LD_INT 0
13585: PPUSH
// begin enable ;
13586: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13587: LD_ADDR_VAR 0 1
13591: PUSH
13592: LD_INT 22
13594: PUSH
13595: LD_OWVAR 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 25
13609: PUSH
13610: LD_INT 5
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 25
13619: PUSH
13620: LD_INT 9
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 8
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: PUSH
13652: FOR_IN
13653: IFFALSE 13669
// begin SetClass ( i , 1 ) ;
13655: LD_VAR 0 1
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 336
// end ;
13667: GO 13652
13669: POP
13670: POP
// end ;
13671: PPOPN 1
13673: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13674: LD_EXP 57
13678: PUSH
13679: LD_EXP 61
13683: AND
13684: PUSH
13685: LD_OWVAR 65
13689: PUSH
13690: LD_INT 7
13692: LESS
13693: AND
13694: IFFALSE 13708
13696: GO 13698
13698: DISABLE
// begin enable ;
13699: ENABLE
// game_speed := 7 ;
13700: LD_ADDR_OWVAR 65
13704: PUSH
13705: LD_INT 7
13707: ST_TO_ADDR
// end ;
13708: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13709: LD_EXP 57
13713: PUSH
13714: LD_EXP 64
13718: AND
13719: IFFALSE 13921
13721: GO 13723
13723: DISABLE
13724: LD_INT 0
13726: PPUSH
13727: PPUSH
13728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13729: LD_ADDR_VAR 0 3
13733: PUSH
13734: LD_INT 81
13736: PUSH
13737: LD_OWVAR 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 21
13748: PUSH
13749: LD_INT 1
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: ST_TO_ADDR
// if not tmp then
13765: LD_VAR 0 3
13769: NOT
13770: IFFALSE 13774
// exit ;
13772: GO 13921
// if tmp > 5 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 5
13781: GREATER
13782: IFFALSE 13794
// k := 5 else
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 5
13791: ST_TO_ADDR
13792: GO 13804
// k := tmp ;
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: LD_VAR 0 3
13803: ST_TO_ADDR
// for i := 1 to k do
13804: LD_ADDR_VAR 0 1
13808: PUSH
13809: DOUBLE
13810: LD_INT 1
13812: DEC
13813: ST_TO_ADDR
13814: LD_VAR 0 2
13818: PUSH
13819: FOR_TO
13820: IFFALSE 13919
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13822: LD_VAR 0 3
13826: PUSH
13827: LD_VAR 0 1
13831: ARRAY
13832: PPUSH
13833: LD_VAR 0 1
13837: PUSH
13838: LD_INT 4
13840: MOD
13841: PUSH
13842: LD_INT 1
13844: PLUS
13845: PPUSH
13846: CALL_OW 259
13850: PUSH
13851: LD_INT 10
13853: LESS
13854: IFFALSE 13917
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13856: LD_VAR 0 3
13860: PUSH
13861: LD_VAR 0 1
13865: ARRAY
13866: PPUSH
13867: LD_VAR 0 1
13871: PUSH
13872: LD_INT 4
13874: MOD
13875: PUSH
13876: LD_INT 1
13878: PLUS
13879: PPUSH
13880: LD_VAR 0 3
13884: PUSH
13885: LD_VAR 0 1
13889: ARRAY
13890: PPUSH
13891: LD_VAR 0 1
13895: PUSH
13896: LD_INT 4
13898: MOD
13899: PUSH
13900: LD_INT 1
13902: PLUS
13903: PPUSH
13904: CALL_OW 259
13908: PUSH
13909: LD_INT 1
13911: PLUS
13912: PPUSH
13913: CALL_OW 237
13917: GO 13819
13919: POP
13920: POP
// end ;
13921: PPOPN 3
13923: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13924: LD_EXP 57
13928: PUSH
13929: LD_EXP 65
13933: AND
13934: IFFALSE 13954
13936: GO 13938
13938: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13939: LD_INT 4
13941: PPUSH
13942: LD_OWVAR 2
13946: PPUSH
13947: LD_INT 0
13949: PPUSH
13950: CALL_OW 324
13954: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13955: LD_EXP 57
13959: PUSH
13960: LD_EXP 94
13964: AND
13965: IFFALSE 13985
13967: GO 13969
13969: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13970: LD_INT 19
13972: PPUSH
13973: LD_OWVAR 2
13977: PPUSH
13978: LD_INT 0
13980: PPUSH
13981: CALL_OW 324
13985: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13986: LD_EXP 57
13990: PUSH
13991: LD_EXP 66
13995: AND
13996: IFFALSE 14098
13998: GO 14000
14000: DISABLE
14001: LD_INT 0
14003: PPUSH
14004: PPUSH
// begin enable ;
14005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14006: LD_ADDR_VAR 0 2
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_OWVAR 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 2
14025: PUSH
14026: LD_INT 34
14028: PUSH
14029: LD_INT 11
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 34
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 69
14059: ST_TO_ADDR
// if not tmp then
14060: LD_VAR 0 2
14064: NOT
14065: IFFALSE 14069
// exit ;
14067: GO 14098
// for i in tmp do
14069: LD_ADDR_VAR 0 1
14073: PUSH
14074: LD_VAR 0 2
14078: PUSH
14079: FOR_IN
14080: IFFALSE 14096
// begin SetLives ( i , 0 ) ;
14082: LD_VAR 0 1
14086: PPUSH
14087: LD_INT 0
14089: PPUSH
14090: CALL_OW 234
// end ;
14094: GO 14079
14096: POP
14097: POP
// end ;
14098: PPOPN 2
14100: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14101: LD_EXP 57
14105: PUSH
14106: LD_EXP 67
14110: AND
14111: IFFALSE 14131
14113: GO 14115
14115: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14116: LD_INT 32
14118: PPUSH
14119: LD_OWVAR 2
14123: PPUSH
14124: LD_INT 0
14126: PPUSH
14127: CALL_OW 324
14131: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14132: LD_EXP 57
14136: PUSH
14137: LD_EXP 68
14141: AND
14142: IFFALSE 14323
14144: GO 14146
14146: DISABLE
14147: LD_INT 0
14149: PPUSH
14150: PPUSH
14151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14152: LD_ADDR_VAR 0 2
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_OWVAR 2
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 33
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PPUSH
14183: CALL_OW 69
14187: ST_TO_ADDR
// if not tmp then
14188: LD_VAR 0 2
14192: NOT
14193: IFFALSE 14197
// exit ;
14195: GO 14323
// side := 0 ;
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// for i := 1 to 8 do
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: DOUBLE
14211: LD_INT 1
14213: DEC
14214: ST_TO_ADDR
14215: LD_INT 8
14217: PUSH
14218: FOR_TO
14219: IFFALSE 14267
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14221: LD_OWVAR 2
14225: PUSH
14226: LD_VAR 0 1
14230: NONEQUAL
14231: PUSH
14232: LD_OWVAR 2
14236: PPUSH
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 81
14246: PUSH
14247: LD_INT 2
14249: EQUAL
14250: AND
14251: IFFALSE 14265
// begin side := i ;
14253: LD_ADDR_VAR 0 3
14257: PUSH
14258: LD_VAR 0 1
14262: ST_TO_ADDR
// break ;
14263: GO 14267
// end ;
14265: GO 14218
14267: POP
14268: POP
// if not side then
14269: LD_VAR 0 3
14273: NOT
14274: IFFALSE 14278
// exit ;
14276: GO 14323
// for i := 1 to tmp do
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: DOUBLE
14284: LD_INT 1
14286: DEC
14287: ST_TO_ADDR
14288: LD_VAR 0 2
14292: PUSH
14293: FOR_TO
14294: IFFALSE 14321
// if Prob ( 30 ) then
14296: LD_INT 30
14298: PPUSH
14299: CALL_OW 13
14303: IFFALSE 14319
// SetSide ( i , side ) ;
14305: LD_VAR 0 1
14309: PPUSH
14310: LD_VAR 0 3
14314: PPUSH
14315: CALL_OW 235
14319: GO 14293
14321: POP
14322: POP
// end ;
14323: PPOPN 3
14325: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14326: LD_EXP 57
14330: PUSH
14331: LD_EXP 70
14335: AND
14336: IFFALSE 14455
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14344: LD_ADDR_VAR 0 1
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_OWVAR 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 23
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 69
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14453
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 257
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: LD_INT 2
14416: PUSH
14417: LD_INT 3
14419: PUSH
14420: LD_INT 4
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: IN
14429: IFFALSE 14451
// SetClass ( un , rand ( 1 , 4 ) ) ;
14431: LD_VAR 0 1
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: LD_INT 4
14441: PPUSH
14442: CALL_OW 12
14446: PPUSH
14447: CALL_OW 336
14451: GO 14398
14453: POP
14454: POP
// end ;
14455: PPOPN 1
14457: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14458: LD_EXP 57
14462: PUSH
14463: LD_EXP 69
14467: AND
14468: IFFALSE 14547
14470: GO 14472
14472: DISABLE
14473: LD_INT 0
14475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_OWVAR 2
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 21
14495: PUSH
14496: LD_INT 3
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: ST_TO_ADDR
// if not tmp then
14512: LD_VAR 0 1
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14521: LD_VAR 0 1
14525: PUSH
14526: LD_INT 1
14528: PPUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 12
14538: ARRAY
14539: PPUSH
14540: LD_INT 100
14542: PPUSH
14543: CALL_OW 234
// end ;
14547: PPOPN 1
14549: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14550: LD_EXP 57
14554: PUSH
14555: LD_EXP 71
14559: AND
14560: IFFALSE 14658
14562: GO 14564
14564: DISABLE
14565: LD_INT 0
14567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14568: LD_ADDR_VAR 0 1
14572: PUSH
14573: LD_INT 22
14575: PUSH
14576: LD_OWVAR 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 21
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PPUSH
14599: CALL_OW 69
14603: ST_TO_ADDR
// if not tmp then
14604: LD_VAR 0 1
14608: NOT
14609: IFFALSE 14613
// exit ;
14611: GO 14658
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14613: LD_VAR 0 1
14617: PUSH
14618: LD_INT 1
14620: PPUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 12
14630: ARRAY
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: LD_INT 4
14637: PPUSH
14638: CALL_OW 12
14642: PPUSH
14643: LD_INT 3000
14645: PPUSH
14646: LD_INT 9000
14648: PPUSH
14649: CALL_OW 12
14653: PPUSH
14654: CALL_OW 492
// end ;
14658: PPOPN 1
14660: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14661: LD_EXP 57
14665: PUSH
14666: LD_EXP 72
14670: AND
14671: IFFALSE 14691
14673: GO 14675
14675: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14676: LD_INT 1
14678: PPUSH
14679: LD_OWVAR 2
14683: PPUSH
14684: LD_INT 0
14686: PPUSH
14687: CALL_OW 324
14691: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14692: LD_EXP 57
14696: PUSH
14697: LD_EXP 73
14701: AND
14702: IFFALSE 14785
14704: GO 14706
14706: DISABLE
14707: LD_INT 0
14709: PPUSH
14710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_OWVAR 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PPUSH
14742: CALL_OW 69
14746: ST_TO_ADDR
// if not tmp then
14747: LD_VAR 0 2
14751: NOT
14752: IFFALSE 14756
// exit ;
14754: GO 14785
// for i in tmp do
14756: LD_ADDR_VAR 0 1
14760: PUSH
14761: LD_VAR 0 2
14765: PUSH
14766: FOR_IN
14767: IFFALSE 14783
// SetBLevel ( i , 10 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 10
14776: PPUSH
14777: CALL_OW 241
14781: GO 14766
14783: POP
14784: POP
// end ;
14785: PPOPN 2
14787: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14788: LD_EXP 57
14792: PUSH
14793: LD_EXP 74
14797: AND
14798: IFFALSE 14909
14800: GO 14802
14802: DISABLE
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
14807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14808: LD_ADDR_VAR 0 3
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_OWVAR 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 25
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: ST_TO_ADDR
// if not tmp then
14844: LD_VAR 0 3
14848: NOT
14849: IFFALSE 14853
// exit ;
14851: GO 14909
// un := tmp [ rand ( 1 , tmp ) ] ;
14853: LD_ADDR_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: PUSH
14863: LD_INT 1
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: CALL_OW 12
14875: ARRAY
14876: ST_TO_ADDR
// if Crawls ( un ) then
14877: LD_VAR 0 2
14881: PPUSH
14882: CALL_OW 318
14886: IFFALSE 14897
// ComWalk ( un ) ;
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_INT 5
14904: PPUSH
14905: CALL_OW 336
// end ;
14909: PPOPN 3
14911: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14912: LD_EXP 57
14916: PUSH
14917: LD_EXP 75
14921: AND
14922: PUSH
14923: LD_OWVAR 67
14927: PUSH
14928: LD_INT 3
14930: LESS
14931: AND
14932: IFFALSE 14951
14934: GO 14936
14936: DISABLE
// Difficulty := Difficulty + 1 ;
14937: LD_ADDR_OWVAR 67
14941: PUSH
14942: LD_OWVAR 67
14946: PUSH
14947: LD_INT 1
14949: PLUS
14950: ST_TO_ADDR
14951: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14952: LD_EXP 57
14956: PUSH
14957: LD_EXP 76
14961: AND
14962: IFFALSE 15065
14964: GO 14966
14966: DISABLE
14967: LD_INT 0
14969: PPUSH
// begin for i := 1 to 5 do
14970: LD_ADDR_VAR 0 1
14974: PUSH
14975: DOUBLE
14976: LD_INT 1
14978: DEC
14979: ST_TO_ADDR
14980: LD_INT 5
14982: PUSH
14983: FOR_TO
14984: IFFALSE 15063
// begin uc_nation := nation_nature ;
14986: LD_ADDR_OWVAR 21
14990: PUSH
14991: LD_INT 0
14993: ST_TO_ADDR
// uc_side := 0 ;
14994: LD_ADDR_OWVAR 20
14998: PUSH
14999: LD_INT 0
15001: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15002: LD_ADDR_OWVAR 29
15006: PUSH
15007: LD_INT 12
15009: PUSH
15010: LD_INT 12
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: ST_TO_ADDR
// hc_agressivity := 20 ;
15017: LD_ADDR_OWVAR 35
15021: PUSH
15022: LD_INT 20
15024: ST_TO_ADDR
// hc_class := class_tiger ;
15025: LD_ADDR_OWVAR 28
15029: PUSH
15030: LD_INT 14
15032: ST_TO_ADDR
// hc_gallery :=  ;
15033: LD_ADDR_OWVAR 33
15037: PUSH
15038: LD_STRING 
15040: ST_TO_ADDR
// hc_name :=  ;
15041: LD_ADDR_OWVAR 26
15045: PUSH
15046: LD_STRING 
15048: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15049: CALL_OW 44
15053: PPUSH
15054: LD_INT 0
15056: PPUSH
15057: CALL_OW 51
// end ;
15061: GO 14983
15063: POP
15064: POP
// end ;
15065: PPOPN 1
15067: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15068: LD_EXP 57
15072: PUSH
15073: LD_EXP 77
15077: AND
15078: IFFALSE 15087
15080: GO 15082
15082: DISABLE
// StreamSibBomb ;
15083: CALL 15088 0 0
15087: END
// export function StreamSibBomb ; var i , x , y ; begin
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
// result := false ;
15094: LD_ADDR_VAR 0 1
15098: PUSH
15099: LD_INT 0
15101: ST_TO_ADDR
// for i := 1 to 16 do
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: DOUBLE
15108: LD_INT 1
15110: DEC
15111: ST_TO_ADDR
15112: LD_INT 16
15114: PUSH
15115: FOR_TO
15116: IFFALSE 15315
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15118: LD_ADDR_VAR 0 3
15122: PUSH
15123: LD_INT 10
15125: PUSH
15126: LD_INT 20
15128: PUSH
15129: LD_INT 30
15131: PUSH
15132: LD_INT 40
15134: PUSH
15135: LD_INT 50
15137: PUSH
15138: LD_INT 60
15140: PUSH
15141: LD_INT 70
15143: PUSH
15144: LD_INT 80
15146: PUSH
15147: LD_INT 90
15149: PUSH
15150: LD_INT 100
15152: PUSH
15153: LD_INT 110
15155: PUSH
15156: LD_INT 120
15158: PUSH
15159: LD_INT 130
15161: PUSH
15162: LD_INT 140
15164: PUSH
15165: LD_INT 150
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 1
15187: PPUSH
15188: LD_INT 15
15190: PPUSH
15191: CALL_OW 12
15195: ARRAY
15196: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15197: LD_ADDR_VAR 0 4
15201: PUSH
15202: LD_INT 10
15204: PUSH
15205: LD_INT 20
15207: PUSH
15208: LD_INT 30
15210: PUSH
15211: LD_INT 40
15213: PUSH
15214: LD_INT 50
15216: PUSH
15217: LD_INT 60
15219: PUSH
15220: LD_INT 70
15222: PUSH
15223: LD_INT 80
15225: PUSH
15226: LD_INT 90
15228: PUSH
15229: LD_INT 100
15231: PUSH
15232: LD_INT 110
15234: PUSH
15235: LD_INT 120
15237: PUSH
15238: LD_INT 130
15240: PUSH
15241: LD_INT 140
15243: PUSH
15244: LD_INT 150
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PPUSH
15267: LD_INT 15
15269: PPUSH
15270: CALL_OW 12
15274: ARRAY
15275: ST_TO_ADDR
// if ValidHex ( x , y ) then
15276: LD_VAR 0 3
15280: PPUSH
15281: LD_VAR 0 4
15285: PPUSH
15286: CALL_OW 488
15290: IFFALSE 15313
// begin result := [ x , y ] ;
15292: LD_ADDR_VAR 0 1
15296: PUSH
15297: LD_VAR 0 3
15301: PUSH
15302: LD_VAR 0 4
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: ST_TO_ADDR
// break ;
15311: GO 15315
// end ; end ;
15313: GO 15115
15315: POP
15316: POP
// if result then
15317: LD_VAR 0 1
15321: IFFALSE 15381
// begin ToLua ( playSibBomb() ) ;
15323: LD_STRING playSibBomb()
15325: PPUSH
15326: CALL_OW 559
// wait ( 0 0$14 ) ;
15330: LD_INT 490
15332: PPUSH
15333: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15337: LD_VAR 0 1
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PPUSH
15346: LD_VAR 0 1
15350: PUSH
15351: LD_INT 2
15353: ARRAY
15354: PPUSH
15355: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15359: LD_VAR 0 1
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: PPUSH
15368: LD_VAR 0 1
15372: PUSH
15373: LD_INT 2
15375: ARRAY
15376: PPUSH
15377: CALL_OW 429
// end ; end ;
15381: LD_VAR 0 1
15385: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15386: LD_EXP 57
15390: PUSH
15391: LD_EXP 79
15395: AND
15396: IFFALSE 15408
15398: GO 15400
15400: DISABLE
// YouLost (  ) ;
15401: LD_STRING 
15403: PPUSH
15404: CALL_OW 104
15408: END
// every 0 0$1 trigger StreamModeActive and sFog do
15409: LD_EXP 57
15413: PUSH
15414: LD_EXP 78
15418: AND
15419: IFFALSE 15433
15421: GO 15423
15423: DISABLE
// FogOff ( your_side ) ;
15424: LD_OWVAR 2
15428: PPUSH
15429: CALL_OW 344
15433: END
// every 0 0$1 trigger StreamModeActive and sSun do
15434: LD_EXP 57
15438: PUSH
15439: LD_EXP 80
15443: AND
15444: IFFALSE 15472
15446: GO 15448
15448: DISABLE
// begin solar_recharge_percent := 0 ;
15449: LD_ADDR_OWVAR 79
15453: PUSH
15454: LD_INT 0
15456: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15457: LD_INT 10500
15459: PPUSH
15460: CALL_OW 67
// solar_recharge_percent := 100 ;
15464: LD_ADDR_OWVAR 79
15468: PUSH
15469: LD_INT 100
15471: ST_TO_ADDR
// end ;
15472: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15473: LD_EXP 57
15477: PUSH
15478: LD_EXP 81
15482: AND
15483: IFFALSE 15722
15485: GO 15487
15487: DISABLE
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
15492: PPUSH
// begin tmp := [ ] ;
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: EMPTY
15499: ST_TO_ADDR
// for i := 1 to 6 do
15500: LD_ADDR_VAR 0 1
15504: PUSH
15505: DOUBLE
15506: LD_INT 1
15508: DEC
15509: ST_TO_ADDR
15510: LD_INT 6
15512: PUSH
15513: FOR_TO
15514: IFFALSE 15619
// begin uc_nation := nation_nature ;
15516: LD_ADDR_OWVAR 21
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// uc_side := 0 ;
15524: LD_ADDR_OWVAR 20
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15532: LD_ADDR_OWVAR 29
15536: PUSH
15537: LD_INT 12
15539: PUSH
15540: LD_INT 12
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: ST_TO_ADDR
// hc_agressivity := 20 ;
15547: LD_ADDR_OWVAR 35
15551: PUSH
15552: LD_INT 20
15554: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15555: LD_ADDR_OWVAR 28
15559: PUSH
15560: LD_INT 17
15562: ST_TO_ADDR
// hc_gallery :=  ;
15563: LD_ADDR_OWVAR 33
15567: PUSH
15568: LD_STRING 
15570: ST_TO_ADDR
// hc_name :=  ;
15571: LD_ADDR_OWVAR 26
15575: PUSH
15576: LD_STRING 
15578: ST_TO_ADDR
// un := CreateHuman ;
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: CALL_OW 44
15588: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15589: LD_VAR 0 2
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: CALL_OW 51
// tmp := tmp ^ un ;
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: LD_VAR 0 3
15610: PUSH
15611: LD_VAR 0 2
15615: ADD
15616: ST_TO_ADDR
// end ;
15617: GO 15513
15619: POP
15620: POP
// repeat wait ( 0 0$1 ) ;
15621: LD_INT 35
15623: PPUSH
15624: CALL_OW 67
// for un in tmp do
15628: LD_ADDR_VAR 0 2
15632: PUSH
15633: LD_VAR 0 3
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15713
// begin if IsDead ( un ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 301
15650: IFFALSE 15670
// begin tmp := tmp diff un ;
15652: LD_ADDR_VAR 0 3
15656: PUSH
15657: LD_VAR 0 3
15661: PUSH
15662: LD_VAR 0 2
15666: DIFF
15667: ST_TO_ADDR
// continue ;
15668: GO 15638
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15670: LD_VAR 0 2
15674: PPUSH
15675: LD_INT 3
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 0
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 69
15696: PPUSH
15697: LD_VAR 0 2
15701: PPUSH
15702: CALL_OW 74
15706: PPUSH
15707: CALL_OW 115
// end ;
15711: GO 15638
15713: POP
15714: POP
// until not tmp ;
15715: LD_VAR 0 3
15719: NOT
15720: IFFALSE 15621
// end ;
15722: PPOPN 3
15724: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15725: LD_EXP 57
15729: PUSH
15730: LD_EXP 82
15734: AND
15735: IFFALSE 15789
15737: GO 15739
15739: DISABLE
// begin ToLua ( displayTroll(); ) ;
15740: LD_STRING displayTroll();
15742: PPUSH
15743: CALL_OW 559
// wait ( 3 3$00 ) ;
15747: LD_INT 6300
15749: PPUSH
15750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15754: LD_STRING hideTroll();
15756: PPUSH
15757: CALL_OW 559
// wait ( 1 1$00 ) ;
15761: LD_INT 2100
15763: PPUSH
15764: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15768: LD_STRING displayTroll();
15770: PPUSH
15771: CALL_OW 559
// wait ( 1 1$00 ) ;
15775: LD_INT 2100
15777: PPUSH
15778: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15782: LD_STRING hideTroll();
15784: PPUSH
15785: CALL_OW 559
// end ;
15789: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15790: LD_EXP 57
15794: PUSH
15795: LD_EXP 83
15799: AND
15800: IFFALSE 15863
15802: GO 15804
15804: DISABLE
15805: LD_INT 0
15807: PPUSH
// begin p := 0 ;
15808: LD_ADDR_VAR 0 1
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// repeat game_speed := 1 ;
15816: LD_ADDR_OWVAR 65
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15824: LD_INT 35
15826: PPUSH
15827: CALL_OW 67
// p := p + 1 ;
15831: LD_ADDR_VAR 0 1
15835: PUSH
15836: LD_VAR 0 1
15840: PUSH
15841: LD_INT 1
15843: PLUS
15844: ST_TO_ADDR
// until p >= 60 ;
15845: LD_VAR 0 1
15849: PUSH
15850: LD_INT 60
15852: GREATEREQUAL
15853: IFFALSE 15816
// game_speed := 4 ;
15855: LD_ADDR_OWVAR 65
15859: PUSH
15860: LD_INT 4
15862: ST_TO_ADDR
// end ;
15863: PPOPN 1
15865: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15866: LD_EXP 57
15870: PUSH
15871: LD_EXP 84
15875: AND
15876: IFFALSE 16022
15878: GO 15880
15880: DISABLE
15881: LD_INT 0
15883: PPUSH
15884: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15885: LD_ADDR_VAR 0 1
15889: PUSH
15890: LD_INT 22
15892: PUSH
15893: LD_OWVAR 2
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 2
15904: PUSH
15905: LD_INT 30
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 30
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PPUSH
15934: CALL_OW 69
15938: ST_TO_ADDR
// if not depot then
15939: LD_VAR 0 1
15943: NOT
15944: IFFALSE 15948
// exit ;
15946: GO 16022
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15948: LD_ADDR_VAR 0 2
15952: PUSH
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 1
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 12
15970: ARRAY
15971: PPUSH
15972: CALL_OW 274
15976: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15977: LD_VAR 0 2
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_INT 0
15987: PPUSH
15988: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15992: LD_VAR 0 2
15996: PPUSH
15997: LD_INT 2
15999: PPUSH
16000: LD_INT 0
16002: PPUSH
16003: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16007: LD_VAR 0 2
16011: PPUSH
16012: LD_INT 3
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 277
// end ;
16022: PPOPN 2
16024: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16025: LD_EXP 57
16029: PUSH
16030: LD_EXP 85
16034: AND
16035: IFFALSE 16132
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_INT 22
16050: PUSH
16051: LD_OWVAR 2
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 21
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 3
16072: PUSH
16073: LD_INT 23
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: ST_TO_ADDR
// if not tmp then
16097: LD_VAR 0 1
16101: NOT
16102: IFFALSE 16106
// exit ;
16104: GO 16132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16106: LD_VAR 0 1
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 12
16123: ARRAY
16124: PPUSH
16125: LD_INT 200
16127: PPUSH
16128: CALL_OW 234
// end ;
16132: PPOPN 1
16134: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16135: LD_EXP 57
16139: PUSH
16140: LD_EXP 86
16144: AND
16145: IFFALSE 16224
16147: GO 16149
16149: DISABLE
16150: LD_INT 0
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16153: LD_ADDR_VAR 0 1
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 21
16172: PUSH
16173: LD_INT 2
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: ST_TO_ADDR
// if not tmp then
16189: LD_VAR 0 1
16193: NOT
16194: IFFALSE 16198
// exit ;
16196: GO 16224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: PPUSH
16217: LD_INT 60
16219: PPUSH
16220: CALL_OW 234
// end ;
16224: PPOPN 1
16226: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16227: LD_EXP 57
16231: PUSH
16232: LD_EXP 87
16236: AND
16237: IFFALSE 16336
16239: GO 16241
16241: DISABLE
16242: LD_INT 0
16244: PPUSH
16245: PPUSH
// begin enable ;
16246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16247: LD_ADDR_VAR 0 1
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_OWVAR 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 61
16266: PUSH
16267: EMPTY
16268: LIST
16269: PUSH
16270: LD_INT 33
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PPUSH
16285: CALL_OW 69
16289: ST_TO_ADDR
// if not tmp then
16290: LD_VAR 0 1
16294: NOT
16295: IFFALSE 16299
// exit ;
16297: GO 16336
// for i in tmp do
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_VAR 0 1
16308: PUSH
16309: FOR_IN
16310: IFFALSE 16334
// if IsControledBy ( i ) then
16312: LD_VAR 0 2
16316: PPUSH
16317: CALL_OW 312
16321: IFFALSE 16332
// ComUnlink ( i ) ;
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 136
16332: GO 16309
16334: POP
16335: POP
// end ;
16336: PPOPN 2
16338: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16339: LD_EXP 57
16343: PUSH
16344: LD_EXP 88
16348: AND
16349: IFFALSE 16483
16351: GO 16353
16353: DISABLE
16354: LD_INT 0
16356: PPUSH
16357: PPUSH
// begin ToLua ( displayPowell(); ) ;
16358: LD_STRING displayPowell();
16360: PPUSH
16361: CALL_OW 559
// uc_side := 0 ;
16365: LD_ADDR_OWVAR 20
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// uc_nation := 2 ;
16373: LD_ADDR_OWVAR 21
16377: PUSH
16378: LD_INT 2
16380: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16381: LD_ADDR_OWVAR 37
16385: PUSH
16386: LD_INT 14
16388: ST_TO_ADDR
// vc_engine := engine_siberite ;
16389: LD_ADDR_OWVAR 39
16393: PUSH
16394: LD_INT 3
16396: ST_TO_ADDR
// vc_control := control_apeman ;
16397: LD_ADDR_OWVAR 38
16401: PUSH
16402: LD_INT 5
16404: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16405: LD_ADDR_OWVAR 40
16409: PUSH
16410: LD_INT 29
16412: ST_TO_ADDR
// un := CreateVehicle ;
16413: LD_ADDR_VAR 0 2
16417: PUSH
16418: CALL_OW 45
16422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16435: LD_INT 35
16437: PPUSH
16438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16442: LD_VAR 0 2
16446: PPUSH
16447: LD_OWVAR 3
16451: PUSH
16452: LD_VAR 0 2
16456: DIFF
16457: PPUSH
16458: LD_VAR 0 2
16462: PPUSH
16463: CALL_OW 74
16467: PPUSH
16468: CALL_OW 115
// until IsOk ( un ) ;
16472: LD_VAR 0 2
16476: PPUSH
16477: CALL_OW 302
16481: IFFALSE 16435
// end ;
16483: PPOPN 2
16485: END
// every 0 0$1 trigger StreamModeActive and sStu do
16486: LD_EXP 57
16490: PUSH
16491: LD_EXP 96
16495: AND
16496: IFFALSE 16508
16498: GO 16500
16500: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16501: LD_STRING displayStucuk();
16503: PPUSH
16504: CALL_OW 559
// end ;
16508: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16509: LD_EXP 57
16513: PUSH
16514: LD_EXP 89
16518: AND
16519: IFFALSE 16660
16521: GO 16523
16523: DISABLE
16524: LD_INT 0
16526: PPUSH
16527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16528: LD_ADDR_VAR 0 2
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_OWVAR 2
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 21
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 69
16563: ST_TO_ADDR
// if not tmp then
16564: LD_VAR 0 2
16568: NOT
16569: IFFALSE 16573
// exit ;
16571: GO 16660
// un := tmp [ rand ( 1 , tmp ) ] ;
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_VAR 0 2
16590: PPUSH
16591: CALL_OW 12
16595: ARRAY
16596: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16597: LD_VAR 0 1
16601: PPUSH
16602: LD_INT 0
16604: PPUSH
16605: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: LD_OWVAR 3
16618: PUSH
16619: LD_VAR 0 1
16623: DIFF
16624: PPUSH
16625: LD_VAR 0 1
16629: PPUSH
16630: CALL_OW 74
16634: PPUSH
16635: CALL_OW 115
// wait ( 0 0$20 ) ;
16639: LD_INT 700
16641: PPUSH
16642: CALL_OW 67
// SetSide ( un , your_side ) ;
16646: LD_VAR 0 1
16650: PPUSH
16651: LD_OWVAR 2
16655: PPUSH
16656: CALL_OW 235
// end ;
16660: PPOPN 2
16662: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16663: LD_EXP 57
16667: PUSH
16668: LD_EXP 90
16672: AND
16673: IFFALSE 16779
16675: GO 16677
16677: DISABLE
16678: LD_INT 0
16680: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16681: LD_ADDR_VAR 0 1
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_OWVAR 2
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: LD_INT 30
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 30
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PPUSH
16730: CALL_OW 69
16734: ST_TO_ADDR
// if not depot then
16735: LD_VAR 0 1
16739: NOT
16740: IFFALSE 16744
// exit ;
16742: GO 16779
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16744: LD_VAR 0 1
16748: PUSH
16749: LD_INT 1
16751: ARRAY
16752: PPUSH
16753: CALL_OW 250
16757: PPUSH
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 1
16765: ARRAY
16766: PPUSH
16767: CALL_OW 251
16771: PPUSH
16772: LD_INT 70
16774: PPUSH
16775: CALL_OW 495
// end ;
16779: PPOPN 1
16781: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16782: LD_EXP 57
16786: PUSH
16787: LD_EXP 91
16791: AND
16792: IFFALSE 17003
16794: GO 16796
16796: DISABLE
16797: LD_INT 0
16799: PPUSH
16800: PPUSH
16801: PPUSH
16802: PPUSH
16803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: LD_INT 22
16811: PUSH
16812: LD_OWVAR 2
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 21
16823: PUSH
16824: LD_INT 1
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: ST_TO_ADDR
// if not tmp then
16840: LD_VAR 0 5
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 17003
// for i in tmp do
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_VAR 0 5
16858: PUSH
16859: FOR_IN
16860: IFFALSE 17001
// begin d := rand ( 0 , 5 ) ;
16862: LD_ADDR_VAR 0 4
16866: PUSH
16867: LD_INT 0
16869: PPUSH
16870: LD_INT 5
16872: PPUSH
16873: CALL_OW 12
16877: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16878: LD_ADDR_VAR 0 2
16882: PUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 250
16892: PPUSH
16893: LD_VAR 0 4
16897: PPUSH
16898: LD_INT 3
16900: PPUSH
16901: LD_INT 12
16903: PPUSH
16904: CALL_OW 12
16908: PPUSH
16909: CALL_OW 272
16913: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16914: LD_ADDR_VAR 0 3
16918: PUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL_OW 251
16928: PPUSH
16929: LD_VAR 0 4
16933: PPUSH
16934: LD_INT 3
16936: PPUSH
16937: LD_INT 12
16939: PPUSH
16940: CALL_OW 12
16944: PPUSH
16945: CALL_OW 273
16949: ST_TO_ADDR
// if ValidHex ( x , y ) then
16950: LD_VAR 0 2
16954: PPUSH
16955: LD_VAR 0 3
16959: PPUSH
16960: CALL_OW 488
16964: IFFALSE 16999
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_VAR 0 2
16975: PPUSH
16976: LD_VAR 0 3
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 6
16986: PPUSH
16987: CALL_OW 12
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 483
// end ;
16999: GO 16859
17001: POP
17002: POP
// end ;
17003: PPOPN 5
17005: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17006: LD_EXP 57
17010: PUSH
17011: LD_EXP 92
17015: AND
17016: IFFALSE 17110
17018: GO 17020
17020: DISABLE
17021: LD_INT 0
17023: PPUSH
17024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17025: LD_ADDR_VAR 0 2
17029: PUSH
17030: LD_INT 22
17032: PUSH
17033: LD_OWVAR 2
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 32
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: ST_TO_ADDR
// if not tmp then
17072: LD_VAR 0 2
17076: NOT
17077: IFFALSE 17081
// exit ;
17079: GO 17110
// for i in tmp do
17081: LD_ADDR_VAR 0 1
17085: PUSH
17086: LD_VAR 0 2
17090: PUSH
17091: FOR_IN
17092: IFFALSE 17108
// SetFuel ( i , 0 ) ;
17094: LD_VAR 0 1
17098: PPUSH
17099: LD_INT 0
17101: PPUSH
17102: CALL_OW 240
17106: GO 17091
17108: POP
17109: POP
// end ;
17110: PPOPN 2
17112: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17113: LD_EXP 57
17117: PUSH
17118: LD_EXP 93
17122: AND
17123: IFFALSE 17189
17125: GO 17127
17127: DISABLE
17128: LD_INT 0
17130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: LD_INT 22
17138: PUSH
17139: LD_OWVAR 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 30
17150: PUSH
17151: LD_INT 29
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PPUSH
17162: CALL_OW 69
17166: ST_TO_ADDR
// if not tmp then
17167: LD_VAR 0 1
17171: NOT
17172: IFFALSE 17176
// exit ;
17174: GO 17189
// DestroyUnit ( tmp [ 1 ] ) ;
17176: LD_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: PPUSH
17185: CALL_OW 65
// end ;
17189: PPOPN 1
17191: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17192: LD_EXP 57
17196: PUSH
17197: LD_EXP 95
17201: AND
17202: IFFALSE 17331
17204: GO 17206
17206: DISABLE
17207: LD_INT 0
17209: PPUSH
// begin uc_side := 0 ;
17210: LD_ADDR_OWVAR 20
17214: PUSH
17215: LD_INT 0
17217: ST_TO_ADDR
// uc_nation := nation_arabian ;
17218: LD_ADDR_OWVAR 21
17222: PUSH
17223: LD_INT 2
17225: ST_TO_ADDR
// hc_gallery :=  ;
17226: LD_ADDR_OWVAR 33
17230: PUSH
17231: LD_STRING 
17233: ST_TO_ADDR
// hc_name :=  ;
17234: LD_ADDR_OWVAR 26
17238: PUSH
17239: LD_STRING 
17241: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17242: LD_INT 1
17244: PPUSH
17245: LD_INT 11
17247: PPUSH
17248: LD_INT 10
17250: PPUSH
17251: CALL_OW 380
// un := CreateHuman ;
17255: LD_ADDR_VAR 0 1
17259: PUSH
17260: CALL_OW 44
17264: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17265: LD_VAR 0 1
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17277: LD_INT 35
17279: PPUSH
17280: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17284: LD_VAR 0 1
17288: PPUSH
17289: LD_INT 22
17291: PUSH
17292: LD_OWVAR 2
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: PPUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 74
17315: PPUSH
17316: CALL_OW 115
// until IsDead ( un ) ;
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 301
17329: IFFALSE 17277
// end ;
17331: PPOPN 1
17333: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17334: LD_EXP 57
17338: PUSH
17339: LD_EXP 97
17343: AND
17344: IFFALSE 17356
17346: GO 17348
17348: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17349: LD_STRING earthquake(getX(game), 0, 32)
17351: PPUSH
17352: CALL_OW 559
17356: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17357: LD_EXP 57
17361: PUSH
17362: LD_EXP 98
17366: AND
17367: IFFALSE 17458
17369: GO 17371
17371: DISABLE
17372: LD_INT 0
17374: PPUSH
// begin enable ;
17375: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17376: LD_ADDR_VAR 0 1
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_OWVAR 2
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 21
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 33
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: PPUSH
17418: CALL_OW 69
17422: ST_TO_ADDR
// if not tmp then
17423: LD_VAR 0 1
17427: NOT
17428: IFFALSE 17432
// exit ;
17430: GO 17458
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17432: LD_VAR 0 1
17436: PUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_VAR 0 1
17444: PPUSH
17445: CALL_OW 12
17449: ARRAY
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 234
// end ;
17458: PPOPN 1
17460: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17461: LD_EXP 57
17465: PUSH
17466: LD_EXP 99
17470: AND
17471: IFFALSE 17612
17473: GO 17475
17475: DISABLE
17476: LD_INT 0
17478: PPUSH
17479: PPUSH
17480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17481: LD_ADDR_VAR 0 3
17485: PUSH
17486: LD_INT 22
17488: PUSH
17489: LD_OWVAR 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 25
17500: PUSH
17501: LD_INT 1
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: ST_TO_ADDR
// if not tmp then
17517: LD_VAR 0 3
17521: NOT
17522: IFFALSE 17526
// exit ;
17524: GO 17612
// un := tmp [ rand ( 1 , tmp ) ] ;
17526: LD_ADDR_VAR 0 2
17530: PUSH
17531: LD_VAR 0 3
17535: PUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_VAR 0 3
17543: PPUSH
17544: CALL_OW 12
17548: ARRAY
17549: ST_TO_ADDR
// if Crawls ( un ) then
17550: LD_VAR 0 2
17554: PPUSH
17555: CALL_OW 318
17559: IFFALSE 17570
// ComWalk ( un ) ;
17561: LD_VAR 0 2
17565: PPUSH
17566: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17570: LD_VAR 0 2
17574: PPUSH
17575: LD_INT 9
17577: PPUSH
17578: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17582: LD_INT 28
17584: PPUSH
17585: LD_OWVAR 2
17589: PPUSH
17590: LD_INT 2
17592: PPUSH
17593: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17597: LD_INT 29
17599: PPUSH
17600: LD_OWVAR 2
17604: PPUSH
17605: LD_INT 2
17607: PPUSH
17608: CALL_OW 322
// end ;
17612: PPOPN 3
17614: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17615: LD_EXP 57
17619: PUSH
17620: LD_EXP 100
17624: AND
17625: IFFALSE 17736
17627: GO 17629
17629: DISABLE
17630: LD_INT 0
17632: PPUSH
17633: PPUSH
17634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17635: LD_ADDR_VAR 0 3
17639: PUSH
17640: LD_INT 22
17642: PUSH
17643: LD_OWVAR 2
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 25
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: ST_TO_ADDR
// if not tmp then
17671: LD_VAR 0 3
17675: NOT
17676: IFFALSE 17680
// exit ;
17678: GO 17736
// un := tmp [ rand ( 1 , tmp ) ] ;
17680: LD_ADDR_VAR 0 2
17684: PUSH
17685: LD_VAR 0 3
17689: PUSH
17690: LD_INT 1
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: CALL_OW 12
17702: ARRAY
17703: ST_TO_ADDR
// if Crawls ( un ) then
17704: LD_VAR 0 2
17708: PPUSH
17709: CALL_OW 318
17713: IFFALSE 17724
// ComWalk ( un ) ;
17715: LD_VAR 0 2
17719: PPUSH
17720: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_INT 8
17731: PPUSH
17732: CALL_OW 336
// end ;
17736: PPOPN 3
17738: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17739: LD_EXP 57
17743: PUSH
17744: LD_EXP 101
17748: AND
17749: IFFALSE 17893
17751: GO 17753
17753: DISABLE
17754: LD_INT 0
17756: PPUSH
17757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17758: LD_ADDR_VAR 0 2
17762: PUSH
17763: LD_INT 22
17765: PUSH
17766: LD_OWVAR 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 21
17777: PUSH
17778: LD_INT 2
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 2
17787: PUSH
17788: LD_INT 34
17790: PUSH
17791: LD_INT 12
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 34
17800: PUSH
17801: LD_INT 51
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 34
17810: PUSH
17811: LD_INT 32
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if not tmp then
17834: LD_VAR 0 2
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17893
// for i in tmp do
17843: LD_ADDR_VAR 0 1
17847: PUSH
17848: LD_VAR 0 2
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17891
// if GetCargo ( i , mat_artifact ) = 0 then
17856: LD_VAR 0 1
17860: PPUSH
17861: LD_INT 4
17863: PPUSH
17864: CALL_OW 289
17868: PUSH
17869: LD_INT 0
17871: EQUAL
17872: IFFALSE 17889
// SetCargo ( i , mat_siberit , 100 ) ;
17874: LD_VAR 0 1
17878: PPUSH
17879: LD_INT 3
17881: PPUSH
17882: LD_INT 100
17884: PPUSH
17885: CALL_OW 290
17889: GO 17853
17891: POP
17892: POP
// end ;
17893: PPOPN 2
17895: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17896: LD_EXP 57
17900: PUSH
17901: LD_EXP 102
17905: AND
17906: IFFALSE 18059
17908: GO 17910
17910: DISABLE
17911: LD_INT 0
17913: PPUSH
17914: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_INT 22
17922: PUSH
17923: LD_OWVAR 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: CALL_OW 69
17936: ST_TO_ADDR
// if not tmp then
17937: LD_VAR 0 2
17941: NOT
17942: IFFALSE 17946
// exit ;
17944: GO 18059
// for i := 1 to 2 do
17946: LD_ADDR_VAR 0 1
17950: PUSH
17951: DOUBLE
17952: LD_INT 1
17954: DEC
17955: ST_TO_ADDR
17956: LD_INT 2
17958: PUSH
17959: FOR_TO
17960: IFFALSE 18057
// begin uc_side := your_side ;
17962: LD_ADDR_OWVAR 20
17966: PUSH
17967: LD_OWVAR 2
17971: ST_TO_ADDR
// uc_nation := nation_american ;
17972: LD_ADDR_OWVAR 21
17976: PUSH
17977: LD_INT 1
17979: ST_TO_ADDR
// vc_chassis := us_morphling ;
17980: LD_ADDR_OWVAR 37
17984: PUSH
17985: LD_INT 5
17987: ST_TO_ADDR
// vc_engine := engine_siberite ;
17988: LD_ADDR_OWVAR 39
17992: PUSH
17993: LD_INT 3
17995: ST_TO_ADDR
// vc_control := control_computer ;
17996: LD_ADDR_OWVAR 38
18000: PUSH
18001: LD_INT 3
18003: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18004: LD_ADDR_OWVAR 40
18008: PUSH
18009: LD_INT 10
18011: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
18012: CALL_OW 45
18016: PPUSH
18017: LD_VAR 0 2
18021: PUSH
18022: LD_INT 1
18024: ARRAY
18025: PPUSH
18026: CALL_OW 250
18030: PPUSH
18031: LD_VAR 0 2
18035: PUSH
18036: LD_INT 1
18038: ARRAY
18039: PPUSH
18040: CALL_OW 251
18044: PPUSH
18045: LD_INT 12
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: CALL_OW 50
// end ;
18055: GO 17959
18057: POP
18058: POP
// end ;
18059: PPOPN 2
18061: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18062: LD_EXP 57
18066: PUSH
18067: LD_EXP 103
18071: AND
18072: IFFALSE 18294
18074: GO 18076
18076: DISABLE
18077: LD_INT 0
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
18083: PPUSH
18084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18085: LD_ADDR_VAR 0 6
18089: PUSH
18090: LD_INT 22
18092: PUSH
18093: LD_OWVAR 2
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 21
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: LD_INT 23
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: ST_TO_ADDR
// if not tmp then
18139: LD_VAR 0 6
18143: NOT
18144: IFFALSE 18148
// exit ;
18146: GO 18294
// s1 := rand ( 1 , 4 ) ;
18148: LD_ADDR_VAR 0 2
18152: PUSH
18153: LD_INT 1
18155: PPUSH
18156: LD_INT 4
18158: PPUSH
18159: CALL_OW 12
18163: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18164: LD_ADDR_VAR 0 4
18168: PUSH
18169: LD_VAR 0 6
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PPUSH
18178: LD_VAR 0 2
18182: PPUSH
18183: CALL_OW 259
18187: ST_TO_ADDR
// if s1 = 1 then
18188: LD_VAR 0 2
18192: PUSH
18193: LD_INT 1
18195: EQUAL
18196: IFFALSE 18216
// s2 := rand ( 2 , 4 ) else
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_INT 2
18205: PPUSH
18206: LD_INT 4
18208: PPUSH
18209: CALL_OW 12
18213: ST_TO_ADDR
18214: GO 18224
// s2 := 1 ;
18216: LD_ADDR_VAR 0 3
18220: PUSH
18221: LD_INT 1
18223: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18224: LD_ADDR_VAR 0 5
18228: PUSH
18229: LD_VAR 0 6
18233: PUSH
18234: LD_INT 1
18236: ARRAY
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: CALL_OW 259
18247: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18248: LD_VAR 0 6
18252: PUSH
18253: LD_INT 1
18255: ARRAY
18256: PPUSH
18257: LD_VAR 0 2
18261: PPUSH
18262: LD_VAR 0 5
18266: PPUSH
18267: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18271: LD_VAR 0 6
18275: PUSH
18276: LD_INT 1
18278: ARRAY
18279: PPUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: LD_VAR 0 4
18289: PPUSH
18290: CALL_OW 237
// end ;
18294: PPOPN 6
18296: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18297: LD_EXP 57
18301: PUSH
18302: LD_EXP 104
18306: AND
18307: IFFALSE 18386
18309: GO 18311
18311: DISABLE
18312: LD_INT 0
18314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18315: LD_ADDR_VAR 0 1
18319: PUSH
18320: LD_INT 22
18322: PUSH
18323: LD_OWVAR 2
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 69
18350: ST_TO_ADDR
// if not tmp then
18351: LD_VAR 0 1
18355: NOT
18356: IFFALSE 18360
// exit ;
18358: GO 18386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18360: LD_VAR 0 1
18364: PUSH
18365: LD_INT 1
18367: PPUSH
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 12
18377: ARRAY
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: CALL_OW 234
// end ;
18386: PPOPN 1
18388: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18389: LD_EXP 57
18393: PUSH
18394: LD_EXP 105
18398: AND
18399: IFFALSE 18511
18401: GO 18403
18403: DISABLE
18404: LD_INT 0
18406: PPUSH
18407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18408: LD_ADDR_VAR 0 2
18412: PUSH
18413: LD_INT 22
18415: PUSH
18416: LD_OWVAR 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 30
18430: PUSH
18431: LD_INT 27
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 30
18440: PUSH
18441: LD_INT 26
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 30
18450: PUSH
18451: LD_INT 28
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PPUSH
18468: CALL_OW 69
18472: ST_TO_ADDR
// if not tmp then
18473: LD_VAR 0 2
18477: NOT
18478: IFFALSE 18482
// exit ;
18480: GO 18511
// for i in tmp do
18482: LD_ADDR_VAR 0 1
18486: PUSH
18487: LD_VAR 0 2
18491: PUSH
18492: FOR_IN
18493: IFFALSE 18509
// SetLives ( i , 1 ) ;
18495: LD_VAR 0 1
18499: PPUSH
18500: LD_INT 1
18502: PPUSH
18503: CALL_OW 234
18507: GO 18492
18509: POP
18510: POP
// end ;
18511: PPOPN 2
18513: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18514: LD_EXP 57
18518: PUSH
18519: LD_EXP 106
18523: AND
18524: IFFALSE 18794
18526: GO 18528
18528: DISABLE
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
18533: PPUSH
// begin i := rand ( 1 , 7 ) ;
18534: LD_ADDR_VAR 0 1
18538: PUSH
18539: LD_INT 1
18541: PPUSH
18542: LD_INT 7
18544: PPUSH
18545: CALL_OW 12
18549: ST_TO_ADDR
// case i of 1 :
18550: LD_VAR 0 1
18554: PUSH
18555: LD_INT 1
18557: DOUBLE
18558: EQUAL
18559: IFTRUE 18563
18561: GO 18573
18563: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18564: LD_STRING earthquake(getX(game), 0, 32)
18566: PPUSH
18567: CALL_OW 559
18571: GO 18794
18573: LD_INT 2
18575: DOUBLE
18576: EQUAL
18577: IFTRUE 18581
18579: GO 18591
18581: POP
// ToLua ( displayStucuk(); ) ; 3 :
18582: LD_STRING displayStucuk();
18584: PPUSH
18585: CALL_OW 559
18589: GO 18794
18591: LD_INT 3
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 18703
18599: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18600: LD_ADDR_VAR 0 2
18604: PUSH
18605: LD_INT 22
18607: PUSH
18608: LD_OWVAR 2
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 25
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PPUSH
18631: CALL_OW 69
18635: ST_TO_ADDR
// if not tmp then
18636: LD_VAR 0 2
18640: NOT
18641: IFFALSE 18645
// exit ;
18643: GO 18794
// un := tmp [ rand ( 1 , tmp ) ] ;
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: LD_VAR 0 2
18654: PUSH
18655: LD_INT 1
18657: PPUSH
18658: LD_VAR 0 2
18662: PPUSH
18663: CALL_OW 12
18667: ARRAY
18668: ST_TO_ADDR
// if Crawls ( un ) then
18669: LD_VAR 0 3
18673: PPUSH
18674: CALL_OW 318
18678: IFFALSE 18689
// ComWalk ( un ) ;
18680: LD_VAR 0 3
18684: PPUSH
18685: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18689: LD_VAR 0 3
18693: PPUSH
18694: LD_INT 8
18696: PPUSH
18697: CALL_OW 336
// end ; 4 :
18701: GO 18794
18703: LD_INT 4
18705: DOUBLE
18706: EQUAL
18707: IFTRUE 18711
18709: GO 18772
18711: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18712: LD_ADDR_VAR 0 2
18716: PUSH
18717: LD_INT 22
18719: PUSH
18720: LD_OWVAR 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 29
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PPUSH
18743: CALL_OW 69
18747: ST_TO_ADDR
// if not tmp then
18748: LD_VAR 0 2
18752: NOT
18753: IFFALSE 18757
// exit ;
18755: GO 18794
// DestroyUnit ( tmp [ 1 ] ) ;
18757: LD_VAR 0 2
18761: PUSH
18762: LD_INT 1
18764: ARRAY
18765: PPUSH
18766: CALL_OW 65
// end ; 5 .. 7 :
18770: GO 18794
18772: LD_INT 5
18774: DOUBLE
18775: GREATEREQUAL
18776: IFFALSE 18784
18778: LD_INT 7
18780: DOUBLE
18781: LESSEQUAL
18782: IFTRUE 18786
18784: GO 18793
18786: POP
// StreamSibBomb ; end ;
18787: CALL 15088 0 0
18791: GO 18794
18793: POP
// end ;
18794: PPOPN 3
18796: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18797: LD_EXP 57
18801: PUSH
18802: LD_EXP 107
18806: AND
18807: IFFALSE 18963
18809: GO 18811
18811: DISABLE
18812: LD_INT 0
18814: PPUSH
18815: PPUSH
18816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18817: LD_ADDR_VAR 0 2
18821: PUSH
18822: LD_INT 81
18824: PUSH
18825: LD_OWVAR 2
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 21
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PPUSH
18866: CALL_OW 69
18870: ST_TO_ADDR
// if not tmp then
18871: LD_VAR 0 2
18875: NOT
18876: IFFALSE 18880
// exit ;
18878: GO 18963
// p := 0 ;
18880: LD_ADDR_VAR 0 3
18884: PUSH
18885: LD_INT 0
18887: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18888: LD_INT 35
18890: PPUSH
18891: CALL_OW 67
// p := p + 1 ;
18895: LD_ADDR_VAR 0 3
18899: PUSH
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 1
18907: PLUS
18908: ST_TO_ADDR
// for i in tmp do
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_VAR 0 2
18918: PUSH
18919: FOR_IN
18920: IFFALSE 18951
// if GetLives ( i ) < 1000 then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 256
18931: PUSH
18932: LD_INT 1000
18934: LESS
18935: IFFALSE 18949
// SetLives ( i , 1000 ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: LD_INT 1000
18944: PPUSH
18945: CALL_OW 234
18949: GO 18919
18951: POP
18952: POP
// until p > 20 ;
18953: LD_VAR 0 3
18957: PUSH
18958: LD_INT 20
18960: GREATER
18961: IFFALSE 18888
// end ;
18963: PPOPN 3
18965: END
// every 0 0$1 trigger StreamModeActive and sTime do
18966: LD_EXP 57
18970: PUSH
18971: LD_EXP 108
18975: AND
18976: IFFALSE 19011
18978: GO 18980
18980: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18981: LD_INT 28
18983: PPUSH
18984: LD_OWVAR 2
18988: PPUSH
18989: LD_INT 2
18991: PPUSH
18992: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18996: LD_INT 30
18998: PPUSH
18999: LD_OWVAR 2
19003: PPUSH
19004: LD_INT 2
19006: PPUSH
19007: CALL_OW 322
// end ;
19011: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19012: LD_EXP 57
19016: PUSH
19017: LD_EXP 109
19021: AND
19022: IFFALSE 19143
19024: GO 19026
19026: DISABLE
19027: LD_INT 0
19029: PPUSH
19030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_OWVAR 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 21
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 3
19060: PUSH
19061: LD_INT 23
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: ST_TO_ADDR
// if not tmp then
19085: LD_VAR 0 2
19089: NOT
19090: IFFALSE 19094
// exit ;
19092: GO 19143
// for i in tmp do
19094: LD_ADDR_VAR 0 1
19098: PUSH
19099: LD_VAR 0 2
19103: PUSH
19104: FOR_IN
19105: IFFALSE 19141
// begin if Crawls ( i ) then
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 318
19116: IFFALSE 19127
// ComWalk ( i ) ;
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 138
// SetClass ( i , 2 ) ;
19127: LD_VAR 0 1
19131: PPUSH
19132: LD_INT 2
19134: PPUSH
19135: CALL_OW 336
// end ;
19139: GO 19104
19141: POP
19142: POP
// end ;
19143: PPOPN 2
19145: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19146: LD_EXP 57
19150: PUSH
19151: LD_EXP 110
19155: AND
19156: IFFALSE 19361
19158: GO 19160
19160: DISABLE
19161: LD_INT 0
19163: PPUSH
19164: PPUSH
19165: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19166: LD_OWVAR 2
19170: PPUSH
19171: LD_INT 9
19173: PPUSH
19174: LD_INT 1
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19184: LD_INT 9
19186: PPUSH
19187: LD_OWVAR 2
19191: PPUSH
19192: CALL_OW 343
// hc_name := Dark Warrior ;
19196: LD_ADDR_OWVAR 26
19200: PUSH
19201: LD_STRING Dark Warrior
19203: ST_TO_ADDR
// hc_gallery :=  ;
19204: LD_ADDR_OWVAR 33
19208: PUSH
19209: LD_STRING 
19211: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
19212: LD_INT 1
19214: PPUSH
19215: LD_INT 1
19217: PPUSH
19218: LD_INT 10
19220: PPUSH
19221: CALL_OW 380
// un := CreateHuman ;
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: CALL_OW 44
19234: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19235: LD_VAR 0 3
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: CALL_OW 51
// p := 0 ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19255: LD_INT 35
19257: PPUSH
19258: CALL_OW 67
// if GetLives ( un ) < 1000 then
19262: LD_VAR 0 3
19266: PPUSH
19267: CALL_OW 256
19271: PUSH
19272: LD_INT 1000
19274: LESS
19275: IFFALSE 19289
// SetLives ( un , 1000 ) ;
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 1000
19284: PPUSH
19285: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
19289: LD_VAR 0 3
19293: PPUSH
19294: LD_INT 81
19296: PUSH
19297: LD_OWVAR 2
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PPUSH
19306: CALL_OW 69
19310: PPUSH
19311: LD_VAR 0 3
19315: PPUSH
19316: CALL_OW 74
19320: PPUSH
19321: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
19325: LD_VAR 0 2
19329: PUSH
19330: LD_INT 60
19332: GREATER
19333: PUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: CALL_OW 301
19343: OR
19344: IFFALSE 19255
// if un then
19346: LD_VAR 0 3
19350: IFFALSE 19361
// RemoveUnit ( un ) ;
19352: LD_VAR 0 3
19356: PPUSH
19357: CALL_OW 64
// end ; end_of_file
19361: PPOPN 3
19363: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
19364: LD_INT 0
19366: PPUSH
19367: PPUSH
19368: PPUSH
19369: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19370: LD_VAR 0 1
19374: PPUSH
19375: CALL_OW 264
19379: PUSH
19380: LD_EXP 56
19384: EQUAL
19385: IFFALSE 19457
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19387: LD_INT 68
19389: PPUSH
19390: LD_VAR 0 1
19394: PPUSH
19395: CALL_OW 255
19399: PPUSH
19400: CALL_OW 321
19404: PUSH
19405: LD_INT 2
19407: EQUAL
19408: IFFALSE 19420
// eff := 70 else
19410: LD_ADDR_VAR 0 6
19414: PUSH
19415: LD_INT 70
19417: ST_TO_ADDR
19418: GO 19428
// eff := 30 ;
19420: LD_ADDR_VAR 0 6
19424: PUSH
19425: LD_INT 30
19427: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 250
19437: PPUSH
19438: LD_VAR 0 1
19442: PPUSH
19443: CALL_OW 251
19447: PPUSH
19448: LD_VAR 0 6
19452: PPUSH
19453: CALL_OW 495
// end ; end ;
19457: LD_VAR 0 4
19461: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19462: LD_INT 0
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
19468: PPUSH
19469: PPUSH
// if cmd = 124 then
19470: LD_VAR 0 1
19474: PUSH
19475: LD_INT 124
19477: EQUAL
19478: IFFALSE 19684
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19480: LD_ADDR_VAR 0 5
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: LD_INT 34
19490: PUSH
19491: LD_INT 53
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 34
19500: PUSH
19501: LD_INT 14
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: PPUSH
19513: CALL_OW 69
19517: ST_TO_ADDR
// if not tmp then
19518: LD_VAR 0 5
19522: NOT
19523: IFFALSE 19527
// exit ;
19525: GO 19684
// for i in tmp do
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: LD_VAR 0 5
19536: PUSH
19537: FOR_IN
19538: IFFALSE 19682
// begin taskList := GetTaskList ( i ) ;
19540: LD_ADDR_VAR 0 6
19544: PUSH
19545: LD_VAR 0 3
19549: PPUSH
19550: CALL_OW 437
19554: ST_TO_ADDR
// if not taskList then
19555: LD_VAR 0 6
19559: NOT
19560: IFFALSE 19564
// continue ;
19562: GO 19537
// for j = 1 to taskList do
19564: LD_ADDR_VAR 0 4
19568: PUSH
19569: DOUBLE
19570: LD_INT 1
19572: DEC
19573: ST_TO_ADDR
19574: LD_VAR 0 6
19578: PUSH
19579: FOR_TO
19580: IFFALSE 19678
// if taskList [ j ] [ 1 ] = | then
19582: LD_VAR 0 6
19586: PUSH
19587: LD_VAR 0 4
19591: ARRAY
19592: PUSH
19593: LD_INT 1
19595: ARRAY
19596: PUSH
19597: LD_STRING |
19599: EQUAL
19600: IFFALSE 19676
// begin _taskList := Delete ( taskList , 1 ) ;
19602: LD_ADDR_VAR 0 7
19606: PUSH
19607: LD_VAR 0 6
19611: PPUSH
19612: LD_INT 1
19614: PPUSH
19615: CALL_OW 3
19619: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_VAR 0 7
19629: PPUSH
19630: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
19634: LD_VAR 0 3
19638: PPUSH
19639: LD_VAR 0 6
19643: PUSH
19644: LD_VAR 0 4
19648: ARRAY
19649: PUSH
19650: LD_INT 2
19652: ARRAY
19653: PPUSH
19654: LD_VAR 0 6
19658: PUSH
19659: LD_VAR 0 4
19663: ARRAY
19664: PUSH
19665: LD_INT 3
19667: ARRAY
19668: PPUSH
19669: LD_INT 8
19671: PPUSH
19672: CALL 19689 0 4
// end ;
19676: GO 19579
19678: POP
19679: POP
// end ;
19680: GO 19537
19682: POP
19683: POP
// end ; end ;
19684: LD_VAR 0 2
19688: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19689: LD_INT 0
19691: PPUSH
19692: PPUSH
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
19698: PPUSH
19699: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19700: LD_VAR 0 1
19704: NOT
19705: PUSH
19706: LD_VAR 0 2
19710: PPUSH
19711: LD_VAR 0 3
19715: PPUSH
19716: CALL_OW 488
19720: NOT
19721: OR
19722: PUSH
19723: LD_VAR 0 4
19727: NOT
19728: OR
19729: IFFALSE 19733
// exit ;
19731: GO 20073
// list := [ ] ;
19733: LD_ADDR_VAR 0 13
19737: PUSH
19738: EMPTY
19739: ST_TO_ADDR
// if x - r < 0 then
19740: LD_VAR 0 2
19744: PUSH
19745: LD_VAR 0 4
19749: MINUS
19750: PUSH
19751: LD_INT 0
19753: LESS
19754: IFFALSE 19766
// min_x := 0 else
19756: LD_ADDR_VAR 0 7
19760: PUSH
19761: LD_INT 0
19763: ST_TO_ADDR
19764: GO 19782
// min_x := x - r ;
19766: LD_ADDR_VAR 0 7
19770: PUSH
19771: LD_VAR 0 2
19775: PUSH
19776: LD_VAR 0 4
19780: MINUS
19781: ST_TO_ADDR
// if y - r < 0 then
19782: LD_VAR 0 3
19786: PUSH
19787: LD_VAR 0 4
19791: MINUS
19792: PUSH
19793: LD_INT 0
19795: LESS
19796: IFFALSE 19808
// min_y := 0 else
19798: LD_ADDR_VAR 0 8
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
19806: GO 19824
// min_y := y - r ;
19808: LD_ADDR_VAR 0 8
19812: PUSH
19813: LD_VAR 0 3
19817: PUSH
19818: LD_VAR 0 4
19822: MINUS
19823: ST_TO_ADDR
// max_x := x + r ;
19824: LD_ADDR_VAR 0 9
19828: PUSH
19829: LD_VAR 0 2
19833: PUSH
19834: LD_VAR 0 4
19838: PLUS
19839: ST_TO_ADDR
// max_y := y + r ;
19840: LD_ADDR_VAR 0 10
19844: PUSH
19845: LD_VAR 0 3
19849: PUSH
19850: LD_VAR 0 4
19854: PLUS
19855: ST_TO_ADDR
// for _x = min_x to max_x do
19856: LD_ADDR_VAR 0 11
19860: PUSH
19861: DOUBLE
19862: LD_VAR 0 7
19866: DEC
19867: ST_TO_ADDR
19868: LD_VAR 0 9
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19991
// for _y = min_y to max_y do
19876: LD_ADDR_VAR 0 12
19880: PUSH
19881: DOUBLE
19882: LD_VAR 0 8
19886: DEC
19887: ST_TO_ADDR
19888: LD_VAR 0 10
19892: PUSH
19893: FOR_TO
19894: IFFALSE 19987
// begin if not ValidHex ( _x , _y ) then
19896: LD_VAR 0 11
19900: PPUSH
19901: LD_VAR 0 12
19905: PPUSH
19906: CALL_OW 488
19910: NOT
19911: IFFALSE 19915
// continue ;
19913: GO 19893
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19915: LD_VAR 0 11
19919: PPUSH
19920: LD_VAR 0 12
19924: PPUSH
19925: CALL_OW 351
19929: PUSH
19930: LD_VAR 0 11
19934: PPUSH
19935: LD_VAR 0 12
19939: PPUSH
19940: CALL_OW 554
19944: AND
19945: IFFALSE 19985
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19947: LD_ADDR_VAR 0 13
19951: PUSH
19952: LD_VAR 0 13
19956: PPUSH
19957: LD_VAR 0 13
19961: PUSH
19962: LD_INT 1
19964: PLUS
19965: PPUSH
19966: LD_VAR 0 11
19970: PUSH
19971: LD_VAR 0 12
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PPUSH
19980: CALL_OW 2
19984: ST_TO_ADDR
// end ;
19985: GO 19893
19987: POP
19988: POP
19989: GO 19873
19991: POP
19992: POP
// if not list then
19993: LD_VAR 0 13
19997: NOT
19998: IFFALSE 20002
// exit ;
20000: GO 20073
// for i in list do
20002: LD_ADDR_VAR 0 6
20006: PUSH
20007: LD_VAR 0 13
20011: PUSH
20012: FOR_IN
20013: IFFALSE 20071
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20015: LD_VAR 0 1
20019: PPUSH
20020: LD_STRING M
20022: PUSH
20023: LD_VAR 0 6
20027: PUSH
20028: LD_INT 1
20030: ARRAY
20031: PUSH
20032: LD_VAR 0 6
20036: PUSH
20037: LD_INT 2
20039: ARRAY
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: PUSH
20062: EMPTY
20063: LIST
20064: PPUSH
20065: CALL_OW 447
20069: GO 20012
20071: POP
20072: POP
// end ;
20073: LD_VAR 0 5
20077: RET
