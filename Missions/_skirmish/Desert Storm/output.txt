// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3478 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3945 0 0
// CreateNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7878 0 5
// PrepareComm ;
 110: CALL 8361 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 4 , 5 , 6 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 6 , 7 , 8 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 7
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$50 , 9 9$30 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20650
 556: PUSH
 557: LD_INT 19950
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$30 , 6 6$40 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15750
 581: PUSH
 582: LD_INT 14000
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser , us_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: LD_INT 9
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun , ru_heavy_gun ] ;
 673: LD_ADDR_EXP 18
 677: PUSH
 678: LD_INT 45
 680: PUSH
 681: LD_INT 47
 683: PUSH
 684: LD_INT 46
 686: PUSH
 687: LD_INT 46
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: ST_TO_ADDR
// end ;
 696: LD_VAR 0 1
 700: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 701: LD_EXP 1
 705: IFFALSE 3475
 707: GO 709
 709: DISABLE
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
 714: PPUSH
 715: PPUSH
// begin enable ;
 716: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 717: LD_ADDR_OWVAR 47
 721: PUSH
 722: LD_STRING #tick
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_EXP 6
 738: ADD
 739: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_EXP 3
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: CALL 6964 0 2
 757: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 758: LD_EXP 26
 762: PUSH
 763: LD_EXP 30
 767: PUSH
 768: LD_INT 0
 770: GREATER
 771: AND
 772: IFFALSE 809
// begin game_strings := [ #mtime , meeting_time ] ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING #mtime
 781: PUSH
 782: LD_EXP 30
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_EXP 30
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL 6964 0 2
 808: ST_TO_ADDR
// end ; if meeting_arive then
 809: LD_EXP 27
 813: IFFALSE 833
// mission_time := RefreshTime ( mission_time , true ) ;
 815: LD_ADDR_EXP 34
 819: PUSH
 820: LD_EXP 34
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL 6964 0 2
 832: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 833: LD_EXP 38
 837: PUSH
 838: LD_EXP 23
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: AND
 847: PUSH
 848: LD_EXP 27
 852: AND
 853: IFFALSE 873
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 855: LD_ADDR_EXP 23
 859: PUSH
 860: LD_EXP 23
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL 6964 0 2
 872: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 873: LD_EXP 39
 877: PUSH
 878: LD_EXP 24
 882: PUSH
 883: LD_INT 0
 885: GREATER
 886: AND
 887: PUSH
 888: LD_EXP 27
 892: AND
 893: IFFALSE 913
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 895: LD_ADDR_EXP 24
 899: PUSH
 900: LD_EXP 24
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 6964 0 2
 912: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 913: LD_EXP 40
 917: PUSH
 918: LD_EXP 25
 922: PUSH
 923: LD_INT 0
 925: GREATER
 926: AND
 927: PUSH
 928: LD_EXP 27
 932: AND
 933: IFFALSE 953
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 25
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL 6964 0 2
 952: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 953: LD_EXP 43
 957: PUSH
 958: LD_EXP 31
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: AND
 967: IFFALSE 1004
// begin game_strings := [ #rtime , russian_timer ] ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_STRING #rtime
 976: PUSH
 977: LD_EXP 31
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 986: LD_ADDR_EXP 31
 990: PUSH
 991: LD_EXP 31
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL 6964 0 2
1003: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
1004: LD_EXP 43
1008: PUSH
1009: LD_EXP 31
1013: PUSH
1014: LD_INT 0
1016: EQUAL
1017: AND
1018: PUSH
1019: LD_EXP 35
1023: OR
1024: IFFALSE 1033
// game_strings := [ ] ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: EMPTY
1032: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1033: LD_EXP 37
1037: PUSH
1038: LD_INT 0
1040: EQUAL
1041: PUSH
1042: LD_OWVAR 1
1046: PUSH
1047: LD_INT 33600
1049: MOD
1050: PUSH
1051: LD_INT 0
1053: EQUAL
1054: AND
1055: IFFALSE 1115
// begin p := Rand ( 1 , 5 ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: PPUSH
1065: LD_INT 5
1067: PPUSH
1068: CALL_OW 12
1072: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 2
1096: ARRAY
1097: LESSEQUAL
1098: IFFALSE 1115
// begin RaiseSailEvent ( 92 ) ;
1100: LD_INT 92
1102: PPUSH
1103: CALL_OW 427
// dezert := true ;
1107: LD_ADDR_EXP 37
1111: PUSH
1112: LD_INT 1
1114: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1115: LD_OWVAR 1
1119: PUSH
1120: LD_INT 8400
1122: MOD
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1136
// RaiseSailEvent ( 101 ) ;
1129: LD_INT 101
1131: PPUSH
1132: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1136: LD_INT 8
1138: PPUSH
1139: CALL 7018 0 1
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: IFFALSE 1170
// begin u_mine := true ;
1155: LD_ADDR_EXP 13
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1163: LD_STRING DS-T1m
1165: PPUSH
1166: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1170: LD_INT 8
1172: PPUSH
1173: CALL 7080 0 1
1177: PUSH
1178: LD_EXP 14
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1204
// begin u_fac := true ;
1189: LD_ADDR_EXP 14
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1197: LD_STRING DS-T1f
1199: PPUSH
1200: CALL_OW 337
// end ; if hero_died then
1204: LD_EXP 33
1208: IFFALSE 1217
// YouLost ( DS-h1 ) ;
1210: LD_STRING DS-h1
1212: PPUSH
1213: CALL_OW 104
// if fort_destroyed then
1217: LD_EXP 32
1221: IFFALSE 1230
// YouLost ( DS-h2 ) ;
1223: LD_STRING DS-h2
1225: PPUSH
1226: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1230: LD_EXP 7
1234: PPUSH
1235: LD_EXP 49
1239: PPUSH
1240: CALL_OW 296
1244: PUSH
1245: LD_INT 6
1247: GREATER
1248: PUSH
1249: LD_EXP 26
1253: PUSH
1254: LD_INT 0
1256: EQUAL
1257: AND
1258: IFFALSE 1281
// begin if not HasTask ( leopold ) then
1260: LD_EXP 7
1264: PPUSH
1265: CALL_OW 314
1269: NOT
1270: IFFALSE 1279
// RaiseSailEvent ( 1 ) ;
1272: LD_INT 1
1274: PPUSH
1275: CALL_OW 427
// end else
1279: GO 1298
// if meeting_start = false then
1281: LD_EXP 26
1285: PUSH
1286: LD_INT 0
1288: EQUAL
1289: IFFALSE 1298
// begin RaiseSailEvent ( 2 ) ;
1291: LD_INT 2
1293: PPUSH
1294: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 72 72$00 ] [ game_difficulty ] and meeting_end = false then
1298: LD_EXP 3
1302: PUSH
1303: LD_INT 105000
1305: PUSH
1306: LD_INT 131250
1308: PUSH
1309: LD_INT 151200
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 2
1321: ARRAY
1322: GREATEREQUAL
1323: PUSH
1324: LD_EXP 29
1328: PUSH
1329: LD_INT 0
1331: EQUAL
1332: AND
1333: IFFALSE 1350
// begin meeting_end := true ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1343: LD_INT 200
1345: PPUSH
1346: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1350: LD_EXP 30
1354: PUSH
1355: LD_INT 0
1357: EQUAL
1358: PUSH
1359: LD_EXP 27
1363: PUSH
1364: LD_INT 0
1366: EQUAL
1367: AND
1368: IFFALSE 1392
// begin meeting_arive := true ;
1370: LD_ADDR_EXP 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// game_strings := [ ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: EMPTY
1384: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1385: LD_INT 10
1387: PPUSH
1388: CALL_OW 427
// end ; if meeting_arive then
1392: LD_EXP 27
1396: IFFALSE 2195
// begin if arabian_attack = false and tick mod 4200 = 0 then
1398: LD_EXP 38
1402: PUSH
1403: LD_INT 0
1405: EQUAL
1406: PUSH
1407: LD_OWVAR 1
1411: PUSH
1412: LD_INT 4200
1414: MOD
1415: PUSH
1416: LD_INT 0
1418: EQUAL
1419: AND
1420: IFFALSE 1473
// begin p := Rand ( 1 , 100 ) ;
1422: LD_ADDR_VAR 0 2
1426: PUSH
1427: LD_INT 1
1429: PPUSH
1430: LD_INT 100
1432: PPUSH
1433: CALL_OW 12
1437: ST_TO_ADDR
// if p <= [ 85 , 90 , 95 ] [ game_difficulty ] then
1438: LD_VAR 0 2
1442: PUSH
1443: LD_INT 85
1445: PUSH
1446: LD_INT 90
1448: PUSH
1449: LD_INT 95
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 2
1461: ARRAY
1462: LESSEQUAL
1463: IFFALSE 1473
// arabian_attack := true ;
1465: LD_ADDR_EXP 38
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1473: LD_EXP 43
1477: PUSH
1478: LD_INT 0
1480: EQUAL
1481: PUSH
1482: LD_EXP 39
1486: PUSH
1487: LD_INT 0
1489: EQUAL
1490: AND
1491: PUSH
1492: LD_OWVAR 1
1496: PUSH
1497: LD_INT 52500
1499: GREATER
1500: AND
1501: IFFALSE 1572
// begin russian_trade = true ;
1503: LD_ADDR_EXP 43
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// DialogueOn ;
1511: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1515: LD_EXP 47
1519: PPUSH
1520: LD_STRING DS-DR-RTr
1522: PPUSH
1523: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1527: LD_EXP 49
1531: PPUSH
1532: LD_STRING DS-DC-RTr
1534: PPUSH
1535: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1539: LD_EXP 47
1543: PPUSH
1544: LD_STRING DS-DR-RTr2
1546: PPUSH
1547: CALL_OW 94
// DialogueOff ;
1551: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1555: LD_STRING DS-T2
1557: PPUSH
1558: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1562: LD_INT 10
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1572: LD_EXP 43
1576: PUSH
1577: LD_EXP 35
1581: PUSH
1582: LD_INT 0
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_EXP 31
1591: PUSH
1592: LD_INT 0
1594: GREATER
1595: AND
1596: IFFALSE 1845
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1598: LD_INT 10
1600: PPUSH
1601: LD_INT 58
1603: PUSH
1604: EMPTY
1605: LIST
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 34
1612: PUSH
1613: LD_INT 32
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 34
1622: PUSH
1623: LD_INT 12
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: LD_INT 33
1640: PUSH
1641: LD_INT 2
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 70
1661: PUSH
1662: LD_INT 0
1664: GREATER
1665: IFFALSE 1845
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1667: LD_INT 10
1669: PPUSH
1670: LD_INT 58
1672: PUSH
1673: EMPTY
1674: LIST
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 34
1681: PUSH
1682: LD_INT 32
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 34
1691: PUSH
1692: LD_INT 12
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: LD_INT 33
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 70
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL_OW 289
1742: PUSH
1743: LD_INT 100
1745: EQUAL
1746: IFFALSE 1845
// begin cargo_ok := true ;
1748: LD_ADDR_EXP 35
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1756: LD_INT 10
1758: PPUSH
1759: LD_INT 58
1761: PUSH
1762: EMPTY
1763: LIST
1764: PUSH
1765: LD_INT 2
1767: PUSH
1768: LD_INT 34
1770: PUSH
1771: LD_INT 32
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 34
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 33
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 70
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1828: LD_STRING DS-T2-out
1830: PPUSH
1831: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1835: LD_INT 10
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1845: LD_EXP 39
1849: PUSH
1850: LD_INT 0
1852: EQUAL
1853: PUSH
1854: LD_EXP 43
1858: AND
1859: PUSH
1860: LD_EXP 35
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: AND
1869: PUSH
1870: LD_EXP 31
1874: PUSH
1875: LD_INT 0
1877: EQUAL
1878: AND
1879: IFFALSE 1906
// begin russian_attack := true ;
1881: LD_ADDR_EXP 39
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1889: LD_STRING DS-T2-out
1891: PPUSH
1892: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1896: LD_INT 10
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1906: LD_EXP 43
1910: PUSH
1911: LD_INT 0
1913: EQUAL
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_INT 0
1922: EQUAL
1923: AND
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: AND
1934: PUSH
1935: LD_OWVAR 1
1939: PUSH
1940: LD_INT 21000
1942: MOD
1943: PUSH
1944: LD_INT 0
1946: EQUAL
1947: AND
1948: IFFALSE 2001
// begin p := Rand ( 1 , 100 ) ;
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 100
1960: PPUSH
1961: CALL_OW 12
1965: ST_TO_ADDR
// if p <= [ 35 , 45 , 55 ] [ game_difficulty ] then
1966: LD_VAR 0 2
1970: PUSH
1971: LD_INT 35
1973: PUSH
1974: LD_INT 45
1976: PUSH
1977: LD_INT 55
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_EXP 2
1989: ARRAY
1990: LESSEQUAL
1991: IFFALSE 2001
// russian_attack := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
2001: LD_EXP 41
2005: PUSH
2006: LD_INT 0
2008: EQUAL
2009: PUSH
2010: LD_EXP 40
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: AND
2019: PUSH
2020: LD_EXP 39
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: AND
2029: PUSH
2030: LD_OWVAR 1
2034: PUSH
2035: LD_INT 31500
2037: MOD
2038: PUSH
2039: LD_INT 0
2041: EQUAL
2042: AND
2043: IFFALSE 2096
// begin p := Rand ( 1 , 100 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 100
2055: PPUSH
2056: CALL_OW 12
2060: ST_TO_ADDR
// if p <= [ 33 , 44 , 55 ] [ game_difficulty ] then
2061: LD_VAR 0 2
2065: PUSH
2066: LD_INT 33
2068: PUSH
2069: LD_INT 44
2071: PUSH
2072: LD_INT 55
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_EXP 2
2084: ARRAY
2085: LESSEQUAL
2086: IFFALSE 2096
// american_attack := true ;
2088: LD_ADDR_EXP 40
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2096: LD_EXP 40
2100: PUSH
2101: LD_INT 0
2103: EQUAL
2104: PUSH
2105: LD_EXP 39
2109: PUSH
2110: LD_INT 0
2112: EQUAL
2113: AND
2114: PUSH
2115: LD_EXP 41
2119: PUSH
2120: LD_INT 0
2122: EQUAL
2123: AND
2124: PUSH
2125: LD_OWVAR 1
2129: PUSH
2130: LD_INT 21200
2132: MOD
2133: PUSH
2134: LD_INT 0
2136: EQUAL
2137: AND
2138: IFFALSE 2195
// begin p := Rand ( 1 , 100 ) ;
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 1
2147: PPUSH
2148: LD_INT 100
2150: PPUSH
2151: CALL_OW 12
2155: ST_TO_ADDR
// if p <= american_hchan then
2156: LD_VAR 0 2
2160: PUSH
2161: LD_EXP 36
2165: LESSEQUAL
2166: IFFALSE 2195
// begin american_help := true ;
2168: LD_ADDR_EXP 41
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2176: LD_EXP 46
2180: PPUSH
2181: LD_STRING DS-amhelp
2183: PPUSH
2184: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2188: LD_INT 91
2190: PPUSH
2191: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2195: LD_EXP 40
2199: PUSH
2200: LD_EXP 25
2204: PUSH
2205: LD_INT 0
2207: EQUAL
2208: AND
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 69
2224: PUSH
2225: LD_INT 0
2227: EQUAL
2228: AND
2229: IFFALSE 2331
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2231: LD_ADDR_EXP 25
2235: PUSH
2236: LD_INT 35700
2238: PPUSH
2239: LD_INT 42000
2241: PPUSH
2242: CALL_OW 12
2246: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2247: LD_EXP 12
2251: PPUSH
2252: LD_STRING DS-DZ-U
2254: PPUSH
2255: CALL_OW 94
// Wait ( 0 0$33 ) ;
2259: LD_INT 1155
2261: PPUSH
2262: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 2
2276: PPUSH
2277: CALL_OW 12
2281: ST_TO_ADDR
// case x of 1 :
2282: LD_VAR 0 3
2286: PUSH
2287: LD_INT 1
2289: DOUBLE
2290: EQUAL
2291: IFTRUE 2295
2293: GO 2305
2295: POP
// RaiseSailEvent ( 41 ) ; 2 :
2296: LD_INT 41
2298: PPUSH
2299: CALL_OW 427
2303: GO 2324
2305: LD_INT 2
2307: DOUBLE
2308: EQUAL
2309: IFTRUE 2313
2311: GO 2323
2313: POP
// RaiseSailEvent ( 42 ) ; end ;
2314: LD_INT 42
2316: PPUSH
2317: CALL_OW 427
2321: GO 2324
2323: POP
// RaiseSailEvent ( 42 ) ;
2324: LD_INT 42
2326: PPUSH
2327: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2331: LD_EXP 39
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: LD_INT 0
2343: EQUAL
2344: AND
2345: PUSH
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PUSH
2361: LD_INT 0
2363: EQUAL
2364: AND
2365: IFFALSE 2421
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2367: LD_ADDR_EXP 24
2371: PUSH
2372: LD_INT 35700
2374: PPUSH
2375: LD_INT 42000
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2383: LD_EXP 12
2387: PPUSH
2388: LD_STRING DS-DZ-R
2390: PPUSH
2391: CALL_OW 94
// Wait ( 0 0$45 ) ;
2395: LD_INT 1575
2397: PPUSH
2398: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2402: LD_EXP 47
2406: PPUSH
2407: LD_STRING DS-DR-R1
2409: PPUSH
2410: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2414: LD_INT 51
2416: PPUSH
2417: CALL_OW 427
// end ; if mission_time >= 25 25$00 and arabian_force < 10 then
2421: LD_EXP 34
2425: PUSH
2426: LD_INT 52500
2428: GREATEREQUAL
2429: PUSH
2430: LD_EXP 20
2434: PUSH
2435: LD_INT 10
2437: LESS
2438: AND
2439: IFFALSE 2463
// begin mission_time := 0 0$00 ;
2441: LD_ADDR_EXP 34
2445: PUSH
2446: LD_INT 0
2448: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2449: LD_ADDR_EXP 20
2453: PUSH
2454: LD_EXP 20
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2463: LD_EXP 23
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 34
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PUSH
2508: LD_INT 0
2510: EQUAL
2511: AND
2512: IFFALSE 2710
// begin arabian_timeing := 7 7$30 ;
2514: LD_ADDR_EXP 23
2518: PUSH
2519: LD_INT 15750
2521: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2522: LD_ADDR_VAR 0 3
2526: PUSH
2527: LD_INT 1
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 12
2537: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2538: LD_EXP 12
2542: PPUSH
2543: LD_STRING DS-DZ-H
2545: PPUSH
2546: CALL_OW 94
// case x of 1 :
2550: LD_VAR 0 3
2554: PUSH
2555: LD_INT 1
2557: DOUBLE
2558: EQUAL
2559: IFTRUE 2563
2561: GO 2573
2563: POP
// RaiseSailEvent ( 31 ) ; 2 :
2564: LD_INT 31
2566: PPUSH
2567: CALL_OW 427
2571: GO 2610
2573: LD_INT 2
2575: DOUBLE
2576: EQUAL
2577: IFTRUE 2581
2579: GO 2591
2581: POP
// RaiseSailEvent ( 32 ) ; 3 :
2582: LD_INT 32
2584: PPUSH
2585: CALL_OW 427
2589: GO 2610
2591: LD_INT 3
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2609
2599: POP
// RaiseSailEvent ( 33 ) ; end ;
2600: LD_INT 33
2602: PPUSH
2603: CALL_OW 427
2607: GO 2610
2609: POP
// RaiseSailEvent ( 33 ) ;
2610: LD_INT 33
2612: PPUSH
2613: CALL_OW 427
// if game_difficulty > 1 then
2617: LD_EXP 2
2621: PUSH
2622: LD_INT 1
2624: GREATER
2625: IFFALSE 2634
// RaiseSailEvent ( 33 ) ;
2627: LD_INT 33
2629: PPUSH
2630: CALL_OW 427
// if heike_dialog1 = false then
2634: LD_EXP 44
2638: PUSH
2639: LD_INT 0
2641: EQUAL
2642: IFFALSE 2673
// begin heike_dialog1 := true ;
2644: LD_ADDR_EXP 44
2648: PUSH
2649: LD_INT 1
2651: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2652: LD_INT 105
2654: PPUSH
2655: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2659: LD_EXP 48
2663: PPUSH
2664: LD_STRING heike1
2666: PPUSH
2667: CALL_OW 94
// end else
2671: GO 2710
// if heike_dialog2 = false then
2673: LD_EXP 45
2677: PUSH
2678: LD_INT 0
2680: EQUAL
2681: IFFALSE 2710
// begin heike_dialog2 := true ;
2683: LD_ADDR_EXP 45
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2691: LD_INT 105
2693: PPUSH
2694: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2698: LD_EXP 48
2702: PPUSH
2703: LD_STRING heike2
2705: PPUSH
2706: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2710: LD_INT 22
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 33
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: PUSH
2739: LD_INT 0
2741: GREATER
2742: IFFALSE 2751
// ConnectWithTower ( 2 ) ;
2744: LD_INT 2
2746: PPUSH
2747: CALL 7128 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: LD_INT 34
2766: PUSH
2767: LD_INT 31
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 3
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: EMPTY
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PUSH
2796: EMPTY
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PUSH
2804: LD_INT 0
2806: GREATER
2807: IFFALSE 2953
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 22
2816: PUSH
2817: LD_INT 2
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 3
2826: PUSH
2827: LD_INT 34
2829: PUSH
2830: LD_INT 31
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 60
2846: PUSH
2847: EMPTY
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: LD_INT 81
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: PPUSH
2887: LD_INT 20
2889: PPUSH
2890: CALL 8511 0 2
2894: ST_TO_ADDR
// for i = 1 to filter do
2895: LD_ADDR_VAR 0 1
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_VAR 0 4
2909: PUSH
2910: FOR_TO
2911: IFFALSE 2951
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: CALL_OW 74
2944: PPUSH
2945: CALL_OW 115
2949: GO 2910
2951: POP
2952: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2953: LD_INT 22
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: LD_INT 60
2968: PUSH
2969: EMPTY
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: LD_INT 0
2990: GREATER
2991: IFFALSE 3137
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_INT 22
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 34
3013: PUSH
3014: LD_INT 31
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: LD_INT 60
3030: PUSH
3031: EMPTY
3032: LIST
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 81
3058: PUSH
3059: LD_INT 3
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PPUSH
3071: LD_INT 20
3073: PPUSH
3074: CALL 8511 0 2
3078: ST_TO_ADDR
// for i = 1 to filter do
3079: LD_ADDR_VAR 0 1
3083: PUSH
3084: DOUBLE
3085: LD_INT 1
3087: DEC
3088: ST_TO_ADDR
3089: LD_VAR 0 4
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3135
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3097: LD_VAR 0 4
3101: PUSH
3102: LD_VAR 0 1
3106: ARRAY
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 74
3128: PPUSH
3129: CALL_OW 115
3133: GO 3094
3135: POP
3136: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: LD_INT 60
3152: PUSH
3153: EMPTY
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: PPUSH
3167: CALL_OW 69
3171: PUSH
3172: LD_INT 0
3174: GREATER
3175: IFFALSE 3321
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3177: LD_ADDR_VAR 0 4
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 34
3197: PUSH
3198: LD_INT 31
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 60
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: EMPTY
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_INT 81
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PPUSH
3250: CALL_OW 69
3254: PPUSH
3255: LD_INT 20
3257: PPUSH
3258: CALL 8511 0 2
3262: ST_TO_ADDR
// for i = 1 to filter do
3263: LD_ADDR_VAR 0 1
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3319
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_VAR 0 3
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3278
3319: POP
3320: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3321: LD_INT 22
3323: PUSH
3324: LD_INT 2
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 34
3333: PUSH
3334: LD_EXP 56
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 3
3345: PUSH
3346: LD_INT 24
3348: PUSH
3349: LD_INT 700
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 0
3375: GREATER
3376: IFFALSE 3475
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 34
3395: PUSH
3396: LD_EXP 56
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 24
3410: PUSH
3411: LD_INT 700
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: ST_TO_ADDR
// for i = 1 to filter do
3435: LD_ADDR_VAR 0 1
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_VAR 0 4
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3473
// SetLives ( filter [ i ] , 1 ) ;
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 1
3466: PPUSH
3467: CALL_OW 234
3471: GO 3450
3473: POP
3474: POP
// end ; end ; end_of_file
3475: PPOPN 4
3477: END
// export function Start_Mission ; begin
3478: LD_INT 0
3480: PPUSH
// PrepareLegion ;
3481: CALL 3522 0 0
// PrepareMeeting ;
3485: CALL 4139 0 0
// case Query ( DS-text-beg ) of 1 :
3489: LD_STRING DS-text-beg
3491: PPUSH
3492: CALL_OW 97
3496: PUSH
3497: LD_INT 1
3499: DOUBLE
3500: EQUAL
3501: IFTRUE 3505
3503: GO 3508
3505: POP
// ; end ;
3506: GO 3509
3508: POP
// game_on := true ;
3509: LD_ADDR_EXP 1
3513: PUSH
3514: LD_INT 1
3516: ST_TO_ADDR
// end ;
3517: LD_VAR 0 1
3521: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3522: LD_INT 0
3524: PPUSH
3525: PPUSH
3526: PPUSH
3527: PPUSH
3528: PPUSH
// uc_side := 8 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 8
3536: ST_TO_ADDR
// uc_nation := 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// l_skill := [ 9 , 8 , 7 ] [ difficulty ] ;
3545: LD_ADDR_EXP 50
3549: PUSH
3550: LD_INT 9
3552: PUSH
3553: LD_INT 8
3555: PUSH
3556: LD_INT 7
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: ST_TO_ADDR
// l_units := [ 9 , 8 , 8 ] [ difficulty ] ;
3570: LD_ADDR_EXP 51
3574: PUSH
3575: LD_INT 9
3577: PUSH
3578: LD_INT 8
3580: PUSH
3581: LD_INT 8
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_OWVAR 67
3593: ARRAY
3594: ST_TO_ADDR
// filter := [ ] ;
3595: LD_ADDR_VAR 0 4
3599: PUSH
3600: EMPTY
3601: ST_TO_ADDR
// hc_gallery := desert ;
3602: LD_ADDR_OWVAR 33
3606: PUSH
3607: LD_STRING desert
3609: ST_TO_ADDR
// hc_face_number := 1 ;
3610: LD_ADDR_OWVAR 34
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3618: LD_ADDR_OWVAR 31
3622: PUSH
3623: LD_EXP 50
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PUSH
3632: LD_EXP 50
3636: PUSH
3637: LD_INT 1
3639: MINUS
3640: PUSH
3641: LD_EXP 50
3645: PUSH
3646: LD_EXP 50
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// hc_sex := sex_male ;
3661: LD_ADDR_OWVAR 27
3665: PUSH
3666: LD_INT 1
3668: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3669: LD_ADDR_OWVAR 26
3673: PUSH
3674: LD_STRING Henri Ruotz
3676: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3677: LD_ADDR_OWVAR 29
3681: PUSH
3682: LD_INT 10
3684: PUSH
3685: LD_INT 10
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: ST_TO_ADDR
// hc_class := 1 ;
3692: LD_ADDR_OWVAR 28
3696: PUSH
3697: LD_INT 1
3699: ST_TO_ADDR
// hc_importance := 100 ;
3700: LD_ADDR_OWVAR 32
3704: PUSH
3705: LD_INT 100
3707: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3708: LD_ADDR_EXP 49
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// hc_importance := 0 ;
3718: LD_ADDR_OWVAR 32
3722: PUSH
3723: LD_INT 0
3725: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3726: LD_ADDR_EXP 12
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 380
3744: ST_TO_ADDR
// for i = 1 to 4 do
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: DOUBLE
3751: LD_INT 1
3753: DEC
3754: ST_TO_ADDR
3755: LD_INT 4
3757: PUSH
3758: FOR_TO
3759: IFFALSE 3809
// for p = 1 to 6 do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3805
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 4
3786: PUSH
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_EXP 50
3796: PPUSH
3797: CALL 7312 0 2
3801: ADD
3802: ST_TO_ADDR
3803: GO 3774
3805: POP
3806: POP
3807: GO 3758
3809: POP
3810: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_STRING text
3818: PPUSH
3819: LD_EXP 51
3823: PPUSH
3824: LD_EXP 51
3828: PPUSH
3829: LD_INT -5
3831: PUSH
3832: LD_EXP 49
3836: PUSH
3837: LD_INT -3
3839: PUSH
3840: LD_INT -2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_VAR 0 4
3853: ADD
3854: PPUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 8
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 42
3881: ST_TO_ADDR
// for i = 1 to l_units do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: DOUBLE
3888: LD_INT 1
3890: DEC
3891: ST_TO_ADDR
3892: LD_EXP 51
3896: PUSH
3897: FOR_TO
3898: IFFALSE 3923
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3900: LD_VAR 0 5
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 49
3921: GO 3897
3923: POP
3924: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3925: LD_EXP 49
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// end ;
3940: LD_VAR 0 1
3944: RET
// export function PlaceCamera ; begin
3945: LD_INT 0
3947: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3948: LD_INT 46
3950: PPUSH
3951: LD_INT 48
3953: PPUSH
3954: LD_INT 8
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3964: LD_INT 58
3966: PPUSH
3967: LD_INT 66
3969: PPUSH
3970: LD_INT 8
3972: PPUSH
3973: LD_INT 10
3975: PPUSH
3976: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3980: LD_INT 82
3982: PPUSH
3983: LD_INT 82
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 10
3991: PPUSH
3992: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3996: LD_INT 107
3998: PPUSH
3999: LD_INT 79
4001: PPUSH
4002: LD_INT 8
4004: PPUSH
4005: LD_INT 10
4007: PPUSH
4008: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4012: LD_INT 101
4014: PPUSH
4015: LD_INT 57
4017: PPUSH
4018: LD_INT 8
4020: PPUSH
4021: LD_INT 10
4023: PPUSH
4024: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4028: LD_INT 85
4030: PPUSH
4031: LD_INT 32
4033: PPUSH
4034: LD_INT 8
4036: PPUSH
4037: LD_INT 10
4039: PPUSH
4040: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4044: LD_INT 108
4046: PPUSH
4047: LD_INT 72
4049: PPUSH
4050: LD_INT 8
4052: PPUSH
4053: LD_INT 10
4055: PPUSH
4056: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4060: LD_INT 124
4062: PPUSH
4063: LD_INT 74
4065: PPUSH
4066: LD_INT 8
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4076: LD_INT 67
4078: PPUSH
4079: LD_INT 33
4081: PPUSH
4082: LD_INT 8
4084: PPUSH
4085: LD_INT 20
4087: PPUSH
4088: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4092: LD_INT 67
4094: PPUSH
4095: LD_INT 33
4097: PPUSH
4098: LD_INT 8
4100: PPUSH
4101: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4105: LD_INT 94
4107: PPUSH
4108: LD_INT 84
4110: PPUSH
4111: LD_INT 8
4113: PPUSH
4114: LD_INT 20
4116: PPUSH
4117: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4121: LD_INT 94
4123: PPUSH
4124: LD_INT 84
4126: PPUSH
4127: LD_INT 8
4129: PPUSH
4130: CALL_OW 331
// end ;
4134: LD_VAR 0 1
4138: RET
// export function PrepareMeeting ; begin
4139: LD_INT 0
4141: PPUSH
// uc_side := 6 ;
4142: LD_ADDR_OWVAR 20
4146: PUSH
4147: LD_INT 6
4149: ST_TO_ADDR
// hc_gallery := desert ;
4150: LD_ADDR_OWVAR 33
4154: PUSH
4155: LD_STRING desert
4157: ST_TO_ADDR
// hc_face_number := 2 ;
4158: LD_ADDR_OWVAR 34
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_name := Leopold Drass ;
4166: LD_ADDR_OWVAR 26
4170: PUSH
4171: LD_STRING Leopold Drass
4173: ST_TO_ADDR
// hc_class := 1 ;
4174: LD_ADDR_OWVAR 28
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_sex := sex_male ;
4182: LD_ADDR_OWVAR 27
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4190: LD_ADDR_OWVAR 29
4194: PUSH
4195: LD_INT 12
4197: PUSH
4198: LD_INT 12
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: ST_TO_ADDR
// Leopold := CreateHuman ;
4205: LD_ADDR_EXP 7
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 49
// end ; end_of_file
4230: LD_VAR 0 1
4234: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4235: LD_INT 0
4237: PPUSH
4238: PPUSH
4239: PPUSH
4240: PPUSH
4241: PPUSH
// begin case num of 1 :
4242: LD_VAR 0 1
4246: PUSH
4247: LD_INT 1
4249: DOUBLE
4250: EQUAL
4251: IFTRUE 4255
4253: GO 4287
4255: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4256: LD_EXP 7
4260: PPUSH
4261: LD_EXP 49
4265: PPUSH
4266: CALL_OW 250
4270: PPUSH
4271: LD_EXP 49
4275: PPUSH
4276: CALL_OW 251
4280: PPUSH
4281: CALL_OW 111
// end ; 2 :
4285: GO 6705
4287: LD_INT 2
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4404
4295: POP
// begin InGameOn ;
4296: CALL_OW 8
// meeting_start := true ;
4300: LD_ADDR_EXP 26
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4308: LD_EXP 7
4312: PPUSH
4313: LD_EXP 49
4317: PPUSH
4318: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4322: LD_EXP 49
4326: PPUSH
4327: LD_EXP 7
4331: PPUSH
4332: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4336: LD_EXP 7
4340: PPUSH
4341: LD_STRING DS-DL-1
4343: PPUSH
4344: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4348: LD_EXP 49
4352: PPUSH
4353: LD_STRING DS-DC-1
4355: PPUSH
4356: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4360: LD_EXP 7
4364: PPUSH
4365: LD_STRING DS-DL-2
4367: PPUSH
4368: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4372: LD_EXP 7
4376: PPUSH
4377: LD_INT 23
4379: PPUSH
4380: CALL_OW 120
// InGameOff ;
4384: CALL_OW 9
// Wait ( 0 0$01 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4395: LD_STRING DS-T1
4397: PPUSH
4398: CALL_OW 337
// end ; 10 :
4402: GO 6705
4404: LD_INT 10
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4624
4412: POP
// begin uc_side := 6 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 6
4420: ST_TO_ADDR
// uc_nation := 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery :=  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4437: LD_ADDR_OWVAR 31
4441: PUSH
4442: LD_EXP 16
4446: PUSH
4447: LD_INT 2
4449: PLUS
4450: PUSH
4451: LD_EXP 16
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: PUSH
4460: LD_EXP 16
4464: PUSH
4465: LD_EXP 16
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// hc_sex := sex_male ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4488: LD_ADDR_OWVAR 26
4492: PUSH
4493: LD_STRING Samuel van Horn
4495: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4496: LD_ADDR_OWVAR 29
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 10
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: ST_TO_ADDR
// hc_class := 1 ;
4511: LD_ADDR_OWVAR 28
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// samuel := CreateHuman ;
4519: LD_ADDR_EXP 9
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4529: LD_EXP 9
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// for i = 1 to 3 do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: DOUBLE
4550: LD_INT 1
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4585
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4560: LD_INT 8
4562: PPUSH
4563: LD_EXP 16
4567: PPUSH
4568: CALL 7312 0 2
4572: PPUSH
4573: LD_INT 4
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL_OW 49
4583: GO 4557
4585: POP
4586: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 6
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_EXP 7
4606: PUSH
4607: LD_INT 23
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: DIFF
4614: PPUSH
4615: LD_INT 23
4617: PPUSH
4618: CALL_OW 120
// end ; 3 :
4622: GO 6705
4624: LD_INT 3
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// begin arabian_attack := true ;
4633: LD_ADDR_EXP 38
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// end ; 4 :
4641: GO 6705
4643: LD_INT 4
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4662
4651: POP
// begin american_attack := true ;
4652: LD_ADDR_EXP 40
4656: PUSH
4657: LD_INT 1
4659: ST_TO_ADDR
// end ; 5 :
4660: GO 6705
4662: LD_INT 5
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4681
4670: POP
// begin russian_attack := true ;
4671: LD_ADDR_EXP 39
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end ; 31 :
4679: GO 6705
4681: LD_INT 31
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4964
4689: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4690: LD_ADDR_VAR 0 6
4694: PUSH
4695: LD_EXP 15
4699: PUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_EXP 15
4707: PPUSH
4708: CALL_OW 12
4712: ARRAY
4713: ST_TO_ADDR
// uc_side := 2 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// uc_nation := 2 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// for i = 1 to arabian_force do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 20
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4825
// begin vc_chassis := ar_half_tracked ;
4748: LD_ADDR_OWVAR 37
4752: PUSH
4753: LD_INT 14
4755: ST_TO_ADDR
// vc_engine := engine_siberite ;
4756: LD_ADDR_OWVAR 39
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4772: LD_ADDR_OWVAR 40
4776: PUSH
4777: LD_EXP 17
4781: PUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_EXP 17
4789: PPUSH
4790: CALL_OW 12
4794: ARRAY
4795: ST_TO_ADDR
// un := CreateVehicle ;
4796: LD_ADDR_VAR 0 4
4800: PUSH
4801: CALL_OW 45
4805: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 6
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// end ;
4823: GO 4745
4825: POP
4826: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 33
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PPUSH
4851: CALL_OW 69
4855: PUSH
4856: LD_INT 2
4858: LESS
4859: IFFALSE 4962
// for i = 1 to 2 do
4861: LD_ADDR_VAR 0 2
4865: PUSH
4866: DOUBLE
4867: LD_INT 1
4869: DEC
4870: ST_TO_ADDR
4871: LD_INT 2
4873: PUSH
4874: FOR_TO
4875: IFFALSE 4960
// begin vc_chassis := ar_half_tracked ;
4877: LD_ADDR_OWVAR 37
4881: PUSH
4882: LD_INT 14
4884: ST_TO_ADDR
// vc_engine := engine_siberite ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 3
4892: ST_TO_ADDR
// vc_control := control_manual ;
4893: LD_ADDR_OWVAR 38
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4901: LD_ADDR_OWVAR 40
4905: PUSH
4906: LD_INT 31
4908: ST_TO_ADDR
// un := CreateVehicle ;
4909: LD_ADDR_VAR 0 4
4913: PUSH
4914: CALL_OW 45
4918: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4919: LD_VAR 0 4
4923: PPUSH
4924: LD_VAR 0 6
4928: PPUSH
4929: LD_INT 0
4931: PPUSH
4932: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4936: LD_INT 3
4938: PPUSH
4939: LD_EXP 16
4943: PPUSH
4944: CALL 7312 0 2
4948: PPUSH
4949: LD_VAR 0 4
4953: PPUSH
4954: CALL_OW 52
// end ;
4958: GO 4874
4960: POP
4961: POP
// end ; 32 :
4962: GO 6705
4964: LD_INT 32
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5345
4972: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_EXP 15
4982: PUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 12
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := 2 ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// uc_nation := 2 ;
5005: LD_ADDR_OWVAR 21
5009: PUSH
5010: LD_INT 2
5012: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_EXP 20
5027: PUSH
5028: LD_INT 2
5030: MINUS
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5116
// begin vc_chassis := ar_half_tracked ;
5035: LD_ADDR_OWVAR 37
5039: PUSH
5040: LD_INT 14
5042: ST_TO_ADDR
// vc_engine := engine_siberite ;
5043: LD_ADDR_OWVAR 39
5047: PUSH
5048: LD_INT 3
5050: ST_TO_ADDR
// vc_control := control_remote ;
5051: LD_ADDR_OWVAR 38
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5059: LD_ADDR_OWVAR 40
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_EXP 17
5076: PUSH
5077: LD_INT 1
5079: MINUS
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: ST_TO_ADDR
// un := CreateVehicle ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 45
5096: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5097: LD_VAR 0 4
5101: PPUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 0
5109: PPUSH
5110: CALL_OW 49
// end ;
5114: GO 5032
5116: POP
5117: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 2 , 3 , 3 ] [ game_difficulty ] do
5118: LD_ADDR_VAR 0 2
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_INT 0
5130: PPUSH
5131: LD_INT 1
5133: PPUSH
5134: CALL_OW 12
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 3
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_EXP 2
5157: ARRAY
5158: PLUS
5159: PUSH
5160: FOR_TO
5161: IFFALSE 5198
// begin uc_nation := 0 ;
5163: LD_ADDR_OWVAR 21
5167: PUSH
5168: LD_INT 0
5170: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5171: LD_INT 17
5173: PPUSH
5174: LD_EXP 16
5178: PPUSH
5179: CALL 7312 0 2
5183: PPUSH
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 0
5191: PPUSH
5192: CALL_OW 49
// end ;
5196: GO 5160
5198: POP
5199: POP
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5208: LD_INT 22
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 33
5220: PUSH
5221: LD_INT 1
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: CALL_OW 69
5236: PUSH
5237: LD_INT 2
5239: LESS
5240: IFFALSE 5343
// for i = 1 to 2 do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: DOUBLE
5248: LD_INT 1
5250: DEC
5251: ST_TO_ADDR
5252: LD_INT 2
5254: PUSH
5255: FOR_TO
5256: IFFALSE 5341
// begin vc_chassis := ar_half_tracked ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := engine_siberite ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := control_manual ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 31
5289: ST_TO_ADDR
// un := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5317: LD_INT 3
5319: PPUSH
5320: LD_EXP 16
5324: PPUSH
5325: CALL 7312 0 2
5329: PPUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 52
// end ;
5339: GO 5255
5341: POP
5342: POP
// end ; 33 :
5343: GO 6705
5345: LD_INT 33
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5624
5353: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5354: LD_ADDR_VAR 0 6
5358: PUSH
5359: LD_EXP 15
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_EXP 15
5371: PPUSH
5372: CALL_OW 12
5376: ARRAY
5377: ST_TO_ADDR
// uc_side := 2 ;
5378: LD_ADDR_OWVAR 20
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// uc_nation := 2 ;
5386: LD_ADDR_OWVAR 21
5390: PUSH
5391: LD_INT 2
5393: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5394: LD_ADDR_VAR 0 2
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_EXP 20
5408: PUSH
5409: LD_INT 2
5411: DIVREAL
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5519
// begin vc_chassis := ar_half_tracked ;
5416: LD_ADDR_OWVAR 37
5420: PUSH
5421: LD_INT 14
5423: ST_TO_ADDR
// vc_engine := engine_siberite ;
5424: LD_ADDR_OWVAR 39
5428: PUSH
5429: LD_INT 3
5431: ST_TO_ADDR
// vc_control := control_manual ;
5432: LD_ADDR_OWVAR 38
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5440: LD_ADDR_OWVAR 40
5444: PUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_EXP 17
5457: PUSH
5458: LD_INT 2
5460: MINUS
5461: PPUSH
5462: CALL_OW 12
5466: ARRAY
5467: ST_TO_ADDR
// un := CreateVehicle ;
5468: LD_ADDR_VAR 0 4
5472: PUSH
5473: CALL_OW 45
5477: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5478: LD_VAR 0 4
5482: PPUSH
5483: LD_VAR 0 6
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5495: LD_INT 3
5497: PPUSH
5498: LD_EXP 16
5502: PPUSH
5503: CALL 7312 0 2
5507: PPUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 52
// end ;
5517: GO 5413
5519: POP
5520: POP
// for i = 1 to ( arabian_force / 2 ) do
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: DOUBLE
5527: LD_INT 1
5529: DEC
5530: ST_TO_ADDR
5531: LD_EXP 20
5535: PUSH
5536: LD_INT 2
5538: DIVREAL
5539: PUSH
5540: FOR_TO
5541: IFFALSE 5620
// begin vc_chassis := ar_half_tracked ;
5543: LD_ADDR_OWVAR 37
5547: PUSH
5548: LD_INT 14
5550: ST_TO_ADDR
// vc_engine := engine_siberite ;
5551: LD_ADDR_OWVAR 39
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// vc_control := control_apeman ;
5559: LD_ADDR_OWVAR 38
5563: PUSH
5564: LD_INT 5
5566: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5567: LD_ADDR_OWVAR 40
5571: PUSH
5572: LD_EXP 17
5576: PUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: ST_TO_ADDR
// un := CreateVehicle ;
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: CALL_OW 45
5600: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 6
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 49
// end ;
5618: GO 5540
5620: POP
5621: POP
// end ; 41 :
5622: GO 6705
5624: LD_INT 41
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5776
5632: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5633: LD_ADDR_VAR 0 6
5637: PUSH
5638: LD_EXP 15
5642: PUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_EXP 15
5650: PPUSH
5651: CALL_OW 12
5655: ARRAY
5656: ST_TO_ADDR
// uc_side := 1 ;
5657: LD_ADDR_OWVAR 20
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// uc_nation := 1 ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// for i = 1 to american_force do
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_EXP 22
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5772
// begin vc_chassis := us_morphling ;
5691: LD_ADDR_OWVAR 37
5695: PUSH
5696: LD_INT 5
5698: ST_TO_ADDR
// vc_engine := engine_siberite ;
5699: LD_ADDR_OWVAR 39
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_control := control_computer ;
5707: LD_ADDR_OWVAR 38
5711: PUSH
5712: LD_INT 3
5714: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5715: LD_ADDR_OWVAR 40
5719: PUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_EXP 19
5732: PUSH
5733: LD_INT 1
5735: MINUS
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// un := CreateVehicle ;
5743: LD_ADDR_VAR 0 4
5747: PUSH
5748: CALL_OW 45
5752: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5753: LD_VAR 0 4
5757: PPUSH
5758: LD_VAR 0 6
5762: PPUSH
5763: LD_INT 0
5765: PPUSH
5766: CALL_OW 49
// end ;
5770: GO 5688
5772: POP
5773: POP
// end ; 42 :
5774: GO 6705
5776: LD_INT 42
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5924
5784: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5785: LD_ADDR_VAR 0 6
5789: PUSH
5790: LD_EXP 15
5794: PUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_EXP 15
5802: PPUSH
5803: CALL_OW 12
5807: ARRAY
5808: ST_TO_ADDR
// uc_side := 1 ;
5809: LD_ADDR_OWVAR 20
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// uc_nation := 1 ;
5817: LD_ADDR_OWVAR 21
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// for i = 1 to american_force do
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_EXP 22
5839: PUSH
5840: FOR_TO
5841: IFFALSE 5920
// begin vc_chassis := us_morphling ;
5843: LD_ADDR_OWVAR 37
5847: PUSH
5848: LD_INT 5
5850: ST_TO_ADDR
// vc_engine := engine_siberite ;
5851: LD_ADDR_OWVAR 39
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_control := control_computer ;
5859: LD_ADDR_OWVAR 38
5863: PUSH
5864: LD_INT 3
5866: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5867: LD_ADDR_OWVAR 40
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 19
5884: PPUSH
5885: CALL_OW 12
5889: ARRAY
5890: ST_TO_ADDR
// un := CreateVehicle ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: CALL_OW 45
5900: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_INT 0
5913: PPUSH
5914: CALL_OW 49
// end ;
5918: GO 5840
5920: POP
5921: POP
// end ; 51 :
5922: GO 6705
5924: LD_INT 51
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6072
5932: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_EXP 15
5942: PUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_EXP 15
5950: PPUSH
5951: CALL_OW 12
5955: ARRAY
5956: ST_TO_ADDR
// uc_side := 3 ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// uc_nation := 3 ;
5965: LD_ADDR_OWVAR 21
5969: PUSH
5970: LD_INT 3
5972: ST_TO_ADDR
// for i = 1 to russian_force do
5973: LD_ADDR_VAR 0 2
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_EXP 21
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6068
// begin vc_chassis := ru_heavy_tracked ;
5991: LD_ADDR_OWVAR 37
5995: PUSH
5996: LD_INT 24
5998: ST_TO_ADDR
// vc_engine := engine_siberite ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_control := control_computer ;
6007: LD_ADDR_OWVAR 38
6011: PUSH
6012: LD_INT 3
6014: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6015: LD_ADDR_OWVAR 40
6019: PUSH
6020: LD_EXP 18
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_EXP 18
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// un := CreateVehicle ;
6039: LD_ADDR_VAR 0 4
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 49
// end ;
6066: GO 5988
6068: POP
6069: POP
// end ; 91 :
6070: GO 6705
6072: LD_INT 91
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6218
6080: POP
// begin uc_side := 8 ;
6081: LD_ADDR_OWVAR 20
6085: PUSH
6086: LD_INT 8
6088: ST_TO_ADDR
// uc_nation := 1 ;
6089: LD_ADDR_OWVAR 21
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ game_difficulty ] do
6097: LD_ADDR_VAR 0 2
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 4
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PUSH
6121: LD_EXP 2
6125: ARRAY
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6214
// begin vc_chassis := us_heavy_tracked ;
6130: LD_ADDR_OWVAR 37
6134: PUSH
6135: LD_INT 4
6137: ST_TO_ADDR
// vc_engine := engine_siberite ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_control := control_computer ;
6146: LD_ADDR_OWVAR 38
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 40
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// un := CreateVehicle ;
6181: LD_ADDR_VAR 0 4
6185: PUSH
6186: CALL_OW 45
6190: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6191: LD_VAR 0 4
6195: PPUSH
6196: LD_EXP 15
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: PPUSH
6205: LD_INT 0
6207: PPUSH
6208: CALL_OW 49
// end ;
6212: GO 6127
6214: POP
6215: POP
// end ; 92 :
6216: GO 6705
6218: LD_INT 92
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6555
6226: POP
// begin uc_side := 5 ;
6227: LD_ADDR_OWVAR 20
6231: PUSH
6232: LD_INT 5
6234: ST_TO_ADDR
// uc_nation := 2 ;
6235: LD_ADDR_OWVAR 21
6239: PUSH
6240: LD_INT 2
6242: ST_TO_ADDR
// filter := [ ] ;
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// InitHc ;
6250: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6254: LD_INT 0
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: LD_EXP 50
6264: PPUSH
6265: CALL_OW 380
// un := CreateHuman ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: CALL_OW 44
6278: ST_TO_ADDR
// filter := filter ^ un ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 3
6288: PUSH
6289: LD_VAR 0 4
6293: ADD
6294: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 4
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 2
6323: ARRAY
6324: PUSH
6325: FOR_TO
6326: IFFALSE 6364
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6328: LD_ADDR_VAR 0 4
6332: PUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_EXP 50
6340: PPUSH
6341: CALL 7312 0 2
6345: ST_TO_ADDR
// filter := filter ^ un ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 4
6360: ADD
6361: ST_TO_ADDR
// end ;
6362: GO 6325
6364: POP
6365: POP
// DialogueOn ;
6366: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 1
6377: ARRAY
6378: PPUSH
6379: CALL_OW 258
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 6407
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_STRING DS-DF-1
6400: PPUSH
6401: CALL_OW 94
6405: GO 6423
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: LD_STRING DS-DF-f1
6418: PPUSH
6419: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6423: LD_STRING DS-dezert
6425: PPUSH
6426: CALL_OW 97
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6454
6439: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6440: LD_EXP 49
6444: PPUSH
6445: LD_STRING DS-DC-dis
6447: PPUSH
6448: CALL_OW 88
6452: GO 6549
6454: LD_INT 2
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6548
6462: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6463: LD_EXP 49
6467: PPUSH
6468: LD_STRING DS-DC-acp
6470: PPUSH
6471: CALL_OW 88
// for i = 1 to filter do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 3
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6544
// begin SetSide ( filter [ i ] , 8 ) ;
6493: LD_VAR 0 3
6497: PUSH
6498: LD_VAR 0 2
6502: ARRAY
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6511: LD_VAR 0 3
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6532: LD_INT 111
6534: PPUSH
6535: LD_INT 121
6537: PPUSH
6538: CALL_OW 86
// end ;
6542: GO 6490
6544: POP
6545: POP
// end ; end ;
6546: GO 6549
6548: POP
// DialogueOff ;
6549: CALL_OW 7
// end ; 101 :
6553: GO 6705
6555: LD_INT 101
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6615
6563: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 5
6569: PPUSH
6570: CALL_OW 12
6574: PPUSH
6575: LD_INT 9
6577: PPUSH
6578: LD_INT 1
6580: PPUSH
6581: CALL_OW 55
// Wait ( 0 0$11 ) ;
6585: LD_INT 385
6587: PPUSH
6588: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6592: LD_INT 3
6594: PPUSH
6595: LD_INT 5
6597: PPUSH
6598: CALL_OW 12
6602: PPUSH
6603: LD_INT 9
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL_OW 55
// end ; 200 :
6613: GO 6705
6615: LD_INT 200
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6704
6623: POP
// begin Say ( Leopold , DS-end ) ;
6624: LD_EXP 7
6628: PPUSH
6629: LD_STRING DS-end
6631: PPUSH
6632: CALL_OW 88
// if Difficulty = 3 then
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 3
6643: EQUAL
6644: IFFALSE 6653
// SetAchievement ( ACH_DESERT ) ;
6646: LD_STRING ACH_DESERT
6648: PPUSH
6649: CALL_OW 543
// music_nat := 5 ;
6653: LD_ADDR_OWVAR 71
6657: PUSH
6658: LD_INT 5
6660: ST_TO_ADDR
// AddMedal ( med , 1 ) ;
6661: LD_STRING med
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: CALL_OW 101
// AddMedal ( med , 1 ) ;
6671: LD_STRING med
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 101
// AddMedal ( med , 1 ) ;
6681: LD_STRING med
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 101
// GiveMedals ( MAIN ) ;
6691: LD_STRING MAIN
6693: PPUSH
6694: CALL_OW 102
// YouWin ;
6698: CALL_OW 103
// end ; end ;
6702: GO 6705
6704: POP
// end ;
6705: PPOPN 6
6707: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6708: LD_VAR 0 1
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: IN
6742: IFFALSE 6867
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6744: LD_INT 105
6746: PPUSH
6747: LD_INT 210
6749: PPUSH
6750: CALL_OW 12
6754: PPUSH
6755: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 250
6768: PPUSH
6769: LD_VAR 0 1
6773: PPUSH
6774: CALL_OW 251
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 250
6795: PPUSH
6796: LD_VAR 0 1
6800: PPUSH
6801: CALL_OW 251
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 250
6822: PPUSH
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 251
6832: PPUSH
6833: LD_INT 3
6835: PPUSH
6836: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 250
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 251
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 453
// end ; end ;
6867: PPOPN 1
6869: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 22580 0 1
// if un = fort then
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 23
6886: EQUAL
6887: IFFALSE 6897
// fort_destroyed := true ;
6889: LD_ADDR_EXP 32
6893: PUSH
6894: LD_INT 1
6896: ST_TO_ADDR
// if un = l_cmndr then
6897: LD_VAR 0 1
6901: PUSH
6902: LD_EXP 49
6906: EQUAL
6907: IFFALSE 6917
// hero_died := true ;
6909: LD_ADDR_EXP 33
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// end ;
6917: PPOPN 1
6919: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin debug_strings := un ;
6920: LD_ADDR_OWVAR 48
6924: PUSH
6925: LD_VAR 0 1
6929: ST_TO_ADDR
// SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: CALL 22678 0 3
// end ;
6949: PPOPN 3
6951: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL 22686 0 1
// end ; end_of_file
6961: PPOPN 1
6963: END
// export function RefreshTime ( time , bool ) ; begin
6964: LD_INT 0
6966: PPUSH
// if bool then
6967: LD_VAR 0 2
6971: IFFALSE 6989
// time := time + 0 0$01 else
6973: LD_ADDR_VAR 0 1
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 35
6985: PLUS
6986: ST_TO_ADDR
6987: GO 7003
// time := time - 0 0$01 ;
6989: LD_ADDR_VAR 0 1
6993: PUSH
6994: LD_VAR 0 1
6998: PUSH
6999: LD_INT 35
7001: MINUS
7002: ST_TO_ADDR
// result := time ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_VAR 0 1
7012: ST_TO_ADDR
// end ;
7013: LD_VAR 0 3
7017: RET
// export function MineExist ( side ) ; begin
7018: LD_INT 0
7020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
7021: LD_INT 22
7023: PUSH
7024: LD_VAR 0 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 30
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 69
7051: PUSH
7052: LD_INT 0
7054: GREATER
7055: IFFALSE 7067
// result := true else
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
7065: GO 7075
// result := false ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// end ;
7075: LD_VAR 0 2
7079: RET
// export function FacExist ( side ) ; begin
7080: LD_INT 0
7082: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 3
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PUSH
7119: LD_INT 0
7121: GREATER
7122: ST_TO_ADDR
// end ;
7123: LD_VAR 0 2
7127: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_VAR 0 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 33
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 50
7163: PUSH
7164: EMPTY
7165: LIST
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 69
7176: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7177: LD_ADDR_VAR 0 5
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 34
7196: PUSH
7197: LD_INT 31
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PPUSH
7208: CALL_OW 69
7212: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7213: LD_VAR 0 5
7217: PUSH
7218: LD_INT 0
7220: GREATER
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: GREATER
7230: AND
7231: IFFALSE 7307
// for i = 1 to filter do
7233: LD_ADDR_VAR 0 3
7237: PUSH
7238: DOUBLE
7239: LD_INT 1
7241: DEC
7242: ST_TO_ADDR
7243: LD_VAR 0 4
7247: PUSH
7248: FOR_TO
7249: IFFALSE 7305
// if not IsControledBy ( filter [ i ] ) then
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: ARRAY
7261: PPUSH
7262: CALL_OW 312
7266: NOT
7267: IFFALSE 7303
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7269: LD_VAR 0 4
7273: PUSH
7274: LD_VAR 0 3
7278: ARRAY
7279: PPUSH
7280: LD_VAR 0 5
7284: PUSH
7285: LD_INT 1
7287: PPUSH
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 12
7297: ARRAY
7298: PPUSH
7299: CALL_OW 135
7303: GO 7248
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 2
7311: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7312: LD_INT 0
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
// hc_class := clas ;
7320: LD_ADDR_OWVAR 28
7324: PUSH
7325: LD_VAR 0 1
7329: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7330: LD_ADDR_VAR 0 4
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_INT 1
7342: NEG
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 12
7351: PLUS
7352: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7353: LD_ADDR_VAR 0 5
7357: PUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: NEG
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 12
7374: PLUS
7375: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7376: LD_ADDR_VAR 0 6
7380: PUSH
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 1
7388: NEG
7389: PPUSH
7390: LD_INT 1
7392: PPUSH
7393: CALL_OW 12
7397: PLUS
7398: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 1
7411: NEG
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 12
7420: PLUS
7421: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: EQUAL
7430: PUSH
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 9
7438: EQUAL
7439: OR
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 5
7448: EQUAL
7449: OR
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_INT 8
7458: EQUAL
7459: OR
7460: IFFALSE 7485
// bonus := [ 2 , 0 , 0 , 0 ] ;
7462: LD_ADDR_VAR 0 8
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if clas = 2 then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7518
// bonus := [ 0 , 2 , 0 , 0 ] ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
// if clas = 3 then
7518: LD_VAR 0 1
7522: PUSH
7523: LD_INT 3
7525: EQUAL
7526: IFFALSE 7551
// bonus := [ 0 , 0 , 2 , 0 ] ;
7528: LD_ADDR_VAR 0 8
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if clas = 4 then
7551: LD_VAR 0 1
7555: PUSH
7556: LD_INT 4
7558: EQUAL
7559: IFFALSE 7584
// bonus := [ 0 , 0 , 0 , 2 ] ;
7561: LD_ADDR_VAR 0 8
7565: PUSH
7566: LD_INT 0
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 4
7591: GREATER
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: LD_INT 9
7600: NONEQUAL
7601: AND
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 5
7610: NONEQUAL
7611: AND
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 8
7620: NONEQUAL
7621: AND
7622: IFFALSE 7647
// bonus := [ 0 , 0 , 0 , 0 ] ;
7624: LD_ADDR_VAR 0 8
7628: PUSH
7629: LD_INT 0
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 0
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7647: LD_ADDR_OWVAR 30
7651: PUSH
7652: LD_INT 0
7654: PPUSH
7655: LD_INT 2
7657: PPUSH
7658: CALL_OW 12
7662: PUSH
7663: LD_INT 0
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: CALL_OW 12
7673: PUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 12
7684: PUSH
7685: LD_INT 0
7687: PPUSH
7688: LD_INT 2
7690: PPUSH
7691: CALL_OW 12
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7702: LD_ADDR_OWVAR 31
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_VAR 0 8
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PLUS
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_VAR 0 8
7731: PUSH
7732: LD_INT 2
7734: ARRAY
7735: PLUS
7736: PUSH
7737: LD_VAR 0 6
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: LD_INT 3
7749: ARRAY
7750: PLUS
7751: PUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 8
7761: PUSH
7762: LD_INT 4
7764: ARRAY
7765: PLUS
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7773: LD_ADDR_OWVAR 27
7777: PUSH
7778: LD_INT 1
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 12
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7797: LD_ADDR_OWVAR 29
7801: PUSH
7802: LD_INT 8
7804: PPUSH
7805: LD_INT 12
7807: PPUSH
7808: CALL_OW 12
7812: PUSH
7813: LD_INT 9
7815: PPUSH
7816: LD_INT 11
7818: PPUSH
7819: CALL_OW 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// hc_name :=  ;
7828: LD_ADDR_OWVAR 26
7832: PUSH
7833: LD_STRING 
7835: ST_TO_ADDR
// result := CreateHuman ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: CALL_OW 44
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 3
7850: RET
// export function GetSpeed ( unit ) ; begin
7851: LD_INT 0
7853: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 464
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// end ;
7873: LD_VAR 0 2
7877: RET
// export function CreateNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7878: LD_INT 0
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
// uc_nation = nation_nature ;
7886: LD_ADDR_OWVAR 21
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// uc_side = 0 ;
7894: LD_ADDR_OWVAR 20
7898: PUSH
7899: LD_INT 0
7901: ST_TO_ADDR
// l = 0 ;
7902: LD_ADDR_VAR 0 7
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7910: LD_ADDR_OWVAR 24
7914: PUSH
7915: LD_INT 0
7917: PPUSH
7918: LD_INT 5
7920: PPUSH
7921: CALL_OW 12
7925: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7926: LD_ADDR_OWVAR 35
7930: PUSH
7931: LD_INT 5
7933: NEG
7934: PPUSH
7935: LD_INT 0
7937: PPUSH
7938: CALL_OW 12
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_class = class_apeman ;
7951: LD_ADDR_OWVAR 28
7955: PUSH
7956: LD_INT 12
7958: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7959: LD_ADDR_OWVAR 29
7963: PUSH
7964: LD_INT 11
7966: PPUSH
7967: LD_INT 13
7969: PPUSH
7970: CALL_OW 12
7974: PUSH
7975: LD_INT 10
7977: PPUSH
7978: LD_INT 11
7980: PPUSH
7981: CALL_OW 12
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: ST_TO_ADDR
// hc_sex = sex_male ;
7990: LD_ADDR_OWVAR 27
7994: PUSH
7995: LD_INT 1
7997: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7998: LD_ADDR_OWVAR 31
8002: PUSH
8003: LD_INT 0
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 12
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 0
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: ST_TO_ADDR
// apeman = CreateHuman ;
8029: LD_ADDR_VAR 0 8
8033: PUSH
8034: CALL_OW 44
8038: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8039: LD_VAR 0 8
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 49
// l = l + 1 ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_VAR 0 7
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ST_TO_ADDR
// end until l = num1 ;
8070: LD_VAR 0 7
8074: PUSH
8075: LD_VAR 0 2
8079: EQUAL
8080: IFFALSE 7910
// l = 0 ;
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8090: LD_ADDR_OWVAR 35
8094: PUSH
8095: LD_INT 0
8097: PPUSH
8098: LD_INT 25
8100: PPUSH
8101: CALL_OW 12
8105: ST_TO_ADDR
// hc_class = class_tiger ;
8106: LD_ADDR_OWVAR 28
8110: PUSH
8111: LD_INT 14
8113: ST_TO_ADDR
// hc_sex = sex_male ;
8114: LD_ADDR_OWVAR 27
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// hc_gallery = sandnature ;
8122: LD_ADDR_OWVAR 33
8126: PUSH
8127: LD_STRING sandnature
8129: ST_TO_ADDR
// hc_face_number = 3 ;
8130: LD_ADDR_OWVAR 34
8134: PUSH
8135: LD_INT 3
8137: ST_TO_ADDR
// tiger = CreateHuman ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: CALL_OW 44
8147: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8148: LD_VAR 0 9
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 0
8160: PPUSH
8161: CALL_OW 49
// l = l + 1 ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_VAR 0 7
8174: PUSH
8175: LD_INT 1
8177: PLUS
8178: ST_TO_ADDR
// end until l = num2 ;
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 3
8188: EQUAL
8189: IFFALSE 8090
// l = 0 ;
8191: LD_ADDR_VAR 0 7
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8199: LD_ADDR_OWVAR 28
8203: PUSH
8204: LD_INT 18
8206: ST_TO_ADDR
// hc_gallery = sandnature ;
8207: LD_ADDR_OWVAR 33
8211: PUSH
8212: LD_STRING sandnature
8214: ST_TO_ADDR
// hc_face_number = 1 ;
8215: LD_ADDR_OWVAR 34
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// bird = CreateHuman ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: CALL_OW 44
8232: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8233: LD_VAR 0 10
8237: PPUSH
8238: LD_INT 0
8240: PPUSH
8241: CALL_OW 51
// l = l + 1 ;
8245: LD_ADDR_VAR 0 7
8249: PUSH
8250: LD_VAR 0 7
8254: PUSH
8255: LD_INT 1
8257: PLUS
8258: ST_TO_ADDR
// end until l = num3 ;
8259: LD_VAR 0 7
8263: PUSH
8264: LD_VAR 0 4
8268: EQUAL
8269: IFFALSE 8199
// l = 0 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8279: LD_ADDR_OWVAR 28
8283: PUSH
8284: LD_INT 21
8286: ST_TO_ADDR
// hc_gallery = sandnature ;
8287: LD_ADDR_OWVAR 33
8291: PUSH
8292: LD_STRING sandnature
8294: ST_TO_ADDR
// hc_face_number = 5 ;
8295: LD_ADDR_OWVAR 34
8299: PUSH
8300: LD_INT 5
8302: ST_TO_ADDR
// horse := CreateHuman ;
8303: LD_ADDR_VAR 0 11
8307: PUSH
8308: CALL_OW 44
8312: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: CALL_OW 49
// l = l + 1 ;
8330: LD_ADDR_VAR 0 7
8334: PUSH
8335: LD_VAR 0 7
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: ST_TO_ADDR
// end until l = num4 ;
8344: LD_VAR 0 7
8348: PUSH
8349: LD_VAR 0 5
8353: EQUAL
8354: IFFALSE 8279
// end ;
8356: LD_VAR 0 6
8360: RET
// export function PrepareComm ; begin
8361: LD_INT 0
8363: PPUSH
// uc_side := 1 ;
8364: LD_ADDR_OWVAR 20
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// uc_nation := 1 ;
8372: LD_ADDR_OWVAR 21
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// hc_gallery :=  ;
8380: LD_ADDR_OWVAR 33
8384: PUSH
8385: LD_STRING 
8387: ST_TO_ADDR
// hc_name :=  ;
8388: LD_ADDR_OWVAR 26
8392: PUSH
8393: LD_STRING 
8395: ST_TO_ADDR
// hc_class := 1 ;
8396: LD_ADDR_OWVAR 28
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// hc_sex := sex_male ;
8404: LD_ADDR_OWVAR 27
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// am_comander := CreateHuman ;
8412: LD_ADDR_EXP 46
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// uc_side := 3 ;
8422: LD_ADDR_OWVAR 20
8426: PUSH
8427: LD_INT 3
8429: ST_TO_ADDR
// uc_nation := 3 ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_INT 3
8437: ST_TO_ADDR
// ru_comander := CreateHuman ;
8438: LD_ADDR_EXP 47
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// uc_side := 2 ;
8448: LD_ADDR_OWVAR 20
8452: PUSH
8453: LD_INT 2
8455: ST_TO_ADDR
// uc_nation := 2 ;
8456: LD_ADDR_OWVAR 21
8460: PUSH
8461: LD_INT 2
8463: ST_TO_ADDR
// hc_name := Heike Steyer ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Heike Steyer
8471: ST_TO_ADDR
// hc_sex := sex_female ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 2
8479: ST_TO_ADDR
// hc_gallery := sandar ;
8480: LD_ADDR_OWVAR 33
8484: PUSH
8485: LD_STRING sandar
8487: ST_TO_ADDR
// hc_face_number := 14 ;
8488: LD_ADDR_OWVAR 34
8492: PUSH
8493: LD_INT 14
8495: ST_TO_ADDR
// ar_comander := CreateHuman ;
8496: LD_ADDR_EXP 48
8500: PUSH
8501: CALL_OW 44
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 1
8510: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8511: LD_INT 0
8513: PPUSH
8514: PPUSH
8515: PPUSH
// list := [ ] ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i = 1 to filter do
8523: LD_ADDR_VAR 0 5
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_VAR 0 1
8537: PUSH
8538: FOR_TO
8539: IFFALSE 8588
// if GetSpeed ( filter [ i ] ) < speed then
8541: LD_VAR 0 1
8545: PUSH
8546: LD_VAR 0 5
8550: ARRAY
8551: PPUSH
8552: CALL 7851 0 1
8556: PUSH
8557: LD_VAR 0 2
8561: LESS
8562: IFFALSE 8586
// list := list ^ filter [ i ] ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: ADD
8585: ST_TO_ADDR
8586: GO 8538
8588: POP
8589: POP
// result := list ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 4
8599: ST_TO_ADDR
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8605: LD_INT 0
8607: PPUSH
// ar_miner := 81 ;
8608: LD_ADDR_EXP 59
8612: PUSH
8613: LD_INT 81
8615: ST_TO_ADDR
// ar_crane := 88 ;
8616: LD_ADDR_EXP 58
8620: PUSH
8621: LD_INT 88
8623: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8624: LD_ADDR_EXP 53
8628: PUSH
8629: LD_INT 89
8631: ST_TO_ADDR
// us_hack := 99 ;
8632: LD_ADDR_EXP 54
8636: PUSH
8637: LD_INT 99
8639: ST_TO_ADDR
// us_artillery := 97 ;
8640: LD_ADDR_EXP 55
8644: PUSH
8645: LD_INT 97
8647: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8648: LD_ADDR_EXP 56
8652: PUSH
8653: LD_INT 91
8655: ST_TO_ADDR
// ar_mortar := 92 ;
8656: LD_ADDR_EXP 57
8660: PUSH
8661: LD_INT 92
8663: ST_TO_ADDR
// ru_radar := 98 ;
8664: LD_ADDR_EXP 52
8668: PUSH
8669: LD_INT 98
8671: ST_TO_ADDR
// tech_Artillery := 80 ;
8672: LD_ADDR_EXP 60
8676: PUSH
8677: LD_INT 80
8679: ST_TO_ADDR
// tech_RadMat := 81 ;
8680: LD_ADDR_EXP 61
8684: PUSH
8685: LD_INT 81
8687: ST_TO_ADDR
// tech_BasicTools := 82 ;
8688: LD_ADDR_EXP 62
8692: PUSH
8693: LD_INT 82
8695: ST_TO_ADDR
// tech_Cargo := 83 ;
8696: LD_ADDR_EXP 63
8700: PUSH
8701: LD_INT 83
8703: ST_TO_ADDR
// tech_Track := 84 ;
8704: LD_ADDR_EXP 64
8708: PUSH
8709: LD_INT 84
8711: ST_TO_ADDR
// tech_Crane := 85 ;
8712: LD_ADDR_EXP 65
8716: PUSH
8717: LD_INT 85
8719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8720: LD_ADDR_EXP 66
8724: PUSH
8725: LD_INT 86
8727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8728: LD_ADDR_EXP 67
8732: PUSH
8733: LD_INT 87
8735: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8736: LD_ADDR_EXP 68
8740: PUSH
8741: LD_INT 88
8743: ST_TO_ADDR
// class_mastodont := 31 ;
8744: LD_ADDR_EXP 69
8748: PUSH
8749: LD_INT 31
8751: ST_TO_ADDR
// class_horse := 21 ;
8752: LD_ADDR_EXP 70
8756: PUSH
8757: LD_INT 21
8759: ST_TO_ADDR
// end ;
8760: LD_VAR 0 1
8764: RET
// every 1 do
8765: GO 8767
8767: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8768: CALL 8605 0 0
8772: END
// every 0 0$1 do
8773: GO 8775
8775: DISABLE
// begin enable ;
8776: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8777: LD_STRING updateTimer(
8779: PUSH
8780: LD_OWVAR 1
8784: STR
8785: PUSH
8786: LD_STRING );
8788: STR
8789: PPUSH
8790: CALL_OW 559
// end ;
8794: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8795: LD_INT 0
8797: PPUSH
// if p2 = 100 then
8798: LD_VAR 0 2
8802: PUSH
8803: LD_INT 100
8805: EQUAL
8806: IFFALSE 9809
// begin if not StreamModeActive then
8808: LD_EXP 71
8812: NOT
8813: IFFALSE 8823
// StreamModeActive := true ;
8815: LD_ADDR_EXP 71
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// if p3 = 0 then
8823: LD_VAR 0 3
8827: PUSH
8828: LD_INT 0
8830: EQUAL
8831: IFFALSE 8837
// InitStreamMode ;
8833: CALL 9969 0 0
// if p3 = 1 then
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: EQUAL
8845: IFFALSE 8855
// sRocket := true ;
8847: LD_ADDR_EXP 76
8851: PUSH
8852: LD_INT 1
8854: ST_TO_ADDR
// if p3 = 2 then
8855: LD_VAR 0 3
8859: PUSH
8860: LD_INT 2
8862: EQUAL
8863: IFFALSE 8873
// sSpeed := true ;
8865: LD_ADDR_EXP 75
8869: PUSH
8870: LD_INT 1
8872: ST_TO_ADDR
// if p3 = 3 then
8873: LD_VAR 0 3
8877: PUSH
8878: LD_INT 3
8880: EQUAL
8881: IFFALSE 8891
// sEngine := true ;
8883: LD_ADDR_EXP 77
8887: PUSH
8888: LD_INT 1
8890: ST_TO_ADDR
// if p3 = 4 then
8891: LD_VAR 0 3
8895: PUSH
8896: LD_INT 4
8898: EQUAL
8899: IFFALSE 8909
// sSpec := true ;
8901: LD_ADDR_EXP 74
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// if p3 = 5 then
8909: LD_VAR 0 3
8913: PUSH
8914: LD_INT 5
8916: EQUAL
8917: IFFALSE 8927
// sLevel := true ;
8919: LD_ADDR_EXP 78
8923: PUSH
8924: LD_INT 1
8926: ST_TO_ADDR
// if p3 = 6 then
8927: LD_VAR 0 3
8931: PUSH
8932: LD_INT 6
8934: EQUAL
8935: IFFALSE 8945
// sArmoury := true ;
8937: LD_ADDR_EXP 79
8941: PUSH
8942: LD_INT 1
8944: ST_TO_ADDR
// if p3 = 7 then
8945: LD_VAR 0 3
8949: PUSH
8950: LD_INT 7
8952: EQUAL
8953: IFFALSE 8963
// sRadar := true ;
8955: LD_ADDR_EXP 80
8959: PUSH
8960: LD_INT 1
8962: ST_TO_ADDR
// if p3 = 8 then
8963: LD_VAR 0 3
8967: PUSH
8968: LD_INT 8
8970: EQUAL
8971: IFFALSE 8981
// sBunker := true ;
8973: LD_ADDR_EXP 81
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// if p3 = 9 then
8981: LD_VAR 0 3
8985: PUSH
8986: LD_INT 9
8988: EQUAL
8989: IFFALSE 8999
// sHack := true ;
8991: LD_ADDR_EXP 82
8995: PUSH
8996: LD_INT 1
8998: ST_TO_ADDR
// if p3 = 10 then
8999: LD_VAR 0 3
9003: PUSH
9004: LD_INT 10
9006: EQUAL
9007: IFFALSE 9017
// sFire := true ;
9009: LD_ADDR_EXP 83
9013: PUSH
9014: LD_INT 1
9016: ST_TO_ADDR
// if p3 = 11 then
9017: LD_VAR 0 3
9021: PUSH
9022: LD_INT 11
9024: EQUAL
9025: IFFALSE 9035
// sRefresh := true ;
9027: LD_ADDR_EXP 84
9031: PUSH
9032: LD_INT 1
9034: ST_TO_ADDR
// if p3 = 12 then
9035: LD_VAR 0 3
9039: PUSH
9040: LD_INT 12
9042: EQUAL
9043: IFFALSE 9053
// sExp := true ;
9045: LD_ADDR_EXP 85
9049: PUSH
9050: LD_INT 1
9052: ST_TO_ADDR
// if p3 = 13 then
9053: LD_VAR 0 3
9057: PUSH
9058: LD_INT 13
9060: EQUAL
9061: IFFALSE 9071
// sDepot := true ;
9063: LD_ADDR_EXP 86
9067: PUSH
9068: LD_INT 1
9070: ST_TO_ADDR
// if p3 = 14 then
9071: LD_VAR 0 3
9075: PUSH
9076: LD_INT 14
9078: EQUAL
9079: IFFALSE 9089
// sFlag := true ;
9081: LD_ADDR_EXP 87
9085: PUSH
9086: LD_INT 1
9088: ST_TO_ADDR
// if p3 = 15 then
9089: LD_VAR 0 3
9093: PUSH
9094: LD_INT 15
9096: EQUAL
9097: IFFALSE 9107
// sKamikadze := true ;
9099: LD_ADDR_EXP 95
9103: PUSH
9104: LD_INT 1
9106: ST_TO_ADDR
// if p3 = 16 then
9107: LD_VAR 0 3
9111: PUSH
9112: LD_INT 16
9114: EQUAL
9115: IFFALSE 9125
// sTroll := true ;
9117: LD_ADDR_EXP 96
9121: PUSH
9122: LD_INT 1
9124: ST_TO_ADDR
// if p3 = 17 then
9125: LD_VAR 0 3
9129: PUSH
9130: LD_INT 17
9132: EQUAL
9133: IFFALSE 9143
// sSlow := true ;
9135: LD_ADDR_EXP 97
9139: PUSH
9140: LD_INT 1
9142: ST_TO_ADDR
// if p3 = 18 then
9143: LD_VAR 0 3
9147: PUSH
9148: LD_INT 18
9150: EQUAL
9151: IFFALSE 9161
// sLack := true ;
9153: LD_ADDR_EXP 98
9157: PUSH
9158: LD_INT 1
9160: ST_TO_ADDR
// if p3 = 19 then
9161: LD_VAR 0 3
9165: PUSH
9166: LD_INT 19
9168: EQUAL
9169: IFFALSE 9179
// sTank := true ;
9171: LD_ADDR_EXP 100
9175: PUSH
9176: LD_INT 1
9178: ST_TO_ADDR
// if p3 = 20 then
9179: LD_VAR 0 3
9183: PUSH
9184: LD_INT 20
9186: EQUAL
9187: IFFALSE 9197
// sRemote := true ;
9189: LD_ADDR_EXP 101
9193: PUSH
9194: LD_INT 1
9196: ST_TO_ADDR
// if p3 = 21 then
9197: LD_VAR 0 3
9201: PUSH
9202: LD_INT 21
9204: EQUAL
9205: IFFALSE 9215
// sPowell := true ;
9207: LD_ADDR_EXP 102
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// if p3 = 22 then
9215: LD_VAR 0 3
9219: PUSH
9220: LD_INT 22
9222: EQUAL
9223: IFFALSE 9233
// sTeleport := true ;
9225: LD_ADDR_EXP 105
9229: PUSH
9230: LD_INT 1
9232: ST_TO_ADDR
// if p3 = 23 then
9233: LD_VAR 0 3
9237: PUSH
9238: LD_INT 23
9240: EQUAL
9241: IFFALSE 9251
// sOilTower := true ;
9243: LD_ADDR_EXP 107
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// if p3 = 24 then
9251: LD_VAR 0 3
9255: PUSH
9256: LD_INT 24
9258: EQUAL
9259: IFFALSE 9269
// sShovel := true ;
9261: LD_ADDR_EXP 108
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// if p3 = 25 then
9269: LD_VAR 0 3
9273: PUSH
9274: LD_INT 25
9276: EQUAL
9277: IFFALSE 9287
// sSheik := true ;
9279: LD_ADDR_EXP 109
9283: PUSH
9284: LD_INT 1
9286: ST_TO_ADDR
// if p3 = 26 then
9287: LD_VAR 0 3
9291: PUSH
9292: LD_INT 26
9294: EQUAL
9295: IFFALSE 9305
// sEarthquake := true ;
9297: LD_ADDR_EXP 111
9301: PUSH
9302: LD_INT 1
9304: ST_TO_ADDR
// if p3 = 27 then
9305: LD_VAR 0 3
9309: PUSH
9310: LD_INT 27
9312: EQUAL
9313: IFFALSE 9323
// sAI := true ;
9315: LD_ADDR_EXP 112
9319: PUSH
9320: LD_INT 1
9322: ST_TO_ADDR
// if p3 = 28 then
9323: LD_VAR 0 3
9327: PUSH
9328: LD_INT 28
9330: EQUAL
9331: IFFALSE 9341
// sCargo := true ;
9333: LD_ADDR_EXP 115
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// if p3 = 29 then
9341: LD_VAR 0 3
9345: PUSH
9346: LD_INT 29
9348: EQUAL
9349: IFFALSE 9359
// sDLaser := true ;
9351: LD_ADDR_EXP 116
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// if p3 = 30 then
9359: LD_VAR 0 3
9363: PUSH
9364: LD_INT 30
9366: EQUAL
9367: IFFALSE 9377
// sExchange := true ;
9369: LD_ADDR_EXP 117
9373: PUSH
9374: LD_INT 1
9376: ST_TO_ADDR
// if p3 = 31 then
9377: LD_VAR 0 3
9381: PUSH
9382: LD_INT 31
9384: EQUAL
9385: IFFALSE 9395
// sFac := true ;
9387: LD_ADDR_EXP 118
9391: PUSH
9392: LD_INT 1
9394: ST_TO_ADDR
// if p3 = 32 then
9395: LD_VAR 0 3
9399: PUSH
9400: LD_INT 32
9402: EQUAL
9403: IFFALSE 9413
// sPower := true ;
9405: LD_ADDR_EXP 119
9409: PUSH
9410: LD_INT 1
9412: ST_TO_ADDR
// if p3 = 33 then
9413: LD_VAR 0 3
9417: PUSH
9418: LD_INT 33
9420: EQUAL
9421: IFFALSE 9431
// sRandom := true ;
9423: LD_ADDR_EXP 120
9427: PUSH
9428: LD_INT 1
9430: ST_TO_ADDR
// if p3 = 34 then
9431: LD_VAR 0 3
9435: PUSH
9436: LD_INT 34
9438: EQUAL
9439: IFFALSE 9449
// sShield := true ;
9441: LD_ADDR_EXP 121
9445: PUSH
9446: LD_INT 1
9448: ST_TO_ADDR
// if p3 = 35 then
9449: LD_VAR 0 3
9453: PUSH
9454: LD_INT 35
9456: EQUAL
9457: IFFALSE 9467
// sTime := true ;
9459: LD_ADDR_EXP 122
9463: PUSH
9464: LD_INT 1
9466: ST_TO_ADDR
// if p3 = 36 then
9467: LD_VAR 0 3
9471: PUSH
9472: LD_INT 36
9474: EQUAL
9475: IFFALSE 9485
// sTools := true ;
9477: LD_ADDR_EXP 123
9481: PUSH
9482: LD_INT 1
9484: ST_TO_ADDR
// if p3 = 101 then
9485: LD_VAR 0 3
9489: PUSH
9490: LD_INT 101
9492: EQUAL
9493: IFFALSE 9503
// sSold := true ;
9495: LD_ADDR_EXP 88
9499: PUSH
9500: LD_INT 1
9502: ST_TO_ADDR
// if p3 = 102 then
9503: LD_VAR 0 3
9507: PUSH
9508: LD_INT 102
9510: EQUAL
9511: IFFALSE 9521
// sDiff := true ;
9513: LD_ADDR_EXP 89
9517: PUSH
9518: LD_INT 1
9520: ST_TO_ADDR
// if p3 = 103 then
9521: LD_VAR 0 3
9525: PUSH
9526: LD_INT 103
9528: EQUAL
9529: IFFALSE 9539
// sFog := true ;
9531: LD_ADDR_EXP 92
9535: PUSH
9536: LD_INT 1
9538: ST_TO_ADDR
// if p3 = 104 then
9539: LD_VAR 0 3
9543: PUSH
9544: LD_INT 104
9546: EQUAL
9547: IFFALSE 9557
// sReset := true ;
9549: LD_ADDR_EXP 93
9553: PUSH
9554: LD_INT 1
9556: ST_TO_ADDR
// if p3 = 105 then
9557: LD_VAR 0 3
9561: PUSH
9562: LD_INT 105
9564: EQUAL
9565: IFFALSE 9575
// sSun := true ;
9567: LD_ADDR_EXP 94
9571: PUSH
9572: LD_INT 1
9574: ST_TO_ADDR
// if p3 = 106 then
9575: LD_VAR 0 3
9579: PUSH
9580: LD_INT 106
9582: EQUAL
9583: IFFALSE 9593
// sTiger := true ;
9585: LD_ADDR_EXP 90
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// if p3 = 107 then
9593: LD_VAR 0 3
9597: PUSH
9598: LD_INT 107
9600: EQUAL
9601: IFFALSE 9611
// sBomb := true ;
9603: LD_ADDR_EXP 91
9607: PUSH
9608: LD_INT 1
9610: ST_TO_ADDR
// if p3 = 108 then
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 108
9618: EQUAL
9619: IFFALSE 9629
// sWound := true ;
9621: LD_ADDR_EXP 99
9625: PUSH
9626: LD_INT 1
9628: ST_TO_ADDR
// if p3 = 109 then
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 109
9636: EQUAL
9637: IFFALSE 9647
// sBetray := true ;
9639: LD_ADDR_EXP 103
9643: PUSH
9644: LD_INT 1
9646: ST_TO_ADDR
// if p3 = 110 then
9647: LD_VAR 0 3
9651: PUSH
9652: LD_INT 110
9654: EQUAL
9655: IFFALSE 9665
// sContamin := true ;
9657: LD_ADDR_EXP 104
9661: PUSH
9662: LD_INT 1
9664: ST_TO_ADDR
// if p3 = 111 then
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 111
9672: EQUAL
9673: IFFALSE 9683
// sOil := true ;
9675: LD_ADDR_EXP 106
9679: PUSH
9680: LD_INT 1
9682: ST_TO_ADDR
// if p3 = 112 then
9683: LD_VAR 0 3
9687: PUSH
9688: LD_INT 112
9690: EQUAL
9691: IFFALSE 9701
// sStu := true ;
9693: LD_ADDR_EXP 110
9697: PUSH
9698: LD_INT 1
9700: ST_TO_ADDR
// if p3 = 113 then
9701: LD_VAR 0 3
9705: PUSH
9706: LD_INT 113
9708: EQUAL
9709: IFFALSE 9719
// sBazooka := true ;
9711: LD_ADDR_EXP 113
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// if p3 = 114 then
9719: LD_VAR 0 3
9723: PUSH
9724: LD_INT 114
9726: EQUAL
9727: IFFALSE 9737
// sMortar := true ;
9729: LD_ADDR_EXP 114
9733: PUSH
9734: LD_INT 1
9736: ST_TO_ADDR
// if p3 = 115 then
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 115
9744: EQUAL
9745: IFFALSE 9755
// sRanger := true ;
9747: LD_ADDR_EXP 124
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if p3 = 116 then
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 116
9762: EQUAL
9763: IFFALSE 9773
// sComputer := true ;
9765: LD_ADDR_EXP 125
9769: PUSH
9770: LD_INT 1
9772: ST_TO_ADDR
// if p3 = 117 then
9773: LD_VAR 0 3
9777: PUSH
9778: LD_INT 117
9780: EQUAL
9781: IFFALSE 9791
// s30 := true ;
9783: LD_ADDR_EXP 126
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// if p3 = 118 then
9791: LD_VAR 0 3
9795: PUSH
9796: LD_INT 118
9798: EQUAL
9799: IFFALSE 9809
// s60 := true ;
9801: LD_ADDR_EXP 127
9805: PUSH
9806: LD_INT 1
9808: ST_TO_ADDR
// end ; if p2 = 101 then
9809: LD_VAR 0 2
9813: PUSH
9814: LD_INT 101
9816: EQUAL
9817: IFFALSE 9945
// begin case p3 of 1 :
9819: LD_VAR 0 3
9823: PUSH
9824: LD_INT 1
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9839
9832: POP
// hHackUnlimitedResources ; 2 :
9833: CALL 21541 0 0
9837: GO 9945
9839: LD_INT 2
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9854
9847: POP
// hHackSetLevel10 ; 3 :
9848: CALL 21674 0 0
9852: GO 9945
9854: LD_INT 3
9856: DOUBLE
9857: EQUAL
9858: IFTRUE 9862
9860: GO 9869
9862: POP
// hHackSetLevel10YourUnits ; 4 :
9863: CALL 21759 0 0
9867: GO 9945
9869: LD_INT 4
9871: DOUBLE
9872: EQUAL
9873: IFTRUE 9877
9875: GO 9884
9877: POP
// hHackInvincible ; 5 :
9878: CALL 22207 0 0
9882: GO 9945
9884: LD_INT 5
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 9899
9892: POP
// hHackInvisible ; 6 :
9893: CALL 22318 0 0
9897: GO 9945
9899: LD_INT 6
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9914
9907: POP
// hHackChangeYourSide ; 7 :
9908: CALL 22375 0 0
9912: GO 9945
9914: LD_INT 7
9916: DOUBLE
9917: EQUAL
9918: IFTRUE 9922
9920: GO 9929
9922: POP
// hHackChangeUnitSide ; 8 :
9923: CALL 22417 0 0
9927: GO 9945
9929: LD_INT 8
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9937
9935: GO 9944
9937: POP
// hHackFog ; end ;
9938: CALL 22518 0 0
9942: GO 9945
9944: POP
// end ; end ;
9945: LD_VAR 0 7
9949: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9950: GO 9952
9952: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9953: LD_STRING initStreamRollete();
9955: PPUSH
9956: CALL_OW 559
// InitStreamMode ;
9960: CALL 9969 0 0
// DefineStreamItems ( ) ;
9964: CALL 10433 0 0
// end ;
9968: END
// function InitStreamMode ; begin
9969: LD_INT 0
9971: PPUSH
// streamModeActive := false ;
9972: LD_ADDR_EXP 71
9976: PUSH
9977: LD_INT 0
9979: ST_TO_ADDR
// normalCounter := 36 ;
9980: LD_ADDR_EXP 72
9984: PUSH
9985: LD_INT 36
9987: ST_TO_ADDR
// hardcoreCounter := 16 ;
9988: LD_ADDR_EXP 73
9992: PUSH
9993: LD_INT 16
9995: ST_TO_ADDR
// sRocket := false ;
9996: LD_ADDR_EXP 76
10000: PUSH
10001: LD_INT 0
10003: ST_TO_ADDR
// sSpeed := false ;
10004: LD_ADDR_EXP 75
10008: PUSH
10009: LD_INT 0
10011: ST_TO_ADDR
// sEngine := false ;
10012: LD_ADDR_EXP 77
10016: PUSH
10017: LD_INT 0
10019: ST_TO_ADDR
// sSpec := false ;
10020: LD_ADDR_EXP 74
10024: PUSH
10025: LD_INT 0
10027: ST_TO_ADDR
// sLevel := false ;
10028: LD_ADDR_EXP 78
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// sArmoury := false ;
10036: LD_ADDR_EXP 79
10040: PUSH
10041: LD_INT 0
10043: ST_TO_ADDR
// sRadar := false ;
10044: LD_ADDR_EXP 80
10048: PUSH
10049: LD_INT 0
10051: ST_TO_ADDR
// sBunker := false ;
10052: LD_ADDR_EXP 81
10056: PUSH
10057: LD_INT 0
10059: ST_TO_ADDR
// sHack := false ;
10060: LD_ADDR_EXP 82
10064: PUSH
10065: LD_INT 0
10067: ST_TO_ADDR
// sFire := false ;
10068: LD_ADDR_EXP 83
10072: PUSH
10073: LD_INT 0
10075: ST_TO_ADDR
// sRefresh := false ;
10076: LD_ADDR_EXP 84
10080: PUSH
10081: LD_INT 0
10083: ST_TO_ADDR
// sExp := false ;
10084: LD_ADDR_EXP 85
10088: PUSH
10089: LD_INT 0
10091: ST_TO_ADDR
// sDepot := false ;
10092: LD_ADDR_EXP 86
10096: PUSH
10097: LD_INT 0
10099: ST_TO_ADDR
// sFlag := false ;
10100: LD_ADDR_EXP 87
10104: PUSH
10105: LD_INT 0
10107: ST_TO_ADDR
// sKamikadze := false ;
10108: LD_ADDR_EXP 95
10112: PUSH
10113: LD_INT 0
10115: ST_TO_ADDR
// sTroll := false ;
10116: LD_ADDR_EXP 96
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// sSlow := false ;
10124: LD_ADDR_EXP 97
10128: PUSH
10129: LD_INT 0
10131: ST_TO_ADDR
// sLack := false ;
10132: LD_ADDR_EXP 98
10136: PUSH
10137: LD_INT 0
10139: ST_TO_ADDR
// sTank := false ;
10140: LD_ADDR_EXP 100
10144: PUSH
10145: LD_INT 0
10147: ST_TO_ADDR
// sRemote := false ;
10148: LD_ADDR_EXP 101
10152: PUSH
10153: LD_INT 0
10155: ST_TO_ADDR
// sPowell := false ;
10156: LD_ADDR_EXP 102
10160: PUSH
10161: LD_INT 0
10163: ST_TO_ADDR
// sTeleport := false ;
10164: LD_ADDR_EXP 105
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// sOilTower := false ;
10172: LD_ADDR_EXP 107
10176: PUSH
10177: LD_INT 0
10179: ST_TO_ADDR
// sShovel := false ;
10180: LD_ADDR_EXP 108
10184: PUSH
10185: LD_INT 0
10187: ST_TO_ADDR
// sSheik := false ;
10188: LD_ADDR_EXP 109
10192: PUSH
10193: LD_INT 0
10195: ST_TO_ADDR
// sEarthquake := false ;
10196: LD_ADDR_EXP 111
10200: PUSH
10201: LD_INT 0
10203: ST_TO_ADDR
// sAI := false ;
10204: LD_ADDR_EXP 112
10208: PUSH
10209: LD_INT 0
10211: ST_TO_ADDR
// sCargo := false ;
10212: LD_ADDR_EXP 115
10216: PUSH
10217: LD_INT 0
10219: ST_TO_ADDR
// sDLaser := false ;
10220: LD_ADDR_EXP 116
10224: PUSH
10225: LD_INT 0
10227: ST_TO_ADDR
// sExchange := false ;
10228: LD_ADDR_EXP 117
10232: PUSH
10233: LD_INT 0
10235: ST_TO_ADDR
// sFac := false ;
10236: LD_ADDR_EXP 118
10240: PUSH
10241: LD_INT 0
10243: ST_TO_ADDR
// sPower := false ;
10244: LD_ADDR_EXP 119
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// sRandom := false ;
10252: LD_ADDR_EXP 120
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// sShield := false ;
10260: LD_ADDR_EXP 121
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// sTime := false ;
10268: LD_ADDR_EXP 122
10272: PUSH
10273: LD_INT 0
10275: ST_TO_ADDR
// sTools := false ;
10276: LD_ADDR_EXP 123
10280: PUSH
10281: LD_INT 0
10283: ST_TO_ADDR
// sSold := false ;
10284: LD_ADDR_EXP 88
10288: PUSH
10289: LD_INT 0
10291: ST_TO_ADDR
// sDiff := false ;
10292: LD_ADDR_EXP 89
10296: PUSH
10297: LD_INT 0
10299: ST_TO_ADDR
// sFog := false ;
10300: LD_ADDR_EXP 92
10304: PUSH
10305: LD_INT 0
10307: ST_TO_ADDR
// sReset := false ;
10308: LD_ADDR_EXP 93
10312: PUSH
10313: LD_INT 0
10315: ST_TO_ADDR
// sSun := false ;
10316: LD_ADDR_EXP 94
10320: PUSH
10321: LD_INT 0
10323: ST_TO_ADDR
// sTiger := false ;
10324: LD_ADDR_EXP 90
10328: PUSH
10329: LD_INT 0
10331: ST_TO_ADDR
// sBomb := false ;
10332: LD_ADDR_EXP 91
10336: PUSH
10337: LD_INT 0
10339: ST_TO_ADDR
// sWound := false ;
10340: LD_ADDR_EXP 99
10344: PUSH
10345: LD_INT 0
10347: ST_TO_ADDR
// sBetray := false ;
10348: LD_ADDR_EXP 103
10352: PUSH
10353: LD_INT 0
10355: ST_TO_ADDR
// sContamin := false ;
10356: LD_ADDR_EXP 104
10360: PUSH
10361: LD_INT 0
10363: ST_TO_ADDR
// sOil := false ;
10364: LD_ADDR_EXP 106
10368: PUSH
10369: LD_INT 0
10371: ST_TO_ADDR
// sStu := false ;
10372: LD_ADDR_EXP 110
10376: PUSH
10377: LD_INT 0
10379: ST_TO_ADDR
// sBazooka := false ;
10380: LD_ADDR_EXP 113
10384: PUSH
10385: LD_INT 0
10387: ST_TO_ADDR
// sMortar := false ;
10388: LD_ADDR_EXP 114
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// sRanger := false ;
10396: LD_ADDR_EXP 124
10400: PUSH
10401: LD_INT 0
10403: ST_TO_ADDR
// sComputer := false ;
10404: LD_ADDR_EXP 125
10408: PUSH
10409: LD_INT 0
10411: ST_TO_ADDR
// s30 := false ;
10412: LD_ADDR_EXP 126
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// s60 := false ;
10420: LD_ADDR_EXP 127
10424: PUSH
10425: LD_INT 0
10427: ST_TO_ADDR
// end ;
10428: LD_VAR 0 1
10432: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
10433: LD_INT 0
10435: PPUSH
10436: PPUSH
10437: PPUSH
10438: PPUSH
10439: PPUSH
// result := [ ] ;
10440: LD_ADDR_VAR 0 1
10444: PUSH
10445: EMPTY
10446: ST_TO_ADDR
// if campaign_id = 1 then
10447: LD_OWVAR 69
10451: PUSH
10452: LD_INT 1
10454: EQUAL
10455: IFFALSE 13621
// begin case mission_number of 1 :
10457: LD_OWVAR 70
10461: PUSH
10462: LD_INT 1
10464: DOUBLE
10465: EQUAL
10466: IFTRUE 10470
10468: GO 10546
10470: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10471: LD_ADDR_VAR 0 1
10475: PUSH
10476: LD_INT 2
10478: PUSH
10479: LD_INT 4
10481: PUSH
10482: LD_INT 11
10484: PUSH
10485: LD_INT 12
10487: PUSH
10488: LD_INT 15
10490: PUSH
10491: LD_INT 16
10493: PUSH
10494: LD_INT 22
10496: PUSH
10497: LD_INT 23
10499: PUSH
10500: LD_INT 26
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 101
10516: PUSH
10517: LD_INT 102
10519: PUSH
10520: LD_INT 106
10522: PUSH
10523: LD_INT 116
10525: PUSH
10526: LD_INT 117
10528: PUSH
10529: LD_INT 118
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: ST_TO_ADDR
10544: GO 13619
10546: LD_INT 2
10548: DOUBLE
10549: EQUAL
10550: IFTRUE 10554
10552: GO 10638
10554: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10555: LD_ADDR_VAR 0 1
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: LD_INT 4
10565: PUSH
10566: LD_INT 11
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: LD_INT 15
10574: PUSH
10575: LD_INT 16
10577: PUSH
10578: LD_INT 22
10580: PUSH
10581: LD_INT 23
10583: PUSH
10584: LD_INT 26
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 101
10600: PUSH
10601: LD_INT 102
10603: PUSH
10604: LD_INT 105
10606: PUSH
10607: LD_INT 106
10609: PUSH
10610: LD_INT 108
10612: PUSH
10613: LD_INT 116
10615: PUSH
10616: LD_INT 117
10618: PUSH
10619: LD_INT 118
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: ST_TO_ADDR
10636: GO 13619
10638: LD_INT 3
10640: DOUBLE
10641: EQUAL
10642: IFTRUE 10646
10644: GO 10734
10646: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10647: LD_ADDR_VAR 0 1
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: LD_INT 4
10657: PUSH
10658: LD_INT 5
10660: PUSH
10661: LD_INT 11
10663: PUSH
10664: LD_INT 12
10666: PUSH
10667: LD_INT 15
10669: PUSH
10670: LD_INT 16
10672: PUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 26
10678: PUSH
10679: LD_INT 36
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 101
10696: PUSH
10697: LD_INT 102
10699: PUSH
10700: LD_INT 105
10702: PUSH
10703: LD_INT 106
10705: PUSH
10706: LD_INT 108
10708: PUSH
10709: LD_INT 116
10711: PUSH
10712: LD_INT 117
10714: PUSH
10715: LD_INT 118
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: ST_TO_ADDR
10732: GO 13619
10734: LD_INT 4
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 10838
10742: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10743: LD_ADDR_VAR 0 1
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: LD_INT 4
10753: PUSH
10754: LD_INT 5
10756: PUSH
10757: LD_INT 8
10759: PUSH
10760: LD_INT 11
10762: PUSH
10763: LD_INT 12
10765: PUSH
10766: LD_INT 15
10768: PUSH
10769: LD_INT 16
10771: PUSH
10772: LD_INT 22
10774: PUSH
10775: LD_INT 23
10777: PUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 36
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 101
10800: PUSH
10801: LD_INT 102
10803: PUSH
10804: LD_INT 105
10806: PUSH
10807: LD_INT 106
10809: PUSH
10810: LD_INT 108
10812: PUSH
10813: LD_INT 116
10815: PUSH
10816: LD_INT 117
10818: PUSH
10819: LD_INT 118
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: ST_TO_ADDR
10836: GO 13619
10838: LD_INT 5
10840: DOUBLE
10841: EQUAL
10842: IFTRUE 10846
10844: GO 10958
10846: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10847: LD_ADDR_VAR 0 1
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: LD_INT 4
10857: PUSH
10858: LD_INT 5
10860: PUSH
10861: LD_INT 6
10863: PUSH
10864: LD_INT 8
10866: PUSH
10867: LD_INT 11
10869: PUSH
10870: LD_INT 12
10872: PUSH
10873: LD_INT 15
10875: PUSH
10876: LD_INT 16
10878: PUSH
10879: LD_INT 22
10881: PUSH
10882: LD_INT 23
10884: PUSH
10885: LD_INT 25
10887: PUSH
10888: LD_INT 26
10890: PUSH
10891: LD_INT 36
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 101
10912: PUSH
10913: LD_INT 102
10915: PUSH
10916: LD_INT 105
10918: PUSH
10919: LD_INT 106
10921: PUSH
10922: LD_INT 108
10924: PUSH
10925: LD_INT 109
10927: PUSH
10928: LD_INT 112
10930: PUSH
10931: LD_INT 116
10933: PUSH
10934: LD_INT 117
10936: PUSH
10937: LD_INT 118
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: ST_TO_ADDR
10956: GO 13619
10958: LD_INT 6
10960: DOUBLE
10961: EQUAL
10962: IFTRUE 10966
10964: GO 11098
10966: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 4
10977: PUSH
10978: LD_INT 5
10980: PUSH
10981: LD_INT 6
10983: PUSH
10984: LD_INT 8
10986: PUSH
10987: LD_INT 11
10989: PUSH
10990: LD_INT 12
10992: PUSH
10993: LD_INT 15
10995: PUSH
10996: LD_INT 16
10998: PUSH
10999: LD_INT 20
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 23
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 26
11016: PUSH
11017: LD_INT 30
11019: PUSH
11020: LD_INT 31
11022: PUSH
11023: LD_INT 32
11025: PUSH
11026: LD_INT 36
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 101
11052: PUSH
11053: LD_INT 102
11055: PUSH
11056: LD_INT 105
11058: PUSH
11059: LD_INT 106
11061: PUSH
11062: LD_INT 108
11064: PUSH
11065: LD_INT 109
11067: PUSH
11068: LD_INT 112
11070: PUSH
11071: LD_INT 116
11073: PUSH
11074: LD_INT 117
11076: PUSH
11077: LD_INT 118
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: ST_TO_ADDR
11096: GO 13619
11098: LD_INT 7
11100: DOUBLE
11101: EQUAL
11102: IFTRUE 11106
11104: GO 11218
11106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11107: LD_ADDR_VAR 0 1
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: LD_INT 4
11117: PUSH
11118: LD_INT 5
11120: PUSH
11121: LD_INT 7
11123: PUSH
11124: LD_INT 11
11126: PUSH
11127: LD_INT 12
11129: PUSH
11130: LD_INT 15
11132: PUSH
11133: LD_INT 16
11135: PUSH
11136: LD_INT 20
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 22
11144: PUSH
11145: LD_INT 23
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 26
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 101
11172: PUSH
11173: LD_INT 102
11175: PUSH
11176: LD_INT 103
11178: PUSH
11179: LD_INT 105
11181: PUSH
11182: LD_INT 106
11184: PUSH
11185: LD_INT 108
11187: PUSH
11188: LD_INT 112
11190: PUSH
11191: LD_INT 116
11193: PUSH
11194: LD_INT 117
11196: PUSH
11197: LD_INT 118
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: ST_TO_ADDR
11216: GO 13619
11218: LD_INT 8
11220: DOUBLE
11221: EQUAL
11222: IFTRUE 11226
11224: GO 11366
11226: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11227: LD_ADDR_VAR 0 1
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: LD_INT 4
11237: PUSH
11238: LD_INT 5
11240: PUSH
11241: LD_INT 6
11243: PUSH
11244: LD_INT 7
11246: PUSH
11247: LD_INT 8
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: LD_INT 12
11255: PUSH
11256: LD_INT 15
11258: PUSH
11259: LD_INT 16
11261: PUSH
11262: LD_INT 20
11264: PUSH
11265: LD_INT 21
11267: PUSH
11268: LD_INT 22
11270: PUSH
11271: LD_INT 23
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 26
11279: PUSH
11280: LD_INT 30
11282: PUSH
11283: LD_INT 31
11285: PUSH
11286: LD_INT 32
11288: PUSH
11289: LD_INT 36
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 101
11316: PUSH
11317: LD_INT 102
11319: PUSH
11320: LD_INT 103
11322: PUSH
11323: LD_INT 105
11325: PUSH
11326: LD_INT 106
11328: PUSH
11329: LD_INT 108
11331: PUSH
11332: LD_INT 109
11334: PUSH
11335: LD_INT 112
11337: PUSH
11338: LD_INT 116
11340: PUSH
11341: LD_INT 117
11343: PUSH
11344: LD_INT 118
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: ST_TO_ADDR
11364: GO 13619
11366: LD_INT 9
11368: DOUBLE
11369: EQUAL
11370: IFTRUE 11374
11372: GO 11522
11374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11375: LD_ADDR_VAR 0 1
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: LD_INT 4
11385: PUSH
11386: LD_INT 5
11388: PUSH
11389: LD_INT 6
11391: PUSH
11392: LD_INT 7
11394: PUSH
11395: LD_INT 8
11397: PUSH
11398: LD_INT 11
11400: PUSH
11401: LD_INT 12
11403: PUSH
11404: LD_INT 15
11406: PUSH
11407: LD_INT 16
11409: PUSH
11410: LD_INT 20
11412: PUSH
11413: LD_INT 21
11415: PUSH
11416: LD_INT 22
11418: PUSH
11419: LD_INT 23
11421: PUSH
11422: LD_INT 25
11424: PUSH
11425: LD_INT 26
11427: PUSH
11428: LD_INT 28
11430: PUSH
11431: LD_INT 30
11433: PUSH
11434: LD_INT 31
11436: PUSH
11437: LD_INT 32
11439: PUSH
11440: LD_INT 36
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 101
11468: PUSH
11469: LD_INT 102
11471: PUSH
11472: LD_INT 103
11474: PUSH
11475: LD_INT 105
11477: PUSH
11478: LD_INT 106
11480: PUSH
11481: LD_INT 108
11483: PUSH
11484: LD_INT 109
11486: PUSH
11487: LD_INT 112
11489: PUSH
11490: LD_INT 114
11492: PUSH
11493: LD_INT 116
11495: PUSH
11496: LD_INT 117
11498: PUSH
11499: LD_INT 118
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: ST_TO_ADDR
11520: GO 13619
11522: LD_INT 10
11524: DOUBLE
11525: EQUAL
11526: IFTRUE 11530
11528: GO 11726
11530: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11531: LD_ADDR_VAR 0 1
11535: PUSH
11536: LD_INT 2
11538: PUSH
11539: LD_INT 4
11541: PUSH
11542: LD_INT 5
11544: PUSH
11545: LD_INT 6
11547: PUSH
11548: LD_INT 7
11550: PUSH
11551: LD_INT 8
11553: PUSH
11554: LD_INT 9
11556: PUSH
11557: LD_INT 10
11559: PUSH
11560: LD_INT 11
11562: PUSH
11563: LD_INT 12
11565: PUSH
11566: LD_INT 13
11568: PUSH
11569: LD_INT 14
11571: PUSH
11572: LD_INT 15
11574: PUSH
11575: LD_INT 16
11577: PUSH
11578: LD_INT 17
11580: PUSH
11581: LD_INT 18
11583: PUSH
11584: LD_INT 19
11586: PUSH
11587: LD_INT 20
11589: PUSH
11590: LD_INT 21
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_INT 23
11598: PUSH
11599: LD_INT 24
11601: PUSH
11602: LD_INT 25
11604: PUSH
11605: LD_INT 26
11607: PUSH
11608: LD_INT 28
11610: PUSH
11611: LD_INT 30
11613: PUSH
11614: LD_INT 31
11616: PUSH
11617: LD_INT 32
11619: PUSH
11620: LD_INT 36
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 101
11656: PUSH
11657: LD_INT 102
11659: PUSH
11660: LD_INT 103
11662: PUSH
11663: LD_INT 104
11665: PUSH
11666: LD_INT 105
11668: PUSH
11669: LD_INT 106
11671: PUSH
11672: LD_INT 107
11674: PUSH
11675: LD_INT 108
11677: PUSH
11678: LD_INT 109
11680: PUSH
11681: LD_INT 110
11683: PUSH
11684: LD_INT 111
11686: PUSH
11687: LD_INT 112
11689: PUSH
11690: LD_INT 114
11692: PUSH
11693: LD_INT 116
11695: PUSH
11696: LD_INT 117
11698: PUSH
11699: LD_INT 118
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: ST_TO_ADDR
11724: GO 13619
11726: LD_INT 11
11728: DOUBLE
11729: EQUAL
11730: IFTRUE 11734
11732: GO 11938
11734: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11735: LD_ADDR_VAR 0 1
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: LD_INT 4
11748: PUSH
11749: LD_INT 5
11751: PUSH
11752: LD_INT 6
11754: PUSH
11755: LD_INT 7
11757: PUSH
11758: LD_INT 8
11760: PUSH
11761: LD_INT 9
11763: PUSH
11764: LD_INT 10
11766: PUSH
11767: LD_INT 11
11769: PUSH
11770: LD_INT 12
11772: PUSH
11773: LD_INT 13
11775: PUSH
11776: LD_INT 14
11778: PUSH
11779: LD_INT 15
11781: PUSH
11782: LD_INT 16
11784: PUSH
11785: LD_INT 17
11787: PUSH
11788: LD_INT 18
11790: PUSH
11791: LD_INT 19
11793: PUSH
11794: LD_INT 20
11796: PUSH
11797: LD_INT 21
11799: PUSH
11800: LD_INT 22
11802: PUSH
11803: LD_INT 23
11805: PUSH
11806: LD_INT 24
11808: PUSH
11809: LD_INT 25
11811: PUSH
11812: LD_INT 26
11814: PUSH
11815: LD_INT 28
11817: PUSH
11818: LD_INT 30
11820: PUSH
11821: LD_INT 31
11823: PUSH
11824: LD_INT 32
11826: PUSH
11827: LD_INT 34
11829: PUSH
11830: LD_INT 36
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 101
11868: PUSH
11869: LD_INT 102
11871: PUSH
11872: LD_INT 103
11874: PUSH
11875: LD_INT 104
11877: PUSH
11878: LD_INT 105
11880: PUSH
11881: LD_INT 106
11883: PUSH
11884: LD_INT 107
11886: PUSH
11887: LD_INT 108
11889: PUSH
11890: LD_INT 109
11892: PUSH
11893: LD_INT 110
11895: PUSH
11896: LD_INT 111
11898: PUSH
11899: LD_INT 112
11901: PUSH
11902: LD_INT 114
11904: PUSH
11905: LD_INT 116
11907: PUSH
11908: LD_INT 117
11910: PUSH
11911: LD_INT 118
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: ST_TO_ADDR
11936: GO 13619
11938: LD_INT 12
11940: DOUBLE
11941: EQUAL
11942: IFTRUE 11946
11944: GO 12166
11946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: PUSH
11955: LD_INT 2
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: LD_INT 4
11963: PUSH
11964: LD_INT 5
11966: PUSH
11967: LD_INT 6
11969: PUSH
11970: LD_INT 7
11972: PUSH
11973: LD_INT 8
11975: PUSH
11976: LD_INT 9
11978: PUSH
11979: LD_INT 10
11981: PUSH
11982: LD_INT 11
11984: PUSH
11985: LD_INT 12
11987: PUSH
11988: LD_INT 13
11990: PUSH
11991: LD_INT 14
11993: PUSH
11994: LD_INT 15
11996: PUSH
11997: LD_INT 16
11999: PUSH
12000: LD_INT 17
12002: PUSH
12003: LD_INT 18
12005: PUSH
12006: LD_INT 19
12008: PUSH
12009: LD_INT 20
12011: PUSH
12012: LD_INT 21
12014: PUSH
12015: LD_INT 22
12017: PUSH
12018: LD_INT 23
12020: PUSH
12021: LD_INT 24
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 26
12029: PUSH
12030: LD_INT 27
12032: PUSH
12033: LD_INT 28
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 31
12041: PUSH
12042: LD_INT 32
12044: PUSH
12045: LD_INT 33
12047: PUSH
12048: LD_INT 34
12050: PUSH
12051: LD_INT 36
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 101
12092: PUSH
12093: LD_INT 102
12095: PUSH
12096: LD_INT 103
12098: PUSH
12099: LD_INT 104
12101: PUSH
12102: LD_INT 105
12104: PUSH
12105: LD_INT 106
12107: PUSH
12108: LD_INT 107
12110: PUSH
12111: LD_INT 108
12113: PUSH
12114: LD_INT 109
12116: PUSH
12117: LD_INT 110
12119: PUSH
12120: LD_INT 111
12122: PUSH
12123: LD_INT 112
12125: PUSH
12126: LD_INT 113
12128: PUSH
12129: LD_INT 114
12131: PUSH
12132: LD_INT 116
12134: PUSH
12135: LD_INT 117
12137: PUSH
12138: LD_INT 118
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: ST_TO_ADDR
12164: GO 13619
12166: LD_INT 13
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12382
12174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12175: LD_ADDR_VAR 0 1
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: LD_INT 3
12188: PUSH
12189: LD_INT 4
12191: PUSH
12192: LD_INT 5
12194: PUSH
12195: LD_INT 8
12197: PUSH
12198: LD_INT 9
12200: PUSH
12201: LD_INT 10
12203: PUSH
12204: LD_INT 11
12206: PUSH
12207: LD_INT 12
12209: PUSH
12210: LD_INT 14
12212: PUSH
12213: LD_INT 15
12215: PUSH
12216: LD_INT 16
12218: PUSH
12219: LD_INT 17
12221: PUSH
12222: LD_INT 18
12224: PUSH
12225: LD_INT 19
12227: PUSH
12228: LD_INT 20
12230: PUSH
12231: LD_INT 21
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_INT 23
12239: PUSH
12240: LD_INT 24
12242: PUSH
12243: LD_INT 25
12245: PUSH
12246: LD_INT 26
12248: PUSH
12249: LD_INT 27
12251: PUSH
12252: LD_INT 28
12254: PUSH
12255: LD_INT 30
12257: PUSH
12258: LD_INT 31
12260: PUSH
12261: LD_INT 32
12263: PUSH
12264: LD_INT 33
12266: PUSH
12267: LD_INT 34
12269: PUSH
12270: LD_INT 36
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 101
12308: PUSH
12309: LD_INT 102
12311: PUSH
12312: LD_INT 103
12314: PUSH
12315: LD_INT 104
12317: PUSH
12318: LD_INT 105
12320: PUSH
12321: LD_INT 106
12323: PUSH
12324: LD_INT 107
12326: PUSH
12327: LD_INT 108
12329: PUSH
12330: LD_INT 109
12332: PUSH
12333: LD_INT 110
12335: PUSH
12336: LD_INT 111
12338: PUSH
12339: LD_INT 112
12341: PUSH
12342: LD_INT 113
12344: PUSH
12345: LD_INT 114
12347: PUSH
12348: LD_INT 116
12350: PUSH
12351: LD_INT 117
12353: PUSH
12354: LD_INT 118
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: ST_TO_ADDR
12380: GO 13619
12382: LD_INT 14
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12614
12390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: LD_INT 2
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: LD_INT 4
12407: PUSH
12408: LD_INT 5
12410: PUSH
12411: LD_INT 6
12413: PUSH
12414: LD_INT 7
12416: PUSH
12417: LD_INT 8
12419: PUSH
12420: LD_INT 9
12422: PUSH
12423: LD_INT 10
12425: PUSH
12426: LD_INT 11
12428: PUSH
12429: LD_INT 12
12431: PUSH
12432: LD_INT 13
12434: PUSH
12435: LD_INT 14
12437: PUSH
12438: LD_INT 15
12440: PUSH
12441: LD_INT 16
12443: PUSH
12444: LD_INT 17
12446: PUSH
12447: LD_INT 18
12449: PUSH
12450: LD_INT 19
12452: PUSH
12453: LD_INT 20
12455: PUSH
12456: LD_INT 21
12458: PUSH
12459: LD_INT 22
12461: PUSH
12462: LD_INT 23
12464: PUSH
12465: LD_INT 24
12467: PUSH
12468: LD_INT 25
12470: PUSH
12471: LD_INT 26
12473: PUSH
12474: LD_INT 27
12476: PUSH
12477: LD_INT 28
12479: PUSH
12480: LD_INT 29
12482: PUSH
12483: LD_INT 30
12485: PUSH
12486: LD_INT 31
12488: PUSH
12489: LD_INT 32
12491: PUSH
12492: LD_INT 33
12494: PUSH
12495: LD_INT 34
12497: PUSH
12498: LD_INT 36
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 101
12540: PUSH
12541: LD_INT 102
12543: PUSH
12544: LD_INT 103
12546: PUSH
12547: LD_INT 104
12549: PUSH
12550: LD_INT 105
12552: PUSH
12553: LD_INT 106
12555: PUSH
12556: LD_INT 107
12558: PUSH
12559: LD_INT 108
12561: PUSH
12562: LD_INT 109
12564: PUSH
12565: LD_INT 110
12567: PUSH
12568: LD_INT 111
12570: PUSH
12571: LD_INT 112
12573: PUSH
12574: LD_INT 113
12576: PUSH
12577: LD_INT 114
12579: PUSH
12580: LD_INT 116
12582: PUSH
12583: LD_INT 117
12585: PUSH
12586: LD_INT 118
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: ST_TO_ADDR
12612: GO 13619
12614: LD_INT 15
12616: DOUBLE
12617: EQUAL
12618: IFTRUE 12622
12620: GO 12846
12622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_INT 1
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: LD_INT 4
12639: PUSH
12640: LD_INT 5
12642: PUSH
12643: LD_INT 6
12645: PUSH
12646: LD_INT 7
12648: PUSH
12649: LD_INT 8
12651: PUSH
12652: LD_INT 9
12654: PUSH
12655: LD_INT 10
12657: PUSH
12658: LD_INT 11
12660: PUSH
12661: LD_INT 12
12663: PUSH
12664: LD_INT 13
12666: PUSH
12667: LD_INT 14
12669: PUSH
12670: LD_INT 15
12672: PUSH
12673: LD_INT 16
12675: PUSH
12676: LD_INT 17
12678: PUSH
12679: LD_INT 18
12681: PUSH
12682: LD_INT 19
12684: PUSH
12685: LD_INT 20
12687: PUSH
12688: LD_INT 21
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_INT 23
12696: PUSH
12697: LD_INT 24
12699: PUSH
12700: LD_INT 25
12702: PUSH
12703: LD_INT 26
12705: PUSH
12706: LD_INT 27
12708: PUSH
12709: LD_INT 28
12711: PUSH
12712: LD_INT 29
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 31
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: LD_INT 33
12726: PUSH
12727: LD_INT 34
12729: PUSH
12730: LD_INT 36
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 101
12772: PUSH
12773: LD_INT 102
12775: PUSH
12776: LD_INT 103
12778: PUSH
12779: LD_INT 104
12781: PUSH
12782: LD_INT 105
12784: PUSH
12785: LD_INT 106
12787: PUSH
12788: LD_INT 107
12790: PUSH
12791: LD_INT 108
12793: PUSH
12794: LD_INT 109
12796: PUSH
12797: LD_INT 110
12799: PUSH
12800: LD_INT 111
12802: PUSH
12803: LD_INT 112
12805: PUSH
12806: LD_INT 113
12808: PUSH
12809: LD_INT 114
12811: PUSH
12812: LD_INT 116
12814: PUSH
12815: LD_INT 117
12817: PUSH
12818: LD_INT 118
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: ST_TO_ADDR
12844: GO 13619
12846: LD_INT 16
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 12990
12854: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: LD_INT 4
12865: PUSH
12866: LD_INT 5
12868: PUSH
12869: LD_INT 7
12871: PUSH
12872: LD_INT 11
12874: PUSH
12875: LD_INT 12
12877: PUSH
12878: LD_INT 15
12880: PUSH
12881: LD_INT 16
12883: PUSH
12884: LD_INT 20
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 23
12895: PUSH
12896: LD_INT 25
12898: PUSH
12899: LD_INT 26
12901: PUSH
12902: LD_INT 30
12904: PUSH
12905: LD_INT 31
12907: PUSH
12908: LD_INT 32
12910: PUSH
12911: LD_INT 33
12913: PUSH
12914: LD_INT 34
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 101
12940: PUSH
12941: LD_INT 102
12943: PUSH
12944: LD_INT 103
12946: PUSH
12947: LD_INT 106
12949: PUSH
12950: LD_INT 108
12952: PUSH
12953: LD_INT 112
12955: PUSH
12956: LD_INT 113
12958: PUSH
12959: LD_INT 114
12961: PUSH
12962: LD_INT 116
12964: PUSH
12965: LD_INT 117
12967: PUSH
12968: LD_INT 118
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: ST_TO_ADDR
12988: GO 13619
12990: LD_INT 17
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13222
12998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12999: LD_ADDR_VAR 0 1
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 4
13015: PUSH
13016: LD_INT 5
13018: PUSH
13019: LD_INT 6
13021: PUSH
13022: LD_INT 7
13024: PUSH
13025: LD_INT 8
13027: PUSH
13028: LD_INT 9
13030: PUSH
13031: LD_INT 10
13033: PUSH
13034: LD_INT 11
13036: PUSH
13037: LD_INT 12
13039: PUSH
13040: LD_INT 13
13042: PUSH
13043: LD_INT 14
13045: PUSH
13046: LD_INT 15
13048: PUSH
13049: LD_INT 16
13051: PUSH
13052: LD_INT 17
13054: PUSH
13055: LD_INT 18
13057: PUSH
13058: LD_INT 19
13060: PUSH
13061: LD_INT 20
13063: PUSH
13064: LD_INT 21
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 23
13072: PUSH
13073: LD_INT 24
13075: PUSH
13076: LD_INT 25
13078: PUSH
13079: LD_INT 26
13081: PUSH
13082: LD_INT 27
13084: PUSH
13085: LD_INT 28
13087: PUSH
13088: LD_INT 29
13090: PUSH
13091: LD_INT 30
13093: PUSH
13094: LD_INT 31
13096: PUSH
13097: LD_INT 32
13099: PUSH
13100: LD_INT 33
13102: PUSH
13103: LD_INT 34
13105: PUSH
13106: LD_INT 36
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 101
13148: PUSH
13149: LD_INT 102
13151: PUSH
13152: LD_INT 103
13154: PUSH
13155: LD_INT 104
13157: PUSH
13158: LD_INT 105
13160: PUSH
13161: LD_INT 106
13163: PUSH
13164: LD_INT 107
13166: PUSH
13167: LD_INT 108
13169: PUSH
13170: LD_INT 109
13172: PUSH
13173: LD_INT 110
13175: PUSH
13176: LD_INT 111
13178: PUSH
13179: LD_INT 112
13181: PUSH
13182: LD_INT 113
13184: PUSH
13185: LD_INT 114
13187: PUSH
13188: LD_INT 116
13190: PUSH
13191: LD_INT 117
13193: PUSH
13194: LD_INT 118
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: ST_TO_ADDR
13220: GO 13619
13222: LD_INT 18
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13378
13230: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: LD_INT 2
13238: PUSH
13239: LD_INT 4
13241: PUSH
13242: LD_INT 5
13244: PUSH
13245: LD_INT 7
13247: PUSH
13248: LD_INT 11
13250: PUSH
13251: LD_INT 12
13253: PUSH
13254: LD_INT 15
13256: PUSH
13257: LD_INT 16
13259: PUSH
13260: LD_INT 20
13262: PUSH
13263: LD_INT 21
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 23
13271: PUSH
13272: LD_INT 25
13274: PUSH
13275: LD_INT 26
13277: PUSH
13278: LD_INT 30
13280: PUSH
13281: LD_INT 31
13283: PUSH
13284: LD_INT 32
13286: PUSH
13287: LD_INT 33
13289: PUSH
13290: LD_INT 34
13292: PUSH
13293: LD_INT 35
13295: PUSH
13296: LD_INT 36
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 101
13324: PUSH
13325: LD_INT 102
13327: PUSH
13328: LD_INT 103
13330: PUSH
13331: LD_INT 106
13333: PUSH
13334: LD_INT 108
13336: PUSH
13337: LD_INT 112
13339: PUSH
13340: LD_INT 113
13342: PUSH
13343: LD_INT 114
13345: PUSH
13346: LD_INT 115
13348: PUSH
13349: LD_INT 116
13351: PUSH
13352: LD_INT 117
13354: PUSH
13355: LD_INT 118
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: ST_TO_ADDR
13376: GO 13619
13378: LD_INT 19
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13618
13386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: LD_INT 5
13406: PUSH
13407: LD_INT 6
13409: PUSH
13410: LD_INT 7
13412: PUSH
13413: LD_INT 8
13415: PUSH
13416: LD_INT 9
13418: PUSH
13419: LD_INT 10
13421: PUSH
13422: LD_INT 11
13424: PUSH
13425: LD_INT 12
13427: PUSH
13428: LD_INT 13
13430: PUSH
13431: LD_INT 14
13433: PUSH
13434: LD_INT 15
13436: PUSH
13437: LD_INT 16
13439: PUSH
13440: LD_INT 17
13442: PUSH
13443: LD_INT 18
13445: PUSH
13446: LD_INT 19
13448: PUSH
13449: LD_INT 20
13451: PUSH
13452: LD_INT 21
13454: PUSH
13455: LD_INT 22
13457: PUSH
13458: LD_INT 23
13460: PUSH
13461: LD_INT 24
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 26
13469: PUSH
13470: LD_INT 27
13472: PUSH
13473: LD_INT 28
13475: PUSH
13476: LD_INT 29
13478: PUSH
13479: LD_INT 30
13481: PUSH
13482: LD_INT 31
13484: PUSH
13485: LD_INT 32
13487: PUSH
13488: LD_INT 33
13490: PUSH
13491: LD_INT 34
13493: PUSH
13494: LD_INT 35
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 101
13540: PUSH
13541: LD_INT 102
13543: PUSH
13544: LD_INT 103
13546: PUSH
13547: LD_INT 104
13549: PUSH
13550: LD_INT 105
13552: PUSH
13553: LD_INT 106
13555: PUSH
13556: LD_INT 107
13558: PUSH
13559: LD_INT 108
13561: PUSH
13562: LD_INT 109
13564: PUSH
13565: LD_INT 110
13567: PUSH
13568: LD_INT 111
13570: PUSH
13571: LD_INT 112
13573: PUSH
13574: LD_INT 113
13576: PUSH
13577: LD_INT 114
13579: PUSH
13580: LD_INT 115
13582: PUSH
13583: LD_INT 116
13585: PUSH
13586: LD_INT 117
13588: PUSH
13589: LD_INT 118
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: ST_TO_ADDR
13616: GO 13619
13618: POP
// end else
13619: GO 13850
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13621: LD_ADDR_VAR 0 1
13625: PUSH
13626: LD_INT 1
13628: PUSH
13629: LD_INT 2
13631: PUSH
13632: LD_INT 3
13634: PUSH
13635: LD_INT 4
13637: PUSH
13638: LD_INT 5
13640: PUSH
13641: LD_INT 6
13643: PUSH
13644: LD_INT 7
13646: PUSH
13647: LD_INT 8
13649: PUSH
13650: LD_INT 9
13652: PUSH
13653: LD_INT 10
13655: PUSH
13656: LD_INT 11
13658: PUSH
13659: LD_INT 12
13661: PUSH
13662: LD_INT 13
13664: PUSH
13665: LD_INT 14
13667: PUSH
13668: LD_INT 15
13670: PUSH
13671: LD_INT 16
13673: PUSH
13674: LD_INT 17
13676: PUSH
13677: LD_INT 18
13679: PUSH
13680: LD_INT 19
13682: PUSH
13683: LD_INT 20
13685: PUSH
13686: LD_INT 21
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_INT 23
13694: PUSH
13695: LD_INT 24
13697: PUSH
13698: LD_INT 25
13700: PUSH
13701: LD_INT 26
13703: PUSH
13704: LD_INT 27
13706: PUSH
13707: LD_INT 28
13709: PUSH
13710: LD_INT 29
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 31
13718: PUSH
13719: LD_INT 32
13721: PUSH
13722: LD_INT 33
13724: PUSH
13725: LD_INT 34
13727: PUSH
13728: LD_INT 35
13730: PUSH
13731: LD_INT 36
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 101
13774: PUSH
13775: LD_INT 102
13777: PUSH
13778: LD_INT 103
13780: PUSH
13781: LD_INT 104
13783: PUSH
13784: LD_INT 105
13786: PUSH
13787: LD_INT 106
13789: PUSH
13790: LD_INT 107
13792: PUSH
13793: LD_INT 108
13795: PUSH
13796: LD_INT 109
13798: PUSH
13799: LD_INT 110
13801: PUSH
13802: LD_INT 111
13804: PUSH
13805: LD_INT 112
13807: PUSH
13808: LD_INT 113
13810: PUSH
13811: LD_INT 114
13813: PUSH
13814: LD_INT 115
13816: PUSH
13817: LD_INT 116
13819: PUSH
13820: LD_INT 117
13822: PUSH
13823: LD_INT 118
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// if result then
13850: LD_VAR 0 1
13854: IFFALSE 14143
// begin normal :=  ;
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_STRING 
13863: ST_TO_ADDR
// hardcore :=  ;
13864: LD_ADDR_VAR 0 4
13868: PUSH
13869: LD_STRING 
13871: ST_TO_ADDR
// for i = 1 to normalCounter do
13872: LD_ADDR_VAR 0 5
13876: PUSH
13877: DOUBLE
13878: LD_INT 1
13880: DEC
13881: ST_TO_ADDR
13882: LD_EXP 72
13886: PUSH
13887: FOR_TO
13888: IFFALSE 13989
// begin tmp := 0 ;
13890: LD_ADDR_VAR 0 2
13894: PUSH
13895: LD_STRING 0
13897: ST_TO_ADDR
// if result [ 1 ] then
13898: LD_VAR 0 1
13902: PUSH
13903: LD_INT 1
13905: ARRAY
13906: IFFALSE 13971
// if result [ 1 ] [ 1 ] = i then
13908: LD_VAR 0 1
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PUSH
13917: LD_INT 1
13919: ARRAY
13920: PUSH
13921: LD_VAR 0 5
13925: EQUAL
13926: IFFALSE 13971
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13928: LD_ADDR_VAR 0 1
13932: PUSH
13933: LD_VAR 0 1
13937: PPUSH
13938: LD_INT 1
13940: PPUSH
13941: LD_VAR 0 1
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: CALL_OW 3
13957: PPUSH
13958: CALL_OW 1
13962: ST_TO_ADDR
// tmp := 1 ;
13963: LD_ADDR_VAR 0 2
13967: PUSH
13968: LD_STRING 1
13970: ST_TO_ADDR
// end ; normal := normal & tmp ;
13971: LD_ADDR_VAR 0 3
13975: PUSH
13976: LD_VAR 0 3
13980: PUSH
13981: LD_VAR 0 2
13985: STR
13986: ST_TO_ADDR
// end ;
13987: GO 13887
13989: POP
13990: POP
// for i = 1 to hardcoreCounter do
13991: LD_ADDR_VAR 0 5
13995: PUSH
13996: DOUBLE
13997: LD_INT 1
13999: DEC
14000: ST_TO_ADDR
14001: LD_EXP 73
14005: PUSH
14006: FOR_TO
14007: IFFALSE 14112
// begin tmp := 0 ;
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: LD_STRING 0
14016: ST_TO_ADDR
// if result [ 2 ] then
14017: LD_VAR 0 1
14021: PUSH
14022: LD_INT 2
14024: ARRAY
14025: IFFALSE 14094
// if result [ 2 ] [ 1 ] = 100 + i then
14027: LD_VAR 0 1
14031: PUSH
14032: LD_INT 2
14034: ARRAY
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PUSH
14040: LD_INT 100
14042: PUSH
14043: LD_VAR 0 5
14047: PLUS
14048: EQUAL
14049: IFFALSE 14094
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14051: LD_ADDR_VAR 0 1
14055: PUSH
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_INT 2
14063: PPUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_INT 2
14071: ARRAY
14072: PPUSH
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 3
14080: PPUSH
14081: CALL_OW 1
14085: ST_TO_ADDR
// tmp := 1 ;
14086: LD_ADDR_VAR 0 2
14090: PUSH
14091: LD_STRING 1
14093: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_VAR 0 4
14103: PUSH
14104: LD_VAR 0 2
14108: STR
14109: ST_TO_ADDR
// end ;
14110: GO 14006
14112: POP
14113: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14114: LD_STRING getStreamItemsFromMission("
14116: PUSH
14117: LD_VAR 0 3
14121: STR
14122: PUSH
14123: LD_STRING ","
14125: STR
14126: PUSH
14127: LD_VAR 0 4
14131: STR
14132: PUSH
14133: LD_STRING ")
14135: STR
14136: PPUSH
14137: CALL_OW 559
// end else
14141: GO 14150
// ToLua ( getStreamItemsFromMission("","") ) ;
14143: LD_STRING getStreamItemsFromMission("","")
14145: PPUSH
14146: CALL_OW 559
// end ;
14150: LD_VAR 0 1
14154: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14155: LD_EXP 71
14159: PUSH
14160: LD_EXP 76
14164: AND
14165: IFFALSE 14289
14167: GO 14169
14169: DISABLE
14170: LD_INT 0
14172: PPUSH
14173: PPUSH
// begin enable ;
14174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14175: LD_ADDR_VAR 0 2
14179: PUSH
14180: LD_INT 22
14182: PUSH
14183: LD_OWVAR 2
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 2
14194: PUSH
14195: LD_INT 34
14197: PUSH
14198: LD_INT 7
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 34
14207: PUSH
14208: LD_INT 45
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 34
14217: PUSH
14218: LD_INT 28
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 34
14227: PUSH
14228: LD_INT 47
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PPUSH
14246: CALL_OW 69
14250: ST_TO_ADDR
// if not tmp then
14251: LD_VAR 0 2
14255: NOT
14256: IFFALSE 14260
// exit ;
14258: GO 14289
// for i in tmp do
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: LD_VAR 0 2
14269: PUSH
14270: FOR_IN
14271: IFFALSE 14287
// begin SetLives ( i , 0 ) ;
14273: LD_VAR 0 1
14277: PPUSH
14278: LD_INT 0
14280: PPUSH
14281: CALL_OW 234
// end ;
14285: GO 14270
14287: POP
14288: POP
// end ;
14289: PPOPN 2
14291: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14292: LD_EXP 71
14296: PUSH
14297: LD_EXP 77
14301: AND
14302: IFFALSE 14386
14304: GO 14306
14306: DISABLE
14307: LD_INT 0
14309: PPUSH
14310: PPUSH
// begin enable ;
14311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14312: LD_ADDR_VAR 0 2
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_OWVAR 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 32
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 69
14347: ST_TO_ADDR
// if not tmp then
14348: LD_VAR 0 2
14352: NOT
14353: IFFALSE 14357
// exit ;
14355: GO 14386
// for i in tmp do
14357: LD_ADDR_VAR 0 1
14361: PUSH
14362: LD_VAR 0 2
14366: PUSH
14367: FOR_IN
14368: IFFALSE 14384
// begin SetLives ( i , 0 ) ;
14370: LD_VAR 0 1
14374: PPUSH
14375: LD_INT 0
14377: PPUSH
14378: CALL_OW 234
// end ;
14382: GO 14367
14384: POP
14385: POP
// end ;
14386: PPOPN 2
14388: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14389: LD_EXP 71
14393: PUSH
14394: LD_EXP 74
14398: AND
14399: IFFALSE 14492
14401: GO 14403
14403: DISABLE
14404: LD_INT 0
14406: PPUSH
// begin enable ;
14407: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14408: LD_ADDR_VAR 0 1
14412: PUSH
14413: LD_INT 22
14415: PUSH
14416: LD_OWVAR 2
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 25
14430: PUSH
14431: LD_INT 5
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 25
14440: PUSH
14441: LD_INT 9
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 25
14450: PUSH
14451: LD_INT 8
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: PUSH
14473: FOR_IN
14474: IFFALSE 14490
// begin SetClass ( i , 1 ) ;
14476: LD_VAR 0 1
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 336
// end ;
14488: GO 14473
14490: POP
14491: POP
// end ;
14492: PPOPN 1
14494: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14495: LD_EXP 71
14499: PUSH
14500: LD_EXP 75
14504: AND
14505: PUSH
14506: LD_OWVAR 65
14510: PUSH
14511: LD_INT 7
14513: LESS
14514: AND
14515: IFFALSE 14529
14517: GO 14519
14519: DISABLE
// begin enable ;
14520: ENABLE
// game_speed := 7 ;
14521: LD_ADDR_OWVAR 65
14525: PUSH
14526: LD_INT 7
14528: ST_TO_ADDR
// end ;
14529: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14530: LD_EXP 71
14534: PUSH
14535: LD_EXP 78
14539: AND
14540: IFFALSE 14742
14542: GO 14544
14544: DISABLE
14545: LD_INT 0
14547: PPUSH
14548: PPUSH
14549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14550: LD_ADDR_VAR 0 3
14554: PUSH
14555: LD_INT 81
14557: PUSH
14558: LD_OWVAR 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PPUSH
14581: CALL_OW 69
14585: ST_TO_ADDR
// if not tmp then
14586: LD_VAR 0 3
14590: NOT
14591: IFFALSE 14595
// exit ;
14593: GO 14742
// if tmp > 5 then
14595: LD_VAR 0 3
14599: PUSH
14600: LD_INT 5
14602: GREATER
14603: IFFALSE 14615
// k := 5 else
14605: LD_ADDR_VAR 0 2
14609: PUSH
14610: LD_INT 5
14612: ST_TO_ADDR
14613: GO 14625
// k := tmp ;
14615: LD_ADDR_VAR 0 2
14619: PUSH
14620: LD_VAR 0 3
14624: ST_TO_ADDR
// for i := 1 to k do
14625: LD_ADDR_VAR 0 1
14629: PUSH
14630: DOUBLE
14631: LD_INT 1
14633: DEC
14634: ST_TO_ADDR
14635: LD_VAR 0 2
14639: PUSH
14640: FOR_TO
14641: IFFALSE 14740
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14643: LD_VAR 0 3
14647: PUSH
14648: LD_VAR 0 1
14652: ARRAY
14653: PPUSH
14654: LD_VAR 0 1
14658: PUSH
14659: LD_INT 4
14661: MOD
14662: PUSH
14663: LD_INT 1
14665: PLUS
14666: PPUSH
14667: CALL_OW 259
14671: PUSH
14672: LD_INT 10
14674: LESS
14675: IFFALSE 14738
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14677: LD_VAR 0 3
14681: PUSH
14682: LD_VAR 0 1
14686: ARRAY
14687: PPUSH
14688: LD_VAR 0 1
14692: PUSH
14693: LD_INT 4
14695: MOD
14696: PUSH
14697: LD_INT 1
14699: PLUS
14700: PPUSH
14701: LD_VAR 0 3
14705: PUSH
14706: LD_VAR 0 1
14710: ARRAY
14711: PPUSH
14712: LD_VAR 0 1
14716: PUSH
14717: LD_INT 4
14719: MOD
14720: PUSH
14721: LD_INT 1
14723: PLUS
14724: PPUSH
14725: CALL_OW 259
14729: PUSH
14730: LD_INT 1
14732: PLUS
14733: PPUSH
14734: CALL_OW 237
14738: GO 14640
14740: POP
14741: POP
// end ;
14742: PPOPN 3
14744: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14745: LD_EXP 71
14749: PUSH
14750: LD_EXP 79
14754: AND
14755: IFFALSE 14775
14757: GO 14759
14759: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14760: LD_INT 4
14762: PPUSH
14763: LD_OWVAR 2
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: CALL_OW 324
14775: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14776: LD_EXP 71
14780: PUSH
14781: LD_EXP 108
14785: AND
14786: IFFALSE 14806
14788: GO 14790
14790: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14791: LD_INT 19
14793: PPUSH
14794: LD_OWVAR 2
14798: PPUSH
14799: LD_INT 0
14801: PPUSH
14802: CALL_OW 324
14806: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14807: LD_EXP 71
14811: PUSH
14812: LD_EXP 80
14816: AND
14817: IFFALSE 14919
14819: GO 14821
14821: DISABLE
14822: LD_INT 0
14824: PPUSH
14825: PPUSH
// begin enable ;
14826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14827: LD_ADDR_VAR 0 2
14831: PUSH
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 34
14849: PUSH
14850: LD_INT 11
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 34
14859: PUSH
14860: LD_INT 30
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PPUSH
14876: CALL_OW 69
14880: ST_TO_ADDR
// if not tmp then
14881: LD_VAR 0 2
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 14919
// for i in tmp do
14890: LD_ADDR_VAR 0 1
14894: PUSH
14895: LD_VAR 0 2
14899: PUSH
14900: FOR_IN
14901: IFFALSE 14917
// begin SetLives ( i , 0 ) ;
14903: LD_VAR 0 1
14907: PPUSH
14908: LD_INT 0
14910: PPUSH
14911: CALL_OW 234
// end ;
14915: GO 14900
14917: POP
14918: POP
// end ;
14919: PPOPN 2
14921: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14922: LD_EXP 71
14926: PUSH
14927: LD_EXP 81
14931: AND
14932: IFFALSE 14952
14934: GO 14936
14936: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14937: LD_INT 32
14939: PPUSH
14940: LD_OWVAR 2
14944: PPUSH
14945: LD_INT 0
14947: PPUSH
14948: CALL_OW 324
14952: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14953: LD_EXP 71
14957: PUSH
14958: LD_EXP 82
14962: AND
14963: IFFALSE 15144
14965: GO 14967
14967: DISABLE
14968: LD_INT 0
14970: PPUSH
14971: PPUSH
14972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14973: LD_ADDR_VAR 0 2
14977: PUSH
14978: LD_INT 22
14980: PUSH
14981: LD_OWVAR 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 33
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: ST_TO_ADDR
// if not tmp then
15009: LD_VAR 0 2
15013: NOT
15014: IFFALSE 15018
// exit ;
15016: GO 15144
// side := 0 ;
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
// for i := 1 to 8 do
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: DOUBLE
15032: LD_INT 1
15034: DEC
15035: ST_TO_ADDR
15036: LD_INT 8
15038: PUSH
15039: FOR_TO
15040: IFFALSE 15088
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15042: LD_OWVAR 2
15046: PUSH
15047: LD_VAR 0 1
15051: NONEQUAL
15052: PUSH
15053: LD_OWVAR 2
15057: PPUSH
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 81
15067: PUSH
15068: LD_INT 2
15070: EQUAL
15071: AND
15072: IFFALSE 15086
// begin side := i ;
15074: LD_ADDR_VAR 0 3
15078: PUSH
15079: LD_VAR 0 1
15083: ST_TO_ADDR
// break ;
15084: GO 15088
// end ;
15086: GO 15039
15088: POP
15089: POP
// if not side then
15090: LD_VAR 0 3
15094: NOT
15095: IFFALSE 15099
// exit ;
15097: GO 15144
// for i := 1 to tmp do
15099: LD_ADDR_VAR 0 1
15103: PUSH
15104: DOUBLE
15105: LD_INT 1
15107: DEC
15108: ST_TO_ADDR
15109: LD_VAR 0 2
15113: PUSH
15114: FOR_TO
15115: IFFALSE 15142
// if Prob ( 60 ) then
15117: LD_INT 60
15119: PPUSH
15120: CALL_OW 13
15124: IFFALSE 15140
// SetSide ( i , side ) ;
15126: LD_VAR 0 1
15130: PPUSH
15131: LD_VAR 0 3
15135: PPUSH
15136: CALL_OW 235
15140: GO 15114
15142: POP
15143: POP
// end ;
15144: PPOPN 3
15146: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15147: LD_EXP 71
15151: PUSH
15152: LD_EXP 84
15156: AND
15157: IFFALSE 15276
15159: GO 15161
15161: DISABLE
15162: LD_INT 0
15164: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15165: LD_ADDR_VAR 0 1
15169: PUSH
15170: LD_INT 22
15172: PUSH
15173: LD_OWVAR 2
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 21
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 3
15194: PUSH
15195: LD_INT 23
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 69
15218: PUSH
15219: FOR_IN
15220: IFFALSE 15274
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 257
15231: PUSH
15232: LD_INT 1
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: LD_INT 3
15240: PUSH
15241: LD_INT 4
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: IN
15250: IFFALSE 15272
// SetClass ( un , rand ( 1 , 4 ) ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: LD_INT 4
15262: PPUSH
15263: CALL_OW 12
15267: PPUSH
15268: CALL_OW 336
15272: GO 15219
15274: POP
15275: POP
// end ;
15276: PPOPN 1
15278: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15279: LD_EXP 71
15283: PUSH
15284: LD_EXP 83
15288: AND
15289: IFFALSE 15368
15291: GO 15293
15293: DISABLE
15294: LD_INT 0
15296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_OWVAR 2
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 3
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: ST_TO_ADDR
// if not tmp then
15333: LD_VAR 0 1
15337: NOT
15338: IFFALSE 15342
// exit ;
15340: GO 15368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15342: LD_VAR 0 1
15346: PUSH
15347: LD_INT 1
15349: PPUSH
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 12
15359: ARRAY
15360: PPUSH
15361: LD_INT 100
15363: PPUSH
15364: CALL_OW 234
// end ;
15368: PPOPN 1
15370: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15371: LD_EXP 71
15375: PUSH
15376: LD_EXP 85
15380: AND
15381: IFFALSE 15479
15383: GO 15385
15385: DISABLE
15386: LD_INT 0
15388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: LD_INT 22
15396: PUSH
15397: LD_OWVAR 2
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: LD_INT 21
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 69
15424: ST_TO_ADDR
// if not tmp then
15425: LD_VAR 0 1
15429: NOT
15430: IFFALSE 15434
// exit ;
15432: GO 15479
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15434: LD_VAR 0 1
15438: PUSH
15439: LD_INT 1
15441: PPUSH
15442: LD_VAR 0 1
15446: PPUSH
15447: CALL_OW 12
15451: ARRAY
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: LD_INT 4
15458: PPUSH
15459: CALL_OW 12
15463: PPUSH
15464: LD_INT 3000
15466: PPUSH
15467: LD_INT 9000
15469: PPUSH
15470: CALL_OW 12
15474: PPUSH
15475: CALL_OW 492
// end ;
15479: PPOPN 1
15481: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15482: LD_EXP 71
15486: PUSH
15487: LD_EXP 86
15491: AND
15492: IFFALSE 15512
15494: GO 15496
15496: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15497: LD_INT 1
15499: PPUSH
15500: LD_OWVAR 2
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: CALL_OW 324
15512: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15513: LD_EXP 71
15517: PUSH
15518: LD_EXP 87
15522: AND
15523: IFFALSE 15606
15525: GO 15527
15527: DISABLE
15528: LD_INT 0
15530: PPUSH
15531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_OWVAR 2
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 21
15551: PUSH
15552: LD_INT 3
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PPUSH
15563: CALL_OW 69
15567: ST_TO_ADDR
// if not tmp then
15568: LD_VAR 0 2
15572: NOT
15573: IFFALSE 15577
// exit ;
15575: GO 15606
// for i in tmp do
15577: LD_ADDR_VAR 0 1
15581: PUSH
15582: LD_VAR 0 2
15586: PUSH
15587: FOR_IN
15588: IFFALSE 15604
// SetBLevel ( i , 10 ) ;
15590: LD_VAR 0 1
15594: PPUSH
15595: LD_INT 10
15597: PPUSH
15598: CALL_OW 241
15602: GO 15587
15604: POP
15605: POP
// end ;
15606: PPOPN 2
15608: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15609: LD_EXP 71
15613: PUSH
15614: LD_EXP 88
15618: AND
15619: IFFALSE 15730
15621: GO 15623
15623: DISABLE
15624: LD_INT 0
15626: PPUSH
15627: PPUSH
15628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15629: LD_ADDR_VAR 0 3
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_OWVAR 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 25
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 69
15664: ST_TO_ADDR
// if not tmp then
15665: LD_VAR 0 3
15669: NOT
15670: IFFALSE 15674
// exit ;
15672: GO 15730
// un := tmp [ rand ( 1 , tmp ) ] ;
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_VAR 0 3
15683: PUSH
15684: LD_INT 1
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: ST_TO_ADDR
// if Crawls ( un ) then
15698: LD_VAR 0 2
15702: PPUSH
15703: CALL_OW 318
15707: IFFALSE 15718
// ComWalk ( un ) ;
15709: LD_VAR 0 2
15713: PPUSH
15714: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15718: LD_VAR 0 2
15722: PPUSH
15723: LD_INT 5
15725: PPUSH
15726: CALL_OW 336
// end ;
15730: PPOPN 3
15732: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15733: LD_EXP 71
15737: PUSH
15738: LD_EXP 89
15742: AND
15743: PUSH
15744: LD_OWVAR 67
15748: PUSH
15749: LD_INT 4
15751: LESS
15752: AND
15753: IFFALSE 15772
15755: GO 15757
15757: DISABLE
// begin Difficulty := Difficulty + 1 ;
15758: LD_ADDR_OWVAR 67
15762: PUSH
15763: LD_OWVAR 67
15767: PUSH
15768: LD_INT 1
15770: PLUS
15771: ST_TO_ADDR
// end ;
15772: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15773: LD_EXP 71
15777: PUSH
15778: LD_EXP 90
15782: AND
15783: IFFALSE 15886
15785: GO 15787
15787: DISABLE
15788: LD_INT 0
15790: PPUSH
// begin for i := 1 to 5 do
15791: LD_ADDR_VAR 0 1
15795: PUSH
15796: DOUBLE
15797: LD_INT 1
15799: DEC
15800: ST_TO_ADDR
15801: LD_INT 5
15803: PUSH
15804: FOR_TO
15805: IFFALSE 15884
// begin uc_nation := nation_nature ;
15807: LD_ADDR_OWVAR 21
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15823: LD_ADDR_OWVAR 29
15827: PUSH
15828: LD_INT 12
15830: PUSH
15831: LD_INT 12
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: ST_TO_ADDR
// hc_agressivity := 20 ;
15838: LD_ADDR_OWVAR 35
15842: PUSH
15843: LD_INT 20
15845: ST_TO_ADDR
// hc_class := class_tiger ;
15846: LD_ADDR_OWVAR 28
15850: PUSH
15851: LD_INT 14
15853: ST_TO_ADDR
// hc_gallery :=  ;
15854: LD_ADDR_OWVAR 33
15858: PUSH
15859: LD_STRING 
15861: ST_TO_ADDR
// hc_name :=  ;
15862: LD_ADDR_OWVAR 26
15866: PUSH
15867: LD_STRING 
15869: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15870: CALL_OW 44
15874: PPUSH
15875: LD_INT 0
15877: PPUSH
15878: CALL_OW 51
// end ;
15882: GO 15804
15884: POP
15885: POP
// end ;
15886: PPOPN 1
15888: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15889: LD_EXP 71
15893: PUSH
15894: LD_EXP 91
15898: AND
15899: IFFALSE 15908
15901: GO 15903
15903: DISABLE
// StreamSibBomb ;
15904: CALL 15909 0 0
15908: END
// export function StreamSibBomb ; var i , x , y ; begin
15909: LD_INT 0
15911: PPUSH
15912: PPUSH
15913: PPUSH
15914: PPUSH
// result := false ;
15915: LD_ADDR_VAR 0 1
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// for i := 1 to 16 do
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: DOUBLE
15929: LD_INT 1
15931: DEC
15932: ST_TO_ADDR
15933: LD_INT 16
15935: PUSH
15936: FOR_TO
15937: IFFALSE 16136
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: LD_INT 10
15946: PUSH
15947: LD_INT 20
15949: PUSH
15950: LD_INT 30
15952: PUSH
15953: LD_INT 40
15955: PUSH
15956: LD_INT 50
15958: PUSH
15959: LD_INT 60
15961: PUSH
15962: LD_INT 70
15964: PUSH
15965: LD_INT 80
15967: PUSH
15968: LD_INT 90
15970: PUSH
15971: LD_INT 100
15973: PUSH
15974: LD_INT 110
15976: PUSH
15977: LD_INT 120
15979: PUSH
15980: LD_INT 130
15982: PUSH
15983: LD_INT 140
15985: PUSH
15986: LD_INT 150
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 1
16008: PPUSH
16009: LD_INT 15
16011: PPUSH
16012: CALL_OW 12
16016: ARRAY
16017: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_INT 10
16025: PUSH
16026: LD_INT 20
16028: PUSH
16029: LD_INT 30
16031: PUSH
16032: LD_INT 40
16034: PUSH
16035: LD_INT 50
16037: PUSH
16038: LD_INT 60
16040: PUSH
16041: LD_INT 70
16043: PUSH
16044: LD_INT 80
16046: PUSH
16047: LD_INT 90
16049: PUSH
16050: LD_INT 100
16052: PUSH
16053: LD_INT 110
16055: PUSH
16056: LD_INT 120
16058: PUSH
16059: LD_INT 130
16061: PUSH
16062: LD_INT 140
16064: PUSH
16065: LD_INT 150
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 1
16087: PPUSH
16088: LD_INT 15
16090: PPUSH
16091: CALL_OW 12
16095: ARRAY
16096: ST_TO_ADDR
// if ValidHex ( x , y ) then
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_VAR 0 4
16106: PPUSH
16107: CALL_OW 488
16111: IFFALSE 16134
// begin result := [ x , y ] ;
16113: LD_ADDR_VAR 0 1
16117: PUSH
16118: LD_VAR 0 3
16122: PUSH
16123: LD_VAR 0 4
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: ST_TO_ADDR
// break ;
16132: GO 16136
// end ; end ;
16134: GO 15936
16136: POP
16137: POP
// if result then
16138: LD_VAR 0 1
16142: IFFALSE 16202
// begin ToLua ( playSibBomb() ) ;
16144: LD_STRING playSibBomb()
16146: PPUSH
16147: CALL_OW 559
// wait ( 0 0$14 ) ;
16151: LD_INT 490
16153: PPUSH
16154: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: PPUSH
16167: LD_VAR 0 1
16171: PUSH
16172: LD_INT 2
16174: ARRAY
16175: PPUSH
16176: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16180: LD_VAR 0 1
16184: PUSH
16185: LD_INT 1
16187: ARRAY
16188: PPUSH
16189: LD_VAR 0 1
16193: PUSH
16194: LD_INT 2
16196: ARRAY
16197: PPUSH
16198: CALL_OW 429
// end ; end ;
16202: LD_VAR 0 1
16206: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16207: LD_EXP 71
16211: PUSH
16212: LD_EXP 93
16216: AND
16217: IFFALSE 16229
16219: GO 16221
16221: DISABLE
// YouLost (  ) ;
16222: LD_STRING 
16224: PPUSH
16225: CALL_OW 104
16229: END
// every 0 0$1 trigger StreamModeActive and sFog do
16230: LD_EXP 71
16234: PUSH
16235: LD_EXP 92
16239: AND
16240: IFFALSE 16254
16242: GO 16244
16244: DISABLE
// FogOff ( your_side ) ;
16245: LD_OWVAR 2
16249: PPUSH
16250: CALL_OW 344
16254: END
// every 0 0$1 trigger StreamModeActive and sSun do
16255: LD_EXP 71
16259: PUSH
16260: LD_EXP 94
16264: AND
16265: IFFALSE 16293
16267: GO 16269
16269: DISABLE
// begin solar_recharge_percent := 0 ;
16270: LD_ADDR_OWVAR 79
16274: PUSH
16275: LD_INT 0
16277: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16278: LD_INT 10500
16280: PPUSH
16281: CALL_OW 67
// solar_recharge_percent := 100 ;
16285: LD_ADDR_OWVAR 79
16289: PUSH
16290: LD_INT 100
16292: ST_TO_ADDR
// end ;
16293: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16294: LD_EXP 71
16298: PUSH
16299: LD_EXP 95
16303: AND
16304: IFFALSE 16543
16306: GO 16308
16308: DISABLE
16309: LD_INT 0
16311: PPUSH
16312: PPUSH
16313: PPUSH
// begin tmp := [ ] ;
16314: LD_ADDR_VAR 0 3
16318: PUSH
16319: EMPTY
16320: ST_TO_ADDR
// for i := 1 to 6 do
16321: LD_ADDR_VAR 0 1
16325: PUSH
16326: DOUBLE
16327: LD_INT 1
16329: DEC
16330: ST_TO_ADDR
16331: LD_INT 6
16333: PUSH
16334: FOR_TO
16335: IFFALSE 16440
// begin uc_nation := nation_nature ;
16337: LD_ADDR_OWVAR 21
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// uc_side := 0 ;
16345: LD_ADDR_OWVAR 20
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16353: LD_ADDR_OWVAR 29
16357: PUSH
16358: LD_INT 12
16360: PUSH
16361: LD_INT 12
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: ST_TO_ADDR
// hc_agressivity := 20 ;
16368: LD_ADDR_OWVAR 35
16372: PUSH
16373: LD_INT 20
16375: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16376: LD_ADDR_OWVAR 28
16380: PUSH
16381: LD_INT 17
16383: ST_TO_ADDR
// hc_gallery :=  ;
16384: LD_ADDR_OWVAR 33
16388: PUSH
16389: LD_STRING 
16391: ST_TO_ADDR
// hc_name :=  ;
16392: LD_ADDR_OWVAR 26
16396: PUSH
16397: LD_STRING 
16399: ST_TO_ADDR
// un := CreateHuman ;
16400: LD_ADDR_VAR 0 2
16404: PUSH
16405: CALL_OW 44
16409: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16410: LD_VAR 0 2
16414: PPUSH
16415: LD_INT 1
16417: PPUSH
16418: CALL_OW 51
// tmp := tmp ^ un ;
16422: LD_ADDR_VAR 0 3
16426: PUSH
16427: LD_VAR 0 3
16431: PUSH
16432: LD_VAR 0 2
16436: ADD
16437: ST_TO_ADDR
// end ;
16438: GO 16334
16440: POP
16441: POP
// repeat wait ( 0 0$1 ) ;
16442: LD_INT 35
16444: PPUSH
16445: CALL_OW 67
// for un in tmp do
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_VAR 0 3
16458: PUSH
16459: FOR_IN
16460: IFFALSE 16534
// begin if IsDead ( un ) then
16462: LD_VAR 0 2
16466: PPUSH
16467: CALL_OW 301
16471: IFFALSE 16491
// begin tmp := tmp diff un ;
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_VAR 0 3
16482: PUSH
16483: LD_VAR 0 2
16487: DIFF
16488: ST_TO_ADDR
// continue ;
16489: GO 16459
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 3
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: LD_INT 0
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: PPUSH
16518: LD_VAR 0 2
16522: PPUSH
16523: CALL_OW 74
16527: PPUSH
16528: CALL_OW 115
// end ;
16532: GO 16459
16534: POP
16535: POP
// until not tmp ;
16536: LD_VAR 0 3
16540: NOT
16541: IFFALSE 16442
// end ;
16543: PPOPN 3
16545: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16546: LD_EXP 71
16550: PUSH
16551: LD_EXP 96
16555: AND
16556: IFFALSE 16610
16558: GO 16560
16560: DISABLE
// begin ToLua ( displayTroll(); ) ;
16561: LD_STRING displayTroll();
16563: PPUSH
16564: CALL_OW 559
// wait ( 3 3$00 ) ;
16568: LD_INT 6300
16570: PPUSH
16571: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16575: LD_STRING hideTroll();
16577: PPUSH
16578: CALL_OW 559
// wait ( 1 1$00 ) ;
16582: LD_INT 2100
16584: PPUSH
16585: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16589: LD_STRING displayTroll();
16591: PPUSH
16592: CALL_OW 559
// wait ( 1 1$00 ) ;
16596: LD_INT 2100
16598: PPUSH
16599: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16603: LD_STRING hideTroll();
16605: PPUSH
16606: CALL_OW 559
// end ;
16610: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16611: LD_EXP 71
16615: PUSH
16616: LD_EXP 97
16620: AND
16621: IFFALSE 16684
16623: GO 16625
16625: DISABLE
16626: LD_INT 0
16628: PPUSH
// begin p := 0 ;
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// repeat game_speed := 1 ;
16637: LD_ADDR_OWVAR 65
16641: PUSH
16642: LD_INT 1
16644: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16645: LD_INT 35
16647: PPUSH
16648: CALL_OW 67
// p := p + 1 ;
16652: LD_ADDR_VAR 0 1
16656: PUSH
16657: LD_VAR 0 1
16661: PUSH
16662: LD_INT 1
16664: PLUS
16665: ST_TO_ADDR
// until p >= 60 ;
16666: LD_VAR 0 1
16670: PUSH
16671: LD_INT 60
16673: GREATEREQUAL
16674: IFFALSE 16637
// game_speed := 4 ;
16676: LD_ADDR_OWVAR 65
16680: PUSH
16681: LD_INT 4
16683: ST_TO_ADDR
// end ;
16684: PPOPN 1
16686: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16687: LD_EXP 71
16691: PUSH
16692: LD_EXP 98
16696: AND
16697: IFFALSE 16843
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16706: LD_ADDR_VAR 0 1
16710: PUSH
16711: LD_INT 22
16713: PUSH
16714: LD_OWVAR 2
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 2
16725: PUSH
16726: LD_INT 30
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 30
16738: PUSH
16739: LD_INT 1
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: ST_TO_ADDR
// if not depot then
16760: LD_VAR 0 1
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 16843
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16769: LD_ADDR_VAR 0 2
16773: PUSH
16774: LD_VAR 0 1
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_VAR 0 1
16786: PPUSH
16787: CALL_OW 12
16791: ARRAY
16792: PPUSH
16793: CALL_OW 274
16797: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16798: LD_VAR 0 2
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 0
16808: PPUSH
16809: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16813: LD_VAR 0 2
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: LD_INT 0
16823: PPUSH
16824: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16828: LD_VAR 0 2
16832: PPUSH
16833: LD_INT 3
16835: PPUSH
16836: LD_INT 0
16838: PPUSH
16839: CALL_OW 277
// end ;
16843: PPOPN 2
16845: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16846: LD_EXP 71
16850: PUSH
16851: LD_EXP 99
16855: AND
16856: IFFALSE 16953
16858: GO 16860
16860: DISABLE
16861: LD_INT 0
16863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: LD_INT 22
16871: PUSH
16872: LD_OWVAR 2
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 23
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 69
16917: ST_TO_ADDR
// if not tmp then
16918: LD_VAR 0 1
16922: NOT
16923: IFFALSE 16927
// exit ;
16925: GO 16953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16927: LD_VAR 0 1
16931: PUSH
16932: LD_INT 1
16934: PPUSH
16935: LD_VAR 0 1
16939: PPUSH
16940: CALL_OW 12
16944: ARRAY
16945: PPUSH
16946: LD_INT 200
16948: PPUSH
16949: CALL_OW 234
// end ;
16953: PPOPN 1
16955: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16956: LD_EXP 71
16960: PUSH
16961: LD_EXP 100
16965: AND
16966: IFFALSE 17045
16968: GO 16970
16970: DISABLE
16971: LD_INT 0
16973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16974: LD_ADDR_VAR 0 1
16978: PUSH
16979: LD_INT 22
16981: PUSH
16982: LD_OWVAR 2
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 2
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PPUSH
17005: CALL_OW 69
17009: ST_TO_ADDR
// if not tmp then
17010: LD_VAR 0 1
17014: NOT
17015: IFFALSE 17019
// exit ;
17017: GO 17045
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17019: LD_VAR 0 1
17023: PUSH
17024: LD_INT 1
17026: PPUSH
17027: LD_VAR 0 1
17031: PPUSH
17032: CALL_OW 12
17036: ARRAY
17037: PPUSH
17038: LD_INT 60
17040: PPUSH
17041: CALL_OW 234
// end ;
17045: PPOPN 1
17047: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17048: LD_EXP 71
17052: PUSH
17053: LD_EXP 101
17057: AND
17058: IFFALSE 17157
17060: GO 17062
17062: DISABLE
17063: LD_INT 0
17065: PPUSH
17066: PPUSH
// begin enable ;
17067: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17068: LD_ADDR_VAR 0 1
17072: PUSH
17073: LD_INT 22
17075: PUSH
17076: LD_OWVAR 2
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 61
17087: PUSH
17088: EMPTY
17089: LIST
17090: PUSH
17091: LD_INT 33
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: PPUSH
17106: CALL_OW 69
17110: ST_TO_ADDR
// if not tmp then
17111: LD_VAR 0 1
17115: NOT
17116: IFFALSE 17120
// exit ;
17118: GO 17157
// for i in tmp do
17120: LD_ADDR_VAR 0 2
17124: PUSH
17125: LD_VAR 0 1
17129: PUSH
17130: FOR_IN
17131: IFFALSE 17155
// if IsControledBy ( i ) then
17133: LD_VAR 0 2
17137: PPUSH
17138: CALL_OW 312
17142: IFFALSE 17153
// ComUnlink ( i ) ;
17144: LD_VAR 0 2
17148: PPUSH
17149: CALL_OW 136
17153: GO 17130
17155: POP
17156: POP
// end ;
17157: PPOPN 2
17159: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17160: LD_EXP 71
17164: PUSH
17165: LD_EXP 102
17169: AND
17170: IFFALSE 17310
17172: GO 17174
17174: DISABLE
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
// begin ToLua ( displayPowell(); ) ;
17179: LD_STRING displayPowell();
17181: PPUSH
17182: CALL_OW 559
// uc_side := 0 ;
17186: LD_ADDR_OWVAR 20
17190: PUSH
17191: LD_INT 0
17193: ST_TO_ADDR
// uc_nation := 2 ;
17194: LD_ADDR_OWVAR 21
17198: PUSH
17199: LD_INT 2
17201: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17202: LD_ADDR_OWVAR 37
17206: PUSH
17207: LD_INT 14
17209: ST_TO_ADDR
// vc_engine := engine_siberite ;
17210: LD_ADDR_OWVAR 39
17214: PUSH
17215: LD_INT 3
17217: ST_TO_ADDR
// vc_control := control_apeman ;
17218: LD_ADDR_OWVAR 38
17222: PUSH
17223: LD_INT 5
17225: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17226: LD_ADDR_OWVAR 40
17230: PUSH
17231: LD_INT 29
17233: ST_TO_ADDR
// un := CreateVehicle ;
17234: LD_ADDR_VAR 0 2
17238: PUSH
17239: CALL_OW 45
17243: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17244: LD_VAR 0 2
17248: PPUSH
17249: LD_INT 1
17251: PPUSH
17252: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17256: LD_INT 35
17258: PPUSH
17259: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17263: LD_VAR 0 2
17267: PPUSH
17268: LD_INT 22
17270: PUSH
17271: LD_OWVAR 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PPUSH
17280: CALL_OW 69
17284: PPUSH
17285: LD_VAR 0 2
17289: PPUSH
17290: CALL_OW 74
17294: PPUSH
17295: CALL_OW 115
// until IsDead ( un ) ;
17299: LD_VAR 0 2
17303: PPUSH
17304: CALL_OW 301
17308: IFFALSE 17256
// end ;
17310: PPOPN 2
17312: END
// every 0 0$1 trigger StreamModeActive and sStu do
17313: LD_EXP 71
17317: PUSH
17318: LD_EXP 110
17322: AND
17323: IFFALSE 17339
17325: GO 17327
17327: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17328: LD_STRING displayStucuk();
17330: PPUSH
17331: CALL_OW 559
// ResetFog ;
17335: CALL_OW 335
// end ;
17339: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17340: LD_EXP 71
17344: PUSH
17345: LD_EXP 103
17349: AND
17350: IFFALSE 17491
17352: GO 17354
17354: DISABLE
17355: LD_INT 0
17357: PPUSH
17358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17359: LD_ADDR_VAR 0 2
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_OWVAR 2
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 21
17378: PUSH
17379: LD_INT 1
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 69
17394: ST_TO_ADDR
// if not tmp then
17395: LD_VAR 0 2
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17491
// un := tmp [ rand ( 1 , tmp ) ] ;
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_VAR 0 2
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17428: LD_VAR 0 1
17432: PPUSH
17433: LD_INT 0
17435: PPUSH
17436: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17440: LD_VAR 0 1
17444: PPUSH
17445: LD_OWVAR 3
17449: PUSH
17450: LD_VAR 0 1
17454: DIFF
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 74
17465: PPUSH
17466: CALL_OW 115
// wait ( 0 0$20 ) ;
17470: LD_INT 700
17472: PPUSH
17473: CALL_OW 67
// SetSide ( un , your_side ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_OWVAR 2
17486: PPUSH
17487: CALL_OW 235
// end ;
17491: PPOPN 2
17493: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17494: LD_EXP 71
17498: PUSH
17499: LD_EXP 104
17503: AND
17504: IFFALSE 17610
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17512: LD_ADDR_VAR 0 1
17516: PUSH
17517: LD_INT 22
17519: PUSH
17520: LD_OWVAR 2
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: LD_INT 30
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 30
17544: PUSH
17545: LD_INT 1
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 69
17565: ST_TO_ADDR
// if not depot then
17566: LD_VAR 0 1
17570: NOT
17571: IFFALSE 17575
// exit ;
17573: GO 17610
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17575: LD_VAR 0 1
17579: PUSH
17580: LD_INT 1
17582: ARRAY
17583: PPUSH
17584: CALL_OW 250
17588: PPUSH
17589: LD_VAR 0 1
17593: PUSH
17594: LD_INT 1
17596: ARRAY
17597: PPUSH
17598: CALL_OW 251
17602: PPUSH
17603: LD_INT 70
17605: PPUSH
17606: CALL_OW 495
// end ;
17610: PPOPN 1
17612: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17613: LD_EXP 71
17617: PUSH
17618: LD_EXP 105
17622: AND
17623: IFFALSE 17834
17625: GO 17627
17627: DISABLE
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17635: LD_ADDR_VAR 0 5
17639: PUSH
17640: LD_INT 22
17642: PUSH
17643: LD_OWVAR 2
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 21
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: ST_TO_ADDR
// if not tmp then
17671: LD_VAR 0 5
17675: NOT
17676: IFFALSE 17680
// exit ;
17678: GO 17834
// for i in tmp do
17680: LD_ADDR_VAR 0 1
17684: PUSH
17685: LD_VAR 0 5
17689: PUSH
17690: FOR_IN
17691: IFFALSE 17832
// begin d := rand ( 0 , 5 ) ;
17693: LD_ADDR_VAR 0 4
17697: PUSH
17698: LD_INT 0
17700: PPUSH
17701: LD_INT 5
17703: PPUSH
17704: CALL_OW 12
17708: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17709: LD_ADDR_VAR 0 2
17713: PUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 250
17723: PPUSH
17724: LD_VAR 0 4
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: LD_INT 12
17734: PPUSH
17735: CALL_OW 12
17739: PPUSH
17740: CALL_OW 272
17744: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17745: LD_ADDR_VAR 0 3
17749: PUSH
17750: LD_VAR 0 1
17754: PPUSH
17755: CALL_OW 251
17759: PPUSH
17760: LD_VAR 0 4
17764: PPUSH
17765: LD_INT 3
17767: PPUSH
17768: LD_INT 12
17770: PPUSH
17771: CALL_OW 12
17775: PPUSH
17776: CALL_OW 273
17780: ST_TO_ADDR
// if ValidHex ( x , y ) then
17781: LD_VAR 0 2
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: CALL_OW 488
17795: IFFALSE 17830
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17797: LD_VAR 0 1
17801: PPUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_INT 3
17814: PPUSH
17815: LD_INT 6
17817: PPUSH
17818: CALL_OW 12
17822: PPUSH
17823: LD_INT 1
17825: PPUSH
17826: CALL_OW 483
// end ;
17830: GO 17690
17832: POP
17833: POP
// end ;
17834: PPOPN 5
17836: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17837: LD_EXP 71
17841: PUSH
17842: LD_EXP 106
17846: AND
17847: IFFALSE 17941
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17856: LD_ADDR_VAR 0 2
17860: PUSH
17861: LD_INT 22
17863: PUSH
17864: LD_OWVAR 2
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 32
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 2
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: PPUSH
17898: CALL_OW 69
17902: ST_TO_ADDR
// if not tmp then
17903: LD_VAR 0 2
17907: NOT
17908: IFFALSE 17912
// exit ;
17910: GO 17941
// for i in tmp do
17912: LD_ADDR_VAR 0 1
17916: PUSH
17917: LD_VAR 0 2
17921: PUSH
17922: FOR_IN
17923: IFFALSE 17939
// SetFuel ( i , 0 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_INT 0
17932: PPUSH
17933: CALL_OW 240
17937: GO 17922
17939: POP
17940: POP
// end ;
17941: PPOPN 2
17943: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17944: LD_EXP 71
17948: PUSH
17949: LD_EXP 107
17953: AND
17954: IFFALSE 18020
17956: GO 17958
17958: DISABLE
17959: LD_INT 0
17961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17962: LD_ADDR_VAR 0 1
17966: PUSH
17967: LD_INT 22
17969: PUSH
17970: LD_OWVAR 2
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 30
17981: PUSH
17982: LD_INT 29
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: ST_TO_ADDR
// if not tmp then
17998: LD_VAR 0 1
18002: NOT
18003: IFFALSE 18007
// exit ;
18005: GO 18020
// DestroyUnit ( tmp [ 1 ] ) ;
18007: LD_VAR 0 1
18011: PUSH
18012: LD_INT 1
18014: ARRAY
18015: PPUSH
18016: CALL_OW 65
// end ;
18020: PPOPN 1
18022: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18023: LD_EXP 71
18027: PUSH
18028: LD_EXP 109
18032: AND
18033: IFFALSE 18162
18035: GO 18037
18037: DISABLE
18038: LD_INT 0
18040: PPUSH
// begin uc_side := 0 ;
18041: LD_ADDR_OWVAR 20
18045: PUSH
18046: LD_INT 0
18048: ST_TO_ADDR
// uc_nation := nation_arabian ;
18049: LD_ADDR_OWVAR 21
18053: PUSH
18054: LD_INT 2
18056: ST_TO_ADDR
// hc_gallery :=  ;
18057: LD_ADDR_OWVAR 33
18061: PUSH
18062: LD_STRING 
18064: ST_TO_ADDR
// hc_name :=  ;
18065: LD_ADDR_OWVAR 26
18069: PUSH
18070: LD_STRING 
18072: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18073: LD_INT 1
18075: PPUSH
18076: LD_INT 11
18078: PPUSH
18079: LD_INT 10
18081: PPUSH
18082: CALL_OW 380
// un := CreateHuman ;
18086: LD_ADDR_VAR 0 1
18090: PUSH
18091: CALL_OW 44
18095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18096: LD_VAR 0 1
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18108: LD_INT 35
18110: PPUSH
18111: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_INT 22
18122: PUSH
18123: LD_OWVAR 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: PPUSH
18137: LD_VAR 0 1
18141: PPUSH
18142: CALL_OW 74
18146: PPUSH
18147: CALL_OW 115
// until IsDead ( un ) ;
18151: LD_VAR 0 1
18155: PPUSH
18156: CALL_OW 301
18160: IFFALSE 18108
// end ;
18162: PPOPN 1
18164: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18165: LD_EXP 71
18169: PUSH
18170: LD_EXP 111
18174: AND
18175: IFFALSE 18187
18177: GO 18179
18179: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18180: LD_STRING earthquake(getX(game), 0, 32)
18182: PPUSH
18183: CALL_OW 559
18187: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18188: LD_EXP 71
18192: PUSH
18193: LD_EXP 112
18197: AND
18198: IFFALSE 18289
18200: GO 18202
18202: DISABLE
18203: LD_INT 0
18205: PPUSH
// begin enable ;
18206: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18207: LD_ADDR_VAR 0 1
18211: PUSH
18212: LD_INT 22
18214: PUSH
18215: LD_OWVAR 2
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 21
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 33
18236: PUSH
18237: LD_INT 3
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: PPUSH
18249: CALL_OW 69
18253: ST_TO_ADDR
// if not tmp then
18254: LD_VAR 0 1
18258: NOT
18259: IFFALSE 18263
// exit ;
18261: GO 18289
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18263: LD_VAR 0 1
18267: PUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_VAR 0 1
18275: PPUSH
18276: CALL_OW 12
18280: ARRAY
18281: PPUSH
18282: LD_INT 1
18284: PPUSH
18285: CALL_OW 234
// end ;
18289: PPOPN 1
18291: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18292: LD_EXP 71
18296: PUSH
18297: LD_EXP 113
18301: AND
18302: IFFALSE 18443
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
18311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18312: LD_ADDR_VAR 0 3
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not tmp then
18348: LD_VAR 0 3
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18443
// un := tmp [ rand ( 1 , tmp ) ] ;
18357: LD_ADDR_VAR 0 2
18361: PUSH
18362: LD_VAR 0 3
18366: PUSH
18367: LD_INT 1
18369: PPUSH
18370: LD_VAR 0 3
18374: PPUSH
18375: CALL_OW 12
18379: ARRAY
18380: ST_TO_ADDR
// if Crawls ( un ) then
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 318
18390: IFFALSE 18401
// ComWalk ( un ) ;
18392: LD_VAR 0 2
18396: PPUSH
18397: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18401: LD_VAR 0 2
18405: PPUSH
18406: LD_INT 9
18408: PPUSH
18409: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18413: LD_INT 28
18415: PPUSH
18416: LD_OWVAR 2
18420: PPUSH
18421: LD_INT 2
18423: PPUSH
18424: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18428: LD_INT 29
18430: PPUSH
18431: LD_OWVAR 2
18435: PPUSH
18436: LD_INT 2
18438: PPUSH
18439: CALL_OW 322
// end ;
18443: PPOPN 3
18445: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18446: LD_EXP 71
18450: PUSH
18451: LD_EXP 114
18455: AND
18456: IFFALSE 18567
18458: GO 18460
18460: DISABLE
18461: LD_INT 0
18463: PPUSH
18464: PPUSH
18465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18466: LD_ADDR_VAR 0 3
18470: PUSH
18471: LD_INT 22
18473: PUSH
18474: LD_OWVAR 2
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 25
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PPUSH
18497: CALL_OW 69
18501: ST_TO_ADDR
// if not tmp then
18502: LD_VAR 0 3
18506: NOT
18507: IFFALSE 18511
// exit ;
18509: GO 18567
// un := tmp [ rand ( 1 , tmp ) ] ;
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: LD_VAR 0 3
18520: PUSH
18521: LD_INT 1
18523: PPUSH
18524: LD_VAR 0 3
18528: PPUSH
18529: CALL_OW 12
18533: ARRAY
18534: ST_TO_ADDR
// if Crawls ( un ) then
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 318
18544: IFFALSE 18555
// ComWalk ( un ) ;
18546: LD_VAR 0 2
18550: PPUSH
18551: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18555: LD_VAR 0 2
18559: PPUSH
18560: LD_INT 8
18562: PPUSH
18563: CALL_OW 336
// end ;
18567: PPOPN 3
18569: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18570: LD_EXP 71
18574: PUSH
18575: LD_EXP 115
18579: AND
18580: IFFALSE 18724
18582: GO 18584
18584: DISABLE
18585: LD_INT 0
18587: PPUSH
18588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_INT 22
18596: PUSH
18597: LD_OWVAR 2
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 34
18621: PUSH
18622: LD_INT 12
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 34
18631: PUSH
18632: LD_INT 51
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 34
18641: PUSH
18642: LD_INT 32
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: PPUSH
18660: CALL_OW 69
18664: ST_TO_ADDR
// if not tmp then
18665: LD_VAR 0 2
18669: NOT
18670: IFFALSE 18674
// exit ;
18672: GO 18724
// for i in tmp do
18674: LD_ADDR_VAR 0 1
18678: PUSH
18679: LD_VAR 0 2
18683: PUSH
18684: FOR_IN
18685: IFFALSE 18722
// if GetCargo ( i , mat_artifact ) = 0 then
18687: LD_VAR 0 1
18691: PPUSH
18692: LD_INT 4
18694: PPUSH
18695: CALL_OW 289
18699: PUSH
18700: LD_INT 0
18702: EQUAL
18703: IFFALSE 18720
// SetCargo ( i , mat_siberit , 100 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_INT 3
18712: PPUSH
18713: LD_INT 100
18715: PPUSH
18716: CALL_OW 290
18720: GO 18684
18722: POP
18723: POP
// end ;
18724: PPOPN 2
18726: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18727: LD_EXP 71
18731: PUSH
18732: LD_EXP 116
18736: AND
18737: IFFALSE 18920
18739: GO 18741
18741: DISABLE
18742: LD_INT 0
18744: PPUSH
18745: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_OWVAR 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: ST_TO_ADDR
// if not tmp then
18768: LD_VAR 0 2
18772: NOT
18773: IFFALSE 18777
// exit ;
18775: GO 18920
// for i := 1 to 2 do
18777: LD_ADDR_VAR 0 1
18781: PUSH
18782: DOUBLE
18783: LD_INT 1
18785: DEC
18786: ST_TO_ADDR
18787: LD_INT 2
18789: PUSH
18790: FOR_TO
18791: IFFALSE 18918
// begin uc_side := your_side ;
18793: LD_ADDR_OWVAR 20
18797: PUSH
18798: LD_OWVAR 2
18802: ST_TO_ADDR
// uc_nation := nation_american ;
18803: LD_ADDR_OWVAR 21
18807: PUSH
18808: LD_INT 1
18810: ST_TO_ADDR
// vc_chassis := us_morphling ;
18811: LD_ADDR_OWVAR 37
18815: PUSH
18816: LD_INT 5
18818: ST_TO_ADDR
// vc_engine := engine_siberite ;
18819: LD_ADDR_OWVAR 39
18823: PUSH
18824: LD_INT 3
18826: ST_TO_ADDR
// vc_control := control_computer ;
18827: LD_ADDR_OWVAR 38
18831: PUSH
18832: LD_INT 3
18834: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18835: LD_ADDR_OWVAR 40
18839: PUSH
18840: LD_INT 10
18842: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18843: LD_VAR 0 2
18847: PUSH
18848: LD_INT 1
18850: ARRAY
18851: PPUSH
18852: CALL_OW 310
18856: NOT
18857: IFFALSE 18904
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18859: CALL_OW 45
18863: PPUSH
18864: LD_VAR 0 2
18868: PUSH
18869: LD_INT 1
18871: ARRAY
18872: PPUSH
18873: CALL_OW 250
18877: PPUSH
18878: LD_VAR 0 2
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PPUSH
18887: CALL_OW 251
18891: PPUSH
18892: LD_INT 12
18894: PPUSH
18895: LD_INT 1
18897: PPUSH
18898: CALL_OW 50
18902: GO 18916
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18904: CALL_OW 45
18908: PPUSH
18909: LD_INT 1
18911: PPUSH
18912: CALL_OW 51
// end ;
18916: GO 18790
18918: POP
18919: POP
// end ;
18920: PPOPN 2
18922: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18923: LD_EXP 71
18927: PUSH
18928: LD_EXP 117
18932: AND
18933: IFFALSE 19155
18935: GO 18937
18937: DISABLE
18938: LD_INT 0
18940: PPUSH
18941: PPUSH
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18946: LD_ADDR_VAR 0 6
18950: PUSH
18951: LD_INT 22
18953: PUSH
18954: LD_OWVAR 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 21
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: LD_INT 23
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL_OW 69
18999: ST_TO_ADDR
// if not tmp then
19000: LD_VAR 0 6
19004: NOT
19005: IFFALSE 19009
// exit ;
19007: GO 19155
// s1 := rand ( 1 , 4 ) ;
19009: LD_ADDR_VAR 0 2
19013: PUSH
19014: LD_INT 1
19016: PPUSH
19017: LD_INT 4
19019: PPUSH
19020: CALL_OW 12
19024: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19025: LD_ADDR_VAR 0 4
19029: PUSH
19030: LD_VAR 0 6
19034: PUSH
19035: LD_INT 1
19037: ARRAY
19038: PPUSH
19039: LD_VAR 0 2
19043: PPUSH
19044: CALL_OW 259
19048: ST_TO_ADDR
// if s1 = 1 then
19049: LD_VAR 0 2
19053: PUSH
19054: LD_INT 1
19056: EQUAL
19057: IFFALSE 19077
// s2 := rand ( 2 , 4 ) else
19059: LD_ADDR_VAR 0 3
19063: PUSH
19064: LD_INT 2
19066: PPUSH
19067: LD_INT 4
19069: PPUSH
19070: CALL_OW 12
19074: ST_TO_ADDR
19075: GO 19085
// s2 := 1 ;
19077: LD_ADDR_VAR 0 3
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19085: LD_ADDR_VAR 0 5
19089: PUSH
19090: LD_VAR 0 6
19094: PUSH
19095: LD_INT 1
19097: ARRAY
19098: PPUSH
19099: LD_VAR 0 3
19103: PPUSH
19104: CALL_OW 259
19108: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19109: LD_VAR 0 6
19113: PUSH
19114: LD_INT 1
19116: ARRAY
19117: PPUSH
19118: LD_VAR 0 2
19122: PPUSH
19123: LD_VAR 0 5
19127: PPUSH
19128: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19132: LD_VAR 0 6
19136: PUSH
19137: LD_INT 1
19139: ARRAY
19140: PPUSH
19141: LD_VAR 0 3
19145: PPUSH
19146: LD_VAR 0 4
19150: PPUSH
19151: CALL_OW 237
// end ;
19155: PPOPN 6
19157: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19158: LD_EXP 71
19162: PUSH
19163: LD_EXP 118
19167: AND
19168: IFFALSE 19247
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19176: LD_ADDR_VAR 0 1
19180: PUSH
19181: LD_INT 22
19183: PUSH
19184: LD_OWVAR 2
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 30
19195: PUSH
19196: LD_INT 3
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: ST_TO_ADDR
// if not tmp then
19212: LD_VAR 0 1
19216: NOT
19217: IFFALSE 19221
// exit ;
19219: GO 19247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19221: LD_VAR 0 1
19225: PUSH
19226: LD_INT 1
19228: PPUSH
19229: LD_VAR 0 1
19233: PPUSH
19234: CALL_OW 12
19238: ARRAY
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: CALL_OW 234
// end ;
19247: PPOPN 1
19249: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19250: LD_EXP 71
19254: PUSH
19255: LD_EXP 119
19259: AND
19260: IFFALSE 19372
19262: GO 19264
19264: DISABLE
19265: LD_INT 0
19267: PPUSH
19268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19269: LD_ADDR_VAR 0 2
19273: PUSH
19274: LD_INT 22
19276: PUSH
19277: LD_OWVAR 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: LD_INT 30
19291: PUSH
19292: LD_INT 27
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 30
19301: PUSH
19302: LD_INT 26
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 30
19311: PUSH
19312: LD_INT 28
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 69
19333: ST_TO_ADDR
// if not tmp then
19334: LD_VAR 0 2
19338: NOT
19339: IFFALSE 19343
// exit ;
19341: GO 19372
// for i in tmp do
19343: LD_ADDR_VAR 0 1
19347: PUSH
19348: LD_VAR 0 2
19352: PUSH
19353: FOR_IN
19354: IFFALSE 19370
// SetLives ( i , 1 ) ;
19356: LD_VAR 0 1
19360: PPUSH
19361: LD_INT 1
19363: PPUSH
19364: CALL_OW 234
19368: GO 19353
19370: POP
19371: POP
// end ;
19372: PPOPN 2
19374: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19375: LD_EXP 71
19379: PUSH
19380: LD_EXP 120
19384: AND
19385: IFFALSE 19672
19387: GO 19389
19389: DISABLE
19390: LD_INT 0
19392: PPUSH
19393: PPUSH
19394: PPUSH
// begin i := rand ( 1 , 7 ) ;
19395: LD_ADDR_VAR 0 1
19399: PUSH
19400: LD_INT 1
19402: PPUSH
19403: LD_INT 7
19405: PPUSH
19406: CALL_OW 12
19410: ST_TO_ADDR
// case i of 1 :
19411: LD_VAR 0 1
19415: PUSH
19416: LD_INT 1
19418: DOUBLE
19419: EQUAL
19420: IFTRUE 19424
19422: GO 19434
19424: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19425: LD_STRING earthquake(getX(game), 0, 32)
19427: PPUSH
19428: CALL_OW 559
19432: GO 19672
19434: LD_INT 2
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19456
19442: POP
// begin ToLua ( displayStucuk(); ) ;
19443: LD_STRING displayStucuk();
19445: PPUSH
19446: CALL_OW 559
// ResetFog ;
19450: CALL_OW 335
// end ; 3 :
19454: GO 19672
19456: LD_INT 3
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19568
19464: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_INT 22
19472: PUSH
19473: LD_OWVAR 2
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 25
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 69
19500: ST_TO_ADDR
// if not tmp then
19501: LD_VAR 0 2
19505: NOT
19506: IFFALSE 19510
// exit ;
19508: GO 19672
// un := tmp [ rand ( 1 , tmp ) ] ;
19510: LD_ADDR_VAR 0 3
19514: PUSH
19515: LD_VAR 0 2
19519: PUSH
19520: LD_INT 1
19522: PPUSH
19523: LD_VAR 0 2
19527: PPUSH
19528: CALL_OW 12
19532: ARRAY
19533: ST_TO_ADDR
// if Crawls ( un ) then
19534: LD_VAR 0 3
19538: PPUSH
19539: CALL_OW 318
19543: IFFALSE 19554
// ComWalk ( un ) ;
19545: LD_VAR 0 3
19549: PPUSH
19550: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19554: LD_VAR 0 3
19558: PPUSH
19559: LD_INT 8
19561: PPUSH
19562: CALL_OW 336
// end ; 4 :
19566: GO 19672
19568: LD_INT 4
19570: DOUBLE
19571: EQUAL
19572: IFTRUE 19576
19574: GO 19650
19576: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19577: LD_ADDR_VAR 0 2
19581: PUSH
19582: LD_INT 22
19584: PUSH
19585: LD_OWVAR 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 29
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PPUSH
19608: CALL_OW 69
19612: ST_TO_ADDR
// if not tmp then
19613: LD_VAR 0 2
19617: NOT
19618: IFFALSE 19622
// exit ;
19620: GO 19672
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19622: LD_VAR 0 2
19626: PUSH
19627: LD_INT 1
19629: ARRAY
19630: PPUSH
19631: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19635: LD_VAR 0 2
19639: PUSH
19640: LD_INT 1
19642: ARRAY
19643: PPUSH
19644: CALL_OW 65
// end ; 5 .. 7 :
19648: GO 19672
19650: LD_INT 5
19652: DOUBLE
19653: GREATEREQUAL
19654: IFFALSE 19662
19656: LD_INT 7
19658: DOUBLE
19659: LESSEQUAL
19660: IFTRUE 19664
19662: GO 19671
19664: POP
// StreamSibBomb ; end ;
19665: CALL 15909 0 0
19669: GO 19672
19671: POP
// end ;
19672: PPOPN 3
19674: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19675: LD_EXP 71
19679: PUSH
19680: LD_EXP 121
19684: AND
19685: IFFALSE 19841
19687: GO 19689
19689: DISABLE
19690: LD_INT 0
19692: PPUSH
19693: PPUSH
19694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_INT 81
19702: PUSH
19703: LD_OWVAR 2
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 21
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 2
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PPUSH
19744: CALL_OW 69
19748: ST_TO_ADDR
// if not tmp then
19749: LD_VAR 0 2
19753: NOT
19754: IFFALSE 19758
// exit ;
19756: GO 19841
// p := 0 ;
19758: LD_ADDR_VAR 0 3
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19766: LD_INT 35
19768: PPUSH
19769: CALL_OW 67
// p := p + 1 ;
19773: LD_ADDR_VAR 0 3
19777: PUSH
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 1
19785: PLUS
19786: ST_TO_ADDR
// for i in tmp do
19787: LD_ADDR_VAR 0 1
19791: PUSH
19792: LD_VAR 0 2
19796: PUSH
19797: FOR_IN
19798: IFFALSE 19829
// if GetLives ( i ) < 1000 then
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 256
19809: PUSH
19810: LD_INT 1000
19812: LESS
19813: IFFALSE 19827
// SetLives ( i , 1000 ) ;
19815: LD_VAR 0 1
19819: PPUSH
19820: LD_INT 1000
19822: PPUSH
19823: CALL_OW 234
19827: GO 19797
19829: POP
19830: POP
// until p > 20 ;
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 20
19838: GREATER
19839: IFFALSE 19766
// end ;
19841: PPOPN 3
19843: END
// every 0 0$1 trigger StreamModeActive and sTime do
19844: LD_EXP 71
19848: PUSH
19849: LD_EXP 122
19853: AND
19854: IFFALSE 19889
19856: GO 19858
19858: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19859: LD_INT 28
19861: PPUSH
19862: LD_OWVAR 2
19866: PPUSH
19867: LD_INT 2
19869: PPUSH
19870: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19874: LD_INT 30
19876: PPUSH
19877: LD_OWVAR 2
19881: PPUSH
19882: LD_INT 2
19884: PPUSH
19885: CALL_OW 322
// end ;
19889: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19890: LD_EXP 71
19894: PUSH
19895: LD_EXP 123
19899: AND
19900: IFFALSE 20021
19902: GO 19904
19904: DISABLE
19905: LD_INT 0
19907: PPUSH
19908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19909: LD_ADDR_VAR 0 2
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_OWVAR 2
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 21
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 3
19938: PUSH
19939: LD_INT 23
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: PPUSH
19958: CALL_OW 69
19962: ST_TO_ADDR
// if not tmp then
19963: LD_VAR 0 2
19967: NOT
19968: IFFALSE 19972
// exit ;
19970: GO 20021
// for i in tmp do
19972: LD_ADDR_VAR 0 1
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: FOR_IN
19983: IFFALSE 20019
// begin if Crawls ( i ) then
19985: LD_VAR 0 1
19989: PPUSH
19990: CALL_OW 318
19994: IFFALSE 20005
// ComWalk ( i ) ;
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 138
// SetClass ( i , 2 ) ;
20005: LD_VAR 0 1
20009: PPUSH
20010: LD_INT 2
20012: PPUSH
20013: CALL_OW 336
// end ;
20017: GO 19982
20019: POP
20020: POP
// end ;
20021: PPOPN 2
20023: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20024: LD_EXP 71
20028: PUSH
20029: LD_EXP 124
20033: AND
20034: IFFALSE 20322
20036: GO 20038
20038: DISABLE
20039: LD_INT 0
20041: PPUSH
20042: PPUSH
20043: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20044: LD_OWVAR 2
20048: PPUSH
20049: LD_INT 9
20051: PPUSH
20052: LD_INT 1
20054: PPUSH
20055: LD_INT 1
20057: PPUSH
20058: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20062: LD_INT 9
20064: PPUSH
20065: LD_OWVAR 2
20069: PPUSH
20070: CALL_OW 343
// uc_side := 9 ;
20074: LD_ADDR_OWVAR 20
20078: PUSH
20079: LD_INT 9
20081: ST_TO_ADDR
// uc_nation := 2 ;
20082: LD_ADDR_OWVAR 21
20086: PUSH
20087: LD_INT 2
20089: ST_TO_ADDR
// hc_name := Dark Warrior ;
20090: LD_ADDR_OWVAR 26
20094: PUSH
20095: LD_STRING Dark Warrior
20097: ST_TO_ADDR
// hc_gallery :=  ;
20098: LD_ADDR_OWVAR 33
20102: PUSH
20103: LD_STRING 
20105: ST_TO_ADDR
// hc_noskilllimit := true ;
20106: LD_ADDR_OWVAR 76
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20114: LD_ADDR_OWVAR 31
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: LD_INT 30
20124: PUSH
20125: LD_INT 30
20127: PUSH
20128: LD_INT 30
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: ST_TO_ADDR
// un := CreateHuman ;
20137: LD_ADDR_VAR 0 3
20141: PUSH
20142: CALL_OW 44
20146: ST_TO_ADDR
// hc_noskilllimit := false ;
20147: LD_ADDR_OWVAR 76
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20155: LD_VAR 0 3
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: CALL_OW 51
// ToLua ( playRanger() ) ;
20167: LD_STRING playRanger()
20169: PPUSH
20170: CALL_OW 559
// p := 0 ;
20174: LD_ADDR_VAR 0 2
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20182: LD_INT 35
20184: PPUSH
20185: CALL_OW 67
// p := p + 1 ;
20189: LD_ADDR_VAR 0 2
20193: PUSH
20194: LD_VAR 0 2
20198: PUSH
20199: LD_INT 1
20201: PLUS
20202: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20203: LD_VAR 0 3
20207: PPUSH
20208: CALL_OW 256
20212: PUSH
20213: LD_INT 1000
20215: LESS
20216: IFFALSE 20230
// SetLives ( un , 1000 ) ;
20218: LD_VAR 0 3
20222: PPUSH
20223: LD_INT 1000
20225: PPUSH
20226: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20230: LD_VAR 0 3
20234: PPUSH
20235: LD_INT 81
20237: PUSH
20238: LD_OWVAR 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 91
20249: PUSH
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 30
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PPUSH
20267: CALL_OW 69
20271: PPUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: CALL_OW 74
20281: PPUSH
20282: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20286: LD_VAR 0 2
20290: PUSH
20291: LD_INT 80
20293: GREATER
20294: PUSH
20295: LD_VAR 0 3
20299: PPUSH
20300: CALL_OW 301
20304: OR
20305: IFFALSE 20182
// if un then
20307: LD_VAR 0 3
20311: IFFALSE 20322
// RemoveUnit ( un ) ;
20313: LD_VAR 0 3
20317: PPUSH
20318: CALL_OW 64
// end ;
20322: PPOPN 3
20324: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20325: LD_EXP 125
20329: IFFALSE 20445
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 81
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 21
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20375: LD_STRING playComputer()
20377: PPUSH
20378: CALL_OW 559
// if not tmp then
20382: LD_VAR 0 2
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20445
// for i in tmp do
20391: LD_ADDR_VAR 0 1
20395: PUSH
20396: LD_VAR 0 2
20400: PUSH
20401: FOR_IN
20402: IFFALSE 20443
// for j := 1 to 4 do
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: DOUBLE
20410: LD_INT 1
20412: DEC
20413: ST_TO_ADDR
20414: LD_INT 4
20416: PUSH
20417: FOR_TO
20418: IFFALSE 20439
// SetSkill ( i , j , 10 ) ;
20420: LD_VAR 0 1
20424: PPUSH
20425: LD_VAR 0 3
20429: PPUSH
20430: LD_INT 10
20432: PPUSH
20433: CALL_OW 237
20437: GO 20417
20439: POP
20440: POP
20441: GO 20401
20443: POP
20444: POP
// end ;
20445: PPOPN 3
20447: END
// every 0 0$1 trigger s30 do var i , tmp ;
20448: LD_EXP 126
20452: IFFALSE 20521
20454: GO 20456
20456: DISABLE
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20461: LD_ADDR_VAR 0 2
20465: PUSH
20466: LD_INT 22
20468: PUSH
20469: LD_OWVAR 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PPUSH
20478: CALL_OW 69
20482: ST_TO_ADDR
// if not tmp then
20483: LD_VAR 0 2
20487: NOT
20488: IFFALSE 20492
// exit ;
20490: GO 20521
// for i in tmp do
20492: LD_ADDR_VAR 0 1
20496: PUSH
20497: LD_VAR 0 2
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20519
// SetLives ( i , 300 ) ;
20505: LD_VAR 0 1
20509: PPUSH
20510: LD_INT 300
20512: PPUSH
20513: CALL_OW 234
20517: GO 20502
20519: POP
20520: POP
// end ;
20521: PPOPN 2
20523: END
// every 0 0$1 trigger s60 do var i , tmp ;
20524: LD_EXP 127
20528: IFFALSE 20597
20530: GO 20532
20532: DISABLE
20533: LD_INT 0
20535: PPUSH
20536: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20537: LD_ADDR_VAR 0 2
20541: PUSH
20542: LD_INT 22
20544: PUSH
20545: LD_OWVAR 2
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 69
20558: ST_TO_ADDR
// if not tmp then
20559: LD_VAR 0 2
20563: NOT
20564: IFFALSE 20568
// exit ;
20566: GO 20597
// for i in tmp do
20568: LD_ADDR_VAR 0 1
20572: PUSH
20573: LD_VAR 0 2
20577: PUSH
20578: FOR_IN
20579: IFFALSE 20595
// SetLives ( i , 600 ) ;
20581: LD_VAR 0 1
20585: PPUSH
20586: LD_INT 600
20588: PPUSH
20589: CALL_OW 234
20593: GO 20578
20595: POP
20596: POP
// end ;
20597: PPOPN 2
20599: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20600: LD_INT 0
20602: PPUSH
// case cmd of 301 :
20603: LD_VAR 0 1
20607: PUSH
20608: LD_INT 301
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20648
20616: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20617: LD_VAR 0 6
20621: PPUSH
20622: LD_VAR 0 7
20626: PPUSH
20627: LD_VAR 0 8
20631: PPUSH
20632: LD_VAR 0 4
20636: PPUSH
20637: LD_VAR 0 5
20641: PPUSH
20642: CALL 21849 0 5
20646: GO 20769
20648: LD_INT 302
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20693
20656: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20657: LD_VAR 0 6
20661: PPUSH
20662: LD_VAR 0 7
20666: PPUSH
20667: LD_VAR 0 8
20671: PPUSH
20672: LD_VAR 0 9
20676: PPUSH
20677: LD_VAR 0 4
20681: PPUSH
20682: LD_VAR 0 5
20686: PPUSH
20687: CALL 21940 0 6
20691: GO 20769
20693: LD_INT 303
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20738
20701: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20702: LD_VAR 0 6
20706: PPUSH
20707: LD_VAR 0 7
20711: PPUSH
20712: LD_VAR 0 8
20716: PPUSH
20717: LD_VAR 0 9
20721: PPUSH
20722: LD_VAR 0 4
20726: PPUSH
20727: LD_VAR 0 5
20731: PPUSH
20732: CALL 20774 0 6
20736: GO 20769
20738: LD_INT 304
20740: DOUBLE
20741: EQUAL
20742: IFTRUE 20746
20744: GO 20768
20746: POP
// hHackTeleport ( unit , x , y ) ; end ;
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_VAR 0 4
20756: PPUSH
20757: LD_VAR 0 5
20761: PPUSH
20762: CALL 22533 0 3
20766: GO 20769
20768: POP
// end ;
20769: LD_VAR 0 12
20773: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20774: LD_INT 0
20776: PPUSH
20777: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20778: LD_VAR 0 1
20782: PUSH
20783: LD_INT 1
20785: LESS
20786: PUSH
20787: LD_VAR 0 1
20791: PUSH
20792: LD_INT 3
20794: GREATER
20795: OR
20796: PUSH
20797: LD_VAR 0 5
20801: PPUSH
20802: LD_VAR 0 6
20806: PPUSH
20807: CALL_OW 428
20811: OR
20812: IFFALSE 20816
// exit ;
20814: GO 21536
// uc_side := your_side ;
20816: LD_ADDR_OWVAR 20
20820: PUSH
20821: LD_OWVAR 2
20825: ST_TO_ADDR
// uc_nation := nation ;
20826: LD_ADDR_OWVAR 21
20830: PUSH
20831: LD_VAR 0 1
20835: ST_TO_ADDR
// bc_level = 1 ;
20836: LD_ADDR_OWVAR 43
20840: PUSH
20841: LD_INT 1
20843: ST_TO_ADDR
// case btype of 1 :
20844: LD_VAR 0 2
20848: PUSH
20849: LD_INT 1
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20868
20857: POP
// bc_type := b_depot ; 2 :
20858: LD_ADDR_OWVAR 42
20862: PUSH
20863: LD_INT 0
20865: ST_TO_ADDR
20866: GO 21480
20868: LD_INT 2
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 20887
20876: POP
// bc_type := b_warehouse ; 3 :
20877: LD_ADDR_OWVAR 42
20881: PUSH
20882: LD_INT 1
20884: ST_TO_ADDR
20885: GO 21480
20887: LD_INT 3
20889: DOUBLE
20890: EQUAL
20891: IFTRUE 20895
20893: GO 20906
20895: POP
// bc_type := b_lab ; 4 .. 9 :
20896: LD_ADDR_OWVAR 42
20900: PUSH
20901: LD_INT 6
20903: ST_TO_ADDR
20904: GO 21480
20906: LD_INT 4
20908: DOUBLE
20909: GREATEREQUAL
20910: IFFALSE 20918
20912: LD_INT 9
20914: DOUBLE
20915: LESSEQUAL
20916: IFTRUE 20920
20918: GO 20972
20920: POP
// begin bc_type := b_lab_half ;
20921: LD_ADDR_OWVAR 42
20925: PUSH
20926: LD_INT 7
20928: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20929: LD_ADDR_OWVAR 44
20933: PUSH
20934: LD_INT 10
20936: PUSH
20937: LD_INT 11
20939: PUSH
20940: LD_INT 12
20942: PUSH
20943: LD_INT 15
20945: PUSH
20946: LD_INT 14
20948: PUSH
20949: LD_INT 13
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: PUSH
20960: LD_VAR 0 2
20964: PUSH
20965: LD_INT 3
20967: MINUS
20968: ARRAY
20969: ST_TO_ADDR
// end ; 10 .. 13 :
20970: GO 21480
20972: LD_INT 10
20974: DOUBLE
20975: GREATEREQUAL
20976: IFFALSE 20984
20978: LD_INT 13
20980: DOUBLE
20981: LESSEQUAL
20982: IFTRUE 20986
20984: GO 21063
20986: POP
// begin bc_type := b_lab_full ;
20987: LD_ADDR_OWVAR 42
20991: PUSH
20992: LD_INT 8
20994: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20995: LD_ADDR_OWVAR 44
20999: PUSH
21000: LD_INT 10
21002: PUSH
21003: LD_INT 12
21005: PUSH
21006: LD_INT 14
21008: PUSH
21009: LD_INT 13
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: PUSH
21018: LD_VAR 0 2
21022: PUSH
21023: LD_INT 9
21025: MINUS
21026: ARRAY
21027: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21028: LD_ADDR_OWVAR 45
21032: PUSH
21033: LD_INT 11
21035: PUSH
21036: LD_INT 15
21038: PUSH
21039: LD_INT 12
21041: PUSH
21042: LD_INT 15
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: PUSH
21051: LD_VAR 0 2
21055: PUSH
21056: LD_INT 9
21058: MINUS
21059: ARRAY
21060: ST_TO_ADDR
// end ; 14 :
21061: GO 21480
21063: LD_INT 14
21065: DOUBLE
21066: EQUAL
21067: IFTRUE 21071
21069: GO 21082
21071: POP
// bc_type := b_workshop ; 15 :
21072: LD_ADDR_OWVAR 42
21076: PUSH
21077: LD_INT 2
21079: ST_TO_ADDR
21080: GO 21480
21082: LD_INT 15
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21101
21090: POP
// bc_type := b_factory ; 16 :
21091: LD_ADDR_OWVAR 42
21095: PUSH
21096: LD_INT 3
21098: ST_TO_ADDR
21099: GO 21480
21101: LD_INT 16
21103: DOUBLE
21104: EQUAL
21105: IFTRUE 21109
21107: GO 21120
21109: POP
// bc_type := b_ext_gun ; 17 :
21110: LD_ADDR_OWVAR 42
21114: PUSH
21115: LD_INT 17
21117: ST_TO_ADDR
21118: GO 21480
21120: LD_INT 17
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21156
21128: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21129: LD_ADDR_OWVAR 42
21133: PUSH
21134: LD_INT 19
21136: PUSH
21137: LD_INT 23
21139: PUSH
21140: LD_INT 19
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_VAR 0 1
21152: ARRAY
21153: ST_TO_ADDR
21154: GO 21480
21156: LD_INT 18
21158: DOUBLE
21159: EQUAL
21160: IFTRUE 21164
21162: GO 21175
21164: POP
// bc_type := b_ext_radar ; 19 :
21165: LD_ADDR_OWVAR 42
21169: PUSH
21170: LD_INT 20
21172: ST_TO_ADDR
21173: GO 21480
21175: LD_INT 19
21177: DOUBLE
21178: EQUAL
21179: IFTRUE 21183
21181: GO 21194
21183: POP
// bc_type := b_ext_radio ; 20 :
21184: LD_ADDR_OWVAR 42
21188: PUSH
21189: LD_INT 22
21191: ST_TO_ADDR
21192: GO 21480
21194: LD_INT 20
21196: DOUBLE
21197: EQUAL
21198: IFTRUE 21202
21200: GO 21213
21202: POP
// bc_type := b_ext_siberium ; 21 :
21203: LD_ADDR_OWVAR 42
21207: PUSH
21208: LD_INT 21
21210: ST_TO_ADDR
21211: GO 21480
21213: LD_INT 21
21215: DOUBLE
21216: EQUAL
21217: IFTRUE 21221
21219: GO 21232
21221: POP
// bc_type := b_ext_computer ; 22 :
21222: LD_ADDR_OWVAR 42
21226: PUSH
21227: LD_INT 24
21229: ST_TO_ADDR
21230: GO 21480
21232: LD_INT 22
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21251
21240: POP
// bc_type := b_ext_track ; 23 :
21241: LD_ADDR_OWVAR 42
21245: PUSH
21246: LD_INT 16
21248: ST_TO_ADDR
21249: GO 21480
21251: LD_INT 23
21253: DOUBLE
21254: EQUAL
21255: IFTRUE 21259
21257: GO 21270
21259: POP
// bc_type := b_ext_laser ; 24 :
21260: LD_ADDR_OWVAR 42
21264: PUSH
21265: LD_INT 25
21267: ST_TO_ADDR
21268: GO 21480
21270: LD_INT 24
21272: DOUBLE
21273: EQUAL
21274: IFTRUE 21278
21276: GO 21289
21278: POP
// bc_type := b_control_tower ; 25 :
21279: LD_ADDR_OWVAR 42
21283: PUSH
21284: LD_INT 36
21286: ST_TO_ADDR
21287: GO 21480
21289: LD_INT 25
21291: DOUBLE
21292: EQUAL
21293: IFTRUE 21297
21295: GO 21308
21297: POP
// bc_type := b_breastwork ; 26 :
21298: LD_ADDR_OWVAR 42
21302: PUSH
21303: LD_INT 31
21305: ST_TO_ADDR
21306: GO 21480
21308: LD_INT 26
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21327
21316: POP
// bc_type := b_bunker ; 27 :
21317: LD_ADDR_OWVAR 42
21321: PUSH
21322: LD_INT 32
21324: ST_TO_ADDR
21325: GO 21480
21327: LD_INT 27
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21346
21335: POP
// bc_type := b_turret ; 28 :
21336: LD_ADDR_OWVAR 42
21340: PUSH
21341: LD_INT 33
21343: ST_TO_ADDR
21344: GO 21480
21346: LD_INT 28
21348: DOUBLE
21349: EQUAL
21350: IFTRUE 21354
21352: GO 21365
21354: POP
// bc_type := b_armoury ; 29 :
21355: LD_ADDR_OWVAR 42
21359: PUSH
21360: LD_INT 4
21362: ST_TO_ADDR
21363: GO 21480
21365: LD_INT 29
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21384
21373: POP
// bc_type := b_barracks ; 30 :
21374: LD_ADDR_OWVAR 42
21378: PUSH
21379: LD_INT 5
21381: ST_TO_ADDR
21382: GO 21480
21384: LD_INT 30
21386: DOUBLE
21387: EQUAL
21388: IFTRUE 21392
21390: GO 21403
21392: POP
// bc_type := b_solar_power ; 31 :
21393: LD_ADDR_OWVAR 42
21397: PUSH
21398: LD_INT 27
21400: ST_TO_ADDR
21401: GO 21480
21403: LD_INT 31
21405: DOUBLE
21406: EQUAL
21407: IFTRUE 21411
21409: GO 21422
21411: POP
// bc_type := b_oil_power ; 32 :
21412: LD_ADDR_OWVAR 42
21416: PUSH
21417: LD_INT 26
21419: ST_TO_ADDR
21420: GO 21480
21422: LD_INT 32
21424: DOUBLE
21425: EQUAL
21426: IFTRUE 21430
21428: GO 21441
21430: POP
// bc_type := b_siberite_power ; 33 :
21431: LD_ADDR_OWVAR 42
21435: PUSH
21436: LD_INT 28
21438: ST_TO_ADDR
21439: GO 21480
21441: LD_INT 33
21443: DOUBLE
21444: EQUAL
21445: IFTRUE 21449
21447: GO 21460
21449: POP
// bc_type := b_oil_mine ; 34 :
21450: LD_ADDR_OWVAR 42
21454: PUSH
21455: LD_INT 29
21457: ST_TO_ADDR
21458: GO 21480
21460: LD_INT 34
21462: DOUBLE
21463: EQUAL
21464: IFTRUE 21468
21466: GO 21479
21468: POP
// bc_type := b_siberite_mine ; end ;
21469: LD_ADDR_OWVAR 42
21473: PUSH
21474: LD_INT 30
21476: ST_TO_ADDR
21477: GO 21480
21479: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21480: LD_ADDR_VAR 0 8
21484: PUSH
21485: LD_VAR 0 5
21489: PPUSH
21490: LD_VAR 0 6
21494: PPUSH
21495: LD_VAR 0 3
21499: PPUSH
21500: CALL_OW 47
21504: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21505: LD_OWVAR 42
21509: PUSH
21510: LD_INT 32
21512: PUSH
21513: LD_INT 33
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: IN
21520: IFFALSE 21536
// PlaceWeaponTurret ( b , weapon ) ;
21522: LD_VAR 0 8
21526: PPUSH
21527: LD_VAR 0 4
21531: PPUSH
21532: CALL_OW 431
// end ;
21536: LD_VAR 0 7
21540: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21541: LD_INT 0
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21547: LD_ADDR_VAR 0 4
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_OWVAR 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: LD_INT 30
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 30
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PPUSH
21596: CALL_OW 69
21600: ST_TO_ADDR
// if not tmp then
21601: LD_VAR 0 4
21605: NOT
21606: IFFALSE 21610
// exit ;
21608: GO 21669
// for i in tmp do
21610: LD_ADDR_VAR 0 2
21614: PUSH
21615: LD_VAR 0 4
21619: PUSH
21620: FOR_IN
21621: IFFALSE 21667
// for j = 1 to 3 do
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: DOUBLE
21629: LD_INT 1
21631: DEC
21632: ST_TO_ADDR
21633: LD_INT 3
21635: PUSH
21636: FOR_TO
21637: IFFALSE 21663
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21639: LD_VAR 0 2
21643: PPUSH
21644: CALL_OW 274
21648: PPUSH
21649: LD_VAR 0 3
21653: PPUSH
21654: LD_INT 99999
21656: PPUSH
21657: CALL_OW 277
21661: GO 21636
21663: POP
21664: POP
21665: GO 21620
21667: POP
21668: POP
// end ;
21669: LD_VAR 0 1
21673: RET
// export function hHackSetLevel10 ; var i , j ; begin
21674: LD_INT 0
21676: PPUSH
21677: PPUSH
21678: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21679: LD_ADDR_VAR 0 2
21683: PUSH
21684: LD_INT 21
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PPUSH
21694: CALL_OW 69
21698: PUSH
21699: FOR_IN
21700: IFFALSE 21752
// if IsSelected ( i ) then
21702: LD_VAR 0 2
21706: PPUSH
21707: CALL_OW 306
21711: IFFALSE 21750
// begin for j := 1 to 4 do
21713: LD_ADDR_VAR 0 3
21717: PUSH
21718: DOUBLE
21719: LD_INT 1
21721: DEC
21722: ST_TO_ADDR
21723: LD_INT 4
21725: PUSH
21726: FOR_TO
21727: IFFALSE 21748
// SetSkill ( i , j , 10 ) ;
21729: LD_VAR 0 2
21733: PPUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: LD_INT 10
21741: PPUSH
21742: CALL_OW 237
21746: GO 21726
21748: POP
21749: POP
// end ;
21750: GO 21699
21752: POP
21753: POP
// end ;
21754: LD_VAR 0 1
21758: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21759: LD_INT 0
21761: PPUSH
21762: PPUSH
21763: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21764: LD_ADDR_VAR 0 2
21768: PUSH
21769: LD_INT 22
21771: PUSH
21772: LD_OWVAR 2
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 21
21783: PUSH
21784: LD_INT 1
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 69
21799: PUSH
21800: FOR_IN
21801: IFFALSE 21842
// begin for j := 1 to 4 do
21803: LD_ADDR_VAR 0 3
21807: PUSH
21808: DOUBLE
21809: LD_INT 1
21811: DEC
21812: ST_TO_ADDR
21813: LD_INT 4
21815: PUSH
21816: FOR_TO
21817: IFFALSE 21838
// SetSkill ( i , j , 10 ) ;
21819: LD_VAR 0 2
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: LD_INT 10
21831: PPUSH
21832: CALL_OW 237
21836: GO 21816
21838: POP
21839: POP
// end ;
21840: GO 21800
21842: POP
21843: POP
// end ;
21844: LD_VAR 0 1
21848: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21849: LD_INT 0
21851: PPUSH
// uc_side := your_side ;
21852: LD_ADDR_OWVAR 20
21856: PUSH
21857: LD_OWVAR 2
21861: ST_TO_ADDR
// uc_nation := nation ;
21862: LD_ADDR_OWVAR 21
21866: PUSH
21867: LD_VAR 0 1
21871: ST_TO_ADDR
// InitHc ;
21872: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21876: LD_INT 0
21878: PPUSH
21879: LD_VAR 0 2
21883: PPUSH
21884: LD_VAR 0 3
21888: PPUSH
21889: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21893: LD_VAR 0 4
21897: PPUSH
21898: LD_VAR 0 5
21902: PPUSH
21903: CALL_OW 428
21907: PUSH
21908: LD_INT 0
21910: EQUAL
21911: IFFALSE 21935
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21913: CALL_OW 44
21917: PPUSH
21918: LD_VAR 0 4
21922: PPUSH
21923: LD_VAR 0 5
21927: PPUSH
21928: LD_INT 1
21930: PPUSH
21931: CALL_OW 48
// end ;
21935: LD_VAR 0 6
21939: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21940: LD_INT 0
21942: PPUSH
21943: PPUSH
// uc_side := your_side ;
21944: LD_ADDR_OWVAR 20
21948: PUSH
21949: LD_OWVAR 2
21953: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21954: LD_VAR 0 1
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: LD_INT 2
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: LD_INT 4
21970: PUSH
21971: LD_INT 5
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: IN
21981: IFFALSE 21993
// uc_nation := nation_american else
21983: LD_ADDR_OWVAR 21
21987: PUSH
21988: LD_INT 1
21990: ST_TO_ADDR
21991: GO 22036
// if chassis in [ 11 , 12 , 13 , 14 ] then
21993: LD_VAR 0 1
21997: PUSH
21998: LD_INT 11
22000: PUSH
22001: LD_INT 12
22003: PUSH
22004: LD_INT 13
22006: PUSH
22007: LD_INT 14
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: IN
22016: IFFALSE 22028
// uc_nation := nation_arabian else
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 2
22025: ST_TO_ADDR
22026: GO 22036
// uc_nation := nation_russian ;
22028: LD_ADDR_OWVAR 21
22032: PUSH
22033: LD_INT 3
22035: ST_TO_ADDR
// vc_chassis := chassis ;
22036: LD_ADDR_OWVAR 37
22040: PUSH
22041: LD_VAR 0 1
22045: ST_TO_ADDR
// vc_engine := engine ;
22046: LD_ADDR_OWVAR 39
22050: PUSH
22051: LD_VAR 0 2
22055: ST_TO_ADDR
// vc_control := control ;
22056: LD_ADDR_OWVAR 38
22060: PUSH
22061: LD_VAR 0 3
22065: ST_TO_ADDR
// vc_weapon := weapon ;
22066: LD_ADDR_OWVAR 40
22070: PUSH
22071: LD_VAR 0 4
22075: ST_TO_ADDR
// un := CreateVehicle ;
22076: LD_ADDR_VAR 0 8
22080: PUSH
22081: CALL_OW 45
22085: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22086: LD_VAR 0 8
22090: PPUSH
22091: LD_INT 0
22093: PPUSH
22094: LD_INT 5
22096: PPUSH
22097: CALL_OW 12
22101: PPUSH
22102: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22106: LD_VAR 0 8
22110: PPUSH
22111: LD_VAR 0 5
22115: PPUSH
22116: LD_VAR 0 6
22120: PPUSH
22121: LD_INT 1
22123: PPUSH
22124: CALL_OW 48
// end ;
22128: LD_VAR 0 7
22132: RET
// export hInvincible ; every 1 do
22133: GO 22135
22135: DISABLE
// hInvincible := [ ] ;
22136: LD_ADDR_EXP 128
22140: PUSH
22141: EMPTY
22142: ST_TO_ADDR
22143: END
// every 10 do var i ;
22144: GO 22146
22146: DISABLE
22147: LD_INT 0
22149: PPUSH
// begin enable ;
22150: ENABLE
// if not hInvincible then
22151: LD_EXP 128
22155: NOT
22156: IFFALSE 22160
// exit ;
22158: GO 22204
// for i in hInvincible do
22160: LD_ADDR_VAR 0 1
22164: PUSH
22165: LD_EXP 128
22169: PUSH
22170: FOR_IN
22171: IFFALSE 22202
// if GetLives ( i ) < 1000 then
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 256
22182: PUSH
22183: LD_INT 1000
22185: LESS
22186: IFFALSE 22200
// SetLives ( i , 1000 ) ;
22188: LD_VAR 0 1
22192: PPUSH
22193: LD_INT 1000
22195: PPUSH
22196: CALL_OW 234
22200: GO 22170
22202: POP
22203: POP
// end ;
22204: PPOPN 1
22206: END
// export function hHackInvincible ; var i ; begin
22207: LD_INT 0
22209: PPUSH
22210: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22211: LD_ADDR_VAR 0 2
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 21
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 21
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PPUSH
22244: CALL_OW 69
22248: PUSH
22249: FOR_IN
22250: IFFALSE 22311
// if IsSelected ( i ) then
22252: LD_VAR 0 2
22256: PPUSH
22257: CALL_OW 306
22261: IFFALSE 22309
// begin if i in hInvincible then
22263: LD_VAR 0 2
22267: PUSH
22268: LD_EXP 128
22272: IN
22273: IFFALSE 22293
// hInvincible := hInvincible diff i else
22275: LD_ADDR_EXP 128
22279: PUSH
22280: LD_EXP 128
22284: PUSH
22285: LD_VAR 0 2
22289: DIFF
22290: ST_TO_ADDR
22291: GO 22309
// hInvincible := hInvincible union i ;
22293: LD_ADDR_EXP 128
22297: PUSH
22298: LD_EXP 128
22302: PUSH
22303: LD_VAR 0 2
22307: UNION
22308: ST_TO_ADDR
// end ;
22309: GO 22249
22311: POP
22312: POP
// end ;
22313: LD_VAR 0 1
22317: RET
// export function hHackInvisible ; var i , j ; begin
22318: LD_INT 0
22320: PPUSH
22321: PPUSH
22322: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22323: LD_ADDR_VAR 0 2
22327: PUSH
22328: LD_INT 21
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 69
22342: PUSH
22343: FOR_IN
22344: IFFALSE 22368
// if IsSelected ( i ) then
22346: LD_VAR 0 2
22350: PPUSH
22351: CALL_OW 306
22355: IFFALSE 22366
// ComForceInvisible ( i ) ;
22357: LD_VAR 0 2
22361: PPUSH
22362: CALL_OW 496
22366: GO 22343
22368: POP
22369: POP
// end ;
22370: LD_VAR 0 1
22374: RET
// export function hHackChangeYourSide ; begin
22375: LD_INT 0
22377: PPUSH
// if your_side = 8 then
22378: LD_OWVAR 2
22382: PUSH
22383: LD_INT 8
22385: EQUAL
22386: IFFALSE 22398
// your_side := 0 else
22388: LD_ADDR_OWVAR 2
22392: PUSH
22393: LD_INT 0
22395: ST_TO_ADDR
22396: GO 22412
// your_side := your_side + 1 ;
22398: LD_ADDR_OWVAR 2
22402: PUSH
22403: LD_OWVAR 2
22407: PUSH
22408: LD_INT 1
22410: PLUS
22411: ST_TO_ADDR
// end ;
22412: LD_VAR 0 1
22416: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22417: LD_INT 0
22419: PPUSH
22420: PPUSH
22421: PPUSH
// for i in all_units do
22422: LD_ADDR_VAR 0 2
22426: PUSH
22427: LD_OWVAR 3
22431: PUSH
22432: FOR_IN
22433: IFFALSE 22511
// if IsSelected ( i ) then
22435: LD_VAR 0 2
22439: PPUSH
22440: CALL_OW 306
22444: IFFALSE 22509
// begin j := GetSide ( i ) ;
22446: LD_ADDR_VAR 0 3
22450: PUSH
22451: LD_VAR 0 2
22455: PPUSH
22456: CALL_OW 255
22460: ST_TO_ADDR
// if j = 8 then
22461: LD_VAR 0 3
22465: PUSH
22466: LD_INT 8
22468: EQUAL
22469: IFFALSE 22481
// j := 0 else
22471: LD_ADDR_VAR 0 3
22475: PUSH
22476: LD_INT 0
22478: ST_TO_ADDR
22479: GO 22495
// j := j + 1 ;
22481: LD_ADDR_VAR 0 3
22485: PUSH
22486: LD_VAR 0 3
22490: PUSH
22491: LD_INT 1
22493: PLUS
22494: ST_TO_ADDR
// SetSide ( i , j ) ;
22495: LD_VAR 0 2
22499: PPUSH
22500: LD_VAR 0 3
22504: PPUSH
22505: CALL_OW 235
// end ;
22509: GO 22432
22511: POP
22512: POP
// end ;
22513: LD_VAR 0 1
22517: RET
// export function hHackFog ; begin
22518: LD_INT 0
22520: PPUSH
// FogOff ( true ) ;
22521: LD_INT 1
22523: PPUSH
22524: CALL_OW 344
// end ;
22528: LD_VAR 0 1
22532: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22533: LD_INT 0
22535: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22536: LD_VAR 0 1
22540: PPUSH
22541: LD_VAR 0 2
22545: PPUSH
22546: LD_VAR 0 3
22550: PPUSH
22551: LD_INT 1
22553: PPUSH
22554: LD_INT 1
22556: PPUSH
22557: CALL_OW 483
// CenterOnXY ( x , y ) ;
22561: LD_VAR 0 2
22565: PPUSH
22566: LD_VAR 0 3
22570: PPUSH
22571: CALL_OW 84
// end ; end_of_file
22575: LD_VAR 0 4
22579: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22580: LD_INT 0
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22586: LD_VAR 0 1
22590: PPUSH
22591: CALL_OW 264
22595: PUSH
22596: LD_EXP 56
22600: EQUAL
22601: IFFALSE 22673
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22603: LD_INT 68
22605: PPUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 255
22615: PPUSH
22616: CALL_OW 321
22620: PUSH
22621: LD_INT 2
22623: EQUAL
22624: IFFALSE 22636
// eff := 70 else
22626: LD_ADDR_VAR 0 4
22630: PUSH
22631: LD_INT 70
22633: ST_TO_ADDR
22634: GO 22644
// eff := 30 ;
22636: LD_ADDR_VAR 0 4
22640: PUSH
22641: LD_INT 30
22643: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22644: LD_VAR 0 1
22648: PPUSH
22649: CALL_OW 250
22653: PPUSH
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 251
22663: PPUSH
22664: LD_VAR 0 4
22668: PPUSH
22669: CALL_OW 495
// end ; end ;
22673: LD_VAR 0 2
22677: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22678: LD_INT 0
22680: PPUSH
// end ;
22681: LD_VAR 0 4
22685: RET
// export function SOS_Command ( cmd ) ; begin
22686: LD_INT 0
22688: PPUSH
// end ;
22689: LD_VAR 0 2
22693: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22694: LD_INT 0
22696: PPUSH
// end ;
22697: LD_VAR 0 6
22701: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22702: LD_INT 0
22704: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22705: LD_VAR 0 1
22709: PUSH
22710: LD_INT 250
22712: EQUAL
22713: PUSH
22714: LD_VAR 0 2
22718: PPUSH
22719: CALL_OW 264
22723: PUSH
22724: LD_EXP 59
22728: EQUAL
22729: AND
22730: IFFALSE 22751
// MinerPlaceMine ( unit , x , y ) ;
22732: LD_VAR 0 2
22736: PPUSH
22737: LD_VAR 0 4
22741: PPUSH
22742: LD_VAR 0 5
22746: PPUSH
22747: CALL 25100 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22751: LD_VAR 0 1
22755: PUSH
22756: LD_INT 251
22758: EQUAL
22759: PUSH
22760: LD_VAR 0 2
22764: PPUSH
22765: CALL_OW 264
22769: PUSH
22770: LD_EXP 59
22774: EQUAL
22775: AND
22776: IFFALSE 22797
// MinerDetonateMine ( unit , x , y ) ;
22778: LD_VAR 0 2
22782: PPUSH
22783: LD_VAR 0 4
22787: PPUSH
22788: LD_VAR 0 5
22792: PPUSH
22793: CALL 25377 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22797: LD_VAR 0 1
22801: PUSH
22802: LD_INT 252
22804: EQUAL
22805: PUSH
22806: LD_VAR 0 2
22810: PPUSH
22811: CALL_OW 264
22815: PUSH
22816: LD_EXP 59
22820: EQUAL
22821: AND
22822: IFFALSE 22843
// MinerCreateMinefield ( unit , x , y ) ;
22824: LD_VAR 0 2
22828: PPUSH
22829: LD_VAR 0 4
22833: PPUSH
22834: LD_VAR 0 5
22838: PPUSH
22839: CALL 25794 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22843: LD_VAR 0 1
22847: PUSH
22848: LD_INT 253
22850: EQUAL
22851: PUSH
22852: LD_VAR 0 2
22856: PPUSH
22857: CALL_OW 257
22861: PUSH
22862: LD_INT 5
22864: EQUAL
22865: AND
22866: IFFALSE 22887
// ComBinocular ( unit , x , y ) ;
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_VAR 0 4
22877: PPUSH
22878: LD_VAR 0 5
22882: PPUSH
22883: CALL 26165 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22887: LD_VAR 0 1
22891: PUSH
22892: LD_INT 254
22894: EQUAL
22895: PUSH
22896: LD_VAR 0 2
22900: PPUSH
22901: CALL_OW 264
22905: PUSH
22906: LD_EXP 54
22910: EQUAL
22911: AND
22912: PUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: CALL_OW 263
22922: PUSH
22923: LD_INT 3
22925: EQUAL
22926: AND
22927: IFFALSE 22943
// HackDestroyVehicle ( unit , selectedUnit ) ;
22929: LD_VAR 0 2
22933: PPUSH
22934: LD_VAR 0 3
22938: PPUSH
22939: CALL 24460 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22943: LD_VAR 0 1
22947: PUSH
22948: LD_INT 255
22950: EQUAL
22951: PUSH
22952: LD_VAR 0 2
22956: PPUSH
22957: CALL_OW 264
22961: PUSH
22962: LD_INT 14
22964: PUSH
22965: LD_INT 53
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: IN
22972: AND
22973: PUSH
22974: LD_VAR 0 4
22978: PPUSH
22979: LD_VAR 0 5
22983: PPUSH
22984: CALL_OW 488
22988: AND
22989: IFFALSE 23013
// CutTreeXYR ( unit , x , y , 12 ) ;
22991: LD_VAR 0 2
22995: PPUSH
22996: LD_VAR 0 4
23000: PPUSH
23001: LD_VAR 0 5
23005: PPUSH
23006: LD_INT 12
23008: PPUSH
23009: CALL 23026 0 4
// end ;
23013: LD_VAR 0 6
23017: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23018: LD_INT 0
23020: PPUSH
// end ;
23021: LD_VAR 0 4
23025: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23026: LD_INT 0
23028: PPUSH
23029: PPUSH
23030: PPUSH
23031: PPUSH
23032: PPUSH
23033: PPUSH
23034: PPUSH
23035: PPUSH
23036: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23037: LD_VAR 0 1
23041: NOT
23042: PUSH
23043: LD_VAR 0 2
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: CALL_OW 488
23057: NOT
23058: OR
23059: PUSH
23060: LD_VAR 0 4
23064: NOT
23065: OR
23066: IFFALSE 23070
// exit ;
23068: GO 23410
// list := [ ] ;
23070: LD_ADDR_VAR 0 13
23074: PUSH
23075: EMPTY
23076: ST_TO_ADDR
// if x - r < 0 then
23077: LD_VAR 0 2
23081: PUSH
23082: LD_VAR 0 4
23086: MINUS
23087: PUSH
23088: LD_INT 0
23090: LESS
23091: IFFALSE 23103
// min_x := 0 else
23093: LD_ADDR_VAR 0 7
23097: PUSH
23098: LD_INT 0
23100: ST_TO_ADDR
23101: GO 23119
// min_x := x - r ;
23103: LD_ADDR_VAR 0 7
23107: PUSH
23108: LD_VAR 0 2
23112: PUSH
23113: LD_VAR 0 4
23117: MINUS
23118: ST_TO_ADDR
// if y - r < 0 then
23119: LD_VAR 0 3
23123: PUSH
23124: LD_VAR 0 4
23128: MINUS
23129: PUSH
23130: LD_INT 0
23132: LESS
23133: IFFALSE 23145
// min_y := 0 else
23135: LD_ADDR_VAR 0 8
23139: PUSH
23140: LD_INT 0
23142: ST_TO_ADDR
23143: GO 23161
// min_y := y - r ;
23145: LD_ADDR_VAR 0 8
23149: PUSH
23150: LD_VAR 0 3
23154: PUSH
23155: LD_VAR 0 4
23159: MINUS
23160: ST_TO_ADDR
// max_x := x + r ;
23161: LD_ADDR_VAR 0 9
23165: PUSH
23166: LD_VAR 0 2
23170: PUSH
23171: LD_VAR 0 4
23175: PLUS
23176: ST_TO_ADDR
// max_y := y + r ;
23177: LD_ADDR_VAR 0 10
23181: PUSH
23182: LD_VAR 0 3
23186: PUSH
23187: LD_VAR 0 4
23191: PLUS
23192: ST_TO_ADDR
// for _x = min_x to max_x do
23193: LD_ADDR_VAR 0 11
23197: PUSH
23198: DOUBLE
23199: LD_VAR 0 7
23203: DEC
23204: ST_TO_ADDR
23205: LD_VAR 0 9
23209: PUSH
23210: FOR_TO
23211: IFFALSE 23328
// for _y = min_y to max_y do
23213: LD_ADDR_VAR 0 12
23217: PUSH
23218: DOUBLE
23219: LD_VAR 0 8
23223: DEC
23224: ST_TO_ADDR
23225: LD_VAR 0 10
23229: PUSH
23230: FOR_TO
23231: IFFALSE 23324
// begin if not ValidHex ( _x , _y ) then
23233: LD_VAR 0 11
23237: PPUSH
23238: LD_VAR 0 12
23242: PPUSH
23243: CALL_OW 488
23247: NOT
23248: IFFALSE 23252
// continue ;
23250: GO 23230
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23252: LD_VAR 0 11
23256: PPUSH
23257: LD_VAR 0 12
23261: PPUSH
23262: CALL_OW 351
23266: PUSH
23267: LD_VAR 0 11
23271: PPUSH
23272: LD_VAR 0 12
23276: PPUSH
23277: CALL_OW 554
23281: AND
23282: IFFALSE 23322
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23284: LD_ADDR_VAR 0 13
23288: PUSH
23289: LD_VAR 0 13
23293: PPUSH
23294: LD_VAR 0 13
23298: PUSH
23299: LD_INT 1
23301: PLUS
23302: PPUSH
23303: LD_VAR 0 11
23307: PUSH
23308: LD_VAR 0 12
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PPUSH
23317: CALL_OW 2
23321: ST_TO_ADDR
// end ;
23322: GO 23230
23324: POP
23325: POP
23326: GO 23210
23328: POP
23329: POP
// if not list then
23330: LD_VAR 0 13
23334: NOT
23335: IFFALSE 23339
// exit ;
23337: GO 23410
// for i in list do
23339: LD_ADDR_VAR 0 6
23343: PUSH
23344: LD_VAR 0 13
23348: PUSH
23349: FOR_IN
23350: IFFALSE 23408
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23352: LD_VAR 0 1
23356: PPUSH
23357: LD_STRING M
23359: PUSH
23360: LD_VAR 0 6
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PUSH
23369: LD_VAR 0 6
23373: PUSH
23374: LD_INT 2
23376: ARRAY
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: PPUSH
23402: CALL_OW 447
23406: GO 23349
23408: POP
23409: POP
// end ;
23410: LD_VAR 0 5
23414: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23415: LD_EXP 131
23419: NOT
23420: IFFALSE 23470
23422: GO 23424
23424: DISABLE
// begin initHack := true ;
23425: LD_ADDR_EXP 131
23429: PUSH
23430: LD_INT 1
23432: ST_TO_ADDR
// hackTanks := [ ] ;
23433: LD_ADDR_EXP 132
23437: PUSH
23438: EMPTY
23439: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23440: LD_ADDR_EXP 133
23444: PUSH
23445: EMPTY
23446: ST_TO_ADDR
// hackLimit := 3 ;
23447: LD_ADDR_EXP 134
23451: PUSH
23452: LD_INT 3
23454: ST_TO_ADDR
// hackDist := 12 ;
23455: LD_ADDR_EXP 135
23459: PUSH
23460: LD_INT 12
23462: ST_TO_ADDR
// hackCounter := [ ] ;
23463: LD_ADDR_EXP 136
23467: PUSH
23468: EMPTY
23469: ST_TO_ADDR
// end ;
23470: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23471: LD_EXP 131
23475: PUSH
23476: LD_INT 34
23478: PUSH
23479: LD_EXP 54
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: CALL_OW 69
23492: AND
23493: IFFALSE 23748
23495: GO 23497
23497: DISABLE
23498: LD_INT 0
23500: PPUSH
23501: PPUSH
// begin enable ;
23502: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23503: LD_ADDR_VAR 0 1
23507: PUSH
23508: LD_INT 34
23510: PUSH
23511: LD_EXP 54
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PPUSH
23520: CALL_OW 69
23524: PUSH
23525: FOR_IN
23526: IFFALSE 23746
// begin if not i in hackTanks then
23528: LD_VAR 0 1
23532: PUSH
23533: LD_EXP 132
23537: IN
23538: NOT
23539: IFFALSE 23622
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23541: LD_ADDR_EXP 132
23545: PUSH
23546: LD_EXP 132
23550: PPUSH
23551: LD_EXP 132
23555: PUSH
23556: LD_INT 1
23558: PLUS
23559: PPUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 1
23569: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23570: LD_ADDR_EXP 133
23574: PUSH
23575: LD_EXP 133
23579: PPUSH
23580: LD_EXP 133
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: PPUSH
23589: EMPTY
23590: PPUSH
23591: CALL_OW 1
23595: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23596: LD_ADDR_EXP 136
23600: PUSH
23601: LD_EXP 136
23605: PPUSH
23606: LD_EXP 136
23610: PUSH
23611: LD_INT 1
23613: PLUS
23614: PPUSH
23615: EMPTY
23616: PPUSH
23617: CALL_OW 1
23621: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23622: LD_VAR 0 1
23626: PPUSH
23627: CALL_OW 302
23631: NOT
23632: IFFALSE 23645
// begin HackUnlinkAll ( i ) ;
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL 23751 0 1
// continue ;
23643: GO 23525
// end ; HackCheckCapturedStatus ( i ) ;
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL 24194 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23654: LD_ADDR_VAR 0 2
23658: PUSH
23659: LD_INT 81
23661: PUSH
23662: LD_VAR 0 1
23666: PPUSH
23667: CALL_OW 255
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 33
23678: PUSH
23679: LD_INT 3
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 91
23688: PUSH
23689: LD_VAR 0 1
23693: PUSH
23694: LD_EXP 135
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 50
23706: PUSH
23707: EMPTY
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: PPUSH
23716: CALL_OW 69
23720: ST_TO_ADDR
// if not tmp then
23721: LD_VAR 0 2
23725: NOT
23726: IFFALSE 23730
// continue ;
23728: GO 23525
// HackLink ( i , tmp ) ;
23730: LD_VAR 0 1
23734: PPUSH
23735: LD_VAR 0 2
23739: PPUSH
23740: CALL 23887 0 2
// end ;
23744: GO 23525
23746: POP
23747: POP
// end ;
23748: PPOPN 2
23750: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23751: LD_INT 0
23753: PPUSH
23754: PPUSH
23755: PPUSH
// if not hack in hackTanks then
23756: LD_VAR 0 1
23760: PUSH
23761: LD_EXP 132
23765: IN
23766: NOT
23767: IFFALSE 23771
// exit ;
23769: GO 23882
// index := GetElementIndex ( hackTanks , hack ) ;
23771: LD_ADDR_VAR 0 4
23775: PUSH
23776: LD_EXP 132
23780: PPUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL 31356 0 2
23790: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23791: LD_EXP 133
23795: PUSH
23796: LD_VAR 0 4
23800: ARRAY
23801: IFFALSE 23882
// begin for i in hackTanksCaptured [ index ] do
23803: LD_ADDR_VAR 0 3
23807: PUSH
23808: LD_EXP 133
23812: PUSH
23813: LD_VAR 0 4
23817: ARRAY
23818: PUSH
23819: FOR_IN
23820: IFFALSE 23846
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23822: LD_VAR 0 3
23826: PUSH
23827: LD_INT 1
23829: ARRAY
23830: PPUSH
23831: LD_VAR 0 3
23835: PUSH
23836: LD_INT 2
23838: ARRAY
23839: PPUSH
23840: CALL_OW 235
23844: GO 23819
23846: POP
23847: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23848: LD_ADDR_EXP 133
23852: PUSH
23853: LD_EXP 133
23857: PPUSH
23858: LD_VAR 0 4
23862: PPUSH
23863: EMPTY
23864: PPUSH
23865: CALL_OW 1
23869: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23870: LD_VAR 0 1
23874: PPUSH
23875: LD_INT 0
23877: PPUSH
23878: CALL_OW 505
// end ; end ;
23882: LD_VAR 0 2
23886: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23887: LD_INT 0
23889: PPUSH
23890: PPUSH
23891: PPUSH
// if not hack in hackTanks or not vehicles then
23892: LD_VAR 0 1
23896: PUSH
23897: LD_EXP 132
23901: IN
23902: NOT
23903: PUSH
23904: LD_VAR 0 2
23908: NOT
23909: OR
23910: IFFALSE 23914
// exit ;
23912: GO 24189
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23914: LD_ADDR_VAR 0 2
23918: PUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: LD_VAR 0 2
23928: PPUSH
23929: LD_INT 1
23931: PPUSH
23932: LD_INT 1
23934: PPUSH
23935: CALL 32006 0 4
23939: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23940: LD_ADDR_VAR 0 5
23944: PUSH
23945: LD_EXP 132
23949: PPUSH
23950: LD_VAR 0 1
23954: PPUSH
23955: CALL 31356 0 2
23959: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23960: LD_EXP 133
23964: PUSH
23965: LD_VAR 0 5
23969: ARRAY
23970: PUSH
23971: LD_EXP 134
23975: LESS
23976: IFFALSE 24165
// begin for i := 1 to vehicles do
23978: LD_ADDR_VAR 0 4
23982: PUSH
23983: DOUBLE
23984: LD_INT 1
23986: DEC
23987: ST_TO_ADDR
23988: LD_VAR 0 2
23992: PUSH
23993: FOR_TO
23994: IFFALSE 24163
// begin if hackTanksCaptured [ index ] = hackLimit then
23996: LD_EXP 133
24000: PUSH
24001: LD_VAR 0 5
24005: ARRAY
24006: PUSH
24007: LD_EXP 134
24011: EQUAL
24012: IFFALSE 24016
// break ;
24014: GO 24163
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24016: LD_ADDR_EXP 136
24020: PUSH
24021: LD_EXP 136
24025: PPUSH
24026: LD_VAR 0 5
24030: PPUSH
24031: LD_EXP 136
24035: PUSH
24036: LD_VAR 0 5
24040: ARRAY
24041: PUSH
24042: LD_INT 1
24044: PLUS
24045: PPUSH
24046: CALL_OW 1
24050: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24051: LD_ADDR_EXP 133
24055: PUSH
24056: LD_EXP 133
24060: PPUSH
24061: LD_VAR 0 5
24065: PUSH
24066: LD_EXP 133
24070: PUSH
24071: LD_VAR 0 5
24075: ARRAY
24076: PUSH
24077: LD_INT 1
24079: PLUS
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PPUSH
24085: LD_VAR 0 2
24089: PUSH
24090: LD_VAR 0 4
24094: ARRAY
24095: PUSH
24096: LD_VAR 0 2
24100: PUSH
24101: LD_VAR 0 4
24105: ARRAY
24106: PPUSH
24107: CALL_OW 255
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PPUSH
24116: CALL 31571 0 3
24120: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24121: LD_VAR 0 2
24125: PUSH
24126: LD_VAR 0 4
24130: ARRAY
24131: PPUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 255
24141: PPUSH
24142: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24146: LD_VAR 0 2
24150: PUSH
24151: LD_VAR 0 4
24155: ARRAY
24156: PPUSH
24157: CALL_OW 141
// end ;
24161: GO 23993
24163: POP
24164: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24165: LD_VAR 0 1
24169: PPUSH
24170: LD_EXP 133
24174: PUSH
24175: LD_VAR 0 5
24179: ARRAY
24180: PUSH
24181: LD_INT 0
24183: PLUS
24184: PPUSH
24185: CALL_OW 505
// end ;
24189: LD_VAR 0 3
24193: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24194: LD_INT 0
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
// if not hack in hackTanks then
24200: LD_VAR 0 1
24204: PUSH
24205: LD_EXP 132
24209: IN
24210: NOT
24211: IFFALSE 24215
// exit ;
24213: GO 24455
// index := GetElementIndex ( hackTanks , hack ) ;
24215: LD_ADDR_VAR 0 4
24219: PUSH
24220: LD_EXP 132
24224: PPUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL 31356 0 2
24234: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24235: LD_ADDR_VAR 0 3
24239: PUSH
24240: DOUBLE
24241: LD_EXP 133
24245: PUSH
24246: LD_VAR 0 4
24250: ARRAY
24251: INC
24252: ST_TO_ADDR
24253: LD_INT 1
24255: PUSH
24256: FOR_DOWNTO
24257: IFFALSE 24429
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24259: LD_ADDR_VAR 0 5
24263: PUSH
24264: LD_EXP 133
24268: PUSH
24269: LD_VAR 0 4
24273: ARRAY
24274: PUSH
24275: LD_VAR 0 3
24279: ARRAY
24280: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24281: LD_VAR 0 5
24285: PUSH
24286: LD_INT 1
24288: ARRAY
24289: PPUSH
24290: CALL_OW 302
24294: NOT
24295: PUSH
24296: LD_VAR 0 5
24300: PUSH
24301: LD_INT 1
24303: ARRAY
24304: PPUSH
24305: CALL_OW 255
24309: PUSH
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 255
24319: NONEQUAL
24320: OR
24321: IFFALSE 24427
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24323: LD_VAR 0 5
24327: PUSH
24328: LD_INT 1
24330: ARRAY
24331: PPUSH
24332: CALL_OW 305
24336: PUSH
24337: LD_VAR 0 5
24341: PUSH
24342: LD_INT 1
24344: ARRAY
24345: PPUSH
24346: CALL_OW 255
24350: PUSH
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL_OW 255
24360: EQUAL
24361: AND
24362: IFFALSE 24386
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24364: LD_VAR 0 5
24368: PUSH
24369: LD_INT 1
24371: ARRAY
24372: PPUSH
24373: LD_VAR 0 5
24377: PUSH
24378: LD_INT 2
24380: ARRAY
24381: PPUSH
24382: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24386: LD_ADDR_EXP 133
24390: PUSH
24391: LD_EXP 133
24395: PPUSH
24396: LD_VAR 0 4
24400: PPUSH
24401: LD_EXP 133
24405: PUSH
24406: LD_VAR 0 4
24410: ARRAY
24411: PPUSH
24412: LD_VAR 0 3
24416: PPUSH
24417: CALL_OW 3
24421: PPUSH
24422: CALL_OW 1
24426: ST_TO_ADDR
// end ; end ;
24427: GO 24256
24429: POP
24430: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24431: LD_VAR 0 1
24435: PPUSH
24436: LD_EXP 133
24440: PUSH
24441: LD_VAR 0 4
24445: ARRAY
24446: PUSH
24447: LD_INT 0
24449: PLUS
24450: PPUSH
24451: CALL_OW 505
// end ;
24455: LD_VAR 0 2
24459: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24460: LD_INT 0
24462: PPUSH
24463: PPUSH
24464: PPUSH
24465: PPUSH
// if not hack in hackTanks then
24466: LD_VAR 0 1
24470: PUSH
24471: LD_EXP 132
24475: IN
24476: NOT
24477: IFFALSE 24481
// exit ;
24479: GO 24566
// index := GetElementIndex ( hackTanks , hack ) ;
24481: LD_ADDR_VAR 0 5
24485: PUSH
24486: LD_EXP 132
24490: PPUSH
24491: LD_VAR 0 1
24495: PPUSH
24496: CALL 31356 0 2
24500: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24501: LD_ADDR_VAR 0 4
24505: PUSH
24506: DOUBLE
24507: LD_INT 1
24509: DEC
24510: ST_TO_ADDR
24511: LD_EXP 133
24515: PUSH
24516: LD_VAR 0 5
24520: ARRAY
24521: PUSH
24522: FOR_TO
24523: IFFALSE 24564
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24525: LD_EXP 133
24529: PUSH
24530: LD_VAR 0 5
24534: ARRAY
24535: PUSH
24536: LD_VAR 0 4
24540: ARRAY
24541: PUSH
24542: LD_INT 1
24544: ARRAY
24545: PUSH
24546: LD_VAR 0 2
24550: EQUAL
24551: IFFALSE 24562
// KillUnit ( vehicle ) ;
24553: LD_VAR 0 2
24557: PPUSH
24558: CALL_OW 66
24562: GO 24522
24564: POP
24565: POP
// end ;
24566: LD_VAR 0 3
24570: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24571: LD_EXP 137
24575: NOT
24576: IFFALSE 24611
24578: GO 24580
24580: DISABLE
// begin initMiner := true ;
24581: LD_ADDR_EXP 137
24585: PUSH
24586: LD_INT 1
24588: ST_TO_ADDR
// minersList := [ ] ;
24589: LD_ADDR_EXP 138
24593: PUSH
24594: EMPTY
24595: ST_TO_ADDR
// minerMinesList := [ ] ;
24596: LD_ADDR_EXP 139
24600: PUSH
24601: EMPTY
24602: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24603: LD_ADDR_EXP 140
24607: PUSH
24608: LD_INT 5
24610: ST_TO_ADDR
// end ;
24611: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24612: LD_EXP 137
24616: PUSH
24617: LD_INT 34
24619: PUSH
24620: LD_EXP 59
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PPUSH
24629: CALL_OW 69
24633: AND
24634: IFFALSE 25097
24636: GO 24638
24638: DISABLE
24639: LD_INT 0
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
// begin enable ;
24645: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: LD_INT 34
24653: PUSH
24654: LD_EXP 59
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PPUSH
24663: CALL_OW 69
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24741
// begin if not i in minersList then
24671: LD_VAR 0 1
24675: PUSH
24676: LD_EXP 138
24680: IN
24681: NOT
24682: IFFALSE 24739
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24684: LD_ADDR_EXP 138
24688: PUSH
24689: LD_EXP 138
24693: PPUSH
24694: LD_EXP 138
24698: PUSH
24699: LD_INT 1
24701: PLUS
24702: PPUSH
24703: LD_VAR 0 1
24707: PPUSH
24708: CALL_OW 1
24712: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24713: LD_ADDR_EXP 139
24717: PUSH
24718: LD_EXP 139
24722: PPUSH
24723: LD_EXP 139
24727: PUSH
24728: LD_INT 1
24730: PLUS
24731: PPUSH
24732: EMPTY
24733: PPUSH
24734: CALL_OW 1
24738: ST_TO_ADDR
// end end ;
24739: GO 24668
24741: POP
24742: POP
// for i := minerMinesList downto 1 do
24743: LD_ADDR_VAR 0 1
24747: PUSH
24748: DOUBLE
24749: LD_EXP 139
24753: INC
24754: ST_TO_ADDR
24755: LD_INT 1
24757: PUSH
24758: FOR_DOWNTO
24759: IFFALSE 25095
// begin if IsLive ( minersList [ i ] ) then
24761: LD_EXP 138
24765: PUSH
24766: LD_VAR 0 1
24770: ARRAY
24771: PPUSH
24772: CALL_OW 300
24776: IFFALSE 24804
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24778: LD_EXP 138
24782: PUSH
24783: LD_VAR 0 1
24787: ARRAY
24788: PPUSH
24789: LD_EXP 139
24793: PUSH
24794: LD_VAR 0 1
24798: ARRAY
24799: PPUSH
24800: CALL_OW 505
// if not minerMinesList [ i ] then
24804: LD_EXP 139
24808: PUSH
24809: LD_VAR 0 1
24813: ARRAY
24814: NOT
24815: IFFALSE 24819
// continue ;
24817: GO 24758
// for j := minerMinesList [ i ] downto 1 do
24819: LD_ADDR_VAR 0 2
24823: PUSH
24824: DOUBLE
24825: LD_EXP 139
24829: PUSH
24830: LD_VAR 0 1
24834: ARRAY
24835: INC
24836: ST_TO_ADDR
24837: LD_INT 1
24839: PUSH
24840: FOR_DOWNTO
24841: IFFALSE 25091
// begin side := GetSide ( minersList [ i ] ) ;
24843: LD_ADDR_VAR 0 3
24847: PUSH
24848: LD_EXP 138
24852: PUSH
24853: LD_VAR 0 1
24857: ARRAY
24858: PPUSH
24859: CALL_OW 255
24863: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24864: LD_ADDR_VAR 0 4
24868: PUSH
24869: LD_EXP 139
24873: PUSH
24874: LD_VAR 0 1
24878: ARRAY
24879: PUSH
24880: LD_VAR 0 2
24884: ARRAY
24885: PUSH
24886: LD_INT 1
24888: ARRAY
24889: PPUSH
24890: LD_EXP 139
24894: PUSH
24895: LD_VAR 0 1
24899: ARRAY
24900: PUSH
24901: LD_VAR 0 2
24905: ARRAY
24906: PUSH
24907: LD_INT 2
24909: ARRAY
24910: PPUSH
24911: CALL_OW 428
24915: ST_TO_ADDR
// if not tmp then
24916: LD_VAR 0 4
24920: NOT
24921: IFFALSE 24925
// continue ;
24923: GO 24840
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24925: LD_VAR 0 4
24929: PUSH
24930: LD_INT 81
24932: PUSH
24933: LD_VAR 0 3
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PPUSH
24942: CALL_OW 69
24946: IN
24947: PUSH
24948: LD_EXP 139
24952: PUSH
24953: LD_VAR 0 1
24957: ARRAY
24958: PUSH
24959: LD_VAR 0 2
24963: ARRAY
24964: PUSH
24965: LD_INT 1
24967: ARRAY
24968: PPUSH
24969: LD_EXP 139
24973: PUSH
24974: LD_VAR 0 1
24978: ARRAY
24979: PUSH
24980: LD_VAR 0 2
24984: ARRAY
24985: PUSH
24986: LD_INT 2
24988: ARRAY
24989: PPUSH
24990: CALL_OW 458
24994: AND
24995: IFFALSE 25089
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24997: LD_EXP 139
25001: PUSH
25002: LD_VAR 0 1
25006: ARRAY
25007: PUSH
25008: LD_VAR 0 2
25012: ARRAY
25013: PUSH
25014: LD_INT 1
25016: ARRAY
25017: PPUSH
25018: LD_EXP 139
25022: PUSH
25023: LD_VAR 0 1
25027: ARRAY
25028: PUSH
25029: LD_VAR 0 2
25033: ARRAY
25034: PUSH
25035: LD_INT 2
25037: ARRAY
25038: PPUSH
25039: LD_VAR 0 3
25043: PPUSH
25044: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25048: LD_ADDR_EXP 139
25052: PUSH
25053: LD_EXP 139
25057: PPUSH
25058: LD_VAR 0 1
25062: PPUSH
25063: LD_EXP 139
25067: PUSH
25068: LD_VAR 0 1
25072: ARRAY
25073: PPUSH
25074: LD_VAR 0 2
25078: PPUSH
25079: CALL_OW 3
25083: PPUSH
25084: CALL_OW 1
25088: ST_TO_ADDR
// end ; end ;
25089: GO 24840
25091: POP
25092: POP
// end ;
25093: GO 24758
25095: POP
25096: POP
// end ;
25097: PPOPN 4
25099: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
// result := false ;
25104: LD_ADDR_VAR 0 4
25108: PUSH
25109: LD_INT 0
25111: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 264
25121: PUSH
25122: LD_EXP 59
25126: EQUAL
25127: NOT
25128: IFFALSE 25132
// exit ;
25130: GO 25372
// index := GetElementIndex ( minersList , unit ) ;
25132: LD_ADDR_VAR 0 5
25136: PUSH
25137: LD_EXP 138
25141: PPUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL 31356 0 2
25151: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25152: LD_EXP 139
25156: PUSH
25157: LD_VAR 0 5
25161: ARRAY
25162: PUSH
25163: LD_EXP 140
25167: GREATEREQUAL
25168: IFFALSE 25172
// exit ;
25170: GO 25372
// ComMoveXY ( unit , x , y ) ;
25172: LD_VAR 0 1
25176: PPUSH
25177: LD_VAR 0 2
25181: PPUSH
25182: LD_VAR 0 3
25186: PPUSH
25187: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25191: LD_INT 35
25193: PPUSH
25194: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25198: LD_VAR 0 1
25202: PPUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_VAR 0 3
25212: PPUSH
25213: CALL 62128 0 3
25217: NOT
25218: PUSH
25219: LD_VAR 0 1
25223: PPUSH
25224: CALL_OW 314
25228: AND
25229: IFFALSE 25233
// exit ;
25231: GO 25372
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25233: LD_VAR 0 2
25237: PPUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: CALL_OW 428
25247: PUSH
25248: LD_VAR 0 1
25252: EQUAL
25253: PUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: CALL_OW 314
25263: NOT
25264: AND
25265: IFFALSE 25191
// PlaySoundXY ( x , y , PlantMine ) ;
25267: LD_VAR 0 2
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: LD_STRING PlantMine
25279: PPUSH
25280: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25284: LD_VAR 0 2
25288: PPUSH
25289: LD_VAR 0 3
25293: PPUSH
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 255
25303: PPUSH
25304: LD_INT 0
25306: PPUSH
25307: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25311: LD_ADDR_EXP 139
25315: PUSH
25316: LD_EXP 139
25320: PPUSH
25321: LD_VAR 0 5
25325: PUSH
25326: LD_EXP 139
25330: PUSH
25331: LD_VAR 0 5
25335: ARRAY
25336: PUSH
25337: LD_INT 1
25339: PLUS
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PPUSH
25345: LD_VAR 0 2
25349: PUSH
25350: LD_VAR 0 3
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PPUSH
25359: CALL 31571 0 3
25363: ST_TO_ADDR
// result := true ;
25364: LD_ADDR_VAR 0 4
25368: PUSH
25369: LD_INT 1
25371: ST_TO_ADDR
// end ;
25372: LD_VAR 0 4
25376: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25377: LD_INT 0
25379: PPUSH
25380: PPUSH
25381: PPUSH
// if not unit in minersList then
25382: LD_VAR 0 1
25386: PUSH
25387: LD_EXP 138
25391: IN
25392: NOT
25393: IFFALSE 25397
// exit ;
25395: GO 25789
// index := GetElementIndex ( minersList , unit ) ;
25397: LD_ADDR_VAR 0 6
25401: PUSH
25402: LD_EXP 138
25406: PPUSH
25407: LD_VAR 0 1
25411: PPUSH
25412: CALL 31356 0 2
25416: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25417: LD_ADDR_VAR 0 5
25421: PUSH
25422: DOUBLE
25423: LD_EXP 139
25427: PUSH
25428: LD_VAR 0 6
25432: ARRAY
25433: INC
25434: ST_TO_ADDR
25435: LD_INT 1
25437: PUSH
25438: FOR_DOWNTO
25439: IFFALSE 25600
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25441: LD_EXP 139
25445: PUSH
25446: LD_VAR 0 6
25450: ARRAY
25451: PUSH
25452: LD_VAR 0 5
25456: ARRAY
25457: PUSH
25458: LD_INT 1
25460: ARRAY
25461: PUSH
25462: LD_VAR 0 2
25466: EQUAL
25467: PUSH
25468: LD_EXP 139
25472: PUSH
25473: LD_VAR 0 6
25477: ARRAY
25478: PUSH
25479: LD_VAR 0 5
25483: ARRAY
25484: PUSH
25485: LD_INT 2
25487: ARRAY
25488: PUSH
25489: LD_VAR 0 3
25493: EQUAL
25494: AND
25495: IFFALSE 25598
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25497: LD_EXP 139
25501: PUSH
25502: LD_VAR 0 6
25506: ARRAY
25507: PUSH
25508: LD_VAR 0 5
25512: ARRAY
25513: PUSH
25514: LD_INT 1
25516: ARRAY
25517: PPUSH
25518: LD_EXP 139
25522: PUSH
25523: LD_VAR 0 6
25527: ARRAY
25528: PUSH
25529: LD_VAR 0 5
25533: ARRAY
25534: PUSH
25535: LD_INT 2
25537: ARRAY
25538: PPUSH
25539: LD_VAR 0 1
25543: PPUSH
25544: CALL_OW 255
25548: PPUSH
25549: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25553: LD_ADDR_EXP 139
25557: PUSH
25558: LD_EXP 139
25562: PPUSH
25563: LD_VAR 0 6
25567: PPUSH
25568: LD_EXP 139
25572: PUSH
25573: LD_VAR 0 6
25577: ARRAY
25578: PPUSH
25579: LD_VAR 0 5
25583: PPUSH
25584: CALL_OW 3
25588: PPUSH
25589: CALL_OW 1
25593: ST_TO_ADDR
// exit ;
25594: POP
25595: POP
25596: GO 25789
// end ; end ;
25598: GO 25438
25600: POP
25601: POP
// for i := minerMinesList [ index ] downto 1 do
25602: LD_ADDR_VAR 0 5
25606: PUSH
25607: DOUBLE
25608: LD_EXP 139
25612: PUSH
25613: LD_VAR 0 6
25617: ARRAY
25618: INC
25619: ST_TO_ADDR
25620: LD_INT 1
25622: PUSH
25623: FOR_DOWNTO
25624: IFFALSE 25787
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25626: LD_EXP 139
25630: PUSH
25631: LD_VAR 0 6
25635: ARRAY
25636: PUSH
25637: LD_VAR 0 5
25641: ARRAY
25642: PUSH
25643: LD_INT 1
25645: ARRAY
25646: PPUSH
25647: LD_EXP 139
25651: PUSH
25652: LD_VAR 0 6
25656: ARRAY
25657: PUSH
25658: LD_VAR 0 5
25662: ARRAY
25663: PUSH
25664: LD_INT 2
25666: ARRAY
25667: PPUSH
25668: LD_VAR 0 2
25672: PPUSH
25673: LD_VAR 0 3
25677: PPUSH
25678: CALL_OW 298
25682: PUSH
25683: LD_INT 6
25685: LESS
25686: IFFALSE 25785
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25688: LD_EXP 139
25692: PUSH
25693: LD_VAR 0 6
25697: ARRAY
25698: PUSH
25699: LD_VAR 0 5
25703: ARRAY
25704: PUSH
25705: LD_INT 1
25707: ARRAY
25708: PPUSH
25709: LD_EXP 139
25713: PUSH
25714: LD_VAR 0 6
25718: ARRAY
25719: PUSH
25720: LD_VAR 0 5
25724: ARRAY
25725: PUSH
25726: LD_INT 2
25728: ARRAY
25729: PPUSH
25730: LD_VAR 0 1
25734: PPUSH
25735: CALL_OW 255
25739: PPUSH
25740: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25744: LD_ADDR_EXP 139
25748: PUSH
25749: LD_EXP 139
25753: PPUSH
25754: LD_VAR 0 6
25758: PPUSH
25759: LD_EXP 139
25763: PUSH
25764: LD_VAR 0 6
25768: ARRAY
25769: PPUSH
25770: LD_VAR 0 5
25774: PPUSH
25775: CALL_OW 3
25779: PPUSH
25780: CALL_OW 1
25784: ST_TO_ADDR
// end ; end ;
25785: GO 25623
25787: POP
25788: POP
// end ;
25789: LD_VAR 0 4
25793: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25794: LD_INT 0
25796: PPUSH
25797: PPUSH
25798: PPUSH
25799: PPUSH
25800: PPUSH
25801: PPUSH
25802: PPUSH
25803: PPUSH
25804: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25805: LD_VAR 0 1
25809: PPUSH
25810: CALL_OW 264
25814: PUSH
25815: LD_EXP 59
25819: EQUAL
25820: NOT
25821: PUSH
25822: LD_VAR 0 1
25826: PUSH
25827: LD_EXP 138
25831: IN
25832: NOT
25833: OR
25834: IFFALSE 25838
// exit ;
25836: GO 26160
// index := GetElementIndex ( minersList , unit ) ;
25838: LD_ADDR_VAR 0 6
25842: PUSH
25843: LD_EXP 138
25847: PPUSH
25848: LD_VAR 0 1
25852: PPUSH
25853: CALL 31356 0 2
25857: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25858: LD_ADDR_VAR 0 8
25862: PUSH
25863: LD_EXP 140
25867: PUSH
25868: LD_EXP 139
25872: PUSH
25873: LD_VAR 0 6
25877: ARRAY
25878: MINUS
25879: ST_TO_ADDR
// if not minesFreeAmount then
25880: LD_VAR 0 8
25884: NOT
25885: IFFALSE 25889
// exit ;
25887: GO 26160
// tmp := [ ] ;
25889: LD_ADDR_VAR 0 7
25893: PUSH
25894: EMPTY
25895: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25896: LD_ADDR_VAR 0 5
25900: PUSH
25901: DOUBLE
25902: LD_INT 1
25904: DEC
25905: ST_TO_ADDR
25906: LD_VAR 0 8
25910: PUSH
25911: FOR_TO
25912: IFFALSE 26107
// begin _d := rand ( 0 , 5 ) ;
25914: LD_ADDR_VAR 0 11
25918: PUSH
25919: LD_INT 0
25921: PPUSH
25922: LD_INT 5
25924: PPUSH
25925: CALL_OW 12
25929: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25930: LD_ADDR_VAR 0 12
25934: PUSH
25935: LD_INT 2
25937: PPUSH
25938: LD_INT 6
25940: PPUSH
25941: CALL_OW 12
25945: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25946: LD_ADDR_VAR 0 9
25950: PUSH
25951: LD_VAR 0 2
25955: PPUSH
25956: LD_VAR 0 11
25960: PPUSH
25961: LD_VAR 0 12
25965: PPUSH
25966: CALL_OW 272
25970: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25971: LD_ADDR_VAR 0 10
25975: PUSH
25976: LD_VAR 0 3
25980: PPUSH
25981: LD_VAR 0 11
25985: PPUSH
25986: LD_VAR 0 12
25990: PPUSH
25991: CALL_OW 273
25995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25996: LD_VAR 0 9
26000: PPUSH
26001: LD_VAR 0 10
26005: PPUSH
26006: CALL_OW 488
26010: PUSH
26011: LD_VAR 0 9
26015: PUSH
26016: LD_VAR 0 10
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_VAR 0 7
26029: IN
26030: NOT
26031: AND
26032: PUSH
26033: LD_VAR 0 9
26037: PPUSH
26038: LD_VAR 0 10
26042: PPUSH
26043: CALL_OW 458
26047: NOT
26048: AND
26049: IFFALSE 26091
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26051: LD_ADDR_VAR 0 7
26055: PUSH
26056: LD_VAR 0 7
26060: PPUSH
26061: LD_VAR 0 7
26065: PUSH
26066: LD_INT 1
26068: PLUS
26069: PPUSH
26070: LD_VAR 0 9
26074: PUSH
26075: LD_VAR 0 10
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 1
26088: ST_TO_ADDR
26089: GO 26105
// i := i - 1 ;
26091: LD_ADDR_VAR 0 5
26095: PUSH
26096: LD_VAR 0 5
26100: PUSH
26101: LD_INT 1
26103: MINUS
26104: ST_TO_ADDR
// end ;
26105: GO 25911
26107: POP
26108: POP
// for i in tmp do
26109: LD_ADDR_VAR 0 5
26113: PUSH
26114: LD_VAR 0 7
26118: PUSH
26119: FOR_IN
26120: IFFALSE 26158
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_VAR 0 5
26131: PUSH
26132: LD_INT 1
26134: ARRAY
26135: PPUSH
26136: LD_VAR 0 5
26140: PUSH
26141: LD_INT 2
26143: ARRAY
26144: PPUSH
26145: CALL 25100 0 3
26149: NOT
26150: IFFALSE 26156
// exit ;
26152: POP
26153: POP
26154: GO 26160
26156: GO 26119
26158: POP
26159: POP
// end ;
26160: LD_VAR 0 4
26164: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26165: LD_INT 0
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
26171: PPUSH
26172: PPUSH
26173: PPUSH
// if not GetClass ( unit ) = class_sniper then
26174: LD_VAR 0 1
26178: PPUSH
26179: CALL_OW 257
26183: PUSH
26184: LD_INT 5
26186: EQUAL
26187: NOT
26188: IFFALSE 26192
// exit ;
26190: GO 26580
// dist := 8 ;
26192: LD_ADDR_VAR 0 5
26196: PUSH
26197: LD_INT 8
26199: ST_TO_ADDR
// viewRange := 12 ;
26200: LD_ADDR_VAR 0 7
26204: PUSH
26205: LD_INT 12
26207: ST_TO_ADDR
// side := GetSide ( unit ) ;
26208: LD_ADDR_VAR 0 6
26212: PUSH
26213: LD_VAR 0 1
26217: PPUSH
26218: CALL_OW 255
26222: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26223: LD_INT 61
26225: PPUSH
26226: LD_VAR 0 6
26230: PPUSH
26231: CALL_OW 321
26235: PUSH
26236: LD_INT 2
26238: EQUAL
26239: IFFALSE 26249
// viewRange := 16 ;
26241: LD_ADDR_VAR 0 7
26245: PUSH
26246: LD_INT 16
26248: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_VAR 0 2
26258: PPUSH
26259: LD_VAR 0 3
26263: PPUSH
26264: CALL_OW 297
26268: PUSH
26269: LD_VAR 0 5
26273: GREATER
26274: IFFALSE 26353
// begin ComMoveXY ( unit , x , y ) ;
26276: LD_VAR 0 1
26280: PPUSH
26281: LD_VAR 0 2
26285: PPUSH
26286: LD_VAR 0 3
26290: PPUSH
26291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26295: LD_INT 35
26297: PPUSH
26298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26302: LD_VAR 0 1
26306: PPUSH
26307: LD_VAR 0 2
26311: PPUSH
26312: LD_VAR 0 3
26316: PPUSH
26317: CALL 62128 0 3
26321: NOT
26322: IFFALSE 26326
// exit ;
26324: GO 26580
// until GetDistUnitXY ( unit , x , y ) < dist ;
26326: LD_VAR 0 1
26330: PPUSH
26331: LD_VAR 0 2
26335: PPUSH
26336: LD_VAR 0 3
26340: PPUSH
26341: CALL_OW 297
26345: PUSH
26346: LD_VAR 0 5
26350: LESS
26351: IFFALSE 26295
// end ; ComTurnXY ( unit , x , y ) ;
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_VAR 0 2
26362: PPUSH
26363: LD_VAR 0 3
26367: PPUSH
26368: CALL_OW 118
// wait ( 5 ) ;
26372: LD_INT 5
26374: PPUSH
26375: CALL_OW 67
// _d := GetDir ( unit ) ;
26379: LD_ADDR_VAR 0 10
26383: PUSH
26384: LD_VAR 0 1
26388: PPUSH
26389: CALL_OW 254
26393: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26394: LD_ADDR_VAR 0 8
26398: PUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 250
26408: PPUSH
26409: LD_VAR 0 10
26413: PPUSH
26414: LD_VAR 0 5
26418: PPUSH
26419: CALL_OW 272
26423: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26424: LD_ADDR_VAR 0 9
26428: PUSH
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 251
26438: PPUSH
26439: LD_VAR 0 10
26443: PPUSH
26444: LD_VAR 0 5
26448: PPUSH
26449: CALL_OW 273
26453: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26454: LD_VAR 0 8
26458: PPUSH
26459: LD_VAR 0 9
26463: PPUSH
26464: CALL_OW 488
26468: NOT
26469: IFFALSE 26473
// exit ;
26471: GO 26580
// ComAnimCustom ( unit , 1 ) ;
26473: LD_VAR 0 1
26477: PPUSH
26478: LD_INT 1
26480: PPUSH
26481: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26485: LD_VAR 0 8
26489: PPUSH
26490: LD_VAR 0 9
26494: PPUSH
26495: LD_VAR 0 6
26499: PPUSH
26500: LD_VAR 0 7
26504: PPUSH
26505: CALL_OW 330
// repeat wait ( 1 ) ;
26509: LD_INT 1
26511: PPUSH
26512: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26516: LD_VAR 0 1
26520: PPUSH
26521: CALL_OW 316
26525: PUSH
26526: LD_VAR 0 1
26530: PPUSH
26531: CALL_OW 314
26535: OR
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 302
26546: NOT
26547: OR
26548: PUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 301
26558: OR
26559: IFFALSE 26509
// RemoveSeeing ( _x , _y , side ) ;
26561: LD_VAR 0 8
26565: PPUSH
26566: LD_VAR 0 9
26570: PPUSH
26571: LD_VAR 0 6
26575: PPUSH
26576: CALL_OW 331
// end ; end_of_file
26580: LD_VAR 0 4
26584: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26585: LD_INT 0
26587: PPUSH
26588: PPUSH
// if exist_mode then
26589: LD_VAR 0 2
26593: IFFALSE 26618
// unit := CreateCharacter ( prefix & ident ) else
26595: LD_ADDR_VAR 0 5
26599: PUSH
26600: LD_VAR 0 3
26604: PUSH
26605: LD_VAR 0 1
26609: STR
26610: PPUSH
26611: CALL_OW 34
26615: ST_TO_ADDR
26616: GO 26633
// unit := NewCharacter ( ident ) ;
26618: LD_ADDR_VAR 0 5
26622: PUSH
26623: LD_VAR 0 1
26627: PPUSH
26628: CALL_OW 25
26632: ST_TO_ADDR
// result := unit ;
26633: LD_ADDR_VAR 0 4
26637: PUSH
26638: LD_VAR 0 5
26642: ST_TO_ADDR
// end ;
26643: LD_VAR 0 4
26647: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26648: LD_INT 0
26650: PPUSH
26651: PPUSH
// if not side or not nation then
26652: LD_VAR 0 1
26656: NOT
26657: PUSH
26658: LD_VAR 0 2
26662: NOT
26663: OR
26664: IFFALSE 26668
// exit ;
26666: GO 27436
// case nation of nation_american :
26668: LD_VAR 0 2
26672: PUSH
26673: LD_INT 1
26675: DOUBLE
26676: EQUAL
26677: IFTRUE 26681
26679: GO 26895
26681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26682: LD_ADDR_VAR 0 4
26686: PUSH
26687: LD_INT 35
26689: PUSH
26690: LD_INT 45
26692: PUSH
26693: LD_INT 46
26695: PUSH
26696: LD_INT 47
26698: PUSH
26699: LD_INT 82
26701: PUSH
26702: LD_INT 83
26704: PUSH
26705: LD_INT 84
26707: PUSH
26708: LD_INT 85
26710: PUSH
26711: LD_INT 86
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 6
26722: PUSH
26723: LD_INT 15
26725: PUSH
26726: LD_INT 16
26728: PUSH
26729: LD_INT 7
26731: PUSH
26732: LD_INT 12
26734: PUSH
26735: LD_INT 13
26737: PUSH
26738: LD_INT 10
26740: PUSH
26741: LD_INT 14
26743: PUSH
26744: LD_INT 20
26746: PUSH
26747: LD_INT 21
26749: PUSH
26750: LD_INT 22
26752: PUSH
26753: LD_INT 25
26755: PUSH
26756: LD_INT 32
26758: PUSH
26759: LD_INT 27
26761: PUSH
26762: LD_INT 36
26764: PUSH
26765: LD_INT 69
26767: PUSH
26768: LD_INT 39
26770: PUSH
26771: LD_INT 34
26773: PUSH
26774: LD_INT 40
26776: PUSH
26777: LD_INT 48
26779: PUSH
26780: LD_INT 49
26782: PUSH
26783: LD_INT 50
26785: PUSH
26786: LD_INT 51
26788: PUSH
26789: LD_INT 52
26791: PUSH
26792: LD_INT 53
26794: PUSH
26795: LD_INT 54
26797: PUSH
26798: LD_INT 55
26800: PUSH
26801: LD_INT 56
26803: PUSH
26804: LD_INT 57
26806: PUSH
26807: LD_INT 58
26809: PUSH
26810: LD_INT 59
26812: PUSH
26813: LD_INT 60
26815: PUSH
26816: LD_INT 61
26818: PUSH
26819: LD_INT 62
26821: PUSH
26822: LD_INT 80
26824: PUSH
26825: LD_INT 82
26827: PUSH
26828: LD_INT 83
26830: PUSH
26831: LD_INT 84
26833: PUSH
26834: LD_INT 85
26836: PUSH
26837: LD_INT 86
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
26893: GO 27360
26895: LD_INT 2
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 27129
26903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26904: LD_ADDR_VAR 0 4
26908: PUSH
26909: LD_INT 35
26911: PUSH
26912: LD_INT 45
26914: PUSH
26915: LD_INT 46
26917: PUSH
26918: LD_INT 47
26920: PUSH
26921: LD_INT 82
26923: PUSH
26924: LD_INT 83
26926: PUSH
26927: LD_INT 84
26929: PUSH
26930: LD_INT 85
26932: PUSH
26933: LD_INT 87
26935: PUSH
26936: LD_INT 70
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 11
26944: PUSH
26945: LD_INT 3
26947: PUSH
26948: LD_INT 4
26950: PUSH
26951: LD_INT 5
26953: PUSH
26954: LD_INT 6
26956: PUSH
26957: LD_INT 15
26959: PUSH
26960: LD_INT 18
26962: PUSH
26963: LD_INT 7
26965: PUSH
26966: LD_INT 17
26968: PUSH
26969: LD_INT 8
26971: PUSH
26972: LD_INT 20
26974: PUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 22
26980: PUSH
26981: LD_INT 72
26983: PUSH
26984: LD_INT 26
26986: PUSH
26987: LD_INT 69
26989: PUSH
26990: LD_INT 39
26992: PUSH
26993: LD_INT 40
26995: PUSH
26996: LD_INT 41
26998: PUSH
26999: LD_INT 42
27001: PUSH
27002: LD_INT 43
27004: PUSH
27005: LD_INT 48
27007: PUSH
27008: LD_INT 49
27010: PUSH
27011: LD_INT 50
27013: PUSH
27014: LD_INT 51
27016: PUSH
27017: LD_INT 52
27019: PUSH
27020: LD_INT 53
27022: PUSH
27023: LD_INT 54
27025: PUSH
27026: LD_INT 55
27028: PUSH
27029: LD_INT 56
27031: PUSH
27032: LD_INT 60
27034: PUSH
27035: LD_INT 61
27037: PUSH
27038: LD_INT 62
27040: PUSH
27041: LD_INT 66
27043: PUSH
27044: LD_INT 67
27046: PUSH
27047: LD_INT 68
27049: PUSH
27050: LD_INT 81
27052: PUSH
27053: LD_INT 82
27055: PUSH
27056: LD_INT 83
27058: PUSH
27059: LD_INT 84
27061: PUSH
27062: LD_INT 85
27064: PUSH
27065: LD_INT 87
27067: PUSH
27068: LD_INT 88
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: ST_TO_ADDR
27127: GO 27360
27129: LD_INT 3
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27137
27135: GO 27359
27137: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27138: LD_ADDR_VAR 0 4
27142: PUSH
27143: LD_INT 46
27145: PUSH
27146: LD_INT 47
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: LD_INT 82
27157: PUSH
27158: LD_INT 83
27160: PUSH
27161: LD_INT 84
27163: PUSH
27164: LD_INT 85
27166: PUSH
27167: LD_INT 86
27169: PUSH
27170: LD_INT 11
27172: PUSH
27173: LD_INT 9
27175: PUSH
27176: LD_INT 20
27178: PUSH
27179: LD_INT 19
27181: PUSH
27182: LD_INT 21
27184: PUSH
27185: LD_INT 24
27187: PUSH
27188: LD_INT 22
27190: PUSH
27191: LD_INT 25
27193: PUSH
27194: LD_INT 28
27196: PUSH
27197: LD_INT 29
27199: PUSH
27200: LD_INT 30
27202: PUSH
27203: LD_INT 31
27205: PUSH
27206: LD_INT 37
27208: PUSH
27209: LD_INT 38
27211: PUSH
27212: LD_INT 32
27214: PUSH
27215: LD_INT 27
27217: PUSH
27218: LD_INT 33
27220: PUSH
27221: LD_INT 69
27223: PUSH
27224: LD_INT 39
27226: PUSH
27227: LD_INT 34
27229: PUSH
27230: LD_INT 40
27232: PUSH
27233: LD_INT 71
27235: PUSH
27236: LD_INT 23
27238: PUSH
27239: LD_INT 44
27241: PUSH
27242: LD_INT 48
27244: PUSH
27245: LD_INT 49
27247: PUSH
27248: LD_INT 50
27250: PUSH
27251: LD_INT 51
27253: PUSH
27254: LD_INT 52
27256: PUSH
27257: LD_INT 53
27259: PUSH
27260: LD_INT 54
27262: PUSH
27263: LD_INT 55
27265: PUSH
27266: LD_INT 56
27268: PUSH
27269: LD_INT 57
27271: PUSH
27272: LD_INT 58
27274: PUSH
27275: LD_INT 59
27277: PUSH
27278: LD_INT 63
27280: PUSH
27281: LD_INT 64
27283: PUSH
27284: LD_INT 65
27286: PUSH
27287: LD_INT 82
27289: PUSH
27290: LD_INT 83
27292: PUSH
27293: LD_INT 84
27295: PUSH
27296: LD_INT 85
27298: PUSH
27299: LD_INT 86
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
27357: GO 27360
27359: POP
// if state > - 1 and state < 3 then
27360: LD_VAR 0 3
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: GREATER
27369: PUSH
27370: LD_VAR 0 3
27374: PUSH
27375: LD_INT 3
27377: LESS
27378: AND
27379: IFFALSE 27436
// for i in result do
27381: LD_ADDR_VAR 0 5
27385: PUSH
27386: LD_VAR 0 4
27390: PUSH
27391: FOR_IN
27392: IFFALSE 27434
// if GetTech ( i , side ) <> state then
27394: LD_VAR 0 5
27398: PPUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 321
27408: PUSH
27409: LD_VAR 0 3
27413: NONEQUAL
27414: IFFALSE 27432
// result := result diff i ;
27416: LD_ADDR_VAR 0 4
27420: PUSH
27421: LD_VAR 0 4
27425: PUSH
27426: LD_VAR 0 5
27430: DIFF
27431: ST_TO_ADDR
27432: GO 27391
27434: POP
27435: POP
// end ;
27436: LD_VAR 0 4
27440: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27441: LD_INT 0
27443: PPUSH
27444: PPUSH
27445: PPUSH
// result := true ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_INT 1
27453: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27454: LD_ADDR_VAR 0 5
27458: PUSH
27459: LD_VAR 0 2
27463: PPUSH
27464: CALL_OW 480
27468: ST_TO_ADDR
// if not tmp then
27469: LD_VAR 0 5
27473: NOT
27474: IFFALSE 27478
// exit ;
27476: GO 27527
// for i in tmp do
27478: LD_ADDR_VAR 0 4
27482: PUSH
27483: LD_VAR 0 5
27487: PUSH
27488: FOR_IN
27489: IFFALSE 27525
// if GetTech ( i , side ) <> state_researched then
27491: LD_VAR 0 4
27495: PPUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 321
27505: PUSH
27506: LD_INT 2
27508: NONEQUAL
27509: IFFALSE 27523
// begin result := false ;
27511: LD_ADDR_VAR 0 3
27515: PUSH
27516: LD_INT 0
27518: ST_TO_ADDR
// exit ;
27519: POP
27520: POP
27521: GO 27527
// end ;
27523: GO 27488
27525: POP
27526: POP
// end ;
27527: LD_VAR 0 3
27531: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27532: LD_INT 0
27534: PPUSH
27535: PPUSH
27536: PPUSH
27537: PPUSH
27538: PPUSH
27539: PPUSH
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27547: LD_VAR 0 1
27551: NOT
27552: PUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 257
27562: PUSH
27563: LD_INT 9
27565: NONEQUAL
27566: OR
27567: IFFALSE 27571
// exit ;
27569: GO 28144
// side := GetSide ( unit ) ;
27571: LD_ADDR_VAR 0 9
27575: PUSH
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 255
27585: ST_TO_ADDR
// tech_space := tech_spacanom ;
27586: LD_ADDR_VAR 0 12
27590: PUSH
27591: LD_INT 29
27593: ST_TO_ADDR
// tech_time := tech_taurad ;
27594: LD_ADDR_VAR 0 13
27598: PUSH
27599: LD_INT 28
27601: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27602: LD_ADDR_VAR 0 11
27606: PUSH
27607: LD_VAR 0 1
27611: PPUSH
27612: CALL_OW 310
27616: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27617: LD_VAR 0 11
27621: PPUSH
27622: CALL_OW 247
27626: PUSH
27627: LD_INT 2
27629: EQUAL
27630: IFFALSE 27634
// exit ;
27632: GO 28144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27634: LD_ADDR_VAR 0 8
27638: PUSH
27639: LD_INT 81
27641: PUSH
27642: LD_VAR 0 9
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 3
27653: PUSH
27654: LD_INT 21
27656: PUSH
27657: LD_INT 3
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 69
27676: ST_TO_ADDR
// if not tmp then
27677: LD_VAR 0 8
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 28144
// if in_unit then
27686: LD_VAR 0 11
27690: IFFALSE 27714
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27692: LD_ADDR_VAR 0 10
27696: PUSH
27697: LD_VAR 0 8
27701: PPUSH
27702: LD_VAR 0 11
27706: PPUSH
27707: CALL_OW 74
27711: ST_TO_ADDR
27712: GO 27734
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27714: LD_ADDR_VAR 0 10
27718: PUSH
27719: LD_VAR 0 8
27723: PPUSH
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL_OW 74
27733: ST_TO_ADDR
// if not enemy then
27734: LD_VAR 0 10
27738: NOT
27739: IFFALSE 27743
// exit ;
27741: GO 28144
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27743: LD_VAR 0 11
27747: PUSH
27748: LD_VAR 0 11
27752: PPUSH
27753: LD_VAR 0 10
27757: PPUSH
27758: CALL_OW 296
27762: PUSH
27763: LD_INT 13
27765: GREATER
27766: AND
27767: PUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: LD_VAR 0 10
27777: PPUSH
27778: CALL_OW 296
27782: PUSH
27783: LD_INT 12
27785: GREATER
27786: OR
27787: IFFALSE 27791
// exit ;
27789: GO 28144
// missile := [ 1 ] ;
27791: LD_ADDR_VAR 0 14
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27802: LD_VAR 0 9
27806: PPUSH
27807: LD_VAR 0 12
27811: PPUSH
27812: CALL_OW 325
27816: IFFALSE 27845
// missile := Insert ( missile , missile + 1 , 2 ) ;
27818: LD_ADDR_VAR 0 14
27822: PUSH
27823: LD_VAR 0 14
27827: PPUSH
27828: LD_VAR 0 14
27832: PUSH
27833: LD_INT 1
27835: PLUS
27836: PPUSH
27837: LD_INT 2
27839: PPUSH
27840: CALL_OW 2
27844: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27845: LD_VAR 0 9
27849: PPUSH
27850: LD_VAR 0 13
27854: PPUSH
27855: CALL_OW 325
27859: PUSH
27860: LD_VAR 0 10
27864: PPUSH
27865: CALL_OW 255
27869: PPUSH
27870: LD_VAR 0 13
27874: PPUSH
27875: CALL_OW 325
27879: NOT
27880: AND
27881: IFFALSE 27910
// missile := Insert ( missile , missile + 1 , 3 ) ;
27883: LD_ADDR_VAR 0 14
27887: PUSH
27888: LD_VAR 0 14
27892: PPUSH
27893: LD_VAR 0 14
27897: PUSH
27898: LD_INT 1
27900: PLUS
27901: PPUSH
27902: LD_INT 3
27904: PPUSH
27905: CALL_OW 2
27909: ST_TO_ADDR
// if missile < 2 then
27910: LD_VAR 0 14
27914: PUSH
27915: LD_INT 2
27917: LESS
27918: IFFALSE 27922
// exit ;
27920: GO 28144
// x := GetX ( enemy ) ;
27922: LD_ADDR_VAR 0 4
27926: PUSH
27927: LD_VAR 0 10
27931: PPUSH
27932: CALL_OW 250
27936: ST_TO_ADDR
// y := GetY ( enemy ) ;
27937: LD_ADDR_VAR 0 5
27941: PUSH
27942: LD_VAR 0 10
27946: PPUSH
27947: CALL_OW 251
27951: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27952: LD_ADDR_VAR 0 6
27956: PUSH
27957: LD_VAR 0 4
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PPUSH
27966: LD_INT 1
27968: PPUSH
27969: CALL_OW 12
27973: PLUS
27974: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27975: LD_ADDR_VAR 0 7
27979: PUSH
27980: LD_VAR 0 5
27984: PUSH
27985: LD_INT 1
27987: NEG
27988: PPUSH
27989: LD_INT 1
27991: PPUSH
27992: CALL_OW 12
27996: PLUS
27997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27998: LD_VAR 0 6
28002: PPUSH
28003: LD_VAR 0 7
28007: PPUSH
28008: CALL_OW 488
28012: NOT
28013: IFFALSE 28035
// begin _x := x ;
28015: LD_ADDR_VAR 0 6
28019: PUSH
28020: LD_VAR 0 4
28024: ST_TO_ADDR
// _y := y ;
28025: LD_ADDR_VAR 0 7
28029: PUSH
28030: LD_VAR 0 5
28034: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28035: LD_ADDR_VAR 0 3
28039: PUSH
28040: LD_INT 1
28042: PPUSH
28043: LD_VAR 0 14
28047: PPUSH
28048: CALL_OW 12
28052: ST_TO_ADDR
// case i of 1 :
28053: LD_VAR 0 3
28057: PUSH
28058: LD_INT 1
28060: DOUBLE
28061: EQUAL
28062: IFTRUE 28066
28064: GO 28083
28066: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28067: LD_VAR 0 1
28071: PPUSH
28072: LD_VAR 0 10
28076: PPUSH
28077: CALL_OW 115
28081: GO 28144
28083: LD_INT 2
28085: DOUBLE
28086: EQUAL
28087: IFTRUE 28091
28089: GO 28113
28091: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28092: LD_VAR 0 1
28096: PPUSH
28097: LD_VAR 0 6
28101: PPUSH
28102: LD_VAR 0 7
28106: PPUSH
28107: CALL_OW 153
28111: GO 28144
28113: LD_INT 3
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28121
28119: GO 28143
28121: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28122: LD_VAR 0 1
28126: PPUSH
28127: LD_VAR 0 6
28131: PPUSH
28132: LD_VAR 0 7
28136: PPUSH
28137: CALL_OW 154
28141: GO 28144
28143: POP
// end ;
28144: LD_VAR 0 2
28148: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28149: LD_INT 0
28151: PPUSH
28152: PPUSH
28153: PPUSH
28154: PPUSH
28155: PPUSH
28156: PPUSH
// if not unit or not building then
28157: LD_VAR 0 1
28161: NOT
28162: PUSH
28163: LD_VAR 0 2
28167: NOT
28168: OR
28169: IFFALSE 28173
// exit ;
28171: GO 28331
// x := GetX ( building ) ;
28173: LD_ADDR_VAR 0 5
28177: PUSH
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 250
28187: ST_TO_ADDR
// y := GetY ( building ) ;
28188: LD_ADDR_VAR 0 6
28192: PUSH
28193: LD_VAR 0 2
28197: PPUSH
28198: CALL_OW 251
28202: ST_TO_ADDR
// for i = 0 to 5 do
28203: LD_ADDR_VAR 0 4
28207: PUSH
28208: DOUBLE
28209: LD_INT 0
28211: DEC
28212: ST_TO_ADDR
28213: LD_INT 5
28215: PUSH
28216: FOR_TO
28217: IFFALSE 28329
// begin _x := ShiftX ( x , i , 3 ) ;
28219: LD_ADDR_VAR 0 7
28223: PUSH
28224: LD_VAR 0 5
28228: PPUSH
28229: LD_VAR 0 4
28233: PPUSH
28234: LD_INT 3
28236: PPUSH
28237: CALL_OW 272
28241: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28242: LD_ADDR_VAR 0 8
28246: PUSH
28247: LD_VAR 0 6
28251: PPUSH
28252: LD_VAR 0 4
28256: PPUSH
28257: LD_INT 3
28259: PPUSH
28260: CALL_OW 273
28264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28265: LD_VAR 0 7
28269: PPUSH
28270: LD_VAR 0 8
28274: PPUSH
28275: CALL_OW 488
28279: NOT
28280: IFFALSE 28284
// continue ;
28282: GO 28216
// if HexInfo ( _x , _y ) = 0 then
28284: LD_VAR 0 7
28288: PPUSH
28289: LD_VAR 0 8
28293: PPUSH
28294: CALL_OW 428
28298: PUSH
28299: LD_INT 0
28301: EQUAL
28302: IFFALSE 28327
// begin ComMoveXY ( unit , _x , _y ) ;
28304: LD_VAR 0 1
28308: PPUSH
28309: LD_VAR 0 7
28313: PPUSH
28314: LD_VAR 0 8
28318: PPUSH
28319: CALL_OW 111
// exit ;
28323: POP
28324: POP
28325: GO 28331
// end ; end ;
28327: GO 28216
28329: POP
28330: POP
// end ;
28331: LD_VAR 0 3
28335: RET
// export function ScanBase ( side , base_area ) ; begin
28336: LD_INT 0
28338: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28339: LD_ADDR_VAR 0 3
28343: PUSH
28344: LD_VAR 0 2
28348: PPUSH
28349: LD_INT 81
28351: PUSH
28352: LD_VAR 0 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 70
28365: ST_TO_ADDR
// end ;
28366: LD_VAR 0 3
28370: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28371: LD_INT 0
28373: PPUSH
28374: PPUSH
28375: PPUSH
28376: PPUSH
// result := false ;
28377: LD_ADDR_VAR 0 2
28381: PUSH
28382: LD_INT 0
28384: ST_TO_ADDR
// side := GetSide ( unit ) ;
28385: LD_ADDR_VAR 0 3
28389: PUSH
28390: LD_VAR 0 1
28394: PPUSH
28395: CALL_OW 255
28399: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28400: LD_ADDR_VAR 0 4
28404: PUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL_OW 248
28414: ST_TO_ADDR
// case nat of 1 :
28415: LD_VAR 0 4
28419: PUSH
28420: LD_INT 1
28422: DOUBLE
28423: EQUAL
28424: IFTRUE 28428
28426: GO 28439
28428: POP
// tech := tech_lassight ; 2 :
28429: LD_ADDR_VAR 0 5
28433: PUSH
28434: LD_INT 12
28436: ST_TO_ADDR
28437: GO 28478
28439: LD_INT 2
28441: DOUBLE
28442: EQUAL
28443: IFTRUE 28447
28445: GO 28458
28447: POP
// tech := tech_mortar ; 3 :
28448: LD_ADDR_VAR 0 5
28452: PUSH
28453: LD_INT 41
28455: ST_TO_ADDR
28456: GO 28478
28458: LD_INT 3
28460: DOUBLE
28461: EQUAL
28462: IFTRUE 28466
28464: GO 28477
28466: POP
// tech := tech_bazooka ; end ;
28467: LD_ADDR_VAR 0 5
28471: PUSH
28472: LD_INT 44
28474: ST_TO_ADDR
28475: GO 28478
28477: POP
// if Researched ( side , tech ) then
28478: LD_VAR 0 3
28482: PPUSH
28483: LD_VAR 0 5
28487: PPUSH
28488: CALL_OW 325
28492: IFFALSE 28519
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28494: LD_ADDR_VAR 0 2
28498: PUSH
28499: LD_INT 5
28501: PUSH
28502: LD_INT 8
28504: PUSH
28505: LD_INT 9
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: PUSH
28513: LD_VAR 0 4
28517: ARRAY
28518: ST_TO_ADDR
// end ;
28519: LD_VAR 0 2
28523: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28524: LD_INT 0
28526: PPUSH
28527: PPUSH
28528: PPUSH
// if not mines then
28529: LD_VAR 0 2
28533: NOT
28534: IFFALSE 28538
// exit ;
28536: GO 28682
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28538: LD_ADDR_VAR 0 5
28542: PUSH
28543: LD_INT 81
28545: PUSH
28546: LD_VAR 0 1
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 3
28557: PUSH
28558: LD_INT 21
28560: PUSH
28561: LD_INT 3
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PPUSH
28576: CALL_OW 69
28580: ST_TO_ADDR
// for i in mines do
28581: LD_ADDR_VAR 0 4
28585: PUSH
28586: LD_VAR 0 2
28590: PUSH
28591: FOR_IN
28592: IFFALSE 28680
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28594: LD_VAR 0 4
28598: PUSH
28599: LD_INT 1
28601: ARRAY
28602: PPUSH
28603: LD_VAR 0 4
28607: PUSH
28608: LD_INT 2
28610: ARRAY
28611: PPUSH
28612: CALL_OW 458
28616: NOT
28617: IFFALSE 28621
// continue ;
28619: GO 28591
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28621: LD_VAR 0 4
28625: PUSH
28626: LD_INT 1
28628: ARRAY
28629: PPUSH
28630: LD_VAR 0 4
28634: PUSH
28635: LD_INT 2
28637: ARRAY
28638: PPUSH
28639: CALL_OW 428
28643: PUSH
28644: LD_VAR 0 5
28648: IN
28649: IFFALSE 28678
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28651: LD_VAR 0 4
28655: PUSH
28656: LD_INT 1
28658: ARRAY
28659: PPUSH
28660: LD_VAR 0 4
28664: PUSH
28665: LD_INT 2
28667: ARRAY
28668: PPUSH
28669: LD_VAR 0 1
28673: PPUSH
28674: CALL_OW 456
// end ;
28678: GO 28591
28680: POP
28681: POP
// end ;
28682: LD_VAR 0 3
28686: RET
// export function Count ( array ) ; var i ; begin
28687: LD_INT 0
28689: PPUSH
28690: PPUSH
// result := 0 ;
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: LD_INT 0
28698: ST_TO_ADDR
// for i in array do
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_VAR 0 1
28708: PUSH
28709: FOR_IN
28710: IFFALSE 28734
// if i then
28712: LD_VAR 0 3
28716: IFFALSE 28732
// result := result + 1 ;
28718: LD_ADDR_VAR 0 2
28722: PUSH
28723: LD_VAR 0 2
28727: PUSH
28728: LD_INT 1
28730: PLUS
28731: ST_TO_ADDR
28732: GO 28709
28734: POP
28735: POP
// end ;
28736: LD_VAR 0 2
28740: RET
// export function IsEmpty ( building ) ; begin
28741: LD_INT 0
28743: PPUSH
// if not building then
28744: LD_VAR 0 1
28748: NOT
28749: IFFALSE 28753
// exit ;
28751: GO 28796
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28753: LD_ADDR_VAR 0 2
28757: PUSH
28758: LD_VAR 0 1
28762: PUSH
28763: LD_INT 22
28765: PUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 255
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 58
28782: PUSH
28783: EMPTY
28784: LIST
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PPUSH
28790: CALL_OW 69
28794: IN
28795: ST_TO_ADDR
// end ;
28796: LD_VAR 0 2
28800: RET
// export function IsNotFull ( building ) ; begin
28801: LD_INT 0
28803: PPUSH
// if not building then
28804: LD_VAR 0 1
28808: NOT
28809: IFFALSE 28813
// exit ;
28811: GO 28832
// result := UnitsInside ( building ) < 6 ;
28813: LD_ADDR_VAR 0 2
28817: PUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL_OW 313
28827: PUSH
28828: LD_INT 6
28830: LESS
28831: ST_TO_ADDR
// end ;
28832: LD_VAR 0 2
28836: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28837: LD_INT 0
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
// tmp := [ ] ;
28843: LD_ADDR_VAR 0 3
28847: PUSH
28848: EMPTY
28849: ST_TO_ADDR
// list := [ ] ;
28850: LD_ADDR_VAR 0 5
28854: PUSH
28855: EMPTY
28856: ST_TO_ADDR
// for i = 16 to 25 do
28857: LD_ADDR_VAR 0 4
28861: PUSH
28862: DOUBLE
28863: LD_INT 16
28865: DEC
28866: ST_TO_ADDR
28867: LD_INT 25
28869: PUSH
28870: FOR_TO
28871: IFFALSE 28944
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28873: LD_ADDR_VAR 0 3
28877: PUSH
28878: LD_VAR 0 3
28882: PUSH
28883: LD_INT 22
28885: PUSH
28886: LD_VAR 0 1
28890: PPUSH
28891: CALL_OW 255
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 91
28902: PUSH
28903: LD_VAR 0 1
28907: PUSH
28908: LD_INT 6
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 30
28918: PUSH
28919: LD_VAR 0 4
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: PPUSH
28936: CALL_OW 69
28940: ADD
28941: ST_TO_ADDR
28942: GO 28870
28944: POP
28945: POP
// for i = 1 to tmp do
28946: LD_ADDR_VAR 0 4
28950: PUSH
28951: DOUBLE
28952: LD_INT 1
28954: DEC
28955: ST_TO_ADDR
28956: LD_VAR 0 3
28960: PUSH
28961: FOR_TO
28962: IFFALSE 29050
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28964: LD_ADDR_VAR 0 5
28968: PUSH
28969: LD_VAR 0 5
28973: PUSH
28974: LD_VAR 0 3
28978: PUSH
28979: LD_VAR 0 4
28983: ARRAY
28984: PPUSH
28985: CALL_OW 266
28989: PUSH
28990: LD_VAR 0 3
28994: PUSH
28995: LD_VAR 0 4
28999: ARRAY
29000: PPUSH
29001: CALL_OW 250
29005: PUSH
29006: LD_VAR 0 3
29010: PUSH
29011: LD_VAR 0 4
29015: ARRAY
29016: PPUSH
29017: CALL_OW 251
29021: PUSH
29022: LD_VAR 0 3
29026: PUSH
29027: LD_VAR 0 4
29031: ARRAY
29032: PPUSH
29033: CALL_OW 254
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: ADD
29047: ST_TO_ADDR
29048: GO 28961
29050: POP
29051: POP
// result := list ;
29052: LD_ADDR_VAR 0 2
29056: PUSH
29057: LD_VAR 0 5
29061: ST_TO_ADDR
// end ;
29062: LD_VAR 0 2
29066: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29067: LD_INT 0
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
// if not factory then
29076: LD_VAR 0 1
29080: NOT
29081: IFFALSE 29085
// exit ;
29083: GO 29678
// if control = control_apeman then
29085: LD_VAR 0 4
29089: PUSH
29090: LD_INT 5
29092: EQUAL
29093: IFFALSE 29202
// begin tmp := UnitsInside ( factory ) ;
29095: LD_ADDR_VAR 0 8
29099: PUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 313
29109: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29110: LD_VAR 0 8
29114: PPUSH
29115: LD_INT 25
29117: PUSH
29118: LD_INT 12
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PPUSH
29125: CALL_OW 72
29129: NOT
29130: IFFALSE 29140
// control := control_manual ;
29132: LD_ADDR_VAR 0 4
29136: PUSH
29137: LD_INT 1
29139: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29140: LD_ADDR_VAR 0 8
29144: PUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL 28837 0 1
29154: ST_TO_ADDR
// if tmp then
29155: LD_VAR 0 8
29159: IFFALSE 29202
// begin for i in tmp do
29161: LD_ADDR_VAR 0 7
29165: PUSH
29166: LD_VAR 0 8
29170: PUSH
29171: FOR_IN
29172: IFFALSE 29200
// if i [ 1 ] = b_ext_radio then
29174: LD_VAR 0 7
29178: PUSH
29179: LD_INT 1
29181: ARRAY
29182: PUSH
29183: LD_INT 22
29185: EQUAL
29186: IFFALSE 29198
// begin control := control_remote ;
29188: LD_ADDR_VAR 0 4
29192: PUSH
29193: LD_INT 2
29195: ST_TO_ADDR
// break ;
29196: GO 29200
// end ;
29198: GO 29171
29200: POP
29201: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29202: LD_VAR 0 1
29206: PPUSH
29207: LD_VAR 0 2
29211: PPUSH
29212: LD_VAR 0 3
29216: PPUSH
29217: LD_VAR 0 4
29221: PPUSH
29222: LD_VAR 0 5
29226: PPUSH
29227: CALL_OW 448
29231: IFFALSE 29266
// begin result := [ chassis , engine , control , weapon ] ;
29233: LD_ADDR_VAR 0 6
29237: PUSH
29238: LD_VAR 0 2
29242: PUSH
29243: LD_VAR 0 3
29247: PUSH
29248: LD_VAR 0 4
29252: PUSH
29253: LD_VAR 0 5
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// exit ;
29264: GO 29678
// end ; _chassis := AvailableChassisList ( factory ) ;
29266: LD_ADDR_VAR 0 9
29270: PUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: CALL_OW 475
29280: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29281: LD_ADDR_VAR 0 11
29285: PUSH
29286: LD_VAR 0 1
29290: PPUSH
29291: CALL_OW 476
29295: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29296: LD_ADDR_VAR 0 12
29300: PUSH
29301: LD_VAR 0 1
29305: PPUSH
29306: CALL_OW 477
29310: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29311: LD_ADDR_VAR 0 10
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 478
29325: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29326: LD_VAR 0 9
29330: NOT
29331: PUSH
29332: LD_VAR 0 11
29336: NOT
29337: OR
29338: PUSH
29339: LD_VAR 0 12
29343: NOT
29344: OR
29345: PUSH
29346: LD_VAR 0 10
29350: NOT
29351: OR
29352: IFFALSE 29387
// begin result := [ chassis , engine , control , weapon ] ;
29354: LD_ADDR_VAR 0 6
29358: PUSH
29359: LD_VAR 0 2
29363: PUSH
29364: LD_VAR 0 3
29368: PUSH
29369: LD_VAR 0 4
29373: PUSH
29374: LD_VAR 0 5
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: ST_TO_ADDR
// exit ;
29385: GO 29678
// end ; if not chassis in _chassis then
29387: LD_VAR 0 2
29391: PUSH
29392: LD_VAR 0 9
29396: IN
29397: NOT
29398: IFFALSE 29424
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 9
29409: PUSH
29410: LD_INT 1
29412: PPUSH
29413: LD_VAR 0 9
29417: PPUSH
29418: CALL_OW 12
29422: ARRAY
29423: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29424: LD_VAR 0 2
29428: PPUSH
29429: LD_VAR 0 3
29433: PPUSH
29434: CALL 29683 0 2
29438: NOT
29439: IFFALSE 29498
// repeat engine := _engine [ 1 ] ;
29441: LD_ADDR_VAR 0 3
29445: PUSH
29446: LD_VAR 0 11
29450: PUSH
29451: LD_INT 1
29453: ARRAY
29454: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29455: LD_ADDR_VAR 0 11
29459: PUSH
29460: LD_VAR 0 11
29464: PPUSH
29465: LD_INT 1
29467: PPUSH
29468: CALL_OW 3
29472: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29473: LD_VAR 0 2
29477: PPUSH
29478: LD_VAR 0 3
29482: PPUSH
29483: CALL 29683 0 2
29487: PUSH
29488: LD_VAR 0 11
29492: PUSH
29493: EMPTY
29494: EQUAL
29495: OR
29496: IFFALSE 29441
// if not control in _control then
29498: LD_VAR 0 4
29502: PUSH
29503: LD_VAR 0 12
29507: IN
29508: NOT
29509: IFFALSE 29535
// control := _control [ rand ( 1 , _control ) ] ;
29511: LD_ADDR_VAR 0 4
29515: PUSH
29516: LD_VAR 0 12
29520: PUSH
29521: LD_INT 1
29523: PPUSH
29524: LD_VAR 0 12
29528: PPUSH
29529: CALL_OW 12
29533: ARRAY
29534: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29535: LD_VAR 0 2
29539: PPUSH
29540: LD_VAR 0 5
29544: PPUSH
29545: CALL 29903 0 2
29549: NOT
29550: IFFALSE 29609
// repeat weapon := _weapon [ 1 ] ;
29552: LD_ADDR_VAR 0 5
29556: PUSH
29557: LD_VAR 0 10
29561: PUSH
29562: LD_INT 1
29564: ARRAY
29565: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29566: LD_ADDR_VAR 0 10
29570: PUSH
29571: LD_VAR 0 10
29575: PPUSH
29576: LD_INT 1
29578: PPUSH
29579: CALL_OW 3
29583: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29584: LD_VAR 0 2
29588: PPUSH
29589: LD_VAR 0 5
29593: PPUSH
29594: CALL 29903 0 2
29598: PUSH
29599: LD_VAR 0 10
29603: PUSH
29604: EMPTY
29605: EQUAL
29606: OR
29607: IFFALSE 29552
// result := [ ] ;
29609: LD_ADDR_VAR 0 6
29613: PUSH
29614: EMPTY
29615: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29616: LD_VAR 0 1
29620: PPUSH
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_VAR 0 3
29630: PPUSH
29631: LD_VAR 0 4
29635: PPUSH
29636: LD_VAR 0 5
29640: PPUSH
29641: CALL_OW 448
29645: IFFALSE 29678
// result := [ chassis , engine , control , weapon ] ;
29647: LD_ADDR_VAR 0 6
29651: PUSH
29652: LD_VAR 0 2
29656: PUSH
29657: LD_VAR 0 3
29661: PUSH
29662: LD_VAR 0 4
29666: PUSH
29667: LD_VAR 0 5
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
// end ;
29678: LD_VAR 0 6
29682: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29683: LD_INT 0
29685: PPUSH
// if not chassis or not engine then
29686: LD_VAR 0 1
29690: NOT
29691: PUSH
29692: LD_VAR 0 2
29696: NOT
29697: OR
29698: IFFALSE 29702
// exit ;
29700: GO 29898
// case engine of engine_solar :
29702: LD_VAR 0 2
29706: PUSH
29707: LD_INT 2
29709: DOUBLE
29710: EQUAL
29711: IFTRUE 29715
29713: GO 29753
29715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29716: LD_ADDR_VAR 0 3
29720: PUSH
29721: LD_INT 11
29723: PUSH
29724: LD_INT 12
29726: PUSH
29727: LD_INT 13
29729: PUSH
29730: LD_INT 14
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: ST_TO_ADDR
29751: GO 29882
29753: LD_INT 1
29755: DOUBLE
29756: EQUAL
29757: IFTRUE 29761
29759: GO 29823
29761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29762: LD_ADDR_VAR 0 3
29766: PUSH
29767: LD_INT 11
29769: PUSH
29770: LD_INT 12
29772: PUSH
29773: LD_INT 13
29775: PUSH
29776: LD_INT 14
29778: PUSH
29779: LD_INT 1
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: LD_INT 5
29793: PUSH
29794: LD_INT 21
29796: PUSH
29797: LD_INT 23
29799: PUSH
29800: LD_INT 22
29802: PUSH
29803: LD_INT 24
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
29821: GO 29882
29823: LD_INT 3
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29881
29831: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 13
29839: PUSH
29840: LD_INT 14
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: LD_INT 3
29848: PUSH
29849: LD_INT 4
29851: PUSH
29852: LD_INT 5
29854: PUSH
29855: LD_INT 21
29857: PUSH
29858: LD_INT 22
29860: PUSH
29861: LD_INT 23
29863: PUSH
29864: LD_INT 24
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
29879: GO 29882
29881: POP
// result := ( chassis in result ) ;
29882: LD_ADDR_VAR 0 3
29886: PUSH
29887: LD_VAR 0 1
29891: PUSH
29892: LD_VAR 0 3
29896: IN
29897: ST_TO_ADDR
// end ;
29898: LD_VAR 0 3
29902: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29903: LD_INT 0
29905: PPUSH
// if not chassis or not weapon then
29906: LD_VAR 0 1
29910: NOT
29911: PUSH
29912: LD_VAR 0 2
29916: NOT
29917: OR
29918: IFFALSE 29922
// exit ;
29920: GO 30984
// case weapon of us_machine_gun :
29922: LD_VAR 0 2
29926: PUSH
29927: LD_INT 2
29929: DOUBLE
29930: EQUAL
29931: IFTRUE 29935
29933: GO 29965
29935: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 2
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: LD_INT 4
29952: PUSH
29953: LD_INT 5
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
29963: GO 30968
29965: LD_INT 3
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 30003
29973: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29974: LD_ADDR_VAR 0 3
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: LD_INT 4
29990: PUSH
29991: LD_INT 5
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
30001: GO 30968
30003: LD_INT 11
30005: DOUBLE
30006: EQUAL
30007: IFTRUE 30011
30009: GO 30041
30011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30012: LD_ADDR_VAR 0 3
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: LD_INT 5
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: ST_TO_ADDR
30039: GO 30968
30041: LD_INT 4
30043: DOUBLE
30044: EQUAL
30045: IFTRUE 30049
30047: GO 30075
30049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30050: LD_ADDR_VAR 0 3
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: LD_INT 4
30063: PUSH
30064: LD_INT 5
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: ST_TO_ADDR
30073: GO 30968
30075: LD_INT 5
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30109
30083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30084: LD_ADDR_VAR 0 3
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: LD_INT 4
30097: PUSH
30098: LD_INT 5
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: ST_TO_ADDR
30107: GO 30968
30109: LD_INT 9
30111: DOUBLE
30112: EQUAL
30113: IFTRUE 30117
30115: GO 30143
30117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30118: LD_ADDR_VAR 0 3
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: LD_INT 4
30131: PUSH
30132: LD_INT 5
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: ST_TO_ADDR
30141: GO 30968
30143: LD_INT 7
30145: DOUBLE
30146: EQUAL
30147: IFTRUE 30151
30149: GO 30177
30151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 4
30165: PUSH
30166: LD_INT 5
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: ST_TO_ADDR
30175: GO 30968
30177: LD_INT 12
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30211
30185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: LD_INT 3
30196: PUSH
30197: LD_INT 4
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
30209: GO 30968
30211: LD_INT 13
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30245
30219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30220: LD_ADDR_VAR 0 3
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: LD_INT 3
30230: PUSH
30231: LD_INT 4
30233: PUSH
30234: LD_INT 5
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
30243: GO 30968
30245: LD_INT 14
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30271
30253: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30254: LD_ADDR_VAR 0 3
30258: PUSH
30259: LD_INT 4
30261: PUSH
30262: LD_INT 5
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: ST_TO_ADDR
30269: GO 30968
30271: LD_INT 6
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30297
30279: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30280: LD_ADDR_VAR 0 3
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: LD_INT 5
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: ST_TO_ADDR
30295: GO 30968
30297: LD_INT 10
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30323
30305: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30306: LD_ADDR_VAR 0 3
30310: PUSH
30311: LD_INT 4
30313: PUSH
30314: LD_INT 5
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: ST_TO_ADDR
30321: GO 30968
30323: LD_INT 22
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30357
30331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30332: LD_ADDR_VAR 0 3
30336: PUSH
30337: LD_INT 11
30339: PUSH
30340: LD_INT 12
30342: PUSH
30343: LD_INT 13
30345: PUSH
30346: LD_INT 14
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
30355: GO 30968
30357: LD_INT 23
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30391
30365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30366: LD_ADDR_VAR 0 3
30370: PUSH
30371: LD_INT 11
30373: PUSH
30374: LD_INT 12
30376: PUSH
30377: LD_INT 13
30379: PUSH
30380: LD_INT 14
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
30389: GO 30968
30391: LD_INT 24
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30399
30397: GO 30425
30399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_INT 11
30407: PUSH
30408: LD_INT 12
30410: PUSH
30411: LD_INT 13
30413: PUSH
30414: LD_INT 14
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
30423: GO 30968
30425: LD_INT 30
30427: DOUBLE
30428: EQUAL
30429: IFTRUE 30433
30431: GO 30459
30433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30434: LD_ADDR_VAR 0 3
30438: PUSH
30439: LD_INT 11
30441: PUSH
30442: LD_INT 12
30444: PUSH
30445: LD_INT 13
30447: PUSH
30448: LD_INT 14
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
30457: GO 30968
30459: LD_INT 25
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 30485
30467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30468: LD_ADDR_VAR 0 3
30472: PUSH
30473: LD_INT 13
30475: PUSH
30476: LD_INT 14
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: ST_TO_ADDR
30483: GO 30968
30485: LD_INT 27
30487: DOUBLE
30488: EQUAL
30489: IFTRUE 30493
30491: GO 30511
30493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30494: LD_ADDR_VAR 0 3
30498: PUSH
30499: LD_INT 13
30501: PUSH
30502: LD_INT 14
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: ST_TO_ADDR
30509: GO 30968
30511: LD_EXP 57
30515: DOUBLE
30516: EQUAL
30517: IFTRUE 30521
30519: GO 30547
30521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30522: LD_ADDR_VAR 0 3
30526: PUSH
30527: LD_INT 11
30529: PUSH
30530: LD_INT 12
30532: PUSH
30533: LD_INT 13
30535: PUSH
30536: LD_INT 14
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: ST_TO_ADDR
30545: GO 30968
30547: LD_INT 28
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30573
30555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30556: LD_ADDR_VAR 0 3
30560: PUSH
30561: LD_INT 13
30563: PUSH
30564: LD_INT 14
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: ST_TO_ADDR
30571: GO 30968
30573: LD_INT 29
30575: DOUBLE
30576: EQUAL
30577: IFTRUE 30581
30579: GO 30599
30581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30582: LD_ADDR_VAR 0 3
30586: PUSH
30587: LD_INT 13
30589: PUSH
30590: LD_INT 14
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: ST_TO_ADDR
30597: GO 30968
30599: LD_INT 31
30601: DOUBLE
30602: EQUAL
30603: IFTRUE 30607
30605: GO 30625
30607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_INT 13
30615: PUSH
30616: LD_INT 14
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: ST_TO_ADDR
30623: GO 30968
30625: LD_INT 26
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30651
30633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_INT 13
30641: PUSH
30642: LD_INT 14
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 30968
30651: LD_INT 42
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30685
30659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 21
30667: PUSH
30668: LD_INT 22
30670: PUSH
30671: LD_INT 23
30673: PUSH
30674: LD_INT 24
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
30683: GO 30968
30685: LD_INT 43
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30719
30693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 21
30701: PUSH
30702: LD_INT 22
30704: PUSH
30705: LD_INT 23
30707: PUSH
30708: LD_INT 24
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: ST_TO_ADDR
30717: GO 30968
30719: LD_INT 44
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30753
30727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_INT 21
30735: PUSH
30736: LD_INT 22
30738: PUSH
30739: LD_INT 23
30741: PUSH
30742: LD_INT 24
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
30751: GO 30968
30753: LD_INT 45
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30787
30761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30762: LD_ADDR_VAR 0 3
30766: PUSH
30767: LD_INT 21
30769: PUSH
30770: LD_INT 22
30772: PUSH
30773: LD_INT 23
30775: PUSH
30776: LD_INT 24
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
30785: GO 30968
30787: LD_INT 49
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30821
30795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_INT 21
30803: PUSH
30804: LD_INT 22
30806: PUSH
30807: LD_INT 23
30809: PUSH
30810: LD_INT 24
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: ST_TO_ADDR
30819: GO 30968
30821: LD_INT 51
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30855
30829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30830: LD_ADDR_VAR 0 3
30834: PUSH
30835: LD_INT 21
30837: PUSH
30838: LD_INT 22
30840: PUSH
30841: LD_INT 23
30843: PUSH
30844: LD_INT 24
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: ST_TO_ADDR
30853: GO 30968
30855: LD_INT 52
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30889
30863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_INT 21
30871: PUSH
30872: LD_INT 22
30874: PUSH
30875: LD_INT 23
30877: PUSH
30878: LD_INT 24
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: ST_TO_ADDR
30887: GO 30968
30889: LD_INT 53
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30897
30895: GO 30915
30897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 23
30905: PUSH
30906: LD_INT 24
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: ST_TO_ADDR
30913: GO 30968
30915: LD_INT 46
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30941
30923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30924: LD_ADDR_VAR 0 3
30928: PUSH
30929: LD_INT 23
30931: PUSH
30932: LD_INT 24
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 30968
30941: LD_INT 47
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30967
30949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 23
30957: PUSH
30958: LD_INT 24
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: ST_TO_ADDR
30965: GO 30968
30967: POP
// result := ( chassis in result ) ;
30968: LD_ADDR_VAR 0 3
30972: PUSH
30973: LD_VAR 0 1
30977: PUSH
30978: LD_VAR 0 3
30982: IN
30983: ST_TO_ADDR
// end ;
30984: LD_VAR 0 3
30988: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30989: LD_INT 0
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
30996: PPUSH
30997: PPUSH
// result := array ;
30998: LD_ADDR_VAR 0 5
31002: PUSH
31003: LD_VAR 0 1
31007: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31008: LD_VAR 0 1
31012: NOT
31013: PUSH
31014: LD_VAR 0 2
31018: NOT
31019: OR
31020: PUSH
31021: LD_VAR 0 3
31025: NOT
31026: OR
31027: PUSH
31028: LD_VAR 0 2
31032: PUSH
31033: LD_VAR 0 1
31037: GREATER
31038: OR
31039: PUSH
31040: LD_VAR 0 3
31044: PUSH
31045: LD_VAR 0 1
31049: GREATER
31050: OR
31051: IFFALSE 31055
// exit ;
31053: GO 31351
// if direction then
31055: LD_VAR 0 4
31059: IFFALSE 31123
// begin d := 1 ;
31061: LD_ADDR_VAR 0 9
31065: PUSH
31066: LD_INT 1
31068: ST_TO_ADDR
// if i_from > i_to then
31069: LD_VAR 0 2
31073: PUSH
31074: LD_VAR 0 3
31078: GREATER
31079: IFFALSE 31105
// length := ( array - i_from ) + i_to else
31081: LD_ADDR_VAR 0 11
31085: PUSH
31086: LD_VAR 0 1
31090: PUSH
31091: LD_VAR 0 2
31095: MINUS
31096: PUSH
31097: LD_VAR 0 3
31101: PLUS
31102: ST_TO_ADDR
31103: GO 31121
// length := i_to - i_from ;
31105: LD_ADDR_VAR 0 11
31109: PUSH
31110: LD_VAR 0 3
31114: PUSH
31115: LD_VAR 0 2
31119: MINUS
31120: ST_TO_ADDR
// end else
31121: GO 31184
// begin d := - 1 ;
31123: LD_ADDR_VAR 0 9
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: ST_TO_ADDR
// if i_from > i_to then
31132: LD_VAR 0 2
31136: PUSH
31137: LD_VAR 0 3
31141: GREATER
31142: IFFALSE 31162
// length := i_from - i_to else
31144: LD_ADDR_VAR 0 11
31148: PUSH
31149: LD_VAR 0 2
31153: PUSH
31154: LD_VAR 0 3
31158: MINUS
31159: ST_TO_ADDR
31160: GO 31184
// length := ( array - i_to ) + i_from ;
31162: LD_ADDR_VAR 0 11
31166: PUSH
31167: LD_VAR 0 1
31171: PUSH
31172: LD_VAR 0 3
31176: MINUS
31177: PUSH
31178: LD_VAR 0 2
31182: PLUS
31183: ST_TO_ADDR
// end ; if not length then
31184: LD_VAR 0 11
31188: NOT
31189: IFFALSE 31193
// exit ;
31191: GO 31351
// tmp := array ;
31193: LD_ADDR_VAR 0 10
31197: PUSH
31198: LD_VAR 0 1
31202: ST_TO_ADDR
// for i = 1 to length do
31203: LD_ADDR_VAR 0 6
31207: PUSH
31208: DOUBLE
31209: LD_INT 1
31211: DEC
31212: ST_TO_ADDR
31213: LD_VAR 0 11
31217: PUSH
31218: FOR_TO
31219: IFFALSE 31339
// begin for j = 1 to array do
31221: LD_ADDR_VAR 0 7
31225: PUSH
31226: DOUBLE
31227: LD_INT 1
31229: DEC
31230: ST_TO_ADDR
31231: LD_VAR 0 1
31235: PUSH
31236: FOR_TO
31237: IFFALSE 31325
// begin k := j + d ;
31239: LD_ADDR_VAR 0 8
31243: PUSH
31244: LD_VAR 0 7
31248: PUSH
31249: LD_VAR 0 9
31253: PLUS
31254: ST_TO_ADDR
// if k > array then
31255: LD_VAR 0 8
31259: PUSH
31260: LD_VAR 0 1
31264: GREATER
31265: IFFALSE 31275
// k := 1 ;
31267: LD_ADDR_VAR 0 8
31271: PUSH
31272: LD_INT 1
31274: ST_TO_ADDR
// if not k then
31275: LD_VAR 0 8
31279: NOT
31280: IFFALSE 31292
// k := array ;
31282: LD_ADDR_VAR 0 8
31286: PUSH
31287: LD_VAR 0 1
31291: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31292: LD_ADDR_VAR 0 10
31296: PUSH
31297: LD_VAR 0 10
31301: PPUSH
31302: LD_VAR 0 8
31306: PPUSH
31307: LD_VAR 0 1
31311: PUSH
31312: LD_VAR 0 7
31316: ARRAY
31317: PPUSH
31318: CALL_OW 1
31322: ST_TO_ADDR
// end ;
31323: GO 31236
31325: POP
31326: POP
// array := tmp ;
31327: LD_ADDR_VAR 0 1
31331: PUSH
31332: LD_VAR 0 10
31336: ST_TO_ADDR
// end ;
31337: GO 31218
31339: POP
31340: POP
// result := array ;
31341: LD_ADDR_VAR 0 5
31345: PUSH
31346: LD_VAR 0 1
31350: ST_TO_ADDR
// end ;
31351: LD_VAR 0 5
31355: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31356: LD_INT 0
31358: PPUSH
31359: PPUSH
// result := 0 ;
31360: LD_ADDR_VAR 0 3
31364: PUSH
31365: LD_INT 0
31367: ST_TO_ADDR
// if not array or not value in array then
31368: LD_VAR 0 1
31372: NOT
31373: PUSH
31374: LD_VAR 0 2
31378: PUSH
31379: LD_VAR 0 1
31383: IN
31384: NOT
31385: OR
31386: IFFALSE 31390
// exit ;
31388: GO 31444
// for i = 1 to array do
31390: LD_ADDR_VAR 0 4
31394: PUSH
31395: DOUBLE
31396: LD_INT 1
31398: DEC
31399: ST_TO_ADDR
31400: LD_VAR 0 1
31404: PUSH
31405: FOR_TO
31406: IFFALSE 31442
// if value = array [ i ] then
31408: LD_VAR 0 2
31412: PUSH
31413: LD_VAR 0 1
31417: PUSH
31418: LD_VAR 0 4
31422: ARRAY
31423: EQUAL
31424: IFFALSE 31440
// begin result := i ;
31426: LD_ADDR_VAR 0 3
31430: PUSH
31431: LD_VAR 0 4
31435: ST_TO_ADDR
// exit ;
31436: POP
31437: POP
31438: GO 31444
// end ;
31440: GO 31405
31442: POP
31443: POP
// end ;
31444: LD_VAR 0 3
31448: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31449: LD_INT 0
31451: PPUSH
// vc_chassis := chassis ;
31452: LD_ADDR_OWVAR 37
31456: PUSH
31457: LD_VAR 0 1
31461: ST_TO_ADDR
// vc_engine := engine ;
31462: LD_ADDR_OWVAR 39
31466: PUSH
31467: LD_VAR 0 2
31471: ST_TO_ADDR
// vc_control := control ;
31472: LD_ADDR_OWVAR 38
31476: PUSH
31477: LD_VAR 0 3
31481: ST_TO_ADDR
// vc_weapon := weapon ;
31482: LD_ADDR_OWVAR 40
31486: PUSH
31487: LD_VAR 0 4
31491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31492: LD_ADDR_OWVAR 41
31496: PUSH
31497: LD_VAR 0 5
31501: ST_TO_ADDR
// end ;
31502: LD_VAR 0 6
31506: RET
// export function WantPlant ( unit ) ; var task ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
// result := false ;
31511: LD_ADDR_VAR 0 2
31515: PUSH
31516: LD_INT 0
31518: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31519: LD_ADDR_VAR 0 3
31523: PUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 437
31533: ST_TO_ADDR
// if task then
31534: LD_VAR 0 3
31538: IFFALSE 31566
// if task [ 1 ] [ 1 ] = p then
31540: LD_VAR 0 3
31544: PUSH
31545: LD_INT 1
31547: ARRAY
31548: PUSH
31549: LD_INT 1
31551: ARRAY
31552: PUSH
31553: LD_STRING p
31555: EQUAL
31556: IFFALSE 31566
// result := true ;
31558: LD_ADDR_VAR 0 2
31562: PUSH
31563: LD_INT 1
31565: ST_TO_ADDR
// end ;
31566: LD_VAR 0 2
31570: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31571: LD_INT 0
31573: PPUSH
31574: PPUSH
31575: PPUSH
31576: PPUSH
// if pos < 1 then
31577: LD_VAR 0 2
31581: PUSH
31582: LD_INT 1
31584: LESS
31585: IFFALSE 31589
// exit ;
31587: GO 31892
// if pos = 1 then
31589: LD_VAR 0 2
31593: PUSH
31594: LD_INT 1
31596: EQUAL
31597: IFFALSE 31630
// result := Replace ( arr , pos [ 1 ] , value ) else
31599: LD_ADDR_VAR 0 4
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: LD_VAR 0 2
31613: PUSH
31614: LD_INT 1
31616: ARRAY
31617: PPUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: CALL_OW 1
31627: ST_TO_ADDR
31628: GO 31892
// begin tmp := arr ;
31630: LD_ADDR_VAR 0 6
31634: PUSH
31635: LD_VAR 0 1
31639: ST_TO_ADDR
// s_arr := [ tmp ] ;
31640: LD_ADDR_VAR 0 7
31644: PUSH
31645: LD_VAR 0 6
31649: PUSH
31650: EMPTY
31651: LIST
31652: ST_TO_ADDR
// for i = 1 to pos - 1 do
31653: LD_ADDR_VAR 0 5
31657: PUSH
31658: DOUBLE
31659: LD_INT 1
31661: DEC
31662: ST_TO_ADDR
31663: LD_VAR 0 2
31667: PUSH
31668: LD_INT 1
31670: MINUS
31671: PUSH
31672: FOR_TO
31673: IFFALSE 31718
// begin tmp := tmp [ pos [ i ] ] ;
31675: LD_ADDR_VAR 0 6
31679: PUSH
31680: LD_VAR 0 6
31684: PUSH
31685: LD_VAR 0 2
31689: PUSH
31690: LD_VAR 0 5
31694: ARRAY
31695: ARRAY
31696: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31697: LD_ADDR_VAR 0 7
31701: PUSH
31702: LD_VAR 0 7
31706: PUSH
31707: LD_VAR 0 6
31711: PUSH
31712: EMPTY
31713: LIST
31714: ADD
31715: ST_TO_ADDR
// end ;
31716: GO 31672
31718: POP
31719: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31720: LD_ADDR_VAR 0 6
31724: PUSH
31725: LD_VAR 0 6
31729: PPUSH
31730: LD_VAR 0 2
31734: PUSH
31735: LD_VAR 0 2
31739: ARRAY
31740: PPUSH
31741: LD_VAR 0 3
31745: PPUSH
31746: CALL_OW 1
31750: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31751: LD_ADDR_VAR 0 7
31755: PUSH
31756: LD_VAR 0 7
31760: PPUSH
31761: LD_VAR 0 7
31765: PPUSH
31766: LD_VAR 0 6
31770: PPUSH
31771: CALL_OW 1
31775: ST_TO_ADDR
// for i = s_arr downto 2 do
31776: LD_ADDR_VAR 0 5
31780: PUSH
31781: DOUBLE
31782: LD_VAR 0 7
31786: INC
31787: ST_TO_ADDR
31788: LD_INT 2
31790: PUSH
31791: FOR_DOWNTO
31792: IFFALSE 31876
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31794: LD_ADDR_VAR 0 6
31798: PUSH
31799: LD_VAR 0 7
31803: PUSH
31804: LD_VAR 0 5
31808: PUSH
31809: LD_INT 1
31811: MINUS
31812: ARRAY
31813: PPUSH
31814: LD_VAR 0 2
31818: PUSH
31819: LD_VAR 0 5
31823: PUSH
31824: LD_INT 1
31826: MINUS
31827: ARRAY
31828: PPUSH
31829: LD_VAR 0 7
31833: PUSH
31834: LD_VAR 0 5
31838: ARRAY
31839: PPUSH
31840: CALL_OW 1
31844: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31845: LD_ADDR_VAR 0 7
31849: PUSH
31850: LD_VAR 0 7
31854: PPUSH
31855: LD_VAR 0 5
31859: PUSH
31860: LD_INT 1
31862: MINUS
31863: PPUSH
31864: LD_VAR 0 6
31868: PPUSH
31869: CALL_OW 1
31873: ST_TO_ADDR
// end ;
31874: GO 31791
31876: POP
31877: POP
// result := s_arr [ 1 ] ;
31878: LD_ADDR_VAR 0 4
31882: PUSH
31883: LD_VAR 0 7
31887: PUSH
31888: LD_INT 1
31890: ARRAY
31891: ST_TO_ADDR
// end ; end ;
31892: LD_VAR 0 4
31896: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
// if not list then
31901: LD_VAR 0 1
31905: NOT
31906: IFFALSE 31910
// exit ;
31908: GO 32001
// i := list [ pos1 ] ;
31910: LD_ADDR_VAR 0 5
31914: PUSH
31915: LD_VAR 0 1
31919: PUSH
31920: LD_VAR 0 2
31924: ARRAY
31925: ST_TO_ADDR
// if not i then
31926: LD_VAR 0 5
31930: NOT
31931: IFFALSE 31935
// exit ;
31933: GO 32001
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31935: LD_ADDR_VAR 0 1
31939: PUSH
31940: LD_VAR 0 1
31944: PPUSH
31945: LD_VAR 0 2
31949: PPUSH
31950: LD_VAR 0 1
31954: PUSH
31955: LD_VAR 0 3
31959: ARRAY
31960: PPUSH
31961: CALL_OW 1
31965: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31966: LD_ADDR_VAR 0 1
31970: PUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: LD_VAR 0 3
31980: PPUSH
31981: LD_VAR 0 5
31985: PPUSH
31986: CALL_OW 1
31990: ST_TO_ADDR
// result := list ;
31991: LD_ADDR_VAR 0 4
31995: PUSH
31996: LD_VAR 0 1
32000: ST_TO_ADDR
// end ;
32001: LD_VAR 0 4
32005: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32006: LD_INT 0
32008: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 250
32023: PPUSH
32024: LD_VAR 0 1
32028: PPUSH
32029: CALL_OW 251
32033: PPUSH
32034: LD_VAR 0 2
32038: PPUSH
32039: LD_VAR 0 3
32043: PPUSH
32044: LD_VAR 0 4
32048: PPUSH
32049: CALL 32059 0 5
32053: ST_TO_ADDR
// end ;
32054: LD_VAR 0 5
32058: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
// if not list then
32065: LD_VAR 0 3
32069: NOT
32070: IFFALSE 32074
// exit ;
32072: GO 32462
// result := [ ] ;
32074: LD_ADDR_VAR 0 6
32078: PUSH
32079: EMPTY
32080: ST_TO_ADDR
// for i in list do
32081: LD_ADDR_VAR 0 7
32085: PUSH
32086: LD_VAR 0 3
32090: PUSH
32091: FOR_IN
32092: IFFALSE 32294
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: LD_VAR 0 7
32103: PPUSH
32104: LD_VAR 0 1
32108: PPUSH
32109: LD_VAR 0 2
32113: PPUSH
32114: CALL_OW 297
32118: ST_TO_ADDR
// if not result then
32119: LD_VAR 0 6
32123: NOT
32124: IFFALSE 32150
// result := [ [ i , tmp ] ] else
32126: LD_ADDR_VAR 0 6
32130: PUSH
32131: LD_VAR 0 7
32135: PUSH
32136: LD_VAR 0 9
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: ST_TO_ADDR
32148: GO 32292
// begin if result [ result ] [ 2 ] < tmp then
32150: LD_VAR 0 6
32154: PUSH
32155: LD_VAR 0 6
32159: ARRAY
32160: PUSH
32161: LD_INT 2
32163: ARRAY
32164: PUSH
32165: LD_VAR 0 9
32169: LESS
32170: IFFALSE 32212
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32172: LD_ADDR_VAR 0 6
32176: PUSH
32177: LD_VAR 0 6
32181: PPUSH
32182: LD_VAR 0 6
32186: PUSH
32187: LD_INT 1
32189: PLUS
32190: PPUSH
32191: LD_VAR 0 7
32195: PUSH
32196: LD_VAR 0 9
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PPUSH
32205: CALL_OW 2
32209: ST_TO_ADDR
32210: GO 32292
// for j = 1 to result do
32212: LD_ADDR_VAR 0 8
32216: PUSH
32217: DOUBLE
32218: LD_INT 1
32220: DEC
32221: ST_TO_ADDR
32222: LD_VAR 0 6
32226: PUSH
32227: FOR_TO
32228: IFFALSE 32290
// begin if tmp < result [ j ] [ 2 ] then
32230: LD_VAR 0 9
32234: PUSH
32235: LD_VAR 0 6
32239: PUSH
32240: LD_VAR 0 8
32244: ARRAY
32245: PUSH
32246: LD_INT 2
32248: ARRAY
32249: LESS
32250: IFFALSE 32288
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32252: LD_ADDR_VAR 0 6
32256: PUSH
32257: LD_VAR 0 6
32261: PPUSH
32262: LD_VAR 0 8
32266: PPUSH
32267: LD_VAR 0 7
32271: PUSH
32272: LD_VAR 0 9
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PPUSH
32281: CALL_OW 2
32285: ST_TO_ADDR
// break ;
32286: GO 32290
// end ; end ;
32288: GO 32227
32290: POP
32291: POP
// end ; end ;
32292: GO 32091
32294: POP
32295: POP
// if result and not asc then
32296: LD_VAR 0 6
32300: PUSH
32301: LD_VAR 0 4
32305: NOT
32306: AND
32307: IFFALSE 32382
// begin tmp := result ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_VAR 0 6
32318: ST_TO_ADDR
// for i = tmp downto 1 do
32319: LD_ADDR_VAR 0 7
32323: PUSH
32324: DOUBLE
32325: LD_VAR 0 9
32329: INC
32330: ST_TO_ADDR
32331: LD_INT 1
32333: PUSH
32334: FOR_DOWNTO
32335: IFFALSE 32380
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32337: LD_ADDR_VAR 0 6
32341: PUSH
32342: LD_VAR 0 6
32346: PPUSH
32347: LD_VAR 0 9
32351: PUSH
32352: LD_VAR 0 7
32356: MINUS
32357: PUSH
32358: LD_INT 1
32360: PLUS
32361: PPUSH
32362: LD_VAR 0 9
32366: PUSH
32367: LD_VAR 0 7
32371: ARRAY
32372: PPUSH
32373: CALL_OW 1
32377: ST_TO_ADDR
32378: GO 32334
32380: POP
32381: POP
// end ; tmp := [ ] ;
32382: LD_ADDR_VAR 0 9
32386: PUSH
32387: EMPTY
32388: ST_TO_ADDR
// if mode then
32389: LD_VAR 0 5
32393: IFFALSE 32462
// begin for i = 1 to result do
32395: LD_ADDR_VAR 0 7
32399: PUSH
32400: DOUBLE
32401: LD_INT 1
32403: DEC
32404: ST_TO_ADDR
32405: LD_VAR 0 6
32409: PUSH
32410: FOR_TO
32411: IFFALSE 32450
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32413: LD_ADDR_VAR 0 9
32417: PUSH
32418: LD_VAR 0 9
32422: PPUSH
32423: LD_VAR 0 7
32427: PPUSH
32428: LD_VAR 0 6
32432: PUSH
32433: LD_VAR 0 7
32437: ARRAY
32438: PUSH
32439: LD_INT 1
32441: ARRAY
32442: PPUSH
32443: CALL_OW 1
32447: ST_TO_ADDR
32448: GO 32410
32450: POP
32451: POP
// result := tmp ;
32452: LD_ADDR_VAR 0 6
32456: PUSH
32457: LD_VAR 0 9
32461: ST_TO_ADDR
// end ; end ;
32462: LD_VAR 0 6
32466: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32467: LD_INT 0
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32475: LD_ADDR_VAR 0 5
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: ST_TO_ADDR
// if not x or not y then
32497: LD_VAR 0 2
32501: NOT
32502: PUSH
32503: LD_VAR 0 3
32507: NOT
32508: OR
32509: IFFALSE 32513
// exit ;
32511: GO 34165
// if not range then
32513: LD_VAR 0 4
32517: NOT
32518: IFFALSE 32528
// range := 10 ;
32520: LD_ADDR_VAR 0 4
32524: PUSH
32525: LD_INT 10
32527: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32528: LD_ADDR_VAR 0 8
32532: PUSH
32533: LD_INT 81
32535: PUSH
32536: LD_VAR 0 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 92
32547: PUSH
32548: LD_VAR 0 2
32552: PUSH
32553: LD_VAR 0 3
32557: PUSH
32558: LD_VAR 0 4
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: LD_INT 21
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: PPUSH
32591: CALL_OW 69
32595: ST_TO_ADDR
// if not tmp then
32596: LD_VAR 0 8
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 34165
// for i in tmp do
32605: LD_ADDR_VAR 0 6
32609: PUSH
32610: LD_VAR 0 8
32614: PUSH
32615: FOR_IN
32616: IFFALSE 34140
// begin points := [ 0 , 0 , 0 ] ;
32618: LD_ADDR_VAR 0 9
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
// bpoints := 1 ;
32637: LD_ADDR_VAR 0 10
32641: PUSH
32642: LD_INT 1
32644: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32645: LD_VAR 0 6
32649: PPUSH
32650: CALL_OW 247
32654: PUSH
32655: LD_INT 1
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 33241
32663: POP
// begin if GetClass ( i ) = 1 then
32664: LD_VAR 0 6
32668: PPUSH
32669: CALL_OW 257
32673: PUSH
32674: LD_INT 1
32676: EQUAL
32677: IFFALSE 32698
// points := [ 10 , 5 , 3 ] ;
32679: LD_ADDR_VAR 0 9
32683: PUSH
32684: LD_INT 10
32686: PUSH
32687: LD_INT 5
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32698: LD_VAR 0 6
32702: PPUSH
32703: CALL_OW 257
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 3
32713: PUSH
32714: LD_INT 4
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: IN
32722: IFFALSE 32743
// points := [ 3 , 2 , 1 ] ;
32724: LD_ADDR_VAR 0 9
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32743: LD_VAR 0 6
32747: PPUSH
32748: CALL_OW 257
32752: PUSH
32753: LD_INT 5
32755: EQUAL
32756: IFFALSE 32777
// points := [ 130 , 5 , 2 ] ;
32758: LD_ADDR_VAR 0 9
32762: PUSH
32763: LD_INT 130
32765: PUSH
32766: LD_INT 5
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32777: LD_VAR 0 6
32781: PPUSH
32782: CALL_OW 257
32786: PUSH
32787: LD_INT 8
32789: EQUAL
32790: IFFALSE 32811
// points := [ 35 , 35 , 30 ] ;
32792: LD_ADDR_VAR 0 9
32796: PUSH
32797: LD_INT 35
32799: PUSH
32800: LD_INT 35
32802: PUSH
32803: LD_INT 30
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32811: LD_VAR 0 6
32815: PPUSH
32816: CALL_OW 257
32820: PUSH
32821: LD_INT 9
32823: EQUAL
32824: IFFALSE 32845
// points := [ 20 , 55 , 40 ] ;
32826: LD_ADDR_VAR 0 9
32830: PUSH
32831: LD_INT 20
32833: PUSH
32834: LD_INT 55
32836: PUSH
32837: LD_INT 40
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32845: LD_VAR 0 6
32849: PPUSH
32850: CALL_OW 257
32854: PUSH
32855: LD_INT 12
32857: PUSH
32858: LD_INT 16
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: IN
32865: IFFALSE 32886
// points := [ 5 , 3 , 2 ] ;
32867: LD_ADDR_VAR 0 9
32871: PUSH
32872: LD_INT 5
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32886: LD_VAR 0 6
32890: PPUSH
32891: CALL_OW 257
32895: PUSH
32896: LD_INT 17
32898: EQUAL
32899: IFFALSE 32920
// points := [ 100 , 50 , 75 ] ;
32901: LD_ADDR_VAR 0 9
32905: PUSH
32906: LD_INT 100
32908: PUSH
32909: LD_INT 50
32911: PUSH
32912: LD_INT 75
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32920: LD_VAR 0 6
32924: PPUSH
32925: CALL_OW 257
32929: PUSH
32930: LD_INT 15
32932: EQUAL
32933: IFFALSE 32954
// points := [ 10 , 5 , 3 ] ;
32935: LD_ADDR_VAR 0 9
32939: PUSH
32940: LD_INT 10
32942: PUSH
32943: LD_INT 5
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32954: LD_VAR 0 6
32958: PPUSH
32959: CALL_OW 257
32963: PUSH
32964: LD_INT 14
32966: EQUAL
32967: IFFALSE 32988
// points := [ 10 , 0 , 0 ] ;
32969: LD_ADDR_VAR 0 9
32973: PUSH
32974: LD_INT 10
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32988: LD_VAR 0 6
32992: PPUSH
32993: CALL_OW 257
32997: PUSH
32998: LD_INT 11
33000: EQUAL
33001: IFFALSE 33022
// points := [ 30 , 10 , 5 ] ;
33003: LD_ADDR_VAR 0 9
33007: PUSH
33008: LD_INT 30
33010: PUSH
33011: LD_INT 10
33013: PUSH
33014: LD_INT 5
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33022: LD_VAR 0 1
33026: PPUSH
33027: LD_INT 5
33029: PPUSH
33030: CALL_OW 321
33034: PUSH
33035: LD_INT 2
33037: EQUAL
33038: IFFALSE 33055
// bpoints := bpoints * 1.8 ;
33040: LD_ADDR_VAR 0 10
33044: PUSH
33045: LD_VAR 0 10
33049: PUSH
33050: LD_REAL  1.80000000000000E+0000
33053: MUL
33054: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33055: LD_VAR 0 6
33059: PPUSH
33060: CALL_OW 257
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 4
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: IN
33083: PUSH
33084: LD_VAR 0 1
33088: PPUSH
33089: LD_INT 51
33091: PPUSH
33092: CALL_OW 321
33096: PUSH
33097: LD_INT 2
33099: EQUAL
33100: AND
33101: IFFALSE 33118
// bpoints := bpoints * 1.2 ;
33103: LD_ADDR_VAR 0 10
33107: PUSH
33108: LD_VAR 0 10
33112: PUSH
33113: LD_REAL  1.20000000000000E+0000
33116: MUL
33117: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33118: LD_VAR 0 6
33122: PPUSH
33123: CALL_OW 257
33127: PUSH
33128: LD_INT 5
33130: PUSH
33131: LD_INT 7
33133: PUSH
33134: LD_INT 9
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: IN
33142: PUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: LD_INT 52
33150: PPUSH
33151: CALL_OW 321
33155: PUSH
33156: LD_INT 2
33158: EQUAL
33159: AND
33160: IFFALSE 33177
// bpoints := bpoints * 1.5 ;
33162: LD_ADDR_VAR 0 10
33166: PUSH
33167: LD_VAR 0 10
33171: PUSH
33172: LD_REAL  1.50000000000000E+0000
33175: MUL
33176: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33177: LD_VAR 0 1
33181: PPUSH
33182: LD_INT 66
33184: PPUSH
33185: CALL_OW 321
33189: PUSH
33190: LD_INT 2
33192: EQUAL
33193: IFFALSE 33210
// bpoints := bpoints * 1.1 ;
33195: LD_ADDR_VAR 0 10
33199: PUSH
33200: LD_VAR 0 10
33204: PUSH
33205: LD_REAL  1.10000000000000E+0000
33208: MUL
33209: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33210: LD_ADDR_VAR 0 10
33214: PUSH
33215: LD_VAR 0 10
33219: PUSH
33220: LD_VAR 0 6
33224: PPUSH
33225: LD_INT 1
33227: PPUSH
33228: CALL_OW 259
33232: PUSH
33233: LD_REAL  1.15000000000000E+0000
33236: MUL
33237: MUL
33238: ST_TO_ADDR
// end ; unit_vehicle :
33239: GO 34069
33241: LD_INT 2
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 34057
33249: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33250: LD_VAR 0 6
33254: PPUSH
33255: CALL_OW 264
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 42
33265: PUSH
33266: LD_INT 24
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: IN
33274: IFFALSE 33295
// points := [ 25 , 5 , 3 ] ;
33276: LD_ADDR_VAR 0 9
33280: PUSH
33281: LD_INT 25
33283: PUSH
33284: LD_INT 5
33286: PUSH
33287: LD_INT 3
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33295: LD_VAR 0 6
33299: PPUSH
33300: CALL_OW 264
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 43
33310: PUSH
33311: LD_INT 25
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: IN
33319: IFFALSE 33340
// points := [ 40 , 15 , 5 ] ;
33321: LD_ADDR_VAR 0 9
33325: PUSH
33326: LD_INT 40
33328: PUSH
33329: LD_INT 15
33331: PUSH
33332: LD_INT 5
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33340: LD_VAR 0 6
33344: PPUSH
33345: CALL_OW 264
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: LD_INT 23
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: IN
33360: IFFALSE 33381
// points := [ 7 , 25 , 8 ] ;
33362: LD_ADDR_VAR 0 9
33366: PUSH
33367: LD_INT 7
33369: PUSH
33370: LD_INT 25
33372: PUSH
33373: LD_INT 8
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33381: LD_VAR 0 6
33385: PPUSH
33386: CALL_OW 264
33390: PUSH
33391: LD_INT 5
33393: PUSH
33394: LD_INT 27
33396: PUSH
33397: LD_INT 44
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: IN
33405: IFFALSE 33426
// points := [ 14 , 50 , 16 ] ;
33407: LD_ADDR_VAR 0 9
33411: PUSH
33412: LD_INT 14
33414: PUSH
33415: LD_INT 50
33417: PUSH
33418: LD_INT 16
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33426: LD_VAR 0 6
33430: PPUSH
33431: CALL_OW 264
33435: PUSH
33436: LD_INT 6
33438: PUSH
33439: LD_INT 46
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: IN
33446: IFFALSE 33467
// points := [ 32 , 120 , 70 ] ;
33448: LD_ADDR_VAR 0 9
33452: PUSH
33453: LD_INT 32
33455: PUSH
33456: LD_INT 120
33458: PUSH
33459: LD_INT 70
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33467: LD_VAR 0 6
33471: PPUSH
33472: CALL_OW 264
33476: PUSH
33477: LD_INT 7
33479: PUSH
33480: LD_INT 28
33482: PUSH
33483: LD_INT 45
33485: PUSH
33486: LD_EXP 57
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: IN
33497: IFFALSE 33518
// points := [ 35 , 20 , 45 ] ;
33499: LD_ADDR_VAR 0 9
33503: PUSH
33504: LD_INT 35
33506: PUSH
33507: LD_INT 20
33509: PUSH
33510: LD_INT 45
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33518: LD_VAR 0 6
33522: PPUSH
33523: CALL_OW 264
33527: PUSH
33528: LD_INT 47
33530: PUSH
33531: EMPTY
33532: LIST
33533: IN
33534: IFFALSE 33555
// points := [ 67 , 45 , 75 ] ;
33536: LD_ADDR_VAR 0 9
33540: PUSH
33541: LD_INT 67
33543: PUSH
33544: LD_INT 45
33546: PUSH
33547: LD_INT 75
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33555: LD_VAR 0 6
33559: PPUSH
33560: CALL_OW 264
33564: PUSH
33565: LD_INT 26
33567: PUSH
33568: EMPTY
33569: LIST
33570: IN
33571: IFFALSE 33592
// points := [ 120 , 30 , 80 ] ;
33573: LD_ADDR_VAR 0 9
33577: PUSH
33578: LD_INT 120
33580: PUSH
33581: LD_INT 30
33583: PUSH
33584: LD_INT 80
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33592: LD_VAR 0 6
33596: PPUSH
33597: CALL_OW 264
33601: PUSH
33602: LD_INT 22
33604: PUSH
33605: EMPTY
33606: LIST
33607: IN
33608: IFFALSE 33629
// points := [ 40 , 1 , 1 ] ;
33610: LD_ADDR_VAR 0 9
33614: PUSH
33615: LD_INT 40
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33629: LD_VAR 0 6
33633: PPUSH
33634: CALL_OW 264
33638: PUSH
33639: LD_INT 29
33641: PUSH
33642: EMPTY
33643: LIST
33644: IN
33645: IFFALSE 33666
// points := [ 70 , 200 , 400 ] ;
33647: LD_ADDR_VAR 0 9
33651: PUSH
33652: LD_INT 70
33654: PUSH
33655: LD_INT 200
33657: PUSH
33658: LD_INT 400
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33666: LD_VAR 0 6
33670: PPUSH
33671: CALL_OW 264
33675: PUSH
33676: LD_INT 14
33678: PUSH
33679: LD_INT 53
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: IN
33686: IFFALSE 33707
// points := [ 40 , 10 , 20 ] ;
33688: LD_ADDR_VAR 0 9
33692: PUSH
33693: LD_INT 40
33695: PUSH
33696: LD_INT 10
33698: PUSH
33699: LD_INT 20
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33707: LD_VAR 0 6
33711: PPUSH
33712: CALL_OW 264
33716: PUSH
33717: LD_INT 9
33719: PUSH
33720: EMPTY
33721: LIST
33722: IN
33723: IFFALSE 33744
// points := [ 5 , 70 , 20 ] ;
33725: LD_ADDR_VAR 0 9
33729: PUSH
33730: LD_INT 5
33732: PUSH
33733: LD_INT 70
33735: PUSH
33736: LD_INT 20
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33744: LD_VAR 0 6
33748: PPUSH
33749: CALL_OW 264
33753: PUSH
33754: LD_INT 10
33756: PUSH
33757: EMPTY
33758: LIST
33759: IN
33760: IFFALSE 33781
// points := [ 35 , 110 , 70 ] ;
33762: LD_ADDR_VAR 0 9
33766: PUSH
33767: LD_INT 35
33769: PUSH
33770: LD_INT 110
33772: PUSH
33773: LD_INT 70
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33781: LD_VAR 0 6
33785: PPUSH
33786: CALL_OW 265
33790: PUSH
33791: LD_INT 25
33793: EQUAL
33794: IFFALSE 33815
// points := [ 80 , 65 , 100 ] ;
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_INT 80
33803: PUSH
33804: LD_INT 65
33806: PUSH
33807: LD_INT 100
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33815: LD_VAR 0 6
33819: PPUSH
33820: CALL_OW 263
33824: PUSH
33825: LD_INT 1
33827: EQUAL
33828: IFFALSE 33863
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33830: LD_ADDR_VAR 0 10
33834: PUSH
33835: LD_VAR 0 10
33839: PUSH
33840: LD_VAR 0 6
33844: PPUSH
33845: CALL_OW 311
33849: PPUSH
33850: LD_INT 3
33852: PPUSH
33853: CALL_OW 259
33857: PUSH
33858: LD_INT 4
33860: MUL
33861: MUL
33862: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33863: LD_VAR 0 6
33867: PPUSH
33868: CALL_OW 263
33872: PUSH
33873: LD_INT 2
33875: EQUAL
33876: IFFALSE 33927
// begin j := IsControledBy ( i ) ;
33878: LD_ADDR_VAR 0 7
33882: PUSH
33883: LD_VAR 0 6
33887: PPUSH
33888: CALL_OW 312
33892: ST_TO_ADDR
// if j then
33893: LD_VAR 0 7
33897: IFFALSE 33927
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33899: LD_ADDR_VAR 0 10
33903: PUSH
33904: LD_VAR 0 10
33908: PUSH
33909: LD_VAR 0 7
33913: PPUSH
33914: LD_INT 3
33916: PPUSH
33917: CALL_OW 259
33921: PUSH
33922: LD_INT 3
33924: MUL
33925: MUL
33926: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33927: LD_VAR 0 6
33931: PPUSH
33932: CALL_OW 264
33936: PUSH
33937: LD_INT 5
33939: PUSH
33940: LD_INT 6
33942: PUSH
33943: LD_INT 46
33945: PUSH
33946: LD_INT 44
33948: PUSH
33949: LD_INT 47
33951: PUSH
33952: LD_INT 45
33954: PUSH
33955: LD_INT 28
33957: PUSH
33958: LD_INT 7
33960: PUSH
33961: LD_INT 27
33963: PUSH
33964: LD_INT 29
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: IN
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: LD_INT 52
33987: PPUSH
33988: CALL_OW 321
33992: PUSH
33993: LD_INT 2
33995: EQUAL
33996: AND
33997: IFFALSE 34014
// bpoints := bpoints * 1.2 ;
33999: LD_ADDR_VAR 0 10
34003: PUSH
34004: LD_VAR 0 10
34008: PUSH
34009: LD_REAL  1.20000000000000E+0000
34012: MUL
34013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34014: LD_VAR 0 6
34018: PPUSH
34019: CALL_OW 264
34023: PUSH
34024: LD_INT 6
34026: PUSH
34027: LD_INT 46
34029: PUSH
34030: LD_INT 47
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: IN
34038: IFFALSE 34055
// bpoints := bpoints * 1.2 ;
34040: LD_ADDR_VAR 0 10
34044: PUSH
34045: LD_VAR 0 10
34049: PUSH
34050: LD_REAL  1.20000000000000E+0000
34053: MUL
34054: ST_TO_ADDR
// end ; unit_building :
34055: GO 34069
34057: LD_INT 3
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34068
34065: POP
// ; end ;
34066: GO 34069
34068: POP
// for j = 1 to 3 do
34069: LD_ADDR_VAR 0 7
34073: PUSH
34074: DOUBLE
34075: LD_INT 1
34077: DEC
34078: ST_TO_ADDR
34079: LD_INT 3
34081: PUSH
34082: FOR_TO
34083: IFFALSE 34136
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34085: LD_ADDR_VAR 0 5
34089: PUSH
34090: LD_VAR 0 5
34094: PPUSH
34095: LD_VAR 0 7
34099: PPUSH
34100: LD_VAR 0 5
34104: PUSH
34105: LD_VAR 0 7
34109: ARRAY
34110: PUSH
34111: LD_VAR 0 9
34115: PUSH
34116: LD_VAR 0 7
34120: ARRAY
34121: PUSH
34122: LD_VAR 0 10
34126: MUL
34127: PLUS
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
34134: GO 34082
34136: POP
34137: POP
// end ;
34138: GO 32615
34140: POP
34141: POP
// result := Replace ( result , 4 , tmp ) ;
34142: LD_ADDR_VAR 0 5
34146: PUSH
34147: LD_VAR 0 5
34151: PPUSH
34152: LD_INT 4
34154: PPUSH
34155: LD_VAR 0 8
34159: PPUSH
34160: CALL_OW 1
34164: ST_TO_ADDR
// end ;
34165: LD_VAR 0 5
34169: RET
// export function DangerAtRange ( unit , range ) ; begin
34170: LD_INT 0
34172: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL_OW 255
34187: PPUSH
34188: LD_VAR 0 1
34192: PPUSH
34193: CALL_OW 250
34197: PPUSH
34198: LD_VAR 0 1
34202: PPUSH
34203: CALL_OW 251
34207: PPUSH
34208: LD_VAR 0 2
34212: PPUSH
34213: CALL 32467 0 4
34217: ST_TO_ADDR
// end ;
34218: LD_VAR 0 3
34222: RET
// export function DangerInArea ( side , area ) ; begin
34223: LD_INT 0
34225: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_VAR 0 2
34235: PPUSH
34236: LD_INT 81
34238: PUSH
34239: LD_VAR 0 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PPUSH
34248: CALL_OW 70
34252: ST_TO_ADDR
// end ;
34253: LD_VAR 0 3
34257: RET
// export function IsExtension ( b ) ; begin
34258: LD_INT 0
34260: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34261: LD_ADDR_VAR 0 2
34265: PUSH
34266: LD_VAR 0 1
34270: PUSH
34271: LD_INT 23
34273: PUSH
34274: LD_INT 20
34276: PUSH
34277: LD_INT 22
34279: PUSH
34280: LD_INT 17
34282: PUSH
34283: LD_INT 24
34285: PUSH
34286: LD_INT 21
34288: PUSH
34289: LD_INT 19
34291: PUSH
34292: LD_INT 16
34294: PUSH
34295: LD_INT 25
34297: PUSH
34298: LD_INT 18
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: IN
34313: ST_TO_ADDR
// end ;
34314: LD_VAR 0 2
34318: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34319: LD_INT 0
34321: PPUSH
34322: PPUSH
34323: PPUSH
// result := [ ] ;
34324: LD_ADDR_VAR 0 4
34328: PUSH
34329: EMPTY
34330: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34331: LD_ADDR_VAR 0 5
34335: PUSH
34336: LD_VAR 0 2
34340: PPUSH
34341: LD_INT 21
34343: PUSH
34344: LD_INT 3
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PPUSH
34351: CALL_OW 70
34355: ST_TO_ADDR
// if not tmp then
34356: LD_VAR 0 5
34360: NOT
34361: IFFALSE 34365
// exit ;
34363: GO 34429
// if checkLink then
34365: LD_VAR 0 3
34369: IFFALSE 34419
// begin for i in tmp do
34371: LD_ADDR_VAR 0 6
34375: PUSH
34376: LD_VAR 0 5
34380: PUSH
34381: FOR_IN
34382: IFFALSE 34417
// if GetBase ( i ) <> base then
34384: LD_VAR 0 6
34388: PPUSH
34389: CALL_OW 274
34393: PUSH
34394: LD_VAR 0 1
34398: NONEQUAL
34399: IFFALSE 34415
// ComLinkToBase ( base , i ) ;
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_VAR 0 6
34410: PPUSH
34411: CALL_OW 169
34415: GO 34381
34417: POP
34418: POP
// end ; result := tmp ;
34419: LD_ADDR_VAR 0 4
34423: PUSH
34424: LD_VAR 0 5
34428: ST_TO_ADDR
// end ;
34429: LD_VAR 0 4
34433: RET
// export function ComComplete ( units , b ) ; var i ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
// if not units then
34438: LD_VAR 0 1
34442: NOT
34443: IFFALSE 34447
// exit ;
34445: GO 34537
// for i in units do
34447: LD_ADDR_VAR 0 4
34451: PUSH
34452: LD_VAR 0 1
34456: PUSH
34457: FOR_IN
34458: IFFALSE 34535
// if BuildingStatus ( b ) = bs_build then
34460: LD_VAR 0 2
34464: PPUSH
34465: CALL_OW 461
34469: PUSH
34470: LD_INT 1
34472: EQUAL
34473: IFFALSE 34533
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34475: LD_VAR 0 4
34479: PPUSH
34480: LD_STRING h
34482: PUSH
34483: LD_VAR 0 2
34487: PPUSH
34488: CALL_OW 250
34492: PUSH
34493: LD_VAR 0 2
34497: PPUSH
34498: CALL_OW 251
34502: PUSH
34503: LD_VAR 0 2
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: PPUSH
34529: CALL_OW 446
34533: GO 34457
34535: POP
34536: POP
// end ;
34537: LD_VAR 0 3
34541: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34542: LD_INT 0
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34550: LD_VAR 0 1
34554: NOT
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: CALL_OW 263
34565: PUSH
34566: LD_INT 2
34568: NONEQUAL
34569: OR
34570: IFFALSE 34574
// exit ;
34572: GO 34890
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34574: LD_ADDR_VAR 0 6
34578: PUSH
34579: LD_INT 22
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 255
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 30
34601: PUSH
34602: LD_INT 36
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 34
34611: PUSH
34612: LD_INT 31
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PPUSH
34628: CALL_OW 69
34632: ST_TO_ADDR
// if not tmp then
34633: LD_VAR 0 6
34637: NOT
34638: IFFALSE 34642
// exit ;
34640: GO 34890
// result := [ ] ;
34642: LD_ADDR_VAR 0 2
34646: PUSH
34647: EMPTY
34648: ST_TO_ADDR
// for i in tmp do
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_VAR 0 6
34658: PUSH
34659: FOR_IN
34660: IFFALSE 34731
// begin t := UnitsInside ( i ) ;
34662: LD_ADDR_VAR 0 4
34666: PUSH
34667: LD_VAR 0 3
34671: PPUSH
34672: CALL_OW 313
34676: ST_TO_ADDR
// if t then
34677: LD_VAR 0 4
34681: IFFALSE 34729
// for j in t do
34683: LD_ADDR_VAR 0 7
34687: PUSH
34688: LD_VAR 0 4
34692: PUSH
34693: FOR_IN
34694: IFFALSE 34727
// result := Replace ( result , result + 1 , j ) ;
34696: LD_ADDR_VAR 0 2
34700: PUSH
34701: LD_VAR 0 2
34705: PPUSH
34706: LD_VAR 0 2
34710: PUSH
34711: LD_INT 1
34713: PLUS
34714: PPUSH
34715: LD_VAR 0 7
34719: PPUSH
34720: CALL_OW 1
34724: ST_TO_ADDR
34725: GO 34693
34727: POP
34728: POP
// end ;
34729: GO 34659
34731: POP
34732: POP
// if not result then
34733: LD_VAR 0 2
34737: NOT
34738: IFFALSE 34742
// exit ;
34740: GO 34890
// mech := result [ 1 ] ;
34742: LD_ADDR_VAR 0 5
34746: PUSH
34747: LD_VAR 0 2
34751: PUSH
34752: LD_INT 1
34754: ARRAY
34755: ST_TO_ADDR
// if result > 1 then
34756: LD_VAR 0 2
34760: PUSH
34761: LD_INT 1
34763: GREATER
34764: IFFALSE 34876
// begin for i = 2 to result do
34766: LD_ADDR_VAR 0 3
34770: PUSH
34771: DOUBLE
34772: LD_INT 2
34774: DEC
34775: ST_TO_ADDR
34776: LD_VAR 0 2
34780: PUSH
34781: FOR_TO
34782: IFFALSE 34874
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34784: LD_ADDR_VAR 0 4
34788: PUSH
34789: LD_VAR 0 2
34793: PUSH
34794: LD_VAR 0 3
34798: ARRAY
34799: PPUSH
34800: LD_INT 3
34802: PPUSH
34803: CALL_OW 259
34807: PUSH
34808: LD_VAR 0 2
34812: PUSH
34813: LD_VAR 0 3
34817: ARRAY
34818: PPUSH
34819: CALL_OW 432
34823: MINUS
34824: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34825: LD_VAR 0 4
34829: PUSH
34830: LD_VAR 0 5
34834: PPUSH
34835: LD_INT 3
34837: PPUSH
34838: CALL_OW 259
34842: PUSH
34843: LD_VAR 0 5
34847: PPUSH
34848: CALL_OW 432
34852: MINUS
34853: GREATEREQUAL
34854: IFFALSE 34872
// mech := result [ i ] ;
34856: LD_ADDR_VAR 0 5
34860: PUSH
34861: LD_VAR 0 2
34865: PUSH
34866: LD_VAR 0 3
34870: ARRAY
34871: ST_TO_ADDR
// end ;
34872: GO 34781
34874: POP
34875: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34876: LD_VAR 0 1
34880: PPUSH
34881: LD_VAR 0 5
34885: PPUSH
34886: CALL_OW 135
// end ;
34890: LD_VAR 0 2
34894: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34895: LD_INT 0
34897: PPUSH
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
// result := [ ] ;
34910: LD_ADDR_VAR 0 7
34914: PUSH
34915: EMPTY
34916: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34917: LD_VAR 0 1
34921: PPUSH
34922: CALL_OW 266
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: IN
34937: NOT
34938: IFFALSE 34942
// exit ;
34940: GO 36576
// if name then
34942: LD_VAR 0 3
34946: IFFALSE 34962
// SetBName ( base_dep , name ) ;
34948: LD_VAR 0 1
34952: PPUSH
34953: LD_VAR 0 3
34957: PPUSH
34958: CALL_OW 500
// base := GetBase ( base_dep ) ;
34962: LD_ADDR_VAR 0 15
34966: PUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 274
34976: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34977: LD_ADDR_VAR 0 16
34981: PUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 255
34991: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34992: LD_ADDR_VAR 0 17
34996: PUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 248
35006: ST_TO_ADDR
// if sources then
35007: LD_VAR 0 5
35011: IFFALSE 35058
// for i = 1 to 3 do
35013: LD_ADDR_VAR 0 8
35017: PUSH
35018: DOUBLE
35019: LD_INT 1
35021: DEC
35022: ST_TO_ADDR
35023: LD_INT 3
35025: PUSH
35026: FOR_TO
35027: IFFALSE 35056
// AddResourceType ( base , i , sources [ i ] ) ;
35029: LD_VAR 0 15
35033: PPUSH
35034: LD_VAR 0 8
35038: PPUSH
35039: LD_VAR 0 5
35043: PUSH
35044: LD_VAR 0 8
35048: ARRAY
35049: PPUSH
35050: CALL_OW 276
35054: GO 35026
35056: POP
35057: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35058: LD_ADDR_VAR 0 18
35062: PUSH
35063: LD_VAR 0 15
35067: PPUSH
35068: LD_VAR 0 2
35072: PPUSH
35073: LD_INT 1
35075: PPUSH
35076: CALL 34319 0 3
35080: ST_TO_ADDR
// InitHc ;
35081: CALL_OW 19
// InitUc ;
35085: CALL_OW 18
// uc_side := side ;
35089: LD_ADDR_OWVAR 20
35093: PUSH
35094: LD_VAR 0 16
35098: ST_TO_ADDR
// uc_nation := nation ;
35099: LD_ADDR_OWVAR 21
35103: PUSH
35104: LD_VAR 0 17
35108: ST_TO_ADDR
// if buildings then
35109: LD_VAR 0 18
35113: IFFALSE 36435
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35115: LD_ADDR_VAR 0 19
35119: PUSH
35120: LD_VAR 0 18
35124: PPUSH
35125: LD_INT 2
35127: PUSH
35128: LD_INT 30
35130: PUSH
35131: LD_INT 29
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 30
35140: PUSH
35141: LD_INT 30
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: PPUSH
35153: CALL_OW 72
35157: ST_TO_ADDR
// if tmp then
35158: LD_VAR 0 19
35162: IFFALSE 35210
// for i in tmp do
35164: LD_ADDR_VAR 0 8
35168: PUSH
35169: LD_VAR 0 19
35173: PUSH
35174: FOR_IN
35175: IFFALSE 35208
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35177: LD_VAR 0 8
35181: PPUSH
35182: CALL_OW 250
35186: PPUSH
35187: LD_VAR 0 8
35191: PPUSH
35192: CALL_OW 251
35196: PPUSH
35197: LD_VAR 0 16
35201: PPUSH
35202: CALL_OW 441
35206: GO 35174
35208: POP
35209: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35210: LD_VAR 0 18
35214: PPUSH
35215: LD_INT 2
35217: PUSH
35218: LD_INT 30
35220: PUSH
35221: LD_INT 32
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 30
35230: PUSH
35231: LD_INT 33
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: PPUSH
35243: CALL_OW 72
35247: IFFALSE 35335
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35249: LD_ADDR_VAR 0 8
35253: PUSH
35254: LD_VAR 0 18
35258: PPUSH
35259: LD_INT 2
35261: PUSH
35262: LD_INT 30
35264: PUSH
35265: LD_INT 32
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 30
35274: PUSH
35275: LD_INT 33
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: PPUSH
35287: CALL_OW 72
35291: PUSH
35292: FOR_IN
35293: IFFALSE 35333
// begin if not GetBWeapon ( i ) then
35295: LD_VAR 0 8
35299: PPUSH
35300: CALL_OW 269
35304: NOT
35305: IFFALSE 35331
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35307: LD_VAR 0 8
35311: PPUSH
35312: LD_VAR 0 8
35316: PPUSH
35317: LD_VAR 0 2
35321: PPUSH
35322: CALL 36581 0 2
35326: PPUSH
35327: CALL_OW 431
// end ;
35331: GO 35292
35333: POP
35334: POP
// end ; for i = 1 to personel do
35335: LD_ADDR_VAR 0 8
35339: PUSH
35340: DOUBLE
35341: LD_INT 1
35343: DEC
35344: ST_TO_ADDR
35345: LD_VAR 0 6
35349: PUSH
35350: FOR_TO
35351: IFFALSE 36415
// begin if i > 4 then
35353: LD_VAR 0 8
35357: PUSH
35358: LD_INT 4
35360: GREATER
35361: IFFALSE 35365
// break ;
35363: GO 36415
// case i of 1 :
35365: LD_VAR 0 8
35369: PUSH
35370: LD_INT 1
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35378
35376: GO 35458
35378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35379: LD_ADDR_VAR 0 12
35383: PUSH
35384: LD_VAR 0 18
35388: PPUSH
35389: LD_INT 22
35391: PUSH
35392: LD_VAR 0 16
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 58
35403: PUSH
35404: EMPTY
35405: LIST
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: LD_INT 30
35412: PUSH
35413: LD_INT 32
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 30
35422: PUSH
35423: LD_INT 4
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 30
35432: PUSH
35433: LD_INT 5
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: PPUSH
35451: CALL_OW 72
35455: ST_TO_ADDR
35456: GO 35680
35458: LD_INT 2
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35528
35466: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35467: LD_ADDR_VAR 0 12
35471: PUSH
35472: LD_VAR 0 18
35476: PPUSH
35477: LD_INT 22
35479: PUSH
35480: LD_VAR 0 16
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 30
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 30
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PPUSH
35521: CALL_OW 72
35525: ST_TO_ADDR
35526: GO 35680
35528: LD_INT 3
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35598
35536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35537: LD_ADDR_VAR 0 12
35541: PUSH
35542: LD_VAR 0 18
35546: PPUSH
35547: LD_INT 22
35549: PUSH
35550: LD_VAR 0 16
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 30
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 30
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PPUSH
35591: CALL_OW 72
35595: ST_TO_ADDR
35596: GO 35680
35598: LD_INT 4
35600: DOUBLE
35601: EQUAL
35602: IFTRUE 35606
35604: GO 35679
35606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35607: LD_ADDR_VAR 0 12
35611: PUSH
35612: LD_VAR 0 18
35616: PPUSH
35617: LD_INT 22
35619: PUSH
35620: LD_VAR 0 16
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 30
35634: PUSH
35635: LD_INT 6
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 30
35644: PUSH
35645: LD_INT 7
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 30
35654: PUSH
35655: LD_INT 8
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PPUSH
35672: CALL_OW 72
35676: ST_TO_ADDR
35677: GO 35680
35679: POP
// if i = 1 then
35680: LD_VAR 0 8
35684: PUSH
35685: LD_INT 1
35687: EQUAL
35688: IFFALSE 35799
// begin tmp := [ ] ;
35690: LD_ADDR_VAR 0 19
35694: PUSH
35695: EMPTY
35696: ST_TO_ADDR
// for j in f do
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: LD_VAR 0 12
35706: PUSH
35707: FOR_IN
35708: IFFALSE 35781
// if GetBType ( j ) = b_bunker then
35710: LD_VAR 0 9
35714: PPUSH
35715: CALL_OW 266
35719: PUSH
35720: LD_INT 32
35722: EQUAL
35723: IFFALSE 35750
// tmp := Insert ( tmp , 1 , j ) else
35725: LD_ADDR_VAR 0 19
35729: PUSH
35730: LD_VAR 0 19
35734: PPUSH
35735: LD_INT 1
35737: PPUSH
35738: LD_VAR 0 9
35742: PPUSH
35743: CALL_OW 2
35747: ST_TO_ADDR
35748: GO 35779
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35750: LD_ADDR_VAR 0 19
35754: PUSH
35755: LD_VAR 0 19
35759: PPUSH
35760: LD_VAR 0 19
35764: PUSH
35765: LD_INT 1
35767: PLUS
35768: PPUSH
35769: LD_VAR 0 9
35773: PPUSH
35774: CALL_OW 2
35778: ST_TO_ADDR
35779: GO 35707
35781: POP
35782: POP
// if tmp then
35783: LD_VAR 0 19
35787: IFFALSE 35799
// f := tmp ;
35789: LD_ADDR_VAR 0 12
35793: PUSH
35794: LD_VAR 0 19
35798: ST_TO_ADDR
// end ; x := personel [ i ] ;
35799: LD_ADDR_VAR 0 13
35803: PUSH
35804: LD_VAR 0 6
35808: PUSH
35809: LD_VAR 0 8
35813: ARRAY
35814: ST_TO_ADDR
// if x = - 1 then
35815: LD_VAR 0 13
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: EQUAL
35824: IFFALSE 36033
// begin for j in f do
35826: LD_ADDR_VAR 0 9
35830: PUSH
35831: LD_VAR 0 12
35835: PUSH
35836: FOR_IN
35837: IFFALSE 36029
// repeat InitHc ;
35839: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35843: LD_VAR 0 9
35847: PPUSH
35848: CALL_OW 266
35852: PUSH
35853: LD_INT 5
35855: EQUAL
35856: IFFALSE 35926
// begin if UnitsInside ( j ) < 3 then
35858: LD_VAR 0 9
35862: PPUSH
35863: CALL_OW 313
35867: PUSH
35868: LD_INT 3
35870: LESS
35871: IFFALSE 35907
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35873: LD_INT 0
35875: PPUSH
35876: LD_INT 5
35878: PUSH
35879: LD_INT 8
35881: PUSH
35882: LD_INT 9
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: PUSH
35890: LD_VAR 0 17
35894: ARRAY
35895: PPUSH
35896: LD_VAR 0 4
35900: PPUSH
35901: CALL_OW 380
35905: GO 35924
// PrepareHuman ( false , i , skill ) ;
35907: LD_INT 0
35909: PPUSH
35910: LD_VAR 0 8
35914: PPUSH
35915: LD_VAR 0 4
35919: PPUSH
35920: CALL_OW 380
// end else
35924: GO 35943
// PrepareHuman ( false , i , skill ) ;
35926: LD_INT 0
35928: PPUSH
35929: LD_VAR 0 8
35933: PPUSH
35934: LD_VAR 0 4
35938: PPUSH
35939: CALL_OW 380
// un := CreateHuman ;
35943: LD_ADDR_VAR 0 14
35947: PUSH
35948: CALL_OW 44
35952: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35953: LD_ADDR_VAR 0 7
35957: PUSH
35958: LD_VAR 0 7
35962: PPUSH
35963: LD_INT 1
35965: PPUSH
35966: LD_VAR 0 14
35970: PPUSH
35971: CALL_OW 2
35975: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35976: LD_VAR 0 14
35980: PPUSH
35981: LD_VAR 0 9
35985: PPUSH
35986: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35990: LD_VAR 0 9
35994: PPUSH
35995: CALL_OW 313
35999: PUSH
36000: LD_INT 6
36002: EQUAL
36003: PUSH
36004: LD_VAR 0 9
36008: PPUSH
36009: CALL_OW 266
36013: PUSH
36014: LD_INT 32
36016: PUSH
36017: LD_INT 31
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: IN
36024: OR
36025: IFFALSE 35839
36027: GO 35836
36029: POP
36030: POP
// end else
36031: GO 36413
// for j = 1 to x do
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: DOUBLE
36039: LD_INT 1
36041: DEC
36042: ST_TO_ADDR
36043: LD_VAR 0 13
36047: PUSH
36048: FOR_TO
36049: IFFALSE 36411
// begin InitHc ;
36051: CALL_OW 19
// if not f then
36055: LD_VAR 0 12
36059: NOT
36060: IFFALSE 36149
// begin PrepareHuman ( false , i , skill ) ;
36062: LD_INT 0
36064: PPUSH
36065: LD_VAR 0 8
36069: PPUSH
36070: LD_VAR 0 4
36074: PPUSH
36075: CALL_OW 380
// un := CreateHuman ;
36079: LD_ADDR_VAR 0 14
36083: PUSH
36084: CALL_OW 44
36088: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36089: LD_ADDR_VAR 0 7
36093: PUSH
36094: LD_VAR 0 7
36098: PPUSH
36099: LD_INT 1
36101: PPUSH
36102: LD_VAR 0 14
36106: PPUSH
36107: CALL_OW 2
36111: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36112: LD_VAR 0 14
36116: PPUSH
36117: LD_VAR 0 1
36121: PPUSH
36122: CALL_OW 250
36126: PPUSH
36127: LD_VAR 0 1
36131: PPUSH
36132: CALL_OW 251
36136: PPUSH
36137: LD_INT 10
36139: PPUSH
36140: LD_INT 0
36142: PPUSH
36143: CALL_OW 50
// continue ;
36147: GO 36048
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36149: LD_VAR 0 12
36153: PUSH
36154: LD_INT 1
36156: ARRAY
36157: PPUSH
36158: CALL_OW 313
36162: PUSH
36163: LD_VAR 0 12
36167: PUSH
36168: LD_INT 1
36170: ARRAY
36171: PPUSH
36172: CALL_OW 266
36176: PUSH
36177: LD_INT 32
36179: PUSH
36180: LD_INT 31
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: IN
36187: AND
36188: PUSH
36189: LD_VAR 0 12
36193: PUSH
36194: LD_INT 1
36196: ARRAY
36197: PPUSH
36198: CALL_OW 313
36202: PUSH
36203: LD_INT 6
36205: EQUAL
36206: OR
36207: IFFALSE 36227
// f := Delete ( f , 1 ) ;
36209: LD_ADDR_VAR 0 12
36213: PUSH
36214: LD_VAR 0 12
36218: PPUSH
36219: LD_INT 1
36221: PPUSH
36222: CALL_OW 3
36226: ST_TO_ADDR
// if not f then
36227: LD_VAR 0 12
36231: NOT
36232: IFFALSE 36250
// begin x := x + 2 ;
36234: LD_ADDR_VAR 0 13
36238: PUSH
36239: LD_VAR 0 13
36243: PUSH
36244: LD_INT 2
36246: PLUS
36247: ST_TO_ADDR
// continue ;
36248: GO 36048
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36250: LD_VAR 0 12
36254: PUSH
36255: LD_INT 1
36257: ARRAY
36258: PPUSH
36259: CALL_OW 266
36263: PUSH
36264: LD_INT 5
36266: EQUAL
36267: IFFALSE 36341
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36269: LD_VAR 0 12
36273: PUSH
36274: LD_INT 1
36276: ARRAY
36277: PPUSH
36278: CALL_OW 313
36282: PUSH
36283: LD_INT 3
36285: LESS
36286: IFFALSE 36322
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36288: LD_INT 0
36290: PPUSH
36291: LD_INT 5
36293: PUSH
36294: LD_INT 8
36296: PUSH
36297: LD_INT 9
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: LIST
36304: PUSH
36305: LD_VAR 0 17
36309: ARRAY
36310: PPUSH
36311: LD_VAR 0 4
36315: PPUSH
36316: CALL_OW 380
36320: GO 36339
// PrepareHuman ( false , i , skill ) ;
36322: LD_INT 0
36324: PPUSH
36325: LD_VAR 0 8
36329: PPUSH
36330: LD_VAR 0 4
36334: PPUSH
36335: CALL_OW 380
// end else
36339: GO 36358
// PrepareHuman ( false , i , skill ) ;
36341: LD_INT 0
36343: PPUSH
36344: LD_VAR 0 8
36348: PPUSH
36349: LD_VAR 0 4
36353: PPUSH
36354: CALL_OW 380
// un := CreateHuman ;
36358: LD_ADDR_VAR 0 14
36362: PUSH
36363: CALL_OW 44
36367: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36368: LD_ADDR_VAR 0 7
36372: PUSH
36373: LD_VAR 0 7
36377: PPUSH
36378: LD_INT 1
36380: PPUSH
36381: LD_VAR 0 14
36385: PPUSH
36386: CALL_OW 2
36390: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36391: LD_VAR 0 14
36395: PPUSH
36396: LD_VAR 0 12
36400: PUSH
36401: LD_INT 1
36403: ARRAY
36404: PPUSH
36405: CALL_OW 52
// end ;
36409: GO 36048
36411: POP
36412: POP
// end ;
36413: GO 35350
36415: POP
36416: POP
// result := result ^ buildings ;
36417: LD_ADDR_VAR 0 7
36421: PUSH
36422: LD_VAR 0 7
36426: PUSH
36427: LD_VAR 0 18
36431: ADD
36432: ST_TO_ADDR
// end else
36433: GO 36576
// begin for i = 1 to personel do
36435: LD_ADDR_VAR 0 8
36439: PUSH
36440: DOUBLE
36441: LD_INT 1
36443: DEC
36444: ST_TO_ADDR
36445: LD_VAR 0 6
36449: PUSH
36450: FOR_TO
36451: IFFALSE 36574
// begin if i > 4 then
36453: LD_VAR 0 8
36457: PUSH
36458: LD_INT 4
36460: GREATER
36461: IFFALSE 36465
// break ;
36463: GO 36574
// x := personel [ i ] ;
36465: LD_ADDR_VAR 0 13
36469: PUSH
36470: LD_VAR 0 6
36474: PUSH
36475: LD_VAR 0 8
36479: ARRAY
36480: ST_TO_ADDR
// if x = - 1 then
36481: LD_VAR 0 13
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: EQUAL
36490: IFFALSE 36494
// continue ;
36492: GO 36450
// PrepareHuman ( false , i , skill ) ;
36494: LD_INT 0
36496: PPUSH
36497: LD_VAR 0 8
36501: PPUSH
36502: LD_VAR 0 4
36506: PPUSH
36507: CALL_OW 380
// un := CreateHuman ;
36511: LD_ADDR_VAR 0 14
36515: PUSH
36516: CALL_OW 44
36520: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36521: LD_VAR 0 14
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 250
36535: PPUSH
36536: LD_VAR 0 1
36540: PPUSH
36541: CALL_OW 251
36545: PPUSH
36546: LD_INT 10
36548: PPUSH
36549: LD_INT 0
36551: PPUSH
36552: CALL_OW 50
// result := result ^ un ;
36556: LD_ADDR_VAR 0 7
36560: PUSH
36561: LD_VAR 0 7
36565: PUSH
36566: LD_VAR 0 14
36570: ADD
36571: ST_TO_ADDR
// end ;
36572: GO 36450
36574: POP
36575: POP
// end ; end ;
36576: LD_VAR 0 7
36580: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36581: LD_INT 0
36583: PPUSH
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
36596: PPUSH
36597: PPUSH
36598: PPUSH
// result := false ;
36599: LD_ADDR_VAR 0 3
36603: PUSH
36604: LD_INT 0
36606: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36607: LD_VAR 0 1
36611: NOT
36612: PUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 266
36622: PUSH
36623: LD_INT 32
36625: PUSH
36626: LD_INT 33
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: IN
36633: NOT
36634: OR
36635: IFFALSE 36639
// exit ;
36637: GO 37748
// nat := GetNation ( tower ) ;
36639: LD_ADDR_VAR 0 12
36643: PUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: CALL_OW 248
36653: ST_TO_ADDR
// side := GetSide ( tower ) ;
36654: LD_ADDR_VAR 0 16
36658: PUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: CALL_OW 255
36668: ST_TO_ADDR
// x := GetX ( tower ) ;
36669: LD_ADDR_VAR 0 10
36673: PUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 250
36683: ST_TO_ADDR
// y := GetY ( tower ) ;
36684: LD_ADDR_VAR 0 11
36688: PUSH
36689: LD_VAR 0 1
36693: PPUSH
36694: CALL_OW 251
36698: ST_TO_ADDR
// if not x or not y then
36699: LD_VAR 0 10
36703: NOT
36704: PUSH
36705: LD_VAR 0 11
36709: NOT
36710: OR
36711: IFFALSE 36715
// exit ;
36713: GO 37748
// weapon := 0 ;
36715: LD_ADDR_VAR 0 18
36719: PUSH
36720: LD_INT 0
36722: ST_TO_ADDR
// fac_list := [ ] ;
36723: LD_ADDR_VAR 0 17
36727: PUSH
36728: EMPTY
36729: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36730: LD_ADDR_VAR 0 6
36734: PUSH
36735: LD_VAR 0 1
36739: PPUSH
36740: CALL_OW 274
36744: PPUSH
36745: LD_VAR 0 2
36749: PPUSH
36750: LD_INT 0
36752: PPUSH
36753: CALL 34319 0 3
36757: PPUSH
36758: LD_INT 30
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PPUSH
36768: CALL_OW 72
36772: ST_TO_ADDR
// if not factories then
36773: LD_VAR 0 6
36777: NOT
36778: IFFALSE 36782
// exit ;
36780: GO 37748
// for i in factories do
36782: LD_ADDR_VAR 0 8
36786: PUSH
36787: LD_VAR 0 6
36791: PUSH
36792: FOR_IN
36793: IFFALSE 36818
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36795: LD_ADDR_VAR 0 17
36799: PUSH
36800: LD_VAR 0 17
36804: PUSH
36805: LD_VAR 0 8
36809: PPUSH
36810: CALL_OW 478
36814: UNION
36815: ST_TO_ADDR
36816: GO 36792
36818: POP
36819: POP
// if not fac_list then
36820: LD_VAR 0 17
36824: NOT
36825: IFFALSE 36829
// exit ;
36827: GO 37748
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36829: LD_ADDR_VAR 0 5
36833: PUSH
36834: LD_INT 4
36836: PUSH
36837: LD_INT 5
36839: PUSH
36840: LD_INT 9
36842: PUSH
36843: LD_INT 10
36845: PUSH
36846: LD_INT 6
36848: PUSH
36849: LD_INT 7
36851: PUSH
36852: LD_INT 11
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 27
36866: PUSH
36867: LD_INT 28
36869: PUSH
36870: LD_INT 26
36872: PUSH
36873: LD_INT 30
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 43
36884: PUSH
36885: LD_INT 44
36887: PUSH
36888: LD_INT 46
36890: PUSH
36891: LD_INT 45
36893: PUSH
36894: LD_INT 47
36896: PUSH
36897: LD_INT 49
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: PUSH
36913: LD_VAR 0 12
36917: ARRAY
36918: ST_TO_ADDR
// list := list isect fac_list ;
36919: LD_ADDR_VAR 0 5
36923: PUSH
36924: LD_VAR 0 5
36928: PUSH
36929: LD_VAR 0 17
36933: ISECT
36934: ST_TO_ADDR
// if not list then
36935: LD_VAR 0 5
36939: NOT
36940: IFFALSE 36944
// exit ;
36942: GO 37748
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36944: LD_VAR 0 12
36948: PUSH
36949: LD_INT 3
36951: EQUAL
36952: PUSH
36953: LD_INT 49
36955: PUSH
36956: LD_VAR 0 5
36960: IN
36961: AND
36962: PUSH
36963: LD_INT 31
36965: PPUSH
36966: LD_VAR 0 16
36970: PPUSH
36971: CALL_OW 321
36975: PUSH
36976: LD_INT 2
36978: EQUAL
36979: AND
36980: IFFALSE 37040
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36982: LD_INT 22
36984: PUSH
36985: LD_VAR 0 16
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 35
36996: PUSH
36997: LD_INT 49
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 91
37006: PUSH
37007: LD_VAR 0 1
37011: PUSH
37012: LD_INT 10
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: CALL_OW 69
37029: NOT
37030: IFFALSE 37040
// weapon := ru_time_lapser ;
37032: LD_ADDR_VAR 0 18
37036: PUSH
37037: LD_INT 49
37039: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37040: LD_VAR 0 12
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: IN
37055: PUSH
37056: LD_INT 11
37058: PUSH
37059: LD_VAR 0 5
37063: IN
37064: PUSH
37065: LD_INT 30
37067: PUSH
37068: LD_VAR 0 5
37072: IN
37073: OR
37074: AND
37075: PUSH
37076: LD_INT 6
37078: PPUSH
37079: LD_VAR 0 16
37083: PPUSH
37084: CALL_OW 321
37088: PUSH
37089: LD_INT 2
37091: EQUAL
37092: AND
37093: IFFALSE 37258
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37095: LD_INT 22
37097: PUSH
37098: LD_VAR 0 16
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: LD_INT 35
37112: PUSH
37113: LD_INT 11
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 35
37122: PUSH
37123: LD_INT 30
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 91
37137: PUSH
37138: LD_VAR 0 1
37142: PUSH
37143: LD_INT 18
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: PPUSH
37156: CALL_OW 69
37160: NOT
37161: PUSH
37162: LD_INT 22
37164: PUSH
37165: LD_VAR 0 16
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: LD_INT 30
37179: PUSH
37180: LD_INT 32
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 30
37189: PUSH
37190: LD_INT 33
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 91
37204: PUSH
37205: LD_VAR 0 1
37209: PUSH
37210: LD_INT 12
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: PPUSH
37226: CALL_OW 69
37230: PUSH
37231: LD_INT 2
37233: GREATER
37234: AND
37235: IFFALSE 37258
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37237: LD_ADDR_VAR 0 18
37241: PUSH
37242: LD_INT 11
37244: PUSH
37245: LD_INT 30
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_VAR 0 12
37256: ARRAY
37257: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37258: LD_VAR 0 18
37262: NOT
37263: PUSH
37264: LD_INT 40
37266: PPUSH
37267: LD_VAR 0 16
37271: PPUSH
37272: CALL_OW 321
37276: PUSH
37277: LD_INT 2
37279: EQUAL
37280: AND
37281: PUSH
37282: LD_INT 7
37284: PUSH
37285: LD_VAR 0 5
37289: IN
37290: PUSH
37291: LD_INT 28
37293: PUSH
37294: LD_VAR 0 5
37298: IN
37299: OR
37300: PUSH
37301: LD_INT 45
37303: PUSH
37304: LD_VAR 0 5
37308: IN
37309: OR
37310: AND
37311: IFFALSE 37565
// begin hex := GetHexInfo ( x , y ) ;
37313: LD_ADDR_VAR 0 4
37317: PUSH
37318: LD_VAR 0 10
37322: PPUSH
37323: LD_VAR 0 11
37327: PPUSH
37328: CALL_OW 546
37332: ST_TO_ADDR
// if hex [ 1 ] then
37333: LD_VAR 0 4
37337: PUSH
37338: LD_INT 1
37340: ARRAY
37341: IFFALSE 37345
// exit ;
37343: GO 37748
// height := hex [ 2 ] ;
37345: LD_ADDR_VAR 0 15
37349: PUSH
37350: LD_VAR 0 4
37354: PUSH
37355: LD_INT 2
37357: ARRAY
37358: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37359: LD_ADDR_VAR 0 14
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 3
37372: PUSH
37373: LD_INT 5
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
// for i in tmp do
37382: LD_ADDR_VAR 0 8
37386: PUSH
37387: LD_VAR 0 14
37391: PUSH
37392: FOR_IN
37393: IFFALSE 37563
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37395: LD_ADDR_VAR 0 9
37399: PUSH
37400: LD_VAR 0 10
37404: PPUSH
37405: LD_VAR 0 8
37409: PPUSH
37410: LD_INT 5
37412: PPUSH
37413: CALL_OW 272
37417: PUSH
37418: LD_VAR 0 11
37422: PPUSH
37423: LD_VAR 0 8
37427: PPUSH
37428: LD_INT 5
37430: PPUSH
37431: CALL_OW 273
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37440: LD_VAR 0 9
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: PPUSH
37449: LD_VAR 0 9
37453: PUSH
37454: LD_INT 2
37456: ARRAY
37457: PPUSH
37458: CALL_OW 488
37462: IFFALSE 37561
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37464: LD_ADDR_VAR 0 4
37468: PUSH
37469: LD_VAR 0 9
37473: PUSH
37474: LD_INT 1
37476: ARRAY
37477: PPUSH
37478: LD_VAR 0 9
37482: PUSH
37483: LD_INT 2
37485: ARRAY
37486: PPUSH
37487: CALL_OW 546
37491: ST_TO_ADDR
// if hex [ 1 ] then
37492: LD_VAR 0 4
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: IFFALSE 37504
// continue ;
37502: GO 37392
// h := hex [ 2 ] ;
37504: LD_ADDR_VAR 0 13
37508: PUSH
37509: LD_VAR 0 4
37513: PUSH
37514: LD_INT 2
37516: ARRAY
37517: ST_TO_ADDR
// if h + 7 < height then
37518: LD_VAR 0 13
37522: PUSH
37523: LD_INT 7
37525: PLUS
37526: PUSH
37527: LD_VAR 0 15
37531: LESS
37532: IFFALSE 37561
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37534: LD_ADDR_VAR 0 18
37538: PUSH
37539: LD_INT 7
37541: PUSH
37542: LD_INT 28
37544: PUSH
37545: LD_INT 45
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PUSH
37553: LD_VAR 0 12
37557: ARRAY
37558: ST_TO_ADDR
// break ;
37559: GO 37563
// end ; end ; end ;
37561: GO 37392
37563: POP
37564: POP
// end ; if not weapon then
37565: LD_VAR 0 18
37569: NOT
37570: IFFALSE 37630
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37572: LD_ADDR_VAR 0 5
37576: PUSH
37577: LD_VAR 0 5
37581: PUSH
37582: LD_INT 11
37584: PUSH
37585: LD_INT 30
37587: PUSH
37588: LD_INT 49
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: DIFF
37596: ST_TO_ADDR
// if not list then
37597: LD_VAR 0 5
37601: NOT
37602: IFFALSE 37606
// exit ;
37604: GO 37748
// weapon := list [ rand ( 1 , list ) ] ;
37606: LD_ADDR_VAR 0 18
37610: PUSH
37611: LD_VAR 0 5
37615: PUSH
37616: LD_INT 1
37618: PPUSH
37619: LD_VAR 0 5
37623: PPUSH
37624: CALL_OW 12
37628: ARRAY
37629: ST_TO_ADDR
// end ; if weapon then
37630: LD_VAR 0 18
37634: IFFALSE 37748
// begin tmp := CostOfWeapon ( weapon ) ;
37636: LD_ADDR_VAR 0 14
37640: PUSH
37641: LD_VAR 0 18
37645: PPUSH
37646: CALL_OW 451
37650: ST_TO_ADDR
// j := GetBase ( tower ) ;
37651: LD_ADDR_VAR 0 9
37655: PUSH
37656: LD_VAR 0 1
37660: PPUSH
37661: CALL_OW 274
37665: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37666: LD_VAR 0 9
37670: PPUSH
37671: LD_INT 1
37673: PPUSH
37674: CALL_OW 275
37678: PUSH
37679: LD_VAR 0 14
37683: PUSH
37684: LD_INT 1
37686: ARRAY
37687: GREATEREQUAL
37688: PUSH
37689: LD_VAR 0 9
37693: PPUSH
37694: LD_INT 2
37696: PPUSH
37697: CALL_OW 275
37701: PUSH
37702: LD_VAR 0 14
37706: PUSH
37707: LD_INT 2
37709: ARRAY
37710: GREATEREQUAL
37711: AND
37712: PUSH
37713: LD_VAR 0 9
37717: PPUSH
37718: LD_INT 3
37720: PPUSH
37721: CALL_OW 275
37725: PUSH
37726: LD_VAR 0 14
37730: PUSH
37731: LD_INT 3
37733: ARRAY
37734: GREATEREQUAL
37735: AND
37736: IFFALSE 37748
// result := weapon ;
37738: LD_ADDR_VAR 0 3
37742: PUSH
37743: LD_VAR 0 18
37747: ST_TO_ADDR
// end ; end ;
37748: LD_VAR 0 3
37752: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37753: LD_INT 0
37755: PPUSH
37756: PPUSH
// result := true ;
37757: LD_ADDR_VAR 0 3
37761: PUSH
37762: LD_INT 1
37764: ST_TO_ADDR
// if array1 = array2 then
37765: LD_VAR 0 1
37769: PUSH
37770: LD_VAR 0 2
37774: EQUAL
37775: IFFALSE 37835
// begin for i = 1 to array1 do
37777: LD_ADDR_VAR 0 4
37781: PUSH
37782: DOUBLE
37783: LD_INT 1
37785: DEC
37786: ST_TO_ADDR
37787: LD_VAR 0 1
37791: PUSH
37792: FOR_TO
37793: IFFALSE 37831
// if array1 [ i ] <> array2 [ i ] then
37795: LD_VAR 0 1
37799: PUSH
37800: LD_VAR 0 4
37804: ARRAY
37805: PUSH
37806: LD_VAR 0 2
37810: PUSH
37811: LD_VAR 0 4
37815: ARRAY
37816: NONEQUAL
37817: IFFALSE 37829
// begin result := false ;
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: LD_INT 0
37826: ST_TO_ADDR
// break ;
37827: GO 37831
// end ;
37829: GO 37792
37831: POP
37832: POP
// end else
37833: GO 37843
// result := false ;
37835: LD_ADDR_VAR 0 3
37839: PUSH
37840: LD_INT 0
37842: ST_TO_ADDR
// end ;
37843: LD_VAR 0 3
37847: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37848: LD_INT 0
37850: PPUSH
37851: PPUSH
// if not array1 or not array2 then
37852: LD_VAR 0 1
37856: NOT
37857: PUSH
37858: LD_VAR 0 2
37862: NOT
37863: OR
37864: IFFALSE 37868
// exit ;
37866: GO 37932
// result := true ;
37868: LD_ADDR_VAR 0 3
37872: PUSH
37873: LD_INT 1
37875: ST_TO_ADDR
// for i = 1 to array1 do
37876: LD_ADDR_VAR 0 4
37880: PUSH
37881: DOUBLE
37882: LD_INT 1
37884: DEC
37885: ST_TO_ADDR
37886: LD_VAR 0 1
37890: PUSH
37891: FOR_TO
37892: IFFALSE 37930
// if array1 [ i ] <> array2 [ i ] then
37894: LD_VAR 0 1
37898: PUSH
37899: LD_VAR 0 4
37903: ARRAY
37904: PUSH
37905: LD_VAR 0 2
37909: PUSH
37910: LD_VAR 0 4
37914: ARRAY
37915: NONEQUAL
37916: IFFALSE 37928
// begin result := false ;
37918: LD_ADDR_VAR 0 3
37922: PUSH
37923: LD_INT 0
37925: ST_TO_ADDR
// break ;
37926: GO 37930
// end ;
37928: GO 37891
37930: POP
37931: POP
// end ;
37932: LD_VAR 0 3
37936: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37937: LD_INT 0
37939: PPUSH
37940: PPUSH
37941: PPUSH
// pom := GetBase ( fac ) ;
37942: LD_ADDR_VAR 0 5
37946: PUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 274
37956: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37957: LD_ADDR_VAR 0 4
37961: PUSH
37962: LD_VAR 0 2
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: PPUSH
37971: LD_VAR 0 2
37975: PUSH
37976: LD_INT 2
37978: ARRAY
37979: PPUSH
37980: LD_VAR 0 2
37984: PUSH
37985: LD_INT 3
37987: ARRAY
37988: PPUSH
37989: LD_VAR 0 2
37993: PUSH
37994: LD_INT 4
37996: ARRAY
37997: PPUSH
37998: CALL_OW 449
38002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38003: LD_ADDR_VAR 0 3
38007: PUSH
38008: LD_VAR 0 5
38012: PPUSH
38013: LD_INT 1
38015: PPUSH
38016: CALL_OW 275
38020: PUSH
38021: LD_VAR 0 4
38025: PUSH
38026: LD_INT 1
38028: ARRAY
38029: GREATEREQUAL
38030: PUSH
38031: LD_VAR 0 5
38035: PPUSH
38036: LD_INT 2
38038: PPUSH
38039: CALL_OW 275
38043: PUSH
38044: LD_VAR 0 4
38048: PUSH
38049: LD_INT 2
38051: ARRAY
38052: GREATEREQUAL
38053: AND
38054: PUSH
38055: LD_VAR 0 5
38059: PPUSH
38060: LD_INT 3
38062: PPUSH
38063: CALL_OW 275
38067: PUSH
38068: LD_VAR 0 4
38072: PUSH
38073: LD_INT 3
38075: ARRAY
38076: GREATEREQUAL
38077: AND
38078: ST_TO_ADDR
// end ;
38079: LD_VAR 0 3
38083: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38084: LD_INT 0
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
// pom := GetBase ( building ) ;
38090: LD_ADDR_VAR 0 3
38094: PUSH
38095: LD_VAR 0 1
38099: PPUSH
38100: CALL_OW 274
38104: ST_TO_ADDR
// if not pom then
38105: LD_VAR 0 3
38109: NOT
38110: IFFALSE 38114
// exit ;
38112: GO 38284
// btype := GetBType ( building ) ;
38114: LD_ADDR_VAR 0 5
38118: PUSH
38119: LD_VAR 0 1
38123: PPUSH
38124: CALL_OW 266
38128: ST_TO_ADDR
// if btype = b_armoury then
38129: LD_VAR 0 5
38133: PUSH
38134: LD_INT 4
38136: EQUAL
38137: IFFALSE 38147
// btype := b_barracks ;
38139: LD_ADDR_VAR 0 5
38143: PUSH
38144: LD_INT 5
38146: ST_TO_ADDR
// if btype = b_depot then
38147: LD_VAR 0 5
38151: PUSH
38152: LD_INT 0
38154: EQUAL
38155: IFFALSE 38165
// btype := b_warehouse ;
38157: LD_ADDR_VAR 0 5
38161: PUSH
38162: LD_INT 1
38164: ST_TO_ADDR
// if btype = b_workshop then
38165: LD_VAR 0 5
38169: PUSH
38170: LD_INT 2
38172: EQUAL
38173: IFFALSE 38183
// btype := b_factory ;
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_INT 3
38182: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38183: LD_ADDR_VAR 0 4
38187: PUSH
38188: LD_VAR 0 5
38192: PPUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 248
38202: PPUSH
38203: CALL_OW 450
38207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38208: LD_ADDR_VAR 0 2
38212: PUSH
38213: LD_VAR 0 3
38217: PPUSH
38218: LD_INT 1
38220: PPUSH
38221: CALL_OW 275
38225: PUSH
38226: LD_VAR 0 4
38230: PUSH
38231: LD_INT 1
38233: ARRAY
38234: GREATEREQUAL
38235: PUSH
38236: LD_VAR 0 3
38240: PPUSH
38241: LD_INT 2
38243: PPUSH
38244: CALL_OW 275
38248: PUSH
38249: LD_VAR 0 4
38253: PUSH
38254: LD_INT 2
38256: ARRAY
38257: GREATEREQUAL
38258: AND
38259: PUSH
38260: LD_VAR 0 3
38264: PPUSH
38265: LD_INT 3
38267: PPUSH
38268: CALL_OW 275
38272: PUSH
38273: LD_VAR 0 4
38277: PUSH
38278: LD_INT 3
38280: ARRAY
38281: GREATEREQUAL
38282: AND
38283: ST_TO_ADDR
// end ;
38284: LD_VAR 0 2
38288: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38289: LD_INT 0
38291: PPUSH
38292: PPUSH
38293: PPUSH
// pom := GetBase ( building ) ;
38294: LD_ADDR_VAR 0 4
38298: PUSH
38299: LD_VAR 0 1
38303: PPUSH
38304: CALL_OW 274
38308: ST_TO_ADDR
// if not pom then
38309: LD_VAR 0 4
38313: NOT
38314: IFFALSE 38318
// exit ;
38316: GO 38419
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38318: LD_ADDR_VAR 0 5
38322: PUSH
38323: LD_VAR 0 2
38327: PPUSH
38328: LD_VAR 0 1
38332: PPUSH
38333: CALL_OW 248
38337: PPUSH
38338: CALL_OW 450
38342: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38343: LD_ADDR_VAR 0 3
38347: PUSH
38348: LD_VAR 0 4
38352: PPUSH
38353: LD_INT 1
38355: PPUSH
38356: CALL_OW 275
38360: PUSH
38361: LD_VAR 0 5
38365: PUSH
38366: LD_INT 1
38368: ARRAY
38369: GREATEREQUAL
38370: PUSH
38371: LD_VAR 0 4
38375: PPUSH
38376: LD_INT 2
38378: PPUSH
38379: CALL_OW 275
38383: PUSH
38384: LD_VAR 0 5
38388: PUSH
38389: LD_INT 2
38391: ARRAY
38392: GREATEREQUAL
38393: AND
38394: PUSH
38395: LD_VAR 0 4
38399: PPUSH
38400: LD_INT 3
38402: PPUSH
38403: CALL_OW 275
38407: PUSH
38408: LD_VAR 0 5
38412: PUSH
38413: LD_INT 3
38415: ARRAY
38416: GREATEREQUAL
38417: AND
38418: ST_TO_ADDR
// end ;
38419: LD_VAR 0 3
38423: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38424: LD_INT 0
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
// result := false ;
38437: LD_ADDR_VAR 0 8
38441: PUSH
38442: LD_INT 0
38444: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38445: LD_VAR 0 5
38449: NOT
38450: PUSH
38451: LD_VAR 0 1
38455: NOT
38456: OR
38457: PUSH
38458: LD_VAR 0 2
38462: NOT
38463: OR
38464: PUSH
38465: LD_VAR 0 3
38469: NOT
38470: OR
38471: IFFALSE 38475
// exit ;
38473: GO 39289
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38475: LD_ADDR_VAR 0 14
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: LD_VAR 0 2
38489: PPUSH
38490: LD_VAR 0 3
38494: PPUSH
38495: LD_VAR 0 4
38499: PPUSH
38500: LD_VAR 0 5
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PPUSH
38509: CALL_OW 248
38513: PPUSH
38514: LD_INT 0
38516: PPUSH
38517: CALL 40526 0 6
38521: ST_TO_ADDR
// if not hexes then
38522: LD_VAR 0 14
38526: NOT
38527: IFFALSE 38531
// exit ;
38529: GO 39289
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38531: LD_ADDR_VAR 0 17
38535: PUSH
38536: LD_VAR 0 5
38540: PPUSH
38541: LD_INT 22
38543: PUSH
38544: LD_VAR 0 13
38548: PPUSH
38549: CALL_OW 255
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 30
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 30
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PPUSH
38590: CALL_OW 72
38594: ST_TO_ADDR
// for i = 1 to hexes do
38595: LD_ADDR_VAR 0 9
38599: PUSH
38600: DOUBLE
38601: LD_INT 1
38603: DEC
38604: ST_TO_ADDR
38605: LD_VAR 0 14
38609: PUSH
38610: FOR_TO
38611: IFFALSE 39287
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38613: LD_ADDR_VAR 0 13
38617: PUSH
38618: LD_VAR 0 14
38622: PUSH
38623: LD_VAR 0 9
38627: ARRAY
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PPUSH
38633: LD_VAR 0 14
38637: PUSH
38638: LD_VAR 0 9
38642: ARRAY
38643: PUSH
38644: LD_INT 2
38646: ARRAY
38647: PPUSH
38648: CALL_OW 428
38652: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38653: LD_VAR 0 14
38657: PUSH
38658: LD_VAR 0 9
38662: ARRAY
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: PPUSH
38668: LD_VAR 0 14
38672: PUSH
38673: LD_VAR 0 9
38677: ARRAY
38678: PUSH
38679: LD_INT 2
38681: ARRAY
38682: PPUSH
38683: CALL_OW 351
38687: PUSH
38688: LD_VAR 0 14
38692: PUSH
38693: LD_VAR 0 9
38697: ARRAY
38698: PUSH
38699: LD_INT 1
38701: ARRAY
38702: PPUSH
38703: LD_VAR 0 14
38707: PUSH
38708: LD_VAR 0 9
38712: ARRAY
38713: PUSH
38714: LD_INT 2
38716: ARRAY
38717: PPUSH
38718: CALL_OW 488
38722: NOT
38723: OR
38724: PUSH
38725: LD_VAR 0 13
38729: PPUSH
38730: CALL_OW 247
38734: PUSH
38735: LD_INT 3
38737: EQUAL
38738: OR
38739: IFFALSE 38745
// exit ;
38741: POP
38742: POP
38743: GO 39289
// if not tmp then
38745: LD_VAR 0 13
38749: NOT
38750: IFFALSE 38754
// continue ;
38752: GO 38610
// result := true ;
38754: LD_ADDR_VAR 0 8
38758: PUSH
38759: LD_INT 1
38761: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38762: LD_VAR 0 6
38766: PUSH
38767: LD_VAR 0 13
38771: PPUSH
38772: CALL_OW 247
38776: PUSH
38777: LD_INT 2
38779: EQUAL
38780: AND
38781: PUSH
38782: LD_VAR 0 13
38786: PPUSH
38787: CALL_OW 263
38791: PUSH
38792: LD_INT 1
38794: EQUAL
38795: AND
38796: IFFALSE 38960
// begin if IsDrivenBy ( tmp ) then
38798: LD_VAR 0 13
38802: PPUSH
38803: CALL_OW 311
38807: IFFALSE 38811
// continue ;
38809: GO 38610
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38811: LD_VAR 0 6
38815: PPUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 60
38821: PUSH
38822: EMPTY
38823: LIST
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: LD_INT 55
38834: PUSH
38835: EMPTY
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PPUSH
38846: CALL_OW 72
38850: IFFALSE 38958
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38852: LD_ADDR_VAR 0 18
38856: PUSH
38857: LD_VAR 0 6
38861: PPUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 60
38867: PUSH
38868: EMPTY
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: LD_INT 55
38880: PUSH
38881: EMPTY
38882: LIST
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PPUSH
38892: CALL_OW 72
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: ST_TO_ADDR
// if IsInUnit ( driver ) then
38901: LD_VAR 0 18
38905: PPUSH
38906: CALL_OW 310
38910: IFFALSE 38921
// ComExit ( driver ) ;
38912: LD_VAR 0 18
38916: PPUSH
38917: CALL 63710 0 1
// AddComEnterUnit ( driver , tmp ) ;
38921: LD_VAR 0 18
38925: PPUSH
38926: LD_VAR 0 13
38930: PPUSH
38931: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38935: LD_VAR 0 18
38939: PPUSH
38940: LD_VAR 0 7
38944: PPUSH
38945: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38949: LD_VAR 0 18
38953: PPUSH
38954: CALL_OW 181
// end ; continue ;
38958: GO 38610
// end ; if not cleaners or not tmp in cleaners then
38960: LD_VAR 0 6
38964: NOT
38965: PUSH
38966: LD_VAR 0 13
38970: PUSH
38971: LD_VAR 0 6
38975: IN
38976: NOT
38977: OR
38978: IFFALSE 39285
// begin if dep then
38980: LD_VAR 0 17
38984: IFFALSE 39120
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38986: LD_ADDR_VAR 0 16
38990: PUSH
38991: LD_VAR 0 17
38995: PUSH
38996: LD_INT 1
38998: ARRAY
38999: PPUSH
39000: CALL_OW 250
39004: PPUSH
39005: LD_VAR 0 17
39009: PUSH
39010: LD_INT 1
39012: ARRAY
39013: PPUSH
39014: CALL_OW 254
39018: PPUSH
39019: LD_INT 5
39021: PPUSH
39022: CALL_OW 272
39026: PUSH
39027: LD_VAR 0 17
39031: PUSH
39032: LD_INT 1
39034: ARRAY
39035: PPUSH
39036: CALL_OW 251
39040: PPUSH
39041: LD_VAR 0 17
39045: PUSH
39046: LD_INT 1
39048: ARRAY
39049: PPUSH
39050: CALL_OW 254
39054: PPUSH
39055: LD_INT 5
39057: PPUSH
39058: CALL_OW 273
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39067: LD_VAR 0 16
39071: PUSH
39072: LD_INT 1
39074: ARRAY
39075: PPUSH
39076: LD_VAR 0 16
39080: PUSH
39081: LD_INT 2
39083: ARRAY
39084: PPUSH
39085: CALL_OW 488
39089: IFFALSE 39120
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39091: LD_VAR 0 13
39095: PPUSH
39096: LD_VAR 0 16
39100: PUSH
39101: LD_INT 1
39103: ARRAY
39104: PPUSH
39105: LD_VAR 0 16
39109: PUSH
39110: LD_INT 2
39112: ARRAY
39113: PPUSH
39114: CALL_OW 111
// continue ;
39118: GO 38610
// end ; end ; r := GetDir ( tmp ) ;
39120: LD_ADDR_VAR 0 15
39124: PUSH
39125: LD_VAR 0 13
39129: PPUSH
39130: CALL_OW 254
39134: ST_TO_ADDR
// if r = 5 then
39135: LD_VAR 0 15
39139: PUSH
39140: LD_INT 5
39142: EQUAL
39143: IFFALSE 39153
// r := 0 ;
39145: LD_ADDR_VAR 0 15
39149: PUSH
39150: LD_INT 0
39152: ST_TO_ADDR
// for j = r to 5 do
39153: LD_ADDR_VAR 0 10
39157: PUSH
39158: DOUBLE
39159: LD_VAR 0 15
39163: DEC
39164: ST_TO_ADDR
39165: LD_INT 5
39167: PUSH
39168: FOR_TO
39169: IFFALSE 39283
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39171: LD_ADDR_VAR 0 11
39175: PUSH
39176: LD_VAR 0 13
39180: PPUSH
39181: CALL_OW 250
39185: PPUSH
39186: LD_VAR 0 10
39190: PPUSH
39191: LD_INT 2
39193: PPUSH
39194: CALL_OW 272
39198: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39199: LD_ADDR_VAR 0 12
39203: PUSH
39204: LD_VAR 0 13
39208: PPUSH
39209: CALL_OW 251
39213: PPUSH
39214: LD_VAR 0 10
39218: PPUSH
39219: LD_INT 2
39221: PPUSH
39222: CALL_OW 273
39226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39227: LD_VAR 0 11
39231: PPUSH
39232: LD_VAR 0 12
39236: PPUSH
39237: CALL_OW 488
39241: PUSH
39242: LD_VAR 0 11
39246: PPUSH
39247: LD_VAR 0 12
39251: PPUSH
39252: CALL_OW 428
39256: NOT
39257: AND
39258: IFFALSE 39281
// begin ComMoveXY ( tmp , _x , _y ) ;
39260: LD_VAR 0 13
39264: PPUSH
39265: LD_VAR 0 11
39269: PPUSH
39270: LD_VAR 0 12
39274: PPUSH
39275: CALL_OW 111
// break ;
39279: GO 39283
// end ; end ;
39281: GO 39168
39283: POP
39284: POP
// end ; end ;
39285: GO 38610
39287: POP
39288: POP
// end ;
39289: LD_VAR 0 8
39293: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39294: LD_INT 0
39296: PPUSH
// result := true ;
39297: LD_ADDR_VAR 0 3
39301: PUSH
39302: LD_INT 1
39304: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39305: LD_VAR 0 2
39309: PUSH
39310: LD_INT 24
39312: DOUBLE
39313: EQUAL
39314: IFTRUE 39324
39316: LD_INT 33
39318: DOUBLE
39319: EQUAL
39320: IFTRUE 39324
39322: GO 39349
39324: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39325: LD_ADDR_VAR 0 3
39329: PUSH
39330: LD_INT 32
39332: PPUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 321
39342: PUSH
39343: LD_INT 2
39345: EQUAL
39346: ST_TO_ADDR
39347: GO 39669
39349: LD_INT 20
39351: DOUBLE
39352: EQUAL
39353: IFTRUE 39357
39355: GO 39382
39357: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_INT 6
39365: PPUSH
39366: LD_VAR 0 1
39370: PPUSH
39371: CALL_OW 321
39375: PUSH
39376: LD_INT 2
39378: EQUAL
39379: ST_TO_ADDR
39380: GO 39669
39382: LD_INT 22
39384: DOUBLE
39385: EQUAL
39386: IFTRUE 39396
39388: LD_INT 36
39390: DOUBLE
39391: EQUAL
39392: IFTRUE 39396
39394: GO 39421
39396: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39397: LD_ADDR_VAR 0 3
39401: PUSH
39402: LD_INT 15
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 321
39414: PUSH
39415: LD_INT 2
39417: EQUAL
39418: ST_TO_ADDR
39419: GO 39669
39421: LD_INT 30
39423: DOUBLE
39424: EQUAL
39425: IFTRUE 39429
39427: GO 39454
39429: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39430: LD_ADDR_VAR 0 3
39434: PUSH
39435: LD_INT 20
39437: PPUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 321
39447: PUSH
39448: LD_INT 2
39450: EQUAL
39451: ST_TO_ADDR
39452: GO 39669
39454: LD_INT 28
39456: DOUBLE
39457: EQUAL
39458: IFTRUE 39468
39460: LD_INT 21
39462: DOUBLE
39463: EQUAL
39464: IFTRUE 39468
39466: GO 39493
39468: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_INT 21
39476: PPUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 321
39486: PUSH
39487: LD_INT 2
39489: EQUAL
39490: ST_TO_ADDR
39491: GO 39669
39493: LD_INT 16
39495: DOUBLE
39496: EQUAL
39497: IFTRUE 39501
39499: GO 39528
39501: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39502: LD_ADDR_VAR 0 3
39506: PUSH
39507: LD_EXP 64
39511: PPUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: CALL_OW 321
39521: PUSH
39522: LD_INT 2
39524: EQUAL
39525: ST_TO_ADDR
39526: GO 39669
39528: LD_INT 19
39530: DOUBLE
39531: EQUAL
39532: IFTRUE 39542
39534: LD_INT 23
39536: DOUBLE
39537: EQUAL
39538: IFTRUE 39542
39540: GO 39569
39542: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39543: LD_ADDR_VAR 0 3
39547: PUSH
39548: LD_EXP 63
39552: PPUSH
39553: LD_VAR 0 1
39557: PPUSH
39558: CALL_OW 321
39562: PUSH
39563: LD_INT 2
39565: EQUAL
39566: ST_TO_ADDR
39567: GO 39669
39569: LD_INT 17
39571: DOUBLE
39572: EQUAL
39573: IFTRUE 39577
39575: GO 39602
39577: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39578: LD_ADDR_VAR 0 3
39582: PUSH
39583: LD_INT 39
39585: PPUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 321
39595: PUSH
39596: LD_INT 2
39598: EQUAL
39599: ST_TO_ADDR
39600: GO 39669
39602: LD_INT 18
39604: DOUBLE
39605: EQUAL
39606: IFTRUE 39610
39608: GO 39635
39610: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_INT 40
39618: PPUSH
39619: LD_VAR 0 1
39623: PPUSH
39624: CALL_OW 321
39628: PUSH
39629: LD_INT 2
39631: EQUAL
39632: ST_TO_ADDR
39633: GO 39669
39635: LD_INT 27
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39643
39641: GO 39668
39643: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39644: LD_ADDR_VAR 0 3
39648: PUSH
39649: LD_INT 35
39651: PPUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 321
39661: PUSH
39662: LD_INT 2
39664: EQUAL
39665: ST_TO_ADDR
39666: GO 39669
39668: POP
// end ;
39669: LD_VAR 0 3
39673: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39674: LD_INT 0
39676: PPUSH
39677: PPUSH
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
// result := false ;
39687: LD_ADDR_VAR 0 6
39691: PUSH
39692: LD_INT 0
39694: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39695: LD_VAR 0 1
39699: NOT
39700: PUSH
39701: LD_VAR 0 1
39705: PPUSH
39706: CALL_OW 266
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: IN
39721: NOT
39722: OR
39723: PUSH
39724: LD_VAR 0 2
39728: NOT
39729: OR
39730: PUSH
39731: LD_VAR 0 5
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 3
39747: PUSH
39748: LD_INT 4
39750: PUSH
39751: LD_INT 5
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: IN
39762: NOT
39763: OR
39764: PUSH
39765: LD_VAR 0 3
39769: PPUSH
39770: LD_VAR 0 4
39774: PPUSH
39775: CALL_OW 488
39779: NOT
39780: OR
39781: IFFALSE 39785
// exit ;
39783: GO 40521
// side := GetSide ( depot ) ;
39785: LD_ADDR_VAR 0 9
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 255
39799: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39800: LD_VAR 0 9
39804: PPUSH
39805: LD_VAR 0 2
39809: PPUSH
39810: CALL 39294 0 2
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 40521
// pom := GetBase ( depot ) ;
39819: LD_ADDR_VAR 0 10
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 274
39833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39834: LD_ADDR_VAR 0 11
39838: PUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 248
39853: PPUSH
39854: CALL_OW 450
39858: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39859: LD_VAR 0 10
39863: PPUSH
39864: LD_INT 1
39866: PPUSH
39867: CALL_OW 275
39871: PUSH
39872: LD_VAR 0 11
39876: PUSH
39877: LD_INT 1
39879: ARRAY
39880: GREATEREQUAL
39881: PUSH
39882: LD_VAR 0 10
39886: PPUSH
39887: LD_INT 2
39889: PPUSH
39890: CALL_OW 275
39894: PUSH
39895: LD_VAR 0 11
39899: PUSH
39900: LD_INT 2
39902: ARRAY
39903: GREATEREQUAL
39904: AND
39905: PUSH
39906: LD_VAR 0 10
39910: PPUSH
39911: LD_INT 3
39913: PPUSH
39914: CALL_OW 275
39918: PUSH
39919: LD_VAR 0 11
39923: PUSH
39924: LD_INT 3
39926: ARRAY
39927: GREATEREQUAL
39928: AND
39929: NOT
39930: IFFALSE 39934
// exit ;
39932: GO 40521
// if GetBType ( depot ) = b_depot then
39934: LD_VAR 0 1
39938: PPUSH
39939: CALL_OW 266
39943: PUSH
39944: LD_INT 0
39946: EQUAL
39947: IFFALSE 39959
// dist := 28 else
39949: LD_ADDR_VAR 0 14
39953: PUSH
39954: LD_INT 28
39956: ST_TO_ADDR
39957: GO 39967
// dist := 36 ;
39959: LD_ADDR_VAR 0 14
39963: PUSH
39964: LD_INT 36
39966: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39967: LD_VAR 0 1
39971: PPUSH
39972: LD_VAR 0 3
39976: PPUSH
39977: LD_VAR 0 4
39981: PPUSH
39982: CALL_OW 297
39986: PUSH
39987: LD_VAR 0 14
39991: GREATER
39992: IFFALSE 39996
// exit ;
39994: GO 40521
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39996: LD_ADDR_VAR 0 12
40000: PUSH
40001: LD_VAR 0 2
40005: PPUSH
40006: LD_VAR 0 3
40010: PPUSH
40011: LD_VAR 0 4
40015: PPUSH
40016: LD_VAR 0 5
40020: PPUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 248
40030: PPUSH
40031: LD_INT 0
40033: PPUSH
40034: CALL 40526 0 6
40038: ST_TO_ADDR
// if not hexes then
40039: LD_VAR 0 12
40043: NOT
40044: IFFALSE 40048
// exit ;
40046: GO 40521
// hex := GetHexInfo ( x , y ) ;
40048: LD_ADDR_VAR 0 15
40052: PUSH
40053: LD_VAR 0 3
40057: PPUSH
40058: LD_VAR 0 4
40062: PPUSH
40063: CALL_OW 546
40067: ST_TO_ADDR
// if hex [ 1 ] then
40068: LD_VAR 0 15
40072: PUSH
40073: LD_INT 1
40075: ARRAY
40076: IFFALSE 40080
// exit ;
40078: GO 40521
// height := hex [ 2 ] ;
40080: LD_ADDR_VAR 0 13
40084: PUSH
40085: LD_VAR 0 15
40089: PUSH
40090: LD_INT 2
40092: ARRAY
40093: ST_TO_ADDR
// for i = 1 to hexes do
40094: LD_ADDR_VAR 0 7
40098: PUSH
40099: DOUBLE
40100: LD_INT 1
40102: DEC
40103: ST_TO_ADDR
40104: LD_VAR 0 12
40108: PUSH
40109: FOR_TO
40110: IFFALSE 40440
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40112: LD_VAR 0 12
40116: PUSH
40117: LD_VAR 0 7
40121: ARRAY
40122: PUSH
40123: LD_INT 1
40125: ARRAY
40126: PPUSH
40127: LD_VAR 0 12
40131: PUSH
40132: LD_VAR 0 7
40136: ARRAY
40137: PUSH
40138: LD_INT 2
40140: ARRAY
40141: PPUSH
40142: CALL_OW 488
40146: NOT
40147: PUSH
40148: LD_VAR 0 12
40152: PUSH
40153: LD_VAR 0 7
40157: ARRAY
40158: PUSH
40159: LD_INT 1
40161: ARRAY
40162: PPUSH
40163: LD_VAR 0 12
40167: PUSH
40168: LD_VAR 0 7
40172: ARRAY
40173: PUSH
40174: LD_INT 2
40176: ARRAY
40177: PPUSH
40178: CALL_OW 428
40182: PUSH
40183: LD_INT 0
40185: GREATER
40186: OR
40187: PUSH
40188: LD_VAR 0 12
40192: PUSH
40193: LD_VAR 0 7
40197: ARRAY
40198: PUSH
40199: LD_INT 1
40201: ARRAY
40202: PPUSH
40203: LD_VAR 0 12
40207: PUSH
40208: LD_VAR 0 7
40212: ARRAY
40213: PUSH
40214: LD_INT 2
40216: ARRAY
40217: PPUSH
40218: CALL_OW 351
40222: OR
40223: IFFALSE 40229
// exit ;
40225: POP
40226: POP
40227: GO 40521
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40229: LD_ADDR_VAR 0 8
40233: PUSH
40234: LD_VAR 0 12
40238: PUSH
40239: LD_VAR 0 7
40243: ARRAY
40244: PUSH
40245: LD_INT 1
40247: ARRAY
40248: PPUSH
40249: LD_VAR 0 12
40253: PUSH
40254: LD_VAR 0 7
40258: ARRAY
40259: PUSH
40260: LD_INT 2
40262: ARRAY
40263: PPUSH
40264: CALL_OW 546
40268: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40269: LD_VAR 0 8
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: PUSH
40278: LD_VAR 0 8
40282: PUSH
40283: LD_INT 2
40285: ARRAY
40286: PUSH
40287: LD_VAR 0 13
40291: PUSH
40292: LD_INT 2
40294: PLUS
40295: GREATER
40296: OR
40297: PUSH
40298: LD_VAR 0 8
40302: PUSH
40303: LD_INT 2
40305: ARRAY
40306: PUSH
40307: LD_VAR 0 13
40311: PUSH
40312: LD_INT 2
40314: MINUS
40315: LESS
40316: OR
40317: PUSH
40318: LD_VAR 0 8
40322: PUSH
40323: LD_INT 3
40325: ARRAY
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 8
40332: PUSH
40333: LD_INT 9
40335: PUSH
40336: LD_INT 10
40338: PUSH
40339: LD_INT 11
40341: PUSH
40342: LD_INT 12
40344: PUSH
40345: LD_INT 13
40347: PUSH
40348: LD_INT 16
40350: PUSH
40351: LD_INT 17
40353: PUSH
40354: LD_INT 18
40356: PUSH
40357: LD_INT 19
40359: PUSH
40360: LD_INT 20
40362: PUSH
40363: LD_INT 21
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: IN
40381: NOT
40382: OR
40383: PUSH
40384: LD_VAR 0 8
40388: PUSH
40389: LD_INT 5
40391: ARRAY
40392: NOT
40393: OR
40394: PUSH
40395: LD_VAR 0 8
40399: PUSH
40400: LD_INT 6
40402: ARRAY
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 7
40412: PUSH
40413: LD_INT 9
40415: PUSH
40416: LD_INT 10
40418: PUSH
40419: LD_INT 11
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: IN
40430: NOT
40431: OR
40432: IFFALSE 40438
// exit ;
40434: POP
40435: POP
40436: GO 40521
// end ;
40438: GO 40109
40440: POP
40441: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40442: LD_VAR 0 9
40446: PPUSH
40447: LD_VAR 0 3
40451: PPUSH
40452: LD_VAR 0 4
40456: PPUSH
40457: LD_INT 20
40459: PPUSH
40460: CALL 32467 0 4
40464: PUSH
40465: LD_INT 4
40467: ARRAY
40468: IFFALSE 40472
// exit ;
40470: GO 40521
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40472: LD_VAR 0 2
40476: PUSH
40477: LD_INT 29
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: IN
40487: PUSH
40488: LD_VAR 0 3
40492: PPUSH
40493: LD_VAR 0 4
40497: PPUSH
40498: LD_VAR 0 9
40502: PPUSH
40503: CALL_OW 440
40507: NOT
40508: AND
40509: IFFALSE 40513
// exit ;
40511: GO 40521
// result := true ;
40513: LD_ADDR_VAR 0 6
40517: PUSH
40518: LD_INT 1
40520: ST_TO_ADDR
// end ;
40521: LD_VAR 0 6
40525: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40526: LD_INT 0
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
// result = [ ] ;
40586: LD_ADDR_VAR 0 7
40590: PUSH
40591: EMPTY
40592: ST_TO_ADDR
// temp_list = [ ] ;
40593: LD_ADDR_VAR 0 9
40597: PUSH
40598: EMPTY
40599: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40600: LD_VAR 0 4
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 3
40616: PUSH
40617: LD_INT 4
40619: PUSH
40620: LD_INT 5
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: IN
40631: NOT
40632: PUSH
40633: LD_VAR 0 1
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: IN
40648: PUSH
40649: LD_VAR 0 5
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: IN
40668: NOT
40669: AND
40670: OR
40671: IFFALSE 40675
// exit ;
40673: GO 59066
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40675: LD_VAR 0 1
40679: PUSH
40680: LD_INT 6
40682: PUSH
40683: LD_INT 7
40685: PUSH
40686: LD_INT 8
40688: PUSH
40689: LD_INT 13
40691: PUSH
40692: LD_INT 12
40694: PUSH
40695: LD_INT 15
40697: PUSH
40698: LD_INT 11
40700: PUSH
40701: LD_INT 14
40703: PUSH
40704: LD_INT 10
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: IN
40718: IFFALSE 40728
// btype = b_lab ;
40720: LD_ADDR_VAR 0 1
40724: PUSH
40725: LD_INT 6
40727: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40728: LD_VAR 0 6
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: IN
40747: NOT
40748: PUSH
40749: LD_VAR 0 1
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 6
40768: PUSH
40769: LD_INT 36
40771: PUSH
40772: LD_INT 4
40774: PUSH
40775: LD_INT 5
40777: PUSH
40778: LD_INT 31
40780: PUSH
40781: LD_INT 32
40783: PUSH
40784: LD_INT 33
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: IN
40800: NOT
40801: PUSH
40802: LD_VAR 0 6
40806: PUSH
40807: LD_INT 1
40809: EQUAL
40810: AND
40811: OR
40812: PUSH
40813: LD_VAR 0 1
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: IN
40828: NOT
40829: PUSH
40830: LD_VAR 0 6
40834: PUSH
40835: LD_INT 2
40837: EQUAL
40838: AND
40839: OR
40840: IFFALSE 40850
// mode = 0 ;
40842: LD_ADDR_VAR 0 6
40846: PUSH
40847: LD_INT 0
40849: ST_TO_ADDR
// case mode of 0 :
40850: LD_VAR 0 6
40854: PUSH
40855: LD_INT 0
40857: DOUBLE
40858: EQUAL
40859: IFTRUE 40863
40861: GO 52316
40863: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40864: LD_ADDR_VAR 0 11
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 3
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 3
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41057: LD_ADDR_VAR 0 12
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41253: LD_ADDR_VAR 0 13
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 3
41412: NEG
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 3
41424: NEG
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41452: LD_ADDR_VAR 0 14
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 3
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 3
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41648: LD_ADDR_VAR 0 15
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 3
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41841: LD_ADDR_VAR 0 16
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 3
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42034: LD_ADDR_VAR 0 17
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42264: LD_ADDR_VAR 0 18
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: NEG
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42494: LD_ADDR_VAR 0 19
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42724: LD_ADDR_VAR 0 20
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42954: LD_ADDR_VAR 0 21
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43184: LD_ADDR_VAR 0 22
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43414: LD_ADDR_VAR 0 23
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: LD_INT 3
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43694: LD_ADDR_VAR 0 24
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43970: LD_ADDR_VAR 0 25
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 3
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 3
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44244: LD_ADDR_VAR 0 26
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44520: LD_ADDR_VAR 0 27
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44800: LD_ADDR_VAR 0 28
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 3
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 3
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45082: LD_ADDR_VAR 0 29
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 3
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45361: LD_ADDR_VAR 0 30
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 3
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45639: LD_ADDR_VAR 0 31
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: NEG
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45917: LD_ADDR_VAR 0 32
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 3
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46195: LD_ADDR_VAR 0 33
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46474: LD_ADDR_VAR 0 34
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 3
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46754: LD_ADDR_VAR 0 35
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46866: LD_ADDR_VAR 0 36
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46978: LD_ADDR_VAR 0 37
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47090: LD_ADDR_VAR 0 38
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47202: LD_ADDR_VAR 0 39
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47314: LD_ADDR_VAR 0 40
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47426: LD_ADDR_VAR 0 41
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 3
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 3
47700: NEG
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: NEG
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47776: LD_ADDR_VAR 0 42
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 3
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48126: LD_ADDR_VAR 0 43
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48474: LD_ADDR_VAR 0 44
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48824: LD_ADDR_VAR 0 45
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 3
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 3
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49174: LD_ADDR_VAR 0 46
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 3
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 3
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49522: LD_ADDR_VAR 0 47
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49673: LD_ADDR_VAR 0 48
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49820: LD_ADDR_VAR 0 49
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49964: LD_ADDR_VAR 0 50
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50108: LD_ADDR_VAR 0 51
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50255: LD_ADDR_VAR 0 52
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50406: LD_ADDR_VAR 0 53
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50636: LD_ADDR_VAR 0 54
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50866: LD_ADDR_VAR 0 55
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51096: LD_ADDR_VAR 0 56
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51326: LD_ADDR_VAR 0 57
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51556: LD_ADDR_VAR 0 58
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51786: LD_ADDR_VAR 0 59
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51874: LD_ADDR_VAR 0 60
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51962: LD_ADDR_VAR 0 61
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52050: LD_ADDR_VAR 0 62
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52138: LD_ADDR_VAR 0 63
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52226: LD_ADDR_VAR 0 64
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// end ; 1 :
52314: GO 58211
52316: LD_INT 1
52318: DOUBLE
52319: EQUAL
52320: IFTRUE 52324
52322: GO 54947
52324: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52325: LD_ADDR_VAR 0 11
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52369: LD_ADDR_VAR 0 12
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52410: LD_ADDR_VAR 0 13
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52450: LD_ADDR_VAR 0 14
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52491: LD_ADDR_VAR 0 15
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52535: LD_ADDR_VAR 0 16
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: LD_INT 3
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52581: LD_ADDR_VAR 0 17
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52625: LD_ADDR_VAR 0 18
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52666: LD_ADDR_VAR 0 19
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52706: LD_ADDR_VAR 0 20
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52747: LD_ADDR_VAR 0 21
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52791: LD_ADDR_VAR 0 22
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52837: LD_ADDR_VAR 0 23
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52881: LD_ADDR_VAR 0 24
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 4
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52922: LD_ADDR_VAR 0 25
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 4
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52962: LD_ADDR_VAR 0 26
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 4
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53003: LD_ADDR_VAR 0 27
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 4
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53047: LD_ADDR_VAR 0 28
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 3
53066: NEG
53067: PUSH
53068: LD_INT 4
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 4
53078: NEG
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: LIST
53092: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53093: LD_ADDR_VAR 0 29
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 4
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 4
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 3
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 5
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 5
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 4
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 6
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 6
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 5
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53248: LD_ADDR_VAR 0 30
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 4
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 5
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 5
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 5
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 6
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 6
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53391: LD_ADDR_VAR 0 31
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 4
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: LD_INT 4
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 5
53458: PUSH
53459: LD_INT 4
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 5
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 4
53478: PUSH
53479: LD_INT 5
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 6
53488: PUSH
53489: LD_INT 5
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 6
53498: PUSH
53499: LD_INT 6
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 5
53508: PUSH
53509: LD_INT 6
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53530: LD_ADDR_VAR 0 32
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 4
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 4
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 5
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 4
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 6
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 6
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 5
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53673: LD_ADDR_VAR 0 33
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 4
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 4
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 4
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 5
53759: NEG
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 5
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 5
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 6
53793: NEG
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 6
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53828: LD_ADDR_VAR 0 34
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: LD_INT 4
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 4
53883: NEG
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 4
53895: NEG
53896: PUSH
53897: LD_INT 4
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: NEG
53908: PUSH
53909: LD_INT 5
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 5
53919: NEG
53920: PUSH
53921: LD_INT 4
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 5
53931: NEG
53932: PUSH
53933: LD_INT 5
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 5
53943: NEG
53944: PUSH
53945: LD_INT 6
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 6
53955: NEG
53956: PUSH
53957: LD_INT 5
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 6
53967: NEG
53968: PUSH
53969: LD_INT 6
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53991: LD_ADDR_VAR 0 41
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54035: LD_ADDR_VAR 0 42
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54076: LD_ADDR_VAR 0 43
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54116: LD_ADDR_VAR 0 44
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54157: LD_ADDR_VAR 0 45
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54201: LD_ADDR_VAR 0 46
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 2
54220: NEG
54221: PUSH
54222: LD_INT 3
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54247: LD_ADDR_VAR 0 47
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54280: LD_ADDR_VAR 0 48
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54311: LD_ADDR_VAR 0 49
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54340: LD_ADDR_VAR 0 50
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54369: LD_ADDR_VAR 0 51
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54400: LD_ADDR_VAR 0 52
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54433: LD_ADDR_VAR 0 53
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54477: LD_ADDR_VAR 0 54
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54518: LD_ADDR_VAR 0 55
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54558: LD_ADDR_VAR 0 56
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54599: LD_ADDR_VAR 0 57
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54643: LD_ADDR_VAR 0 58
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54689: LD_ADDR_VAR 0 59
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54733: LD_ADDR_VAR 0 60
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54774: LD_ADDR_VAR 0 61
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54814: LD_ADDR_VAR 0 62
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54855: LD_ADDR_VAR 0 63
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54899: LD_ADDR_VAR 0 64
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// end ; 2 :
54945: GO 58211
54947: LD_INT 2
54949: DOUBLE
54950: EQUAL
54951: IFTRUE 54955
54953: GO 58210
54955: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54956: LD_ADDR_VAR 0 29
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 4
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 5
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 4
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 4
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 4
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 4
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 5
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 5
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 4
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 5
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 4
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 4
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 4
55341: NEG
55342: PUSH
55343: LD_INT 4
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: NEG
55354: PUSH
55355: LD_INT 5
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 4
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 5
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 5
55413: NEG
55414: PUSH
55415: LD_INT 5
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: LD_INT 5
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 5
55437: NEG
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55494: LD_ADDR_VAR 0 30
55498: PUSH
55499: LD_INT 4
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 5
55521: PUSH
55522: LD_INT 4
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 5
55531: PUSH
55532: LD_INT 5
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 4
55541: PUSH
55542: LD_INT 5
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: LD_INT 4
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 5
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 5
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 4
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 4
55684: NEG
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 4
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 5
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 5
55763: NEG
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: LD_INT 4
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 4
55846: NEG
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: NEG
55859: PUSH
55860: LD_INT 4
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 4
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 4
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 5
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 4
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 4
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 5
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 3
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: LD_INT 5
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56041: LD_ADDR_VAR 0 31
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 4
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 4
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 5
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 5
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: NEG
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: LD_INT 5
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 4
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 4
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: NEG
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: NEG
56316: PUSH
56317: LD_INT 5
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: LD_INT 5
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 5
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 3
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 4
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 4
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 5
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 5
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 5
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56591: LD_ADDR_VAR 0 32
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 4
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 3
56621: NEG
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 4
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 5
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 5
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 5
56677: NEG
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 3
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 4
56760: NEG
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 4
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 5
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 4
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 4
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 5
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 4
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 4
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 4
57003: PUSH
57004: LD_INT 4
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 4
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 5
57023: PUSH
57024: LD_INT 4
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 5
57033: PUSH
57034: LD_INT 5
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 4
57043: PUSH
57044: LD_INT 5
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: LD_INT 4
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 5
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: LD_INT 5
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57138: LD_ADDR_VAR 0 33
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: LD_INT 5
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 4
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: LD_INT 4
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 5
57217: NEG
57218: PUSH
57219: LD_INT 5
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: LD_INT 5
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 5
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 4
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 4
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 4
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 5
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 5
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 5
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 4
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 4
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 4
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 5
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 5
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57676: LD_ADDR_VAR 0 34
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 4
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 5
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 4
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 4
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 5
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 5
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 4
57878: PUSH
57879: LD_INT 4
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: PUSH
57909: LD_INT 5
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: LD_INT 5
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: LD_INT 4
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 5
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 4
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 4
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 4
58061: NEG
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 4
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 5
58117: NEG
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 5
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// end ; end ;
58208: GO 58211
58210: POP
// case btype of b_depot , b_warehouse :
58211: LD_VAR 0 1
58215: PUSH
58216: LD_INT 0
58218: DOUBLE
58219: EQUAL
58220: IFTRUE 58230
58222: LD_INT 1
58224: DOUBLE
58225: EQUAL
58226: IFTRUE 58230
58228: GO 58431
58230: POP
// case nation of nation_american :
58231: LD_VAR 0 5
58235: PUSH
58236: LD_INT 1
58238: DOUBLE
58239: EQUAL
58240: IFTRUE 58244
58242: GO 58300
58244: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58245: LD_ADDR_VAR 0 9
58249: PUSH
58250: LD_VAR 0 11
58254: PUSH
58255: LD_VAR 0 12
58259: PUSH
58260: LD_VAR 0 13
58264: PUSH
58265: LD_VAR 0 14
58269: PUSH
58270: LD_VAR 0 15
58274: PUSH
58275: LD_VAR 0 16
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: PUSH
58288: LD_VAR 0 4
58292: PUSH
58293: LD_INT 1
58295: PLUS
58296: ARRAY
58297: ST_TO_ADDR
58298: GO 58429
58300: LD_INT 2
58302: DOUBLE
58303: EQUAL
58304: IFTRUE 58308
58306: GO 58364
58308: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58309: LD_ADDR_VAR 0 9
58313: PUSH
58314: LD_VAR 0 17
58318: PUSH
58319: LD_VAR 0 18
58323: PUSH
58324: LD_VAR 0 19
58328: PUSH
58329: LD_VAR 0 20
58333: PUSH
58334: LD_VAR 0 21
58338: PUSH
58339: LD_VAR 0 22
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: PUSH
58352: LD_VAR 0 4
58356: PUSH
58357: LD_INT 1
58359: PLUS
58360: ARRAY
58361: ST_TO_ADDR
58362: GO 58429
58364: LD_INT 3
58366: DOUBLE
58367: EQUAL
58368: IFTRUE 58372
58370: GO 58428
58372: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58373: LD_ADDR_VAR 0 9
58377: PUSH
58378: LD_VAR 0 23
58382: PUSH
58383: LD_VAR 0 24
58387: PUSH
58388: LD_VAR 0 25
58392: PUSH
58393: LD_VAR 0 26
58397: PUSH
58398: LD_VAR 0 27
58402: PUSH
58403: LD_VAR 0 28
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: PUSH
58416: LD_VAR 0 4
58420: PUSH
58421: LD_INT 1
58423: PLUS
58424: ARRAY
58425: ST_TO_ADDR
58426: GO 58429
58428: POP
58429: GO 58984
58431: LD_INT 2
58433: DOUBLE
58434: EQUAL
58435: IFTRUE 58445
58437: LD_INT 3
58439: DOUBLE
58440: EQUAL
58441: IFTRUE 58445
58443: GO 58501
58445: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58446: LD_ADDR_VAR 0 9
58450: PUSH
58451: LD_VAR 0 29
58455: PUSH
58456: LD_VAR 0 30
58460: PUSH
58461: LD_VAR 0 31
58465: PUSH
58466: LD_VAR 0 32
58470: PUSH
58471: LD_VAR 0 33
58475: PUSH
58476: LD_VAR 0 34
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: PUSH
58489: LD_VAR 0 4
58493: PUSH
58494: LD_INT 1
58496: PLUS
58497: ARRAY
58498: ST_TO_ADDR
58499: GO 58984
58501: LD_INT 16
58503: DOUBLE
58504: EQUAL
58505: IFTRUE 58563
58507: LD_INT 17
58509: DOUBLE
58510: EQUAL
58511: IFTRUE 58563
58513: LD_INT 18
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58563
58519: LD_INT 19
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58563
58525: LD_INT 22
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58563
58531: LD_INT 20
58533: DOUBLE
58534: EQUAL
58535: IFTRUE 58563
58537: LD_INT 21
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58563
58543: LD_INT 23
58545: DOUBLE
58546: EQUAL
58547: IFTRUE 58563
58549: LD_INT 24
58551: DOUBLE
58552: EQUAL
58553: IFTRUE 58563
58555: LD_INT 25
58557: DOUBLE
58558: EQUAL
58559: IFTRUE 58563
58561: GO 58619
58563: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58564: LD_ADDR_VAR 0 9
58568: PUSH
58569: LD_VAR 0 35
58573: PUSH
58574: LD_VAR 0 36
58578: PUSH
58579: LD_VAR 0 37
58583: PUSH
58584: LD_VAR 0 38
58588: PUSH
58589: LD_VAR 0 39
58593: PUSH
58594: LD_VAR 0 40
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: PUSH
58607: LD_VAR 0 4
58611: PUSH
58612: LD_INT 1
58614: PLUS
58615: ARRAY
58616: ST_TO_ADDR
58617: GO 58984
58619: LD_INT 6
58621: DOUBLE
58622: EQUAL
58623: IFTRUE 58675
58625: LD_INT 7
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58675
58631: LD_INT 8
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58675
58637: LD_INT 13
58639: DOUBLE
58640: EQUAL
58641: IFTRUE 58675
58643: LD_INT 12
58645: DOUBLE
58646: EQUAL
58647: IFTRUE 58675
58649: LD_INT 15
58651: DOUBLE
58652: EQUAL
58653: IFTRUE 58675
58655: LD_INT 11
58657: DOUBLE
58658: EQUAL
58659: IFTRUE 58675
58661: LD_INT 14
58663: DOUBLE
58664: EQUAL
58665: IFTRUE 58675
58667: LD_INT 10
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58675
58673: GO 58731
58675: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58676: LD_ADDR_VAR 0 9
58680: PUSH
58681: LD_VAR 0 41
58685: PUSH
58686: LD_VAR 0 42
58690: PUSH
58691: LD_VAR 0 43
58695: PUSH
58696: LD_VAR 0 44
58700: PUSH
58701: LD_VAR 0 45
58705: PUSH
58706: LD_VAR 0 46
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: PUSH
58719: LD_VAR 0 4
58723: PUSH
58724: LD_INT 1
58726: PLUS
58727: ARRAY
58728: ST_TO_ADDR
58729: GO 58984
58731: LD_INT 36
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58739
58737: GO 58795
58739: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58740: LD_ADDR_VAR 0 9
58744: PUSH
58745: LD_VAR 0 47
58749: PUSH
58750: LD_VAR 0 48
58754: PUSH
58755: LD_VAR 0 49
58759: PUSH
58760: LD_VAR 0 50
58764: PUSH
58765: LD_VAR 0 51
58769: PUSH
58770: LD_VAR 0 52
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: PUSH
58783: LD_VAR 0 4
58787: PUSH
58788: LD_INT 1
58790: PLUS
58791: ARRAY
58792: ST_TO_ADDR
58793: GO 58984
58795: LD_INT 4
58797: DOUBLE
58798: EQUAL
58799: IFTRUE 58821
58801: LD_INT 5
58803: DOUBLE
58804: EQUAL
58805: IFTRUE 58821
58807: LD_INT 34
58809: DOUBLE
58810: EQUAL
58811: IFTRUE 58821
58813: LD_INT 37
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58821
58819: GO 58877
58821: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58822: LD_ADDR_VAR 0 9
58826: PUSH
58827: LD_VAR 0 53
58831: PUSH
58832: LD_VAR 0 54
58836: PUSH
58837: LD_VAR 0 55
58841: PUSH
58842: LD_VAR 0 56
58846: PUSH
58847: LD_VAR 0 57
58851: PUSH
58852: LD_VAR 0 58
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: PUSH
58865: LD_VAR 0 4
58869: PUSH
58870: LD_INT 1
58872: PLUS
58873: ARRAY
58874: ST_TO_ADDR
58875: GO 58984
58877: LD_INT 31
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58927
58883: LD_INT 32
58885: DOUBLE
58886: EQUAL
58887: IFTRUE 58927
58889: LD_INT 33
58891: DOUBLE
58892: EQUAL
58893: IFTRUE 58927
58895: LD_INT 27
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58927
58901: LD_INT 26
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58927
58907: LD_INT 28
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58927
58913: LD_INT 29
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58927
58919: LD_INT 30
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58927
58925: GO 58983
58927: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58928: LD_ADDR_VAR 0 9
58932: PUSH
58933: LD_VAR 0 59
58937: PUSH
58938: LD_VAR 0 60
58942: PUSH
58943: LD_VAR 0 61
58947: PUSH
58948: LD_VAR 0 62
58952: PUSH
58953: LD_VAR 0 63
58957: PUSH
58958: LD_VAR 0 64
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: PUSH
58971: LD_VAR 0 4
58975: PUSH
58976: LD_INT 1
58978: PLUS
58979: ARRAY
58980: ST_TO_ADDR
58981: GO 58984
58983: POP
// temp_list2 = [ ] ;
58984: LD_ADDR_VAR 0 10
58988: PUSH
58989: EMPTY
58990: ST_TO_ADDR
// for i in temp_list do
58991: LD_ADDR_VAR 0 8
58995: PUSH
58996: LD_VAR 0 9
59000: PUSH
59001: FOR_IN
59002: IFFALSE 59054
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59004: LD_ADDR_VAR 0 10
59008: PUSH
59009: LD_VAR 0 10
59013: PUSH
59014: LD_VAR 0 8
59018: PUSH
59019: LD_INT 1
59021: ARRAY
59022: PUSH
59023: LD_VAR 0 2
59027: PLUS
59028: PUSH
59029: LD_VAR 0 8
59033: PUSH
59034: LD_INT 2
59036: ARRAY
59037: PUSH
59038: LD_VAR 0 3
59042: PLUS
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: ADD
59051: ST_TO_ADDR
59052: GO 59001
59054: POP
59055: POP
// result = temp_list2 ;
59056: LD_ADDR_VAR 0 7
59060: PUSH
59061: LD_VAR 0 10
59065: ST_TO_ADDR
// end ;
59066: LD_VAR 0 7
59070: RET
// export function EnemyInRange ( unit , dist ) ; begin
59071: LD_INT 0
59073: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59074: LD_ADDR_VAR 0 3
59078: PUSH
59079: LD_VAR 0 1
59083: PPUSH
59084: CALL_OW 255
59088: PPUSH
59089: LD_VAR 0 1
59093: PPUSH
59094: CALL_OW 250
59098: PPUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 251
59108: PPUSH
59109: LD_VAR 0 2
59113: PPUSH
59114: CALL 32467 0 4
59118: PUSH
59119: LD_INT 4
59121: ARRAY
59122: ST_TO_ADDR
// end ;
59123: LD_VAR 0 3
59127: RET
// export function PlayerSeeMe ( unit ) ; begin
59128: LD_INT 0
59130: PPUSH
// result := See ( your_side , unit ) ;
59131: LD_ADDR_VAR 0 2
59135: PUSH
59136: LD_OWVAR 2
59140: PPUSH
59141: LD_VAR 0 1
59145: PPUSH
59146: CALL_OW 292
59150: ST_TO_ADDR
// end ;
59151: LD_VAR 0 2
59155: RET
// export function ReverseDir ( unit ) ; begin
59156: LD_INT 0
59158: PPUSH
// if not unit then
59159: LD_VAR 0 1
59163: NOT
59164: IFFALSE 59168
// exit ;
59166: GO 59191
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59168: LD_ADDR_VAR 0 2
59172: PUSH
59173: LD_VAR 0 1
59177: PPUSH
59178: CALL_OW 254
59182: PUSH
59183: LD_INT 3
59185: PLUS
59186: PUSH
59187: LD_INT 6
59189: MOD
59190: ST_TO_ADDR
// end ;
59191: LD_VAR 0 2
59195: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59196: LD_INT 0
59198: PPUSH
59199: PPUSH
59200: PPUSH
59201: PPUSH
59202: PPUSH
// if not hexes then
59203: LD_VAR 0 2
59207: NOT
59208: IFFALSE 59212
// exit ;
59210: GO 59360
// dist := 9999 ;
59212: LD_ADDR_VAR 0 5
59216: PUSH
59217: LD_INT 9999
59219: ST_TO_ADDR
// for i = 1 to hexes do
59220: LD_ADDR_VAR 0 4
59224: PUSH
59225: DOUBLE
59226: LD_INT 1
59228: DEC
59229: ST_TO_ADDR
59230: LD_VAR 0 2
59234: PUSH
59235: FOR_TO
59236: IFFALSE 59348
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59238: LD_VAR 0 1
59242: PPUSH
59243: LD_VAR 0 2
59247: PUSH
59248: LD_VAR 0 4
59252: ARRAY
59253: PUSH
59254: LD_INT 1
59256: ARRAY
59257: PPUSH
59258: LD_VAR 0 2
59262: PUSH
59263: LD_VAR 0 4
59267: ARRAY
59268: PUSH
59269: LD_INT 2
59271: ARRAY
59272: PPUSH
59273: CALL_OW 297
59277: PUSH
59278: LD_VAR 0 5
59282: LESS
59283: IFFALSE 59346
// begin hex := hexes [ i ] ;
59285: LD_ADDR_VAR 0 7
59289: PUSH
59290: LD_VAR 0 2
59294: PUSH
59295: LD_VAR 0 4
59299: ARRAY
59300: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59301: LD_ADDR_VAR 0 5
59305: PUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: LD_VAR 0 2
59315: PUSH
59316: LD_VAR 0 4
59320: ARRAY
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PPUSH
59326: LD_VAR 0 2
59330: PUSH
59331: LD_VAR 0 4
59335: ARRAY
59336: PUSH
59337: LD_INT 2
59339: ARRAY
59340: PPUSH
59341: CALL_OW 297
59345: ST_TO_ADDR
// end ; end ;
59346: GO 59235
59348: POP
59349: POP
// result := hex ;
59350: LD_ADDR_VAR 0 3
59354: PUSH
59355: LD_VAR 0 7
59359: ST_TO_ADDR
// end ;
59360: LD_VAR 0 3
59364: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59365: LD_INT 0
59367: PPUSH
59368: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59369: LD_VAR 0 1
59373: NOT
59374: PUSH
59375: LD_VAR 0 1
59379: PUSH
59380: LD_INT 21
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 23
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PPUSH
59404: CALL_OW 69
59408: IN
59409: NOT
59410: OR
59411: IFFALSE 59415
// exit ;
59413: GO 59462
// for i = 1 to 3 do
59415: LD_ADDR_VAR 0 3
59419: PUSH
59420: DOUBLE
59421: LD_INT 1
59423: DEC
59424: ST_TO_ADDR
59425: LD_INT 3
59427: PUSH
59428: FOR_TO
59429: IFFALSE 59460
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59431: LD_VAR 0 1
59435: PPUSH
59436: CALL_OW 250
59440: PPUSH
59441: LD_VAR 0 1
59445: PPUSH
59446: CALL_OW 251
59450: PPUSH
59451: LD_INT 1
59453: PPUSH
59454: CALL_OW 453
59458: GO 59428
59460: POP
59461: POP
// end ;
59462: LD_VAR 0 2
59466: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59467: LD_INT 0
59469: PPUSH
59470: PPUSH
59471: PPUSH
59472: PPUSH
59473: PPUSH
59474: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59475: LD_VAR 0 1
59479: NOT
59480: PUSH
59481: LD_VAR 0 2
59485: NOT
59486: OR
59487: PUSH
59488: LD_VAR 0 1
59492: PPUSH
59493: CALL_OW 314
59497: OR
59498: IFFALSE 59502
// exit ;
59500: GO 59943
// x := GetX ( enemy_unit ) ;
59502: LD_ADDR_VAR 0 7
59506: PUSH
59507: LD_VAR 0 2
59511: PPUSH
59512: CALL_OW 250
59516: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59517: LD_ADDR_VAR 0 8
59521: PUSH
59522: LD_VAR 0 2
59526: PPUSH
59527: CALL_OW 251
59531: ST_TO_ADDR
// if not x or not y then
59532: LD_VAR 0 7
59536: NOT
59537: PUSH
59538: LD_VAR 0 8
59542: NOT
59543: OR
59544: IFFALSE 59548
// exit ;
59546: GO 59943
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59548: LD_ADDR_VAR 0 6
59552: PUSH
59553: LD_VAR 0 7
59557: PPUSH
59558: LD_INT 0
59560: PPUSH
59561: LD_INT 4
59563: PPUSH
59564: CALL_OW 272
59568: PUSH
59569: LD_VAR 0 8
59573: PPUSH
59574: LD_INT 0
59576: PPUSH
59577: LD_INT 4
59579: PPUSH
59580: CALL_OW 273
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_VAR 0 7
59593: PPUSH
59594: LD_INT 1
59596: PPUSH
59597: LD_INT 4
59599: PPUSH
59600: CALL_OW 272
59604: PUSH
59605: LD_VAR 0 8
59609: PPUSH
59610: LD_INT 1
59612: PPUSH
59613: LD_INT 4
59615: PPUSH
59616: CALL_OW 273
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_VAR 0 7
59629: PPUSH
59630: LD_INT 2
59632: PPUSH
59633: LD_INT 4
59635: PPUSH
59636: CALL_OW 272
59640: PUSH
59641: LD_VAR 0 8
59645: PPUSH
59646: LD_INT 2
59648: PPUSH
59649: LD_INT 4
59651: PPUSH
59652: CALL_OW 273
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_VAR 0 7
59665: PPUSH
59666: LD_INT 3
59668: PPUSH
59669: LD_INT 4
59671: PPUSH
59672: CALL_OW 272
59676: PUSH
59677: LD_VAR 0 8
59681: PPUSH
59682: LD_INT 3
59684: PPUSH
59685: LD_INT 4
59687: PPUSH
59688: CALL_OW 273
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_VAR 0 7
59701: PPUSH
59702: LD_INT 4
59704: PPUSH
59705: LD_INT 4
59707: PPUSH
59708: CALL_OW 272
59712: PUSH
59713: LD_VAR 0 8
59717: PPUSH
59718: LD_INT 4
59720: PPUSH
59721: LD_INT 4
59723: PPUSH
59724: CALL_OW 273
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_VAR 0 7
59737: PPUSH
59738: LD_INT 5
59740: PPUSH
59741: LD_INT 4
59743: PPUSH
59744: CALL_OW 272
59748: PUSH
59749: LD_VAR 0 8
59753: PPUSH
59754: LD_INT 5
59756: PPUSH
59757: LD_INT 4
59759: PPUSH
59760: CALL_OW 273
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// for i = tmp downto 1 do
59777: LD_ADDR_VAR 0 4
59781: PUSH
59782: DOUBLE
59783: LD_VAR 0 6
59787: INC
59788: ST_TO_ADDR
59789: LD_INT 1
59791: PUSH
59792: FOR_DOWNTO
59793: IFFALSE 59894
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59795: LD_VAR 0 6
59799: PUSH
59800: LD_VAR 0 4
59804: ARRAY
59805: PUSH
59806: LD_INT 1
59808: ARRAY
59809: PPUSH
59810: LD_VAR 0 6
59814: PUSH
59815: LD_VAR 0 4
59819: ARRAY
59820: PUSH
59821: LD_INT 2
59823: ARRAY
59824: PPUSH
59825: CALL_OW 488
59829: NOT
59830: PUSH
59831: LD_VAR 0 6
59835: PUSH
59836: LD_VAR 0 4
59840: ARRAY
59841: PUSH
59842: LD_INT 1
59844: ARRAY
59845: PPUSH
59846: LD_VAR 0 6
59850: PUSH
59851: LD_VAR 0 4
59855: ARRAY
59856: PUSH
59857: LD_INT 2
59859: ARRAY
59860: PPUSH
59861: CALL_OW 428
59865: PUSH
59866: LD_INT 0
59868: NONEQUAL
59869: OR
59870: IFFALSE 59892
// tmp := Delete ( tmp , i ) ;
59872: LD_ADDR_VAR 0 6
59876: PUSH
59877: LD_VAR 0 6
59881: PPUSH
59882: LD_VAR 0 4
59886: PPUSH
59887: CALL_OW 3
59891: ST_TO_ADDR
59892: GO 59792
59894: POP
59895: POP
// j := GetClosestHex ( unit , tmp ) ;
59896: LD_ADDR_VAR 0 5
59900: PUSH
59901: LD_VAR 0 1
59905: PPUSH
59906: LD_VAR 0 6
59910: PPUSH
59911: CALL 59196 0 2
59915: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59916: LD_VAR 0 1
59920: PPUSH
59921: LD_VAR 0 5
59925: PUSH
59926: LD_INT 1
59928: ARRAY
59929: PPUSH
59930: LD_VAR 0 5
59934: PUSH
59935: LD_INT 2
59937: ARRAY
59938: PPUSH
59939: CALL_OW 111
// end ;
59943: LD_VAR 0 3
59947: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59948: LD_INT 0
59950: PPUSH
59951: PPUSH
59952: PPUSH
// uc_side = 0 ;
59953: LD_ADDR_OWVAR 20
59957: PUSH
59958: LD_INT 0
59960: ST_TO_ADDR
// uc_nation = 0 ;
59961: LD_ADDR_OWVAR 21
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// InitHc_All ( ) ;
59969: CALL_OW 584
// InitVc ;
59973: CALL_OW 20
// if mastodonts then
59977: LD_VAR 0 6
59981: IFFALSE 60048
// for i = 1 to mastodonts do
59983: LD_ADDR_VAR 0 11
59987: PUSH
59988: DOUBLE
59989: LD_INT 1
59991: DEC
59992: ST_TO_ADDR
59993: LD_VAR 0 6
59997: PUSH
59998: FOR_TO
59999: IFFALSE 60046
// begin vc_chassis := 31 ;
60001: LD_ADDR_OWVAR 37
60005: PUSH
60006: LD_INT 31
60008: ST_TO_ADDR
// vc_control := control_rider ;
60009: LD_ADDR_OWVAR 38
60013: PUSH
60014: LD_INT 4
60016: ST_TO_ADDR
// animal := CreateVehicle ;
60017: LD_ADDR_VAR 0 12
60021: PUSH
60022: CALL_OW 45
60026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60027: LD_VAR 0 12
60031: PPUSH
60032: LD_VAR 0 8
60036: PPUSH
60037: LD_INT 0
60039: PPUSH
60040: CALL 62236 0 3
// end ;
60044: GO 59998
60046: POP
60047: POP
// if horses then
60048: LD_VAR 0 5
60052: IFFALSE 60119
// for i = 1 to horses do
60054: LD_ADDR_VAR 0 11
60058: PUSH
60059: DOUBLE
60060: LD_INT 1
60062: DEC
60063: ST_TO_ADDR
60064: LD_VAR 0 5
60068: PUSH
60069: FOR_TO
60070: IFFALSE 60117
// begin hc_class := 21 ;
60072: LD_ADDR_OWVAR 28
60076: PUSH
60077: LD_INT 21
60079: ST_TO_ADDR
// hc_gallery :=  ;
60080: LD_ADDR_OWVAR 33
60084: PUSH
60085: LD_STRING 
60087: ST_TO_ADDR
// animal := CreateHuman ;
60088: LD_ADDR_VAR 0 12
60092: PUSH
60093: CALL_OW 44
60097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60098: LD_VAR 0 12
60102: PPUSH
60103: LD_VAR 0 8
60107: PPUSH
60108: LD_INT 0
60110: PPUSH
60111: CALL 62236 0 3
// end ;
60115: GO 60069
60117: POP
60118: POP
// if birds then
60119: LD_VAR 0 1
60123: IFFALSE 60190
// for i = 1 to birds do
60125: LD_ADDR_VAR 0 11
60129: PUSH
60130: DOUBLE
60131: LD_INT 1
60133: DEC
60134: ST_TO_ADDR
60135: LD_VAR 0 1
60139: PUSH
60140: FOR_TO
60141: IFFALSE 60188
// begin hc_class = 18 ;
60143: LD_ADDR_OWVAR 28
60147: PUSH
60148: LD_INT 18
60150: ST_TO_ADDR
// hc_gallery =  ;
60151: LD_ADDR_OWVAR 33
60155: PUSH
60156: LD_STRING 
60158: ST_TO_ADDR
// animal := CreateHuman ;
60159: LD_ADDR_VAR 0 12
60163: PUSH
60164: CALL_OW 44
60168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60169: LD_VAR 0 12
60173: PPUSH
60174: LD_VAR 0 8
60178: PPUSH
60179: LD_INT 0
60181: PPUSH
60182: CALL 62236 0 3
// end ;
60186: GO 60140
60188: POP
60189: POP
// if tigers then
60190: LD_VAR 0 2
60194: IFFALSE 60278
// for i = 1 to tigers do
60196: LD_ADDR_VAR 0 11
60200: PUSH
60201: DOUBLE
60202: LD_INT 1
60204: DEC
60205: ST_TO_ADDR
60206: LD_VAR 0 2
60210: PUSH
60211: FOR_TO
60212: IFFALSE 60276
// begin hc_class = class_tiger ;
60214: LD_ADDR_OWVAR 28
60218: PUSH
60219: LD_INT 14
60221: ST_TO_ADDR
// hc_gallery =  ;
60222: LD_ADDR_OWVAR 33
60226: PUSH
60227: LD_STRING 
60229: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60230: LD_ADDR_OWVAR 35
60234: PUSH
60235: LD_INT 7
60237: NEG
60238: PPUSH
60239: LD_INT 7
60241: PPUSH
60242: CALL_OW 12
60246: ST_TO_ADDR
// animal := CreateHuman ;
60247: LD_ADDR_VAR 0 12
60251: PUSH
60252: CALL_OW 44
60256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60257: LD_VAR 0 12
60261: PPUSH
60262: LD_VAR 0 8
60266: PPUSH
60267: LD_INT 0
60269: PPUSH
60270: CALL 62236 0 3
// end ;
60274: GO 60211
60276: POP
60277: POP
// if apemans then
60278: LD_VAR 0 3
60282: IFFALSE 60405
// for i = 1 to apemans do
60284: LD_ADDR_VAR 0 11
60288: PUSH
60289: DOUBLE
60290: LD_INT 1
60292: DEC
60293: ST_TO_ADDR
60294: LD_VAR 0 3
60298: PUSH
60299: FOR_TO
60300: IFFALSE 60403
// begin hc_class = class_apeman ;
60302: LD_ADDR_OWVAR 28
60306: PUSH
60307: LD_INT 12
60309: ST_TO_ADDR
// hc_gallery =  ;
60310: LD_ADDR_OWVAR 33
60314: PUSH
60315: LD_STRING 
60317: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60318: LD_ADDR_OWVAR 35
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PPUSH
60327: LD_INT 2
60329: PPUSH
60330: CALL_OW 12
60334: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60335: LD_ADDR_OWVAR 31
60339: PUSH
60340: LD_INT 1
60342: PPUSH
60343: LD_INT 3
60345: PPUSH
60346: CALL_OW 12
60350: PUSH
60351: LD_INT 1
60353: PPUSH
60354: LD_INT 3
60356: PPUSH
60357: CALL_OW 12
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// animal := CreateHuman ;
60374: LD_ADDR_VAR 0 12
60378: PUSH
60379: CALL_OW 44
60383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60384: LD_VAR 0 12
60388: PPUSH
60389: LD_VAR 0 8
60393: PPUSH
60394: LD_INT 0
60396: PPUSH
60397: CALL 62236 0 3
// end ;
60401: GO 60299
60403: POP
60404: POP
// if enchidnas then
60405: LD_VAR 0 4
60409: IFFALSE 60476
// for i = 1 to enchidnas do
60411: LD_ADDR_VAR 0 11
60415: PUSH
60416: DOUBLE
60417: LD_INT 1
60419: DEC
60420: ST_TO_ADDR
60421: LD_VAR 0 4
60425: PUSH
60426: FOR_TO
60427: IFFALSE 60474
// begin hc_class = 13 ;
60429: LD_ADDR_OWVAR 28
60433: PUSH
60434: LD_INT 13
60436: ST_TO_ADDR
// hc_gallery =  ;
60437: LD_ADDR_OWVAR 33
60441: PUSH
60442: LD_STRING 
60444: ST_TO_ADDR
// animal := CreateHuman ;
60445: LD_ADDR_VAR 0 12
60449: PUSH
60450: CALL_OW 44
60454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60455: LD_VAR 0 12
60459: PPUSH
60460: LD_VAR 0 8
60464: PPUSH
60465: LD_INT 0
60467: PPUSH
60468: CALL 62236 0 3
// end ;
60472: GO 60426
60474: POP
60475: POP
// if fishes then
60476: LD_VAR 0 7
60480: IFFALSE 60547
// for i = 1 to fishes do
60482: LD_ADDR_VAR 0 11
60486: PUSH
60487: DOUBLE
60488: LD_INT 1
60490: DEC
60491: ST_TO_ADDR
60492: LD_VAR 0 7
60496: PUSH
60497: FOR_TO
60498: IFFALSE 60545
// begin hc_class = 20 ;
60500: LD_ADDR_OWVAR 28
60504: PUSH
60505: LD_INT 20
60507: ST_TO_ADDR
// hc_gallery =  ;
60508: LD_ADDR_OWVAR 33
60512: PUSH
60513: LD_STRING 
60515: ST_TO_ADDR
// animal := CreateHuman ;
60516: LD_ADDR_VAR 0 12
60520: PUSH
60521: CALL_OW 44
60525: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60526: LD_VAR 0 12
60530: PPUSH
60531: LD_VAR 0 9
60535: PPUSH
60536: LD_INT 0
60538: PPUSH
60539: CALL 62236 0 3
// end ;
60543: GO 60497
60545: POP
60546: POP
// end ;
60547: LD_VAR 0 10
60551: RET
// export function WantHeal ( sci , unit ) ; begin
60552: LD_INT 0
60554: PPUSH
// if GetTaskList ( sci ) > 0 then
60555: LD_VAR 0 1
60559: PPUSH
60560: CALL_OW 437
60564: PUSH
60565: LD_INT 0
60567: GREATER
60568: IFFALSE 60638
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60570: LD_VAR 0 1
60574: PPUSH
60575: CALL_OW 437
60579: PUSH
60580: LD_INT 1
60582: ARRAY
60583: PUSH
60584: LD_INT 1
60586: ARRAY
60587: PUSH
60588: LD_STRING l
60590: EQUAL
60591: PUSH
60592: LD_VAR 0 1
60596: PPUSH
60597: CALL_OW 437
60601: PUSH
60602: LD_INT 1
60604: ARRAY
60605: PUSH
60606: LD_INT 4
60608: ARRAY
60609: PUSH
60610: LD_VAR 0 2
60614: EQUAL
60615: AND
60616: IFFALSE 60628
// result := true else
60618: LD_ADDR_VAR 0 3
60622: PUSH
60623: LD_INT 1
60625: ST_TO_ADDR
60626: GO 60636
// result := false ;
60628: LD_ADDR_VAR 0 3
60632: PUSH
60633: LD_INT 0
60635: ST_TO_ADDR
// end else
60636: GO 60646
// result := false ;
60638: LD_ADDR_VAR 0 3
60642: PUSH
60643: LD_INT 0
60645: ST_TO_ADDR
// end ;
60646: LD_VAR 0 3
60650: RET
// export function HealTarget ( sci ) ; begin
60651: LD_INT 0
60653: PPUSH
// if not sci then
60654: LD_VAR 0 1
60658: NOT
60659: IFFALSE 60663
// exit ;
60661: GO 60728
// result := 0 ;
60663: LD_ADDR_VAR 0 2
60667: PUSH
60668: LD_INT 0
60670: ST_TO_ADDR
// if GetTaskList ( sci ) then
60671: LD_VAR 0 1
60675: PPUSH
60676: CALL_OW 437
60680: IFFALSE 60728
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 437
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PUSH
60700: LD_STRING l
60702: EQUAL
60703: IFFALSE 60728
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60705: LD_ADDR_VAR 0 2
60709: PUSH
60710: LD_VAR 0 1
60714: PPUSH
60715: CALL_OW 437
60719: PUSH
60720: LD_INT 1
60722: ARRAY
60723: PUSH
60724: LD_INT 4
60726: ARRAY
60727: ST_TO_ADDR
// end ;
60728: LD_VAR 0 2
60732: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60733: LD_INT 0
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
// if not base_units then
60739: LD_VAR 0 1
60743: NOT
60744: IFFALSE 60748
// exit ;
60746: GO 60835
// result := false ;
60748: LD_ADDR_VAR 0 2
60752: PUSH
60753: LD_INT 0
60755: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60756: LD_ADDR_VAR 0 5
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: LD_INT 21
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PPUSH
60776: CALL_OW 72
60780: ST_TO_ADDR
// if not tmp then
60781: LD_VAR 0 5
60785: NOT
60786: IFFALSE 60790
// exit ;
60788: GO 60835
// for i in tmp do
60790: LD_ADDR_VAR 0 3
60794: PUSH
60795: LD_VAR 0 5
60799: PUSH
60800: FOR_IN
60801: IFFALSE 60833
// begin result := EnemyInRange ( i , 22 ) ;
60803: LD_ADDR_VAR 0 2
60807: PUSH
60808: LD_VAR 0 3
60812: PPUSH
60813: LD_INT 22
60815: PPUSH
60816: CALL 59071 0 2
60820: ST_TO_ADDR
// if result then
60821: LD_VAR 0 2
60825: IFFALSE 60831
// exit ;
60827: POP
60828: POP
60829: GO 60835
// end ;
60831: GO 60800
60833: POP
60834: POP
// end ;
60835: LD_VAR 0 2
60839: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60840: LD_INT 0
60842: PPUSH
60843: PPUSH
// if not units then
60844: LD_VAR 0 1
60848: NOT
60849: IFFALSE 60853
// exit ;
60851: GO 60923
// result := [ ] ;
60853: LD_ADDR_VAR 0 3
60857: PUSH
60858: EMPTY
60859: ST_TO_ADDR
// for i in units do
60860: LD_ADDR_VAR 0 4
60864: PUSH
60865: LD_VAR 0 1
60869: PUSH
60870: FOR_IN
60871: IFFALSE 60921
// if GetTag ( i ) = tag then
60873: LD_VAR 0 4
60877: PPUSH
60878: CALL_OW 110
60882: PUSH
60883: LD_VAR 0 2
60887: EQUAL
60888: IFFALSE 60919
// result := Replace ( result , result + 1 , i ) ;
60890: LD_ADDR_VAR 0 3
60894: PUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: LD_VAR 0 3
60904: PUSH
60905: LD_INT 1
60907: PLUS
60908: PPUSH
60909: LD_VAR 0 4
60913: PPUSH
60914: CALL_OW 1
60918: ST_TO_ADDR
60919: GO 60870
60921: POP
60922: POP
// end ;
60923: LD_VAR 0 3
60927: RET
// export function IsDriver ( un ) ; begin
60928: LD_INT 0
60930: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60931: LD_ADDR_VAR 0 2
60935: PUSH
60936: LD_VAR 0 1
60940: PUSH
60941: LD_INT 55
60943: PUSH
60944: EMPTY
60945: LIST
60946: PPUSH
60947: CALL_OW 69
60951: IN
60952: ST_TO_ADDR
// end ;
60953: LD_VAR 0 2
60957: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60958: LD_INT 0
60960: PPUSH
60961: PPUSH
// list := [ ] ;
60962: LD_ADDR_VAR 0 5
60966: PUSH
60967: EMPTY
60968: ST_TO_ADDR
// case d of 0 :
60969: LD_VAR 0 3
60973: PUSH
60974: LD_INT 0
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 60982
60980: GO 61115
60982: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60983: LD_ADDR_VAR 0 5
60987: PUSH
60988: LD_VAR 0 1
60992: PUSH
60993: LD_INT 4
60995: MINUS
60996: PUSH
60997: LD_VAR 0 2
61001: PUSH
61002: LD_INT 4
61004: MINUS
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: LD_VAR 0 1
61018: PUSH
61019: LD_INT 3
61021: MINUS
61022: PUSH
61023: LD_VAR 0 2
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: PUSH
61036: LD_VAR 0 1
61040: PUSH
61041: LD_INT 4
61043: PLUS
61044: PUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: LIST
61057: PUSH
61058: LD_VAR 0 1
61062: PUSH
61063: LD_INT 3
61065: PLUS
61066: PUSH
61067: LD_VAR 0 2
61071: PUSH
61072: LD_INT 3
61074: PLUS
61075: PUSH
61076: LD_INT 5
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: PUSH
61084: LD_VAR 0 1
61088: PUSH
61089: LD_VAR 0 2
61093: PUSH
61094: LD_INT 4
61096: PLUS
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// end ; 1 :
61113: GO 61813
61115: LD_INT 1
61117: DOUBLE
61118: EQUAL
61119: IFTRUE 61123
61121: GO 61256
61123: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61124: LD_ADDR_VAR 0 5
61128: PUSH
61129: LD_VAR 0 1
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_INT 4
61141: MINUS
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: LD_VAR 0 1
61155: PUSH
61156: LD_INT 3
61158: MINUS
61159: PUSH
61160: LD_VAR 0 2
61164: PUSH
61165: LD_INT 3
61167: MINUS
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: PUSH
61177: LD_VAR 0 1
61181: PUSH
61182: LD_INT 4
61184: MINUS
61185: PUSH
61186: LD_VAR 0 2
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: PUSH
61199: LD_VAR 0 1
61203: PUSH
61204: LD_VAR 0 2
61208: PUSH
61209: LD_INT 3
61211: PLUS
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: LIST
61220: PUSH
61221: LD_VAR 0 1
61225: PUSH
61226: LD_INT 4
61228: PLUS
61229: PUSH
61230: LD_VAR 0 2
61234: PUSH
61235: LD_INT 4
61237: PLUS
61238: PUSH
61239: LD_INT 5
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// end ; 2 :
61254: GO 61813
61256: LD_INT 2
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61264
61262: GO 61393
61264: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61265: LD_ADDR_VAR 0 5
61269: PUSH
61270: LD_VAR 0 1
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 3
61282: MINUS
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: LD_VAR 0 1
61296: PUSH
61297: LD_INT 4
61299: PLUS
61300: PUSH
61301: LD_VAR 0 2
61305: PUSH
61306: LD_INT 4
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: PUSH
61314: LD_VAR 0 1
61318: PUSH
61319: LD_VAR 0 2
61323: PUSH
61324: LD_INT 4
61326: PLUS
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: PUSH
61336: LD_VAR 0 1
61340: PUSH
61341: LD_INT 3
61343: MINUS
61344: PUSH
61345: LD_VAR 0 2
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: PUSH
61358: LD_VAR 0 1
61362: PUSH
61363: LD_INT 4
61365: MINUS
61366: PUSH
61367: LD_VAR 0 2
61371: PUSH
61372: LD_INT 4
61374: MINUS
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: LIST
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// end ; 3 :
61391: GO 61813
61393: LD_INT 3
61395: DOUBLE
61396: EQUAL
61397: IFTRUE 61401
61399: GO 61534
61401: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61402: LD_ADDR_VAR 0 5
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_INT 3
61414: PLUS
61415: PUSH
61416: LD_VAR 0 2
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: PUSH
61429: LD_VAR 0 1
61433: PUSH
61434: LD_INT 4
61436: PLUS
61437: PUSH
61438: LD_VAR 0 2
61442: PUSH
61443: LD_INT 4
61445: PLUS
61446: PUSH
61447: LD_INT 5
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: PUSH
61455: LD_VAR 0 1
61459: PUSH
61460: LD_INT 4
61462: MINUS
61463: PUSH
61464: LD_VAR 0 2
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: PUSH
61477: LD_VAR 0 1
61481: PUSH
61482: LD_VAR 0 2
61486: PUSH
61487: LD_INT 4
61489: MINUS
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: PUSH
61499: LD_VAR 0 1
61503: PUSH
61504: LD_INT 3
61506: MINUS
61507: PUSH
61508: LD_VAR 0 2
61512: PUSH
61513: LD_INT 3
61515: MINUS
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: ST_TO_ADDR
// end ; 4 :
61532: GO 61813
61534: LD_INT 4
61536: DOUBLE
61537: EQUAL
61538: IFTRUE 61542
61540: GO 61675
61542: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61543: LD_ADDR_VAR 0 5
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: LD_VAR 0 2
61557: PUSH
61558: LD_INT 4
61560: PLUS
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: LD_VAR 0 1
61574: PUSH
61575: LD_INT 3
61577: PLUS
61578: PUSH
61579: LD_VAR 0 2
61583: PUSH
61584: LD_INT 3
61586: PLUS
61587: PUSH
61588: LD_INT 5
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: PUSH
61596: LD_VAR 0 1
61600: PUSH
61601: LD_INT 4
61603: PLUS
61604: PUSH
61605: LD_VAR 0 2
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: PUSH
61618: LD_VAR 0 1
61622: PUSH
61623: LD_VAR 0 2
61627: PUSH
61628: LD_INT 3
61630: MINUS
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: PUSH
61640: LD_VAR 0 1
61644: PUSH
61645: LD_INT 4
61647: MINUS
61648: PUSH
61649: LD_VAR 0 2
61653: PUSH
61654: LD_INT 4
61656: MINUS
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// end ; 5 :
61673: GO 61813
61675: LD_INT 5
61677: DOUBLE
61678: EQUAL
61679: IFTRUE 61683
61681: GO 61812
61683: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61684: LD_ADDR_VAR 0 5
61688: PUSH
61689: LD_VAR 0 1
61693: PUSH
61694: LD_INT 4
61696: MINUS
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: PUSH
61711: LD_VAR 0 1
61715: PUSH
61716: LD_VAR 0 2
61720: PUSH
61721: LD_INT 4
61723: MINUS
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: LIST
61732: PUSH
61733: LD_VAR 0 1
61737: PUSH
61738: LD_INT 4
61740: PLUS
61741: PUSH
61742: LD_VAR 0 2
61746: PUSH
61747: LD_INT 4
61749: PLUS
61750: PUSH
61751: LD_INT 5
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: PUSH
61759: LD_VAR 0 1
61763: PUSH
61764: LD_INT 3
61766: PLUS
61767: PUSH
61768: LD_VAR 0 2
61772: PUSH
61773: LD_INT 4
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: LD_VAR 0 1
61785: PUSH
61786: LD_VAR 0 2
61790: PUSH
61791: LD_INT 3
61793: PLUS
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// end ; end ;
61810: GO 61813
61812: POP
// result := list ;
61813: LD_ADDR_VAR 0 4
61817: PUSH
61818: LD_VAR 0 5
61822: ST_TO_ADDR
// end ;
61823: LD_VAR 0 4
61827: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61828: LD_INT 0
61830: PPUSH
61831: PPUSH
61832: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61833: LD_VAR 0 1
61837: NOT
61838: PUSH
61839: LD_VAR 0 2
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: LD_INT 4
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: IN
61862: NOT
61863: OR
61864: IFFALSE 61868
// exit ;
61866: GO 61960
// tmp := [ ] ;
61868: LD_ADDR_VAR 0 5
61872: PUSH
61873: EMPTY
61874: ST_TO_ADDR
// for i in units do
61875: LD_ADDR_VAR 0 4
61879: PUSH
61880: LD_VAR 0 1
61884: PUSH
61885: FOR_IN
61886: IFFALSE 61929
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61888: LD_ADDR_VAR 0 5
61892: PUSH
61893: LD_VAR 0 5
61897: PPUSH
61898: LD_VAR 0 5
61902: PUSH
61903: LD_INT 1
61905: PLUS
61906: PPUSH
61907: LD_VAR 0 4
61911: PPUSH
61912: LD_VAR 0 2
61916: PPUSH
61917: CALL_OW 259
61921: PPUSH
61922: CALL_OW 2
61926: ST_TO_ADDR
61927: GO 61885
61929: POP
61930: POP
// if not tmp then
61931: LD_VAR 0 5
61935: NOT
61936: IFFALSE 61940
// exit ;
61938: GO 61960
// result := SortListByListDesc ( units , tmp ) ;
61940: LD_ADDR_VAR 0 3
61944: PUSH
61945: LD_VAR 0 1
61949: PPUSH
61950: LD_VAR 0 5
61954: PPUSH
61955: CALL_OW 77
61959: ST_TO_ADDR
// end ;
61960: LD_VAR 0 3
61964: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61965: LD_INT 0
61967: PPUSH
61968: PPUSH
61969: PPUSH
// result := false ;
61970: LD_ADDR_VAR 0 3
61974: PUSH
61975: LD_INT 0
61977: ST_TO_ADDR
// x := GetX ( building ) ;
61978: LD_ADDR_VAR 0 4
61982: PUSH
61983: LD_VAR 0 2
61987: PPUSH
61988: CALL_OW 250
61992: ST_TO_ADDR
// y := GetY ( building ) ;
61993: LD_ADDR_VAR 0 5
61997: PUSH
61998: LD_VAR 0 2
62002: PPUSH
62003: CALL_OW 251
62007: ST_TO_ADDR
// if not building or not x or not y then
62008: LD_VAR 0 2
62012: NOT
62013: PUSH
62014: LD_VAR 0 4
62018: NOT
62019: OR
62020: PUSH
62021: LD_VAR 0 5
62025: NOT
62026: OR
62027: IFFALSE 62031
// exit ;
62029: GO 62123
// if GetTaskList ( unit ) then
62031: LD_VAR 0 1
62035: PPUSH
62036: CALL_OW 437
62040: IFFALSE 62123
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62042: LD_STRING e
62044: PUSH
62045: LD_VAR 0 1
62049: PPUSH
62050: CALL_OW 437
62054: PUSH
62055: LD_INT 1
62057: ARRAY
62058: PUSH
62059: LD_INT 1
62061: ARRAY
62062: EQUAL
62063: PUSH
62064: LD_VAR 0 4
62068: PUSH
62069: LD_VAR 0 1
62073: PPUSH
62074: CALL_OW 437
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PUSH
62083: LD_INT 2
62085: ARRAY
62086: EQUAL
62087: AND
62088: PUSH
62089: LD_VAR 0 5
62093: PUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: CALL_OW 437
62103: PUSH
62104: LD_INT 1
62106: ARRAY
62107: PUSH
62108: LD_INT 3
62110: ARRAY
62111: EQUAL
62112: AND
62113: IFFALSE 62123
// result := true end ;
62115: LD_ADDR_VAR 0 3
62119: PUSH
62120: LD_INT 1
62122: ST_TO_ADDR
// end ;
62123: LD_VAR 0 3
62127: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62128: LD_INT 0
62130: PPUSH
// result := false ;
62131: LD_ADDR_VAR 0 4
62135: PUSH
62136: LD_INT 0
62138: ST_TO_ADDR
// if GetTaskList ( unit ) then
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL_OW 437
62148: IFFALSE 62231
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62150: LD_STRING M
62152: PUSH
62153: LD_VAR 0 1
62157: PPUSH
62158: CALL_OW 437
62162: PUSH
62163: LD_INT 1
62165: ARRAY
62166: PUSH
62167: LD_INT 1
62169: ARRAY
62170: EQUAL
62171: PUSH
62172: LD_VAR 0 2
62176: PUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 437
62186: PUSH
62187: LD_INT 1
62189: ARRAY
62190: PUSH
62191: LD_INT 2
62193: ARRAY
62194: EQUAL
62195: AND
62196: PUSH
62197: LD_VAR 0 3
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 437
62211: PUSH
62212: LD_INT 1
62214: ARRAY
62215: PUSH
62216: LD_INT 3
62218: ARRAY
62219: EQUAL
62220: AND
62221: IFFALSE 62231
// result := true ;
62223: LD_ADDR_VAR 0 4
62227: PUSH
62228: LD_INT 1
62230: ST_TO_ADDR
// end ; end ;
62231: LD_VAR 0 4
62235: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
62241: PPUSH
// if not unit or not area then
62242: LD_VAR 0 1
62246: NOT
62247: PUSH
62248: LD_VAR 0 2
62252: NOT
62253: OR
62254: IFFALSE 62258
// exit ;
62256: GO 62422
// tmp := AreaToList ( area , i ) ;
62258: LD_ADDR_VAR 0 6
62262: PUSH
62263: LD_VAR 0 2
62267: PPUSH
62268: LD_VAR 0 5
62272: PPUSH
62273: CALL_OW 517
62277: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62278: LD_ADDR_VAR 0 5
62282: PUSH
62283: DOUBLE
62284: LD_INT 1
62286: DEC
62287: ST_TO_ADDR
62288: LD_VAR 0 6
62292: PUSH
62293: LD_INT 1
62295: ARRAY
62296: PUSH
62297: FOR_TO
62298: IFFALSE 62420
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62300: LD_ADDR_VAR 0 7
62304: PUSH
62305: LD_VAR 0 6
62309: PUSH
62310: LD_INT 1
62312: ARRAY
62313: PUSH
62314: LD_VAR 0 5
62318: ARRAY
62319: PUSH
62320: LD_VAR 0 6
62324: PUSH
62325: LD_INT 2
62327: ARRAY
62328: PUSH
62329: LD_VAR 0 5
62333: ARRAY
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62339: LD_VAR 0 7
62343: PUSH
62344: LD_INT 1
62346: ARRAY
62347: PPUSH
62348: LD_VAR 0 7
62352: PUSH
62353: LD_INT 2
62355: ARRAY
62356: PPUSH
62357: CALL_OW 428
62361: PUSH
62362: LD_INT 0
62364: EQUAL
62365: IFFALSE 62418
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62367: LD_VAR 0 1
62371: PPUSH
62372: LD_VAR 0 7
62376: PUSH
62377: LD_INT 1
62379: ARRAY
62380: PPUSH
62381: LD_VAR 0 7
62385: PUSH
62386: LD_INT 2
62388: ARRAY
62389: PPUSH
62390: LD_VAR 0 3
62394: PPUSH
62395: CALL_OW 48
// result := IsPlaced ( unit ) ;
62399: LD_ADDR_VAR 0 4
62403: PUSH
62404: LD_VAR 0 1
62408: PPUSH
62409: CALL_OW 305
62413: ST_TO_ADDR
// exit ;
62414: POP
62415: POP
62416: GO 62422
// end ; end ;
62418: GO 62297
62420: POP
62421: POP
// end ;
62422: LD_VAR 0 4
62426: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62427: LD_INT 0
62429: PPUSH
62430: PPUSH
62431: PPUSH
// if not side or side > 8 then
62432: LD_VAR 0 1
62436: NOT
62437: PUSH
62438: LD_VAR 0 1
62442: PUSH
62443: LD_INT 8
62445: GREATER
62446: OR
62447: IFFALSE 62451
// exit ;
62449: GO 62638
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62451: LD_ADDR_VAR 0 4
62455: PUSH
62456: LD_INT 22
62458: PUSH
62459: LD_VAR 0 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 21
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PPUSH
62482: CALL_OW 69
62486: ST_TO_ADDR
// if not tmp then
62487: LD_VAR 0 4
62491: NOT
62492: IFFALSE 62496
// exit ;
62494: GO 62638
// enable_addtolog := true ;
62496: LD_ADDR_OWVAR 81
62500: PUSH
62501: LD_INT 1
62503: ST_TO_ADDR
// AddToLog ( [ ) ;
62504: LD_STRING [
62506: PPUSH
62507: CALL_OW 561
// for i in tmp do
62511: LD_ADDR_VAR 0 3
62515: PUSH
62516: LD_VAR 0 4
62520: PUSH
62521: FOR_IN
62522: IFFALSE 62629
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62524: LD_STRING [
62526: PUSH
62527: LD_VAR 0 3
62531: PPUSH
62532: CALL_OW 266
62536: STR
62537: PUSH
62538: LD_STRING , 
62540: STR
62541: PUSH
62542: LD_VAR 0 3
62546: PPUSH
62547: CALL_OW 250
62551: STR
62552: PUSH
62553: LD_STRING , 
62555: STR
62556: PUSH
62557: LD_VAR 0 3
62561: PPUSH
62562: CALL_OW 251
62566: STR
62567: PUSH
62568: LD_STRING , 
62570: STR
62571: PUSH
62572: LD_VAR 0 3
62576: PPUSH
62577: CALL_OW 254
62581: STR
62582: PUSH
62583: LD_STRING , 
62585: STR
62586: PUSH
62587: LD_VAR 0 3
62591: PPUSH
62592: LD_INT 1
62594: PPUSH
62595: CALL_OW 268
62599: STR
62600: PUSH
62601: LD_STRING , 
62603: STR
62604: PUSH
62605: LD_VAR 0 3
62609: PPUSH
62610: LD_INT 2
62612: PPUSH
62613: CALL_OW 268
62617: STR
62618: PUSH
62619: LD_STRING ],
62621: STR
62622: PPUSH
62623: CALL_OW 561
// end ;
62627: GO 62521
62629: POP
62630: POP
// AddToLog ( ]; ) ;
62631: LD_STRING ];
62633: PPUSH
62634: CALL_OW 561
// end ;
62638: LD_VAR 0 2
62642: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62643: LD_INT 0
62645: PPUSH
62646: PPUSH
62647: PPUSH
62648: PPUSH
62649: PPUSH
// if not area or not rate or not max then
62650: LD_VAR 0 1
62654: NOT
62655: PUSH
62656: LD_VAR 0 2
62660: NOT
62661: OR
62662: PUSH
62663: LD_VAR 0 4
62667: NOT
62668: OR
62669: IFFALSE 62673
// exit ;
62671: GO 62865
// while 1 do
62673: LD_INT 1
62675: IFFALSE 62865
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62677: LD_ADDR_VAR 0 9
62681: PUSH
62682: LD_VAR 0 1
62686: PPUSH
62687: LD_INT 1
62689: PPUSH
62690: CALL_OW 287
62694: PUSH
62695: LD_INT 10
62697: MUL
62698: ST_TO_ADDR
// r := rate / 10 ;
62699: LD_ADDR_VAR 0 7
62703: PUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_INT 10
62711: DIVREAL
62712: ST_TO_ADDR
// time := 1 1$00 ;
62713: LD_ADDR_VAR 0 8
62717: PUSH
62718: LD_INT 2100
62720: ST_TO_ADDR
// if amount < min then
62721: LD_VAR 0 9
62725: PUSH
62726: LD_VAR 0 3
62730: LESS
62731: IFFALSE 62749
// r := r * 2 else
62733: LD_ADDR_VAR 0 7
62737: PUSH
62738: LD_VAR 0 7
62742: PUSH
62743: LD_INT 2
62745: MUL
62746: ST_TO_ADDR
62747: GO 62775
// if amount > max then
62749: LD_VAR 0 9
62753: PUSH
62754: LD_VAR 0 4
62758: GREATER
62759: IFFALSE 62775
// r := r / 2 ;
62761: LD_ADDR_VAR 0 7
62765: PUSH
62766: LD_VAR 0 7
62770: PUSH
62771: LD_INT 2
62773: DIVREAL
62774: ST_TO_ADDR
// time := time / r ;
62775: LD_ADDR_VAR 0 8
62779: PUSH
62780: LD_VAR 0 8
62784: PUSH
62785: LD_VAR 0 7
62789: DIVREAL
62790: ST_TO_ADDR
// if time < 0 then
62791: LD_VAR 0 8
62795: PUSH
62796: LD_INT 0
62798: LESS
62799: IFFALSE 62816
// time := time * - 1 ;
62801: LD_ADDR_VAR 0 8
62805: PUSH
62806: LD_VAR 0 8
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: MUL
62815: ST_TO_ADDR
// wait ( time ) ;
62816: LD_VAR 0 8
62820: PPUSH
62821: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62825: LD_INT 35
62827: PPUSH
62828: LD_INT 875
62830: PPUSH
62831: CALL_OW 12
62835: PPUSH
62836: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62840: LD_INT 1
62842: PPUSH
62843: LD_INT 5
62845: PPUSH
62846: CALL_OW 12
62850: PPUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: LD_INT 1
62858: PPUSH
62859: CALL_OW 55
// end ;
62863: GO 62673
// end ;
62865: LD_VAR 0 5
62869: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62870: LD_INT 0
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
62878: PPUSH
62879: PPUSH
// if not turrets or not factories then
62880: LD_VAR 0 1
62884: NOT
62885: PUSH
62886: LD_VAR 0 2
62890: NOT
62891: OR
62892: IFFALSE 62896
// exit ;
62894: GO 63203
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62896: LD_ADDR_VAR 0 10
62900: PUSH
62901: LD_INT 5
62903: PUSH
62904: LD_INT 6
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: LD_INT 4
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 5
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 24
62938: PUSH
62939: LD_INT 25
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 23
62948: PUSH
62949: LD_INT 27
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 42
62962: PUSH
62963: LD_INT 43
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 44
62972: PUSH
62973: LD_INT 46
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 45
62982: PUSH
62983: LD_INT 47
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: LIST
62999: ST_TO_ADDR
// result := [ ] ;
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: EMPTY
63006: ST_TO_ADDR
// for i in turrets do
63007: LD_ADDR_VAR 0 4
63011: PUSH
63012: LD_VAR 0 1
63016: PUSH
63017: FOR_IN
63018: IFFALSE 63201
// begin nat := GetNation ( i ) ;
63020: LD_ADDR_VAR 0 7
63024: PUSH
63025: LD_VAR 0 4
63029: PPUSH
63030: CALL_OW 248
63034: ST_TO_ADDR
// weapon := 0 ;
63035: LD_ADDR_VAR 0 8
63039: PUSH
63040: LD_INT 0
63042: ST_TO_ADDR
// if not nat then
63043: LD_VAR 0 7
63047: NOT
63048: IFFALSE 63052
// continue ;
63050: GO 63017
// for j in list [ nat ] do
63052: LD_ADDR_VAR 0 5
63056: PUSH
63057: LD_VAR 0 10
63061: PUSH
63062: LD_VAR 0 7
63066: ARRAY
63067: PUSH
63068: FOR_IN
63069: IFFALSE 63110
// if GetBWeapon ( i ) = j [ 1 ] then
63071: LD_VAR 0 4
63075: PPUSH
63076: CALL_OW 269
63080: PUSH
63081: LD_VAR 0 5
63085: PUSH
63086: LD_INT 1
63088: ARRAY
63089: EQUAL
63090: IFFALSE 63108
// begin weapon := j [ 2 ] ;
63092: LD_ADDR_VAR 0 8
63096: PUSH
63097: LD_VAR 0 5
63101: PUSH
63102: LD_INT 2
63104: ARRAY
63105: ST_TO_ADDR
// break ;
63106: GO 63110
// end ;
63108: GO 63068
63110: POP
63111: POP
// if not weapon then
63112: LD_VAR 0 8
63116: NOT
63117: IFFALSE 63121
// continue ;
63119: GO 63017
// for k in factories do
63121: LD_ADDR_VAR 0 6
63125: PUSH
63126: LD_VAR 0 2
63130: PUSH
63131: FOR_IN
63132: IFFALSE 63197
// begin weapons := AvailableWeaponList ( k ) ;
63134: LD_ADDR_VAR 0 9
63138: PUSH
63139: LD_VAR 0 6
63143: PPUSH
63144: CALL_OW 478
63148: ST_TO_ADDR
// if not weapons then
63149: LD_VAR 0 9
63153: NOT
63154: IFFALSE 63158
// continue ;
63156: GO 63131
// if weapon in weapons then
63158: LD_VAR 0 8
63162: PUSH
63163: LD_VAR 0 9
63167: IN
63168: IFFALSE 63195
// begin result := [ i , weapon ] ;
63170: LD_ADDR_VAR 0 3
63174: PUSH
63175: LD_VAR 0 4
63179: PUSH
63180: LD_VAR 0 8
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: ST_TO_ADDR
// exit ;
63189: POP
63190: POP
63191: POP
63192: POP
63193: GO 63203
// end ; end ;
63195: GO 63131
63197: POP
63198: POP
// end ;
63199: GO 63017
63201: POP
63202: POP
// end ;
63203: LD_VAR 0 3
63207: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63208: LD_INT 0
63210: PPUSH
// if not side or side > 8 then
63211: LD_VAR 0 3
63215: NOT
63216: PUSH
63217: LD_VAR 0 3
63221: PUSH
63222: LD_INT 8
63224: GREATER
63225: OR
63226: IFFALSE 63230
// exit ;
63228: GO 63289
// if not range then
63230: LD_VAR 0 4
63234: NOT
63235: IFFALSE 63246
// range := - 12 ;
63237: LD_ADDR_VAR 0 4
63241: PUSH
63242: LD_INT 12
63244: NEG
63245: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63246: LD_VAR 0 1
63250: PPUSH
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 4
63265: PPUSH
63266: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63270: LD_VAR 0 1
63274: PPUSH
63275: LD_VAR 0 2
63279: PPUSH
63280: LD_VAR 0 3
63284: PPUSH
63285: CALL_OW 331
// end ;
63289: LD_VAR 0 5
63293: RET
// export function Video ( mode ) ; begin
63294: LD_INT 0
63296: PPUSH
// ingame_video = mode ;
63297: LD_ADDR_OWVAR 52
63301: PUSH
63302: LD_VAR 0 1
63306: ST_TO_ADDR
// interface_hidden = mode ;
63307: LD_ADDR_OWVAR 54
63311: PUSH
63312: LD_VAR 0 1
63316: ST_TO_ADDR
// end ;
63317: LD_VAR 0 2
63321: RET
// export function Join ( array , element ) ; begin
63322: LD_INT 0
63324: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63325: LD_ADDR_VAR 0 3
63329: PUSH
63330: LD_VAR 0 1
63334: PPUSH
63335: LD_VAR 0 1
63339: PUSH
63340: LD_INT 1
63342: PLUS
63343: PPUSH
63344: LD_VAR 0 2
63348: PPUSH
63349: CALL_OW 1
63353: ST_TO_ADDR
// end ;
63354: LD_VAR 0 3
63358: RET
// export function JoinUnion ( array , element ) ; begin
63359: LD_INT 0
63361: PPUSH
// result := array union element ;
63362: LD_ADDR_VAR 0 3
63366: PUSH
63367: LD_VAR 0 1
63371: PUSH
63372: LD_VAR 0 2
63376: UNION
63377: ST_TO_ADDR
// end ;
63378: LD_VAR 0 3
63382: RET
// export function GetBehemoths ( side ) ; begin
63383: LD_INT 0
63385: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63386: LD_ADDR_VAR 0 2
63390: PUSH
63391: LD_INT 22
63393: PUSH
63394: LD_VAR 0 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 31
63405: PUSH
63406: LD_INT 25
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PPUSH
63417: CALL_OW 69
63421: ST_TO_ADDR
// end ;
63422: LD_VAR 0 2
63426: RET
// export function Shuffle ( array ) ; var i , index ; begin
63427: LD_INT 0
63429: PPUSH
63430: PPUSH
63431: PPUSH
// result := [ ] ;
63432: LD_ADDR_VAR 0 2
63436: PUSH
63437: EMPTY
63438: ST_TO_ADDR
// if not array then
63439: LD_VAR 0 1
63443: NOT
63444: IFFALSE 63448
// exit ;
63446: GO 63547
// Randomize ;
63448: CALL_OW 10
// for i = array downto 1 do
63452: LD_ADDR_VAR 0 3
63456: PUSH
63457: DOUBLE
63458: LD_VAR 0 1
63462: INC
63463: ST_TO_ADDR
63464: LD_INT 1
63466: PUSH
63467: FOR_DOWNTO
63468: IFFALSE 63545
// begin index := rand ( 1 , array ) ;
63470: LD_ADDR_VAR 0 4
63474: PUSH
63475: LD_INT 1
63477: PPUSH
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 12
63487: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63488: LD_ADDR_VAR 0 2
63492: PUSH
63493: LD_VAR 0 2
63497: PPUSH
63498: LD_VAR 0 2
63502: PUSH
63503: LD_INT 1
63505: PLUS
63506: PPUSH
63507: LD_VAR 0 1
63511: PUSH
63512: LD_VAR 0 4
63516: ARRAY
63517: PPUSH
63518: CALL_OW 2
63522: ST_TO_ADDR
// array := Delete ( array , index ) ;
63523: LD_ADDR_VAR 0 1
63527: PUSH
63528: LD_VAR 0 1
63532: PPUSH
63533: LD_VAR 0 4
63537: PPUSH
63538: CALL_OW 3
63542: ST_TO_ADDR
// end ;
63543: GO 63467
63545: POP
63546: POP
// end ;
63547: LD_VAR 0 2
63551: RET
// export function GetBaseMaterials ( base ) ; begin
63552: LD_INT 0
63554: PPUSH
// result := [ 0 , 0 , 0 ] ;
63555: LD_ADDR_VAR 0 2
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// if not base then
63574: LD_VAR 0 1
63578: NOT
63579: IFFALSE 63583
// exit ;
63581: GO 63632
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63583: LD_ADDR_VAR 0 2
63587: PUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: LD_INT 1
63595: PPUSH
63596: CALL_OW 275
63600: PUSH
63601: LD_VAR 0 1
63605: PPUSH
63606: LD_INT 2
63608: PPUSH
63609: CALL_OW 275
63613: PUSH
63614: LD_VAR 0 1
63618: PPUSH
63619: LD_INT 3
63621: PPUSH
63622: CALL_OW 275
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// end ;
63632: LD_VAR 0 2
63636: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63637: LD_INT 0
63639: PPUSH
63640: PPUSH
// result := array ;
63641: LD_ADDR_VAR 0 3
63645: PUSH
63646: LD_VAR 0 1
63650: ST_TO_ADDR
// if size > 0 then
63651: LD_VAR 0 2
63655: PUSH
63656: LD_INT 0
63658: GREATER
63659: IFFALSE 63705
// for i := array downto size do
63661: LD_ADDR_VAR 0 4
63665: PUSH
63666: DOUBLE
63667: LD_VAR 0 1
63671: INC
63672: ST_TO_ADDR
63673: LD_VAR 0 2
63677: PUSH
63678: FOR_DOWNTO
63679: IFFALSE 63703
// result := Delete ( result , result ) ;
63681: LD_ADDR_VAR 0 3
63685: PUSH
63686: LD_VAR 0 3
63690: PPUSH
63691: LD_VAR 0 3
63695: PPUSH
63696: CALL_OW 3
63700: ST_TO_ADDR
63701: GO 63678
63703: POP
63704: POP
// end ;
63705: LD_VAR 0 3
63709: RET
// export function ComExit ( unit ) ; var tmp ; begin
63710: LD_INT 0
63712: PPUSH
63713: PPUSH
// if not IsInUnit ( unit ) then
63714: LD_VAR 0 1
63718: PPUSH
63719: CALL_OW 310
63723: NOT
63724: IFFALSE 63728
// exit ;
63726: GO 63788
// tmp := IsInUnit ( unit ) ;
63728: LD_ADDR_VAR 0 3
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 310
63742: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63743: LD_VAR 0 3
63747: PPUSH
63748: CALL_OW 247
63752: PUSH
63753: LD_INT 2
63755: EQUAL
63756: IFFALSE 63769
// ComExitVehicle ( unit ) else
63758: LD_VAR 0 1
63762: PPUSH
63763: CALL_OW 121
63767: GO 63778
// ComExitBuilding ( unit ) ;
63769: LD_VAR 0 1
63773: PPUSH
63774: CALL_OW 122
// result := tmp ;
63778: LD_ADDR_VAR 0 2
63782: PUSH
63783: LD_VAR 0 3
63787: ST_TO_ADDR
// end ;
63788: LD_VAR 0 2
63792: RET
// export function ComExitAll ( units ) ; var i ; begin
63793: LD_INT 0
63795: PPUSH
63796: PPUSH
// if not units then
63797: LD_VAR 0 1
63801: NOT
63802: IFFALSE 63806
// exit ;
63804: GO 63832
// for i in units do
63806: LD_ADDR_VAR 0 3
63810: PUSH
63811: LD_VAR 0 1
63815: PUSH
63816: FOR_IN
63817: IFFALSE 63830
// ComExit ( i ) ;
63819: LD_VAR 0 3
63823: PPUSH
63824: CALL 63710 0 1
63828: GO 63816
63830: POP
63831: POP
// end ;
63832: LD_VAR 0 2
63836: RET
// export function ResetHc ; begin
63837: LD_INT 0
63839: PPUSH
// InitHc ;
63840: CALL_OW 19
// hc_importance := 0 ;
63844: LD_ADDR_OWVAR 32
63848: PUSH
63849: LD_INT 0
63851: ST_TO_ADDR
// end ;
63852: LD_VAR 0 1
63856: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63857: LD_INT 0
63859: PPUSH
63860: PPUSH
63861: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63862: LD_ADDR_VAR 0 6
63866: PUSH
63867: LD_VAR 0 1
63871: PUSH
63872: LD_VAR 0 3
63876: PLUS
63877: PUSH
63878: LD_INT 2
63880: DIV
63881: ST_TO_ADDR
// if _x < 0 then
63882: LD_VAR 0 6
63886: PUSH
63887: LD_INT 0
63889: LESS
63890: IFFALSE 63907
// _x := _x * - 1 ;
63892: LD_ADDR_VAR 0 6
63896: PUSH
63897: LD_VAR 0 6
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: MUL
63906: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63907: LD_ADDR_VAR 0 7
63911: PUSH
63912: LD_VAR 0 2
63916: PUSH
63917: LD_VAR 0 4
63921: PLUS
63922: PUSH
63923: LD_INT 2
63925: DIV
63926: ST_TO_ADDR
// if _y < 0 then
63927: LD_VAR 0 7
63931: PUSH
63932: LD_INT 0
63934: LESS
63935: IFFALSE 63952
// _y := _y * - 1 ;
63937: LD_ADDR_VAR 0 7
63941: PUSH
63942: LD_VAR 0 7
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: MUL
63951: ST_TO_ADDR
// result := [ _x , _y ] ;
63952: LD_ADDR_VAR 0 5
63956: PUSH
63957: LD_VAR 0 6
63961: PUSH
63962: LD_VAR 0 7
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: ST_TO_ADDR
// end ;
63971: LD_VAR 0 5
63975: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63976: LD_INT 0
63978: PPUSH
63979: PPUSH
63980: PPUSH
63981: PPUSH
// task := GetTaskList ( unit ) ;
63982: LD_ADDR_VAR 0 7
63986: PUSH
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 437
63996: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63997: LD_VAR 0 7
64001: NOT
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: CALL_OW 308
64017: NOT
64018: AND
64019: IFFALSE 64023
// exit ;
64021: GO 64141
// if IsInArea ( unit , area ) then
64023: LD_VAR 0 1
64027: PPUSH
64028: LD_VAR 0 2
64032: PPUSH
64033: CALL_OW 308
64037: IFFALSE 64055
// begin ComMoveToArea ( unit , goAway ) ;
64039: LD_VAR 0 1
64043: PPUSH
64044: LD_VAR 0 3
64048: PPUSH
64049: CALL_OW 113
// exit ;
64053: GO 64141
// end ; if task [ 1 ] [ 1 ] <> M then
64055: LD_VAR 0 7
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: PUSH
64068: LD_STRING M
64070: NONEQUAL
64071: IFFALSE 64075
// exit ;
64073: GO 64141
// x := task [ 1 ] [ 2 ] ;
64075: LD_ADDR_VAR 0 5
64079: PUSH
64080: LD_VAR 0 7
64084: PUSH
64085: LD_INT 1
64087: ARRAY
64088: PUSH
64089: LD_INT 2
64091: ARRAY
64092: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64093: LD_ADDR_VAR 0 6
64097: PUSH
64098: LD_VAR 0 7
64102: PUSH
64103: LD_INT 1
64105: ARRAY
64106: PUSH
64107: LD_INT 3
64109: ARRAY
64110: ST_TO_ADDR
// if InArea ( x , y , area ) then
64111: LD_VAR 0 5
64115: PPUSH
64116: LD_VAR 0 6
64120: PPUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: CALL_OW 309
64130: IFFALSE 64141
// ComStop ( unit ) ;
64132: LD_VAR 0 1
64136: PPUSH
64137: CALL_OW 141
// end ;
64141: LD_VAR 0 4
64145: RET
// export function Abs ( value ) ; begin
64146: LD_INT 0
64148: PPUSH
// result := value ;
64149: LD_ADDR_VAR 0 2
64153: PUSH
64154: LD_VAR 0 1
64158: ST_TO_ADDR
// if value < 0 then
64159: LD_VAR 0 1
64163: PUSH
64164: LD_INT 0
64166: LESS
64167: IFFALSE 64184
// result := value * - 1 ;
64169: LD_ADDR_VAR 0 2
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: MUL
64183: ST_TO_ADDR
// end ;
64184: LD_VAR 0 2
64188: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64189: LD_INT 0
64191: PPUSH
64192: PPUSH
64193: PPUSH
64194: PPUSH
64195: PPUSH
64196: PPUSH
64197: PPUSH
64198: PPUSH
// if not unit or not building then
64199: LD_VAR 0 1
64203: NOT
64204: PUSH
64205: LD_VAR 0 2
64209: NOT
64210: OR
64211: IFFALSE 64215
// exit ;
64213: GO 64441
// x := GetX ( building ) ;
64215: LD_ADDR_VAR 0 4
64219: PUSH
64220: LD_VAR 0 2
64224: PPUSH
64225: CALL_OW 250
64229: ST_TO_ADDR
// y := GetY ( building ) ;
64230: LD_ADDR_VAR 0 6
64234: PUSH
64235: LD_VAR 0 2
64239: PPUSH
64240: CALL_OW 251
64244: ST_TO_ADDR
// d := GetDir ( building ) ;
64245: LD_ADDR_VAR 0 8
64249: PUSH
64250: LD_VAR 0 2
64254: PPUSH
64255: CALL_OW 254
64259: ST_TO_ADDR
// r := 4 ;
64260: LD_ADDR_VAR 0 9
64264: PUSH
64265: LD_INT 4
64267: ST_TO_ADDR
// for i := 1 to 5 do
64268: LD_ADDR_VAR 0 10
64272: PUSH
64273: DOUBLE
64274: LD_INT 1
64276: DEC
64277: ST_TO_ADDR
64278: LD_INT 5
64280: PUSH
64281: FOR_TO
64282: IFFALSE 64439
// begin _x := ShiftX ( x , d , r + i ) ;
64284: LD_ADDR_VAR 0 5
64288: PUSH
64289: LD_VAR 0 4
64293: PPUSH
64294: LD_VAR 0 8
64298: PPUSH
64299: LD_VAR 0 9
64303: PUSH
64304: LD_VAR 0 10
64308: PLUS
64309: PPUSH
64310: CALL_OW 272
64314: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64315: LD_ADDR_VAR 0 7
64319: PUSH
64320: LD_VAR 0 6
64324: PPUSH
64325: LD_VAR 0 8
64329: PPUSH
64330: LD_VAR 0 9
64334: PUSH
64335: LD_VAR 0 10
64339: PLUS
64340: PPUSH
64341: CALL_OW 273
64345: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64346: LD_VAR 0 5
64350: PPUSH
64351: LD_VAR 0 7
64355: PPUSH
64356: CALL_OW 488
64360: PUSH
64361: LD_VAR 0 5
64365: PPUSH
64366: LD_VAR 0 7
64370: PPUSH
64371: CALL_OW 428
64375: PPUSH
64376: CALL_OW 247
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: IN
64391: NOT
64392: AND
64393: IFFALSE 64437
// begin ComMoveXY ( unit , _x , _y ) ;
64395: LD_VAR 0 1
64399: PPUSH
64400: LD_VAR 0 5
64404: PPUSH
64405: LD_VAR 0 7
64409: PPUSH
64410: CALL_OW 111
// result := [ _x , _y ] ;
64414: LD_ADDR_VAR 0 3
64418: PUSH
64419: LD_VAR 0 5
64423: PUSH
64424: LD_VAR 0 7
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// exit ;
64433: POP
64434: POP
64435: GO 64441
// end ; end ;
64437: GO 64281
64439: POP
64440: POP
// end ;
64441: LD_VAR 0 3
64445: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64446: LD_INT 0
64448: PPUSH
64449: PPUSH
64450: PPUSH
// result := 0 ;
64451: LD_ADDR_VAR 0 3
64455: PUSH
64456: LD_INT 0
64458: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64459: LD_VAR 0 1
64463: PUSH
64464: LD_INT 0
64466: LESS
64467: PUSH
64468: LD_VAR 0 1
64472: PUSH
64473: LD_INT 8
64475: GREATER
64476: OR
64477: PUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_INT 0
64485: LESS
64486: OR
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_INT 8
64495: GREATER
64496: OR
64497: IFFALSE 64501
// exit ;
64499: GO 64576
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64501: LD_ADDR_VAR 0 4
64505: PUSH
64506: LD_INT 22
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PPUSH
64518: CALL_OW 69
64522: PUSH
64523: FOR_IN
64524: IFFALSE 64574
// begin un := UnitShoot ( i ) ;
64526: LD_ADDR_VAR 0 5
64530: PUSH
64531: LD_VAR 0 4
64535: PPUSH
64536: CALL_OW 504
64540: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64541: LD_VAR 0 5
64545: PPUSH
64546: CALL_OW 255
64550: PUSH
64551: LD_VAR 0 1
64555: EQUAL
64556: IFFALSE 64572
// begin result := un ;
64558: LD_ADDR_VAR 0 3
64562: PUSH
64563: LD_VAR 0 5
64567: ST_TO_ADDR
// exit ;
64568: POP
64569: POP
64570: GO 64576
// end ; end ;
64572: GO 64523
64574: POP
64575: POP
// end ;
64576: LD_VAR 0 3
64580: RET
// export function GetCargoBay ( units ) ; begin
64581: LD_INT 0
64583: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64584: LD_ADDR_VAR 0 2
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_INT 2
64596: PUSH
64597: LD_INT 34
64599: PUSH
64600: LD_INT 12
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 34
64609: PUSH
64610: LD_INT 51
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 34
64619: PUSH
64620: LD_INT 32
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 34
64629: PUSH
64630: LD_EXP 53
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: PPUSH
64646: CALL_OW 72
64650: ST_TO_ADDR
// end ;
64651: LD_VAR 0 2
64655: RET
// export function Negate ( value ) ; begin
64656: LD_INT 0
64658: PPUSH
// result := not value ;
64659: LD_ADDR_VAR 0 2
64663: PUSH
64664: LD_VAR 0 1
64668: NOT
64669: ST_TO_ADDR
// end ;
64670: LD_VAR 0 2
64674: RET
// export function Inc ( value ) ; begin
64675: LD_INT 0
64677: PPUSH
// result := value + 1 ;
64678: LD_ADDR_VAR 0 2
64682: PUSH
64683: LD_VAR 0 1
64687: PUSH
64688: LD_INT 1
64690: PLUS
64691: ST_TO_ADDR
// end ;
64692: LD_VAR 0 2
64696: RET
// export function Dec ( value ) ; begin
64697: LD_INT 0
64699: PPUSH
// result := value - 1 ;
64700: LD_ADDR_VAR 0 2
64704: PUSH
64705: LD_VAR 0 1
64709: PUSH
64710: LD_INT 1
64712: MINUS
64713: ST_TO_ADDR
// end ;
64714: LD_VAR 0 2
64718: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64719: LD_INT 0
64721: PPUSH
64722: PPUSH
64723: PPUSH
64724: PPUSH
64725: PPUSH
64726: PPUSH
64727: PPUSH
64728: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64729: LD_VAR 0 1
64733: PPUSH
64734: LD_VAR 0 2
64738: PPUSH
64739: CALL_OW 488
64743: NOT
64744: PUSH
64745: LD_VAR 0 3
64749: PPUSH
64750: LD_VAR 0 4
64754: PPUSH
64755: CALL_OW 488
64759: NOT
64760: OR
64761: IFFALSE 64774
// begin result := - 1 ;
64763: LD_ADDR_VAR 0 5
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: ST_TO_ADDR
// exit ;
64772: GO 65009
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64774: LD_ADDR_VAR 0 12
64778: PUSH
64779: LD_VAR 0 1
64783: PPUSH
64784: LD_VAR 0 2
64788: PPUSH
64789: LD_VAR 0 3
64793: PPUSH
64794: LD_VAR 0 4
64798: PPUSH
64799: CALL 63857 0 4
64803: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64804: LD_ADDR_VAR 0 11
64808: PUSH
64809: LD_VAR 0 1
64813: PPUSH
64814: LD_VAR 0 2
64818: PPUSH
64819: LD_VAR 0 12
64823: PUSH
64824: LD_INT 1
64826: ARRAY
64827: PPUSH
64828: LD_VAR 0 12
64832: PUSH
64833: LD_INT 2
64835: ARRAY
64836: PPUSH
64837: CALL_OW 298
64841: ST_TO_ADDR
// distance := 9999 ;
64842: LD_ADDR_VAR 0 10
64846: PUSH
64847: LD_INT 9999
64849: ST_TO_ADDR
// for i := 0 to 5 do
64850: LD_ADDR_VAR 0 6
64854: PUSH
64855: DOUBLE
64856: LD_INT 0
64858: DEC
64859: ST_TO_ADDR
64860: LD_INT 5
64862: PUSH
64863: FOR_TO
64864: IFFALSE 65007
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64866: LD_ADDR_VAR 0 7
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: LD_VAR 0 6
64880: PPUSH
64881: LD_VAR 0 11
64885: PPUSH
64886: CALL_OW 272
64890: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64891: LD_ADDR_VAR 0 8
64895: PUSH
64896: LD_VAR 0 2
64900: PPUSH
64901: LD_VAR 0 6
64905: PPUSH
64906: LD_VAR 0 11
64910: PPUSH
64911: CALL_OW 273
64915: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64916: LD_VAR 0 7
64920: PPUSH
64921: LD_VAR 0 8
64925: PPUSH
64926: CALL_OW 488
64930: NOT
64931: IFFALSE 64935
// continue ;
64933: GO 64863
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64935: LD_ADDR_VAR 0 9
64939: PUSH
64940: LD_VAR 0 12
64944: PUSH
64945: LD_INT 1
64947: ARRAY
64948: PPUSH
64949: LD_VAR 0 12
64953: PUSH
64954: LD_INT 2
64956: ARRAY
64957: PPUSH
64958: LD_VAR 0 7
64962: PPUSH
64963: LD_VAR 0 8
64967: PPUSH
64968: CALL_OW 298
64972: ST_TO_ADDR
// if tmp < distance then
64973: LD_VAR 0 9
64977: PUSH
64978: LD_VAR 0 10
64982: LESS
64983: IFFALSE 65005
// begin result := i ;
64985: LD_ADDR_VAR 0 5
64989: PUSH
64990: LD_VAR 0 6
64994: ST_TO_ADDR
// distance := tmp ;
64995: LD_ADDR_VAR 0 10
64999: PUSH
65000: LD_VAR 0 9
65004: ST_TO_ADDR
// end ; end ;
65005: GO 64863
65007: POP
65008: POP
// end ;
65009: LD_VAR 0 5
65013: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65014: LD_INT 0
65016: PPUSH
65017: PPUSH
// if not driver or not IsInUnit ( driver ) then
65018: LD_VAR 0 1
65022: NOT
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 310
65033: NOT
65034: OR
65035: IFFALSE 65039
// exit ;
65037: GO 65129
// vehicle := IsInUnit ( driver ) ;
65039: LD_ADDR_VAR 0 3
65043: PUSH
65044: LD_VAR 0 1
65048: PPUSH
65049: CALL_OW 310
65053: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65054: LD_VAR 0 1
65058: PPUSH
65059: LD_STRING \
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: PUSH
65089: LD_STRING E
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_VAR 0 3
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PPUSH
65125: CALL_OW 446
// end ;
65129: LD_VAR 0 2
65133: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65134: LD_INT 0
65136: PPUSH
65137: PPUSH
// if not driver or not IsInUnit ( driver ) then
65138: LD_VAR 0 1
65142: NOT
65143: PUSH
65144: LD_VAR 0 1
65148: PPUSH
65149: CALL_OW 310
65153: NOT
65154: OR
65155: IFFALSE 65159
// exit ;
65157: GO 65249
// vehicle := IsInUnit ( driver ) ;
65159: LD_ADDR_VAR 0 3
65163: PUSH
65164: LD_VAR 0 1
65168: PPUSH
65169: CALL_OW 310
65173: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65174: LD_VAR 0 1
65178: PPUSH
65179: LD_STRING \
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: PUSH
65209: LD_STRING E
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_VAR 0 3
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PPUSH
65245: CALL_OW 447
// end ;
65249: LD_VAR 0 2
65253: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
65258: PPUSH
// tmp := [ ] ;
65259: LD_ADDR_VAR 0 5
65263: PUSH
65264: EMPTY
65265: ST_TO_ADDR
// for i in units do
65266: LD_ADDR_VAR 0 4
65270: PUSH
65271: LD_VAR 0 1
65275: PUSH
65276: FOR_IN
65277: IFFALSE 65315
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65279: LD_ADDR_VAR 0 5
65283: PUSH
65284: LD_VAR 0 5
65288: PPUSH
65289: LD_VAR 0 5
65293: PUSH
65294: LD_INT 1
65296: PLUS
65297: PPUSH
65298: LD_VAR 0 4
65302: PPUSH
65303: CALL_OW 256
65307: PPUSH
65308: CALL_OW 2
65312: ST_TO_ADDR
65313: GO 65276
65315: POP
65316: POP
// if not tmp then
65317: LD_VAR 0 5
65321: NOT
65322: IFFALSE 65326
// exit ;
65324: GO 65374
// if asc then
65326: LD_VAR 0 2
65330: IFFALSE 65354
// result := SortListByListAsc ( units , tmp ) else
65332: LD_ADDR_VAR 0 3
65336: PUSH
65337: LD_VAR 0 1
65341: PPUSH
65342: LD_VAR 0 5
65346: PPUSH
65347: CALL_OW 76
65351: ST_TO_ADDR
65352: GO 65374
// result := SortListByListDesc ( units , tmp ) ;
65354: LD_ADDR_VAR 0 3
65358: PUSH
65359: LD_VAR 0 1
65363: PPUSH
65364: LD_VAR 0 5
65368: PPUSH
65369: CALL_OW 77
65373: ST_TO_ADDR
// end ;
65374: LD_VAR 0 3
65378: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65379: LD_INT 0
65381: PPUSH
65382: PPUSH
// task := GetTaskList ( mech ) ;
65383: LD_ADDR_VAR 0 4
65387: PUSH
65388: LD_VAR 0 1
65392: PPUSH
65393: CALL_OW 437
65397: ST_TO_ADDR
// if not task then
65398: LD_VAR 0 4
65402: NOT
65403: IFFALSE 65407
// exit ;
65405: GO 65449
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65407: LD_ADDR_VAR 0 3
65411: PUSH
65412: LD_VAR 0 4
65416: PUSH
65417: LD_INT 1
65419: ARRAY
65420: PUSH
65421: LD_INT 1
65423: ARRAY
65424: PUSH
65425: LD_STRING r
65427: EQUAL
65428: PUSH
65429: LD_VAR 0 4
65433: PUSH
65434: LD_INT 1
65436: ARRAY
65437: PUSH
65438: LD_INT 4
65440: ARRAY
65441: PUSH
65442: LD_VAR 0 2
65446: EQUAL
65447: AND
65448: ST_TO_ADDR
// end ;
65449: LD_VAR 0 3
65453: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65454: LD_INT 0
65456: PPUSH
// SetDir ( unit , d ) ;
65457: LD_VAR 0 1
65461: PPUSH
65462: LD_VAR 0 4
65466: PPUSH
65467: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65471: LD_VAR 0 1
65475: PPUSH
65476: LD_VAR 0 2
65480: PPUSH
65481: LD_VAR 0 3
65485: PPUSH
65486: LD_VAR 0 5
65490: PPUSH
65491: CALL_OW 48
// end ;
65495: LD_VAR 0 6
65499: RET
// export function ToNaturalNumber ( number ) ; begin
65500: LD_INT 0
65502: PPUSH
// result := number div 1 ;
65503: LD_ADDR_VAR 0 2
65507: PUSH
65508: LD_VAR 0 1
65512: PUSH
65513: LD_INT 1
65515: DIV
65516: ST_TO_ADDR
// if number < 0 then
65517: LD_VAR 0 1
65521: PUSH
65522: LD_INT 0
65524: LESS
65525: IFFALSE 65535
// result := 0 ;
65527: LD_ADDR_VAR 0 2
65531: PUSH
65532: LD_INT 0
65534: ST_TO_ADDR
// end ;
65535: LD_VAR 0 2
65539: RET
// export function SortByClass ( units , class ) ; var un ; begin
65540: LD_INT 0
65542: PPUSH
65543: PPUSH
// if not units or not class then
65544: LD_VAR 0 1
65548: NOT
65549: PUSH
65550: LD_VAR 0 2
65554: NOT
65555: OR
65556: IFFALSE 65560
// exit ;
65558: GO 65655
// result := [ ] ;
65560: LD_ADDR_VAR 0 3
65564: PUSH
65565: EMPTY
65566: ST_TO_ADDR
// for un in units do
65567: LD_ADDR_VAR 0 4
65571: PUSH
65572: LD_VAR 0 1
65576: PUSH
65577: FOR_IN
65578: IFFALSE 65653
// if GetClass ( un ) = class then
65580: LD_VAR 0 4
65584: PPUSH
65585: CALL_OW 257
65589: PUSH
65590: LD_VAR 0 2
65594: EQUAL
65595: IFFALSE 65622
// result := Insert ( result , 1 , un ) else
65597: LD_ADDR_VAR 0 3
65601: PUSH
65602: LD_VAR 0 3
65606: PPUSH
65607: LD_INT 1
65609: PPUSH
65610: LD_VAR 0 4
65614: PPUSH
65615: CALL_OW 2
65619: ST_TO_ADDR
65620: GO 65651
// result := Replace ( result , result + 1 , un ) ;
65622: LD_ADDR_VAR 0 3
65626: PUSH
65627: LD_VAR 0 3
65631: PPUSH
65632: LD_VAR 0 3
65636: PUSH
65637: LD_INT 1
65639: PLUS
65640: PPUSH
65641: LD_VAR 0 4
65645: PPUSH
65646: CALL_OW 1
65650: ST_TO_ADDR
65651: GO 65577
65653: POP
65654: POP
// end ;
65655: LD_VAR 0 3
65659: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65660: LD_INT 0
65662: PPUSH
65663: PPUSH
65664: PPUSH
65665: PPUSH
65666: PPUSH
65667: PPUSH
65668: PPUSH
// result := [ ] ;
65669: LD_ADDR_VAR 0 4
65673: PUSH
65674: EMPTY
65675: ST_TO_ADDR
// if x - r < 0 then
65676: LD_VAR 0 1
65680: PUSH
65681: LD_VAR 0 3
65685: MINUS
65686: PUSH
65687: LD_INT 0
65689: LESS
65690: IFFALSE 65702
// min_x := 0 else
65692: LD_ADDR_VAR 0 8
65696: PUSH
65697: LD_INT 0
65699: ST_TO_ADDR
65700: GO 65718
// min_x := x - r ;
65702: LD_ADDR_VAR 0 8
65706: PUSH
65707: LD_VAR 0 1
65711: PUSH
65712: LD_VAR 0 3
65716: MINUS
65717: ST_TO_ADDR
// if y - r < 0 then
65718: LD_VAR 0 2
65722: PUSH
65723: LD_VAR 0 3
65727: MINUS
65728: PUSH
65729: LD_INT 0
65731: LESS
65732: IFFALSE 65744
// min_y := 0 else
65734: LD_ADDR_VAR 0 7
65738: PUSH
65739: LD_INT 0
65741: ST_TO_ADDR
65742: GO 65760
// min_y := y - r ;
65744: LD_ADDR_VAR 0 7
65748: PUSH
65749: LD_VAR 0 2
65753: PUSH
65754: LD_VAR 0 3
65758: MINUS
65759: ST_TO_ADDR
// max_x := x + r ;
65760: LD_ADDR_VAR 0 9
65764: PUSH
65765: LD_VAR 0 1
65769: PUSH
65770: LD_VAR 0 3
65774: PLUS
65775: ST_TO_ADDR
// max_y := y + r ;
65776: LD_ADDR_VAR 0 10
65780: PUSH
65781: LD_VAR 0 2
65785: PUSH
65786: LD_VAR 0 3
65790: PLUS
65791: ST_TO_ADDR
// for _x = min_x to max_x do
65792: LD_ADDR_VAR 0 5
65796: PUSH
65797: DOUBLE
65798: LD_VAR 0 8
65802: DEC
65803: ST_TO_ADDR
65804: LD_VAR 0 9
65808: PUSH
65809: FOR_TO
65810: IFFALSE 65911
// for _y = min_y to max_y do
65812: LD_ADDR_VAR 0 6
65816: PUSH
65817: DOUBLE
65818: LD_VAR 0 7
65822: DEC
65823: ST_TO_ADDR
65824: LD_VAR 0 10
65828: PUSH
65829: FOR_TO
65830: IFFALSE 65907
// begin if not ValidHex ( _x , _y ) then
65832: LD_VAR 0 5
65836: PPUSH
65837: LD_VAR 0 6
65841: PPUSH
65842: CALL_OW 488
65846: NOT
65847: IFFALSE 65851
// continue ;
65849: GO 65829
// if GetResourceTypeXY ( _x , _y ) then
65851: LD_VAR 0 5
65855: PPUSH
65856: LD_VAR 0 6
65860: PPUSH
65861: CALL_OW 283
65865: IFFALSE 65905
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65867: LD_ADDR_VAR 0 4
65871: PUSH
65872: LD_VAR 0 4
65876: PPUSH
65877: LD_VAR 0 4
65881: PUSH
65882: LD_INT 1
65884: PLUS
65885: PPUSH
65886: LD_VAR 0 5
65890: PUSH
65891: LD_VAR 0 6
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PPUSH
65900: CALL_OW 1
65904: ST_TO_ADDR
// end ;
65905: GO 65829
65907: POP
65908: POP
65909: GO 65809
65911: POP
65912: POP
// end ;
65913: LD_VAR 0 4
65917: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65918: LD_INT 0
65920: PPUSH
65921: PPUSH
65922: PPUSH
65923: PPUSH
65924: PPUSH
65925: PPUSH
65926: PPUSH
65927: PPUSH
// if not units then
65928: LD_VAR 0 1
65932: NOT
65933: IFFALSE 65937
// exit ;
65935: GO 66362
// result := UnitFilter ( units , [ f_ok ] ) ;
65937: LD_ADDR_VAR 0 3
65941: PUSH
65942: LD_VAR 0 1
65946: PPUSH
65947: LD_INT 50
65949: PUSH
65950: EMPTY
65951: LIST
65952: PPUSH
65953: CALL_OW 72
65957: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65958: LD_ADDR_VAR 0 8
65962: PUSH
65963: LD_VAR 0 1
65967: PUSH
65968: LD_INT 1
65970: ARRAY
65971: PPUSH
65972: CALL_OW 255
65976: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
65977: LD_ADDR_VAR 0 10
65981: PUSH
65982: LD_INT 29
65984: PUSH
65985: LD_EXP 56
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: ST_TO_ADDR
// if not result then
65994: LD_VAR 0 3
65998: NOT
65999: IFFALSE 66003
// exit ;
66001: GO 66362
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66003: LD_ADDR_VAR 0 5
66007: PUSH
66008: LD_INT 81
66010: PUSH
66011: LD_VAR 0 8
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 69
66024: ST_TO_ADDR
// for i in result do
66025: LD_ADDR_VAR 0 4
66029: PUSH
66030: LD_VAR 0 3
66034: PUSH
66035: FOR_IN
66036: IFFALSE 66360
// begin tag := GetTag ( i ) + 1 ;
66038: LD_ADDR_VAR 0 9
66042: PUSH
66043: LD_VAR 0 4
66047: PPUSH
66048: CALL_OW 110
66052: PUSH
66053: LD_INT 1
66055: PLUS
66056: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66057: LD_ADDR_VAR 0 7
66061: PUSH
66062: LD_VAR 0 4
66066: PPUSH
66067: CALL_OW 250
66071: PPUSH
66072: LD_VAR 0 4
66076: PPUSH
66077: CALL_OW 251
66081: PPUSH
66082: LD_INT 6
66084: PPUSH
66085: CALL 65660 0 3
66089: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66090: LD_VAR 0 7
66094: PUSH
66095: LD_VAR 0 4
66099: PPUSH
66100: CALL_OW 264
66104: PUSH
66105: LD_VAR 0 10
66109: IN
66110: NOT
66111: AND
66112: IFFALSE 66151
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66114: LD_VAR 0 4
66118: PPUSH
66119: LD_VAR 0 7
66123: PUSH
66124: LD_INT 1
66126: ARRAY
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: PPUSH
66132: LD_VAR 0 7
66136: PUSH
66137: LD_INT 1
66139: ARRAY
66140: PUSH
66141: LD_INT 2
66143: ARRAY
66144: PPUSH
66145: CALL_OW 116
66149: GO 66358
// if path > tag then
66151: LD_VAR 0 2
66155: PUSH
66156: LD_VAR 0 9
66160: GREATER
66161: IFFALSE 66328
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
66163: LD_ADDR_VAR 0 6
66167: PUSH
66168: LD_VAR 0 5
66172: PPUSH
66173: LD_INT 91
66175: PUSH
66176: LD_VAR 0 4
66180: PUSH
66181: LD_INT 12
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: PPUSH
66189: CALL_OW 72
66193: ST_TO_ADDR
// if nearEnemy then
66194: LD_VAR 0 6
66198: IFFALSE 66226
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66200: LD_VAR 0 4
66204: PPUSH
66205: LD_VAR 0 6
66209: PPUSH
66210: LD_VAR 0 4
66214: PPUSH
66215: CALL_OW 74
66219: PPUSH
66220: CALL_OW 115
66224: GO 66326
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66226: LD_VAR 0 4
66230: PPUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_VAR 0 9
66240: ARRAY
66241: PUSH
66242: LD_INT 1
66244: ARRAY
66245: PPUSH
66246: LD_VAR 0 2
66250: PUSH
66251: LD_VAR 0 9
66255: ARRAY
66256: PUSH
66257: LD_INT 2
66259: ARRAY
66260: PPUSH
66261: CALL_OW 297
66265: PUSH
66266: LD_INT 6
66268: GREATER
66269: IFFALSE 66312
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66271: LD_VAR 0 4
66275: PPUSH
66276: LD_VAR 0 2
66280: PUSH
66281: LD_VAR 0 9
66285: ARRAY
66286: PUSH
66287: LD_INT 1
66289: ARRAY
66290: PPUSH
66291: LD_VAR 0 2
66295: PUSH
66296: LD_VAR 0 9
66300: ARRAY
66301: PUSH
66302: LD_INT 2
66304: ARRAY
66305: PPUSH
66306: CALL_OW 114
66310: GO 66326
// SetTag ( i , tag ) ;
66312: LD_VAR 0 4
66316: PPUSH
66317: LD_VAR 0 9
66321: PPUSH
66322: CALL_OW 109
// end else
66326: GO 66358
// if enemy then
66328: LD_VAR 0 5
66332: IFFALSE 66358
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66334: LD_VAR 0 4
66338: PPUSH
66339: LD_VAR 0 5
66343: PPUSH
66344: LD_VAR 0 4
66348: PPUSH
66349: CALL_OW 74
66353: PPUSH
66354: CALL_OW 115
// end ;
66358: GO 66035
66360: POP
66361: POP
// end ;
66362: LD_VAR 0 3
66366: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66367: LD_INT 0
66369: PPUSH
66370: PPUSH
66371: PPUSH
// if not unit or IsInUnit ( unit ) then
66372: LD_VAR 0 1
66376: NOT
66377: PUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: CALL_OW 310
66387: OR
66388: IFFALSE 66392
// exit ;
66390: GO 66483
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66392: LD_ADDR_VAR 0 4
66396: PUSH
66397: LD_VAR 0 1
66401: PPUSH
66402: CALL_OW 250
66406: PPUSH
66407: LD_VAR 0 2
66411: PPUSH
66412: LD_INT 1
66414: PPUSH
66415: CALL_OW 272
66419: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66420: LD_ADDR_VAR 0 5
66424: PUSH
66425: LD_VAR 0 1
66429: PPUSH
66430: CALL_OW 251
66434: PPUSH
66435: LD_VAR 0 2
66439: PPUSH
66440: LD_INT 1
66442: PPUSH
66443: CALL_OW 273
66447: ST_TO_ADDR
// if ValidHex ( x , y ) then
66448: LD_VAR 0 4
66452: PPUSH
66453: LD_VAR 0 5
66457: PPUSH
66458: CALL_OW 488
66462: IFFALSE 66483
// ComTurnXY ( unit , x , y ) ;
66464: LD_VAR 0 1
66468: PPUSH
66469: LD_VAR 0 4
66473: PPUSH
66474: LD_VAR 0 5
66478: PPUSH
66479: CALL_OW 118
// end ;
66483: LD_VAR 0 3
66487: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66488: LD_INT 0
66490: PPUSH
66491: PPUSH
// result := false ;
66492: LD_ADDR_VAR 0 3
66496: PUSH
66497: LD_INT 0
66499: ST_TO_ADDR
// if not units then
66500: LD_VAR 0 2
66504: NOT
66505: IFFALSE 66509
// exit ;
66507: GO 66554
// for i in units do
66509: LD_ADDR_VAR 0 4
66513: PUSH
66514: LD_VAR 0 2
66518: PUSH
66519: FOR_IN
66520: IFFALSE 66552
// if See ( side , i ) then
66522: LD_VAR 0 1
66526: PPUSH
66527: LD_VAR 0 4
66531: PPUSH
66532: CALL_OW 292
66536: IFFALSE 66550
// begin result := true ;
66538: LD_ADDR_VAR 0 3
66542: PUSH
66543: LD_INT 1
66545: ST_TO_ADDR
// exit ;
66546: POP
66547: POP
66548: GO 66554
// end ;
66550: GO 66519
66552: POP
66553: POP
// end ;
66554: LD_VAR 0 3
66558: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66559: LD_INT 0
66561: PPUSH
66562: PPUSH
66563: PPUSH
66564: PPUSH
// if not unit or not points then
66565: LD_VAR 0 1
66569: NOT
66570: PUSH
66571: LD_VAR 0 2
66575: NOT
66576: OR
66577: IFFALSE 66581
// exit ;
66579: GO 66671
// dist := 99999 ;
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_INT 99999
66588: ST_TO_ADDR
// for i in points do
66589: LD_ADDR_VAR 0 4
66593: PUSH
66594: LD_VAR 0 2
66598: PUSH
66599: FOR_IN
66600: IFFALSE 66669
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66602: LD_ADDR_VAR 0 6
66606: PUSH
66607: LD_VAR 0 1
66611: PPUSH
66612: LD_VAR 0 4
66616: PUSH
66617: LD_INT 1
66619: ARRAY
66620: PPUSH
66621: LD_VAR 0 4
66625: PUSH
66626: LD_INT 2
66628: ARRAY
66629: PPUSH
66630: CALL_OW 297
66634: ST_TO_ADDR
// if tmpDist < dist then
66635: LD_VAR 0 6
66639: PUSH
66640: LD_VAR 0 5
66644: LESS
66645: IFFALSE 66667
// begin result := i ;
66647: LD_ADDR_VAR 0 3
66651: PUSH
66652: LD_VAR 0 4
66656: ST_TO_ADDR
// dist := tmpDist ;
66657: LD_ADDR_VAR 0 5
66661: PUSH
66662: LD_VAR 0 6
66666: ST_TO_ADDR
// end ; end ;
66667: GO 66599
66669: POP
66670: POP
// end ; end_of_file
66671: LD_VAR 0 3
66675: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66676: LD_VAR 0 1
66680: PUSH
66681: LD_INT 200
66683: DOUBLE
66684: GREATEREQUAL
66685: IFFALSE 66693
66687: LD_INT 299
66689: DOUBLE
66690: LESSEQUAL
66691: IFTRUE 66695
66693: GO 66727
66695: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66696: LD_VAR 0 1
66700: PPUSH
66701: LD_VAR 0 2
66705: PPUSH
66706: LD_VAR 0 3
66710: PPUSH
66711: LD_VAR 0 4
66715: PPUSH
66716: LD_VAR 0 5
66720: PPUSH
66721: CALL 22702 0 5
66725: GO 66804
66727: LD_INT 300
66729: DOUBLE
66730: GREATEREQUAL
66731: IFFALSE 66739
66733: LD_INT 399
66735: DOUBLE
66736: LESSEQUAL
66737: IFTRUE 66741
66739: GO 66803
66741: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66742: LD_VAR 0 1
66746: PPUSH
66747: LD_VAR 0 2
66751: PPUSH
66752: LD_VAR 0 3
66756: PPUSH
66757: LD_VAR 0 4
66761: PPUSH
66762: LD_VAR 0 5
66766: PPUSH
66767: LD_VAR 0 6
66771: PPUSH
66772: LD_VAR 0 7
66776: PPUSH
66777: LD_VAR 0 8
66781: PPUSH
66782: LD_VAR 0 9
66786: PPUSH
66787: LD_VAR 0 10
66791: PPUSH
66792: LD_VAR 0 11
66796: PPUSH
66797: CALL 20600 0 11
66801: GO 66804
66803: POP
// end ;
66804: PPOPN 11
66806: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66807: LD_VAR 0 1
66811: PPUSH
66812: LD_VAR 0 2
66816: PPUSH
66817: LD_VAR 0 3
66821: PPUSH
66822: LD_VAR 0 4
66826: PPUSH
66827: LD_VAR 0 5
66831: PPUSH
66832: CALL 22694 0 5
// end ; end_of_file
66836: PPOPN 5
66838: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66839: LD_VAR 0 1
66843: PPUSH
66844: LD_VAR 0 2
66848: PPUSH
66849: LD_VAR 0 3
66853: PPUSH
66854: LD_VAR 0 4
66858: PPUSH
66859: LD_VAR 0 5
66863: PPUSH
66864: LD_VAR 0 6
66868: PPUSH
66869: CALL 8795 0 6
// end ;
66873: PPOPN 6
66875: END
