// starting begin PrepareMap ;
   0: CALL 13 0 0
// Main_Variables ;
   4: CALL 136 0 0
// Start_Mission ;
   8: CALL 3470 0 0
// end ;
  12: END
// function PrepareMap ; begin
  13: LD_INT 0
  15: PPUSH
// ResetFog ;
  16: CALL_OW 335
// RandomizeAll ;
  20: CALL_OW 11
// game_difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// Difficulty := game_difficulty ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_EXP 2
  46: ST_TO_ADDR
// ChangeSideFog ( 8 , 6 ) ;
  47: LD_INT 8
  49: PPUSH
  50: LD_INT 6
  52: PPUSH
  53: CALL_OW 343
// PlaceSeeing ( 1 , 1 , 8 , - 37963 ) ;
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 8
  65: PPUSH
  66: LD_INT 37963
  68: NEG
  69: PPUSH
  70: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 8 ) ;
  74: LD_INT 1
  76: PPUSH
  77: LD_INT 1
  79: PPUSH
  80: LD_INT 8
  82: PPUSH
  83: CALL_OW 331
// PlaceCamera ;
  87: CALL 3937 0 0
// PrepareNature ( nature , 4 , 3 , 2 , 1 ) ;
  91: LD_INT 2
  93: PPUSH
  94: LD_INT 4
  96: PPUSH
  97: LD_INT 3
  99: PPUSH
 100: LD_INT 2
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL 7851 0 5
// PrepareComm ;
 110: CALL 8334 0 0
// SetSide ( fort , 6 ) ;
 114: LD_INT 23
 116: PPUSH
 117: LD_INT 6
 119: PPUSH
 120: CALL_OW 235
// CenterNowOnUnits ( fort ) ;
 124: LD_INT 23
 126: PPUSH
 127: CALL_OW 87
// end ;
 131: LD_VAR 0 1
 135: RET
// export game_on , game_difficulty , game_time , game_option , game_end , game_strings ; export leopold , leopold_in_fort , samuel , samuel_in_fort , mortars_in_fort , scout ; export u_mine , u_fac ; export areas ; export skill ; export ar_weapons , ru_weapons , us_weapons ; export arabian_force , russian_force , american_force , arabian_timeing , russian_timeing , american_timeing ; export meeting_start , meeting_arive , meeting_break , meeting_end , meeting_time , russian_timer , fort_destroyed , hero_died , mission_time , cargo_ok , american_hchan , dezert , arabian_attack , russian_attack , american_attack , american_help , american_sib_bomb , russian_trade , heike_dialog1 , heike_dialog2 ; export am_comander , ru_comander , ar_comander ; function Main_Variables ; begin
 136: LD_INT 0
 138: PPUSH
// game_on := false ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// game_time := 0 0$00 ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// game_option := [ 1 ] ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: EMPTY
 164: LIST
 165: ST_TO_ADDR
// game_end := false ;
 166: LD_ADDR_EXP 5
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// game_strings := [ ] ;
 174: LD_ADDR_EXP 6
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// game_time := 0 0$00 ;
 181: LD_ADDR_EXP 3
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mission_time := 0 0$00 ;
 189: LD_ADDR_EXP 34
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// skill := [ 5 , 7 , 9 ] [ game_difficulty ] ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 7
 207: PUSH
 208: LD_INT 9
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 2
 220: ARRAY
 221: ST_TO_ADDR
// areas := [ a_swest , a_nwest , a_neast , a_seast ] ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 5
 229: PUSH
 230: LD_INT 6
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 8
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// meeting_start := false ;
 245: LD_ADDR_EXP 26
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// meeting_arive := false ;
 253: LD_ADDR_EXP 27
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// meeting_break := false ;
 261: LD_ADDR_EXP 28
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// meeting_end := false ;
 269: LD_ADDR_EXP 29
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// meeting_time := [ 4 4$00 , 3 3$40 , 3 3$20 ] [ game_difficulty ] ;
 277: LD_ADDR_EXP 30
 281: PUSH
 282: LD_INT 8400
 284: PUSH
 285: LD_INT 7700
 287: PUSH
 288: LD_INT 7000
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_EXP 2
 300: ARRAY
 301: ST_TO_ADDR
// arabian_force := [ 5 , 6 , 7 ] [ game_difficulty ] ;
 302: LD_ADDR_EXP 20
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: LD_INT 7
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_EXP 2
 325: ARRAY
 326: ST_TO_ADDR
// american_force := [ 6 , 8 , 9 ] [ game_difficulty ] ;
 327: LD_ADDR_EXP 22
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 8
 337: PUSH
 338: LD_INT 9
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_EXP 2
 350: ARRAY
 351: ST_TO_ADDR
// russian_force := [ 7 , 9 , 10 ] [ game_difficulty ] ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_INT 7
 359: PUSH
 360: LD_INT 9
 362: PUSH
 363: LD_INT 10
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_EXP 2
 375: ARRAY
 376: ST_TO_ADDR
// u_mine := false ;
 377: LD_ADDR_EXP 13
 381: PUSH
 382: LD_INT 0
 384: ST_TO_ADDR
// u_fac := false ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// leopold_in_fort := false ;
 393: LD_ADDR_EXP 8
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// samuel_in_fort := false ;
 401: LD_ADDR_EXP 10
 405: PUSH
 406: LD_INT 0
 408: ST_TO_ADDR
// mortars_in_fort := false ;
 409: LD_ADDR_EXP 11
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// fort_destroyed := false ;
 417: LD_ADDR_EXP 32
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// hero_died := false ;
 425: LD_ADDR_EXP 33
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// dezert := false ;
 433: LD_ADDR_EXP 37
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// arabian_attack := false ;
 441: LD_ADDR_EXP 38
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// russian_attack := false ;
 449: LD_ADDR_EXP 39
 453: PUSH
 454: LD_INT 0
 456: ST_TO_ADDR
// american_attack := false ;
 457: LD_ADDR_EXP 40
 461: PUSH
 462: LD_INT 0
 464: ST_TO_ADDR
// american_help := false ;
 465: LD_ADDR_EXP 41
 469: PUSH
 470: LD_INT 0
 472: ST_TO_ADDR
// american_hchan := [ 91 , 81 , 71 ] [ game_difficulty ] ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 91
 480: PUSH
 481: LD_INT 81
 483: PUSH
 484: LD_INT 71
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_EXP 2
 496: ARRAY
 497: ST_TO_ADDR
// american_sib_bomb := false ;
 498: LD_ADDR_EXP 42
 502: PUSH
 503: LD_INT 0
 505: ST_TO_ADDR
// russian_trade := false ;
 506: LD_ADDR_EXP 43
 510: PUSH
 511: LD_INT 0
 513: ST_TO_ADDR
// russian_timer := 5 5$00 ;
 514: LD_ADDR_EXP 31
 518: PUSH
 519: LD_INT 10500
 521: ST_TO_ADDR
// cargo_ok := false ;
 522: LD_ADDR_EXP 35
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// heike_dialog1 := false ;
 530: LD_ADDR_EXP 44
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// heike_dialog2 := false ;
 538: LD_ADDR_EXP 45
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// american_timeing := [ 10 10$00 , 9 9$40 , 9 9$10 ] [ game_difficulty ] ;
 546: LD_ADDR_EXP 25
 550: PUSH
 551: LD_INT 21000
 553: PUSH
 554: LD_INT 20300
 556: PUSH
 557: LD_INT 19250
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: LD_EXP 2
 569: ARRAY
 570: ST_TO_ADDR
// arabian_timeing := [ 8 8$00 , 7 7$10 , 6 6$20 ] [ game_difficulty ] ;
 571: LD_ADDR_EXP 23
 575: PUSH
 576: LD_INT 16800
 578: PUSH
 579: LD_INT 15050
 581: PUSH
 582: LD_INT 13300
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_EXP 2
 594: ARRAY
 595: ST_TO_ADDR
// russian_timeing := [ 11 11$00 , 10 10$30 , 9 9$20 ] [ game_difficulty ] ;
 596: LD_ADDR_EXP 24
 600: PUSH
 601: LD_INT 23100
 603: PUSH
 604: LD_INT 22050
 606: PUSH
 607: LD_INT 19600
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: LD_EXP 2
 619: ARRAY
 620: ST_TO_ADDR
// ar_weapons := [ ar_rocket_launcher , ar_gun , ar_flame_thrower , ar_selfpropelled_bomb , ar_bio_bomb ] ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_INT 28
 628: PUSH
 629: LD_INT 27
 631: PUSH
 632: LD_INT 26
 634: PUSH
 635: LD_INT 29
 637: PUSH
 638: LD_EXP 56
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: ST_TO_ADDR
// us_weapons := [ us_rocket_launcher , us_heavy_gun , us_double_laser ] ;
 650: LD_ADDR_EXP 19
 654: PUSH
 655: LD_INT 7
 657: PUSH
 658: LD_INT 6
 660: PUSH
 661: LD_INT 10
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: ST_TO_ADDR
// ru_weapons := [ ru_rocket_launcher , ru_rocket , ru_heavy_gun ] ;
 669: LD_ADDR_EXP 18
 673: PUSH
 674: LD_INT 45
 676: PUSH
 677: LD_INT 47
 679: PUSH
 680: LD_INT 46
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: ST_TO_ADDR
// end ;
 688: LD_VAR 0 1
 692: RET
// every 0 0$01 trigger game_on do var i , p , x , filter ;
 693: LD_EXP 1
 697: IFFALSE 3467
 699: GO 701
 701: DISABLE
 702: LD_INT 0
 704: PPUSH
 705: PPUSH
 706: PPUSH
 707: PPUSH
// begin enable ;
 708: ENABLE
// Display_Strings := [ #tick , game_time ] ^ game_strings ;
 709: LD_ADDR_OWVAR 47
 713: PUSH
 714: LD_STRING #tick
 716: PUSH
 717: LD_EXP 3
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_EXP 6
 730: ADD
 731: ST_TO_ADDR
// game_time := RefreshTime ( game_time , true ) ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: LD_EXP 3
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: CALL 6937 0 2
 749: ST_TO_ADDR
// if meeting_start and meeting_time > 0 0$00 then
 750: LD_EXP 26
 754: PUSH
 755: LD_EXP 30
 759: PUSH
 760: LD_INT 0
 762: GREATER
 763: AND
 764: IFFALSE 801
// begin game_strings := [ #mtime , meeting_time ] ;
 766: LD_ADDR_EXP 6
 770: PUSH
 771: LD_STRING #mtime
 773: PUSH
 774: LD_EXP 30
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: ST_TO_ADDR
// meeting_time := RefreshTime ( meeting_time , false ) ;
 783: LD_ADDR_EXP 30
 787: PUSH
 788: LD_EXP 30
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL 6937 0 2
 800: ST_TO_ADDR
// end ; if meeting_arive then
 801: LD_EXP 27
 805: IFFALSE 825
// mission_time := RefreshTime ( mission_time , true ) ;
 807: LD_ADDR_EXP 34
 811: PUSH
 812: LD_EXP 34
 816: PPUSH
 817: LD_INT 1
 819: PPUSH
 820: CALL 6937 0 2
 824: ST_TO_ADDR
// if arabian_attack and arabian_timeing > 0 0$00 and meeting_arive then
 825: LD_EXP 38
 829: PUSH
 830: LD_EXP 23
 834: PUSH
 835: LD_INT 0
 837: GREATER
 838: AND
 839: PUSH
 840: LD_EXP 27
 844: AND
 845: IFFALSE 865
// begin arabian_timeing := RefreshTime ( arabian_timeing , false ) ;
 847: LD_ADDR_EXP 23
 851: PUSH
 852: LD_EXP 23
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL 6937 0 2
 864: ST_TO_ADDR
// end ; if russian_attack and russian_timeing > 0 0$00 and meeting_arive then
 865: LD_EXP 39
 869: PUSH
 870: LD_EXP 24
 874: PUSH
 875: LD_INT 0
 877: GREATER
 878: AND
 879: PUSH
 880: LD_EXP 27
 884: AND
 885: IFFALSE 905
// begin russian_timeing := RefreshTime ( russian_timeing , false ) ;
 887: LD_ADDR_EXP 24
 891: PUSH
 892: LD_EXP 24
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL 6937 0 2
 904: ST_TO_ADDR
// end ; if american_attack and american_timeing > 0 0$00 and meeting_arive then
 905: LD_EXP 40
 909: PUSH
 910: LD_EXP 25
 914: PUSH
 915: LD_INT 0
 917: GREATER
 918: AND
 919: PUSH
 920: LD_EXP 27
 924: AND
 925: IFFALSE 945
// begin american_timeing := RefreshTime ( american_timeing , false ) ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 25
 936: PPUSH
 937: LD_INT 0
 939: PPUSH
 940: CALL 6937 0 2
 944: ST_TO_ADDR
// end ; if russian_trade and russian_timer > 0 0$00 then
 945: LD_EXP 43
 949: PUSH
 950: LD_EXP 31
 954: PUSH
 955: LD_INT 0
 957: GREATER
 958: AND
 959: IFFALSE 996
// begin game_strings := [ #rtime , russian_timer ] ;
 961: LD_ADDR_EXP 6
 965: PUSH
 966: LD_STRING #rtime
 968: PUSH
 969: LD_EXP 31
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: ST_TO_ADDR
// russian_timer := RefreshTime ( russian_timer , false ) ;
 978: LD_ADDR_EXP 31
 982: PUSH
 983: LD_EXP 31
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: CALL 6937 0 2
 995: ST_TO_ADDR
// end ; if russian_trade and russian_timer = 0 0$00 or cargo_ok then
 996: LD_EXP 43
1000: PUSH
1001: LD_EXP 31
1005: PUSH
1006: LD_INT 0
1008: EQUAL
1009: AND
1010: PUSH
1011: LD_EXP 35
1015: OR
1016: IFFALSE 1025
// game_strings := [ ] ;
1018: LD_ADDR_EXP 6
1022: PUSH
1023: EMPTY
1024: ST_TO_ADDR
// if dezert = false and tick mod 33600 = 0 then
1025: LD_EXP 37
1029: PUSH
1030: LD_INT 0
1032: EQUAL
1033: PUSH
1034: LD_OWVAR 1
1038: PUSH
1039: LD_INT 33600
1041: MOD
1042: PUSH
1043: LD_INT 0
1045: EQUAL
1046: AND
1047: IFFALSE 1107
// begin p := Rand ( 1 , 5 ) ;
1049: LD_ADDR_VAR 0 2
1053: PUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 5
1059: PPUSH
1060: CALL_OW 12
1064: ST_TO_ADDR
// if p <= [ 4 , 3 , 3 ] [ game_difficulty ] then
1065: LD_VAR 0 2
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 3
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_EXP 2
1088: ARRAY
1089: LESSEQUAL
1090: IFFALSE 1107
// begin RaiseSailEvent ( 92 ) ;
1092: LD_INT 92
1094: PPUSH
1095: CALL_OW 427
// dezert := true ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// end ; end ; if tick mod 8400 = 0 then
1107: LD_OWVAR 1
1111: PUSH
1112: LD_INT 8400
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1128
// RaiseSailEvent ( 101 ) ;
1121: LD_INT 101
1123: PPUSH
1124: CALL_OW 427
// if MineExist ( 8 ) and u_mine = false then
1128: LD_INT 8
1130: PPUSH
1131: CALL 6991 0 1
1135: PUSH
1136: LD_EXP 13
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: IFFALSE 1162
// begin u_mine := true ;
1147: LD_ADDR_EXP 13
1151: PUSH
1152: LD_INT 1
1154: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1m ) ;
1155: LD_STRING DS-T1m
1157: PPUSH
1158: CALL_OW 337
// end ; if FacExist ( 8 ) and u_fac = false then
1162: LD_INT 8
1164: PPUSH
1165: CALL 7053 0 1
1169: PUSH
1170: LD_EXP 14
1174: PUSH
1175: LD_INT 0
1177: EQUAL
1178: AND
1179: IFFALSE 1196
// begin u_fac := true ;
1181: LD_ADDR_EXP 14
1185: PUSH
1186: LD_INT 1
1188: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T1f ) ;
1189: LD_STRING DS-T1f
1191: PPUSH
1192: CALL_OW 337
// end ; if hero_died then
1196: LD_EXP 33
1200: IFFALSE 1209
// YouLost ( DS-h1 ) ;
1202: LD_STRING DS-h1
1204: PPUSH
1205: CALL_OW 104
// if fort_destroyed then
1209: LD_EXP 32
1213: IFFALSE 1222
// YouLost ( DS-h2 ) ;
1215: LD_STRING DS-h2
1217: PPUSH
1218: CALL_OW 104
// if GetDistUnits ( leopold , l_cmndr ) > 6 and meeting_start = false then
1222: LD_EXP 7
1226: PPUSH
1227: LD_EXP 49
1231: PPUSH
1232: CALL_OW 296
1236: PUSH
1237: LD_INT 6
1239: GREATER
1240: PUSH
1241: LD_EXP 26
1245: PUSH
1246: LD_INT 0
1248: EQUAL
1249: AND
1250: IFFALSE 1273
// begin if not HasTask ( leopold ) then
1252: LD_EXP 7
1256: PPUSH
1257: CALL_OW 314
1261: NOT
1262: IFFALSE 1271
// RaiseSailEvent ( 1 ) ;
1264: LD_INT 1
1266: PPUSH
1267: CALL_OW 427
// end else
1271: GO 1290
// if meeting_start = false then
1273: LD_EXP 26
1277: PUSH
1278: LD_INT 0
1280: EQUAL
1281: IFFALSE 1290
// begin RaiseSailEvent ( 2 ) ;
1283: LD_INT 2
1285: PPUSH
1286: CALL_OW 427
// end ; if game_time >= [ 50 50$00 , 62 62$30 , 75 75$00 ] [ game_difficulty ] and meeting_end = false then
1290: LD_EXP 3
1294: PUSH
1295: LD_INT 105000
1297: PUSH
1298: LD_INT 131250
1300: PUSH
1301: LD_INT 157500
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: LD_EXP 2
1313: ARRAY
1314: GREATEREQUAL
1315: PUSH
1316: LD_EXP 29
1320: PUSH
1321: LD_INT 0
1323: EQUAL
1324: AND
1325: IFFALSE 1342
// begin meeting_end := true ;
1327: LD_ADDR_EXP 29
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// RaiseSailEvent ( 200 ) ;
1335: LD_INT 200
1337: PPUSH
1338: CALL_OW 427
// end ; if meeting_time = 0 0$00 and meeting_arive = false then
1342: LD_EXP 30
1346: PUSH
1347: LD_INT 0
1349: EQUAL
1350: PUSH
1351: LD_EXP 27
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: AND
1360: IFFALSE 1384
// begin meeting_arive := true ;
1362: LD_ADDR_EXP 27
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// game_strings := [ ] ;
1370: LD_ADDR_EXP 6
1374: PUSH
1375: EMPTY
1376: ST_TO_ADDR
// RaiseSailEvent ( 10 ) ;
1377: LD_INT 10
1379: PPUSH
1380: CALL_OW 427
// end ; if meeting_arive then
1384: LD_EXP 27
1388: IFFALSE 2187
// begin if arabian_attack = false and tick mod 4200 = 0 then
1390: LD_EXP 38
1394: PUSH
1395: LD_INT 0
1397: EQUAL
1398: PUSH
1399: LD_OWVAR 1
1403: PUSH
1404: LD_INT 4200
1406: MOD
1407: PUSH
1408: LD_INT 0
1410: EQUAL
1411: AND
1412: IFFALSE 1465
// begin p := Rand ( 1 , 100 ) ;
1414: LD_ADDR_VAR 0 2
1418: PUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_INT 100
1424: PPUSH
1425: CALL_OW 12
1429: ST_TO_ADDR
// if p <= [ 80 , 85 , 90 ] [ game_difficulty ] then
1430: LD_VAR 0 2
1434: PUSH
1435: LD_INT 80
1437: PUSH
1438: LD_INT 85
1440: PUSH
1441: LD_INT 90
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 2
1453: ARRAY
1454: LESSEQUAL
1455: IFFALSE 1465
// arabian_attack := true ;
1457: LD_ADDR_EXP 38
1461: PUSH
1462: LD_INT 1
1464: ST_TO_ADDR
// end ; if russian_trade = false and russian_attack = false and tick > 52500 then
1465: LD_EXP 43
1469: PUSH
1470: LD_INT 0
1472: EQUAL
1473: PUSH
1474: LD_EXP 39
1478: PUSH
1479: LD_INT 0
1481: EQUAL
1482: AND
1483: PUSH
1484: LD_OWVAR 1
1488: PUSH
1489: LD_INT 52500
1491: GREATER
1492: AND
1493: IFFALSE 1564
// begin russian_trade = true ;
1495: LD_ADDR_EXP 43
1499: PUSH
1500: LD_INT 1
1502: ST_TO_ADDR
// DialogueOn ;
1503: CALL_OW 6
// SayRadio ( ru_comander , DS-DR-RTr ) ;
1507: LD_EXP 47
1511: PPUSH
1512: LD_STRING DS-DR-RTr
1514: PPUSH
1515: CALL_OW 94
// Say ( l_cmndr , DS-DC-RTr ) ;
1519: LD_EXP 49
1523: PPUSH
1524: LD_STRING DS-DC-RTr
1526: PPUSH
1527: CALL_OW 88
// SayRadio ( ru_comander , DS-DR-RTr2 ) ;
1531: LD_EXP 47
1535: PPUSH
1536: LD_STRING DS-DR-RTr2
1538: PPUSH
1539: CALL_OW 94
// DialogueOff ;
1543: CALL_OW 7
// ChangeMissionObjectives ( DS-T2 ) ;
1547: LD_STRING DS-T2
1549: PPUSH
1550: CALL_OW 337
// SetAreaMapShow ( tree , 1 ) ;
1554: LD_INT 10
1556: PPUSH
1557: LD_INT 1
1559: PPUSH
1560: CALL_OW 424
// end ; if russian_trade and cargo_ok = false and russian_timer > 0 0$00 then
1564: LD_EXP 43
1568: PUSH
1569: LD_EXP 35
1573: PUSH
1574: LD_INT 0
1576: EQUAL
1577: AND
1578: PUSH
1579: LD_EXP 31
1583: PUSH
1584: LD_INT 0
1586: GREATER
1587: AND
1588: IFFALSE 1837
// begin if FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) > 0 then
1590: LD_INT 10
1592: PPUSH
1593: LD_INT 58
1595: PUSH
1596: EMPTY
1597: LIST
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 34
1604: PUSH
1605: LD_INT 32
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 34
1614: PUSH
1615: LD_INT 12
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 3
1629: PUSH
1630: LD_INT 33
1632: PUSH
1633: LD_INT 2
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 70
1653: PUSH
1654: LD_INT 0
1656: GREATER
1657: IFFALSE 1837
// if GetCargo ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] , mat_siberit ) = 100 then
1659: LD_INT 10
1661: PPUSH
1662: LD_INT 58
1664: PUSH
1665: EMPTY
1666: LIST
1667: PUSH
1668: LD_INT 2
1670: PUSH
1671: LD_INT 34
1673: PUSH
1674: LD_INT 32
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 34
1683: PUSH
1684: LD_INT 12
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 3
1698: PUSH
1699: LD_INT 33
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PPUSH
1718: CALL_OW 70
1722: PUSH
1723: LD_INT 1
1725: ARRAY
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: CALL_OW 289
1734: PUSH
1735: LD_INT 100
1737: EQUAL
1738: IFFALSE 1837
// begin cargo_ok := true ;
1740: LD_ADDR_EXP 35
1744: PUSH
1745: LD_INT 1
1747: ST_TO_ADDR
// RemoveUnit ( FilterUnitsInArea ( tree , ( [ [ f_empty ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ) [ 1 ] ) ;
1748: LD_INT 10
1750: PPUSH
1751: LD_INT 58
1753: PUSH
1754: EMPTY
1755: LIST
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 32
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 34
1772: PUSH
1773: LD_INT 12
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 3
1787: PUSH
1788: LD_INT 33
1790: PUSH
1791: LD_INT 2
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PPUSH
1807: CALL_OW 70
1811: PUSH
1812: LD_INT 1
1814: ARRAY
1815: PPUSH
1816: CALL_OW 64
// ChangeMissionObjectives ( DS-T2-out ) ;
1820: LD_STRING DS-T2-out
1822: PPUSH
1823: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1827: LD_INT 10
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL_OW 424
// end ; end ; if russian_attack = false and russian_trade and cargo_ok = false and russian_timer = 0 0$00 then
1837: LD_EXP 39
1841: PUSH
1842: LD_INT 0
1844: EQUAL
1845: PUSH
1846: LD_EXP 43
1850: AND
1851: PUSH
1852: LD_EXP 35
1856: PUSH
1857: LD_INT 0
1859: EQUAL
1860: AND
1861: PUSH
1862: LD_EXP 31
1866: PUSH
1867: LD_INT 0
1869: EQUAL
1870: AND
1871: IFFALSE 1898
// begin russian_attack := true ;
1873: LD_ADDR_EXP 39
1877: PUSH
1878: LD_INT 1
1880: ST_TO_ADDR
// ChangeMissionObjectives ( DS-T2-out ) ;
1881: LD_STRING DS-T2-out
1883: PPUSH
1884: CALL_OW 337
// SetAreaMapShow ( tree , 0 ) ;
1888: LD_INT 10
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 424
// end ; if russian_trade = false and russian_attack = false and american_attack = false and tick mod 21000 = 0 then
1898: LD_EXP 43
1902: PUSH
1903: LD_INT 0
1905: EQUAL
1906: PUSH
1907: LD_EXP 39
1911: PUSH
1912: LD_INT 0
1914: EQUAL
1915: AND
1916: PUSH
1917: LD_EXP 40
1921: PUSH
1922: LD_INT 0
1924: EQUAL
1925: AND
1926: PUSH
1927: LD_OWVAR 1
1931: PUSH
1932: LD_INT 21000
1934: MOD
1935: PUSH
1936: LD_INT 0
1938: EQUAL
1939: AND
1940: IFFALSE 1993
// begin p := Rand ( 1 , 100 ) ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 100
1952: PPUSH
1953: CALL_OW 12
1957: ST_TO_ADDR
// if p <= [ 25 , 35 , 45 ] [ game_difficulty ] then
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 25
1965: PUSH
1966: LD_INT 35
1968: PUSH
1969: LD_INT 45
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_EXP 2
1981: ARRAY
1982: LESSEQUAL
1983: IFFALSE 1993
// russian_attack := true ;
1985: LD_ADDR_EXP 39
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// end ; if american_help = false and american_attack = false and russian_attack = false and tick mod 31500 = 0 then
1993: LD_EXP 41
1997: PUSH
1998: LD_INT 0
2000: EQUAL
2001: PUSH
2002: LD_EXP 40
2006: PUSH
2007: LD_INT 0
2009: EQUAL
2010: AND
2011: PUSH
2012: LD_EXP 39
2016: PUSH
2017: LD_INT 0
2019: EQUAL
2020: AND
2021: PUSH
2022: LD_OWVAR 1
2026: PUSH
2027: LD_INT 31500
2029: MOD
2030: PUSH
2031: LD_INT 0
2033: EQUAL
2034: AND
2035: IFFALSE 2088
// begin p := Rand ( 1 , 100 ) ;
2037: LD_ADDR_VAR 0 2
2041: PUSH
2042: LD_INT 1
2044: PPUSH
2045: LD_INT 100
2047: PPUSH
2048: CALL_OW 12
2052: ST_TO_ADDR
// if p <= [ 22 , 33 , 44 ] [ game_difficulty ] then
2053: LD_VAR 0 2
2057: PUSH
2058: LD_INT 22
2060: PUSH
2061: LD_INT 33
2063: PUSH
2064: LD_INT 44
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_EXP 2
2076: ARRAY
2077: LESSEQUAL
2078: IFFALSE 2088
// american_attack := true ;
2080: LD_ADDR_EXP 40
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// end ; if american_attack = false and russian_attack = false and american_help = false and tick mod 21200 = 0 then
2088: LD_EXP 40
2092: PUSH
2093: LD_INT 0
2095: EQUAL
2096: PUSH
2097: LD_EXP 39
2101: PUSH
2102: LD_INT 0
2104: EQUAL
2105: AND
2106: PUSH
2107: LD_EXP 41
2111: PUSH
2112: LD_INT 0
2114: EQUAL
2115: AND
2116: PUSH
2117: LD_OWVAR 1
2121: PUSH
2122: LD_INT 21200
2124: MOD
2125: PUSH
2126: LD_INT 0
2128: EQUAL
2129: AND
2130: IFFALSE 2187
// begin p := Rand ( 1 , 100 ) ;
2132: LD_ADDR_VAR 0 2
2136: PUSH
2137: LD_INT 1
2139: PPUSH
2140: LD_INT 100
2142: PPUSH
2143: CALL_OW 12
2147: ST_TO_ADDR
// if p <= american_hchan then
2148: LD_VAR 0 2
2152: PUSH
2153: LD_EXP 36
2157: LESSEQUAL
2158: IFFALSE 2187
// begin american_help := true ;
2160: LD_ADDR_EXP 41
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// SayRadio ( am_comander , DS-amhelp ) ;
2168: LD_EXP 46
2172: PPUSH
2173: LD_STRING DS-amhelp
2175: PPUSH
2176: CALL_OW 94
// RaiseSailEvent ( 91 ) ;
2180: LD_INT 91
2182: PPUSH
2183: CALL_OW 427
// end ; end ; end ; if american_attack and american_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 1 ] ) = 0 then
2187: LD_EXP 40
2191: PUSH
2192: LD_EXP 25
2196: PUSH
2197: LD_INT 0
2199: EQUAL
2200: AND
2201: PUSH
2202: LD_INT 22
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PPUSH
2212: CALL_OW 69
2216: PUSH
2217: LD_INT 0
2219: EQUAL
2220: AND
2221: IFFALSE 2323
// begin american_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2223: LD_ADDR_EXP 25
2227: PUSH
2228: LD_INT 35700
2230: PPUSH
2231: LD_INT 42000
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-U ) ;
2239: LD_EXP 12
2243: PPUSH
2244: LD_STRING DS-DZ-U
2246: PPUSH
2247: CALL_OW 94
// Wait ( 0 0$33 ) ;
2251: LD_INT 1155
2253: PPUSH
2254: CALL_OW 67
// x := Rand ( 1 , 2 ) ;
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: LD_INT 1
2265: PPUSH
2266: LD_INT 2
2268: PPUSH
2269: CALL_OW 12
2273: ST_TO_ADDR
// case x of 1 :
2274: LD_VAR 0 3
2278: PUSH
2279: LD_INT 1
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2297
2287: POP
// RaiseSailEvent ( 41 ) ; 2 :
2288: LD_INT 41
2290: PPUSH
2291: CALL_OW 427
2295: GO 2316
2297: LD_INT 2
2299: DOUBLE
2300: EQUAL
2301: IFTRUE 2305
2303: GO 2315
2305: POP
// RaiseSailEvent ( 42 ) ; end ;
2306: LD_INT 42
2308: PPUSH
2309: CALL_OW 427
2313: GO 2316
2315: POP
// RaiseSailEvent ( 42 ) ;
2316: LD_INT 42
2318: PPUSH
2319: CALL_OW 427
// end ; if russian_attack and russian_timeing = 0 0$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 then
2323: LD_EXP 39
2327: PUSH
2328: LD_EXP 24
2332: PUSH
2333: LD_INT 0
2335: EQUAL
2336: AND
2337: PUSH
2338: LD_INT 22
2340: PUSH
2341: LD_INT 3
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: PPUSH
2348: CALL_OW 69
2352: PUSH
2353: LD_INT 0
2355: EQUAL
2356: AND
2357: IFFALSE 2413
// begin russian_timeing := Rand ( 17 17$00 , 20 20$00 ) ;
2359: LD_ADDR_EXP 24
2363: PUSH
2364: LD_INT 35700
2366: PPUSH
2367: LD_INT 42000
2369: PPUSH
2370: CALL_OW 12
2374: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-R ) ;
2375: LD_EXP 12
2379: PPUSH
2380: LD_STRING DS-DZ-R
2382: PPUSH
2383: CALL_OW 94
// Wait ( 0 0$45 ) ;
2387: LD_INT 1575
2389: PPUSH
2390: CALL_OW 67
// SayRadio ( ru_comander , DS-DR-R1 ) ;
2394: LD_EXP 47
2398: PPUSH
2399: LD_STRING DS-DR-R1
2401: PPUSH
2402: CALL_OW 94
// RaiseSailEvent ( 51 ) ;
2406: LD_INT 51
2408: PPUSH
2409: CALL_OW 427
// end ; if mission_time >= 10 10$00 and arabian_force < 10 then
2413: LD_EXP 34
2417: PUSH
2418: LD_INT 21000
2420: GREATEREQUAL
2421: PUSH
2422: LD_EXP 20
2426: PUSH
2427: LD_INT 10
2429: LESS
2430: AND
2431: IFFALSE 2455
// begin mission_time := 0 0$00 ;
2433: LD_ADDR_EXP 34
2437: PUSH
2438: LD_INT 0
2440: ST_TO_ADDR
// arabian_force := arabian_force + 1 ;
2441: LD_ADDR_EXP 20
2445: PUSH
2446: LD_EXP 20
2450: PUSH
2451: LD_INT 1
2453: PLUS
2454: ST_TO_ADDR
// end ; if arabian_timeing = 0 0$00 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] ] ) = 0 then
2455: LD_EXP 23
2459: PUSH
2460: LD_INT 0
2462: EQUAL
2463: PUSH
2464: LD_INT 22
2466: PUSH
2467: LD_INT 2
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 3
2476: PUSH
2477: LD_INT 34
2479: PUSH
2480: LD_INT 31
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PPUSH
2495: CALL_OW 69
2499: PUSH
2500: LD_INT 0
2502: EQUAL
2503: AND
2504: IFFALSE 2702
// begin arabian_timeing := 7 7$30 ;
2506: LD_ADDR_EXP 23
2510: PUSH
2511: LD_INT 15750
2513: ST_TO_ADDR
// x := Rand ( 1 , 3 ) ;
2514: LD_ADDR_VAR 0 3
2518: PUSH
2519: LD_INT 1
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: CALL_OW 12
2529: ST_TO_ADDR
// SayRadio ( scout , DS-DZ-H ) ;
2530: LD_EXP 12
2534: PPUSH
2535: LD_STRING DS-DZ-H
2537: PPUSH
2538: CALL_OW 94
// case x of 1 :
2542: LD_VAR 0 3
2546: PUSH
2547: LD_INT 1
2549: DOUBLE
2550: EQUAL
2551: IFTRUE 2555
2553: GO 2565
2555: POP
// RaiseSailEvent ( 31 ) ; 2 :
2556: LD_INT 31
2558: PPUSH
2559: CALL_OW 427
2563: GO 2602
2565: LD_INT 2
2567: DOUBLE
2568: EQUAL
2569: IFTRUE 2573
2571: GO 2583
2573: POP
// RaiseSailEvent ( 32 ) ; 3 :
2574: LD_INT 32
2576: PPUSH
2577: CALL_OW 427
2581: GO 2602
2583: LD_INT 3
2585: DOUBLE
2586: EQUAL
2587: IFTRUE 2591
2589: GO 2601
2591: POP
// RaiseSailEvent ( 33 ) ; end ;
2592: LD_INT 33
2594: PPUSH
2595: CALL_OW 427
2599: GO 2602
2601: POP
// RaiseSailEvent ( 33 ) ;
2602: LD_INT 33
2604: PPUSH
2605: CALL_OW 427
// if game_difficulty > 1 then
2609: LD_EXP 2
2613: PUSH
2614: LD_INT 1
2616: GREATER
2617: IFFALSE 2626
// RaiseSailEvent ( 33 ) ;
2619: LD_INT 33
2621: PPUSH
2622: CALL_OW 427
// if heike_dialog1 = false then
2626: LD_EXP 44
2630: PUSH
2631: LD_INT 0
2633: EQUAL
2634: IFFALSE 2665
// begin heike_dialog1 := true ;
2636: LD_ADDR_EXP 44
2640: PUSH
2641: LD_INT 1
2643: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2644: LD_INT 105
2646: PPUSH
2647: CALL_OW 67
// SayRadio ( ar_comander , heike1 ) ;
2651: LD_EXP 48
2655: PPUSH
2656: LD_STRING heike1
2658: PPUSH
2659: CALL_OW 94
// end else
2663: GO 2702
// if heike_dialog2 = false then
2665: LD_EXP 45
2669: PUSH
2670: LD_INT 0
2672: EQUAL
2673: IFFALSE 2702
// begin heike_dialog2 := true ;
2675: LD_ADDR_EXP 45
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
2683: LD_INT 105
2685: PPUSH
2686: CALL_OW 67
// SayRadio ( ar_comander , heike2 ) ;
2690: LD_EXP 48
2694: PPUSH
2695: LD_STRING heike2
2697: PPUSH
2698: CALL_OW 94
// end ; end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) > 0 then
2702: LD_INT 22
2704: PUSH
2705: LD_INT 2
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 33
2714: PUSH
2715: LD_INT 2
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PPUSH
2726: CALL_OW 69
2730: PUSH
2731: LD_INT 0
2733: GREATER
2734: IFFALSE 2743
// ConnectWithTower ( 2 ) ;
2736: LD_INT 2
2738: PPUSH
2739: CALL 7101 0 1
// if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2743: LD_INT 22
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 3
2755: PUSH
2756: LD_INT 34
2758: PUSH
2759: LD_INT 31
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: LD_INT 60
2775: PUSH
2776: EMPTY
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: PPUSH
2791: CALL_OW 69
2795: PUSH
2796: LD_INT 0
2798: GREATER
2799: IFFALSE 2945
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2801: LD_ADDR_VAR 0 4
2805: PUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 3
2818: PUSH
2819: LD_INT 34
2821: PUSH
2822: LD_INT 31
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: LD_INT 60
2838: PUSH
2839: EMPTY
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: PUSH
2851: EMPTY
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 2 ] ) , 20 ) ;
2859: LD_ADDR_VAR 0 3
2863: PUSH
2864: LD_INT 81
2866: PUSH
2867: LD_INT 2
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 69
2878: PPUSH
2879: LD_INT 20
2881: PPUSH
2882: CALL 8484 0 2
2886: ST_TO_ADDR
// for i = 1 to filter do
2887: LD_ADDR_VAR 0 1
2891: PUSH
2892: DOUBLE
2893: LD_INT 1
2895: DEC
2896: ST_TO_ADDR
2897: LD_VAR 0 4
2901: PUSH
2902: FOR_TO
2903: IFFALSE 2943
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
2905: LD_VAR 0 4
2909: PUSH
2910: LD_VAR 0 1
2914: ARRAY
2915: PPUSH
2916: LD_VAR 0 3
2920: PPUSH
2921: LD_VAR 0 4
2925: PUSH
2926: LD_VAR 0 1
2930: ARRAY
2931: PPUSH
2932: CALL_OW 74
2936: PPUSH
2937: CALL_OW 115
2941: GO 2902
2943: POP
2944: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
2945: LD_INT 22
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: LD_INT 60
2960: PUSH
2961: EMPTY
2962: LIST
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: PPUSH
2975: CALL_OW 69
2979: PUSH
2980: LD_INT 0
2982: GREATER
2983: IFFALSE 3129
// begin filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 3
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 3
3002: PUSH
3003: LD_INT 34
3005: PUSH
3006: LD_INT 31
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 60
3022: PUSH
3023: EMPTY
3024: LIST
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: PPUSH
3038: CALL_OW 69
3042: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 3 ] ) , 20 ) ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: LD_INT 81
3050: PUSH
3051: LD_INT 3
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PPUSH
3058: CALL_OW 69
3062: PPUSH
3063: LD_INT 20
3065: PPUSH
3066: CALL 8484 0 2
3070: ST_TO_ADDR
// for i = 1 to filter do
3071: LD_ADDR_VAR 0 1
3075: PUSH
3076: DOUBLE
3077: LD_INT 1
3079: DEC
3080: ST_TO_ADDR
3081: LD_VAR 0 4
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3127
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3089: LD_VAR 0 4
3093: PUSH
3094: LD_VAR 0 1
3098: ARRAY
3099: PPUSH
3100: LD_VAR 0 3
3104: PPUSH
3105: LD_VAR 0 4
3109: PUSH
3110: LD_VAR 0 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 74
3120: PPUSH
3121: CALL_OW 115
3125: GO 3086
3127: POP
3128: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
3129: LD_INT 22
3131: PUSH
3132: LD_INT 1
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 3
3141: PUSH
3142: LD_INT 60
3144: PUSH
3145: EMPTY
3146: LIST
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: PPUSH
3159: CALL_OW 69
3163: PUSH
3164: LD_INT 0
3166: GREATER
3167: IFFALSE 3313
// begin filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_weapon , ar_control_tower ] ] , [ f_not , [ f_hastask ] ] ] ] ) ;
3169: LD_ADDR_VAR 0 4
3173: PUSH
3174: LD_INT 22
3176: PUSH
3177: LD_INT 1
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 34
3189: PUSH
3190: LD_INT 31
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PUSH
3201: LD_INT 3
3203: PUSH
3204: LD_INT 60
3206: PUSH
3207: EMPTY
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: PUSH
3219: EMPTY
3220: LIST
3221: PPUSH
3222: CALL_OW 69
3226: ST_TO_ADDR
// x := SpeedFilter ( FilterAllUnits ( [ f_enemy , 1 ] ) , 20 ) ;
3227: LD_ADDR_VAR 0 3
3231: PUSH
3232: LD_INT 81
3234: PUSH
3235: LD_INT 1
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: LD_INT 20
3249: PPUSH
3250: CALL 8484 0 2
3254: ST_TO_ADDR
// for i = 1 to filter do
3255: LD_ADDR_VAR 0 1
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_VAR 0 4
3269: PUSH
3270: FOR_TO
3271: IFFALSE 3311
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( x , filter [ i ] ) ) ;
3273: LD_VAR 0 4
3277: PUSH
3278: LD_VAR 0 1
3282: ARRAY
3283: PPUSH
3284: LD_VAR 0 3
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_VAR 0 1
3298: ARRAY
3299: PPUSH
3300: CALL_OW 74
3304: PPUSH
3305: CALL_OW 115
3309: GO 3270
3311: POP
3312: POP
// end ; if FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) > 0 then
3313: LD_INT 22
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 34
3325: PUSH
3326: LD_EXP 56
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 24
3340: PUSH
3341: LD_INT 700
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: PUSH
3365: LD_INT 0
3367: GREATER
3368: IFFALSE 3467
// begin filter := FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_weapon , ar_bio_bomb ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 34
3387: PUSH
3388: LD_EXP 56
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: LD_INT 24
3402: PUSH
3403: LD_INT 700
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: ST_TO_ADDR
// for i = 1 to filter do
3427: LD_ADDR_VAR 0 1
3431: PUSH
3432: DOUBLE
3433: LD_INT 1
3435: DEC
3436: ST_TO_ADDR
3437: LD_VAR 0 4
3441: PUSH
3442: FOR_TO
3443: IFFALSE 3465
// SetLives ( filter [ i ] , 1 ) ;
3445: LD_VAR 0 4
3449: PUSH
3450: LD_VAR 0 1
3454: ARRAY
3455: PPUSH
3456: LD_INT 1
3458: PPUSH
3459: CALL_OW 234
3463: GO 3442
3465: POP
3466: POP
// end ; end ; end_of_file
3467: PPOPN 4
3469: END
// export function Start_Mission ; begin
3470: LD_INT 0
3472: PPUSH
// PrepareLegion ;
3473: CALL 3514 0 0
// PrepareMeeting ;
3477: CALL 4131 0 0
// case Query ( DS-text-beg ) of 1 :
3481: LD_STRING DS-text-beg
3483: PPUSH
3484: CALL_OW 97
3488: PUSH
3489: LD_INT 1
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3500
3497: POP
// ; end ;
3498: GO 3501
3500: POP
// game_on := true ;
3501: LD_ADDR_EXP 1
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
// end ;
3509: LD_VAR 0 1
3513: RET
// export l_cmndr , l_skill , l_units ; function PrepareLegion ; var i , p , filter , team ; begin
3514: LD_INT 0
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
// uc_side := 8 ;
3521: LD_ADDR_OWVAR 20
3525: PUSH
3526: LD_INT 8
3528: ST_TO_ADDR
// uc_nation := 2 ;
3529: LD_ADDR_OWVAR 21
3533: PUSH
3534: LD_INT 2
3536: ST_TO_ADDR
// l_skill := [ 7 , 6 , 5 ] [ difficulty ] ;
3537: LD_ADDR_EXP 50
3541: PUSH
3542: LD_INT 7
3544: PUSH
3545: LD_INT 6
3547: PUSH
3548: LD_INT 5
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: ST_TO_ADDR
// l_units := [ 8 , 7 , 6 ] [ difficulty ] ;
3562: LD_ADDR_EXP 51
3566: PUSH
3567: LD_INT 8
3569: PUSH
3570: LD_INT 7
3572: PUSH
3573: LD_INT 6
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_OWVAR 67
3585: ARRAY
3586: ST_TO_ADDR
// filter := [ ] ;
3587: LD_ADDR_VAR 0 4
3591: PUSH
3592: EMPTY
3593: ST_TO_ADDR
// hc_gallery := desert ;
3594: LD_ADDR_OWVAR 33
3598: PUSH
3599: LD_STRING desert
3601: ST_TO_ADDR
// hc_face_number := 1 ;
3602: LD_ADDR_OWVAR 34
3606: PUSH
3607: LD_INT 1
3609: ST_TO_ADDR
// hc_skills := [ l_skill + 2 , l_skill - 1 , l_skill , l_skill + 1 ] ;
3610: LD_ADDR_OWVAR 31
3614: PUSH
3615: LD_EXP 50
3619: PUSH
3620: LD_INT 2
3622: PLUS
3623: PUSH
3624: LD_EXP 50
3628: PUSH
3629: LD_INT 1
3631: MINUS
3632: PUSH
3633: LD_EXP 50
3637: PUSH
3638: LD_EXP 50
3642: PUSH
3643: LD_INT 1
3645: PLUS
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: ST_TO_ADDR
// hc_sex := sex_male ;
3653: LD_ADDR_OWVAR 27
3657: PUSH
3658: LD_INT 1
3660: ST_TO_ADDR
// hc_name := Henri Ruotz ;
3661: LD_ADDR_OWVAR 26
3665: PUSH
3666: LD_STRING Henri Ruotz
3668: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3669: LD_ADDR_OWVAR 29
3673: PUSH
3674: LD_INT 10
3676: PUSH
3677: LD_INT 10
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: ST_TO_ADDR
// hc_class := 1 ;
3684: LD_ADDR_OWVAR 28
3688: PUSH
3689: LD_INT 1
3691: ST_TO_ADDR
// hc_importance := 100 ;
3692: LD_ADDR_OWVAR 32
3696: PUSH
3697: LD_INT 100
3699: ST_TO_ADDR
// l_cmndr := CreateHuman ;
3700: LD_ADDR_EXP 49
3704: PUSH
3705: CALL_OW 44
3709: ST_TO_ADDR
// hc_importance := 0 ;
3710: LD_ADDR_OWVAR 32
3714: PUSH
3715: LD_INT 0
3717: ST_TO_ADDR
// scout := PrepareHuman ( sex_male , 1 , 0 ) ;
3718: LD_ADDR_EXP 12
3722: PUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_INT 0
3731: PPUSH
3732: CALL_OW 380
3736: ST_TO_ADDR
// for i = 1 to 4 do
3737: LD_ADDR_VAR 0 2
3741: PUSH
3742: DOUBLE
3743: LD_INT 1
3745: DEC
3746: ST_TO_ADDR
3747: LD_INT 4
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3801
// for p = 1 to 6 do
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_INT 6
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3797
// filter := filter ^ CreateHumanWithClass ( i , l_skill ) ;
3769: LD_ADDR_VAR 0 4
3773: PUSH
3774: LD_VAR 0 4
3778: PUSH
3779: LD_VAR 0 2
3783: PPUSH
3784: LD_EXP 50
3788: PPUSH
3789: CALL 7285 0 2
3793: ADD
3794: ST_TO_ADDR
3795: GO 3766
3797: POP
3798: POP
3799: GO 3750
3801: POP
3802: POP
// team := CharacterSelection ( text , l_units , l_units , [ sel_change_class , l_cmndr , sel_changeable , sel_not_hired ] ^ filter , [ class_soldier , class_mechanic , class_engineer , class_scientistic , class_mortar ] ) ;
3803: LD_ADDR_VAR 0 5
3807: PUSH
3808: LD_STRING text
3810: PPUSH
3811: LD_EXP 51
3815: PPUSH
3816: LD_EXP 51
3820: PPUSH
3821: LD_INT -5
3823: PUSH
3824: LD_EXP 49
3828: PUSH
3829: LD_INT -3
3831: PUSH
3832: LD_INT -2
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: LD_VAR 0 4
3845: ADD
3846: PPUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 3
3852: PUSH
3853: LD_INT 2
3855: PUSH
3856: LD_INT 4
3858: PUSH
3859: LD_INT 8
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PPUSH
3869: CALL_OW 42
3873: ST_TO_ADDR
// for i = 1 to l_units do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_EXP 51
3888: PUSH
3889: FOR_TO
3890: IFFALSE 3915
// PlaceUnitArea ( team [ i ] , legion_spawn , false ) ;
3892: LD_VAR 0 5
3896: PUSH
3897: LD_VAR 0 2
3901: ARRAY
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 49
3913: GO 3889
3915: POP
3916: POP
// PlaceUnitArea ( l_cmndr , legion_spawn , false ) ;
3917: LD_EXP 49
3921: PPUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: CALL_OW 49
// end ;
3932: LD_VAR 0 1
3936: RET
// export function PlaceCamera ; begin
3937: LD_INT 0
3939: PPUSH
// PlaceSeeing ( 46 , 48 , 8 , 10 ) ;
3940: LD_INT 46
3942: PPUSH
3943: LD_INT 48
3945: PPUSH
3946: LD_INT 8
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 330
// PlaceSeeing ( 58 , 66 , 8 , 10 ) ;
3956: LD_INT 58
3958: PPUSH
3959: LD_INT 66
3961: PPUSH
3962: LD_INT 8
3964: PPUSH
3965: LD_INT 10
3967: PPUSH
3968: CALL_OW 330
// PlaceSeeing ( 82 , 82 , 8 , 10 ) ;
3972: LD_INT 82
3974: PPUSH
3975: LD_INT 82
3977: PPUSH
3978: LD_INT 8
3980: PPUSH
3981: LD_INT 10
3983: PPUSH
3984: CALL_OW 330
// PlaceSeeing ( 107 , 79 , 8 , 10 ) ;
3988: LD_INT 107
3990: PPUSH
3991: LD_INT 79
3993: PPUSH
3994: LD_INT 8
3996: PPUSH
3997: LD_INT 10
3999: PPUSH
4000: CALL_OW 330
// PlaceSeeing ( 101 , 57 , 8 , 10 ) ;
4004: LD_INT 101
4006: PPUSH
4007: LD_INT 57
4009: PPUSH
4010: LD_INT 8
4012: PPUSH
4013: LD_INT 10
4015: PPUSH
4016: CALL_OW 330
// PlaceSeeing ( 85 , 32 , 8 , 10 ) ;
4020: LD_INT 85
4022: PPUSH
4023: LD_INT 32
4025: PPUSH
4026: LD_INT 8
4028: PPUSH
4029: LD_INT 10
4031: PPUSH
4032: CALL_OW 330
// PlaceSeeing ( 108 , 72 , 8 , 10 ) ;
4036: LD_INT 108
4038: PPUSH
4039: LD_INT 72
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 330
// PlaceSeeing ( 124 , 74 , 8 , 10 ) ;
4052: LD_INT 124
4054: PPUSH
4055: LD_INT 74
4057: PPUSH
4058: LD_INT 8
4060: PPUSH
4061: LD_INT 10
4063: PPUSH
4064: CALL_OW 330
// PlaceSeeing ( 67 , 33 , 8 , 20 ) ;
4068: LD_INT 67
4070: PPUSH
4071: LD_INT 33
4073: PPUSH
4074: LD_INT 8
4076: PPUSH
4077: LD_INT 20
4079: PPUSH
4080: CALL_OW 330
// RemoveSeeing ( 67 , 33 , 8 ) ;
4084: LD_INT 67
4086: PPUSH
4087: LD_INT 33
4089: PPUSH
4090: LD_INT 8
4092: PPUSH
4093: CALL_OW 331
// PlaceSeeing ( 94 , 84 , 8 , 20 ) ;
4097: LD_INT 94
4099: PPUSH
4100: LD_INT 84
4102: PPUSH
4103: LD_INT 8
4105: PPUSH
4106: LD_INT 20
4108: PPUSH
4109: CALL_OW 330
// RemoveSeeing ( 94 , 84 , 8 ) ;
4113: LD_INT 94
4115: PPUSH
4116: LD_INT 84
4118: PPUSH
4119: LD_INT 8
4121: PPUSH
4122: CALL_OW 331
// end ;
4126: LD_VAR 0 1
4130: RET
// export function PrepareMeeting ; begin
4131: LD_INT 0
4133: PPUSH
// uc_side := 6 ;
4134: LD_ADDR_OWVAR 20
4138: PUSH
4139: LD_INT 6
4141: ST_TO_ADDR
// hc_gallery := desert ;
4142: LD_ADDR_OWVAR 33
4146: PUSH
4147: LD_STRING desert
4149: ST_TO_ADDR
// hc_face_number := 2 ;
4150: LD_ADDR_OWVAR 34
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// hc_name := Leopold Drass ;
4158: LD_ADDR_OWVAR 26
4162: PUSH
4163: LD_STRING Leopold Drass
4165: ST_TO_ADDR
// hc_class := 1 ;
4166: LD_ADDR_OWVAR 28
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// hc_sex := sex_male ;
4174: LD_ADDR_OWVAR 27
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4182: LD_ADDR_OWVAR 29
4186: PUSH
4187: LD_INT 12
4189: PUSH
4190: LD_INT 12
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: ST_TO_ADDR
// Leopold := CreateHuman ;
4197: LD_ADDR_EXP 7
4201: PUSH
4202: CALL_OW 44
4206: ST_TO_ADDR
// PlaceUnitArea ( Leopold , north_spawn , false ) ;
4207: LD_EXP 7
4211: PPUSH
4212: LD_INT 3
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// end ; end_of_file
4222: LD_VAR 0 1
4226: RET
// on SailEvent ( num ) do var i , filter , un , p , area ;
4227: LD_INT 0
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
4233: PPUSH
// begin case num of 1 :
4234: LD_VAR 0 1
4238: PUSH
4239: LD_INT 1
4241: DOUBLE
4242: EQUAL
4243: IFTRUE 4247
4245: GO 4279
4247: POP
// begin ComMoveXY ( leopold , GetX ( l_cmndr ) , GetY ( l_cmndr ) ) ;
4248: LD_EXP 7
4252: PPUSH
4253: LD_EXP 49
4257: PPUSH
4258: CALL_OW 250
4262: PPUSH
4263: LD_EXP 49
4267: PPUSH
4268: CALL_OW 251
4272: PPUSH
4273: CALL_OW 111
// end ; 2 :
4277: GO 6697
4279: LD_INT 2
4281: DOUBLE
4282: EQUAL
4283: IFTRUE 4287
4285: GO 4396
4287: POP
// begin InGameOn ;
4288: CALL_OW 8
// meeting_start := true ;
4292: LD_ADDR_EXP 26
4296: PUSH
4297: LD_INT 1
4299: ST_TO_ADDR
// ComTurnUnit ( leopold , l_cmndr ) ;
4300: LD_EXP 7
4304: PPUSH
4305: LD_EXP 49
4309: PPUSH
4310: CALL_OW 119
// ComTurnUnit ( l_cmndr , leopold ) ;
4314: LD_EXP 49
4318: PPUSH
4319: LD_EXP 7
4323: PPUSH
4324: CALL_OW 119
// Say ( leopold , DS-DL-1 ) ;
4328: LD_EXP 7
4332: PPUSH
4333: LD_STRING DS-DL-1
4335: PPUSH
4336: CALL_OW 88
// Say ( l_cmndr , DS-DC-1 ) ;
4340: LD_EXP 49
4344: PPUSH
4345: LD_STRING DS-DC-1
4347: PPUSH
4348: CALL_OW 88
// Say ( leopold , DS-DL-2 ) ;
4352: LD_EXP 7
4356: PPUSH
4357: LD_STRING DS-DL-2
4359: PPUSH
4360: CALL_OW 88
// ComEnterUnit ( leopold , fort ) ;
4364: LD_EXP 7
4368: PPUSH
4369: LD_INT 23
4371: PPUSH
4372: CALL_OW 120
// InGameOff ;
4376: CALL_OW 9
// Wait ( 0 0$01 ) ;
4380: LD_INT 35
4382: PPUSH
4383: CALL_OW 67
// ChangeMissionObjectives ( DS-T1 ) ;
4387: LD_STRING DS-T1
4389: PPUSH
4390: CALL_OW 337
// end ; 10 :
4394: GO 6697
4396: LD_INT 10
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4616
4404: POP
// begin uc_side := 6 ;
4405: LD_ADDR_OWVAR 20
4409: PUSH
4410: LD_INT 6
4412: ST_TO_ADDR
// uc_nation := 2 ;
4413: LD_ADDR_OWVAR 21
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// hc_gallery :=  ;
4421: LD_ADDR_OWVAR 33
4425: PUSH
4426: LD_STRING 
4428: ST_TO_ADDR
// hc_skills := [ skill + 2 , skill - 1 , skill , skill + 1 ] ;
4429: LD_ADDR_OWVAR 31
4433: PUSH
4434: LD_EXP 16
4438: PUSH
4439: LD_INT 2
4441: PLUS
4442: PUSH
4443: LD_EXP 16
4447: PUSH
4448: LD_INT 1
4450: MINUS
4451: PUSH
4452: LD_EXP 16
4456: PUSH
4457: LD_EXP 16
4461: PUSH
4462: LD_INT 1
4464: PLUS
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: ST_TO_ADDR
// hc_sex := sex_male ;
4472: LD_ADDR_OWVAR 27
4476: PUSH
4477: LD_INT 1
4479: ST_TO_ADDR
// hc_name := Samuel van Horn ;
4480: LD_ADDR_OWVAR 26
4484: PUSH
4485: LD_STRING Samuel van Horn
4487: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4488: LD_ADDR_OWVAR 29
4492: PUSH
4493: LD_INT 11
4495: PUSH
4496: LD_INT 10
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: ST_TO_ADDR
// hc_class := 1 ;
4503: LD_ADDR_OWVAR 28
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// samuel := CreateHuman ;
4511: LD_ADDR_EXP 9
4515: PUSH
4516: CALL_OW 44
4520: ST_TO_ADDR
// PlaceUnitArea ( samuel , south_spawn , false ) ;
4521: LD_EXP 9
4525: PPUSH
4526: LD_INT 4
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 49
// for i = 1 to 3 do
4536: LD_ADDR_VAR 0 2
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_INT 3
4548: PUSH
4549: FOR_TO
4550: IFFALSE 4577
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , skill ) , south_spawn , false ) ;
4552: LD_INT 8
4554: PPUSH
4555: LD_EXP 16
4559: PPUSH
4560: CALL 7285 0 2
4564: PPUSH
4565: LD_INT 4
4567: PPUSH
4568: LD_INT 0
4570: PPUSH
4571: CALL_OW 49
4575: GO 4549
4577: POP
4578: POP
// ComEnterUnit ( FilterAllUnits ( [ f_side , 6 ] ) diff [ leopold , fort ] , fort ) ;
4579: LD_INT 22
4581: PUSH
4582: LD_INT 6
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 69
4593: PUSH
4594: LD_EXP 7
4598: PUSH
4599: LD_INT 23
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: DIFF
4606: PPUSH
4607: LD_INT 23
4609: PPUSH
4610: CALL_OW 120
// end ; 3 :
4614: GO 6697
4616: LD_INT 3
4618: DOUBLE
4619: EQUAL
4620: IFTRUE 4624
4622: GO 4635
4624: POP
// begin arabian_attack := true ;
4625: LD_ADDR_EXP 38
4629: PUSH
4630: LD_INT 1
4632: ST_TO_ADDR
// end ; 4 :
4633: GO 6697
4635: LD_INT 4
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4654
4643: POP
// begin american_attack := true ;
4644: LD_ADDR_EXP 40
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// end ; 5 :
4652: GO 6697
4654: LD_INT 5
4656: DOUBLE
4657: EQUAL
4658: IFTRUE 4662
4660: GO 4673
4662: POP
// begin russian_attack := true ;
4663: LD_ADDR_EXP 39
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ; 31 :
4671: GO 6697
4673: LD_INT 31
4675: DOUBLE
4676: EQUAL
4677: IFTRUE 4681
4679: GO 4956
4681: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4682: LD_ADDR_VAR 0 6
4686: PUSH
4687: LD_EXP 15
4691: PUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_EXP 15
4699: PPUSH
4700: CALL_OW 12
4704: ARRAY
4705: ST_TO_ADDR
// uc_side := 2 ;
4706: LD_ADDR_OWVAR 20
4710: PUSH
4711: LD_INT 2
4713: ST_TO_ADDR
// uc_nation := 2 ;
4714: LD_ADDR_OWVAR 21
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
// for i = 1 to arabian_force do
4722: LD_ADDR_VAR 0 2
4726: PUSH
4727: DOUBLE
4728: LD_INT 1
4730: DEC
4731: ST_TO_ADDR
4732: LD_EXP 20
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4817
// begin vc_chassis := ar_half_tracked ;
4740: LD_ADDR_OWVAR 37
4744: PUSH
4745: LD_INT 14
4747: ST_TO_ADDR
// vc_engine := engine_siberite ;
4748: LD_ADDR_OWVAR 39
4752: PUSH
4753: LD_INT 3
4755: ST_TO_ADDR
// vc_control := control_remote ;
4756: LD_ADDR_OWVAR 38
4760: PUSH
4761: LD_INT 2
4763: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
4764: LD_ADDR_OWVAR 40
4768: PUSH
4769: LD_EXP 17
4773: PUSH
4774: LD_INT 1
4776: PPUSH
4777: LD_EXP 17
4781: PPUSH
4782: CALL_OW 12
4786: ARRAY
4787: ST_TO_ADDR
// un := CreateVehicle ;
4788: LD_ADDR_VAR 0 4
4792: PUSH
4793: CALL_OW 45
4797: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4798: LD_VAR 0 4
4802: PPUSH
4803: LD_VAR 0 6
4807: PPUSH
4808: LD_INT 0
4810: PPUSH
4811: CALL_OW 49
// end ;
4815: GO 4737
4817: POP
4818: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
4819: LD_INT 22
4821: PUSH
4822: LD_INT 2
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 33
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 69
4847: PUSH
4848: LD_INT 2
4850: LESS
4851: IFFALSE 4954
// for i = 1 to 2 do
4853: LD_ADDR_VAR 0 2
4857: PUSH
4858: DOUBLE
4859: LD_INT 1
4861: DEC
4862: ST_TO_ADDR
4863: LD_INT 2
4865: PUSH
4866: FOR_TO
4867: IFFALSE 4952
// begin vc_chassis := ar_half_tracked ;
4869: LD_ADDR_OWVAR 37
4873: PUSH
4874: LD_INT 14
4876: ST_TO_ADDR
// vc_engine := engine_siberite ;
4877: LD_ADDR_OWVAR 39
4881: PUSH
4882: LD_INT 3
4884: ST_TO_ADDR
// vc_control := control_manual ;
4885: LD_ADDR_OWVAR 38
4889: PUSH
4890: LD_INT 1
4892: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4893: LD_ADDR_OWVAR 40
4897: PUSH
4898: LD_INT 31
4900: ST_TO_ADDR
// un := CreateVehicle ;
4901: LD_ADDR_VAR 0 4
4905: PUSH
4906: CALL_OW 45
4910: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4911: LD_VAR 0 4
4915: PPUSH
4916: LD_VAR 0 6
4920: PPUSH
4921: LD_INT 0
4923: PPUSH
4924: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
4928: LD_INT 3
4930: PPUSH
4931: LD_EXP 16
4935: PPUSH
4936: CALL 7285 0 2
4940: PPUSH
4941: LD_VAR 0 4
4945: PPUSH
4946: CALL_OW 52
// end ;
4950: GO 4866
4952: POP
4953: POP
// end ; 32 :
4954: GO 6697
4956: LD_INT 32
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 5337
4964: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
4965: LD_ADDR_VAR 0 6
4969: PUSH
4970: LD_EXP 15
4974: PUSH
4975: LD_INT 1
4977: PPUSH
4978: LD_EXP 15
4982: PPUSH
4983: CALL_OW 12
4987: ARRAY
4988: ST_TO_ADDR
// uc_side := 2 ;
4989: LD_ADDR_OWVAR 20
4993: PUSH
4994: LD_INT 2
4996: ST_TO_ADDR
// uc_nation := 2 ;
4997: LD_ADDR_OWVAR 21
5001: PUSH
5002: LD_INT 2
5004: ST_TO_ADDR
// for i = 1 to ( arabian_force - 2 ) do
5005: LD_ADDR_VAR 0 2
5009: PUSH
5010: DOUBLE
5011: LD_INT 1
5013: DEC
5014: ST_TO_ADDR
5015: LD_EXP 20
5019: PUSH
5020: LD_INT 2
5022: MINUS
5023: PUSH
5024: FOR_TO
5025: IFFALSE 5108
// begin vc_chassis := ar_half_tracked ;
5027: LD_ADDR_OWVAR 37
5031: PUSH
5032: LD_INT 14
5034: ST_TO_ADDR
// vc_engine := engine_siberite ;
5035: LD_ADDR_OWVAR 39
5039: PUSH
5040: LD_INT 3
5042: ST_TO_ADDR
// vc_control := control_remote ;
5043: LD_ADDR_OWVAR 38
5047: PUSH
5048: LD_INT 2
5050: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 1 ) ] ;
5051: LD_ADDR_OWVAR 40
5055: PUSH
5056: LD_EXP 17
5060: PUSH
5061: LD_INT 1
5063: PPUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_INT 1
5071: MINUS
5072: PPUSH
5073: CALL_OW 12
5077: ARRAY
5078: ST_TO_ADDR
// un := CreateVehicle ;
5079: LD_ADDR_VAR 0 4
5083: PUSH
5084: CALL_OW 45
5088: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5089: LD_VAR 0 4
5093: PPUSH
5094: LD_VAR 0 6
5098: PPUSH
5099: LD_INT 0
5101: PPUSH
5102: CALL_OW 49
// end ;
5106: GO 5024
5108: POP
5109: POP
// for i = 1 to Rand ( 0 , 1 ) + [ 3 , 4 , 5 ] [ game_difficulty ] do
5110: LD_ADDR_VAR 0 2
5114: PUSH
5115: DOUBLE
5116: LD_INT 1
5118: DEC
5119: ST_TO_ADDR
5120: LD_INT 0
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL_OW 12
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 4
5136: PUSH
5137: LD_INT 5
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: PUSH
5145: LD_EXP 2
5149: ARRAY
5150: PLUS
5151: PUSH
5152: FOR_TO
5153: IFFALSE 5190
// begin uc_nation := 0 ;
5155: LD_ADDR_OWVAR 21
5159: PUSH
5160: LD_INT 0
5162: ST_TO_ADDR
// PlaceUnitArea ( CreateHumanWithClass ( 17 , skill ) , area , false ) ;
5163: LD_INT 17
5165: PPUSH
5166: LD_EXP 16
5170: PPUSH
5171: CALL 7285 0 2
5175: PPUSH
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 0
5183: PPUSH
5184: CALL_OW 49
// end ;
5188: GO 5152
5190: POP
5191: POP
// uc_nation := 2 ;
5192: LD_ADDR_OWVAR 21
5196: PUSH
5197: LD_INT 2
5199: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) < 2 then
5200: LD_INT 22
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 33
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PUSH
5229: LD_INT 2
5231: LESS
5232: IFFALSE 5335
// for i = 1 to 2 do
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_INT 2
5246: PUSH
5247: FOR_TO
5248: IFFALSE 5333
// begin vc_chassis := ar_half_tracked ;
5250: LD_ADDR_OWVAR 37
5254: PUSH
5255: LD_INT 14
5257: ST_TO_ADDR
// vc_engine := engine_siberite ;
5258: LD_ADDR_OWVAR 39
5262: PUSH
5263: LD_INT 3
5265: ST_TO_ADDR
// vc_control := control_manual ;
5266: LD_ADDR_OWVAR 38
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5274: LD_ADDR_OWVAR 40
5278: PUSH
5279: LD_INT 31
5281: ST_TO_ADDR
// un := CreateVehicle ;
5282: LD_ADDR_VAR 0 4
5286: PUSH
5287: CALL_OW 45
5291: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5292: LD_VAR 0 4
5296: PPUSH
5297: LD_VAR 0 6
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5309: LD_INT 3
5311: PPUSH
5312: LD_EXP 16
5316: PPUSH
5317: CALL 7285 0 2
5321: PPUSH
5322: LD_VAR 0 4
5326: PPUSH
5327: CALL_OW 52
// end ;
5331: GO 5247
5333: POP
5334: POP
// end ; 33 :
5335: GO 6697
5337: LD_INT 33
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5616
5345: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5346: LD_ADDR_VAR 0 6
5350: PUSH
5351: LD_EXP 15
5355: PUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 15
5363: PPUSH
5364: CALL_OW 12
5368: ARRAY
5369: ST_TO_ADDR
// uc_side := 2 ;
5370: LD_ADDR_OWVAR 20
5374: PUSH
5375: LD_INT 2
5377: ST_TO_ADDR
// uc_nation := 2 ;
5378: LD_ADDR_OWVAR 21
5382: PUSH
5383: LD_INT 2
5385: ST_TO_ADDR
// for i = 1 to ( arabian_force / 2 ) do
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: DOUBLE
5392: LD_INT 1
5394: DEC
5395: ST_TO_ADDR
5396: LD_EXP 20
5400: PUSH
5401: LD_INT 2
5403: DIVREAL
5404: PUSH
5405: FOR_TO
5406: IFFALSE 5511
// begin vc_chassis := ar_half_tracked ;
5408: LD_ADDR_OWVAR 37
5412: PUSH
5413: LD_INT 14
5415: ST_TO_ADDR
// vc_engine := engine_siberite ;
5416: LD_ADDR_OWVAR 39
5420: PUSH
5421: LD_INT 3
5423: ST_TO_ADDR
// vc_control := control_manual ;
5424: LD_ADDR_OWVAR 38
5428: PUSH
5429: LD_INT 1
5431: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 1 , ar_weapons - 2 ) ] ;
5432: LD_ADDR_OWVAR 40
5436: PUSH
5437: LD_EXP 17
5441: PUSH
5442: LD_INT 1
5444: PPUSH
5445: LD_EXP 17
5449: PUSH
5450: LD_INT 2
5452: MINUS
5453: PPUSH
5454: CALL_OW 12
5458: ARRAY
5459: ST_TO_ADDR
// un := CreateVehicle ;
5460: LD_ADDR_VAR 0 4
5464: PUSH
5465: CALL_OW 45
5469: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_VAR 0 6
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skill ) , un ) ;
5487: LD_INT 3
5489: PPUSH
5490: LD_EXP 16
5494: PPUSH
5495: CALL 7285 0 2
5499: PPUSH
5500: LD_VAR 0 4
5504: PPUSH
5505: CALL_OW 52
// end ;
5509: GO 5405
5511: POP
5512: POP
// for i = 1 to ( arabian_force / 2 ) do
5513: LD_ADDR_VAR 0 2
5517: PUSH
5518: DOUBLE
5519: LD_INT 1
5521: DEC
5522: ST_TO_ADDR
5523: LD_EXP 20
5527: PUSH
5528: LD_INT 2
5530: DIVREAL
5531: PUSH
5532: FOR_TO
5533: IFFALSE 5612
// begin vc_chassis := ar_half_tracked ;
5535: LD_ADDR_OWVAR 37
5539: PUSH
5540: LD_INT 14
5542: ST_TO_ADDR
// vc_engine := engine_siberite ;
5543: LD_ADDR_OWVAR 39
5547: PUSH
5548: LD_INT 3
5550: ST_TO_ADDR
// vc_control := control_apeman ;
5551: LD_ADDR_OWVAR 38
5555: PUSH
5556: LD_INT 5
5558: ST_TO_ADDR
// vc_weapon := ar_weapons [ Rand ( 2 , ar_weapons ) ] ;
5559: LD_ADDR_OWVAR 40
5563: PUSH
5564: LD_EXP 17
5568: PUSH
5569: LD_INT 2
5571: PPUSH
5572: LD_EXP 17
5576: PPUSH
5577: CALL_OW 12
5581: ARRAY
5582: ST_TO_ADDR
// un := CreateVehicle ;
5583: LD_ADDR_VAR 0 4
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5593: LD_VAR 0 4
5597: PPUSH
5598: LD_VAR 0 6
5602: PPUSH
5603: LD_INT 0
5605: PPUSH
5606: CALL_OW 49
// end ;
5610: GO 5532
5612: POP
5613: POP
// end ; 41 :
5614: GO 6697
5616: LD_INT 41
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5768
5624: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5625: LD_ADDR_VAR 0 6
5629: PUSH
5630: LD_EXP 15
5634: PUSH
5635: LD_INT 1
5637: PPUSH
5638: LD_EXP 15
5642: PPUSH
5643: CALL_OW 12
5647: ARRAY
5648: ST_TO_ADDR
// uc_side := 1 ;
5649: LD_ADDR_OWVAR 20
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// uc_nation := 1 ;
5657: LD_ADDR_OWVAR 21
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// for i = 1 to american_force do
5665: LD_ADDR_VAR 0 2
5669: PUSH
5670: DOUBLE
5671: LD_INT 1
5673: DEC
5674: ST_TO_ADDR
5675: LD_EXP 22
5679: PUSH
5680: FOR_TO
5681: IFFALSE 5764
// begin vc_chassis := us_morphling ;
5683: LD_ADDR_OWVAR 37
5687: PUSH
5688: LD_INT 5
5690: ST_TO_ADDR
// vc_engine := engine_siberite ;
5691: LD_ADDR_OWVAR 39
5695: PUSH
5696: LD_INT 3
5698: ST_TO_ADDR
// vc_control := control_computer ;
5699: LD_ADDR_OWVAR 38
5703: PUSH
5704: LD_INT 3
5706: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons - 1 ) ] ;
5707: LD_ADDR_OWVAR 40
5711: PUSH
5712: LD_EXP 19
5716: PUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_EXP 19
5724: PUSH
5725: LD_INT 1
5727: MINUS
5728: PPUSH
5729: CALL_OW 12
5733: ARRAY
5734: ST_TO_ADDR
// un := CreateVehicle ;
5735: LD_ADDR_VAR 0 4
5739: PUSH
5740: CALL_OW 45
5744: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5745: LD_VAR 0 4
5749: PPUSH
5750: LD_VAR 0 6
5754: PPUSH
5755: LD_INT 0
5757: PPUSH
5758: CALL_OW 49
// end ;
5762: GO 5680
5764: POP
5765: POP
// end ; 42 :
5766: GO 6697
5768: LD_INT 42
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 5916
5776: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5777: LD_ADDR_VAR 0 6
5781: PUSH
5782: LD_EXP 15
5786: PUSH
5787: LD_INT 1
5789: PPUSH
5790: LD_EXP 15
5794: PPUSH
5795: CALL_OW 12
5799: ARRAY
5800: ST_TO_ADDR
// uc_side := 1 ;
5801: LD_ADDR_OWVAR 20
5805: PUSH
5806: LD_INT 1
5808: ST_TO_ADDR
// uc_nation := 1 ;
5809: LD_ADDR_OWVAR 21
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// for i = 1 to american_force do
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: DOUBLE
5823: LD_INT 1
5825: DEC
5826: ST_TO_ADDR
5827: LD_EXP 22
5831: PUSH
5832: FOR_TO
5833: IFFALSE 5912
// begin vc_chassis := us_morphling ;
5835: LD_ADDR_OWVAR 37
5839: PUSH
5840: LD_INT 5
5842: ST_TO_ADDR
// vc_engine := engine_siberite ;
5843: LD_ADDR_OWVAR 39
5847: PUSH
5848: LD_INT 3
5850: ST_TO_ADDR
// vc_control := control_computer ;
5851: LD_ADDR_OWVAR 38
5855: PUSH
5856: LD_INT 3
5858: ST_TO_ADDR
// vc_weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
5859: LD_ADDR_OWVAR 40
5863: PUSH
5864: LD_EXP 19
5868: PUSH
5869: LD_INT 1
5871: PPUSH
5872: LD_EXP 19
5876: PPUSH
5877: CALL_OW 12
5881: ARRAY
5882: ST_TO_ADDR
// un := CreateVehicle ;
5883: LD_ADDR_VAR 0 4
5887: PUSH
5888: CALL_OW 45
5892: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5893: LD_VAR 0 4
5897: PPUSH
5898: LD_VAR 0 6
5902: PPUSH
5903: LD_INT 0
5905: PPUSH
5906: CALL_OW 49
// end ;
5910: GO 5832
5912: POP
5913: POP
// end ; 51 :
5914: GO 6697
5916: LD_INT 51
5918: DOUBLE
5919: EQUAL
5920: IFTRUE 5924
5922: GO 6064
5924: POP
// begin area := areas [ Rand ( 1 , areas ) ] ;
5925: LD_ADDR_VAR 0 6
5929: PUSH
5930: LD_EXP 15
5934: PUSH
5935: LD_INT 1
5937: PPUSH
5938: LD_EXP 15
5942: PPUSH
5943: CALL_OW 12
5947: ARRAY
5948: ST_TO_ADDR
// uc_side := 3 ;
5949: LD_ADDR_OWVAR 20
5953: PUSH
5954: LD_INT 3
5956: ST_TO_ADDR
// uc_nation := 3 ;
5957: LD_ADDR_OWVAR 21
5961: PUSH
5962: LD_INT 3
5964: ST_TO_ADDR
// for i = 1 to russian_force do
5965: LD_ADDR_VAR 0 2
5969: PUSH
5970: DOUBLE
5971: LD_INT 1
5973: DEC
5974: ST_TO_ADDR
5975: LD_EXP 21
5979: PUSH
5980: FOR_TO
5981: IFFALSE 6060
// begin vc_chassis := ru_heavy_tracked ;
5983: LD_ADDR_OWVAR 37
5987: PUSH
5988: LD_INT 24
5990: ST_TO_ADDR
// vc_engine := engine_siberite ;
5991: LD_ADDR_OWVAR 39
5995: PUSH
5996: LD_INT 3
5998: ST_TO_ADDR
// vc_control := control_computer ;
5999: LD_ADDR_OWVAR 38
6003: PUSH
6004: LD_INT 3
6006: ST_TO_ADDR
// vc_weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_EXP 18
6016: PUSH
6017: LD_INT 1
6019: PPUSH
6020: LD_EXP 18
6024: PPUSH
6025: CALL_OW 12
6029: ARRAY
6030: ST_TO_ADDR
// un := CreateVehicle ;
6031: LD_ADDR_VAR 0 4
6035: PUSH
6036: CALL_OW 45
6040: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6041: LD_VAR 0 4
6045: PPUSH
6046: LD_VAR 0 6
6050: PPUSH
6051: LD_INT 0
6053: PPUSH
6054: CALL_OW 49
// end ;
6058: GO 5980
6060: POP
6061: POP
// end ; 91 :
6062: GO 6697
6064: LD_INT 91
6066: DOUBLE
6067: EQUAL
6068: IFTRUE 6072
6070: GO 6210
6072: POP
// begin uc_side := 8 ;
6073: LD_ADDR_OWVAR 20
6077: PUSH
6078: LD_INT 8
6080: ST_TO_ADDR
// uc_nation := 1 ;
6081: LD_ADDR_OWVAR 21
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ game_difficulty ] do
6089: LD_ADDR_VAR 0 2
6093: PUSH
6094: DOUBLE
6095: LD_INT 1
6097: DEC
6098: ST_TO_ADDR
6099: LD_INT 5
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: PUSH
6113: LD_EXP 2
6117: ARRAY
6118: PUSH
6119: FOR_TO
6120: IFFALSE 6206
// begin vc_chassis := us_heavy_tracked ;
6122: LD_ADDR_OWVAR 37
6126: PUSH
6127: LD_INT 4
6129: ST_TO_ADDR
// vc_engine := engine_siberite ;
6130: LD_ADDR_OWVAR 39
6134: PUSH
6135: LD_INT 3
6137: ST_TO_ADDR
// vc_control := control_computer ;
6138: LD_ADDR_OWVAR 38
6142: PUSH
6143: LD_INT 3
6145: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_heavy_gun ] [ Rand ( 1 , 2 ) ] ;
6146: LD_ADDR_OWVAR 40
6150: PUSH
6151: LD_INT 5
6153: PUSH
6154: LD_INT 6
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 1
6163: PPUSH
6164: LD_INT 2
6166: PPUSH
6167: CALL_OW 12
6171: ARRAY
6172: ST_TO_ADDR
// un := CreateVehicle ;
6173: LD_ADDR_VAR 0 4
6177: PUSH
6178: CALL_OW 45
6182: ST_TO_ADDR
// PlaceUnitArea ( un , areas [ 1 ] , false ) ;
6183: LD_VAR 0 4
6187: PPUSH
6188: LD_EXP 15
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: LD_INT 0
6199: PPUSH
6200: CALL_OW 49
// end ;
6204: GO 6119
6206: POP
6207: POP
// end ; 92 :
6208: GO 6697
6210: LD_INT 92
6212: DOUBLE
6213: EQUAL
6214: IFTRUE 6218
6216: GO 6547
6218: POP
// begin uc_side := 5 ;
6219: LD_ADDR_OWVAR 20
6223: PUSH
6224: LD_INT 5
6226: ST_TO_ADDR
// uc_nation := 2 ;
6227: LD_ADDR_OWVAR 21
6231: PUSH
6232: LD_INT 2
6234: ST_TO_ADDR
// filter := [ ] ;
6235: LD_ADDR_VAR 0 3
6239: PUSH
6240: EMPTY
6241: ST_TO_ADDR
// InitHc ;
6242: CALL_OW 19
// PrepareHuman ( false , 1 , l_skill ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 1
6251: PPUSH
6252: LD_EXP 50
6256: PPUSH
6257: CALL_OW 380
// un := CreateHuman ;
6261: LD_ADDR_VAR 0 4
6265: PUSH
6266: CALL_OW 44
6270: ST_TO_ADDR
// filter := filter ^ un ;
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_VAR 0 3
6280: PUSH
6281: LD_VAR 0 4
6285: ADD
6286: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ game_difficulty ] do
6287: LD_ADDR_VAR 0 2
6291: PUSH
6292: DOUBLE
6293: LD_INT 1
6295: DEC
6296: ST_TO_ADDR
6297: LD_INT 4
6299: PUSH
6300: LD_INT 3
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_EXP 2
6315: ARRAY
6316: PUSH
6317: FOR_TO
6318: IFFALSE 6356
// begin un := CreateHumanWithClass ( 1 , l_skill ) ;
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: LD_EXP 50
6332: PPUSH
6333: CALL 7285 0 2
6337: ST_TO_ADDR
// filter := filter ^ un ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_VAR 0 3
6347: PUSH
6348: LD_VAR 0 4
6352: ADD
6353: ST_TO_ADDR
// end ;
6354: GO 6317
6356: POP
6357: POP
// DialogueOn ;
6358: CALL_OW 6
// if GetSex ( filter [ 1 ] ) = sex_male then
6362: LD_VAR 0 3
6366: PUSH
6367: LD_INT 1
6369: ARRAY
6370: PPUSH
6371: CALL_OW 258
6375: PUSH
6376: LD_INT 1
6378: EQUAL
6379: IFFALSE 6399
// SayRadio ( filter [ 1 ] , DS-DF-1 ) else
6381: LD_VAR 0 3
6385: PUSH
6386: LD_INT 1
6388: ARRAY
6389: PPUSH
6390: LD_STRING DS-DF-1
6392: PPUSH
6393: CALL_OW 94
6397: GO 6415
// SayRadio ( filter [ 1 ] , DS-DF-f1 ) ;
6399: LD_VAR 0 3
6403: PUSH
6404: LD_INT 1
6406: ARRAY
6407: PPUSH
6408: LD_STRING DS-DF-f1
6410: PPUSH
6411: CALL_OW 94
// case Query ( DS-dezert ) of 1 :
6415: LD_STRING DS-dezert
6417: PPUSH
6418: CALL_OW 97
6422: PUSH
6423: LD_INT 1
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6446
6431: POP
// Say ( l_cmndr , DS-DC-dis ) ; 2 :
6432: LD_EXP 49
6436: PPUSH
6437: LD_STRING DS-DC-dis
6439: PPUSH
6440: CALL_OW 88
6444: GO 6541
6446: LD_INT 2
6448: DOUBLE
6449: EQUAL
6450: IFTRUE 6454
6452: GO 6540
6454: POP
// begin Say ( l_cmndr , DS-DC-acp ) ;
6455: LD_EXP 49
6459: PPUSH
6460: LD_STRING DS-DC-acp
6462: PPUSH
6463: CALL_OW 88
// for i = 1 to filter do
6467: LD_ADDR_VAR 0 2
6471: PUSH
6472: DOUBLE
6473: LD_INT 1
6475: DEC
6476: ST_TO_ADDR
6477: LD_VAR 0 3
6481: PUSH
6482: FOR_TO
6483: IFFALSE 6536
// begin SetSide ( filter [ i ] , 8 ) ;
6485: LD_VAR 0 3
6489: PUSH
6490: LD_VAR 0 2
6494: ARRAY
6495: PPUSH
6496: LD_INT 8
6498: PPUSH
6499: CALL_OW 235
// PlaceUnitArea ( filter [ i ] , south_spawn , false ) ;
6503: LD_VAR 0 3
6507: PUSH
6508: LD_VAR 0 2
6512: ARRAY
6513: PPUSH
6514: LD_INT 4
6516: PPUSH
6517: LD_INT 0
6519: PPUSH
6520: CALL_OW 49
// CenterNowOnXY ( 111 , 121 ) ;
6524: LD_INT 111
6526: PPUSH
6527: LD_INT 121
6529: PPUSH
6530: CALL_OW 86
// end ;
6534: GO 6482
6536: POP
6537: POP
// end ; end ;
6538: GO 6541
6540: POP
// DialogueOff ;
6541: CALL_OW 7
// end ; 101 :
6545: GO 6697
6547: LD_INT 101
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6607
6555: POP
// begin CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6556: LD_INT 3
6558: PPUSH
6559: LD_INT 5
6561: PPUSH
6562: CALL_OW 12
6566: PPUSH
6567: LD_INT 9
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: CALL_OW 55
// Wait ( 0 0$11 ) ;
6577: LD_INT 385
6579: PPUSH
6580: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , crates_area , true ) ;
6584: LD_INT 3
6586: PPUSH
6587: LD_INT 5
6589: PPUSH
6590: CALL_OW 12
6594: PPUSH
6595: LD_INT 9
6597: PPUSH
6598: LD_INT 1
6600: PPUSH
6601: CALL_OW 55
// end ; 200 :
6605: GO 6697
6607: LD_INT 200
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6696
6615: POP
// begin Say ( Leopold , DS-end ) ;
6616: LD_EXP 7
6620: PPUSH
6621: LD_STRING DS-end
6623: PPUSH
6624: CALL_OW 88
// if Difficulty = 3 then
6628: LD_OWVAR 67
6632: PUSH
6633: LD_INT 3
6635: EQUAL
6636: IFFALSE 6645
// SetAchievement ( ACH_DESERT ) ;
6638: LD_STRING ACH_DESERT
6640: PPUSH
6641: CALL_OW 543
// music_nat := 5 ;
6645: LD_ADDR_OWVAR 71
6649: PUSH
6650: LD_INT 5
6652: ST_TO_ADDR
// AddMedal ( dsmed1 , 1 ) ;
6653: LD_STRING dsmed1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6663: LD_STRING dsmed1
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 101
// AddMedal ( dsmed1 , 1 ) ;
6673: LD_STRING dsmed1
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 101
// GiveMedals ( MAIN ) ;
6683: LD_STRING MAIN
6685: PPUSH
6686: CALL_OW 102
// YouWin ;
6690: CALL_OW 103
// end ; end ;
6694: GO 6697
6696: POP
// end ;
6697: PPOPN 6
6699: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
6700: LD_VAR 0 1
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 2
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 21
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: IN
6734: IFFALSE 6859
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
6736: LD_INT 105
6738: PPUSH
6739: LD_INT 210
6741: PPUSH
6742: CALL_OW 12
6746: PPUSH
6747: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6751: LD_VAR 0 1
6755: PPUSH
6756: CALL_OW 250
6760: PPUSH
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 251
6770: PPUSH
6771: LD_INT 3
6773: PPUSH
6774: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6778: LD_VAR 0 1
6782: PPUSH
6783: CALL_OW 250
6787: PPUSH
6788: LD_VAR 0 1
6792: PPUSH
6793: CALL_OW 251
6797: PPUSH
6798: LD_INT 3
6800: PPUSH
6801: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6805: LD_VAR 0 1
6809: PPUSH
6810: CALL_OW 250
6814: PPUSH
6815: LD_VAR 0 1
6819: PPUSH
6820: CALL_OW 251
6824: PPUSH
6825: LD_INT 3
6827: PPUSH
6828: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 250
6841: PPUSH
6842: LD_VAR 0 1
6846: PPUSH
6847: CALL_OW 251
6851: PPUSH
6852: LD_INT 3
6854: PPUSH
6855: CALL_OW 453
// end ; end ;
6859: PPOPN 1
6861: END
// on UnitDestroyed ( un ) do begin if un = fort then
6862: LD_VAR 0 1
6866: PUSH
6867: LD_INT 23
6869: EQUAL
6870: IFFALSE 6880
// fort_destroyed := true ;
6872: LD_ADDR_EXP 32
6876: PUSH
6877: LD_INT 1
6879: ST_TO_ADDR
// if un = l_cmndr then
6880: LD_VAR 0 1
6884: PUSH
6885: LD_EXP 49
6889: EQUAL
6890: IFFALSE 6900
// hero_died := true ;
6892: LD_ADDR_EXP 33
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: PPOPN 1
6902: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 3
6917: PPUSH
6918: CALL 8622 0 3
// end ;
6922: PPOPN 3
6924: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL 8720 0 1
// end ; end_of_file
6934: PPOPN 1
6936: END
// export function RefreshTime ( time , bool ) ; begin
6937: LD_INT 0
6939: PPUSH
// if bool then
6940: LD_VAR 0 2
6944: IFFALSE 6962
// time := time + 0 0$01 else
6946: LD_ADDR_VAR 0 1
6950: PUSH
6951: LD_VAR 0 1
6955: PUSH
6956: LD_INT 35
6958: PLUS
6959: ST_TO_ADDR
6960: GO 6976
// time := time - 0 0$01 ;
6962: LD_ADDR_VAR 0 1
6966: PUSH
6967: LD_VAR 0 1
6971: PUSH
6972: LD_INT 35
6974: MINUS
6975: ST_TO_ADDR
// result := time ;
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_VAR 0 1
6985: ST_TO_ADDR
// end ;
6986: LD_VAR 0 3
6990: RET
// export function MineExist ( side ) ; begin
6991: LD_INT 0
6993: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_mine ] ] ) > 0 then
6994: LD_INT 22
6996: PUSH
6997: LD_VAR 0 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 30
7008: PUSH
7009: LD_INT 30
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 69
7024: PUSH
7025: LD_INT 0
7027: GREATER
7028: IFFALSE 7040
// result := true else
7030: LD_ADDR_VAR 0 2
7034: PUSH
7035: LD_INT 1
7037: ST_TO_ADDR
7038: GO 7048
// result := false ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_INT 0
7047: ST_TO_ADDR
// end ;
7048: LD_VAR 0 2
7052: RET
// export function FacExist ( side ) ; begin
7053: LD_INT 0
7055: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_factory ] ] ) > 0 ;
7056: LD_ADDR_VAR 0 2
7060: PUSH
7061: LD_INT 22
7063: PUSH
7064: LD_VAR 0 1
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 30
7075: PUSH
7076: LD_INT 3
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: PUSH
7092: LD_INT 0
7094: GREATER
7095: ST_TO_ADDR
// end ;
7096: LD_VAR 0 2
7100: RET
// export function ConnectWithTower ( side ) ; var i , filter , tower ; begin
7101: LD_INT 0
7103: PPUSH
7104: PPUSH
7105: PPUSH
7106: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] ] ) ;
7107: LD_ADDR_VAR 0 4
7111: PUSH
7112: LD_INT 22
7114: PUSH
7115: LD_VAR 0 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 33
7126: PUSH
7127: LD_INT 2
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 50
7136: PUSH
7137: EMPTY
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PPUSH
7145: CALL_OW 69
7149: ST_TO_ADDR
// tower := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_control_tower ] ] ) ;
7150: LD_ADDR_VAR 0 5
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 1
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 34
7169: PUSH
7170: LD_INT 31
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: ST_TO_ADDR
// if tower > 0 and filter > 0 then
7186: LD_VAR 0 5
7190: PUSH
7191: LD_INT 0
7193: GREATER
7194: PUSH
7195: LD_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: GREATER
7203: AND
7204: IFFALSE 7280
// for i = 1 to filter do
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: DOUBLE
7212: LD_INT 1
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 4
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7278
// if not IsControledBy ( filter [ i ] ) then
7224: LD_VAR 0 4
7228: PUSH
7229: LD_VAR 0 3
7233: ARRAY
7234: PPUSH
7235: CALL_OW 312
7239: NOT
7240: IFFALSE 7276
// ComLinkTo ( filter [ i ] , tower [ Rand ( 1 , tower ) ] ) ;
7242: LD_VAR 0 4
7246: PUSH
7247: LD_VAR 0 3
7251: ARRAY
7252: PPUSH
7253: LD_VAR 0 5
7257: PUSH
7258: LD_INT 1
7260: PPUSH
7261: LD_VAR 0 5
7265: PPUSH
7266: CALL_OW 12
7270: ARRAY
7271: PPUSH
7272: CALL_OW 135
7276: GO 7221
7278: POP
7279: POP
// end ;
7280: LD_VAR 0 2
7284: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
7285: LD_INT 0
7287: PPUSH
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
// hc_class := clas ;
7293: LD_ADDR_OWVAR 28
7297: PUSH
7298: LD_VAR 0 1
7302: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
7303: LD_ADDR_VAR 0 4
7307: PUSH
7308: LD_VAR 0 2
7312: PUSH
7313: LD_INT 1
7315: NEG
7316: PPUSH
7317: LD_INT 1
7319: PPUSH
7320: CALL_OW 12
7324: PLUS
7325: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
7326: LD_ADDR_VAR 0 5
7330: PUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 1
7338: NEG
7339: PPUSH
7340: LD_INT 1
7342: PPUSH
7343: CALL_OW 12
7347: PLUS
7348: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 1
7361: NEG
7362: PPUSH
7363: LD_INT 1
7365: PPUSH
7366: CALL_OW 12
7370: PLUS
7371: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_INT 1
7384: NEG
7385: PPUSH
7386: LD_INT 1
7388: PPUSH
7389: CALL_OW 12
7393: PLUS
7394: ST_TO_ADDR
// if clas = 1 or clas = 9 or clas = class_sniper or clas = class_mortar then
7395: LD_VAR 0 1
7399: PUSH
7400: LD_INT 1
7402: EQUAL
7403: PUSH
7404: LD_VAR 0 1
7408: PUSH
7409: LD_INT 9
7411: EQUAL
7412: OR
7413: PUSH
7414: LD_VAR 0 1
7418: PUSH
7419: LD_INT 5
7421: EQUAL
7422: OR
7423: PUSH
7424: LD_VAR 0 1
7428: PUSH
7429: LD_INT 8
7431: EQUAL
7432: OR
7433: IFFALSE 7458
// bonus := [ 2 , 0 , 0 , 0 ] ;
7435: LD_ADDR_VAR 0 8
7439: PUSH
7440: LD_INT 2
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: ST_TO_ADDR
// if clas = 2 then
7458: LD_VAR 0 1
7462: PUSH
7463: LD_INT 2
7465: EQUAL
7466: IFFALSE 7491
// bonus := [ 0 , 2 , 0 , 0 ] ;
7468: LD_ADDR_VAR 0 8
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: LD_INT 0
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: ST_TO_ADDR
// if clas = 3 then
7491: LD_VAR 0 1
7495: PUSH
7496: LD_INT 3
7498: EQUAL
7499: IFFALSE 7524
// bonus := [ 0 , 0 , 2 , 0 ] ;
7501: LD_ADDR_VAR 0 8
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: LD_INT 2
7514: PUSH
7515: LD_INT 0
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: ST_TO_ADDR
// if clas = 4 then
7524: LD_VAR 0 1
7528: PUSH
7529: LD_INT 4
7531: EQUAL
7532: IFFALSE 7557
// bonus := [ 0 , 0 , 0 , 2 ] ;
7534: LD_ADDR_VAR 0 8
7538: PUSH
7539: LD_INT 0
7541: PUSH
7542: LD_INT 0
7544: PUSH
7545: LD_INT 0
7547: PUSH
7548: LD_INT 2
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: ST_TO_ADDR
// if clas > 4 and clas <> 9 and clas <> class_sniper and clas <> class_mortar then
7557: LD_VAR 0 1
7561: PUSH
7562: LD_INT 4
7564: GREATER
7565: PUSH
7566: LD_VAR 0 1
7570: PUSH
7571: LD_INT 9
7573: NONEQUAL
7574: AND
7575: PUSH
7576: LD_VAR 0 1
7580: PUSH
7581: LD_INT 5
7583: NONEQUAL
7584: AND
7585: PUSH
7586: LD_VAR 0 1
7590: PUSH
7591: LD_INT 8
7593: NONEQUAL
7594: AND
7595: IFFALSE 7620
// bonus := [ 0 , 0 , 0 , 0 ] ;
7597: LD_ADDR_VAR 0 8
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: LD_INT 0
7610: PUSH
7611: LD_INT 0
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
7620: LD_ADDR_OWVAR 30
7624: PUSH
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 2
7630: PPUSH
7631: CALL_OW 12
7635: PUSH
7636: LD_INT 0
7638: PPUSH
7639: LD_INT 2
7641: PPUSH
7642: CALL_OW 12
7646: PUSH
7647: LD_INT 0
7649: PPUSH
7650: LD_INT 2
7652: PPUSH
7653: CALL_OW 12
7657: PUSH
7658: LD_INT 0
7660: PPUSH
7661: LD_INT 2
7663: PPUSH
7664: CALL_OW 12
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
7675: LD_ADDR_OWVAR 31
7679: PUSH
7680: LD_VAR 0 4
7684: PUSH
7685: LD_VAR 0 8
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PLUS
7694: PUSH
7695: LD_VAR 0 5
7699: PUSH
7700: LD_VAR 0 8
7704: PUSH
7705: LD_INT 2
7707: ARRAY
7708: PLUS
7709: PUSH
7710: LD_VAR 0 6
7714: PUSH
7715: LD_VAR 0 8
7719: PUSH
7720: LD_INT 3
7722: ARRAY
7723: PLUS
7724: PUSH
7725: LD_VAR 0 7
7729: PUSH
7730: LD_VAR 0 8
7734: PUSH
7735: LD_INT 4
7737: ARRAY
7738: PLUS
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
7746: LD_ADDR_OWVAR 27
7750: PUSH
7751: LD_INT 1
7753: PPUSH
7754: LD_INT 2
7756: PPUSH
7757: CALL_OW 12
7761: ST_TO_ADDR
// hc_gallery :=  ;
7762: LD_ADDR_OWVAR 33
7766: PUSH
7767: LD_STRING 
7769: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7770: LD_ADDR_OWVAR 29
7774: PUSH
7775: LD_INT 8
7777: PPUSH
7778: LD_INT 12
7780: PPUSH
7781: CALL_OW 12
7785: PUSH
7786: LD_INT 9
7788: PPUSH
7789: LD_INT 11
7791: PPUSH
7792: CALL_OW 12
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: ST_TO_ADDR
// hc_name :=  ;
7801: LD_ADDR_OWVAR 26
7805: PUSH
7806: LD_STRING 
7808: ST_TO_ADDR
// result := CreateHuman ;
7809: LD_ADDR_VAR 0 3
7813: PUSH
7814: CALL_OW 44
7818: ST_TO_ADDR
// end ;
7819: LD_VAR 0 3
7823: RET
// export function GetSpeed ( unit ) ; begin
7824: LD_INT 0
7826: PPUSH
// result := GetProperties ( unit ) [ 1 ] ;
7827: LD_ADDR_VAR 0 2
7831: PUSH
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 464
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: ST_TO_ADDR
// end ;
7846: LD_VAR 0 2
7850: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
7851: LD_INT 0
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
7858: PPUSH
// uc_nation = nation_nature ;
7859: LD_ADDR_OWVAR 21
7863: PUSH
7864: LD_INT 0
7866: ST_TO_ADDR
// uc_side = 0 ;
7867: LD_ADDR_OWVAR 20
7871: PUSH
7872: LD_INT 0
7874: ST_TO_ADDR
// l = 0 ;
7875: LD_ADDR_VAR 0 7
7879: PUSH
7880: LD_INT 0
7882: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7883: LD_ADDR_OWVAR 24
7887: PUSH
7888: LD_INT 0
7890: PPUSH
7891: LD_INT 5
7893: PPUSH
7894: CALL_OW 12
7898: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
7899: LD_ADDR_OWVAR 35
7903: PUSH
7904: LD_INT 5
7906: NEG
7907: PPUSH
7908: LD_INT 0
7910: PPUSH
7911: CALL_OW 12
7915: ST_TO_ADDR
// hc_gallery =  ;
7916: LD_ADDR_OWVAR 33
7920: PUSH
7921: LD_STRING 
7923: ST_TO_ADDR
// hc_class = class_apeman ;
7924: LD_ADDR_OWVAR 28
7928: PUSH
7929: LD_INT 12
7931: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7932: LD_ADDR_OWVAR 29
7936: PUSH
7937: LD_INT 11
7939: PPUSH
7940: LD_INT 13
7942: PPUSH
7943: CALL_OW 12
7947: PUSH
7948: LD_INT 10
7950: PPUSH
7951: LD_INT 11
7953: PPUSH
7954: CALL_OW 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: ST_TO_ADDR
// hc_sex = sex_male ;
7963: LD_ADDR_OWVAR 27
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7971: LD_ADDR_OWVAR 31
7975: PUSH
7976: LD_INT 0
7978: PPUSH
7979: LD_INT 2
7981: PPUSH
7982: CALL_OW 12
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: LD_INT 0
7992: PUSH
7993: LD_INT 0
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
// apeman = CreateHuman ;
8002: LD_ADDR_VAR 0 8
8006: PUSH
8007: CALL_OW 44
8011: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8012: LD_VAR 0 8
8016: PPUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: LD_INT 0
8024: PPUSH
8025: CALL_OW 49
// l = l + 1 ;
8029: LD_ADDR_VAR 0 7
8033: PUSH
8034: LD_VAR 0 7
8038: PUSH
8039: LD_INT 1
8041: PLUS
8042: ST_TO_ADDR
// end until l = num1 ;
8043: LD_VAR 0 7
8047: PUSH
8048: LD_VAR 0 2
8052: EQUAL
8053: IFFALSE 7883
// l = 0 ;
8055: LD_ADDR_VAR 0 7
8059: PUSH
8060: LD_INT 0
8062: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8063: LD_ADDR_OWVAR 35
8067: PUSH
8068: LD_INT 0
8070: PPUSH
8071: LD_INT 25
8073: PPUSH
8074: CALL_OW 12
8078: ST_TO_ADDR
// hc_class = class_tiger ;
8079: LD_ADDR_OWVAR 28
8083: PUSH
8084: LD_INT 14
8086: ST_TO_ADDR
// hc_sex = sex_male ;
8087: LD_ADDR_OWVAR 27
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// hc_gallery = sandnature ;
8095: LD_ADDR_OWVAR 33
8099: PUSH
8100: LD_STRING sandnature
8102: ST_TO_ADDR
// hc_face_number = 3 ;
8103: LD_ADDR_OWVAR 34
8107: PUSH
8108: LD_INT 3
8110: ST_TO_ADDR
// tiger = CreateHuman ;
8111: LD_ADDR_VAR 0 9
8115: PUSH
8116: CALL_OW 44
8120: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8121: LD_VAR 0 9
8125: PPUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: CALL_OW 49
// l = l + 1 ;
8138: LD_ADDR_VAR 0 7
8142: PUSH
8143: LD_VAR 0 7
8147: PUSH
8148: LD_INT 1
8150: PLUS
8151: ST_TO_ADDR
// end until l = num2 ;
8152: LD_VAR 0 7
8156: PUSH
8157: LD_VAR 0 3
8161: EQUAL
8162: IFFALSE 8063
// l = 0 ;
8164: LD_ADDR_VAR 0 7
8168: PUSH
8169: LD_INT 0
8171: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8172: LD_ADDR_OWVAR 28
8176: PUSH
8177: LD_INT 18
8179: ST_TO_ADDR
// hc_gallery = sandnature ;
8180: LD_ADDR_OWVAR 33
8184: PUSH
8185: LD_STRING sandnature
8187: ST_TO_ADDR
// hc_face_number = 1 ;
8188: LD_ADDR_OWVAR 34
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// bird = CreateHuman ;
8196: LD_ADDR_VAR 0 10
8200: PUSH
8201: CALL_OW 44
8205: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8206: LD_VAR 0 10
8210: PPUSH
8211: LD_INT 0
8213: PPUSH
8214: CALL_OW 51
// l = l + 1 ;
8218: LD_ADDR_VAR 0 7
8222: PUSH
8223: LD_VAR 0 7
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ST_TO_ADDR
// end until l = num3 ;
8232: LD_VAR 0 7
8236: PUSH
8237: LD_VAR 0 4
8241: EQUAL
8242: IFFALSE 8172
// l = 0 ;
8244: LD_ADDR_VAR 0 7
8248: PUSH
8249: LD_INT 0
8251: ST_TO_ADDR
// repeat begin hc_class = 21 ;
8252: LD_ADDR_OWVAR 28
8256: PUSH
8257: LD_INT 21
8259: ST_TO_ADDR
// hc_gallery = sandnature ;
8260: LD_ADDR_OWVAR 33
8264: PUSH
8265: LD_STRING sandnature
8267: ST_TO_ADDR
// hc_face_number = 5 ;
8268: LD_ADDR_OWVAR 34
8272: PUSH
8273: LD_INT 5
8275: ST_TO_ADDR
// horse := CreateHuman ;
8276: LD_ADDR_VAR 0 11
8280: PUSH
8281: CALL_OW 44
8285: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
8286: LD_VAR 0 11
8290: PPUSH
8291: LD_VAR 0 1
8295: PPUSH
8296: LD_INT 0
8298: PPUSH
8299: CALL_OW 49
// l = l + 1 ;
8303: LD_ADDR_VAR 0 7
8307: PUSH
8308: LD_VAR 0 7
8312: PUSH
8313: LD_INT 1
8315: PLUS
8316: ST_TO_ADDR
// end until l = num4 ;
8317: LD_VAR 0 7
8321: PUSH
8322: LD_VAR 0 5
8326: EQUAL
8327: IFFALSE 8252
// end ;
8329: LD_VAR 0 6
8333: RET
// export function PrepareComm ; begin
8334: LD_INT 0
8336: PPUSH
// uc_side := 1 ;
8337: LD_ADDR_OWVAR 20
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// uc_nation := 1 ;
8345: LD_ADDR_OWVAR 21
8349: PUSH
8350: LD_INT 1
8352: ST_TO_ADDR
// hc_gallery :=  ;
8353: LD_ADDR_OWVAR 33
8357: PUSH
8358: LD_STRING 
8360: ST_TO_ADDR
// hc_name :=  ;
8361: LD_ADDR_OWVAR 26
8365: PUSH
8366: LD_STRING 
8368: ST_TO_ADDR
// hc_class := 1 ;
8369: LD_ADDR_OWVAR 28
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// hc_sex := sex_male ;
8377: LD_ADDR_OWVAR 27
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// am_comander := CreateHuman ;
8385: LD_ADDR_EXP 46
8389: PUSH
8390: CALL_OW 44
8394: ST_TO_ADDR
// uc_side := 3 ;
8395: LD_ADDR_OWVAR 20
8399: PUSH
8400: LD_INT 3
8402: ST_TO_ADDR
// uc_nation := 3 ;
8403: LD_ADDR_OWVAR 21
8407: PUSH
8408: LD_INT 3
8410: ST_TO_ADDR
// ru_comander := CreateHuman ;
8411: LD_ADDR_EXP 47
8415: PUSH
8416: CALL_OW 44
8420: ST_TO_ADDR
// uc_side := 2 ;
8421: LD_ADDR_OWVAR 20
8425: PUSH
8426: LD_INT 2
8428: ST_TO_ADDR
// uc_nation := 2 ;
8429: LD_ADDR_OWVAR 21
8433: PUSH
8434: LD_INT 2
8436: ST_TO_ADDR
// hc_name := Heike Steyer ;
8437: LD_ADDR_OWVAR 26
8441: PUSH
8442: LD_STRING Heike Steyer
8444: ST_TO_ADDR
// hc_sex := sex_female ;
8445: LD_ADDR_OWVAR 27
8449: PUSH
8450: LD_INT 2
8452: ST_TO_ADDR
// hc_gallery := sandar ;
8453: LD_ADDR_OWVAR 33
8457: PUSH
8458: LD_STRING sandar
8460: ST_TO_ADDR
// hc_face_number := 14 ;
8461: LD_ADDR_OWVAR 34
8465: PUSH
8466: LD_INT 14
8468: ST_TO_ADDR
// ar_comander := CreateHuman ;
8469: LD_ADDR_EXP 48
8473: PUSH
8474: CALL_OW 44
8478: ST_TO_ADDR
// end ;
8479: LD_VAR 0 1
8483: RET
// export function SpeedFilter ( filter , speed ) ; var list , i ; begin
8484: LD_INT 0
8486: PPUSH
8487: PPUSH
8488: PPUSH
// list := [ ] ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: EMPTY
8495: ST_TO_ADDR
// for i = 1 to filter do
8496: LD_ADDR_VAR 0 5
8500: PUSH
8501: DOUBLE
8502: LD_INT 1
8504: DEC
8505: ST_TO_ADDR
8506: LD_VAR 0 1
8510: PUSH
8511: FOR_TO
8512: IFFALSE 8561
// if GetSpeed ( filter [ i ] ) < speed then
8514: LD_VAR 0 1
8518: PUSH
8519: LD_VAR 0 5
8523: ARRAY
8524: PPUSH
8525: CALL 7824 0 1
8529: PUSH
8530: LD_VAR 0 2
8534: LESS
8535: IFFALSE 8559
// list := list ^ filter [ i ] ;
8537: LD_ADDR_VAR 0 4
8541: PUSH
8542: LD_VAR 0 4
8546: PUSH
8547: LD_VAR 0 1
8551: PUSH
8552: LD_VAR 0 5
8556: ARRAY
8557: ADD
8558: ST_TO_ADDR
8559: GO 8511
8561: POP
8562: POP
// result := list ;
8563: LD_ADDR_VAR 0 3
8567: PUSH
8568: LD_VAR 0 4
8572: ST_TO_ADDR
// end ; end_of_file
8573: LD_VAR 0 3
8577: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
8578: GO 8580
8580: DISABLE
// begin ru_radar := 98 ;
8581: LD_ADDR_EXP 52
8585: PUSH
8586: LD_INT 98
8588: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8589: LD_ADDR_EXP 53
8593: PUSH
8594: LD_INT 89
8596: ST_TO_ADDR
// us_hack := 99 ;
8597: LD_ADDR_EXP 54
8601: PUSH
8602: LD_INT 99
8604: ST_TO_ADDR
// us_artillery := 97 ;
8605: LD_ADDR_EXP 55
8609: PUSH
8610: LD_INT 97
8612: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8613: LD_ADDR_EXP 56
8617: PUSH
8618: LD_INT 91
8620: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
8621: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
8626: PPUSH
8627: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 264
8637: PUSH
8638: LD_EXP 56
8642: EQUAL
8643: IFFALSE 8715
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
8645: LD_INT 68
8647: PPUSH
8648: LD_VAR 0 1
8652: PPUSH
8653: CALL_OW 255
8657: PPUSH
8658: CALL_OW 321
8662: PUSH
8663: LD_INT 2
8665: EQUAL
8666: IFFALSE 8678
// eff := 70 else
8668: LD_ADDR_VAR 0 6
8672: PUSH
8673: LD_INT 70
8675: ST_TO_ADDR
8676: GO 8686
// eff := 30 ;
8678: LD_ADDR_VAR 0 6
8682: PUSH
8683: LD_INT 30
8685: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 250
8695: PPUSH
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 251
8705: PPUSH
8706: LD_VAR 0 6
8710: PPUSH
8711: CALL_OW 495
// end ; end ;
8715: LD_VAR 0 4
8719: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
8720: LD_INT 0
8722: PPUSH
8723: PPUSH
8724: PPUSH
8725: PPUSH
8726: PPUSH
8727: PPUSH
// if cmd = 124 then
8728: LD_VAR 0 1
8732: PUSH
8733: LD_INT 124
8735: EQUAL
8736: IFFALSE 8942
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
8738: LD_ADDR_VAR 0 5
8742: PUSH
8743: LD_INT 2
8745: PUSH
8746: LD_INT 34
8748: PUSH
8749: LD_INT 53
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 34
8758: PUSH
8759: LD_INT 14
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 69
8775: ST_TO_ADDR
// if not tmp then
8776: LD_VAR 0 5
8780: NOT
8781: IFFALSE 8785
// exit ;
8783: GO 8942
// for i in tmp do
8785: LD_ADDR_VAR 0 3
8789: PUSH
8790: LD_VAR 0 5
8794: PUSH
8795: FOR_IN
8796: IFFALSE 8940
// begin taskList := GetTaskList ( i ) ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: CALL_OW 437
8812: ST_TO_ADDR
// if not taskList then
8813: LD_VAR 0 6
8817: NOT
8818: IFFALSE 8822
// continue ;
8820: GO 8795
// for j = 1 to taskList do
8822: LD_ADDR_VAR 0 4
8826: PUSH
8827: DOUBLE
8828: LD_INT 1
8830: DEC
8831: ST_TO_ADDR
8832: LD_VAR 0 6
8836: PUSH
8837: FOR_TO
8838: IFFALSE 8936
// if taskList [ j ] [ 1 ] = | then
8840: LD_VAR 0 6
8844: PUSH
8845: LD_VAR 0 4
8849: ARRAY
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PUSH
8855: LD_STRING |
8857: EQUAL
8858: IFFALSE 8934
// begin _taskList := Delete ( taskList , 1 ) ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_VAR 0 6
8869: PPUSH
8870: LD_INT 1
8872: PPUSH
8873: CALL_OW 3
8877: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
8878: LD_VAR 0 3
8882: PPUSH
8883: LD_VAR 0 7
8887: PPUSH
8888: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
8892: LD_VAR 0 3
8896: PPUSH
8897: LD_VAR 0 6
8901: PUSH
8902: LD_VAR 0 4
8906: ARRAY
8907: PUSH
8908: LD_INT 2
8910: ARRAY
8911: PPUSH
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 4
8921: ARRAY
8922: PUSH
8923: LD_INT 3
8925: ARRAY
8926: PPUSH
8927: LD_INT 8
8929: PPUSH
8930: CALL 8947 0 4
// end ;
8934: GO 8837
8936: POP
8937: POP
// end ;
8938: GO 8795
8940: POP
8941: POP
// end ; end ;
8942: LD_VAR 0 2
8946: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
8947: LD_INT 0
8949: PPUSH
8950: PPUSH
8951: PPUSH
8952: PPUSH
8953: PPUSH
8954: PPUSH
8955: PPUSH
8956: PPUSH
8957: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
8958: LD_VAR 0 1
8962: NOT
8963: PUSH
8964: LD_VAR 0 2
8968: PPUSH
8969: LD_VAR 0 3
8973: PPUSH
8974: CALL_OW 488
8978: NOT
8979: OR
8980: PUSH
8981: LD_VAR 0 4
8985: NOT
8986: OR
8987: IFFALSE 8991
// exit ;
8989: GO 9331
// list := [ ] ;
8991: LD_ADDR_VAR 0 13
8995: PUSH
8996: EMPTY
8997: ST_TO_ADDR
// if x - r < 0 then
8998: LD_VAR 0 2
9002: PUSH
9003: LD_VAR 0 4
9007: MINUS
9008: PUSH
9009: LD_INT 0
9011: LESS
9012: IFFALSE 9024
// min_x := 0 else
9014: LD_ADDR_VAR 0 7
9018: PUSH
9019: LD_INT 0
9021: ST_TO_ADDR
9022: GO 9040
// min_x := x - r ;
9024: LD_ADDR_VAR 0 7
9028: PUSH
9029: LD_VAR 0 2
9033: PUSH
9034: LD_VAR 0 4
9038: MINUS
9039: ST_TO_ADDR
// if y - r < 0 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_VAR 0 4
9049: MINUS
9050: PUSH
9051: LD_INT 0
9053: LESS
9054: IFFALSE 9066
// min_y := 0 else
9056: LD_ADDR_VAR 0 8
9060: PUSH
9061: LD_INT 0
9063: ST_TO_ADDR
9064: GO 9082
// min_y := y - r ;
9066: LD_ADDR_VAR 0 8
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: LD_VAR 0 4
9080: MINUS
9081: ST_TO_ADDR
// max_x := x + r ;
9082: LD_ADDR_VAR 0 9
9086: PUSH
9087: LD_VAR 0 2
9091: PUSH
9092: LD_VAR 0 4
9096: PLUS
9097: ST_TO_ADDR
// max_y := y + r ;
9098: LD_ADDR_VAR 0 10
9102: PUSH
9103: LD_VAR 0 3
9107: PUSH
9108: LD_VAR 0 4
9112: PLUS
9113: ST_TO_ADDR
// for _x = min_x to max_x do
9114: LD_ADDR_VAR 0 11
9118: PUSH
9119: DOUBLE
9120: LD_VAR 0 7
9124: DEC
9125: ST_TO_ADDR
9126: LD_VAR 0 9
9130: PUSH
9131: FOR_TO
9132: IFFALSE 9249
// for _y = min_y to max_y do
9134: LD_ADDR_VAR 0 12
9138: PUSH
9139: DOUBLE
9140: LD_VAR 0 8
9144: DEC
9145: ST_TO_ADDR
9146: LD_VAR 0 10
9150: PUSH
9151: FOR_TO
9152: IFFALSE 9245
// begin if not ValidHex ( _x , _y ) then
9154: LD_VAR 0 11
9158: PPUSH
9159: LD_VAR 0 12
9163: PPUSH
9164: CALL_OW 488
9168: NOT
9169: IFFALSE 9173
// continue ;
9171: GO 9151
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
9173: LD_VAR 0 11
9177: PPUSH
9178: LD_VAR 0 12
9182: PPUSH
9183: CALL_OW 351
9187: PUSH
9188: LD_VAR 0 11
9192: PPUSH
9193: LD_VAR 0 12
9197: PPUSH
9198: CALL_OW 554
9202: AND
9203: IFFALSE 9243
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
9205: LD_ADDR_VAR 0 13
9209: PUSH
9210: LD_VAR 0 13
9214: PPUSH
9215: LD_VAR 0 13
9219: PUSH
9220: LD_INT 1
9222: PLUS
9223: PPUSH
9224: LD_VAR 0 11
9228: PUSH
9229: LD_VAR 0 12
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 2
9242: ST_TO_ADDR
// end ;
9243: GO 9151
9245: POP
9246: POP
9247: GO 9131
9249: POP
9250: POP
// if not list then
9251: LD_VAR 0 13
9255: NOT
9256: IFFALSE 9260
// exit ;
9258: GO 9331
// for i in list do
9260: LD_ADDR_VAR 0 6
9264: PUSH
9265: LD_VAR 0 13
9269: PUSH
9270: FOR_IN
9271: IFFALSE 9329
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
9273: LD_VAR 0 1
9277: PPUSH
9278: LD_STRING M
9280: PUSH
9281: LD_VAR 0 6
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PUSH
9290: LD_VAR 0 6
9294: PUSH
9295: LD_INT 2
9297: ARRAY
9298: PUSH
9299: LD_INT 0
9301: PUSH
9302: LD_INT 0
9304: PUSH
9305: LD_INT 0
9307: PUSH
9308: LD_INT 0
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: PPUSH
9323: CALL_OW 447
9327: GO 9270
9329: POP
9330: POP
// end ;
9331: LD_VAR 0 5
9335: RET
